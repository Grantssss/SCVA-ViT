metric_name,file
org.apache.synapse.Constants,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public interface Constants
/*    */ {
/*    */   public static final String SYNAPSE_NAMESPACE = ""http://ws.apache.org/ns/synapse"";
/*    */   public static final String MAIN_SEQUENCE_KEY = ""main"";
/*    */   public static final String FAULT_SEQUENCE_KEY = ""fault"";
/* 38 */   public static final OMNamespace SYNAPSE_OMNAMESPACE = OMAbstractFactory.getOMFactory().createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */   public static final String SYNAPSE_CONFIG = ""synapse.config"";
/*    */   public static final String SYNAPSE_ENV = ""synapse.env"";
/*    */   public static final String SYNAPSE_XML = ""synapse.xml"";
/*    */   public static final String RELATES_TO_FOR_POX = ""RelatesToForPox"";
/*    */   public static final String OUTFLOW_ADDRESSING_ON = ""OUTFLOW_ADDRESSING_ON"";
/*    */   public static final String OUTFLOW_RM_ON = ""OUTFLOW_RM_ON"";
/*    */   public static final String OUTFLOW_RM_POLICY = ""OUTFLOW_RM_POLICY"";
/*    */   public static final String OUTFLOW_SECURITY_ON = ""OUTFLOW_SECURITY_ON"";
/*    */   public static final String OUTFLOW_SEC_POLICY = ""OUTFLOW_SEC_POLICY"";
/*    */   public static final String SCOPE_DEFAULT = ""default"";
/*    */   public static final String SCOPE_AXIS2 = ""axis2"";
/*    */   public static final String SCOPE_TRANSPORT = ""transport"";
/*    */   public static final String PROXY_SERVICE = ""proxy.name"";
/*    */   public static final String ISRESPONSE_PROPERTY = ""synapse.isresponse"";
/*    */   public static final String OUTFLOW_USE_SEPARATE_LISTENER = ""OUTFLOW_USE_SEPARATE_LISTENER"";
/*    */   public static final String ERROR_CODE = ""ERROR_CODE"";
/*    */   public static final String ERROR_MESSAGE = ""ERROR_MESSAGE"";
/*    */   public static final String ERROR_DETAIL = ""ERROR_DETAIL"";
/*    */   public static final String SANDESHA2_MODULE_NAME = ""sandesha2"";
/*    */   public static final String ADDRESSING_MODULE_NAME = ""addressing"";
/*    */   public static final String RAMPART_MODULE_NAME = ""rampart"";
/*    */   public static final String HEADER_TO = ""To"";
/*    */   public static final String HEADER_FROM = ""From"";
/*    */   public static final String HEADER_FAULT = ""FaultTo"";
/*    */   public static final String HEADER_ACTION = ""Action"";
/*    */   public static final String HEADER_REPLY_TO = ""ReplyTo"";
/*    */   public static final String HEADER_MESSAGE_ID = ""MessageID"";
/*    */   public static final String RESPONSE = ""RESPONSE"";
/*    */   public static final int TRACING_OFF = 0;
/*    */   public static final int TRACING_ON = 1;
/*    */   public static final int TRACING_UNSET = 2;
/*    */   public static final String TRACE_LOGGER = ""TRACE_LOGGER"";
/*    */   public static final String SEQUENCE_VERSION_1_0 = ""1.0"";
/*    */   public static final String SEQUENCE_VERSION_1_1 = ""1.1"";
/*    */   public static final String SANDESHA_LAST_MESSAGE = ""Sandesha2LastMessage"";
/*    */   public static final String SANDESHA_SEQUENCE_KEY = ""Sandesha2SequenceKey"";
/*    */   public static final String SANDESHA_SPEC_VERSION = ""Sandesha2RMSpecVersion"";
/*    */   public static final int STATISTICS_OFF = 0;
/*    */   public static final int STATISTICS_ON = 1;
/*    */   public static final int STATISTICS_UNSET = 2;
/*    */   public static final String SYNAPSE_ERROR = ""syapse_error"";
/*    */   public static final String SEQUENCE_STATISTICS_STACK = ""sequence_statistics_stack"";
/*    */   public static final String PROXYSERVICE_STATISTICS_STACK = ""proxyservice_statistics_stack"";
/*    */   public static final String SYNAPSESERVICE_STATISTICS_STACK = ""synapseservice_statistics_stack"";
/*    */   public static final String ENDPOINT_STATISTICS_STACK = ""endpoint_statistics_stack"";
/*    */   public static final int SEQUENCE_STATISTICS = 0;
/*    */   public static final int PROXYSERVICE_STATISTICS = 1;
/*    */   public static final int ENDPOINT_STATISTICS = 2;
/*    */   public static final long TIMEOUT_HANDLER_INTERVAL = 1000L;
/*    */   public static final int NONE = 100;
/*    */   public static final int DISCARD = 101;
/*    */   public static final int DISCARD_AND_FAULT = 102;
/*    */   public static final String TIME_OUT = ""504"";
/*    */   public static final String SENDING_FAULT = ""503"";
/*    */   public static final String PROCESSED_ENDPOINT = ""processed_endpoint"";
/*    */   public static final String ANONYMOUS_ENDPOINTS = ""AnonymousEndpoints"";
/*    */   public static final String ANONYMOUS_SEQUENCES = ""AnonymousSequences"";
/*    */   public static final String ANONYMOUS_PROXYSERVICES = ""AnonymousProxyServices"";
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\Constants.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.FaultHandler,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ import java.io.PrintWriter;
/*    */ import java.io.StringWriter;
/*    */ import java.io.Writer;
/*    */ import java.util.Stack;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class FaultHandler
/*    */ {
/*    */   public void handleFault(MessageContext synCtx) {
/*    */     try {
/* 39 */       onFault(synCtx);
/*    */     }
/* 41 */     catch (SynapseException e) {
/*    */       
/* 43 */       Stack faultStack = synCtx.getFaultStack();
/* 44 */       if (faultStack != null && !faultStack.isEmpty()) {
/* 45 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx);
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public void handleFault(MessageContext synCtx, Exception e) {
/* 52 */     if (synCtx.getProperty(""ERROR_CODE"") == null) {
/* 53 */       synCtx.setProperty(""ERROR_CODE"", ""00000"");
/*    */     }
/* 55 */     if (synCtx.getProperty(""ERROR_MESSAGE"") == null)
/*    */     {
/* 57 */       synCtx.setProperty(""ERROR_MESSAGE"", e.getMessage().split(""\n"")[0]);
/*    */     }
/* 59 */     synCtx.setProperty(""ERROR_DETAIL"", getStackTrace(e));
/*    */     
/*    */     try {
/* 62 */       onFault(synCtx);
/*    */     }
/* 64 */     catch (SynapseException se) {
/*    */       
/* 66 */       Stack faultStack = synCtx.getFaultStack();
/* 67 */       if (faultStack != null && !faultStack.isEmpty()) {
/* 68 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx, se);
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public abstract void onFault(MessageContext paramMessageContext);
/*    */ 
/*    */ 
/*    */   
/*    */   private static String getStackTrace(Throwable aThrowable) {
/* 81 */     Writer result = new StringWriter();
/* 82 */     PrintWriter printWriter = new PrintWriter(result);
/* 83 */     aThrowable.printStackTrace(printWriter);
/* 84 */     return result.toString();
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\FaultHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.Mediator,"package org.apache.synapse;
public interface Mediator {
  boolean mediate(MessageContext paramMessageContext);
  String getType();
  int getTraceState();
  void setTraceState(int paramInt);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\Mediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.MessageContext,"package org.apache.synapse;
import java.util.Set;
import java.util.Stack;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.addressing.RelatesTo;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.Endpoint;
public interface MessageContext {
  SynapseConfiguration getConfiguration();
  void setConfiguration(SynapseConfiguration paramSynapseConfiguration);
  SynapseEnvironment getEnvironment();
  void setEnvironment(SynapseEnvironment paramSynapseEnvironment);
  Mediator getMainSequence();
  Mediator getFaultSequence();
  Mediator getSequence(String paramString);
  Endpoint getEndpoint(String paramString);
  Object getProperty(String paramString);
  Object getEntry(String paramString);
  void setProperty(String paramString, Object paramObject);
  Set getPropertyKeySet();
  SOAPEnvelope getEnvelope();
  void setEnvelope(SOAPEnvelope paramSOAPEnvelope) throws AxisFault;
  EndpointReference getFaultTo();
  void setFaultTo(EndpointReference paramEndpointReference);
  EndpointReference getFrom();
  void setFrom(EndpointReference paramEndpointReference);
  String getMessageID();
  void setMessageID(String paramString);
  RelatesTo getRelatesTo();
  void setRelatesTo(RelatesTo[] paramArrayOfRelatesTo);
  EndpointReference getReplyTo();
  void setReplyTo(EndpointReference paramEndpointReference);
  EndpointReference getTo();
  void setTo(EndpointReference paramEndpointReference);
  void setWSAAction(String paramString);
  String getWSAAction();
  String getSoapAction();
  void setSoapAction(String paramString);
  void setWSAMessageID(String paramString);
  String getWSAMessageID();
  boolean isDoingMTOM();
  boolean isDoingSWA();
  void setDoingMTOM(boolean paramBoolean);
  void setDoingSWA(boolean paramBoolean);
  boolean isDoingPOX();
  void setDoingPOX(boolean paramBoolean);
  boolean isSOAP11();
  void setResponse(boolean paramBoolean);
  boolean isResponse();
  void setFaultResponse(boolean paramBoolean);
  boolean isFaultResponse();
  int getTracingState();
  void setTracingState(int paramInt);
  Stack getFaultStack();
  void pushFaultHandler(FaultHandler paramFaultHandler);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\MessageContext.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.SynapseException,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseException
/*    */   extends RuntimeException
/*    */ {
/*    */   private static final long serialVersionUID = -7244032125641596311L;
/*    */   
/* 30 */   public SynapseException(String string) { super(string); }
/*    */ 
/*    */ 
/*    */   
/* 34 */   public SynapseException(String msg, Throwable e) { super(msg, e); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public SynapseException(Throwable t) { super(t); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\SynapseException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.SynapseServer,"/*     */ package org.apache.synapse;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.ServerSocket;
/*     */ import java.util.Iterator;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.ConfigurationContextFactory;
/*     */ import org.apache.axis2.description.TransportInDescription;
/*     */ import org.apache.axis2.engine.ListenerManager;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseServer
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(SynapseServer.class);
/*     */   
/*     */   public static void printUsage() {
/*  44 */     System.out.println(""Usage: SynapseServer <repository>"");
/*  45 */     System.out.println("" Opts: -? this message"");
/*  46 */     System.exit(1);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static void main(String[] args) throws Exception {
/*  52 */     if (args.length != 1 || !(new File(args[0])).exists()) {
/*  53 */       printUsage();
/*     */     }
/*     */     
/*  56 */     System.out.println(""[SynapseServer] Using the Axis2 Repository "" + (new File(args[0])).getAbsolutePath());
/*     */ 
/*     */     
/*     */     try {
/*  60 */       ConfigurationContext configctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0], null);
/*     */ 
/*     */       
/*  63 */       ListenerManager listenerManager = configctx.getListenerManager();
/*  64 */       if (listenerManager == null) {
/*  65 */         listenerManager = new ListenerManager();
/*  66 */         listenerManager.init(configctx);
/*     */       } 
/*     */ 
/*     */       
/*  70 */       selectPort(configctx);
/*     */       
/*  72 */       Iterator iter = configctx.getAxisConfiguration().getTransportsIn().keySet().iterator();
/*     */       
/*  74 */       while (iter.hasNext()) {
/*  75 */         String trp = iter.next();
/*  76 */         TransportInDescription trsIn = (TransportInDescription)configctx.getAxisConfiguration().getTransportsIn().get(trp);
/*     */         
/*  78 */         listenerManager.addListener(trsIn, false);
/*  79 */         String msg = ""[SynapseServer] Starting transport "" + trsIn.getName();
/*  80 */         if (trsIn.getParameter(""port"") != null) {
/*  81 */           msg = msg + "" on port "" + trsIn.getParameter(""port"").getValue();
/*     */         }
/*  83 */         System.out.println(msg);
/*     */       } 
/*  85 */       System.out.println(""[SynapseServer] Ready"");
/*     */     }
/*  87 */     catch (Throwable t) {
/*  88 */       t.printStackTrace();
/*  89 */       System.out.println(""[SynapseServer] Startup failed..."");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void selectPort(ConfigurationContext configCtx) {
/*  95 */     TransportInDescription trsIn = (TransportInDescription)configCtx.getAxisConfiguration().getTransportsIn().get(""http"");
/*     */ 
/*     */     
/*  98 */     if (trsIn != null) {
/*     */       
/* 100 */       int port = 8080;
/*     */       
/* 102 */       String strPort = System.getProperty(""port"");
/* 103 */       if (strPort != null) {
/*     */         
/*     */         try {
/* 106 */           port = (new Integer(strPort)).intValue();
/* 107 */         } catch (NumberFormatException e) {
/*     */           
/* 109 */           log.error(""Given port is not a valid integer. Port specified in the configuration is used for the server."");
/* 110 */           port = Integer.parseInt(trsIn.getParameter(""port"").getValue().toString());
/*     */         } 
/*     */       } else {
/*     */         
/* 114 */         port = Integer.parseInt(trsIn.getParameter(""port"").getValue().toString());
/*     */       } 
/*     */       
/*     */       while (true) {
/* 118 */         ServerSocket sock = null;
/*     */         try {
/* 120 */           sock = new ServerSocket(port);
/* 121 */           trsIn.getParameter(""port"").setValue(Integer.toString(port));
/*     */           break;
/* 123 */         } catch (Exception e) {
/* 124 */           System.out.println(""[SynapseServer] Port "" + port + "" already in use. Trying alternate"");
/* 125 */           if (port == 8080) {
/* 126 */             port = 8008;
/*     */           } else {
/* 128 */             port++;
/*     */           } 
/*     */         } finally {
/* 131 */           if (sock != null)
/*     */             try {
/* 133 */               sock.close();
/* 134 */             } catch (Exception e) {} 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\SynapseServer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.Entry,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.net.URL;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Entry
/*     */ {
/*  35 */   private static final Log log = LogFactory.getLog(Entry.class);
/*     */   
/*     */   private String key;
/*     */   
/*     */   private int type;
/*     */   
/*     */   private URL src;
/*     */   
/*     */   private Object value;
/*     */   
/*     */   private XMLToObjectMapper mapper;
/*     */   private long version;
/*     */   private long expiryTime;
/*     */   public static final int INLINE_TEXT = 0;
/*     */   public static final int INLINE_XML = 1;
/*     */   public static final int URL_SRC = 2;
/*     */   public static final int REMOTE_ENTRY = 3;
/*     */   
/*     */   public Entry() {}
/*     */   
/*  55 */   public Entry(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public int getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public boolean isRemote() { return (this.type == 3); }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public boolean isURLSource() { return (this.type == 2); }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public boolean isInlineXML() { return (this.type == 1); }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public boolean isInlineText() { return (this.type == 0); }
/*     */ 
/*     */   
/*     */   public void setType(int type) {
/*  79 */     if (type <= 4 && type >= 0) {
/*  80 */       this.type = type;
/*     */     } else {
/*  82 */       handleException(""Invalid entry type for the static entry"");
/*     */     } 
/*     */   }
/*     */   
/*  86 */   public URL getSrc() { return this.src; }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setSrc(URL src) { this.src = src; }
/*     */ 
/*     */ 
/*     */   
/*  94 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public Object getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void setValue(Object value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public XMLToObjectMapper getMapper() { return this.mapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setMapper(XMLToObjectMapper mapper) { this.mapper = mapper; }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public long getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void setVersion(long version) { this.version = version; }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public long getExpiryTime() { return this.expiryTime; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setExpiryTime(long expiryTime) { this.expiryTime = expiryTime; }
/*     */ 
/*     */   
/*     */   public boolean isExpired() {
/* 147 */     if (getType() == 3) {
/* 148 */       return (System.currentTimeMillis() > this.expiryTime);
/*     */     }
/* 150 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public boolean isCached() { return (this.value != null); }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public boolean isDynamic() { return (this.type == 3); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 163 */     log.error(msg);
/* 164 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\Entry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.SynapseConfiguration,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.MediatorFactoryFinder;
/*     */ import org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseConfiguration
/*     */ {
/*  50 */   private static final Log log = LogFactory.getLog(SynapseConfiguration.class);
/*     */ 
/*     */   
/*  53 */   Registry registry = null;
/*     */ 
/*     */   
/*  56 */   private Map proxyServices = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   private Map localRegistry = new HashMap();
/*     */ 
/*     */   
/*  65 */   private AxisConfiguration axisConfiguration = null;
/*     */ 
/*     */   
/*  68 */   private String pathToConfigFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   public void addSequence(String key, Mediator mediator) { this.localRegistry.put(key, mediator); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void addSequence(String key, Entry entry) { this.localRegistry.put(key, entry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedSequences() {
/*  94 */     Map definedSequences = new HashMap();
/*  95 */     Iterator itr = this.localRegistry.values().iterator();
/*  96 */     while (itr.hasNext()) {
/*  97 */       Object o = itr.next();
/*  98 */       if (o instanceof SequenceMediator) {
/*  99 */         definedSequences.put(((SequenceMediator)o).getName(), o);
/*     */       }
/*     */     } 
/* 102 */     return definedSequences;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator getSequence(String key) {
/* 111 */     Object o = this.localRegistry.get(key);
/* 112 */     if (o != null && o instanceof Mediator) {
/* 113 */       return (Mediator)o;
/*     */     }
/*     */     
/* 116 */     Entry entry = null;
/* 117 */     if (o != null && o instanceof Entry) {
/* 118 */       entry = (Entry)o;
/*     */     } else {
/* 120 */       entry = new Entry(key);
/* 121 */       entry.setType(3);
/* 122 */       entry.setMapper((XMLToObjectMapper)MediatorFactoryFinder.getInstance());
/*     */     } 
/*     */     
/* 125 */     if (this.registry != null) {
/* 126 */       o = this.registry.getResource(entry);
/* 127 */       if (o != null && o instanceof Mediator) {
/* 128 */         this.localRegistry.put(key, entry);
/* 129 */         return (Mediator)o;
/*     */       } 
/*     */     } 
/*     */     
/* 133 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void removeSequence(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public Mediator getMainSequence() { return getSequence(""main""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public Mediator getFaultSequence() { return getSequence(""fault""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addEntry(String key, Entry entry) {
/* 174 */     if (entry.getType() == 2) {
/*     */       try {
/* 176 */         entry.setValue(Util.getOMElementFromURL(entry.getSrc().toString()));
/* 177 */         this.localRegistry.put(key, entry);
/* 178 */       } catch (IOException e) {
/* 179 */         handleException(""Can not read from source URL : "" + entry.getSrc());
/*     */       } 
/*     */     } else {
/* 182 */       this.localRegistry.put(key, entry);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedEntries() {
/* 192 */     Map definedEntries = new HashMap();
/* 193 */     Iterator itr = this.localRegistry.values().iterator();
/* 194 */     while (itr.hasNext()) {
/* 195 */       Object o = itr.next();
/* 196 */       if (o instanceof Entry && ((Entry)o).getType() != 3) {
/* 197 */         definedEntries.put(((Entry)o).getKey(), o);
/*     */       }
/*     */     } 
/* 200 */     return definedEntries;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getEntry(String key) {
/* 209 */     Object o = this.localRegistry.get(key);
/* 210 */     if (o != null && o instanceof Entry) {
/* 211 */       Entry entry = (Entry)o;
/* 212 */       if (entry.isDynamic()) {
/* 213 */         if (entry.isCached() && !entry.isExpired())
/* 214 */           return entry.getValue(); 
/* 215 */         if (this.registry != null) {
/* 216 */           o = this.registry.getResource(entry);
/*     */         }
/*     */       } else {
/* 219 */         return entry.getValue();
/*     */       } 
/*     */     } 
/* 222 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Entry getEntryDefinition(String key) {
/* 231 */     Object o = this.localRegistry.get(key);
/* 232 */     if (o == null || o instanceof Entry) {
/* 233 */       if (o == null) {
/*     */         
/* 235 */         Entry entry = new Entry(key);
/* 236 */         entry.setType(3);
/* 237 */         addEntry(key, entry);
/* 238 */         return entry;
/*     */       } 
/* 240 */       return (Entry)o;
/*     */     } 
/* 242 */     handleException(""Invalid local registry entry : "" + key);
/* 243 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void removeEntry(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public void addEndpoint(String key, Endpoint endpoint) { this.localRegistry.put(key, endpoint); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void addEndpoint(String key, Entry entry) { this.localRegistry.put(key, entry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedEndpoints() {
/* 279 */     Map definedEndpoints = new HashMap();
/* 280 */     Iterator itr = this.localRegistry.values().iterator();
/* 281 */     while (itr.hasNext()) {
/* 282 */       Object o = itr.next();
/* 283 */       if (o instanceof Endpoint) {
/* 284 */         definedEndpoints.put(((Endpoint)o).getName(), o);
/*     */       }
/*     */     } 
/* 287 */     return definedEndpoints;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(String key) {
/* 296 */     Object o = this.localRegistry.get(key);
/* 297 */     if (o != null && o instanceof Endpoint) {
/* 298 */       return (Endpoint)o;
/*     */     }
/*     */     
/* 301 */     Entry entry = null;
/* 302 */     if (o != null && o instanceof Entry) {
/* 303 */       entry = (Entry)o;
/*     */     } else {
/* 305 */       entry = new Entry(key);
/* 306 */       entry.setType(3);
/* 307 */       entry.setMapper((XMLToObjectMapper)XMLToEndpointMapper.getInstance());
/*     */     } 
/*     */     
/* 310 */     if (this.registry != null) {
/* 311 */       o = this.registry.getResource(entry);
/* 312 */       if (o != null && o instanceof Endpoint) {
/* 313 */         this.localRegistry.put(key, entry);
/* 314 */         return (Endpoint)o;
/*     */       } 
/*     */     } 
/*     */     
/* 318 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 326 */   public void removeEndpoint(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 335 */   public void addProxyService(String name, ProxyService proxy) { this.proxyServices.put(name, proxy); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   public ProxyService getProxyService(String name) { return (ProxyService)this.proxyServices.get(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void removeProxyService(String name) {
/* 352 */     Object o = this.proxyServices.get(name);
/* 353 */     if (o == null) {
/* 354 */       handleException(""Unknown proxy service for name : "" + name);
/*     */     } else {
/*     */       try {
/* 357 */         if (getAxisConfiguration().getServiceForActivation(name) != null) {
/* 358 */           if (getAxisConfiguration().getServiceForActivation(name).isActive()) {
/* 359 */             getAxisConfiguration().getService(name).setActive(false);
/*     */           }
/* 361 */           getAxisConfiguration().removeService(name);
/*     */         } 
/* 363 */         this.proxyServices.remove(name);
/* 364 */       } catch (AxisFault axisFault) {
/* 365 */         handleException(axisFault.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 375 */   public Collection getProxyServices() { return this.proxyServices.values(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public Map getLocalRegistry() { return Collections.unmodifiableMap(this.localRegistry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 391 */   public Registry getRegistry() { return this.registry; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 399 */   public void setRegistry(Registry registry) { this.registry = registry; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 407 */   public void setAxisConfiguration(AxisConfiguration axisConfig) { this.axisConfiguration = axisConfig; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 415 */   public AxisConfiguration getAxisConfiguration() { return this.axisConfiguration; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 423 */   public String getPathToConfigFile() { return this.pathToConfigFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 431 */   public void setPathToConfigFile(String pathToConfigFile) { this.pathToConfigFile = pathToConfigFile; }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 435 */     log.error(msg);
/* 436 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\SynapseConfiguration.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.SynapseConfigurationBuilder,"/*    */ package org.apache.synapse.config;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.FileInputStream;
/*    */ import java.io.FileNotFoundException;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Constants;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.xml.XMLConfigurationBuilder;
/*    */ import org.apache.synapse.mediators.base.SynapseMediator;
/*    */ import org.apache.synapse.mediators.builtin.SendMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseConfigurationBuilder
/*    */   implements Constants
/*    */ {
/* 40 */   private static Log log = LogFactory.getLog(SynapseConfigurationBuilder.class);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static SynapseConfiguration getDefaultConfiguration() {
/* 48 */     SynapseConfiguration config = new SynapseConfiguration();
/* 49 */     SynapseMediator mainmediator = new SynapseMediator();
/* 50 */     mainmediator.addChild((Mediator)new SendMediator());
/* 51 */     config.addSequence(""main"", (Mediator)mainmediator);
/* 52 */     return config;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static SynapseConfiguration getConfiguration(String configFile) {
/*    */     try {
/* 65 */       SynapseConfiguration synCfg = XMLConfigurationBuilder.getConfiguration(new FileInputStream(configFile));
/* 66 */       log.info(""Loaded Synapse configuration from : "" + configFile);
/* 67 */       synCfg.setPathToConfigFile((new File(configFile)).getAbsolutePath());
/* 68 */       return synCfg;
/*    */     }
/* 70 */     catch (FileNotFoundException fnf) {
/* 71 */       handleException(""Cannot load Synapse configuration from : "" + configFile, fnf);
/* 72 */     } catch (Exception e) {
/* 73 */       handleException(""Could not initialize Synapse : "" + e.getMessage(), e);
/*    */     } 
/* 75 */     return null;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg, Exception e) {
/* 79 */     log.error(msg, e);
/* 80 */     throw new SynapseException(msg, e);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\SynapseConfigurationBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.Util,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URI;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import javax.xml.stream.XMLInputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Util
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(Util.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static StreamSource getStreamSource(Object o) {
/*  53 */     if (o == null) {
/*  54 */       handleException(""Cannot convert null to a StreamSource"");
/*     */     }
/*  56 */     else if (o instanceof OMNode) {
/*  57 */       OMNode omNode = (OMNode)o;
/*  58 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/*  60 */         omNode.serialize(baos);
/*  61 */         return new StreamSource(new ByteArrayInputStream(baos.toByteArray()));
/*  62 */       } catch (XMLStreamException e) {
/*  63 */         handleException(""Error converting to a StreamSource"", e);
/*     */       } 
/*     */     } else {
/*     */       
/*  67 */       handleException(""Cannot convert object to a StreamSource"");
/*     */     } 
/*  69 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public static InputStream getInputStream(Object o) {
/*  74 */     if (o == null) {
/*  75 */       handleException(""Cannot convert null to a StreamSource"");
/*     */     }
/*  77 */     else if (o instanceof OMElement) {
/*  78 */       OMElement omElement = (OMElement)o;
/*  79 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/*  81 */         omElement.serialize(baos);
/*  82 */         return new ByteArrayInputStream(baos.toByteArray());
/*  83 */       } catch (XMLStreamException e) {
/*  84 */         handleException(""Error converting to a StreamSource"", e);
/*     */       }
/*     */     
/*  87 */     } else if (o instanceof URI) {
/*     */       try {
/*  89 */         return ((URI)o).toURL().openStream();
/*  90 */       } catch (IOException e) {
/*  91 */         handleException(""Error opening stream form URI"", e);
/*     */       } 
/*     */     } else {
/*     */       
/*  95 */       handleException(""Cannot convert object to a StreamSource"");
/*     */     } 
/*  97 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Object getObject(URL url) {
/*     */     try {
/* 111 */       URLConnection urlc = url.openConnection();
/* 112 */       XMLToObjectMapper xmlToObject = getXmlToObjectMapper(urlc.getContentType());
/*     */ 
/*     */       
/*     */       try {
/* 116 */         XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(urlc.getInputStream());
/*     */         
/* 118 */         StAXOMBuilder builder = new StAXOMBuilder(parser);
/* 119 */         OMElement omElem = builder.getDocumentElement();
/*     */ 
/*     */ 
/*     */         
/* 123 */         omElem.build();
/*     */         
/* 125 */         if (xmlToObject != null) {
/* 126 */           return xmlToObject.getObjectFromOMNode((OMNode)omElem);
/*     */         }
/* 128 */         return omElem;
/*     */       
/*     */       }
/* 131 */       catch (XMLStreamException e) {
/* 132 */         log.warn(""Content at URL : "" + url + "" is non XML.."");
/* 133 */         return urlc.getContent();
/*     */       }
/*     */     
/* 136 */     } catch (IOException e) {
/* 137 */       handleException(""Error connecting to URL : "" + url, e);
/*     */       
/* 139 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static OMElement getOMElementFromURL(String url) throws IOException {
/* 149 */     URLConnection conn = (new URL(url)).openConnection();
/* 150 */     conn.setReadTimeout(10000);
/* 151 */     conn.setConnectTimeout(2000);
/* 152 */     conn.setRequestProperty(""Connection"", ""close"");
/* 153 */     InputStream urlInStream = conn.getInputStream();
/*     */     
/* 155 */     if (urlInStream != null) {
/*     */       try {
/* 157 */         StAXOMBuilder builder = new StAXOMBuilder(urlInStream);
/* 158 */         OMElement doc = builder.getDocumentElement();
/* 159 */         doc.build();
/* 160 */         return doc;
/* 161 */       } catch (Exception e) {
/* 162 */         handleException(""Error parsing resource at URL : "" + url + "" as XML"", e);
/*     */       } finally {
/*     */         
/*     */         try {
/* 166 */           urlInStream.close();
/* 167 */         } catch (IOException ignore) {}
/*     */       } 
/*     */     }
/* 170 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 174 */     log.error(msg, e);
/* 175 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 179 */     log.error(msg);
/* 180 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public static XMLToObjectMapper getXmlToObjectMapper(String contentType) { return null; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\Util.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.XMLToObjectMapper,"package org.apache.synapse.config;
import org.apache.axiom.om.OMNode;
public interface XMLToObjectMapper {
  Object getObjectFromOMNode(OMNode paramOMNode);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\XMLToObjectMapper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractListMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractListMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 37 */   private static final Log log = LogFactory.getLog(AbstractListMediatorFactory.class);
/*    */   
/*    */   protected static void addChildren(OMElement el, ListMediator m) {
/* 40 */     Iterator it = el.getChildElements();
/* 41 */     while (it.hasNext()) {
/* 42 */       OMElement child = it.next();
/* 43 */       Mediator med = MediatorFactoryFinder.getInstance().getMediator(child);
/* 44 */       if (med != null) {
/* 45 */         m.addChild(med); continue;
/*    */       } 
/* 47 */       String msg = ""Unknown mediator : "" + child.getLocalName();
/* 48 */       log.error(msg);
/* 49 */       throw new SynapseException(msg);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AbstractListMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractListMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractListMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 33 */   private static final Log log = LogFactory.getLog(AbstractListMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   protected static void serializeChildren(OMElement parent, List list) {
/* 37 */     Iterator iter = list.iterator();
/* 38 */     while (iter.hasNext()) {
/* 39 */       Mediator child = iter.next();
/* 40 */       MediatorSerializer medSer = MediatorSerializerFinder.getInstance().getSerializer(child);
/* 41 */       if (medSer != null) {
/* 42 */         medSer.serializeMediator(parent, child); continue;
/*    */       } 
/* 44 */       handleException(""Unable to find a serializer for mediator : "" + child.getType());
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   private static void handleException(String msg) {
/* 50 */     log.error(msg);
/* 51 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AbstractListMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractMediatorFactory
/*    */   implements MediatorFactory
/*    */ {
/*    */   protected void initMediator(Mediator mediator, OMElement mediatorOmElement) {
/* 38 */     OMAttribute trace = mediatorOmElement.getAttribute(new QName("""", ""trace""));
/*    */ 
/*    */     
/* 41 */     if (trace != null) {
/* 42 */       String traceValue = trace.getAttributeValue();
/* 43 */       if (traceValue != null)
/* 44 */         if (traceValue.equals(""enable"")) {
/* 45 */           mediator.setTraceState(1);
/* 46 */         } else if (traceValue.equals(""disable"")) {
/* 47 */           mediator.setTraceState(0);
/*    */         }  
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AbstractMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractMediatorSerializer
/*     */   implements MediatorSerializer
/*     */ {
/*  38 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*  39 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*  40 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*  41 */   private static final Log log = LogFactory.getLog(AbstractMediatorSerializer.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static void finalizeSerialization(OMElement mediatorOmElement, Mediator mediator) {
/*  51 */     int traceState = mediator.getTraceState();
/*  52 */     String traceValue = null;
/*  53 */     if (traceState == 1) {
/*  54 */       traceValue = ""enable"";
/*  55 */     } else if (traceState == 0) {
/*  56 */       traceValue = ""disable"";
/*     */     } 
/*  58 */     if (traceValue != null) {
/*  59 */       mediatorOmElement.addAttribute(fac.createOMAttribute(""trace"", nullNS, traceValue));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void serializeMediatorProperties(OMElement parent, Collection props) {
/*  67 */     Iterator iter = props.iterator();
/*  68 */     while (iter.hasNext()) {
/*  69 */       MediatorProperty mp = iter.next();
/*  70 */       OMElement prop = fac.createOMElement(""property"", synNS, (OMContainer)parent);
/*  71 */       if (mp.getName() != null) {
/*  72 */         prop.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
/*     */       } else {
/*  74 */         handleException(""Mediator property name missing"");
/*     */       } 
/*     */       
/*  77 */       if (mp.getValue() != null) {
/*  78 */         prop.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue())); continue;
/*     */       } 
/*  80 */       if (mp.getExpression() != null) {
/*  81 */         prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, mp.getExpression().toString()));
/*     */         
/*  83 */         serializeNamespaces(prop, mp.getExpression());
/*     */         continue;
/*     */       } 
/*  86 */       handleException(""Mediator property must have a literal value or be an expression"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void serializeProperties(OMElement parent, Collection props) { serializeMediatorProperties(parent, props); }
/*     */ 
/*     */   
/*     */   public void serializeNamespaces(OMElement elem, AXIOMXPath xpath) {
/*  96 */     Iterator iter = xpath.getNamespaces().keySet().iterator();
/*  97 */     while (iter.hasNext()) {
/*  98 */       String prefix = iter.next();
/*  99 */       String uri = xpath.getNamespaceContext().translateNamespacePrefixToUri(prefix);
/* 100 */       if (!""http://ws.apache.org/ns/synapse"".equals(uri)) {
/* 101 */         elem.declareNamespace(uri, prefix);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 107 */     log.error(msg);
/* 108 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AbstractMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediator,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AnonymousListMediator
/*    */   extends AbstractListMediator
/*    */ {
/* 32 */   public boolean mediate(MessageContext synCtx) { return super.mediate(synCtx); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AnonymousListMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AnonymousListMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 37 */   private static final Log log = LogFactory.getLog(AnonymousListMediator.class);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static AnonymousListMediator createAnonymousListMediator(OMElement el) {
/* 45 */     AnonymousListMediator mediator = new AnonymousListMediator();
/*    */     
/* 47 */     addChildren(el, (ListMediator)mediator);
/*    */     
/* 49 */     return mediator;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AnonymousListMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AnonymousListMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/* 33 */   private static final Log log = LogFactory.getLog(AnonymousListMediatorSerializer.class);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static OMElement serializeAnonymousListMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof AnonymousListMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/* 46 */     AnonymousListMediator mediator = (AnonymousListMediator)m;
/* 47 */     serializeChildren(parent, mediator.getList());
/* 48 */     return parent;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 52 */     log.error(msg);
/* 53 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\AnonymousListMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ClassMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.ext.ClassMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ClassMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 43 */   private static final Log log = LogFactory.getLog(LogMediatorFactory.class);
/*    */   
/* 45 */   private static final QName CLASS_Q = new QName(""http://ws.apache.org/ns/synapse"", ""class"");
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 49 */     ClassMediator classMediator = new ClassMediator();
/*    */     
/* 51 */     OMAttribute name = elem.getAttribute(new QName("""", ""name""));
/* 52 */     if (name == null) {
/* 53 */       String msg = ""The name of the actual mediator class is a required attribute"";
/* 54 */       log.error(msg);
/* 55 */       throw new SynapseException(msg);
/*    */     } 
/*    */     
/*    */     try {
/* 59 */       Class clazz = getClass().getClassLoader().loadClass(name.getAttributeValue());
/* 60 */       classMediator.setClazz(clazz);
/* 61 */     } catch (ClassNotFoundException e) {
/* 62 */       String msg = ""Cannot find class : "" + name.getAttributeValue();
/* 63 */       log.error(msg, e);
/* 64 */       throw new SynapseException(msg, e);
/*    */     } 
/*    */ 
/*    */     
/* 68 */     initMediator((Mediator)classMediator, elem);
/* 69 */     classMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*    */     
/* 71 */     return (Mediator)classMediator;
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 76 */   public QName getTagQName() { return CLASS_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ClassMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ClassMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.ext.ClassMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ClassMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(ClassMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof ClassMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/* 46 */     ClassMediator mediator = (ClassMediator)m;
/* 47 */     OMElement clazz = fac.createOMElement(""class"", synNS);
/* 48 */     finalizeSerialization(clazz, (Mediator)mediator);
/*    */     
/* 50 */     if (mediator.getClazz() != null) {
/* 51 */       clazz.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getClazz().getName()));
/*    */     } else {
/*    */       
/* 54 */       handleException(""Invalid class mediator. The class name is required"");
/*    */     } 
/*    */ 
/*    */     
/* 58 */     serializeProperties(clazz, mediator.getProperties());
/*    */     
/* 60 */     if (parent != null) {
/* 61 */       parent.addChild((OMNode)clazz);
/*    */     }
/* 63 */     return clazz;
/*    */   }
/*    */ 
/*    */   
/* 67 */   public String getMediatorClassName() { return ClassMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 71 */     log.error(msg);
/* 72 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ClassMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.Constants,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public interface Constants
/*     */ {
/*  28 */   public static final QName DEFINITIONS_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""definitions"");
/*     */   
/*  30 */   public static final QName SEQUENCE_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""sequence"");
/*     */   
/*  32 */   public static final QName ENDPOINT_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""endpoint"");
/*     */   
/*  34 */   public static final QName ENTRY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""localEntry"");
/*     */   
/*  36 */   public static final QName REGISTRY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""registry"");
/*     */   
/*  38 */   public static final QName PROXY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""proxy"");
/*     */ 
/*     */   
/*     */   public static final String SYNAPSE_NAMESPACE = ""http://ws.apache.org/ns/synapse"";
/*     */ 
/*     */   
/*     */   public static final String NULL_NAMESPACE = """";
/*     */ 
/*     */   
/*     */   public static final String RAMPART_POLICY = ""rampartPolicy"";
/*     */   
/*     */   public static final String SANDESHA_POLICY = ""sandeshaPolicy"";
/*     */   
/*     */   public static final String TRACE_ATTRIB_NAME = ""trace"";
/*     */   
/*     */   public static final String TRACE_ENABLE = ""enable"";
/*     */   
/*     */   public static final String TRACE_DISABLE = ""disable"";
/*     */   
/*     */   public static final String STATISTICS_ATTRIB_NAME = ""statistics"";
/*     */   
/*     */   public static final String STATISTICS_ENABLE = ""enable"";
/*     */   
/*     */   public static final String STATISTICS_DISABLE = ""disable"";
/*     */   
/*     */   public static final String SCOPE_AXIS2 = ""axis2"";
/*     */   
/*     */   public static final String SCOPE_TRANSPORT = ""transport"";
/*     */   
/*     */   public static final String SCOPE_DEFAULT = ""default"";
/*     */   
/*     */   public static final String SEQUENCE_VERSION_1_0 = ""1.0"";
/*     */   
/*     */   public static final String SEQUENCE_VERSION_1_1 = ""1.1"";
/*     */   
/*     */   public static final String SEND_ELEMENT = ""send"";
/*     */   
/*     */   public static final String LOADBALANCE_ELEMENT = ""loadbalance"";
/*     */   
/*     */   public static final String FAILOVER_ELEMENT = ""failover"";
/*     */   
/*     */   public static final String SUSPEND_DURATION_ON_FAILURE = ""suspendDurationOnFailure"";
/*     */   
/*     */   public static final String MAXIMUM_RETRIES = ""maximumRetries"";
/*     */   
/*     */   public static final String RETRY_INTERVAL = ""retryInterval"";
/*     */   
/*     */   public static final String FAILOVER = ""failover"";
/*     */   
/*     */   public static final String SESSION_AFFINITY = ""sessionAffinity"";
/*     */   
/*     */   public static final String ALGORITHM_NAME = ""policy"";
/*     */   
/*     */   public static final String FAILOVER_GROUP_ELEMENT = ""failover"";
/*     */   
/*     */   public static final String DISPATCH_MANAGER = ""DISPATCH_MANAGER"";
/*     */   
/*     */   public static final String DISPATCHERS_ELEMENT = ""dispatchers"";
/*     */   
/*     */   public static final String DISPATCHER_ELEMENT = ""dispatcher"";
/*     */   
/*  99 */   public static final QName ATT_KEY_Q = new QName("""", ""key"");
/* 100 */   public static final QName ATT_ADDRESS_Q = new QName("""", ""address"");
/*     */   public static final String ONREJECT = ""onReject"";
/*     */   public static final String ONACCEPT = ""onAccept"";
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\Constants.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DropMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.DropMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 37 */   private static final QName DROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""drop"");
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement el) {
/* 41 */     DropMediator dropMediator1 = new DropMediator();
/*    */ 
/*    */     
/* 44 */     initMediator((Mediator)dropMediator1, el);
/*    */     
/* 46 */     return (Mediator)dropMediator1;
/*    */   }
/*    */ 
/*    */   
/* 50 */   public QName getTagQName() { return DROP_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\DropMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DropMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.builtin.DropMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 32 */   private static final Log log = LogFactory.getLog(DropMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 36 */     if (!(m instanceof DropMediator)) {
/* 37 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 40 */     DropMediator mediator = (DropMediator)m;
/* 41 */     OMElement drop = fac.createOMElement(""drop"", synNS);
/* 42 */     finalizeSerialization(drop, (Mediator)mediator);
/*    */     
/* 44 */     if (parent != null) {
/* 45 */       parent.addChild((OMNode)drop);
/*    */     }
/* 47 */     return drop;
/*    */   }
/*    */ 
/*    */   
/* 51 */   public String getMediatorClassName() { return DropMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 55 */     log.error(msg);
/* 56 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\DropMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.EntryFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.axiom.om.OMText;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.Entry;
/*    */ import org.apache.synapse.config.Util;
/*    */ import org.apache.synapse.config.XMLToObjectMapper;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EntryFactory
/*    */   implements XMLToObjectMapper
/*    */ {
/* 38 */   private static Log log = LogFactory.getLog(EntryFactory.class);
/*    */ 
/*    */   
/*    */   public static Entry createEntry(OMElement elem) {
/* 42 */     OMAttribute key = elem.getAttribute(new QName("""", ""key""));
/* 43 */     if (key == null) {
/* 44 */       handleException(""The 'key' attribute is required for a local registry entry"");
/* 45 */       return null;
/*    */     } 
/*    */ 
/*    */     
/* 49 */     Entry entry = new Entry(key.getAttributeValue());
/* 50 */     String src = elem.getAttributeValue(new QName("""", ""src""));
/*    */ 
/*    */ 
/*    */ 
/*    */     
/* 55 */     if (src != null) {
/*    */       try {
/* 57 */         entry.setSrc(new URL(src.trim()));
/* 58 */         entry.setType(2);
/* 59 */         entry.setValue(Util.getObject(entry.getSrc()));
/*    */       }
/* 61 */       catch (MalformedURLException e) {
/* 62 */         handleException(""The entry with key : "" + key + "" refers to an invalid URL"");
/*    */       } 
/*    */     } else {
/*    */       
/* 66 */       OMNode nodeValue = elem.getFirstOMChild();
/* 67 */       OMElement elemValue = elem.getFirstElement();
/*    */       
/* 69 */       if (elemValue != null) {
/* 70 */         entry.setType(1);
/* 71 */         entry.setValue(elemValue);
/* 72 */       } else if (nodeValue != null && nodeValue instanceof OMText) {
/* 73 */         entry.setType(0);
/* 74 */         entry.setValue(((OMText)nodeValue).getText().trim());
/*    */       } 
/*    */     } 
/* 77 */     return entry;
/*    */   }
/*    */ 
/*    */   
/*    */   private static void handleException(String msg) {
/* 82 */     log.error(msg);
/* 83 */     throw new SynapseException(msg);
/*    */   }
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 87 */     if (om instanceof OMElement) {
/* 88 */       return createEntry((OMElement)om);
/*    */     }
/* 90 */     handleException(""Invalid XML configuration for an Entry. OMElement expected"");
/*    */     
/* 92 */     return null;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\EntryFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.EntrySerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.net.URL;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.axiom.om.impl.llom.OMTextImpl;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.Entry;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EntrySerializer
/*    */ {
/* 36 */   private static Log log = LogFactory.getLog(EntrySerializer.class);
/*    */   
/* 38 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/* 39 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */   
/* 41 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static OMElement serializeEntry(Entry entry, OMElement parent) {
/* 50 */     OMElement propertyElement = fac.createOMElement(""localEntry"", synNS);
/* 51 */     propertyElement.addAttribute(fac.createOMAttribute(""key"", nullNS, entry.getKey().trim()));
/*    */     
/* 53 */     int type = entry.getType();
/* 54 */     if (type == 2)
/* 55 */     { URL srcUrl = entry.getSrc();
/* 56 */       if (srcUrl != null) {
/* 57 */         propertyElement.addAttribute(fac.createOMAttribute(""src"", nullNS, srcUrl.toString().trim()));
/*    */       } }
/*    */     
/* 60 */     else if (type == 1)
/* 61 */     { Object value = entry.getValue();
/* 62 */       if (value != null && value instanceof OMElement) {
/* 63 */         propertyElement.addChild((OMNode)value);
/*    */       } }
/* 65 */     else if (type == 0)
/* 66 */     { Object value = entry.getValue();
/* 67 */       if (value != null && value instanceof String) {
/* 68 */         OMTextImpl textData = (OMTextImpl)fac.createOMText(((String)value).trim());
/* 69 */         textData.setType(12);
/* 70 */         propertyElement.addChild((OMNode)textData);
/*    */       }  }
/* 72 */     else { if (type == 3)
/*    */       {
/* 74 */         return null;
/*    */       }
/* 76 */       handleException(""Entry type undefined""); }
/*    */     
/* 78 */     if (parent != null) {
/* 79 */       parent.addChild((OMNode)propertyElement);
/*    */     }
/* 81 */     return propertyElement;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 85 */     log.error(msg);
/* 86 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\EntrySerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FaultMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.FaultMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  51 */   private static final QName FAULT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""makefault"");
/*     */   
/*  53 */   private static final QName ATT_VERSION_Q = new QName("""", ""version"");
/*  54 */   private static final QName CODE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""code"");
/*  55 */   private static final QName REASON_Q = new QName(""http://ws.apache.org/ns/synapse"", ""reason"");
/*  56 */   private static final QName NODE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""node"");
/*  57 */   private static final QName ROLE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""role"");
/*  58 */   private static final QName DETAIL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""detail"");
/*     */   
/*  60 */   private static final QName ATT_VALUE_Q = new QName("""", ""value"");
/*  61 */   private static final QName ATT_EXPR_Q = new QName("""", ""expression"");
/*     */   
/*     */   private static final String SOAP11 = ""soap11"";
/*     */   
/*     */   private static final String SOAP12 = ""soap12"";
/*  66 */   private static final Log log = LogFactory.getLog(FaultMediatorFactory.class);
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  70 */     FaultMediator faultMediator = new FaultMediator();
/*     */     
/*  72 */     OMAttribute version = elem.getAttribute(ATT_VERSION_Q);
/*  73 */     if (version != null) {
/*  74 */       if (""soap11"".equals(version.getAttributeValue())) {
/*  75 */         faultMediator.setSoapVersion(1);
/*  76 */       } else if (""soap12"".equals(version.getAttributeValue())) {
/*  77 */         faultMediator.setSoapVersion(2);
/*     */       } else {
/*  79 */         String msg = ""Invalid SOAP version"";
/*  80 */         log.error(msg);
/*  81 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/*  85 */     OMElement code = elem.getFirstChildWithName(CODE_Q);
/*  86 */     if (code != null) {
/*  87 */       OMAttribute value = code.getAttribute(ATT_VALUE_Q);
/*  88 */       OMAttribute expression = code.getAttribute(ATT_EXPR_Q);
/*     */       
/*  90 */       if (value != null) {
/*  91 */         String name, prefix, strValue = value.getAttributeValue();
/*     */         
/*  93 */         if (strValue.indexOf("":"") != -1) {
/*  94 */           prefix = strValue.substring(0, strValue.indexOf("":""));
/*  95 */           name = strValue.substring(strValue.indexOf("":"") + 1);
/*     */         } else {
/*  97 */           String msg = ""A QName is expected for fault code as prefix:name"";
/*  98 */           log.error(msg);
/*  99 */           throw new SynapseException(msg);
/*     */         } 
/* 101 */         faultMediator.setFaultCodeValue(new QName(OMElementUtils.getNameSpaceWithPrefix(prefix, code), name, prefix));
/*     */       
/*     */       }
/* 104 */       else if (expression != null) {
/*     */         try {
/* 106 */           AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/* 107 */           OMElementUtils.addNameSpaces(xp, code, log);
/* 108 */           faultMediator.setFaultCodeExpr(xp);
/* 109 */         } catch (JaxenException je) {
/* 110 */           String msg = ""Invalid fault code expression : "" + je.getMessage();
/* 111 */           log.error(msg);
/* 112 */           throw new SynapseException(msg, (Throwable)je);
/*     */         } 
/*     */       } else {
/* 115 */         String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
/* 116 */         log.error(msg);
/* 117 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } else {
/*     */       
/* 121 */       String msg = ""The fault code is a required attribute for the makefault mediator"";
/* 122 */       log.error(msg);
/* 123 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 126 */     OMElement reason = elem.getFirstChildWithName(REASON_Q);
/* 127 */     if (reason != null) {
/* 128 */       OMAttribute value = reason.getAttribute(ATT_VALUE_Q);
/* 129 */       OMAttribute expression = reason.getAttribute(ATT_EXPR_Q);
/*     */       
/* 131 */       if (value != null) {
/* 132 */         faultMediator.setFaultReasonValue(value.getAttributeValue());
/* 133 */       } else if (expression != null) {
/*     */         try {
/* 135 */           AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/* 136 */           OMElementUtils.addNameSpaces(xp, reason, log);
/* 137 */           faultMediator.setFaultReasonExpr(xp);
/*     */         }
/* 139 */         catch (JaxenException je) {
/* 140 */           String msg = ""Invalid fault reason expression : "" + je.getMessage();
/* 141 */           log.error(msg);
/* 142 */           throw new SynapseException(msg, (Throwable)je);
/*     */         } 
/*     */       } else {
/* 145 */         String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
/* 146 */         log.error(msg);
/* 147 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } else {
/*     */       
/* 151 */       String msg = ""The fault reason is a required attribute for the makefault mediator"";
/* 152 */       log.error(msg);
/* 153 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 158 */     initMediator((Mediator)faultMediator, elem);
/*     */     
/* 160 */     OMElement node = elem.getFirstChildWithName(NODE_Q);
/* 161 */     if (node != null && node.getText() != null) {
/*     */       try {
/* 163 */         faultMediator.setFaultNode(new URI(node.getText()));
/* 164 */       } catch (URISyntaxException e) {
/* 165 */         String msg = ""Invalid URI specified for fault node : "" + node.getText();
/* 166 */         log.error(msg);
/* 167 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/* 171 */     OMElement role = elem.getFirstChildWithName(ROLE_Q);
/* 172 */     if (role != null && role.getText() != null) {
/*     */       try {
/* 174 */         faultMediator.setFaultRole(new URI(role.getText()));
/* 175 */       } catch (URISyntaxException e) {
/* 176 */         String msg = ""Invalid URI specified for fault role : "" + role.getText();
/* 177 */         log.error(msg);
/* 178 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/* 182 */     OMElement detail = elem.getFirstChildWithName(DETAIL_Q);
/* 183 */     if (detail != null && detail.getText() != null) {
/* 184 */       faultMediator.setFaultDetail(detail.getText());
/*     */     }
/*     */     
/* 187 */     return (Mediator)faultMediator;
/*     */   }
/*     */ 
/*     */   
/* 191 */   public QName getTagQName() { return FAULT_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\FaultMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FaultMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.FaultMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(FaultMediatorSerializer.class);
/*     */   
/*     */   private static final String SOAP11 = ""soap11"";
/*     */   
/*     */   private static final String SOAP12 = ""soap12"";
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  53 */     if (!(m instanceof FaultMediator)) {
/*  54 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  57 */     FaultMediator mediator = (FaultMediator)m;
/*  58 */     OMElement fault = fac.createOMElement(""makefault"", synNS);
/*  59 */     finalizeSerialization(fault, (Mediator)mediator);
/*     */     
/*  61 */     if (mediator.getSoapVersion() == 1) {
/*  62 */       fault.addAttribute(fac.createOMAttribute(""version"", nullNS, ""soap11""));
/*     */     }
/*  64 */     else if (mediator.getSoapVersion() == 2) {
/*  65 */       fault.addAttribute(fac.createOMAttribute(""version"", nullNS, ""soap12""));
/*     */     } 
/*     */ 
/*     */     
/*  69 */     OMElement code = fac.createOMElement(""code"", synNS, (OMContainer)fault);
/*  70 */     if (mediator.getFaultCodeValue() != null) {
/*  71 */       code.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getFaultCodeValue().getPrefix() + "":"" + mediator.getFaultCodeValue().getLocalPart()));
/*     */ 
/*     */       
/*  74 */       code.declareNamespace(mediator.getFaultCodeValue().getNamespaceURI(), mediator.getFaultCodeValue().getPrefix());
/*     */     
/*     */     }
/*  77 */     else if (mediator.getFaultCodeExpr() != null) {
/*  78 */       code.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getFaultCodeExpr().toString()));
/*     */       
/*  80 */       serializeNamespaces(code, mediator.getFaultCodeExpr());
/*     */     } else {
/*     */       
/*  83 */       handleException(""Fault code is required for a fault mediator"");
/*     */     } 
/*     */     
/*  86 */     OMElement reason = fac.createOMElement(""reason"", synNS, (OMContainer)fault);
/*  87 */     if (mediator.getFaultReasonValue() != null) {
/*  88 */       reason.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getFaultReasonValue()));
/*     */     
/*     */     }
/*  91 */     else if (mediator.getFaultReasonExpr() != null) {
/*  92 */       reason.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getFaultReasonExpr().toString()));
/*     */       
/*  94 */       serializeNamespaces(code, mediator.getFaultReasonExpr());
/*     */     } else {
/*     */       
/*  97 */       handleException(""Fault reason is required for a fault mediator"");
/*     */     } 
/*     */ 
/*     */     
/* 101 */     if (mediator.getFaultNode() != null) {
/* 102 */       OMElement node = fac.createOMElement(""node"", synNS, (OMContainer)fault);
/* 103 */       node.setText(mediator.getFaultNode().toString());
/*     */     } 
/*     */     
/* 106 */     if (mediator.getFaultRole() != null) {
/* 107 */       OMElement role = fac.createOMElement(""role"", synNS, (OMContainer)fault);
/* 108 */       role.setText(mediator.getFaultRole().toString());
/*     */     } 
/*     */     
/* 111 */     if (mediator.getFaultDetail() != null) {
/* 112 */       OMElement detail = fac.createOMElement(""detail"", synNS, (OMContainer)fault);
/* 113 */       detail.setText(mediator.getFaultDetail());
/*     */     } 
/*     */     
/* 116 */     if (parent != null) {
/* 117 */       parent.addChild((OMNode)fault);
/*     */     }
/* 119 */     return fault;
/*     */   }
/*     */ 
/*     */   
/* 123 */   public String getMediatorClassName() { return FaultMediator.class.getName(); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 127 */     log.error(msg);
/* 128 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\FaultMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FilterMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.regex.Pattern;
/*     */ import java.util.regex.PatternSyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.filters.FilterMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(FaultMediatorFactory.class);
/*     */   
/*  49 */   private static final QName FILTER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""filter"");
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  52 */     FilterMediator filter = new FilterMediator();
/*     */     
/*  54 */     OMAttribute attXpath = elem.getAttribute(new QName("""", ""xpath""));
/*  55 */     OMAttribute attSource = elem.getAttribute(new QName("""", ""source""));
/*  56 */     OMAttribute attRegex = elem.getAttribute(new QName("""", ""regex""));
/*     */     
/*  58 */     if (attXpath != null) {
/*  59 */       if (attXpath.getAttributeValue() != null && attXpath.getAttributeValue().trim().length() == 0) {
/*  60 */         String msg = ""Invalid attribute value specified for xpath"";
/*  61 */         log.error(msg);
/*  62 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  66 */         filter.setXpath(new AXIOMXPath(attXpath.getAttributeValue()));
/*  67 */       } catch (JaxenException e) {
/*  68 */         String msg = ""Invalid XPath expression for attribute xpath : "" + attXpath.getAttributeValue();
/*  69 */         log.error(msg);
/*  70 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*  73 */       OMElementUtils.addNameSpaces(filter.getXpath(), elem, log);
/*     */     }
/*  75 */     else if (attSource != null && attRegex != null) {
/*     */       
/*  77 */       if ((attSource.getAttributeValue() != null && attSource.getAttributeValue().trim().length() == 0) || (attRegex.getAttributeValue() != null && attRegex.getAttributeValue().trim().length() == 0)) {
/*     */ 
/*     */         
/*  80 */         String msg = ""Invalid attribute values for source and/or regex specified"";
/*  81 */         log.error(msg);
/*  82 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  86 */         filter.setSource(new AXIOMXPath(attSource.getAttributeValue()));
/*  87 */       } catch (JaxenException e) {
/*  88 */         String msg = ""Invalid XPath expression for attribute source : "" + attSource.getAttributeValue();
/*  89 */         log.error(msg);
/*  90 */         throw new SynapseException(msg);
/*     */       } 
/*     */       try {
/*  93 */         filter.setRegex(Pattern.compile(attRegex.getAttributeValue()));
/*  94 */       } catch (PatternSyntaxException pse) {
/*  95 */         String msg = ""Invalid Regular Expression for attribute regex : "" + attRegex.getAttributeValue();
/*  96 */         log.error(msg);
/*  97 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/* 100 */       OMElementUtils.addNameSpaces(filter.getSource(), elem, log);
/*     */     } else {
/*     */       
/* 103 */       String msg = ""An xpath or (source, regex) attributes are required for a filter"";
/* 104 */       log.error(msg);
/* 105 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */     
/* 109 */     initMediator((Mediator)filter, elem);
/* 110 */     addChildren(elem, (ListMediator)filter);
/* 111 */     return (Mediator)filter;
/*     */   }
/*     */ 
/*     */   
/* 115 */   public QName getTagQName() { return FILTER_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\FilterMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FilterMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.filters.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FilterMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(FilterMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof FilterMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 47 */     FilterMediator mediator = (FilterMediator)m;
/* 48 */     OMElement filter = fac.createOMElement(""filter"", synNS);
/*    */     
/* 50 */     if (mediator.getSource() != null && mediator.getRegex() != null) {
/* 51 */       filter.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 53 */       serializeNamespaces(filter, mediator.getSource());
/*    */       
/* 55 */       filter.addAttribute(fac.createOMAttribute(""regex"", nullNS, mediator.getRegex().pattern()));
/*    */     
/*    */     }
/* 58 */     else if (mediator.getXpath() != null) {
/* 59 */       filter.addAttribute(fac.createOMAttribute(""xpath"", nullNS, mediator.getXpath().toString()));
/*    */       
/* 61 */       serializeNamespaces(filter, mediator.getXpath());
/*    */     } else {
/*    */       
/* 64 */       handleException(""Invalid filter mediator. Should have either a 'source' and a 'regex' OR an 'xpath' "");
/*    */     } 
/*    */ 
/*    */     
/* 68 */     finalizeSerialization(filter, (Mediator)mediator);
/* 69 */     serializeChildren(filter, mediator.getList());
/*    */     
/* 71 */     if (parent != null) {
/* 72 */       parent.addChild((OMNode)filter);
/*    */     }
/* 74 */     return filter;
/*    */   }
/*    */ 
/*    */   
/* 78 */   public String getMediatorClassName() { return FilterMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 82 */     log.error(msg);
/* 83 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\FilterMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.HeaderMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.HeaderMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HeaderMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  51 */   private static final Log log = LogFactory.getLog(HeaderMediatorFactory.class);
/*     */   
/*  53 */   private static final QName HEADER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""header"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  57 */     HeaderMediator headerMediator = new HeaderMediator();
/*  58 */     OMAttribute name = elem.getAttribute(new QName("""", ""name""));
/*  59 */     OMAttribute value = elem.getAttribute(new QName("""", ""value""));
/*  60 */     OMAttribute exprn = elem.getAttribute(new QName("""", ""expression""));
/*  61 */     OMAttribute action = elem.getAttribute(new QName("""", ""action""));
/*     */     
/*  63 */     if (name == null || name.getAttributeValue() == null) {
/*  64 */       String msg = ""A valid name attribute is required for the header mediator"";
/*  65 */       log.error(msg);
/*  66 */       throw new SynapseException(msg);
/*     */     } 
/*  68 */     String nameAtt = name.getAttributeValue();
/*  69 */     int colonPos = nameAtt.indexOf("":"");
/*  70 */     if (colonPos != -1) {
/*     */       
/*  72 */       String prefix = nameAtt.substring(0, colonPos);
/*  73 */       Iterator it = elem.getAllDeclaredNamespaces();
/*  74 */       while (it.hasNext()) {
/*  75 */         OMNamespace n = it.next();
/*  76 */         if (prefix.equals(n.getPrefix())) {
/*  77 */           headerMediator.setQName(new QName(n.getNamespaceURI(), nameAtt.substring(colonPos + 1), prefix));
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/*  83 */       headerMediator.setQName(new QName(nameAtt));
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  89 */     initMediator((Mediator)headerMediator, elem);
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (action != null && ""remove"".equals(action.getAttributeValue())) {
/*  94 */       headerMediator.setAction(1);
/*     */     }
/*     */     
/*  97 */     if (headerMediator.getAction() == 0 && value == null && exprn == null) {
/*     */       
/*  99 */       String msg = ""A 'value' or 'expression' attribute is required for a [set] header mediator"";
/* 100 */       log.error(msg);
/* 101 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 104 */     if (value != null && value.getAttributeValue() != null) {
/* 105 */       headerMediator.setValue(value.getAttributeValue());
/*     */     }
/* 107 */     else if (exprn != null && exprn.getAttributeValue() != null) {
/*     */       try {
/* 109 */         AXIOMXPath xp = new AXIOMXPath(exprn.getAttributeValue());
/* 110 */         OMElementUtils.addNameSpaces(xp, elem, log);
/* 111 */         headerMediator.setExpression(xp);
/* 112 */       } catch (JaxenException je) {
/* 113 */         String msg = ""Invalid XPath expression : "" + exprn.getAttributeValue();
/* 114 */         log.error(msg);
/* 115 */         throw new SynapseException(msg, (Throwable)je);
/*     */       } 
/*     */     } 
/*     */     
/* 119 */     return (Mediator)headerMediator;
/*     */   }
/*     */ 
/*     */   
/* 123 */   public QName getTagQName() { return HEADER_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\HeaderMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.HeaderMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.HeaderMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HeaderMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(FilterMediatorSerializer.class);
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  48 */     if (!(m instanceof HeaderMediator)) {
/*  49 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  52 */     HeaderMediator mediator = (HeaderMediator)m;
/*  53 */     OMElement header = fac.createOMElement(""header"", synNS);
/*  54 */     finalizeSerialization(header, (Mediator)mediator);
/*     */     
/*  56 */     QName qName = mediator.getQName();
/*  57 */     if (qName != null) {
/*  58 */       if (qName.getNamespaceURI() != null) {
/*  59 */         header.addAttribute(fac.createOMAttribute(""name"", nullNS, ((qName.getPrefix() != null && !"""".equals(qName.getPrefix())) ? (qName.getPrefix() + "":"") : """") + qName.getLocalPart()));
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*  64 */         header.declareNamespace(qName.getNamespaceURI(), qName.getPrefix());
/*     */       } else {
/*  66 */         header.addAttribute(fac.createOMAttribute(""name"", nullNS, qName.getLocalPart()));
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*  71 */     if (mediator.getAction() == 1) {
/*  72 */       header.addAttribute(fac.createOMAttribute(""action"", nullNS, ""remove""));
/*     */     
/*     */     }
/*  75 */     else if (mediator.getValue() != null) {
/*  76 */       header.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getValue()));
/*     */     
/*     */     }
/*  79 */     else if (mediator.getExpression() != null) {
/*  80 */       header.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getExpression().toString()));
/*     */       
/*  82 */       serializeNamespaces(header, mediator.getExpression());
/*     */     } else {
/*     */       
/*  85 */       handleException(""Value or expression required for a set header mediator"");
/*     */     } 
/*     */ 
/*     */     
/*  89 */     if (parent != null) {
/*  90 */       parent.addChild((OMNode)header);
/*     */     }
/*  92 */     return header;
/*     */   }
/*     */ 
/*     */   
/*  96 */   public String getMediatorClassName() { return HeaderMediator.class.getName(); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 100 */     log.error(msg);
/* 101 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\HeaderMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.InMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.filters.InMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 39 */   private static final QName IN_Q = new QName(""http://ws.apache.org/ns/synapse"", ""in"");
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 42 */     InMediator filter = new InMediator();
/*    */ 
/*    */     
/* 45 */     initMediator((Mediator)filter, elem);
/* 46 */     addChildren(elem, (ListMediator)filter);
/* 47 */     return (Mediator)filter;
/*    */   }
/*    */ 
/*    */   
/* 51 */   public QName getTagQName() { return IN_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\InMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.InMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.filters.InMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/* 32 */   private static final Log log = LogFactory.getLog(InMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 36 */     if (!(m instanceof InMediator)) {
/* 37 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 40 */     InMediator mediator = (InMediator)m;
/* 41 */     OMElement in = fac.createOMElement(""in"", synNS);
/* 42 */     finalizeSerialization(in, (Mediator)mediator);
/*    */     
/* 44 */     serializeChildren(in, mediator.getList());
/*    */     
/* 46 */     if (parent != null) {
/* 47 */       parent.addChild((OMNode)in);
/*    */     }
/* 49 */     return in;
/*    */   }
/*    */ 
/*    */   
/* 53 */   public String getMediatorClassName() { return InMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 57 */     log.error(msg);
/* 58 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\InMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.LogMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.LogMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 42 */   private static final Log log = LogFactory.getLog(LogMediatorFactory.class);
/*    */   
/* 44 */   private static final QName LOG_Q = new QName(""http://ws.apache.org/ns/synapse"", ""log"");
/*    */   
/*    */   private static final String SIMPLE = ""simple"";
/*    */   private static final String HEADERS = ""headers"";
/*    */   private static final String FULL = ""full"";
/*    */   private static final String CUSTOM = ""custom"";
/*    */   
/* 51 */   public QName getTagQName() { return LOG_Q; }
/*    */ 
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 56 */     LogMediator logMediator = new LogMediator();
/*    */ 
/*    */ 
/*    */     
/* 60 */     initMediator((Mediator)logMediator, elem);
/*    */ 
/*    */     
/* 63 */     OMAttribute level = elem.getAttribute(new QName("""", ""level""));
/* 64 */     if (level != null) {
/* 65 */       String levelstr = level.getAttributeValue();
/* 66 */       if (""simple"".equals(levelstr)) {
/* 67 */         logMediator.setLogLevel(1);
/* 68 */       } else if (""headers"".equals(levelstr)) {
/* 69 */         logMediator.setLogLevel(2);
/* 70 */       } else if (""full"".equals(levelstr)) {
/* 71 */         logMediator.setLogLevel(3);
/* 72 */       } else if (""custom"".equals(levelstr)) {
/* 73 */         logMediator.setLogLevel(0);
/*    */       } 
/*    */     } 
/*    */ 
/*    */     
/* 78 */     OMAttribute separator = elem.getAttribute(new QName("""", ""separator""));
/* 79 */     if (separator != null) {
/* 80 */       logMediator.setSeparator(separator.getAttributeValue());
/*    */     }
/*    */     
/* 83 */     logMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*    */     
/* 85 */     return (Mediator)logMediator;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\LogMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.LogMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.builtin.LogMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(LogMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof LogMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 47 */     LogMediator mediator = (LogMediator)m;
/* 48 */     OMElement log = fac.createOMElement(""log"", synNS);
/* 49 */     finalizeSerialization(log, (Mediator)mediator);
/*    */     
/* 51 */     if (mediator.getLogLevel() != 1) {
/* 52 */       log.addAttribute(fac.createOMAttribute(""level"", nullNS, (mediator.getLogLevel() == 2) ? ""headers"" : ((mediator.getLogLevel() == 3) ? ""full"" : ((mediator.getLogLevel() == 0) ? ""custom"" : ""simple""))));
/*    */     }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */     
/* 60 */     if (mediator.getSeparator() != "", "") {
/* 61 */       log.addAttribute(fac.createOMAttribute(""separator"", nullNS, mediator.getSeparator()));
/*    */     }
/*    */ 
/*    */     
/* 65 */     serializeProperties(log, mediator.getProperties());
/*    */     
/* 67 */     if (parent != null) {
/* 68 */       parent.addChild((OMNode)log);
/*    */     }
/* 70 */     return log;
/*    */   }
/*    */ 
/*    */   
/* 74 */   public String getMediatorClassName() { return LogMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 78 */     log.error(msg);
/* 79 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\LogMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorFactory,"package org.apache.synapse.config.xml;
import javax.xml.namespace.QName;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
public interface MediatorFactory {
  Mediator createMediator(OMElement paramOMElement);
  QName getTagQName();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\MediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorFactoryFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.XMLToObjectMapper;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorFactoryFinder
/*     */   implements XMLToObjectMapper
/*     */ {
/*  48 */   private static final Log log = LogFactory.getLog(MediatorFactoryFinder.class);
/*     */   
/*  50 */   private static final Class[] mediatorFactories = new Class[] { SequenceMediatorFactory.class, LogMediatorFactory.class, SendMediatorFactory.class, FilterMediatorFactory.class, SynapseMediatorFactory.class, DropMediatorFactory.class, HeaderMediatorFactory.class, FaultMediatorFactory.class, PropertyMediatorFactory.class, SwitchMediatorFactory.class, InMediatorFactory.class, OutMediatorFactory.class, RMSequenceMediatorFactory.class, ClassMediatorFactory.class, ValidateMediatorFactory.class, XSLTMediatorFactory.class };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  69 */   private static MediatorFactoryFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   private static Map factoryMap = new HashMap();
/*     */   
/*     */   public static synchronized MediatorFactoryFinder getInstance() {
/*  77 */     if (instance == null) {
/*  78 */       instance = new MediatorFactoryFinder();
/*     */     }
/*  80 */     return instance;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void reset() {
/*  87 */     factoryMap.clear();
/*  88 */     instance = null;
/*     */   }
/*     */ 
/*     */   
/*     */   private MediatorFactoryFinder() {
/*  93 */     factoryMap = new HashMap();
/*     */     
/*  95 */     for (int i = 0; i < mediatorFactories.length; i++) {
/*  96 */       Class c = mediatorFactories[i];
/*     */       try {
/*  98 */         MediatorFactory fac = c.newInstance();
/*  99 */         factoryMap.put(fac.getTagQName(), c);
/* 100 */       } catch (Exception e) {
/* 101 */         throw new SynapseException(""Error instantiating "" + c.getName(), e);
/*     */       } 
/*     */     } 
/*     */     
/* 105 */     registerExtensions();
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 109 */     log.error(msg, e);
/* 110 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 114 */     log.error(msg);
/* 115 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 129 */     Iterator it = Service.providers(MediatorFactory.class);
/* 130 */     while (it.hasNext()) {
/* 131 */       MediatorFactory mf = it.next();
/* 132 */       QName tag = mf.getTagQName();
/* 133 */       factoryMap.put(tag, mf.getClass());
/* 134 */       log.debug(""Added MediatorFactory "" + mf.getClass() + "" to handle "" + tag);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator getMediator(OMElement element) {
/* 148 */     String localName = element.getLocalName();
/* 149 */     QName qName = null;
/* 150 */     if (element.getNamespace() != null) {
/* 151 */       qName = new QName(element.getNamespace().getNamespaceURI(), localName);
/*     */     } else {
/* 153 */       qName = new QName(localName);
/*     */     } 
/* 155 */     log.debug(""getMediator("" + qName + "")"");
/* 156 */     Class cls = (Class)factoryMap.get(qName);
/*     */     
/* 158 */     if (cls == null && localName.indexOf('.') > -1) {
/* 159 */       String newLocalName = localName.substring(0, localName.indexOf('.'));
/* 160 */       qName = new QName(element.getNamespace().getNamespaceURI(), newLocalName);
/* 161 */       log.debug(""getMediator.2("" + qName + "")"");
/* 162 */       cls = (Class)factoryMap.get(qName);
/*     */     } 
/*     */     
/* 165 */     if (cls == null) {
/* 166 */       String msg = ""Unknown mediator referenced by configuration element : "" + qName;
/* 167 */       log.error(msg);
/* 168 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 172 */       MediatorFactory mf = cls.newInstance();
/* 173 */       return mf.createMediator(element);
/*     */     }
/* 175 */     catch (InstantiationException e) {
/* 176 */       String msg = ""Error initializing mediator factory : "" + cls;
/* 177 */       log.error(msg);
/* 178 */       throw new SynapseException(msg, e);
/*     */     }
/* 180 */     catch (IllegalAccessException e) {
/* 181 */       String msg = ""Error initializing mediator factory : "" + cls;
/* 182 */       log.error(msg);
/* 183 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public Map getFactoryMap() { return factoryMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 200 */     if (om instanceof OMElement) {
/* 201 */       return getMediator((OMElement)om);
/*     */     }
/* 203 */     handleException(""Invalid mediator configuration XML : "" + om);
/*     */     
/* 205 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\MediatorFactoryFinder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorPropertyFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorPropertyFactory
/*     */ {
/*  48 */   private static final Log log = LogFactory.getLog(MediatorPropertyFactory.class);
/*     */ 
/*     */   
/*     */   public static List getMediatorProperties(OMElement elem) {
/*  52 */     List propertyList = new ArrayList();
/*     */     
/*  54 */     Iterator iter = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""property""));
/*  55 */     while (iter.hasNext()) {
/*     */       
/*  57 */       OMElement propEle = iter.next();
/*  58 */       OMAttribute attName = propEle.getAttribute(MediatorProperty.ATT_NAME_Q);
/*  59 */       OMAttribute attValue = propEle.getAttribute(MediatorProperty.ATT_VALUE_Q);
/*  60 */       OMAttribute attExpr = propEle.getAttribute(MediatorProperty.ATT_EXPR_Q);
/*     */       
/*  62 */       MediatorProperty prop = new MediatorProperty();
/*     */       
/*  64 */       if (attName == null || attName.getAttributeValue() == null || attName.getAttributeValue().trim().length() == 0) {
/*     */         
/*  66 */         String msg = ""Entry name is a required attribute for a Log property"";
/*  67 */         log.error(msg);
/*  68 */         throw new SynapseException(msg);
/*     */       } 
/*  70 */       prop.setName(attName.getAttributeValue());
/*     */ 
/*     */ 
/*     */       
/*  74 */       if (attValue != null) {
/*  75 */         if (attValue.getAttributeValue() == null || attValue.getAttributeValue().trim().length() == 0) {
/*  76 */           String msg = ""Entry attribute value (if specified) is required for a Log property"";
/*  77 */           log.error(msg);
/*  78 */           throw new SynapseException(msg);
/*     */         } 
/*  80 */         prop.setValue(attValue.getAttributeValue());
/*     */       
/*     */       }
/*  83 */       else if (attExpr != null) {
/*     */         
/*  85 */         if (attExpr.getAttributeValue() == null || attExpr.getAttributeValue().trim().length() == 0) {
/*  86 */           String msg = ""Entry attribute expression (if specified) is required for a mediator property"";
/*  87 */           log.error(msg);
/*  88 */           throw new SynapseException(msg);
/*     */         } 
/*     */         
/*     */         try {
/*  92 */           AXIOMXPath xp = new AXIOMXPath(attExpr.getAttributeValue());
/*  93 */           OMElementUtils.addNameSpaces(xp, propEle, log);
/*  94 */           prop.setExpression(xp);
/*     */         }
/*  96 */         catch (JaxenException e) {
/*  97 */           String msg = ""Invalid XPapth expression : "" + attExpr.getAttributeValue();
/*  98 */           log.error(msg);
/*  99 */           throw new SynapseException(msg, (Throwable)e);
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 104 */         String msg = ""Entry attribute value OR expression must be specified for a mediator property"";
/* 105 */         log.error(msg);
/* 106 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/* 109 */       propertyList.add(prop);
/*     */     } 
/*     */     
/* 112 */     return propertyList;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\MediatorPropertyFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorSerializer,"package org.apache.synapse.config.xml;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
public interface MediatorSerializer {
  OMElement serializeMediator(OMElement paramOMElement, Mediator paramMediator);
  String getMediatorClassName();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\MediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorSerializerFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorSerializerFinder
/*     */ {
/*  36 */   private static final Log log = LogFactory.getLog(MediatorSerializerFinder.class);
/*     */   
/*  38 */   private static final Class[] mediatorSerializers = new Class[] { SequenceMediatorSerializer.class, LogMediatorSerializer.class, SendMediatorSerializer.class, FilterMediatorSerializer.class, SynapseMediatorSerializer.class, DropMediatorSerializer.class, HeaderMediatorSerializer.class, FaultMediatorSerializer.class, PropertyMediatorSerializer.class, SwitchMediatorSerializer.class, InMediatorSerializer.class, OutMediatorSerializer.class, RMSequenceMediatorSerializer.class, ClassMediatorSerializer.class, ValidateMediatorSerializer.class, XSLTMediatorSerializer.class };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  57 */   private static MediatorSerializerFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   private static Map serializerMap = new HashMap();
/*     */   
/*     */   public static synchronized MediatorSerializerFinder getInstance() {
/*  65 */     if (instance == null) {
/*  66 */       instance = new MediatorSerializerFinder();
/*     */     }
/*  68 */     return instance;
/*     */   }
/*     */ 
/*     */   
/*  72 */   public MediatorSerializer getSerializer(Mediator mediator) { return (MediatorSerializer)serializerMap.get(mediator.getClass().getName()); }
/*     */ 
/*     */ 
/*     */   
/*     */   private MediatorSerializerFinder() {
/*  77 */     serializerMap = new HashMap();
/*     */     
/*  79 */     for (int i = 0; i < mediatorSerializers.length; i++) {
/*  80 */       Class c = mediatorSerializers[i];
/*     */       try {
/*  82 */         MediatorSerializer ser = c.newInstance();
/*  83 */         serializerMap.put(ser.getMediatorClassName(), ser);
/*  84 */       } catch (Exception e) {
/*  85 */         throw new SynapseException(""Error instantiating "" + c.getName(), e);
/*     */       } 
/*     */     } 
/*     */     
/*  89 */     registerExtensions();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 100 */     log.debug(""Registering mediator extensions found in the classpath : "" + System.getProperty(""java.class.path""));
/*     */ 
/*     */     
/* 103 */     Iterator it = Service.providers(MediatorSerializer.class);
/* 104 */     while (it.hasNext()) {
/* 105 */       MediatorSerializer ms = it.next();
/* 106 */       String name = ms.getMediatorClassName();
/*     */       try {
/* 108 */         serializerMap.put(name, ms.getClass().newInstance());
/* 109 */       } catch (InstantiationException e) {
/* 110 */         handleException(""Error instantiating mediator serializer : "" + ms);
/* 111 */       } catch (IllegalAccessException e) {
/* 112 */         handleException(""Error instantiating mediator serializer : "" + ms);
/*     */       } 
/* 114 */       log.debug(""Added MediatorSerializer "" + ms.getClass().getName() + "" to handle "" + name);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 119 */     log.error(msg);
/* 120 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\MediatorSerializerFinder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OMElementUtils,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.jaxen.JaxenException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OMElementUtils
/*    */ {
/* 37 */   private static final Log log = LogFactory.getLog(OMElementUtils.class);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static String getNameSpaceWithPrefix(String prefix, OMElement elem) {
/* 46 */     if (prefix == null || elem == null) {
/* 47 */       log.warn(""Searching for null NS prefix and/or using null OMElement"");
/* 48 */       return null;
/*    */     } 
/*    */     
/* 51 */     Iterator iter = elem.getAllDeclaredNamespaces();
/* 52 */     while (iter.hasNext()) {
/* 53 */       OMNamespace ns = iter.next();
/* 54 */       if (prefix.equals(ns.getPrefix())) {
/* 55 */         return ns.getNamespaceURI();
/*    */       }
/*    */     } 
/* 58 */     return null;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static void addNameSpaces(AXIOMXPath xpath, OMElement elem, Log log) {
/*    */     try {
/* 69 */       Iterator it = elem.getAllDeclaredNamespaces();
/* 70 */       while (it.hasNext()) {
/* 71 */         OMNamespace n = it.next();
/* 72 */         xpath.addNamespace(n.getPrefix(), n.getNamespaceURI());
/*    */       } 
/* 74 */     } catch (JaxenException je) {
/* 75 */       String msg = ""Error adding declared name spaces of "" + elem + "" to the XPath : "" + xpath;
/* 76 */       log.error(msg);
/* 77 */       throw new SynapseException(msg, (Throwable)je);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\OMElementUtils.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OutMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.filters.OutMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 39 */   private static final QName OUT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""out"");
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 42 */     OutMediator filter = new OutMediator();
/*    */ 
/*    */ 
/*    */     
/* 46 */     initMediator((Mediator)filter, elem);
/*    */     
/* 48 */     addChildren(elem, (ListMediator)filter);
/* 49 */     return (Mediator)filter;
/*    */   }
/*    */ 
/*    */   
/* 53 */   public QName getTagQName() { return OUT_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\OutMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OutMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.filters.OutMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/* 32 */   private static final Log log = LogFactory.getLog(OutMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 36 */     if (!(m instanceof OutMediator)) {
/* 37 */       handleException(""Unsupported mediator passed out for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 40 */     OutMediator mediator = (OutMediator)m;
/* 41 */     OMElement out = fac.createOMElement(""out"", synNS);
/* 42 */     finalizeSerialization(out, (Mediator)mediator);
/* 43 */     serializeChildren(out, mediator.getList());
/*    */     
/* 45 */     if (parent != null) {
/* 46 */       parent.addChild((OMNode)out);
/*    */     }
/* 48 */     return out;
/*    */   }
/*    */ 
/*    */   
/* 52 */   public String getMediatorClassName() { return OutMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 56 */     log.error(msg);
/* 57 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\OutMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.PropertyMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.builtin.PropertyMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  43 */   private static final Log log = LogFactory.getLog(LogMediatorFactory.class);
/*     */   
/*  45 */   private static final QName PROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  49 */     PropertyMediator propMediator = new PropertyMediator();
/*  50 */     OMAttribute name = elem.getAttribute(new QName("""", ""name""));
/*  51 */     OMAttribute value = elem.getAttribute(new QName("""", ""value""));
/*  52 */     OMAttribute expression = elem.getAttribute(new QName("""", ""expression""));
/*  53 */     OMAttribute scope = elem.getAttribute(new QName("""", ""scope""));
/*  54 */     OMAttribute action = elem.getAttribute(new QName("""", ""action""));
/*  55 */     if (name == null) {
/*  56 */       String msg = ""The 'name' attribute is required for the configuration of a property mediator"";
/*  57 */       log.error(msg);
/*  58 */       throw new SynapseException(msg);
/*  59 */     }  if (value == null && expression == null && (action == null || !""remove"".equals(action.getAttributeValue()))) {
/*  60 */       String msg = ""Either an 'value' or 'expression' attribute is required for a property mediator when action is SET"";
/*  61 */       log.error(msg);
/*  62 */       throw new SynapseException(msg);
/*     */     } 
/*  64 */     propMediator.setName(name.getAttributeValue());
/*  65 */     if (value != null) {
/*  66 */       propMediator.setValue(value.getAttributeValue());
/*  67 */     } else if (expression != null) {
/*     */       try {
/*  69 */         AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/*  70 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  71 */         propMediator.setExpression(xp);
/*     */       }
/*  73 */       catch (JaxenException e) {
/*  74 */         String msg = ""Invalid XPath expression for attribute 'expression' : "" + expression.getAttributeValue();
/*  75 */         log.error(msg);
/*  76 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } 
/*  79 */     if (scope != null) {
/*  80 */       String valueStr = scope.getAttributeValue();
/*  81 */       if (!""axis2"".equals(valueStr) && !""transport"".equals(valueStr) && !""default"".equals(valueStr)) {
/*     */         
/*  83 */         String msg = ""Only 'axis2' or 'transport' values are allowed for attribute scope for a property mediator, Unsupported scope "" + valueStr;
/*     */ 
/*     */         
/*  86 */         log.error(msg);
/*  87 */         throw new SynapseException(msg);
/*     */       } 
/*  89 */       propMediator.setScope(valueStr);
/*     */     } 
/*     */ 
/*     */     
/*  93 */     initMediator((Mediator)propMediator, elem);
/*     */ 
/*     */     
/*  96 */     if (action != null && ""remove"".equals(action.getAttributeValue())) {
/*  97 */       propMediator.setAction(1);
/*     */     }
/*  99 */     return (Mediator)propMediator;
/*     */   }
/*     */ 
/*     */   
/* 103 */   public QName getTagQName() { return PROP_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\PropertyMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.PropertyMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.builtin.PropertyMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PropertyMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 36 */   private static final Log log = LogFactory.getLog(PropertyMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 40 */     if (!(m instanceof PropertyMediator)) {
/* 41 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 44 */     PropertyMediator mediator = (PropertyMediator)m;
/* 45 */     OMElement property = fac.createOMElement(""property"", synNS);
/* 46 */     finalizeSerialization(property, (Mediator)mediator);
/*    */     
/* 48 */     if (mediator.getName() != null) {
/* 49 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*    */     } else {
/*    */       
/* 52 */       handleException(""Invalid property mediator. Name is required"");
/*    */     } 
/*    */     
/* 55 */     if (mediator.getValue() != null) {
/* 56 */       property.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getValue()));
/*    */     
/*    */     }
/* 59 */     else if (mediator.getExpression() != null) {
/* 60 */       property.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getExpression().toString()));
/*    */       
/* 62 */       serializeNamespaces(property, mediator.getExpression());
/*    */     }
/* 64 */     else if (mediator.getAction() == 0) {
/* 65 */       handleException(""Invalid property mediator. Value or expression is required if action is SET"");
/*    */     } 
/* 67 */     if (mediator.getScope() != null)
/*    */     {
/* 69 */       property.addAttribute(fac.createOMAttribute(""scope"", nullNS, mediator.getScope()));
/*    */     }
/* 71 */     if (mediator.getAction() == 1) {
/* 72 */       property.addAttribute(fac.createOMAttribute(""action"", nullNS, ""remove""));
/*    */     }
/*    */     
/* 75 */     if (parent != null) {
/* 76 */       parent.addChild((OMNode)property);
/*    */     }
/* 78 */     return property;
/*    */   }
/*    */ 
/*    */   
/* 82 */   public String getMediatorClassName() { return PropertyMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 86 */     log.error(msg);
/* 87 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\PropertyMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ProxyServiceFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.StringTokenizer;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointFactory;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceFactory
/*     */ {
/*  65 */   private static final Log log = LogFactory.getLog(ProxyServiceFactory.class);
/*     */ 
/*     */   
/*     */   public static ProxyService createProxy(OMElement elem) {
/*  69 */     ProxyService proxy = new ProxyService();
/*     */     
/*  71 */     OMAttribute name = elem.getAttribute(new QName("""", ""name""));
/*  72 */     if (name == null) {
/*  73 */       handleException(""The 'name' attribute is required for a Proxy service definition"");
/*     */     } else {
/*  75 */       proxy.setName(name.getAttributeValue());
/*     */     } 
/*     */     
/*  78 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */     
/*  80 */     if (statistics != null) {
/*  81 */       String statisticsValue = statistics.getAttributeValue();
/*  82 */       if (statisticsValue != null) {
/*  83 */         if (""enable"".equals(statisticsValue)) {
/*  84 */           proxy.setStatisticsEnable(1);
/*  85 */         } else if (""disable"".equals(statisticsValue)) {
/*  86 */           proxy.setStatisticsEnable(0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/*  91 */     OMAttribute trans = elem.getAttribute(new QName("""", ""transports""));
/*  92 */     if (trans != null) {
/*  93 */       String transports = trans.getAttributeValue();
/*  94 */       if (transports != null && !""all"".equals(transports)) {
/*     */ 
/*     */         
/*  97 */         StringTokenizer st = new StringTokenizer(transports, "" ,"");
/*  98 */         ArrayList transportList = new ArrayList();
/*  99 */         while (st.hasMoreTokens()) {
/* 100 */           String token = st.nextToken();
/* 101 */           if (token.length() != 0) {
/* 102 */             transportList.add(token);
/*     */           }
/*     */         } 
/* 105 */         proxy.setTransports(transportList);
/*     */       } 
/*     */     } 
/* 108 */     OMAttribute trace = elem.getAttribute(new QName("""", ""trace""));
/* 109 */     if (trace != null) {
/* 110 */       String traceValue = trace.getAttributeValue();
/* 111 */       if (traceValue != null) {
/* 112 */         if (traceValue.equals(""enable"")) {
/* 113 */           proxy.setTraceState(1);
/* 114 */         } else if (traceValue.equals(""disable"")) {
/* 115 */           proxy.setTraceState(0);
/*     */         } 
/*     */       }
/*     */     } 
/* 119 */     OMAttribute startOnLoad = elem.getAttribute(new QName("""", ""startOnLoad""));
/*     */     
/* 121 */     if (startOnLoad != null) {
/* 122 */       proxy.setStartOnLoad(Boolean.valueOf(startOnLoad.getAttributeValue()).booleanValue());
/*     */     } else {
/* 124 */       proxy.setStartOnLoad(true);
/*     */     } 
/*     */ 
/*     */     
/* 128 */     OMElement descriptionElement = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""description""));
/*     */     
/* 130 */     if (descriptionElement != null) {
/* 131 */       proxy.setDescription(descriptionElement.getText().trim());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 137 */     OMElement target = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""target""));
/*     */     
/* 139 */     if (target != null) {
/* 140 */       boolean isTargetOk = false;
/* 141 */       SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory();
/* 142 */       OMAttribute inSequence = target.getAttribute(new QName("""", ""inSequence""));
/* 143 */       if (inSequence != null) {
/* 144 */         proxy.setTargetInSequence(inSequence.getAttributeValue());
/* 145 */         isTargetOk = true;
/*     */       } else {
/* 147 */         OMElement inSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""inSequence""));
/* 148 */         if (inSequenceElement != null) {
/* 149 */           proxy.setTargetInLineInSequence(mediatorFactory.createAnonymousSequence(inSequenceElement));
/* 150 */           isTargetOk = true;
/*     */         } 
/*     */       } 
/* 153 */       OMAttribute outSequence = target.getAttribute(new QName("""", ""outSequence""));
/* 154 */       if (outSequence != null) {
/* 155 */         proxy.setTargetOutSequence(outSequence.getAttributeValue());
/*     */       } else {
/* 157 */         OMElement outSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""outSequence""));
/* 158 */         if (outSequenceElement != null) {
/* 159 */           proxy.setTargetInLineOutSequence(mediatorFactory.createAnonymousSequence(outSequenceElement));
/*     */         } else {
/* 161 */           handleException(""Target for the proxy service must declare an out sequence"");
/*     */         } 
/*     */       } 
/* 164 */       OMAttribute faultSequence = target.getAttribute(new QName("""", ""faultSequence""));
/* 165 */       if (faultSequence != null) {
/* 166 */         proxy.setTargetFaultSequence(faultSequence.getAttributeValue());
/*     */       } else {
/* 168 */         OMElement faultSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""faultSequence""));
/* 169 */         if (faultSequenceElement != null) {
/* 170 */           proxy.setTargetInLineFaultSequence(mediatorFactory.createAnonymousSequence(faultSequenceElement));
/*     */         }
/*     */       } 
/* 173 */       OMAttribute tgtEndpt = target.getAttribute(new QName("""", ""endpoint""));
/* 174 */       if (tgtEndpt != null) {
/* 175 */         proxy.setTargetEndpoint(tgtEndpt.getAttributeValue());
/* 176 */         isTargetOk = true;
/*     */       } else {
/* 178 */         OMElement endpointElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""endpoint""));
/* 179 */         if (endpointElement != null) {
/* 180 */           EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(endpointElement);
/* 181 */           proxy.setTargetInLineEndpoint(fac.createEndpoint(endpointElement, true));
/* 182 */           isTargetOk = true;
/*     */         } 
/*     */       } 
/* 185 */       if (!isTargetOk) {
/* 186 */         handleException(""Target of the proxy service must declare either an inSequence or endpoint or both"");
/*     */       }
/*     */     } else {
/* 189 */       handleException(""Target is required for a Proxy service definition"");
/*     */     } 
/*     */ 
/*     */     
/* 193 */     OMElement wsdl = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""publishWSDL""));
/* 194 */     if (wsdl != null) {
/* 195 */       OMAttribute wsdlkey = wsdl.getAttribute(new QName("""", ""key""));
/* 196 */       if (wsdlkey != null) {
/* 197 */         proxy.setWSDLKey(wsdlkey.getAttributeValue());
/*     */       } else {
/* 199 */         OMAttribute wsdlURI = wsdl.getAttribute(new QName("""", ""uri""));
/* 200 */         if (wsdlURI != null) {
/*     */           try {
/* 202 */             proxy.setWsdlURI(new URI(wsdlURI.getAttributeValue()));
/* 203 */           } catch (URISyntaxException e) {
/* 204 */             String msg = ""Error creating uri for proxy service wsdl"";
/* 205 */             log.error(msg);
/* 206 */             handleException(msg, e);
/*     */           } 
/*     */         } else {
/* 209 */           OMElement wsdl11 = wsdl.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""definitions""));
/* 210 */           if (wsdl11 != null) {
/* 211 */             proxy.setInLineWSDL(wsdl11);
/*     */           } else {
/* 213 */             OMElement wsdl20 = wsdl.getFirstChildWithName(new QName(""http://www.w3.org/2004/03/wsdl"", ""descriptions""));
/* 214 */             if (wsdl20 != null) {
/* 215 */               proxy.setInLineWSDL(wsdl20);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 224 */     Iterator policies = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""policy""));
/*     */     
/* 226 */     while (policies.hasNext()) {
/* 227 */       Object o = policies.next();
/* 228 */       if (o instanceof OMElement) {
/* 229 */         OMElement policy = (OMElement)o;
/* 230 */         OMAttribute key = policy.getAttribute(new QName("""", ""key""));
/* 231 */         if (key != null) {
/* 232 */           proxy.addServiceLevelPolicy(key.getAttributeValue()); continue;
/*     */         } 
/* 234 */         handleException(""Policy element does not specify the policy key"");
/*     */         continue;
/*     */       } 
/* 237 */       handleException(""Invalid 'policy' element found under element 'policies'"");
/*     */     } 
/*     */ 
/*     */     
/* 241 */     Iterator props = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""parameter""));
/*     */     
/* 243 */     while (props.hasNext()) {
/* 244 */       Object o = props.next();
/* 245 */       if (o instanceof OMElement) {
/* 246 */         OMElement prop = (OMElement)o;
/* 247 */         OMAttribute pname = prop.getAttribute(new QName("""", ""name""));
/* 248 */         OMElement propertyValue = prop.getFirstElement();
/* 249 */         if (pname != null) {
/* 250 */           if (propertyValue != null) {
/* 251 */             proxy.addParameter(pname.getAttributeValue(), propertyValue); continue;
/*     */           } 
/* 253 */           proxy.addParameter(pname.getAttributeValue(), prop.getText().trim());
/*     */           continue;
/*     */         } 
/* 256 */         handleException(""Invalid property specified for proxy service : "" + name);
/*     */         continue;
/*     */       } 
/* 259 */       handleException(""Invalid property specified for proxy service : "" + name);
/*     */     } 
/*     */ 
/*     */     
/* 263 */     if (elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM"")) != null)
/*     */     {
/* 265 */       proxy.setWsRMEnabled(true);
/*     */     }
/*     */     
/* 268 */     if (elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec"")) != null)
/*     */     {
/* 270 */       proxy.setWsSecEnabled(true);
/*     */     }
/*     */     
/* 273 */     return proxy;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 277 */     log.error(msg);
/* 278 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 282 */     log.error(msg, e);
/* 283 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ProxyServiceFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ProxyServiceSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceSerializer
/*     */ {
/*  58 */   private static final Log log = LogFactory.getLog(PropertyMediatorSerializer.class);
/*     */   
/*  60 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*  61 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*  62 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*     */ 
/*     */   
/*     */   public static OMElement serializeProxy(OMElement parent, ProxyService service) {
/*  66 */     OMElement proxy = fac.createOMElement(""proxy"", synNS);
/*  67 */     if (service.getName() != null) {
/*  68 */       proxy.addAttribute(fac.createOMAttribute(""name"", nullNS, service.getName()));
/*     */     } else {
/*     */       
/*  71 */       handleException(""Invalid proxy service. Service name is required"");
/*     */     } 
/*  73 */     String descriptionStr = service.getDescription();
/*  74 */     if (descriptionStr != null) {
/*  75 */       OMElement description = fac.createOMElement(""description"", synNS);
/*  76 */       description.addChild((OMNode)fac.createOMText(descriptionStr));
/*  77 */       proxy.addChild((OMNode)description);
/*     */     } 
/*  79 */     ArrayList transports = service.getTransports();
/*  80 */     if (transports != null && !transports.isEmpty()) {
/*  81 */       String transportStr = """" + transports.get(0);
/*  82 */       for (int i = 1; i < transports.size(); i++) {
/*  83 */         transportStr = transportStr + "" "" + transports.get(i);
/*     */       }
/*  85 */       proxy.addAttribute(fac.createOMAttribute(""transports"", nullNS, transportStr));
/*     */     } 
/*     */     
/*  88 */     if (service.isStartOnLoad()) {
/*  89 */       proxy.addAttribute(fac.createOMAttribute(""startOnLoad"", nullNS, ""true""));
/*     */     } else {
/*     */       
/*  92 */       proxy.addAttribute(fac.createOMAttribute(""startOnLoad"", nullNS, ""false""));
/*     */     } 
/*     */     
/*  95 */     String endpoint = service.getTargetEndpoint();
/*     */     
/*  97 */     OMElement target = fac.createOMElement(""target"", synNS);
/*  98 */     Endpoint inLineEndpoint = service.getTargetInLineEndpoint();
/*  99 */     if (endpoint != null) {
/* 100 */       target.addAttribute(fac.createOMAttribute(""endpoint"", nullNS, endpoint));
/*     */       
/* 102 */       proxy.addChild((OMNode)target);
/* 103 */     } else if (inLineEndpoint != null) {
/* 104 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(inLineEndpoint);
/*     */       
/* 106 */       OMElement epElement = serializer.serializeEndpoint(inLineEndpoint);
/* 107 */       target.addChild((OMNode)epElement);
/* 108 */       proxy.addChild((OMNode)target);
/*     */     } 
/* 110 */     String inSeq = service.getTargetInSequence();
/* 111 */     String outSeq = service.getTargetOutSequence();
/* 112 */     String faultSeq = service.getTargetFaultSequence();
/* 113 */     SequenceMediatorSerializer serializer = new SequenceMediatorSerializer();
/* 114 */     if (inSeq != null) {
/* 115 */       target.addAttribute(fac.createOMAttribute(""inSequence"", nullNS, inSeq));
/* 116 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 118 */       SequenceMediator inLineInSeq = service.getTargetInLineInSequence();
/* 119 */       if (inLineInSeq != null) {
/* 120 */         OMElement inSeqElement = serializer.serializeAnonymousSequence(null, inLineInSeq);
/* 121 */         inSeqElement.setLocalName(""inSequence"");
/* 122 */         target.addChild((OMNode)inSeqElement);
/* 123 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/* 126 */     if (outSeq != null) {
/* 127 */       target.addAttribute(fac.createOMAttribute(""outSequence"", nullNS, outSeq));
/* 128 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 130 */       SequenceMediator inLineOutSeq = service.getTargetInLineOutSequence();
/* 131 */       if (inLineOutSeq != null) {
/* 132 */         OMElement outSeqElement = serializer.serializeAnonymousSequence(null, inLineOutSeq);
/* 133 */         outSeqElement.setLocalName(""outSequence"");
/* 134 */         target.addChild((OMNode)outSeqElement);
/* 135 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/* 138 */     if (faultSeq != null) {
/* 139 */       target.addAttribute(fac.createOMAttribute(""faultSequence"", nullNS, faultSeq));
/* 140 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 142 */       SequenceMediator inLineFaultSeq = service.getTargetInLineFaultSequence();
/* 143 */       if (inLineFaultSeq != null) {
/* 144 */         OMElement faultSeqElement = serializer.serializeAnonymousSequence(null, inLineFaultSeq);
/* 145 */         faultSeqElement.setLocalName(""faultSequence"");
/* 146 */         target.addChild((OMNode)faultSeqElement);
/* 147 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 153 */     String wsdlKey = service.getWSDLKey();
/* 154 */     URI wsdlUri = service.getWsdlURI();
/* 155 */     Object inLineWSDL = service.getInLineWSDL();
/* 156 */     OMElement wsdl = fac.createOMElement(""publishWSDL"", synNS);
/* 157 */     if (wsdlKey != null) {
/* 158 */       wsdl.addAttribute(fac.createOMAttribute(""key"", nullNS, wsdlKey));
/*     */       
/* 160 */       proxy.addChild((OMNode)wsdl);
/* 161 */     } else if (inLineWSDL != null) {
/* 162 */       wsdl.addChild((OMNode)inLineWSDL);
/* 163 */       proxy.addChild((OMNode)wsdl);
/* 164 */     } else if (wsdlUri != null) {
/* 165 */       wsdl.addAttribute(fac.createOMAttribute(""uri"", nullNS, wsdlUri.toString()));
/*     */       
/* 167 */       proxy.addChild((OMNode)wsdl);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 174 */     Iterator iter = service.getServiceLevelPolicies().iterator();
/* 175 */     while (iter.hasNext()) {
/* 176 */       String policyKey = iter.next();
/* 177 */       OMElement policy = fac.createOMElement(""policy"", synNS);
/* 178 */       policy.addAttribute(fac.createOMAttribute(""key"", nullNS, policyKey));
/*     */       
/* 180 */       proxy.addChild((OMNode)policy);
/*     */     } 
/*     */     
/* 183 */     iter = service.getParameterMap().keySet().iterator();
/* 184 */     while (iter.hasNext()) {
/* 185 */       String propertyName = iter.next();
/* 186 */       OMElement property = fac.createOMElement(""parameter"", synNS);
/* 187 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, propertyName));
/*     */       
/* 189 */       Object value = service.getParameterMap().get(propertyName);
/* 190 */       if (value != null) {
/* 191 */         if (value instanceof String) {
/* 192 */           property.setText(((String)value).trim());
/* 193 */           proxy.addChild((OMNode)property); continue;
/* 194 */         }  if (value instanceof OMNode) {
/* 195 */           property.addChild((OMNode)value);
/* 196 */           proxy.addChild((OMNode)property);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 201 */     if (service.isWsRMEnabled()) {
/* 202 */       proxy.addChild((OMNode)fac.createOMElement(""enableRM"", synNS));
/*     */     }
/* 204 */     if (service.isWsSecEnabled()) {
/* 205 */       proxy.addChild((OMNode)fac.createOMElement(""enableSec"", synNS));
/*     */     }
/*     */     
/* 208 */     int isEnableStatistics = service.getStatisticsEnable();
/* 209 */     String statisticsValue = null;
/* 210 */     if (isEnableStatistics == 1) {
/* 211 */       statisticsValue = ""enable"";
/* 212 */     } else if (isEnableStatistics == 0) {
/* 213 */       statisticsValue = ""disable"";
/*     */     } 
/* 215 */     if (statisticsValue != null) {
/* 216 */       proxy.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */     }
/*     */ 
/*     */     
/* 220 */     int traceState = service.getTraceState();
/* 221 */     String traceValue = null;
/* 222 */     if (traceState == 1) {
/* 223 */       traceValue = ""enable"";
/* 224 */     } else if (traceState == 0) {
/* 225 */       traceValue = ""disable"";
/*     */     } 
/* 227 */     if (traceValue != null) {
/* 228 */       proxy.addAttribute(fac.createOMAttribute(""trace"", nullNS, traceValue));
/*     */     }
/*     */     
/* 231 */     if (parent != null) {
/* 232 */       parent.addChild((OMNode)proxy);
/*     */     }
/* 234 */     return proxy;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 238 */     log.error(msg);
/* 239 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ProxyServiceSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RegistryFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegistryFactory
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(RegistryFactory.class);
/*     */   
/*  43 */   public static final QName PROVIDER_Q = new QName("""", ""provider"");
/*  44 */   public static final QName PARAMETER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""parameter"");
/*  45 */   public static final QName NAME_Q = new QName("""", ""name"");
/*     */ 
/*     */   
/*     */   public static Registry createRegistry(OMElement elem) {
/*  49 */     OMAttribute prov = elem.getAttribute(PROVIDER_Q);
/*  50 */     if (prov != null) {
/*     */       try {
/*  52 */         Class provider = Class.forName(prov.getAttributeValue());
/*  53 */         Registry registry = (Registry)provider.newInstance();
/*  54 */         setProperties(registry, elem);
/*  55 */         return registry;
/*     */       }
/*  57 */       catch (ClassNotFoundException e) {
/*  58 */         handleException(""Cannot locate registry provider class : "" + prov.getAttributeValue(), e);
/*     */       }
/*  60 */       catch (IllegalAccessException e) {
/*  61 */         handleException(""Error instantiating registry provider : "" + prov.getAttributeValue(), e);
/*     */       }
/*  63 */       catch (InstantiationException e) {
/*  64 */         handleException(""Error instantiating registry provider : "" + prov.getAttributeValue(), e);
/*     */       } 
/*     */     } else {
/*     */       
/*  68 */       handleException(""The registry 'provider' attribute is required for a registry definition"");
/*     */     } 
/*     */     
/*  71 */     return null;
/*     */   }
/*     */   
/*     */   private static void setProperties(Registry reg, OMElement elem) {
/*  75 */     Iterator params = elem.getChildrenWithName(PARAMETER_Q);
/*  76 */     while (params.hasNext()) {
/*  77 */       Object o = params.next();
/*  78 */       if (o instanceof OMElement) {
/*  79 */         OMElement prop = (OMElement)o;
/*  80 */         OMAttribute pname = prop.getAttribute(NAME_Q);
/*  81 */         String propertyValue = prop.getText();
/*  82 */         if (pname != null) {
/*  83 */           if (propertyValue != null)
/*  84 */             reg.addConfigProperty(pname.getAttributeValue(), propertyValue.trim()); 
/*     */           continue;
/*     */         } 
/*  87 */         handleException(""Invalid registry property - property should have a name "");
/*     */         continue;
/*     */       } 
/*  90 */       handleException(""Invalid registry property"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/*  96 */     log.error(msg);
/*  97 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 101 */     log.error(msg, e);
/* 102 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\RegistryFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RegistrySerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.registry.Registry;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RegistrySerializer
/*    */ {
/* 40 */   private static final Log log = LogFactory.getLog(RegistrySerializer.class);
/*    */   
/* 42 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/* 43 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/* 44 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */ 
/*    */   
/*    */   public static OMElement serializeRegistry(OMElement parent, Registry registry) {
/* 48 */     OMElement reg = fac.createOMElement(""registry"", synNS);
/*    */     
/* 50 */     if (registry.getProviderClass() != null) {
/* 51 */       reg.addAttribute(fac.createOMAttribute(""provider"", nullNS, registry.getProviderClass()));
/*    */     } else {
/*    */       
/* 54 */       handleException(""Invalid registry. Provider is required"");
/*    */     } 
/*    */     
/* 57 */     Iterator iter = registry.getConfigProperties().keySet().iterator();
/* 58 */     while (iter.hasNext()) {
/* 59 */       String name = iter.next();
/* 60 */       String value = (String)registry.getConfigProperties().get(name);
/* 61 */       OMElement property = fac.createOMElement(""parameter"", synNS);
/* 62 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, name));
/*    */       
/* 64 */       property.setText(value.trim());
/* 65 */       reg.addChild((OMNode)property);
/*    */     } 
/*    */     
/* 68 */     if (parent != null) {
/* 69 */       parent.addChild((OMNode)reg);
/*    */     }
/* 71 */     return reg;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 75 */     log.error(msg);
/* 76 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\RegistrySerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RMSequenceMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.builtin.RMSequenceMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RMSequenceMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  43 */   private static final Log log = LogFactory.getLog(LogMediatorFactory.class);
/*     */   
/*  45 */   private static final QName SEQUENCE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""RMSequence"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  49 */     RMSequenceMediator sequenceMediator = new RMSequenceMediator();
/*  50 */     OMAttribute correlation = elem.getAttribute(new QName("""", ""correlation""));
/*     */     
/*  52 */     OMAttribute lastMessage = elem.getAttribute(new QName("""", ""last-message""));
/*     */     
/*  54 */     OMAttribute single = elem.getAttribute(new QName("""", ""single""));
/*  55 */     OMAttribute version = elem.getAttribute(new QName("""", ""version""));
/*     */     
/*  57 */     if (single == null && correlation == null) {
/*  58 */       String msg = ""The 'single' attribute value of true or a 'correlation' attribute is required for the configuration of a RMSequence mediator"";
/*     */       
/*  60 */       log.error(msg);
/*  61 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*  64 */     if (correlation != null) {
/*  65 */       if (correlation.getAttributeValue() != null && correlation.getAttributeValue().trim().length() == 0) {
/*     */         
/*  67 */         String msg = ""Invalid attribute value specified for correlation"";
/*  68 */         log.error(msg);
/*  69 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  73 */         sequenceMediator.setCorrelation(new AXIOMXPath(correlation.getAttributeValue()));
/*  74 */       } catch (JaxenException e) {
/*  75 */         String msg = ""Invalid XPath expression for attribute correlation : "" + correlation.getAttributeValue();
/*     */         
/*  77 */         log.error(msg);
/*  78 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*  81 */       OMElementUtils.addNameSpaces(sequenceMediator.getCorrelation(), elem, log);
/*     */     } 
/*     */     
/*  84 */     if (single != null) {
/*  85 */       sequenceMediator.setSingle(Boolean.valueOf(single.getAttributeValue()));
/*     */     }
/*     */     
/*  88 */     if (sequenceMediator.isSingle() && sequenceMediator.getCorrelation() != null) {
/*  89 */       String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a correlation attribute specified."";
/*     */       
/*  91 */       log.error(msg);
/*  92 */       throw new SynapseException(msg);
/*     */     } 
/*  94 */     if (!sequenceMediator.isSingle() && sequenceMediator.getCorrelation() == null) {
/*  95 */       String msg = ""Invalid RMSequence mediator. A RMSequence must have a single attribute value of true or a correlation attribute specified."";
/*     */       
/*  97 */       log.error(msg);
/*  98 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 101 */     if (lastMessage != null) {
/* 102 */       if (lastMessage.getAttributeValue() != null && lastMessage.getAttributeValue().trim().length() == 0) {
/*     */         
/* 104 */         String msg = ""Invalid attribute value specified for last-message"";
/* 105 */         log.error(msg);
/* 106 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/* 110 */         sequenceMediator.setLastMessage(new AXIOMXPath(lastMessage.getAttributeValue()));
/* 111 */       } catch (JaxenException e) {
/* 112 */         String msg = ""Invalid XPath expression for attribute last-message : "" + lastMessage.getAttributeValue();
/*     */         
/* 114 */         log.error(msg);
/* 115 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/* 118 */       OMElementUtils.addNameSpaces(sequenceMediator.getLastMessage(), elem, log);
/*     */     } 
/*     */     
/* 121 */     if (sequenceMediator.isSingle() && sequenceMediator.getLastMessage() != null) {
/* 122 */       String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a last-message attribute specified."";
/*     */       
/* 124 */       log.error(msg);
/* 125 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 128 */     if (version != null) {
/* 129 */       if (!""1.0"".equals(version.getAttributeValue()) && !""1.1"".equals(version.getAttributeValue())) {
/*     */         
/* 131 */         String msg = ""Only '1.0' or '1.1' values are allowed for attribute version for a RMSequence mediator, Unsupported version "" + version.getAttributeValue();
/*     */ 
/*     */ 
/*     */         
/* 135 */         log.error(msg);
/* 136 */         throw new SynapseException(msg);
/*     */       } 
/* 138 */       sequenceMediator.setVersion(version.getAttributeValue());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 143 */     initMediator((Mediator)sequenceMediator, elem);
/*     */     
/* 145 */     return (Mediator)sequenceMediator;
/*     */   }
/*     */ 
/*     */   
/* 149 */   public QName getTagQName() { return SEQUENCE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\RMSequenceMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RMSequenceMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.builtin.RMSequenceMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RMSequenceMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 36 */   private static final Log log = LogFactory.getLog(RMSequenceMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 40 */     if (!(m instanceof RMSequenceMediator)) {
/* 41 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 44 */     RMSequenceMediator mediator = (RMSequenceMediator)m;
/* 45 */     OMElement sequence = fac.createOMElement(""RMSequence"", synNS);
/* 46 */     finalizeSerialization(sequence, (Mediator)mediator);
/*    */     
/* 48 */     if (mediator.isSingle() && mediator.getCorrelation() != null) {
/* 49 */       handleException(""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a correlation attribute specified."");
/*    */     }
/*    */     
/* 52 */     if (mediator.isSingle() && mediator.getLastMessage() != null) {
/* 53 */       handleException(""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a last-message attribute specified."");
/*    */     }
/*    */ 
/*    */     
/* 57 */     if (mediator.isSingle()) {
/* 58 */       sequence.addAttribute(fac.createOMAttribute(""single"", nullNS, String.valueOf(mediator.isSingle())));
/* 59 */     } else if (mediator.getCorrelation() != null) {
/* 60 */       sequence.addAttribute(fac.createOMAttribute(""correlation"", nullNS, mediator.getCorrelation().toString()));
/*    */       
/* 62 */       serializeNamespaces(sequence, mediator.getCorrelation());
/*    */     } else {
/* 64 */       handleException(""Invalid RMSequence mediator. Specify a single message sequence or a correlation attribute."");
/*    */     } 
/*    */ 
/*    */     
/* 68 */     if (mediator.getLastMessage() != null) {
/* 69 */       sequence.addAttribute(fac.createOMAttribute(""last-message"", nullNS, mediator.getLastMessage().toString()));
/*    */       
/* 71 */       serializeNamespaces(sequence, mediator.getLastMessage());
/*    */     } 
/*    */     
/* 74 */     if (mediator.getVersion() != null) {
/* 75 */       sequence.addAttribute(fac.createOMAttribute(""version"", nullNS, mediator.getVersion()));
/*    */     }
/*    */     
/* 78 */     if (parent != null) {
/* 79 */       parent.addChild((OMNode)sequence);
/*    */     }
/* 81 */     return sequence;
/*    */   }
/*    */ 
/*    */   
/* 85 */   public String getMediatorClassName() { return RMSequenceMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 89 */     log.error(msg);
/* 90 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\RMSequenceMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SendMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.builtin.SendMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  80 */   private static final Log log = LogFactory.getLog(SendMediatorFactory.class);
/*     */   
/*  82 */   private static final QName SEND_Q = new QName(""http://ws.apache.org/ns/synapse"", ""send"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  86 */     SendMediator sm = new SendMediator();
/*     */ 
/*     */ 
/*     */     
/*  90 */     initMediator((Mediator)sm, elem);
/*     */     
/*  92 */     OMElement epElement = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""endpoint""));
/*  93 */     if (epElement != null) {
/*     */ 
/*     */ 
/*     */       
/*  97 */       EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(epElement);
/*  98 */       if (fac != null) {
/*  99 */         Endpoint endpoint = fac.createEndpoint(epElement, true);
/* 100 */         if (endpoint != null) {
/* 101 */           sm.setEndpoint(endpoint);
/*     */         }
/*     */       } else {
/* 104 */         throw new SynapseException(""Invalid endpoint fromat."");
/*     */       } 
/*     */     } 
/*     */     
/* 108 */     return (Mediator)sm;
/*     */   }
/*     */ 
/*     */   
/* 112 */   public QName getTagQName() { return SEND_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SendMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SendMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.builtin.SendMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*  78 */   private static final Log log = LogFactory.getLog(SendMediatorSerializer.class);
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  82 */     if (!(m instanceof SendMediator)) {
/*  83 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  86 */     SendMediator mediator = (SendMediator)m;
/*  87 */     OMElement send = fac.createOMElement(""send"", synNS);
/*  88 */     finalizeSerialization(send, (Mediator)mediator);
/*     */     
/*  90 */     Endpoint activeEndpoint = mediator.getEndpoint();
/*  91 */     if (activeEndpoint != null) {
/*  92 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(activeEndpoint);
/*     */ 
/*     */       
/*  95 */       OMElement endpointElement = serializer.serializeEndpoint(activeEndpoint);
/*  96 */       send.addChild((OMNode)endpointElement);
/*     */     } 
/*     */     
/*  99 */     if (parent != null) {
/* 100 */       parent.addChild((OMNode)send);
/*     */     }
/* 102 */     return send;
/*     */   }
/*     */ 
/*     */   
/* 106 */   public String getMediatorClassName() { return SendMediator.class.getName(); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 110 */     log.error(msg);
/* 111 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SendMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SequenceMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  49 */   private static final Log log = LogFactory.getLog(SequenceMediatorFactory.class);
/*     */   
/*  51 */   private static final QName SEQUENCE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""sequence"");
/*     */ 
/*     */   
/*  54 */   public QName getTagQName() { return SEQUENCE_Q; }
/*     */ 
/*     */   
/*     */   public SequenceMediator createAnonymousSequence(OMElement elem) {
/*  58 */     SequenceMediator seqMediator = new SequenceMediator();
/*  59 */     OMAttribute e = elem.getAttribute(new QName("""", ""onError""));
/*  60 */     if (e != null) {
/*  61 */       seqMediator.setErrorHandler(e.getAttributeValue());
/*     */     }
/*  63 */     initMediator((Mediator)seqMediator, elem);
/*  64 */     addChildren(elem, (ListMediator)seqMediator);
/*  65 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */     
/*  67 */     if (statistics != null) {
/*  68 */       String statisticsValue = statistics.getAttributeValue();
/*  69 */       if (statisticsValue != null) {
/*  70 */         if (""enable"".equals(statisticsValue)) {
/*  71 */           seqMediator.setStatisticsEnable(1);
/*  72 */         } else if (""disable"".equals(statisticsValue)) {
/*  73 */           seqMediator.setStatisticsEnable(0);
/*     */         } 
/*     */       }
/*     */     } 
/*  77 */     return seqMediator;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  82 */     SequenceMediator seqMediator = new SequenceMediator();
/*     */     
/*  84 */     OMAttribute n = elem.getAttribute(new QName("""", ""name""));
/*  85 */     OMAttribute e = elem.getAttribute(new QName("""", ""onError""));
/*  86 */     if (n != null) {
/*  87 */       seqMediator.setName(n.getAttributeValue());
/*  88 */       if (e != null) {
/*  89 */         seqMediator.setErrorHandler(e.getAttributeValue());
/*     */       }
/*  91 */       initMediator((Mediator)seqMediator, elem);
/*  92 */       addChildren(elem, (ListMediator)seqMediator);
/*     */     } else {
/*     */       
/*  95 */       n = elem.getAttribute(new QName("""", ""key""));
/*  96 */       if (n != null) {
/*  97 */         seqMediator.setKey(n.getAttributeValue());
/*  98 */         if (e != null) {
/*  99 */           String msg = ""A sequence mediator swhich a reference to another sequence can not have 'ErrorHandler'"";
/* 100 */           log.error(msg);
/* 101 */           throw new SynapseException(msg);
/*     */         } 
/*     */       } else {
/* 104 */         String msg = ""A sequence mediator should be a named sequence or a reference to another sequence (i.e. a name attribute or key attribute is required."";
/*     */         
/* 106 */         log.error(msg);
/* 107 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } 
/*     */     
/* 111 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */     
/* 113 */     if (statistics != null) {
/* 114 */       String statisticsValue = statistics.getAttributeValue();
/* 115 */       if (statisticsValue != null) {
/* 116 */         if (""enable"".equals(statisticsValue)) {
/* 117 */           seqMediator.setStatisticsEnable(1);
/* 118 */         } else if (""disable"".equals(statisticsValue)) {
/* 119 */           seqMediator.setStatisticsEnable(0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 124 */     return (Mediator)seqMediator;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SequenceMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SequenceMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediatorSerializer
/*     */   extends AbstractListMediatorSerializer
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(SequenceMediatorSerializer.class);
/*     */   
/*     */   public OMElement serializeAnonymousSequence(OMElement parent, SequenceMediator mediator) {
/*  47 */     OMElement sequence = fac.createOMElement(""sequence"", synNS);
/*  48 */     int isEnableStatistics = mediator.getStatisticsEnable();
/*  49 */     String statisticsValue = null;
/*  50 */     if (isEnableStatistics == 1) {
/*  51 */       statisticsValue = ""enable"";
/*  52 */     } else if (isEnableStatistics == 0) {
/*  53 */       statisticsValue = ""disable"";
/*     */     } 
/*  55 */     if (statisticsValue != null) {
/*  56 */       sequence.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */     }
/*     */     
/*  59 */     if (mediator.getErrorHandler() != null) {
/*  60 */       sequence.addAttribute(fac.createOMAttribute(""onError"", nullNS, mediator.getErrorHandler()));
/*     */     }
/*     */     
/*  63 */     finalizeSerialization(sequence, (Mediator)mediator);
/*  64 */     serializeChildren(sequence, mediator.getList());
/*  65 */     if (parent != null) {
/*  66 */       parent.addChild((OMNode)sequence);
/*     */     }
/*  68 */     return sequence;
/*     */   }
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  73 */     if (!(m instanceof SequenceMediator)) {
/*  74 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  77 */     SequenceMediator mediator = (SequenceMediator)m;
/*  78 */     OMElement sequence = fac.createOMElement(""sequence"", synNS);
/*     */ 
/*     */ 
/*     */     
/*  82 */     if (mediator.isDynamic()) {
/*  83 */       sequence.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*     */       
/*  85 */       sequence.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getRegistryKey()));
/*     */     
/*     */     }
/*     */     else {
/*     */       
/*  90 */       int isEnableStatistics = mediator.getStatisticsEnable();
/*  91 */       String statisticsValue = null;
/*  92 */       if (isEnableStatistics == 1) {
/*  93 */         statisticsValue = ""enable"";
/*  94 */       } else if (isEnableStatistics == 0) {
/*  95 */         statisticsValue = ""disable"";
/*     */       } 
/*  97 */       if (statisticsValue != null) {
/*  98 */         sequence.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */       }
/*     */ 
/*     */       
/* 102 */       if (mediator.getKey() != null) {
/* 103 */         sequence.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getKey()));
/*     */       }
/* 105 */       else if (mediator.getName() != null) {
/* 106 */         sequence.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*     */ 
/*     */         
/* 109 */         if (mediator.getErrorHandler() != null) {
/* 110 */           sequence.addAttribute(fac.createOMAttribute(""onError"", nullNS, mediator.getErrorHandler()));
/*     */         }
/*     */         
/* 113 */         finalizeSerialization(sequence, (Mediator)mediator);
/* 114 */         serializeChildren(sequence, mediator.getList());
/*     */       } 
/*     */     } 
/*     */     
/* 118 */     if (parent != null) {
/* 119 */       parent.addChild((OMNode)sequence);
/*     */     }
/* 121 */     return sequence;
/*     */   }
/*     */ 
/*     */   
/* 125 */   public String getMediatorClassName() { return SequenceMediator.class.getName(); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 129 */     log.error(msg);
/* 130 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SequenceMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchCase,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchCase
/*     */ {
/*  38 */   private static final Log log = LogFactory.getLog(SwitchCase.class);
/*     */   
/*  40 */   private Pattern regex = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private AnonymousListMediator caseMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  54 */     if (this.caseMediator != null) {
/*  55 */       return this.caseMediator.mediate(synCtx);
/*     */     }
/*  57 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   public AnonymousListMediator getCaseMediator() { return this.caseMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  75 */   public void setCaseMediator(AnonymousListMediator caseMediator) { this.caseMediator = caseMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   public Pattern getRegex() { return this.regex; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setRegex(Pattern regex) { this.regex = regex; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean matches(String value) {
/* 103 */     Matcher matcher = this.regex.matcher(value);
/* 104 */     if (matcher == null) {
/* 105 */       return false;
/*     */     }
/* 107 */     boolean retVal = matcher.matches();
/* 108 */     log.debug(""Case : "" + this.regex.pattern() + "" evaluated to : "" + retVal);
/* 109 */     return retVal;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SwitchCase.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.regex.Pattern;
/*     */ import java.util.regex.PatternSyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.filters.SwitchMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  53 */   private static final Log log = LogFactory.getLog(SwitchMediatorFactory.class);
/*     */   
/*  55 */   private static final QName SWITCH_Q = new QName(""http://ws.apache.org/ns/synapse"", ""switch"");
/*  56 */   private static final QName CASE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""case"");
/*  57 */   private static final QName DEFAULT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""default"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  61 */     SwitchMediator switchMediator = new SwitchMediator();
/*  62 */     OMAttribute source = elem.getAttribute(new QName("""", ""source""));
/*  63 */     if (source == null) {
/*  64 */       String msg = ""A 'source' XPath attribute is required for a switch mediator"";
/*  65 */       log.error(msg);
/*  66 */       throw new SynapseException(msg);
/*     */     } 
/*     */     try {
/*  69 */       AXIOMXPath sourceXPath = new AXIOMXPath(source.getAttributeValue());
/*  70 */       OMElementUtils.addNameSpaces(sourceXPath, elem, log);
/*  71 */       switchMediator.setSource(sourceXPath);
/*     */     }
/*  73 */     catch (JaxenException e) {
/*  74 */       String msg = ""Invalid XPath for attribute 'source' : "" + source.getAttributeValue();
/*  75 */       log.error(msg);
/*  76 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*  81 */     initMediator((Mediator)switchMediator, elem);
/*  82 */     Iterator iter = elem.getChildrenWithName(CASE_Q);
/*  83 */     while (iter.hasNext()) {
/*  84 */       OMElement caseElem = iter.next();
/*  85 */       SwitchCase aCase = new SwitchCase();
/*  86 */       OMAttribute regex = caseElem.getAttribute(new QName("""", ""regex""));
/*  87 */       if (regex == null) {
/*  88 */         String msg = ""The 'regex' attribute is required for a switch case definition"";
/*  89 */         log.error(msg);
/*  90 */         throw new SynapseException(msg);
/*     */       } 
/*     */       try {
/*  93 */         aCase.setRegex(Pattern.compile(regex.getAttributeValue()));
/*  94 */       } catch (PatternSyntaxException pse) {
/*  95 */         String msg = ""Invalid Regular Expression for attribute 'regex' : "" + regex.getAttributeValue();
/*  96 */         log.error(msg);
/*  97 */         throw new SynapseException(msg);
/*     */       } 
/*  99 */       aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator(caseElem));
/* 100 */       switchMediator.addCase(aCase);
/*     */     } 
/* 102 */     iter = elem.getChildrenWithName(DEFAULT_Q);
/* 103 */     if (iter.hasNext()) {
/* 104 */       SwitchCase aCase = new SwitchCase();
/* 105 */       aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator(iter.next()));
/* 106 */       switchMediator.setDefaultCase(aCase);
/*     */     } 
/*     */     
/* 109 */     return (Mediator)switchMediator;
/*     */   }
/*     */ 
/*     */   
/* 113 */   public QName getTagQName() { return SWITCH_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SwitchMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.filters.SwitchMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(SwitchMediatorSerializer.class);
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  49 */     if (!(m instanceof SwitchMediator)) {
/*  50 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  53 */     SwitchMediator mediator = (SwitchMediator)m;
/*  54 */     OMElement switchMed = fac.createOMElement(""switch"", synNS);
/*  55 */     finalizeSerialization(switchMed, (Mediator)mediator);
/*     */     
/*  57 */     if (mediator.getSource() != null) {
/*  58 */       switchMed.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*     */       
/*  60 */       serializeNamespaces(switchMed, mediator.getSource());
/*     */     } else {
/*     */       
/*  63 */       handleException(""Invalid switch mediator. Source required"");
/*     */     } 
/*     */     
/*  66 */     Iterator iter = mediator.getCases().iterator();
/*  67 */     while (iter.hasNext()) {
/*  68 */       OMElement caseElem = fac.createOMElement(""case"", synNS);
/*  69 */       SwitchCase aCase = iter.next();
/*  70 */       if (aCase.getRegex() != null) {
/*  71 */         caseElem.addAttribute(fac.createOMAttribute(""regex"", nullNS, aCase.getRegex().pattern()));
/*     */       } else {
/*     */         
/*  74 */         handleException(""Invalid switch case. Regex required"");
/*     */       } 
/*  76 */       AnonymousListMediator caseMediator = aCase.getCaseMediator();
/*  77 */       if (caseMediator != null) {
/*  78 */         AnonymousListMediatorSerializer.serializeAnonymousListMediator(caseElem, (Mediator)caseMediator);
/*     */         
/*  80 */         switchMed.addChild((OMNode)caseElem);
/*     */       } 
/*     */     } 
/*  83 */     SwitchCase defaultCase = mediator.getDefaultCase();
/*  84 */     if (defaultCase != null) {
/*  85 */       OMElement caseDefaultElem = fac.createOMElement(""default"", synNS);
/*  86 */       AnonymousListMediator caseDefaultMediator = defaultCase.getCaseMediator();
/*  87 */       if (caseDefaultMediator != null) {
/*  88 */         AnonymousListMediatorSerializer.serializeAnonymousListMediator(caseDefaultElem, (Mediator)caseDefaultMediator);
/*     */         
/*  90 */         switchMed.addChild((OMNode)caseDefaultElem);
/*     */       } 
/*     */     } 
/*  93 */     if (parent != null) {
/*  94 */       parent.addChild((OMNode)switchMed);
/*     */     }
/*  96 */     return switchMed;
/*     */   }
/*     */ 
/*     */   
/* 100 */   public String getMediatorClassName() { return SwitchMediator.class.getName(); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 104 */     log.error(msg);
/* 105 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SwitchMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.base.SynapseMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 39 */   private static final QName RULES_Q = new QName(""http://ws.apache.org/ns/synapse"", ""rules"");
/*    */ 
/*    */   
/* 42 */   public QName getTagQName() { return RULES_Q; }
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 46 */     SynapseMediator sm = new SynapseMediator();
/*    */ 
/*    */ 
/*    */     
/* 50 */     initMediator((Mediator)sm, elem);
/*    */     
/* 52 */     addChildren(elem, (ListMediator)sm);
/* 53 */     return (Mediator)sm;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SynapseMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.base.SynapseMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(SynapseMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof SynapseMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 47 */     SynapseMediator mediator = (SynapseMediator)m;
/* 48 */     OMElement rules = fac.createOMElement(""rules"", synNS);
/* 49 */     finalizeSerialization(rules, (Mediator)mediator);
/*    */     
/* 51 */     serializeChildren(rules, mediator.getList());
/*    */     
/* 53 */     if (parent != null) {
/* 54 */       parent.addChild((OMNode)rules);
/*    */     }
/* 56 */     return rules;
/*    */   }
/*    */ 
/*    */   
/* 60 */   public String getMediatorClassName() { return SynapseMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 64 */     log.error(msg);
/* 65 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\SynapseMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ValidateMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.builtin.ValidateMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ValidateMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  54 */   private static final Log log = LogFactory.getLog(ValidateMediatorFactory.class);
/*     */   
/*  56 */   private static final QName VALIDATE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""validate"");
/*  57 */   private static final QName ON_FAIL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""on-fail"");
/*  58 */   private static final QName SCHEMA_Q = new QName(""http://ws.apache.org/ns/synapse"", ""schema"");
/*  59 */   private static final QName KEY_Q = new QName("""", ""key"");
/*  60 */   private static final QName SOURCE_Q = new QName("""", ""source"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  64 */     ValidateMediator validateMediator = new ValidateMediator();
/*     */ 
/*     */     
/*  67 */     List schemaKeys = new ArrayList();
/*  68 */     Iterator schemas = elem.getChildrenWithName(SCHEMA_Q);
/*     */     
/*  70 */     while (schemas.hasNext()) {
/*  71 */       Object o = schemas.next();
/*  72 */       if (o instanceof OMElement) {
/*  73 */         OMElement omElem = (OMElement)o;
/*  74 */         OMAttribute keyAtt = omElem.getAttribute(KEY_Q);
/*  75 */         if (keyAtt != null) {
/*  76 */           schemaKeys.add(keyAtt.getAttributeValue()); continue;
/*     */         } 
/*  78 */         handleException(""A 'schema' definition must contain a local property 'key'"");
/*     */         continue;
/*     */       } 
/*  81 */       handleException(""Invalid 'schema' declaration for validate mediator"");
/*     */     } 
/*     */ 
/*     */     
/*  85 */     if (schemaKeys.size() == 0) {
/*  86 */       handleException(""No schemas specified for the validate mediator"");
/*     */     } else {
/*  88 */       validateMediator.setSchemaKeys(schemaKeys);
/*     */     } 
/*     */ 
/*     */     
/*  92 */     OMAttribute attSource = elem.getAttribute(SOURCE_Q);
/*     */     
/*  94 */     if (attSource != null) {
/*     */       try {
/*  96 */         AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
/*  97 */         validateMediator.setSource(xp);
/*  98 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  99 */       } catch (JaxenException e) {
/* 100 */         handleException(""Invalid XPath expression specified for attribute 'source'"", (Exception)e);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 105 */     OMElement onFail = null;
/* 106 */     Iterator iter = elem.getChildrenWithName(ON_FAIL_Q);
/* 107 */     if (iter.hasNext()) {
/* 108 */       onFail = iter.next();
/*     */     }
/*     */     
/* 111 */     if (onFail != null && onFail.getChildElements().hasNext()) {
/* 112 */       addChildren(onFail, (ListMediator)validateMediator);
/*     */     } else {
/* 114 */       handleException(""A non-empty <on-fail> child element is required for the <validate> mediator"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 120 */     initMediator((Mediator)validateMediator, elem);
/*     */ 
/*     */     
/* 123 */     validateMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*     */ 
/*     */     
/* 126 */     return (Mediator)validateMediator;
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 130 */     log.error(msg, e);
/* 131 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 135 */     log.error(msg);
/* 136 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 140 */   public QName getTagQName() { return VALIDATE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ValidateMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ValidateMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMContainer;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.builtin.ValidateMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ValidateMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */   implements MediatorSerializer
/*    */ {
/* 45 */   private static final Log log = LogFactory.getLog(ValidateMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 49 */     if (!(m instanceof ValidateMediator)) {
/* 50 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 53 */     ValidateMediator mediator = (ValidateMediator)m;
/* 54 */     OMElement validate = fac.createOMElement(""validate"", synNS);
/* 55 */     finalizeSerialization(validate, (Mediator)mediator);
/*    */     
/* 57 */     if (mediator.getSource() != null) {
/* 58 */       validate.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 60 */       serializeNamespaces(validate, mediator.getSource());
/*    */     } 
/*    */     
/* 63 */     Iterator iter = mediator.getSchemaKeys().iterator();
/* 64 */     while (iter.hasNext()) {
/* 65 */       String key = iter.next();
/* 66 */       OMElement schema = fac.createOMElement(""schema"", synNS, (OMContainer)validate);
/* 67 */       schema.addAttribute(fac.createOMAttribute(""key"", nullNS, key));
/*    */     } 
/*    */     
/* 70 */     serializeProperties(validate, mediator.getProperties());
/*    */     
/* 72 */     OMElement onFail = fac.createOMElement(""on-fail"", synNS, (OMContainer)validate);
/* 73 */     serializeChildren(onFail, mediator.getList());
/*    */     
/* 75 */     if (parent != null) {
/* 76 */       parent.addChild((OMNode)validate);
/*    */     }
/* 78 */     return validate;
/*    */   }
/*    */ 
/*    */   
/* 82 */   public String getMediatorClassName() { return ValidateMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 86 */     log.error(msg);
/* 87 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\ValidateMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XMLConfigurationBuilder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.Util;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.mediators.builtin.LogMediator;
/*     */ import org.apache.synapse.mediators.builtin.SendMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XMLConfigurationBuilder
/*     */ {
/*  50 */   private static Log log = LogFactory.getLog(XMLConfigurationBuilder.class);
/*     */ 
/*     */   
/*     */   public static SynapseConfiguration getConfiguration(InputStream is) {
/*  54 */     log.info(""Generating the Synapse configuration model by parsing the XML configuration"");
/*  55 */     SynapseConfiguration config = new SynapseConfiguration();
/*     */     
/*  57 */     SequenceMediator rootSequence = new SequenceMediator();
/*  58 */     rootSequence.setName(""main"");
/*     */     
/*  60 */     OMElement definitions = null;
/*     */     try {
/*  62 */       definitions = (new StAXOMBuilder(is)).getDocumentElement();
/*  63 */       definitions.build();
/*     */       
/*  65 */       OMNamespace namespace = definitions.getNamespace();
/*  66 */       if (namespace == null) {
/*  67 */         handleException(""No namespace is defined for definitions element"");
/*     */       }
/*     */       
/*  70 */       if (""http://ws.apache.org/ns/synapse"".equals(namespace.getNamespaceURI()) && Constants.DEFINITIONS_ELT.getLocalPart().equals(definitions.getQName().getLocalPart())) {
/*     */ 
/*     */ 
/*     */         
/*  74 */         Iterator iter = definitions.getChildren();
/*     */         
/*  76 */         while (iter.hasNext()) {
/*  77 */           Object o = iter.next();
/*  78 */           if (o instanceof OMElement) {
/*  79 */             OMElement elt = (OMElement)o;
/*  80 */             if (Constants.SEQUENCE_ELT.equals(elt.getQName())) {
/*  81 */               String key = elt.getAttributeValue(new QName("""", ""key""));
/*     */ 
/*     */               
/*  84 */               if (key != null) {
/*  85 */                 Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
/*  86 */                 rootSequence.addChild(m); continue;
/*     */               } 
/*  88 */               defineSequence(config, elt); continue;
/*     */             } 
/*  90 */             if (Constants.ENDPOINT_ELT.equals(elt.getQName())) {
/*  91 */               defineEndpoint(config, elt); continue;
/*  92 */             }  if (Constants.ENTRY_ELT.equals(elt.getQName())) {
/*  93 */               defineEntry(config, elt); continue;
/*  94 */             }  if (Constants.PROXY_ELT.equals(elt.getQName())) {
/*  95 */               defineProxy(config, elt); continue;
/*  96 */             }  if (Constants.REGISTRY_ELT.equals(elt.getQName())) {
/*  97 */               defineRegistry(config, elt); continue;
/*     */             } 
/*  99 */             Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
/* 100 */             rootSequence.addChild(m);
/*     */           } 
/*     */         } 
/*     */       } else {
/*     */         
/* 105 */         handleException(""Invalid Synapse Configuration : No definition element found"");
/*     */       }
/*     */     
/* 108 */     } catch (XMLStreamException e) {
/* 109 */       handleException(""Error parsing Synapse configuration : "" + e.getMessage(), e);
/*     */     } 
/*     */     
/* 112 */     if (is != null) {
/*     */       try {
/* 114 */         is.close();
/* 115 */       } catch (IOException ignore) {}
/*     */     }
/*     */     
/* 118 */     if (config.getLocalRegistry().isEmpty() && config.getProxyServices().isEmpty() && rootSequence.getList().isEmpty() && config.getRegistry() != null) {
/*     */       
/* 120 */       OMNode remoteConfigNode = config.getRegistry().lookup(""synapse.xml"");
/* 121 */       config = getConfiguration(Util.getStreamSource(remoteConfigNode).getInputStream());
/*     */     } 
/*     */     
/* 124 */     if (config.getMainSequence() == null) {
/* 125 */       if (rootSequence.getList().isEmpty()) {
/* 126 */         setDefaultMainSequence(config);
/*     */       } else {
/* 128 */         config.addSequence(rootSequence.getName(), (Mediator)rootSequence);
/*     */       } 
/* 130 */     } else if (!rootSequence.getList().isEmpty()) {
/* 131 */       handleException(""Invalid Synapse Configuration : Conflict in resolving the \""main\"" mediator\n\tSynapse Configuration cannot have sequence named \""main\"" and toplevel mediators simultaniously"");
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 136 */     if (config.getFaultSequence() == null) {
/* 137 */       setDefaultFaultSequence(config);
/*     */     }
/*     */     
/* 140 */     return config;
/*     */   }
/*     */   
/*     */   private static void defineRegistry(SynapseConfiguration config, OMElement elem) {
/* 144 */     if (config.getRegistry() != null) {
/* 145 */       handleException(""Only one remote registry can be defined within a configuration"");
/*     */     }
/* 147 */     config.setRegistry(RegistryFactory.createRegistry(elem));
/*     */   }
/*     */   
/*     */   private static void defineProxy(SynapseConfiguration config, OMElement elem) {
/* 151 */     ProxyService proxy = ProxyServiceFactory.createProxy(elem);
/* 152 */     if (config.getProxyService(proxy.getName()) != null) {
/* 153 */       handleException(""Duplicate proxy service with name : "" + proxy.getName());
/*     */     }
/* 155 */     config.addProxyService(proxy.getName(), proxy);
/*     */   }
/*     */   
/*     */   private static void defineEntry(SynapseConfiguration config, OMElement elem) {
/* 159 */     Entry entry = EntryFactory.createEntry(elem);
/* 160 */     if (config.getLocalRegistry().get(entry.getKey()) != null) {
/* 161 */       handleException(""Duplicate registry entry definition for key : "" + entry.getKey());
/*     */     }
/* 163 */     config.addEntry(entry.getKey(), entry);
/*     */   }
/*     */ 
/*     */   
/*     */   public static void defineSequence(SynapseConfiguration config, OMElement ele) {
/* 168 */     String name = ele.getAttributeValue(new QName("""", ""name""));
/* 169 */     if (name != null) {
/* 170 */       if (config.getLocalRegistry().get(name) != null) {
/* 171 */         handleException(""Duplicate sequence definition : "" + name);
/*     */       }
/* 173 */       config.addSequence(name, MediatorFactoryFinder.getInstance().getMediator(ele));
/*     */     } else {
/* 175 */       handleException(""Invalid sequence definition without a name"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void defineEndpoint(SynapseConfiguration config, OMElement ele) {
/* 181 */     String name = ele.getAttributeValue(new QName("""", ""name""));
/* 182 */     if (name != null) {
/* 183 */       if (config.getLocalRegistry().get(name.trim()) != null) {
/* 184 */         handleException(""Duplicate endpoint definition : "" + name);
/*     */       }
/* 186 */       Endpoint endpoint = EndpointAbstractFactory.getEndpointFactroy(ele).createEndpoint(ele, false);
/*     */       
/* 188 */       config.addEndpoint(name.trim(), endpoint);
/*     */     } else {
/* 190 */       handleException(""Invalid endpoint definition without a name"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void setDefaultMainSequence(SynapseConfiguration config) {
/* 201 */     SequenceMediator main = new SequenceMediator();
/* 202 */     main.setName(""main"");
/* 203 */     main.addChild((Mediator)new SendMediator());
/* 204 */     config.addSequence(""main"", (Mediator)main);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void setDefaultFaultSequence(SynapseConfiguration config) {
/* 214 */     SequenceMediator fault = new SequenceMediator();
/* 215 */     fault.setName(""fault"");
/* 216 */     LogMediator log = new LogMediator();
/* 217 */     log.setLogLevel(3);
/* 218 */     fault.addChild((Mediator)log);
/* 219 */     config.addSequence(""fault"", (Mediator)fault);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 223 */     log.error(msg);
/* 224 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 228 */     log.error(msg, e);
/* 229 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\XMLConfigurationBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XMLConfigurationSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.io.OutputStream;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XMLConfigurationSerializer
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(XMLConfigurationSerializer.class);
/*     */   
/*  49 */   private static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*  50 */   private static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*  51 */   private static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void serializeConfiguration(SynapseConfiguration synCfg, OutputStream outputStream) throws XMLStreamException {
/*  62 */     OMElement definitions = fac.createOMElement(""definitions"", synNS);
/*     */ 
/*     */     
/*  65 */     if (synCfg.getRegistry() != null) {
/*  66 */       RegistrySerializer.serializeRegistry(definitions, synCfg.getRegistry());
/*     */     }
/*     */ 
/*     */     
/*  70 */     Iterator iter = synCfg.getProxyServices().iterator();
/*  71 */     while (iter.hasNext()) {
/*  72 */       ProxyService service = iter.next();
/*  73 */       ProxyServiceSerializer.serializeProxy(definitions, service);
/*     */     } 
/*     */     
/*  76 */     Map entries = new HashMap();
/*  77 */     Map endpoints = new HashMap();
/*  78 */     Map sequences = new HashMap();
/*     */     
/*  80 */     iter = synCfg.getLocalRegistry().keySet().iterator();
/*  81 */     while (iter.hasNext()) {
/*  82 */       Object key = iter.next();
/*  83 */       Object o = synCfg.getLocalRegistry().get(key);
/*  84 */       if (o instanceof Mediator) {
/*  85 */         sequences.put(key, o); continue;
/*  86 */       }  if (o instanceof Endpoint) {
/*  87 */         endpoints.put(key, o); continue;
/*  88 */       }  if (o instanceof Entry) {
/*  89 */         entries.put(key, o); continue;
/*     */       } 
/*  91 */       handleException(""Unknown object : "" + o.getClass() + "" for serialization into Synapse configuration"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  97 */     serializeEntries(definitions, entries);
/*     */ 
/*     */     
/* 100 */     serializeEndpoints(definitions, endpoints);
/*     */ 
/*     */     
/* 103 */     serializeSequences(definitions, sequences);
/*     */     
/* 105 */     definitions.serialize(outputStream);
/*     */   }
/*     */   
/*     */   private static void serializeEntries(OMElement definitions, Map entries) {
/* 109 */     Iterator iter = entries.keySet().iterator();
/* 110 */     while (iter.hasNext()) {
/* 111 */       String key = iter.next();
/* 112 */       EntrySerializer.serializeEntry((Entry)entries.get(key), definitions);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void serializeEndpoints(OMElement definitions, Map endpoints) {
/* 117 */     Iterator iter = endpoints.keySet().iterator();
/* 118 */     while (iter.hasNext()) {
/* 119 */       String key = iter.next();
/* 120 */       Object o = endpoints.get(key);
/* 121 */       if (o instanceof Endpoint) {
/* 122 */         Endpoint endpoint = (Endpoint)o;
/* 123 */         OMElement epElement = EndpointAbstractSerializer.getEndpointSerializer(endpoint).serializeEndpoint(endpoint);
/*     */         
/* 125 */         definitions.addChild((OMNode)epElement);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void serializeSequences(OMElement definitions, Map sequences) {
/* 132 */     Iterator iter = sequences.keySet().iterator();
/* 133 */     while (iter.hasNext()) {
/* 134 */       String key = iter.next();
/* 135 */       Mediator mediator = (Mediator)sequences.get(key);
/* 136 */       MediatorSerializerFinder.getInstance().getSerializer(mediator).serializeMediator(definitions, mediator);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/* 142 */     log.error(msg);
/* 143 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\XMLConfigurationSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XSLTMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.transform.XSLTMediator;
/*    */ import org.jaxen.JaxenException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XSLTMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 49 */   private static final Log log = LogFactory.getLog(XSLTMediatorFactory.class);
/* 50 */   private static final QName TAG_NAME = new QName(""http://ws.apache.org/ns/synapse"", ""xslt"");
/*    */ 
/*    */   
/* 53 */   public QName getTagQName() { return TAG_NAME; }
/*    */ 
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 58 */     XSLTMediator transformMediator = new XSLTMediator();
/*    */     
/* 60 */     OMAttribute attXslt = elem.getAttribute(new QName("""", ""key""));
/* 61 */     OMAttribute attSource = elem.getAttribute(new QName("""", ""source""));
/*    */     
/* 63 */     if (attXslt != null) {
/* 64 */       transformMediator.setXsltKey(attXslt.getAttributeValue());
/*    */     } else {
/* 66 */       handleException(""The 'key' attribute is required for the XSLT mediator"");
/*    */     } 
/*    */     
/* 69 */     if (attSource != null) {
/*    */       try {
/* 71 */         AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
/* 72 */         OMElementUtils.addNameSpaces(xp, elem, log);
/* 73 */         transformMediator.setSource(xp);
/*    */       }
/* 75 */       catch (JaxenException e) {
/* 76 */         handleException(""Invalid XPath specified for the source attribute : "" + attSource.getAttributeValue());
/*    */       } 
/*    */     }
/*    */ 
/*    */ 
/*    */     
/* 82 */     initMediator((Mediator)transformMediator, elem);
/*    */     
/* 84 */     transformMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*    */ 
/*    */     
/* 87 */     return (Mediator)transformMediator;
/*    */   }
/*    */   
/*    */   private void handleException(String msg, Exception e) {
/* 91 */     log.error(msg, e);
/* 92 */     throw new SynapseException(msg, e);
/*    */   }
/*    */   
/*    */   private void handleException(String msg) {
/* 96 */     log.error(msg);
/* 97 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\XSLTMediatorFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XSLTMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.transform.XSLTMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XSLTMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(XSLTMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof XSLTMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 47 */     XSLTMediator mediator = (XSLTMediator)m;
/* 48 */     OMElement xslt = fac.createOMElement(""xslt"", synNS);
/*    */     
/* 50 */     if (mediator.getXsltKey() != null) {
/* 51 */       xslt.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getXsltKey()));
/*    */     } else {
/*    */       
/* 54 */       handleException(""Invalid XSLT mediator. XSLT registry key is required"");
/*    */     } 
/* 56 */     finalizeSerialization(xslt, (Mediator)mediator);
/*    */     
/* 58 */     if (mediator.getSource() != null && !""//s11:Envelope/s11:Body/child::*[position()=1] | //s12:Envelope/s12:Body/child::*[position()=1]"".toString().equals(mediator.getSource().toString())) {
/*    */       
/* 60 */       xslt.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 62 */       serializeNamespaces(xslt, mediator.getSource());
/*    */     } 
/*    */     
/* 65 */     serializeProperties(xslt, mediator.getProperties());
/*    */     
/* 67 */     if (parent != null) {
/* 68 */       parent.addChild((OMNode)xslt);
/*    */     }
/* 70 */     return xslt;
/*    */   }
/*    */ 
/*    */   
/* 74 */   public String getMediatorClassName() { return XSLTMediator.class.getName(); }
/*    */ 
/*    */   
/*    */   private void handleException(String msg) {
/* 78 */     log.error(msg);
/* 79 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\XSLTMediatorSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.AddressEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.AddressEndpoint;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  55 */   private static Log log = LogFactory.getLog(AddressEndpointFactory.class);
/*     */   
/*  57 */   private static AddressEndpointFactory instance = new AddressEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   public static AddressEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  67 */     AddressEndpoint addressEndpoint = new AddressEndpoint();
/*     */     
/*  69 */     if (!anonymousEndpoint) {
/*  70 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  73 */       if (name != null) {
/*  74 */         addressEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/*  78 */     OMElement addressElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""address""));
/*     */ 
/*     */     
/*  81 */     if (addressElement != null) {
/*  82 */       EndpointDefinition endpoint = createEndpointDefinition(addressElement);
/*  83 */       addressEndpoint.setEndpoint(endpoint);
/*     */ 
/*     */       
/*  86 */       OMElement suspendElement = addressElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""suspendDurationOnFailure""));
/*     */ 
/*     */ 
/*     */       
/*  90 */       if (suspendElement != null) {
/*  91 */         String suspend = suspendElement.getText();
/*     */         
/*     */         try {
/*  94 */           if (suspend != null) {
/*  95 */             long suspendDuration = Long.parseLong(suspend.trim());
/*  96 */             addressEndpoint.setSuspendOnFailDuration(suspendDuration * 1000L);
/*     */           }
/*     */         
/*  99 */         } catch (NumberFormatException e) {
/* 100 */           handleException(""The suspend duration should be specified as a valid number :: "" + e.getMessage(), e);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 106 */     return (Endpoint)addressEndpoint;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 110 */     if (om instanceof OMElement) {
/* 111 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 113 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 115 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinition(OMElement elem) {
/* 128 */     OMAttribute address = elem.getAttribute(new QName("""", ""uri""));
/*     */     
/* 130 */     OMAttribute format = elem.getAttribute(new QName("""", ""format""));
/*     */     
/* 132 */     OMAttribute optimize = elem.getAttribute(new QName("""", ""optimize""));
/*     */ 
/*     */     
/* 135 */     EndpointDefinition endpoint = new EndpointDefinition();
/* 136 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */ 
/*     */     
/* 139 */     if (statistics != null) {
/* 140 */       String statisticsValue = statistics.getAttributeValue();
/* 141 */       if (statisticsValue != null) {
/* 142 */         if (""enable"".equals(statisticsValue)) {
/*     */           
/* 144 */           endpoint.setStatisticsEnable(1);
/* 145 */         } else if (""disable"".equals(statisticsValue)) {
/*     */           
/* 147 */           endpoint.setStatisticsEnable(0);
/*     */         } 
/*     */       }
/*     */     } 
/* 151 */     if (address != null) {
/* 152 */       endpoint.setAddress(address.getAttributeValue());
/*     */     } else {
/* 154 */       handleException(""One of the 'address' or 'ref' attributes are required in an anonymous endpoint"");
/*     */     } 
/*     */     
/* 157 */     if (format != null) {
/*     */       
/* 159 */       String forceValue = format.getAttributeValue().trim().toLowerCase();
/* 160 */       if (forceValue.equals(""pox"")) {
/* 161 */         endpoint.setForcePOX(true);
/* 162 */       } else if (forceValue.equals(""soap"")) {
/* 163 */         endpoint.setForceSOAP(true);
/*     */       } else {
/* 165 */         handleException(""force value -\"""" + forceValue + ""\"" not yet implemented"");
/*     */       } 
/*     */     } 
/*     */     
/* 169 */     if (optimize != null && optimize.getAttributeValue().length() > 0) {
/* 170 */       String method = optimize.getAttributeValue().trim();
/* 171 */       if (""mtom"".equalsIgnoreCase(method)) {
/* 172 */         endpoint.setUseMTOM(true);
/* 173 */       } else if (""swa"".equalsIgnoreCase(method)) {
/* 174 */         endpoint.setUseSwa(true);
/*     */       } 
/*     */     } 
/*     */     
/* 178 */     OMElement wsAddr = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableAddressing""));
/*     */     
/* 180 */     if (wsAddr != null) {
/* 181 */       endpoint.setAddressingOn(true);
/* 182 */       String useSepList = wsAddr.getAttributeValue(new QName(""separateListener""));
/*     */       
/* 184 */       if (useSepList != null && (
/* 185 */         useSepList.trim().toLowerCase().startsWith(""tr"") || useSepList.trim().startsWith(""1"")))
/*     */       {
/* 187 */         endpoint.setUseSeparateListener(true);
/*     */       }
/*     */     } 
/*     */     
/* 191 */     OMElement wsSec = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec""));
/*     */     
/* 193 */     if (wsSec != null) {
/* 194 */       endpoint.setSecurityOn(true);
/* 195 */       OMAttribute policy = wsSec.getAttribute(new QName("""", ""policy""));
/*     */       
/* 197 */       if (policy != null) {
/* 198 */         endpoint.setWsSecPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/* 201 */     OMElement wsRm = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM""));
/*     */     
/* 203 */     if (wsRm != null) {
/* 204 */       endpoint.setReliableMessagingOn(true);
/* 205 */       OMAttribute policy = wsRm.getAttribute(new QName("""", ""policy""));
/*     */       
/* 207 */       if (policy != null) {
/* 208 */         endpoint.setWsRMPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/* 212 */     OMElement timeout = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""timeout""));
/*     */     
/* 214 */     if (timeout != null) {
/* 215 */       OMElement duration = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""duration""));
/*     */       
/* 217 */       if (duration != null) {
/* 218 */         String d = duration.getText();
/* 219 */         if (d != null) {
/*     */           try {
/* 221 */             long timeoutSeconds = (new Long(d.trim())).longValue();
/* 222 */             endpoint.setTimeoutDuration(timeoutSeconds * 1000L);
/*     */           }
/* 224 */           catch (NumberFormatException e) {
/* 225 */             handleException(""The timeout seconds should be specified as a valid number :: "" + e.getMessage(), e);
/*     */           } 
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 232 */       OMElement action = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""action""));
/*     */       
/* 234 */       if (action != null) {
/* 235 */         String a = action.getText();
/* 236 */         if (a != null) {
/* 237 */           if (a.trim().equalsIgnoreCase(""discard"")) {
/* 238 */             endpoint.setTimeoutAction(101);
/*     */ 
/*     */             
/* 241 */             if (endpoint.getTimeoutDuration() == 0L) {
/* 242 */               endpoint.setTimeoutDuration(30000L);
/*     */             }
/* 244 */           } else if (a.trim().equalsIgnoreCase(""fault"")) {
/* 245 */             endpoint.setTimeoutAction(102);
/*     */ 
/*     */             
/* 248 */             if (endpoint.getTimeoutDuration() == 0L) {
/* 249 */               endpoint.setTimeoutDuration(30000L);
/*     */             }
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 256 */     return endpoint;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 260 */     log.error(msg);
/* 261 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 265 */     log.error(msg, e);
/* 266 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\AddressEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.AddressEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Constants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.AddressEndpoint;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  67 */   private static Log log = LogFactory.getLog(AddressEndpointSerializer.class);
/*     */   
/*  69 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  73 */     if (!(endpoint instanceof AddressEndpoint)) {
/*  74 */       throw new SynapseException(""Invalid endpoint type."");
/*     */     }
/*     */     
/*  77 */     this.fac = OMAbstractFactory.getOMFactory();
/*  78 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  80 */     AddressEndpoint addressEndpoint = (AddressEndpoint)endpoint;
/*  81 */     String name = addressEndpoint.getName();
/*  82 */     if (name != null) {
/*  83 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  86 */     EndpointDefinition epAddress = addressEndpoint.getEndpoint();
/*  87 */     OMElement addressElement = serializeEndpointDefinition(epAddress);
/*  88 */     endpointElement.addChild((OMNode)addressElement);
/*     */     
/*  90 */     long suspendDuration = addressEndpoint.getSuspendOnFailDuration();
/*  91 */     if (suspendDuration != -1L) {
/*     */ 
/*     */       
/*  94 */       OMElement suspendElement = this.fac.createOMElement(""suspendDurationOnFailure"", Constants.SYNAPSE_OMNAMESPACE);
/*     */ 
/*     */ 
/*     */       
/*  98 */       suspendElement.setText(Long.toString(suspendDuration / 1000L));
/*  99 */       addressElement.addChild((OMNode)suspendElement);
/*     */     } 
/*     */     
/* 102 */     return endpointElement;
/*     */   }
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpointDefinition(EndpointDefinition endpt) {
/* 107 */     OMElement address = this.fac.createOMElement(""address"", Constants.SYNAPSE_OMNAMESPACE);
/*     */     
/* 109 */     if (endpt.isForcePOX()) {
/* 110 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/* 111 */     } else if (endpt.isForceSOAP()) {
/* 112 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap""));
/*     */     } 
/* 114 */     if (endpt.isUseSwa()) {
/* 115 */       address.addAttribute(this.fac.createOMAttribute(""optimize"", null, ""swa""));
/* 116 */     } else if (endpt.isUseMTOM()) {
/* 117 */       address.addAttribute(this.fac.createOMAttribute(""optimize"", null, ""mtom""));
/*     */     } 
/* 119 */     if (endpt.getAddress() != null) {
/* 120 */       address.addAttribute(this.fac.createOMAttribute(""uri"", null, endpt.getAddress()));
/*     */     } else {
/*     */       
/* 123 */       handleException(""Invalid Endpoint. Address is required"");
/*     */     } 
/*     */     
/* 126 */     int isEnableStatistics = endpt.getStatisticsEnable();
/* 127 */     String statisticsValue = null;
/* 128 */     if (isEnableStatistics == 1) {
/* 129 */       statisticsValue = ""enable"";
/* 130 */     } else if (isEnableStatistics == 0) {
/* 131 */       statisticsValue = ""disable"";
/*     */     } 
/* 133 */     if (statisticsValue != null) {
/* 134 */       address.addAttribute(this.fac.createOMAttribute(""statistics"", null, statisticsValue));
/*     */     }
/*     */     
/* 137 */     if (endpt.isAddressingOn()) {
/* 138 */       OMElement addressing = this.fac.createOMElement(""enableAddressing"", Constants.SYNAPSE_OMNAMESPACE);
/* 139 */       if (endpt.isUseSeparateListener()) {
/* 140 */         addressing.addAttribute(this.fac.createOMAttribute(""separateListener"", null, ""true""));
/*     */       }
/*     */       
/* 143 */       address.addChild((OMNode)addressing);
/*     */     } 
/*     */     
/* 146 */     if (endpt.isReliableMessagingOn()) {
/* 147 */       OMElement rm = this.fac.createOMElement(""enableRM"", Constants.SYNAPSE_OMNAMESPACE);
/* 148 */       if (endpt.getWsRMPolicyKey() != null) {
/* 149 */         rm.addAttribute(this.fac.createOMAttribute(""policy"", null, endpt.getWsRMPolicyKey()));
/*     */       }
/*     */       
/* 152 */       address.addChild((OMNode)rm);
/*     */     } 
/*     */     
/* 155 */     if (endpt.isSecurityOn()) {
/* 156 */       OMElement sec = this.fac.createOMElement(""enableSec"", Constants.SYNAPSE_OMNAMESPACE);
/* 157 */       if (endpt.getWsSecPolicyKey() != null) {
/* 158 */         sec.addAttribute(this.fac.createOMAttribute(""policy"", null, endpt.getWsSecPolicyKey()));
/*     */       }
/*     */       
/* 161 */       address.addChild((OMNode)sec);
/*     */     } 
/*     */     
/* 164 */     if (endpt.getTimeoutAction() != 100) {
/* 165 */       OMElement timeout = this.fac.createOMElement(""timeout"", Constants.SYNAPSE_OMNAMESPACE);
/* 166 */       address.addChild((OMNode)timeout);
/*     */       
/* 168 */       OMElement duration = this.fac.createOMElement(""duration"", Constants.SYNAPSE_OMNAMESPACE);
/* 169 */       duration.setText(Long.toString(endpt.getTimeoutDuration() / 1000L));
/* 170 */       timeout.addChild((OMNode)duration);
/*     */       
/* 172 */       OMElement action = this.fac.createOMElement(""action"", Constants.SYNAPSE_OMNAMESPACE);
/* 173 */       if (endpt.getTimeoutAction() == 101) {
/* 174 */         action.setText(""discard"");
/* 175 */       } else if (endpt.getTimeoutAction() == 102) {
/* 176 */         action.setText(""fault"");
/*     */       } 
/* 178 */       timeout.addChild((OMNode)action);
/*     */     } 
/*     */     
/* 181 */     return address;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 185 */     log.error(msg);
/* 186 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\AddressEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndpointAbstractFactory
/*    */ {
/*    */   public static EndpointFactory getEndpointFactroy(OMElement configElement) {
/* 43 */     if (configElement.getAttribute(new QName(""key"")) != null) {
/* 44 */       IndirectEndpointFactory endpointFactory = IndirectEndpointFactory.getInstance();
/* 45 */       return endpointFactory;
/*    */     } 
/*    */     
/* 48 */     OMElement addressElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""address""));
/*    */     
/* 50 */     if (addressElement != null) {
/* 51 */       EndpointFactory endpointFactory = AddressEndpointFactory.getInstance();
/* 52 */       return endpointFactory;
/*    */     } 
/*    */     
/* 55 */     OMElement wsdlElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""wsdl""));
/*    */     
/* 57 */     if (wsdlElement != null) {
/* 58 */       EndpointFactory endpointFactory = WSDLEndpointFactory.getInstance();
/* 59 */       return endpointFactory;
/*    */     } 
/*    */     
/* 62 */     OMElement lbElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*    */     
/* 64 */     if (lbElement != null) {
/* 65 */       OMElement sessionElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""session""));
/*    */       
/* 67 */       if (sessionElement != null) {
/* 68 */         EndpointFactory endpointFactory = SALoadbalanceEndpointFactory.getInstance();
/* 69 */         return endpointFactory;
/*    */       } 
/* 71 */       EndpointFactory endpointFactory = LoadbalanceEndpointFactory.getInstance();
/* 72 */       return endpointFactory;
/*    */     } 
/*    */ 
/*    */     
/* 76 */     OMElement foElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""failover""));
/*    */     
/* 78 */     if (foElement != null) {
/* 79 */       EndpointFactory endpointFactory = FailoverEndpointFactory.getInstance();
/* 80 */       return endpointFactory;
/*    */     } 
/*    */     
/* 83 */     throw new SynapseException(""Invalid endpoint configuration."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\EndpointAbstractFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndpointAbstractSerializer
/*    */ {
/*    */   public static EndpointSerializer getEndpointSerializer(Endpoint endpoint) {
/* 40 */     if (endpoint instanceof org.apache.synapse.endpoints.AddressEndpoint)
/* 41 */       return new AddressEndpointSerializer(); 
/* 42 */     if (endpoint instanceof org.apache.synapse.endpoints.WSDLEndpoint)
/* 43 */       return new WSDLEndpointSerializer(); 
/* 44 */     if (endpoint instanceof org.apache.synapse.endpoints.IndirectEndpoint)
/* 45 */       return new IndirectEndpointSerializer(); 
/* 46 */     if (endpoint instanceof org.apache.synapse.endpoints.LoadbalanceEndpoint)
/* 47 */       return new LoadbalanceEndpointSerializer(); 
/* 48 */     if (endpoint instanceof org.apache.synapse.endpoints.SALoadbalanceEndpoint)
/* 49 */       return new SALoadbalanceEndpointSerializer(); 
/* 50 */     if (endpoint instanceof org.apache.synapse.endpoints.FailoverEndpoint) {
/* 51 */       return new FailoverEndpointSerializer();
/*    */     }
/*    */     
/* 54 */     throw new SynapseException(""Serializer for endpoint "" + endpoint.getClass().toString() + "" is not defined."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\EndpointAbstractSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointFactory,"package org.apache.synapse.config.xml.endpoints;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.synapse.endpoints.Endpoint;
public interface EndpointFactory extends XMLToObjectMapper {
  Endpoint createEndpoint(OMElement paramOMElement, boolean paramBoolean);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\EndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointSerializer,"package org.apache.synapse.config.xml.endpoints;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.endpoints.Endpoint;
public interface EndpointSerializer {
  OMElement serializeEndpoint(Endpoint paramEndpoint);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\EndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.FailoverEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.Constants;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.FailoverEndpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FailoverEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  46 */   private static Log log = LogFactory.getLog(FailoverEndpointFactory.class);
/*     */   
/*  48 */   private static FailoverEndpointFactory instance = new FailoverEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   public static FailoverEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  58 */     OMElement failoverElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""failover""));
/*     */     
/*  60 */     if (failoverElement != null) {
/*     */       
/*  62 */       FailoverEndpoint failoverEndpoint = new FailoverEndpoint();
/*     */ 
/*     */       
/*  65 */       String name = epConfig.getAttributeValue(new QName(""name""));
/*  66 */       if (name != null) {
/*  67 */         failoverEndpoint.setName(name);
/*     */       }
/*     */ 
/*     */       
/*  71 */       ArrayList endpoints = getEndpoints(failoverElement, (Endpoint)failoverEndpoint);
/*  72 */       failoverEndpoint.setEndpoints(endpoints);
/*     */       
/*  74 */       return (Endpoint)failoverEndpoint;
/*     */     } 
/*     */     
/*  77 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/*  81 */     if (om instanceof OMElement) {
/*  82 */       return createEndpoint((OMElement)om, false);
/*     */     }
/*  84 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/*  86 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement failoverElement, Endpoint parent) {
/*  91 */     ArrayList endpoints = new ArrayList();
/*  92 */     Iterator iter = failoverElement.getChildrenWithName(Constants.ENDPOINT_ELT);
/*     */     
/*  94 */     while (iter.hasNext()) {
/*     */       
/*  96 */       OMElement endptElem = iter.next();
/*     */       
/*  98 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/*  99 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 100 */       endpoint.setParentEndpoint(parent);
/* 101 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 104 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 108 */     log.error(msg);
/* 109 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 113 */     log.error(msg, e);
/* 114 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\FailoverEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.FailoverEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Constants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.FailoverEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FailoverEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 44 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 48 */     if (!(endpoint instanceof FailoverEndpoint)) {
/* 49 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 52 */     FailoverEndpoint failoverEndpoint = (FailoverEndpoint)endpoint;
/*    */     
/* 54 */     this.fac = OMAbstractFactory.getOMFactory();
/* 55 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 57 */     OMElement failoverElement = this.fac.createOMElement(""failover"", Constants.SYNAPSE_OMNAMESPACE);
/* 58 */     endpointElement.addChild((OMNode)failoverElement);
/*    */     
/* 60 */     String name = failoverEndpoint.getName();
/* 61 */     if (name != null) {
/* 62 */       endpointElement.addAttribute(""name"", name, null);
/*    */     }
/*    */     
/* 65 */     List endpoints = failoverEndpoint.getEndpoints();
/* 66 */     for (int i = 0; i < endpoints.size(); i++) {
/* 67 */       Endpoint childEndpoint = endpoints.get(i);
/* 68 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*    */       
/* 70 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/* 71 */       failoverElement.addChild((OMNode)aeElement);
/*    */     } 
/*    */     
/* 74 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\FailoverEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.IndirectEndpointFactory,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.IndirectEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IndirectEndpointFactory
/*    */   implements EndpointFactory
/*    */ {
/* 41 */   private static Log log = LogFactory.getLog(IndirectEndpointFactory.class);
/*    */   
/* 43 */   private static IndirectEndpointFactory instance = new IndirectEndpointFactory();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 48 */   public static IndirectEndpointFactory getInstance() { return instance; }
/*    */ 
/*    */ 
/*    */   
/*    */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/* 53 */     IndirectEndpoint indirectEndpoint = new IndirectEndpoint();
/* 54 */     String ref = epConfig.getAttributeValue(new QName(""key""));
/* 55 */     indirectEndpoint.setKey(ref);
/* 56 */     return (Endpoint)indirectEndpoint;
/*    */   }
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 60 */     if (om instanceof OMElement) {
/* 61 */       return createEndpoint((OMElement)om, false);
/*    */     }
/* 63 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*    */     
/* 65 */     return null;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 69 */     log.error(msg);
/* 70 */     throw new SynapseException(msg);
/*    */   }
/*    */   
/*    */   private static void handleException(String msg, Exception e) {
/* 74 */     log.error(msg, e);
/* 75 */     throw new SynapseException(msg, e);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\IndirectEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.IndirectEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.synapse.Constants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.IndirectEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IndirectEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 37 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 41 */     if (!(endpoint instanceof IndirectEndpoint)) {
/* 42 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 45 */     this.fac = OMAbstractFactory.getOMFactory();
/* 46 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 48 */     IndirectEndpoint indirectEndpoint = (IndirectEndpoint)endpoint;
/* 49 */     String ref = indirectEndpoint.getKey();
/* 50 */     if (ref != null) {
/* 51 */       endpointElement.addAttribute(""key"", ref, null);
/*    */     }
/*    */     
/* 54 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\IndirectEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.Constants;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.LoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoadbalanceEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  49 */   private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);
/*     */   
/*  51 */   private static LoadbalanceEndpointFactory instance = new LoadbalanceEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   public static LoadbalanceEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  63 */     OMElement loadbalanceElement = null;
/*  64 */     loadbalanceElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*     */ 
/*     */     
/*  67 */     if (loadbalanceElement != null) {
/*     */       
/*  69 */       LoadbalanceEndpoint loadbalanceEndpoint = new LoadbalanceEndpoint();
/*     */ 
/*     */       
/*  72 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  75 */       if (name != null) {
/*  76 */         loadbalanceEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */ 
/*     */       
/*  80 */       ArrayList endpoints = getEndpoints(loadbalanceElement, (Endpoint)loadbalanceEndpoint);
/*  81 */       loadbalanceEndpoint.setEndpoints(endpoints);
/*     */ 
/*     */       
/*  84 */       LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
/*     */       
/*  86 */       loadbalanceEndpoint.setAlgorithm(algorithm);
/*     */ 
/*     */       
/*  89 */       String failover = loadbalanceElement.getAttributeValue(new QName(""failover""));
/*  90 */       if (failover != null && failover.equalsIgnoreCase(""false"")) {
/*  91 */         loadbalanceEndpoint.setFailover(false);
/*     */       }
/*     */       
/*  94 */       return (Endpoint)loadbalanceEndpoint;
/*     */     } 
/*     */     
/*  97 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 101 */     if (om instanceof OMElement) {
/* 102 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 104 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 106 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {
/* 111 */     ArrayList endpoints = new ArrayList();
/* 112 */     Iterator iter = loadbalanceElement.getChildrenWithName(Constants.ENDPOINT_ELT);
/*     */     
/* 114 */     while (iter.hasNext()) {
/*     */       
/* 116 */       OMElement endptElem = iter.next();
/*     */       
/* 118 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/* 119 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 120 */       endpoint.setParentEndpoint(parent);
/* 121 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 124 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 128 */     log.error(msg);
/* 129 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 133 */     log.error(msg, e);
/* 134 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\LoadbalanceEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Constants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.LoadbalanceEndpoint;
/*    */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LoadbalanceEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 46 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 50 */     if (!(endpoint instanceof LoadbalanceEndpoint)) {
/* 51 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 54 */     this.fac = OMAbstractFactory.getOMFactory();
/* 55 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 57 */     LoadbalanceEndpoint loadbalanceEndpoint = (LoadbalanceEndpoint)endpoint;
/*    */     
/* 59 */     String name = loadbalanceEndpoint.getName();
/* 60 */     if (name != null) {
/* 61 */       endpointElement.addAttribute(""name"", name, null);
/*    */     }
/*    */     
/* 64 */     OMElement loadbalanceElement = this.fac.createOMElement(""loadbalance"", Constants.SYNAPSE_OMNAMESPACE);
/* 65 */     endpointElement.addChild((OMNode)loadbalanceElement);
/*    */     
/* 67 */     LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
/* 68 */     String algorithmName = ""roundRobin"";
/* 69 */     if (algorithm instanceof org.apache.synapse.endpoints.algorithms.RoundRobin) {
/* 70 */       algorithmName = ""roundRobin"";
/*    */     }
/* 72 */     loadbalanceElement.addAttribute(""policy"", algorithmName, null);
/*    */ 
/*    */ 
/*    */     
/* 76 */     if (!loadbalanceEndpoint.isFailover()) {
/* 77 */       loadbalanceElement.addAttribute(""failover"", ""false"", null);
/*    */     }
/*    */     
/* 80 */     List endpoints = loadbalanceEndpoint.getEndpoints();
/* 81 */     for (int i = 0; i < endpoints.size(); i++) {
/* 82 */       Endpoint childEndpoint = endpoints.get(i);
/* 83 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*    */       
/* 85 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/* 86 */       loadbalanceElement.addChild((OMNode)aeElement);
/*    */     } 
/*    */     
/* 89 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\LoadbalanceEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.Constants;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  55 */   private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);
/*     */   
/*  57 */   private static SALoadbalanceEndpointFactory instance = new SALoadbalanceEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   public static SALoadbalanceEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  68 */     SALoadbalanceEndpoint loadbalanceEndpoint = new SALoadbalanceEndpoint();
/*     */ 
/*     */     
/*  71 */     OMElement sessionElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""session""));
/*     */     
/*  73 */     if (sessionElement != null) {
/*     */       
/*  75 */       String type = sessionElement.getAttributeValue(new QName(""type""));
/*     */       
/*  77 */       if (type.equalsIgnoreCase(""soap"")) {
/*  78 */         SoapSessionDispatcher soapSessionDispatcher = new SoapSessionDispatcher();
/*  79 */         loadbalanceEndpoint.setDispatcher((Dispatcher)soapSessionDispatcher);
/*     */       }
/*  81 */       else if (type.equalsIgnoreCase(""http"")) {
/*  82 */         HttpSessionDispatcher httpSessionDispatcher = new HttpSessionDispatcher();
/*  83 */         loadbalanceEndpoint.setDispatcher((Dispatcher)httpSessionDispatcher);
/*     */       }
/*  85 */       else if (type.equalsIgnoreCase(""simpleClientSession"")) {
/*  86 */         SimpleClientSessionDispatcher simpleClientSessionDispatcher = new SimpleClientSessionDispatcher();
/*  87 */         loadbalanceEndpoint.setDispatcher((Dispatcher)simpleClientSessionDispatcher);
/*     */       } 
/*     */     } else {
/*  90 */       handleException(""Session affinity endpoints should have a session element in the configuration."");
/*     */     } 
/*     */ 
/*     */     
/*  94 */     OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */     
/*  97 */     if (name != null) {
/*  98 */       loadbalanceEndpoint.setName(name.getAttributeValue());
/*     */     }
/*     */     
/* 101 */     OMElement loadbalanceElement = null;
/* 102 */     loadbalanceElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*     */ 
/*     */     
/* 105 */     if (loadbalanceElement != null) {
/*     */ 
/*     */       
/* 108 */       ArrayList endpoints = getEndpoints(loadbalanceElement, (Endpoint)loadbalanceEndpoint);
/* 109 */       loadbalanceEndpoint.setEndpoints(endpoints);
/*     */ 
/*     */       
/* 112 */       LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
/*     */       
/* 114 */       loadbalanceEndpoint.setAlgorithm(algorithm);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 144 */       return (Endpoint)loadbalanceEndpoint;
/*     */     } 
/*     */     
/* 147 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 151 */     if (om instanceof OMElement) {
/* 152 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 154 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 156 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {
/* 161 */     ArrayList endpoints = new ArrayList();
/* 162 */     Iterator iter = loadbalanceElement.getChildrenWithName(Constants.ENDPOINT_ELT);
/*     */     
/* 164 */     while (iter.hasNext()) {
/*     */       
/* 166 */       OMElement endptElem = iter.next();
/*     */       
/* 168 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/* 169 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 170 */       endpoint.setParentEndpoint(parent);
/* 171 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 174 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 178 */     log.error(msg);
/* 179 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 183 */     log.error(msg, e);
/* 184 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\SALoadbalanceEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Constants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(SALoadbalanceEndpointSerializer.class);
/*     */   
/*  46 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  50 */     if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/*  51 */       handleException(""Invalid endpoint type for serializing. Expected: SALoadbalanceEndpoint Found: "" + endpoint.getClass().getName());
/*     */     }
/*     */ 
/*     */     
/*  55 */     SALoadbalanceEndpoint loadbalanceEndpoint = (SALoadbalanceEndpoint)endpoint;
/*     */     
/*  57 */     this.fac = OMAbstractFactory.getOMFactory();
/*  58 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  60 */     String name = loadbalanceEndpoint.getName();
/*  61 */     if (name != null) {
/*  62 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  65 */     Dispatcher dispatcher = loadbalanceEndpoint.getDispatcher();
/*     */     
/*  67 */     if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher) {
/*  68 */       OMElement sessionElement = this.fac.createOMElement(""session"", Constants.SYNAPSE_OMNAMESPACE);
/*  69 */       sessionElement.addAttribute(""type"", ""soap"", null);
/*  70 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     }
/*  72 */     else if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher) {
/*  73 */       OMElement sessionElement = this.fac.createOMElement(""session"", Constants.SYNAPSE_OMNAMESPACE);
/*  74 */       sessionElement.addAttribute(""type"", ""http"", null);
/*  75 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     }
/*  77 */     else if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher) {
/*  78 */       OMElement sessionElement = this.fac.createOMElement(""session"", Constants.SYNAPSE_OMNAMESPACE);
/*  79 */       sessionElement.addAttribute(""type"", ""simpleClientSession"", null);
/*  80 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     } 
/*     */     
/*  83 */     OMElement loadbalanceElement = this.fac.createOMElement(""loadbalance"", Constants.SYNAPSE_OMNAMESPACE);
/*  84 */     endpointElement.addChild((OMNode)loadbalanceElement);
/*     */     
/*  86 */     LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
/*  87 */     String algorithmName = ""roundRobin"";
/*  88 */     if (algorithm instanceof org.apache.synapse.endpoints.algorithms.RoundRobin) {
/*  89 */       algorithmName = ""roundRobin"";
/*     */     }
/*  91 */     loadbalanceElement.addAttribute(""algorithm"", algorithmName, null);
/*     */     
/*  93 */     List endpoints = loadbalanceEndpoint.getEndpoints();
/*  94 */     for (int i = 0; i < endpoints.size(); i++) {
/*  95 */       Endpoint childEndpoint = endpoints.get(i);
/*  96 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*     */       
/*  98 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/*  99 */       loadbalanceElement.addChild((OMNode)aeElement);
/*     */     } 
/*     */     
/* 102 */     return endpointElement;
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 106 */     log.error(msg);
/* 107 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\SALoadbalanceEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.WSDLEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.net.URL;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Util;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.WSDLEndpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  57 */   private static Log log = LogFactory.getLog(WSDLEndpointFactory.class);
/*     */   
/*  59 */   private static WSDLEndpointFactory instance = new WSDLEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   public static WSDLEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/*  68 */     if (om instanceof OMElement) {
/*  69 */       return createEndpoint((OMElement)om, false);
/*     */     }
/*  71 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/*  73 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  78 */     WSDLEndpoint wsdlEndpoint = new WSDLEndpoint();
/*     */     
/*  80 */     if (!anonymousEndpoint) {
/*  81 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  84 */       if (name != null) {
/*  85 */         wsdlEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/*  89 */     OMElement wsdlElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""wsdl""));
/*     */ 
/*     */     
/*  92 */     if (wsdlElement != null) {
/*     */ 
/*     */       
/*  95 */       OMElement suspendElement = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""suspendDurationOnFailure""));
/*     */ 
/*     */ 
/*     */       
/*  99 */       if (suspendElement != null) {
/* 100 */         String suspend = suspendElement.getText();
/*     */         
/*     */         try {
/* 103 */           if (suspend != null) {
/* 104 */             long suspendDuration = Long.parseLong(suspend.trim());
/* 105 */             wsdlEndpoint.setSuspendOnFailDuration(suspendDuration * 1000L);
/*     */           }
/*     */         
/* 108 */         } catch (NumberFormatException e) {
/* 109 */           handleException(""suspendDurationOnFailure should be valid number."");
/*     */         } 
/*     */       } 
/*     */       
/* 113 */       EndpointDefinition endpoint = null;
/*     */ 
/*     */ 
/*     */       
/* 117 */       String serviceName = wsdlElement.getAttributeValue(new QName("""", ""service""));
/*     */ 
/*     */       
/* 120 */       String portName = wsdlElement.getAttributeValue(new QName("""", ""port""));
/*     */ 
/*     */ 
/*     */       
/* 124 */       String wsdlURI = wsdlElement.getAttributeValue(new QName("""", ""uri""));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 129 */       wsdlEndpoint.setServiceName(serviceName);
/* 130 */       wsdlEndpoint.setPortName(portName);
/*     */       
/* 132 */       if (wsdlURI != null) {
/* 133 */         wsdlEndpoint.setWsdlURI(wsdlURI.trim());
/*     */         
/*     */         try {
/* 136 */           String ns = Util.getOMElementFromURL((new URL(wsdlURI)).toString()).getNamespace().getNamespaceURI();
/*     */ 
/*     */           
/* 139 */           if (""http://schemas.xmlsoap.org/wsdl/"".equals(ns)) {
/* 140 */             endpoint = (new WSDL11EndpointBuilder()).createEndpointDefinitionFromWSDL(wsdlURI, serviceName, portName);
/*     */           
/*     */           }
/* 143 */           else if (""http://www.w3.org/ns/wsdl"".equals(ns)) {
/*     */ 
/*     */ 
/*     */             
/* 147 */             handleException(""WSDL 2.0 Endpoints are currently not supported"");
/*     */           }
/*     */         
/* 150 */         } catch (Exception e) {
/* 151 */           handleException(""Couldn't create endpoint from the given WSDL URI : "" + e.getMessage(), e);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 157 */       OMElement definitionElement = wsdlElement.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""definitions""));
/*     */       
/* 159 */       if (endpoint == null && definitionElement != null) {
/* 160 */         wsdlEndpoint.setWsdlDoc(definitionElement);
/*     */         
/* 162 */         endpoint = (new WSDL11EndpointBuilder()).createEndpointDefinitionFromWSDL(definitionElement, serviceName, portName);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 167 */       OMElement descriptionElement = wsdlElement.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""description""));
/*     */       
/* 169 */       if (endpoint == null && descriptionElement != null) {
/* 170 */         wsdlEndpoint.setWsdlDoc(descriptionElement);
/* 171 */         handleException(""WSDL 2.0 Endpoints are currently not supported."");
/*     */       } 
/* 173 */       if (endpoint != null) {
/*     */         
/* 175 */         extractQOSInformation(endpoint, wsdlElement);
/* 176 */         OMAttribute statistics = epConfig.getAttribute(new QName("""", ""statistics""));
/*     */ 
/*     */         
/* 179 */         if (statistics != null) {
/* 180 */           String statisticsValue = statistics.getAttributeValue();
/* 181 */           if (statisticsValue != null) {
/* 182 */             if (""enable"".equals(statisticsValue)) {
/*     */               
/* 184 */               endpoint.setStatisticsEnable(1);
/* 185 */             } else if (""disable"".equals(statisticsValue)) {
/*     */               
/* 187 */               endpoint.setStatisticsEnable(0);
/*     */             } 
/*     */           }
/*     */         } 
/* 191 */         wsdlEndpoint.setEndpointDefinition(endpoint);
/*     */       } else {
/* 193 */         handleException(""WSDL is not specified for WSDL endpoint."");
/*     */       } 
/*     */     } 
/*     */     
/* 197 */     return (Endpoint)wsdlEndpoint;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 201 */     log.error(msg);
/* 202 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 206 */     log.error(msg, e);
/* 207 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */   
/*     */   private void extractQOSInformation(EndpointDefinition endpointDefinition, OMElement wsdlElement) {
/* 212 */     OMAttribute format = wsdlElement.getAttribute(new QName("""", ""format""));
/*     */     
/* 214 */     OMAttribute optimize = wsdlElement.getAttribute(new QName("""", ""optimize""));
/*     */ 
/*     */     
/* 217 */     if (format != null) {
/*     */       
/* 219 */       String forceValue = format.getAttributeValue().trim().toLowerCase();
/* 220 */       if (forceValue.equals(""pox"")) {
/* 221 */         endpointDefinition.setForcePOX(true);
/* 222 */       } else if (forceValue.equals(""soap"")) {
/* 223 */         endpointDefinition.setForceSOAP(true);
/*     */       } else {
/* 225 */         handleException(""force value -\"""" + forceValue + ""\"" not yet implemented"");
/*     */       } 
/*     */     } 
/*     */     
/* 229 */     if (optimize != null && optimize.getAttributeValue().length() > 0) {
/* 230 */       String method = optimize.getAttributeValue().trim();
/* 231 */       if (""mtom"".equalsIgnoreCase(method)) {
/* 232 */         endpointDefinition.setUseMTOM(true);
/* 233 */       } else if (""swa"".equalsIgnoreCase(method)) {
/* 234 */         endpointDefinition.setUseSwa(true);
/*     */       } 
/*     */     } 
/*     */     
/* 238 */     OMElement wsAddr = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableAddressing""));
/*     */     
/* 240 */     if (wsAddr != null) {
/* 241 */       endpointDefinition.setAddressingOn(true);
/* 242 */       String useSepList = wsAddr.getAttributeValue(new QName(""separateListener""));
/*     */       
/* 244 */       if (useSepList != null && (
/* 245 */         useSepList.trim().toLowerCase().startsWith(""tr"") || useSepList.trim().startsWith(""1"")))
/*     */       {
/* 247 */         endpointDefinition.setUseSeparateListener(true);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 252 */     OMElement wsSec = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec""));
/*     */     
/* 254 */     if (wsSec != null) {
/* 255 */       endpointDefinition.setSecurityOn(true);
/* 256 */       OMAttribute policy = wsSec.getAttribute(new QName("""", ""policy""));
/*     */       
/* 258 */       if (policy != null) {
/* 259 */         endpointDefinition.setWsSecPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/* 262 */     OMElement wsRm = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM""));
/*     */     
/* 264 */     if (wsRm != null) {
/* 265 */       endpointDefinition.setReliableMessagingOn(true);
/* 266 */       OMAttribute policy = wsRm.getAttribute(new QName("""", ""policy""));
/*     */       
/* 268 */       if (policy != null) {
/* 269 */         endpointDefinition.setWsRMPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 274 */     OMElement timeout = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""timeout""));
/*     */     
/* 276 */     if (timeout != null) {
/* 277 */       OMElement duration = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""duration""));
/*     */       
/* 279 */       if (duration != null) {
/* 280 */         String d = duration.getText();
/* 281 */         if (d != null) {
/* 282 */           long timeoutSeconds = (new Long(d.trim())).longValue();
/* 283 */           endpointDefinition.setTimeoutDuration(timeoutSeconds * 1000L);
/*     */         } 
/*     */       } 
/*     */       
/* 287 */       OMElement action = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""action""));
/*     */       
/* 289 */       if (action != null) {
/* 290 */         String a = action.getText();
/* 291 */         if (a != null)
/* 292 */           if (a.trim().equalsIgnoreCase(""discard"")) {
/* 293 */             endpointDefinition.setTimeoutAction(101);
/*     */ 
/*     */             
/* 296 */             if (endpointDefinition.getTimeoutDuration() == 0L) {
/* 297 */               endpointDefinition.setTimeoutDuration(30000L);
/*     */             }
/* 299 */           } else if (a.trim().equalsIgnoreCase(""fault"")) {
/* 300 */             endpointDefinition.setTimeoutAction(102);
/*     */ 
/*     */             
/* 303 */             if (endpointDefinition.getTimeoutDuration() == 0L)
/* 304 */               endpointDefinition.setTimeoutDuration(30000L); 
/*     */           }  
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\WSDLEndpointFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.WSDLEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Constants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.WSDLEndpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  45 */   private static Log log = LogFactory.getLog(WSDLEndpointSerializer.class);
/*     */   
/*  47 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  51 */     if (!(endpoint instanceof WSDLEndpoint)) {
/*  52 */       throw new SynapseException(""Invalid endpoint type."");
/*     */     }
/*     */     
/*  55 */     this.fac = OMAbstractFactory.getOMFactory();
/*  56 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", Constants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  58 */     WSDLEndpoint wsdlEndpoint = (WSDLEndpoint)endpoint;
/*  59 */     String name = wsdlEndpoint.getName();
/*  60 */     if (name != null) {
/*  61 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  64 */     OMElement wsdlElement = this.fac.createOMElement(""wsdl"", Constants.SYNAPSE_OMNAMESPACE);
/*  65 */     String serviceName = wsdlEndpoint.getServiceName();
/*  66 */     if (serviceName != null) {
/*  67 */       wsdlElement.addAttribute(""service"", serviceName, null);
/*     */     }
/*     */     
/*  70 */     String portName = wsdlEndpoint.getPortName();
/*  71 */     if (portName != null) {
/*  72 */       wsdlElement.addAttribute(""port"", portName, null);
/*     */     }
/*     */     
/*  75 */     String uri = wsdlEndpoint.getWsdlURI();
/*  76 */     if (uri != null) {
/*  77 */       wsdlElement.addAttribute(""uri"", uri, null);
/*     */     }
/*     */     
/*  80 */     OMElement wsdlDoc = wsdlEndpoint.getWsdlDoc();
/*  81 */     if (wsdlDoc != null) {
/*  82 */       wsdlElement.addChild((OMNode)wsdlDoc);
/*     */     }
/*     */     
/*  85 */     long suspendDuration = wsdlEndpoint.getSuspendOnFailDuration();
/*  86 */     if (suspendDuration != -1L) {
/*     */ 
/*     */       
/*  89 */       OMElement suspendElement = this.fac.createOMElement(""suspendDurationOnFailure"", Constants.SYNAPSE_OMNAMESPACE);
/*     */ 
/*     */ 
/*     */       
/*  93 */       suspendElement.setText(Long.toString(suspendDuration / 1000L));
/*  94 */       wsdlElement.addChild((OMNode)suspendElement);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 100 */     EndpointDefinition epAddress = wsdlEndpoint.getEndpointDefinition();
/* 101 */     serializeQOSInformation(epAddress, wsdlElement);
/*     */     
/* 103 */     endpointElement.addChild((OMNode)wsdlElement);
/*     */     
/* 105 */     return endpointElement;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void serializeQOSInformation(EndpointDefinition endpointDefinition, OMElement wsdlElement) {
/* 111 */     if (endpointDefinition.isForcePOX()) {
/* 112 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/* 113 */     } else if (endpointDefinition.isForceSOAP()) {
/* 114 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap""));
/*     */     } 
/*     */     
/* 117 */     int isEnableStatistics = endpointDefinition.getStatisticsEnable();
/* 118 */     String statisticsValue = null;
/* 119 */     if (isEnableStatistics == 1) {
/* 120 */       statisticsValue = ""enable"";
/* 121 */     } else if (isEnableStatistics == 0) {
/* 122 */       statisticsValue = ""disable"";
/*     */     } 
/* 124 */     if (statisticsValue != null) {
/* 125 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""statistics"", null, statisticsValue));
/*     */     }
/*     */     
/* 128 */     if (endpointDefinition.isAddressingOn()) {
/* 129 */       OMElement addressing = this.fac.createOMElement(""enableAddressing"", Constants.SYNAPSE_OMNAMESPACE);
/* 130 */       if (endpointDefinition.isUseSeparateListener()) {
/* 131 */         addressing.addAttribute(this.fac.createOMAttribute(""separateListener"", null, ""true""));
/*     */       }
/*     */       
/* 134 */       wsdlElement.addChild((OMNode)addressing);
/*     */     } 
/*     */     
/* 137 */     if (endpointDefinition.isReliableMessagingOn()) {
/* 138 */       OMElement rm = this.fac.createOMElement(""enableRM"", Constants.SYNAPSE_OMNAMESPACE);
/* 139 */       if (endpointDefinition.getWsRMPolicyKey() != null) {
/* 140 */         rm.addAttribute(this.fac.createOMAttribute(""policy"", null, endpointDefinition.getWsRMPolicyKey()));
/*     */       }
/*     */       
/* 143 */       wsdlElement.addChild((OMNode)rm);
/*     */     } 
/*     */     
/* 146 */     if (endpointDefinition.isSecurityOn()) {
/* 147 */       OMElement sec = this.fac.createOMElement(""enableSec"", Constants.SYNAPSE_OMNAMESPACE);
/* 148 */       if (endpointDefinition.getWsSecPolicyKey() != null) {
/* 149 */         sec.addAttribute(this.fac.createOMAttribute(""policy"", null, endpointDefinition.getWsSecPolicyKey()));
/*     */       }
/*     */       
/* 152 */       wsdlElement.addChild((OMNode)sec);
/*     */     } 
/*     */     
/* 155 */     if (endpointDefinition.getTimeoutAction() != 100) {
/* 156 */       OMElement timeout = this.fac.createOMElement(""timeout"", Constants.SYNAPSE_OMNAMESPACE);
/* 157 */       wsdlElement.addChild((OMNode)timeout);
/*     */       
/* 159 */       OMElement duration = this.fac.createOMElement(""duration"", Constants.SYNAPSE_OMNAMESPACE);
/* 160 */       duration.setText(Long.toString(endpointDefinition.getTimeoutDuration() / 1000L));
/* 161 */       timeout.addChild((OMNode)duration);
/*     */       
/* 163 */       OMElement action = this.fac.createOMElement(""action"", Constants.SYNAPSE_OMNAMESPACE);
/* 164 */       if (endpointDefinition.getTimeoutAction() == 101) {
/* 165 */         action.setText(""discard"");
/* 166 */       } else if (endpointDefinition.getTimeoutAction() == 102) {
/* 167 */         action.setText(""fault"");
/*     */       } 
/* 169 */       timeout.addChild((OMNode)action);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 174 */     log.error(msg);
/* 175 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\WSDLEndpointSerializer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.XMLToObjectMapper;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XMLToEndpointMapper
/*    */   implements XMLToObjectMapper
/*    */ {
/* 34 */   private static XMLToEndpointMapper instance = new XMLToEndpointMapper();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 39 */   public static XMLToEndpointMapper getInstance() { return instance; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 49 */     if (om instanceof OMElement) {
/* 50 */       OMElement epElement = (OMElement)om;
/* 51 */       return EndpointAbstractFactory.getEndpointFactroy(epElement).createEndpoint(epElement, false);
/*    */     } 
/*    */     
/* 54 */     throw new SynapseException(""Configuration is not in proper format."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoints\XMLToEndpointMapper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory,"/*    */ package org.apache.synapse.config.xml.endpoints.utils;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*    */ import org.apache.synapse.endpoints.algorithms.RoundRobin;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LoadbalanceAlgorithmFactory
/*    */ {
/*    */   public static LoadbalanceAlgorithm createLoadbalanceAlgorithm(OMElement loadbalanceElement, ArrayList endpoints) {
/* 39 */     Object object = null;
/*    */     
/* 41 */     String algorithmName = ""roundRobin"";
/* 42 */     OMAttribute algoAttribute = loadbalanceElement.getAttribute(new QName(null, ""policy""));
/* 43 */     if (algoAttribute != null) {
/* 44 */       algorithmName = algoAttribute.getAttributeValue();
/*    */     }
/*    */     
/* 47 */     if (algorithmName.equalsIgnoreCase(""roundRobin"")) {
/* 48 */       object = new RoundRobin(endpoints);
/*    */     }
/*    */     
/* 51 */     return (LoadbalanceAlgorithm)object;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoint\\utils\LoadbalanceAlgorithmFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder,"/*     */ package org.apache.synapse.config.xml.endpoints.utils;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.InputStream;
/*     */ import java.util.List;
/*     */ import javax.wsdl.Definition;
/*     */ import javax.wsdl.Port;
/*     */ import javax.wsdl.Service;
/*     */ import javax.wsdl.WSDLException;
/*     */ import javax.wsdl.extensions.soap.SOAPAddress;
/*     */ import javax.wsdl.extensions.soap12.SOAP12Address;
/*     */ import javax.wsdl.factory.WSDLFactory;
/*     */ import javax.wsdl.xml.WSDLReader;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.xml.sax.InputSource;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDL11EndpointBuilder
/*     */ {
/*  49 */   private static Log log = LogFactory.getLog(WSDL11EndpointBuilder.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinitionFromWSDL(OMElement wsdl, String service, String port) {
/*  64 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */     try {
/*  66 */       wsdl.serialize(baos);
/*  67 */       InputStream in = new ByteArrayInputStream(baos.toByteArray());
/*  68 */       InputSource inputSource = new InputSource(in);
/*  69 */       WSDLFactory fac = WSDLFactory.newInstance();
/*  70 */       WSDLReader reader = fac.newWSDLReader();
/*  71 */       Definition definition = reader.readWSDL(null, inputSource);
/*     */       
/*  73 */       return createEndpointDefinitionFromWSDL(definition, service, port);
/*     */     }
/*  75 */     catch (XMLStreamException e) {
/*  76 */       handleException(""Error retrieving the WSDL definition from the inline WSDL."");
/*  77 */     } catch (WSDLException e) {
/*  78 */       handleException(""Error retrieving the WSDL definition from the inline WSDL."");
/*     */     } 
/*     */     
/*  81 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinitionFromWSDL(String wsdlURI, String service, String port) {
/*     */     try {
/*  97 */       WSDLFactory fac = WSDLFactory.newInstance();
/*  98 */       WSDLReader reader = fac.newWSDLReader();
/*  99 */       Definition definition = reader.readWSDL(wsdlURI);
/*     */       
/* 101 */       return createEndpointDefinitionFromWSDL(definition, service, port);
/*     */     }
/* 103 */     catch (WSDLException e) {
/* 104 */       handleException(""Error retrieving the WSDL definition from the WSDL URI."");
/*     */ 
/*     */       
/* 107 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private EndpointDefinition createEndpointDefinitionFromWSDL(Definition definition, String serviceName, String portName) {
/* 113 */     if (definition == null) {
/* 114 */       handleException(""WSDL is not specified."");
/*     */     }
/*     */     
/* 117 */     if (serviceName == null) {
/* 118 */       handleException(""Service of the WSDL document is not specified."");
/*     */     }
/*     */     
/* 121 */     if (portName == null) {
/* 122 */       handleException(""Port of the WSDL document is not specified."");
/*     */     }
/*     */ 
/*     */     
/* 126 */     String serviceURL = null;
/* 127 */     String tns = definition.getTargetNamespace();
/* 128 */     Service service = definition.getService(new QName(tns, serviceName));
/* 129 */     if (service != null) {
/* 130 */       Port port = service.getPort(portName);
/* 131 */       if (port != null) {
/* 132 */         List ext = port.getExtensibilityElements();
/* 133 */         for (int i = 0; i < ext.size(); i++) {
/* 134 */           Object o = ext.get(i);
/* 135 */           if (o instanceof SOAPAddress) {
/* 136 */             SOAPAddress address = (SOAPAddress)o;
/* 137 */             serviceURL = address.getLocationURI(); break;
/*     */           } 
/* 139 */           if (o instanceof SOAP12Address) {
/* 140 */             SOAP12Address address = (SOAP12Address)o;
/* 141 */             serviceURL = address.getLocationURI();
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/* 148 */     if (serviceURL != null) {
/* 149 */       EndpointDefinition endpointDefinition = new EndpointDefinition();
/* 150 */       endpointDefinition.setAddress(serviceURL);
/*     */ 
/*     */ 
/*     */       
/* 154 */       return endpointDefinition;
/*     */     } 
/*     */     
/* 157 */     handleException(""Couldn't retrieve endpoint information from the WSDL."");
/*     */ 
/*     */     
/* 160 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 164 */     log.error(msg);
/* 165 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoint\\utils\WSDL11EndpointBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.WSDL20EndpointBuilder,"package org.apache.synapse.config.xml.endpoints.utils;
public class WSDL20EndpointBuilder {}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\config\xml\endpoint\\utils\WSDL20EndpointBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.SynapseEnvironment,"package org.apache.synapse.core;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.statistics.StatisticsCollector;
public interface SynapseEnvironment {
  void injectMessage(MessageContext paramMessageContext);
  void send(EndpointDefinition paramEndpointDefinition, MessageContext paramMessageContext);
  MessageContext createMessageContext();
  StatisticsCollector getStatisticsCollector();
  void setStatisticsCollector(StatisticsCollector paramStatisticsCollector);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\SynapseEnvironment.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.AnonymousServiceFactory,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.description.AxisMessage;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AnonymousServiceFactory
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(AnonymousServiceFactory.class);
/*     */   
/*     */   private static final String NONE = ""__NONE__"";
/*     */   
/*     */   private static final String ADDR_ONLY = ""__ADDR_ONLY__"";
/*     */   
/*     */   private static final String RM_AND_ADDR = ""__RM_AND_ADDR__"";
/*     */   private static final String SEC_AND_ADDR = ""__SEC_AND_ADDR__"";
/*     */   private static final String RM_SEC_AND_ADDR = ""__RM_SEC_AND_ADDR__"";
/*     */   public static final String DYNAMIC_OPERATION = ""__DYNAMIC_OPERATION__"";
/*  51 */   private static final SynapseCallbackReceiver synapseCallback = new SynapseCallbackReceiver();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static AxisService getAnonymousService(AxisConfiguration axisCfg, boolean wsAddrOn, boolean wsRMOn, boolean wsSecOn) {
/*  65 */     String servicekey = null;
/*  66 */     if (!wsAddrOn) {
/*  67 */       servicekey = ""__NONE__"";
/*     */     }
/*  69 */     else if (!wsSecOn && !wsRMOn) {
/*  70 */       servicekey = ""__ADDR_ONLY__"";
/*  71 */     } else if (wsRMOn && !wsSecOn) {
/*  72 */       servicekey = ""__RM_AND_ADDR__"";
/*  73 */     } else if (wsSecOn && !wsRMOn) {
/*  74 */       servicekey = ""__SEC_AND_ADDR__"";
/*     */     } else {
/*  76 */       servicekey = ""__RM_SEC_AND_ADDR__"";
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/*  81 */       AxisService service = axisCfg.getService(servicekey);
/*  82 */       if (service == null) {
/*  83 */         synchronized (AnonymousServiceFactory.class) {
/*     */ 
/*     */           
/*  86 */           service = axisCfg.getService(servicekey);
/*  87 */           if (service != null) {
/*  88 */             return service;
/*     */           }
/*     */           
/*  91 */           service = createAnonymousService(axisCfg, servicekey);
/*     */           
/*  93 */           if (wsAddrOn) {
/*  94 */             service.engageModule(axisCfg.getModule(""addressing""), axisCfg);
/*     */ 
/*     */             
/*  97 */             if (wsRMOn) {
/*  98 */               service.engageModule(axisCfg.getModule(""sandesha2""), axisCfg);
/*     */             }
/*     */             
/* 101 */             if (wsSecOn) {
/* 102 */               service.engageModule(axisCfg.getModule(""rampart""), axisCfg);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 109 */       return service;
/* 110 */     } catch (AxisFault e) {
/* 111 */       handleException(""Error retrieving anonymous service for QoS : "" + servicekey, (Exception)e);
/*     */       
/* 113 */       return null;
/*     */     } 
/*     */   }
/*     */   private static void handleException(String msg, Exception e) {
/* 117 */     log.error(msg, e);
/* 118 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static AxisService createAnonymousService(AxisConfiguration axisCfg, String serviceKey) {
/*     */     try {
/* 130 */       DynamicAxisOperation dynamicOperation = new DynamicAxisOperation(new QName(""__DYNAMIC_OPERATION__""));
/*     */       
/* 132 */       dynamicOperation.setMessageReceiver(synapseCallback);
/* 133 */       AxisMessage inMsg = new AxisMessage();
/* 134 */       inMsg.setName(""in-message"");
/* 135 */       inMsg.setParent((AxisDescription)dynamicOperation);
/* 136 */       AxisMessage outMsg = new AxisMessage();
/* 137 */       outMsg.setName(""out-message"");
/* 138 */       outMsg.setParent((AxisDescription)dynamicOperation);
/* 139 */       dynamicOperation.addMessage(inMsg, ""Out"");
/* 140 */       dynamicOperation.addMessage(outMsg, ""In"");
/* 141 */       AxisService axisAnonymousService = new AxisService(serviceKey);
/* 142 */       axisAnonymousService.addOperation((AxisOperation)dynamicOperation);
/* 143 */       axisCfg.addService(axisAnonymousService);
/* 144 */       axisCfg.getPhasesInfo().setOperationPhases((AxisOperation)dynamicOperation);
/* 145 */       return axisAnonymousService;
/*     */     }
/* 147 */     catch (AxisFault e) {
/* 148 */       handleException(""Error occured while creating an anonymous service for QoS : "" + serviceKey, (Exception)e);
/*     */ 
/*     */ 
/*     */       
/* 152 */       return null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\AnonymousServiceFactory.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.AsyncCallback,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import org.apache.axis2.client.async.AsyncResult;
/*    */ import org.apache.axis2.client.async.Callback;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AsyncCallback
/*    */   extends Callback
/*    */ {
/* 33 */   MessageContext synapseOutMsgCtx = null;
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   private long timeOutOn;
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 43 */   private int timeOutAction = 100;
/*    */ 
/*    */ 
/*    */   
/* 47 */   public AsyncCallback(MessageContext synapseOutMsgCtx) { this.synapseOutMsgCtx = synapseOutMsgCtx; }
/*    */ 
/*    */   
/*    */   public void onComplete(AsyncResult result) {}
/*    */ 
/*    */   
/*    */   public void onError(Exception e) {}
/*    */   
/* 55 */   public void setSynapseOutMshCtx(MessageContext synapseOutMsgCtx) { this.synapseOutMsgCtx = synapseOutMsgCtx; }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public MessageContext getSynapseOutMsgCtx() { return this.synapseOutMsgCtx; }
/*    */ 
/*    */ 
/*    */   
/* 63 */   public long getTimeOutOn() { return this.timeOutOn; }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public void setTimeOutOn(long timeOutOn) { this.timeOutOn = timeOutOn; }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public int getTimeOutAction() { return this.timeOutAction; }
/*    */ 
/*    */ 
/*    */   
/* 75 */   public void setTimeOutAction(int timeOutAction) { this.timeOutAction = timeOutAction; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\AsyncCallback.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2FlexibleMEPClient,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.attachments.Attachments;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.client.OperationClient;
/*     */ import org.apache.axis2.client.Options;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.context.ServiceContext;
/*     */ import org.apache.axis2.context.ServiceGroupContext;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.AxisServiceGroup;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.neethi.PolicyEngine;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2FlexibleMEPClient
/*     */ {
/*  66 */   private static final Log log = LogFactory.getLog(Axis2FlexibleMEPClient.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void send(EndpointDefinition endpoint, MessageContext synapseOutMessageContext) throws AxisFault {
/*  85 */     boolean separateListener = false;
/*  86 */     boolean wsSecurityEnabled = false;
/*  87 */     String wsSecPolicyKey = null;
/*  88 */     boolean wsRMEnabled = false;
/*  89 */     String wsRMPolicyKey = null;
/*  90 */     boolean wsAddressingEnabled = false;
/*     */     
/*  92 */     if (endpoint != null) {
/*  93 */       separateListener = endpoint.isUseSeparateListener();
/*  94 */       wsSecurityEnabled = endpoint.isSecurityOn();
/*  95 */       wsSecPolicyKey = endpoint.getWsSecPolicyKey();
/*  96 */       wsRMEnabled = endpoint.isReliableMessagingOn();
/*  97 */       wsRMPolicyKey = endpoint.getWsRMPolicyKey();
/*  98 */       wsAddressingEnabled = (endpoint.isAddressingOn() || wsSecurityEnabled || wsRMEnabled);
/*     */     } 
/*     */     
/* 101 */     if (log.isDebugEnabled()) {
/* 102 */       log.debug(""sending [add = "" + wsAddressingEnabled + ""] [sec = "" + wsSecurityEnabled + ""] [rm = "" + wsRMEnabled + ((endpoint != null) ? (""] [ mtom = "" + endpoint.isUseMTOM() + ""] [ swa = "" + endpoint.isUseSwa() + ""] [ force soap="" + endpoint.isForceSOAP() + ""; pox="" + endpoint.isForcePOX()) : """") + ""] [ to "" + synapseOutMessageContext.getTo() + ""]"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 115 */     MessageContext originalInMsgCtx = ((Axis2MessageContext)synapseOutMessageContext).getAxis2MessageContext();
/*     */ 
/*     */ 
/*     */     
/* 119 */     MessageContext axisOutMsgCtx = cloneForSend(originalInMsgCtx);
/*     */ 
/*     */ 
/*     */     
/* 123 */     String eprAddress = null;
/* 124 */     if (endpoint != null && endpoint.getAddress() != null) {
/*     */       
/* 126 */       eprAddress = endpoint.getAddress().toString();
/*     */       
/* 128 */       if (endpoint.isForcePOX()) {
/* 129 */         axisOutMsgCtx.setDoingREST(true);
/* 130 */       } else if (endpoint.isForceSOAP()) {
/* 131 */         axisOutMsgCtx.setDoingREST(false);
/* 132 */         if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {
/* 133 */           axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());
/*     */         }
/*     */       } 
/*     */       
/* 137 */       if (endpoint.isUseMTOM()) {
/* 138 */         axisOutMsgCtx.setDoingMTOM(true);
/*     */         
/* 140 */         axisOutMsgCtx.setProperty(""enableMTOM"", ""true"");
/*     */ 
/*     */         
/* 143 */         axisOutMsgCtx.setDoingMTOM(true);
/*     */       }
/* 145 */       else if (endpoint.isUseSwa()) {
/* 146 */         axisOutMsgCtx.setDoingSwA(true);
/*     */         
/* 148 */         axisOutMsgCtx.setProperty(""enableSwA"", ""true"");
/*     */ 
/*     */         
/* 151 */         axisOutMsgCtx.setDoingSwA(true);
/*     */       } 
/*     */       
/* 154 */       if (endpoint.isUseSeparateListener()) {
/* 155 */         axisOutMsgCtx.setProperty(""OUTFLOW_USE_SEPARATE_LISTENER"", Boolean.TRUE);
/*     */       }
/*     */       
/* 158 */       axisOutMsgCtx.setTo(new EndpointReference(eprAddress));
/*     */     } 
/*     */     
/* 161 */     if (wsAddressingEnabled) {
/* 162 */       axisOutMsgCtx.setProperty(""disableAddressingForOutMessages"", Boolean.FALSE);
/*     */     }
/*     */     else {
/*     */       
/* 166 */       axisOutMsgCtx.setProperty(""disableAddressingForOutMessages"", Boolean.TRUE);
/*     */     } 
/*     */ 
/*     */     
/* 170 */     ConfigurationContext axisCfgCtx = axisOutMsgCtx.getConfigurationContext();
/* 171 */     AxisConfiguration axisCfg = axisCfgCtx.getAxisConfiguration();
/*     */     
/* 173 */     AxisService anoymousService = AnonymousServiceFactory.getAnonymousService(axisCfg, wsAddressingEnabled, wsRMEnabled, wsSecurityEnabled);
/*     */ 
/*     */     
/* 176 */     ServiceGroupContext sgc = new ServiceGroupContext(axisCfgCtx, (AxisServiceGroup)anoymousService.getParent());
/*     */     
/* 178 */     ServiceContext serviceCtx = sgc.getServiceContext(anoymousService);
/*     */ 
/*     */     
/* 181 */     AxisOperation axisAnonymousOperation = anoymousService.getOperation(new QName(""__DYNAMIC_OPERATION__""));
/*     */ 
/*     */     
/* 184 */     Options clientOptions = new Options();
/* 185 */     clientOptions.setUseSeparateListener(separateListener);
/*     */     
/* 187 */     if (wsRMEnabled) {
/*     */       
/* 189 */       if (wsRMPolicyKey != null) {
/* 190 */         clientOptions.setProperty(""sandeshaPolicy"", getPolicy(synapseOutMessageContext, wsRMPolicyKey));
/*     */       }
/*     */ 
/*     */       
/* 194 */       copyRMOptions(originalInMsgCtx, clientOptions);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 201 */     if (wsSecurityEnabled) {
/*     */       
/* 203 */       if (wsSecPolicyKey != null) {
/* 204 */         clientOptions.setProperty(""rampartPolicy"", getPolicy(synapseOutMessageContext, wsSecPolicyKey));
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 209 */       if (axisOutMsgCtx.getEnvelope().getHeader() == null) {
/* 210 */         SOAPFactory fac = axisOutMsgCtx.isSOAP11() ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */         
/* 212 */         fac.createSOAPHeader(axisOutMsgCtx.getEnvelope());
/*     */       } 
/*     */     } 
/* 215 */     OperationClient mepClient = axisAnonymousOperation.createClient(serviceCtx, clientOptions);
/*     */     
/* 217 */     mepClient.addMessageContext(axisOutMsgCtx);
/* 218 */     axisOutMsgCtx.setAxisMessage(axisAnonymousOperation.getMessage(""Out""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 224 */     AsyncCallback callback = new AsyncCallback(synapseOutMessageContext);
/* 225 */     if (endpoint != null) {
/*     */ 
/*     */       
/* 228 */       callback.setTimeOutOn(System.currentTimeMillis() + endpoint.getTimeoutDuration());
/* 229 */       callback.setTimeOutAction(endpoint.getTimeoutAction());
/*     */     } 
/* 231 */     mepClient.setCallback(callback);
/*     */     
/* 233 */     mepClient.execute(false);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 238 */     originalInMsgCtx.getOperationContext().setProperty(""CONTENT_WRITTEN"", ""SKIP"");
/*     */   }
/*     */ 
/*     */   
/*     */   private static MessageContext cloneForSend(MessageContext ori) throws AxisFault {
/* 243 */     MessageContext newMC = new MessageContext();
/*     */ 
/*     */     
/* 246 */     newMC.setConfigurationContext(ori.getConfigurationContext());
/* 247 */     newMC.setMessageID(UUIDGenerator.getUUID());
/* 248 */     newMC.setTo(ori.getTo());
/* 249 */     newMC.setSoapAction(ori.getSoapAction());
/*     */     
/* 251 */     newMC.setProperty(""CHARACTER_SET_ENCODING"", ori.getProperty(""CHARACTER_SET_ENCODING""));
/*     */     
/* 253 */     newMC.setProperty(""enableMTOM"", ori.getProperty(""enableMTOM""));
/*     */     
/* 255 */     newMC.setProperty(""enableSwA"", ori.getProperty(""enableSwA""));
/*     */ 
/*     */     
/* 258 */     newMC.setDoingREST(ori.isDoingREST());
/* 259 */     newMC.setDoingMTOM(ori.isDoingMTOM());
/* 260 */     newMC.setDoingSwA(ori.isDoingSwA());
/*     */ 
/*     */ 
/*     */     
/* 264 */     Attachments attachments = ori.getAttachmentMap();
/* 265 */     if (attachments != null && (attachments.getAllContentIDs()).length > 0) {
/* 266 */       String[] cIDs = attachments.getAllContentIDs();
/* 267 */       String soapPart = attachments.getSOAPPartContentID();
/* 268 */       for (int i = 0; i < cIDs.length; i++) {
/* 269 */         if (!cIDs[i].equals(soapPart)) {
/* 270 */           newMC.addAttachment(cIDs[i], attachments.getDataHandler(cIDs[i]));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 275 */     newMC.setServerSide(false);
/*     */ 
/*     */     
/* 278 */     newMC.setEnvelope(ori.getEnvelope());
/* 279 */     removeAddressingHeaders(newMC);
/*     */ 
/*     */     
/* 282 */     newMC.setProperty(""TRANSPORT_HEADERS"", ori.getProperty(""TRANSPORT_HEADERS""));
/*     */ 
/*     */     
/* 285 */     return newMC;
/*     */   }
/*     */   
/*     */   private static void copyRMOptions(MessageContext oriContext, Options targetOptions) {
/* 289 */     Options oriOptions = oriContext.getOptions();
/* 290 */     if (oriOptions.getProperty(""Sandesha2LastMessage"") != null) {
/* 291 */       targetOptions.setProperty(""Sandesha2LastMessage"", oriOptions.getProperty(""Sandesha2LastMessage""));
/*     */     }
/*     */     
/* 294 */     if (oriOptions.getProperty(""Sandesha2RMSpecVersion"") != null) {
/* 295 */       targetOptions.setProperty(""Sandesha2RMSpecVersion"", oriOptions.getProperty(""Sandesha2RMSpecVersion""));
/*     */     }
/*     */     
/* 298 */     if (oriOptions.getProperty(""Sandesha2SequenceKey"") != null) {
/* 299 */       targetOptions.setProperty(""Sandesha2SequenceKey"", oriOptions.getProperty(""Sandesha2SequenceKey""));
/*     */     }
/*     */     
/* 302 */     if (oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID) != null) {
/* 303 */       targetOptions.setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static Policy getPolicy(MessageContext synCtx, String propertyKey) {
/* 315 */     Object property = synCtx.getEntry(propertyKey);
/* 316 */     if (property != null && property instanceof OMElement) {
/* 317 */       return PolicyEngine.getPolicy((OMElement)property);
/*     */     }
/* 319 */     handleException(""Cannot locate Policy from the property : "" + propertyKey);
/*     */     
/* 321 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 325 */     log.error(msg);
/* 326 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SOAPEnvelope removeAddressingHeaders(MessageContext axisMsgCtx) {
/* 337 */     SOAPEnvelope env = axisMsgCtx.getEnvelope();
/* 338 */     SOAPHeader soapHeader = env.getHeader();
/*     */ 
/*     */     
/* 341 */     if (soapHeader != null) {
/* 342 */       ArrayList addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://schemas.xmlsoap.org/ws/2004/08/addressing"");
/*     */ 
/*     */       
/* 345 */       if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 346 */         detachAddressingInformation(addressingHeaders);
/*     */       } else {
/*     */         
/* 349 */         addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://www.w3.org/2005/08/addressing"");
/*     */         
/* 351 */         if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 352 */           detachAddressingInformation(addressingHeaders);
/*     */         }
/*     */       } 
/*     */     } 
/* 356 */     return env;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void detachAddressingInformation(ArrayList headerInformation) {
/* 364 */     Iterator iterator = headerInformation.iterator();
/* 365 */     while (iterator.hasNext()) {
/* 366 */       Object o = iterator.next();
/* 367 */       if (o instanceof SOAPHeaderBlock) {
/* 368 */         SOAPHeaderBlock headerBlock = (SOAPHeaderBlock)o;
/* 369 */         headerBlock.detach(); continue;
/* 370 */       }  if (o instanceof OMElement) {
/*     */         
/* 372 */         OMElement om = (OMElement)o;
/* 373 */         OMNamespace ns = om.getNamespace();
/* 374 */         if (ns != null && (""http://schemas.xmlsoap.org/ws/2004/08/addressing"".equals(ns.getNamespaceURI()) || ""http://www.w3.org/2005/08/addressing"".equals(ns.getNamespaceURI())))
/*     */         {
/*     */           
/* 377 */           om.detach();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\Axis2FlexibleMEPClient.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2MessageContext,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.Stack;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.impl.llom.OMElementImpl;
/*     */ import org.apache.axiom.om.impl.llom.OMTextImpl;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.addressing.RelatesTo;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.GetPropertyFunction;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.jaxen.Function;
/*     */ import org.jaxen.FunctionContext;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.jaxen.XPathFunctionContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2MessageContext
/*     */   implements MessageContext
/*     */ {
/*  52 */   private static final Log log = LogFactory.getLog(Axis2MessageContext.class);
/*     */ 
/*     */   
/*  55 */   private SynapseConfiguration synCfg = null;
/*     */ 
/*     */   
/*  58 */   private SynapseEnvironment synEnv = null;
/*     */ 
/*     */   
/*  61 */   private Map properties = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private Map localEntries = new HashMap();
/*     */ 
/*     */   
/*  70 */   private Stack faultStack = new Stack();
/*     */ 
/*     */   
/*  73 */   private MessageContext axis2MessageContext = null;
/*     */ 
/*     */   
/*     */   private boolean response = false;
/*     */ 
/*     */   
/*     */   private boolean faultResponse = false;
/*     */ 
/*     */   
/*  82 */   private int tracingState = 2;
/*     */ 
/*     */   
/*  85 */   public SynapseConfiguration getConfiguration() { return this.synCfg; }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setConfiguration(SynapseConfiguration synCfg) { this.synCfg = synCfg; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public SynapseEnvironment getEnvironment() { return this.synEnv; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setEnvironment(SynapseEnvironment synEnv) { this.synEnv = synEnv; }
/*     */ 
/*     */   
/*     */   public Mediator getMainSequence() {
/* 101 */     Object o = this.localEntries.get(""main"");
/* 102 */     if (o != null && o instanceof Mediator) {
/* 103 */       return (Mediator)o;
/*     */     }
/* 105 */     Mediator main = getConfiguration().getMainSequence();
/* 106 */     this.localEntries.put(""main"", main);
/* 107 */     return main;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator getFaultSequence() {
/* 112 */     Object o = this.localEntries.get(""fault"");
/* 113 */     if (o != null && o instanceof Mediator) {
/* 114 */       return (Mediator)o;
/*     */     }
/* 116 */     Mediator fault = getConfiguration().getFaultSequence();
/* 117 */     this.localEntries.put(""fault"", fault);
/* 118 */     return fault;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator getSequence(String key) {
/* 123 */     Object o = this.localEntries.get(key);
/* 124 */     if (o != null && o instanceof Mediator) {
/* 125 */       return (Mediator)o;
/*     */     }
/* 127 */     Mediator m = getConfiguration().getSequence(key);
/* 128 */     this.localEntries.put(key, m);
/* 129 */     return m;
/*     */   }
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(String key) {
/* 134 */     Object o = this.localEntries.get(key);
/* 135 */     if (o != null && o instanceof Endpoint) {
/* 136 */       return (Endpoint)o;
/*     */     }
/* 138 */     Endpoint e = getConfiguration().getEndpoint(key);
/* 139 */     this.localEntries.put(key, e);
/* 140 */     return e;
/*     */   }
/*     */ 
/*     */   
/*     */   public Object getEntry(String key) {
/* 145 */     Object o = this.localEntries.get(key);
/* 146 */     if (o != null && o instanceof Entry) {
/* 147 */       return ((Entry)o).getValue();
/*     */     }
/* 149 */     Object e = getConfiguration().getEntry(key);
/* 150 */     if (e != null) {
/* 151 */       this.localEntries.put(key, e);
/* 152 */       return e;
/*     */     } 
/* 154 */     getConfiguration().getEntryDefinition(key);
/* 155 */     return getConfiguration().getEntry(key);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public Object getProperty(String key) { return this.properties.get(key); }
/*     */ 
/*     */   
/*     */   public void setProperty(String key, Object value) {
/* 165 */     this.properties.put(key, value);
/*     */ 
/*     */     
/* 168 */     if (""RESPONSE"".equals(key)) {
/* 169 */       getAxis2MessageContext().getOperationContext().setProperty(""CONTENT_WRITTEN"", ""SKIP"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public Set getPropertyKeySet() { return this.properties.keySet(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Axis2MessageContext(MessageContext axisMsgCtx, SynapseConfiguration synCfg, SynapseEnvironment synEnv) {
/* 187 */     setAxis2MessageContext(axisMsgCtx);
/* 188 */     this.synCfg = synCfg;
/* 189 */     this.synEnv = synEnv;
/* 190 */     pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCfg.getFaultSequence()));
/*     */   }
/*     */ 
/*     */   
/* 194 */   public EndpointReference getFaultTo() { return this.axis2MessageContext.getFaultTo(); }
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setFaultTo(EndpointReference reference) { this.axis2MessageContext.setFaultTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 202 */   public EndpointReference getFrom() { return this.axis2MessageContext.getFrom(); }
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setFrom(EndpointReference reference) { this.axis2MessageContext.setFrom(reference); }
/*     */ 
/*     */ 
/*     */   
/* 210 */   public SOAPEnvelope getEnvelope() { return this.axis2MessageContext.getEnvelope(); }
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setEnvelope(SOAPEnvelope envelope) throws AxisFault { this.axis2MessageContext.setEnvelope(envelope); }
/*     */ 
/*     */ 
/*     */   
/* 218 */   public String getMessageID() { return this.axis2MessageContext.getMessageID(); }
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setMessageID(String string) { this.axis2MessageContext.setMessageID(string); }
/*     */ 
/*     */ 
/*     */   
/* 226 */   public RelatesTo getRelatesTo() { return this.axis2MessageContext.getRelatesTo(); }
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setRelatesTo(RelatesTo[] reference) { this.axis2MessageContext.setRelationships(reference); }
/*     */ 
/*     */ 
/*     */   
/* 234 */   public EndpointReference getReplyTo() { return this.axis2MessageContext.getReplyTo(); }
/*     */ 
/*     */ 
/*     */   
/* 238 */   public void setReplyTo(EndpointReference reference) { this.axis2MessageContext.setReplyTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 242 */   public EndpointReference getTo() { return this.axis2MessageContext.getTo(); }
/*     */ 
/*     */ 
/*     */   
/* 246 */   public void setTo(EndpointReference reference) { this.axis2MessageContext.setTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setWSAAction(String actionURI) { this.axis2MessageContext.setWSAAction(actionURI); }
/*     */ 
/*     */ 
/*     */   
/* 254 */   public String getWSAAction() { return this.axis2MessageContext.getWSAAction(); }
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setWSAMessageID(String messageID) { this.axis2MessageContext.setWSAMessageId(messageID); }
/*     */ 
/*     */ 
/*     */   
/* 262 */   public String getWSAMessageID() { return this.axis2MessageContext.getMessageID(); }
/*     */ 
/*     */ 
/*     */   
/* 266 */   public String getSoapAction() { return this.axis2MessageContext.getSoapAction(); }
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void setSoapAction(String string) { this.axis2MessageContext.setSoapAction(string); }
/*     */ 
/*     */ 
/*     */   
/* 274 */   public boolean isDoingMTOM() { return this.axis2MessageContext.isDoingMTOM(); }
/*     */ 
/*     */ 
/*     */   
/* 278 */   public boolean isDoingSWA() { return this.axis2MessageContext.isDoingSwA(); }
/*     */ 
/*     */ 
/*     */   
/* 282 */   public void setDoingMTOM(boolean b) { this.axis2MessageContext.setDoingMTOM(b); }
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setDoingSWA(boolean b) { this.axis2MessageContext.setDoingSwA(b); }
/*     */ 
/*     */ 
/*     */   
/* 290 */   public boolean isDoingPOX() { return this.axis2MessageContext.isDoingREST(); }
/*     */ 
/*     */ 
/*     */   
/* 294 */   public void setDoingPOX(boolean b) { this.axis2MessageContext.setDoingREST(b); }
/*     */ 
/*     */ 
/*     */   
/* 298 */   public boolean isSOAP11() { return this.axis2MessageContext.isSOAP11(); }
/*     */ 
/*     */   
/*     */   public void setResponse(boolean b) {
/* 302 */     this.response = b;
/* 303 */     this.axis2MessageContext.setProperty(""synapse.isresponse"", Boolean.valueOf(b));
/*     */   }
/*     */   
/*     */   public boolean isResponse() {
/* 307 */     Object o = this.properties.get(""RESPONSE"");
/* 308 */     if (o != null && o instanceof String && ((String)o).equalsIgnoreCase(""true"")) {
/* 309 */       return true;
/*     */     }
/* 311 */     return this.response;
/*     */   }
/*     */ 
/*     */   
/* 315 */   public void setFaultResponse(boolean b) { this.faultResponse = b; }
/*     */ 
/*     */ 
/*     */   
/* 319 */   public boolean isFaultResponse() { return this.faultResponse; }
/*     */ 
/*     */ 
/*     */   
/* 323 */   public int getTracingState() { return this.tracingState; }
/*     */ 
/*     */ 
/*     */   
/* 327 */   public void setTracingState(int tracingState) { this.tracingState = tracingState; }
/*     */ 
/*     */ 
/*     */   
/* 331 */   public Stack getFaultStack() { return this.faultStack; }
/*     */ 
/*     */ 
/*     */   
/* 335 */   public void pushFaultHandler(FaultHandler fault) { this.faultStack.push(fault); }
/*     */ 
/*     */ 
/*     */   
/* 339 */   public MessageContext getAxis2MessageContext() { return this.axis2MessageContext; }
/*     */ 
/*     */   
/*     */   public void setAxis2MessageContext(MessageContext axisMsgCtx) {
/* 343 */     this.axis2MessageContext = axisMsgCtx;
/* 344 */     Boolean resp = (Boolean)axisMsgCtx.getProperty(""synapse.isresponse"");
/* 345 */     if (resp != null) {
/* 346 */       this.response = resp.booleanValue();
/*     */     }
/*     */   }
/*     */   
/* 350 */   public void setPaused(boolean value) { this.axis2MessageContext.setPaused(value); }
/*     */ 
/*     */ 
/*     */   
/* 354 */   public boolean isPaused() { return this.axis2MessageContext.isPaused(); }
/*     */ 
/*     */ 
/*     */   
/* 358 */   public boolean isServerSide() { return this.axis2MessageContext.isServerSide(); }
/*     */ 
/*     */ 
/*     */   
/* 362 */   public void setServerSide(boolean value) { this.axis2MessageContext.setServerSide(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStringValue(AXIOMXPath xpath, MessageContext synCtx) {
/* 374 */     if (xpath != null) {
/*     */       
/*     */       try {
/* 377 */         GetPropertyFunction getPropertyFunc = new GetPropertyFunction();
/* 378 */         getPropertyFunc.setSynCtx(synCtx);
/*     */ 
/*     */         
/* 381 */         XPathFunctionContext xPathFunctionContext = new XPathFunctionContext();
/* 382 */         xPathFunctionContext.registerFunction(""http://ws.apache.org/ns/synapse"", ""get-property"", (Function)getPropertyFunc);
/* 383 */         xPathFunctionContext.registerFunction(null, ""get-property"", (Function)getPropertyFunc);
/* 384 */         xpath.setFunctionContext((FunctionContext)xPathFunctionContext);
/*     */ 
/*     */         
/* 387 */         xpath.addNamespace(""synapse"", ""http://ws.apache.org/ns/synapse"");
/* 388 */         xpath.addNamespace(""syn"", ""http://ws.apache.org/ns/synapse"");
/*     */       }
/* 390 */       catch (JaxenException je) {
/* 391 */         handleException(""Error setting up the Synapse XPath extension function for XPath : "" + xpath, (Exception)je);
/*     */       } 
/*     */       
/*     */       try {
/* 395 */         Object result = xpath.evaluate(synCtx.getEnvelope());
/* 396 */         if (result == null) {
/* 397 */           return null;
/*     */         }
/* 399 */         StringBuffer textValue = new StringBuffer();
/* 400 */         if (result instanceof List) {
/* 401 */           Iterator iter = ((List)result).iterator();
/* 402 */           while (iter.hasNext()) {
/* 403 */             Object o = iter.next();
/* 404 */             if (o == null) {
/* 405 */               return null;
/*     */             }
/* 407 */             if (o instanceof OMTextImpl) {
/* 408 */               textValue.append(((OMTextImpl)o).getText()); continue;
/* 409 */             }  if (o instanceof OMElementImpl) {
/* 410 */               textValue.append(((OMElementImpl)o).getText());
/*     */             }
/*     */           } 
/*     */         } else {
/* 414 */           textValue.append(result.toString());
/*     */         } 
/* 416 */         return textValue.toString();
/*     */       }
/* 418 */       catch (JaxenException je) {
/* 419 */         handleException(""Evaluation of the XPath expression "" + xpath.toString() + "" resulted in an error"", (Exception)je);
/*     */       } 
/*     */     } else {
/*     */       
/* 423 */       handleException(""Invalid (null) XPath expression"");
/*     */     } 
/* 425 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 429 */     log.error(msg, e);
/* 430 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 434 */     log.error(msg);
/* 435 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   public String toString() {
/* 439 */     StringBuffer sb = new StringBuffer();
/* 440 */     String separator = ""\n"";
/*     */     
/* 442 */     if (getTo() != null) {
/* 443 */       sb.append(""To: "" + getTo().getAddress());
/*     */     } else {
/* 445 */       sb.append(""To: "");
/* 446 */     }  if (getFrom() != null)
/* 447 */       sb.append(separator + ""From: "" + getFrom().getAddress()); 
/* 448 */     if (getWSAAction() != null)
/* 449 */       sb.append(separator + ""WSAction: "" + getWSAAction()); 
/* 450 */     if (getSoapAction() != null)
/* 451 */       sb.append(separator + ""SOAPAction: "" + getSoapAction()); 
/* 452 */     if (getReplyTo() != null)
/* 453 */       sb.append(separator + ""ReplyTo: "" + getReplyTo().getAddress()); 
/* 454 */     if (getMessageID() != null) {
/* 455 */       sb.append(separator + ""MessageID: "" + getMessageID());
/*     */     }
/* 457 */     Iterator iter = getEnvelope().getHeader().examineAllHeaderBlocks();
/* 458 */     if (iter.hasNext()) {
/* 459 */       sb.append(separator + ""Headers : "");
/* 460 */       while (iter.hasNext()) {
/* 461 */         Object o = iter.next();
/* 462 */         if (o instanceof SOAPHeaderBlock) {
/* 463 */           SOAPHeaderBlock header = (SOAPHeaderBlock)o;
/* 464 */           sb.append(separator + header.getLocalName() + "" : "" + header.getText()); continue;
/* 465 */         }  if (o instanceof OMElement) {
/* 466 */           OMElement headerElem = (OMElement)o;
/* 467 */           sb.append(separator + headerElem.getLocalName() + "" : "" + headerElem.getText());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 472 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\Axis2MessageContext.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2Sender,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.engine.AxisEngine;
/*     */ import org.apache.axis2.util.Utils;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2Sender
/*     */ {
/*  43 */   private static final Log log = LogFactory.getLog(Axis2Sender.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void sendOn(EndpointDefinition endpoint, MessageContext synapseInMessageContext) {
/*     */     try {
/*  50 */       Axis2FlexibleMEPClient.send(endpoint, synapseInMessageContext);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  57 */     catch (Exception e) {
/*  58 */       handleException(""Unexpected error during Sending message onwards"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void sendBack(MessageContext smc) {
/*  64 */     MessageContext messageContext = ((Axis2MessageContext)smc).getAxis2MessageContext();
/*     */ 
/*     */ 
/*     */     
/*  68 */     if (Utils.isExplicitlyTrue(messageContext, ""SC_ACCEPTED"") && messageContext.getTransportOut() != null && !messageContext.getTransportOut().getName().startsWith(""http"")) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  74 */     AxisEngine ae = new AxisEngine(messageContext.getConfigurationContext());
/*     */     
/*     */     try {
/*  77 */       messageContext.setProperty(""synapse.isresponse"", Boolean.TRUE);
/*     */ 
/*     */       
/*  80 */       if (smc.isResponse()) {
/*     */         
/*  82 */         StatisticsUtils.processEndPointStatistics(smc);
/*  83 */         StatisticsUtils.processProxyServiceStatistics(smc);
/*  84 */         StatisticsUtils.processAllSequenceStatistics(smc);
/*     */       } 
/*  86 */       Axis2FlexibleMEPClient.removeAddressingHeaders(messageContext);
/*  87 */       messageContext.setMessageID(UUIDGenerator.getUUID());
/*     */ 
/*     */       
/*  90 */       if (messageContext.isEngaged(""rampart"") && messageContext.getEnvelope().getHeader() == null) {
/*     */         
/*  92 */         SOAPFactory fac = messageContext.isSOAP11() ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */         
/*  94 */         fac.createSOAPHeader(messageContext.getEnvelope());
/*     */       } 
/*  96 */       ae.send(messageContext);
/*     */     }
/*  98 */     catch (AxisFault e) {
/*  99 */       handleException(""Unexpected error during Sending message back"", (Exception)e);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 104 */     log.error(msg, e);
/* 105 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\Axis2Sender.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2SynapseEnvironment,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2SynapseEnvironment
/*     */   implements SynapseEnvironment
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(Axis2SynapseEnvironment.class);
/*     */ 
/*     */   
/*     */   private SynapseConfiguration synapseConfig;
/*     */ 
/*     */   
/*     */   private StatisticsCollector statisticsCollector;
/*     */ 
/*     */ 
/*     */   
/*     */   public Axis2SynapseEnvironment() {}
/*     */ 
/*     */   
/*  54 */   public Axis2SynapseEnvironment(ConfigurationContext cfgCtx, SynapseConfiguration synapseConfig) { this.synapseConfig = synapseConfig; }
/*     */ 
/*     */   
/*     */   public void injectMessage(MessageContext synCtx) {
/*  58 */     synCtx.setEnvironment(this);
/*  59 */     if (synCtx.isResponse()) {
/*     */       
/*  61 */       StatisticsUtils.processEndPointStatistics(synCtx);
/*  62 */       StatisticsUtils.processProxyServiceStatistics(synCtx);
/*  63 */       StatisticsUtils.processSequenceStatistics(synCtx);
/*     */     } 
/*     */ 
/*     */     
/*  67 */     if (synCtx.getProperty(""proxy.name"") != null) {
/*     */       
/*  69 */       if (synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetOutSequence() != null) {
/*     */ 
/*     */         
/*  72 */         String sequenceName = synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetOutSequence();
/*     */         
/*  74 */         Mediator outSequence = synCtx.getSequence(sequenceName);
/*     */         
/*  76 */         if (outSequence != null) {
/*  77 */           log.debug(""Using the sequence named "" + sequenceName + "" for the outgoing message mediation of the proxy service "" + synCtx.getProperty(""proxy.name""));
/*     */ 
/*     */           
/*  80 */           outSequence.mediate(synCtx);
/*     */         } else {
/*  82 */           log.error(""Unable to find the out-sequence specified by the name "" + sequenceName);
/*     */           
/*  84 */           throw new SynapseException(""Unable to find the out-sequence specified by the name "" + sequenceName);
/*     */         }
/*     */       
/*     */       }
/*  88 */       else if (synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetInLineOutSequence() != null) {
/*     */ 
/*     */         
/*  91 */         log.debug(""Using the anonymous out-sequence specified in the proxy service "" + synCtx.getProperty(""proxy.name"") + "" for outgoing message mediation"");
/*     */ 
/*     */         
/*  94 */         synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetInLineOutSequence().mediate(synCtx);
/*     */       }
/*     */       else {
/*     */         
/*  98 */         log.debug(""Proxy service "" + synCtx.getProperty(""proxy.name"") + "" does not specifies an out-sequence - sending the response back"");
/*     */         
/* 100 */         Axis2Sender.sendBack(synCtx);
/*     */       } 
/*     */     } else {
/*     */       
/* 104 */       synCtx.getMainSequence().mediate(synCtx);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void send(EndpointDefinition endpoint, MessageContext synCtx) {
/* 109 */     if (synCtx.isResponse()) {
/* 110 */       Axis2Sender.sendBack(synCtx);
/*     */     } else {
/* 112 */       Axis2Sender.sendOn(endpoint, synCtx);
/*     */     } 
/*     */   }
/*     */   public MessageContext createMessageContext() {
/* 116 */     MessageContext axis2MC = new MessageContext();
/*     */     
/* 118 */     MessageContext mc = new Axis2MessageContext(axis2MC, this.synapseConfig, this);
/* 119 */     return mc;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public StatisticsCollector getStatisticsCollector() { return this.statisticsCollector; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setStatisticsCollector(StatisticsCollector collector) { this.statisticsCollector = collector; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\Axis2SynapseEnvironment.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.DynamicAxisOperation,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.client.OperationClient;
/*     */ import org.apache.axis2.client.Options;
/*     */ import org.apache.axis2.client.async.Callback;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.context.ServiceContext;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.ClientUtils;
/*     */ import org.apache.axis2.description.OutInAxisOperation;
/*     */ import org.apache.axis2.description.TransportOutDescription;
/*     */ import org.apache.axis2.engine.AxisEngine;
/*     */ import org.apache.axis2.i18n.Messages;
/*     */ import org.apache.axis2.transport.TransportUtils;
/*     */ import org.apache.axis2.util.TargetResolver;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DynamicAxisOperation
/*     */   extends OutInAxisOperation
/*     */ {
/*     */   public DynamicAxisOperation() {}
/*     */   
/*  52 */   public DynamicAxisOperation(QName name) { super(name); }
/*     */ 
/*     */ 
/*     */   
/*  56 */   public OperationClient createClient(ServiceContext sc, Options options) { return new DynamicOperationClient(this, sc, options); }
/*     */   
/*     */   class DynamicOperationClient
/*     */     extends OperationClient {
/*     */     private final DynamicAxisOperation this$0;
/*     */     
/*  62 */     DynamicOperationClient(OutInAxisOperation axisOp, ServiceContext sc, Options options) { super((AxisOperation)axisOp, sc, options); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void addMessageContext(MessageContext mc) throws AxisFault {
/*  69 */       mc.setServiceContext(this.sc);
/*  70 */       if (mc.getMessageID() == null) {
/*  71 */         setMessageID(mc);
/*     */       }
/*  73 */       this.axisOp.registerOperationContext(mc, this.oc);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  80 */     public MessageContext getMessageContext(String messageLabel) throws AxisFault { return this.oc.getMessageContext(messageLabel); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  87 */     public void setCallback(Callback callback) { this.callback = callback; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void execute(boolean block) throws AxisFault {
/*  93 */       if (this.completed) {
/*  94 */         throw new AxisFault(Messages.getMessage(""mepiscomplted""));
/*     */       }
/*     */ 
/*     */       
/*  98 */       MessageContext outMsgCtx = this.oc.getMessageContext(""Out"");
/*  99 */       if (outMsgCtx == null) {
/* 100 */         throw new AxisFault(Messages.getMessage(""outmsgctxnull""));
/*     */       }
/*     */       
/* 103 */       ConfigurationContext cfgCtx = this.sc.getConfigurationContext();
/*     */ 
/*     */       
/* 106 */       outMsgCtx.setOptions(this.options);
/*     */ 
/*     */       
/* 109 */       TargetResolver tr = cfgCtx.getAxisConfiguration().getTargetResolverChain();
/* 110 */       if (tr != null) {
/* 111 */         tr.resolveTarget(outMsgCtx);
/*     */       }
/*     */ 
/*     */       
/* 115 */       TransportOutDescription transportOut = this.options.getTransportOut();
/* 116 */       if (transportOut == null) {
/* 117 */         EndpointReference toEPR = (this.options.getTo() != null) ? this.options.getTo() : outMsgCtx.getTo();
/*     */         
/* 119 */         transportOut = ClientUtils.inferOutTransport(cfgCtx.getAxisConfiguration(), toEPR, outMsgCtx);
/*     */       } 
/*     */       
/* 122 */       outMsgCtx.setTransportOut(transportOut);
/*     */       
/* 124 */       if (this.options.getTransportIn() == null && outMsgCtx.getTransportIn() == null) {
/* 125 */         outMsgCtx.setTransportIn(ClientUtils.inferInTransport(cfgCtx.getAxisConfiguration(), this.options, outMsgCtx));
/*     */       }
/* 127 */       else if (outMsgCtx.getTransportIn() == null) {
/* 128 */         outMsgCtx.setTransportIn(this.options.getTransportIn());
/*     */       } 
/*     */ 
/*     */       
/* 132 */       addReferenceParameters(outMsgCtx);
/*     */       
/* 134 */       if (!this.options.isUseSeparateListener()) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 174 */         SynapseCallbackReceiver callbackReceiver = (SynapseCallbackReceiver)this.axisOp.getMessageReceiver();
/*     */         
/* 176 */         callbackReceiver.addCallback(outMsgCtx.getMessageID(), this.callback);
/* 177 */         send(outMsgCtx);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void send(MessageContext msgctx) throws AxisFault {
/* 186 */       MessageContext responseMessageContext = new MessageContext();
/* 187 */       responseMessageContext.setMessageID(msgctx.getMessageID());
/* 188 */       responseMessageContext.setProperty(""RelatesToForPox"", msgctx.getMessageID());
/* 189 */       responseMessageContext.setOptions(this.options);
/* 190 */       addMessageContext(responseMessageContext);
/*     */       
/* 192 */       AxisEngine engine = new AxisEngine(msgctx.getConfigurationContext());
/* 193 */       engine.send(msgctx);
/*     */ 
/*     */ 
/*     */       
/* 197 */       if (msgctx.getProperty(""TRANSPORT_IN"") != null) {
/*     */         
/* 199 */         responseMessageContext.setOperationContext(msgctx.getOperationContext());
/* 200 */         responseMessageContext.setAxisMessage(msgctx.getOperationContext().getAxisOperation().getMessage(""In""));
/*     */ 
/*     */         
/* 203 */         responseMessageContext.setAxisService(msgctx.getAxisService());
/*     */ 
/*     */         
/* 206 */         responseMessageContext.setServerSide(true);
/* 207 */         responseMessageContext.setProperty(""TRANSPORT_OUT"", msgctx.getProperty(""TRANSPORT_OUT""));
/*     */         
/* 209 */         responseMessageContext.setProperty(""OutTransportInfo"", msgctx.getProperty(""OutTransportInfo""));
/*     */ 
/*     */         
/* 212 */         responseMessageContext.setProperty(""synapse.isresponse"", Boolean.TRUE);
/*     */         
/* 214 */         responseMessageContext.setTransportIn(msgctx.getTransportIn());
/* 215 */         responseMessageContext.setTransportOut(msgctx.getTransportOut());
/*     */ 
/*     */         
/* 218 */         responseMessageContext.setDoingREST(msgctx.isDoingREST());
/*     */         
/* 220 */         responseMessageContext.setProperty(""TRANSPORT_IN"", msgctx.getProperty(""TRANSPORT_IN""));
/*     */         
/* 222 */         responseMessageContext.setTransportIn(msgctx.getTransportIn());
/* 223 */         responseMessageContext.setTransportOut(msgctx.getTransportOut());
/*     */ 
/*     */ 
/*     */         
/* 227 */         responseMessageContext.setSoapAction("""");
/*     */         
/* 229 */         if (responseMessageContext.getEnvelope() == null) {
/*     */ 
/*     */ 
/*     */           
/* 233 */           SOAPEnvelope resenvelope = TransportUtils.createSOAPMessage(responseMessageContext);
/*     */ 
/*     */           
/* 236 */           if (resenvelope != null) {
/* 237 */             responseMessageContext.setEnvelope(resenvelope);
/* 238 */             engine = new AxisEngine(msgctx.getConfigurationContext());
/* 239 */             engine.receive(responseMessageContext);
/* 240 */             if (responseMessageContext.getReplyTo() != null) {
/* 241 */               this.sc.setTargetEPR(responseMessageContext.getReplyTo());
/*     */             }
/*     */           } else {
/* 244 */             throw new AxisFault(Messages.getMessage(""blockingInvocationExpectsResponse""));
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\DynamicAxisOperation.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.MessageContextCreatorForAxis2,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Constants;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.SynapseConfiguration;
/*    */ import org.apache.synapse.core.SynapseEnvironment;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MessageContextCreatorForAxis2
/*    */   implements Constants
/*    */ {
/* 39 */   private static Log log = LogFactory.getLog(MessageContextCreatorForAxis2.class);
/*    */   
/* 41 */   private static SynapseConfiguration synCfg = null;
/* 42 */   private static SynapseEnvironment synEnv = null;
/*    */ 
/*    */ 
/*    */   
/*    */   public static MessageContext getSynapseMessageContext(MessageContext axisMsgCtx) throws AxisFault {
/* 47 */     if (synCfg == null || synEnv == null) {
/* 48 */       String msg = ""Synapse environment has not initialized properly.."";
/* 49 */       log.fatal(msg);
/* 50 */       throw new SynapseException(msg);
/*    */     } 
/*    */     
/* 53 */     return new Axis2MessageContext(axisMsgCtx, synCfg, synEnv);
/*    */   }
/*    */ 
/*    */   
/* 57 */   public static void setSynConfig(SynapseConfiguration synCfg) { MessageContextCreatorForAxis2.synCfg = synCfg; }
/*    */ 
/*    */ 
/*    */   
/* 61 */   public static void setSynEnv(SynapseEnvironment synEnv) { MessageContextCreatorForAxis2.synEnv = synEnv; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\MessageContextCreatorForAxis2.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.ProxyService,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.description.AxisBindingOperation;
/*     */ import org.apache.axis2.description.AxisEndpoint;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.InOutAxisOperation;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.description.PolicyInclude;
/*     */ import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;
/*     */ import org.apache.axis2.description.WSDL20ToAxisServiceBuilder;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.neethi.PolicyEngine;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.Util;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyService
/*     */ {
/*  78 */   private static final Log log = LogFactory.getLog(ProxyService.class);
/*  79 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String name;
/*     */ 
/*     */ 
/*     */   
/*     */   private String description;
/*     */ 
/*     */ 
/*     */   
/*     */   private ArrayList transports;
/*     */ 
/*     */ 
/*     */   
/*  96 */   private String targetEndpoint = null;
/*     */ 
/*     */ 
/*     */   
/* 100 */   private String targetInSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 104 */   private String targetOutSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 108 */   private String targetFaultSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 112 */   private Endpoint targetInLineEndpoint = null;
/*     */ 
/*     */ 
/*     */   
/* 116 */   private SequenceMediator targetInLineInSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 120 */   private SequenceMediator targetInLineOutSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 124 */   private SequenceMediator targetInLineFaultSequence = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   private Map parameters = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String wsdlKey;
/*     */ 
/*     */ 
/*     */   
/*     */   private URI wsdlURI;
/*     */ 
/*     */ 
/*     */   
/*     */   private Object inLineWSDL;
/*     */ 
/*     */ 
/*     */   
/* 147 */   private List schemaKeys = new ArrayList();
/*     */ 
/*     */ 
/*     */   
/* 151 */   private List serviceLevelPolicies = new ArrayList();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean wsRMEnabled = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean wsSecEnabled = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean startOnLoad = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean running = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String ALL_TRANSPORTS = ""all"";
/*     */ 
/*     */   
/* 174 */   private int statisticsEnable = 2;
/*     */ 
/*     */ 
/*     */   
/* 178 */   protected int traceState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AxisService buildAxisService(SynapseConfiguration synCfg, AxisConfiguration axisCfg) {
/* 185 */     AxisService proxyService = null;
/* 186 */     InputStream wsdlInputStream = null;
/* 187 */     OMElement wsdlElement = null;
/* 188 */     if (this.wsdlKey != null) {
/* 189 */       synCfg.getEntryDefinition(this.wsdlKey);
/* 190 */       Object keyObject = synCfg.getEntry(this.wsdlKey);
/* 191 */       if (keyObject instanceof OMElement) {
/* 192 */         wsdlElement = (OMElement)keyObject;
/*     */       }
/* 194 */     } else if (this.inLineWSDL != null) {
/* 195 */       wsdlElement = (OMElement)this.inLineWSDL;
/* 196 */     } else if (this.wsdlURI != null) {
/*     */       try {
/* 198 */         URL url = this.wsdlURI.toURL();
/* 199 */         wsdlElement = Util.getOMElementFromURL(url.toString());
/* 200 */       } catch (MalformedURLException e) {
/* 201 */         handleException(""Malformed URI for wsdl"", e);
/* 202 */       } catch (IOException e) {
/* 203 */         handleException(""Error reading from wsdl URI"", e);
/*     */       } 
/*     */     } 
/* 206 */     if (wsdlElement != null) {
/* 207 */       OMNamespace wsdlNamespace = wsdlElement.getNamespace();
/* 208 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/* 210 */         wsdlElement.serialize(baos);
/* 211 */         wsdlInputStream = new ByteArrayInputStream(baos.toByteArray());
/* 212 */       } catch (XMLStreamException e) {
/* 213 */         handleException(""Error converting to a StreamSource"", e);
/*     */       } 
/* 215 */       if (wsdlInputStream != null) {
/*     */         
/*     */         try {
/* 218 */           if (wsdlNamespace != null) {
/* 219 */             boolean isWSDL11 = false;
/* 220 */             Object object = null;
/* 221 */             if (""http://www.w3.org/ns/wsdl"".equals(wsdlNamespace.getNamespaceURI())) {
/*     */               
/* 223 */               WSDL20ToAxisServiceBuilder wSDL20ToAxisServiceBuilder = new WSDL20ToAxisServiceBuilder(wsdlInputStream, null, null);
/*     */               
/* 225 */               wSDL20ToAxisServiceBuilder.setBaseUri((this.wsdlURI != null) ? this.wsdlURI.toString() : """");
/*     */             }
/* 227 */             else if (""http://schemas.xmlsoap.org/wsdl/"".equals(wsdlNamespace.getNamespaceURI())) {
/*     */               
/* 229 */               object = new WSDL11ToAxisServiceBuilder(wsdlInputStream, null, null);
/*     */               
/* 231 */               isWSDL11 = true;
/*     */             } else {
/* 233 */               handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
/*     */             } 
/*     */             
/* 236 */             if (object == null) {
/* 237 */               throw new SynapseException(""Could not get the WSDL to Axis Service Builder"");
/*     */             }
/*     */             
/* 240 */             proxyService = object.populateService();
/* 241 */             proxyService.setWsdlFound(true);
/*     */             
/* 243 */             if (isWSDL11) {
/*     */ 
/*     */               
/* 246 */               Collection endpoints = proxyService.getEndpoints().values();
/* 247 */               Iterator iter = endpoints.iterator();
/* 248 */               while (iter.hasNext()) {
/* 249 */                 AxisEndpoint endpoint = iter.next();
/* 250 */                 Iterator children = endpoint.getBinding().getChildren();
/* 251 */                 while (children.hasNext()) {
/* 252 */                   AxisBindingOperation axisBindingOperation = children.next();
/*     */                   
/* 254 */                   axisBindingOperation.setProperty(""whttp:ignoreUncited"", new Boolean(false));
/*     */                 }
/*     */               
/*     */               } 
/*     */             } 
/*     */           } else {
/*     */             
/* 261 */             handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
/*     */           }
/*     */         
/* 264 */         } catch (AxisFault af) {
/* 265 */           handleException(""Error building service from WSDL"", (Exception)af);
/* 266 */         } catch (IOException ioe) {
/* 267 */           handleException(""Error reading WSDL"", ioe);
/*     */         }
/*     */       
/*     */       }
/*     */     } else {
/*     */       
/* 273 */       proxyService = new AxisService();
/* 274 */       InOutAxisOperation inOutAxisOperation = new InOutAxisOperation(new QName(""mediate""));
/*     */       
/* 276 */       proxyService.addOperation((AxisOperation)inOutAxisOperation);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 281 */     if (proxyService == null) {
/* 282 */       throw new SynapseException(""Could not create a proxy service"");
/*     */     }
/* 284 */     proxyService.setName(this.name);
/* 285 */     if (this.description != null) {
/* 286 */       proxyService.setServiceDescription(this.description);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 292 */     if (this.transports != null && this.transports.size() != 0)
/*     */     {
/*     */       
/* 295 */       proxyService.setExposedTransports(this.transports);
/*     */     }
/*     */ 
/*     */     
/* 299 */     Iterator iter = this.parameters.keySet().iterator();
/* 300 */     while (iter.hasNext()) {
/* 301 */       String name = iter.next();
/* 302 */       Object value = this.parameters.get(name);
/*     */       
/* 304 */       Parameter p = new Parameter();
/* 305 */       p.setName(name);
/* 306 */       p.setValue(value);
/*     */       
/*     */       try {
/* 309 */         proxyService.addParameter(p);
/* 310 */       } catch (AxisFault af) {
/* 311 */         handleException(""Error setting parameter : "" + name + """" + ""to proxy service as a Parameter"", (Exception)af);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 317 */     if (!this.serviceLevelPolicies.isEmpty()) {
/* 318 */       Policy svcEffectivePolicy = null;
/* 319 */       iter = this.serviceLevelPolicies.iterator();
/* 320 */       while (iter.hasNext()) {
/* 321 */         String policyKey = iter.next();
/* 322 */         synCfg.getEntryDefinition(policyKey);
/* 323 */         Object policyProp = synCfg.getEntry(policyKey);
/* 324 */         if (policyProp != null) {
/* 325 */           if (svcEffectivePolicy == null) {
/*     */             
/* 327 */             svcEffectivePolicy = PolicyEngine.getPolicy(Util.getStreamSource(policyProp).getInputStream());
/*     */             continue;
/*     */           } 
/* 330 */           svcEffectivePolicy = svcEffectivePolicy.merge(PolicyEngine.getPolicy(Util.getStreamSource(policyProp).getInputStream()));
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 336 */       PolicyInclude pi = proxyService.getPolicyInclude();
/* 337 */       if (pi != null && svcEffectivePolicy != null) {
/* 338 */         pi.addPolicyElement(3, svcEffectivePolicy);
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 344 */     ProxyServiceMessageReceiver msgRcvr = new ProxyServiceMessageReceiver();
/* 345 */     msgRcvr.setName(this.name);
/*     */     
/* 347 */     iter = proxyService.getOperations();
/* 348 */     while (iter.hasNext()) {
/* 349 */       AxisOperation op = (AxisOperation)iter.next();
/* 350 */       op.setMessageReceiver(msgRcvr);
/*     */     } 
/*     */     
/*     */     try {
/* 354 */       axisCfg.addService(proxyService);
/* 355 */       setRunning(true);
/* 356 */     } catch (AxisFault axisFault) {
/*     */       try {
/* 358 */         if (axisCfg.getService(proxyService.getName()) != null) {
/* 359 */           axisCfg.removeService(proxyService.getName());
/*     */         }
/* 361 */       } catch (AxisFault ignore) {}
/* 362 */       handleException(""Error adding Proxy service to the Axis2 engine"", (Exception)axisFault);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 367 */     if (this.wsRMEnabled) {
/*     */       try {
/* 369 */         proxyService.engageModule(axisCfg.getModule(""sandesha2""), axisCfg);
/*     */       }
/* 371 */       catch (AxisFault axisFault) {
/* 372 */         handleException(""Error loading WS RM module on proxy service : "" + this.name, (Exception)axisFault);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 377 */     if (this.wsSecEnabled) {
/*     */       try {
/* 379 */         proxyService.engageModule(axisCfg.getModule(""rampart""), axisCfg);
/*     */       }
/* 381 */       catch (AxisFault axisFault) {
/* 382 */         handleException(""Error loading WS Sec module on proxy service : "" + this.name, (Exception)axisFault);
/*     */       } 
/*     */     }
/*     */     
/* 386 */     return proxyService;
/*     */   }
/*     */   
/*     */   public void start(SynapseConfiguration synCfg) {
/* 390 */     AxisConfiguration axisConfig = synCfg.getAxisConfiguration();
/* 391 */     axisConfig.getServiceForActivation(getName()).setActive(true);
/* 392 */     setRunning(true);
/*     */   }
/*     */   
/*     */   public void stop(SynapseConfiguration synCfg) {
/* 396 */     AxisConfiguration axisConfig = synCfg.getAxisConfiguration().getAxisConfiguration();
/*     */     try {
/* 398 */       axisConfig.getService(getName()).setActive(false);
/* 399 */       setRunning(false);
/* 400 */     } catch (AxisFault axisFault) {
/* 401 */       handleException(axisFault.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 406 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 410 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 414 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/* 418 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */   
/* 422 */   public ArrayList getTransports() { return this.transports; }
/*     */ 
/*     */ 
/*     */   
/* 426 */   public void addParameter(String name, Object value) { this.parameters.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 430 */   public Map getParameterMap() { return this.parameters; }
/*     */ 
/*     */ 
/*     */   
/* 434 */   public void setTransports(ArrayList transports) { this.transports = transports; }
/*     */ 
/*     */ 
/*     */   
/* 438 */   public String getTargetEndpoint() { return this.targetEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 442 */   public void setTargetEndpoint(String targetEndpoint) { this.targetEndpoint = targetEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 446 */   public String getTargetInSequence() { return this.targetInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 450 */   public void setTargetInSequence(String targetInSequence) { this.targetInSequence = targetInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 454 */   public String getTargetOutSequence() { return this.targetOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 458 */   public void setTargetOutSequence(String targetOutSequence) { this.targetOutSequence = targetOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 462 */   public String getWSDLKey() { return this.wsdlKey; }
/*     */ 
/*     */ 
/*     */   
/* 466 */   public void setWSDLKey(String wsdlKey) { this.wsdlKey = wsdlKey; }
/*     */ 
/*     */ 
/*     */   
/* 470 */   public List getSchemas() { return this.schemaKeys; }
/*     */ 
/*     */ 
/*     */   
/* 474 */   public void setSchemas(List schemas) { this.schemaKeys = schemas; }
/*     */ 
/*     */ 
/*     */   
/* 478 */   public List getServiceLevelPolicies() { return this.serviceLevelPolicies; }
/*     */ 
/*     */ 
/*     */   
/* 482 */   public void addServiceLevelPolicy(String serviceLevelPolicy) { this.serviceLevelPolicies.add(serviceLevelPolicy); }
/*     */ 
/*     */ 
/*     */   
/* 486 */   public boolean isWsRMEnabled() { return this.wsRMEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 490 */   public void setWsRMEnabled(boolean wsRMEnabled) { this.wsRMEnabled = wsRMEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 494 */   public boolean isWsSecEnabled() { return this.wsSecEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 498 */   public void setWsSecEnabled(boolean wsSecEnabled) { this.wsSecEnabled = wsSecEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 502 */   public boolean isStartOnLoad() { return this.startOnLoad; }
/*     */ 
/*     */ 
/*     */   
/* 506 */   public void setStartOnLoad(boolean startOnLoad) { this.startOnLoad = startOnLoad; }
/*     */ 
/*     */ 
/*     */   
/* 510 */   public boolean isRunning() { return this.running; }
/*     */ 
/*     */ 
/*     */   
/* 514 */   public void setRunning(boolean running) { this.running = running; }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/* 518 */     log.error(msg);
/* 519 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 523 */     log.error(msg, e);
/* 524 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 533 */   public int getStatisticsEnable() { return this.statisticsEnable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 542 */   public void setStatisticsEnable(int statisticsEnable) { this.statisticsEnable = statisticsEnable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 551 */   public int getTraceState() { return this.traceState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 560 */   public void setTraceState(int traceState) { this.traceState = traceState; }
/*     */ 
/*     */ 
/*     */   
/* 564 */   public String getTargetFaultSequence() { return this.targetFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 568 */   public void setTargetFaultSequence(String targetFaultSequence) { this.targetFaultSequence = targetFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 572 */   public Object getInLineWSDL() { return this.inLineWSDL; }
/*     */ 
/*     */ 
/*     */   
/* 576 */   public void setInLineWSDL(Object inLineWSDL) { this.inLineWSDL = inLineWSDL; }
/*     */ 
/*     */ 
/*     */   
/* 580 */   public URI getWsdlURI() { return this.wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 584 */   public void setWsdlURI(URI wsdlURI) { this.wsdlURI = wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 588 */   public Endpoint getTargetInLineEndpoint() { return this.targetInLineEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 592 */   public void setTargetInLineEndpoint(Endpoint targetInLineEndpoint) { this.targetInLineEndpoint = targetInLineEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 596 */   public SequenceMediator getTargetInLineInSequence() { return this.targetInLineInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 600 */   public void setTargetInLineInSequence(SequenceMediator targetInLineInSequence) { this.targetInLineInSequence = targetInLineInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 604 */   public SequenceMediator getTargetInLineOutSequence() { return this.targetInLineOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 608 */   public void setTargetInLineOutSequence(SequenceMediator targetInLineOutSequence) { this.targetInLineOutSequence = targetInLineOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 612 */   public SequenceMediator getTargetInLineFaultSequence() { return this.targetInLineFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 616 */   public void setTargetInLineFaultSequence(SequenceMediator targetInLineFaultSequence) { this.targetInLineFaultSequence = targetInLineFaultSequence; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\ProxyService.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.ProxyServiceMessageReceiver,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceMessageReceiver
/*     */   extends SynapseMessageReceiver
/*     */ {
/*  35 */   private static final Log log = LogFactory.getLog(ProxyServiceMessageReceiver.class);
/*  36 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  41 */   private String name = null;
/*     */ 
/*     */   
/*     */   public void receive(MessageContext mc) throws AxisFault {
/*  45 */     if (log.isDebugEnabled()) {
/*  46 */       log.debug(""Proxy Service "" + this.name + "" received a new message..."");
/*  47 */       log.debug(""Message To: "" + ((mc.getTo() != null) ? mc.getTo().getAddress() : ""null""));
/*  48 */       log.debug(""SOAPAction: "" + ((mc.getSoapAction() != null) ? mc.getSoapAction() : ""null""));
/*  49 */       log.debug(""WSA-Action: "" + ((mc.getWSAAction() != null) ? mc.getWSAAction() : ""null""));
/*  50 */       String[] cids = mc.getAttachmentMap().getAllContentIDs();
/*  51 */       if (cids != null && cids.length > 0) {
/*  52 */         for (int i = 0; i < cids.length; i++) {
/*  53 */           log.debug(""Attachment : "" + cids[i]);
/*     */         }
/*     */       }
/*  56 */       log.debug(""Body : \n"" + mc.getEnvelope());
/*     */     } 
/*     */     
/*  59 */     MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);
/*     */     
/*     */     try {
/*  62 */       synCtx.setProperty(""proxy.name"", this.name);
/*  63 */       ProxyService proxy = synCtx.getConfiguration().getProxyService(this.name);
/*     */ 
/*     */ 
/*     */       
/*  67 */       if (proxy != null) {
/*  68 */         boolean statisticsEnable = (1 == proxy.getStatisticsEnable());
/*     */         
/*  70 */         if (statisticsEnable) {
/*  71 */           ProxyServiceStatisticsStack proxyServiceStatisticsStack = new ProxyServiceStatisticsStack();
/*     */           
/*  73 */           boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  74 */           proxyServiceStatisticsStack.put(this.name, System.currentTimeMillis(), !synCtx.isResponse(), statisticsEnable, isFault);
/*     */           
/*  76 */           synCtx.setProperty(""proxyservice_statistics_stack"", proxyServiceStatisticsStack);
/*     */         } 
/*     */         
/*  79 */         boolean shouldTrace = (proxy.getTraceState() == 1);
/*  80 */         if (shouldTrace) {
/*  81 */           trace.trace(""Proxy Service "" + this.name + "" received a new message..."");
/*  82 */           trace.trace(""Received Message :: "" + mc.getEnvelope());
/*     */         } 
/*  84 */         if (proxy.getTargetFaultSequence() != null) {
/*     */           
/*  86 */           Mediator faultSequence = synCtx.getSequence(proxy.getTargetFaultSequence());
/*  87 */           if (faultSequence != null) {
/*  88 */             log.debug(""Setting the fault-sequence of the proxy service to MessageContext"");
/*     */             
/*  90 */             synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCtx.getSequence(proxy.getTargetFaultSequence())));
/*     */           
/*     */           }
/*     */           else {
/*     */ 
/*     */             
/*  96 */             log.warn(""Unable to find the fault-sequence for the proxy service specified by the name "" + proxy.getTargetFaultSequence());
/*     */           }
/*     */         
/*  99 */         } else if (proxy.getTargetInLineFaultSequence() != null) {
/* 100 */           log.debug(""Setting the anonymous fault-sequence of the proxy to context"");
/* 101 */           synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler((Mediator)proxy.getTargetInLineFaultSequence()));
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 106 */         if (proxy.getTargetInSequence() != null) {
/* 107 */           Mediator inSequence = synCtx.getSequence(proxy.getTargetInSequence());
/* 108 */           if (inSequence != null) {
/* 109 */             String msg = ""Using the sequence named "" + proxy.getTargetInSequence() + "" for message mediation"";
/*     */             
/* 111 */             if (shouldTrace) {
/* 112 */               trace.trace(msg);
/*     */             }
/* 114 */             log.debug(msg);
/* 115 */             inSequence.mediate(synCtx);
/*     */           } else {
/*     */             
/* 118 */             log.error(""Unable to find the in-sequence for the proxy service specified by the name "" + proxy.getTargetInSequence());
/*     */             
/* 120 */             throw new SynapseException(""Unable to find the in-sequence for the proxy service specified by the name "" + proxy.getTargetInSequence());
/*     */           }
/*     */         
/* 123 */         } else if (proxy.getTargetInLineInSequence() != null) {
/* 124 */           String msg = ""Using the anonymous in-sequence of the proxy service for message mediation"";
/*     */           
/* 126 */           if (shouldTrace) {
/* 127 */             trace.trace(msg);
/*     */           }
/* 129 */           log.debug(msg);
/* 130 */           proxy.getTargetInLineInSequence().mediate(synCtx);
/*     */         } 
/*     */         
/* 133 */         if (proxy.getTargetEndpoint() != null) {
/* 134 */           Endpoint endpoint = synCtx.getEndpoint(proxy.getTargetEndpoint());
/* 135 */           if (endpoint != null) {
/* 136 */             String msg = ""Forwarding message to the endpoint named "" + proxy.getTargetEndpoint() + "" after message mediation"";
/*     */             
/* 138 */             if (shouldTrace) {
/* 139 */               trace.trace(msg);
/*     */             }
/* 141 */             log.debug(msg);
/* 142 */             endpoint.send(synCtx);
/*     */           } else {
/*     */             
/* 145 */             log.error(""Unable to find the endpoint for the proxy service specified by the name "" + proxy.getTargetEndpoint());
/*     */             
/* 147 */             throw new SynapseException(""Unable to find the endpoint for the proxy service specified by the name "" + proxy.getTargetEndpoint());
/*     */           }
/*     */         
/* 150 */         } else if (proxy.getTargetInLineEndpoint() != null) {
/* 151 */           String msg = ""Forwarding the message to the anonymous endpoint of the proxy service after message mediation"";
/*     */           
/* 153 */           if (shouldTrace) {
/* 154 */             trace.trace(msg);
/*     */           }
/* 156 */           log.debug(msg);
/* 157 */           proxy.getTargetInLineEndpoint().send(synCtx);
/*     */         } 
/*     */       } else {
/*     */         
/* 161 */         log.error(""Proxy Service with the name "" + this.name + "" does not exists"");
/* 162 */         throw new SynapseException(""Proxy Service with the name "" + this.name + "" does not exists"");
/*     */       }
/*     */     
/* 165 */     } catch (SynapseException syne) {
/* 166 */       if (!synCtx.getFaultStack().isEmpty()) {
/* 167 */         ((FaultHandler)synCtx.getFaultStack().pop()).handleFault(synCtx, (Exception)syne);
/*     */       } else {
/* 169 */         log.error(""Synapse encountered an exception, No error handlers found - [Message Dropped]\n"" + syne.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void setName(String name) { this.name = name; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\ProxyServiceMessageReceiver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseCallbackReceiver,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.Timer;
/*     */ import org.apache.axiom.soap.SOAPFault;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.addressing.RelatesTo;
/*     */ import org.apache.axis2.client.async.Callback;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.engine.MessageReceiver;
/*     */ import org.apache.axis2.util.Utils;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseCallbackReceiver
/*     */   implements MessageReceiver
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(SynapseCallbackReceiver.class);
/*     */ 
/*     */ 
/*     */   
/*     */   private Map callbackStore;
/*     */ 
/*     */   
/*  51 */   private Timer timeOutTimer = null;
/*     */   
/*     */   public SynapseCallbackReceiver() {
/*  54 */     this.callbackStore = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */     
/*  57 */     TimeoutHandler timeoutHandler = new TimeoutHandler(this.callbackStore);
/*  58 */     this.timeOutTimer = new Timer(true);
/*  59 */     this.timeOutTimer.schedule(timeoutHandler, 0L, 1000L);
/*     */   }
/*     */ 
/*     */   
/*  63 */   public void addCallback(String MsgID, Callback callback) { this.callbackStore.put(MsgID, callback); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void receive(MessageContext messageCtx) throws AxisFault {
/*  68 */     String messageID = null;
/*     */     
/*  70 */     if (messageCtx.getOptions() != null && messageCtx.getOptions().getRelatesTo() != null) {
/*  71 */       messageID = messageCtx.getOptions().getRelatesTo().getValue();
/*  72 */     } else if (messageCtx.getProperty(SandeshaClientConstants.SEQUENCE_KEY) == null) {
/*  73 */       messageID = (String)messageCtx.getProperty(""RelatesToForPox"");
/*     */     } 
/*     */     
/*  76 */     if (messageID != null) {
/*  77 */       Callback callback = (Callback)this.callbackStore.remove(messageID);
/*     */       
/*  79 */       RelatesTo[] relates = messageCtx.getRelationships();
/*  80 */       if (relates != null && relates.length > 1)
/*     */       {
/*     */ 
/*     */         
/*  84 */         removeDuplicateRelatesTo(messageCtx, relates);
/*     */       }
/*     */       
/*  87 */       if (callback != null) {
/*  88 */         handleMessage(messageCtx, ((AsyncCallback)callback).getSynapseOutMsgCtx());
/*     */       } else {
/*     */         
/*  91 */         log.warn(""Synapse received a response for the request with message Id : "" + messageID + "" But a callback has not been registered to process this response"");
/*     */       }
/*     */     
/*     */     }
/*  95 */     else if (!Utils.isExplicitlyTrue(messageCtx, ""SC_ACCEPTED"")) {
/*     */       
/*  97 */       log.warn(""Synapse received a response message without a message Id"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void handleMessage(MessageContext response, MessageContext synapseOutMsgCtx) {
/* 112 */     Object o = response.getProperty(""sending_fault"");
/* 113 */     if (o != null && Boolean.TRUE.equals(o)) {
/*     */ 
/*     */ 
/*     */       
/* 117 */       Stack faultStack = synapseOutMsgCtx.getFaultStack();
/* 118 */       if (faultStack != null && !faultStack.isEmpty()) {
/* 119 */         SOAPFault fault = response.getEnvelope().getBody().getFault();
/* 120 */         Exception e = fault.getException();
/* 121 */         if (e == null) {
/* 122 */           e = new Exception(fault.toString());
/*     */         }
/*     */ 
/*     */         
/* 126 */         synapseOutMsgCtx.setProperty(""ERROR_CODE"", ""503"");
/* 127 */         if (fault != null && fault.getReason() != null) {
/* 128 */           synapseOutMsgCtx.setProperty(""ERROR_MESSAGE"", fault.getReason().getText());
/*     */         }
/*     */         
/* 131 */         ((FaultHandler)faultStack.pop()).handleFault(synapseOutMsgCtx, e);
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 138 */       Stack faultStack = synapseOutMsgCtx.getFaultStack();
/* 139 */       if (!faultStack.isEmpty() && faultStack.peek() instanceof org.apache.synapse.endpoints.Endpoint) {
/* 140 */         faultStack.pop();
/*     */       }
/* 142 */       if (log.isDebugEnabled()) {
/* 143 */         log.debug(""Synapse received an asynchronous response message"");
/* 144 */         log.debug(""Received To: "" + ((response.getTo() != null) ? response.getTo().getAddress() : ""null""));
/*     */         
/* 146 */         log.debug(""SOAPAction: "" + ((response.getSoapAction() != null) ? response.getSoapAction() : ""null""));
/*     */         
/* 148 */         log.debug(""WSA-Action: "" + ((response.getWSAAction() != null) ? response.getWSAAction() : ""null""));
/*     */         
/* 150 */         String[] cids = response.getAttachmentMap().getAllContentIDs();
/* 151 */         if (cids != null && cids.length > 0) {
/* 152 */           for (int i = 0; i < cids.length; i++) {
/* 153 */             log.debug(""Attachment : "" + cids[i]);
/*     */           }
/*     */         }
/* 156 */         log.debug(""Body : \n"" + response.getEnvelope());
/*     */       } 
/* 158 */       MessageContext axisOutMsgCtx = ((Axis2MessageContext)synapseOutMsgCtx).getAxis2MessageContext();
/*     */ 
/*     */       
/* 161 */       response.setOperationContext(axisOutMsgCtx.getOperationContext());
/* 162 */       response.getAxisMessage().setParent((AxisDescription)axisOutMsgCtx.getOperationContext().getAxisOperation());
/*     */       
/* 164 */       response.setAxisService(axisOutMsgCtx.getAxisService());
/*     */ 
/*     */       
/* 167 */       response.setServerSide(true);
/* 168 */       response.setProperty(""synapse.isresponse"", Boolean.TRUE);
/* 169 */       response.setProperty(""TRANSPORT_OUT"", axisOutMsgCtx.getProperty(""TRANSPORT_OUT""));
/*     */       
/* 171 */       response.setProperty(""OutTransportInfo"", axisOutMsgCtx.getProperty(""OutTransportInfo""));
/*     */       
/* 173 */       response.setTransportIn(axisOutMsgCtx.getTransportIn());
/* 174 */       response.setTransportOut(axisOutMsgCtx.getTransportOut());
/*     */ 
/*     */       
/* 177 */       response.setDoingREST(axisOutMsgCtx.isDoingREST());
/* 178 */       if (axisOutMsgCtx.isDoingMTOM()) {
/* 179 */         response.setDoingMTOM(true);
/* 180 */         response.setProperty(""enableMTOM"", ""true"");
/*     */       } 
/*     */ 
/*     */       
/* 184 */       if (axisOutMsgCtx.isDoingSwA()) {
/* 185 */         response.setDoingSwA(true);
/* 186 */         response.setProperty(""enableSwA"", ""true"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 191 */       if (axisOutMsgCtx.getMessageID() != null) {
/* 192 */         response.setRelationships(new RelatesTo[] { new RelatesTo(axisOutMsgCtx.getMessageID()) });
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 197 */       Axis2MessageContext synapseInMessageContext = new Axis2MessageContext(response, synapseOutMsgCtx.getConfiguration(), synapseOutMsgCtx.getEnvironment());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 203 */       synapseInMessageContext.setResponse(true);
/* 204 */       synapseInMessageContext.setTo(new EndpointReference(""http://www.w3.org/2005/08/addressing/anonymous""));
/*     */ 
/*     */ 
/*     */       
/* 208 */       Iterator iter = synapseOutMsgCtx.getPropertyKeySet().iterator();
/*     */       
/* 210 */       while (iter.hasNext()) {
/* 211 */         Object key = iter.next();
/* 212 */         synapseInMessageContext.setProperty((String)key, synapseOutMsgCtx.getProperty((String)key));
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 218 */         synapseOutMsgCtx.getEnvironment().injectMessage(synapseInMessageContext);
/* 219 */       } catch (SynapseException syne) {
/* 220 */         if (!synapseInMessageContext.getFaultStack().isEmpty()) {
/* 221 */           ((FaultHandler)synapseInMessageContext.getFaultStack().pop()).handleFault(synapseInMessageContext, (Exception)syne);
/*     */         } else {
/*     */           
/* 224 */           log.error(""Synapse encountered an exception, No error handlers found - [Message Dropped]\n"" + syne.getMessage());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeDuplicateRelatesTo(MessageContext mc, RelatesTo[] relates) {
/* 233 */     int insertPos = 0;
/* 234 */     RelatesTo[] newRelates = new RelatesTo[relates.length];
/*     */     
/* 236 */     for (int i = 0; i < relates.length; i++) {
/* 237 */       RelatesTo current = relates[i];
/* 238 */       boolean found = false;
/* 239 */       for (int j = 0; j < newRelates.length && j < insertPos; j++) {
/* 240 */         if (newRelates[j].equals(current) || newRelates[j].getValue().equals(current.getValue())) {
/*     */           
/* 242 */           found = true;
/*     */           break;
/*     */         } 
/*     */       } 
/* 246 */       if (!found) {
/* 247 */         newRelates[insertPos++] = current;
/*     */       }
/*     */     } 
/*     */     
/* 251 */     RelatesTo[] trimmedRelates = new RelatesTo[insertPos];
/* 252 */     System.arraycopy(newRelates, 0, trimmedRelates, 0, insertPos);
/* 253 */     mc.setRelationships(trimmedRelates);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\SynapseCallbackReceiver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseDispatcher,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.description.AxisOperation;
/*    */ import org.apache.axis2.description.AxisService;
/*    */ import org.apache.axis2.description.HandlerDescription;
/*    */ import org.apache.axis2.engine.AbstractDispatcher;
/*    */ import org.apache.axis2.engine.AxisConfiguration;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseDispatcher
/*    */   extends AbstractDispatcher
/*    */ {
/* 40 */   private static final Log log = LogFactory.getLog(SynapseDispatcher.class);
/*    */   
/*    */   private static final long serialVersionUID = -6970206989111592645L;
/*    */   
/*    */   private static final String SYNAPSE_SERVICE_NAME = ""synapse"";
/*    */   
/* 46 */   private static final QName MEDIATE_OPERATION_NAME = new QName(""mediate"");
/*    */   
/*    */   public void initDispatcher() {
/* 49 */     QName qn = new QName(""http://synapse.apache.org"", ""SynapseDispatcher"");
/* 50 */     HandlerDescription hd = new HandlerDescription(qn.getLocalPart());
/* 51 */     init(hd);
/*    */   }
/*    */   
/*    */   public AxisService findService(MessageContext mc) throws AxisFault {
/* 55 */     AxisConfiguration ac = mc.getConfigurationContext().getAxisConfiguration();
/* 56 */     AxisService as = ac.getService(""synapse"");
/* 57 */     return as;
/*    */   }
/*    */   
/*    */   public AxisOperation findOperation(AxisService svc, MessageContext mc) throws AxisFault {
/* 61 */     AxisOperation ao = svc.getOperation(MEDIATE_OPERATION_NAME);
/* 62 */     return ao;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\SynapseDispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseMessageReceiver,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.engine.MessageReceiver;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.FaultHandler;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMessageReceiver
/*    */   implements MessageReceiver
/*    */ {
/* 39 */   private static final Log log = LogFactory.getLog(SynapseMessageReceiver.class);
/*    */ 
/*    */   
/*    */   public void receive(MessageContext mc) throws AxisFault {
/* 43 */     if (log.isDebugEnabled()) {
/* 44 */       log.debug(""Synapse received a new message for message mediation..."");
/* 45 */       log.debug(""Received To: "" + ((mc.getTo() != null) ? mc.getTo().getAddress() : ""null""));
/* 46 */       log.debug(""SOAPAction: "" + ((mc.getSoapAction() != null) ? mc.getSoapAction() : ""null""));
/* 47 */       log.debug(""WSA-Action: "" + ((mc.getWSAAction() != null) ? mc.getWSAAction() : ""null""));
/* 48 */       String[] cids = mc.getAttachmentMap().getAllContentIDs();
/* 49 */       if (cids != null && cids.length > 0) {
/* 50 */         for (int i = 0; i < cids.length; i++) {
/* 51 */           log.debug(""Attachment : "" + cids[i]);
/*    */         }
/*    */       }
/* 54 */       log.debug(""Body : \n"" + mc.getEnvelope());
/*    */     } 
/*    */     
/* 57 */     MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);
/*    */     try {
/* 59 */       Object object = synCtx.getProperty(""synapseservice_statistics_stack"");
/*    */ 
/*    */       
/* 62 */       if (object == null) {
/* 63 */         object = new ProxyServiceStatisticsStack();
/* 64 */         synCtx.setProperty(""synapseservice_statistics_stack"", object);
/*    */       } 
/*    */       
/* 67 */       String name = ""SynapseService"";
/* 68 */       boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 69 */       object.put(name, System.currentTimeMillis(), !synCtx.isResponse(), true, isFault);
/*    */ 
/*    */ 
/*    */       
/* 73 */       synCtx.getEnvironment().injectMessage(synCtx);
/* 74 */     } catch (SynapseException syne) {
/* 75 */       if (!synCtx.getFaultStack().isEmpty()) {
/* 76 */         ((FaultHandler)synCtx.getFaultStack().pop()).handleFault(synCtx, (Exception)syne);
/*    */       } else {
/* 78 */         log.error(""Synapse encountered an exception, No error handlers found - [Message Dropped]\n"" + syne.getMessage());
/*    */       } 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\SynapseMessageReceiver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseModule,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.net.InetAddress;
/*     */ import java.net.UnknownHostException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.description.AxisModule;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.InOutAxisOperation;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.axis2.modules.Module;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.log4j.MDC;
/*     */ import org.apache.neethi.Assertion;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.SynapseConfigurationBuilder;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseModule
/*     */   implements Module
/*     */ {
/*  53 */   private static final Log log = LogFactory.getLog(SynapseModule.class);
/*     */   
/*     */   private static final String SYNAPSE_SERVICE_NAME = ""synapse"";
/*  56 */   private static final QName MEDIATE_OPERATION_Q_NAME = new QName(""mediate"");
/*     */ 
/*     */ 
/*     */   
/*     */   public void init(ConfigurationContext configurationContext, AxisModule axisModule) throws AxisFault {
/*     */     try {
/*  62 */       InetAddress addr = InetAddress.getLocalHost();
/*  63 */       if (addr != null) {
/*     */         
/*  65 */         String ipAddr = addr.getHostAddress();
/*  66 */         if (ipAddr != null) {
/*  67 */           MDC.put(""ip"", ipAddr);
/*     */         }
/*     */ 
/*     */         
/*  71 */         String hostname = addr.getHostName();
/*  72 */         if (hostname == null) {
/*  73 */           hostname = ipAddr;
/*     */         }
/*  75 */         MDC.put(""host"", hostname);
/*     */       } 
/*  77 */     } catch (UnknownHostException e) {
/*  78 */       log.warn(""Unable to report hostname or IP address for tracing"", e);
/*     */     } 
/*     */     
/*  81 */     log.info(""Initializing the Synapse configuration ..."");
/*  82 */     SynapseConfiguration synCfg = initializeSynapse(configurationContext);
/*     */     
/*  84 */     log.info(""Deploying the Synapse service.."");
/*     */     
/*  86 */     AxisConfiguration axisCfg = configurationContext.getAxisConfiguration();
/*  87 */     AxisService synapseService = new AxisService(""synapse"");
/*  88 */     InOutAxisOperation inOutAxisOperation = new InOutAxisOperation(MEDIATE_OPERATION_Q_NAME);
/*  89 */     inOutAxisOperation.setMessageReceiver(new SynapseMessageReceiver());
/*  90 */     synapseService.addOperation((AxisOperation)inOutAxisOperation);
/*  91 */     List transports = new ArrayList();
/*  92 */     transports.add(""http"");
/*  93 */     transports.add(""https"");
/*  94 */     synapseService.setExposedTransports(transports);
/*  95 */     axisCfg.addService(synapseService);
/*     */     
/*  97 */     log.info(""Initializing Sandesha 2..."");
/*  98 */     AxisModule sandeshaAxisModule = configurationContext.getAxisConfiguration().getModule(""sandesha2"");
/*     */     
/* 100 */     if (sandeshaAxisModule != null) {
/* 101 */       Module sandesha2 = sandeshaAxisModule.getModule();
/* 102 */       sandesha2.init(configurationContext, sandeshaAxisModule);
/*     */     } 
/*     */     
/* 105 */     log.info(""Deploying Proxy services..."");
/* 106 */     Iterator iter = synCfg.getProxyServices().iterator();
/* 107 */     while (iter.hasNext()) {
/* 108 */       ProxyService proxy = iter.next();
/* 109 */       proxy.buildAxisService(synCfg, axisCfg);
/* 110 */       log.debug(""Deployed Proxy service : "" + proxy.getName());
/* 111 */       if (!proxy.isStartOnLoad()) {
/* 112 */         proxy.stop(synCfg);
/*     */       }
/*     */     } 
/*     */     
/* 116 */     log.info(""Synapse initialized successfully...!"");
/*     */   }
/*     */ 
/*     */   
/*     */   private static SynapseConfiguration initializeSynapse(ConfigurationContext cfgCtx) {
/*     */     SynapseConfiguration synapseConfiguration;
/* 122 */     cfgCtx.setProperty(""addressing.validateAction"", Boolean.FALSE);
/* 123 */     AxisConfiguration axisConfiguration = cfgCtx.getAxisConfiguration();
/*     */ 
/*     */     
/* 126 */     String config = System.getProperty(""synapse.xml"");
/*     */     
/* 128 */     if (config != null) {
/* 129 */       log.debug(""System property 'synapse.xml' specifies synapse configuration as "" + config);
/*     */       
/* 131 */       synapseConfiguration = SynapseConfigurationBuilder.getConfiguration(config);
/*     */     } else {
/* 133 */       log.warn(""System property 'synapse.xml' is not specified. Using default configuration.."");
/*     */       
/* 135 */       synapseConfiguration = SynapseConfigurationBuilder.getDefaultConfiguration();
/*     */     } 
/*     */ 
/*     */     
/* 139 */     synapseConfiguration.setAxisConfiguration(cfgCtx.getAxisConfiguration());
/*     */ 
/*     */     
/* 142 */     Parameter synapseCtxParam = new Parameter(""synapse.config"", null);
/* 143 */     synapseCtxParam.setValue(synapseConfiguration);
/* 144 */     MessageContextCreatorForAxis2.setSynConfig(synapseConfiguration);
/*     */     
/* 146 */     Parameter synapseEnvParam = new Parameter(""synapse.env"", null);
/* 147 */     Axis2SynapseEnvironment synEnv = new Axis2SynapseEnvironment(cfgCtx, synapseConfiguration);
/* 148 */     synapseEnvParam.setValue(synEnv);
/* 149 */     MessageContextCreatorForAxis2.setSynEnv(synEnv);
/*     */     
/*     */     try {
/* 152 */       axisConfiguration.addParameter(synapseCtxParam);
/* 153 */       axisConfiguration.addParameter(synapseEnvParam);
/*     */     }
/* 155 */     catch (AxisFault e) {
/* 156 */       String msg = ""Could not set parameters 'synapse.config' and/or 'synapse.env'to the Axis2 configuration : "" + e.getMessage();
/*     */ 
/*     */ 
/*     */       
/* 160 */       log.fatal(msg, (Throwable)e);
/* 161 */       throw new SynapseException(msg, (Throwable)e);
/*     */     } 
/*     */     
/* 164 */     return synapseConfiguration;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void engageNotify(AxisDescription axisDescription) throws AxisFault {}
/*     */ 
/*     */   
/* 172 */   public boolean canSupportAssertion(Assertion assertion) { return false; }
/*     */   
/*     */   public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {}
/*     */   
/*     */   public void shutdown(ConfigurationContext configurationContext) throws AxisFault {}
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\SynapseModule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.TimeoutHandler,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.TimerTask;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TimeoutHandler
/*     */   extends TimerTask
/*     */ {
/*  48 */   private Map callbackStore = null;
/*     */   
/*  50 */   private Object lock = new Object();
/*     */   
/*     */   private boolean alreadyExecuting = false;
/*     */   
/*  54 */   public TimeoutHandler(Map callbacks) { this.callbackStore = callbacks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/*  62 */     if (this.alreadyExecuting)
/*     */       return; 
/*  64 */     synchronized (this.lock) {
/*  65 */       this.alreadyExecuting = true;
/*     */       try {
/*  67 */         processCallbacks();
/*  68 */       } catch (Exception ignore) {}
/*  69 */       this.alreadyExecuting = false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processCallbacks() {
/*  80 */     synchronized (this.callbackStore) {
/*     */       
/*  82 */       if (this.callbackStore.size() > 0) {
/*     */         
/*  84 */         long currentTime = currentTime();
/*     */         
/*  86 */         Iterator i = this.callbackStore.keySet().iterator();
/*     */         
/*  88 */         while (i.hasNext()) {
/*  89 */           Object key = i.next();
/*  90 */           AsyncCallback callback = (AsyncCallback)this.callbackStore.get(key);
/*     */           
/*  92 */           if (callback.getTimeOutAction() != 100)
/*     */           {
/*  94 */             if (callback.getTimeOutOn() <= currentTime) {
/*  95 */               this.callbackStore.remove(key);
/*     */               
/*  97 */               if (callback.getTimeOutAction() == 102) {
/*     */ 
/*     */ 
/*     */                 
/* 101 */                 MessageContext msgContext = callback.getSynapseOutMsgCtx();
/*     */ 
/*     */ 
/*     */                 
/* 105 */                 msgContext.setProperty(""ERROR_CODE"", ""504"");
/*     */                 
/* 107 */                 Stack faultStack = msgContext.getFaultStack();
/*     */                 
/* 109 */                 for (int j = 0; j < faultStack.size(); j++) {
/* 110 */                   Object o = faultStack.pop();
/* 111 */                   if (o instanceof MediatorFaultHandler) {
/* 112 */                     ((MediatorFaultHandler)o).handleFault(msgContext);
/*     */                   }
/*     */                 } 
/*     */               } 
/*     */             } 
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private long currentTime() { return System.currentTimeMillis(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\core\axis2\TimeoutHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.AddressEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpoint
/*     */   extends FaultHandler
/*     */   implements Endpoint
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(AddressEndpoint.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  47 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   private EndpointDefinition endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  65 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  71 */   private long suspendOnFailDuration = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   private long recoverOn = Long.MAX_VALUE;
/*     */ 
/*     */   
/*  80 */   public EndpointDefinition getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setEndpoint(EndpointDefinition endpoint) { this.endpoint = endpoint; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 105 */     if (!this.active && 
/* 106 */       System.currentTimeMillis() > this.recoverOn) {
/* 107 */       this.active = true;
/* 108 */       this.recoverOn = 0L;
/*     */     } 
/*     */ 
/*     */     
/* 112 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void setActive(boolean active, MessageContext synMessageContext) {
/* 128 */     if (!active) {
/* 129 */       if (this.suspendOnFailDuration != -1L) {
/* 130 */         this.recoverOn = System.currentTimeMillis() + this.suspendOnFailDuration;
/*     */       } else {
/* 132 */         this.recoverOn = Long.MAX_VALUE;
/*     */       } 
/*     */     }
/*     */     
/* 136 */     this.active = active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synCtx) {
/* 150 */     String endPointName = getName();
/* 151 */     if (endPointName == null) {
/* 152 */       endPointName = ""AnonymousEndpoints"";
/*     */     }
/*     */     
/* 155 */     boolean statisticsEnable = (1 == this.endpoint.getStatisticsEnable());
/*     */     
/* 157 */     if (statisticsEnable) {
/* 158 */       EndPointStatisticsStack endPointStatisticsStack = null;
/* 159 */       Object statisticsStackObj = synCtx.getProperty(""endpoint_statistics_stack"");
/*     */       
/* 161 */       if (statisticsStackObj == null) {
/* 162 */         endPointStatisticsStack = new EndPointStatisticsStack();
/* 163 */         synCtx.setProperty(""endpoint_statistics_stack"", endPointStatisticsStack);
/*     */       }
/* 165 */       else if (statisticsStackObj instanceof EndPointStatisticsStack) {
/* 166 */         endPointStatisticsStack = (EndPointStatisticsStack)statisticsStackObj;
/*     */       } 
/* 168 */       if (endPointStatisticsStack != null) {
/* 169 */         boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 170 */         endPointStatisticsStack.put(endPointName, System.currentTimeMillis(), !synCtx.isResponse(), statisticsEnable, isFault);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 175 */     if (this.endpoint.getAddress() != null && 
/* 176 */       log.isDebugEnabled()) {
/* 177 */       log.debug(""Sending message to endpoint :: name = "" + endPointName + "" resolved address = "" + this.endpoint.getAddress());
/*     */       
/* 179 */       log.debug(""SOAPAction: "" + ((synCtx.getSoapAction() != null) ? synCtx.getSoapAction() : ""null""));
/*     */       
/* 181 */       log.debug(""WSA-Action: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */       
/* 183 */       log.debug(""Body : \n"" + synCtx.getEnvelope());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 188 */     synCtx.pushFaultHandler(this);
/*     */ 
/*     */     
/* 191 */     synCtx.setProperty(""processed_endpoint"", this);
/*     */     
/* 193 */     synCtx.getEnvironment().send(this.endpoint, synCtx);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {}
/*     */ 
/*     */   
/* 201 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 205 */   public long getSuspendOnFailDuration() { return this.suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setSuspendOnFailDuration(long suspendOnFailDuration) { this.suspendOnFailDuration = suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onFault(MessageContext synCtx) {
/* 216 */     setActive(false, synCtx);
/*     */     
/* 218 */     if (this.parentEndpoint != null) {
/* 219 */       this.parentEndpoint.onChildEndpointFail(this, synCtx);
/*     */     } else {
/* 221 */       Stack faultStack = synCtx.getFaultStack();
/* 222 */       if (!faultStack.isEmpty())
/* 223 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\AddressEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.Endpoint,"package org.apache.synapse.endpoints;
import org.apache.synapse.MessageContext;
public interface Endpoint {
  void send(MessageContext paramMessageContext);
  void onChildEndpointFail(Endpoint paramEndpoint, MessageContext paramMessageContext);
  void setParentEndpoint(Endpoint paramEndpoint);
  String getName();
  void setName(String paramString);
  boolean isActive(MessageContext paramMessageContext);
  void setActive(boolean paramBoolean, MessageContext paramMessageContext);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\Endpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.FailoverEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FailoverEndpoint
/*     */   implements Endpoint
/*     */ {
/*  41 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  54 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   private Endpoint currentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  73 */     synMessageContext.getEnvelope().build();
/*     */     
/*  75 */     if (this.currentEndpoint.isActive(synMessageContext)) {
/*  76 */       this.currentEndpoint.send(synMessageContext);
/*     */     } else {
/*     */       
/*  79 */       Endpoint liveEndpoint = null;
/*  80 */       boolean foundEndpoint = false;
/*  81 */       for (int i = 0; i < this.endpoints.size(); i++) {
/*  82 */         liveEndpoint = this.endpoints.get(i);
/*  83 */         if (liveEndpoint.isActive(synMessageContext)) {
/*  84 */           foundEndpoint = true;
/*  85 */           this.currentEndpoint = liveEndpoint;
/*  86 */           this.currentEndpoint.send(synMessageContext);
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/*  91 */       if (!foundEndpoint) {
/*     */         
/*  93 */         setActive(false, synMessageContext);
/*     */         
/*  95 */         if (this.parentEndpoint != null) {
/*  96 */           this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */         } else {
/*  98 */           Object o = synMessageContext.getFaultStack().pop();
/*  99 */           if (o != null) {
/* 100 */             ((FaultHandler)o).handleFault(synMessageContext);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 108 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 126 */     if (!this.active) {
/* 127 */       for (int i = 0; i < this.endpoints.size(); i++) {
/* 128 */         Endpoint endpoint = this.endpoints.get(i);
/* 129 */         if (endpoint.isActive(synMessageContext)) {
/* 130 */           this.active = true;
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 139 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */   
/*     */   public void setEndpoints(List endpoints) {
/* 152 */     this.endpoints = endpoints;
/* 153 */     if (endpoints.size() > 0) {
/* 154 */       this.currentEndpoint = endpoints.get(0);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 159 */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) { send(synMessageContext); }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\FailoverEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.IndirectEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IndirectEndpoint
/*     */   implements Endpoint
/*     */ {
/*  37 */   private static final Log log = LogFactory.getLog(IndirectEndpoint.class);
/*     */   
/*  39 */   private String name = null;
/*  40 */   private String key = null;
/*     */   private boolean active = true;
/*  42 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  48 */   private MessageContext currentMsgCtx = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  52 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/*  53 */     if (endpoint == null) {
/*  54 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/*  57 */     if (endpoint.isActive(synMessageContext)) {
/*  58 */       endpoint.send(synMessageContext);
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  63 */     else if (this.parentEndpoint != null) {
/*  64 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     } else {
/*  66 */       Object o = synMessageContext.getFaultStack().pop();
/*  67 */       if (o != null) {
/*  68 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/*  99 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/* 100 */     if (endpoint == null) {
/* 101 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/* 104 */     return endpoint.isActive(synMessageContext);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setActive(boolean active, MessageContext synMessageContext) {
/* 116 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/* 117 */     if (endpoint == null) {
/* 118 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/* 121 */     endpoint.setActive(active, synMessageContext);
/*     */   }
/*     */ 
/*     */   
/* 125 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 132 */     if (this.parentEndpoint != null) {
/* 133 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     } else {
/* 135 */       Object o = synMessageContext.getFaultStack().pop();
/* 136 */       if (o != null) {
/* 137 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 143 */     log.error(msg);
/* 144 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\IndirectEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.LoadbalanceEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoadbalanceEndpoint
/*     */   implements Endpoint
/*     */ {
/*  44 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   private LoadbalanceAlgorithm algorithm = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failover = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  78 */     Endpoint endpoint = this.algorithm.getNextEndpoint(synMessageContext);
/*  79 */     if (endpoint != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  84 */       if (this.failover) {
/*  85 */         synMessageContext.getEnvelope().build();
/*     */       }
/*     */       
/*  88 */       endpoint.send(synMessageContext);
/*     */     }
/*     */     else {
/*     */       
/*  92 */       setActive(false, synMessageContext);
/*     */       
/*  94 */       if (this.parentEndpoint != null) {
/*  95 */         this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */       } else {
/*  97 */         Object o = synMessageContext.getFaultStack().pop();
/*  98 */         if (o != null) {
/*  99 */           ((FaultHandler)o).handleFault(synMessageContext);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 106 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 114 */   public LoadbalanceAlgorithm getAlgorithm() { return this.algorithm; }
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setAlgorithm(LoadbalanceAlgorithm algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 133 */     if (!this.active) {
/* 134 */       for (int i = 0; i < this.endpoints.size(); i++) {
/* 135 */         Endpoint endpoint = this.endpoints.get(i);
/* 136 */         if (endpoint.isActive(synMessageContext)) {
/* 137 */           this.active = true;
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 146 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public boolean isFailover() { return this.failover; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setFailover(boolean failover) { this.failover = failover; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setEndpoints(List endpoints) { this.endpoints = endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 177 */     if (this.failover) {
/* 178 */       send(synMessageContext);
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/* 184 */       Object o = synMessageContext.getFaultStack().pop();
/* 185 */       if (o != null)
/* 186 */         ((FaultHandler)o).handleFault(synMessageContext); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\LoadbalanceEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.SALoadbalanceEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpoint
/*     */   implements Endpoint
/*     */ {
/*  56 */   private static final Log log = LogFactory.getLog(SALoadbalanceEndpoint.class);
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String FIRST_MESSAGE_IN_SESSION = ""first_message_in_session"";
/*     */ 
/*     */ 
/*     */   
/*  64 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   private LoadbalanceAlgorithm algorithm = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private Dispatcher dispatcher = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  98 */     Endpoint endpoint = null;
/*     */ 
/*     */ 
/*     */     
/* 102 */     endpoint = this.dispatcher.getEndpoint(synMessageContext);
/* 103 */     if (endpoint == null) {
/*     */ 
/*     */ 
/*     */       
/* 107 */       endpoint = this.algorithm.getNextEndpoint(synMessageContext);
/*     */ 
/*     */       
/* 110 */       if (this.dispatcher.isServerInitiatedSession()) {
/*     */ 
/*     */         
/* 113 */         Axis2MessageContext axis2MsgCtx = (Axis2MessageContext)synMessageContext;
/* 114 */         OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
/* 115 */         Object o = opCtx.getProperty(""endpointList"");
/*     */         
/* 117 */         if (o != null) {
/* 118 */           List endpointList = (List)o;
/* 119 */           endpointList.add(this);
/*     */ 
/*     */ 
/*     */           
/* 123 */           if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/* 124 */             endpointList.add(endpoint);
/*     */           
/*     */           }
/*     */         
/*     */         }
/*     */         else {
/*     */           
/* 131 */           List endpointList = new ArrayList();
/* 132 */           endpointList.add(this);
/*     */ 
/*     */ 
/*     */           
/* 136 */           if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/* 137 */             endpointList.add(endpoint);
/*     */           }
/*     */           
/* 140 */           opCtx.setProperty(""endpointList"", endpointList);
/*     */         } 
/*     */       } else {
/*     */         
/* 144 */         this.dispatcher.updateSession(synMessageContext, endpoint);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 150 */       synMessageContext.getEnvelope().build();
/*     */ 
/*     */ 
/*     */       
/* 154 */       synMessageContext.setProperty(""first_message_in_session"", Boolean.TRUE);
/*     */     } 
/*     */     
/* 157 */     if (endpoint != null) {
/*     */ 
/*     */ 
/*     */       
/* 161 */       if (endpoint.isActive(synMessageContext)) {
/* 162 */         endpoint.send(synMessageContext);
/*     */       } else {
/* 164 */         informFailure(synMessageContext);
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 170 */       setActive(false, synMessageContext);
/* 171 */       informFailure(synMessageContext);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext responseMsgCtx, List endpointList) {
/* 183 */     Endpoint endpoint = endpointList.remove(0);
/* 184 */     this.dispatcher.updateSession(responseMsgCtx, endpoint);
/* 185 */     if (endpoint instanceof SALoadbalanceEndpoint) {
/* 186 */       ((SALoadbalanceEndpoint)endpoint).updateSession(responseMsgCtx, endpointList);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 191 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public LoadbalanceAlgorithm getAlgorithm() { return this.algorithm; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setAlgorithm(LoadbalanceAlgorithm algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public boolean isActive(MessageContext synMessageContext) { return this.active; }
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 229 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void setEndpoints(List endpoints) { this.endpoints = endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 237 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 241 */   public Dispatcher getDispatcher() { return this.dispatcher; }
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void setDispatcher(Dispatcher dispatcher) { this.dispatcher = dispatcher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 262 */     Object o = synMessageContext.getProperty(""first_message_in_session"");
/*     */     
/* 264 */     if (o != null && Boolean.TRUE.equals(o)) {
/*     */ 
/*     */ 
/*     */       
/* 268 */       this.dispatcher.unbind(synMessageContext);
/* 269 */       send(synMessageContext);
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 274 */       informFailure(synMessageContext);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void informFailure(MessageContext synMessageContext) {
/* 280 */     if (this.parentEndpoint != null) {
/* 281 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     }
/*     */     else {
/*     */       
/* 285 */       Object o = synMessageContext.getFaultStack().pop();
/* 286 */       if (o != null) {
/* 287 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 293 */     log.error(msg);
/* 294 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\SALoadbalanceEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.WSDLEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpoint
/*     */   extends FaultHandler
/*     */   implements Endpoint
/*     */ {
/*  46 */   private static final Log log = LogFactory.getLog(AddressEndpoint.class);
/*     */   
/*  48 */   private String name = null;
/*     */   
/*     */   private String wsdlURI;
/*     */   
/*     */   private OMElement wsdlDoc;
/*     */   
/*     */   private String serviceName;
/*     */   
/*     */   private String portName;
/*     */   
/*  58 */   private long suspendOnFailDuration = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   private long recoverOn = Long.MAX_VALUE;
/*     */   
/*     */   private boolean active = true;
/*  67 */   private Endpoint parentEndpoint = null;
/*  68 */   private EndpointDefinition endpointDefinition = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synCtx) {
/*  81 */     String eprAddress = null;
/*  82 */     if (this.endpointDefinition.getAddress() != null) {
/*  83 */       eprAddress = this.endpointDefinition.getAddress().toString();
/*  84 */       String endPointName = getName();
/*  85 */       if (endPointName == null) {
/*  86 */         endPointName = ""AnonymousEndpoints"";
/*     */       }
/*     */       
/*  89 */       boolean statisticsEnable = (1 == this.endpointDefinition.getStatisticsEnable());
/*     */ 
/*     */       
/*  92 */       if (statisticsEnable) {
/*  93 */         EndPointStatisticsStack endPointStatisticsStack = null;
/*  94 */         Object statisticsStackObj = synCtx.getProperty(""endpoint_statistics_stack"");
/*     */         
/*  96 */         if (statisticsStackObj == null) {
/*  97 */           endPointStatisticsStack = new EndPointStatisticsStack();
/*  98 */           synCtx.setProperty(""endpoint_statistics_stack"", endPointStatisticsStack);
/*     */         }
/* 100 */         else if (statisticsStackObj instanceof EndPointStatisticsStack) {
/* 101 */           endPointStatisticsStack = (EndPointStatisticsStack)statisticsStackObj;
/*     */         } 
/* 103 */         if (endPointStatisticsStack != null) {
/* 104 */           boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 105 */           endPointStatisticsStack.put(endPointName, System.currentTimeMillis(), !synCtx.isResponse(), statisticsEnable, isFault);
/*     */         } 
/*     */       } 
/*     */       
/* 109 */       if (log.isDebugEnabled()) {
/* 110 */         log.debug(""Sending message to endpoint :: name = "" + endPointName + "" resolved address = "" + eprAddress);
/*     */         
/* 112 */         log.debug(""Sending To: "" + ((synCtx.getTo() != null) ? synCtx.getTo().getAddress() : ""null""));
/*     */         
/* 114 */         log.debug(""SOAPAction: "" + ((synCtx.getSoapAction() != null) ? synCtx.getSoapAction() : ""null""));
/*     */         
/* 116 */         log.debug(""WSA-Action: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */         
/* 118 */         log.debug(""Body : \n"" + synCtx.getEnvelope());
/*     */       } 
/*     */ 
/*     */       
/* 122 */       synCtx.pushFaultHandler(this);
/*     */ 
/*     */       
/* 125 */       synCtx.setProperty(""processed_endpoint"", this);
/*     */       
/* 127 */       synCtx.getEnvironment().send(this.endpointDefinition, synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onFault(MessageContext synCtx) {
/* 135 */     if (this.parentEndpoint != null) {
/* 136 */       this.parentEndpoint.onChildEndpointFail(this, synCtx);
/*     */     } else {
/* 138 */       Stack faultStack = synCtx.getFaultStack();
/* 139 */       if (!faultStack.isEmpty()) {
/* 140 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {}
/*     */ 
/*     */   
/* 150 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 158 */   public long getSuspendOnFailDuration() { return this.suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setSuspendOnFailDuration(long suspendOnFailDuration) { this.suspendOnFailDuration = suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 166 */   public String getWsdlURI() { return this.wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setWsdlURI(String wsdlURI) { this.wsdlURI = wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 174 */   public OMElement getWsdlDoc() { return this.wsdlDoc; }
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setWsdlDoc(OMElement wsdlDoc) { this.wsdlDoc = wsdlDoc; }
/*     */ 
/*     */ 
/*     */   
/* 182 */   public String getServiceName() { return this.serviceName; }
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void setServiceName(String serviceName) { this.serviceName = serviceName; }
/*     */ 
/*     */ 
/*     */   
/* 190 */   public String getPortName() { return this.portName; }
/*     */ 
/*     */ 
/*     */   
/* 194 */   public void setPortName(String portName) { this.portName = portName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 207 */     if (!this.active && 
/* 208 */       System.currentTimeMillis() > this.recoverOn) {
/* 209 */       this.active = true;
/*     */     }
/*     */ 
/*     */     
/* 213 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setActive(boolean active, MessageContext synMessageContext) {
/* 226 */     if (!active) {
/* 227 */       if (this.suspendOnFailDuration != -1L) {
/* 228 */         this.recoverOn = System.currentTimeMillis() + this.suspendOnFailDuration;
/*     */       } else {
/* 230 */         this.recoverOn = Long.MAX_VALUE;
/*     */       } 
/*     */     }
/*     */     
/* 234 */     this.active = active;
/*     */   }
/*     */ 
/*     */   
/* 238 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 242 */   public EndpointDefinition getEndpointDefinition() { return this.endpointDefinition; }
/*     */ 
/*     */ 
/*     */   
/* 246 */   public void setEndpointDefinition(EndpointDefinition endpointDefinition) { this.endpointDefinition = endpointDefinition; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\WSDLEndpoint.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm,"package org.apache.synapse.endpoints.algorithms;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
public interface LoadbalanceAlgorithm {
  Endpoint getNextEndpoint(MessageContext paramMessageContext);
  void reset();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\algorithms\LoadbalanceAlgorithm.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.algorithms.RoundRobin,"/*    */ package org.apache.synapse.endpoints.algorithms;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RoundRobin
/*    */   implements LoadbalanceAlgorithm
/*    */ {
/* 33 */   private ArrayList endpoints = null;
/* 34 */   private int currentEPR = 0;
/*    */ 
/*    */   
/* 37 */   public RoundRobin(ArrayList endpoints) { this.endpoints = endpoints; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Endpoint getNextEndpoint(MessageContext synapseMessageContext) {
/* 49 */     Endpoint nextEndpoint = null;
/* 50 */     int attempts = 0;
/*    */ 
/*    */     
/*    */     do {
/* 54 */       synchronized (this) {
/* 55 */         nextEndpoint = this.endpoints.get(this.currentEPR);
/*    */         
/* 57 */         if (this.currentEPR == this.endpoints.size() - 1) {
/* 58 */           this.currentEPR = 0;
/*    */         } else {
/* 60 */           this.currentEPR++;
/*    */         } 
/*    */       } 
/*    */       
/* 64 */       attempts++;
/* 65 */       if (attempts > this.endpoints.size()) {
/* 66 */         return null;
/*    */       }
/*    */     }
/* 69 */     while (!nextEndpoint.isActive(synapseMessageContext));
/*    */     
/* 71 */     return nextEndpoint;
/*    */   }
/*    */ 
/*    */   
/* 75 */   public void reset() { this.currentEPR = 0; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\algorithms\RoundRobin.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.Dispatcher,"package org.apache.synapse.endpoints.dispatch;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
public interface Dispatcher {
  Endpoint getEndpoint(MessageContext paramMessageContext);
  void updateSession(MessageContext paramMessageContext, Endpoint paramEndpoint);
  void unbind(MessageContext paramMessageContext);
  boolean isServerInitiatedSession();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\dispatch\Dispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher,"/*     */ package org.apache.synapse.endpoints.dispatch;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HttpSessionDispatcher
/*     */   implements Dispatcher
/*     */ {
/*  41 */   Map sessionMap = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(MessageContext synCtx) {
/*  54 */     Endpoint endpoint = null;
/*     */     
/*  56 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/*  59 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*  60 */     if (o != null && o instanceof Map) {
/*  61 */       Map headerMap = (Map)o;
/*  62 */       Object cookie = headerMap.get(""Cookie"");
/*     */       
/*  64 */       if (cookie != null) {
/*  65 */         Object e = this.sessionMap.get(cookie);
/*  66 */         if (e != null) {
/*  67 */           endpoint = (Endpoint)e;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/*  72 */     return endpoint;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/*  85 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/*  88 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*  89 */     if (o != null && o instanceof Map) {
/*  90 */       Map headerMap = (Map)o;
/*  91 */       Object cookie = headerMap.get(""Set-Cookie"");
/*     */       
/*  93 */       if (cookie != null)
/*     */       {
/*  95 */         synchronized (this.sessionMap) {
/*  96 */           if (!this.sessionMap.containsKey(cookie)) {
/*  97 */             this.sessionMap.put(cookie, endpoint);
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void unbind(MessageContext synCtx) {
/* 106 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/* 109 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/* 110 */     if (o != null && o instanceof Map) {
/* 111 */       Map headerMap = (Map)o;
/* 112 */       Object cookie = headerMap.get(""Cookie"");
/*     */       
/* 114 */       if (cookie != null) {
/* 115 */         this.sessionMap.remove(cookie);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public boolean isServerInitiatedSession() { return true; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\dispatch\HttpSessionDispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher,"/*    */ package org.apache.synapse.endpoints.dispatch;
/*    */ 
/*    */ import java.util.Collections;
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.soap.SOAPHeader;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SimpleClientSessionDispatcher
/*    */   implements Dispatcher
/*    */ {
/* 44 */   private Map sessionMap = Collections.synchronizedMap(new HashMap());
/*    */ 
/*    */   
/*    */   public Endpoint getEndpoint(MessageContext synCtx) {
/* 48 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 50 */     if (header != null) {
/* 51 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 53 */       if (csID != null && csID.getText() != null) {
/* 54 */         Object o = this.sessionMap.get(csID.getText());
/* 55 */         if (o != null) {
/* 56 */           return (Endpoint)o;
/*    */         }
/*    */       } 
/*    */     } 
/*    */     
/* 61 */     return null;
/*    */   }
/*    */ 
/*    */   
/*    */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/* 66 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 68 */     if (header != null) {
/* 69 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 71 */       if (csID != null && csID.getText() != null)
/*    */       {
/* 73 */         synchronized (this.sessionMap) {
/* 74 */           if (!this.sessionMap.containsKey(csID.getText())) {
/* 75 */             this.sessionMap.put(csID.getText(), endpoint);
/*    */           }
/*    */         } 
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public void unbind(MessageContext synCtx) {
/* 84 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 86 */     if (header != null) {
/* 87 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 89 */       if (csID != null && csID.getText() != null) {
/* 90 */         this.sessionMap.remove(csID.getText());
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 96 */   public boolean isServerInitiatedSession() { return false; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\dispatch\SimpleClientSessionDispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher,"/*     */ package org.apache.synapse.endpoints.dispatch;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SoapSessionDispatcher
/*     */   implements Dispatcher
/*     */ {
/*  41 */   private Map sessionMap = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(MessageContext synCtx) {
/*  53 */     Endpoint endpoint = null;
/*     */     
/*  55 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/*  57 */     if (header != null) {
/*  58 */       OMElement sgcID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */ 
/*     */       
/*  61 */       if (sgcID != null && sgcID.getText() != null) {
/*     */         
/*  63 */         Object e = this.sessionMap.get(sgcID.getText());
/*     */         
/*  65 */         if (e != null) {
/*  66 */           endpoint = (Endpoint)e;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/*  71 */     return endpoint;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/*  88 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/*  90 */     if (header != null) {
/*  91 */       OMElement replyTo = header.getFirstChildWithName(new QName(""http://www.w3.org/2005/08/addressing"", ""ReplyTo"", ""wsa""));
/*     */ 
/*     */       
/*  94 */       if (replyTo != null) {
/*  95 */         OMElement referenceParameters = replyTo.getFirstChildWithName(new QName(""http://www.w3.org/2005/08/addressing"", ""ReferenceParameters"", ""wsa""));
/*     */ 
/*     */         
/*  98 */         if (referenceParameters != null) {
/*  99 */           OMElement sgcID = referenceParameters.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */ 
/*     */ 
/*     */           
/* 103 */           synchronized (this.sessionMap) {
/* 104 */             if (!this.sessionMap.containsKey(sgcID.getText())) {
/* 105 */               this.sessionMap.put(sgcID.getText(), endpoint);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void unbind(MessageContext synCtx) {
/* 115 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/* 117 */     if (header != null) {
/* 118 */       OMElement sgcID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */       
/* 120 */       if (sgcID != null && sgcID.getText() != null) {
/* 121 */         this.sessionMap.remove(sgcID.getText());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public boolean isServerInitiatedSession() { return true; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoints\dispatch\SoapSessionDispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.utils.EndpointDefinition,"/*     */ package org.apache.synapse.endpoints.utils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EndpointDefinition
/*     */ {
/*  33 */   private String address = null;
/*     */   
/*     */   private boolean reliableMessagingOn = false;
/*     */   
/*     */   private boolean addressingOn = false;
/*     */   
/*     */   private boolean securityOn = false;
/*     */   
/*  41 */   private String wsRMPolicyKey = null;
/*     */   
/*  43 */   private String wsSecPolicyKey = null;
/*     */ 
/*     */   
/*     */   private boolean useSeparateListener = false;
/*     */ 
/*     */   
/*     */   private boolean forcePOX = false;
/*     */ 
/*     */   
/*     */   private boolean forceSOAP = false;
/*     */ 
/*     */   
/*     */   private boolean useMTOM = false;
/*     */ 
/*     */   
/*     */   private boolean useSwa = false;
/*     */ 
/*     */   
/*  61 */   private long timeoutDuration = 0L;
/*     */ 
/*     */   
/*  64 */   private int timeoutAction = 100;
/*     */ 
/*     */   
/*  67 */   private int statisticsEnable = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   public String getAddress() { return this.address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void setAddress(String address) { this.address = address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public boolean isReliableMessagingOn() { return this.reliableMessagingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setReliableMessagingOn(boolean reliableMessagingOn) { this.reliableMessagingOn = reliableMessagingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public boolean isAddressingOn() { return this.addressingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setAddressingOn(boolean addressingOn) { this.addressingOn = addressingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public boolean isSecurityOn() { return this.securityOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setSecurityOn(boolean securityOn) { this.securityOn = securityOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public String getWsSecPolicyKey() { return this.wsSecPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setWsSecPolicyKey(String wsSecPolicyKey) { this.wsSecPolicyKey = wsSecPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public String getWsRMPolicyKey() { return this.wsRMPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setWsRMPolicyKey(String wsRMPolicyKey) { this.wsRMPolicyKey = wsRMPolicyKey; }
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setUseSeparateListener(boolean b) { this.useSeparateListener = b; }
/*     */ 
/*     */   
/* 169 */   public boolean isUseSeparateListener() { return this.useSeparateListener; }
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setForcePOX(boolean forcePOX) { this.forcePOX = forcePOX; }
/*     */ 
/*     */ 
/*     */   
/* 177 */   public boolean isForcePOX() { return this.forcePOX; }
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void setForceSOAP(boolean forceSOAP) { this.forceSOAP = forceSOAP; }
/*     */ 
/*     */ 
/*     */   
/* 185 */   public boolean isForceSOAP() { return this.forceSOAP; }
/*     */ 
/*     */ 
/*     */   
/* 189 */   public boolean isUseMTOM() { return this.useMTOM; }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setUseMTOM(boolean useMTOM) { this.useMTOM = useMTOM; }
/*     */ 
/*     */ 
/*     */   
/* 197 */   public boolean isUseSwa() { return this.useSwa; }
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void setUseSwa(boolean useSwa) { this.useSwa = useSwa; }
/*     */ 
/*     */ 
/*     */   
/* 205 */   public long getTimeoutDuration() { return this.timeoutDuration; }
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setTimeoutDuration(long timeoutDuration) { this.timeoutDuration = timeoutDuration; }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public int getTimeoutAction() { return this.timeoutAction; }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void setTimeoutAction(int timeoutAction) { this.timeoutAction = timeoutAction; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 226 */   public int getStatisticsEnable() { return this.statisticsEnable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setStatisticsEnable(int statisticsEnable) { this.statisticsEnable = statisticsEnable; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\endpoint\\utils\EndpointDefinition.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.AbstractListMediator,"/*    */ package org.apache.synapse.mediators;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractListMediator
/*    */   extends AbstractMediator
/*    */   implements ListMediator
/*    */ {
/* 38 */   private static final Log log = LogFactory.getLog(AbstractListMediator.class);
/*    */   
/* 40 */   protected List mediators = new ArrayList();
/*    */   
/*    */   public boolean mediate(MessageContext synCtx) {
/*    */     try {
/* 44 */       log.debug(""Implicit Sequence <"" + getType() + ""> :: mediate()"");
/* 45 */       saveAndSetTraceState(synCtx);
/* 46 */       Iterator it = this.mediators.iterator();
/* 47 */       while (it.hasNext()) {
/* 48 */         Mediator m = it.next();
/* 49 */         if (!m.mediate(synCtx)) {
/* 50 */           return false;
/*    */         }
/*    */       } 
/*    */     } finally {
/*    */       
/* 55 */       restoreTracingState(synCtx);
/*    */     } 
/* 57 */     return true;
/*    */   }
/*    */ 
/*    */   
/* 61 */   public List getList() { return this.mediators; }
/*    */ 
/*    */ 
/*    */   
/* 65 */   public boolean addChild(Mediator m) { return this.mediators.add(m); }
/*    */ 
/*    */ 
/*    */   
/* 69 */   public boolean addAll(List c) { return this.mediators.addAll(c); }
/*    */ 
/*    */ 
/*    */   
/* 73 */   public Mediator getChild(int pos) { return this.mediators.get(pos); }
/*    */ 
/*    */ 
/*    */   
/* 77 */   public boolean removeChild(Mediator m) { return this.mediators.remove(m); }
/*    */ 
/*    */ 
/*    */   
/* 81 */   public Mediator removeChild(int pos) { return this.mediators.remove(pos); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\AbstractListMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.AbstractMediator,"/*    */ package org.apache.synapse.mediators;
/*    */ 
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractMediator
/*    */   implements Mediator
/*    */ {
/* 33 */   protected int parentTraceState = 2;
/*    */ 
/*    */   
/* 36 */   protected int traceState = 2;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public String getType() {
/* 44 */     String cls = getClass().getName();
/* 45 */     int p = cls.lastIndexOf(""."");
/* 46 */     if (p == -1) {
/* 47 */       return cls;
/*    */     }
/* 49 */     return cls.substring(p + 1);
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 58 */   public int getTraceState() { return this.traceState; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 67 */   public void setTraceState(int traceState) { this.traceState = traceState; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void saveAndSetTraceState(MessageContext synCtx) {
/* 77 */     this.parentTraceState = synCtx.getTracingState();
/* 78 */     synCtx.setTracingState(this.traceState);
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public void restoreTracingState(MessageContext synCtx) { synCtx.setTracingState(this.parentTraceState); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 96 */   public boolean shouldTrace(int parentTraceState) { return (this.traceState == 1 || (this.traceState == 2 && parentTraceState == 1)); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\AbstractMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.FilterMediator,"package org.apache.synapse.mediators;
import org.apache.synapse.MessageContext;
public interface FilterMediator extends ListMediator {
  boolean test(MessageContext paramMessageContext);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\FilterMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.GetPropertyFunction,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.jaxen.Context;
/*     */ import org.jaxen.Function;
/*     */ import org.jaxen.FunctionCallException;
/*     */ import org.jaxen.Navigator;
/*     */ import org.jaxen.function.StringFunction;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GetPropertyFunction
/*     */   implements Function
/*     */ {
/*  42 */   private static final Log log = LogFactory.getLog(GetPropertyFunction.class);
/*     */ 
/*     */   
/*  45 */   private MessageContext synCtx = null;
/*     */ 
/*     */   
/*  48 */   public MessageContext getSynCtx() { return this.synCtx; }
/*     */ 
/*     */ 
/*     */   
/*  52 */   public void setSynCtx(MessageContext synCtx) { this.synCtx = synCtx; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object call(Context context, List args) throws FunctionCallException {
/*  66 */     int size = args.size();
/*  67 */     if (size == 0) {
/*  68 */       log.warn(""Property key value for lookup was not specified"");
/*  69 */       return null;
/*  70 */     }  if (size == 1)
/*  71 */       return evaluate(""default"", args.get(0), context.getNavigator()); 
/*  72 */     if (size == 2) {
/*  73 */       return evaluate(args.get(0), args.get(1), context.getNavigator());
/*     */     }
/*  75 */     String msg = ""Invalid arguments for synapse:get-property(prop-name) 0r  synapse:get-property(scope,prop-name) XPath function "";
/*     */     
/*  77 */     log.warn(msg);
/*  78 */     throw new FunctionCallException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object evaluate(Object scopeObject, Object keyObject, Navigator navigator) {
/*  91 */     if (this.synCtx == null) {
/*  92 */       log.warn(""Synapse context has not been set for the XPath extension function'synapse:get-property(prop-name)'"");
/*     */       
/*  94 */       return null;
/*     */     } 
/*     */     
/*  97 */     String scope = StringFunction.evaluate(scopeObject, navigator);
/*  98 */     String key = StringFunction.evaluate(keyObject, navigator);
/*     */     
/* 100 */     if (key == null || """".equals(key)) {
/* 101 */       log.warn(""property-name should be provided when executing synapse:get-property(scope,prop-name) or synapse:get-property(prop-name) Xpath function"");
/*     */ 
/*     */       
/* 104 */       return null;
/*     */     } 
/* 106 */     if (""default"".equals(scope)) {
/*     */       
/* 108 */       if (""To"".equals(key) && this.synCtx.getTo() != null)
/* 109 */         return this.synCtx.getTo().getAddress(); 
/* 110 */       if (""From"".equals(key) && this.synCtx.getFrom() != null)
/* 111 */         return this.synCtx.getFrom().getAddress(); 
/* 112 */       if (""Action"".equals(key) && this.synCtx.getWSAAction() != null)
/* 113 */         return this.synCtx.getWSAAction(); 
/* 114 */       if (""FaultTo"".equals(key) && this.synCtx.getFaultTo() != null)
/* 115 */         return this.synCtx.getFaultTo().getAddress(); 
/* 116 */       if (""ReplyTo"".equals(key) && this.synCtx.getReplyTo() != null)
/* 117 */         return this.synCtx.getReplyTo().getAddress(); 
/* 118 */       if (""MessageID"".equals(key) && this.synCtx.getMessageID() != null) {
/* 119 */         return this.synCtx.getMessageID();
/*     */       }
/* 121 */       Object result = this.synCtx.getProperty(key);
/* 122 */       if (result != null) {
/* 123 */         return result;
/*     */       }
/* 125 */       return this.synCtx.getEntry(key);
/*     */     } 
/*     */ 
/*     */     
/* 129 */     if (""axis2"".equals(scope) && this.synCtx instanceof Axis2MessageContext) {
/* 130 */       MessageContext axis2MessageContext = ((Axis2MessageContext)this.synCtx).getAxis2MessageContext();
/*     */       
/* 132 */       return axis2MessageContext.getConfigurationContext().getProperty(key);
/* 133 */     }  if (""transport"".equals(scope) && this.synCtx instanceof Axis2MessageContext) {
/*     */       
/* 135 */       MessageContext axis2MessageContext = ((Axis2MessageContext)this.synCtx).getAxis2MessageContext();
/*     */       
/* 137 */       Object headers = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*     */       
/* 139 */       if (headers != null && headers instanceof Map) {
/* 140 */         Map headersMap = (HashMap)headers;
/* 141 */         return headersMap.get(key);
/*     */       } 
/*     */     } else {
/* 144 */       log.warn(""Invalid scope : '"" + scope + ""' has been set for the "" + ""synapse:get-property(scope,prop-name) XPath function"");
/*     */     } 
/*     */     
/* 147 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\GetPropertyFunction.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.ListMediator,"package org.apache.synapse.mediators;
import java.util.List;
import org.apache.synapse.Mediator;
public interface ListMediator extends Mediator {
  boolean addChild(Mediator paramMediator);
  boolean addAll(List paramList);
  Mediator getChild(int paramInt);
  boolean removeChild(Mediator paramMediator);
  Mediator removeChild(int paramInt);
  List getList();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\ListMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.MediatorFaultHandler,"/*    */ package org.apache.synapse.mediators;
/*    */ 
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.FaultHandler;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MediatorFaultHandler
/*    */   extends FaultHandler
/*    */ {
/* 38 */   private static final Log log = LogFactory.getLog(MediatorFaultHandler.class);
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 43 */   private Mediator faultMediator = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 52 */   public MediatorFaultHandler(Mediator faultMediator) { this.faultMediator = faultMediator; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void onFault(MessageContext synCtx) throws SynapseException {
/* 64 */     log.debug(""MediatorFaultHandler :: handleFault"");
/* 65 */     this.faultMediator.mediate(synCtx);
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 75 */   public Mediator getFaultMediator() { return this.faultMediator; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public void setFaultMediator(Mediator faultMediator) { this.faultMediator = faultMediator; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\MediatorFaultHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.MediatorProperty,"/*    */ package org.apache.synapse.mediators;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MediatorProperty
/*    */ {
/* 36 */   public static final QName PROPERTY_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"");
/* 37 */   public static final QName ATT_NAME_Q = new QName("""", ""name"");
/* 38 */   public static final QName ATT_VALUE_Q = new QName("""", ""value"");
/* 39 */   public static final QName ATT_EXPR_Q = new QName("""", ""expression"");
/*    */   
/*    */   private String name;
/*    */   
/*    */   private String value;
/*    */   
/*    */   private AXIOMXPath expression;
/*    */ 
/*    */   
/* 48 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 52 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 56 */   public String getValue() { return this.value; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public void setValue(String value) { this.value = value; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public AXIOMXPath getExpression() { return this.expression; }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*    */ 
/*    */ 
/*    */   
/* 72 */   public String getEvaluatedExpression(MessageContext synCtx) { return Axis2MessageContext.getStringValue(this.expression, synCtx); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\MediatorProperty.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.base.SequenceMediator,"/*     */ package org.apache.synapse.mediators.base;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediator
/*     */   extends AbstractListMediator
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(SequenceMediator.class);
/*  48 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*  49 */   private String name = null;
/*  50 */   private String key = null;
/*  51 */   private String errorHandler = null;
/*     */   
/*     */   private boolean dynamic = false;
/*     */   
/*  55 */   private String registryKey = null;
/*     */ 
/*     */   
/*  58 */   private int statisticsEnable = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  73 */     log.debug(""Sequence mediator <"" + ((this.name == null) ? ""anonymous"" : this.name) + ""> :: mediate()"");
/*     */     
/*  75 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  76 */     if (this.key == null) {
/*     */       
/*  78 */       boolean isStatisticsEnable = (1 == this.statisticsEnable);
/*     */       
/*  80 */       if (isStatisticsEnable) {
/*  81 */         Object object = synCtx.getProperty(""sequence_statistics_stack"");
/*     */         
/*  83 */         if (object == null) {
/*  84 */           object = new SequenceStatisticsStack();
/*  85 */           synCtx.setProperty(""sequence_statistics_stack"", object);
/*     */         } 
/*  87 */         String seqName = (this.name == null) ? ""AnonymousSequences"" : this.name;
/*  88 */         boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  89 */         object.put(seqName, System.currentTimeMillis(), !synCtx.isResponse(), isStatisticsEnable, isFault);
/*     */       } 
/*     */       
/*     */       try {
/*  93 */         if (shouldTrace) {
/*  94 */           trace.trace(""Start : Sequence <"" + ((this.name == null) ? ""anonymous"" : this.name) + "">"");
/*     */         }
/*     */ 
/*     */         
/*  98 */         if (this.errorHandler != null) {
/*  99 */           log.debug(""Setting the onError handler for the sequence"");
/* 100 */           synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCtx.getSequence(this.errorHandler)));
/*     */         } 
/*     */ 
/*     */         
/* 104 */         boolean ret = super.mediate(synCtx);
/*     */ 
/*     */         
/* 107 */         Stack faultStack = synCtx.getFaultStack();
/* 108 */         if (this.errorHandler != null && !faultStack.isEmpty()) {
/* 109 */           Object o = faultStack.peek();
/* 110 */           if (o instanceof MediatorFaultHandler && synCtx.getSequence(this.errorHandler).equals(((MediatorFaultHandler)o).getFaultMediator()))
/*     */           {
/*     */             
/* 113 */             faultStack.pop();
/*     */           }
/*     */         } 
/*     */         
/* 117 */         return ret;
/*     */       
/*     */       }
/*     */       finally {
/*     */         
/* 122 */         if (isStatisticsEnable) {
/* 123 */           StatisticsUtils.processSequenceStatistics(synCtx);
/*     */         }
/*     */         
/* 126 */         StatisticsUtils.processProxyServiceStatistics(synCtx);
/* 127 */         if (shouldTrace) {
/* 128 */           trace.trace(""End : Sequence <"" + ((this.name == null) ? ""anonymous"" : this.name) + "">"");
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 133 */     Mediator m = synCtx.getSequence(this.key);
/* 134 */     if (m == null) {
/* 135 */       if (shouldTrace) {
/* 136 */         trace.trace(""Sequence named "" + this.key + "" cannot be found."");
/*     */       }
/* 138 */       handleException(""Sequence named "" + this.key + "" cannot be found."");
/*     */     } else {
/* 140 */       if (shouldTrace) {
/* 141 */         trace.trace(""Executing sequence named "" + this.key);
/*     */       }
/* 143 */       return m.mediate(synCtx);
/*     */     } 
/*     */     
/* 146 */     return false;
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 150 */     log.error(msg);
/* 151 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 155 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public String getErrorHandler() { return this.errorHandler; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setErrorHandler(String errorHandler) { this.errorHandler = errorHandler; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public int getStatisticsEnable() { return this.statisticsEnable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setStatisticsEnable(int statisticsEnable) { this.statisticsEnable = statisticsEnable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public boolean isDynamic() { return this.dynamic; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setDynamic(boolean dynamic) { this.dynamic = dynamic; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public String getRegistryKey() { return this.registryKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setRegistryKey(String registryKey) { this.registryKey = registryKey; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\base\SequenceMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.base.SynapseMediator,"/*    */ package org.apache.synapse.mediators.base;
/*    */ 
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.statistics.StatisticsUtils;
/*    */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediator
/*    */   extends AbstractListMediator
/*    */ {
/* 42 */   private static final Log log = LogFactory.getLog(SynapseMediator.class);
/* 43 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean mediate(MessageContext synCtx) {
/* 52 */     log.debug(""Synapse main mediator :: mediate()"");
/* 53 */     if (synCtx.isResponse()) {
/* 54 */       StatisticsUtils.processAllSequenceStatistics(synCtx);
/*    */     }
/* 56 */     Object object = synCtx.getProperty(""sequence_statistics_stack"");
/*    */     
/* 58 */     if (object == null) {
/* 59 */       object = new SequenceStatisticsStack();
/* 60 */       synCtx.setProperty(""sequence_statistics_stack"", object);
/*    */     } 
/* 62 */     String seqName = ""MainSequence"";
/* 63 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 64 */     object.put(seqName, System.currentTimeMillis(), !synCtx.isResponse(), true, isFault);
/* 65 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*    */     try {
/* 67 */       if (shouldTrace) {
/* 68 */         trace.trace(""Start : Synapse main mediator"");
/*    */       }
/* 70 */       return super.mediate(synCtx);
/*    */     } finally {
/* 72 */       if (shouldTrace)
/* 73 */         trace.trace(""End : Synapse main mediator""); 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\base\SynapseMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.DropMediator,"/*    */ package org.apache.synapse.mediators.builtin;
/*    */ 
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractMediator;
/*    */ import org.apache.synapse.statistics.StatisticsUtils;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediator
/*    */   extends AbstractMediator
/*    */ {
/* 34 */   private static final Log log = LogFactory.getLog(DropMediator.class);
/* 35 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean mediate(MessageContext synCtx) {
/* 44 */     log.debug(""Drop mediator :: mediate()"");
/*    */ 
/*    */     
/* 47 */     StatisticsUtils.processProxyServiceStatistics(synCtx);
/*    */     
/* 49 */     StatisticsUtils.processAllSequenceStatistics(synCtx);
/* 50 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/* 51 */     if (shouldTrace) {
/* 52 */       trace.trace(""Start : Drop mediator"");
/*    */     }
/* 54 */     if (synCtx.getTo() == null) {
/* 55 */       if (shouldTrace) {
/* 56 */         trace.trace(""End : Drop mediator"");
/*    */       }
/* 58 */       return false;
/*    */     } 
/* 60 */     synCtx.setTo(null);
/* 61 */     if (shouldTrace) {
/* 62 */       trace.trace(""End : Drop mediator"");
/*    */     }
/* 64 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\DropMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.LogMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogMediator
/*     */   extends AbstractMediator
/*     */ {
/*  46 */   private static final Log log = LogFactory.getLog(LogMediator.class);
/*  47 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*     */   public static final int CUSTOM = 0;
/*     */   public static final int SIMPLE = 1;
/*     */   public static final int HEADERS = 2;
/*     */   public static final int FULL = 3;
/*     */   public static final String DEFAULT_SEP = "", "";
/*  54 */   private int logLevel = 1;
/*  55 */   private String separator = "", "";
/*  56 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  65 */     log.debug(""Log mediator :: mediate()"");
/*  66 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  67 */     if (shouldTrace) {
/*  68 */       trace.trace(""Start : Log mediator"");
/*     */     }
/*  70 */     String logMessage = getLogMessage(synCtx);
/*  71 */     log.info(logMessage);
/*  72 */     if (shouldTrace) {
/*  73 */       trace.trace(logMessage);
/*  74 */       trace.trace(""End : Log mediator"");
/*     */     } 
/*  76 */     return true;
/*     */   }
/*     */   
/*     */   private String getLogMessage(MessageContext synCtx) {
/*  80 */     switch (this.logLevel) {
/*     */       case 0:
/*  82 */         return getCustomLogMessage(synCtx);
/*     */       case 1:
/*  84 */         return getSimpleLogMessage(synCtx);
/*     */       case 2:
/*  86 */         return getHeadersLogMessage(synCtx);
/*     */       case 3:
/*  88 */         return getFullLogMessage(synCtx);
/*     */     } 
/*  90 */     return ""Invalid log level specified"";
/*     */   }
/*     */ 
/*     */   
/*     */   private String getCustomLogMessage(MessageContext synCtx) {
/*  95 */     StringBuffer sb = new StringBuffer();
/*  96 */     setCustomProperties(sb, synCtx);
/*  97 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getSimpleLogMessage(MessageContext synCtx) {
/* 101 */     StringBuffer sb = new StringBuffer();
/* 102 */     if (synCtx.getTo() != null) {
/* 103 */       sb.append(""To: "" + synCtx.getTo().getAddress());
/*     */     } else {
/* 105 */       sb.append(""To: "");
/* 106 */     }  if (synCtx.getFrom() != null)
/* 107 */       sb.append(this.separator + ""From: "" + synCtx.getFrom().getAddress()); 
/* 108 */     if (synCtx.getWSAAction() != null)
/* 109 */       sb.append(this.separator + ""WSAction: "" + synCtx.getWSAAction()); 
/* 110 */     if (synCtx.getSoapAction() != null)
/* 111 */       sb.append(this.separator + ""SOAPAction: "" + synCtx.getSoapAction()); 
/* 112 */     if (synCtx.getReplyTo() != null)
/* 113 */       sb.append(this.separator + ""ReplyTo: "" + synCtx.getReplyTo().getAddress()); 
/* 114 */     if (synCtx.getMessageID() != null)
/* 115 */       sb.append(this.separator + ""MessageID: "" + synCtx.getMessageID()); 
/* 116 */     setCustomProperties(sb, synCtx);
/* 117 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getHeadersLogMessage(MessageContext synCtx) {
/* 121 */     StringBuffer sb = new StringBuffer();
/* 122 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/* 123 */     if (header != null) {
/* 124 */       Iterator iter = header.examineAllHeaderBlocks();
/* 125 */       while (iter.hasNext()) {
/* 126 */         Object o = iter.next();
/* 127 */         if (o instanceof SOAPHeaderBlock) {
/* 128 */           SOAPHeaderBlock headerBlk = (SOAPHeaderBlock)o;
/* 129 */           sb.append(this.separator + headerBlk.getLocalName() + "" : "" + headerBlk.getText()); continue;
/* 130 */         }  if (o instanceof OMElement) {
/* 131 */           OMElement headerElem = (OMElement)o;
/* 132 */           sb.append(this.separator + headerElem.getLocalName() + "" : "" + headerElem.getText());
/*     */         } 
/*     */       } 
/*     */     } 
/* 136 */     setCustomProperties(sb, synCtx);
/* 137 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getFullLogMessage(MessageContext synCtx) {
/* 141 */     StringBuffer sb = new StringBuffer();
/* 142 */     sb.append(getSimpleLogMessage(synCtx));
/* 143 */     if (synCtx.getEnvelope() != null)
/* 144 */       sb.append(this.separator + ""Envelope: "" + synCtx.getEnvelope()); 
/* 145 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private void setCustomProperties(StringBuffer sb, MessageContext synCtx) {
/* 149 */     if (this.properties != null && !this.properties.isEmpty()) {
/* 150 */       Iterator iter = this.properties.iterator();
/* 151 */       while (iter.hasNext()) {
/* 152 */         MediatorProperty prop = iter.next();
/* 153 */         sb.append(this.separator + prop.getName() + "" = "" + ((prop.getValue() != null) ? prop.getValue() : prop.getEvaluatedExpression(synCtx)));
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 160 */   public int getLogLevel() { return this.logLevel; }
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setLogLevel(int logLevel) { this.logLevel = logLevel; }
/*     */ 
/*     */ 
/*     */   
/* 168 */   public String getSeparator() { return this.separator; }
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setSeparator(String separator) { this.separator = separator; }
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void addProperty(MediatorProperty p) { this.properties.add(p); }
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void addAllProperties(List list) { this.properties.addAll(list); }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public List getProperties() { return this.properties; }
/*     */ 
/*     */   
/*     */   private String trimLeadingSeparator(StringBuffer sb) {
/* 188 */     String retStr = sb.toString();
/* 189 */     if (retStr.startsWith(this.separator)) {
/* 190 */       return retStr.substring(this.separator.length());
/*     */     }
/* 192 */     return retStr;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\LogMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.PropertyMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyMediator
/*     */   extends AbstractMediator
/*     */ {
/*  43 */   private String name = null;
/*     */   
/*  45 */   private String value = null;
/*     */   
/*  47 */   private AXIOMXPath expression = null;
/*     */   
/*  49 */   private String scope = null;
/*     */   
/*     */   public static final int ACTION_SET = 0;
/*     */   
/*     */   public static final int ACTION_REMOVE = 1;
/*  54 */   private int action = 0;
/*  55 */   private static final Log log = LogFactory.getLog(PropertyMediator.class);
/*  56 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext smc) {
/*  67 */     log.debug(""Property mediator :: mediate()"");
/*  68 */     boolean shouldTrace = shouldTrace(smc.getTracingState());
/*  69 */     if (shouldTrace) {
/*  70 */       trace.trace(""Start : Property mediator"");
/*     */     }
/*  72 */     if (this.action == 0) {
/*  73 */       String resultValue = (this.value != null) ? this.value : Axis2MessageContext.getStringValue(this.expression, smc);
/*     */       
/*  75 */       log.debug(""Setting : "" + this.name + "" property (scope:"" + ((this.scope == null) ? ""default"" : this.scope) + "") = "" + resultValue);
/*     */       
/*  77 */       if (shouldTrace) {
/*  78 */         trace.trace(""Property Name : "" + this.name + "" (scope:"" + ((this.scope == null) ? ""default"" : this.scope) + "") set to "" + ((this.value != null) ? ("" resultValue = "" + this.value) : ("" result of expression "" + this.expression + "" = "" + resultValue)));
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*  83 */       if (this.scope == null) {
/*     */         
/*  85 */         smc.setProperty(this.name, resultValue);
/*  86 */       } else if (""default"".equals(this.scope)) {
/*     */         
/*  88 */         smc.setProperty(this.name, resultValue);
/*  89 */       } else if (""axis2"".equals(this.scope) && smc instanceof Axis2MessageContext) {
/*     */ 
/*     */         
/*  92 */         Axis2MessageContext axis2smc = (Axis2MessageContext)smc;
/*  93 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/*  95 */         axis2MessageCtx.setProperty(this.name, resultValue);
/*     */       }
/*  97 */       else if (""transport"".equals(this.scope) && smc instanceof Axis2MessageContext) {
/*     */ 
/*     */         
/* 100 */         Axis2MessageContext axis2smc = (Axis2MessageContext)smc;
/* 101 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 103 */         Object headers = axis2MessageCtx.getProperty(""TRANSPORT_HEADERS"");
/*     */ 
/*     */         
/* 106 */         if (headers != null && headers instanceof Map) {
/* 107 */           Map headersMap = (HashMap)headers;
/* 108 */           headersMap.put(this.name, resultValue);
/*     */         } 
/* 110 */         if (headers == null) {
/* 111 */           Map headersMap = new HashMap();
/* 112 */           headersMap.put(this.name, resultValue);
/* 113 */           axis2MessageCtx.setProperty(""TRANSPORT_HEADERS"", headersMap);
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 118 */         String msg = ""Unsupported scope : "" + this.scope + "" for property mediator"";
/* 119 */         handleException(msg);
/*     */       } 
/*     */     } else {
/* 122 */       log.debug(""Removing : "" + this.name + "" property (scope:"" + ((this.scope == null) ? ""default"" : this.scope) + "") "");
/*     */       
/* 124 */       trace.trace(""Remove - Property Name : "" + this.name + "" (scope:"" + ((this.scope == null) ? ""default"" : this.scope) + "")"");
/*     */       
/* 126 */       if (this.scope == null) {
/*     */         
/* 128 */         Set pros = smc.getPropertyKeySet();
/* 129 */         if (pros != null) {
/* 130 */           pros.remove(this.name);
/*     */         }
/* 132 */       } else if (""default"".equals(this.scope)) {
/*     */         
/* 134 */         Set pros = smc.getPropertyKeySet();
/* 135 */         if (pros != null) {
/* 136 */           pros.remove(this.name);
/*     */         }
/* 138 */       } else if (""axis2"".equals(this.scope) && smc instanceof Axis2MessageContext) {
/*     */ 
/*     */         
/* 141 */         Axis2MessageContext axis2smc = (Axis2MessageContext)smc;
/* 142 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 144 */         Map pros = axis2MessageCtx.getProperties();
/* 145 */         if (pros != null) {
/* 146 */           pros.remove(this.name);
/*     */         }
/* 148 */       } else if (""transport"".equals(this.scope) && smc instanceof Axis2MessageContext) {
/*     */ 
/*     */         
/* 151 */         Axis2MessageContext axis2smc = (Axis2MessageContext)smc;
/* 152 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 154 */         Object headers = axis2MessageCtx.getProperty(""TRANSPORT_HEADERS"");
/*     */         
/* 156 */         if (headers != null && headers instanceof Map) {
/* 157 */           Map headersMap = (HashMap)headers;
/* 158 */           headersMap.remove(this.name);
/*     */         } 
/* 160 */         if (headers == null) {
/* 161 */           log.info(""No Headers found "");
/*     */         }
/*     */       } else {
/*     */         
/* 165 */         String msg = ""Unsupported scope : "" + this.scope + "" for property mediator"";
/* 166 */         handleException(msg);
/*     */       } 
/*     */     } 
/* 169 */     if (shouldTrace) {
/* 170 */       trace.trace(""End : Property mediator"");
/*     */     }
/* 172 */     return true;
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 176 */     log.error(msg);
/* 177 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 181 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 189 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/* 197 */   public AXIOMXPath getExpression() { return this.expression; }
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */   
/* 205 */   public String getScope() { return this.scope; }
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setScope(String scope) { this.scope = scope; }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public int getAction() { return this.action; }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void setAction(int action) { this.action = action; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\PropertyMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.RMSequenceMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RMSequenceMediator
/*     */   extends AbstractMediator
/*     */ {
/*  43 */   private static Log log = LogFactory.getLog(RMSequenceMediator.class);
/*  44 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*  46 */   private AXIOMXPath correlation = null;
/*  47 */   private AXIOMXPath lastMessage = null;
/*  48 */   private Boolean single = null;
/*  49 */   private String version = null;
/*     */   
/*     */   private static final String WSRM_SpecVersion_1_0 = ""Spec_2005_02"";
/*     */   
/*     */   private static final String WSRM_SpecVersion_1_1 = ""Spec_2007_02"";
/*     */   private static final long SEQUENCE_EXPIRY_TIME = 300000L;
/*  55 */   private static Map sequenceMap = Collections.synchronizedMap(new HashMap());
/*     */   
/*     */   public boolean mediate(MessageContext smc) {
/*  58 */     if (log.isDebugEnabled()) {
/*  59 */       log.debug(""RMSequence Mediator  ::  mediate() "");
/*     */     }
/*  61 */     boolean shouldTrace = shouldTrace(smc.getTracingState());
/*  62 */     if (shouldTrace) {
/*  63 */       trace.trace(""Start : RMSequence mediator"");
/*     */     }
/*  65 */     if (!(smc instanceof Axis2MessageContext)) {
/*  66 */       if (log.isDebugEnabled()) {
/*  67 */         log.debug(""RMSequence Mediator  ::  only axis2 message context is supported "");
/*     */       }
/*  69 */       return true;
/*     */     } 
/*  71 */     Axis2MessageContext axis2MessageCtx = (Axis2MessageContext)smc;
/*  72 */     MessageContext orgMessageCtx = axis2MessageCtx.getAxis2MessageContext();
/*     */ 
/*     */     
/*  75 */     cleanupSequenceMap();
/*     */     
/*  77 */     String version = getVersionValue();
/*  78 */     orgMessageCtx.getOptions().setProperty(""Sandesha2RMSpecVersion"", version);
/*     */     
/*  80 */     if (log.isDebugEnabled()) {
/*  81 */       log.debug(""using WS-RM version "" + version);
/*     */     }
/*     */     
/*  84 */     if (isSingle()) {
/*  85 */       String sequenceID = UUIDGenerator.getUUID();
/*  86 */       orgMessageCtx.getOptions().setProperty(""Sandesha2SequenceKey"", sequenceID);
/*     */       
/*  88 */       orgMessageCtx.getOptions().setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, UUIDGenerator.getUUID());
/*     */       
/*  90 */       orgMessageCtx.getOptions().setProperty(""Sandesha2LastMessage"", ""true"");
/*     */       
/*  92 */       return true;
/*     */     } 
/*     */     
/*  95 */     String correlationValue = getCorrelationValue(smc);
/*  96 */     if (log.isDebugEnabled()) {
/*  97 */       log.debug(""correlation value is "" + correlationValue);
/*     */     }
/*     */     
/* 100 */     boolean lastMessage = isLastMessage(smc);
/* 101 */     if (log.isDebugEnabled()) {
/* 102 */       log.debug(""Is this message the last message in sequence: "" + lastMessage);
/*     */     }
/*     */     
/* 105 */     if (!sequenceMap.containsKey(correlationValue)) {
/* 106 */       orgMessageCtx.getOptions().setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, UUIDGenerator.getUUID());
/*     */     }
/*     */ 
/*     */     
/* 110 */     String sequenceID = retrieveSequenceID(correlationValue);
/* 111 */     orgMessageCtx.getOptions().setProperty(""Sandesha2SequenceKey"", sequenceID);
/*     */     
/* 113 */     if (log.isDebugEnabled()) {
/* 114 */       log.debug(""RMSequence Mediator  ::  using sequence "" + sequenceID);
/*     */     }
/*     */     
/* 117 */     if (lastMessage) {
/* 118 */       orgMessageCtx.getOptions().setProperty(""Sandesha2LastMessage"", ""true"");
/*     */       
/* 120 */       sequenceMap.remove(correlationValue);
/*     */     } 
/*     */     
/* 123 */     if (shouldTrace) {
/* 124 */       trace.trace(""End : RMSequence mediator"");
/*     */     }
/* 126 */     return true;
/*     */   }
/*     */   
/*     */   private String retrieveSequenceID(String correlationValue) {
/* 130 */     String sequenceID = null;
/* 131 */     if (!sequenceMap.containsKey(correlationValue)) {
/* 132 */       sequenceID = UUIDGenerator.getUUID();
/* 133 */       if (log.isDebugEnabled()) {
/* 134 */         log.debug(""setting sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
/*     */       }
/* 136 */       Entry sequenceEntry = new Entry();
/* 137 */       sequenceEntry.setValue(sequenceID);
/* 138 */       sequenceEntry.setExpiryTime(System.currentTimeMillis() + 300000L);
/* 139 */       sequenceMap.put(correlationValue, sequenceEntry);
/*     */     } else {
/* 141 */       sequenceID = (String)((Entry)sequenceMap.get(correlationValue)).getValue();
/* 142 */       if (log.isDebugEnabled()) {
/* 143 */         log.debug(""got sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
/*     */       }
/*     */     } 
/* 146 */     return sequenceID;
/*     */   }
/*     */   
/*     */   private String getCorrelationValue(MessageContext smc) {
/* 150 */     OMElement node = null;
/*     */     try {
/* 152 */       node = (OMElement)getCorrelation().selectSingleNode(smc.getEnvelope());
/* 153 */     } catch (JaxenException e) {
/* 154 */       log.error(""XPath error : "" + e.getMessage());
/* 155 */       throw new SynapseException(""XPath error : "" + e.getMessage());
/*     */     } 
/* 157 */     if (node == null) {
/* 158 */       log.debug(""XPath expression did not return any node"");
/* 159 */       throw new SynapseException(""XPath expression did not return any node"");
/*     */     } 
/* 161 */     return node.getText();
/*     */   }
/*     */   
/*     */   private String getVersionValue() {
/* 165 */     if (""1.1"".equals(getVersion())) {
/* 166 */       return ""Spec_2007_02"";
/*     */     }
/* 168 */     return ""Spec_2005_02"";
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean isLastMessage(MessageContext smc) {
/* 173 */     if (getLastMessage() == null) {
/* 174 */       return false;
/*     */     }
/*     */     try {
/* 177 */       return getLastMessage().booleanValueOf(smc.getEnvelope());
/* 178 */     } catch (JaxenException e) {
/* 179 */       log.error(""XPath error : "" + e.getMessage());
/* 180 */       throw new SynapseException(""XPath error : "" + e.getMessage());
/*     */     } 
/*     */   }
/*     */   
/*     */   private synchronized void cleanupSequenceMap() {
/* 185 */     Iterator itKey = sequenceMap.keySet().iterator();
/* 186 */     while (itKey.hasNext()) {
/* 187 */       Object key = itKey.next();
/* 188 */       Entry sequenceEntry = (Entry)sequenceMap.get(key);
/* 189 */       if (sequenceEntry.isExpired()) {
/* 190 */         sequenceMap.remove(key);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean isSingle() {
/* 196 */     if (getSingle() != null && getSingle().booleanValue()) {
/* 197 */       return true;
/*     */     }
/*     */     
/* 200 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 205 */   public AXIOMXPath getCorrelation() { return this.correlation; }
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setCorrelation(AXIOMXPath correlation) { this.correlation = correlation; }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public AXIOMXPath getLastMessage() { return this.lastMessage; }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void setLastMessage(AXIOMXPath lastMessage) { this.lastMessage = lastMessage; }
/*     */ 
/*     */ 
/*     */   
/* 221 */   public Boolean getSingle() { return this.single; }
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setSingle(Boolean single) { this.single = single; }
/*     */ 
/*     */ 
/*     */   
/* 229 */   public String getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void setVersion(String version) { this.version = version; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\RMSequenceMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.SendMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediator
/*     */   extends AbstractMediator
/*     */ {
/*  42 */   private static final Log log = LogFactory.getLog(SendMediator.class);
/*  43 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*  45 */   private Endpoint endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  55 */     log.debug(""Send mediator :: mediate()"");
/*     */     
/*  57 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*     */     try {
/*  59 */       if (shouldTrace) {
/*  60 */         trace.trace(""Start : Send mediator"");
/*  61 */         trace.trace(""Sending Message :: "" + synCtx.getEnvelope());
/*     */       } 
/*     */       
/*  64 */       if (this.endpoint == null) {
/*  65 */         if (log.isDebugEnabled()) {
/*  66 */           log.debug(""Sending message using implicit message properties.."");
/*  67 */           log.debug(""Sending To: "" + ((synCtx.getTo() != null) ? synCtx.getTo().getAddress() : ""null""));
/*     */           
/*  69 */           log.debug(""SOAPAction: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */           
/*  71 */           log.debug(""Body : \n"" + synCtx.getEnvelope());
/*     */         } 
/*     */         
/*  74 */         if (synCtx.isResponse()) {
/*  75 */           Axis2MessageContext axis2MsgCtx = (Axis2MessageContext)synCtx;
/*  76 */           OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
/*  77 */           Object o = opCtx.getProperty(""endpointList"");
/*  78 */           if (o != null) {
/*     */ 
/*     */             
/*  81 */             List endpointList = (List)o;
/*  82 */             Object e = endpointList.remove(0);
/*  83 */             if (e != null && e instanceof SALoadbalanceEndpoint) {
/*  84 */               SALoadbalanceEndpoint saLoadbalanceEndpoint = (SALoadbalanceEndpoint)e;
/*  85 */               saLoadbalanceEndpoint.updateSession(synCtx, endpointList);
/*     */             } 
/*     */           } 
/*     */         } 
/*  89 */         synCtx.getEnvironment().send(null, synCtx);
/*     */       } else {
/*     */         
/*  92 */         this.endpoint.send(synCtx);
/*     */       } 
/*     */     } finally {
/*     */       
/*  96 */       if (shouldTrace) {
/*  97 */         trace.trace(""End : Send mediator"");
/*     */       }
/*     */     } 
/* 100 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 104 */   public Endpoint getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setEndpoint(Endpoint endpoint) { this.endpoint = endpoint; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\SendMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.ValidateMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.stream.XMLOutputFactory;
/*     */ import javax.xml.stream.XMLStreamWriter;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.sax.SAXSource;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import javax.xml.validation.Schema;
/*     */ import javax.xml.validation.SchemaFactory;
/*     */ import javax.xml.validation.Validator;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.Util;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ import org.xml.sax.XMLReader;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ import org.xml.sax.helpers.XMLReaderFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ValidateMediator
/*     */   extends AbstractListMediator
/*     */ {
/*  65 */   private static final Log log = LogFactory.getLog(ValidateMediator.class);
/*  66 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String DEFAULT_SCHEMA_LANGUAGE = ""http://www.w3.org/2001/XMLSchema"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   private List schemaKeys = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   private AXIOMXPath source = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   private Validator validator = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   private final Object validatorLock = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   private final MyErrorHandler errorHandler = new MyErrorHandler();
/*     */ 
/*     */   
/*     */   private static final String DEFAULT_XPATH = ""//s11:Envelope/s11:Body/child::*[position()=1] | //s12:Envelope/s12:Body/child::*[position()=1]"";
/*     */ 
/*     */   
/*     */   public ValidateMediator() {
/*     */     try {
/* 113 */       this.source = new AXIOMXPath(""//s11:Envelope/s11:Body/child::*[position()=1] | //s12:Envelope/s12:Body/child::*[position()=1]"");
/* 114 */       this.source.addNamespace(""s11"", ""http://schemas.xmlsoap.org/soap/envelope/"");
/* 115 */       this.source.addNamespace(""s12"", ""http://www.w3.org/2003/05/soap-envelope"");
/* 116 */     } catch (JaxenException e) {
/* 117 */       handleException(""Error creating source XPath expression"", (Exception)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMNode getValidateSource(MessageContext synCtx) {
/*     */     try {
/* 131 */       Object o = this.source.evaluate(synCtx.getEnvelope());
/* 132 */       if (o instanceof OMNode)
/* 133 */         return (OMNode)o; 
/* 134 */       if (o instanceof List && !((List)o).isEmpty()) {
/* 135 */         return ((List)o).get(0);
/*     */       }
/* 137 */       handleException(""The evaluation of the XPath expression "" + this.source + "" must result in an OMNode"");
/*     */     
/*     */     }
/* 140 */     catch (JaxenException e) {
/* 141 */       handleException(""Error evaluating XPath "" + this.source + "" on message"");
/*     */     } 
/* 143 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/* 148 */     log.debug(""ValidateMediator - Validate mediator mediate()"");
/* 149 */     ByteArrayInputStream baisFromSource = null;
/* 150 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/* 151 */     if (shouldTrace) {
/* 152 */       trace.trace(""Start : Validate mediator"");
/*     */     }
/*     */     
/*     */     try {
/* 156 */       ByteArrayOutputStream baosForSource = new ByteArrayOutputStream();
/* 157 */       XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().createXMLStreamWriter(baosForSource);
/*     */ 
/*     */ 
/*     */       
/* 161 */       OMNode validateSource = getValidateSource(synCtx);
/* 162 */       if (shouldTrace) {
/* 163 */         trace.trace(""Validate Source : "" + validateSource.toString());
/*     */       }
/* 165 */       validateSource.serialize(xsWriterForSource);
/* 166 */       baisFromSource = new ByteArrayInputStream(baosForSource.toByteArray());
/*     */     }
/* 168 */     catch (Exception e) {
/* 169 */       handleException(""Error accessing source element for validation : "" + this.source, e);
/*     */     } 
/*     */     
/*     */     try {
/* 173 */       XMLReader reader = XMLReaderFactory.createXMLReader();
/* 174 */       SAXSource saxSrc = new SAXSource(reader, new InputSource(baisFromSource));
/*     */       
/* 176 */       synchronized (this.validatorLock) {
/*     */ 
/*     */         
/* 179 */         initialize(synCtx);
/*     */ 
/*     */         
/* 182 */         this.validator.validate(saxSrc);
/*     */         
/* 184 */         if (this.errorHandler.isValidationError()) {
/* 185 */           if (log.isDebugEnabled()) {
/* 186 */             log.debug(""Validation of element returned by XPath : "" + this.source + "" failed against the given schemas with Message : "" + this.errorHandler.getSaxParseException().getMessage() + "" Executing 'on-fail' sequence"");
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 191 */             log.debug(""Failed message envelope : "" + synCtx.getEnvelope());
/*     */           } 
/*     */           
/* 194 */           if (shouldTrace) {
/* 195 */             trace.trace(""Validation failed. Invoking the \""on-fail\"" sequence of mediators"");
/*     */           }
/*     */           
/* 198 */           return super.mediate(synCtx);
/*     */         } 
/*     */       } 
/* 201 */     } catch (SAXException e) {
/* 202 */       handleException(""Error validating "" + this.source + "" element"" + e.getMessage(), e);
/* 203 */     } catch (IOException e) {
/* 204 */       handleException(""Error validating "" + this.source + "" element"" + e.getMessage(), e);
/*     */     } 
/*     */     
/* 207 */     log.debug(""validation of element returned by the XPath expression : "" + this.source + "" succeeded against the given schemas and the current message"");
/*     */     
/* 209 */     if (shouldTrace) {
/* 210 */       trace.trace(""End : Validate mediator"");
/*     */     }
/* 212 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize(MessageContext msgCtx) {
/* 221 */     boolean reCreate = false;
/*     */ 
/*     */     
/* 224 */     Iterator iter = this.schemaKeys.iterator();
/* 225 */     while (iter.hasNext()) {
/* 226 */       String propKey = iter.next();
/* 227 */       Entry dp = msgCtx.getConfiguration().getEntryDefinition(propKey);
/* 228 */       if (dp != null && dp.isDynamic() && (
/* 229 */         !dp.isCached() || dp.isExpired())) {
/* 230 */         reCreate = true;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 236 */     if (!reCreate && this.validator != null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/*     */     try {
/* 242 */       SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
/*     */       
/* 244 */       this.errorHandler.setValidationError(false);
/* 245 */       factory.setErrorHandler(this.errorHandler);
/*     */ 
/*     */       
/* 248 */       iter = this.properties.iterator();
/* 249 */       while (iter.hasNext()) {
/* 250 */         MediatorProperty prop = (MediatorProperty)iter.next();
/* 251 */         factory.setFeature(prop.getName(), (prop.getValue() != null && ""true"".equals(prop.getValue())));
/*     */       } 
/*     */ 
/*     */       
/* 255 */       Schema schema = null;
/*     */       
/* 257 */       StreamSource[] sources = new StreamSource[this.schemaKeys.size()];
/* 258 */       iter = this.schemaKeys.iterator();
/* 259 */       int i = 0;
/* 260 */       while (iter.hasNext()) {
/* 261 */         String propName = iter.next();
/* 262 */         sources[i++] = Util.getStreamSource(msgCtx.getEntry(propName));
/*     */       } 
/* 264 */       schema = factory.newSchema((Source[])sources);
/*     */ 
/*     */ 
/*     */       
/* 268 */       this.validator = schema.newValidator();
/* 269 */       this.validator.setErrorHandler(this.errorHandler);
/*     */     }
/* 271 */     catch (SAXException e) {
/* 272 */       handleException(""Error creating Validator"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private class MyErrorHandler
/*     */     extends DefaultHandler
/*     */   {
/*     */     private boolean validationError = false;
/*     */     
/* 282 */     private SAXParseException saxParseException = null;
/*     */     
/*     */     public void error(SAXParseException exception) throws SAXException {
/* 285 */       this.validationError = true;
/* 286 */       this.saxParseException = exception;
/*     */     }
/*     */     private final ValidateMediator this$0;
/*     */     public void fatalError(SAXParseException exception) throws SAXException {
/* 290 */       this.validationError = true;
/* 291 */       this.saxParseException = exception;
/*     */     }
/*     */ 
/*     */     
/*     */     public void warning(SAXParseException exception) throws SAXException {}
/*     */ 
/*     */     
/* 298 */     public boolean isValidationError() { return this.validationError; }
/*     */ 
/*     */ 
/*     */     
/* 302 */     public SAXParseException getSaxParseException() { return this.saxParseException; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 310 */     public void setValidationError(boolean validationError) { this.validationError = validationError; }
/*     */     
/*     */     private MyErrorHandler() {} }
/*     */   
/*     */   private void handleException(String msg) {
/* 315 */     log.error(msg);
/* 316 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 320 */     log.error(msg, e);
/* 321 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getProperty(String key) {
/* 334 */     Iterator iter = this.properties.iterator();
/* 335 */     while (iter.hasNext()) {
/* 336 */       MediatorProperty prop = iter.next();
/* 337 */       if (key.equals(prop.getName())) {
/* 338 */         return prop.getValue();
/*     */       }
/*     */     } 
/* 341 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProperty(String key, Object value) {
/* 352 */     MediatorProperty prop = new MediatorProperty();
/* 353 */     prop.setName(key);
/* 354 */     prop.setValue(value.toString());
/* 355 */     this.properties.add(prop);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addAllProperties(List list) {
/* 364 */     Iterator iter = list.iterator();
/* 365 */     while (iter.hasNext()) {
/* 366 */       Object o = iter.next();
/* 367 */       if (o instanceof MediatorProperty) {
/* 368 */         MediatorProperty prop = (MediatorProperty)o;
/* 369 */         setProperty(prop.getName(), prop.getValue()); continue;
/*     */       } 
/* 371 */       handleException(""Attempt to set invalid property type. Expected MediatorProperty type got "" + o.getClass().getName());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 384 */   public void setSchemaKeys(List schemaKeys) { this.schemaKeys = schemaKeys; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 392 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 400 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 408 */   public List getSchemaKeys() { return this.schemaKeys; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 416 */   public List getProperties() { return this.properties; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\builtin\ValidateMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.ext.ClassMediator,"/*     */ package org.apache.synapse.mediators.ext;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ClassMediator
/*     */   extends AbstractMediator
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(ClassMediator.class);
/*  46 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*  48 */   private Class clazz = null;
/*  49 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  59 */     log.debug(""Class mediator <"" + this.clazz.getName() + "">:: mediate()"");
/*  60 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  61 */     if (shouldTrace) {
/*  62 */       trace.trace(""Start : Class mediator"");
/*     */     }
/*     */     try {
/*     */       Mediator m;
/*     */       try {
/*  67 */         m = this.clazz.newInstance();
/*  68 */       } catch (Exception e) {
/*  69 */         String msg = ""Error while creating an instance of the specified mediator class : "" + this.clazz.getName();
/*  70 */         if (shouldTrace)
/*  71 */           trace.trace(msg); 
/*  72 */         log.error(msg, e);
/*  73 */         throw new SynapseException(msg, e);
/*     */       } 
/*     */       
/*  76 */       setProperties(m, synCtx, shouldTrace);
/*  77 */       if (shouldTrace) {
/*  78 */         trace.trace(""Executing an instance of the specified class : "" + this.clazz.getName());
/*     */       }
/*  80 */       return m.mediate(synCtx);
/*     */     } finally {
/*  82 */       if (shouldTrace) {
/*  83 */         trace.trace(""End : Class mediator"");
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setProperties(Mediator m, MessageContext synCtx, boolean shouldTrace) {
/*  95 */     Iterator iter = this.properties.iterator();
/*  96 */     while (iter.hasNext()) {
/*     */       
/*  98 */       MediatorProperty mProp = iter.next();
/*     */       
/* 100 */       String mName = ""set"" + Character.toUpperCase(mProp.getName().charAt(0)) + mProp.getName().substring(1);
/* 101 */       String value = (mProp.getValue() != null) ? mProp.getValue() : Axis2MessageContext.getStringValue(mProp.getExpression(), synCtx);
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 106 */         if (value != null) {
/* 107 */           Method method = m.getClass().getMethod(mName, new Class[] { String.class });
/* 108 */           log.debug(""Setting property :: invoking method "" + mName + ""("" + value + "")"");
/* 109 */           if (shouldTrace) {
/* 110 */             trace.trace(""Setting property :: invoking method "" + mName + ""("" + value + "")"");
/*     */           }
/* 112 */           method.invoke(m, new Object[] { value });
/*     */         } 
/* 114 */       } catch (Exception e) {
/* 115 */         String msg = ""Error setting property : "" + mProp.getName() + "" as a String property into class"" + "" mediator : "" + m.getClass() + "" : "" + e.getMessage();
/*     */         
/* 117 */         log.error(msg);
/* 118 */         if (shouldTrace) {
/* 119 */           trace.trace(msg);
/*     */         }
/* 121 */         throw new SynapseException(msg, e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 127 */   public void setClazz(Class clazz) { this.clazz = clazz; }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public Class getClazz() { return this.clazz; }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void addProperty(MediatorProperty p) { this.properties.add(p); }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void addAllProperties(List list) { this.properties.addAll(list); }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public List getProperties() { return this.properties; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\ext\ClassMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.FilterMediator,"/*     */ package org.apache.synapse.mediators.filters;
/*     */ 
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.FilterMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterMediator
/*     */   extends AbstractListMediator
/*     */   implements FilterMediator
/*     */ {
/*  40 */   private static final Log log = LogFactory.getLog(FilterMediator.class);
/*  41 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*  42 */   private AXIOMXPath source = null;
/*  43 */   private Pattern regex = null;
/*  44 */   private AXIOMXPath xpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  53 */     log.debug(""Filter mediator mediate()"");
/*     */     
/*  55 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*     */     try {
/*  57 */       if (shouldTrace) {
/*  58 */         trace.trace(""Start : Filter mediator "");
/*     */       }
/*  60 */       if (test(synCtx)) {
/*  61 */         log.debug(""Filter condition satisfied.. executing child mediators"");
/*  62 */         return super.mediate(synCtx);
/*     */       } 
/*  64 */       log.debug(""Filter condition failed.. will skip executing child mediators"");
/*  65 */       return true;
/*     */     } finally {
/*     */       
/*  68 */       if (shouldTrace) {
/*  69 */         trace.trace(""End : Filter mediator "");
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean test(MessageContext synCtx) {
/*     */     try {
/*  85 */       if (this.xpath != null) {
/*  86 */         log.debug(""Evaluating XPath expression : "" + this.xpath);
/*  87 */         if (shouldTrace(synCtx.getTracingState())) {
/*  88 */           trace.trace(""XPath expression : "" + this.xpath + "" evaluates to : "" + this.xpath.booleanValueOf(synCtx.getEnvelope()));
/*     */         }
/*     */         
/*  91 */         return this.xpath.booleanValueOf(synCtx.getEnvelope());
/*     */       } 
/*  93 */       if (this.source != null && this.regex != null) {
/*  94 */         log.debug(""Evaluating regular expression : "" + this.regex.pattern() + "" against source : "" + this.source);
/*  95 */         String sourceString = Axis2MessageContext.getStringValue(this.source, synCtx);
/*  96 */         if (sourceString == null) {
/*  97 */           log.debug(""Source String has been evaluated to Null"");
/*  98 */           return false;
/*     */         } 
/* 100 */         if (shouldTrace(synCtx.getTracingState())) {
/* 101 */           trace.trace(""Regular expression : "" + this.regex.pattern() + "" and Source "" + sourceString + "" matches : "" + this.regex.matcher(sourceString).matches());
/*     */         }
/*     */         
/* 104 */         Matcher matcher = this.regex.matcher(sourceString);
/* 105 */         if (matcher == null) {
/* 106 */           log.warn(""Can not find a Regex Pattren Matcher"");
/* 107 */           return false;
/*     */         } 
/* 109 */         return matcher.matches();
/*     */       } 
/*     */       
/* 112 */       log.error(""Invalid configuration specified"");
/* 113 */       return false;
/*     */     
/*     */     }
/* 116 */     catch (JaxenException e) {
/* 117 */       log.error(""XPath error : "" + e.getMessage());
/* 118 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public Pattern getRegex() { return this.regex; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setRegex(Pattern regex) { this.regex = regex; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public AXIOMXPath getXpath() { return this.xpath; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setXpath(AXIOMXPath xpath) { this.xpath = xpath; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\filters\FilterMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.InMediator,"/*    */ package org.apache.synapse.mediators.filters;
/*    */ 
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.mediators.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediator
/*    */   extends AbstractListMediator
/*    */   implements FilterMediator
/*    */ {
/* 36 */   private static final Log log = LogFactory.getLog(InMediator.class);
/* 37 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean mediate(MessageContext synCtx) {
/* 46 */     log.debug(""In mediator mediate()"");
/* 47 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*    */     try {
/* 49 */       if (shouldTrace) {
/* 50 */         trace.trace(""Start : In mediator"");
/*    */       }
/* 52 */       if (test(synCtx)) {
/* 53 */         log.debug(""Current message is incoming.. executing child mediators"");
/* 54 */         return super.mediate(synCtx);
/*    */       } 
/* 56 */       log.debug(""Current message is not incoming.. skipping child mediators"");
/* 57 */       return true;
/*    */     } finally {
/*    */       
/* 60 */       if (shouldTrace) {
/* 61 */         trace.trace(""End : In mediator"");
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 73 */   public boolean test(MessageContext synCtx) { return !synCtx.isResponse(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\filters\InMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.OutMediator,"/*    */ package org.apache.synapse.mediators.filters;
/*    */ 
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.mediators.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediator
/*    */   extends AbstractListMediator
/*    */   implements FilterMediator
/*    */ {
/* 36 */   private static final Log log = LogFactory.getLog(OutMediator.class);
/* 37 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean mediate(MessageContext synCtx) {
/* 46 */     log.debug(""Out mediator mediate()"");
/* 47 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*    */     try {
/* 49 */       if (shouldTrace) {
/* 50 */         trace.trace(""Start : Out mediator"");
/*    */       }
/*    */       
/* 53 */       if (test(synCtx)) {
/* 54 */         log.debug(""Current message is outgoing.. executing child mediators"");
/* 55 */         return super.mediate(synCtx);
/*    */       } 
/* 57 */       log.debug(""Current message is not outgoing.. skipping child mediators"");
/* 58 */       return true;
/*    */     } finally {
/*    */       
/* 61 */       if (shouldTrace) {
/* 62 */         trace.trace(""End : Out mediator"");
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 74 */   public boolean test(MessageContext synCtx) { return synCtx.isResponse(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\filters\OutMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.SwitchMediator,"/*     */ package org.apache.synapse.mediators.filters;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.config.xml.SwitchCase;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchMediator
/*     */   extends AbstractMediator
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(SwitchMediator.class);
/*  45 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*  48 */   private AXIOMXPath source = null;
/*     */   
/*  50 */   private List cases = new ArrayList();
/*     */   
/*  52 */   private SwitchCase defaultCase = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  62 */     log.debug(""Switch mediator :: mediate()"");
/*  63 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  64 */     if (shouldTrace) {
/*  65 */       trace.trace(""Start : Switch mediator"");
/*     */     }
/*  67 */     String sourceText = Axis2MessageContext.getStringValue(this.source, synCtx);
/*  68 */     log.debug(""Applying switch case regex patterns against evaluated source value : "" + sourceText);
/*     */     try {
/*  70 */       saveAndSetTraceState(synCtx);
/*  71 */       if (shouldTrace) {
/*  72 */         trace.trace(""Source Value : "" + sourceText);
/*  73 */         trace.trace(""Start Case mediator list"");
/*     */       } 
/*  75 */       if (sourceText != null) {
/*  76 */         Iterator iter = this.cases.iterator();
/*  77 */         while (iter.hasNext()) {
/*  78 */           SwitchCase swCase = iter.next();
/*  79 */           if (swCase != null && 
/*  80 */             swCase.matches(sourceText)) {
/*  81 */             if (shouldTrace) {
/*  82 */               trace.trace(""Executing case for : "" + swCase.getRegex());
/*     */             }
/*  84 */             return swCase.mediate(synCtx);
/*     */           } 
/*     */         } 
/*     */         
/*  88 */         if (shouldTrace) {
/*  89 */           trace.trace(""End Case mediator list"");
/*     */         }
/*     */       } else {
/*  92 */         log.warn(""Source has been evaluated to Null...Default Case will be run"");
/*     */       } 
/*  94 */       if (this.defaultCase != null) {
/*  95 */         log.debug(""Executing default case"");
/*  96 */         if (shouldTrace) {
/*  97 */           trace.trace(""Executing default case"");
/*     */         }
/*  99 */         return this.defaultCase.mediate(synCtx);
/*     */       } 
/*     */     } finally {
/* 102 */       restoreTracingState(synCtx);
/* 103 */       if (shouldTrace) {
/* 104 */         trace.trace(""End : Switch mediator"");
/*     */       }
/*     */     } 
/* 107 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void addCase(SwitchCase m) { this.cases.add(m); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public List getCases() { return this.cases; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public SwitchCase getDefaultCase() { return this.defaultCase; }
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void setDefaultCase(SwitchCase defaultCase) { this.defaultCase = defaultCase; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\filters\SwitchMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.FaultMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMDocument;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPFault;
/*     */ import org.apache.axiom.soap.SOAPFaultCode;
/*     */ import org.apache.axiom.soap.SOAPFaultDetail;
/*     */ import org.apache.axiom.soap.SOAPFaultNode;
/*     */ import org.apache.axiom.soap.SOAPFaultReason;
/*     */ import org.apache.axiom.soap.SOAPFaultRole;
/*     */ import org.apache.axiom.soap.SOAPFaultText;
/*     */ import org.apache.axiom.soap.SOAPFaultValue;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediator
/*     */   extends AbstractMediator
/*     */ {
/*  51 */   private static final Log log = LogFactory.getLog(FaultMediator.class);
/*  52 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*     */   public static final String WSA_ACTION = ""Action"";
/*     */   
/*     */   public static final int SOAP11 = 1;
/*     */   
/*     */   public static final int SOAP12 = 2;
/*     */   
/*     */   private int soapVersion;
/*     */   
/*  63 */   private QName faultCodeValue = null;
/*     */   
/*  65 */   private AXIOMXPath faultCodeExpr = null;
/*     */   
/*  67 */   private String faultReasonValue = null;
/*     */   
/*  69 */   private AXIOMXPath faultReasonExpr = null;
/*     */   
/*  71 */   private URI faultNode = null;
/*     */   
/*  73 */   private URI faultRole = null;
/*     */   
/*  75 */   private String faultDetail = null;
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  78 */     log.debug(""Fault mediator mediate()"");
/*  79 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  80 */     SOAPEnvelope envelop = synCtx.getEnvelope();
/*  81 */     if (shouldTrace) {
/*  82 */       trace.trace(""Start : Fault mediator"");
/*     */     }
/*  84 */     switch (this.soapVersion) {
/*     */       case 1:
/*  86 */         return makeSOAPFault(synCtx, 1, shouldTrace);
/*     */       case 2:
/*  88 */         return makeSOAPFault(synCtx, 2, shouldTrace);
/*     */     } 
/*  90 */     if (envelop != null) {
/*  91 */       if (""http://www.w3.org/2003/05/soap-envelope"".equals(envelop.getNamespace().getNamespaceURI())) {
/*     */         
/*  93 */         this.soapVersion = 2;
/*  94 */         return makeSOAPFault(synCtx, 2, shouldTrace);
/*     */       } 
/*  96 */       this.soapVersion = 1;
/*  97 */       return makeSOAPFault(synCtx, 1, shouldTrace);
/*     */     } 
/*     */     
/* 100 */     return makeSOAPFault(synCtx, 1, shouldTrace);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean makeSOAPFault(MessageContext synCtx, int soapVersion, boolean shouldTrace) {
/* 108 */     log.debug(""Creating a SOAP fault using SOAP "" + ((soapVersion == 1) ? ""1.1"" : ""1.2""));
/*     */     
/* 110 */     SOAPFactory factory = (soapVersion == 1) ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */ 
/*     */ 
/*     */     
/* 114 */     OMDocument soapFaultDocument = factory.createOMDocument();
/* 115 */     SOAPEnvelope faultEnvelope = factory.getDefaultFaultEnvelope();
/* 116 */     soapFaultDocument.addChild((OMNode)faultEnvelope);
/*     */ 
/*     */     
/* 119 */     SOAPFault fault = faultEnvelope.getBody().getFault();
/* 120 */     if (fault == null) {
/* 121 */       fault = factory.createSOAPFault();
/*     */     }
/*     */ 
/*     */     
/* 125 */     setFaultCode(synCtx, factory, fault);
/* 126 */     setFaultResaon(synCtx, factory, fault);
/* 127 */     setFaultNode(factory, fault);
/* 128 */     setFaultRole(factory, fault);
/* 129 */     setFaultDetail(factory, fault);
/*     */ 
/*     */     
/* 132 */     Iterator iter = synCtx.getEnvelope().getHeader().examineAllHeaderBlocks();
/* 133 */     if (iter.hasNext()) {
/* 134 */       while (iter.hasNext()) {
/* 135 */         Object o = iter.next();
/* 136 */         if (o instanceof SOAPHeaderBlock) {
/* 137 */           SOAPHeaderBlock header = (SOAPHeaderBlock)o;
/* 138 */           faultEnvelope.getHeader().addChild((OMNode)header); continue;
/* 139 */         }  if (o instanceof org.apache.axiom.om.OMElement) {
/* 140 */           faultEnvelope.getHeader().addChild((OMNode)o);
/*     */         }
/*     */       } 
/*     */     }
/* 144 */     log.debug(""The fault message as : "" + fault);
/*     */     
/*     */     try {
/* 147 */       if (shouldTrace) {
/* 148 */         trace.trace(""Original SOAP Message : "" + synCtx.getEnvelope().toString());
/* 149 */         trace.trace(""Fault Message created : "" + faultEnvelope.toString());
/*     */       } 
/* 151 */       synCtx.setEnvelope(faultEnvelope);
/* 152 */     } catch (AxisFault af) {
/* 153 */       String msg = ""Error replacing SOAP envelope with a fault envelope "" + af.getMessage();
/* 154 */       log.error(msg);
/* 155 */       throw new SynapseException((Throwable)af);
/*     */     } 
/*     */     
/* 158 */     if (synCtx.getFaultTo() != null) {
/* 159 */       synCtx.setTo(synCtx.getFaultTo());
/* 160 */     } else if (synCtx.getReplyTo() != null) {
/* 161 */       synCtx.setTo(synCtx.getReplyTo());
/*     */     } else {
/* 163 */       synCtx.setTo(null);
/*     */     } 
/*     */     
/* 166 */     if (shouldTrace) {
/* 167 */       trace.trace(""End : Fault mediator"");
/*     */     }
/* 169 */     return true;
/*     */   }
/*     */   
/*     */   private void setFaultCode(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {
/*     */     SOAPFaultValue value;
/* 174 */     QName fault_code = null;
/*     */     
/* 176 */     if (this.faultCodeValue == null && this.faultCodeExpr == null) {
/* 177 */       handleException(""A valid fault code QName value or expression is required"");
/* 178 */     } else if (this.faultCodeValue != null) {
/* 179 */       fault_code = this.faultCodeValue;
/*     */     } else {
/* 181 */       fault_code = QName.valueOf(Axis2MessageContext.getStringValue(this.faultCodeExpr, synCtx));
/*     */     } 
/*     */     
/* 184 */     SOAPFaultCode code = factory.createSOAPFaultCode();
/* 185 */     switch (this.soapVersion) {
/*     */       case 1:
/* 187 */         code.setText(fault_code);
/*     */         break;
/*     */       case 2:
/* 190 */         value = factory.createSOAPFaultValue(code);
/* 191 */         value.setText(fault_code);
/*     */         break;
/*     */     } 
/* 194 */     fault.setCode(code);
/*     */   }
/*     */   private void setFaultResaon(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {
/*     */     SOAPFaultText text;
/* 198 */     String reasonString = null;
/*     */     
/* 200 */     if (this.faultReasonValue == null && this.faultReasonExpr == null) {
/* 201 */       handleException(""A valid fault reason value or expression is required"");
/* 202 */     } else if (this.faultReasonValue != null) {
/* 203 */       reasonString = this.faultReasonValue;
/*     */     } else {
/* 205 */       reasonString = Axis2MessageContext.getStringValue(this.faultReasonExpr, synCtx);
/*     */     } 
/*     */     
/* 208 */     SOAPFaultReason reason = factory.createSOAPFaultReason();
/* 209 */     switch (this.soapVersion) {
/*     */       case 1:
/* 211 */         reason.setText(reasonString);
/*     */         break;
/*     */       case 2:
/* 214 */         text = factory.createSOAPFaultText();
/* 215 */         text.setText(reasonString);
/* 216 */         reason.addSOAPText(text);
/*     */         break;
/*     */     } 
/* 219 */     fault.setReason(reason);
/*     */   }
/*     */   
/*     */   private void setFaultNode(SOAPFactory factory, SOAPFault fault) {
/* 223 */     if (this.faultNode != null) {
/* 224 */       SOAPFaultNode soapfaultNode = factory.createSOAPFaultNode();
/* 225 */       soapfaultNode.setNodeValue(this.faultNode.toString());
/* 226 */       fault.setNode(soapfaultNode);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setFaultRole(SOAPFactory factory, SOAPFault fault) {
/* 231 */     if (this.faultRole != null) {
/* 232 */       SOAPFaultRole soapFaultRole = factory.createSOAPFaultRole();
/* 233 */       soapFaultRole.setRoleValue(this.faultRole.toString());
/* 234 */       fault.setRole(soapFaultRole);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setFaultDetail(SOAPFactory factory, SOAPFault fault) {
/* 239 */     if (this.faultDetail != null) {
/* 240 */       SOAPFaultDetail soapFaultDetail = factory.createSOAPFaultDetail();
/* 241 */       soapFaultDetail.setText(this.faultDetail);
/* 242 */       fault.setDetail(soapFaultDetail);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 247 */     log.error(msg);
/* 248 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 252 */   public int getSoapVersion() { return this.soapVersion; }
/*     */ 
/*     */ 
/*     */   
/* 256 */   public void setSoapVersion(int soapVersion) { this.soapVersion = soapVersion; }
/*     */ 
/*     */ 
/*     */   
/* 260 */   public QName getFaultCodeValue() { return this.faultCodeValue; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFaultCodeValue(QName faultCodeValue) {
/* 265 */     if (this.soapVersion == 1) {
/* 266 */       this.faultCodeValue = faultCodeValue;
/*     */     
/*     */     }
/* 269 */     else if (""http://www.w3.org/2003/05/soap-envelope"".equals(faultCodeValue.getNamespaceURI()) && (""DataEncodingUnknown"".equals(faultCodeValue.getLocalPart()) || ""MustUnderstand"".equals(faultCodeValue.getLocalPart()) || ""Receiver"".equals(faultCodeValue.getLocalPart()) || ""Sender"".equals(faultCodeValue.getLocalPart()) || ""VersionMismatch"".equals(faultCodeValue.getLocalPart()))) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 278 */       this.faultCodeValue = faultCodeValue;
/*     */     } else {
/*     */       
/* 281 */       String msg = ""Invalid Fault code value for a SOAP 1.2 fault : "" + faultCodeValue;
/* 282 */       log.error(msg);
/* 283 */       throw new SynapseException(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 289 */   public AXIOMXPath getFaultCodeExpr() { return this.faultCodeExpr; }
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void setFaultCodeExpr(AXIOMXPath faultCodeExpr) { this.faultCodeExpr = faultCodeExpr; }
/*     */ 
/*     */ 
/*     */   
/* 297 */   public String getFaultReasonValue() { return this.faultReasonValue; }
/*     */ 
/*     */ 
/*     */   
/* 301 */   public void setFaultReasonValue(String faultReasonValue) { this.faultReasonValue = faultReasonValue; }
/*     */ 
/*     */ 
/*     */   
/* 305 */   public AXIOMXPath getFaultReasonExpr() { return this.faultReasonExpr; }
/*     */ 
/*     */ 
/*     */   
/* 309 */   public void setFaultReasonExpr(AXIOMXPath faultReasonExpr) { this.faultReasonExpr = faultReasonExpr; }
/*     */ 
/*     */ 
/*     */   
/* 313 */   public URI getFaultNode() { return this.faultNode; }
/*     */ 
/*     */   
/*     */   public void setFaultNode(URI faultNode) {
/* 317 */     if (this.soapVersion == 1) {
/* 318 */       handleException(""A fault node does not apply to a SOAP 1.1 fault"");
/*     */     }
/* 320 */     this.faultNode = faultNode;
/*     */   }
/*     */ 
/*     */   
/* 324 */   public URI getFaultRole() { return this.faultRole; }
/*     */ 
/*     */ 
/*     */   
/* 328 */   public void setFaultRole(URI faultRole) { this.faultRole = faultRole; }
/*     */ 
/*     */ 
/*     */   
/* 332 */   public String getFaultDetail() { return this.faultDetail; }
/*     */ 
/*     */ 
/*     */   
/* 336 */   public void setFaultDetail(String faultDetail) { this.faultDetail = faultDetail; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\transform\FaultMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.HeaderMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HeaderMediator
/*     */   extends AbstractMediator
/*     */ {
/*  48 */   private static final Log log = LogFactory.getLog(HeaderMediator.class);
/*  49 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*     */   public static final int ACTION_SET = 0;
/*     */   
/*     */   public static final int ACTION_REMOVE = 1;
/*  54 */   private QName qName = null;
/*     */   
/*  56 */   private String value = null;
/*     */   
/*  58 */   private int action = 0;
/*     */   
/*  60 */   private AXIOMXPath expression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  69 */     log.debug(""Header mediator <"" + ((this.action == 0) ? ""Set"" : ""Remove"") + ""> :: mediate()"");
/*  70 */     boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/*  71 */     if (shouldTrace) {
/*  72 */       trace.trace(""Start : Header mediator, action = "" + ((this.action == 0) ? ""set"" : ""remove""));
/*     */     }
/*     */     
/*  75 */     if (this.action == 0) {
/*  76 */       String value = (getValue() != null) ? getValue() : Axis2MessageContext.getStringValue(getExpression(), synCtx);
/*     */ 
/*     */       
/*  79 */       log.debug(""Setting header : "" + this.qName + "" to : "" + value);
/*  80 */       if (shouldTrace) {
/*  81 */         trace.trace(""Set Header : "" + this.qName + "" to : "" + value);
/*     */       }
/*  83 */       if (this.qName.getNamespaceURI() == null || """".equals(this.qName.getNamespaceURI())) {
/*  84 */         if (""To"".equals(this.qName.getLocalPart())) {
/*  85 */           synCtx.setTo(new EndpointReference(value));
/*  86 */         } else if (""From"".equals(this.qName.getLocalPart())) {
/*  87 */           synCtx.setFrom(new EndpointReference(value));
/*  88 */         } else if (""Action"".equals(this.qName.getLocalPart())) {
/*  89 */           synCtx.setWSAAction(value);
/*  90 */         } else if (""FaultTo"".equals(this.qName.getLocalPart())) {
/*  91 */           synCtx.setFaultTo(new EndpointReference(value));
/*  92 */         } else if (""ReplyTo"".equals(this.qName.getLocalPart())) {
/*  93 */           synCtx.setReplyTo(new EndpointReference(value));
/*     */         } else {
/*  95 */           addCustomHeader(synCtx);
/*     */         } 
/*     */       } else {
/*  98 */         addCustomHeader(synCtx);
/*     */       } 
/*     */     } else {
/*     */       
/* 102 */       log.debug(""Removing header : "" + this.qName + "" from current message"");
/*     */       
/* 104 */       if (shouldTrace) {
/* 105 */         trace.trace(""Remove Header : "" + this.qName);
/*     */       }
/*     */       
/* 108 */       if (this.qName.getNamespaceURI() == null || """".equals(this.qName.getNamespaceURI())) {
/* 109 */         if (""To"".equals(this.qName.getLocalPart())) {
/* 110 */           synCtx.setTo(null);
/* 111 */         } else if (""From"".equals(this.qName.getLocalPart())) {
/* 112 */           synCtx.setFrom(null);
/* 113 */         } else if (""Action"".equals(this.qName.getLocalPart())) {
/* 114 */           synCtx.setWSAAction(null);
/* 115 */         } else if (""FaultTo"".equals(this.qName.getLocalPart())) {
/* 116 */           synCtx.setFaultTo(null);
/* 117 */         } else if (""ReplyTo"".equals(this.qName.getLocalPart())) {
/* 118 */           synCtx.setReplyTo(null);
/*     */         } else {
/* 120 */           removeFromHeaderList(synCtx.getEnvelope().getHeader().getHeaderBlocksWithNSURI(""""));
/*     */         } 
/*     */       } else {
/* 123 */         removeFromHeaderList(synCtx.getEnvelope().getHeader().getHeaderBlocksWithNSURI(this.qName.getNamespaceURI()));
/*     */       } 
/*     */     } 
/*     */     
/* 127 */     if (shouldTrace) {
/* 128 */       trace.trace(""End : Header mediator"");
/*     */     }
/* 130 */     return true;
/*     */   }
/*     */   
/*     */   private void addCustomHeader(MessageContext synCtx) {
/* 134 */     SOAPEnvelope env = synCtx.getEnvelope();
/* 135 */     SOAPFactory fac = (SOAPFactory)env.getOMFactory();
/* 136 */     SOAPHeader header = env.getHeader();
/* 137 */     if (header == null) {
/* 138 */       header = fac.createSOAPHeader(env);
/*     */     }
/* 140 */     SOAPHeaderBlock hb = header.addHeaderBlock(this.qName.getLocalPart(), fac.createOMNamespace(this.qName.getNamespaceURI(), this.qName.getPrefix()));
/*     */     
/* 142 */     hb.setText(this.value);
/*     */   }
/*     */   
/*     */   private void removeFromHeaderList(List headersList) {
/* 146 */     if (headersList == null || headersList.isEmpty()) {
/*     */       return;
/*     */     }
/*     */     
/* 150 */     Iterator iter = headersList.iterator();
/* 151 */     while (iter.hasNext()) {
/* 152 */       Object o = iter.next();
/* 153 */       if (o instanceof SOAPHeaderBlock) {
/* 154 */         SOAPHeaderBlock header = (SOAPHeaderBlock)o;
/* 155 */         if (header.getLocalName().equals(this.qName.getLocalPart()))
/* 156 */           header.detach();  continue;
/*     */       } 
/* 158 */       if (o instanceof OMElement) {
/* 159 */         OMElement omElem = (OMElement)o;
/* 160 */         if (omElem.getLocalName().equals(this.qName.getLocalPart())) {
/* 161 */           omElem.detach();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 168 */   public int getAction() { return this.action; }
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setAction(int action) { this.action = action; }
/*     */ 
/*     */ 
/*     */   
/* 176 */   public QName getQName() { return this.qName; }
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setQName(QName qName) { this.qName = qName; }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/* 192 */   public AXIOMXPath getExpression() { return this.expression; }
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 200 */     log.error(msg);
/* 201 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\transform\HeaderMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.XSLTMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import javax.xml.stream.XMLOutputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamWriter;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.Transformer;
/*     */ import javax.xml.transform.TransformerConfigurationException;
/*     */ import javax.xml.transform.TransformerException;
/*     */ import javax.xml.transform.TransformerFactory;
/*     */ import javax.xml.transform.stream.StreamResult;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.Util;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTMediator
/*     */   extends AbstractMediator
/*     */ {
/*  59 */   private static final Log log = LogFactory.getLog(XSLTMediator.class);
/*  60 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  65 */   private String xsltKey = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private AXIOMXPath source = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  75 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  82 */   private Transformer transformer = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   private final Object transformerLock = new Object();
/*     */ 
/*     */   
/*     */   public static final String DEFAULT_XPATH = ""//s11:Envelope/s11:Body/child::*[position()=1] | //s12:Envelope/s12:Body/child::*[position()=1]"";
/*     */ 
/*     */   
/*     */   public XSLTMediator() {
/*     */     try {
/*  95 */       this.source = new AXIOMXPath(""//s11:Envelope/s11:Body/child::*[position()=1] | //s12:Envelope/s12:Body/child::*[position()=1]"");
/*  96 */       this.source.addNamespace(""s11"", ""http://schemas.xmlsoap.org/soap/envelope/"");
/*  97 */       this.source.addNamespace(""s12"", ""http://www.w3.org/2003/05/soap-envelope"");
/*  98 */     } catch (JaxenException e) {
/*  99 */       handleException(""Error creating source XPath expression"", (Exception)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*     */     try {
/* 112 */       log.debug(""XSLT mediator mediate()"");
/* 113 */       boolean shouldTrace = shouldTrace(synCtx.getTracingState());
/* 114 */       if (shouldTrace) {
/* 115 */         trace.trace(""Start : XSLT mediator"");
/*     */       }
/* 117 */       log.debug(""Performing XSLT transformation against resource with key : "" + this.xsltKey);
/* 118 */       performXLST(synCtx, shouldTrace);
/* 119 */       if (shouldTrace) {
/* 120 */         trace.trace(""Start : XSLT mediator"");
/*     */       }
/* 122 */       return true;
/* 123 */     } catch (Exception e) {
/* 124 */       handleException(""Unable to do the transformation"");
/*     */       
/* 126 */       return false;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void performXLST(MessageContext msgCtx, boolean shouldTrace) {
/* 131 */     Source transformSrc = null;
/* 132 */     ByteArrayOutputStream baosForTarget = new ByteArrayOutputStream();
/*     */ 
/*     */     
/* 135 */     StreamResult transformTgt = new StreamResult(baosForTarget);
/*     */     
/* 137 */     OMNode sourceNode = getTransformSource(msgCtx);
/* 138 */     if (shouldTrace) {
/* 139 */       trace.trace(""Transformation source : "" + sourceNode.toString());
/*     */     }
/* 141 */     if (log.isDebugEnabled()) {
/* 142 */       log.debug(""Transformation source : "" + sourceNode);
/*     */     }
/*     */ 
/*     */     
/*     */     try {
/* 147 */       ByteArrayOutputStream baosForSource = new ByteArrayOutputStream();
/* 148 */       XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().createXMLStreamWriter(baosForSource);
/*     */ 
/*     */       
/* 151 */       sourceNode.serialize(xsWriterForSource);
/* 152 */       transformSrc = new StreamSource(new ByteArrayInputStream(baosForSource.toByteArray()));
/*     */     }
/* 154 */     catch (XMLStreamException e) {
/* 155 */       handleException(""Error gettting transform source "" + e.getMessage(), e);
/*     */     } 
/*     */ 
/*     */     
/* 159 */     Entry dp = msgCtx.getConfiguration().getEntryDefinition(this.xsltKey);
/*     */ 
/*     */     
/* 162 */     if (dp != null && dp.isDynamic()) {
/* 163 */       if (!dp.isCached() || dp.isExpired()) {
/* 164 */         synchronized (this.transformerLock) {
/*     */           try {
/* 166 */             this.transformer = TransformerFactory.newInstance().newTransformer(Util.getStreamSource(msgCtx.getEntry(this.xsltKey)));
/*     */ 
/*     */           
/*     */           }
/* 170 */           catch (TransformerConfigurationException e) {
/* 171 */             handleException(""Error creating XSLT transformer using : "" + this.xsltKey, e);
/*     */           }
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */     }
/* 178 */     else if (this.transformer == null) {
/* 179 */       synchronized (this.transformerLock) {
/*     */         try {
/* 181 */           this.transformer = TransformerFactory.newInstance().newTransformer(Util.getStreamSource(msgCtx.getEntry(this.xsltKey)));
/*     */ 
/*     */         
/*     */         }
/* 185 */         catch (TransformerConfigurationException e) {
/* 186 */           handleException(""Error creating XSLT transformer using : "" + this.xsltKey, e);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 194 */       this.transformer.transform(transformSrc, transformTgt);
/*     */       
/* 196 */       StAXOMBuilder builder = new StAXOMBuilder(new ByteArrayInputStream(baosForTarget.toByteArray()));
/*     */       
/* 198 */       OMElement result = builder.getDocumentElement();
/* 199 */       if (shouldTrace) {
/* 200 */         trace.trace(""Transformation result : "" + result.toString());
/*     */       }
/* 202 */       if (log.isDebugEnabled()) {
/* 203 */         log.debug(""Transformation result : "" + result);
/*     */       }
/*     */ 
/*     */       
/* 207 */       sourceNode.insertSiblingAfter((OMNode)result);
/* 208 */       sourceNode.detach();
/*     */     }
/* 210 */     catch (TransformerException e) {
/* 211 */       handleException(""Error performing XSLT transformation "" + this.xsltKey, e);
/* 212 */     } catch (XMLStreamException e) {
/* 213 */       handleException(""Error building result from XSLT transformation"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMNode getTransformSource(MessageContext synCtx) {
/*     */     try {
/* 228 */       Object o = this.source.evaluate(synCtx.getEnvelope());
/* 229 */       if (o instanceof OMNode)
/* 230 */         return (OMNode)o; 
/* 231 */       if (o instanceof List && !((List)o).isEmpty()) {
/* 232 */         return ((List)o).get(0);
/*     */       }
/* 234 */       handleException(""The evaluation of the XPath expression "" + this.source + "" must result in an OMNode"");
/*     */     
/*     */     }
/* 237 */     catch (JaxenException e) {
/* 238 */       handleException(""Error evaluating XPath "" + this.source + "" on message"");
/*     */     } 
/* 240 */     return null;
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 244 */     log.error(msg, e);
/* 245 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 249 */     log.error(msg);
/* 250 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 254 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */   
/* 262 */   public String getXsltKey() { return this.xsltKey; }
/*     */ 
/*     */ 
/*     */   
/* 266 */   public void setXsltKey(String xsltKey) { this.xsltKey = xsltKey; }
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void addProperty(MediatorProperty p) { this.properties.add(p); }
/*     */ 
/*     */ 
/*     */   
/* 274 */   public void addAllProperties(List list) { this.properties.addAll(list); }
/*     */ 
/*     */ 
/*     */   
/* 278 */   public List getProperties() { return this.properties; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\mediators\transform\XSLTMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.Constants,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class Constants
/*    */ {
/* 26 */   public static String GLOBAL_REQUEST_COUNTER = ""__GLOBAL_REQUEST_COUNTER__"";
/* 27 */   public static String REQUEST_RECEIVED_TIME = ""__REQUEST_RECEIVED_TIME__"";
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\metrics\Constants.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.Counter,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Counter
/*    */ {
/* 28 */   private long count = 0L;
/*    */ 
/*    */   
/* 31 */   public synchronized void increment() { this.count++; }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public long getCount() { return this.count; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\metrics\Counter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.GlobalRequestCountHandler,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.engine.Handler;
/*    */ import org.apache.axis2.handlers.AbstractHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class GlobalRequestCountHandler
/*    */   extends AbstractHandler
/*    */ {
/*    */   public Handler.InvocationResponse invoke(MessageContext msgContext) throws AxisFault {
/* 34 */     msgContext.setProperty(Constants.REQUEST_RECEIVED_TIME, new Long(System.currentTimeMillis()));
/*    */ 
/*    */     
/* 37 */     ((Counter)msgContext.getParameter(Constants.GLOBAL_REQUEST_COUNTER).getValue()).increment();
/*    */     
/* 39 */     return Handler.InvocationResponse.CONTINUE;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\metrics\GlobalRequestCountHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.MetricsAggregatorModule,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.ConfigurationContext;
/*    */ import org.apache.axis2.description.AxisDescription;
/*    */ import org.apache.axis2.description.AxisModule;
/*    */ import org.apache.axis2.description.Parameter;
/*    */ import org.apache.axis2.engine.AxisConfiguration;
/*    */ import org.apache.axis2.modules.Module;
/*    */ import org.apache.neethi.Assertion;
/*    */ import org.apache.neethi.Policy;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MetricsAggregatorModule
/*    */   implements Module
/*    */ {
/*    */   public void init(ConfigurationContext configContext, AxisModule module) throws AxisFault {
/* 38 */     AxisConfiguration axiConfiguration = configContext.getAxisConfiguration();
/*    */     
/* 40 */     Counter globalRequestCounter = new Counter();
/* 41 */     Parameter globalRequestCounterParameter = new Parameter();
/* 42 */     globalRequestCounterParameter.setName(Constants.GLOBAL_REQUEST_COUNTER);
/* 43 */     globalRequestCounterParameter.setValue(globalRequestCounter);
/* 44 */     axiConfiguration.addParameter(globalRequestCounterParameter);
/*    */   }
/*    */ 
/*    */   
/*    */   public void engageNotify(AxisDescription axisDescription) throws AxisFault {}
/*    */ 
/*    */   
/* 51 */   public boolean canSupportAssertion(Assertion assertion) { return false; }
/*    */   
/*    */   public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {}
/*    */   
/*    */   public void shutdown(ConfigurationContext configurationContext) throws AxisFault {}
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\metrics\MetricsAggregatorModule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.AbstractRegistry,"/*     */ package org.apache.synapse.registry;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.XMLToObjectMapper;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractRegistry
/*     */   implements Registry
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(AbstractRegistry.class);
/*     */ 
/*     */   
/*  42 */   protected Map properties = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getResource(Entry entry) {
/*  51 */     OMNode omNode = null;
/*  52 */     RegistryEntry re = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  58 */     if (entry.isCached() && !entry.isExpired()) {
/*  59 */       return entry.getValue();
/*     */     }
/*     */     
/*  62 */     if (!entry.isCached()) {
/*  63 */       omNode = lookup(entry.getKey());
/*  64 */       if (omNode == null) {
/*  65 */         return null;
/*     */       }
/*  67 */       re = getRegistryEntry(entry.getKey());
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  72 */     else if (entry.isExpired()) {
/*     */       
/*  74 */       log.debug(""Cached object has expired for key : "" + entry.getKey());
/*  75 */       re = getRegistryEntry(entry.getKey());
/*     */       
/*  77 */       if (re.getVersion() != Long.MIN_VALUE && re.getVersion() == entry.getVersion()) {
/*     */         
/*  79 */         log.debug(""Expired version number is same as current version in registry"");
/*     */ 
/*     */ 
/*     */         
/*  83 */         entry.setExpiryTime(System.currentTimeMillis() + re.getCachableDuration());
/*     */         
/*  85 */         log.debug(""Renew cache lease for another "" + (re.getCachableDuration() / 1000L) + ""s"");
/*     */ 
/*     */         
/*  88 */         return entry.getValue();
/*     */       } 
/*     */       
/*  91 */       omNode = lookup(entry.getKey());
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 100 */     if (entry.getMapper() != null) {
/* 101 */       entry.setValue(entry.getMapper().getObjectFromOMNode(omNode));
/*     */       
/* 103 */       if (entry.getValue() instanceof SequenceMediator) {
/* 104 */         SequenceMediator seq = (SequenceMediator)entry.getValue();
/* 105 */         seq.setDynamic(true);
/* 106 */         seq.setRegistryKey(entry.getKey());
/* 107 */       } else if (entry.getValue() instanceof Endpoint) {
/* 108 */         Endpoint ep = (Endpoint)entry.getValue();
/*     */ 
/*     */       
/*     */       }
/*     */ 
/*     */     
/*     */     }
/* 115 */     else if (re != null && re.getType() != null) {
/*     */       
/* 117 */       XMLToObjectMapper mapper = getMapper(re.getType());
/* 118 */       if (mapper != null) {
/* 119 */         entry.setMapper(mapper);
/* 120 */         entry.setValue(mapper.getObjectFromOMNode(omNode));
/*     */       } else {
/*     */         
/* 123 */         entry.setValue(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 129 */     entry.setExpiryTime(System.currentTimeMillis() + re.getCachableDuration());
/* 130 */     entry.setVersion(re.getVersion());
/*     */     
/* 132 */     return entry.getValue();
/*     */   }
/*     */ 
/*     */   
/* 136 */   private XMLToObjectMapper getMapper(URI type) { return null; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public String getProviderClass() { return getClass().getName(); }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public Map getConfigProperties() { return this.properties; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void addConfigProperty(String name, String value) { this.properties.put(name, value); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\registry\AbstractRegistry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.Registry,"package org.apache.synapse.registry;
import java.util.Map;
import org.apache.axiom.om.OMNode;
import org.apache.synapse.config.Entry;
public interface Registry {
  OMNode lookup(String paramString);
  Object getResource(Entry paramEntry);
  RegistryEntry getRegistryEntry(String paramString);
  void addConfigProperty(String paramString1, String paramString2);
  RegistryEntry[] getChildren(RegistryEntry paramRegistryEntry);
  RegistryEntry[] getDescendants(RegistryEntry paramRegistryEntry);
  String getProviderClass();
  Map getConfigProperties();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\registry\Registry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.RegistryEntry,"package org.apache.synapse.registry;
import java.net.URI;
public interface RegistryEntry {
  String getKey();
  String getName();
  long getVersion();
  URI getType();
  String getDescription();
  long getCreated();
  long getLastModified();
  long getCachableDuration();
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\registry\RegistryEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.url.SimpleURLRegistry,"/*     */ package org.apache.synapse.registry.url;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.util.ArrayList;
/*     */ import javax.xml.stream.XMLInputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.registry.AbstractRegistry;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ import org.apache.synapse.registry.RegistryEntry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SimpleURLRegistry
/*     */   extends AbstractRegistry
/*     */   implements Registry
/*     */ {
/*  46 */   private static final Log log = LogFactory.getLog(SimpleURLRegistry.class);
/*     */   
/*     */   private static final int MAX_KEYS = 200;
/*     */ 
/*     */   
/*     */   public OMNode lookup(String key) {
/*  52 */     log.info(""==> Repository fetch of resource with key : "" + key);
/*  53 */     URLConnection urlc = null;
/*     */     try {
/*  55 */       URL url = new URL(getRoot() + key);
/*  56 */       urlc = url.openConnection();
/*  57 */       urlc.connect();
/*  58 */     } catch (IOException e) {
/*  59 */       return null;
/*     */     } 
/*     */     
/*     */     try {
/*  63 */       XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(urlc.getInputStream());
/*     */       
/*  65 */       StAXOMBuilder builder = new StAXOMBuilder(parser);
/*  66 */       return (OMNode)builder.getDocumentElement();
/*     */     }
/*  68 */     catch (MalformedURLException e) {
/*  69 */       handleException(""Invalid URL reference "" + getRoot() + key, e);
/*  70 */     } catch (FileNotFoundException fnf) {
/*  71 */       return null;
/*  72 */     } catch (IOException e) {
/*  73 */       handleException(""IO Error reading from URL "" + getRoot() + key, e);
/*  74 */     } catch (XMLStreamException e) {
/*  75 */       handleException(""XML Error reading from URL "" + getRoot() + key, e);
/*     */     } 
/*  77 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public RegistryEntry getRegistryEntry(String key) {
/*  82 */     log.debug(""Perform RegistryEntry lookup for key : "" + key);
/*     */     try {
/*  84 */       URL url = new URL(getRoot() + key);
/*  85 */       URLConnection urlc = url.openConnection();
/*  86 */       urlc.setReadTimeout(30000);
/*  87 */       urlc.setRequestProperty(""Connection"", ""Close"");
/*     */       
/*  89 */       URLRegistryEntry wre = new URLRegistryEntry();
/*  90 */       wre.setKey(key);
/*  91 */       wre.setName(url.getFile());
/*  92 */       wre.setType(new URI(urlc.getContentType()));
/*  93 */       wre.setDescription(""Resource at : "" + url.toString());
/*  94 */       wre.setLastModified(urlc.getLastModified());
/*  95 */       wre.setVersion(urlc.getLastModified());
/*  96 */       if (urlc.getExpiration() > 0L) {
/*  97 */         wre.setCachableDuration(urlc.getExpiration() - System.currentTimeMillis());
/*     */       } else {
/*     */         
/* 100 */         wre.setCachableDuration(getCachableDuration());
/*     */       } 
/* 102 */       return wre;
/*     */     }
/* 104 */     catch (MalformedURLException e) {
/* 105 */       handleException(""Invalid URL reference "" + getRoot() + key, e);
/* 106 */     } catch (IOException e) {
/* 107 */       handleException(""IO Error reading from URL "" + getRoot() + key, e);
/* 108 */     } catch (URISyntaxException e) {
/* 109 */       handleException(""URI Syntax error reading from URL "" + getRoot() + key, e);
/*     */     } 
/* 111 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public void addConfigProperty(String name, String value) {
/* 116 */     if (name.equals(""root"")) {
/*     */       
/*     */       try {
/*     */ 
/*     */         
/* 121 */         URL url = new URL(value);
/* 122 */         if (url.getProtocol().equals(""file"") && 
/* 123 */           !value.endsWith(""/"")) {
/* 124 */           value = value + ""/"";
/*     */         }
/*     */       }
/* 127 */       catch (MalformedURLException e) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 132 */     super.addConfigProperty(name, value);
/*     */   }
/*     */   
/*     */   public String getRoot() {
/* 136 */     String root = (String)this.properties.get(""root"");
/* 137 */     if (root == null) {
/* 138 */       return """";
/*     */     }
/* 140 */     return root;
/*     */   }
/*     */ 
/*     */   
/*     */   public long getCachableDuration() {
/* 145 */     String cachableDuration = (String)this.properties.get(""cachableDuration"");
/* 146 */     return (cachableDuration == null) ? 1500L : Long.parseLong(cachableDuration);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public RegistryEntry[] getChildren(RegistryEntry entry) {
/*     */     try {
/* 153 */       if (entry == null) {
/* 154 */         URLRegistryEntry urlEntry = new URLRegistryEntry();
/* 155 */         urlEntry.setKey("""");
/* 156 */         entry = urlEntry;
/*     */       } 
/*     */       
/* 159 */       URL url = new URL(getRoot() + entry.getKey());
/*     */       
/* 161 */       if (url.getProtocol().equals(""file"")) {
/*     */         
/* 163 */         File file = new File(url.getFile());
/* 164 */         if (!file.isDirectory()) {
/* 165 */           return null;
/*     */         }
/*     */         
/* 168 */         InputStream inStream = null;
/*     */         try {
/* 170 */           inStream = (InputStream)url.getContent();
/*     */           
/* 172 */           BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
/* 173 */           ArrayList entryList = new ArrayList();
/* 174 */           String key = """";
/* 175 */           while ((key = reader.readLine()) != null) {
/* 176 */             URLRegistryEntry registryEntry = new URLRegistryEntry();
/* 177 */             if (entry.getKey().equals("""")) {
/* 178 */               registryEntry.setKey(key);
/*     */             }
/* 180 */             else if (entry.getKey().endsWith(""/"")) {
/* 181 */               registryEntry.setKey(entry.getKey() + key);
/*     */             } else {
/* 183 */               registryEntry.setKey(entry.getKey() + ""/"" + key);
/*     */             } 
/*     */ 
/*     */             
/* 187 */             entryList.add(registryEntry);
/*     */           } 
/*     */           
/* 190 */           RegistryEntry[] entries = new RegistryEntry[entryList.size()];
/* 191 */           for (int i = 0; i < entryList.size(); i++) {
/* 192 */             entries[i] = entryList.get(i);
/*     */           }
/* 194 */           return entries;
/*     */         }
/* 196 */         catch (Exception e) {
/* 197 */           throw new SynapseException(""Error in reading the URL."");
/*     */         } 
/*     */       } 
/*     */       
/* 201 */       throw new SynapseException(""Invalid protocol."");
/*     */     
/*     */     }
/* 204 */     catch (MalformedURLException e) {
/* 205 */       handleException(""Invalid URL reference "" + getRoot() + entry.getKey(), e);
/*     */ 
/*     */       
/* 208 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   public RegistryEntry[] getDescendants(RegistryEntry entry) {
/* 213 */     ArrayList list = new ArrayList();
/* 214 */     RegistryEntry[] entries = getChildren(entry);
/* 215 */     if (entries != null) {
/* 216 */       for (int i = 0; i < entries.length; i++) {
/*     */         
/* 218 */         if (list.size() > 200) {
/*     */           break;
/*     */         }
/*     */         
/* 222 */         fillDescendants(entries[i], list);
/*     */       } 
/*     */     }
/*     */     
/* 226 */     RegistryEntry[] descendants = new RegistryEntry[list.size()];
/* 227 */     for (int i = 0; i < list.size(); i++) {
/* 228 */       descendants[i] = list.get(i);
/*     */     }
/*     */     
/* 231 */     return descendants;
/*     */   }
/*     */ 
/*     */   
/*     */   private void fillDescendants(RegistryEntry parent, ArrayList list) {
/* 236 */     RegistryEntry[] entries = getChildren(parent);
/* 237 */     if (entries != null) {
/* 238 */       for (int i = 0; i < entries.length; i++) {
/*     */         
/* 240 */         if (list.size() > 200) {
/*     */           break;
/*     */         }
/*     */         
/* 244 */         fillDescendants(entries[i], list);
/*     */       } 
/*     */     } else {
/* 247 */       list.add(parent);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 252 */     log.error(msg, e);
/* 253 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\registr\\url\SimpleURLRegistry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.url.URLRegistryEntry,"/*     */ package org.apache.synapse.registry.url;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.Date;
/*     */ import org.apache.synapse.registry.RegistryEntry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class URLRegistryEntry
/*     */   implements RegistryEntry
/*     */ {
/*  29 */   private String key = null;
/*  30 */   private String name = null;
/*  31 */   private long version = Long.MIN_VALUE;
/*  32 */   private URI type = null;
/*     */   
/*     */   private String description;
/*     */   private long created;
/*     */   private long lastModified;
/*     */   private long cachableDuration;
/*     */   
/*  39 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  43 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */   
/*  47 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  51 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/*  55 */   public long getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public void setVersion(long version) { this.version = version; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public URI getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public void setType(URI type) { this.type = type; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public long getCreated() { return this.created; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setCreated(long created) { this.created = created; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public long getLastModified() { return this.lastModified; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setLastModified(long lastModified) { this.lastModified = lastModified; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public long getCachableDuration() { return this.cachableDuration; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setCachableDuration(long cachableDuration) { this.cachableDuration = cachableDuration; }
/*     */ 
/*     */   
/*     */   public String toString() {
/* 103 */     StringBuffer sb = new StringBuffer();
/* 104 */     sb.append(""RegistryEntry {"").append("" Key : "" + this.key).append("" Name : "" + this.name).append("" Ver : "" + this.version).append("" Type : "" + this.type).append("" Desc : "" + this.description).append("" Created : "" + new Date(this.created)).append("" Modified : "" + new Date(this.lastModified)).append("" Cacheable for : "" + (this.cachableDuration / 1000L) + ""sec"").append(""}"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 114 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\registr\\url\URLRegistryEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.Statistics,"/*    */ package org.apache.synapse.statistics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Statistics
/*    */ {
/* 28 */   private long maxProcessingTime = 0L;
/*    */   
/* 30 */   private long minProcessingTime = -1L;
/*    */   
/* 32 */   private double avgProcessingTime = 0.0D;
/*    */   
/*    */   private double totalProcessingTime;
/*    */   
/* 36 */   private int count = 0;
/*    */   
/* 38 */   private int faultCount = 0;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void update(long inTime, long outTime, boolean isFault) {
/* 48 */     this.count++;
/* 49 */     if (isFault) {
/* 50 */       this.faultCount++;
/*    */     }
/* 52 */     long responseTime = outTime - inTime;
/* 53 */     if (this.maxProcessingTime < responseTime) {
/* 54 */       this.maxProcessingTime = responseTime;
/*    */     }
/* 56 */     if (this.minProcessingTime > responseTime) {
/* 57 */       this.minProcessingTime = responseTime;
/*    */     }
/* 59 */     if (this.minProcessingTime == -1L) {
/* 60 */       this.minProcessingTime = responseTime;
/*    */     }
/* 62 */     this.totalProcessingTime += responseTime;
/* 63 */     this.avgProcessingTime = this.totalProcessingTime / this.count;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 70 */   public long getMaxProcessingTime() { return this.maxProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 77 */   public double getAvgProcessingTime() { return this.avgProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 84 */   public long getMinProcessingTime() { return this.minProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 91 */   public int getFaultCount() { return this.faultCount; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 98 */   public int getCount() { return this.count; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\Statistics.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsCollector,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsCollector
/*     */ {
/*  32 */   private Map sequenceStatistics = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */   
/*  35 */   private Map endpointStatistics = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */   
/*  38 */   private Map proxyServicesStatistics = Collections.synchronizedMap(new HashMap());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForEndPoint(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  51 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.endpointStatistics.get(keyOfStatistic);
/*     */     
/*  53 */     if (statisticsHolder == null) {
/*  54 */       statisticsHolder = new StatisticsHolder();
/*  55 */       statisticsHolder.setKey(keyOfStatistic);
/*  56 */       statisticsHolder.setStatisticsCategory(2);
/*  57 */       this.endpointStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/*  59 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForProxyService(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  74 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.proxyServicesStatistics.get(keyOfStatistic);
/*     */     
/*  76 */     if (statisticsHolder == null) {
/*  77 */       statisticsHolder = new StatisticsHolder();
/*  78 */       statisticsHolder.setKey(keyOfStatistic);
/*  79 */       statisticsHolder.setStatisticsCategory(1);
/*  80 */       this.proxyServicesStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/*  82 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForSequence(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  96 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.sequenceStatistics.get(keyOfStatistic);
/*     */     
/*  98 */     if (statisticsHolder == null) {
/*  99 */       statisticsHolder = new StatisticsHolder();
/* 100 */       statisticsHolder.setKey(keyOfStatistic);
/* 101 */       statisticsHolder.setStatisticsCategory(0);
/* 102 */       this.sequenceStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/* 104 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public Map getSequenceStatistics() { return this.sequenceStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public Map getProxyServiceStatistics() { return this.proxyServicesStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public Map getEndPointStatistics() { return this.endpointStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void resetSequenceStatistics() { this.sequenceStatistics = Collections.synchronizedMap(new HashMap()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void resetProxyServiceStatistics() { this.proxyServicesStatistics = Collections.synchronizedMap(new HashMap()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void resetEndPointStatistics() { this.endpointStatistics = Collections.synchronizedMap(new HashMap()); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\StatisticsCollector.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsHolder,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsHolder
/*     */ {
/*     */   private int statisticsCategory;
/*     */   private String key;
/*     */   private Statistics inFlowStatistics;
/*     */   private Statistics outFlowStatistics;
/*     */   
/*     */   public synchronized void update(boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  49 */     if (isResponse) {
/*  50 */       if (this.outFlowStatistics == null) {
/*  51 */         this.outFlowStatistics = new Statistics();
/*     */       }
/*  53 */       this.outFlowStatistics.update(inTime, outTime, isFault);
/*     */     } else {
/*  55 */       if (this.inFlowStatistics == null) {
/*  56 */         this.inFlowStatistics = new Statistics();
/*     */       }
/*  58 */       this.inFlowStatistics.update(inTime, outTime, isFault);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  68 */   public synchronized Statistics getInFlowStatistics() { return this.inFlowStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   public synchronized Statistics getOutFlowStatistics() { return this.outFlowStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   public int getStatisticsCategory() { return this.statisticsCategory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setStatisticsCategory(int statisticsCategory) { this.statisticsCategory = statisticsCategory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void clearStatistics() {
/* 115 */     this.inFlowStatistics = null;
/* 116 */     this.outFlowStatistics = null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\StatisticsHolder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsStack,"package org.apache.synapse.statistics;
public interface StatisticsStack {
  void put(String paramString, long paramLong, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3);
  void reportToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean);
  void reportToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean, String paramString);
  void reportAllToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean);
}
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\StatisticsStack.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsUtils,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*     */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsUtils
/*     */ {
/*     */   public static void processProxyServiceStatistics(MessageContext synCtx) {
/*  43 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  44 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  45 */     ProxyServiceStatisticsStack proxyServiceStatisticsStack = (ProxyServiceStatisticsStack)synCtx.getProperty(""proxyservice_statistics_stack"");
/*     */     
/*  47 */     if (proxyServiceStatisticsStack != null) {
/*  48 */       proxyServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*  50 */     ProxyServiceStatisticsStack synapseServiceStatisticsStack = (ProxyServiceStatisticsStack)synCtx.getProperty(""synapseservice_statistics_stack"");
/*     */     
/*  52 */     if (synapseServiceStatisticsStack != null) {
/*  53 */       synapseServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processEndPointStatistics(MessageContext synCtx) {
/*  63 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  64 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  65 */     EndPointStatisticsStack endPointStatisticsStack = (EndPointStatisticsStack)synCtx.getProperty(""endpoint_statistics_stack"");
/*     */     
/*  67 */     if (endPointStatisticsStack != null) {
/*  68 */       Object endpointObj = synCtx.getProperty(""processed_endpoint"");
/*  69 */       if (endpointObj instanceof Endpoint) {
/*  70 */         Endpoint endpoint = (Endpoint)endpointObj;
/*  71 */         String name = endpoint.getName();
/*  72 */         if (name == null) {
/*  73 */           endPointStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */         } else {
/*     */           
/*  76 */           endPointStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault, name);
/*     */         } 
/*     */         
/*  79 */         endPointStatisticsStack.reportAllToStatisticsCollector(statisticsCollector, true);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processSequenceStatistics(MessageContext synCtx) {
/*  90 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  91 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  92 */     SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)synCtx.getProperty(""sequence_statistics_stack"");
/*     */     
/*  94 */     if (sequenceStatisticsStack != null) {
/*  95 */       sequenceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processAllSequenceStatistics(MessageContext synCtx) {
/* 105 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/* 106 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 107 */     SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)synCtx.getProperty(""sequence_statistics_stack"");
/*     */     
/* 109 */     if (sequenceStatisticsStack != null) {
/* 110 */       sequenceStatisticsStack.reportAllToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static StatisticsCollector getStatisticsCollector(MessageContext synCtx) {
/* 120 */     SynapseEnvironment synEnv = synCtx.getEnvironment();
/* 121 */     StatisticsCollector statisticsCollector = null;
/* 122 */     if (synEnv != null) {
/* 123 */       statisticsCollector = synEnv.getStatisticsCollector();
/* 124 */       if (statisticsCollector == null) {
/* 125 */         statisticsCollector = new StatisticsCollector();
/* 126 */         synEnv.setStatisticsCollector(statisticsCollector);
/*     */       } 
/*     */     } 
/* 129 */     return statisticsCollector;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\StatisticsUtils.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.EndPointStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EndPointStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*     */   private List endpointStatistics;
/*     */   private boolean isCompleteInFlowStatisicsReport = false;
/*     */   
/*     */   public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) {
/*  49 */     if (this.endpointStatistics == null) {
/*  50 */       this.endpointStatistics = new ArrayList();
/*     */     }
/*  52 */     this.endpointStatistics.add(new EndPointStatistics(key, initTime, isInFlow, isStatisticsEnable, isFault));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  64 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/*  65 */       EndPointStatistics statistics = this.endpointStatistics.get(this.endpointStatistics.size() - 1);
/*     */ 
/*     */       
/*  68 */       if (statistics != null && statistics.isStatisticsEnable && statistics.endPointName != null)
/*     */       {
/*  70 */         if (statistics.inTimeForInFlow != -1L) {
/*  71 */           long initTimeForOutFlow = System.currentTimeMillis();
/*  72 */           statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */           
/*  75 */           statistics.inTimeForInFlow = -1L;
/*  76 */           statistics.inTimeForOutFlow = initTimeForOutFlow;
/*  77 */         } else if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */           
/*  79 */           statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */           
/*  82 */           this.endpointStatistics.remove(statistics);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  96 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/*  97 */       List tobeRemoved = new ArrayList();
/*  98 */       Iterator epIterator = this.endpointStatistics.iterator();
/*  99 */       while (epIterator.hasNext()) {
/* 100 */         Object statisticsObj = epIterator.next();
/* 101 */         if (statisticsObj instanceof EndPointStatistics) {
/* 102 */           EndPointStatistics statistics = (EndPointStatistics)statisticsObj;
/* 103 */           if (statistics.isStatisticsEnable && statistics.endPointName != null && statistics.endPointName.equals(name)) {
/*     */             
/* 105 */             if (statistics.inTimeForInFlow != -1L) {
/* 106 */               long initTimeForOutFlow = System.currentTimeMillis();
/* 107 */               statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */               
/* 110 */               statistics.inTimeForInFlow = -1L;
/* 111 */               statistics.inTimeForOutFlow = initTimeForOutFlow; continue;
/* 112 */             }  if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */               
/* 114 */               statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */               
/* 117 */               tobeRemoved.add(statistics);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 122 */       this.endpointStatistics.removeAll(tobeRemoved);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/* 132 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/* 133 */       List tobeRemoved = new ArrayList();
/* 134 */       Iterator epIterator = this.endpointStatistics.iterator();
/* 135 */       while (epIterator.hasNext()) {
/* 136 */         Object statisticsObj = epIterator.next();
/* 137 */         if (statisticsObj instanceof EndPointStatistics) {
/* 138 */           EndPointStatistics statistics = (EndPointStatistics)statisticsObj;
/* 139 */           if (statistics.isStatisticsEnable && statistics.endPointName != null) {
/* 140 */             if (statistics.inTimeForInFlow != -1L) {
/* 141 */               long initTimeForOutFlow = System.currentTimeMillis();
/* 142 */               statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */               
/* 145 */               statistics.inTimeForInFlow = -1L;
/* 146 */               statistics.inTimeForOutFlow = initTimeForOutFlow; continue;
/* 147 */             }  if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */               
/* 149 */               statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */               
/* 152 */               tobeRemoved.add(statistics);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 157 */       this.endpointStatistics.removeAll(tobeRemoved);
/*     */     } 
/* 159 */     this.isCompleteInFlowStatisicsReport = true;
/*     */   }
/*     */ 
/*     */   
/*     */   class EndPointStatistics
/*     */   {
/*     */     private String endPointName;
/*     */     
/*     */     private boolean isStatisticsEnable;
/*     */     
/*     */     private boolean isFault;
/*     */     
/* 171 */     private long inTimeForInFlow = -1L;
/*     */     
/* 173 */     private long inTimeForOutFlow = -1L;
/*     */     private final EndPointStatisticsStack this$0;
/*     */     
/*     */     public EndPointStatistics(String endPointName, long initTime, boolean inFlow, boolean statisticsEnable, boolean fault) {
/* 177 */       if (inFlow) {
/* 178 */         this.endPointName = endPointName;
/* 179 */         this.inTimeForInFlow = initTime;
/* 180 */         this.isStatisticsEnable = statisticsEnable;
/* 181 */         this.isFault = fault;
/*     */       } 
/*     */     }
/*     */     
/*     */     public boolean equals(Object o) {
/* 186 */       if (this == o) return true; 
/* 187 */       if (o == null || getClass() != o.getClass()) return false;
/*     */       
/* 189 */       EndPointStatistics that = (EndPointStatistics)o;
/*     */       
/* 191 */       if ((this.endPointName != null) ? !this.endPointName.equals(that.endPointName) : (that.endPointName != null)) {
/* 192 */         return false;
/*     */       }
/* 194 */       return true;
/*     */     }
/*     */ 
/*     */     
/* 198 */     public int hashCode() { return (this.endPointName != null) ? this.endPointName.hashCode() : 0; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\impl\EndPointStatisticsStack.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*  34 */   private static final Log log = LogFactory.getLog(ProxyServiceStatisticsStack.class);
/*     */   
/*     */   private String proxyServiceName;
/*     */   
/*     */   private boolean isStatisticsEnable = false;
/*     */   
/*  40 */   private long inTimeForInFlow = -1L;
/*     */   
/*  42 */   private long inTimeForOutFlow = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isINFault;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isOUTFault;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) {
/*  57 */     if (isInFlow) {
/*  58 */       this.proxyServiceName = key;
/*  59 */       this.isStatisticsEnable = isStatisticsEnable;
/*  60 */       this.inTimeForInFlow = initTime;
/*  61 */       this.isINFault = isFault;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  71 */     if (this.proxyServiceName != null && this.isStatisticsEnable && this.inTimeForInFlow != -1L) {
/*  72 */       this.inTimeForOutFlow = System.currentTimeMillis();
/*  73 */       this.isOUTFault = isFault;
/*  74 */       statisticsCollector.reportForProxyService(this.proxyServiceName, false, this.inTimeForInFlow, this.inTimeForOutFlow, this.isINFault);
/*     */       
/*  76 */       this.inTimeForInFlow = -1L;
/*  77 */     } else if (this.inTimeForOutFlow != -1L) {
/*  78 */       statisticsCollector.reportForProxyService(this.proxyServiceName, true, this.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */       
/*  80 */       this.inTimeForOutFlow = -1L;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  93 */     if (name != null && this.proxyServiceName != null && this.proxyServiceName.equals(name)) {
/*  94 */       reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     } else {
/*  96 */       handleException(""Invalid ProxyService Name "" + name + "" expected "" + this.proxyServiceName);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) { reportToStatisticsCollector(statisticsCollector, isFault); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 111 */     log.error(msg);
/* 112 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\impl\ProxyServiceStatisticsStack.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.SequenceStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*  36 */   private List sequenceStatisticsList = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  49 */   public void put(String sequenceName, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) { this.sequenceStatisticsList.add(new SequenceStatistics(sequenceName, initTime, isInFlow, isStatisticsEnable, isFault)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  61 */     int top = this.sequenceStatisticsList.size();
/*  62 */     if (top > 0) {
/*  63 */       popSequenceStatistics(this.sequenceStatisticsList.size() - 1, statisticsCollector);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  69 */     if (!this.sequenceStatisticsList.isEmpty()) {
/*  70 */       List tobeRemoved = new ArrayList();
/*  71 */       Iterator seqIterator = this.sequenceStatisticsList.iterator();
/*  72 */       while (seqIterator.hasNext()) {
/*  73 */         SequenceStatistics sequenceStatistics = seqIterator.next();
/*     */         
/*  75 */         if (sequenceStatistics != null) {
/*  76 */           if (sequenceStatistics.isStatisticsEnable && sequenceStatistics.sequenceName != null && sequenceStatistics.sequenceName.equals(name))
/*     */           {
/*     */ 
/*     */             
/*  80 */             statisticsCollector.reportForSequence(sequenceStatistics.sequenceName, !sequenceStatistics.isInFlow, sequenceStatistics.initTime, System.currentTimeMillis(), sequenceStatistics.isFault);
/*     */           }
/*     */ 
/*     */           
/*  84 */           tobeRemoved.add(sequenceStatistics);
/*     */         } 
/*     */       } 
/*  87 */       this.sequenceStatisticsList.removeAll(tobeRemoved);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  99 */     int i = this.sequenceStatisticsList.size() - 1;
/* 100 */     for (; i >= 0; i--) {
/* 101 */       popSequenceStatistics(i, statisticsCollector);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void popSequenceStatistics(int index, StatisticsCollector statisticsCollector) {
/* 111 */     if (index >= 0) {
/* 112 */       SequenceStatistics sequenceStatistics = this.sequenceStatisticsList.get(index);
/*     */       
/* 114 */       if (sequenceStatistics != null) {
/* 115 */         if (sequenceStatistics.isStatisticsEnable && sequenceStatistics.sequenceName != null)
/*     */         {
/* 117 */           statisticsCollector.reportForSequence(sequenceStatistics.sequenceName, !sequenceStatistics.isInFlow, sequenceStatistics.initTime, System.currentTimeMillis(), sequenceStatistics.isFault);
/*     */         }
/*     */ 
/*     */         
/* 121 */         this.sequenceStatisticsList.remove(index);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   class SequenceStatistics
/*     */   {
/*     */     String sequenceName;
/*     */     
/*     */     long initTime;
/*     */     
/*     */     boolean isInFlow;
/*     */     
/*     */     boolean isStatisticsEnable;
/*     */     
/*     */     private boolean isFault;
/*     */     
/*     */     private final SequenceStatisticsStack this$0;
/*     */ 
/*     */     
/*     */     public SequenceStatistics(String sequenceName, long initTime, boolean inFlow, boolean statisticsEnable, boolean isFault) {
/* 144 */       this.sequenceName = sequenceName;
/* 145 */       this.initTime = initTime;
/* 146 */       this.isInFlow = inFlow;
/* 147 */       this.isStatisticsEnable = statisticsEnable;
/* 148 */       this.isFault = isFault;
/*     */     }
/*     */     
/*     */     public boolean equals(Object o) {
/* 152 */       if (this == o) return true; 
/* 153 */       if (o == null || getClass() != o.getClass()) return false;
/*     */       
/* 155 */       SequenceStatistics that = (SequenceStatistics)o;
/*     */       
/* 157 */       if (!this.sequenceName.equals(that.sequenceName)) return false;
/*     */       
/* 159 */       return true;
/*     */     }
/*     */ 
/*     */     
/* 163 */     public int hashCode() { return this.sequenceName.hashCode(); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synapse\statistics\impl\SequenceStatisticsStack.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.UUIDGenerator,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.net.InetAddress;
/*     */ import java.net.UnknownHostException;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UUIDGenerator
/*     */ {
/*  34 */   private static String baseUUID = null;
/*  35 */   private static long incrementingValue = 0L;
/*     */   
/*  37 */   private static Random myRand = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean useNano = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getUUID() {
/*  47 */     if (baseUUID == null) {
/*  48 */       baseUUID = getInitialUUID();
/*  49 */       baseUUID = ""urn:uuid:"" + baseUUID;
/*     */     } 
/*  51 */     if (++incrementingValue >= Long.MAX_VALUE) {
/*  52 */       incrementingValue = 0L;
/*     */     }
/*     */     
/*  55 */     if (useNano) {
/*  56 */       return baseUUID + (System.nanoTime() + incrementingValue) + Integer.toString(myRand.nextInt());
/*     */     }
/*     */ 
/*     */     
/*  60 */     return baseUUID + (System.currentTimeMillis() + incrementingValue) + Integer.toString(myRand.nextInt());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static String getInitialUUID() {
/*     */     String str;
/*     */     try {
/*  69 */       if (System.class.getMethod(""nanoTime"", new Class[0]) != null) {
/*  70 */         useNano = true;
/*     */       }
/*  72 */     } catch (NoSuchMethodException ignore) {}
/*     */     
/*  74 */     if (myRand == null) {
/*  75 */       myRand = new Random();
/*     */     }
/*  77 */     long rand = myRand.nextLong();
/*     */     
/*     */     try {
/*  80 */       str = InetAddress.getLocalHost().toString();
/*  81 */     } catch (UnknownHostException e) {
/*  82 */       str = Thread.currentThread().getName();
/*     */     } 
/*  84 */     StringBuffer sb = new StringBuffer();
/*  85 */     sb.append(str);
/*  86 */     sb.append("":"");
/*  87 */     sb.append(Long.toString(rand));
/*  88 */     MessageDigest md5 = null;
/*     */     try {
/*  90 */       md5 = MessageDigest.getInstance(""MD5"");
/*  91 */     } catch (NoSuchAlgorithmException e) {}
/*     */ 
/*     */ 
/*     */     
/*  95 */     md5.update(sb.toString().getBytes());
/*  96 */     byte[] array = md5.digest();
/*  97 */     StringBuffer sb2 = new StringBuffer();
/*  98 */     for (int j = 0; j < array.length; j++) {
/*  99 */       int b = array[j] & 0xFF;
/* 100 */       sb2.append(Integer.toHexString(b));
/*     */     } 
/* 102 */     int begin = myRand.nextInt();
/* 103 */     if (begin < 0) begin *= -1; 
/* 104 */     begin %= 8;
/* 105 */     return sb2.toString().substring(begin, begin + 18).toUpperCase();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.0.jar!\org\apache\synaps\\util\UUIDGenerator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
