metric_name,file
org.apache.ivy.Ivy,"/*     */ package org.apache.ivy;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Properties;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.check.CheckEngine;
/*     */ import org.apache.ivy.core.deliver.DeliverEngine;
/*     */ import org.apache.ivy.core.deliver.DeliverEngineSettings;
/*     */ import org.apache.ivy.core.deliver.DeliverOptions;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.event.IvyListener;
/*     */ import org.apache.ivy.core.install.InstallEngine;
/*     */ import org.apache.ivy.core.install.InstallEngineSettings;
/*     */ import org.apache.ivy.core.install.InstallOptions;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.publish.PublishEngine;
/*     */ import org.apache.ivy.core.publish.PublishEngineSettings;
/*     */ import org.apache.ivy.core.publish.PublishOptions;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.repository.RepositoryManagementEngine;
/*     */ import org.apache.ivy.core.repository.RepositoryManagementEngineSettings;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveEngineSettings;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.retrieve.RetrieveEngine;
/*     */ import org.apache.ivy.core.retrieve.RetrieveEngineSettings;
/*     */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.core.search.SearchEngine;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.core.sort.SortEngine;
/*     */ import org.apache.ivy.core.sort.SortEngineSettings;
/*     */ import org.apache.ivy.core.sort.SortOptions;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.repository.TransferEvent;
/*     */ import org.apache.ivy.plugins.repository.TransferListener;
/*     */ import org.apache.ivy.plugins.resolver.BasicResolver;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.plugins.trigger.Trigger;
/*     */ import org.apache.ivy.util.HostUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.MessageLoggerEngine;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ivy
/*     */ {
/*     */   private static final int KILO = 1024;
/* 132 */   public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(""yyyyMMddHHmmss"");
/*     */   
/*     */   private static final String IVY_VERSION;
/*     */   
/*     */   private static final String IVY_DATE;
/*     */   
/*     */   private boolean interrupted;
/*     */   
/*     */   private boolean bound;
/*     */   
/*     */   private IvySettings settings;
/*     */   private EventManager eventManager;
/*     */   private SortEngine sortEngine;
/*     */   
/*     */   static  {
/* 147 */     Properties props = new Properties();
/* 148 */     URL moduleURL = Message.class.getResource(""/module.properties"");
/* 149 */     if (moduleURL != null) {
/*     */       try {
/* 151 */         InputStream module = moduleURL.openStream();
/* 152 */         props.load(module);
/* 153 */         module.close();
/* 154 */       } catch (IOException e) {}
/*     */     }
/*     */ 
/*     */     
/* 158 */     IVY_VERSION = props.getProperty(""version"", ""non official version"");
/* 159 */     IVY_DATE = props.getProperty(""date"", """");
/*     */   }
/*     */ 
/*     */   
/*     */   private SearchEngine searchEngine;
/*     */   
/*     */   private CheckEngine checkEngine;
/*     */   private ResolveEngine resolveEngine;
/*     */   private RetrieveEngine retrieveEngine;
/*     */   
/* 169 */   public static String getIvyVersion() { return IVY_VERSION; }
/*     */ 
/*     */   
/*     */   private DeliverEngine deliverEngine;
/*     */   
/*     */   private PublishEngine publishEngine;
/*     */   
/*     */   private InstallEngine installEngine;
/*     */   
/*     */   private RepositoryManagementEngine repositoryEngine;
/*     */   
/* 180 */   public static String getIvyDate() { return IVY_DATE; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public static String getIvyHomeURL() { return ""http://ant.apache.org/ivy/""; }
/*     */ 
/*     */   
/*     */   public static Ivy newInstance() {
/* 192 */     Ivy ivy = new Ivy();
/* 193 */     ivy.bind();
/* 194 */     return ivy;
/*     */   }
/*     */   
/*     */   public static Ivy newInstance(IvySettings settings) {
/* 198 */     Ivy ivy = new Ivy();
/* 199 */     ivy.setSettings(settings);
/* 200 */     ivy.bind();
/* 201 */     return ivy;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   private MessageLoggerEngine loggerEngine = new MessageLoggerEngine();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void bind() {
/* 268 */     pushContext();
/*     */     try {
/* 270 */       if (this.settings == null) {
/* 271 */         this.settings = new IvySettings();
/*     */       }
/* 273 */       if (this.eventManager == null) {
/* 274 */         this.eventManager = new EventManager();
/*     */       }
/* 276 */       if (this.sortEngine == null) {
/* 277 */         this.sortEngine = new SortEngine((SortEngineSettings)this.settings);
/*     */       }
/* 279 */       if (this.searchEngine == null) {
/* 280 */         this.searchEngine = new SearchEngine(this.settings);
/*     */       }
/* 282 */       if (this.resolveEngine == null) {
/* 283 */         this.resolveEngine = new ResolveEngine((ResolveEngineSettings)this.settings, this.eventManager, this.sortEngine);
/*     */       }
/* 285 */       if (this.retrieveEngine == null) {
/* 286 */         this.retrieveEngine = new RetrieveEngine((RetrieveEngineSettings)this.settings, this.eventManager);
/*     */       }
/* 288 */       if (this.deliverEngine == null) {
/* 289 */         this.deliverEngine = new DeliverEngine((DeliverEngineSettings)this.settings);
/*     */       }
/* 291 */       if (this.publishEngine == null) {
/* 292 */         this.publishEngine = new PublishEngine((PublishEngineSettings)this.settings, this.eventManager);
/*     */       }
/* 294 */       if (this.installEngine == null) {
/* 295 */         this.installEngine = new InstallEngine((InstallEngineSettings)this.settings, this.searchEngine, this.resolveEngine);
/*     */       }
/*     */       
/* 298 */       if (this.repositoryEngine == null) {
/* 299 */         this.repositoryEngine = new RepositoryManagementEngine((RepositoryManagementEngineSettings)this.settings, this.searchEngine, this.resolveEngine);
/*     */       }
/*     */ 
/*     */       
/* 303 */       this.eventManager.addTransferListener(new TransferListener() {
/*     */             public void transferProgress(TransferEvent evt) {
/*     */               ResolveData resolve;
/* 306 */               switch (evt.getEventType()) {
/*     */                 case 3:
/* 308 */                   resolve = IvyContext.getContext().getResolveData();
/* 309 */                   if (resolve == null || !""quiet"".equals(resolve.getOptions().getLog()))
/*     */                   {
/* 311 */                     Message.progress();
/*     */                   }
/*     */                   break;
/*     */                 case 2:
/* 315 */                   resolve = IvyContext.getContext().getResolveData();
/* 316 */                   if (resolve == null || !""quiet"".equals(resolve.getOptions().getLog()))
/*     */                   {
/* 318 */                     Message.endProgress("" ("" + (evt.getTotalLength() / 1024L) + ""kB)"");
/*     */                   }
/*     */                   break;
/*     */               } 
/*     */             }
/*     */ 
/*     */             
/*     */             private final Ivy this$0;
/*     */           });
/* 327 */       this.bound = true;
/*     */     } finally {
/* 329 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static interface IvyCallback
/*     */   {
/*     */     Object doInIvyContext(Ivy param1Ivy, IvyContext param1IvyContext);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object execute(IvyCallback callback) {
/* 356 */     pushContext();
/*     */     try {
/* 358 */       return callback.doInIvyContext(this, IvyContext.getContext());
/*     */     } finally {
/* 360 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void pushContext() {
/* 375 */     if (IvyContext.getContext().peekIvy() != this) {
/*     */ 
/*     */       
/* 378 */       IvyContext.pushNewContext();
/* 379 */       IvyContext.getContext().setIvy(this);
/*     */     }
/*     */     else {
/*     */       
/* 383 */       IvyContext.pushContext(IvyContext.getContext());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 400 */   public void popContext() { IvyContext.popContext(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void configure(File settingsFile) throws ParseException, IOException {
/* 408 */     pushContext();
/*     */     try {
/* 410 */       assertBound();
/* 411 */       this.settings.load(settingsFile);
/* 412 */       postConfigure();
/*     */     } finally {
/* 414 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void configure(URL settingsURL) throws ParseException, IOException {
/* 419 */     pushContext();
/*     */     try {
/* 421 */       assertBound();
/* 422 */       this.settings.load(settingsURL);
/* 423 */       postConfigure();
/*     */     } finally {
/* 425 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void configureDefault() throws ParseException, IOException {
/* 430 */     pushContext();
/*     */     try {
/* 432 */       assertBound();
/* 433 */       this.settings.loadDefault();
/* 434 */       postConfigure();
/*     */     } finally {
/* 436 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void configureDefault14() throws ParseException, IOException {
/* 444 */     pushContext();
/*     */     try {
/* 446 */       assertBound();
/* 447 */       this.settings.loadDefault14();
/* 448 */       postConfigure();
/*     */     } finally {
/* 450 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean check(URL ivyFile, String resolvername) {
/* 458 */     pushContext();
/*     */     try {
/* 460 */       return this.checkEngine.check(ivyFile, resolvername);
/*     */     } finally {
/* 462 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolveReport resolve(File ivySource) throws ParseException, IOException {
/* 471 */     pushContext();
/*     */     try {
/* 473 */       return this.resolveEngine.resolve(ivySource);
/*     */     } finally {
/* 475 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public ResolveReport resolve(URL ivySource) throws ParseException, IOException {
/* 480 */     pushContext();
/*     */     try {
/* 482 */       return this.resolveEngine.resolve(ivySource);
/*     */     } finally {
/* 484 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolveReport resolve(ModuleRevisionId mrid, ResolveOptions options, boolean changing) throws ParseException, IOException {
/* 490 */     pushContext();
/*     */     try {
/* 492 */       return this.resolveEngine.resolve(mrid, options, changing);
/*     */     } finally {
/* 494 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolveReport resolve(URL ivySource, ResolveOptions options) throws ParseException, IOException {
/* 500 */     pushContext();
/*     */     try {
/* 502 */       return this.resolveEngine.resolve(ivySource, options);
/*     */     } finally {
/* 504 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolveReport resolve(ModuleDescriptor md, ResolveOptions options) throws ParseException, IOException {
/* 510 */     pushContext();
/*     */     try {
/* 512 */       return this.resolveEngine.resolve(md, options);
/*     */     } finally {
/* 514 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolveReport install(ModuleRevisionId mrid, String from, String to, InstallOptions options) throws IOException {
/* 524 */     pushContext();
/*     */     try {
/* 526 */       return this.installEngine.install(mrid, from, to, options);
/*     */     } finally {
/* 528 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleRevisionId mrid, String destFilePattern, RetrieveOptions options) throws IOException {
/* 538 */     pushContext();
/*     */     try {
/* 540 */       return this.retrieveEngine.retrieve(mrid, destFilePattern, options);
/*     */     } finally {
/* 542 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void deliver(ModuleRevisionId mrid, String revision, String destIvyPattern) throws IOException, ParseException {
/* 552 */     pushContext();
/*     */     try {
/* 554 */       this.deliverEngine.deliver(mrid, revision, destIvyPattern, DeliverOptions.newInstance(this.settings));
/*     */     } finally {
/*     */       
/* 557 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void deliver(String revision, String destIvyPattern, DeliverOptions options) throws IOException, ParseException {
/* 563 */     pushContext();
/*     */     try {
/* 565 */       this.deliverEngine.deliver(revision, destIvyPattern, options);
/*     */     } finally {
/* 567 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void deliver(ModuleRevisionId mrid, String revision, String destIvyPattern, DeliverOptions options) throws IOException, ParseException {
/* 584 */     pushContext();
/*     */     try {
/* 586 */       this.deliverEngine.deliver(mrid, revision, destIvyPattern, options);
/*     */     } finally {
/* 588 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Collection publish(ModuleRevisionId mrid, Collection srcArtifactPattern, String resolverName, PublishOptions options) throws IOException {
/* 598 */     pushContext();
/*     */     try {
/* 600 */       return this.publishEngine.publish(mrid, srcArtifactPattern, resolverName, options);
/*     */     } finally {
/* 602 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List sortNodes(Collection nodes, SortOptions options) {
/* 614 */     pushContext();
/*     */     try {
/* 616 */       return getSortEngine().sortNodes(nodes, options);
/*     */     } finally {
/* 618 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List sortModuleDescriptors(Collection moduleDescriptors, SortOptions options) {
/* 637 */     pushContext();
/*     */     try {
/* 639 */       return getSortEngine().sortModuleDescriptors(moduleDescriptors, options);
/*     */     } finally {
/* 641 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision findModule(ModuleRevisionId mrid) {
/* 650 */     pushContext();
/*     */     try {
/* 652 */       ResolveOptions options = new ResolveOptions();
/* 653 */       options.setValidate(false);
/* 654 */       return this.resolveEngine.findModule(mrid, options);
/*     */     } finally {
/* 656 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public ModuleEntry[] listModuleEntries(OrganisationEntry org) {
/* 661 */     pushContext();
/*     */     try {
/* 663 */       return this.searchEngine.listModuleEntries(org);
/*     */     } finally {
/* 665 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public ModuleId[] listModules(ModuleId criteria, PatternMatcher matcher) {
/* 670 */     pushContext();
/*     */     try {
/* 672 */       return this.searchEngine.listModules(criteria, matcher);
/*     */     } finally {
/* 674 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public ModuleRevisionId[] listModules(ModuleRevisionId criteria, PatternMatcher matcher) {
/* 679 */     pushContext();
/*     */     try {
/* 681 */       return this.searchEngine.listModules(criteria, matcher);
/*     */     } finally {
/* 683 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String[] listModules(String org) {
/* 688 */     pushContext();
/*     */     try {
/* 690 */       return this.searchEngine.listModules(org);
/*     */     } finally {
/* 692 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public OrganisationEntry[] listOrganisationEntries() {
/* 697 */     pushContext();
/*     */     try {
/* 699 */       return this.searchEngine.listOrganisationEntries();
/*     */     } finally {
/* 701 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String[] listOrganisations() {
/* 706 */     pushContext();
/*     */     try {
/* 708 */       return this.searchEngine.listOrganisations();
/*     */     } finally {
/* 710 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public RevisionEntry[] listRevisionEntries(ModuleEntry module) {
/* 715 */     pushContext();
/*     */     try {
/* 717 */       return this.searchEngine.listRevisionEntries(module);
/*     */     } finally {
/* 719 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String[] listRevisions(String org, String module) {
/* 724 */     pushContext();
/*     */     try {
/* 726 */       return this.searchEngine.listRevisions(org, module);
/*     */     } finally {
/* 728 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String[] listTokenValues(String token, Map otherTokenValues) {
/* 733 */     pushContext();
/*     */     try {
/* 735 */       return this.searchEngine.listTokenValues(token, otherTokenValues);
/*     */     } finally {
/* 737 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void interrupt() {
/* 750 */     Thread operatingThread = IvyContext.getContext().getOperatingThread();
/* 751 */     interrupt(operatingThread);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void interrupt(Thread operatingThread) {
/* 759 */     if (operatingThread != null && operatingThread.isAlive()) {
/* 760 */       if (operatingThread == Thread.currentThread()) {
/* 761 */         throw new IllegalStateException(""cannot call interrupt from ivy operating thread"");
/*     */       }
/* 763 */       Message.verbose(""interrupting operating thread..."");
/* 764 */       operatingThread.interrupt();
/* 765 */       synchronized (this) {
/* 766 */         this.interrupted = true;
/*     */       } 
/*     */       try {
/* 769 */         Message.verbose(""waiting clean interruption of operating thread"");
/* 770 */         operatingThread.join(this.settings.getInterruptTimeout());
/* 771 */       } catch (InterruptedException e) {
/*     */         
/* 773 */         Thread.currentThread().interrupt();
/*     */       } 
/* 775 */       if (operatingThread.isAlive()) {
/* 776 */         Message.warn(""waited clean interruption for too long: stopping operating thread"");
/* 777 */         operatingThread.stop();
/*     */       } 
/* 779 */       synchronized (this) {
/* 780 */         this.interrupted = false;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 786 */   public synchronized boolean isInterrupted() { return this.interrupted; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkInterrupted() {
/* 794 */     if (isInterrupted()) {
/* 795 */       Message.info(""operation interrupted"");
/* 796 */       throw new RuntimeException(""operation interrupted"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 801 */   public static String getWorkingRevision() { return ""working@"" + HostUtil.getLocalHostName(); }
/*     */ 
/*     */ 
/*     */   
/* 805 */   public ResolutionCacheManager getResolutionCacheManager() { return this.settings.getResolutionCacheManager(); }
/*     */ 
/*     */ 
/*     */   
/*     */   private void assertBound() {
/* 810 */     if (!this.bound) {
/* 811 */       bind();
/*     */     }
/*     */   }
/*     */   
/*     */   private void postConfigure() {
/* 816 */     Collection triggers = this.settings.getTriggers();
/* 817 */     for (Iterator iter = triggers.iterator(); iter.hasNext(); ) {
/* 818 */       Trigger trigger = iter.next();
/* 819 */       this.eventManager.addIvyListener((IvyListener)trigger, trigger.getEventFilter());
/*     */     } 
/*     */     
/* 822 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 823 */       DependencyResolver resolver = iter.next();
/* 824 */       if (resolver instanceof BasicResolver) {
/* 825 */         ((BasicResolver)resolver).setEventManager(this.eventManager);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   public String getVariable(String name) {
/* 831 */     pushContext();
/*     */     try {
/* 833 */       assertBound();
/* 834 */       return this.settings.getVariable(name);
/*     */     } finally {
/* 836 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public String substitute(String str) {
/* 841 */     pushContext();
/*     */     try {
/* 843 */       assertBound();
/* 844 */       return this.settings.substitute(str);
/*     */     } finally {
/* 846 */       popContext();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void setVariable(String varName, String value) {
/* 851 */     pushContext();
/*     */     try {
/* 853 */       assertBound();
/* 854 */       this.settings.setVariable(varName, value);
/*     */     } finally {
/* 856 */       popContext();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 865 */   public IvySettings getSettings() { return this.settings; }
/*     */ 
/*     */ 
/*     */   
/* 869 */   public EventManager getEventManager() { return this.eventManager; }
/*     */ 
/*     */ 
/*     */   
/* 873 */   public CheckEngine getCheckEngine() { return this.checkEngine; }
/*     */ 
/*     */ 
/*     */   
/* 877 */   public void setCheckEngine(CheckEngine checkEngine) { this.checkEngine = checkEngine; }
/*     */ 
/*     */ 
/*     */   
/* 881 */   public DeliverEngine getDeliverEngine() { return this.deliverEngine; }
/*     */ 
/*     */ 
/*     */   
/* 885 */   public void setDeliverEngine(DeliverEngine deliverEngine) { this.deliverEngine = deliverEngine; }
/*     */ 
/*     */ 
/*     */   
/* 889 */   public InstallEngine getInstallEngine() { return this.installEngine; }
/*     */ 
/*     */ 
/*     */   
/* 893 */   public void setInstallEngine(InstallEngine installEngine) { this.installEngine = installEngine; }
/*     */ 
/*     */ 
/*     */   
/* 897 */   public PublishEngine getPublishEngine() { return this.publishEngine; }
/*     */ 
/*     */ 
/*     */   
/* 901 */   public void setPublishEngine(PublishEngine publishEngine) { this.publishEngine = publishEngine; }
/*     */ 
/*     */ 
/*     */   
/* 905 */   public ResolveEngine getResolveEngine() { return this.resolveEngine; }
/*     */ 
/*     */ 
/*     */   
/* 909 */   public void setResolveEngine(ResolveEngine resolveEngine) { this.resolveEngine = resolveEngine; }
/*     */ 
/*     */ 
/*     */   
/* 913 */   public RetrieveEngine getRetrieveEngine() { return this.retrieveEngine; }
/*     */ 
/*     */ 
/*     */   
/* 917 */   public void setRetrieveEngine(RetrieveEngine retrieveEngine) { this.retrieveEngine = retrieveEngine; }
/*     */ 
/*     */ 
/*     */   
/* 921 */   public SearchEngine getSearchEngine() { return this.searchEngine; }
/*     */ 
/*     */ 
/*     */   
/* 925 */   public void setSearchEngine(SearchEngine searchEngine) { this.searchEngine = searchEngine; }
/*     */ 
/*     */ 
/*     */   
/* 929 */   public SortEngine getSortEngine() { return this.sortEngine; }
/*     */ 
/*     */ 
/*     */   
/* 933 */   public void setSortEngine(SortEngine sortEngine) { this.sortEngine = sortEngine; }
/*     */ 
/*     */ 
/*     */   
/* 937 */   public RepositoryManagementEngine getRepositoryEngine() { return this.repositoryEngine; }
/*     */ 
/*     */ 
/*     */   
/* 941 */   public void setRepositoryEngine(RepositoryManagementEngine repositoryEngine) { this.repositoryEngine = repositoryEngine; }
/*     */ 
/*     */ 
/*     */   
/* 945 */   public void setEventManager(EventManager eventManager) { this.eventManager = eventManager; }
/*     */ 
/*     */ 
/*     */   
/* 949 */   public void setSettings(IvySettings settings) { this.settings = settings; }
/*     */ 
/*     */ 
/*     */   
/* 953 */   public MessageLoggerEngine getLoggerEngine() { return this.loggerEngine; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\Ivy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.Ivy14,"/*     */ package org.apache.ivy;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.deliver.DeliverOptions;
/*     */ import org.apache.ivy.core.deliver.PublishingDependencyRevisionResolver;
/*     */ import org.apache.ivy.core.install.InstallOptions;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.publish.PublishOptions;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.core.sort.NonMatchingVersionReporter;
/*     */ import org.apache.ivy.core.sort.SilentNonMatchingVersionReporter;
/*     */ import org.apache.ivy.core.sort.SortOptions;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ivy14
/*     */ {
/*     */   private Ivy ivy;
/*     */   
/*  85 */   public Ivy14() { this(Ivy.newInstance()); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public Ivy14(Ivy ivy) { this.ivy = ivy; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public boolean check(URL ivyFile, String resolvername) { return this.ivy.check(ivyFile, resolvername); }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void configure(File settingsFile) throws ParseException, IOException { this.ivy.configure(settingsFile); }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void configure(URL settingsURL) throws ParseException, IOException { this.ivy.configure(settingsURL); }
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void configureDefault() throws ParseException, IOException { this.ivy.configureDefault(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void deliver(ModuleRevisionId mrid, String revision, File cache, String destIvyPattern, String status, Date pubdate, PublishingDependencyRevisionResolver pdrResolver, boolean validate, boolean resolveDynamicRevisions) throws IOException, ParseException { this.ivy.deliver(mrid, revision, destIvyPattern, new DeliverOptions(status, pubdate, pdrResolver, validate, resolveDynamicRevisions, null)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void deliver(ModuleRevisionId mrid, String revision, File cache, String destIvyPattern, String status, Date pubdate, PublishingDependencyRevisionResolver pdrResolver, boolean validate) throws IOException, ParseException { deliver(mrid, revision, cache, destIvyPattern, status, pubdate, pdrResolver, validate, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public Map determineArtifactsToCopy(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern, Filter artifactFilter) throws ParseException, IOException { return this.ivy.getRetrieveEngine().determineArtifactsToCopy(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern).setArtifactFilter(artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public Map determineArtifactsToCopy(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern) throws ParseException, IOException { return this.ivy.getRetrieveEngine().determineArtifactsToCopy(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport download(Artifact artifact, File cache, boolean useOrigin) {
/* 143 */     Message.deprecated(""using cache and useOrigin when calling download is not supported anymore"");
/*     */     
/* 145 */     return this.ivy.getResolveEngine().download(artifact, new DownloadOptions());
/*     */   }
/*     */   
/*     */   public ResolvedModuleRevision findModule(ModuleRevisionId id) {
/* 149 */     ResolveOptions options = new ResolveOptions();
/* 150 */     options.setValidate(false);
/* 151 */     return this.ivy.getResolveEngine().findModule(id, options);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public IvyNode[] getDependencies(ModuleDescriptor md, String[] confs, File cache, Date date, ResolveReport report, boolean validate, boolean transitive) { return this.ivy.getResolveEngine().getDependencies(md, newResolveOptions(confs, null, cache, date, validate, false, transitive, false, true, true, FilterHelper.NO_FILTER), report); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public IvyNode[] getDependencies(ModuleDescriptor md, String[] confs, File cache, Date date, ResolveReport report, boolean validate) { return this.ivy.getResolveEngine().getDependencies(md, newResolveOptions(confs, null, cache, date, validate, false, true, false, true, true, FilterHelper.NO_FILTER), report); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public IvyNode[] getDependencies(URL ivySource, String[] confs, File cache, Date date, boolean validate) throws ParseException, IOException { return this.ivy.getResolveEngine().getDependencies(ivySource, newResolveOptions(confs, null, cache, date, validate, false, true, false, true, true, FilterHelper.NO_FILTER)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public String getVariable(String name) { return this.ivy.getVariable(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public ResolveReport install(ModuleRevisionId mrid, String from, String to, boolean transitive, boolean validate, boolean overwrite, Filter artifactFilter, File cache, String matcherName) throws IOException { return this.ivy.install(mrid, from, to, (new InstallOptions()).setTransitive(transitive).setValidate(validate).setOverwrite(overwrite).setArtifactFilter(artifactFilter).setMatcherName(matcherName)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void interrupt() { this.ivy.interrupt(); }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void interrupt(Thread operatingThread) { this.ivy.interrupt(operatingThread); }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public boolean isInterrupted() { return this.ivy.isInterrupted(); }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public ModuleEntry[] listModuleEntries(OrganisationEntry org) { return this.ivy.listModuleEntries(org); }
/*     */ 
/*     */ 
/*     */   
/* 211 */   public ModuleId[] listModules(ModuleId criteria, PatternMatcher matcher) { return this.ivy.listModules(criteria, matcher); }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public ModuleRevisionId[] listModules(ModuleRevisionId criteria, PatternMatcher matcher) { return this.ivy.listModules(criteria, matcher); }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public String[] listModules(String org) { return this.ivy.listModules(org); }
/*     */ 
/*     */ 
/*     */   
/* 223 */   public OrganisationEntry[] listOrganisationEntries() { return this.ivy.listOrganisationEntries(); }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public String[] listOrganisations() { return this.ivy.listOrganisations(); }
/*     */ 
/*     */ 
/*     */   
/* 231 */   public RevisionEntry[] listRevisionEntries(ModuleEntry module) { return this.ivy.listRevisionEntries(module); }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public String[] listRevisions(String org, String module) { return this.ivy.listRevisions(org, module); }
/*     */ 
/*     */ 
/*     */   
/* 239 */   public String[] listTokenValues(String token, Map otherTokenValues) { return this.ivy.listTokenValues(token, otherTokenValues); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 245 */   public Collection publish(ModuleDescriptor md, DependencyResolver resolver, Collection srcArtifactPattern, String srcIvyPattern, Artifact[] extraArtifacts, boolean overwrite, String conf) throws IOException { return this.ivy.getPublishEngine().publish(md, srcArtifactPattern, resolver, (new PublishOptions()).setSrcIvyPattern(srcIvyPattern).setExtraArtifacts(extraArtifacts).setOverwrite(overwrite).setConfs(splitConfs(conf))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public Collection publish(ModuleRevisionId mrid, String pubrevision, File cache, Collection srcArtifactPattern, String resolverName, String srcIvyPattern, String status, Date pubdate, Artifact[] extraArtifacts, boolean validate, boolean overwrite, boolean update, String conf) throws IOException { return this.ivy.publish(mrid, srcArtifactPattern, resolverName, (new PublishOptions()).setStatus(status).setPubdate(pubdate).setPubrevision(pubrevision).setSrcIvyPattern(srcIvyPattern).setExtraArtifacts(extraArtifacts).setUpdate(update).setValidate(validate).setOverwrite(overwrite).setConfs(splitConfs(conf))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   public Collection publish(ModuleRevisionId mrid, String pubrevision, File cache, String srcArtifactPattern, String resolverName, String srcIvyPattern, boolean validate, boolean overwrite) throws IOException { return this.ivy.publish(mrid, Collections.singleton(srcArtifactPattern), resolverName, (new PublishOptions()).setPubrevision(pubrevision).setSrcIvyPattern(srcIvyPattern).setValidate(validate).setOverwrite(overwrite)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public Collection publish(ModuleRevisionId mrid, String pubrevision, File cache, String srcArtifactPattern, String resolverName, String srcIvyPattern, boolean validate) throws IOException { return this.ivy.publish(mrid, Collections.singleton(srcArtifactPattern), resolverName, (new PublishOptions()).setPubrevision(pubrevision).setSrcIvyPattern(srcIvyPattern).setValidate(validate)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public Collection publish(ModuleRevisionId mrid, String pubrevision, File cache, String srcArtifactPattern, String resolverName, String srcIvyPattern, String status, Date pubdate, Artifact[] extraArtifacts, boolean validate, boolean overwrite, boolean update, String conf) throws IOException { return this.ivy.publish(mrid, Collections.singleton(srcArtifactPattern), resolverName, (new PublishOptions()).setStatus(status).setPubdate(pubdate).setPubrevision(pubrevision).setSrcIvyPattern(srcIvyPattern).setExtraArtifacts(extraArtifacts).setUpdate(update).setValidate(validate).setOverwrite(overwrite).setConfs(splitConfs(conf))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public ResolveReport resolve(File ivySource) throws ParseException, IOException { return this.ivy.resolve(ivySource); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   public ResolveReport resolve(ModuleDescriptor md, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, boolean useOrigin, boolean download, boolean outputReport, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(md, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, transitive, useOrigin, download, outputReport, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ResolveOptions newResolveOptions(String[] confs, String revision, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, boolean useOrigin, boolean download, boolean outputReport, Filter artifactFilter) {
/* 309 */     if (useOrigin) {
/* 310 */       this.ivy.getSettings().useDeprecatedUseOrigin();
/*     */     }
/* 312 */     return (new ResolveOptions()).setConfs(confs).setRevision(revision).setValidate(validate).setUseCacheOnly(useCacheOnly).setTransitive(transitive).setDownload(download).setOutputReport(outputReport).setArtifactFilter(artifactFilter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 321 */   public ResolveReport resolve(ModuleDescriptor md, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, boolean download, boolean outputReport, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(md, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, transitive, false, download, outputReport, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 328 */   public ResolveReport resolve(ModuleDescriptor md, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(md, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, transitive, false, true, true, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 335 */   public ResolveReport resolve(ModuleDescriptor md, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(md, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, true, false, true, true, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 342 */   public ResolveReport resolve(ModuleRevisionId mrid, String[] confs, boolean transitive, boolean changing, File cache, Date date, boolean validate, boolean useCacheOnly, boolean useOrigin, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(mrid, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, transitive, useOrigin, true, true, artifactFilter), changing); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 349 */   public ResolveReport resolve(ModuleRevisionId mrid, String[] confs, boolean transitive, boolean changing, File cache, Date date, boolean validate, boolean useCacheOnly, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(mrid, newResolveOptions(confs, null, cache, date, validate, useCacheOnly, transitive, false, true, true, artifactFilter), changing); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public ResolveReport resolve(ModuleRevisionId mrid, String[] confs) throws ParseException, IOException { return this.ivy.resolve(mrid, newResolveOptions(confs, null, this.ivy.getSettings().getDefaultCache(), null, true, false, true, false, true, true, FilterHelper.NO_FILTER), false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 363 */   public ResolveReport resolve(URL ivySource, String revision, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, boolean useOrigin, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(ivySource, newResolveOptions(confs, revision, cache, date, validate, useCacheOnly, transitive, useOrigin, true, true, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 370 */   public ResolveReport resolve(URL ivySource, String revision, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, boolean transitive, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(ivySource, newResolveOptions(confs, revision, cache, date, validate, useCacheOnly, transitive, false, true, true, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   public ResolveReport resolve(URL ivySource, String revision, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly, Filter artifactFilter) throws ParseException, IOException { return this.ivy.resolve(ivySource, newResolveOptions(confs, revision, cache, date, validate, useCacheOnly, true, false, true, true, artifactFilter)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public ResolveReport resolve(URL ivySource, String revision, String[] confs, File cache, Date date, boolean validate, boolean useCacheOnly) throws ParseException, IOException { return this.ivy.resolve(ivySource, newResolveOptions(confs, revision, cache, date, validate, useCacheOnly, true, false, true, true, FilterHelper.NO_FILTER)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 389 */   public ResolveReport resolve(URL ivySource, String revision, String[] confs, File cache, Date date, boolean validate) throws ParseException, IOException { return this.ivy.resolve(ivySource, newResolveOptions(confs, revision, cache, date, validate, false, true, false, true, true, FilterHelper.NO_FILTER)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 394 */   public ResolveReport resolve(URL ivySource) throws ParseException, IOException { return this.ivy.resolve(ivySource); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern, Filter artifactFilter, boolean sync, boolean useOrigin, boolean makeSymlinks) {
/*     */     try {
/* 401 */       return this.ivy.retrieve(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern).setArtifactFilter(artifactFilter).setSync(sync).setUseOrigin(useOrigin).setMakeSymlinks(makeSymlinks));
/*     */ 
/*     */     
/*     */     }
/* 405 */     catch (IOException e) {
/* 406 */       throw new RuntimeException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern, Filter artifactFilter, boolean sync, boolean useOrigin) {
/*     */     try {
/* 413 */       return this.ivy.retrieve(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern).setArtifactFilter(artifactFilter).setSync(sync).setUseOrigin(useOrigin));
/*     */ 
/*     */     
/*     */     }
/* 417 */     catch (IOException e) {
/* 418 */       throw new RuntimeException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern, Filter artifactFilter) {
/*     */     try {
/* 425 */       return this.ivy.retrieve(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern).setArtifactFilter(artifactFilter));
/*     */     
/*     */     }
/* 428 */     catch (IOException e) {
/* 429 */       throw new RuntimeException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleId moduleId, String[] confs, File cache, String destFilePattern, String destIvyPattern) {
/*     */     try {
/* 436 */       return this.ivy.retrieve(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs).setDestIvyPattern(destIvyPattern));
/*     */     
/*     */     }
/* 439 */     catch (IOException e) {
/* 440 */       throw new RuntimeException(e);
/*     */     } 
/*     */   }
/*     */   
/*     */   public int retrieve(ModuleId moduleId, String[] confs, File cache, String destFilePattern) {
/*     */     try {
/* 446 */       return this.ivy.retrieve(new ModuleRevisionId(moduleId, Ivy.getWorkingRevision()), destFilePattern, (new RetrieveOptions()).setConfs(confs));
/*     */     }
/* 448 */     catch (IOException e) {
/* 449 */       throw new RuntimeException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 454 */   public void setVariable(String varName, String value) { this.ivy.setVariable(varName, value); }
/*     */ 
/*     */ 
/*     */   
/* 458 */   public List sortModuleDescriptors(Collection moduleDescriptors) { return this.ivy.sortModuleDescriptors(moduleDescriptors, (new SortOptions()).setNonMatchingVersionReporter((NonMatchingVersionReporter)new SilentNonMatchingVersionReporter())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 464 */   public List sortNodes(Collection nodes) { return this.ivy.sortNodes(nodes, (new SortOptions()).setNonMatchingVersionReporter((NonMatchingVersionReporter)new SilentNonMatchingVersionReporter())); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 469 */   public String substitute(String str) { return this.ivy.substitute(str); }
/*     */ 
/*     */   
/*     */   private String[] splitConfs(String conf) {
/* 473 */     if (conf == null || """".equals(conf)) {
/* 474 */       return null;
/*     */     }
/* 476 */     String[] confs = conf.split("","");
/* 477 */     for (int i = 0; i < confs.length; i++) {
/* 478 */       confs[i] = confs[i].trim();
/*     */     }
/* 480 */     return confs;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\Ivy14.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.Main,"/*     */ package org.apache.ivy;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.net.URLClassLoader;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.deliver.DeliverOptions;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.publish.PublishOptions;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.util.DefaultMessageLogger;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.MessageLogger;
/*     */ import org.apache.ivy.util.cli.CommandLine;
/*     */ import org.apache.ivy.util.cli.CommandLineParser;
/*     */ import org.apache.ivy.util.cli.OptionBuilder;
/*     */ import org.apache.ivy.util.cli.ParseException;
/*     */ import org.apache.ivy.util.url.CredentialsStore;
/*     */ import org.apache.ivy.util.url.URLHandler;
/*     */ import org.apache.ivy.util.url.URLHandlerDispatcher;
/*     */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class Main
/*     */ {
/*     */   private static final int HELP_WIDTH = 80;
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*  72 */   static CommandLineParser getParser() { return (new CommandLineParser()).addCategory(""settings options"").addOption((new OptionBuilder(""settings"")).arg(""settingsfile"").description(""use given file for settings"").create()).addOption((new OptionBuilder(""cache"")).arg(""cachedir"").description(""use given directory for cache"").create()).addOption((new OptionBuilder(""novalidate"")).description(""do not validate ivy files against xsd"").create()).addOption((new OptionBuilder(""m2compatible"")).description(""use maven2 compatibility"").create()).addOption((new OptionBuilder(""conf"")).arg(""settingsfile"").deprecated().description(""use given file for settings"").create()).addOption((new OptionBuilder(""useOrigin"")).deprecated().description(""use original artifact location with local resolvers instead of copying to the cache"").create()).addCategory(""resolve options"").addOption((new OptionBuilder(""ivy"")).arg(""ivyfile"").description(""use given file as ivy file"").create()).addOption((new OptionBuilder(""dependency"")).arg(""organisation"").arg(""module"").arg(""revision"").description(""use this instead of ivy file to do the rest of the work with this as a dependency."").create()).addOption((new OptionBuilder(""confs"")).arg(""configurations"").countArgs(false).description(""resolve given configurations"").create()).addCategory(""retrieve options"").addOption((new OptionBuilder(""retrieve"")).arg(""retrievepattern"").description(""use given pattern as retrieve pattern"").create()).addOption((new OptionBuilder(""sync"")).description(""use sync mode for retrieve"").create()).addCategory(""cache path options"").addOption((new OptionBuilder(""cachepath"")).arg(""cachepathfile"").description(""outputs a classpath consisting of all dependencies in cache (including transitive ones) of the given ivy file to the given cachepathfile"").create()).addCategory(""deliver options"").addOption((new OptionBuilder(""deliverto"")).arg(""ivypattern"").description(""use given pattern as resolved ivy file pattern"").create()).addCategory(""publish options"").addOption((new OptionBuilder(""publish"")).arg(""resolvername"").description(""use given resolver to publish to"").create()).addOption((new OptionBuilder(""publishpattern"")).arg(""artpattern"").description(""use given pattern to find artifacts to publish"").create()).addOption((new OptionBuilder(""revision"")).arg(""revision"").description(""use given revision to publish the module"").create()).addOption((new OptionBuilder(""status"")).arg(""status"").description(""use given status to publish the module"").create()).addOption((new OptionBuilder(""overwrite"")).description(""overwrite files in the repository if they exist"").create()).addCategory(""http auth options"").addOption((new OptionBuilder(""realm"")).arg(""realm"").description(""use given realm for HTTP AUTH"").create()).addOption((new OptionBuilder(""host"")).arg(""host"").description(""use given host for HTTP AUTH"").create()).addOption((new OptionBuilder(""username"")).arg(""username"").description(""use given username for HTTP AUTH"").create()).addOption((new OptionBuilder(""passwd"")).arg(""passwd"").description(""use given password for HTTP AUTH"").create()).addCategory(""launcher options"").addOption((new OptionBuilder(""main"")).arg(""main"").description(""the FQCN of the main class to launch"").create()).addOption((new OptionBuilder(""args"")).arg(""args"").countArgs(false).description(""the arguments to give to the launched process"").create()).addOption((new OptionBuilder(""cp"")).arg(""cp"").description(""extra classpath to use when launching process"").create()).addCategory(""message options"").addOption((new OptionBuilder(""debug"")).description(""set message level to debug"").create()).addOption((new OptionBuilder(""verbose"")).description(""set message level to verbose"").create()).addOption((new OptionBuilder(""warn"")).description(""set message level to warn"").create()).addOption((new OptionBuilder(""error"")).description(""set message level to error"").create()).addCategory(""help options"").addOption((new OptionBuilder(""?"")).description(""display this help"").create()).addOption((new OptionBuilder(""deprecated"")).description(""show deprecated options"").create()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void main(String[] args) throws Exception {
/* 162 */     CommandLineParser parser = getParser();
/*     */     try {
/* 164 */       run(parser, args);
/* 165 */     } catch (ParseException ex) {
/* 166 */       System.err.println(ex.getMessage());
/* 167 */       usage(parser, false);
/* 168 */       System.exit(1);
/*     */     } 
/*     */   }
/*     */   static void run(CommandLineParser parser, String[] args) throws Exception {
/*     */     File ivyfile;
/*     */     String[] confs;
/* 174 */     CommandLine line = parser.parse(args);
/*     */     
/* 176 */     if (line.hasOption(""?"")) {
/* 177 */       usage(parser, line.hasOption(""deprecated""));
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 182 */     boolean validate = !line.hasOption(""novalidate"");
/*     */     
/* 184 */     Ivy ivy = Ivy.newInstance();
/* 185 */     initMessage(line, ivy);
/* 186 */     IvySettings settings = initSettings(line, ivy);
/* 187 */     ivy.pushContext();
/*     */     
/* 189 */     File cache = new File(settings.substitute(line.getOptionValue(""cache"", settings.getDefaultCache().getAbsolutePath())));
/*     */ 
/*     */     
/* 192 */     if (line.hasOption(""cache""))
/*     */     {
/* 194 */       settings.setDefaultCache(cache);
/*     */     }
/*     */     
/* 197 */     if (!cache.exists()) {
/* 198 */       cache.mkdirs();
/* 199 */     } else if (!cache.isDirectory()) {
/* 200 */       error(cache + "" is not a directory"");
/*     */     } 
/*     */ 
/*     */     
/* 204 */     if (line.hasOption(""confs"")) {
/* 205 */       confs = line.getOptionValues(""confs"");
/*     */     } else {
/* 207 */       confs = new String[] { ""*"" };
/*     */     } 
/*     */ 
/*     */     
/* 211 */     if (line.hasOption(""dependency"")) {
/* 212 */       String[] dep = line.getOptionValues(""dependency"");
/* 213 */       ivyfile = File.createTempFile(""ivy"", "".xml"");
/* 214 */       ivyfile.deleteOnExit();
/* 215 */       DefaultModuleDescriptor md = DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance(dep[0], dep[1] + ""-caller"", ""working""));
/*     */ 
/*     */       
/* 218 */       DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor((ModuleDescriptor)md, ModuleRevisionId.newInstance(dep[0], dep[1], dep[2]), false, false, true);
/*     */       
/* 220 */       for (int i = 0; i < confs.length; i++) {
/* 221 */         dd.addDependencyConfiguration(""default"", confs[i]);
/*     */       }
/* 223 */       md.addDependency((DependencyDescriptor)dd);
/* 224 */       XmlModuleDescriptorWriter.write((ModuleDescriptor)md, ivyfile);
/* 225 */       confs = new String[] { ""default"" };
/*     */     } else {
/* 227 */       ivyfile = new File(settings.substitute(line.getOptionValue(""ivy"", ""ivy.xml"")));
/* 228 */       if (!ivyfile.exists()) {
/* 229 */         error(""ivy file not found: "" + ivyfile);
/* 230 */       } else if (ivyfile.isDirectory()) {
/* 231 */         error(""ivy file is not a file: "" + ivyfile);
/*     */       } 
/*     */     } 
/*     */     
/* 235 */     if (line.hasOption(""useOrigin"")) {
/* 236 */       ivy.getSettings().useDeprecatedUseOrigin();
/*     */     }
/* 238 */     ResolveOptions resolveOptions = (new ResolveOptions()).setConfs(confs).setValidate(validate);
/*     */     
/* 240 */     ResolveReport report = ivy.resolve(ivyfile.toURI().toURL(), resolveOptions);
/* 241 */     if (report.hasError()) {
/* 242 */       System.exit(1);
/*     */     }
/* 244 */     ModuleDescriptor md = report.getModuleDescriptor();
/*     */     
/* 246 */     if (confs.length == 1 && ""*"".equals(confs[0])) {
/* 247 */       confs = md.getConfigurationsNames();
/*     */     }
/* 249 */     if (line.hasOption(""retrieve"")) {
/* 250 */       String retrievePattern = settings.substitute(line.getOptionValue(""retrieve""));
/* 251 */       if (retrievePattern.indexOf(""["") == -1) {
/* 252 */         retrievePattern = retrievePattern + ""/lib/[conf]/[artifact].[ext]"";
/*     */       }
/* 254 */       ivy.retrieve(md.getModuleRevisionId(), retrievePattern, (new RetrieveOptions()).setConfs(confs).setSync(line.hasOption(""sync"")).setUseOrigin(line.hasOption(""useOrigin"")));
/*     */     } 
/*     */ 
/*     */     
/* 258 */     if (line.hasOption(""cachepath"")) {
/* 259 */       outputCachePath(ivy, cache, md, confs, line.getOptionValue(""cachepath"", ""ivycachepath.txt""));
/*     */     }
/*     */ 
/*     */     
/* 263 */     if (line.hasOption(""revision"")) {
/* 264 */       ivy.deliver(md.getResolvedModuleRevisionId(), settings.substitute(line.getOptionValue(""revision"")), settings.substitute(line.getOptionValue(""deliverto"", ""ivy-[revision].xml"")), DeliverOptions.newInstance(settings).setStatus(settings.substitute(line.getOptionValue(""status"", ""release""))).setValidate(validate));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 269 */       if (line.hasOption(""publish"")) {
/* 270 */         ivy.publish(md.getResolvedModuleRevisionId(), Collections.singleton(settings.substitute(line.getOptionValue(""publishpattern"", ""distrib/[type]s/[artifact]-[revision].[ext]""))), line.getOptionValue(""publish""), (new PublishOptions()).setPubrevision(settings.substitute(line.getOptionValue(""revision""))).setValidate(validate).setSrcIvyPattern(settings.substitute(line.getOptionValue(""deliverto"", ""ivy-[revision].xml""))).setOverwrite(line.hasOption(""overwrite"")));
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 280 */     if (line.hasOption(""main"")) {
/*     */       
/* 282 */       List fileList = getExtraClasspathFileList(line);
/*     */ 
/*     */       
/* 285 */       String[] fargs = line.getOptionValues(""args"");
/* 286 */       if (fargs == null) {
/* 287 */         fargs = new String[0];
/*     */       }
/* 289 */       String[] extra = line.getLeftOverArgs();
/* 290 */       if (extra == null) {
/* 291 */         extra = new String[0];
/*     */       }
/* 293 */       String[] params = new String[fargs.length + extra.length];
/* 294 */       System.arraycopy(fargs, 0, params, 0, fargs.length);
/* 295 */       System.arraycopy(extra, 0, params, fargs.length, extra.length);
/*     */       
/* 297 */       invoke(ivy, cache, md, confs, fileList, line.getOptionValue(""main""), params);
/*     */     } 
/* 299 */     ivy.getLoggerEngine().popLogger();
/* 300 */     ivy.popContext();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static List getExtraClasspathFileList(CommandLine line) {
/* 316 */     List fileList = null;
/* 317 */     if (line.hasOption(""cp"")) {
/* 318 */       fileList = new ArrayList();
/* 319 */       String[] cpArray = line.getOptionValues(""cp"");
/* 320 */       for (int index = 0; index < cpArray.length; index++) {
/* 321 */         StringTokenizer tokenizer = new StringTokenizer(cpArray[index], System.getProperty(""path.separator""));
/*     */         
/* 323 */         while (tokenizer.hasMoreTokens()) {
/* 324 */           String token = tokenizer.nextToken();
/* 325 */           File file = new File(token);
/* 326 */           if (file.exists()) {
/* 327 */             fileList.add(file); continue;
/*     */           } 
/* 329 */           Message.warn(""Skipping extra classpath '"" + file + ""' as it does not exist."");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 335 */     return fileList;
/*     */   }
/*     */ 
/*     */   
/*     */   private static IvySettings initSettings(CommandLine line, Ivy ivy) throws ParseException, IOException, ParseException {
/* 340 */     IvySettings settings = ivy.getSettings();
/* 341 */     settings.addAllVariables(System.getProperties());
/* 342 */     if (line.hasOption(""m2compatible"")) {
/* 343 */       settings.setVariable(""ivy.default.configuration.m2compatible"", ""true"");
/*     */     }
/*     */     
/* 346 */     configureURLHandler(line.getOptionValue(""realm"", null), line.getOptionValue(""host"", null), line.getOptionValue(""username"", null), line.getOptionValue(""passwd"", null));
/*     */ 
/*     */     
/* 349 */     String settingsPath = line.getOptionValue(""settings"", """");
/* 350 */     if ("""".equals(settingsPath)) {
/* 351 */       settingsPath = line.getOptionValue(""conf"", """");
/* 352 */       if (!"""".equals(settingsPath)) {
/* 353 */         Message.deprecated(""-conf is deprecated, use -settings instead"");
/*     */       }
/*     */     } 
/* 356 */     if ("""".equals(settingsPath)) {
/* 357 */       ivy.configureDefault();
/*     */     } else {
/* 359 */       File conffile = new File(settingsPath);
/* 360 */       if (!conffile.exists()) {
/* 361 */         error(""ivy configuration file not found: "" + conffile);
/* 362 */       } else if (conffile.isDirectory()) {
/* 363 */         error(""ivy configuration file is not a file: "" + conffile);
/*     */       } 
/* 365 */       ivy.configure(conffile);
/*     */     } 
/* 367 */     return settings;
/*     */   }
/*     */   
/*     */   private static void initMessage(CommandLine line, Ivy ivy) {
/* 371 */     if (line.hasOption(""debug"")) {
/* 372 */       ivy.getLoggerEngine().pushLogger((MessageLogger)new DefaultMessageLogger(4));
/* 373 */     } else if (line.hasOption(""verbose"")) {
/* 374 */       ivy.getLoggerEngine().pushLogger((MessageLogger)new DefaultMessageLogger(3));
/* 375 */     } else if (line.hasOption(""warn"")) {
/* 376 */       ivy.getLoggerEngine().pushLogger((MessageLogger)new DefaultMessageLogger(1));
/* 377 */     } else if (line.hasOption(""error"")) {
/* 378 */       ivy.getLoggerEngine().pushLogger((MessageLogger)new DefaultMessageLogger(0));
/*     */     } else {
/* 380 */       ivy.getLoggerEngine().pushLogger((MessageLogger)new DefaultMessageLogger(2));
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void outputCachePath(Ivy ivy, File cache, ModuleDescriptor md, String[] confs, String outFile) {
/*     */     try {
/* 387 */       String pathSeparator = System.getProperty(""path.separator"");
/* 388 */       StringBuffer buf = new StringBuffer();
/* 389 */       Collection all = new LinkedHashSet();
/* 390 */       ResolutionCacheManager cacheMgr = ivy.getResolutionCacheManager();
/* 391 */       XmlReportParser parser = new XmlReportParser();
/* 392 */       for (int i = 0; i < confs.length; i++) {
/* 393 */         String resolveId = ResolveOptions.getDefaultResolveId(md);
/* 394 */         File report = cacheMgr.getConfigurationResolveReportInCache(resolveId, confs[i]);
/* 395 */         parser.parse(report);
/*     */         
/* 397 */         all.addAll(Arrays.asList(parser.getArtifactReports()));
/*     */       } 
/* 399 */       for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/* 400 */         ArtifactDownloadReport artifact = iter.next();
/* 401 */         if (artifact.getLocalFile() != null) {
/* 402 */           buf.append(artifact.getLocalFile().getCanonicalPath());
/* 403 */           buf.append(pathSeparator);
/*     */         } 
/*     */       } 
/*     */       
/* 407 */       PrintWriter writer = new PrintWriter(new FileOutputStream(outFile));
/* 408 */       if (buf.length() > 0) {
/* 409 */         writer.println(buf.substring(0, buf.length() - pathSeparator.length()));
/*     */       }
/* 411 */       writer.close();
/* 412 */       System.out.println(""cachepath output to "" + outFile);
/*     */     }
/* 414 */     catch (Exception ex) {
/* 415 */       throw new RuntimeException(""impossible to build ivy cache path: "" + ex.getMessage(), ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static void invoke(Ivy ivy, File cache, ModuleDescriptor md, String[] confs, List fileList, String mainclass, String[] args) {
/* 422 */     List urls = new ArrayList();
/*     */ 
/*     */     
/* 425 */     if (fileList != null && fileList.size() > 0) {
/* 426 */       for (Iterator iter = fileList.iterator(); iter.hasNext(); ) {
/* 427 */         File file = iter.next();
/*     */         try {
/* 429 */           urls.add(file.toURI().toURL());
/* 430 */         } catch (MalformedURLException e) {}
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 437 */       Collection all = new LinkedHashSet();
/* 438 */       ResolutionCacheManager cacheMgr = ivy.getResolutionCacheManager();
/* 439 */       XmlReportParser parser = new XmlReportParser();
/* 440 */       for (int i = 0; i < confs.length; i++) {
/* 441 */         String resolveId = ResolveOptions.getDefaultResolveId(md);
/* 442 */         File report = cacheMgr.getConfigurationResolveReportInCache(resolveId, confs[i]);
/* 443 */         parser.parse(report);
/*     */         
/* 445 */         all.addAll(Arrays.asList(parser.getArtifactReports()));
/*     */       } 
/* 447 */       for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/* 448 */         ArtifactDownloadReport artifact = iter.next();
/*     */         
/* 450 */         if (artifact.getLocalFile() != null) {
/* 451 */           urls.add(artifact.getLocalFile().toURI().toURL());
/*     */         }
/*     */       } 
/* 454 */     } catch (Exception ex) {
/* 455 */       throw new RuntimeException(""impossible to build ivy cache path: "" + ex.getMessage(), ex);
/*     */     } 
/*     */ 
/*     */     
/* 459 */     URLClassLoader classLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), Main.class.getClassLoader());
/*     */ 
/*     */     
/*     */     try {
/* 463 */       Class c = classLoader.loadClass(mainclass);
/*     */       
/* 465 */       Method mainMethod = c.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/* 467 */       Thread.currentThread().setContextClassLoader(classLoader);
/* 468 */       mainMethod.invoke(null, new Object[] { (args == null) ? new String[0] : args });
/* 469 */     } catch (ClassNotFoundException cnfe) {
/* 470 */       throw new RuntimeException(""Could not find class: "" + mainclass, cnfe);
/* 471 */     } catch (SecurityException e) {
/* 472 */       throw new RuntimeException(""Could not find main method: "" + mainclass, e);
/* 473 */     } catch (NoSuchMethodException e) {
/* 474 */       throw new RuntimeException(""Could not find main method: "" + mainclass, e);
/* 475 */     } catch (IllegalAccessException e) {
/* 476 */       throw new RuntimeException(""No permissions to invoke main method: "" + mainclass, e);
/* 477 */     } catch (InvocationTargetException e) {
/* 478 */       throw new RuntimeException(""Unexpected exception invoking main method: "" + mainclass, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static void configureURLHandler(String realm, String host, String username, String passwd) {
/* 485 */     CredentialsStore.INSTANCE.addCredentials(realm, host, username, passwd);
/*     */     
/* 487 */     URLHandlerDispatcher dispatcher = new URLHandlerDispatcher();
/* 488 */     URLHandler httpHandler = URLHandlerRegistry.getHttp();
/* 489 */     dispatcher.setDownloader(""http"", httpHandler);
/* 490 */     dispatcher.setDownloader(""https"", httpHandler);
/* 491 */     URLHandlerRegistry.setDefault((URLHandler)dispatcher);
/*     */   }
/*     */ 
/*     */   
/* 495 */   private static void error(String msg) throws ParseException { throw new ParseException(msg); }
/*     */ 
/*     */ 
/*     */   
/*     */   private static void usage(CommandLineParser parser, boolean showDeprecated) {
/* 500 */     PrintWriter pw = new PrintWriter(System.out);
/* 501 */     parser.printHelp(pw, 80, ""ivy"", showDeprecated);
/* 502 */     pw.flush();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\Main.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.AddPathTask,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.DirSet;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddPathTask
/*     */   extends Task
/*     */ {
/*     */   private String toPath;
/*     */   private boolean first = false;
/*     */   private Path toAdd;
/*     */   
/*  41 */   public String getTopath() { return this.toPath; }
/*     */ 
/*     */ 
/*     */   
/*  45 */   public void setTopath(String toPath) { this.toPath = toPath; }
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/*  49 */     super.setProject(project);
/*  50 */     this.toAdd = new Path(project);
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/*  54 */     Object element = getProject().getReference(this.toPath);
/*  55 */     if (element == null) {
/*  56 */       throw new BuildException(""destination path not found: "" + this.toPath);
/*     */     }
/*  58 */     if (!(element instanceof Path)) {
/*  59 */       throw new BuildException(""destination path is not a path: "" + element.getClass());
/*     */     }
/*  61 */     Path dest = (Path)element;
/*  62 */     if (this.first) {
/*     */ 
/*     */       
/*  65 */       this.toAdd.append(dest);
/*  66 */       getProject().addReference(this.toPath, this.toAdd);
/*     */     } else {
/*  68 */       dest.append(this.toAdd);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  73 */   public void add(Path path) throws BuildException { this.toAdd.add(path); }
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void addDirset(DirSet dset) throws BuildException { this.toAdd.addDirset(dset); }
/*     */ 
/*     */ 
/*     */   
/*  81 */   public void addFilelist(FileList fl) throws BuildException { this.toAdd.addFilelist(fl); }
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void addFileset(FileSet fs) throws BuildException { this.toAdd.addFileset(fs); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public Path createPath() throws BuildException { return this.toAdd.createPath(); }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public Path.PathElement createPathElement() throws BuildException { return this.toAdd.createPathElement(); }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public boolean isFirst() { return this.first; }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setFirst(boolean first) { this.first = first; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\AddPathTask.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.AntBuildTrigger,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.plugins.trigger.AbstractTrigger;
/*     */ import org.apache.ivy.plugins.trigger.Trigger;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.Ant;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntBuildTrigger
/*     */   extends AbstractTrigger
/*     */   implements Trigger
/*     */ {
/*     */   private boolean onlyOnce = true;
/*  63 */   private String target = null;
/*     */   
/*  65 */   private Collection builds = new ArrayList();
/*     */   
/*     */   private String buildFilePattern;
/*     */   
/*     */   private String prefix;
/*     */   
/*     */   public void progress(IvyEvent event) {
/*  72 */     File f = getBuildFile(event);
/*  73 */     if (f.exists()) {
/*  74 */       if (this.onlyOnce && isBuilt(f)) {
/*  75 */         Message.verbose(""target build file already built, skipping: "" + f);
/*     */       } else {
/*  77 */         Ant ant = new Ant();
/*  78 */         Project project = (Project)IvyContext.peekInContextStack(""ant-project"");
/*     */         
/*  80 */         if (project == null) {
/*  81 */           project = new Project();
/*  82 */           project.init();
/*     */         } 
/*     */         
/*  85 */         ant.setProject(project);
/*  86 */         ant.setTaskName(""ant"");
/*     */         
/*  88 */         ant.setAntfile(f.getAbsolutePath());
/*  89 */         ant.setInheritAll(false);
/*  90 */         String target = getTarget();
/*  91 */         if (target != null) {
/*  92 */           ant.setTarget(target);
/*     */         }
/*  94 */         Map atts = event.getAttributes();
/*  95 */         for (Iterator iter = atts.keySet().iterator(); iter.hasNext(); ) {
/*  96 */           String key = iter.next();
/*  97 */           String value = (String)atts.get(key);
/*  98 */           if (value != null) {
/*  99 */             Property p = ant.createProperty();
/* 100 */             p.setName((this.prefix == null) ? key : (this.prefix + key));
/* 101 */             p.setValue(value);
/*     */           } 
/*     */         } 
/*     */         
/* 105 */         Message.verbose(""triggering build: "" + f + "" target="" + target + "" for "" + event);
/*     */         try {
/* 107 */           ant.execute();
/* 108 */         } catch (BuildException e) {
/* 109 */           Message.verbose(""Exception occurred while executing target "" + target);
/* 110 */           e.printStackTrace();
/* 111 */           throw e;
/*     */         } 
/* 113 */         markBuilt(f);
/*     */         
/* 115 */         Message.debug(""triggered build finished: "" + f + "" target="" + target + "" for "" + event);
/*     */       } 
/*     */     } else {
/*     */       
/* 119 */       Message.verbose(""no build file found for dependency, skipping: "" + f);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 124 */   private void markBuilt(File f) { this.builds.add(f.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */   
/* 128 */   private boolean isBuilt(File f) { return this.builds.contains(f.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */   
/* 132 */   private File getBuildFile(IvyEvent event) { return IvyContext.getContext().getSettings().resolveFile(IvyPatternHelper.substituteTokens(getBuildFilePattern(), event.getAttributes())); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public String getBuildFilePattern() { return this.buildFilePattern; }
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setAntfile(String pattern) { this.buildFilePattern = pattern; }
/*     */ 
/*     */ 
/*     */   
/* 145 */   public String getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setTarget(String target) { this.target = target; }
/*     */ 
/*     */ 
/*     */   
/* 153 */   public boolean isOnlyonce() { return this.onlyOnce; }
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void setOnlyonce(boolean onlyonce) { this.onlyOnce = onlyonce; }
/*     */ 
/*     */ 
/*     */   
/* 161 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/* 165 */     this.prefix = prefix;
/* 166 */     if (!prefix.endsWith("".""))
/* 167 */       this.prefix += "".""; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\AntBuildTrigger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.AntCallTrigger,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.plugins.trigger.AbstractTrigger;
/*     */ import org.apache.ivy.plugins.trigger.Trigger;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.CallTarget;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntCallTrigger
/*     */   extends AbstractTrigger
/*     */   implements Trigger
/*     */ {
/*     */   private boolean onlyonce = true;
/*  55 */   private String target = null;
/*     */   
/*  57 */   private Collection calls = new ArrayList();
/*     */   
/*     */   private String prefix;
/*     */   
/*     */   public void progress(IvyEvent event) {
/*  62 */     Project project = (Project)IvyContext.peekInContextStack(""ant-project"");
/*  63 */     if (project == null) {
/*  64 */       Message.info(""ant call trigger can only be used from an ant build. Ignoring."");
/*     */       return;
/*     */     } 
/*  67 */     if (this.onlyonce && isTriggered(event)) {
/*  68 */       Message.verbose(""call already triggered for this event, skipping: "" + event);
/*     */     } else {
/*  70 */       CallTarget call = new CallTarget();
/*     */       
/*  72 */       call.setProject(project);
/*  73 */       call.setTaskName(""antcall"");
/*     */       
/*  75 */       Map attributes = event.getAttributes();
/*  76 */       String target = IvyPatternHelper.substituteTokens(getTarget(), attributes);
/*  77 */       call.setTarget(target);
/*     */       
/*  79 */       for (Iterator iter = attributes.keySet().iterator(); iter.hasNext(); ) {
/*  80 */         String key = iter.next();
/*  81 */         String value = (String)attributes.get(key);
/*  82 */         Property p = call.createParam();
/*  83 */         p.setName((this.prefix == null) ? key : (this.prefix + key));
/*  84 */         p.setValue((value == null) ? """" : value);
/*     */       } 
/*     */       
/*  87 */       Message.verbose(""triggering ant call: target="" + target + "" for "" + event);
/*  88 */       call.execute();
/*  89 */       markTriggered(event);
/*     */       
/*  91 */       Message.debug(""triggered ant call finished: target="" + target + "" for "" + event);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  96 */   private void markTriggered(IvyEvent event) { this.calls.add(event); }
/*     */ 
/*     */ 
/*     */   
/* 100 */   private boolean isTriggered(IvyEvent event) { return this.calls.contains(event); }
/*     */ 
/*     */ 
/*     */   
/* 104 */   public String getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setTarget(String target) { this.target = target; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public boolean isOnlyonce() { return this.onlyonce; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setOnlyonce(boolean onlyonce) { this.onlyonce = onlyonce; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/* 124 */     this.prefix = prefix;
/* 125 */     if (!prefix.endsWith("".""))
/* 126 */       this.prefix += "".""; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\AntCallTrigger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.AntMessageLogger,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.util.AbstractMessageLogger;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.MessageLogger;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntMessageLogger
/*     */   extends AbstractMessageLogger
/*     */ {
/*     */   private static final int PROGRESS_LOG_PERIOD = 1500;
/*     */   private ProjectComponent projectComponent;
/*     */   
/*     */   public static void register(Task task, final Ivy ivy) {
/*  48 */     AntMessageLogger logger = new AntMessageLogger((ProjectComponent)task);
/*  49 */     ivy.getLoggerEngine().pushLogger((MessageLogger)logger);
/*  50 */     task.getProject().addBuildListener(new BuildListener() {
/*  51 */           private int stackDepth = 0;
/*     */           
/*     */           private final Ivy val$ivy;
/*     */ 
/*     */           
/*     */           public void buildFinished(BuildEvent event) {}
/*     */ 
/*     */           
/*     */           public void buildStarted(BuildEvent event) {}
/*     */ 
/*     */           
/*     */           public void targetStarted(BuildEvent event) {}
/*     */           
/*     */           public void targetFinished(BuildEvent event) {}
/*     */           
/*  66 */           public void taskStarted(BuildEvent event) { this.stackDepth++; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/*     */           public void taskFinished(BuildEvent event) {
/*  75 */             this.stackDepth--;
/*  76 */             if (this.stackDepth == 0) {
/*  77 */               ivy.getLoggerEngine().popLogger();
/*  78 */               event.getProject().removeBuildListener(this);
/*     */             } 
/*     */           }
/*     */ 
/*     */ 
/*     */ 
/*     */           
/*     */           public void messageLogged(BuildEvent event) {}
/*     */         });
/*     */   }
/*     */ 
/*     */   
/*  90 */   private long lastProgressFlush = 0L;
/*     */   
/*  92 */   private StringBuffer buf = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected AntMessageLogger(ProjectComponent antProjectComponent) {
/* 102 */     Checks.checkNotNull(antProjectComponent, ""antProjectComponent"");
/* 103 */     this.projectComponent = antProjectComponent;
/*     */   }
/*     */ 
/*     */   
/* 107 */   public void log(String msg, int level) { this.projectComponent.log(msg, level); }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void rawlog(String msg, int level) { this.projectComponent.getProject().log(msg, level); }
/*     */ 
/*     */   
/*     */   public void doProgress() {
/* 115 */     this.buf.append(""."");
/* 116 */     if (this.lastProgressFlush == 0L) {
/* 117 */       this.lastProgressFlush = System.currentTimeMillis();
/*     */     }
/*     */     
/* 120 */     if (System.currentTimeMillis() - this.lastProgressFlush > 1500L) {
/* 121 */       this.projectComponent.log(this.buf.toString());
/* 122 */       this.buf.setLength(0);
/* 123 */       this.lastProgressFlush = System.currentTimeMillis();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void doEndProgress(String msg) {
/* 128 */     this.projectComponent.log(this.buf + msg);
/* 129 */     this.buf.setLength(0);
/* 130 */     this.lastProgressFlush = 0L;
/*     */   }
/*     */ 
/*     */   
/* 134 */   public String toString() { return ""AntMessageLogger:"" + this.projectComponent; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\AntMessageLogger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyAntSettings,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Properties;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.core.settings.IvyVariableContainer;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.MessageLogger;
/*     */ import org.apache.ivy.util.url.CredentialsStore;
/*     */ import org.apache.ivy.util.url.URLHandler;
/*     */ import org.apache.ivy.util.url.URLHandlerDispatcher;
/*     */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ import org.apache.tools.ant.types.DataType;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyAntSettings
/*     */   extends DataType
/*     */ {
/*     */   public static class Credentials
/*     */   {
/*     */     private String realm;
/*     */     private String host;
/*     */     private String username;
/*     */     private String passwd;
/*     */     
/*  53 */     public String getPasswd() { return this.passwd; }
/*     */ 
/*     */ 
/*     */     
/*  57 */     public void setPasswd(String passwd) { this.passwd = passwd; }
/*     */ 
/*     */ 
/*     */     
/*  61 */     public String getRealm() { return this.realm; }
/*     */ 
/*     */ 
/*     */     
/*  65 */     public void setRealm(String realm) { this.realm = IvyAntSettings.format(realm); }
/*     */ 
/*     */ 
/*     */     
/*  69 */     public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */     
/*  73 */     public void setHost(String host) { this.host = IvyAntSettings.format(host); }
/*     */ 
/*     */ 
/*     */     
/*  77 */     public String getUsername() { return this.username; }
/*     */ 
/*     */ 
/*     */     
/*  81 */     public void setUsername(String userName) { this.username = IvyAntSettings.format(userName); }
/*     */   }
/*     */ 
/*     */   
/*  85 */   private Ivy ivyEngine = null;
/*     */   
/*  87 */   private File file = null;
/*     */   
/*  89 */   private URL url = null;
/*     */   
/*  91 */   private String realm = null;
/*     */   
/*  93 */   private String host = null;
/*     */   
/*  95 */   private String userName = null;
/*     */   
/*  97 */   private String passwd = null;
/*     */   
/*  99 */   private String id = ""ivy.instance"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean autoRegistered = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static IvyAntSettings getDefaultInstance(Project project) {
/* 111 */     Object defaultInstanceObj = project.getReference(""ivy.instance"");
/* 112 */     if (defaultInstanceObj != null && defaultInstanceObj.getClass().getClassLoader() != IvyAntSettings.class.getClassLoader()) {
/*     */ 
/*     */       
/* 115 */       project.log(""ivy.instance reference an ivy:settings defined in an other classloader.  An new default one will be used in this project."", 1);
/*     */       
/* 117 */       defaultInstanceObj = null;
/*     */     } 
/* 119 */     if (defaultInstanceObj != null && !(defaultInstanceObj instanceof IvyAntSettings)) {
/* 120 */       throw new BuildException(""ivy.instance reference a "" + defaultInstanceObj.getClass().getName() + "" an not an IvyAntSettings.  Please don't use this reference id ()"");
/*     */     }
/*     */ 
/*     */     
/* 124 */     if (defaultInstanceObj == null) {
/* 125 */       project.log(""No ivy:settings found for the default reference 'ivy.instance'.  A default instance will be used"", 2);
/*     */ 
/*     */       
/* 128 */       IvyAntSettings settings = new IvyAntSettings();
/* 129 */       settings.setProject(project);
/* 130 */       project.addReference(""ivy.instance"", settings);
/* 131 */       settings.createIvyEngine();
/* 132 */       return settings;
/*     */     } 
/* 134 */     return (IvyAntSettings)defaultInstanceObj;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public URL getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public String getPasswd() { return this.passwd; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setPasswd(String aPasswd) { this.passwd = aPasswd; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public String getRealm() { return this.realm; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setRealm(String aRealm) { this.realm = format(aRealm); }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setHost(String aHost) { this.host = format(aHost); }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public String getUsername() { return this.userName; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setUsername(String aUserName) { this.userName = format(aUserName); }
/*     */ 
/*     */   
/*     */   public void setProject(Project p) {
/* 179 */     super.setProject(p);
/*     */     
/* 181 */     if (""ivy.instance"".equals(this.id) && !getProject().getReferences().containsKey(this.id)) {
/*     */       
/* 183 */       getProject().addReference(""ivy.instance"", this);
/* 184 */       this.autoRegistered = true;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 189 */   private static String format(String str) { return (str == null) ? str : ((str.trim().length() == 0) ? null : str.trim()); }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void addConfiguredCredentials(Credentials c) { CredentialsStore.INSTANCE.addCredentials(c.getRealm(), c.getHost(), c.getUsername(), c.getPasswd()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void setUrl(String confUrl) throws MalformedURLException { this.url = new URL(confUrl); }
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setUrl(URL url) { this.url = url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setId(String id) {
/* 214 */     if (this.autoRegistered && getProject().getReference(this.id) == this) {
/* 215 */       getProject().getReferences().remove(this.id);
/* 216 */       this.autoRegistered = false;
/*     */     } 
/* 218 */     this.id = id;
/*     */     
/* 220 */     if (getProject() != null) {
/* 221 */       getProject().addReference(this.id, this);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 226 */   public String getId() { return this.id; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Ivy getConfiguredIvyInstance() {
/* 234 */     if (this.ivyEngine == null) {
/* 235 */       createIvyEngine();
/*     */     }
/* 237 */     return this.ivyEngine;
/*     */   }
/*     */   
/*     */   void createIvyEngine() {
/* 241 */     Property prop = new Property()
/*     */       {
/* 243 */         public void execute() throws BuildException { addProperties(IvyAntSettings.this.getDefaultProperties()); }
/*     */         private final IvyAntSettings this$0;
/*     */       };
/* 246 */     prop.setProject(getProject());
/* 247 */     prop.init();
/* 248 */     prop.execute();
/*     */ 
/*     */     
/* 251 */     IvyAntVariableContainer ivyAntVariableContainer = new IvyAntVariableContainer(getProject());
/*     */     
/* 253 */     IvySettings settings = new IvySettings(ivyAntVariableContainer);
/* 254 */     settings.setBaseDir(getProject().getBaseDir());
/*     */     
/* 256 */     if (this.file == null && this.url == null) {
/* 257 */       defineDefaultSettingFile(ivyAntVariableContainer);
/*     */     }
/*     */     
/* 260 */     Ivy ivy = Ivy.newInstance(settings);
/* 261 */     ivy.getLoggerEngine().pushLogger((MessageLogger)new AntMessageLogger((ProjectComponent)this));
/* 262 */     Message.showInfo();
/*     */     try {
/* 264 */       configureURLHandler();
/* 265 */       if (this.file != null) {
/* 266 */         if (!this.file.exists()) {
/* 267 */           throw new BuildException(""settings file does not exist: "" + this.file);
/*     */         }
/* 269 */         ivy.configure(this.file);
/*     */       } else {
/* 271 */         if (this.url == null) {
/* 272 */           throw new AssertionError(""ivy setting should have either a file, either an url, and if not defineDefaultSettingFile must set it."");
/*     */         }
/*     */ 
/*     */         
/* 276 */         ivy.configure(this.url);
/*     */       } 
/* 278 */       ivyAntVariableContainer.updateProject(this.id);
/* 279 */       this.ivyEngine = ivy;
/* 280 */     } catch (ParseException e) {
/* 281 */       throw new BuildException(""impossible to configure ivy:settings with given "" + ((this.file != null) ? (""file: "" + this.file) : (""url: "" + this.url)) + "" : "" + e, e);
/*     */     }
/* 283 */     catch (IOException e) {
/* 284 */       throw new BuildException(""impossible to configure ivy:settings with given "" + ((this.file != null) ? (""file: "" + this.file) : (""url: "" + this.url)) + "" : "" + e, e);
/*     */     } finally {
/*     */       
/* 287 */       ivy.getLoggerEngine().popLogger();
/*     */     } 
/*     */   }
/*     */   
/*     */   protected Properties getDefaultProperties() {
/* 292 */     URL url = IvySettings.getDefaultPropertiesURL();
/*     */     
/* 294 */     Properties props = new Properties();
/* 295 */     verbose(""Loading "" + url);
/*     */     try {
/* 297 */       InputStream is = url.openStream();
/*     */       try {
/* 299 */         props.load(is);
/*     */       } finally {
/* 301 */         if (is != null) {
/* 302 */           is.close();
/*     */         }
/*     */       } 
/* 305 */     } catch (IOException ex) {
/* 306 */       throw new BuildException(ex);
/*     */     } 
/* 308 */     return props;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void defineDefaultSettingFile(IvyVariableContainer variableContainer) {
/* 317 */     String settingsFileName = variableContainer.getVariable(""ivy.conf.file"");
/* 318 */     if (settingsFileName != null && !settingsFileName.equals(variableContainer.getVariable(""ivy.settings.file""))) {
/*     */       
/* 320 */       info(""DEPRECATED: 'ivy.conf.file' is deprecated, use 'ivy.settings.file' instead"");
/*     */     } else {
/* 322 */       settingsFileName = variableContainer.getVariable(""ivy.settings.file"");
/*     */     } 
/* 324 */     File[] settingsLocations = { new File(getProject().getBaseDir(), settingsFileName), new File(getProject().getBaseDir(), ""ivyconf.xml""), new File(settingsFileName), new File(""ivyconf.xml"") };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 330 */     for (int i = 0; i < settingsLocations.length; i++) {
/* 331 */       this.file = settingsLocations[i];
/* 332 */       verbose(""searching settings file: trying "" + this.file);
/* 333 */       if (this.file.exists()) {
/*     */         break;
/*     */       }
/*     */     } 
/* 337 */     if (!this.file.exists()) {
/* 338 */       if (Boolean.valueOf(getProject().getProperty(""ivy.14.compatible"")).booleanValue()) {
/* 339 */         info(""no settings file found, using Ivy 1.4 default..."");
/* 340 */         this.file = null;
/* 341 */         this.url = IvySettings.getDefault14SettingsURL();
/*     */       } else {
/* 343 */         info(""no settings file found, using default..."");
/* 344 */         this.file = null;
/* 345 */         this.url = IvySettings.getDefaultSettingsURL();
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 351 */   private void verbose(String msg) { log(msg, 3); }
/*     */ 
/*     */ 
/*     */   
/* 355 */   private void info(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */   
/*     */   private void configureURLHandler() {
/* 360 */     CredentialsStore.INSTANCE.addCredentials(getRealm(), getHost(), getUsername(), getPasswd());
/*     */     
/* 362 */     URLHandlerDispatcher dispatcher = new URLHandlerDispatcher();
/* 363 */     URLHandler httpHandler = URLHandlerRegistry.getHttp();
/* 364 */     dispatcher.setDownloader(""http"", httpHandler);
/* 365 */     dispatcher.setDownloader(""https"", httpHandler);
/* 366 */     URLHandlerRegistry.setDefault((URLHandler)dispatcher);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyAntSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyAntVariableContainer,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.settings.IvyVariableContainer;
/*     */ import org.apache.ivy.core.settings.IvyVariableContainerImpl;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class IvyAntVariableContainer
/*     */   extends IvyVariableContainerImpl
/*     */   implements IvyVariableContainer
/*     */ {
/*  33 */   private Map overwrittenProperties = new HashMap();
/*     */   
/*     */   private Project project;
/*     */ 
/*     */   
/*  38 */   public IvyAntVariableContainer(Project project) { this.project = project; }
/*     */ 
/*     */   
/*     */   public String getVariable(String name) {
/*  42 */     String r = (String)this.overwrittenProperties.get(name);
/*  43 */     if (r == null) {
/*  44 */       r = this.project.getProperty(name);
/*     */     }
/*  46 */     if (r == null) {
/*  47 */       r = super.getVariable(name);
/*     */     }
/*  49 */     return r;
/*     */   }
/*     */   
/*     */   public void setVariable(String varName, String value, boolean overwrite) {
/*  53 */     if (overwrite) {
/*  54 */       Message.debug(""setting '"" + varName + ""' to '"" + value + ""'"");
/*  55 */       this.overwrittenProperties.put(varName, substitute(value));
/*     */     } else {
/*  57 */       super.setVariable(varName, value, overwrite);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateProject(String id) {
/*  76 */     Map r = new HashMap(getVariables());
/*  77 */     r.putAll(this.overwrittenProperties);
/*  78 */     for (Iterator it = r.entrySet().iterator(); it.hasNext(); ) {
/*  79 */       Map.Entry entry = it.next();
/*     */       
/*  81 */       setPropertyIfNotSet((String)entry.getKey(), (String)entry.getValue());
/*  82 */       if (id != null) {
/*  83 */         setPropertyIfNotSet((String)entry.getKey() + ""."" + id, (String)entry.getValue());
/*     */       }
/*     */     } 
/*     */     
/*  87 */     if (getEnvironmentPrefix() != null) {
/*  88 */       Property propTask = new Property();
/*  89 */       propTask.setProject(this.project);
/*  90 */       propTask.setEnvironment(getEnvironmentPrefix());
/*  91 */       propTask.init();
/*  92 */       propTask.execute();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setPropertyIfNotSet(String property, String value) {
/*  97 */     if (this.project.getProperty(property) == null) {
/*  98 */       this.project.setProperty(property, value);
/*     */     }
/*     */   }
/*     */   
/*     */   public Object clone() {
/* 103 */     IvyAntVariableContainer result = (IvyAntVariableContainer)super.clone();
/* 104 */     result.overwrittenProperties = (HashMap)((HashMap)this.overwrittenProperties).clone();
/* 105 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyAntVariableContainer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyArtifactProperty,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.IvyPatternHelper;
/*    */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.core.resolve.ResolveOptions;
/*    */ import org.apache.ivy.plugins.report.XmlReportParser;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyArtifactProperty
/*    */   extends IvyPostResolveTask
/*    */ {
/*    */   private String name;
/*    */   private String value;
/*    */   private boolean overwrite = false;
/*    */   
/* 39 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public String getValue() { return this.value; }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public void setValue(String value) { this.value = value; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 56 */   public void setOverwrite(boolean overwrite) { this.overwrite = overwrite; }
/*    */ 
/*    */ 
/*    */   
/*    */   public void doExecute() throws BuildException {
/* 61 */     prepareAndCheck();
/*    */     
/*    */     try {
/* 64 */       ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/* 65 */       String[] confs = splitConfs(getConf());
/* 66 */       String resolveId = getResolveId();
/* 67 */       if (resolveId == null) {
/* 68 */         resolveId = ResolveOptions.getDefaultResolveId(getResolvedModuleId());
/*    */       }
/* 70 */       XmlReportParser parser = new XmlReportParser();
/* 71 */       for (int i = 0; i < confs.length; i++) {
/* 72 */         File report = cacheMgr.getConfigurationResolveReportInCache(resolveId, confs[i]);
/* 73 */         parser.parse(report);
/*    */         
/* 75 */         Artifact[] artifacts = parser.getArtifacts();
/* 76 */         for (int j = 0; j < artifacts.length; j++) {
/* 77 */           Artifact artifact = artifacts[j];
/* 78 */           String name = IvyPatternHelper.substitute(getSettings().substitute(getName()), artifact, confs[i]);
/*    */           
/* 80 */           String value = IvyPatternHelper.substitute(getSettings().substitute(getValue()), artifact, confs[i]);
/*    */           
/* 82 */           setProperty(name, value);
/*    */         } 
/*    */       } 
/* 85 */     } catch (Exception ex) {
/* 86 */       throw new BuildException(""impossible to add artifact properties: "" + ex, ex);
/*    */     } 
/*    */   }
/*    */   
/*    */   private void setProperty(String name, String value) {
/* 91 */     if (this.overwrite) {
/* 92 */       getProject().setProperty(name, value);
/*    */     } else {
/* 94 */       getProject().setNewProperty(name, value);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyArtifactProperty.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyArtifactReport,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import javax.xml.transform.TransformerConfigurationException;
/*     */ import javax.xml.transform.TransformerFactoryConfigurationError;
/*     */ import javax.xml.transform.sax.SAXTransformerFactory;
/*     */ import javax.xml.transform.sax.TransformerHandler;
/*     */ import javax.xml.transform.stream.StreamResult;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.AttributesImpl;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyArtifactReport
/*     */   extends IvyPostResolveTask
/*     */ {
/*     */   private File tofile;
/*     */   private String pattern;
/*     */   
/*  61 */   public File getTofile() { return this.tofile; }
/*     */ 
/*     */ 
/*     */   
/*  65 */   public void setTofile(File aFile) { this.tofile = aFile; }
/*     */ 
/*     */ 
/*     */   
/*  69 */   public String getPattern() { return this.pattern; }
/*     */ 
/*     */ 
/*     */   
/*  73 */   public void setPattern(String aPattern) { this.pattern = aPattern; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  77 */     prepareAndCheck();
/*  78 */     if (this.tofile == null) {
/*  79 */       throw new BuildException(""no destination file name: please provide it through parameter 'tofile'"");
/*     */     }
/*     */ 
/*     */     
/*  83 */     this.pattern = getProperty(this.pattern, getSettings(), ""ivy.retrieve.pattern"");
/*     */     
/*     */     try {
/*  86 */       String[] confs = splitConfs(getConf());
/*  87 */       ModuleDescriptor md = null;
/*  88 */       if (getResolveId() != null) {
/*  89 */         md = (ModuleDescriptor)getResolvedDescriptor(getResolveId());
/*     */       } else {
/*  91 */         md = (ModuleDescriptor)getResolvedDescriptor(getOrganisation(), getModule(), false);
/*     */       } 
/*     */       
/*  94 */       IvyNode[] dependencies = getIvyInstance().getResolveEngine().getDependencies(md, (new ResolveOptions()).setConfs(confs).setResolveId(getResolveId()).setValidate(doValidate(getSettings())), null);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  99 */       Map artifactsToCopy = getIvyInstance().getRetrieveEngine().determineArtifactsToCopy(ModuleRevisionId.newInstance(getOrganisation(), getModule(), getRevision()), this.pattern, (new RetrieveOptions()).setConfs(confs).setResolveId(getResolveId()));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 104 */       Map moduleRevToArtifactsMap = new HashMap();
/* 105 */       for (Iterator iter = artifactsToCopy.keySet().iterator(); iter.hasNext(); ) {
/* 106 */         ArtifactDownloadReport artifact = iter.next();
/* 107 */         Set moduleRevArtifacts = (Set)moduleRevToArtifactsMap.get(artifact.getArtifact().getModuleRevisionId());
/*     */         
/* 109 */         if (moduleRevArtifacts == null) {
/* 110 */           moduleRevArtifacts = new HashSet();
/* 111 */           moduleRevToArtifactsMap.put(artifact.getArtifact().getModuleRevisionId(), moduleRevArtifacts);
/*     */         } 
/*     */         
/* 114 */         moduleRevArtifacts.add(artifact);
/*     */       } 
/*     */       
/* 117 */       generateXml(dependencies, moduleRevToArtifactsMap, artifactsToCopy);
/* 118 */     } catch (ParseException e) {
/* 119 */       log(e.getMessage(), 0);
/* 120 */       throw new BuildException(""syntax errors in ivy file: "" + e, e);
/* 121 */     } catch (IOException e) {
/* 122 */       throw new BuildException(""impossible to generate report: "" + e, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void generateXml(IvyNode[] dependencies, Map moduleRevToArtifactsMap, Map artifactsToCopy) {
/*     */     try {
/* 129 */       FileOutputStream fileOuputStream = new FileOutputStream(this.tofile);
/*     */       try {
/* 131 */         TransformerHandler saxHandler = createTransformerHandler(fileOuputStream);
/*     */         
/* 133 */         saxHandler.startDocument();
/* 134 */         saxHandler.startElement(null, ""modules"", ""modules"", new AttributesImpl());
/*     */         
/* 136 */         for (int i = 0; i < dependencies.length; i++) {
/* 137 */           IvyNode dependency = dependencies[i];
/* 138 */           if (dependency.getModuleRevision() != null && !dependency.isCompletelyEvicted()) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 143 */             startModule(saxHandler, dependency);
/*     */             
/* 145 */             Set artifactsOfModuleRev = (Set)moduleRevToArtifactsMap.get(dependency.getModuleRevision().getId());
/*     */             
/* 147 */             if (artifactsOfModuleRev != null) {
/* 148 */               for (Iterator iter = artifactsOfModuleRev.iterator(); iter.hasNext(); ) {
/* 149 */                 ArtifactDownloadReport artifact = iter.next();
/*     */                 
/* 151 */                 RepositoryCacheManager cache = dependency.getModuleRevision().getArtifactResolver().getRepositoryCacheManager();
/*     */ 
/*     */                 
/* 154 */                 startArtifact(saxHandler, artifact.getArtifact());
/*     */                 
/* 156 */                 writeOriginLocationIfPresent(cache, saxHandler, artifact);
/*     */                 
/* 158 */                 writeCacheLocation(cache, saxHandler, artifact);
/*     */                 
/* 160 */                 Set artifactDestPaths = (Set)artifactsToCopy.get(artifact);
/* 161 */                 Iterator iterator = artifactDestPaths.iterator();
/* 162 */                 while (iterator.hasNext()) {
/* 163 */                   String artifactDestPath = iterator.next();
/* 164 */                   writeRetrieveLocation(saxHandler, artifactDestPath);
/*     */                 } 
/* 166 */                 saxHandler.endElement(null, ""artifact"", ""artifact"");
/*     */               } 
/*     */             }
/* 169 */             saxHandler.endElement(null, ""module"", ""module"");
/*     */           } 
/* 171 */         }  saxHandler.endElement(null, ""modules"", ""modules"");
/* 172 */         saxHandler.endDocument();
/*     */       } finally {
/* 174 */         fileOuputStream.close();
/*     */       } 
/* 176 */     } catch (SAXException e) {
/* 177 */       throw new BuildException(""impossible to generate report"", e);
/* 178 */     } catch (TransformerConfigurationException e) {
/* 179 */       throw new BuildException(""impossible to generate report"", e);
/* 180 */     } catch (IOException e) {
/* 181 */       throw new BuildException(""impossible to generate report"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private TransformerHandler createTransformerHandler(FileOutputStream fileOuputStream) throws TransformerFactoryConfigurationError, TransformerConfigurationException, SAXException {
/* 188 */     SAXTransformerFactory transformerFact = (SAXTransformerFactory)SAXTransformerFactory.newInstance();
/*     */     
/* 190 */     TransformerHandler saxHandler = transformerFact.newTransformerHandler();
/* 191 */     saxHandler.getTransformer().setOutputProperty(""encoding"", ""UTF-8"");
/* 192 */     saxHandler.getTransformer().setOutputProperty(""indent"", ""yes"");
/* 193 */     saxHandler.setResult(new StreamResult(fileOuputStream));
/* 194 */     return saxHandler;
/*     */   }
/*     */ 
/*     */   
/*     */   private void startModule(TransformerHandler saxHandler, IvyNode dependency) throws SAXException {
/* 199 */     AttributesImpl moduleAttrs = new AttributesImpl();
/* 200 */     moduleAttrs.addAttribute(null, ""organisation"", ""organisation"", ""CDATA"", dependency.getModuleId().getOrganisation());
/*     */     
/* 202 */     moduleAttrs.addAttribute(null, ""name"", ""name"", ""CDATA"", dependency.getModuleId().getName());
/* 203 */     ResolvedModuleRevision moduleRevision = dependency.getModuleRevision();
/* 204 */     moduleAttrs.addAttribute(null, ""rev"", ""rev"", ""CDATA"", moduleRevision.getId().getRevision());
/*     */     
/* 206 */     moduleAttrs.addAttribute(null, ""status"", ""status"", ""CDATA"", moduleRevision.getDescriptor().getStatus());
/*     */     
/* 208 */     saxHandler.startElement(null, ""module"", ""module"", moduleAttrs);
/*     */   }
/*     */ 
/*     */   
/*     */   private void startArtifact(TransformerHandler saxHandler, Artifact artifact) throws SAXException {
/* 213 */     AttributesImpl artifactAttrs = new AttributesImpl();
/* 214 */     artifactAttrs.addAttribute(null, ""name"", ""name"", ""CDATA"", artifact.getName());
/* 215 */     artifactAttrs.addAttribute(null, ""ext"", ""ext"", ""CDATA"", artifact.getExt());
/* 216 */     artifactAttrs.addAttribute(null, ""type"", ""type"", ""CDATA"", artifact.getType());
/* 217 */     saxHandler.startElement(null, ""artifact"", ""artifact"", artifactAttrs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeOriginLocationIfPresent(RepositoryCacheManager cache, TransformerHandler saxHandler, ArtifactDownloadReport artifact) throws IOException, SAXException {
/* 224 */     ArtifactOrigin origin = artifact.getArtifactOrigin();
/* 225 */     if (!ArtifactOrigin.isUnknown(origin)) {
/* 226 */       String originLocation, originName = origin.getLocation();
/* 227 */       boolean isOriginLocal = origin.isLocal();
/*     */ 
/*     */       
/* 230 */       AttributesImpl originLocationAttrs = new AttributesImpl();
/* 231 */       if (isOriginLocal) {
/* 232 */         originLocationAttrs.addAttribute(null, ""is-local"", ""is-local"", ""CDATA"", ""true"");
/* 233 */         originLocation = originName.replace('\\', '/');
/*     */       } else {
/* 235 */         originLocationAttrs.addAttribute(null, ""is-local"", ""is-local"", ""CDATA"", ""false"");
/* 236 */         originLocation = originName;
/*     */       } 
/* 238 */       saxHandler.startElement(null, ""origin-location"", ""origin-location"", originLocationAttrs);
/*     */       
/* 240 */       char[] originLocationAsChars = originLocation.toCharArray();
/* 241 */       saxHandler.characters(originLocationAsChars, 0, originLocationAsChars.length);
/* 242 */       saxHandler.endElement(null, ""origin-location"", ""origin-location"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void writeCacheLocation(RepositoryCacheManager cache, TransformerHandler saxHandler, ArtifactDownloadReport artifact) throws SAXException {
/* 248 */     File archiveInCache = artifact.getLocalFile();
/*     */     
/* 250 */     saxHandler.startElement(null, ""cache-location"", ""cache-location"", new AttributesImpl());
/* 251 */     char[] archiveInCacheAsChars = archiveInCache.getPath().replace('\\', '/').toCharArray();
/* 252 */     saxHandler.characters(archiveInCacheAsChars, 0, archiveInCacheAsChars.length);
/* 253 */     saxHandler.endElement(null, ""cache-location"", ""cache-location"");
/*     */   }
/*     */ 
/*     */   
/*     */   private void writeRetrieveLocation(TransformerHandler saxHandler, String artifactDestPath) throws SAXException {
/* 258 */     artifactDestPath = removeLeadingPath(getProject().getBaseDir(), new File(artifactDestPath));
/*     */     
/* 260 */     saxHandler.startElement(null, ""retrieve-location"", ""retrieve-location"", new AttributesImpl());
/*     */     
/* 262 */     char[] artifactDestPathAsChars = artifactDestPath.replace('\\', '/').toCharArray();
/* 263 */     saxHandler.characters(artifactDestPathAsChars, 0, artifactDestPathAsChars.length);
/* 264 */     saxHandler.endElement(null, ""retrieve-location"", ""retrieve-location"");
/*     */   }
/*     */ 
/*     */   
/*     */   public String removeLeadingPath(File leading, File path) {
/* 269 */     String l = leading.getAbsolutePath();
/* 270 */     String p = path.getAbsolutePath();
/* 271 */     if (l.equals(p)) {
/* 272 */       return """";
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 277 */     if (!l.endsWith(File.separator)) {
/* 278 */       l = l + File.separator;
/*     */     }
/* 280 */     return p.startsWith(l) ? p.substring(l.length()) : p;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyArtifactReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyBuildList,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.core.sort.SortOptions;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyBuildList
/*     */   extends IvyTask
/*     */ {
/*     */   public static final String DESCRIPTOR_REQUIRED = ""required"";
/*     */   
/*     */   public static final class OnMissingDescriptor
/*     */   {
/*     */     public static final String HEAD = ""head"";
/*     */     public static final String TAIL = ""tail"";
/*     */     public static final String SKIP = ""skip"";
/*     */     public static final String FAIL = ""fail"";
/*     */     public static final String WARN = ""warn"";
/*     */   }
/*  65 */   private List buildFileSets = new ArrayList();
/*     */   
/*     */   private String reference;
/*     */   
/*     */   private boolean haltOnError = true;
/*     */   
/*  71 */   private String onMissingDescriptor = ""head"";
/*     */   
/*     */   private boolean reverse = false;
/*     */   
/*     */   private String ivyFilePath;
/*     */   
/*  77 */   private String root = ""*"";
/*     */   
/*     */   private boolean excludeRoot = false;
/*     */   
/*  81 */   private String leaf = ""*"";
/*     */   
/*  83 */   private String delimiter = "","";
/*     */   
/*     */   private boolean excludeLeaf = false;
/*     */   
/*     */   private boolean onlydirectdep = false;
/*     */   
/*  89 */   private String restartFrom = ""*"";
/*     */ 
/*     */   
/*  92 */   public void addFileset(FileSet buildFiles) { this.buildFileSets.add(buildFiles); }
/*     */ 
/*     */ 
/*     */   
/*  96 */   public String getReference() { return this.reference; }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setReference(String reference) { this.reference = reference; }
/*     */ 
/*     */ 
/*     */   
/* 104 */   public String getRoot() { return this.root; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setRoot(String root) { this.root = root; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public boolean isExcludeRoot() { return this.excludeRoot; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setExcludeRoot(boolean root) { this.excludeRoot = root; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public String getLeaf() { return this.leaf; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setLeaf(String leaf) { this.leaf = leaf; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public boolean isExcludeLeaf() { return this.excludeLeaf; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setExcludeLeaf(boolean excludeLeaf) { this.excludeLeaf = excludeLeaf; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public String getDelimiter() { return this.delimiter; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setDelimiter(String delimiter) { this.delimiter = delimiter; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public boolean getOnlydirectdep() { return this.onlydirectdep; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setOnlydirectdep(boolean onlydirectdep) { this.onlydirectdep = onlydirectdep; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 153 */     if (this.reference == null) {
/* 154 */       throw new BuildException(""reference should be provided in ivy build list"");
/*     */     }
/* 156 */     if (this.buildFileSets.isEmpty()) {
/* 157 */       throw new BuildException(""at least one nested fileset should be provided in ivy build list"");
/*     */     }
/*     */ 
/*     */     
/* 161 */     Ivy ivy = getIvyInstance();
/* 162 */     IvySettings settings = ivy.getSettings();
/*     */     
/* 164 */     this.ivyFilePath = getProperty(this.ivyFilePath, settings, ""ivy.buildlist.ivyfilepath"");
/*     */     
/* 166 */     Path path = new Path(getProject());
/*     */     
/* 168 */     Map buildFiles = new HashMap();
/* 169 */     List independent = new ArrayList();
/* 170 */     List noDescriptor = new ArrayList();
/* 171 */     Collection mds = new ArrayList();
/*     */     
/* 173 */     Set rootModuleNames = new LinkedHashSet();
/* 174 */     if (!""*"".equals(this.root)) {
/* 175 */       StringTokenizer st = new StringTokenizer(this.root, this.delimiter);
/* 176 */       while (st.hasMoreTokens()) {
/* 177 */         rootModuleNames.add(st.nextToken());
/*     */       }
/*     */     } 
/*     */     
/* 181 */     Set leafModuleNames = new LinkedHashSet();
/* 182 */     if (!""*"".equals(this.leaf)) {
/* 183 */       StringTokenizer st = new StringTokenizer(this.leaf, this.delimiter);
/* 184 */       while (st.hasMoreTokens()) {
/* 185 */         leafModuleNames.add(st.nextToken());
/*     */       }
/*     */     } 
/*     */     
/* 189 */     Set restartFromModuleNames = new LinkedHashSet();
/* 190 */     if (!""*"".equals(this.restartFrom)) {
/* 191 */       StringTokenizer st = new StringTokenizer(this.restartFrom, this.delimiter);
/*     */       
/* 193 */       restartFromModuleNames.add(st.nextToken());
/*     */     } 
/*     */     
/* 196 */     for (ListIterator iter = this.buildFileSets.listIterator(); iter.hasNext(); ) {
/* 197 */       FileSet fs = iter.next();
/* 198 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 199 */       String[] builds = ds.getIncludedFiles();
/* 200 */       for (int i = 0; i < builds.length; i++) {
/* 201 */         File buildFile = new File(ds.getBasedir(), builds[i]);
/* 202 */         File ivyFile = getIvyFileFor(buildFile);
/* 203 */         if (!ivyFile.exists()) {
/* 204 */           onMissingDescriptor(buildFile, ivyFile, noDescriptor);
/*     */         } else {
/*     */           try {
/* 207 */             ModuleDescriptor md = ModuleDescriptorParserRegistry.getInstance().parseDescriptor((ParserSettings)settings, ivyFile.toURI().toURL(), doValidate(settings));
/*     */ 
/*     */             
/* 210 */             buildFiles.put(md, buildFile);
/* 211 */             mds.add(md);
/* 212 */             Message.debug(""Add "" + md.getModuleRevisionId().getModuleId());
/* 213 */           } catch (Exception ex) {
/* 214 */             if (this.haltOnError) {
/* 215 */               throw new BuildException(""impossible to parse ivy file for "" + buildFile + "": ivyfile="" + ivyFile + "" exception="" + ex, ex);
/*     */             }
/*     */             
/* 218 */             Message.warn(""impossible to parse ivy file for "" + buildFile + "": ivyfile="" + ivyFile + "" exception="" + ex.getMessage());
/*     */             
/* 220 */             Message.info(""\t=> adding it at the beginning of the path"");
/* 221 */             independent.add(buildFile);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 228 */     List leafModuleDescriptors = convertModuleNamesToModuleDescriptors(mds, leafModuleNames, ""leaf"");
/*     */     
/* 230 */     List rootModuleDescriptors = convertModuleNamesToModuleDescriptors(mds, rootModuleNames, ""root"");
/*     */     
/* 232 */     List restartFromModuleDescriptors = convertModuleNamesToModuleDescriptors(mds, restartFromModuleNames, ""restartFrom"");
/*     */ 
/*     */     
/* 235 */     if (!rootModuleDescriptors.isEmpty()) {
/* 236 */       Message.info(""Filtering modules based on roots "" + rootModuleNames);
/* 237 */       mds = filterModulesFromRoot(mds, rootModuleDescriptors);
/*     */     } 
/* 239 */     if (!leafModuleDescriptors.isEmpty()) {
/* 240 */       Message.info(""Filtering modules based on leafs "" + leafModuleNames);
/* 241 */       mds = filterModulesFromLeaf(mds, leafModuleDescriptors);
/*     */     } 
/*     */     
/* 244 */     List sortedModules = ivy.sortModuleDescriptors(mds, SortOptions.DEFAULT);
/*     */     
/* 246 */     if (!""tail"".equals(this.onMissingDescriptor)) {
/* 247 */       for (ListIterator iter = noDescriptor.listIterator(); iter.hasNext(); ) {
/* 248 */         File buildFile = iter.next();
/* 249 */         addBuildFile(path, buildFile);
/*     */       } 
/*     */     }
/* 252 */     for (ListIterator iter = independent.listIterator(); iter.hasNext(); ) {
/* 253 */       File buildFile = iter.next();
/* 254 */       addBuildFile(path, buildFile);
/*     */     } 
/* 256 */     if (isReverse()) {
/* 257 */       Collections.reverse(sortedModules);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 262 */     if (!restartFromModuleDescriptors.isEmpty()) {
/* 263 */       boolean foundRestartFrom = false;
/* 264 */       List keptModules = new ArrayList();
/* 265 */       ModuleDescriptor restartFromModuleDescriptor = restartFromModuleDescriptors.get(0);
/*     */       
/* 267 */       for (ListIterator iter = sortedModules.listIterator(); iter.hasNext(); ) {
/* 268 */         ModuleDescriptor md = (ModuleDescriptor)iter.next();
/* 269 */         if (md.equals(restartFromModuleDescriptor)) {
/* 270 */           foundRestartFrom = true;
/*     */         }
/* 272 */         if (foundRestartFrom) {
/* 273 */           keptModules.add(md);
/*     */         }
/*     */       } 
/* 276 */       sortedModules = keptModules;
/*     */     } 
/* 278 */     StringBuffer order = new StringBuffer();
/* 279 */     for (ListIterator iter = sortedModules.listIterator(); iter.hasNext(); ) {
/* 280 */       ModuleDescriptor md = (ModuleDescriptor)iter.next();
/* 281 */       order.append(md.getModuleRevisionId().getModuleId());
/* 282 */       if (iter.hasNext()) {
/* 283 */         order.append("", "");
/*     */       }
/* 285 */       File buildFile = (File)buildFiles.get(md);
/* 286 */       addBuildFile(path, buildFile);
/*     */     } 
/* 288 */     if (""tail"".equals(this.onMissingDescriptor)) {
/* 289 */       for (ListIterator iter = noDescriptor.listIterator(); iter.hasNext(); ) {
/* 290 */         File buildFile = iter.next();
/* 291 */         addBuildFile(path, buildFile);
/*     */       } 
/*     */     }
/*     */     
/* 295 */     getProject().addReference(getReference(), path);
/* 296 */     getProject().setProperty(""ivy.sorted.modules"", order.toString());
/*     */   }
/*     */   
/*     */   private void onMissingDescriptor(File buildFile, File ivyFile, List noDescriptor) {
/* 300 */     if (""skip"".equals(this.onMissingDescriptor)) {
/* 301 */       Message.debug(""skipping "" + buildFile + "": descriptor "" + ivyFile + "" doesn't exist"");
/*     */     } else {
/* 303 */       if (""fail"".equals(this.onMissingDescriptor)) {
/* 304 */         throw new BuildException(""a module has no module descriptor and onMissingDescriptor=fail. Build file: "" + buildFile + "". Expected descriptor: "" + ivyFile);
/*     */       }
/*     */ 
/*     */       
/* 308 */       if (""warn"".equals(this.onMissingDescriptor)) {
/* 309 */         Message.warn(""a module has no module descriptor. Build file: "" + buildFile + "". Expected descriptor: "" + ivyFile);
/*     */       }
/*     */ 
/*     */       
/* 313 */       Message.verbose(""no descriptor for "" + buildFile + "": descriptor="" + ivyFile + "": adding it at the "" + (""tail"".equals(this.onMissingDescriptor) ? ""tail"" : ""head of the path""));
/*     */ 
/*     */ 
/*     */       
/* 317 */       Message.verbose(""\t(change onMissingDescriptor if you want to take another action"");
/*     */       
/* 319 */       noDescriptor.add(buildFile);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private List convertModuleNamesToModuleDescriptors(Collection mds, Set moduleNames, String kind) {
/* 325 */     List result = new ArrayList();
/* 326 */     Set foundModuleNames = new HashSet();
/*     */     
/* 328 */     for (Iterator it = mds.iterator(); it.hasNext(); ) {
/* 329 */       ModuleDescriptor md = it.next();
/* 330 */       String name = md.getModuleRevisionId().getModuleId().getName();
/* 331 */       if (moduleNames.contains(name)) {
/* 332 */         foundModuleNames.add(name);
/* 333 */         result.add(md);
/*     */       } 
/*     */     } 
/*     */     
/* 337 */     if (foundModuleNames.size() < moduleNames.size()) {
/* 338 */       Set missingModules = new HashSet(moduleNames);
/* 339 */       missingModules.removeAll(foundModuleNames);
/*     */       
/* 341 */       StringBuffer missingNames = new StringBuffer();
/* 342 */       String sep = """";
/* 343 */       for (Iterator it = missingModules.iterator(); it.hasNext(); ) {
/* 344 */         missingNames.append(sep);
/* 345 */         missingNames.append(it.next());
/* 346 */         sep = "", "";
/*     */       } 
/*     */       
/* 349 */       throw new BuildException(""unable to find "" + kind + "" module(s) "" + missingNames.toString() + "" in build fileset"");
/*     */     } 
/*     */ 
/*     */     
/* 353 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Collection filterModulesFromRoot(Collection mds, List rootmds) {
/* 368 */     Map moduleIdMap = new HashMap();
/* 369 */     for (Iterator iter = mds.iterator(); iter.hasNext(); ) {
/* 370 */       ModuleDescriptor md = iter.next();
/* 371 */       moduleIdMap.put(md.getModuleRevisionId().getModuleId(), md);
/*     */     } 
/*     */ 
/*     */     
/* 375 */     Set toKeep = new LinkedHashSet();
/*     */     
/* 377 */     Iterator it = rootmds.iterator();
/* 378 */     while (it.hasNext()) {
/* 379 */       ModuleDescriptor rootmd = it.next();
/* 380 */       processFilterNodeFromRoot(rootmd, toKeep, moduleIdMap);
/*     */       
/* 382 */       if (this.excludeRoot) {
/*     */         
/* 384 */         Message.verbose(""Excluded module "" + rootmd.getModuleRevisionId().getModuleId().getName());
/*     */         continue;
/*     */       } 
/* 387 */       toKeep.add(rootmd);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 392 */     for (Iterator iter = toKeep.iterator(); iter.hasNext(); ) {
/* 393 */       ModuleDescriptor md = iter.next();
/* 394 */       Message.verbose(""Kept module "" + md.getModuleRevisionId().getModuleId().getName());
/*     */     } 
/*     */     
/* 397 */     return toKeep;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFilterNodeFromRoot(ModuleDescriptor node, Set toKeep, Map moduleIdMap) {
/* 415 */     DependencyDescriptor[] deps = node.getDependencies();
/* 416 */     for (int i = 0; i < deps.length; i++) {
/* 417 */       ModuleId id = deps[i].getDependencyId();
/* 418 */       ModuleDescriptor md = (ModuleDescriptor)moduleIdMap.get(id);
/*     */ 
/*     */       
/* 421 */       if (md != null && !toKeep.contains(md)) {
/* 422 */         toKeep.add(md);
/* 423 */         if (!getOnlydirectdep()) {
/* 424 */           processFilterNodeFromRoot(md, toKeep, moduleIdMap);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Collection filterModulesFromLeaf(Collection mds, List leafmds) {
/* 443 */     Map moduleIdMap = new HashMap();
/* 444 */     for (Iterator iter = mds.iterator(); iter.hasNext(); ) {
/* 445 */       ModuleDescriptor md = iter.next();
/* 446 */       moduleIdMap.put(md.getModuleRevisionId().getModuleId(), md);
/*     */     } 
/*     */ 
/*     */     
/* 450 */     Set toKeep = new LinkedHashSet();
/* 451 */     Iterator it = leafmds.iterator();
/* 452 */     while (it.hasNext()) {
/* 453 */       ModuleDescriptor leafmd = it.next();
/*     */       
/* 455 */       if (this.excludeLeaf) {
/* 456 */         Message.verbose(""Excluded module "" + leafmd.getModuleRevisionId().getModuleId().getName());
/*     */       } else {
/*     */         
/* 459 */         toKeep.add(leafmd);
/*     */       } 
/* 461 */       processFilterNodeFromLeaf(leafmd, toKeep, moduleIdMap);
/*     */     } 
/*     */ 
/*     */     
/* 465 */     for (Iterator iter = toKeep.iterator(); iter.hasNext(); ) {
/* 466 */       ModuleDescriptor md = iter.next();
/* 467 */       Message.verbose(""Kept module "" + md.getModuleRevisionId().getModuleId().getName());
/*     */     } 
/*     */     
/* 470 */     return toKeep;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFilterNodeFromLeaf(ModuleDescriptor node, Set toKeep, Map moduleIdMap) {
/* 485 */     for (Iterator iter = moduleIdMap.values().iterator(); iter.hasNext(); ) {
/* 486 */       ModuleDescriptor md = iter.next();
/* 487 */       DependencyDescriptor[] deps = md.getDependencies();
/* 488 */       for (int i = 0; i < deps.length; i++) {
/* 489 */         ModuleId id = deps[i].getDependencyId();
/* 490 */         if (node.getModuleRevisionId().getModuleId().equals(id) && !toKeep.contains(md)) {
/* 491 */           toKeep.add(md);
/* 492 */           if (!getOnlydirectdep()) {
/* 493 */             processFilterNodeFromLeaf(md, toKeep, moduleIdMap);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void addBuildFile(Path path, File buildFile) {
/* 501 */     FileSet fs = new FileSet();
/* 502 */     fs.setFile(buildFile);
/* 503 */     path.addFileset(fs);
/*     */   }
/*     */ 
/*     */   
/* 507 */   private File getIvyFileFor(File buildFile) { return new File(buildFile.getParentFile(), this.ivyFilePath); }
/*     */ 
/*     */ 
/*     */   
/* 511 */   public boolean isHaltonerror() { return this.haltOnError; }
/*     */ 
/*     */ 
/*     */   
/* 515 */   public void setHaltonerror(boolean haltOnError) { this.haltOnError = haltOnError; }
/*     */ 
/*     */ 
/*     */   
/* 519 */   public String getIvyfilepath() { return this.ivyFilePath; }
/*     */ 
/*     */ 
/*     */   
/* 523 */   public void setIvyfilepath(String ivyFilePath) { this.ivyFilePath = ivyFilePath; }
/*     */ 
/*     */ 
/*     */   
/* 527 */   public String getOnMissingDescriptor() { return this.onMissingDescriptor; }
/*     */ 
/*     */ 
/*     */   
/* 531 */   public void setOnMissingDescriptor(String onMissingDescriptor) { this.onMissingDescriptor = onMissingDescriptor; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 538 */   public boolean isSkipbuildwithoutivy() { return (this.onMissingDescriptor == ""skip""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSkipbuildwithoutivy(boolean skipBuildFilesWithoutIvy) {
/* 545 */     Message.deprecated(""skipbuildwithoutivy is deprecated, use onMissingDescriptor instead."");
/* 546 */     this.onMissingDescriptor = skipBuildFilesWithoutIvy ? ""skip"" : ""fail"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 552 */   public boolean isReverse() { return this.reverse; }
/*     */ 
/*     */ 
/*     */   
/* 556 */   public void setReverse(boolean reverse) { this.reverse = reverse; }
/*     */ 
/*     */ 
/*     */   
/* 560 */   public String getRestartFrom() { return this.restartFrom; }
/*     */ 
/*     */ 
/*     */   
/* 564 */   public void setRestartFrom(String restartFrom) { this.restartFrom = restartFrom; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyBuildList.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyBuildNumber,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyBuildNumber
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String branch;
/*     */   private String revision;
/*  40 */   private String revSep = ""."";
/*     */   
/*  42 */   private String prefix = ""ivy."";
/*     */   
/*  44 */   private String defaultValue = ""0"";
/*     */   
/*  46 */   private String defaultBuildNumber = ""0"";
/*     */ 
/*     */   
/*  49 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/*  53 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/*  57 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/*  61 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/*  65 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/*  69 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/*  73 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */ 
/*     */   
/*  81 */   public String getDefault() { return this.defaultValue; }
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void setDefault(String default1) { this.defaultValue = default1; }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  97 */     if (this.organisation == null) {
/*  98 */       throw new BuildException(""no organisation provided for ivy findmodules"");
/*     */     }
/* 100 */     if (this.module == null) {
/* 101 */       throw new BuildException(""no module name provided for ivy findmodules"");
/*     */     }
/* 103 */     if (this.prefix == null) {
/* 104 */       throw new BuildException(""null prefix not allowed"");
/*     */     }
/*     */     
/* 107 */     Ivy ivy = getIvyInstance();
/* 108 */     IvySettings settings = ivy.getSettings();
/* 109 */     if (this.branch == null) {
/* 110 */       settings.getDefaultBranch(new ModuleId(this.organisation, this.module));
/*     */     }
/* 112 */     if (this.revision == null || this.revision.length() == 0) {
/* 113 */       this.revision = ""latest.integration"";
/* 114 */     } else if (!this.revision.endsWith(""+"")) {
/* 115 */       this.revision += ""+"";
/*     */     } 
/* 117 */     if (!this.prefix.endsWith(""."") && this.prefix.length() > 0) {
/* 118 */       this.prefix += ""."";
/*     */     }
/* 120 */     ResolvedModuleRevision rmr = ivy.findModule(ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision));
/*     */     
/* 122 */     String revision = (rmr == null) ? null : rmr.getId().getRevision();
/* 123 */     NewRevision newRevision = computeNewRevision(revision);
/* 124 */     setProperty(""revision"", newRevision.getRevision());
/* 125 */     setProperty(""new.revision"", newRevision.getNewRevision());
/* 126 */     setProperty(""build.number"", newRevision.getBuildNumber());
/* 127 */     setProperty(""new.build.number"", newRevision.getNewBuildNumber());
/*     */   }
/*     */   
/*     */   private void setProperty(String propertyName, String value) {
/* 131 */     if (value != null)
/* 132 */       getProject().setProperty(this.prefix + propertyName, value); 
/*     */   }
/*     */   
/*     */   private NewRevision computeNewRevision(String revision) {
/*     */     Range r;
/* 137 */     String revPrefix = ""latest.integration"".equals(this.revision) ? """" : this.revision.substring(0, this.revision.length() - 1);
/*     */     
/* 139 */     if (revision != null && !revision.startsWith(revPrefix)) {
/* 140 */       throw new BuildException(""invalid exception found in repository: '"" + revision + ""' for '"" + revPrefix + ""'"");
/*     */     }
/*     */     
/* 143 */     if (revision == null) {
/* 144 */       if (revPrefix.length() > 0) {
/* 145 */         return new NewRevision(revision, revPrefix + (revPrefix.endsWith(this.revSep) ? this.defaultBuildNumber : (this.revSep + this.defaultBuildNumber)), null, this.defaultBuildNumber);
/*     */       }
/*     */ 
/*     */       
/* 149 */       r = findLastNumber(this.defaultValue);
/* 150 */       if (r == null) {
/* 151 */         return new NewRevision(revision, this.defaultValue, null, null);
/*     */       }
/* 153 */       long n = Long.parseLong(this.defaultValue.substring(r.getStartIndex(), r.getEndIndex()));
/*     */       
/* 155 */       return new NewRevision(revision, this.defaultValue, null, String.valueOf(n));
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 160 */     if (revPrefix.length() == 0) {
/* 161 */       r = findLastNumber(revision);
/* 162 */       if (r == null) {
/* 163 */         return new NewRevision(revision, revision + (revision.endsWith(this.revSep) ? ""1"" : (this.revSep + ""1"")), null, ""1"");
/*     */       }
/*     */     } else {
/*     */       
/* 167 */       r = findFirstNumber(revision, revPrefix.length());
/* 168 */       if (r == null) {
/* 169 */         return new NewRevision(revision, revPrefix + (revPrefix.endsWith(this.revSep) ? ""1"" : (this.revSep + ""1"")), null, ""1"");
/*     */       }
/*     */     } 
/*     */     
/* 173 */     long n = Long.parseLong(revision.substring(r.getStartIndex(), r.getEndIndex())) + 1L;
/* 174 */     return new NewRevision(revision, revision.substring(0, r.getStartIndex()) + n, String.valueOf(n - 1L), String.valueOf(n));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private Range findFirstNumber(String str, int startIndex) {
/* 180 */     int startNumberIndex = startIndex;
/*     */     
/* 182 */     while (startNumberIndex < str.length() && !Character.isDigit(str.charAt(startNumberIndex))) {
/* 183 */       startNumberIndex++;
/*     */     }
/* 185 */     if (startNumberIndex == str.length()) {
/* 186 */       return null;
/*     */     }
/*     */     
/* 189 */     int endNumberIndex = startNumberIndex + 1;
/* 190 */     while (endNumberIndex < str.length() && Character.isDigit(str.charAt(endNumberIndex))) {
/* 191 */       endNumberIndex++;
/*     */     }
/* 193 */     return new Range(startNumberIndex, endNumberIndex);
/*     */   }
/*     */   
/*     */   private Range findLastNumber(String str) {
/* 197 */     int endNumberIndex = str.length() - 1;
/* 198 */     while (endNumberIndex >= 0 && !Character.isDigit(str.charAt(endNumberIndex))) {
/* 199 */       endNumberIndex--;
/*     */     }
/* 201 */     int startNumberIndex = (endNumberIndex == -1) ? -1 : (endNumberIndex - 1);
/* 202 */     while (startNumberIndex >= 0 && Character.isDigit(str.charAt(startNumberIndex))) {
/* 203 */       startNumberIndex--;
/*     */     }
/* 205 */     endNumberIndex++;
/* 206 */     startNumberIndex++;
/* 207 */     if (startNumberIndex == endNumberIndex) {
/* 208 */       return null;
/*     */     }
/* 210 */     return new Range(startNumberIndex, endNumberIndex);
/*     */   }
/*     */ 
/*     */   
/*     */   private static class Range
/*     */   {
/*     */     private int startIndex;
/*     */     private int endIndex;
/*     */     
/*     */     public Range(int startIndex, int endIndex) {
/* 220 */       this.startIndex = startIndex;
/* 221 */       this.endIndex = endIndex;
/*     */     }
/*     */ 
/*     */     
/* 225 */     public int getStartIndex() { return this.startIndex; }
/*     */ 
/*     */ 
/*     */     
/* 229 */     public int getEndIndex() { return this.endIndex; }
/*     */   }
/*     */ 
/*     */   
/*     */   private static class NewRevision
/*     */   {
/*     */     private String revision;
/*     */     
/*     */     private String newRevision;
/*     */     
/*     */     private String buildNumber;
/*     */     
/*     */     private String newBuildNumber;
/*     */     
/*     */     public NewRevision(String revision, String newRevision, String buildNumber, String newBuildNumber) {
/* 244 */       this.revision = revision;
/* 245 */       this.newRevision = newRevision;
/* 246 */       this.buildNumber = buildNumber;
/* 247 */       this.newBuildNumber = newBuildNumber;
/*     */     }
/*     */ 
/*     */     
/* 251 */     public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */     
/* 255 */     public String getNewRevision() { return this.newRevision; }
/*     */ 
/*     */ 
/*     */     
/* 259 */     public String getBuildNumber() { return this.buildNumber; }
/*     */ 
/*     */ 
/*     */     
/* 263 */     public String getNewBuildNumber() { return this.newBuildNumber; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 268 */   public String getRevSep() { return this.revSep; }
/*     */ 
/*     */ 
/*     */   
/* 272 */   public void setRevSep(String revSep) { this.revSep = revSep; }
/*     */ 
/*     */ 
/*     */   
/* 276 */   public String getDefaultBuildNumber() { return this.defaultBuildNumber; }
/*     */ 
/*     */ 
/*     */   
/* 280 */   public void setDefaultBuildNumber(String defaultBuildNumber) { this.defaultBuildNumber = defaultBuildNumber; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyBuildNumber.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyCacheFileset,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyCacheFileset
/*     */   extends IvyCacheTask
/*     */ {
/*     */   private String setid;
/*     */   
/*  38 */   public String getSetid() { return this.setid; }
/*     */ 
/*     */ 
/*     */   
/*  42 */   public void setSetid(String id) { this.setid = id; }
/*     */ 
/*     */   
/*     */   public void setUseOrigin(boolean useOrigin) {
/*  46 */     if (useOrigin) {
/*  47 */       throw new UnsupportedOperationException(""the cachefileset task does not support the useOrigin mode, since filesets require to have only one root directory. Please use the the cachepath task instead"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  55 */     prepareAndCheck();
/*  56 */     if (this.setid == null) {
/*  57 */       throw new BuildException(""setid is required in ivy cachefileset"");
/*     */     }
/*     */     try {
/*  60 */       FileSet fileset = new FileSet();
/*  61 */       fileset.setProject(getProject());
/*  62 */       getProject().addReference(this.setid, fileset);
/*     */       
/*  64 */       List paths = getArtifactReports();
/*  65 */       File base = null;
/*  66 */       for (Iterator iter = paths.iterator(); iter.hasNext(); ) {
/*  67 */         ArtifactDownloadReport a = iter.next();
/*  68 */         if (a.getLocalFile() != null) {
/*  69 */           base = getBaseDir(base, a.getLocalFile());
/*     */         }
/*     */       } 
/*  72 */       if (base == null) {
/*  73 */         fileset.setDir(new File("".""));
/*  74 */         PatternSet.NameEntry ne = fileset.createExclude();
/*  75 */         ne.setName(""**/*"");
/*     */       } else {
/*  77 */         fileset.setDir(base);
/*  78 */         for (Iterator iter = paths.iterator(); iter.hasNext(); ) {
/*  79 */           ArtifactDownloadReport a = iter.next();
/*  80 */           if (a.getLocalFile() != null) {
/*  81 */             PatternSet.NameEntry ne = fileset.createInclude();
/*  82 */             ne.setName(getPath(base, a.getLocalFile()));
/*     */           } 
/*     */         } 
/*     */       } 
/*  86 */     } catch (Exception ex) {
/*  87 */       throw new BuildException(""impossible to build ivy cache fileset: "" + ex, ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getPath(File base, File file) {
/*  99 */     String absoluteBasePath = base.getAbsolutePath();
/*     */     
/* 101 */     int beginIndex = absoluteBasePath.length();
/*     */ 
/*     */ 
/*     */     
/* 105 */     if (!absoluteBasePath.endsWith(File.separator)) {
/* 106 */       beginIndex++;
/*     */     }
/*     */     
/* 109 */     return file.getAbsolutePath().substring(beginIndex);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   File getBaseDir(File base, File file) {
/* 125 */     if (base == null) {
/* 126 */       return file.getParentFile().getAbsoluteFile();
/*     */     }
/* 128 */     Iterator bases = getParents(base).iterator();
/* 129 */     Iterator fileParents = getParents(file.getAbsoluteFile()).iterator();
/* 130 */     File result = null;
/* 131 */     while (bases.hasNext() && fileParents.hasNext()) {
/* 132 */       File next = bases.next();
/* 133 */       if (next.equals(fileParents.next())) {
/* 134 */         result = next;
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 139 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private LinkedList getParents(File file) {
/* 147 */     LinkedList r = new LinkedList();
/* 148 */     while (file != null) {
/* 149 */       r.addFirst(file);
/* 150 */       file = file.getParentFile();
/*     */     } 
/* 152 */     return r;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyCacheFileset.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyCachePath,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Path;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyCachePath
/*    */   extends IvyCacheTask
/*    */ {
/*    */   private String pathid;
/*    */   private String id;
/*    */   
/* 36 */   public String getPathid() { return this.pathid; }
/*    */ 
/*    */ 
/*    */   
/* 40 */   public void setPathid(String id) { this.pathid = id; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 48 */   public void setId(String id) { this.id = id; }
/*    */ 
/*    */   
/*    */   public void doExecute() throws BuildException {
/* 52 */     prepareAndCheck();
/* 53 */     if (this.pathid == null) {
/* 54 */       if (this.id != null) {
/* 55 */         this.pathid = this.id;
/* 56 */         log(""ID IS DEPRECATED, PLEASE USE PATHID INSTEAD"", 1);
/*    */       } else {
/* 58 */         throw new BuildException(""pathid is required in ivy classpath"");
/*    */       } 
/*    */     }
/*    */     try {
/* 62 */       Path path = new Path(getProject());
/* 63 */       getProject().addReference(this.pathid, path);
/* 64 */       for (Iterator iter = getArtifactReports().iterator(); iter.hasNext(); ) {
/* 65 */         ArtifactDownloadReport a = iter.next();
/* 66 */         path.createPathElement().setLocation(a.getLocalFile());
/*    */       } 
/* 68 */     } catch (Exception ex) {
/* 69 */       throw new BuildException(""impossible to build ivy path: "" + ex, ex);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyCachePath.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyCacheTask,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class IvyCacheTask
/*     */   extends IvyPostResolveTask
/*     */ {
/*     */   protected List getArtifactReports() throws BuildException, ParseException, IOException {
/*  48 */     Collection artifacts = getAllArtifactReports();
/*  49 */     List ret = new ArrayList();
/*  50 */     for (Iterator iter = artifacts.iterator(); iter.hasNext(); ) {
/*  51 */       ArtifactDownloadReport artifactReport = iter.next();
/*  52 */       if (getArtifactFilter().accept(artifactReport.getArtifact())) {
/*  53 */         ret.add(artifactReport);
/*     */       }
/*     */     } 
/*     */     
/*  57 */     return ret;
/*     */   }
/*     */   
/*     */   private Collection getAllArtifactReports() throws ParseException, IOException {
/*  61 */     String[] confs = splitConfs(getConf());
/*  62 */     Collection all = new LinkedHashSet();
/*     */     
/*  64 */     ResolveReport report = getResolvedReport();
/*  65 */     if (report != null) {
/*  66 */       Message.debug(""using internal report instance to get artifacts list"");
/*  67 */       for (int i = 0; i < confs.length; i++) {
/*  68 */         ConfigurationResolveReport configurationReport = report.getConfigurationReport(confs[i]);
/*     */         
/*  70 */         if (configurationReport == null) {
/*  71 */           throw new BuildException(""bad confs provided: "" + confs[i] + "" not found among "" + Arrays.asList((T[])report.getConfigurations()));
/*     */         }
/*     */         
/*  74 */         Set revisions = configurationReport.getModuleRevisionIds();
/*  75 */         for (Iterator it = revisions.iterator(); it.hasNext(); ) {
/*  76 */           ModuleRevisionId revId = it.next();
/*  77 */           ArtifactDownloadReport[] aReports = configurationReport.getDownloadReports(revId);
/*     */           
/*  79 */           all.addAll(Arrays.asList(aReports));
/*     */         } 
/*     */       } 
/*     */     } else {
/*  83 */       Message.debug(""using stored report to get artifacts list"");
/*     */       
/*  85 */       XmlReportParser parser = new XmlReportParser();
/*  86 */       ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/*  87 */       String resolvedId = getResolveId();
/*  88 */       if (resolvedId == null) {
/*  89 */         resolvedId = ResolveOptions.getDefaultResolveId(getResolvedModuleId());
/*     */       }
/*  91 */       for (int i = 0; i < confs.length; i++) {
/*  92 */         File reportFile = cacheMgr.getConfigurationResolveReportInCache(resolvedId, confs[i]);
/*     */         
/*  94 */         parser.parse(reportFile);
/*     */         
/*  96 */         ArtifactDownloadReport[] aReports = parser.getArtifactReports();
/*  97 */         all.addAll(Arrays.asList(aReports));
/*     */       } 
/*     */     } 
/* 100 */     return all;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyCacheTask.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyCheck,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.net.MalformedURLException;
/*    */ import java.util.ArrayList;
/*    */ import java.util.List;
/*    */ import org.apache.ivy.Ivy;
/*    */ import org.apache.ivy.util.Message;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.DirectoryScanner;
/*    */ import org.apache.tools.ant.types.FileSet;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyCheck
/*    */   extends IvyTask
/*    */ {
/* 39 */   private File file = null;
/*    */   
/* 41 */   private List filesets = new ArrayList();
/*    */   
/*    */   private String resolvername;
/*    */ 
/*    */   
/* 46 */   public File getFile() { return this.file; }
/*    */ 
/*    */ 
/*    */   
/* 50 */   public void setFile(File file) { this.file = file; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 60 */   public void addFileset(FileSet set) { this.filesets.add(set); }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public String getResolvername() { return this.resolvername; }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public void setResolvername(String resolverName) { this.resolvername = resolverName; }
/*    */ 
/*    */   
/*    */   public void doExecute() throws BuildException {
/*    */     try {
/* 73 */       Ivy ivy = getIvyInstance();
/* 74 */       if (this.file != null && 
/* 75 */         ivy.check(this.file.toURI().toURL(), this.resolvername)) {
/* 76 */         Message.verbose(""checked "" + this.file + "": OK"");
/*    */       }
/*    */       
/* 79 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 80 */         FileSet fs = this.filesets.get(i);
/* 81 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/*    */         
/* 83 */         File fromDir = fs.getDir(getProject());
/*    */         
/* 85 */         String[] srcFiles = ds.getIncludedFiles();
/* 86 */         for (int j = 0; j < srcFiles.length; j++) {
/* 87 */           File file = new File(fromDir, srcFiles[j]);
/* 88 */           if (ivy.check(file.toURI().toURL(), this.resolvername)) {
/* 89 */             Message.verbose(""checked "" + file + "": OK"");
/*    */           }
/*    */         } 
/*    */       } 
/* 93 */     } catch (MalformedURLException e) {
/* 94 */       throw new BuildException(""impossible to convert a file to an url! "" + e, e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyCheck.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyCleanCache,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*    */ import org.apache.ivy.core.settings.IvySettings;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyCleanCache
/*    */   extends IvyTask
/*    */ {
/*    */   public static final String ALL = ""*"";
/*    */   public static final String NONE = ""NONE"";
/*    */   private boolean resolution = true;
/* 34 */   private String cache = ""*"";
/*    */ 
/*    */   
/* 37 */   public String getCache() { return this.cache; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 48 */   public void setCache(String cache) { this.cache = cache; }
/*    */ 
/*    */ 
/*    */   
/* 52 */   public boolean isResolution() { return this.resolution; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 63 */   public void setResolution(boolean resolution) { this.resolution = resolution; }
/*    */ 
/*    */ 
/*    */   
/*    */   public void doExecute() throws BuildException {
/* 68 */     IvySettings settings = getIvyInstance().getSettings();
/* 69 */     if (isResolution()) {
/* 70 */       settings.getResolutionCacheManager().clean();
/*    */     }
/* 72 */     if (""*"".equals(getCache())) {
/* 73 */       RepositoryCacheManager[] caches = settings.getRepositoryCacheManagers();
/* 74 */       for (int i = 0; i < caches.length; i++) {
/* 75 */         caches[i].clean();
/*    */       }
/* 77 */     } else if (!""NONE"".equals(getCache())) {
/* 78 */       RepositoryCacheManager cache = settings.getRepositoryCacheManager(getCache());
/* 79 */       if (cache == null) {
/* 80 */         throw new BuildException(""unknown cache '"" + getCache() + ""'"");
/*    */       }
/* 82 */       cache.clean();
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyCleanCache.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyConfigure,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyConfigure
/*     */   extends Task
/*     */ {
/*     */   public static final String OVERRIDE_TRUE = ""true"";
/*     */   public static final String OVERRIDE_FALSE = ""false"";
/*     */   public static final String OVERRIDE_NOT_ALLOWED = ""notallowed"";
/*  49 */   private static final Collection OVERRIDE_VALUES = Arrays.asList(new String[] { ""true"", ""false"", ""notallowed"" });
/*     */ 
/*     */ 
/*     */   
/*  53 */   private String override = ""notallowed"";
/*     */   
/*  55 */   private IvyAntSettings settings = new IvyAntSettings();
/*     */ 
/*     */   
/*  58 */   public void setSettingsId(String settingsId) { this.settings.setId(settingsId); }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public String getSettingsId() { return this.settings.getId(); }
/*     */ 
/*     */   
/*     */   public void setOverride(String override) {
/*  66 */     if (!OVERRIDE_VALUES.contains(override)) {
/*  67 */       throw new IllegalArgumentException(""invalid override value '"" + override + ""'. "" + ""Valid values are "" + OVERRIDE_VALUES);
/*     */     }
/*     */     
/*  70 */     this.override = override;
/*     */   }
/*     */ 
/*     */   
/*  74 */   public String getOverride() { return this.override; }
/*     */ 
/*     */ 
/*     */   
/*  78 */   public File getFile() { return this.settings.getFile(); }
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void setFile(File file) { this.settings.setFile(file); }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public URL getUrl() { return this.settings.getUrl(); }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setUrl(String url) throws MalformedURLException { this.settings.setUrl(url); }
/*     */ 
/*     */   
/*     */   public void setUrl(URL url) {
/*  94 */     if (url == null) {
/*  95 */       throw new NullPointerException(""Cannot set a null URL"");
/*     */     }
/*  97 */     this.settings.setUrl(url);
/*     */   }
/*     */ 
/*     */   
/* 101 */   public String getRealm() { return this.settings.getRealm(); }
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setRealm(String realm) { this.settings.setRealm(realm); }
/*     */ 
/*     */ 
/*     */   
/* 109 */   public String getHost() { return this.settings.getHost(); }
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setHost(String host) { this.settings.setHost(host); }
/*     */ 
/*     */ 
/*     */   
/* 117 */   public String getUserName() { return this.settings.getUsername(); }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setUserName(String userName) { this.settings.setUsername(userName); }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public String getPasswd() { return this.settings.getPasswd(); }
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setPasswd(String passwd) { this.settings.setPasswd(passwd); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 133 */     String settingsId = this.settings.getId();
/* 134 */     Object otherRef = getProject().getReference(settingsId);
/*     */     
/* 136 */     if (otherRef != null && ""notallowed"".equals(this.override)) {
/* 137 */       throw new BuildException(""Overriding a previous definition of ivy:settings with the id '"" + settingsId + ""' is not allowed when using override='"" + ""notallowed"" + ""'."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 143 */     if (otherRef != null && ""false"".equals(this.override)) {
/* 144 */       verbose(""A settings definition is already available for "" + settingsId + "": skipping"");
/*     */       
/*     */       return;
/*     */     } 
/* 148 */     this.settings.setProject(getProject());
/* 149 */     getProject().addReference(settingsId, this.settings);
/* 150 */     this.settings.createIvyEngine();
/*     */   }
/*     */ 
/*     */   
/* 154 */   private void verbose(String msg) { log(msg, 3); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyConfigure.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyConvertPom,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.net.MalformedURLException;
/*    */ import java.text.ParseException;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.plugins.parser.ParserSettings;
/*    */ import org.apache.ivy.plugins.parser.m2.PomModuleDescriptorParser;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ import org.apache.ivy.plugins.repository.url.URLResource;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyConvertPom
/*    */   extends IvyTask
/*    */ {
/* 34 */   private File pomFile = null;
/*    */   
/* 36 */   private File ivyFile = null;
/*    */ 
/*    */   
/* 39 */   public File getPomFile() { return this.pomFile; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public void setPomFile(File file) { this.pomFile = file; }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public File getIvyFile() { return this.ivyFile; }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public void setIvyFile(File ivyFile) { this.ivyFile = ivyFile; }
/*    */ 
/*    */   
/*    */   public void doExecute() throws BuildException {
/*    */     try {
/* 56 */       if (this.pomFile == null) {
/* 57 */         throw new BuildException(""source pom file is required for convertpom task"");
/*    */       }
/* 59 */       if (this.ivyFile == null) {
/* 60 */         throw new BuildException(""destination ivy file is required for convertpom task"");
/*    */       }
/* 62 */       ModuleDescriptor md = PomModuleDescriptorParser.getInstance().parseDescriptor((ParserSettings)getSettings(), this.pomFile.toURI().toURL(), false);
/*    */       
/* 64 */       PomModuleDescriptorParser.getInstance().toIvyFile(this.pomFile.toURI().toURL().openStream(), (Resource)new URLResource(this.pomFile.toURI().toURL()), getIvyFile(), md);
/*    */     }
/* 66 */     catch (MalformedURLException e) {
/* 67 */       throw new BuildException(""unable to convert given pom file to url: "" + this.pomFile + "": "" + e, e);
/*    */     }
/* 69 */     catch (ParseException e) {
/* 70 */       log(e.getMessage(), 0);
/* 71 */       throw new BuildException(""syntax errors in pom file "" + this.pomFile + "": "" + e, e);
/* 72 */     } catch (Exception e) {
/* 73 */       throw new BuildException(""impossible convert given pom file to ivy file: "" + e + "" from="" + this.pomFile + "" to="" + this.ivyFile, e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyConvertPom.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyDeliver,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.deliver.DefaultPublishingDRResolver;
/*     */ import org.apache.ivy.core.deliver.DeliverOptions;
/*     */ import org.apache.ivy.core.deliver.PublishingDependencyRevisionResolver;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.module.status.StatusManager;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.CallTarget;
/*     */ import org.apache.tools.ant.taskdefs.Echo;
/*     */ import org.apache.tools.ant.taskdefs.Input;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyDeliver
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String revision;
/*     */   private String pubRevision;
/*     */   private String deliverpattern;
/*     */   private String status;
/*     */   private String pubdate;
/*     */   private String deliverTarget;
/*     */   private File deliveryList;
/*     */   
/*     */   private final class DeliverDRResolver
/*     */     extends DefaultPublishingDRResolver
/*     */   {
/*     */     private final IvyDeliver this$0;
/*     */     
/*     */     private DeliverDRResolver() {}
/*     */     
/*     */     public String resolve(ModuleDescriptor published, String publishedStatus, ModuleRevisionId depMrid, String depStatus) {
/*  46 */       if (StatusManager.getCurrent().isIntegration(publishedStatus))
/*     */       {
/*  48 */         return super.resolve(published, publishedStatus, depMrid, depStatus);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*  53 */       if (!StatusManager.getCurrent().isIntegration(depStatus))
/*     */       {
/*  55 */         return super.resolve(published, publishedStatus, depMrid, depStatus);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*  60 */       String statusProperty = depMrid.getName() + ""."" + depMrid.getRevision() + "".status"";
/*  61 */       String versionProperty = depMrid.getName() + ""."" + depMrid.getRevision() + "".version"";
/*  62 */       String deliveredProperty = depMrid.getName() + ""."" + depMrid.getRevision() + "".delivered"";
/*     */ 
/*     */       
/*  65 */       String version = IvyDeliver.this.getProject().getProperty(versionProperty);
/*  66 */       String status = IvyDeliver.this.getProject().getProperty(statusProperty);
/*  67 */       String delivered = IvyDeliver.this.getProject().getProperty(deliveredProperty);
/*  68 */       Message.debug(""found version = "" + version + "" status="" + status + "" delivered="" + delivered);
/*     */       
/*  70 */       if (version != null && status != null) {
/*  71 */         if (""true"".equals(delivered))
/*     */         {
/*  73 */           return version;
/*     */         }
/*  75 */         deliverDependency(depMrid, version, status, depStatus);
/*  76 */         IvyDeliver.this.loadDeliveryList();
/*  77 */         return version;
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  89 */       String globalStatusProperty = ""recursive.delivery.status"";
/*  90 */       String globalVersionProperty = ""recursive.delivery.version"";
/*  91 */       version = IvyDeliver.this.getProject().getProperty(globalVersionProperty);
/*  92 */       status = IvyDeliver.this.getProject().getProperty(globalStatusProperty);
/*  93 */       if (version != null && status != null) {
/*     */         
/*  95 */         delivered = IvyDeliver.this.getProject().getProperty(""recursive."" + depMrid.getName() + "".delivered"");
/*     */         
/*  97 */         Message.debug(""found global version = "" + version + "" and global status="" + status + "" - delivered = "" + delivered);
/*     */         
/*  99 */         if (""true"".equals(delivered))
/*     */         {
/* 101 */           return version;
/*     */         }
/* 103 */         IvyDeliver.this.getProject().setProperty(statusProperty, status);
/* 104 */         deliverDependency(depMrid, version, status, depStatus);
/* 105 */         IvyDeliver.this.loadDeliveryList();
/* 106 */         return version;
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 112 */       Input input = (Input)IvyDeliver.this.getProject().createTask(""input"");
/* 113 */       input.setOwningTarget(IvyDeliver.this.getOwningTarget());
/* 114 */       input.init();
/*     */ 
/*     */       
/* 117 */       input.setMessage(depMrid.getName() + "" "" + depMrid.getRevision() + "": please enter a status: "");
/*     */       
/* 119 */       input.setValidargs(StatusManager.getCurrent().getDeliveryStatusListString());
/* 120 */       input.setAddproperty(statusProperty);
/* 121 */       input.perform();
/* 122 */       status = IvyDeliver.this.getProject().getProperty(statusProperty);
/* 123 */       IvyDeliver.this.appendDeliveryList(statusProperty + "" = "" + status);
/*     */ 
/*     */       
/* 126 */       input.setMessage(depMrid.getName() + "" "" + depMrid.getRevision() + "": please enter a version: "");
/*     */       
/* 128 */       input.setValidargs(null);
/* 129 */       input.setAddproperty(versionProperty);
/* 130 */       input.perform();
/*     */       
/* 132 */       version = IvyDeliver.this.getProject().getProperty(versionProperty);
/* 133 */       IvyDeliver.this.appendDeliveryList(versionProperty + "" = "" + version);
/* 134 */       deliverDependency(depMrid, version, status, depStatus);
/*     */       
/* 136 */       IvyDeliver.this.loadDeliveryList();
/*     */       
/* 138 */       return version;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void deliverDependency(ModuleRevisionId depMrid, String version, String status, String depStatus) {
/* 144 */       if (IvyDeliver.this.deliverTarget != null && IvyDeliver.this.deliverTarget.trim().length() > 0) {
/*     */         
/* 146 */         CallTarget ct = (CallTarget)IvyDeliver.this.getProject().createTask(""antcall"");
/* 147 */         ct.setOwningTarget(IvyDeliver.this.getOwningTarget());
/* 148 */         ct.init();
/* 149 */         ct.setTarget(IvyDeliver.this.deliverTarget);
/* 150 */         ct.setInheritAll(true);
/* 151 */         ct.setInheritRefs(true);
/* 152 */         Property param = ct.createParam();
/* 153 */         param.setName(""dependency.name"");
/* 154 */         param.setValue(depMrid.getName());
/* 155 */         param = ct.createParam();
/* 156 */         param.setName(""dependency.published.status"");
/* 157 */         param.setValue(status);
/* 158 */         param = ct.createParam();
/* 159 */         param.setName(""dependency.published.version"");
/* 160 */         param.setValue(version);
/* 161 */         param = ct.createParam();
/* 162 */         param.setName(""dependency.version"");
/* 163 */         param.setValue(depMrid.getRevision());
/* 164 */         param = ct.createParam();
/* 165 */         param.setName(""dependency.status"");
/* 166 */         param.setValue((depStatus == null) ? ""null"" : depStatus);
/*     */         
/* 168 */         ct.perform();
/*     */         
/* 170 */         String deliveredProperty = depMrid.getName() + ""."" + depMrid.getRevision() + "".delivered"";
/*     */         
/* 172 */         IvyDeliver.this.getProject().setProperty(deliveredProperty, ""true"");
/* 173 */         IvyDeliver.this.appendDeliveryList(deliveredProperty + "" = true"");
/*     */         
/* 175 */         IvyDeliver.this.getProject().setProperty(""recursive."" + depMrid.getName() + "".delivered"", ""true"");
/* 176 */         IvyDeliver.this.appendDeliveryList(""recursive."" + depMrid.getName() + "".delivered"" + "" = true"");
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean replacedynamicrev = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String resolveId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String conf;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String pubBranch;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public String getDeliverpattern() { return this.deliverpattern; }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void setDeliverpattern(String destivypattern) { this.deliverpattern = destivypattern; }
/*     */ 
/*     */ 
/*     */   
/* 221 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 229 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 237 */   public String getPubdate() { return this.pubdate; }
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setPubdate(String pubdate) { this.pubdate = pubdate; }
/*     */ 
/*     */ 
/*     */   
/* 245 */   public String getPubrevision() { return this.pubRevision; }
/*     */ 
/*     */ 
/*     */   
/* 249 */   public void setPubrevision(String pubRevision) { this.pubRevision = pubRevision; }
/*     */ 
/*     */ 
/*     */   
/* 253 */   public String getPubbranch() { return this.pubBranch; }
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setPubbranch(String pubBranch) { this.pubBranch = pubBranch; }
/*     */ 
/*     */ 
/*     */   
/* 261 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 265 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 269 */   public String getStatus() { return this.status; }
/*     */ 
/*     */ 
/*     */   
/* 273 */   public void setStatus(String status) { this.status = status; }
/*     */ 
/*     */ 
/*     */   
/* 277 */   public void setDelivertarget(String deliverTarget) { this.deliverTarget = deliverTarget; }
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setDeliveryList(File deliveryList) { this.deliveryList = deliveryList; }
/*     */ 
/*     */ 
/*     */   
/* 285 */   public boolean isReplacedynamicrev() { return this.replacedynamicrev; }
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setReplacedynamicrev(boolean replacedynamicrev) { this.replacedynamicrev = replacedynamicrev; }
/*     */ 
/*     */ 
/*     */   
/* 293 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void setResolveId(String resolveId) { this.resolveId = resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 301 */   public String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */   
/* 305 */   public void setConf(String confs) { this.conf = confs; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 309 */     Ivy ivy = getIvyInstance();
/* 310 */     IvySettings settings = ivy.getSettings();
/*     */     
/* 312 */     this.organisation = getProperty(this.organisation, settings, ""ivy.organisation"", this.resolveId);
/* 313 */     this.module = getProperty(this.module, settings, ""ivy.module"", this.resolveId);
/* 314 */     this.revision = getProperty(this.revision, settings, ""ivy.revision"", this.resolveId);
/* 315 */     this.pubBranch = getProperty(this.pubBranch, settings, ""ivy.deliver.branch"");
/* 316 */     this.pubRevision = getProperty(this.pubRevision, settings, ""ivy.deliver.revision"");
/* 317 */     this.deliverpattern = getProperty(this.deliverpattern, settings, ""ivy.deliver.ivy.pattern"");
/* 318 */     this.status = getProperty(this.status, settings, ""ivy.status"");
/* 319 */     if (this.deliveryList == null) {
/* 320 */       String deliveryListPath = getProperty(settings, ""ivy.delivery.list.file"");
/* 321 */       if (deliveryListPath == null) {
/* 322 */         this.deliveryList = new File(System.getProperty(""java.io.tmpdir"") + ""/delivery.properties"");
/*     */       } else {
/*     */         
/* 325 */         this.deliveryList = getProject().resolveFile(settings.substitute(deliveryListPath));
/*     */       } 
/*     */     } 
/* 328 */     if (this.resolveId == null) {
/* 329 */       if (this.organisation == null) {
/* 330 */         throw new BuildException(""no organisation provided for ivy deliver task: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 335 */       if (this.module == null) {
/* 336 */         throw new BuildException(""no module name provided for ivy deliver task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 342 */     if (this.revision == null) {
/* 343 */       this.revision = Ivy.getWorkingRevision();
/*     */     }
/* 345 */     Date pubdate = getPubDate(this.pubdate, new Date());
/* 346 */     if (this.pubRevision == null) {
/* 347 */       if (this.revision.startsWith(""working@"")) {
/* 348 */         this.pubRevision = Ivy.DATE_FORMAT.format(pubdate);
/*     */       } else {
/* 350 */         this.pubRevision = this.revision;
/*     */       } 
/*     */     }
/* 353 */     if (this.deliverpattern == null) {
/* 354 */       throw new BuildException(""deliver ivy pattern is missing: either provide it as parameters or through ivy.deliver.ivy.pattern properties"");
/*     */     }
/*     */ 
/*     */     
/* 358 */     if (this.status == null) {
/* 359 */       throw new BuildException(""no status provided: either provide it as parameter or through the ivy.status.default property"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 364 */     ModuleRevisionId mrid = null;
/* 365 */     if (this.resolveId == null) {
/* 366 */       mrid = ModuleRevisionId.newInstance(this.organisation, this.module, this.revision);
/*     */     }
/* 368 */     boolean isLeading = false; try {
/*     */       DefaultPublishingDRResolver defaultPublishingDRResolver;
/* 370 */       if (!this.deliveryList.exists()) {
/* 371 */         isLeading = true;
/*     */       }
/*     */       
/* 374 */       loadDeliveryList();
/*     */ 
/*     */       
/* 377 */       if (this.deliverTarget != null && this.deliverTarget.trim().length() > 0) {
/* 378 */         defaultPublishingDRResolver = new DeliverDRResolver();
/*     */       } else {
/* 380 */         defaultPublishingDRResolver = new DefaultPublishingDRResolver();
/*     */       } 
/*     */       
/* 383 */       DeliverOptions options = (new DeliverOptions(this.status, pubdate, (PublishingDependencyRevisionResolver)defaultPublishingDRResolver, doValidate(settings), this.replacedynamicrev, splitConfs(this.conf))).setResolveId(this.resolveId).setPubBranch(this.pubBranch);
/*     */ 
/*     */ 
/*     */       
/* 387 */       if (mrid == null) {
/* 388 */         ivy.deliver(this.pubRevision, this.deliverpattern, options);
/*     */       } else {
/* 390 */         ivy.deliver(mrid, this.pubRevision, this.deliverpattern, options);
/*     */       } 
/* 392 */     } catch (Exception e) {
/* 393 */       throw new BuildException((""impossible to deliver "" + mrid == null) ? this.resolveId : (mrid + "": "" + e), e);
/*     */     } finally {
/*     */       
/* 396 */       if (isLeading && 
/* 397 */         this.deliveryList.exists()) {
/* 398 */         this.deliveryList.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void loadDeliveryList() {
/* 405 */     Property property = (Property)getProject().createTask(""property"");
/* 406 */     property.setOwningTarget(getOwningTarget());
/* 407 */     property.init();
/* 408 */     property.setFile(this.deliveryList);
/* 409 */     property.perform();
/*     */   }
/*     */   
/*     */   private void appendDeliveryList(String msg) {
/* 413 */     Echo echo = (Echo)getProject().createTask(""echo"");
/* 414 */     echo.setOwningTarget(getOwningTarget());
/* 415 */     echo.init();
/* 416 */     echo.setFile(this.deliveryList);
/* 417 */     echo.setMessage(msg + ""\n"");
/* 418 */     echo.setAppend(true);
/* 419 */     echo.perform();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyDeliver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyExtractFromSources,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.io.Writer;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.ChainableReader;
/*     */ import org.apache.tools.ant.filters.LineContainsRegExp;
/*     */ import org.apache.tools.ant.filters.TokenFilter;
/*     */ import org.apache.tools.ant.taskdefs.Concat;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.RegularExpression;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyExtractFromSources
/*     */   extends Task
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String revision;
/*     */   private String status;
/*     */   
/*     */   public static class Ignore
/*     */   {
/*     */     private String packageName;
/*     */     
/*  54 */     public String getPackage() { return this.packageName; }
/*     */ 
/*     */ 
/*     */     
/*  58 */     public void setPackage(String package1) { this.packageName = package1; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private List ignoredPackaged = new ArrayList();
/*     */   
/*  72 */   private Map mapping = new HashMap();
/*     */   
/*  74 */   private Concat concat = new Concat();
/*     */   
/*     */   private File to;
/*     */ 
/*     */   
/*  79 */   public void addConfiguredIgnore(Ignore ignore) { this.ignoredPackaged.add(ignore.getPackage()); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public File getTo() { return this.to; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setTo(File to) { this.to = to; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public String getStatus() { return this.status; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setStatus(String status) { this.status = status; }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void addConfiguredMapping(PackageMapping mapping) { this.mapping.put(mapping.getPackage(), mapping.getModuleRevisionId()); }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void addFileSet(FileSet fileSet) { this.concat.addFileset(fileSet); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 131 */     configureConcat();
/* 132 */     Writer out = new StringWriter();
/* 133 */     this.concat.setWriter(out);
/* 134 */     this.concat.execute();
/* 135 */     Set importsSet = new HashSet(Arrays.asList((Object[])out.toString().split(""\n"")));
/* 136 */     Set dependencies = new HashSet();
/* 137 */     for (Iterator iter = importsSet.iterator(); iter.hasNext(); ) {
/* 138 */       String pack = ((String)iter.next()).trim();
/* 139 */       ModuleRevisionId mrid = getMapping(pack);
/* 140 */       if (mrid != null) {
/* 141 */         dependencies.add(mrid);
/*     */       }
/*     */     } 
/*     */     try {
/* 145 */       PrintWriter writer = new PrintWriter(new FileOutputStream(this.to));
/* 146 */       writer.println(""<ivy-module version=\""1.0\"">"");
/* 147 */       writer.println(""\t<info organisation=\"""" + this.organisation + ""\"""");
/* 148 */       writer.println(""\t       module=\"""" + this.module + ""\"""");
/* 149 */       if (this.revision != null) {
/* 150 */         writer.println(""\t       revision=\"""" + this.revision + ""\"""");
/*     */       }
/* 152 */       if (this.status != null) {
/* 153 */         writer.println(""\t       status=\"""" + this.status + ""\"""");
/*     */       } else {
/* 155 */         writer.println(""\t       status=\""integration\"""");
/*     */       } 
/* 157 */       writer.println(""\t/>"");
/* 158 */       if (!dependencies.isEmpty()) {
/* 159 */         writer.println(""\t<dependencies>"");
/* 160 */         for (Iterator iter = dependencies.iterator(); iter.hasNext(); ) {
/* 161 */           ModuleRevisionId mrid = iter.next();
/* 162 */           writer.println(""\t\t<dependency org=\"""" + mrid.getOrganisation() + ""\"" name=\"""" + mrid.getName() + ""\"" rev=\"""" + mrid.getRevision() + ""\""/>"");
/*     */         } 
/*     */         
/* 165 */         writer.println(""\t</dependencies>"");
/*     */       } 
/* 167 */       writer.println(""</ivy-module>"");
/* 168 */       writer.close();
/* 169 */       log(dependencies.size() + "" dependencies put in "" + this.to);
/* 170 */     } catch (FileNotFoundException e) {
/* 171 */       throw new BuildException(""impossible to create file "" + this.to + "": "" + e, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ModuleRevisionId getMapping(String pack) {
/* 180 */     String askedPack = pack;
/* 181 */     ModuleRevisionId ret = null;
/* 182 */     while (ret == null && pack.length() > 0) {
/* 183 */       if (this.ignoredPackaged.contains(pack)) {
/* 184 */         return null;
/*     */       }
/* 186 */       ret = (ModuleRevisionId)this.mapping.get(pack);
/* 187 */       int lastDotIndex = pack.lastIndexOf('.');
/* 188 */       if (lastDotIndex != -1) {
/* 189 */         pack = pack.substring(0, lastDotIndex);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 194 */     if (ret == null) {
/* 195 */       log(""no mapping found for "" + askedPack, 3);
/*     */     }
/* 197 */     return ret;
/*     */   }
/*     */   
/*     */   private void configureConcat() {
/* 201 */     this.concat.setProject(getProject());
/* 202 */     this.concat.setTaskName(getTaskName());
/* 203 */     FilterChain filterChain = new FilterChain();
/* 204 */     LineContainsRegExp lcre = new LineContainsRegExp();
/* 205 */     RegularExpression regexp = new RegularExpression();
/* 206 */     regexp.setPattern(""^import .+;"");
/* 207 */     lcre.addConfiguredRegexp(regexp);
/* 208 */     filterChain.add((ChainableReader)lcre);
/* 209 */     TokenFilter tf = new TokenFilter();
/* 210 */     TokenFilter.ReplaceRegex rre = new TokenFilter.ReplaceRegex();
/* 211 */     rre.setPattern(""import (.+);.*"");
/* 212 */     rre.setReplace(""\\1"");
/* 213 */     tf.add((TokenFilter.Filter)rre);
/* 214 */     filterChain.add((ChainableReader)tf);
/* 215 */     this.concat.addFilterChain(filterChain);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyExtractFromSources.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyFindRevision,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyFindRevision
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String branch;
/*     */   private String revision;
/*  40 */   private String property = ""ivy.revision"";
/*     */ 
/*     */   
/*  43 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/*  47 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/*  51 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/*  55 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public String getProperty() { return this.property; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public void setProperty(String prefix) { this.property = prefix; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  83 */     if (this.organisation == null) {
/*  84 */       throw new BuildException(""no organisation provided for ivy findmodules"");
/*     */     }
/*  86 */     if (this.module == null) {
/*  87 */       throw new BuildException(""no module name provided for ivy findmodules"");
/*     */     }
/*  89 */     if (this.revision == null) {
/*  90 */       throw new BuildException(""no revision provided for ivy findmodules"");
/*     */     }
/*     */     
/*  93 */     Ivy ivy = getIvyInstance();
/*  94 */     IvySettings settings = ivy.getSettings();
/*  95 */     if (this.branch == null) {
/*  96 */       settings.getDefaultBranch(new ModuleId(this.organisation, this.module));
/*     */     }
/*  98 */     ResolvedModuleRevision rmr = ivy.findModule(ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision));
/*     */     
/* 100 */     if (rmr != null)
/* 101 */       getProject().setProperty(this.property, rmr.getId().getRevision()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyFindRevision.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyInfo,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.MalformedURLException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyInfo
/*     */   extends IvyTask
/*     */ {
/*  45 */   private File file = null;
/*     */   
/*     */   private String organisation;
/*     */   
/*     */   private String module;
/*     */   
/*     */   private String branch;
/*     */   
/*     */   private String revision;
/*     */   
/*  55 */   private String property = ""ivy"";
/*     */ 
/*     */   
/*  58 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/*  66 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/*  70 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/*  74 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/*  78 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/*  82 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/*  94 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public String getProperty() { return this.property; }
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setProperty(String prefix) { this.property = prefix; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 106 */     Ivy ivy = getIvyInstance();
/* 107 */     IvySettings settings = ivy.getSettings();
/*     */     
/*     */     try {
/* 110 */       if (this.organisation != null || this.module != null || this.revision != null || this.branch != null) {
/* 111 */         if (this.organisation == null) {
/* 112 */           throw new BuildException(""no organisation provided for ivy findmodules"");
/*     */         }
/* 114 */         if (this.module == null) {
/* 115 */           throw new BuildException(""no module name provided for ivy findmodules"");
/*     */         }
/* 117 */         if (this.revision == null) {
/* 118 */           throw new BuildException(""no revision provided for ivy findmodules"");
/*     */         }
/*     */         
/* 121 */         if (this.branch == null) {
/* 122 */           settings.getDefaultBranch(new ModuleId(this.organisation, this.module));
/*     */         }
/* 124 */         ResolvedModuleRevision rmr = ivy.findModule(ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision));
/*     */         
/* 126 */         if (rmr != null) {
/* 127 */           ModuleDescriptor md = rmr.getDescriptor();
/* 128 */           ModuleRevisionId mrid = rmr.getId();
/* 129 */           setProperties(md, mrid);
/*     */         } 
/*     */       } else {
/* 132 */         if (this.file == null) {
/* 133 */           this.file = getProject().resolveFile(getProperty(settings, ""ivy.dep.file""));
/*     */         }
/* 135 */         ModuleDescriptor md = ModuleDescriptorParserRegistry.getInstance().parseDescriptor((ParserSettings)settings, this.file.toURI().toURL(), doValidate(settings));
/*     */         
/* 137 */         ModuleRevisionId mrid = md.getModuleRevisionId();
/* 138 */         setProperties(md, mrid);
/*     */       } 
/* 140 */     } catch (MalformedURLException e) {
/* 141 */       throw new BuildException(""unable to convert given ivy file to url: "" + this.file + "": "" + e, e);
/*     */     }
/* 143 */     catch (ParseException e) {
/* 144 */       log(e.getMessage(), 0);
/* 145 */       throw new BuildException(""syntax errors in ivy file: "" + e, e);
/* 146 */     } catch (Exception e) {
/* 147 */       throw new BuildException(""impossible to resolve dependencies: "" + e, e);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setProperties(ModuleDescriptor md, ModuleRevisionId mrid) {
/* 152 */     getProject().setProperty(this.property + "".organisation"", mrid.getOrganisation());
/* 153 */     getProject().setProperty(this.property + "".module"", mrid.getName());
/* 154 */     if (mrid.getBranch() != null) {
/* 155 */       getProject().setProperty(this.property + "".branch"", mrid.getBranch());
/*     */     }
/* 157 */     getProject().setProperty(this.property + "".revision"", mrid.getRevision());
/* 158 */     getProject().setProperty(this.property + "".status"", md.getStatus());
/*     */     
/* 160 */     Map extra = mrid.getExtraAttributes();
/* 161 */     for (Iterator iter = extra.entrySet().iterator(); iter.hasNext(); ) {
/* 162 */       Map.Entry entry = iter.next();
/* 163 */       getProject().setProperty(this.property + "".extra."" + entry.getKey(), (String)entry.getValue());
/*     */     } 
/*     */ 
/*     */     
/* 167 */     getProject().setProperty(this.property + "".configurations"", mergeConfs(md.getConfigurationsNames()));
/*     */ 
/*     */ 
/*     */     
/* 171 */     Configuration[] configs = md.getConfigurations();
/* 172 */     List publicConfigsList = new ArrayList();
/* 173 */     for (int i = 0; i < configs.length; i++) {
/* 174 */       if (Configuration.Visibility.PUBLIC.equals(configs[i].getVisibility())) {
/* 175 */         publicConfigsList.add(configs[i].getName());
/*     */       }
/*     */     } 
/* 178 */     String[] publicConfigs = publicConfigsList.toArray(new String[publicConfigsList.size()]);
/*     */     
/* 180 */     getProject().setProperty(this.property + "".public.configurations"", mergeConfs(publicConfigs));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyInfo.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyInstall,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.install.InstallOptions;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyInstall
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String revision;
/*     */   private String branch;
/*     */   private boolean overwrite = false;
/*     */   private String from;
/*     */   private String to;
/*     */   private boolean transitive;
/*     */   private String type;
/*  54 */   private String matcher = ""exact"";
/*     */   private boolean haltOnFailure = true;
/*     */   
/*     */   public void doExecute() throws BuildException {
/*     */     ResolveReport report;
/*  59 */     Ivy ivy = getIvyInstance();
/*  60 */     IvySettings settings = ivy.getSettings();
/*  61 */     if (this.organisation == null) {
/*  62 */       throw new BuildException(""no organisation provided for ivy publish task: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  67 */     if (this.module == null && ""exact"".equals(this.matcher)) {
/*  68 */       throw new BuildException(""no module name provided for ivy publish task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */     
/*  72 */     if (this.module == null && !""exact"".equals(this.matcher)) {
/*  73 */       this.module = ""*"";
/*     */     }
/*  75 */     if (this.revision == null && ""exact"".equals(this.matcher)) {
/*  76 */       throw new BuildException(""no module revision provided for ivy publish task: It can either be set explicitely via the attribute 'revision' or via 'ivy.revision' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */     
/*  80 */     if (this.revision == null && !""exact"".equals(this.matcher)) {
/*  81 */       this.revision = ""*"";
/*     */     }
/*  83 */     if (this.branch == null && ""exact"".equals(this.matcher)) {
/*  84 */       this.branch = settings.getDefaultBranch(ModuleId.newInstance(this.organisation, this.module));
/*  85 */     } else if (this.branch == null && !""exact"".equals(this.matcher)) {
/*  86 */       this.branch = ""*"";
/*     */     } 
/*  88 */     if (this.from == null) {
/*  89 */       throw new BuildException(""no from resolver name: please provide it through parameter 'from'"");
/*     */     }
/*     */     
/*  92 */     if (this.to == null) {
/*  93 */       throw new BuildException(""no to resolver name: please provide it through parameter 'to'"");
/*     */     }
/*     */     
/*  96 */     ModuleRevisionId mrid = ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision);
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 101 */       report = ivy.install(mrid, this.from, this.to, (new InstallOptions()).setTransitive(this.transitive).setValidate(doValidate(settings)).setOverwrite(this.overwrite).setArtifactFilter(FilterHelper.getArtifactTypeFilter(this.type)).setMatcherName(this.matcher));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 108 */     catch (Exception e) {
/* 109 */       throw new BuildException(""impossible to install "" + mrid + "": "" + e, e);
/*     */     } 
/*     */     
/* 112 */     if (report.hasError() && isHaltonfailure()) {
/* 113 */       throw new BuildException(""Problem happened while installing modules - see output for details"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public boolean isHaltonfailure() { return this.haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setHaltonfailure(boolean haltOnFailure) { this.haltOnFailure = haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public boolean isOverwrite() { return this.overwrite; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setOverwrite(boolean overwrite) { this.overwrite = overwrite; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public String getFrom() { return this.from; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setFrom(String from) { this.from = from; }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public String getTo() { return this.to; }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setTo(String to) { this.to = to; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public boolean isTransitive() { return this.transitive; }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setTransitive(boolean transitive) { this.transitive = transitive; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setType(String type) { this.type = type; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public String getMatcher() { return this.matcher; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setMatcher(String matcher) { this.matcher = matcher; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyInstall.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyListModules,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyListModules
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*  36 */   private String branch = ""*"";
/*     */   
/*     */   private String revision;
/*     */   
/*  40 */   private String matcher = ""exactOrRegexp"";
/*     */   
/*     */   private String property;
/*     */   
/*     */   private String value;
/*     */ 
/*     */   
/*  47 */   public String getMatcher() { return this.matcher; }
/*     */ 
/*     */ 
/*     */   
/*  51 */   public void setMatcher(String matcher) { this.matcher = matcher; }
/*     */ 
/*     */ 
/*     */   
/*  55 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public String getProperty() { return this.property; }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public void setProperty(String name) { this.property = name; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 103 */     if (this.organisation == null) {
/* 104 */       throw new BuildException(""no organisation provided for ivy findmodules"");
/*     */     }
/* 106 */     if (this.module == null) {
/* 107 */       throw new BuildException(""no module name provided for ivy findmodules"");
/*     */     }
/* 109 */     if (this.revision == null) {
/* 110 */       throw new BuildException(""no revision provided for ivy findmodules"");
/*     */     }
/* 112 */     if (this.property == null) {
/* 113 */       throw new BuildException(""no property provided for ivy findmodules"");
/*     */     }
/* 115 */     if (this.value == null) {
/* 116 */       throw new BuildException(""no value provided for ivy findmodules"");
/*     */     }
/* 118 */     Ivy ivy = getIvyInstance();
/* 119 */     IvySettings settings = ivy.getSettings();
/* 120 */     ModuleRevisionId[] mrids = ivy.listModules(ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision), settings.getMatcher(this.matcher));
/*     */     
/* 122 */     for (int i = 0; i < mrids.length; i++) {
/* 123 */       String name = IvyPatternHelper.substitute(settings.substitute(this.property), mrids[i]);
/* 124 */       String value = IvyPatternHelper.substitute(settings.substitute(this.value), mrids[i]);
/* 125 */       getProject().setProperty(name, value);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyListModules.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyMakePom,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.MalformedURLException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.parser.m2.PomModuleDescriptorWriter;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyMakePom
/*     */   extends IvyTask
/*     */ {
/*     */   public class Mapping
/*     */   {
/*     */     private String conf;
/*     */     private String scope;
/*     */     private final IvyMakePom this$0;
/*     */     
/*  45 */     public String getConf() { return this.conf; }
/*     */ 
/*     */     
/*  48 */     public void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */     
/*  51 */     public String getScope() { return this.scope; }
/*     */ 
/*     */     
/*  54 */     public void setScope(String scope) { this.scope = scope; }
/*     */   }
/*     */ 
/*     */   
/*  58 */   private File pomFile = null;
/*     */   
/*  60 */   private File headerFile = null;
/*     */   
/*  62 */   private File ivyFile = null;
/*     */   
/*  64 */   private Collection mappings = new ArrayList();
/*     */ 
/*     */   
/*  67 */   public File getPomFile() { return this.pomFile; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public void setPomFile(File file) { this.pomFile = file; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public File getIvyFile() { return this.ivyFile; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public void setIvyFile(File ivyFile) { this.ivyFile = ivyFile; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public File getHeaderFile() { return this.headerFile; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setHeaderFile(File headerFile) { this.headerFile = headerFile; }
/*     */ 
/*     */   
/*     */   public Mapping createMapping() {
/*  91 */     Mapping mapping = new Mapping();
/*  92 */     this.mappings.add(mapping);
/*  93 */     return mapping;
/*     */   }
/*     */   
/*     */   public void doExecute() throws BuildException {
/*     */     try {
/*  98 */       if (this.ivyFile == null) {
/*  99 */         throw new BuildException(""source ivy file is required for makepom task"");
/*     */       }
/* 101 */       if (this.pomFile == null) {
/* 102 */         throw new BuildException(""destination pom file is required for makepom task"");
/*     */       }
/* 104 */       ModuleDescriptor md = XmlModuleDescriptorParser.getInstance().parseDescriptor((ParserSettings)getSettings(), this.ivyFile.toURI().toURL(), false);
/*     */       
/* 106 */       PomModuleDescriptorWriter.write(md, (this.headerFile == null) ? null : FileUtil.readEntirely(getHeaderFile()), this.mappings.isEmpty() ? PomModuleDescriptorWriter.DEFAULT_MAPPING : new PomModuleDescriptorWriter.ConfigurationScopeMapping(getMappingsMap()), this.pomFile);
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 111 */     catch (MalformedURLException e) {
/* 112 */       throw new BuildException(""unable to convert given ivy file to url: "" + this.ivyFile + "": "" + e, e);
/*     */     }
/* 114 */     catch (ParseException e) {
/* 115 */       log(e.getMessage(), 0);
/* 116 */       throw new BuildException(""syntax errors in ivy file "" + this.ivyFile + "": "" + e, e);
/* 117 */     } catch (Exception e) {
/* 118 */       throw new BuildException(""impossible convert given ivy file to pom file: "" + e + "" from="" + this.ivyFile + "" to="" + this.pomFile, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private Map getMappingsMap() {
/* 124 */     Map mappingsMap = new HashMap();
/* 125 */     for (Iterator iter = this.mappings.iterator(); iter.hasNext(); ) {
/* 126 */       Mapping mapping = iter.next();
/* 127 */       mappingsMap.put(mapping.getConf(), mapping.getScope());
/*     */     } 
/* 129 */     return mappingsMap;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyMakePom.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyPostResolveTask,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class IvyPostResolveTask
/*     */   extends IvyTask
/*     */ {
/*     */   private String conf;
/*     */   private boolean haltOnFailure = true;
/*     */   private boolean transitive = true;
/*     */   private boolean inline = false;
/*     */   private String organisation;
/*     */   private String module;
/*  55 */   private String revision = ""latest.integration"";
/*     */   
/*     */   private String resolveId;
/*     */   
/*     */   private String type;
/*     */   
/*     */   private File file;
/*     */   
/*  63 */   private Filter artifactFilter = null;
/*     */   
/*     */   private boolean useOrigin = false;
/*     */   
/*  67 */   private Boolean keep = null;
/*     */   
/*  69 */   private String log = ""default"";
/*     */ 
/*     */   
/*  72 */   public boolean isUseOrigin() { return this.useOrigin; }
/*     */ 
/*     */ 
/*     */   
/*  76 */   public void setUseOrigin(boolean useOrigin) { this.useOrigin = useOrigin; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public String getLog() { return this.log; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setLog(String log) { this.log = log; }
/*     */ 
/*     */   
/*     */   protected void prepareAndCheck() {
/*  88 */     Ivy ivy = getIvyInstance();
/*  89 */     IvySettings settings = ivy.getSettings();
/*     */     
/*  91 */     boolean orgAndModSetManually = (this.organisation != null && this.module != null);
/*     */     
/*  93 */     this.organisation = getProperty(this.organisation, settings, ""ivy.organisation"");
/*  94 */     this.module = getProperty(this.module, settings, ""ivy.module"");
/*     */     
/*  96 */     if (this.file == null) {
/*  97 */       String fileName = getProperty(settings, ""ivy.resolved.file"", this.resolveId);
/*  98 */       if (fileName != null) {
/*  99 */         this.file = getProject().resolveFile(fileName);
/*     */       }
/*     */     } 
/*     */     
/* 103 */     if (isInline()) {
/* 104 */       this.conf = (this.conf == null) ? ""*"" : this.conf;
/* 105 */       if (this.organisation == null) {
/* 106 */         throw new BuildException(""no organisation provided for ivy cache task in inline mode: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 111 */       if (this.module == null) {
/* 112 */         throw new BuildException(""no module name provided for ivy cache task in inline mode: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 117 */       String[] toResolve = getConfsToResolve(getOrganisation(), getModule() + ""-caller"", this.conf, true);
/*     */ 
/*     */       
/* 120 */       for (int i = 0; i < toResolve.length; i++) {
/* 121 */         if (""*"".equals(toResolve[i])) {
/* 122 */           toResolve[i] = ""*(public)"";
/*     */         }
/*     */       } 
/* 125 */       if (toResolve.length > 0) {
/* 126 */         Message.verbose(""using inline mode to resolve "" + getOrganisation() + "" "" + getModule() + "" "" + getRevision() + "" ("" + StringUtils.join((Object[])toResolve, "", "") + "")"");
/*     */ 
/*     */         
/* 129 */         IvyResolve resolve = createResolve(isHaltonfailure(), isUseOrigin());
/* 130 */         resolve.setOrganisation(getOrganisation());
/* 131 */         resolve.setModule(getModule());
/* 132 */         resolve.setRevision(getRevision());
/* 133 */         resolve.setInline(true);
/* 134 */         resolve.setConf(this.conf);
/* 135 */         resolve.setResolveId(this.resolveId);
/* 136 */         resolve.setTransitive(isTransitive());
/* 137 */         resolve.execute();
/*     */       } else {
/* 139 */         Message.verbose(""inline resolve already done for "" + getOrganisation() + "" "" + getModule() + "" "" + getRevision() + "" ("" + this.conf + "")"");
/*     */       } 
/*     */       
/* 142 */       if (""*"".equals(this.conf)) {
/* 143 */         this.conf = StringUtils.join((Object[])getResolvedConfigurations(getOrganisation(), getModule() + ""-caller"", true), "", "");
/*     */       }
/*     */     } else {
/*     */       
/* 147 */       Message.debug(""using standard ensure resolved"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 153 */       if (!orgAndModSetManually) {
/* 154 */         ensureResolved(settings);
/*     */       }
/*     */       
/* 157 */       this.conf = getProperty(this.conf, settings, ""ivy.resolved.configurations"");
/* 158 */       if (""*"".equals(this.conf)) {
/* 159 */         this.conf = getProperty(settings, ""ivy.resolved.configurations"");
/* 160 */         if (this.conf == null) {
/* 161 */           throw new BuildException(""bad conf provided for ivy cache task: '*' can only be used with a prior call to <resolve/>"");
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 167 */     this.organisation = getProperty(this.organisation, settings, ""ivy.organisation"");
/* 168 */     this.module = getProperty(this.module, settings, ""ivy.module"");
/* 169 */     if (this.organisation == null) {
/* 170 */       throw new BuildException(""no organisation provided for ivy cache task: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 175 */     if (this.module == null) {
/* 176 */       throw new BuildException(""no module name provided for ivy cache task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 181 */     if (this.conf == null) {
/* 182 */       throw new BuildException(""no conf provided for ivy cache task: It can either be set explicitely via the attribute 'conf' or via 'ivy.resolved.configurations' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 188 */     this.artifactFilter = FilterHelper.getArtifactTypeFilter(this.type);
/*     */   }
/*     */   
/*     */   protected void ensureResolved(IvySettings settings) {
/* 192 */     String requestedConfigs = getProperty(getConf(), settings, ""ivy.resolved.configurations"");
/*     */     
/* 194 */     String[] confs = null;
/* 195 */     if (getResolveId() != null) {
/* 196 */       confs = getConfsToResolve(getResolveId(), requestedConfigs);
/*     */     } else {
/* 198 */       confs = getConfsToResolve(getOrganisation(), getModule(), requestedConfigs, false);
/*     */     } 
/*     */     
/* 201 */     if (confs.length > 0) {
/* 202 */       IvyResolve resolve = createResolve(isHaltonfailure(), isUseOrigin());
/* 203 */       resolve.setFile(getFile());
/* 204 */       resolve.setTransitive(isTransitive());
/* 205 */       resolve.setConf(StringUtils.join((Object[])confs, "", ""));
/* 206 */       resolve.setResolveId(getResolveId());
/* 207 */       resolve.execute();
/*     */     } 
/*     */   }
/*     */   
/*     */   protected String[] getConfsToResolve(String org, String module, String conf, boolean strict) {
/* 212 */     ModuleDescriptor reference = (ModuleDescriptor)getResolvedDescriptor(org, module, strict);
/* 213 */     String[] rconfs = getResolvedConfigurations(org, module, strict);
/* 214 */     return getConfsToResolve(reference, conf, rconfs);
/*     */   }
/*     */   
/*     */   protected String[] getConfsToResolve(String resolveId, String conf) {
/* 218 */     ModuleDescriptor reference = (ModuleDescriptor)getResolvedDescriptor(resolveId, false);
/* 219 */     if (reference == null) {
/*     */ 
/*     */ 
/*     */       
/* 223 */       if (conf == null) {
/* 224 */         return new String[] { ""*"" };
/*     */       }
/* 226 */       return splitConfs(conf);
/*     */     } 
/*     */     
/* 229 */     String[] rconfs = (String[])getProject().getReference(""ivy.resolved.configurations.ref."" + resolveId);
/*     */     
/* 231 */     return getConfsToResolve(reference, conf, rconfs);
/*     */   }
/*     */   
/*     */   private String[] getConfsToResolve(ModuleDescriptor reference, String conf, String[] rconfs) {
/* 235 */     Message.debug(""calculating configurations to resolve"");
/*     */     
/* 237 */     if (reference == null) {
/* 238 */       Message.debug(""module not yet resolved, all confs still need to be resolved"");
/* 239 */       if (conf == null) {
/* 240 */         return new String[] { ""*"" };
/*     */       }
/* 242 */       return splitConfs(conf);
/*     */     } 
/* 244 */     if (conf != null) {
/*     */       String[] confs;
/* 246 */       if (""*"".equals(conf)) {
/* 247 */         confs = reference.getConfigurationsNames();
/*     */       } else {
/* 249 */         confs = splitConfs(conf);
/*     */       } 
/*     */       
/* 252 */       HashSet rconfsSet = new HashSet(Arrays.asList((Object[])rconfs));
/*     */ 
/*     */       
/* 255 */       ResolutionCacheManager cache = getSettings().getResolutionCacheManager();
/* 256 */       for (Iterator it = rconfsSet.iterator(); it.hasNext(); ) {
/* 257 */         String resolvedConf = it.next();
/* 258 */         String resolveId = getResolveId();
/* 259 */         if (resolveId == null) {
/* 260 */           resolveId = ResolveOptions.getDefaultResolveId(reference);
/*     */         }
/* 262 */         File report = cache.getConfigurationResolveReportInCache(resolveId, resolvedConf);
/* 263 */         if (!report.exists())
/*     */         {
/* 265 */           it.remove();
/*     */         }
/*     */       } 
/*     */       
/* 269 */       HashSet confsSet = new HashSet(Arrays.asList((Object[])confs));
/* 270 */       Message.debug(""resolved configurations:   "" + rconfsSet);
/* 271 */       Message.debug(""asked configurations:      "" + confsSet);
/* 272 */       confsSet.removeAll(rconfsSet);
/* 273 */       Message.debug(""to resolve configurations: "" + confsSet);
/* 274 */       return (String[])confsSet.toArray((Object[])new String[confsSet.size()]);
/*     */     } 
/* 276 */     Message.debug(""module already resolved, no configuration to resolve"");
/* 277 */     return new String[0];
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected IvyResolve createResolve(boolean haltOnFailure, boolean useOrigin) {
/* 283 */     Message.verbose(""no resolved descriptor found: launching default resolve"");
/* 284 */     IvyResolve resolve = new IvyResolve();
/* 285 */     resolve.setTaskName(getTaskName());
/* 286 */     resolve.setProject(getProject());
/* 287 */     resolve.setHaltonfailure(haltOnFailure);
/* 288 */     resolve.setUseOrigin(useOrigin);
/* 289 */     resolve.setValidate(isValidate());
/* 290 */     resolve.setKeep(isKeep());
/* 291 */     resolve.setLog(getLog());
/* 292 */     resolve.setSettingsRef(getSettingsRef());
/* 293 */     return resolve;
/*     */   }
/*     */ 
/*     */   
/* 297 */   protected ModuleRevisionId getResolvedMrid() { return new ModuleRevisionId(getResolvedModuleId(), (getRevision() == null) ? Ivy.getWorkingRevision() : getRevision()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   protected ModuleId getResolvedModuleId() { return isInline() ? new ModuleId(getOrganisation(), getModule() + ""-caller"") : new ModuleId(getOrganisation(), getModule()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   protected ResolveReport getResolvedReport() { return getResolvedReport(getOrganisation(), isInline() ? (getModule() + ""-caller"") : getModule(), this.resolveId); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/* 316 */   public void setType(String type) { this.type = type; }
/*     */ 
/*     */ 
/*     */   
/* 320 */   public String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */   
/* 324 */   public void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */ 
/*     */   
/* 328 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 332 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 336 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 340 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 344 */   public boolean isHaltonfailure() { return this.haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 348 */   public void setHaltonfailure(boolean haltOnFailure) { this.haltOnFailure = haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 352 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 356 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 360 */   public void setRevision(String rev) { this.revision = rev; }
/*     */ 
/*     */ 
/*     */   
/* 364 */   public Filter getArtifactFilter() { return this.artifactFilter; }
/*     */ 
/*     */ 
/*     */   
/* 368 */   public boolean isTransitive() { return this.transitive; }
/*     */ 
/*     */ 
/*     */   
/* 372 */   public void setTransitive(boolean transitive) { this.transitive = transitive; }
/*     */ 
/*     */ 
/*     */   
/* 376 */   public boolean isInline() { return this.inline; }
/*     */ 
/*     */ 
/*     */   
/* 380 */   public void setInline(boolean inline) { this.inline = inline; }
/*     */ 
/*     */ 
/*     */   
/* 384 */   public void setResolveId(String resolveId) { this.resolveId = resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 388 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 392 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/* 396 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/* 400 */   public void setKeep(boolean keep) { this.keep = Boolean.valueOf(keep); }
/*     */ 
/*     */ 
/*     */   
/* 404 */   public boolean isKeep() { return (this.keep == null) ? (!isInline()) : this.keep.booleanValue(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyPostResolveTask.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyPublish,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.id.ArtifactRevisionId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.publish.PublishOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyPublish
/*     */   extends IvyTask
/*     */ {
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String revision;
/*     */   private String pubRevision;
/*     */   private String srcivypattern;
/*     */   private String status;
/*  54 */   private String conf = null;
/*     */   
/*     */   private String pubdate;
/*     */   
/*     */   private String deliverTarget;
/*     */   
/*  60 */   private String publishResolverName = null;
/*     */   
/*  62 */   private List artifactspattern = new ArrayList();
/*     */   
/*     */   private File deliveryList;
/*     */   
/*     */   private boolean publishivy = true;
/*     */   
/*     */   private boolean warnonmissing = true;
/*     */   
/*     */   private boolean haltonmissing = true;
/*     */   
/*     */   private boolean overwrite = false;
/*     */   
/*     */   private boolean update = false;
/*     */   
/*     */   private boolean replacedynamicrev = true;
/*     */   
/*     */   private boolean forcedeliver;
/*     */   
/*  80 */   private Collection artifacts = new ArrayList();
/*     */   
/*     */   private String pubBranch;
/*     */ 
/*     */   
/*  85 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public String getSrcivypattern() { return this.srcivypattern; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setSrcivypattern(String destivypattern) { this.srcivypattern = destivypattern; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getDeliverivypattern() { return this.srcivypattern; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setDeliverivypattern(String destivypattern) { this.srcivypattern = destivypattern; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public String getPubdate() { return this.pubdate; }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setPubdate(String pubdate) { this.pubdate = pubdate; }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public String getPubrevision() { return this.pubRevision; }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setPubrevision(String pubRevision) { this.pubRevision = pubRevision; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public String getPubbranch() { return this.pubBranch; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setPubbranch(String pubBranch) { this.pubBranch = pubBranch; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public String getStatus() { return this.status; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setStatus(String status) { this.status = status; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setDelivertarget(String deliverTarget) { this.deliverTarget = deliverTarget; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setDeliveryList(File deliveryList) { this.deliveryList = deliveryList; }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public String getResolver() { return this.publishResolverName; }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setResolver(String publishResolverName) { this.publishResolverName = publishResolverName; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public String getArtifactspattern() { return this.artifactspattern.isEmpty() ? null : this.artifactspattern.get(0); }
/*     */ 
/*     */   
/*     */   public void setArtifactspattern(String artifactsPattern) {
/* 191 */     this.artifactspattern.clear();
/* 192 */     this.artifactspattern.add(artifactsPattern);
/*     */   }
/*     */ 
/*     */   
/* 196 */   public void addArtifactspattern(String artifactsPattern) { this.artifactspattern.add(artifactsPattern); }
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void addConfiguredArtifacts(ArtifactsPattern p) { this.artifactspattern.add(p.getPattern()); }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public boolean isReplacedynamicrev() { return this.replacedynamicrev; }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setReplacedynamicrev(boolean replacedynamicrev) { this.replacedynamicrev = replacedynamicrev; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 212 */     Ivy ivy = getIvyInstance();
/* 213 */     IvySettings settings = ivy.getSettings();
/*     */     
/* 215 */     this.organisation = getProperty(this.organisation, settings, ""ivy.organisation"");
/* 216 */     this.module = getProperty(this.module, settings, ""ivy.module"");
/* 217 */     this.revision = getProperty(this.revision, settings, ""ivy.revision"");
/* 218 */     this.pubBranch = getProperty(this.pubBranch, settings, ""ivy.deliver.branch"");
/* 219 */     this.pubRevision = getProperty(this.pubRevision, settings, ""ivy.deliver.revision"");
/* 220 */     if (this.artifactspattern.isEmpty()) {
/* 221 */       String p = getProperty(null, settings, ""ivy.publish.src.artifacts.pattern"");
/* 222 */       if (p != null) {
/* 223 */         this.artifactspattern.add(p);
/*     */       }
/*     */     } 
/* 226 */     if (this.srcivypattern == null) {
/* 227 */       this.srcivypattern = getArtifactspattern();
/*     */     }
/* 229 */     this.status = getProperty(this.status, settings, ""ivy.status"");
/* 230 */     if (this.organisation == null) {
/* 231 */       throw new BuildException(""no organisation provided for ivy publish task: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 236 */     if (this.module == null) {
/* 237 */       throw new BuildException(""no module name provided for ivy publish task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 242 */     if (this.revision == null) {
/* 243 */       throw new BuildException(""no module revision provided for ivy publish task: It can either be set explicitely via the attribute 'revision' or via 'ivy.revision' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 248 */     if (this.artifactspattern.isEmpty()) {
/* 249 */       throw new BuildException(""no artifacts pattern: either provide it through parameter or through ivy.publish.src.artifacts.pattern property"");
/*     */     }
/*     */ 
/*     */     
/* 253 */     if (this.publishResolverName == null) {
/* 254 */       throw new BuildException(""no publish deliver name: please provide it through parameter 'resolver'"");
/*     */     }
/*     */     
/* 257 */     if (""working"".equals(this.revision)) {
/* 258 */       this.revision = Ivy.getWorkingRevision();
/*     */     }
/* 260 */     Date pubdate = getPubDate(this.pubdate, new Date());
/* 261 */     if (this.pubRevision == null) {
/* 262 */       if (this.revision.startsWith(""working@"")) {
/* 263 */         this.pubRevision = Ivy.DATE_FORMAT.format(pubdate);
/*     */       } else {
/* 265 */         this.pubRevision = this.revision;
/*     */       } 
/*     */     }
/* 268 */     if (this.status == null) {
/* 269 */       throw new BuildException(""no status provided: either provide it as parameter or through the ivy.status.default property"");
/*     */     }
/*     */ 
/*     */     
/* 273 */     ModuleRevisionId mrid = ModuleRevisionId.newInstance(this.organisation, this.module, this.revision);
/*     */     try {
/* 275 */       File ivyFile = getProject().resolveFile(IvyPatternHelper.substitute(this.srcivypattern, this.organisation, this.module, this.pubRevision, ""ivy"", ""ivy"", ""xml""));
/*     */       
/* 277 */       if (this.publishivy && (!ivyFile.exists() || this.forcedeliver)) {
/* 278 */         IvyDeliver deliver = new IvyDeliver();
/* 279 */         deliver.setSettingsRef(getSettingsRef());
/* 280 */         deliver.setTaskName(getTaskName());
/* 281 */         deliver.setProject(getProject());
/* 282 */         deliver.setDeliverpattern(getSrcivypattern());
/* 283 */         deliver.setDelivertarget(this.deliverTarget);
/* 284 */         deliver.setDeliveryList(this.deliveryList);
/* 285 */         deliver.setModule(getModule());
/* 286 */         deliver.setOrganisation(getOrganisation());
/* 287 */         deliver.setPubdate(Ivy.DATE_FORMAT.format(pubdate));
/* 288 */         deliver.setPubrevision(getPubrevision());
/* 289 */         deliver.setPubbranch(getPubbranch());
/* 290 */         deliver.setRevision(getRevision());
/* 291 */         deliver.setStatus(getStatus());
/* 292 */         deliver.setValidate(doValidate(settings));
/* 293 */         deliver.setReplacedynamicrev(isReplacedynamicrev());
/* 294 */         deliver.setConf(this.conf);
/*     */         
/* 296 */         deliver.execute();
/*     */       } 
/*     */       
/* 299 */       ivy.publish(mrid, this.artifactspattern, this.publishResolverName, (new PublishOptions()).setPubrevision(getPubrevision()).setPubbranch(getPubbranch()).setSrcIvyPattern(this.publishivy ? this.srcivypattern : null).setStatus(getStatus()).setPubdate(pubdate).setExtraArtifacts((Artifact[])this.artifacts.toArray((Object[])new Artifact[this.artifacts.size()])).setValidate(doValidate(settings)).setOverwrite(this.overwrite).setUpdate(this.update).setWarnOnMissing(this.warnonmissing).setHaltOnMissing(this.haltonmissing).setConfs(splitConfs(this.conf)));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 314 */     catch (Exception e) {
/* 315 */       if (e instanceof BuildException) {
/* 316 */         throw (BuildException)e;
/*     */       }
/* 318 */       throw new BuildException(""impossible to publish artifacts for "" + mrid + "": "" + e, e);
/*     */     } 
/*     */   }
/*     */   
/*     */   public PublishArtifact createArtifact() {
/* 323 */     PublishArtifact art = new PublishArtifact();
/* 324 */     this.artifacts.add(art);
/* 325 */     return art;
/*     */   }
/*     */ 
/*     */   
/* 329 */   public boolean isPublishivy() { return this.publishivy; }
/*     */ 
/*     */ 
/*     */   
/* 333 */   public void setPublishivy(boolean publishivy) { this.publishivy = publishivy; }
/*     */ 
/*     */ 
/*     */   
/* 337 */   public boolean isWarnonmissing() { return this.warnonmissing; }
/*     */ 
/*     */ 
/*     */   
/* 341 */   public void setWarnonmissing(boolean warnonmissing) { this.warnonmissing = warnonmissing; }
/*     */ 
/*     */ 
/*     */   
/* 345 */   public boolean isHaltonmissing() { return this.haltonmissing; }
/*     */ 
/*     */ 
/*     */   
/* 349 */   public void setHaltonmissing(boolean haltonmissing) { this.haltonmissing = haltonmissing; }
/*     */ 
/*     */ 
/*     */   
/* 353 */   public boolean isOverwrite() { return this.overwrite; }
/*     */ 
/*     */ 
/*     */   
/* 357 */   public void setOverwrite(boolean overwrite) { this.overwrite = overwrite; }
/*     */ 
/*     */ 
/*     */   
/* 361 */   public void setForcedeliver(boolean b) { this.forcedeliver = b; }
/*     */ 
/*     */ 
/*     */   
/* 365 */   public boolean isForcedeliver() { return this.forcedeliver; }
/*     */ 
/*     */ 
/*     */   
/* 369 */   public boolean isUpdate() { return this.update; }
/*     */ 
/*     */ 
/*     */   
/* 373 */   public void setUpdate(boolean update) { this.update = update; }
/*     */ 
/*     */   
/*     */   public class PublishArtifact
/*     */     implements Artifact
/*     */   {
/*     */     private String ext;
/*     */     private String name;
/*     */     private String type;
/*     */     private final IvyPublish this$0;
/*     */     
/* 384 */     public String[] getConfigurations() { return null; }
/*     */ 
/*     */ 
/*     */     
/* 388 */     public String getExt() { return (this.ext == null) ? this.type : this.ext; }
/*     */ 
/*     */ 
/*     */     
/* 392 */     public ArtifactRevisionId getId() { return null; }
/*     */ 
/*     */ 
/*     */     
/* 396 */     public ModuleRevisionId getModuleRevisionId() { return null; }
/*     */ 
/*     */ 
/*     */     
/* 400 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 404 */     public Date getPublicationDate() { return null; }
/*     */ 
/*     */ 
/*     */     
/* 408 */     public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */     
/* 412 */     public URL getUrl() { return null; }
/*     */ 
/*     */ 
/*     */     
/* 416 */     public void setExt(String ext) { this.ext = ext; }
/*     */ 
/*     */ 
/*     */     
/* 420 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 424 */     public void setType(String type) { this.type = type; }
/*     */ 
/*     */ 
/*     */     
/* 428 */     public String getAttribute(String attName) { return null; }
/*     */ 
/*     */ 
/*     */     
/* 432 */     public Map getAttributes() { return new HashMap(); }
/*     */ 
/*     */ 
/*     */     
/* 436 */     public String getExtraAttribute(String attName) { return null; }
/*     */ 
/*     */ 
/*     */     
/* 440 */     public Map getExtraAttributes() { return new HashMap(); }
/*     */ 
/*     */ 
/*     */     
/* 444 */     public Map getQualifiedExtraAttributes() { return new HashMap(); }
/*     */ 
/*     */ 
/*     */     
/* 448 */     public String getStandardAttribute(String attName) { return null; }
/*     */ 
/*     */ 
/*     */     
/* 452 */     public Map getStandardAttributes() { return new HashMap(); }
/*     */ 
/*     */ 
/*     */     
/* 456 */     public boolean isMetadata() { return false; }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class ArtifactsPattern
/*     */   {
/*     */     private String pattern;
/*     */     
/* 464 */     public String getPattern() { return this.pattern; }
/*     */ 
/*     */ 
/*     */     
/* 468 */     public void setPattern(String pattern) { this.pattern = pattern; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyPublish.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyReport,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.Transformer;
/*     */ import javax.xml.transform.TransformerConfigurationException;
/*     */ import javax.xml.transform.TransformerFactory;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.report.XmlReportOutputter;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.XSLTProcess;
/*     */ import org.apache.tools.ant.util.JAXPUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyReport
/*     */   extends IvyTask
/*     */ {
/*     */   private File todir;
/*     */   private String organisation;
/*     */   private String module;
/*     */   private String conf;
/*     */   private boolean graph = true;
/*     */   private boolean dot = false;
/*     */   private boolean xml = false;
/*     */   private boolean xsl = true;
/*     */   private File xslFile;
/*     */   private String outputpattern;
/*  80 */   private String xslext = ""html"";
/*     */   
/*  82 */   private List params = new ArrayList();
/*     */   
/*     */   private String resolveId;
/*     */   
/*     */   private ModuleRevisionId mRevId;
/*     */ 
/*     */   
/*  89 */   public File getTodir() { return this.todir; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setTodir(File todir) { this.todir = todir; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */ 
/*     */   
/* 109 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 117 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public boolean isGraph() { return this.graph; }
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setGraph(boolean graph) { this.graph = graph; }
/*     */ 
/*     */ 
/*     */   
/* 133 */   public File getXslfile() { return this.xslFile; }
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setXslfile(File xslFile) { this.xslFile = xslFile; }
/*     */ 
/*     */ 
/*     */   
/* 141 */   public String getOutputpattern() { return this.outputpattern; }
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setOutputpattern(String outputpattern) { this.outputpattern = outputpattern; }
/*     */ 
/*     */ 
/*     */   
/* 149 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setResolveId(String resolveId) { this.resolveId = resolveId; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 157 */     Ivy ivy = getIvyInstance();
/* 158 */     IvySettings settings = ivy.getSettings();
/*     */     
/* 160 */     this.conf = getProperty(this.conf, settings, ""ivy.resolved.configurations"", this.resolveId);
/* 161 */     if (""*"".equals(this.conf)) {
/* 162 */       this.conf = getProperty(settings, ""ivy.resolved.configurations"", this.resolveId);
/*     */     }
/* 164 */     if (this.conf == null) {
/* 165 */       throw new BuildException(""no conf provided for ivy report task: It can either be set explicitely via the attribute 'conf' orvia 'ivy.resolved.configurations' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 170 */     if (this.todir == null) {
/* 171 */       String t = getProperty(settings, ""ivy.report.todir"");
/* 172 */       if (t != null) {
/* 173 */         this.todir = getProject().resolveFile(t);
/*     */       }
/*     */     } 
/* 176 */     if (this.todir != null && this.todir.exists()) {
/* 177 */       this.todir.mkdirs();
/*     */     }
/* 179 */     this.outputpattern = getProperty(this.outputpattern, settings, ""ivy.report.output.pattern"");
/* 180 */     if (this.outputpattern == null) {
/* 181 */       this.outputpattern = ""[organisation]-[module]-[conf].[ext]"";
/*     */     }
/*     */     
/* 184 */     if (this.todir != null && this.todir.exists() && !this.todir.isDirectory()) {
/* 185 */       throw new BuildException(""destination directory should be a directory !"");
/*     */     }
/*     */     
/* 188 */     if (this.resolveId == null) {
/* 189 */       this.organisation = getProperty(this.organisation, settings, ""ivy.organisation"", this.resolveId);
/* 190 */       this.module = getProperty(this.module, settings, ""ivy.module"", this.resolveId);
/*     */       
/* 192 */       if (this.organisation == null) {
/* 193 */         throw new BuildException(""no organisation provided for ivy report task: It can either be set explicitely via the attribute 'organisation' or via 'ivy.organisation' property or a prior call to <resolve/>"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 198 */       if (this.module == null) {
/* 199 */         throw new BuildException(""no module name provided for ivy report task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 205 */       this.resolveId = ResolveOptions.getDefaultResolveId(new ModuleId(this.organisation, this.module));
/*     */     } 
/*     */     
/*     */     try {
/* 209 */       String[] confs = splitConfs(this.conf);
/* 210 */       if (this.xsl) {
/* 211 */         genreport(confs);
/*     */       }
/* 213 */       if (this.xml) {
/* 214 */         genxml(confs);
/*     */       }
/* 216 */       if (this.graph) {
/* 217 */         genStyled(confs, getStylePath(""ivy-report-graph.xsl""), ""graphml"");
/*     */       }
/*     */       
/* 220 */       if (this.dot) {
/* 221 */         genStyled(confs, getStylePath(""ivy-report-dot.xsl""), ""dot"");
/*     */       }
/*     */     }
/* 224 */     catch (IOException e) {
/* 225 */       throw new BuildException(""impossible to generate report: "" + e, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void genxml(String[] confs) throws IOException {
/* 231 */     ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/* 232 */     for (int i = 0; i < confs.length; i++) {
/* 233 */       File out, xml = cacheMgr.getConfigurationResolveReportInCache(this.resolveId, confs[i]);
/*     */ 
/*     */       
/* 236 */       if (this.todir != null) {
/* 237 */         out = new File(this.todir, getOutputPattern(confs[i], ""xml""));
/*     */       } else {
/* 239 */         out = getProject().resolveFile(getOutputPattern(confs[i], ""xml""));
/*     */       } 
/*     */       
/* 242 */       FileUtil.copy(xml, out, null);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void genreport(String[] confs) throws IOException {
/* 248 */     genStyled(confs, getReportStylePath(), this.xslext);
/*     */ 
/*     */     
/* 251 */     if (this.xslFile == null) {
/*     */       File css;
/* 253 */       if (this.todir != null) {
/* 254 */         css = new File(this.todir, ""ivy-report.css"");
/*     */       } else {
/* 256 */         css = getProject().resolveFile(""ivy-report.css"");
/*     */       } 
/*     */       
/* 259 */       if (!css.exists()) {
/* 260 */         Message.debug(""copying report css to "" + css.getAbsolutePath());
/* 261 */         FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""ivy-report.css""), css, null);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private File getReportStylePath() throws IOException {
/* 268 */     if (this.xslFile != null) {
/* 269 */       return this.xslFile;
/*     */     }
/*     */ 
/*     */     
/* 273 */     ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/* 274 */     File style = new File(cacheMgr.getResolutionCacheRoot(), ""ivy-report.xsl"");
/* 275 */     FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""ivy-report.xsl""), style, null);
/* 276 */     return style;
/*     */   }
/*     */   
/*     */   private String getOutputPattern(String conf, String ext) {
/* 280 */     if (this.mRevId == null) {
/* 281 */       ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/*     */       
/* 283 */       XmlReportParser parser = new XmlReportParser();
/* 284 */       File reportFile = cacheMgr.getConfigurationResolveReportInCache(this.resolveId, conf);
/*     */       
/*     */       try {
/* 287 */         parser.parse(reportFile);
/* 288 */       } catch (ParseException e) {
/* 289 */         throw new BuildException(""Error occurred while parsing reportfile '"" + reportFile.getAbsolutePath() + ""'"", e);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 295 */       this.mRevId = parser.getResolvedModule();
/*     */     } 
/*     */     
/* 298 */     return IvyPatternHelper.substitute(this.outputpattern, this.mRevId.getOrganisation(), this.mRevId.getName(), this.mRevId.getRevision(), """", """", ext, conf, this.mRevId.getAttributes());
/*     */   }
/*     */ 
/*     */   
/*     */   private void genStyled(String[] confs, File style, String ext) throws IOException {
/*     */     File out;
/* 304 */     ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/*     */ 
/*     */ 
/*     */     
/* 308 */     if (this.todir != null) {
/* 309 */       out = this.todir;
/*     */     } else {
/* 311 */       out = getProject().getBaseDir();
/*     */     } 
/*     */     
/* 314 */     InputStream xsltStream = null;
/*     */     
/*     */     try {
/* 317 */       xsltStream = new BufferedInputStream(new FileInputStream(style));
/* 318 */       Source xsltSource = new StreamSource(xsltStream, JAXPUtils.getSystemId(style));
/*     */ 
/*     */       
/* 321 */       TransformerFactory tFactory = TransformerFactory.newInstance();
/* 322 */       Transformer transformer = tFactory.newTransformer(xsltSource);
/*     */ 
/*     */       
/* 325 */       transformer.setParameter(""confs"", this.conf);
/* 326 */       transformer.setParameter(""extension"", this.xslext);
/*     */ 
/*     */       
/* 329 */       for (Iterator it = this.params.iterator(); it.hasNext(); ) {
/* 330 */         XSLTProcess.Param param = it.next();
/* 331 */         transformer.setParameter(param.getName(), param.getExpression());
/*     */       } 
/*     */ 
/*     */       
/* 335 */       for (int i = 0; i < confs.length; i++) {
/* 336 */         OutputStream outStream; File reportFile = cacheMgr.getConfigurationResolveReportInCache(this.resolveId, confs[i]);
/*     */         
/* 338 */         File outFile = new File(out, getOutputPattern(confs[i], ext));
/*     */ 
/*     */         
/* 341 */         log(""Processing "" + reportFile + "" to "" + outFile);
/*     */ 
/*     */         
/* 344 */         File outFileDir = outFile.getParentFile();
/* 345 */         if (!outFileDir.exists() && 
/* 346 */           !outFileDir.mkdirs()) {
/* 347 */           throw new BuildException(""Unable to create directory: "" + outFileDir.getAbsolutePath());
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 352 */         InputStream inStream = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 379 */     catch (TransformerConfigurationException e) {
/* 380 */       throw new BuildException(e);
/*     */     } finally {
/* 382 */       if (xsltStream != null) {
/*     */         try {
/* 384 */           xsltStream.close();
/* 385 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File getStylePath(String styleResourceName) throws IOException {
/* 395 */     ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/* 396 */     File style = new File(cacheMgr.getResolutionCacheRoot(), styleResourceName);
/* 397 */     FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(styleResourceName), style, null);
/* 398 */     return style;
/*     */   }
/*     */ 
/*     */   
/* 402 */   public boolean isXml() { return this.xml; }
/*     */ 
/*     */ 
/*     */   
/* 406 */   public void setXml(boolean xml) { this.xml = xml; }
/*     */ 
/*     */ 
/*     */   
/* 410 */   public boolean isXsl() { return this.xsl; }
/*     */ 
/*     */ 
/*     */   
/* 414 */   public void setXsl(boolean xsl) { this.xsl = xsl; }
/*     */ 
/*     */ 
/*     */   
/* 418 */   public String getXslext() { return this.xslext; }
/*     */ 
/*     */ 
/*     */   
/* 422 */   public void setXslext(String xslext) { this.xslext = xslext; }
/*     */ 
/*     */   
/*     */   public XSLTProcess.Param createParam() {
/* 426 */     XSLTProcess.Param result = new XSLTProcess.Param();
/* 427 */     this.params.add(result);
/* 428 */     return result;
/*     */   }
/*     */ 
/*     */   
/* 432 */   public boolean isDot() { return this.dot; }
/*     */ 
/*     */ 
/*     */   
/* 436 */   public void setDot(boolean dot) { this.dot = dot; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyRepositoryReport,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.report.XmlReportOutputter;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.XSLTProcess;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyRepositoryReport
/*     */   extends IvyTask
/*     */ {
/*  48 */   private String organisation = ""*"";
/*     */   
/*     */   private String module;
/*     */   
/*     */   private String branch;
/*     */   
/*  54 */   private String revision = ""latest.integration"";
/*     */   
/*  56 */   private String matcher = ""exactOrRegexp"";
/*     */   
/*     */   private File todir;
/*     */   
/*     */   private boolean graph = false;
/*     */   
/*     */   private boolean dot = false;
/*     */   
/*     */   private boolean xml = true;
/*     */   
/*     */   private boolean xsl = false;
/*     */   
/*     */   private String xslFile;
/*     */   
/*  70 */   private String outputname = ""ivy-repository-report"";
/*     */   
/*  72 */   private String xslext = ""html"";
/*     */   
/*  74 */   private List params = new ArrayList();
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  77 */     Ivy ivy = getIvyInstance();
/*  78 */     IvySettings settings = ivy.getSettings();
/*  79 */     if (this.xsl && this.xslFile == null) {
/*  80 */       throw new BuildException(""xsl file is mandatory when using xsl generation"");
/*     */     }
/*  82 */     if (this.module == null && ""exact"".equals(this.matcher)) {
/*  83 */       throw new BuildException(""no module name provided for ivy repository graph task: It can either be set explicitely via the attribute 'module' or via 'ivy.module' property or a prior call to <resolve/>"");
/*     */     }
/*     */ 
/*     */     
/*  87 */     if (this.module == null && !""exact"".equals(this.matcher)) {
/*  88 */       this.module = ""*"";
/*     */     }
/*  90 */     ModuleRevisionId mrid = ModuleRevisionId.newInstance(this.organisation, this.module, this.revision);
/*     */     
/*     */     try {
/*  93 */       ModuleRevisionId criteria = null;
/*     */       
/*  95 */       if (this.revision == null || settings.getVersionMatcher().isDynamic(mrid)) {
/*  96 */         criteria = new ModuleRevisionId(new ModuleId(this.organisation, this.module), this.branch, ""*"");
/*     */       } else {
/*  98 */         criteria = new ModuleRevisionId(new ModuleId(this.organisation, this.module), this.branch, this.revision);
/*     */       } 
/*     */ 
/*     */       
/* 102 */       ModuleRevisionId[] mrids = ivy.listModules(criteria, settings.getMatcher(this.matcher));
/*     */ 
/*     */       
/* 105 */       Set modules = new HashSet();
/* 106 */       for (int i = 0; i < mrids.length; i++) {
/* 107 */         modules.add(ModuleRevisionId.newInstance(mrids[i], this.revision));
/*     */       }
/*     */       
/* 110 */       mrids = modules.toArray(new ModuleRevisionId[modules.size()]);
/* 111 */       DefaultModuleDescriptor defaultModuleDescriptor = DefaultModuleDescriptor.newCallerInstance(mrids, true, false);
/* 112 */       String resolveId = ResolveOptions.getDefaultResolveId((ModuleDescriptor)defaultModuleDescriptor);
/* 113 */       ResolveReport report = ivy.resolve((ModuleDescriptor)defaultModuleDescriptor, (new ResolveOptions()).setResolveId(resolveId).setValidate(doValidate(settings)));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 118 */       ResolutionCacheManager cacheMgr = getIvyInstance().getResolutionCacheManager();
/* 119 */       (new XmlReportOutputter()).output(report, cacheMgr, new ResolveOptions());
/* 120 */       if (this.graph) {
/* 121 */         gengraph(cacheMgr, defaultModuleDescriptor.getModuleRevisionId().getOrganisation(), defaultModuleDescriptor.getModuleRevisionId().getName());
/*     */       }
/*     */       
/* 124 */       if (this.dot) {
/* 125 */         gendot(cacheMgr, defaultModuleDescriptor.getModuleRevisionId().getOrganisation(), defaultModuleDescriptor.getModuleRevisionId().getName());
/*     */       }
/*     */       
/* 128 */       if (this.xml)
/*     */       {
/* 130 */         FileUtil.copy(cacheMgr.getConfigurationResolveReportInCache(resolveId, ""default""), new File(getTodir(), this.outputname + "".xml""), null);
/*     */       }
/*     */       
/* 133 */       if (this.xsl) {
/* 134 */         genreport(cacheMgr, defaultModuleDescriptor.getModuleRevisionId().getOrganisation(), defaultModuleDescriptor.getModuleRevisionId().getName());
/*     */       }
/*     */     }
/* 137 */     catch (Exception e) {
/* 138 */       throw new BuildException(""impossible to generate graph for "" + mrid + "": "" + e, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void genreport(ResolutionCacheManager cache, String organisation, String module) throws IOException {
/* 145 */     XSLTProcess xslt = new XSLTProcess();
/* 146 */     xslt.setTaskName(getTaskName());
/* 147 */     xslt.setProject(getProject());
/* 148 */     xslt.init();
/*     */     
/* 150 */     String resolveId = ResolveOptions.getDefaultResolveId(new ModuleId(organisation, module));
/* 151 */     xslt.setIn(cache.getConfigurationResolveReportInCache(resolveId, ""default""));
/* 152 */     xslt.setOut(new File(getTodir(), this.outputname + ""."" + this.xslext));
/*     */     
/* 154 */     xslt.setStyle(this.xslFile);
/*     */     
/* 156 */     XSLTProcess.Param param = xslt.createParam();
/* 157 */     param.setName(""extension"");
/* 158 */     param.setExpression(this.xslext);
/*     */ 
/*     */     
/* 161 */     for (Iterator it = this.params.iterator(); it.hasNext(); ) {
/* 162 */       param = it.next();
/* 163 */       XSLTProcess.Param realParam = xslt.createParam();
/* 164 */       realParam.setName(param.getName());
/* 165 */       realParam.setExpression(param.getExpression());
/*     */     } 
/*     */     
/* 168 */     xslt.execute();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 173 */   private void gengraph(ResolutionCacheManager cache, String organisation, String module) throws IOException { gen(cache, organisation, module, getGraphStylePath(cache.getResolutionCacheRoot()), ""graphml""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getGraphStylePath(File cache) throws IOException {
/* 180 */     File style = new File(cache, ""ivy-report-graph-all.xsl"");
/* 181 */     FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""ivy-report-graph-all.xsl""), style, null);
/*     */     
/* 183 */     return style.getAbsolutePath();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 188 */   private void gendot(ResolutionCacheManager cache, String organisation, String module) throws IOException { gen(cache, organisation, module, getDotStylePath(cache.getResolutionCacheRoot()), ""dot""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getDotStylePath(File cache) throws IOException {
/* 194 */     File style = new File(cache, ""ivy-report-dot-all.xsl"");
/* 195 */     FileUtil.copy(XmlReportOutputter.class.getResourceAsStream(""ivy-report-dot-all.xsl""), style, null);
/*     */     
/* 197 */     return style.getAbsolutePath();
/*     */   }
/*     */ 
/*     */   
/*     */   private void gen(ResolutionCacheManager cache, String organisation, String module, String style, String ext) throws IOException {
/* 202 */     XSLTProcess xslt = new XSLTProcess();
/* 203 */     xslt.setTaskName(getTaskName());
/* 204 */     xslt.setProject(getProject());
/* 205 */     xslt.init();
/*     */     
/* 207 */     String resolveId = ResolveOptions.getDefaultResolveId(new ModuleId(organisation, module));
/* 208 */     xslt.setIn(cache.getConfigurationResolveReportInCache(resolveId, ""default""));
/* 209 */     xslt.setOut(new File(getTodir(), this.outputname + ""."" + ext));
/* 210 */     xslt.setBasedir(cache.getResolutionCacheRoot());
/* 211 */     xslt.setStyle(style);
/* 212 */     xslt.execute();
/*     */   }
/*     */   
/*     */   public File getTodir() {
/* 216 */     if (this.todir == null && getProject() != null) {
/* 217 */       return getProject().getBaseDir();
/*     */     }
/* 219 */     return this.todir;
/*     */   }
/*     */ 
/*     */   
/* 223 */   public void setTodir(File todir) { this.todir = todir; }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public boolean isGraph() { return this.graph; }
/*     */ 
/*     */ 
/*     */   
/* 231 */   public void setGraph(boolean graph) { this.graph = graph; }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public String getXslfile() { return this.xslFile; }
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setXslfile(String xslFile) { this.xslFile = xslFile; }
/*     */ 
/*     */ 
/*     */   
/* 243 */   public boolean isXml() { return this.xml; }
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setXml(boolean xml) { this.xml = xml; }
/*     */ 
/*     */ 
/*     */   
/* 251 */   public boolean isXsl() { return this.xsl; }
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setXsl(boolean xsl) { this.xsl = xsl; }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public String getXslext() { return this.xslext; }
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setXslext(String xslext) { this.xslext = xslext; }
/*     */ 
/*     */   
/*     */   public XSLTProcess.Param createParam() {
/* 267 */     XSLTProcess.Param result = new XSLTProcess.Param();
/* 268 */     this.params.add(result);
/* 269 */     return result;
/*     */   }
/*     */ 
/*     */   
/* 273 */   public String getOutputname() { return this.outputname; }
/*     */ 
/*     */ 
/*     */   
/* 277 */   public void setOutputname(String outputpattern) { this.outputname = outputpattern; }
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 285 */   public String getMatcher() { return this.matcher; }
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setMatcher(String matcher) { this.matcher = matcher; }
/*     */ 
/*     */ 
/*     */   
/* 293 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 301 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 305 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 309 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 317 */   public String getBranch() { return this.branch; }
/*     */ 
/*     */ 
/*     */   
/* 321 */   public void setBranch(String branch) { this.branch = branch; }
/*     */ 
/*     */ 
/*     */   
/* 325 */   public boolean isDot() { return this.dot; }
/*     */ 
/*     */ 
/*     */   
/* 329 */   public void setDot(boolean dot) { this.dot = dot; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyRepositoryReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyResolve,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.MalformedURLException;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolveProcessException;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyResolve
/*     */   extends IvyTask
/*     */ {
/*  43 */   private File file = null;
/*     */   
/*  45 */   private String conf = null;
/*     */   
/*  47 */   private String organisation = null;
/*     */   
/*  49 */   private String module = null;
/*     */   
/*  51 */   private String revision = null;
/*     */   
/*  53 */   private String pubdate = null;
/*     */   
/*     */   private boolean inline = false;
/*     */   
/*     */   private boolean haltOnFailure = true;
/*     */   
/*     */   private boolean useCacheOnly = false;
/*     */   
/*  61 */   private String type = null;
/*     */   
/*     */   private boolean transitive = true;
/*     */   
/*     */   private boolean refresh = false;
/*     */   
/*     */   private boolean changing = false;
/*     */   
/*  69 */   private Boolean keep = null;
/*     */   
/*  71 */   private String failureProperty = null;
/*     */   
/*     */   private boolean useOrigin = false;
/*     */   
/*  75 */   private String resolveMode = null;
/*     */   
/*  77 */   private String resolveId = null;
/*     */   
/*  79 */   private String log = ""default"";
/*     */   
/*     */   private boolean checkIfChanged = true;
/*     */ 
/*     */   
/*  84 */   public boolean isUseOrigin() { return this.useOrigin; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setUseOrigin(boolean useOrigin) { this.useOrigin = useOrigin; }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public String getDate() { return this.pubdate; }
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setDate(String pubdate) { this.pubdate = pubdate; }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setCache(File cache) { cacheAttributeNotSupported(); }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public boolean isHaltonfailure() { return this.haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setHaltonfailure(boolean haltOnFailure) { this.haltOnFailure = haltOnFailure; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setShowprogress(boolean show) { Message.setShowProgress(show); }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public boolean isUseCacheOnly() { return this.useCacheOnly; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setUseCacheOnly(boolean useCacheOnly) { this.useCacheOnly = useCacheOnly; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void setType(String type) { this.type = type; }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public boolean isRefresh() { return this.refresh; }
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setRefresh(boolean refresh) { this.refresh = refresh; }
/*     */ 
/*     */ 
/*     */   
/* 164 */   public String getLog() { return this.log; }
/*     */ 
/*     */ 
/*     */   
/* 168 */   public void setLog(String log) { this.log = log; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFailurePropery(String failureProperty) {
/* 175 */     log(""The 'failurepropery' attribute is deprecated. Please use the 'failureproperty' attribute instead"", 1);
/*     */     
/* 177 */     setFailureProperty(failureProperty);
/*     */   }
/*     */ 
/*     */   
/* 181 */   public void setFailureProperty(String failureProperty) { this.failureProperty = failureProperty; }
/*     */ 
/*     */ 
/*     */   
/* 185 */   public String getFailureProperty() { return this.failureProperty; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/* 189 */     Ivy ivy = getIvyInstance();
/* 190 */     IvySettings settings = ivy.getSettings(); try {
/*     */       ResolveReport report;
/* 192 */       this.conf = getProperty(this.conf, settings, ""ivy.configurations"");
/* 193 */       this.type = getProperty(this.type, settings, ""ivy.resolve.default.type.filter"");
/* 194 */       String[] confs = splitConfs(this.conf);
/*     */ 
/*     */       
/* 197 */       if (isInline()) {
/* 198 */         if (this.organisation == null) {
/* 199 */           throw new BuildException(""'organisation' is required when using inline mode"");
/*     */         }
/* 201 */         if (this.module == null) {
/* 202 */           throw new BuildException(""'module' is required when using inline mode"");
/*     */         }
/* 204 */         if (this.file != null) {
/* 205 */           throw new BuildException(""'file' not allowed when using inline mode"");
/*     */         }
/* 207 */         if (!getAllowedLogOptions().contains(this.log)) {
/* 208 */           throw new BuildException(""invalid option for 'log': "" + this.log + "". Available options are "" + getAllowedLogOptions());
/*     */         }
/*     */         
/* 211 */         for (int i = 0; i < confs.length; i++) {
/* 212 */           if (""*"".equals(confs[i])) {
/* 213 */             confs[i] = ""*(public)"";
/*     */           }
/*     */         } 
/* 216 */         if (this.revision == null) {
/* 217 */           this.revision = ""latest.integration"";
/*     */         }
/* 219 */         report = ivy.resolve(ModuleRevisionId.newInstance(this.organisation, this.module, this.revision), getResolveOptions(ivy, confs, settings), this.changing);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 224 */         if (this.organisation != null) {
/* 225 */           throw new BuildException(""'organisation' not allowed when not using 'org' attribute"");
/*     */         }
/*     */         
/* 228 */         if (this.module != null) {
/* 229 */           throw new BuildException(""'module' not allowed when not using 'org' attribute"");
/*     */         }
/* 231 */         if (this.file == null) {
/* 232 */           this.file = getProject().resolveFile(getProperty(settings, ""ivy.dep.file""));
/*     */         }
/* 234 */         report = ivy.resolve(this.file.toURI().toURL(), getResolveOptions(ivy, confs, settings));
/*     */       } 
/* 236 */       if (report.hasError()) {
/* 237 */         if (this.failureProperty != null) {
/* 238 */           getProject().setProperty(this.failureProperty, ""true"");
/*     */         }
/* 240 */         if (isHaltonfailure()) {
/* 241 */           throw new BuildException(""resolve failed - see output for details"");
/*     */         }
/*     */       } 
/* 244 */       setResolved(report, this.resolveId, isKeep());
/* 245 */       confs = report.getConfigurations();
/*     */       
/* 247 */       if (isKeep()) {
/* 248 */         ModuleDescriptor md = report.getModuleDescriptor();
/*     */ 
/*     */ 
/*     */         
/* 252 */         getProject().setProperty(""ivy.organisation"", md.getModuleRevisionId().getOrganisation());
/*     */         
/* 254 */         settings.setVariable(""ivy.organisation"", md.getModuleRevisionId().getOrganisation());
/*     */         
/* 256 */         getProject().setProperty(""ivy.module"", md.getModuleRevisionId().getName());
/* 257 */         settings.setVariable(""ivy.module"", md.getModuleRevisionId().getName());
/* 258 */         getProject().setProperty(""ivy.revision"", md.getResolvedModuleRevisionId().getRevision());
/*     */         
/* 260 */         settings.setVariable(""ivy.revision"", md.getResolvedModuleRevisionId().getRevision());
/*     */         
/* 262 */         Boolean hasChanged = null;
/* 263 */         if (getCheckIfChanged()) {
/* 264 */           hasChanged = Boolean.valueOf(report.hasChanged());
/* 265 */           getProject().setProperty(""ivy.deps.changed"", hasChanged.toString());
/* 266 */           settings.setVariable(""ivy.deps.changed"", hasChanged.toString());
/*     */         } 
/* 268 */         getProject().setProperty(""ivy.resolved.configurations"", mergeConfs(confs));
/* 269 */         settings.setVariable(""ivy.resolved.configurations"", mergeConfs(confs));
/* 270 */         if (this.file != null) {
/* 271 */           getProject().setProperty(""ivy.resolved.file"", this.file.getAbsolutePath());
/* 272 */           settings.setVariable(""ivy.resolved.file"", this.file.getAbsolutePath());
/*     */         } 
/* 274 */         if (this.resolveId != null) {
/* 275 */           getProject().setProperty(""ivy.organisation."" + this.resolveId, md.getModuleRevisionId().getOrganisation());
/*     */           
/* 277 */           settings.setVariable(""ivy.organisation."" + this.resolveId, md.getModuleRevisionId().getOrganisation());
/*     */           
/* 279 */           getProject().setProperty(""ivy.module."" + this.resolveId, md.getModuleRevisionId().getName());
/*     */           
/* 281 */           settings.setVariable(""ivy.module."" + this.resolveId, md.getModuleRevisionId().getName());
/*     */           
/* 283 */           getProject().setProperty(""ivy.revision."" + this.resolveId, md.getResolvedModuleRevisionId().getRevision());
/*     */           
/* 285 */           settings.setVariable(""ivy.revision."" + this.resolveId, md.getResolvedModuleRevisionId().getRevision());
/*     */           
/* 287 */           if (getCheckIfChanged()) {
/*     */             
/* 289 */             getProject().setProperty(""ivy.deps.changed."" + this.resolveId, hasChanged.toString());
/*     */             
/* 291 */             settings.setVariable(""ivy.deps.changed."" + this.resolveId, hasChanged.toString());
/*     */           } 
/*     */           
/* 294 */           getProject().setProperty(""ivy.resolved.configurations."" + this.resolveId, mergeConfs(confs));
/*     */           
/* 296 */           settings.setVariable(""ivy.resolved.configurations."" + this.resolveId, mergeConfs(confs));
/*     */           
/* 298 */           if (this.file != null) {
/* 299 */             getProject().setProperty(""ivy.resolved.file."" + this.resolveId, this.file.getAbsolutePath());
/*     */             
/* 301 */             settings.setVariable(""ivy.resolved.file."" + this.resolveId, this.file.getAbsolutePath());
/*     */           }
/*     */         
/*     */         } 
/*     */       } 
/* 306 */     } catch (MalformedURLException e) {
/* 307 */       throw new BuildException(""unable to convert given ivy file to url: "" + this.file + "": "" + e, e);
/*     */     }
/* 309 */     catch (ParseException e) {
/* 310 */       log(e.getMessage(), 0);
/* 311 */       throw new BuildException(""syntax errors in ivy file: "" + e, e);
/* 312 */     } catch (ResolveProcessException e) {
/* 313 */       throw new BuildException(""impossible to resolve dependencies:\n\t"" + e.getMessage(), (Throwable)e);
/* 314 */     } catch (Exception e) {
/* 315 */       throw new BuildException(""impossible to resolve dependencies:\n\t"" + e, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 320 */   protected Collection getAllowedLogOptions() { return Arrays.asList(new String[] { ""default"", ""download-only"", ""quiet"" }); }
/*     */ 
/*     */ 
/*     */   
/*     */   private ResolveOptions getResolveOptions(Ivy ivy, String[] confs, IvySettings settings) {
/* 325 */     if (this.useOrigin) {
/* 326 */       settings.useDeprecatedUseOrigin();
/*     */     }
/* 328 */     return ((ResolveOptions)(new ResolveOptions()).setLog(this.log)).setConfs(confs).setValidate(doValidate(settings)).setArtifactFilter(FilterHelper.getArtifactTypeFilter(this.type)).setRevision(this.revision).setDate(getPubDate(this.pubdate, null)).setUseCacheOnly(this.useCacheOnly).setRefresh(this.refresh).setTransitive(this.transitive).setResolveMode(this.resolveMode).setResolveId(this.resolveId).setCheckIfChanged(this.checkIfChanged);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   public String getModule() { return this.module; }
/*     */ 
/*     */ 
/*     */   
/* 348 */   public void setModule(String module) { this.module = module; }
/*     */ 
/*     */ 
/*     */   
/* 352 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/* 356 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*     */ 
/*     */ 
/*     */   
/* 360 */   public boolean isTransitive() { return this.transitive; }
/*     */ 
/*     */ 
/*     */   
/* 364 */   public void setTransitive(boolean transitive) { this.transitive = transitive; }
/*     */ 
/*     */ 
/*     */   
/* 368 */   public boolean isChanging() { return this.changing; }
/*     */ 
/*     */ 
/*     */   
/* 372 */   public void setChanging(boolean changing) { this.changing = changing; }
/*     */ 
/*     */ 
/*     */   
/* 376 */   public boolean isKeep() { return (this.keep == null) ? ((this.organisation == null)) : this.keep.booleanValue(); }
/*     */ 
/*     */ 
/*     */   
/* 380 */   public void setKeep(boolean keep) { this.keep = Boolean.valueOf(keep); }
/*     */ 
/*     */ 
/*     */   
/* 384 */   public boolean isInline() { return this.inline; }
/*     */ 
/*     */ 
/*     */   
/* 388 */   public void setInline(boolean inline) { this.inline = inline; }
/*     */ 
/*     */ 
/*     */   
/* 392 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 396 */   public void setResolveId(String resolveId) { this.resolveId = resolveId; }
/*     */ 
/*     */ 
/*     */   
/* 400 */   public String getResolveMode() { return this.resolveMode; }
/*     */ 
/*     */ 
/*     */   
/* 404 */   public void setResolveMode(String resolveMode) { this.resolveMode = resolveMode; }
/*     */ 
/*     */ 
/*     */   
/* 408 */   public boolean getCheckIfChanged() { return this.checkIfChanged; }
/*     */ 
/*     */ 
/*     */   
/* 412 */   public void setCheckIfChanged(boolean checkIfChanged) { this.checkIfChanged = checkIfChanged; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyResolve.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyRetrieve,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyRetrieve
/*     */   extends IvyPostResolveTask
/*     */ {
/*     */   private String pattern;
/*  34 */   private String ivypattern = null;
/*     */   
/*     */   private boolean sync = false;
/*     */   
/*     */   private boolean symlink = false;
/*     */ 
/*     */   
/*  41 */   public String getPattern() { return this.pattern; }
/*     */ 
/*     */ 
/*     */   
/*  45 */   public void setPattern(String pattern) { this.pattern = pattern; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  49 */     prepareAndCheck();
/*     */     
/*  51 */     if (!getAllowedLogOptions().contains(getLog())) {
/*  52 */       throw new BuildException(""invalid option for 'log': "" + getLog() + "". Available options are "" + getAllowedLogOptions());
/*     */     }
/*     */ 
/*     */     
/*  56 */     this.pattern = getProperty(this.pattern, getSettings(), ""ivy.retrieve.pattern"");
/*     */     try {
/*  58 */       Filter artifactFilter = getArtifactFilter();
/*  59 */       int targetsCopied = getIvyInstance().retrieve(getResolvedMrid(), this.pattern, ((RetrieveOptions)(new RetrieveOptions()).setLog(getLog())).setConfs(splitConfs(getConf())).setDestIvyPattern(this.ivypattern).setArtifactFilter(artifactFilter).setSync(this.sync).setUseOrigin(isUseOrigin()).setMakeSymlinks(this.symlink).setResolveId(getResolveId()));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  71 */       boolean haveTargetsBeenCopied = (targetsCopied > 0);
/*  72 */       getProject().setProperty(""ivy.nb.targets.copied"", String.valueOf(targetsCopied));
/*  73 */       getProject().setProperty(""ivy.targets.copied"", String.valueOf(haveTargetsBeenCopied));
/*  74 */     } catch (Exception ex) {
/*  75 */       throw new BuildException(""impossible to ivy retrieve: "" + ex, ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  80 */   protected Collection getAllowedLogOptions() { return Arrays.asList(new String[] { ""default"", ""download-only"", ""quiet"" }); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  85 */   public String getIvypattern() { return this.ivypattern; }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setIvypattern(String ivypattern) { this.ivypattern = ivypattern; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public boolean isSync() { return this.sync; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setSync(boolean sync) { this.sync = sync; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setSymlink(boolean symlink) { this.symlink = symlink; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyRetrieve.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyTask,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.text.DateFormat;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Date;
/*     */ import java.util.Locale;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class IvyTask
/*     */   extends Task
/*     */ {
/*     */   public static final String ANT_PROJECT_CONTEXT_KEY = ""ant-project"";
/*  42 */   private Boolean validate = null;
/*     */   
/*  44 */   private Reference antIvyEngineRef = null;
/*     */   
/*     */   protected boolean doValidate(IvySettings ivy) {
/*  47 */     if (this.validate != null) {
/*  48 */       return this.validate.booleanValue();
/*     */     }
/*  50 */     return ivy.doValidate();
/*     */   }
/*     */ 
/*     */   
/*  54 */   public boolean isValidate() { return (this.validate == null) ? true : this.validate.booleanValue(); }
/*     */ 
/*     */ 
/*     */   
/*  58 */   public void setValidate(boolean validate) { this.validate = Boolean.valueOf(validate); }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public void setSettingsRef(Reference ref) { this.antIvyEngineRef = ref; }
/*     */ 
/*     */ 
/*     */   
/*  66 */   public Reference getSettingsRef() { return this.antIvyEngineRef; }
/*     */ 
/*     */ 
/*     */   
/*  70 */   protected IvySettings getSettings() { return getIvyInstance().getSettings(); }
/*     */ 
/*     */   
/*     */   protected Ivy getIvyInstance() {
/*     */     Object antIvyEngine;
/*  75 */     if (this.antIvyEngineRef != null) {
/*  76 */       antIvyEngine = this.antIvyEngineRef.getReferencedObject(getProject());
/*  77 */       if (!antIvyEngine.getClass().getName().equals(IvyAntSettings.class.getName())) {
/*  78 */         throw new BuildException(this.antIvyEngineRef.getRefId() + "" doesn't reference an ivy:settings"", getLocation());
/*     */       }
/*     */       
/*  81 */       if (!(antIvyEngine instanceof IvyAntSettings)) {
/*  82 */         throw new BuildException(this.antIvyEngineRef.getRefId() + "" has been defined in a different classloader.  "" + ""Please use the same loader when defining your task, or "" + ""redeclare your ivy:settings in this classloader"", getLocation());
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/*  90 */       antIvyEngine = IvyAntSettings.getDefaultInstance(getProject());
/*     */     } 
/*  92 */     Ivy ivy = ((IvyAntSettings)antIvyEngine).getConfiguredIvyInstance();
/*  93 */     AntMessageLogger.register(this, ivy);
/*  94 */     return ivy;
/*     */   }
/*     */   
/*     */   protected void setResolved(ResolveReport report, boolean keep) {
/*  98 */     ModuleDescriptor md = report.getModuleDescriptor();
/*  99 */     String[] confs = report.getConfigurations();
/* 100 */     if (keep) {
/* 101 */       getProject().addReference(""ivy.resolved.report"", report);
/* 102 */       getProject().addReference(""ivy.resolved.configurations.ref"", confs);
/* 103 */       getProject().addReference(""ivy.resolved.descriptor"", md);
/*     */     } 
/* 105 */     String suffix = md.getModuleRevisionId().getModuleId().getOrganisation() + ""."" + md.getModuleRevisionId().getModuleId().getName();
/*     */     
/* 107 */     getProject().addReference(""ivy.resolved.report."" + suffix, report);
/* 108 */     getProject().addReference(""ivy.resolved.descriptor."" + suffix, md);
/* 109 */     getProject().addReference(""ivy.resolved.configurations.ref."" + suffix, confs);
/*     */   }
/*     */   
/*     */   protected void setResolved(ResolveReport report, String resolveId, boolean keep) {
/* 113 */     setResolved(report, keep);
/* 114 */     if (resolveId != null) {
/* 115 */       ModuleDescriptor md = report.getModuleDescriptor();
/* 116 */       String[] confs = report.getConfigurations();
/* 117 */       getProject().addReference(""ivy.resolved.report."" + resolveId, report);
/* 118 */       getProject().addReference(""ivy.resolved.descriptor."" + resolveId, md);
/* 119 */       getProject().addReference(""ivy.resolved.configurations.ref."" + resolveId, confs);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 124 */   protected String[] getResolvedConfigurations(String org, String module, boolean strict) { return (String[])getReference(""ivy.resolved.configurations.ref"", org, module, strict); }
/*     */ 
/*     */ 
/*     */   
/* 128 */   protected Object getResolvedDescriptor(String resolveId) { return getResolvedDescriptor(resolveId, true); }
/*     */ 
/*     */   
/*     */   protected Object getResolvedDescriptor(String resolveId, boolean strict) {
/* 132 */     Object result = getProject().getReference(""ivy.resolved.descriptor."" + resolveId);
/* 133 */     if (strict && result == null) {
/* 134 */       throw new BuildException(""ModuleDescriptor for resolve with id '"" + resolveId + ""' not found."");
/*     */     }
/*     */     
/* 137 */     return result;
/*     */   }
/*     */ 
/*     */   
/* 141 */   protected Object getResolvedDescriptor(String org, String module) { return getResolvedDescriptor(org, module, false); }
/*     */ 
/*     */ 
/*     */   
/* 145 */   protected Object getResolvedDescriptor(String org, String module, boolean strict) { return getReference(""ivy.resolved.descriptor"", org, module, strict); }
/*     */ 
/*     */   
/*     */   private Object getReference(String prefix, String org, String module, boolean strict) {
/* 149 */     Object reference = null;
/* 150 */     if (org != null && module != null) {
/* 151 */       reference = getProject().getReference(prefix + ""."" + org + ""."" + module);
/*     */     }
/* 153 */     if (!strict && reference == null) {
/* 154 */       reference = getProject().getReference(prefix);
/*     */     }
/* 156 */     return reference;
/*     */   }
/*     */   
/*     */   protected ResolveReport getResolvedReport(String org, String module, String resolveId) {
/* 160 */     ResolveReport result = null;
/*     */     
/* 162 */     if (resolveId == null) {
/* 163 */       result = (ResolveReport)getReference(""ivy.resolved.report"", org, module, false);
/*     */     } else {
/* 165 */       result = (ResolveReport)getReference(""ivy.resolved.report."" + resolveId, null, null, false);
/*     */     } 
/*     */ 
/*     */     
/* 169 */     return result;
/*     */   }
/*     */   
/*     */   protected String[] splitConfs(String conf) {
/* 173 */     if (conf == null) {
/* 174 */       return null;
/*     */     }
/* 176 */     String[] confs = conf.split("","");
/* 177 */     for (int i = 0; i < confs.length; i++) {
/* 178 */       confs[i] = confs[i].trim();
/*     */     }
/* 180 */     return confs;
/*     */   }
/*     */ 
/*     */   
/* 184 */   protected String mergeConfs(String[] conf) { return StringUtils.join((Object[])conf, "", ""); }
/*     */ 
/*     */   
/* 187 */   private static final DateFormat DATE_FORMAT = new SimpleDateFormat(""yyyyMMddHHmmss"");
/*     */   
/*     */   protected Date getPubDate(String date, Date def) {
/* 190 */     if (date != null) {
/* 191 */       if (""now"".equals(date.toLowerCase(Locale.US))) {
/* 192 */         return new Date();
/*     */       }
/*     */       try {
/* 195 */         return DATE_FORMAT.parse(date);
/* 196 */       } catch (Exception ex) {
/* 197 */         throw new BuildException(""publication date provided in bad format. should be yyyyMMddHHmmss and not "" + date);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 202 */     return def;
/*     */   }
/*     */ 
/*     */   
/*     */   protected String getProperty(String value, IvySettings ivy, String name) {
/* 207 */     if (value == null) {
/* 208 */       return getProperty(ivy, name);
/*     */     }
/* 210 */     value = ivy.substitute(value);
/* 211 */     Message.debug(""parameter found as attribute value: "" + name + ""="" + value);
/* 212 */     return value;
/*     */   }
/*     */ 
/*     */   
/*     */   protected String getProperty(String value, IvySettings ivy, String name, String resolveId) {
/* 217 */     if (resolveId == null) {
/* 218 */       return getProperty(value, ivy, name);
/*     */     }
/* 220 */     return getProperty(value, ivy, name + ""."" + resolveId);
/*     */   }
/*     */ 
/*     */   
/*     */   protected String getProperty(IvySettings ivy, String name, String resolveId) {
/* 225 */     if (resolveId == null) {
/* 226 */       return getProperty(ivy, name);
/*     */     }
/* 228 */     return getProperty(ivy, name + ""."" + resolveId);
/*     */   }
/*     */ 
/*     */   
/*     */   protected String getProperty(IvySettings ivy, String name) {
/* 233 */     String val = ivy.getVariable(name);
/* 234 */     if (val == null) {
/* 235 */       val = ivy.substitute(getProject().getProperty(name));
/* 236 */       if (val != null) {
/* 237 */         Message.debug(""parameter found as ant project property: "" + name + ""="" + val);
/*     */       } else {
/* 239 */         Message.debug(""parameter not found: "" + name);
/*     */       } 
/*     */     } else {
/* 242 */       val = ivy.substitute(val);
/* 243 */       Message.debug(""parameter found as ivy variable: "" + name + ""="" + val);
/*     */     } 
/* 245 */     return val;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void prepareTask() {
/* 252 */     getProject().setProperty(""ivy.version"", Ivy.getIvyVersion());
/*     */ 
/*     */     
/* 255 */     IvyContext.pushNewCopyContext();
/* 256 */     IvyContext.getContext().setIvy(getIvyInstance());
/* 257 */     IvyContext.getContext().push(""ant-project"", getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void finalizeTask() {
/* 265 */     if (!IvyContext.getContext().pop(""ant-project"", getProject())) {
/* 266 */       Message.error(""ANT project poped from stack not equals current !. Ignoring"");
/*     */     }
/* 268 */     IvyContext.popContext();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/*     */     try {
/* 276 */       prepareTask();
/* 277 */       doExecute();
/*     */     } finally {
/* 279 */       finalizeTask();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 292 */   public String toString() { return getClass().getName() + "":"" + getTaskName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   protected void cacheAttributeNotSupported() { throw new BuildException(""cache attribute is not supported any more. See IVY-685 for details.""); }
/*     */   
/*     */   public abstract void doExecute() throws BuildException;
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyTask.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.IvyVar,"/*     */ package org.apache.ivy.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.util.Iterator;
/*     */ import java.util.Properties;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyVar
/*     */   extends IvyTask
/*     */ {
/*     */   private String name;
/*     */   private String value;
/*     */   private File file;
/*     */   private String url;
/*     */   private String prefix;
/*     */   
/*  46 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/*  50 */   public void setFile(File aFile) { this.file = aFile; }
/*     */ 
/*     */ 
/*     */   
/*  54 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  58 */   public void setName(String aName) { this.name = aName; }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */   
/*  66 */   public void setPrefix(String aPrefix) { this.prefix = aPrefix; }
/*     */ 
/*     */ 
/*     */   
/*  70 */   public String getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */   
/*  74 */   public void setUrl(String aUrl) { this.url = aUrl; }
/*     */ 
/*     */ 
/*     */   
/*  78 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void setValue(String aValue) { this.value = aValue; }
/*     */ 
/*     */   
/*     */   public void doExecute() throws BuildException {
/*  86 */     Ivy ivy = getIvyInstance();
/*  87 */     IvySettings settings = ivy.getSettings();
/*  88 */     if (getName() != null) {
/*  89 */       settings.setVariable(getVarName(getName()), getValue());
/*     */     } else {
/*  91 */       Properties props = new Properties();
/*  92 */       InputStream is = null;
/*     */       try {
/*  94 */         if (getFile() != null) {
/*  95 */           is = new FileInputStream(getFile());
/*  96 */         } else if (getUrl() != null) {
/*  97 */           is = (new URL(getUrl())).openStream();
/*     */         } else {
/*  99 */           throw new BuildException(""specify either name or file or url to ivy var task"");
/*     */         } 
/* 101 */         props.load(is);
/* 102 */       } catch (Exception ex) {
/* 103 */         throw new BuildException(""impossible to load variables from file: "" + ex, ex);
/*     */       } finally {
/* 105 */         if (is != null) {
/*     */           try {
/* 107 */             is.close();
/* 108 */           } catch (Exception e) {}
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 113 */       for (Iterator iter = props.keySet().iterator(); iter.hasNext(); ) {
/* 114 */         String name = iter.next();
/* 115 */         String value = (String)props.get(name);
/* 116 */         settings.setVariable(getVarName(name), value);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private String getVarName(String name) {
/* 122 */     String prefix = getPrefix();
/* 123 */     if (prefix != null) {
/* 124 */       if (prefix.endsWith(""."")) {
/* 125 */         return prefix + name;
/*     */       }
/* 127 */       return prefix + ""."" + name;
/*     */     } 
/*     */     
/* 130 */     return name;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\IvyVar.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.ant.PackageMapping,"/*    */ package org.apache.ivy.ant;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PackageMapping
/*    */ {
/*    */   private String pkg;
/*    */   private String organisation;
/*    */   private String module;
/*    */   private String revision;
/*    */   
/* 35 */   public String getModule() { return this.module; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public void setModule(String module) { this.module = module; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public String getOrganisation() { return this.organisation; }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public void setOrganisation(String organisation) { this.organisation = organisation; }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public String getRevision() { return this.revision; }
/*    */ 
/*    */ 
/*    */   
/* 55 */   public void setRevision(String revision) { this.revision = revision; }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public String getPackage() { return this.pkg; }
/*    */ 
/*    */ 
/*    */   
/* 63 */   public void setPackage(String package1) { this.pkg = package1; }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public ModuleRevisionId getModuleRevisionId() { return ModuleRevisionId.newInstance(this.organisation, this.module, this.revision); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\ant\PackageMapping.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.ExecutionRelativeUrlResolver,"/*    */ package org.apache.ivy.core;
/*    */ 
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ExecutionRelativeUrlResolver
/*    */   extends RelativeUrlResolver
/*    */ {
/* 32 */   public URL getURL(URL context, String url) throws MalformedURLException { return new URL(url); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\ExecutionRelativeUrlResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.IvyContext,"/*     */ package org.apache.ivy.core;
/*     */ 
/*     */ import java.lang.ref.WeakReference;
/*     */ import java.util.HashMap;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.MessageLogger;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyContext
/*     */ {
/*  44 */   private static ThreadLocal current = new ThreadLocal();
/*     */   
/*     */   private Ivy defaultIvy;
/*     */   
/*  48 */   private WeakReference ivy = new WeakReference(null);
/*     */   
/*  50 */   private Map contextMap = new HashMap();
/*     */   
/*     */   private Thread operatingThread;
/*     */   
/*     */   private ResolveData resolveData;
/*     */   
/*     */   private DependencyDescriptor dd;
/*     */ 
/*     */   
/*     */   public IvyContext() {}
/*     */   
/*     */   public IvyContext(IvyContext ctx) {
/*  62 */     this.defaultIvy = ctx.defaultIvy;
/*  63 */     this.ivy = ctx.ivy;
/*  64 */     this.contextMap = new HashMap(ctx.contextMap);
/*  65 */     this.operatingThread = ctx.operatingThread;
/*  66 */     this.resolveData = ctx.resolveData;
/*  67 */     this.dd = ctx.dd;
/*     */   }
/*     */   
/*     */   public static IvyContext getContext() {
/*  71 */     Stack cur = getCurrentStack();
/*  72 */     if (cur.isEmpty()) {
/*  73 */       cur.push(new IvyContext());
/*     */     }
/*  75 */     return cur.peek();
/*     */   }
/*     */   
/*     */   private static Stack getCurrentStack() {
/*  79 */     Stack cur = current.get();
/*  80 */     if (cur == null) {
/*  81 */       cur = new Stack();
/*  82 */       current.set(cur);
/*     */     } 
/*  84 */     return cur;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public static IvyContext pushNewContext() { return pushContext(new IvyContext()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public static IvyContext pushNewCopyContext() { return pushContext(new IvyContext(getContext())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static IvyContext pushContext(IvyContext context) {
/* 122 */     getCurrentStack().push(context);
/* 123 */     return context;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public static IvyContext popContext() { return getCurrentStack().pop(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Object peekInContextStack(String key) {
/* 154 */     Object value = null;
/* 155 */     Stack contextStack = getCurrentStack();
/* 156 */     for (int i = contextStack.size() - 1; i >= 0 && value == null; i--) {
/* 157 */       IvyContext ctx = contextStack.get(i);
/* 158 */       value = ctx.peek(key);
/*     */     } 
/* 160 */     return value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Ivy getIvy() {
/* 178 */     Ivy ivy = peekIvy();
/* 179 */     return (ivy == null) ? getDefaultIvy() : ivy;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Ivy peekIvy() {
/* 193 */     Ivy ivy = this.ivy.get();
/* 194 */     return ivy;
/*     */   }
/*     */   
/*     */   private Ivy getDefaultIvy() {
/* 198 */     if (this.defaultIvy == null) {
/* 199 */       this.defaultIvy = Ivy.newInstance();
/*     */       try {
/* 201 */         this.defaultIvy.configureDefault();
/* 202 */       } catch (Exception e) {}
/*     */     } 
/*     */ 
/*     */     
/* 206 */     return this.defaultIvy;
/*     */   }
/*     */   
/*     */   public void setIvy(Ivy ivy) {
/* 210 */     this.ivy = new WeakReference(ivy);
/* 211 */     this.operatingThread = Thread.currentThread();
/*     */   }
/*     */ 
/*     */   
/* 215 */   public IvySettings getSettings() { return getIvy().getSettings(); }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public CircularDependencyStrategy getCircularDependencyStrategy() { return getSettings().getCircularDependencyStrategy(); }
/*     */ 
/*     */   
/*     */   public Object get(String key) {
/* 223 */     WeakReference ref = (WeakReference)this.contextMap.get(key);
/* 224 */     return (ref == null) ? null : ref.get();
/*     */   }
/*     */ 
/*     */   
/* 228 */   public void set(String key, Object value) { this.contextMap.put(key, new WeakReference(value)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object peek(String key) {
/* 240 */     synchronized (this.contextMap) {
/* 241 */       Object o = this.contextMap.get(key);
/* 242 */       if (o == null) {
/* 243 */         return null;
/*     */       }
/* 245 */       if (o instanceof List) {
/* 246 */         if (((List)o).size() == 0) {
/* 247 */           return null;
/*     */         }
/* 249 */         Object ret = ((List)o).get(0);
/* 250 */         return ret;
/*     */       } 
/* 252 */       throw new RuntimeException(""Cannot top from non List object "" + o);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object pop(String key) {
/* 267 */     synchronized (this.contextMap) {
/* 268 */       Object o = this.contextMap.get(key);
/* 269 */       if (o == null) {
/* 270 */         return null;
/*     */       }
/* 272 */       if (o instanceof List) {
/* 273 */         if (((List)o).size() == 0) {
/* 274 */           return null;
/*     */         }
/* 276 */         Object ret = ((List)o).remove(0);
/* 277 */         return ret;
/*     */       } 
/* 279 */       throw new RuntimeException(""Cannot pop from non List object "" + o);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean pop(String key, Object expectedValue) {
/* 294 */     synchronized (this.contextMap) {
/* 295 */       Object o = this.contextMap.get(key);
/* 296 */       if (o == null) {
/* 297 */         return false;
/*     */       }
/* 299 */       if (o instanceof List) {
/* 300 */         if (((List)o).size() == 0) {
/* 301 */           return false;
/*     */         }
/* 303 */         Object top = ((List)o).get(0);
/* 304 */         if (!top.equals(expectedValue)) {
/* 305 */           return false;
/*     */         }
/* 307 */         ((List)o).remove(0);
/* 308 */         return true;
/*     */       } 
/* 310 */       throw new RuntimeException(""Cannot pop from non List object "" + o);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void push(String key, Object value) {
/* 327 */     synchronized (this.contextMap) {
/* 328 */       if (!this.contextMap.containsKey(key)) {
/* 329 */         this.contextMap.put(key, new LinkedList());
/*     */       }
/* 331 */       Object o = this.contextMap.get(key);
/* 332 */       if (o instanceof List) {
/* 333 */         ((List)o).add(0, value);
/*     */       } else {
/* 335 */         throw new RuntimeException(""Cannot push to non List object "" + o);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 341 */   public Thread getOperatingThread() { return this.operatingThread; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MessageLogger getMessageLogger() {
/* 350 */     Ivy ivy = peekIvy();
/* 351 */     if (ivy == null) {
/* 352 */       if (this.defaultIvy == null) {
/* 353 */         return Message.getDefaultLogger();
/*     */       }
/* 355 */       return (MessageLogger)this.defaultIvy.getLoggerEngine();
/*     */     } 
/*     */     
/* 358 */     return (MessageLogger)ivy.getLoggerEngine();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 363 */   public EventManager getEventManager() { return getIvy().getEventManager(); }
/*     */ 
/*     */ 
/*     */   
/* 367 */   public void checkInterrupted() { getIvy().checkInterrupted(); }
/*     */ 
/*     */ 
/*     */   
/* 371 */   public void setResolveData(ResolveData data) { this.resolveData = data; }
/*     */ 
/*     */ 
/*     */   
/* 375 */   public ResolveData getResolveData() { return this.resolveData; }
/*     */ 
/*     */ 
/*     */   
/* 379 */   public void setDependencyDescriptor(DependencyDescriptor dd) { this.dd = dd; }
/*     */ 
/*     */ 
/*     */   
/* 383 */   public DependencyDescriptor getDependencyDescriptor() { return this.dd; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\IvyContext.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.IvyPatternHelper,"/*     */ package org.apache.ivy.core;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.settings.IvyVariableContainer;
/*     */ import org.apache.ivy.core.settings.IvyVariableContainerImpl;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class IvyPatternHelper
/*     */ {
/*     */   public static final String CONF_KEY = ""conf"";
/*     */   public static final String TYPE_KEY = ""type"";
/*     */   public static final String EXT_KEY = ""ext"";
/*     */   public static final String ARTIFACT_KEY = ""artifact"";
/*     */   public static final String BRANCH_KEY = ""branch"";
/*     */   public static final String REVISION_KEY = ""revision"";
/*     */   public static final String MODULE_KEY = ""module"";
/*     */   public static final String ORGANISATION_KEY = ""organisation"";
/*     */   public static final String ORGANISATION_KEY2 = ""organization"";
/*     */   public static final String ORIGINAL_ARTIFACTNAME_KEY = ""originalname"";
/*  66 */   private static final Pattern PARAM_PATTERN = Pattern.compile(""\\@\\{(.*?)\\}"");
/*     */   
/*  68 */   private static final Pattern VAR_PATTERN = Pattern.compile(""\\$\\{(.*?)\\}"");
/*     */ 
/*     */   
/*  71 */   public static String substitute(String pattern, ModuleRevisionId moduleRevision) { return substitute(pattern, moduleRevision.getOrganisation(), moduleRevision.getName(), moduleRevision.getBranch(), moduleRevision.getRevision(), ""ivy"", ""ivy"", ""xml"", null, null, moduleRevision.getAttributes()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   public static String substitute(String pattern, ModuleRevisionId moduleRevision, String artifact, String type, String ext) { return substitute(pattern, moduleRevision, (Artifact)new DefaultArtifact(moduleRevision, null, artifact, type, ext), null); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public static String substitute(String pattern, Artifact artifact) { return substitute(pattern, artifact, (String)null); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public static String substitute(String pattern, Artifact artifact, ArtifactOrigin origin) { return substitute(pattern, artifact.getModuleRevisionId(), artifact, null, origin); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public static String substitute(String pattern, Artifact artifact, String conf) { return substitute(pattern, artifact.getModuleRevisionId(), artifact, conf); }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public static String substitute(String pattern, ModuleRevisionId mrid, Artifact artifact) { return substitute(pattern, mrid, artifact, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public static String substitute(String pattern, ModuleRevisionId mrid, Artifact artifact, String conf) { return substitute(pattern, mrid, artifact, conf, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static String substitute(String pattern, ModuleRevisionId mrid, Artifact artifact, String conf, ArtifactOrigin origin) {
/* 105 */     Map attributes = new HashMap();
/* 106 */     attributes.putAll(mrid.getAttributes());
/* 107 */     attributes.putAll(artifact.getAttributes());
/* 108 */     return substitute(pattern, mrid.getOrganisation(), mrid.getName(), mrid.getBranch(), mrid.getRevision(), artifact.getName(), artifact.getType(), artifact.getExt(), conf, origin, attributes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public static String substitute(String pattern, String org, String module, String revision, String artifact, String type, String ext) { return substitute(pattern, org, module, revision, artifact, type, ext, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public static String substitute(String pattern, String org, String module, String revision, String artifact, String type, String ext, String conf) { return substitute(pattern, org, module, revision, artifact, type, ext, conf, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public static String substitute(String pattern, String org, String module, String revision, String artifact, String type, String ext, String conf, Map extraAttributes) { return substitute(pattern, org, module, revision, artifact, type, ext, conf, null, extraAttributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public static String substitute(String pattern, String org, String module, String revision, String artifact, String type, String ext, String conf, ArtifactOrigin origin, Map extraAttributes) { return substitute(pattern, org, module, null, revision, artifact, type, ext, conf, origin, extraAttributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String substitute(String pattern, String org, String module, String branch, String revision, String artifact, String type, String ext, String conf, ArtifactOrigin origin, Map extraAttributes) {
/* 140 */     Map tokens = new HashMap((extraAttributes == null) ? Collections.EMPTY_MAP : extraAttributes);
/* 141 */     tokens.put(""organisation"", (org == null) ? """" : org);
/* 142 */     tokens.put(""organization"", (org == null) ? """" : org);
/* 143 */     tokens.put(""module"", (module == null) ? """" : module);
/* 144 */     tokens.put(""branch"", (branch == null) ? """" : branch);
/* 145 */     tokens.put(""revision"", (revision == null) ? """" : revision);
/* 146 */     tokens.put(""artifact"", (artifact == null) ? module : artifact);
/* 147 */     tokens.put(""type"", (type == null) ? ""jar"" : type);
/* 148 */     tokens.put(""ext"", (ext == null) ? ""jar"" : ext);
/* 149 */     tokens.put(""conf"", (conf == null) ? ""default"" : conf);
/* 150 */     tokens.put(""originalname"", (origin == null) ? new OriginalArtifactNameValue(org, module, branch, revision, artifact, type, ext) : new OriginalArtifactNameValue(origin));
/*     */ 
/*     */     
/* 153 */     return substituteTokens(pattern, tokens);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 158 */   public static String substituteVariables(String pattern, Map variables) { return substituteVariables(pattern, (IvyVariableContainer)new IvyVariableContainerImpl(variables), new Stack()); }
/*     */ 
/*     */ 
/*     */   
/* 162 */   public static String substituteVariables(String pattern, IvyVariableContainer variables) { return substituteVariables(pattern, variables, new Stack()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String substituteVariables(String pattern, IvyVariableContainer variables, Stack substituting) {
/* 168 */     if (pattern == null) {
/* 169 */       return null;
/*     */     }
/*     */     
/* 172 */     Matcher m = VAR_PATTERN.matcher(pattern);
/*     */     
/* 174 */     boolean useVariables = false;
/* 175 */     StringBuffer sb = null;
/* 176 */     while (m.find()) {
/* 177 */       if (!useVariables) {
/* 178 */         useVariables = true;
/* 179 */         sb = new StringBuffer();
/*     */       } 
/* 181 */       String var = m.group(1);
/* 182 */       String val = variables.getVariable(var);
/* 183 */       if (val != null) {
/* 184 */         int index = substituting.indexOf(var);
/* 185 */         if (index != -1) {
/* 186 */           List cycle = new ArrayList(substituting.subList(index, substituting.size()));
/* 187 */           cycle.add(var);
/* 188 */           throw new IllegalArgumentException(""cyclic variable definition: cycle = "" + cycle);
/*     */         } 
/*     */         
/* 191 */         substituting.push(var);
/* 192 */         val = substituteVariables(val, variables, substituting);
/* 193 */         substituting.pop();
/*     */       } else {
/* 195 */         val = m.group();
/*     */       } 
/* 197 */       m.appendReplacement(sb, val.replaceAll(""\\\\"", ""\\\\\\\\"").replaceAll(""\\$"", ""\\\\\\$""));
/*     */     } 
/*     */     
/* 200 */     if (useVariables) {
/* 201 */       m.appendTail(sb);
/* 202 */       return sb.toString();
/*     */     } 
/* 204 */     return pattern;
/*     */   }
/*     */ 
/*     */   
/*     */   public static String substituteTokens(String pattern, Map tokens) {
/* 209 */     StringBuffer buffer = new StringBuffer();
/*     */     
/* 211 */     char[] chars = pattern.toCharArray();
/*     */     
/* 213 */     StringBuffer optionalPart = null;
/* 214 */     StringBuffer tokenBuffer = null;
/* 215 */     boolean insideOptionalPart = false;
/* 216 */     boolean insideToken = false;
/* 217 */     boolean tokenSeen = false;
/* 218 */     boolean tokenHadValue = false;
/*     */     
/* 220 */     for (int i = 0; i < chars.length; i++) {
/* 221 */       String value; Object tokenValue; String token; switch (chars[i]) {
/*     */         case '(':
/* 223 */           if (insideOptionalPart) {
/* 224 */             throw new IllegalArgumentException(""invalid start of optional part at position "" + i + "" in pattern "" + pattern);
/*     */           }
/*     */ 
/*     */ 
/*     */           
/* 229 */           optionalPart = new StringBuffer();
/* 230 */           insideOptionalPart = true;
/* 231 */           tokenSeen = false;
/* 232 */           tokenHadValue = false;
/*     */           break;
/*     */         
/*     */         case ')':
/* 236 */           if (!insideOptionalPart || insideToken) {
/* 237 */             throw new IllegalArgumentException(""invalid end of optional part at position "" + i + "" in pattern "" + pattern);
/*     */           }
/*     */ 
/*     */ 
/*     */           
/* 242 */           if (tokenHadValue) {
/* 243 */             buffer.append(optionalPart.toString());
/* 244 */           } else if (!tokenSeen) {
/* 245 */             buffer.append('(').append(optionalPart.toString()).append(')');
/*     */           } 
/*     */           
/* 248 */           insideOptionalPart = false;
/*     */           break;
/*     */         
/*     */         case '[':
/* 252 */           if (insideToken) {
/* 253 */             throw new IllegalArgumentException(""invalid start of token at position "" + i + "" in pattern "" + pattern);
/*     */           }
/*     */ 
/*     */           
/* 257 */           tokenBuffer = new StringBuffer();
/* 258 */           insideToken = true;
/*     */           break;
/*     */         
/*     */         case ']':
/* 262 */           if (!insideToken) {
/* 263 */             throw new IllegalArgumentException(""invalid end of token at position "" + i + "" in pattern "" + pattern);
/*     */           }
/*     */ 
/*     */           
/* 267 */           token = tokenBuffer.toString();
/* 268 */           tokenValue = tokens.get(token);
/* 269 */           value = (tokenValue == null) ? null : tokenValue.toString();
/*     */           
/* 271 */           if (insideOptionalPart) {
/* 272 */             tokenHadValue = (value != null && value.length() > 0);
/* 273 */             optionalPart.append(value);
/*     */           } else {
/* 275 */             if (value == null) {
/* 276 */               value = ""["" + token + ""]"";
/*     */             }
/* 278 */             buffer.append(value);
/*     */           } 
/*     */           
/* 281 */           insideToken = false;
/* 282 */           tokenSeen = true;
/*     */           break;
/*     */         
/*     */         default:
/* 286 */           if (insideToken) {
/* 287 */             tokenBuffer.append(chars[i]); break;
/* 288 */           }  if (insideOptionalPart) {
/* 289 */             optionalPart.append(chars[i]); break;
/*     */           } 
/* 291 */           buffer.append(chars[i]);
/*     */           break;
/*     */       } 
/*     */ 
/*     */ 
/*     */     
/*     */     } 
/* 298 */     if (insideToken) {
/* 299 */       throw new IllegalArgumentException(""last token hasn't been closed in pattern "" + pattern);
/*     */     }
/*     */ 
/*     */     
/* 303 */     if (insideOptionalPart) {
/* 304 */       throw new IllegalArgumentException(""optional part hasn't been closed in pattern "" + pattern);
/*     */     }
/*     */ 
/*     */     
/* 308 */     return buffer.toString();
/*     */   }
/*     */   
/*     */   public static String substituteVariable(String pattern, String variable, String value) {
/* 312 */     StringBuffer buf = new StringBuffer(pattern);
/* 313 */     substituteVariable(buf, variable, value);
/* 314 */     return buf.toString();
/*     */   }
/*     */   
/*     */   public static void substituteVariable(StringBuffer buf, String variable, String value) {
/* 318 */     String from = ""${"" + variable + ""}"";
/* 319 */     int fromLength = from.length(); int index;
/* 320 */     for (index = buf.indexOf(from); index != -1; index = buf.indexOf(from, index)) {
/* 321 */       buf.replace(index, index + fromLength, value);
/*     */     }
/*     */   }
/*     */   
/*     */   public static String substituteToken(String pattern, String token, String value) {
/* 326 */     StringBuffer buf = new StringBuffer(pattern);
/* 327 */     substituteToken(buf, token, value);
/* 328 */     return buf.toString();
/*     */   }
/*     */   
/*     */   public static void substituteToken(StringBuffer buf, String token, String value) {
/* 332 */     String from = getTokenString(token);
/* 333 */     int fromLength = from.length(); int index;
/* 334 */     for (index = buf.indexOf(from); index != -1; index = buf.indexOf(from, index)) {
/* 335 */       buf.replace(index, index + fromLength, value);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 340 */   public static String getTokenString(String token) { return ""["" + token + ""]""; }
/*     */ 
/*     */ 
/*     */   
/* 344 */   public static String substituteParams(String pattern, Map params) { return substituteParams(pattern, (IvyVariableContainer)new IvyVariableContainerImpl(params), new Stack()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String substituteParams(String pattern, IvyVariableContainer params, Stack substituting) {
/* 351 */     if (pattern == null) {
/* 352 */       return null;
/*     */     }
/*     */     
/* 355 */     Matcher m = PARAM_PATTERN.matcher(pattern);
/*     */     
/* 357 */     StringBuffer sb = new StringBuffer();
/* 358 */     while (m.find()) {
/* 359 */       String var = m.group(1);
/* 360 */       String val = params.getVariable(var);
/* 361 */       if (val != null) {
/* 362 */         int index = substituting.indexOf(var);
/* 363 */         if (index != -1) {
/* 364 */           List cycle = new ArrayList(substituting.subList(index, substituting.size()));
/* 365 */           cycle.add(var);
/* 366 */           throw new IllegalArgumentException(""cyclic param definition: cycle = "" + cycle);
/*     */         } 
/* 368 */         substituting.push(var);
/* 369 */         val = substituteVariables(val, params, substituting);
/* 370 */         substituting.pop();
/*     */       } else {
/* 372 */         val = m.group();
/*     */       } 
/* 374 */       m.appendReplacement(sb, val.replaceAll(""\\\\"", ""\\\\\\\\"").replaceAll(""\\@"", ""\\\\\\@""));
/*     */     } 
/*     */ 
/*     */     
/* 378 */     m.appendTail(sb);
/*     */     
/* 380 */     return sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static class OriginalArtifactNameValue
/*     */   {
/*     */     private String org;
/*     */ 
/*     */     
/*     */     private String moduleName;
/*     */ 
/*     */     
/*     */     private String branch;
/*     */ 
/*     */     
/*     */     private String revision;
/*     */ 
/*     */     
/*     */     private String artifactName;
/*     */ 
/*     */     
/*     */     private String artifactType;
/*     */     
/*     */     private String artifactExt;
/*     */     
/*     */     private ArtifactOrigin origin;
/*     */ 
/*     */     
/*     */     public OriginalArtifactNameValue(String org, String moduleName, String branch, String revision, String artifactName, String artifactType, String artifactExt) {
/* 410 */       this.org = org;
/* 411 */       this.moduleName = moduleName;
/* 412 */       this.branch = branch;
/* 413 */       this.revision = revision;
/* 414 */       this.artifactName = artifactName;
/* 415 */       this.artifactType = artifactType;
/* 416 */       this.artifactExt = artifactExt;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 423 */     public OriginalArtifactNameValue(ArtifactOrigin origin) { this.origin = origin; }
/*     */ 
/*     */ 
/*     */     
/*     */     public String toString() {
/* 428 */       if (this.origin == null) {
/* 429 */         ModuleRevisionId revId = ModuleRevisionId.newInstance(this.org, this.moduleName, this.branch, this.revision);
/*     */         
/* 431 */         DefaultArtifact defaultArtifact = new DefaultArtifact(revId, null, this.artifactName, this.artifactType, this.artifactExt);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 436 */         RepositoryCacheManager cacheManager = IvyContext.getContext().getSettings().getResolver(revId).getRepositoryCacheManager();
/*     */ 
/*     */         
/* 439 */         this.origin = cacheManager.getSavedArtifactOrigin((Artifact)defaultArtifact);
/*     */         
/* 441 */         if (ArtifactOrigin.isUnknown(this.origin)) {
/* 442 */           Message.debug(""no artifact origin found for "" + defaultArtifact + "" in "" + cacheManager);
/*     */           
/* 444 */           return null;
/*     */         } 
/*     */       } 
/*     */       
/* 448 */       if (ArtifactOrigin.isUnknown(this.origin)) {
/* 449 */         return null;
/*     */       }
/*     */ 
/*     */       
/* 453 */       String location = this.origin.getLocation();
/* 454 */       int lastPathIndex = location.lastIndexOf('/');
/* 455 */       if (lastPathIndex == -1) {
/* 456 */         lastPathIndex = location.lastIndexOf('\\');
/*     */       }
/* 458 */       int lastColonIndex = location.lastIndexOf('.');
/*     */       
/* 460 */       return location.substring(lastPathIndex + 1, lastColonIndex);
/*     */     }
/*     */   }
/*     */   
/*     */   public static String getTokenRoot(String pattern) {
/* 465 */     int index = pattern.indexOf('[');
/* 466 */     if (index == -1) {
/* 467 */       return pattern;
/*     */     }
/* 469 */     return pattern.substring(0, index);
/*     */   }
/*     */ 
/*     */   
/*     */   public static String getFirstToken(String pattern) {
/* 474 */     if (pattern == null) {
/* 475 */       return null;
/*     */     }
/* 477 */     int startIndex = pattern.indexOf('[');
/* 478 */     if (startIndex == -1) {
/* 479 */       return null;
/*     */     }
/* 481 */     int endIndex = pattern.indexOf(']', startIndex);
/* 482 */     if (endIndex == -1) {
/* 483 */       return null;
/*     */     }
/* 485 */     return pattern.substring(startIndex + 1, endIndex);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\IvyPatternHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.IvyThread,"/*    */ package org.apache.ivy.core;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyThread
/*    */   extends Thread
/*    */ {
/* 28 */   private IvyContext context = IvyContext.getContext();
/*    */ 
/*    */ 
/*    */   
/*    */   public IvyThread() {}
/*    */ 
/*    */   
/* 35 */   public IvyThread(Runnable target, String name) { super(target, name); }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public IvyThread(Runnable target) { super(target); }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public IvyThread(String name) { super(name); }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public IvyThread(ThreadGroup group, Runnable target, String name, long stackSize) { super(group, target, name, stackSize); }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public IvyThread(ThreadGroup group, Runnable target, String name) { super(group, target, name); }
/*    */ 
/*    */ 
/*    */   
/* 55 */   public IvyThread(ThreadGroup group, Runnable target) { super(group, target); }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public IvyThread(ThreadGroup group, String name) { super(group, name); }
/*    */ 
/*    */   
/*    */   public void run() {
/* 63 */     initContext();
/* 64 */     super.run();
/*    */   }
/*    */ 
/*    */   
/* 68 */   protected void initContext() { IvyContext.pushContext(this.context); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\IvyThread.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.LogOptions,"/*    */ package org.apache.ivy.core;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogOptions
/*    */ {
/*    */   public static final String LOG_DEFAULT = ""default"";
/*    */   public static final String LOG_DOWNLOAD_ONLY = ""download-only"";
/*    */   public static final String LOG_QUIET = ""quiet"";
/* 40 */   private String log = ""default"";
/*    */ 
/*    */   
/*    */   public LogOptions() {}
/*    */ 
/*    */   
/* 46 */   public LogOptions(LogOptions options) { this.log = options.log; }
/*    */ 
/*    */ 
/*    */   
/* 50 */   public String getLog() { return this.log; }
/*    */ 
/*    */   
/*    */   public LogOptions setLog(String log) {
/* 54 */     this.log = log;
/* 55 */     return this;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\LogOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.NormalRelativeUrlResolver,"/*    */ package org.apache.ivy.core;
/*    */ 
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NormalRelativeUrlResolver
/*    */   extends RelativeUrlResolver
/*    */ {
/* 29 */   public URL getURL(URL context, String url) throws MalformedURLException { return new URL(context, url); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\NormalRelativeUrlResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.RelativeUrlResolver,"/*    */ package org.apache.ivy.core;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class RelativeUrlResolver
/*    */ {
/*    */   public abstract URL getURL(URL paramURL, String paramString) throws MalformedURLException;
/*    */   
/*    */   public URL getURL(URL context, String file, String url) throws MalformedURLException {
/* 47 */     if (file != null) {
/* 48 */       File f = new File(file);
/* 49 */       if (f.isAbsolute()) {
/* 50 */         return f.toURI().toURL();
/*    */       }
/* 52 */       return getURL(context, file);
/*    */     } 
/* 54 */     if (url != null) {
/* 55 */       return getURL(context, url);
/*    */     }
/* 57 */     return null;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\RelativeUrlResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ArtifactOrigin,"/*     */ package org.apache.ivy.core.cache;
/*     */ 
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.util.Checks;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ArtifactOrigin
/*     */ {
/*     */   private static final String UNKNOWN = ""UNKNOWN"";
/*     */   private static final int MAGIC_HASH_VALUE = 31;
/*     */   private boolean isLocal;
/*     */   private String location;
/*     */   private Artifact artifact;
/*     */   
/*  36 */   public static final ArtifactOrigin unkwnown(Artifact artifact) { return new ArtifactOrigin(artifact, false, ""UNKNOWN""); }
/*     */ 
/*     */ 
/*     */   
/*  40 */   public static final boolean isUnknown(ArtifactOrigin artifact) { return (artifact == null || ""UNKNOWN"".equals(artifact.getLocation())); }
/*     */ 
/*     */ 
/*     */   
/*  44 */   public static final boolean isUnknown(String location) { return (location == null || ""UNKNOWN"".equals(location)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactOrigin(Artifact artifact, boolean isLocal, String location) {
/*  67 */     Checks.checkNotNull(artifact, ""artifact"");
/*  68 */     Checks.checkNotNull(location, ""location"");
/*  69 */     this.artifact = artifact;
/*  70 */     this.isLocal = isLocal;
/*  71 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   public boolean isLocal() { return this.isLocal; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public String getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public Artifact getArtifact() { return this.artifact; }
/*     */ 
/*     */ 
/*     */   
/* 102 */   public String toString() { return ""ArtifactOrigin { isLocal="" + this.isLocal + "", location="" + this.location + ""}""; }
/*     */ 
/*     */   
/*     */   public boolean equals(Object o) {
/* 106 */     if (this == o) {
/* 107 */       return true;
/*     */     }
/* 109 */     if (o == null || getClass() != o.getClass()) {
/* 110 */       return false;
/*     */     }
/*     */     
/* 113 */     ArtifactOrigin that = (ArtifactOrigin)o;
/*     */     
/* 115 */     if (this.isLocal != that.isLocal) {
/* 116 */       return false;
/*     */     }
/* 118 */     if (!this.location.equals(that.location)) {
/* 119 */       return false;
/*     */     }
/*     */     
/* 122 */     return true;
/*     */   }
/*     */ 
/*     */   
/*     */   public int hashCode() {
/* 127 */     int result = this.isLocal ? 1 : 0;
/* 128 */     result = 31 * result + this.location.hashCode();
/* 129 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ArtifactOrigin.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.CacheDownloadOptions,"/*    */ package org.apache.ivy.core.cache;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CacheDownloadOptions
/*    */ {
/* 22 */   private DownloadListener listener = null;
/*    */   
/*    */   private boolean force = false;
/*    */   
/* 26 */   public DownloadListener getListener() { return this.listener; }
/*    */   
/*    */   public CacheDownloadOptions setListener(DownloadListener listener) {
/* 29 */     this.listener = listener;
/* 30 */     return this;
/*    */   }
/*    */   
/* 33 */   public boolean isForce() { return this.force; }
/*    */   
/*    */   public CacheDownloadOptions setForce(boolean force) {
/* 36 */     this.force = force;
/* 37 */     return this;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\CacheDownloadOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.CacheMetadataOptions,"/*    */ package org.apache.ivy.core.cache;
/*    */ 
/*    */ import org.apache.ivy.plugins.namespace.Namespace;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CacheMetadataOptions
/*    */   extends CacheDownloadOptions
/*    */ {
/*    */   private boolean validate = false;
/* 24 */   private Namespace namespace = Namespace.SYSTEM_NAMESPACE;
/* 25 */   private Boolean isCheckmodified = null;
/* 26 */   private String changingMatcherName = null;
/* 27 */   private String changingPattern = null;
/*    */ 
/*    */   
/* 30 */   public Namespace getNamespace() { return this.namespace; }
/*    */   
/*    */   public CacheMetadataOptions setNamespace(Namespace namespace) {
/* 33 */     this.namespace = namespace;
/* 34 */     return this;
/*    */   }
/*    */   
/* 37 */   public boolean isValidate() { return this.validate; }
/*    */   
/*    */   public CacheMetadataOptions setValidate(boolean validate) {
/* 40 */     this.validate = validate;
/* 41 */     return this;
/*    */   }
/*    */   
/* 44 */   public Boolean isCheckmodified() { return this.isCheckmodified; }
/*    */   
/*    */   public CacheMetadataOptions setCheckmodified(Boolean isCheckmodified) {
/* 47 */     this.isCheckmodified = isCheckmodified;
/* 48 */     return this;
/*    */   }
/*    */   
/* 51 */   public String getChangingMatcherName() { return this.changingMatcherName; }
/*    */   
/*    */   public CacheMetadataOptions setChangingMatcherName(String changingMatcherName) {
/* 54 */     this.changingMatcherName = changingMatcherName;
/* 55 */     return this;
/*    */   }
/*    */   
/* 58 */   public String getChangingPattern() { return this.changingPattern; }
/*    */   
/*    */   public CacheMetadataOptions setChangingPattern(String changingPattern) {
/* 61 */     this.changingPattern = changingPattern;
/* 62 */     return this;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\CacheMetadataOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.CacheUtil,"/*    */ package org.apache.ivy.core.cache;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class CacheUtil
/*    */ {
/*    */   public static void checkCachePattern(String cachePattern) {
/* 35 */     if (cachePattern == null) {
/* 36 */       throw new IllegalArgumentException(""null cache pattern not allowed."");
/*    */     }
/* 38 */     if (cachePattern.startsWith("".."")) {
/* 39 */       throw new IllegalArgumentException(""invalid cache pattern: '"" + cachePattern + ""': cache patterns must not lead outside cache directory"");
/*    */     }
/*    */     
/* 42 */     if (cachePattern.startsWith(""/""))
/* 43 */       throw new IllegalArgumentException(""invalid cache pattern: '"" + cachePattern + ""': cache patterns must not be absolute""); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\CacheUtil.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.DefaultRepositoryCacheManager,"/*      */ package org.apache.ivy.core.cache;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.text.ParseException;
/*      */ import java.util.Date;
/*      */ import java.util.Map;
/*      */ import java.util.regex.Matcher;
/*      */ import java.util.regex.Pattern;
/*      */ import org.apache.ivy.core.IvyPatternHelper;
/*      */ import org.apache.ivy.core.module.descriptor.Artifact;
/*      */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*      */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*      */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*      */ import org.apache.ivy.core.module.id.ModuleRules;
/*      */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*      */ import org.apache.ivy.core.report.DownloadStatus;
/*      */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*      */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*      */ import org.apache.ivy.core.settings.IvySettings;
/*      */ import org.apache.ivy.plugins.IvySettingsAware;
/*      */ import org.apache.ivy.plugins.lock.LockStrategy;
/*      */ import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
/*      */ import org.apache.ivy.plugins.matcher.MapMatcher;
/*      */ import org.apache.ivy.plugins.matcher.Matcher;
/*      */ import org.apache.ivy.plugins.matcher.NoMatcher;
/*      */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*      */ import org.apache.ivy.plugins.parser.ParserSettings;
/*      */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*      */ import org.apache.ivy.plugins.repository.ArtifactResourceResolver;
/*      */ import org.apache.ivy.plugins.repository.ResourceDownloader;
/*      */ import org.apache.ivy.plugins.repository.ResourceHelper;
/*      */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*      */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*      */ import org.apache.ivy.util.Checks;
/*      */ import org.apache.ivy.util.FileUtil;
/*      */ import org.apache.ivy.util.Message;
/*      */ import org.apache.ivy.util.PropertiesFile;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class DefaultRepositoryCacheManager
/*      */   implements RepositoryCacheManager, IvySettingsAware
/*      */ {
/*      */   private static final String DEFAULT_ARTIFACT_PATTERN = ""[organisation]/[module](/[branch])/[type]s/[artifact]-[revision](-[classifier])(.[ext])"";
/*      */   private static final String DEFAULT_DATA_FILE_PATTERN = ""[organisation]/[module](/[branch])/ivydata-[revision].properties"";
/*      */   private static final String DEFAULT_IVY_PATTERN = ""[organisation]/[module](/[branch])/ivy-[revision].xml"";
/*      */   private static final int DEFAULT_MEMORY_CACHE_SIZE = 150;
/*      */   private IvySettings settings;
/*      */   private File basedir;
/*      */   private LockStrategy lockStrategy;
/*      */   private String name;
/*      */   private String ivyPattern;
/*   83 */   private String dataFilePattern = ""[organisation]/[module](/[branch])/ivydata-[revision].properties"";
/*      */   
/*      */   private String artifactPattern;
/*      */   
/*      */   private String lockStrategyName;
/*      */   
/*      */   private String changingPattern;
/*      */   
/*   91 */   private String changingMatcherName = ""exactOrRegexp"";
/*      */   
/*      */   private Boolean checkmodified;
/*      */   
/*      */   private Boolean useOrigin;
/*      */   
/*   97 */   private ModuleRules ttlRules = new ModuleRules();
/*      */   
/*   99 */   private Long defaultTTL = null;
/*      */   
/*      */   private ModuleDescriptorMemoryCache memoryModuleDescrCache;
/*      */ 
/*      */   
/*      */   public DefaultRepositoryCacheManager() {}
/*      */   
/*      */   public DefaultRepositoryCacheManager(String name, IvySettings settings, File basedir) {
/*  107 */     setName(name);
/*  108 */     setSettings(settings);
/*  109 */     setBasedir(basedir);
/*      */   }
/*      */ 
/*      */   
/*  113 */   public IvySettings getSettings() { return this.settings; }
/*      */ 
/*      */ 
/*      */   
/*  117 */   public void setSettings(IvySettings settings) { this.settings = settings; }
/*      */ 
/*      */   
/*      */   public File getIvyFileInCache(ModuleRevisionId mrid) {
/*  121 */     String file = IvyPatternHelper.substitute(getIvyPattern(), DefaultArtifact.newIvyArtifact(mrid, null));
/*      */     
/*  123 */     return new File(getRepositoryCacheRoot(), file);
/*      */   }
/*      */   
/*      */   public String getIvyPattern() {
/*  127 */     if (this.ivyPattern == null) {
/*  128 */       if (this.settings != null) {
/*  129 */         this.ivyPattern = this.settings.getDefaultCacheIvyPattern();
/*      */       }
/*  131 */       if (this.ivyPattern == null) {
/*  132 */         this.ivyPattern = ""[organisation]/[module](/[branch])/ivy-[revision].xml"";
/*      */       }
/*      */     } 
/*  135 */     return this.ivyPattern;
/*      */   }
/*      */   
/*      */   public String getArtifactPattern() {
/*  139 */     if (this.artifactPattern == null) {
/*  140 */       if (this.settings != null) {
/*  141 */         this.artifactPattern = this.settings.getDefaultCacheArtifactPattern();
/*      */       }
/*  143 */       if (this.artifactPattern == null) {
/*  144 */         this.artifactPattern = ""[organisation]/[module](/[branch])/[type]s/[artifact]-[revision](-[classifier])(.[ext])"";
/*      */       }
/*      */     } 
/*  147 */     return this.artifactPattern;
/*      */   }
/*      */   
/*      */   public void setArtifactPattern(String artifactPattern) {
/*  151 */     CacheUtil.checkCachePattern(artifactPattern);
/*  152 */     this.artifactPattern = artifactPattern;
/*      */   }
/*      */   
/*      */   public File getBasedir() {
/*  156 */     if (this.basedir == null) {
/*  157 */       this.basedir = this.settings.getDefaultRepositoryCacheBasedir();
/*      */     }
/*  159 */     return this.basedir;
/*      */   }
/*      */ 
/*      */   
/*  163 */   public void setBasedir(File cache) { this.basedir = cache; }
/*      */ 
/*      */   
/*      */   public long getDefaultTTL() {
/*  167 */     if (this.defaultTTL == null) {
/*  168 */       this.defaultTTL = new Long(parseDuration(this.settings.getVariable(""ivy.cache.ttl.default"")));
/*      */     }
/*  170 */     return this.defaultTTL.longValue();
/*      */   }
/*      */ 
/*      */   
/*  174 */   public void setDefaultTTL(long defaultTTL) { this.defaultTTL = new Long(defaultTTL); }
/*      */ 
/*      */ 
/*      */   
/*  178 */   public void setDefaultTTL(String defaultTTL) { this.defaultTTL = new Long(parseDuration(defaultTTL)); }
/*      */ 
/*      */ 
/*      */   
/*  182 */   public String getDataFilePattern() { return this.dataFilePattern; }
/*      */ 
/*      */   
/*      */   public void setDataFilePattern(String dataFilePattern) {
/*  186 */     CacheUtil.checkCachePattern(dataFilePattern);
/*  187 */     this.dataFilePattern = dataFilePattern;
/*      */   }
/*      */   
/*      */   public void setIvyPattern(String ivyPattern) {
/*  191 */     CacheUtil.checkCachePattern(ivyPattern);
/*  192 */     this.ivyPattern = ivyPattern;
/*      */   }
/*      */ 
/*      */   
/*  196 */   public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */   
/*  200 */   public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */   
/*  204 */   public String getChangingMatcherName() { return this.changingMatcherName; }
/*      */ 
/*      */ 
/*      */   
/*  208 */   public void setChangingMatcher(String changingMatcherName) { this.changingMatcherName = changingMatcherName; }
/*      */ 
/*      */ 
/*      */   
/*  212 */   public String getChangingPattern() { return this.changingPattern; }
/*      */ 
/*      */ 
/*      */   
/*  216 */   public void setChangingPattern(String changingPattern) { this.changingPattern = changingPattern; }
/*      */ 
/*      */ 
/*      */   
/*  220 */   public void addTTL(Map attributes, PatternMatcher matcher, long duration) { this.ttlRules.defineRule(new MapMatcher(attributes, matcher), new Long(duration)); }
/*      */ 
/*      */   
/*      */   public void addConfiguredTtl(Map attributes) {
/*  224 */     String duration = (String)attributes.remove(""duration"");
/*  225 */     if (duration == null) {
/*  226 */       throw new IllegalArgumentException(""'duration' attribute is mandatory for ttl"");
/*      */     }
/*  228 */     String matcher = (String)attributes.remove(""matcher"");
/*  229 */     addTTL(attributes, (matcher == null) ? (PatternMatcher)ExactPatternMatcher.INSTANCE : this.settings.getMatcher(matcher), parseDuration(duration));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  236 */   public void setMemorySize(int size) { this.memoryModuleDescrCache = new ModuleDescriptorMemoryCache(size); }
/*      */ 
/*      */   
/*      */   public ModuleDescriptorMemoryCache getMemoryCache() {
/*  240 */     if (this.memoryModuleDescrCache == null) {
/*  241 */       this.memoryModuleDescrCache = new ModuleDescriptorMemoryCache(150);
/*      */     }
/*  243 */     return this.memoryModuleDescrCache;
/*      */   }
/*      */ 
/*      */   
/*  247 */   private static final Pattern DURATION_PATTERN = Pattern.compile(""(?:(\\d+)d)? ?(?:(\\d+)h)? ?(?:(\\d+)m)? ?(?:(\\d+)s)? ?(?:(\\d+)ms)?"");
/*      */   
/*      */   private static final int MILLIS_IN_SECONDS = 1000;
/*      */   
/*      */   private static final int MILLIS_IN_MINUTES = 60000;
/*      */   private static final int MILLIS_IN_HOUR = 3600000;
/*      */   private static final int MILLIS_IN_DAY = 86400000;
/*      */   
/*      */   private long parseDuration(String duration) {
/*  256 */     if (duration == null) {
/*  257 */       return 0L;
/*      */     }
/*  259 */     Matcher m = DURATION_PATTERN.matcher(duration);
/*  260 */     if (m.matches()) {
/*      */       
/*  262 */       int days = getGroupIntValue(m, 1);
/*  263 */       int hours = getGroupIntValue(m, 2);
/*  264 */       int minutes = getGroupIntValue(m, 3);
/*  265 */       int seconds = getGroupIntValue(m, 4);
/*  266 */       int millis = getGroupIntValue(m, 5);
/*      */ 
/*      */       
/*  269 */       return (days * 86400000 + hours * 3600000 + minutes * 60000 + seconds * 1000 + millis);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  275 */     throw new IllegalArgumentException(""invalid duration '"" + duration + ""': it must match "" + DURATION_PATTERN.pattern());
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private int getGroupIntValue(Matcher m, int groupNumber) {
/*  281 */     String g = m.group(groupNumber);
/*  282 */     return (g == null || g.length() == 0) ? 0 : Integer.parseInt(g);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean isCheckmodified() {
/*  291 */     if (this.checkmodified == null) {
/*  292 */       if (getSettings() != null) {
/*  293 */         String check = getSettings().getVariable(""ivy.resolver.default.check.modified"");
/*  294 */         return (check != null) ? Boolean.valueOf(check).booleanValue() : false;
/*      */       } 
/*  296 */       return false;
/*      */     } 
/*      */     
/*  299 */     return this.checkmodified.booleanValue();
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  304 */   public void setCheckmodified(boolean check) { this.checkmodified = Boolean.valueOf(check); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean isUseOrigin() {
/*  312 */     if (this.useOrigin == null) {
/*  313 */       if (getSettings() != null) {
/*  314 */         return getSettings().isDefaultUseOrigin();
/*      */       }
/*  316 */       return false;
/*      */     } 
/*      */     
/*  319 */     return this.useOrigin.booleanValue();
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  324 */   public void setUseOrigin(boolean b) { this.useOrigin = Boolean.valueOf(b); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File getArchiveFileInCache(Artifact artifact) {
/*  333 */     ArtifactOrigin origin = getSavedArtifactOrigin(artifact);
/*  334 */     return getArchiveFileInCache(artifact, origin);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File getArchiveFileInCache(Artifact artifact, ArtifactOrigin origin) {
/*  343 */     File archive = new File(getRepositoryCacheRoot(), getArchivePathInCache(artifact, origin));
/*  344 */     if (!archive.exists() && !ArtifactOrigin.isUnknown(origin) && origin.isLocal()) {
/*      */       
/*  346 */       File original = Checks.checkAbsolute(origin.getLocation(), artifact + "" origin location"");
/*      */       
/*  348 */       if (original.exists()) {
/*  349 */         return original;
/*      */       }
/*      */     } 
/*  352 */     return archive;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private File getArchiveFileInCache(Artifact artifact, ArtifactOrigin origin, boolean useOrigin) {
/*  363 */     if (useOrigin && !ArtifactOrigin.isUnknown(origin) && origin.isLocal()) {
/*  364 */       return Checks.checkAbsolute(origin.getLocation(), artifact + "" origin location"");
/*      */     }
/*  366 */     return new File(getRepositoryCacheRoot(), getArchivePathInCache(artifact, origin));
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  371 */   public String getArchivePathInCache(Artifact artifact) { return IvyPatternHelper.substitute(getArtifactPattern(), artifact); }
/*      */ 
/*      */   
/*      */   public String getArchivePathInCache(Artifact artifact, ArtifactOrigin origin) {
/*  375 */     if (isOriginalMetadataArtifact(artifact)) {
/*  376 */       return IvyPatternHelper.substitute(getIvyPattern() + "".original"", artifact, origin);
/*      */     }
/*  378 */     return IvyPatternHelper.substitute(getArtifactPattern(), artifact, origin);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void saveResolver(ModuleDescriptor md, String name) {
/*  393 */     PropertiesFile cdf = getCachedDataFile(md);
/*  394 */     cdf.setProperty(""resolver"", name);
/*  395 */     cdf.save();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void saveResolvers(ModuleDescriptor md, String metadataResolverName, String artifactResolverName) {
/*  409 */     ModuleRevisionId mrid = md.getResolvedModuleRevisionId();
/*  410 */     if (!lockMetadataArtifact(mrid)) {
/*  411 */       Message.error(""impossible to acquire lock for "" + mrid);
/*      */       return;
/*      */     } 
/*      */     try {
/*  415 */       PropertiesFile cdf = getCachedDataFile(md);
/*  416 */       cdf.setProperty(""resolver"", metadataResolverName);
/*  417 */       cdf.setProperty(""artifact.resolver"", artifactResolverName);
/*  418 */       cdf.save();
/*      */     } finally {
/*  420 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private String getSavedResolverName(ModuleDescriptor md) {
/*  426 */     PropertiesFile cdf = getCachedDataFile(md);
/*  427 */     return cdf.getProperty(""resolver"");
/*      */   }
/*      */ 
/*      */   
/*      */   private String getSavedArtResolverName(ModuleDescriptor md) {
/*  432 */     PropertiesFile cdf = getCachedDataFile(md);
/*  433 */     return cdf.getProperty(""artifact.resolver"");
/*      */   }
/*      */ 
/*      */   
/*      */   void saveArtifactOrigin(Artifact artifact, ArtifactOrigin origin) {
/*  438 */     PropertiesFile cdf = getCachedDataFile(artifact.getModuleRevisionId());
/*  439 */     cdf.setProperty(getIsLocalKey(artifact), String.valueOf(origin.isLocal()));
/*  440 */     cdf.setProperty(getLocationKey(artifact), origin.getLocation());
/*  441 */     cdf.save();
/*      */   }
/*      */ 
/*      */   
/*      */   private void removeSavedArtifactOrigin(Artifact artifact) {
/*  446 */     PropertiesFile cdf = getCachedDataFile(artifact.getModuleRevisionId());
/*  447 */     cdf.remove(getLocationKey(artifact));
/*  448 */     cdf.remove(getIsLocalKey(artifact));
/*  449 */     cdf.save();
/*      */   }
/*      */   
/*      */   public ArtifactOrigin getSavedArtifactOrigin(Artifact artifact) {
/*  453 */     ModuleRevisionId mrid = artifact.getModuleRevisionId();
/*  454 */     if (!lockMetadataArtifact(mrid)) {
/*  455 */       Message.error(""impossible to acquire lock for "" + mrid);
/*  456 */       return ArtifactOrigin.unkwnown(artifact);
/*      */     } 
/*      */     try {
/*  459 */       PropertiesFile cdf = getCachedDataFile(artifact.getModuleRevisionId());
/*  460 */       String location = cdf.getProperty(getLocationKey(artifact));
/*  461 */       String local = cdf.getProperty(getIsLocalKey(artifact));
/*  462 */       boolean isLocal = Boolean.valueOf(local).booleanValue();
/*      */       
/*  464 */       if (location == null)
/*      */       {
/*  466 */         return ArtifactOrigin.unkwnown(artifact);
/*      */       }
/*      */       
/*  469 */       return new ArtifactOrigin(artifact, isLocal, location);
/*      */     } finally {
/*  471 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String getPrefixKey(Artifact artifact) {
/*  484 */     int hashCode = artifact.getId().hashCode();
/*      */     
/*  486 */     return ""artifact:"" + artifact.getName() + ""#"" + artifact.getType() + ""#"" + artifact.getExt() + ""#"" + hashCode;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String getLocationKey(Artifact artifact) {
/*  498 */     String prefix = getPrefixKey(artifact);
/*  499 */     return prefix + "".location"";
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String getIsLocalKey(Artifact artifact) {
/*  510 */     String prefix = getPrefixKey(artifact);
/*  511 */     return prefix + "".is-local"";
/*      */   }
/*      */ 
/*      */   
/*  515 */   private PropertiesFile getCachedDataFile(ModuleDescriptor md) { return getCachedDataFile(md.getResolvedModuleRevisionId()); }
/*      */ 
/*      */ 
/*      */   
/*  519 */   private PropertiesFile getCachedDataFile(ModuleRevisionId mRevId) { return new PropertiesFile(new File(getRepositoryCacheRoot(), IvyPatternHelper.substitute(getDataFilePattern(), mRevId)), ""ivy cached data file for "" + mRevId); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolvedModuleRevision findModuleInCache(DependencyDescriptor dd, ModuleRevisionId requestedRevisionId, CacheMetadataOptions options, String expectedResolver) {
/*  527 */     ModuleRevisionId mrid = requestedRevisionId;
/*  528 */     if (isCheckmodified(dd, requestedRevisionId, options)) {
/*  529 */       Message.verbose(""don't use cache for "" + mrid + "": checkModified=true"");
/*  530 */       return null;
/*      */     } 
/*  532 */     if (isChanging(dd, requestedRevisionId, options)) {
/*  533 */       Message.verbose(""don't use cache for "" + mrid + "": changing=true"");
/*  534 */       return null;
/*      */     } 
/*  536 */     return doFindModuleInCache(mrid, options, expectedResolver);
/*      */   }
/*      */ 
/*      */   
/*      */   private ResolvedModuleRevision doFindModuleInCache(ModuleRevisionId mrid, CacheMetadataOptions options, String expectedResolver) {
/*  541 */     if (!lockMetadataArtifact(mrid)) {
/*  542 */       Message.error(""impossible to acquire lock for "" + mrid);
/*  543 */       return null;
/*      */     } 
/*      */     try {
/*  546 */       if (this.settings.getVersionMatcher().isDynamic(mrid)) {
/*  547 */         String resolvedRevision = getResolvedRevision(mrid, options);
/*  548 */         if (resolvedRevision != null) {
/*  549 */           Message.verbose(""found resolved revision in cache: "" + mrid + "" => "" + resolvedRevision);
/*      */           
/*  551 */           mrid = ModuleRevisionId.newInstance(mrid, resolvedRevision);
/*      */         } else {
/*  553 */           return null;
/*      */         } 
/*      */       } 
/*      */       
/*  557 */       File ivyFile = getIvyFileInCache(mrid);
/*  558 */       if (ivyFile.exists()) {
/*      */         
/*      */         try {
/*  561 */           XmlModuleDescriptorParser parser = XmlModuleDescriptorParser.getInstance();
/*  562 */           ModuleDescriptor depMD = getMdFromCache(parser, options, ivyFile);
/*  563 */           String resolverName = getSavedResolverName(depMD);
/*  564 */           String artResolverName = getSavedArtResolverName(depMD);
/*  565 */           DependencyResolver resolver = this.settings.getResolver(resolverName);
/*  566 */           if (resolver == null) {
/*  567 */             Message.debug(""\tresolver not found: "" + resolverName + "" => trying to use the one configured for "" + mrid);
/*      */             
/*  569 */             resolver = this.settings.getResolver(depMD.getResolvedModuleRevisionId());
/*  570 */             if (resolver != null) {
/*  571 */               Message.debug(""\tconfigured resolver found for "" + depMD.getResolvedModuleRevisionId() + "": "" + resolver.getName() + "": saving this data"");
/*      */ 
/*      */               
/*  574 */               saveResolver(depMD, resolver.getName());
/*      */             } 
/*      */           } 
/*  577 */           DependencyResolver artResolver = this.settings.getResolver(artResolverName);
/*  578 */           if (artResolver == null) {
/*  579 */             artResolver = resolver;
/*      */           }
/*  581 */           if (resolver != null) {
/*  582 */             Message.debug(""\tfound ivy file in cache for "" + mrid + "" (resolved by "" + resolver.getName() + ""): "" + ivyFile);
/*      */             
/*  584 */             if (expectedResolver == null || expectedResolver.equals(resolver.getName())) {
/*      */               
/*  586 */               MetadataArtifactDownloadReport madr = new MetadataArtifactDownloadReport(depMD.getMetadataArtifact());
/*      */ 
/*      */               
/*  589 */               madr.setDownloadStatus(DownloadStatus.NO);
/*  590 */               madr.setSearched(false);
/*  591 */               madr.setLocalFile(ivyFile);
/*  592 */               madr.setSize(ivyFile.length());
/*  593 */               madr.setArtifactOrigin(getSavedArtifactOrigin(depMD.getMetadataArtifact()));
/*      */               
/*  595 */               return new ResolvedModuleRevision(resolver, artResolver, depMD, madr);
/*      */             } 
/*      */             
/*  598 */             Message.debug(""found module in cache but with a different resolver: discarding: "" + mrid + ""; expected resolver="" + expectedResolver + ""; resolver="" + resolver.getName());
/*      */ 
/*      */           
/*      */           }
/*      */           else {
/*      */ 
/*      */             
/*  605 */             Message.debug(""\tresolver not found: "" + resolverName + "" => cannot use cached ivy file for "" + mrid);
/*      */           }
/*      */         
/*  608 */         } catch (Exception e) {
/*      */           
/*  610 */           Message.debug(""\tproblem while parsing cached ivy file for: "" + mrid + "": "" + e.getMessage());
/*      */         } 
/*      */       } else {
/*      */         
/*  614 */         Message.debug(""\tno ivy file in cache for "" + mrid + "": tried "" + ivyFile);
/*      */       } 
/*      */     } finally {
/*  617 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*  619 */     return null;
/*      */   }
/*      */   
/*      */   private class MyModuleDescriptorProvider
/*      */     implements ModuleDescriptorProvider
/*      */   {
/*      */     private final ModuleDescriptorParser mdParser;
/*      */     private final DefaultRepositoryCacheManager this$0;
/*      */     
/*  628 */     public MyModuleDescriptorProvider(ModuleDescriptorParser mdParser) { this.mdParser = mdParser; }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  633 */     public ModuleDescriptor provideModule(ParserSettings ivySettings, File descriptorURL, boolean validate) throws ParseException, IOException { return this.mdParser.parseDescriptor(ivySettings, descriptorURL.toURI().toURL(), validate); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private ModuleDescriptor getMdFromCache(XmlModuleDescriptorParser mdParser, CacheMetadataOptions options, File ivyFile) throws ParseException, IOException {
/*  640 */     ModuleDescriptorMemoryCache cache = getMemoryCache();
/*  641 */     ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider((ModuleDescriptorParser)mdParser);
/*  642 */     return cache.get(ivyFile, (ParserSettings)this.settings, options.isValidate(), mdProvider);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private ModuleDescriptor getStaledMd(ModuleDescriptorParser mdParser, CacheMetadataOptions options, File ivyFile) throws ParseException, IOException {
/*  648 */     ModuleDescriptorMemoryCache cache = getMemoryCache();
/*  649 */     ModuleDescriptorProvider mdProvider = new MyModuleDescriptorProvider(mdParser);
/*  650 */     return cache.getStale(ivyFile, (ParserSettings)this.settings, options.isValidate(), mdProvider);
/*      */   }
/*      */ 
/*      */   
/*      */   private String getResolvedRevision(ModuleRevisionId mrid, CacheMetadataOptions options) {
/*  655 */     if (!lockMetadataArtifact(mrid)) {
/*  656 */       Message.error(""impossible to acquire lock for "" + mrid);
/*  657 */       return null;
/*      */     } 
/*      */     try {
/*  660 */       String resolvedRevision = null;
/*  661 */       if (options.isForce()) {
/*  662 */         Message.verbose(""refresh mode: no check for cached resolved revision for "" + mrid);
/*  663 */         return null;
/*      */       } 
/*  665 */       PropertiesFile cachedResolvedRevision = getCachedDataFile(mrid);
/*  666 */       String expiration = cachedResolvedRevision.getProperty(""expiration.time"");
/*  667 */       if (expiration == null) {
/*  668 */         Message.verbose(""no cached resolved revision for "" + mrid);
/*  669 */         return null;
/*      */       } 
/*  671 */       if (System.currentTimeMillis() > Long.parseLong(expiration)) {
/*  672 */         Message.verbose(""cached resolved revision expired for "" + mrid);
/*  673 */         return null;
/*      */       } 
/*  675 */       resolvedRevision = cachedResolvedRevision.getProperty(""resolved.revision"");
/*  676 */       if (resolvedRevision == null) {
/*  677 */         Message.verbose(""no cached resolved revision value for "" + mrid);
/*  678 */         return null;
/*      */       } 
/*  680 */       return resolvedRevision;
/*      */     } finally {
/*  682 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */   
/*      */   private void saveResolvedRevision(ModuleRevisionId mrid, String revision) {
/*  687 */     if (!lockMetadataArtifact(mrid)) {
/*  688 */       Message.error(""impossible to acquire lock for "" + mrid);
/*      */       return;
/*      */     } 
/*      */     try {
/*  692 */       PropertiesFile cachedResolvedRevision = getCachedDataFile(mrid);
/*  693 */       cachedResolvedRevision.setProperty(""expiration.time"", getExpiration(mrid));
/*  694 */       cachedResolvedRevision.setProperty(""resolved.revision"", revision);
/*  695 */       cachedResolvedRevision.save();
/*      */     } finally {
/*  697 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*  702 */   private String getExpiration(ModuleRevisionId mrid) { return String.valueOf(System.currentTimeMillis() + getTTL(mrid)); }
/*      */ 
/*      */   
/*      */   public long getTTL(ModuleRevisionId mrid) {
/*  706 */     Long ttl = (Long)this.ttlRules.getRule(mrid);
/*  707 */     return (ttl == null) ? getDefaultTTL() : ttl.longValue();
/*      */   }
/*      */ 
/*      */   
/*  711 */   public String toString() { return this.name; }
/*      */ 
/*      */ 
/*      */   
/*  715 */   public File getRepositoryCacheRoot() { return getBasedir(); }
/*      */ 
/*      */   
/*      */   public LockStrategy getLockStrategy() {
/*  719 */     if (this.lockStrategy == null) {
/*  720 */       if (this.lockStrategyName != null) {
/*  721 */         this.lockStrategy = this.settings.getLockStrategy(this.lockStrategyName);
/*      */       } else {
/*  723 */         this.lockStrategy = this.settings.getDefaultLockStrategy();
/*      */       } 
/*      */     }
/*  726 */     return this.lockStrategy;
/*      */   }
/*      */ 
/*      */   
/*  730 */   public void setLockStrategy(LockStrategy lockStrategy) { this.lockStrategy = lockStrategy; }
/*      */ 
/*      */ 
/*      */   
/*  734 */   public void setLockStrategy(String lockStrategyName) { this.lockStrategyName = lockStrategyName; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ArtifactDownloadReport download(Artifact artifact, ArtifactResourceResolver resourceResolver, ResourceDownloader resourceDownloader, CacheDownloadOptions options) {
/*  742 */     ArtifactDownloadReport adr = new ArtifactDownloadReport(artifact);
/*  743 */     boolean useOrigin = isUseOrigin();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  749 */     ModuleRevisionId mrid = artifact.getModuleRevisionId();
/*  750 */     if (!lockMetadataArtifact(mrid)) {
/*  751 */       adr.setDownloadStatus(DownloadStatus.FAILED);
/*  752 */       adr.setDownloadDetails(""impossible to get lock for "" + mrid);
/*  753 */       return adr;
/*      */     } 
/*      */     try {
/*  756 */       DownloadListener listener = options.getListener();
/*  757 */       if (listener != null) {
/*  758 */         listener.needArtifact(this, artifact);
/*      */       }
/*  760 */       ArtifactOrigin origin = getSavedArtifactOrigin(artifact);
/*      */ 
/*      */ 
/*      */       
/*  764 */       File archiveFile = getArchiveFileInCache(artifact, origin, useOrigin);
/*      */       
/*  766 */       if (archiveFile.exists() && !options.isForce()) {
/*  767 */         adr.setDownloadStatus(DownloadStatus.NO);
/*  768 */         adr.setSize(archiveFile.length());
/*  769 */         adr.setArtifactOrigin(origin);
/*  770 */         adr.setLocalFile(archiveFile);
/*      */       } else {
/*  772 */         long start = System.currentTimeMillis();
/*      */         try {
/*  774 */           ResolvedResource artifactRef = resourceResolver.resolve(artifact);
/*  775 */           if (artifactRef != null) {
/*  776 */             origin = new ArtifactOrigin(artifact, artifactRef.getResource().isLocal(), artifactRef.getResource().getName());
/*      */ 
/*      */ 
/*      */             
/*  780 */             if (useOrigin && artifactRef.getResource().isLocal()) {
/*  781 */               saveArtifactOrigin(artifact, origin);
/*  782 */               archiveFile = getArchiveFileInCache(artifact, origin);
/*  783 */               adr.setDownloadStatus(DownloadStatus.NO);
/*  784 */               adr.setSize(archiveFile.length());
/*  785 */               adr.setArtifactOrigin(origin);
/*  786 */               adr.setLocalFile(archiveFile);
/*      */             } else {
/*      */               
/*  789 */               archiveFile = getArchiveFileInCache(artifact, origin, useOrigin);
/*  790 */               if (ResourceHelper.equals(artifactRef.getResource(), archiveFile)) {
/*  791 */                 throw new IllegalStateException(""invalid settings for '"" + resourceResolver + ""': pointing repository to ivy cache is forbidden !"");
/*      */               }
/*      */ 
/*      */               
/*  795 */               if (listener != null) {
/*  796 */                 listener.startArtifactDownload(this, artifactRef, artifact, origin);
/*      */               }
/*      */               
/*  799 */               resourceDownloader.download(artifact, artifactRef.getResource(), archiveFile);
/*      */               
/*  801 */               adr.setSize(archiveFile.length());
/*  802 */               saveArtifactOrigin(artifact, origin);
/*  803 */               adr.setDownloadTimeMillis(System.currentTimeMillis() - start);
/*  804 */               adr.setDownloadStatus(DownloadStatus.SUCCESSFUL);
/*  805 */               adr.setArtifactOrigin(origin);
/*  806 */               adr.setLocalFile(archiveFile);
/*      */             } 
/*      */           } else {
/*  809 */             adr.setDownloadStatus(DownloadStatus.FAILED);
/*  810 */             adr.setDownloadDetails(""missing artifact"");
/*  811 */             adr.setDownloadTimeMillis(System.currentTimeMillis() - start);
/*      */           } 
/*  813 */         } catch (Exception ex) {
/*  814 */           adr.setDownloadStatus(DownloadStatus.FAILED);
/*  815 */           adr.setDownloadDetails(ex.getMessage());
/*  816 */           adr.setDownloadTimeMillis(System.currentTimeMillis() - start);
/*      */         } 
/*      */       } 
/*  819 */       if (listener != null) {
/*  820 */         listener.endArtifactDownload(this, artifact, adr, archiveFile);
/*      */       }
/*  822 */       return adr;
/*      */     } finally {
/*  824 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void originalToCachedModuleDescriptor(DependencyResolver resolver, ResolvedResource orginalMetadataRef, Artifact requestedMetadataArtifact, ResolvedModuleRevision rmr, ModuleDescriptorWriter writer) {
/*  832 */     ModuleDescriptor md = rmr.getDescriptor();
/*  833 */     Artifact originalMetadataArtifact = getOriginalMetadataArtifact(requestedMetadataArtifact);
/*  834 */     File mdFileInCache = getIvyFileInCache(md.getResolvedModuleRevisionId());
/*      */     
/*  836 */     ModuleRevisionId mrid = requestedMetadataArtifact.getModuleRevisionId();
/*  837 */     if (!lockMetadataArtifact(mrid)) {
/*  838 */       Message.warn(""impossible to acquire lock for: "" + mrid);
/*      */       return;
/*      */     } 
/*      */     try {
/*  842 */       File originalFileInCache = getArchiveFileInCache(originalMetadataArtifact);
/*  843 */       writer.write(orginalMetadataRef, md, originalFileInCache, mdFileInCache);
/*      */ 
/*      */ 
/*      */       
/*  847 */       saveResolvers(md, resolver.getName(), resolver.getName());
/*      */       
/*  849 */       if (getSettings().getVersionMatcher().isDynamic(md.getModuleRevisionId()) && getTTL(md.getModuleRevisionId()) > 0L)
/*      */       {
/*  851 */         saveResolvedRevision(md.getModuleRevisionId(), rmr.getId().getRevision());
/*      */       }
/*      */       
/*  854 */       if (!md.isDefault()) {
/*  855 */         rmr.getReport().setOriginalLocalFile(originalFileInCache);
/*      */       }
/*  857 */       rmr.getReport().setLocalFile(mdFileInCache);
/*  858 */     } catch (RuntimeException e) {
/*  859 */       throw e;
/*  860 */     } catch (Exception e) {
/*  861 */       Message.warn(""impossible to put metadata file in cache: "" + ((orginalMetadataRef == null) ? String.valueOf(md.getResolvedModuleRevisionId()) : String.valueOf(orginalMetadataRef)) + "". "" + e.getClass().getName() + "": "" + e.getMessage());
/*      */     
/*      */     }
/*      */     finally {
/*      */ 
/*      */       
/*  867 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolvedModuleRevision cacheModuleDescriptor(DependencyResolver resolver, final ResolvedResource mdRef, DependencyDescriptor dd, Artifact moduleArtifact, ResourceDownloader downloader, CacheMetadataOptions options) throws ParseException {
/*  875 */     ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(mdRef.getResource());
/*      */     
/*  877 */     Date cachedPublicationDate = null;
/*      */     
/*  879 */     ModuleRevisionId mrid = moduleArtifact.getModuleRevisionId();
/*  880 */     Artifact originalMetadataArtifact = getOriginalMetadataArtifact(moduleArtifact);
/*  881 */     if (!lockMetadataArtifact(mrid)) {
/*  882 */       Message.error(""impossible to acquire lock for "" + mrid);
/*  883 */       return null;
/*      */     } 
/*      */     
/*      */     try {
/*  887 */       ResolvedModuleRevision rmr = doFindModuleInCache(mrid, options, null);
/*  888 */       if (rmr != null) {
/*  889 */         if (rmr.getDescriptor().isDefault() && rmr.getResolver() != resolver) {
/*  890 */           Message.verbose(""\t"" + getName() + "": found revision in cache: "" + mrid + "" (resolved by "" + rmr.getResolver().getName() + ""): but it's a default one, maybe we can find a better one"");
/*      */         }
/*      */         else {
/*      */           
/*  894 */           if (!isCheckmodified(dd, mrid, options) && !isChanging(dd, mrid, options)) {
/*  895 */             Message.verbose(""\t"" + getName() + "": revision in cache: "" + mrid);
/*  896 */             rmr.getReport().setSearched(true);
/*  897 */             return rmr;
/*      */           } 
/*  899 */           long repLastModified = mdRef.getLastModified();
/*  900 */           long cacheLastModified = rmr.getDescriptor().getLastModified();
/*  901 */           if (!rmr.getDescriptor().isDefault() && repLastModified <= cacheLastModified) {
/*  902 */             Message.verbose(""\t"" + getName() + "": revision in cache (not updated): "" + mrid);
/*      */             
/*  904 */             rmr.getReport().setSearched(true);
/*  905 */             return rmr;
/*      */           } 
/*  907 */           Message.verbose(""\t"" + getName() + "": revision in cache is not up to date: "" + mrid);
/*      */           
/*  909 */           if (isChanging(dd, mrid, options))
/*      */           {
/*      */ 
/*      */             
/*  913 */             cachedPublicationDate = rmr.getDescriptor().getResolvedPublicationDate();
/*      */           }
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  921 */       ArtifactDownloadReport report = download(originalMetadataArtifact, new ArtifactResourceResolver() {
/*      */             private final ResolvedResource val$mdRef;
/*      */             private final DefaultRepositoryCacheManager this$0;
/*      */             
/*  925 */             public ResolvedResource resolve(Artifact artifact) { return mdRef; }
/*      */           
/*      */           },  downloader, (new CacheDownloadOptions()).setListener(options.getListener()).setForce(true));
/*      */       
/*  929 */       Message.verbose(""\t"" + report);
/*      */       
/*  931 */       if (report.getDownloadStatus() == DownloadStatus.FAILED) {
/*  932 */         Message.warn(""problem while downloading module descriptor: "" + mdRef.getResource() + "": "" + report.getDownloadDetails() + "" ("" + report.getDownloadTimeMillis() + ""ms)"");
/*      */ 
/*      */         
/*  935 */         return null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     }
/*      */     finally {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1000 */       unlockMetadataArtifact(mrid);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean lockMetadataArtifact(ModuleRevisionId mrid) {
/* 1007 */     Artifact artifact = getDefaultMetadataArtifact(mrid);
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/* 1012 */       return getLockStrategy().lockArtifact(artifact, getArchiveFileInCache(artifact, getDefaultMetadataArtifactOrigin(mrid)));
/*      */     }
/* 1014 */     catch (InterruptedException e) {
/* 1015 */       Thread.currentThread().interrupt();
/* 1016 */       throw new RuntimeException(""operation interrupted"");
/*      */     } 
/*      */   }
/*      */   
/*      */   private void unlockMetadataArtifact(ModuleRevisionId mrid) {
/* 1021 */     Artifact artifact = getDefaultMetadataArtifact(mrid);
/* 1022 */     getLockStrategy().unlockArtifact(artifact, getArchiveFileInCache(artifact, getDefaultMetadataArtifactOrigin(mrid)));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1030 */   private ArtifactOrigin getDefaultMetadataArtifactOrigin(ModuleRevisionId mrid) { return new ArtifactOrigin(DefaultArtifact.newIvyArtifact(mrid, null), false, getIvyFileInCache(mrid).getPath()); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1035 */   private Artifact getDefaultMetadataArtifact(ModuleRevisionId mrid) { return (Artifact)new DefaultArtifact(mrid, new Date(), ""metadata"", ""metadata"", ""ivy"", true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1054 */   public Artifact getOriginalMetadataArtifact(Artifact moduleArtifact) { return DefaultArtifact.cloneWithAnotherType(moduleArtifact, moduleArtifact.getType() + "".original""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1060 */   private boolean isOriginalMetadataArtifact(Artifact artifact) { return (artifact.isMetadata() && artifact.getType().endsWith("".original"")); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1067 */   private boolean isChanging(DependencyDescriptor dd, ModuleRevisionId requestedRevisionId, CacheMetadataOptions options) { return (dd.isChanging() || getChangingMatcher(options).matches(requestedRevisionId.getRevision())); }
/*      */ 
/*      */ 
/*      */   
/*      */   private Matcher getChangingMatcher(CacheMetadataOptions options) {
/* 1072 */     String changingPattern = (options.getChangingPattern() != null) ? options.getChangingPattern() : this.changingPattern;
/*      */     
/* 1074 */     if (changingPattern == null) {
/* 1075 */       return NoMatcher.INSTANCE;
/*      */     }
/* 1077 */     String changingMatcherName = (options.getChangingMatcherName() != null) ? options.getChangingMatcherName() : this.changingMatcherName;
/*      */     
/* 1079 */     PatternMatcher matcher = this.settings.getMatcher(changingMatcherName);
/* 1080 */     if (matcher == null) {
/* 1081 */       throw new IllegalStateException(""unknown matcher '"" + changingMatcherName + ""'. It is set as changing matcher in "" + this);
/*      */     }
/*      */     
/* 1084 */     return matcher.getMatcher(changingPattern);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isCheckmodified(DependencyDescriptor dd, ModuleRevisionId requestedRevisionId, CacheMetadataOptions options) {
/* 1090 */     if (options.isCheckmodified() != null) {
/* 1091 */       return options.isCheckmodified().booleanValue();
/*      */     }
/* 1093 */     return isCheckmodified();
/*      */   }
/*      */ 
/*      */   
/* 1097 */   public void clean() { FileUtil.forceDelete(getBasedir()); }
/*      */ 
/*      */   
/*      */   public void dumpSettings() {
/* 1101 */     Message.verbose(""\t"" + getName());
/* 1102 */     Message.debug(""\t\tivyPattern: "" + getIvyPattern());
/* 1103 */     Message.debug(""\t\tartifactPattern: "" + getArtifactPattern());
/* 1104 */     Message.debug(""\t\tlockingStrategy: "" + getLockStrategy().getName());
/* 1105 */     Message.debug(""\t\tchangingPattern: "" + getChangingPattern());
/* 1106 */     Message.debug(""\t\tchangingMatcher: "" + getChangingMatcherName());
/*      */   }
/*      */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\DefaultRepositoryCacheManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.DefaultResolutionCacheManager,"/*     */ package org.apache.ivy.core.cache;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultResolutionCacheManager
/*     */   implements ResolutionCacheManager
/*     */ {
/*     */   private static final String DEFAULT_CACHE_RESOLVED_IVY_PATTERN = ""resolved-[organisation]-[module]-[revision].xml"";
/*     */   private static final String DEFAULT_CACHE_RESOLVED_IVY_PROPERTIES_PATTERN = ""resolved-[organisation]-[module]-[revision].properties"";
/*  35 */   private String resolvedIvyPattern = ""resolved-[organisation]-[module]-[revision].xml"";
/*     */   
/*  37 */   private String resolvedIvyPropertiesPattern = ""resolved-[organisation]-[module]-[revision].properties"";
/*     */ 
/*     */   
/*     */   private File basedir;
/*     */   
/*  42 */   private String name = ""resolution-cache"";
/*     */ 
/*     */   
/*     */   public DefaultResolutionCacheManager() {}
/*     */ 
/*     */   
/*  48 */   public DefaultResolutionCacheManager(File basedir) { setBasedir(basedir); }
/*     */ 
/*     */ 
/*     */   
/*  52 */   public File getResolutionCacheRoot() { return this.basedir; }
/*     */ 
/*     */ 
/*     */   
/*  56 */   public File getBasedir() { return this.basedir; }
/*     */ 
/*     */ 
/*     */   
/*  60 */   public void setBasedir(File basedir) { this.basedir = basedir; }
/*     */ 
/*     */ 
/*     */   
/*  64 */   public String getResolvedIvyPattern() { return this.resolvedIvyPattern; }
/*     */ 
/*     */ 
/*     */   
/*  68 */   public void setResolvedIvyPattern(String cacheResolvedIvyPattern) { this.resolvedIvyPattern = cacheResolvedIvyPattern; }
/*     */ 
/*     */ 
/*     */   
/*  72 */   public String getResolvedIvyPropertiesPattern() { return this.resolvedIvyPropertiesPattern; }
/*     */ 
/*     */ 
/*     */   
/*  76 */   public void setResolvedIvyPropertiesPattern(String cacheResolvedIvyPropertiesPattern) { this.resolvedIvyPropertiesPattern = cacheResolvedIvyPropertiesPattern; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/*     */   public File getResolvedIvyFileInCache(ModuleRevisionId mrid) {
/*  89 */     String file = IvyPatternHelper.substitute(getResolvedIvyPattern(), mrid.getOrganisation(), mrid.getName(), mrid.getRevision(), ""ivy"", ""ivy"", ""xml"");
/*     */     
/*  91 */     return new File(getResolutionCacheRoot(), file);
/*     */   }
/*     */   
/*     */   public File getResolvedIvyPropertiesInCache(ModuleRevisionId mrid) {
/*  95 */     String file = IvyPatternHelper.substitute(getResolvedIvyPropertiesPattern(), mrid.getOrganisation(), mrid.getName(), mrid.getRevision(), ""ivy"", ""ivy"", ""xml"");
/*     */     
/*  97 */     return new File(getResolutionCacheRoot(), file);
/*     */   }
/*     */ 
/*     */   
/* 101 */   public File getConfigurationResolveReportInCache(String resolveId, String conf) { return new File(getResolutionCacheRoot(), resolveId + ""-"" + conf + "".xml""); }
/*     */ 
/*     */   
/*     */   public File[] getConfigurationResolveReportsInCache(String resolveId) {
/* 105 */     final String prefix = resolveId + ""-"";
/* 106 */     String suffix = "".xml"";
/* 107 */     return getResolutionCacheRoot().listFiles(new FilenameFilter()
/*     */         {
/* 109 */           public boolean accept(File dir, String name) { return (name.startsWith(prefix) && name.endsWith("".xml"")); }
/*     */           private final String val$prefix;
/*     */           private final DefaultResolutionCacheManager this$0;
/*     */         });
/*     */   }
/*     */   
/* 115 */   public String toString() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void clean() { FileUtil.forceDelete(getBasedir()); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\DefaultResolutionCacheManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.DownloadListener,"package org.apache.ivy.core.cache;
import java.io.File;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.report.ArtifactDownloadReport;
import org.apache.ivy.plugins.resolver.util.ResolvedResource;
public interface DownloadListener {
  void needArtifact(RepositoryCacheManager paramRepositoryCacheManager, Artifact paramArtifact);
  void startArtifactDownload(RepositoryCacheManager paramRepositoryCacheManager, ResolvedResource paramResolvedResource, Artifact paramArtifact, ArtifactOrigin paramArtifactOrigin);
  void endArtifactDownload(RepositoryCacheManager paramRepositoryCacheManager, Artifact paramArtifact, ArtifactDownloadReport paramArtifactDownloadReport, File paramFile);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\DownloadListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ModuleDescriptorMemoryCache,"/*     */ package org.apache.ivy.core.cache;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ModuleDescriptorMemoryCache
/*     */ {
/*     */   private final int maxSize;
/*     */   private final LinkedHashMap valueMap;
/*     */   
/*     */   public ModuleDescriptorMemoryCache(int size) {
/*  48 */     this.maxSize = size;
/*  49 */     this.valueMap = new LinkedHashMap(size);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleDescriptor get(File ivyFile, ParserSettings ivySettings, boolean validated, ModuleDescriptorProvider mdProvider) throws ParseException, IOException {
/*  55 */     ModuleDescriptor descriptor = getFromCache(ivyFile, ivySettings, validated);
/*  56 */     if (descriptor == null) {
/*  57 */       descriptor = getStale(ivyFile, ivySettings, validated, mdProvider);
/*     */     }
/*  59 */     return descriptor;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleDescriptor getStale(File ivyFile, ParserSettings ivySettings, boolean validated, ModuleDescriptorProvider mdProvider) throws ParseException, IOException {
/*  67 */     ParserSettingsMonitor settingsMonitor = new ParserSettingsMonitor(ivySettings);
/*  68 */     ModuleDescriptor descriptor = mdProvider.provideModule(settingsMonitor.getMonitoredSettings(), ivyFile, validated);
/*     */     
/*  70 */     putInCache(ivyFile, settingsMonitor, validated, descriptor);
/*  71 */     return descriptor;
/*     */   }
/*     */   
/*     */   ModuleDescriptor getFromCache(File ivyFile, ParserSettings ivySettings, boolean validated) {
/*  75 */     if (this.maxSize <= 0)
/*     */     {
/*  77 */       return null;
/*     */     }
/*  79 */     CacheEntry entry = (CacheEntry)this.valueMap.get(ivyFile);
/*  80 */     if (entry != null) {
/*  81 */       if (entry.isStale(validated, ivySettings)) {
/*  82 */         Message.debug(""Entry is found in the ModuleDescriptorCache but entry should be reevaluated : "" + ivyFile);
/*     */         
/*  84 */         this.valueMap.remove(ivyFile);
/*  85 */         return null;
/*     */       } 
/*     */       
/*  88 */       this.valueMap.remove(ivyFile);
/*  89 */       this.valueMap.put(ivyFile, entry);
/*  90 */       Message.debug(""Entry is found in the ModuleDescriptorCache : "" + ivyFile);
/*  91 */       return entry.md;
/*     */     } 
/*     */     
/*  94 */     Message.debug(""No entry is found in the ModuleDescriptorCache : "" + ivyFile);
/*  95 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void putInCache(File url, ParserSettingsMonitor ivySettingsMonitor, boolean validated, ModuleDescriptor descriptor) {
/* 103 */     if (this.maxSize <= 0) {
/*     */       return;
/*     */     }
/*     */     
/* 107 */     if (this.valueMap.size() >= this.maxSize) {
/* 108 */       Message.debug(""ModuleDescriptorCache is full, remove one entry"");
/* 109 */       Iterator it = this.valueMap.values().iterator();
/* 110 */       it.next();
/* 111 */       it.remove();
/*     */     } 
/* 113 */     this.valueMap.put(url, new CacheEntry(descriptor, validated, ivySettingsMonitor));
/*     */   }
/*     */ 
/*     */   
/*     */   private static class CacheEntry
/*     */   {
/*     */     private final ModuleDescriptor md;
/*     */     private final boolean validated;
/*     */     private final ParserSettingsMonitor parserSettingsMonitor;
/*     */     
/*     */     CacheEntry(ModuleDescriptor md, boolean validated, ParserSettingsMonitor parserSettingsMonitor) {
/* 124 */       this.md = md;
/* 125 */       this.validated = validated;
/* 126 */       this.parserSettingsMonitor = parserSettingsMonitor;
/*     */     }
/*     */ 
/*     */     
/* 130 */     boolean isStale(boolean validated, ParserSettings newParserSettings) { return ((validated && !this.validated) || this.parserSettingsMonitor.hasChanged(newParserSettings)); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ModuleDescriptorMemoryCache.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ModuleDescriptorProvider,"package org.apache.ivy.core.cache;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.plugins.parser.ParserSettings;
interface ModuleDescriptorProvider {
  ModuleDescriptor provideModule(ParserSettings paramParserSettings, File paramFile, boolean paramBoolean) throws ParseException, IOException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ModuleDescriptorProvider.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ModuleDescriptorWriter,"package org.apache.ivy.core.cache;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.plugins.resolver.util.ResolvedResource;
public interface ModuleDescriptorWriter {
  void write(ResolvedResource paramResolvedResource, ModuleDescriptor paramModuleDescriptor, File paramFile1, File paramFile2) throws IOException, ParseException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ModuleDescriptorWriter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ParserSettingsMonitor,"/*     */ package org.apache.ivy.core.cache;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.RelativeUrlResolver;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.module.status.StatusManager;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ParserSettingsMonitor
/*     */ {
/*     */   private ParserSettings delegatedSettings;
/*     */   private final Map substitutes;
/*     */   private ParserSettings monitoredSettings;
/*     */   
/*     */   public ParserSettingsMonitor(ParserSettings settings) {
/*  95 */     this.monitoredSettings = new ParserSettings() {
/*     */         private final ParserSettingsMonitor this$0;
/*     */         
/*  98 */         public ConflictManager getConflictManager(String name) { return ParserSettingsMonitor.this.delegatedSettings.getConflictManager(name); }
/*     */ 
/*     */ 
/*     */         
/* 102 */         public PatternMatcher getMatcher(String matcherName) { return ParserSettingsMonitor.this.delegatedSettings.getMatcher(matcherName); }
/*     */ 
/*     */ 
/*     */         
/* 106 */         public Namespace getNamespace(String namespace) { return ParserSettingsMonitor.this.delegatedSettings.getNamespace(namespace); }
/*     */ 
/*     */ 
/*     */         
/* 110 */         public RelativeUrlResolver getRelativeUrlResolver() { return ParserSettingsMonitor.this.delegatedSettings.getRelativeUrlResolver(); }
/*     */ 
/*     */ 
/*     */         
/* 114 */         public ResolutionCacheManager getResolutionCacheManager() { return ParserSettingsMonitor.this.delegatedSettings.getResolutionCacheManager(); }
/*     */ 
/*     */ 
/*     */         
/* 118 */         public DependencyResolver getResolver(ModuleRevisionId mRevId) { return ParserSettingsMonitor.this.delegatedSettings.getResolver(mRevId); }
/*     */ 
/*     */ 
/*     */         
/* 122 */         public StatusManager getStatusManager() { return ParserSettingsMonitor.this.delegatedSettings.getStatusManager(); }
/*     */ 
/*     */ 
/*     */         
/* 126 */         public File getBaseDir() { return ParserSettingsMonitor.this.delegatedSettings.getBaseDir(); }
/*     */ 
/*     */ 
/*     */         
/* 130 */         public File resolveFile(String filename) { return ParserSettingsMonitor.this.delegatedSettings.resolveFile(filename); }
/*     */ 
/*     */         
/*     */         public Map substitute(Map strings) {
/* 134 */           Map substituted = new LinkedHashMap();
/* 135 */           for (Iterator it = strings.entrySet().iterator(); it.hasNext(); ) {
/* 136 */             Map.Entry entry = it.next();
/* 137 */             substituted.put(entry.getKey(), substitute((String)entry.getValue()));
/*     */           } 
/* 139 */           return substituted;
/*     */         }
/*     */         
/*     */         public String substitute(String value) {
/* 143 */           String r = ParserSettingsMonitor.this.delegatedSettings.substitute(value);
/* 144 */           if (value != null && value != r) {
/* 145 */             ParserSettingsMonitor.this.substitutes.put(value, r);
/*     */           }
/* 147 */           return r;
/*     */         }
/*     */       };
/*     */     this.delegatedSettings = settings;
/*     */     this.substitutes = new HashMap();
/*     */   }
/*     */   
/*     */   public ParserSettings getMonitoredSettings() { return this.monitoredSettings; }
/*     */   
/*     */   public void endMonitoring() {
/*     */     this.monitoredSettings = null;
/*     */     this.delegatedSettings = null;
/*     */   }
/*     */   
/*     */   public boolean hasChanged(ParserSettings newSettings) {
/*     */     for (Iterator it = this.substitutes.entrySet().iterator(); it.hasNext(); ) {
/*     */       Map.Entry entry = it.next();
/*     */       String key = (String)entry.getKey();
/*     */       Object oldValue = entry.getValue();
/*     */       String newValue = newSettings.substitute(key);
/*     */       if (!oldValue.equals(newValue)) {
/*     */         Message.debug(""settings variable has changed for : "" + entry.getKey());
/*     */         return true;
/*     */       } 
/*     */     } 
/*     */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ParserSettingsMonitor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.RepositoryCacheManager,"package org.apache.ivy.core.cache;
import java.text.ParseException;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.core.report.ArtifactDownloadReport;
import org.apache.ivy.core.resolve.ResolvedModuleRevision;
import org.apache.ivy.plugins.repository.ArtifactResourceResolver;
import org.apache.ivy.plugins.repository.ResourceDownloader;
import org.apache.ivy.plugins.resolver.DependencyResolver;
import org.apache.ivy.plugins.resolver.util.ResolvedResource;
public interface RepositoryCacheManager {
  String getName();
  void saveResolvers(ModuleDescriptor paramModuleDescriptor, String paramString1, String paramString2);
  ArtifactOrigin getSavedArtifactOrigin(Artifact paramArtifact);
  ResolvedModuleRevision findModuleInCache(DependencyDescriptor paramDependencyDescriptor, ModuleRevisionId paramModuleRevisionId, CacheMetadataOptions paramCacheMetadataOptions, String paramString);
  ArtifactDownloadReport download(Artifact paramArtifact, ArtifactResourceResolver paramArtifactResourceResolver, ResourceDownloader paramResourceDownloader, CacheDownloadOptions paramCacheDownloadOptions);
  ResolvedModuleRevision cacheModuleDescriptor(DependencyResolver paramDependencyResolver, ResolvedResource paramResolvedResource, DependencyDescriptor paramDependencyDescriptor, Artifact paramArtifact, ResourceDownloader paramResourceDownloader, CacheMetadataOptions paramCacheMetadataOptions) throws ParseException;
  void originalToCachedModuleDescriptor(DependencyResolver paramDependencyResolver, ResolvedResource paramResolvedResource, Artifact paramArtifact, ResolvedModuleRevision paramResolvedModuleRevision, ModuleDescriptorWriter paramModuleDescriptorWriter);
  void clean();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\RepositoryCacheManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.cache.ResolutionCacheManager,"package org.apache.ivy.core.cache;
import java.io.File;
import org.apache.ivy.core.module.id.ModuleRevisionId;
public interface ResolutionCacheManager {
  File getResolutionCacheRoot();
  File getResolvedIvyFileInCache(ModuleRevisionId paramModuleRevisionId);
  File getResolvedIvyPropertiesInCache(ModuleRevisionId paramModuleRevisionId);
  File getConfigurationResolveReportInCache(String paramString1, String paramString2);
  File[] getConfigurationResolveReportsInCache(String paramString);
  void clean();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\cache\ResolutionCacheManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.check.CheckEngine,"/*     */ package org.apache.ivy.core.check;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CheckEngine
/*     */ {
/*     */   private CheckEngineSettings settings;
/*     */   private ResolveEngine resolveEngine;
/*     */   
/*     */   public CheckEngine(CheckEngineSettings settings, ResolveEngine resolveEngine) {
/*  45 */     this.settings = settings;
/*  46 */     this.resolveEngine = resolveEngine;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean check(URL ivyFile, String resolvername) {
/*     */     try {
/*  58 */       boolean result = true;
/*     */       
/*  60 */       ModuleDescriptor md = ModuleDescriptorParserRegistry.getInstance().parseDescriptor(this.settings, ivyFile, this.settings.doValidate());
/*     */ 
/*     */ 
/*     */       
/*  64 */       if (resolvername != null) {
/*  65 */         DependencyResolver resolver = this.settings.getResolver(resolvername);
/*  66 */         String[] confs = md.getConfigurationsNames();
/*  67 */         Set artifacts = new HashSet();
/*  68 */         for (int i = 0; i < confs.length; i++) {
/*  69 */           artifacts.addAll(Arrays.asList(md.getArtifacts(confs[i])));
/*     */         }
/*  71 */         for (Iterator iter = artifacts.iterator(); iter.hasNext(); ) {
/*  72 */           Artifact art = iter.next();
/*  73 */           if (!resolver.exists(art)) {
/*  74 */             Message.info(""declared publication not found: "" + art);
/*  75 */             result = false;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/*  81 */       DependencyDescriptor[] dds = md.getDependencies();
/*  82 */       ResolveData data = new ResolveData(this.resolveEngine, new ResolveOptions());
/*  83 */       for (int i = 0; i < dds.length; i++) {
/*     */         
/*  85 */         String[] masterConfs = dds[i].getModuleConfigurations();
/*  86 */         for (int j = 0; j < masterConfs.length; j++) {
/*  87 */           if (!""*"".equals(masterConfs[j].trim()) && md.getConfiguration(masterConfs[j]) == null) {
/*     */             
/*  89 */             Message.info(""dependency required in non existing conf for "" + ivyFile + "" \n\tin "" + dds[i] + "": "" + masterConfs[j]);
/*     */ 
/*     */             
/*  92 */             result = false;
/*     */           } 
/*     */         } 
/*     */         
/*  96 */         DependencyResolver resolver = this.settings.getResolver(dds[i].getDependencyRevisionId());
/*     */         
/*  98 */         ResolvedModuleRevision rmr = resolver.getDependency(dds[i], data);
/*  99 */         if (rmr == null) {
/* 100 */           Message.info(""dependency not found in "" + ivyFile + "":\n\t"" + dds[i]);
/* 101 */           result = false;
/*     */         } else {
/* 103 */           String[] depConfs = dds[i].getDependencyConfigurations(md.getConfigurationsNames());
/*     */           
/* 105 */           for (int j = 0; j < depConfs.length; j++) {
/* 106 */             if (!Arrays.asList(rmr.getDescriptor().getConfigurationsNames()).contains(depConfs[j])) {
/*     */               
/* 108 */               Message.info(""dependency configuration is missing for "" + ivyFile + ""\n\tin "" + dds[i] + "": "" + depConfs[j]);
/*     */ 
/*     */               
/* 111 */               result = false;
/*     */             } 
/* 113 */             Artifact[] arts = rmr.getDescriptor().getArtifacts(depConfs[j]);
/* 114 */             for (int k = 0; k < arts.length; k++) {
/* 115 */               if (!resolver.exists(arts[k])) {
/* 116 */                 Message.info(""dependency artifact is missing for "" + ivyFile + ""\n\t in "" + dds[i] + "": "" + arts[k]);
/*     */ 
/*     */                 
/* 119 */                 result = false;
/*     */               } 
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 125 */       return result;
/* 126 */     } catch (ParseException e) {
/* 127 */       Message.info(""parse problem on "" + ivyFile + "": "" + e);
/* 128 */       return false;
/* 129 */     } catch (IOException e) {
/* 130 */       Message.info(""io problem on "" + ivyFile + "": "" + e);
/* 131 */       return false;
/* 132 */     } catch (Exception e) {
/* 133 */       Message.info(""problem on "" + ivyFile + "": "" + e);
/* 134 */       return false;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\check\CheckEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.check.CheckEngineSettings,"package org.apache.ivy.core.check;
import org.apache.ivy.plugins.parser.ParserSettings;
import org.apache.ivy.plugins.resolver.DependencyResolver;
public interface CheckEngineSettings extends ParserSettings {
  boolean doValidate();
  DependencyResolver getResolver(String paramString);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\check\CheckEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.deliver.DefaultPublishingDRResolver,"/*    */ package org.apache.ivy.core.deliver;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultPublishingDRResolver
/*    */   implements PublishingDependencyRevisionResolver
/*    */ {
/* 26 */   public String resolve(ModuleDescriptor published, String publishedStatus, ModuleRevisionId depMrid, String status) { return depMrid.getRevision(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\deliver\DefaultPublishingDRResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.deliver.DeliverEngine,"/*     */ package org.apache.ivy.core.deliver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Properties;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.parser.xml.UpdateOptions;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorUpdater;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.util.ConfigurationUtils;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DeliverEngine
/*     */ {
/*     */   private DeliverEngineSettings settings;
/*     */   
/*  51 */   public DeliverEngine(DeliverEngineSettings settings) { this.settings = settings; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void deliver(String revision, String destIvyPattern, DeliverOptions options) throws IOException, ParseException {
/*  68 */     String resolveId = options.getResolveId();
/*  69 */     if (resolveId == null) {
/*  70 */       throw new IllegalArgumentException(""A resolveId must be specified for delivering."");
/*     */     }
/*  72 */     File[] files = getCache().getConfigurationResolveReportsInCache(resolveId);
/*  73 */     if (files.length == 0) {
/*  74 */       throw new IllegalStateException(""No previous resolve found for id '"" + resolveId + ""' Please resolve dependencies before delivering."");
/*     */     }
/*     */     
/*  77 */     XmlReportParser parser = new XmlReportParser();
/*  78 */     parser.parse(files[0]);
/*  79 */     ModuleRevisionId mrid = parser.getResolvedModule();
/*  80 */     deliver(mrid, revision, destIvyPattern, options);
/*     */   }
/*     */ 
/*     */   
/*  84 */   private ResolutionCacheManager getCache() { return this.settings.getResolutionCacheManager(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void deliver(ModuleRevisionId mrid, String revision, String destIvyPattern, DeliverOptions options) throws IOException, ParseException {
/* 103 */     Message.info("":: delivering :: "" + mrid + "" :: "" + revision + "" :: "" + options.getStatus() + "" :: "" + options.getPubdate());
/*     */     
/* 105 */     Message.verbose(""\toptions = "" + options);
/* 106 */     long start = System.currentTimeMillis();
/* 107 */     destIvyPattern = this.settings.substitute(destIvyPattern);
/*     */ 
/*     */     
/* 110 */     File ivyFile = getCache().getResolvedIvyFileInCache(mrid);
/* 111 */     if (!ivyFile.exists()) {
/* 112 */       throw new IllegalStateException(""ivy file not found in cache for "" + mrid + "": please resolve dependencies before delivering ("" + ivyFile + "")"");
/*     */     }
/*     */     
/* 115 */     ModuleDescriptor md = null;
/* 116 */     URL ivyFileURL = null;
/*     */     try {
/* 118 */       ivyFileURL = ivyFile.toURI().toURL();
/* 119 */       md = XmlModuleDescriptorParser.getInstance().parseDescriptor(this.settings, ivyFileURL, options.isValidate());
/*     */       
/* 121 */       md.setResolvedModuleRevisionId(ModuleRevisionId.newInstance(mrid, (options.getPubBranch() == null) ? mrid.getBranch() : options.getPubBranch(), revision));
/*     */ 
/*     */       
/* 124 */       md.setResolvedPublicationDate(options.getPubdate());
/* 125 */     } catch (MalformedURLException e) {
/* 126 */       throw new RuntimeException(""malformed url obtained for file "" + ivyFile, e);
/* 127 */     } catch (ParseException e) {
/* 128 */       throw new RuntimeException(""bad ivy file in cache for "" + mrid + "": please clean and resolve again"", e);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 133 */     Map resolvedRevisions = new HashMap();
/* 134 */     Map dependenciesStatus = new HashMap();
/* 135 */     File ivyProperties = getCache().getResolvedIvyPropertiesInCache(mrid);
/* 136 */     if (!ivyProperties.exists()) {
/* 137 */       throw new IllegalStateException(""ivy properties not found in cache for "" + mrid + "": please resolve dependencies before delivering ("" + ivyFile + "")"");
/*     */     }
/*     */     
/* 140 */     Properties props = new Properties();
/* 141 */     FileInputStream in = new FileInputStream(ivyProperties);
/* 142 */     props.load(in);
/* 143 */     in.close();
/*     */     
/* 145 */     for (Iterator iter = props.keySet().iterator(); iter.hasNext(); ) {
/* 146 */       String depMridStr = iter.next();
/* 147 */       String[] parts = props.getProperty(depMridStr).split("" "");
/* 148 */       ModuleRevisionId decodedMrid = ModuleRevisionId.decode(depMridStr);
/* 149 */       if (options.isResolveDynamicRevisions()) {
/* 150 */         resolvedRevisions.put(decodedMrid, parts[0]);
/*     */       }
/* 152 */       dependenciesStatus.put(decodedMrid, parts[1]);
/*     */     } 
/*     */ 
/*     */     
/* 156 */     Map resolvedDependencies = new HashMap();
/* 157 */     DependencyDescriptor[] dependencies = md.getDependencies();
/* 158 */     for (int i = 0; i < dependencies.length; i++) {
/* 159 */       String rev = (String)resolvedRevisions.get(dependencies[i].getDependencyRevisionId());
/* 160 */       if (rev == null) {
/* 161 */         rev = dependencies[i].getDependencyRevisionId().getRevision();
/*     */       }
/* 163 */       String depStatus = (String)dependenciesStatus.get(dependencies[i].getDependencyRevisionId());
/*     */       
/* 165 */       resolvedDependencies.put(dependencies[i].getDependencyRevisionId(), options.getPdrResolver().resolve(md, options.getStatus(), ModuleRevisionId.newInstance(dependencies[i].getDependencyRevisionId(), rev), depStatus));
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 177 */     File publishedIvy = this.settings.resolveFile(IvyPatternHelper.substitute(destIvyPattern, md.getResolvedModuleRevisionId()));
/*     */     
/* 179 */     Message.info(""\tdelivering ivy file to "" + publishedIvy);
/*     */     
/* 181 */     String[] confs = ConfigurationUtils.replaceWildcards(options.getConfs(), md);
/* 182 */     Set confsToRemove = new HashSet(Arrays.asList((Object[])md.getConfigurationsNames()));
/* 183 */     confsToRemove.removeAll(Arrays.asList((Object[])confs));
/*     */     
/*     */     try {
/* 186 */       XmlModuleDescriptorUpdater.update(ivyFileURL, publishedIvy, (new UpdateOptions()).setSettings(this.settings).setResolvedRevisions(resolvedDependencies).setStatus(options.getStatus()).setRevision(revision).setBranch(options.getPubBranch()).setPubdate(options.getPubdate()).setConfsToExclude((String[])confsToRemove.toArray((Object[])new String[confsToRemove.size()])));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 196 */     catch (SAXException ex) {
/* 197 */       throw new RuntimeException(""bad ivy file in cache for "" + mrid + "": please clean and resolve again"", ex);
/*     */     } 
/*     */ 
/*     */     
/* 201 */     Message.verbose(""\tdeliver done ("" + (System.currentTimeMillis() - start) + ""ms)"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\deliver\DeliverEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.deliver.DeliverEngineSettings,"package org.apache.ivy.core.deliver;
import org.apache.ivy.plugins.parser.ParserSettings;
public interface DeliverEngineSettings extends ParserSettings {
  String substitute(String paramString);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\deliver\DeliverEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.deliver.DeliverOptions,"/*     */ package org.apache.ivy.core.deliver;
/*     */ 
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DeliverOptions
/*     */ {
/*     */   private String status;
/*     */   private Date pubdate;
/*  32 */   private PublishingDependencyRevisionResolver pdrResolver = new DefaultPublishingDRResolver();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validate = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean resolveDynamicRevisions = true;
/*     */ 
/*     */   
/*     */   private String resolveId;
/*     */ 
/*     */   
/*     */   private String[] confs;
/*     */ 
/*     */   
/*     */   private String pubBranch;
/*     */ 
/*     */ 
/*     */   
/*  53 */   public static DeliverOptions newInstance(IvySettings settings) { return new DeliverOptions(null, new Date(), new DefaultPublishingDRResolver(), settings.doValidate(), true, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions(String status, Date pubDate, PublishingDependencyRevisionResolver pdrResolver, boolean validate, boolean resolveDynamicRevisions, String[] confs) {
/*  70 */     this.status = status;
/*  71 */     this.pubdate = pubDate;
/*  72 */     this.pdrResolver = pdrResolver;
/*  73 */     this.validate = validate;
/*  74 */     this.resolveDynamicRevisions = resolveDynamicRevisions;
/*  75 */     this.confs = confs;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public PublishingDependencyRevisionResolver getPdrResolver() { return this.pdrResolver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions setPdrResolver(PublishingDependencyRevisionResolver pdrResolver) {
/* 104 */     this.pdrResolver = pdrResolver;
/* 105 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 109 */   public boolean isResolveDynamicRevisions() { return this.resolveDynamicRevisions; }
/*     */ 
/*     */   
/*     */   public DeliverOptions setResolveDynamicRevisions(boolean resolveDynamicRevisions) {
/* 113 */     this.resolveDynamicRevisions = resolveDynamicRevisions;
/* 114 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 118 */   public boolean isValidate() { return this.validate; }
/*     */ 
/*     */   
/*     */   public DeliverOptions setValidate(boolean validate) {
/* 122 */     this.validate = validate;
/* 123 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 127 */   public Date getPubdate() { return this.pubdate; }
/*     */ 
/*     */   
/*     */   public DeliverOptions setPubdate(Date pubdate) {
/* 131 */     this.pubdate = pubdate;
/* 132 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public String getStatus() { return this.status; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions setStatus(String status) {
/* 153 */     this.status = status;
/* 154 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions setResolveId(String resolveId) {
/* 175 */     this.resolveId = resolveId;
/* 176 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public String[] getConfs() { return this.confs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions setConfs(String[] confs) {
/* 198 */     this.confs = confs;
/* 199 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public String getPubBranch() { return this.pubBranch; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DeliverOptions setPubBranch(String pubBranch) {
/* 221 */     this.pubBranch = pubBranch;
/* 222 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 226 */   public String toString() { return ""status="" + this.status + "" pubdate="" + this.pubdate + "" validate="" + this.validate + "" resolveDynamicRevisions="" + this.resolveDynamicRevisions + "" resolveId="" + this.resolveId + "" pubBranch="" + this.pubBranch; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\deliver\DeliverOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.deliver.PublishingDependencyRevisionResolver,"package org.apache.ivy.core.deliver;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.core.module.id.ModuleRevisionId;
public interface PublishingDependencyRevisionResolver {
  String resolve(ModuleDescriptor paramModuleDescriptor, String paramString1, ModuleRevisionId paramModuleRevisionId, String paramString2);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\deliver\PublishingDependencyRevisionResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.EventManager,"/*    */ package org.apache.ivy.core.event;
/*    */ 
/*    */ import java.util.Arrays;
/*    */ import javax.swing.event.EventListenerList;
/*    */ import org.apache.ivy.plugins.repository.TransferEvent;
/*    */ import org.apache.ivy.plugins.repository.TransferListener;
/*    */ import org.apache.ivy.util.filter.Filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EventManager
/*    */   implements TransferListener
/*    */ {
/* 30 */   private EventListenerList listeners = new EventListenerList();
/*    */ 
/*    */   
/* 33 */   public void addIvyListener(IvyListener listener) { this.listeners.add(IvyListener.class, listener); }
/*    */ 
/*    */ 
/*    */   
/* 37 */   public void addIvyListener(IvyListener listener, String eventName) { addIvyListener(listener, new IvyEventFilter(eventName, null, null)); }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public void addIvyListener(IvyListener listener, Filter filter) { this.listeners.add(IvyListener.class, new FilteredIvyListener(listener, filter)); }
/*    */ 
/*    */   
/*    */   public void removeIvyListener(IvyListener listener) {
/* 45 */     this.listeners.remove(IvyListener.class, listener);
/* 46 */     IvyListener[] listeners = this.listeners.getListeners(IvyListener.class);
/* 47 */     for (int i = 0; i < listeners.length; i++) {
/* 48 */       if (listeners[i] instanceof FilteredIvyListener && 
/* 49 */         listener.equals(((FilteredIvyListener)listeners[i]).getIvyListener())) {
/* 50 */         this.listeners.remove(IvyListener.class, listeners[i]);
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 57 */   public boolean hasIvyListener(IvyListener listener) { return Arrays.asList(this.listeners.getListeners(IvyListener.class)).contains(listener); }
/*    */ 
/*    */   
/*    */   public void fireIvyEvent(IvyEvent evt) {
/* 61 */     Object[] listeners = this.listeners.getListenerList();
/* 62 */     for (int i = listeners.length - 2; i >= 0; i -= 2) {
/* 63 */       if (listeners[i] == IvyListener.class) {
/* 64 */         ((IvyListener)listeners[i + 1]).progress(evt);
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 70 */   public void addTransferListener(TransferListener listener) { this.listeners.add(TransferListener.class, listener); }
/*    */ 
/*    */ 
/*    */   
/* 74 */   public void removeTransferListener(TransferListener listener) { this.listeners.remove(TransferListener.class, listener); }
/*    */ 
/*    */ 
/*    */   
/* 78 */   public boolean hasTransferListener(TransferListener listener) { return Arrays.asList(this.listeners.getListeners(TransferListener.class)).contains(listener); }
/*    */ 
/*    */   
/*    */   protected void fireTransferEvent(TransferEvent evt) {
/* 82 */     Object[] listeners = this.listeners.getListenerList();
/* 83 */     for (int i = listeners.length - 2; i >= 0; i -= 2) {
/* 84 */       if (listeners[i] == TransferListener.class) {
/* 85 */         ((TransferListener)listeners[i + 1]).transferProgress(evt);
/*    */       }
/*    */     } 
/*    */   }
/*    */   
/*    */   public void transferProgress(TransferEvent evt) {
/* 91 */     fireTransferEvent(evt);
/* 92 */     fireIvyEvent((IvyEvent)evt);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\EventManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.FilteredIvyListener,"/*    */ package org.apache.ivy.core.event;
/*    */ 
/*    */ import org.apache.ivy.util.filter.Filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FilteredIvyListener
/*    */   implements IvyListener
/*    */ {
/*    */   private IvyListener listener;
/*    */   private Filter filter;
/*    */   
/*    */   public FilteredIvyListener(IvyListener listener, Filter filter) {
/* 28 */     this.listener = listener;
/* 29 */     this.filter = filter;
/*    */   }
/*    */ 
/*    */   
/* 33 */   public IvyListener getIvyListener() { return this.listener; }
/*    */ 
/*    */ 
/*    */   
/* 37 */   public Filter getFilter() { return this.filter; }
/*    */ 
/*    */   
/*    */   public void progress(IvyEvent event) {
/* 41 */     if (this.filter.accept(event))
/* 42 */       this.listener.progress(event); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\FilteredIvyListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.IvyEvent,"/*     */ package org.apache.ivy.core.event;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyEvent
/*     */ {
/*     */   private EventManager source;
/*     */   private String name;
/*  45 */   private Map attributes = new HashMap();
/*     */   
/*     */   protected IvyEvent(String name) {
/*  48 */     this.source = IvyContext.getContext().getEventManager();
/*  49 */     this.name = name;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   protected void addAttribute(String key, String value) { this.attributes.put(key, value); }
/*     */ 
/*     */ 
/*     */   
/*  63 */   protected void addMDAttributes(ModuleDescriptor md) { addMridAttributes(md.getResolvedModuleRevisionId()); }
/*     */ 
/*     */   
/*     */   protected void addMridAttributes(ModuleRevisionId mrid) {
/*  67 */     addModuleIdAttributes(mrid.getModuleId());
/*  68 */     addAttribute(""revision"", mrid.getRevision());
/*  69 */     addAttribute(""branch"", mrid.getBranch());
/*  70 */     addAttributes(mrid.getQualifiedExtraAttributes());
/*  71 */     addAttributes(mrid.getExtraAttributes());
/*     */   }
/*     */   
/*     */   protected void addModuleIdAttributes(ModuleId moduleId) {
/*  75 */     addAttribute(""organisation"", moduleId.getOrganisation());
/*  76 */     addAttribute(""module"", moduleId.getName());
/*     */   }
/*     */ 
/*     */   
/*  80 */   protected void addConfsAttribute(String[] confs) { addAttribute(""conf"", StringUtils.join((Object[])confs, "", "")); }
/*     */ 
/*     */ 
/*     */   
/*  84 */   protected void addAttributes(Map attributes) { this.attributes.putAll(attributes); }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public EventManager getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public Map getAttributes() { return new HashMap(this.attributes); }
/*     */ 
/*     */ 
/*     */   
/* 105 */   public String toString() { return getName() + "" "" + getAttributes(); }
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 109 */     if (!(obj instanceof IvyEvent)) {
/* 110 */       return false;
/*     */     }
/* 112 */     IvyEvent e = (IvyEvent)obj;
/*     */     
/* 114 */     return (getSource().equals(e.getSource()) && getName().equals(e.getName()) && this.attributes.equals(e.attributes));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public int hashCode() {
/* 120 */     int hash = 37;
/* 121 */     hash = 13 * hash + getSource().hashCode();
/* 122 */     hash = 13 * hash + getName().hashCode();
/* 123 */     hash = 13 * hash + this.attributes.hashCode();
/*     */     
/* 125 */     return hash;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\IvyEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.IvyEventFilter,"/*     */ package org.apache.ivy.core.event;
/*     */ 
/*     */ import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
/*     */ import org.apache.ivy.plugins.matcher.Matcher;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.util.filter.AndFilter;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.NoFilter;
/*     */ import org.apache.ivy.util.filter.NotFilter;
/*     */ import org.apache.ivy.util.filter.OrFilter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyEventFilter
/*     */   implements Filter
/*     */ {
/*     */   private static final String NOT = ""NOT "";
/*     */   private static final String OR = "" OR "";
/*     */   private static final String AND = "" AND "";
/*     */   private PatternMatcher matcher;
/*     */   private Filter nameFilter;
/*     */   private Filter attFilter;
/*     */   
/*     */   public IvyEventFilter(String event, String filterExpression, PatternMatcher matcher) {
/*  81 */     this.matcher = (matcher == null) ? (PatternMatcher)ExactPatternMatcher.INSTANCE : matcher;
/*  82 */     if (event == null) {
/*  83 */       this.nameFilter = NoFilter.INSTANCE;
/*     */     } else {
/*  85 */       final Matcher eventNameMatcher = this.matcher.getMatcher(event);
/*  86 */       this.nameFilter = new Filter() { private final Matcher val$eventNameMatcher; private final IvyEventFilter this$0;
/*     */           public boolean accept(Object o) {
/*  88 */             IvyEvent e = (IvyEvent)o;
/*  89 */             return eventNameMatcher.matches(e.getName());
/*     */           } }
/*     */         ;
/*     */     } 
/*  93 */     this.attFilter = (filterExpression == null || filterExpression.trim().length() == 0) ? NoFilter.INSTANCE : parseExpression(filterExpression);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Filter parseExpression(String filterExpression) {
/* 105 */     filterExpression = filterExpression.trim();
/* 106 */     int index = filterExpression.indexOf("" AND "");
/* 107 */     if (index == -1) {
/* 108 */       index = filterExpression.indexOf("" OR "");
/* 109 */       if (index == -1) {
/* 110 */         if (filterExpression.startsWith(""NOT "")) {
/* 111 */           return (Filter)new NotFilter(parseExpression(filterExpression.substring(""NOT "".length())));
/*     */         }
/* 113 */         index = filterExpression.indexOf(""="");
/* 114 */         if (index == -1) {
/* 115 */           throw new IllegalArgumentException(""bad filter expression: "" + filterExpression + "": no equal sign found"");
/*     */         }
/*     */         
/* 118 */         final String attname = filterExpression.substring(0, index).trim();
/* 119 */         String[] values = filterExpression.substring(index + 1).trim().split("","");
/* 120 */         final Matcher[] matchers = new Matcher[values.length];
/* 121 */         for (int i = 0; i < values.length; i++) {
/* 122 */           matchers[i] = this.matcher.getMatcher(values[i].trim());
/*     */         }
/* 124 */         return new Filter() { private final String val$attname;
/*     */             public boolean accept(Object o) {
/* 126 */               IvyEvent e = (IvyEvent)o;
/* 127 */               String val = (String)e.getAttributes().get(attname);
/* 128 */               if (val == null) {
/* 129 */                 return false;
/*     */               }
/* 131 */               for (int i = 0; i < matchers.length; i++) {
/* 132 */                 if (matchers[i].matches(val)) {
/* 133 */                   return true;
/*     */                 }
/*     */               } 
/* 136 */               return false;
/*     */             }
/*     */             private final Matcher[] val$matchers; private final IvyEventFilter this$0; }
/*     */           ;
/*     */       } 
/* 141 */       return (Filter)new OrFilter(parseExpression(filterExpression.substring(0, index)), parseExpression(filterExpression.substring(index + "" OR "".length())));
/*     */     } 
/*     */ 
/*     */     
/* 145 */     return (Filter)new AndFilter(parseExpression(filterExpression.substring(0, index)), parseExpression(filterExpression.substring(index + "" AND "".length())));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean accept(Object o) {
/* 151 */     if (!(o instanceof IvyEvent)) {
/* 152 */       return false;
/*     */     }
/* 154 */     return (this.nameFilter.accept(o) && this.attFilter.accept(o));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\IvyEventFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.IvyListener,"package org.apache.ivy.core.event;
import java.util.EventListener;
public interface IvyListener extends EventListener {
  void progress(IvyEvent paramIvyEvent);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\IvyListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.download.DownloadEvent,"/*    */ package org.apache.ivy.core.event.download;
/*    */ 
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class DownloadEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   private Artifact artifact;
/*    */   
/*    */   public DownloadEvent(String name, Artifact artifact) {
/* 27 */     super(name);
/* 28 */     this.artifact = artifact;
/* 29 */     addArtifactAttributes(this.artifact);
/*    */   }
/*    */   
/*    */   protected void addArtifactAttributes(Artifact artifact) {
/* 33 */     addMridAttributes(artifact.getModuleRevisionId());
/* 34 */     addAttributes(artifact.getAttributes());
/* 35 */     addAttribute(""metadata"", String.valueOf(artifact.isMetadata()));
/*    */   }
/*    */ 
/*    */   
/* 39 */   public Artifact getArtifact() { return this.artifact; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\download\DownloadEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.download.EndArtifactDownloadEvent,"/*    */ package org.apache.ivy.core.event.download;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndArtifactDownloadEvent
/*    */   extends DownloadEvent
/*    */ {
/*    */   public static final String NAME = ""post-download-artifact"";
/*    */   private DependencyResolver resolver;
/*    */   private ArtifactDownloadReport report;
/*    */   
/*    */   public EndArtifactDownloadEvent(DependencyResolver resolver, Artifact artifact, ArtifactDownloadReport report, File dest) {
/* 36 */     super(""post-download-artifact"", artifact);
/* 37 */     this.resolver = resolver;
/* 38 */     this.report = report;
/* 39 */     addAttribute(""resolver"", this.resolver.getName());
/* 40 */     addAttribute(""status"", this.report.getDownloadStatus().toString());
/* 41 */     addAttribute(""details"", this.report.getDownloadDetails());
/* 42 */     addAttribute(""size"", String.valueOf(this.report.getSize()));
/* 43 */     addAttribute(""file"", dest.getAbsolutePath());
/* 44 */     addAttribute(""duration"", String.valueOf(this.report.getDownloadTimeMillis()));
/* 45 */     ArtifactOrigin origin = report.getArtifactOrigin();
/* 46 */     if (!ArtifactOrigin.isUnknown(origin)) {
/* 47 */       addAttribute(""origin"", origin.getLocation());
/* 48 */       addAttribute(""local"", String.valueOf(origin.isLocal()));
/*    */     } else {
/* 50 */       addAttribute(""origin"", """");
/* 51 */       addAttribute(""local"", """");
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 56 */   public ArtifactDownloadReport getReport() { return this.report; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\download\EndArtifactDownloadEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.download.NeedArtifactEvent,"/*    */ package org.apache.ivy.core.event.download;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NeedArtifactEvent
/*    */   extends DownloadEvent
/*    */ {
/*    */   public static final String NAME = ""need-artifact"";
/*    */   private DependencyResolver resolver;
/*    */   
/*    */   public NeedArtifactEvent(DependencyResolver resolver, Artifact artifact) {
/* 29 */     super(""need-artifact"", artifact);
/* 30 */     this.resolver = resolver;
/* 31 */     addAttribute(""resolver"", this.resolver.getName());
/*    */   }
/*    */ 
/*    */   
/* 35 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\download\NeedArtifactEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.download.PrepareDownloadEvent,"/*    */ package org.apache.ivy.core.event.download;
/*    */ 
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PrepareDownloadEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   public static final String NAME = ""prepare-download"";
/*    */   private Artifact[] artifacts;
/*    */   
/*    */   public PrepareDownloadEvent(Artifact[] artifacts) {
/* 29 */     super(""prepare-download"");
/* 30 */     this.artifacts = artifacts;
/*    */   }
/*    */ 
/*    */   
/* 34 */   public Artifact[] getArtifacts() { return this.artifacts; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\download\PrepareDownloadEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.download.StartArtifactDownloadEvent,"/*    */ package org.apache.ivy.core.event.download;
/*    */ 
/*    */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StartArtifactDownloadEvent
/*    */   extends DownloadEvent
/*    */ {
/*    */   public static final String NAME = ""pre-download-artifact"";
/*    */   private DependencyResolver resolver;
/*    */   private ArtifactOrigin origin;
/*    */   
/*    */   public StartArtifactDownloadEvent(DependencyResolver resolver, Artifact artifact, ArtifactOrigin origin) {
/* 33 */     super(""pre-download-artifact"", artifact);
/* 34 */     this.resolver = resolver;
/* 35 */     this.origin = origin;
/* 36 */     addAttribute(""resolver"", this.resolver.getName());
/* 37 */     addAttribute(""origin"", origin.getLocation());
/* 38 */     addAttribute(""local"", String.valueOf(origin.isLocal()));
/*    */   }
/*    */ 
/*    */   
/* 42 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ 
/*    */ 
/*    */   
/* 46 */   public ArtifactOrigin getOrigin() { return this.origin; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\download\StartArtifactDownloadEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.publish.EndArtifactPublishEvent,"/*    */ package org.apache.ivy.core.event.publish;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndArtifactPublishEvent
/*    */   extends PublishEvent
/*    */ {
/*    */   private static final long serialVersionUID = -65690169431499422L;
/*    */   public static final String NAME = ""post-publish-artifact"";
/*    */   public static final String STATUS_SUCCESSFUL = ""successful"";
/*    */   public static final String STATUS_FAILED = ""failed"";
/*    */   private final boolean successful;
/*    */   
/*    */   public EndArtifactPublishEvent(DependencyResolver resolver, Artifact artifact, File data, boolean overwrite, boolean successful) {
/* 45 */     super(""post-publish-artifact"", resolver, artifact, data, overwrite);
/* 46 */     this.successful = successful;
/* 47 */     addAttribute(""status"", isSuccessful() ? ""successful"" : ""failed"");
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 54 */   public boolean isSuccessful() { return this.successful; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\publish\EndArtifactPublishEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.publish.PublishEvent,"/*    */ package org.apache.ivy.core.event.publish;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class PublishEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   private final DependencyResolver resolver;
/*    */   private final Artifact artifact;
/*    */   private final File data;
/*    */   private final boolean overwrite;
/*    */   
/*    */   protected PublishEvent(String name, DependencyResolver resolver, Artifact artifact, File data, boolean overwrite) {
/* 44 */     super(name);
/* 45 */     this.resolver = resolver;
/* 46 */     this.artifact = artifact;
/* 47 */     this.data = data;
/* 48 */     this.overwrite = overwrite;
/*    */     
/* 50 */     addMridAttributes(artifact.getModuleRevisionId());
/* 51 */     addAttributes(artifact.getAttributes());
/* 52 */     addAttribute(""resolver"", resolver.getName());
/* 53 */     addAttribute(""file"", data.getAbsolutePath());
/* 54 */     addAttribute(""overwrite"", String.valueOf(overwrite));
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 64 */   public File getData() { return this.data; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 69 */   public Artifact getArtifact() { return this.artifact; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 74 */   public boolean isOverwrite() { return this.overwrite; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\publish\PublishEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.publish.StartArtifactPublishEvent,"/*    */ package org.apache.ivy.core.event.publish;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StartArtifactPublishEvent
/*    */   extends PublishEvent
/*    */ {
/*    */   private static final long serialVersionUID = -1134274781039590219L;
/*    */   public static final String NAME = ""pre-publish-artifact"";
/*    */   
/* 39 */   public StartArtifactPublishEvent(DependencyResolver resolver, Artifact artifact, File data, boolean overwrite) { super(""pre-publish-artifact"", resolver, artifact, data, overwrite); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\publish\StartArtifactPublishEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.EndResolveDependencyEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndResolveDependencyEvent
/*    */   extends ResolveDependencyEvent
/*    */ {
/*    */   public static final String NAME = ""post-resolve-dependency"";
/*    */   private ResolvedModuleRevision module;
/*    */   private long duration;
/*    */   
/*    */   public EndResolveDependencyEvent(DependencyResolver resolver, DependencyDescriptor dd, ModuleRevisionId requestedRevisionId, ResolvedModuleRevision module, long duration) {
/* 34 */     super(""post-resolve-dependency"", resolver, dd, requestedRevisionId);
/* 35 */     this.module = module;
/* 36 */     this.duration = duration;
/* 37 */     addAttribute(""duration"", String.valueOf(duration));
/* 38 */     if (this.module != null) {
/*    */       
/* 40 */       addAttribute(""revision"", this.module.getDescriptor().getResolvedModuleRevisionId().getRevision());
/*    */ 
/*    */ 
/*    */       
/* 44 */       addAttributes(this.module.getDescriptor().getResolvedModuleRevisionId().getQualifiedExtraAttributes());
/*    */ 
/*    */       
/* 47 */       addAttributes(this.module.getDescriptor().getResolvedModuleRevisionId().getExtraAttributes());
/*    */ 
/*    */       
/* 50 */       addAttribute(""resolved"", ""true"");
/*    */     } else {
/* 52 */       addAttribute(""resolved"", ""false"");
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 57 */   public ResolvedModuleRevision getModule() { return this.module; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 73 */   public long getDuration() { return this.duration; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\EndResolveDependencyEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.EndResolveEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.report.ResolveReport;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndResolveEvent
/*    */   extends ResolveEvent
/*    */ {
/*    */   public static final String NAME = ""post-resolve"";
/*    */   private ResolveReport report;
/*    */   
/*    */   public EndResolveEvent(ModuleDescriptor md, String[] confs, ResolveReport report) {
/* 29 */     super(""post-resolve"", md, confs);
/* 30 */     this.report = report;
/* 31 */     addAttribute(""resolve-id"", String.valueOf(report.getResolveId()));
/* 32 */     addAttribute(""nb-dependencies"", String.valueOf(report.getDependencies().size()));
/* 33 */     addAttribute(""nb-artifacts"", String.valueOf(report.getArtifacts().size()));
/* 34 */     addAttribute(""resolve-duration"", String.valueOf(report.getResolveTime()));
/* 35 */     addAttribute(""download-duration"", String.valueOf(report.getDownloadTime()));
/* 36 */     addAttribute(""download-size"", String.valueOf(report.getDownloadSize()));
/*    */   }
/*    */ 
/*    */   
/* 40 */   public ResolveReport getReport() { return this.report; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\EndResolveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.ResolveDependencyEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ResolveDependencyEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   private DependencyResolver resolver;
/*    */   private DependencyDescriptor dd;
/*    */   
/*    */   protected ResolveDependencyEvent(String name, DependencyResolver resolver, DependencyDescriptor dd, ModuleRevisionId requestedRevisionId) {
/* 32 */     super(name);
/* 33 */     this.resolver = resolver;
/* 34 */     this.dd = dd;
/* 35 */     addAttribute(""resolver"", this.resolver.getName());
/* 36 */     addMridAttributes(this.dd.getDependencyRevisionId());
/* 37 */     addAttributes(this.dd.getQualifiedExtraAttributes());
/* 38 */     addAttributes(this.dd.getExtraAttributes());
/* 39 */     addAttribute(""req-revision"", requestedRevisionId.getRevision());
/* 40 */     addAttribute(""req-revision-default"", dd.getDependencyRevisionId().getRevision());
/*    */     
/* 42 */     addAttribute(""req-revision-dynamic"", dd.getDynamicConstraintDependencyRevisionId().getRevision());
/*    */     
/* 44 */     addAttribute(""req-branch"", requestedRevisionId.getBranch());
/* 45 */     addAttribute(""req-branch-default"", dd.getDependencyRevisionId().getBranch());
/*    */   }
/*    */ 
/*    */   
/* 49 */   public DependencyDescriptor getDependencyDescriptor() { return this.dd; }
/*    */ 
/*    */ 
/*    */   
/* 53 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\ResolveDependencyEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.ResolveEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ResolveEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   private ModuleDescriptor md;
/*    */   
/*    */   protected ResolveEvent(String name, ModuleDescriptor md, String[] confs) {
/* 27 */     super(name);
/* 28 */     this.md = md;
/* 29 */     addMDAttributes(md);
/* 30 */     addConfsAttribute(confs);
/*    */   }
/*    */ 
/*    */   
/* 34 */   public ModuleDescriptor getModuleDescriptor() { return this.md; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\ResolveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.StartResolveDependencyEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StartResolveDependencyEvent
/*    */   extends ResolveDependencyEvent
/*    */ {
/*    */   public static final String NAME = ""pre-resolve-dependency"";
/*    */   
/* 30 */   public StartResolveDependencyEvent(DependencyResolver resolver, DependencyDescriptor dd, ModuleRevisionId requestedRevisionId) { super(""pre-resolve-dependency"", resolver, dd, requestedRevisionId); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\StartResolveDependencyEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.resolve.StartResolveEvent,"/*    */ package org.apache.ivy.core.event.resolve;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StartResolveEvent
/*    */   extends ResolveEvent
/*    */ {
/*    */   public static final String NAME = ""pre-resolve"";
/*    */   
/* 26 */   public StartResolveEvent(ModuleDescriptor md, String[] confs) { super(""pre-resolve"", md, confs); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\resolve\StartResolveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.retrieve.EndRetrieveEvent,"/*    */ package org.apache.ivy.core.event.retrieve;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndRetrieveEvent
/*    */   extends RetrieveEvent
/*    */ {
/*    */   public static final String NAME = ""post-retrieve"";
/*    */   private long duration;
/*    */   private int nbCopied;
/*    */   private int nbUpToDate;
/*    */   private long totalCopiedSize;
/*    */   
/*    */   public EndRetrieveEvent(ModuleRevisionId mrid, String[] confs, long elapsedTime, int targetsCopied, int targetsUpToDate, long totalCopiedSize, RetrieveOptions options) {
/* 36 */     super(""post-retrieve"", mrid, confs, options);
/*    */     
/* 38 */     this.duration = elapsedTime;
/* 39 */     this.nbCopied = targetsCopied;
/* 40 */     this.nbUpToDate = targetsUpToDate;
/* 41 */     this.totalCopiedSize = totalCopiedSize;
/* 42 */     addAttribute(""duration"", String.valueOf(elapsedTime));
/* 43 */     addAttribute(""size"", String.valueOf(totalCopiedSize));
/* 44 */     addAttribute(""nbCopied"", String.valueOf(targetsCopied));
/* 45 */     addAttribute(""nbUptodate"", String.valueOf(targetsUpToDate));
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 54 */   public long getDuration() { return this.duration; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 63 */   public int getNbCopied() { return this.nbCopied; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 73 */   public int getNbUpToDate() { return this.nbUpToDate; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 81 */   public long getTotalCopiedSize() { return this.totalCopiedSize; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\retrieve\EndRetrieveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.retrieve.RetrieveEvent,"/*    */ package org.apache.ivy.core.event.retrieve;
/*    */ 
/*    */ import org.apache.ivy.core.event.IvyEvent;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RetrieveEvent
/*    */   extends IvyEvent
/*    */ {
/*    */   private ModuleRevisionId mrid;
/*    */   private RetrieveOptions options;
/*    */   
/*    */   protected RetrieveEvent(String name, ModuleRevisionId mrid, String[] confs, RetrieveOptions options) {
/* 30 */     super(name);
/* 31 */     this.mrid = mrid;
/* 32 */     addMridAttributes(mrid);
/* 33 */     addConfsAttribute(confs);
/* 34 */     addAttribute(""symlink"", String.valueOf(options.isMakeSymlinks()));
/* 35 */     addAttribute(""sync"", String.valueOf(options.isSync()));
/* 36 */     this.options = options;
/*    */   }
/*    */ 
/*    */   
/* 40 */   public ModuleRevisionId getModuleRevisionId() { return this.mrid; }
/*    */ 
/*    */ 
/*    */   
/* 44 */   public RetrieveOptions getOptions() { return this.options; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\retrieve\RetrieveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.event.retrieve.StartRetrieveEvent,"/*    */ package org.apache.ivy.core.event.retrieve;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.retrieve.RetrieveOptions;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StartRetrieveEvent
/*    */   extends RetrieveEvent
/*    */ {
/*    */   public static final String NAME = ""pre-retrieve"";
/*    */   
/* 27 */   public StartRetrieveEvent(ModuleRevisionId mrid, String[] confs, RetrieveOptions options) { super(""pre-retrieve"", mrid, confs, options); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\event\retrieve\StartRetrieveEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.install.InstallEngine,"/*     */ package org.apache.ivy.core.install;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.search.SearchEngine;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.conflict.NoConflictManager;
/*     */ import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
/*     */ import org.apache.ivy.plugins.matcher.MatcherHelper;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class InstallEngine
/*     */ {
/*     */   private InstallEngineSettings settings;
/*     */   private ResolveEngine resolveEngine;
/*     */   private SearchEngine searchEngine;
/*     */   
/*     */   public InstallEngine(InstallEngineSettings settings, SearchEngine searchEngine, ResolveEngine resolveEngine) {
/*  54 */     this.settings = settings;
/*  55 */     this.searchEngine = searchEngine;
/*  56 */     this.resolveEngine = resolveEngine;
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolveReport install(ModuleRevisionId mrid, String from, String to, InstallOptions options) throws IOException {
/*  61 */     DependencyResolver fromResolver = this.settings.getResolver(from);
/*  62 */     DependencyResolver toResolver = this.settings.getResolver(to);
/*  63 */     if (fromResolver == null) {
/*  64 */       throw new IllegalArgumentException(""unknown resolver "" + from + "". Available resolvers are: "" + this.settings.getResolverNames());
/*     */     }
/*     */     
/*  67 */     if (toResolver == null) {
/*  68 */       throw new IllegalArgumentException(""unknown resolver "" + to + "". Available resolvers are: "" + this.settings.getResolverNames());
/*     */     }
/*     */     
/*  71 */     PatternMatcher matcher = this.settings.getMatcher(options.getMatcherName());
/*  72 */     if (matcher == null) {
/*  73 */       throw new IllegalArgumentException(""unknown matcher "" + options.getMatcherName() + "". Available matchers are: "" + this.settings.getMatcherNames());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  78 */     Message.info("":: installing "" + mrid + "" ::"");
/*  79 */     DependencyResolver oldDicator = this.resolveEngine.getDictatorResolver();
/*  80 */     boolean log = this.settings.logNotConvertedExclusionRule();
/*     */     try {
/*  82 */       this.settings.setLogNotConvertedExclusionRule(true);
/*  83 */       this.resolveEngine.setDictatorResolver(fromResolver);
/*     */       
/*  85 */       DefaultModuleDescriptor md = new DefaultModuleDescriptor(ModuleRevisionId.newInstance(""apache"", ""ivy-install"", ""1.0""), this.settings.getStatusManager().getDefaultStatus(), new Date());
/*     */ 
/*     */       
/*  88 */       String resolveId = ResolveOptions.getDefaultResolveId((ModuleDescriptor)md);
/*  89 */       md.addConfiguration(new Configuration(""default""));
/*  90 */       md.addConflictManager(new ModuleId(""*"", ""*""), (PatternMatcher)ExactPatternMatcher.INSTANCE, (ConflictManager)new NoConflictManager());
/*     */ 
/*     */ 
/*     */       
/*  94 */       if (MatcherHelper.isExact(matcher, mrid)) {
/*  95 */         DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor((ModuleDescriptor)md, mrid, false, false, options.isTransitive());
/*     */         
/*  97 */         dd.addDependencyConfiguration(""default"", ""*"");
/*  98 */         md.addDependency((DependencyDescriptor)dd);
/*     */       } else {
/* 100 */         ModuleRevisionId[] mrids = this.searchEngine.listModules(fromResolver, mrid, matcher);
/*     */         
/* 102 */         for (int i = 0; i < mrids.length; i++) {
/* 103 */           Message.info(""\tfound "" + mrids[i] + "" to install: adding to the list"");
/* 104 */           DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor((ModuleDescriptor)md, mrids[i], false, false, options.isTransitive());
/*     */           
/* 106 */           dd.addDependencyConfiguration(""default"", ""*"");
/* 107 */           md.addDependency((DependencyDescriptor)dd);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 112 */       ResolveReport report = new ResolveReport((ModuleDescriptor)md, resolveId);
/*     */       
/* 114 */       Message.info("":: resolving dependencies ::"");
/* 115 */       ResolveOptions resolveOptions = (new ResolveOptions()).setResolveId(resolveId).setConfs(new String[] { ""default"" }).setValidate(options.isValidate());
/*     */ 
/*     */ 
/*     */       
/* 119 */       IvyNode[] dependencies = this.resolveEngine.getDependencies((ModuleDescriptor)md, resolveOptions, report);
/* 120 */       report.setDependencies(Arrays.asList(dependencies), options.getArtifactFilter());
/*     */       
/* 122 */       Message.info("":: downloading artifacts to cache ::"");
/* 123 */       this.resolveEngine.downloadArtifacts(report, options.getArtifactFilter(), new DownloadOptions());
/*     */ 
/*     */ 
/*     */       
/* 127 */       Message.info("":: installing in "" + to + "" ::"");
/* 128 */       for (int i = 0; i < dependencies.length; i++) {
/* 129 */         ModuleDescriptor depmd = dependencies[i].getDescriptor();
/* 130 */         if (depmd != null) {
/* 131 */           ModuleRevisionId depMrid = depmd.getModuleRevisionId();
/* 132 */           Message.verbose(""installing "" + depMrid);
/* 133 */           boolean successfullyPublished = false;
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 164 */       Message.info("":: install resolution report ::"");
/*     */ 
/*     */       
/* 167 */       this.resolveEngine.outputReport(report, this.settings.getResolutionCacheManager(), resolveOptions);
/*     */ 
/*     */       
/* 170 */       return report;
/*     */     } finally {
/*     */       
/* 173 */       Message.sumupProblems();
/*     */       
/* 175 */       this.resolveEngine.setDictatorResolver(oldDicator);
/* 176 */       this.settings.setLogNotConvertedExclusionRule(log);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\install\InstallEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.install.InstallEngineSettings,"package org.apache.ivy.core.install;
import java.util.Collection;
import org.apache.ivy.core.module.status.StatusManager;
import org.apache.ivy.plugins.matcher.PatternMatcher;
import org.apache.ivy.plugins.parser.ParserSettings;
import org.apache.ivy.plugins.report.ReportOutputter;
import org.apache.ivy.plugins.resolver.DependencyResolver;
public interface InstallEngineSettings extends ParserSettings {
  DependencyResolver getResolver(String paramString);
  Collection getResolverNames();
  ReportOutputter[] getReportOutputters();
  void setLogNotConvertedExclusionRule(boolean paramBoolean);
  StatusManager getStatusManager();
  boolean logNotConvertedExclusionRule();
  PatternMatcher getMatcher(String paramString);
  Collection getMatcherNames();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\install\InstallEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.install.InstallOptions,"/*    */ package org.apache.ivy.core.install;
/*    */ 
/*    */ import org.apache.ivy.util.filter.Filter;
/*    */ import org.apache.ivy.util.filter.FilterHelper;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InstallOptions
/*    */ {
/*    */   private boolean transitive = true;
/*    */   private boolean validate = true;
/*    */   private boolean overwrite = false;
/* 28 */   private Filter artifactFilter = FilterHelper.NO_FILTER;
/* 29 */   private String matcherName = ""exact"";
/*    */ 
/*    */   
/* 32 */   public boolean isTransitive() { return this.transitive; }
/*    */   
/*    */   public InstallOptions setTransitive(boolean transitive) {
/* 35 */     this.transitive = transitive;
/* 36 */     return this;
/*    */   }
/*    */   
/* 39 */   public boolean isValidate() { return this.validate; }
/*    */   
/*    */   public InstallOptions setValidate(boolean validate) {
/* 42 */     this.validate = validate;
/* 43 */     return this;
/*    */   }
/*    */   
/* 46 */   public boolean isOverwrite() { return this.overwrite; }
/*    */   
/*    */   public InstallOptions setOverwrite(boolean overwrite) {
/* 49 */     this.overwrite = overwrite;
/* 50 */     return this;
/*    */   }
/*    */   
/* 53 */   public Filter getArtifactFilter() { return this.artifactFilter; }
/*    */   
/*    */   public InstallOptions setArtifactFilter(Filter artifactFilter) {
/* 56 */     this.artifactFilter = (artifactFilter == null) ? FilterHelper.NO_FILTER : artifactFilter;
/* 57 */     return this;
/*    */   }
/*    */   
/* 60 */   public String getMatcherName() { return this.matcherName; }
/*    */   
/*    */   public InstallOptions setMatcherName(String matcherName) {
/* 63 */     this.matcherName = matcherName;
/* 64 */     return this;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\install\InstallOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.AbstractArtifact,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractArtifact
/*    */   implements Artifact
/*    */ {
/*    */   public boolean equals(Object obj) {
/* 30 */     if (!(obj instanceof Artifact)) {
/* 31 */       return false;
/*    */     }
/* 33 */     Artifact art = (Artifact)obj;
/* 34 */     return (getModuleRevisionId().equals(art.getModuleRevisionId()) && getPublicationDate() == null) ? true : ((getPublicationDate().equals(art.getPublicationDate()) && getName().equals(art.getName()) && getExt().equals(art.getExt()) && getType().equals(art.getType()) && getQualifiedExtraAttributes().equals(art.getQualifiedExtraAttributes())));
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public int hashCode() {
/* 45 */     int hash = 33;
/* 46 */     hash = hash * 17 + getModuleRevisionId().hashCode();
/* 47 */     if (getPublicationDate() != null) {
/* 48 */       hash = hash * 17 + getPublicationDate().hashCode();
/*    */     }
/* 50 */     hash = hash * 17 + getName().hashCode();
/* 51 */     hash = hash * 17 + getExt().hashCode();
/* 52 */     hash = hash * 17 + getType().hashCode();
/* 53 */     hash = hash * 17 + getQualifiedExtraAttributes().hashCode();
/*    */     
/* 55 */     return hash;
/*    */   }
/*    */ 
/*    */   
/* 59 */   public String toString() { return String.valueOf(getId()); }
/*    */ 
/*    */ 
/*    */   
/* 63 */   public String getAttribute(String attName) { return getId().getAttribute(attName); }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public Map getAttributes() { return getId().getAttributes(); }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public String getExtraAttribute(String attName) { return getId().getExtraAttribute(attName); }
/*    */ 
/*    */ 
/*    */   
/* 75 */   public Map getExtraAttributes() { return getId().getExtraAttributes(); }
/*    */ 
/*    */ 
/*    */   
/* 79 */   public Map getQualifiedExtraAttributes() { return getId().getQualifiedExtraAttributes(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\AbstractArtifact.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.AbstractIncludeExcludeRule,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Collection;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.id.ArtifactId;
/*    */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*    */ import org.apache.ivy.util.extendable.UnmodifiableExtendableItem;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractIncludeExcludeRule
/*    */   extends UnmodifiableExtendableItem
/*    */   implements ConfigurationAware
/*    */ {
/*    */   private ArtifactId id;
/* 38 */   private Collection confs = new ArrayList();
/*    */   
/*    */   private PatternMatcher patternMatcher;
/*    */   
/*    */   public AbstractIncludeExcludeRule(ArtifactId aid, PatternMatcher matcher, Map extraAttributes) {
/* 43 */     super(null, extraAttributes);
/* 44 */     this.id = aid;
/* 45 */     this.patternMatcher = matcher;
/* 46 */     initStandardAttributes();
/*    */   }
/*    */   
/*    */   private void initStandardAttributes() {
/* 50 */     setStandardAttribute(""organisation"", this.id.getModuleId().getOrganisation());
/* 51 */     setStandardAttribute(""module"", this.id.getModuleId().getName());
/* 52 */     setStandardAttribute(""artifact"", this.id.getName());
/* 53 */     setStandardAttribute(""type"", this.id.getType());
/* 54 */     setStandardAttribute(""ext"", this.id.getExt());
/* 55 */     setStandardAttribute(""matcher"", this.patternMatcher.getName());
/*    */   }
/*    */   
/*    */   public boolean equals(Object obj) {
/* 59 */     if (!(obj instanceof AbstractIncludeExcludeRule)) {
/* 60 */       return false;
/*    */     }
/* 62 */     AbstractIncludeExcludeRule rule = (AbstractIncludeExcludeRule)obj;
/* 63 */     return getId().equals(rule.getId());
/*    */   }
/*    */ 
/*    */   
/* 67 */   public int hashCode() { return getId().hashCode(); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 76 */   public void addConfiguration(String conf) { this.confs.add(conf); }
/*    */ 
/*    */ 
/*    */   
/* 80 */   public ArtifactId getId() { return this.id; }
/*    */ 
/*    */ 
/*    */   
/* 84 */   public String[] getConfigurations() { return (String[])this.confs.toArray((Object[])new String[this.confs.size()]); }
/*    */ 
/*    */ 
/*    */   
/* 88 */   public PatternMatcher getMatcher() { return this.patternMatcher; }
/*    */ 
/*    */ 
/*    */   
/* 92 */   public String toString() { return this.id + ""("" + this.confs + "")""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\AbstractIncludeExcludeRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.Artifact,"package org.apache.ivy.core.module.descriptor;
import java.net.URL;
import java.util.Date;
import org.apache.ivy.core.module.id.ArtifactRevisionId;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface Artifact extends ExtendableItem {
  ModuleRevisionId getModuleRevisionId();
  Date getPublicationDate();
  String getName();
  String getType();
  String getExt();
  URL getUrl();
  String[] getConfigurations();
  ArtifactRevisionId getId();
  boolean isMetadata();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\Artifact.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.Configuration,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.util.extendable.DefaultExtendableItem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Configuration
/*     */   extends DefaultExtendableItem
/*     */ {
/*     */   private String name;
/*     */   private String description;
/*     */   private String[] extendsFrom;
/*     */   private Visibility visibility;
/*     */   
/*     */   public static final class Visibility
/*     */   {
/*  30 */     public static final Visibility PUBLIC = new Visibility(""public"");
/*     */     
/*  32 */     public static final Visibility PRIVATE = new Visibility(""private"");
/*     */     
/*     */     public static Visibility getVisibility(String name) {
/*  35 */       if (""private"".equals(name))
/*  36 */         return PRIVATE; 
/*  37 */       if (""public"".equals(name)) {
/*  38 */         return PUBLIC;
/*     */       }
/*  40 */       throw new IllegalArgumentException(""unknwon visibility "" + name);
/*     */     }
/*     */ 
/*     */     
/*     */     private String name;
/*     */ 
/*     */     
/*  47 */     private Visibility(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/*  51 */     public String toString() { return this.name; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean transitive = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String deprecated;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   public Configuration(String name) { this(name, Visibility.PUBLIC, null, null, true, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Configuration(String name, Visibility visibility, String description, String[] ext, boolean transitive, String deprecated) {
/*  88 */     if (name == null) {
/*  89 */       throw new NullPointerException(""null configuration name not allowed"");
/*     */     }
/*  91 */     if (visibility == null) {
/*  92 */       throw new NullPointerException(""null visibility not allowed"");
/*     */     }
/*  94 */     this.name = name;
/*  95 */     this.visibility = visibility;
/*  96 */     this.description = description;
/*  97 */     if (ext == null) {
/*  98 */       this.extendsFrom = new String[0];
/*     */     } else {
/* 100 */       this.extendsFrom = new String[ext.length];
/* 101 */       for (int i = 0; i < ext.length; i++) {
/* 102 */         this.extendsFrom[i] = ext[i].trim();
/*     */       }
/*     */     } 
/* 105 */     this.transitive = transitive;
/* 106 */     this.deprecated = deprecated;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public String getDeprecated() { return this.deprecated; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public String[] getExtends() { return this.extendsFrom; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public Visibility getVisibility() { return this.visibility; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public final boolean isTransitive() { return this.transitive; }
/*     */ 
/*     */ 
/*     */   
/* 153 */   public String toString() { return this.name; }
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 157 */     if (!(obj instanceof Configuration)) {
/* 158 */       return false;
/*     */     }
/* 160 */     return ((Configuration)obj).getName().equals(getName());
/*     */   }
/*     */ 
/*     */   
/* 164 */   public int hashCode() { return getName().hashCode(); }
/*     */ 
/*     */   
/*     */   public void replaceWildcards(ModuleDescriptor md) {
/* 168 */     if (this != md.getConfiguration(this.name)) {
/* 169 */       throw new IllegalArgumentException(""The given ModuleDescriptor doesn't own this configuration!"");
/*     */     }
/*     */ 
/*     */     
/* 173 */     Configuration[] configs = md.getConfigurations();
/*     */     
/* 175 */     Set newExtends = new LinkedHashSet();
/* 176 */     for (int j = 0; j < this.extendsFrom.length; j++) {
/* 177 */       if (""*"".equals(this.extendsFrom[j])) {
/* 178 */         addOther(configs, null, newExtends);
/* 179 */       } else if (""*(public)"".equals(this.extendsFrom[j])) {
/* 180 */         addOther(configs, Visibility.PUBLIC, newExtends);
/* 181 */       } else if (""*(private)"".equals(this.extendsFrom[j])) {
/* 182 */         addOther(configs, Visibility.PRIVATE, newExtends);
/*     */       } else {
/* 184 */         newExtends.add(this.extendsFrom[j]);
/*     */       } 
/*     */     } 
/*     */     
/* 188 */     this.extendsFrom = newExtends.toArray(new String[newExtends.size()]);
/*     */   }
/*     */   
/*     */   private void addOther(Configuration[] allConfigs, Visibility visibility, Set configs) {
/* 192 */     for (int i = 0; i < allConfigs.length; i++) {
/* 193 */       String currentName = allConfigs[i].getName();
/* 194 */       if (!this.name.equals(currentName) && (visibility == null || visibility.equals(allConfigs[i].getVisibility())))
/*     */       {
/* 196 */         configs.add(currentName);
/*     */       }
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\Configuration.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.ConfigurationAware,"package org.apache.ivy.core.module.descriptor;
public interface ConfigurationAware {
  String[] getConfigurations();
  void addConfiguration(String paramString);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\ConfigurationAware.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultArtifact,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.net.URL;
/*     */ import java.util.Date;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.id.ArtifactRevisionId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultArtifact
/*     */   extends AbstractArtifact
/*     */ {
/*     */   private Date publicationDate;
/*     */   private ArtifactRevisionId arid;
/*     */   private URL url;
/*     */   
/*  33 */   public static Artifact newIvyArtifact(ModuleRevisionId mrid, Date pubDate) { return new DefaultArtifact(mrid, pubDate, ""ivy"", ""ivy"", ""xml"", true); }
/*     */ 
/*     */ 
/*     */   
/*  37 */   public static Artifact newPomArtifact(ModuleRevisionId mrid, Date pubDate) { return new DefaultArtifact(mrid, pubDate, mrid.getName(), ""pom"", ""pom"", true); }
/*     */ 
/*     */ 
/*     */   
/*  41 */   public static Artifact cloneWithAnotherExt(Artifact artifact, String newExt) { return cloneWithAnotherTypeAndExt(artifact, artifact.getType(), newExt); }
/*     */ 
/*     */ 
/*     */   
/*  45 */   public static Artifact cloneWithAnotherType(Artifact artifact, String newType) { return cloneWithAnotherTypeAndExt(artifact, newType, artifact.getExt()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   public static Artifact cloneWithAnotherTypeAndExt(Artifact artifact, String newType, String newExt) { return new DefaultArtifact(ArtifactRevisionId.newInstance(artifact.getModuleRevisionId(), artifact.getName(), newType, newExt, artifact.getQualifiedExtraAttributes()), artifact.getPublicationDate(), artifact.getUrl(), artifact.isMetadata()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  60 */   public static Artifact cloneWithAnotherName(Artifact artifact, String name) { return new DefaultArtifact(ArtifactRevisionId.newInstance(artifact.getModuleRevisionId(), name, artifact.getType(), artifact.getExt(), artifact.getQualifiedExtraAttributes()), artifact.getPublicationDate(), artifact.getUrl(), artifact.isMetadata()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   public static Artifact cloneWithAnotherMrid(Artifact artifact, ModuleRevisionId mrid) { return new DefaultArtifact(ArtifactRevisionId.newInstance(mrid, artifact.getName(), artifact.getType(), artifact.getExt(), artifact.getQualifiedExtraAttributes()), artifact.getPublicationDate(), artifact.getUrl(), artifact.isMetadata()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isMetadata = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public DefaultArtifact(ModuleRevisionId mrid, Date publicationDate, String name, String type, String ext) { this(mrid, publicationDate, name, type, ext, null, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultArtifact(ModuleRevisionId mrid, Date publicationDate, String name, String type, String ext, boolean isMetadata) {
/*  94 */     this(mrid, publicationDate, name, type, ext, null, null);
/*  95 */     this.isMetadata = isMetadata;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public DefaultArtifact(ModuleRevisionId mrid, Date publicationDate, String name, String type, String ext, Map extraAttributes) { this(mrid, publicationDate, name, type, ext, null, extraAttributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public DefaultArtifact(ModuleRevisionId mrid, Date publicationDate, String name, String type, String ext, URL url, Map extraAttributes) { this(ArtifactRevisionId.newInstance(mrid, name, type, ext, extraAttributes), publicationDate, url, false); }
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultArtifact(ArtifactRevisionId arid, Date publicationDate, URL url, boolean isMetadata) {
/* 110 */     if (arid == null) {
/* 111 */       throw new NullPointerException(""null arid not allowed"");
/*     */     }
/* 113 */     if (publicationDate == null) {
/* 114 */       publicationDate = new Date();
/*     */     }
/* 116 */     this.publicationDate = publicationDate;
/* 117 */     this.arid = arid;
/* 118 */     this.url = url;
/* 119 */     this.isMetadata = isMetadata;
/*     */   }
/*     */ 
/*     */   
/* 123 */   public ModuleRevisionId getModuleRevisionId() { return this.arid.getModuleRevisionId(); }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public String getName() { return this.arid.getName(); }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public Date getPublicationDate() { return this.publicationDate; }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public String getType() { return this.arid.getType(); }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getExt() { return this.arid.getExt(); }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public ArtifactRevisionId getId() { return this.arid; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public String[] getConfigurations() { return new String[0]; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public URL getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public boolean isMetadata() { return this.isMetadata; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultArtifact.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultDependencyArtifactDescriptor,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.extendable.UnmodifiableExtendableItem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultDependencyArtifactDescriptor
/*     */   extends UnmodifiableExtendableItem
/*     */   implements DependencyArtifactDescriptor, ConfigurationAware
/*     */ {
/*  32 */   private Collection confs = new ArrayList();
/*     */ 
/*     */   
/*     */   private URL url;
/*     */ 
/*     */   
/*     */   private String name;
/*     */ 
/*     */   
/*     */   private String type;
/*     */ 
/*     */   
/*     */   private String ext;
/*     */ 
/*     */   
/*     */   private DependencyDescriptor dd;
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultDependencyArtifactDescriptor(DependencyDescriptor dd, String name, String type, String ext, URL url, Map extraAttributes) {
/*  52 */     super(null, extraAttributes);
/*  53 */     Checks.checkNotNull(dd, ""dd"");
/*  54 */     Checks.checkNotNull(name, ""name"");
/*  55 */     Checks.checkNotNull(type, ""type"");
/*  56 */     Checks.checkNotNull(ext, ""ext"");
/*  57 */     this.dd = dd;
/*  58 */     this.name = name;
/*  59 */     this.type = type;
/*  60 */     this.ext = ext;
/*  61 */     this.url = url;
/*  62 */     initStandardAttributes();
/*     */   }
/*     */   
/*     */   private void initStandardAttributes() {
/*  66 */     setStandardAttribute(""artifact"", getName());
/*  67 */     setStandardAttribute(""type"", getType());
/*  68 */     setStandardAttribute(""ext"", getExt());
/*  69 */     setStandardAttribute(""url"", (this.url != null) ? String.valueOf(this.url) : """");
/*     */   }
/*     */   
/*     */   public boolean equals(Object obj) {
/*  73 */     if (!(obj instanceof DependencyArtifactDescriptor)) {
/*  74 */       return false;
/*     */     }
/*  76 */     DependencyArtifactDescriptor dad = (DependencyArtifactDescriptor)obj;
/*  77 */     return getAttributes().equals(dad.getAttributes());
/*     */   }
/*     */ 
/*     */   
/*  81 */   public int hashCode() { return getAttributes().hashCode(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void addConfiguration(String conf) { this.confs.add(conf); }
/*     */ 
/*     */ 
/*     */   
/*  94 */   public DependencyDescriptor getDependencyDescriptor() { return this.dd; }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 102 */   public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/* 106 */   public String getExt() { return this.ext; }
/*     */ 
/*     */ 
/*     */   
/* 110 */   public String[] getConfigurations() { return (String[])this.confs.toArray((Object[])new String[this.confs.size()]); }
/*     */ 
/*     */ 
/*     */   
/* 114 */   public URL getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */   
/* 118 */   public String toString() { return ""DA:"" + this.name + ""."" + this.ext + ""("" + this.type + "") "" + ""("" + this.confs + "")"" + ((this.url == null) ? """" : this.url.toString()); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultDependencyArtifactDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.module.id.ArtifactId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.matcher.MatcherHelper;
/*     */ import org.apache.ivy.plugins.namespace.NameSpaceHelper;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.namespace.NamespaceTransformer;
/*     */ import org.apache.ivy.util.Checks;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultDependencyDescriptor
/*     */   implements DependencyDescriptor
/*     */ {
/*  48 */   private static final Pattern SELF_FALLBACK_PATTERN = Pattern.compile(""@(\\(.*\\))?"");
/*     */   
/*  50 */   private static final Pattern THIS_FALLBACK_PATTERN = Pattern.compile(""#(\\(.*\\))?"");
/*     */ 
/*     */ 
/*     */   
/*     */   private final ModuleRevisionId revId;
/*     */ 
/*     */ 
/*     */   
/*     */   private ModuleRevisionId dynamicRevId;
/*     */ 
/*     */ 
/*     */   
/*     */   public static DependencyDescriptor transformInstance(DependencyDescriptor dd, Namespace ns) {
/*  63 */     NamespaceTransformer t = ns.getToSystemTransformer();
/*  64 */     if (t.isIdentity()) {
/*  65 */       return dd;
/*     */     }
/*  67 */     DefaultDependencyDescriptor newdd = transformInstance(dd, t, false);
/*  68 */     newdd.namespace = ns;
/*  69 */     return newdd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static DefaultDependencyDescriptor transformInstance(DependencyDescriptor dd, NamespaceTransformer t, boolean fromSystem) {
/*  83 */     ModuleRevisionId transformParentId = t.transform(dd.getParentRevisionId());
/*  84 */     ModuleRevisionId transformMrid = t.transform(dd.getDependencyRevisionId());
/*  85 */     ModuleRevisionId transformDynamicMrid = t.transform(dd.getDynamicConstraintDependencyRevisionId());
/*     */     
/*  87 */     DefaultDependencyDescriptor newdd = new DefaultDependencyDescriptor(null, transformMrid, transformDynamicMrid, dd.isForce(), dd.isChanging(), dd.isTransitive());
/*     */ 
/*     */     
/*  90 */     newdd.parentId = transformParentId;
/*  91 */     String[] moduleConfs = dd.getModuleConfigurations();
/*  92 */     if (moduleConfs.length == 1 && ""*"".equals(moduleConfs[0])) {
/*  93 */       if (dd instanceof DefaultDependencyDescriptor) {
/*  94 */         DefaultDependencyDescriptor ddd = (DefaultDependencyDescriptor)dd;
/*  95 */         newdd.confs = new LinkedHashMap(ddd.confs);
/*  96 */         newdd.setExcludeRules(new LinkedHashMap(ddd.getExcludeRules()));
/*  97 */         newdd.setIncludeRules(new LinkedHashMap(ddd.getIncludeRules()));
/*  98 */         newdd.setDependencyArtifacts(new LinkedHashMap(ddd.getDependencyArtifacts()));
/*     */       } else {
/* 100 */         throw new IllegalArgumentException(""dependency descriptor transformation does not support * module confs with descriptors which aren't DefaultDependencyDescriptor"");
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 105 */       for (int i = 0; i < moduleConfs.length; i++) {
/* 106 */         newdd.confs.put(moduleConfs[i], new ArrayList(Arrays.asList((Object[])dd.getDependencyConfigurations(moduleConfs[i]))));
/*     */         
/* 108 */         newdd.getExcludeRules().put(moduleConfs[i], new ArrayList(Arrays.asList((Object[])dd.getExcludeRules(moduleConfs[i]))));
/*     */         
/* 110 */         newdd.getIncludeRules().put(moduleConfs[i], new ArrayList(Arrays.asList((Object[])dd.getIncludeRules(moduleConfs[i]))));
/*     */         
/* 112 */         newdd.getDependencyArtifacts().put(moduleConfs[i], new ArrayList(Arrays.asList((Object[])dd.getDependencyArtifacts(moduleConfs[i]))));
/*     */       } 
/*     */     } 
/*     */     
/* 116 */     if (fromSystem) {
/* 117 */       newdd.asSystem = dd;
/*     */     }
/* 119 */     return newdd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   private Map confs = new LinkedHashMap();
/*     */ 
/*     */ 
/*     */   
/*     */   private Map dependencyArtifacts;
/*     */ 
/*     */ 
/*     */   
/*     */   private Map includeRules;
/*     */ 
/*     */ 
/*     */   
/*     */   private Map excludeRules;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isForce;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isChanging;
/*     */ 
/*     */ 
/*     */   
/*     */   private ModuleRevisionId parentId;
/*     */ 
/*     */   
/*     */   private boolean isTransitive = true;
/*     */ 
/*     */   
/* 156 */   private Namespace namespace = null;
/*     */   
/*     */   private final ModuleDescriptor md;
/*     */   
/* 160 */   private DependencyDescriptor asSystem = this;
/*     */   
/*     */   private DefaultDependencyDescriptor(DefaultDependencyDescriptor dd, ModuleRevisionId revision) {
/* 163 */     Checks.checkNotNull(dd, ""dd"");
/* 164 */     Checks.checkNotNull(revision, ""revision"");
/*     */     
/* 166 */     if (!revision.getModuleId().equals(dd.getDependencyId())) {
/* 167 */       throw new IllegalArgumentException(""new ModuleRevisionId MUST have the same ModuleId as original one. original = "" + dd.getDependencyId() + "" new = "" + revision.getModuleId());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 172 */     this.md = dd.md;
/* 173 */     this.parentId = dd.parentId;
/* 174 */     this.revId = revision;
/* 175 */     this.dynamicRevId = dd.dynamicRevId;
/* 176 */     this.isForce = dd.isForce;
/* 177 */     this.isChanging = dd.isChanging;
/* 178 */     this.isTransitive = dd.isTransitive;
/* 179 */     this.namespace = dd.namespace;
/* 180 */     this.confs.putAll(dd.confs);
/* 181 */     this.excludeRules = (dd.excludeRules == null) ? null : new LinkedHashMap(dd.excludeRules);
/* 182 */     this.includeRules = (dd.includeRules == null) ? null : new LinkedHashMap(dd.includeRules);
/* 183 */     this.dependencyArtifacts = (dd.dependencyArtifacts == null) ? null : new LinkedHashMap(dd.dependencyArtifacts);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public DefaultDependencyDescriptor(ModuleDescriptor md, ModuleRevisionId mrid, boolean force, boolean changing, boolean transitive) { this(md, mrid, mrid, force, changing, transitive); }
/*     */ 
/*     */ 
/*     */   
/* 194 */   public DefaultDependencyDescriptor(ModuleRevisionId mrid, boolean force) { this(mrid, force, false); }
/*     */ 
/*     */ 
/*     */   
/* 198 */   public DefaultDependencyDescriptor(ModuleRevisionId mrid, boolean force, boolean changing) { this(null, mrid, mrid, force, changing, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultDependencyDescriptor(ModuleDescriptor md, ModuleRevisionId mrid, ModuleRevisionId dynamicConstraint, boolean force, boolean changing, boolean transitive) {
/* 204 */     Checks.checkNotNull(mrid, ""mrid"");
/* 205 */     Checks.checkNotNull(dynamicConstraint, ""dynamicConstraint"");
/*     */     
/* 207 */     this.md = md;
/* 208 */     this.revId = mrid;
/* 209 */     this.dynamicRevId = dynamicConstraint;
/* 210 */     this.isForce = force;
/* 211 */     this.isChanging = changing;
/* 212 */     this.isTransitive = transitive;
/*     */   }
/*     */ 
/*     */   
/* 216 */   public ModuleId getDependencyId() { return getDependencyRevisionId().getModuleId(); }
/*     */ 
/*     */ 
/*     */   
/* 220 */   public ModuleRevisionId getDependencyRevisionId() { return this.revId; }
/*     */ 
/*     */ 
/*     */   
/* 224 */   public ModuleRevisionId getDynamicConstraintDependencyRevisionId() { return this.dynamicRevId; }
/*     */ 
/*     */ 
/*     */   
/* 228 */   public String[] getModuleConfigurations() { return (String[])this.confs.keySet().toArray((Object[])new String[this.confs.keySet().size()]); }
/*     */ 
/*     */ 
/*     */   
/* 232 */   public String[] getDependencyConfigurations(String moduleConfiguration) { return getDependencyConfigurations(moduleConfiguration, moduleConfiguration); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getDependencyConfigurations(String moduleConfiguration, String requestedConfiguration) {
/* 247 */     List confsList = (List)this.confs.get(moduleConfiguration);
/* 248 */     if (confsList == null)
/*     */     {
/* 250 */       confsList = (List)this.confs.get(""%"");
/*     */     }
/* 252 */     List defConfs = (List)this.confs.get(""*"");
/* 253 */     Collection ret = new LinkedHashSet();
/* 254 */     if (confsList != null) {
/* 255 */       ret.addAll(confsList);
/*     */     }
/* 257 */     if (defConfs != null) {
/* 258 */       ret.addAll(defConfs);
/*     */     }
/*     */     
/* 261 */     Collection replacedRet = new LinkedHashSet();
/* 262 */     for (Iterator iter = ret.iterator(); iter.hasNext(); ) {
/* 263 */       String c = iter.next();
/* 264 */       String replacedConf = replaceSelfFallbackPattern(c, moduleConfiguration);
/* 265 */       if (replacedConf == null) {
/* 266 */         replacedConf = replaceThisFallbackPattern(c, requestedConfiguration);
/*     */       }
/* 268 */       if (replacedConf != null) {
/* 269 */         c = replacedConf;
/*     */       }
/* 271 */       replacedRet.add(c);
/*     */     } 
/* 273 */     ret = replacedRet;
/* 274 */     if (ret.remove(""*"")) {
/* 275 */       StringBuffer r = new StringBuffer(""*"");
/*     */       
/* 277 */       for (Iterator iter = ret.iterator(); iter.hasNext(); ) {
/* 278 */         String c = iter.next();
/* 279 */         if (c.startsWith(""!"")) {
/* 280 */           r.append(c);
/*     */         }
/*     */       } 
/* 283 */       return new String[] { r.toString() };
/*     */     } 
/* 285 */     return ret.toArray(new String[ret.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 290 */   protected static String replaceSelfFallbackPattern(String conf, String moduleConfiguration) { return replaceFallbackConfigurationPattern(SELF_FALLBACK_PATTERN, conf, moduleConfiguration); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 296 */   protected static String replaceThisFallbackPattern(String conf, String requestedConfiguration) { return replaceFallbackConfigurationPattern(THIS_FALLBACK_PATTERN, conf, requestedConfiguration); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static String replaceFallbackConfigurationPattern(Pattern pattern, String conf, String moduleConfiguration) {
/* 313 */     Matcher matcher = pattern.matcher(conf);
/* 314 */     if (matcher.matches()) {
/* 315 */       if (matcher.group(1) != null) {
/* 316 */         return moduleConfiguration + matcher.group(1);
/*     */       }
/* 318 */       return moduleConfiguration;
/*     */     } 
/*     */     
/* 321 */     return null;
/*     */   }
/*     */   
/*     */   public String[] getDependencyConfigurations(String[] moduleConfigurations) {
/* 325 */     Set confs = new LinkedHashSet();
/* 326 */     for (int i = 0; i < moduleConfigurations.length; i++) {
/* 327 */       confs.addAll(Arrays.asList(getDependencyConfigurations(moduleConfigurations[i])));
/*     */     }
/* 329 */     if (confs.contains(""*"")) {
/* 330 */       return new String[] { ""*"" };
/*     */     }
/* 332 */     return (String[])confs.toArray((Object[])new String[confs.size()]);
/*     */   }
/*     */   
/*     */   public DependencyArtifactDescriptor[] getDependencyArtifacts(String moduleConfiguration) {
/* 336 */     Collection artifacts = getCollectionForConfiguration(moduleConfiguration, this.dependencyArtifacts);
/*     */     
/* 338 */     return (DependencyArtifactDescriptor[])artifacts.toArray((Object[])new DependencyArtifactDescriptor[artifacts.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   public IncludeRule[] getIncludeRules(String moduleConfiguration) {
/* 343 */     Collection rules = getCollectionForConfiguration(moduleConfiguration, this.includeRules);
/* 344 */     return (IncludeRule[])rules.toArray((Object[])new IncludeRule[rules.size()]);
/*     */   }
/*     */   
/*     */   public ExcludeRule[] getExcludeRules(String moduleConfiguration) {
/* 348 */     Collection rules = getCollectionForConfiguration(moduleConfiguration, this.excludeRules);
/* 349 */     return (ExcludeRule[])rules.toArray((Object[])new ExcludeRule[rules.size()]);
/*     */   }
/*     */   
/*     */   private Set getCollectionForConfiguration(String moduleConfiguration, Map collectionMap) {
/* 353 */     if (collectionMap == null || collectionMap.isEmpty()) {
/* 354 */       return Collections.EMPTY_SET;
/*     */     }
/* 356 */     Collection artifacts = (Collection)collectionMap.get(moduleConfiguration);
/* 357 */     Collection defArtifacts = (Collection)collectionMap.get(""*"");
/* 358 */     Set ret = new LinkedHashSet();
/* 359 */     if (artifacts != null) {
/* 360 */       ret.addAll(artifacts);
/*     */     }
/* 362 */     if (defArtifacts != null) {
/* 363 */       ret.addAll(defArtifacts);
/*     */     }
/* 365 */     return ret;
/*     */   }
/*     */   
/*     */   public DependencyArtifactDescriptor[] getDependencyArtifacts(String[] moduleConfigurations) {
/* 369 */     Set artifacts = new LinkedHashSet();
/* 370 */     for (int i = 0; i < moduleConfigurations.length; i++) {
/* 371 */       artifacts.addAll(Arrays.asList(getDependencyArtifacts(moduleConfigurations[i])));
/*     */     }
/* 373 */     return (DependencyArtifactDescriptor[])artifacts.toArray((Object[])new DependencyArtifactDescriptor[artifacts.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   public IncludeRule[] getIncludeRules(String[] moduleConfigurations) {
/* 378 */     Set rules = new LinkedHashSet();
/* 379 */     for (int i = 0; i < moduleConfigurations.length; i++) {
/* 380 */       rules.addAll(Arrays.asList(getIncludeRules(moduleConfigurations[i])));
/*     */     }
/* 382 */     return (IncludeRule[])rules.toArray((Object[])new IncludeRule[rules.size()]);
/*     */   }
/*     */   
/*     */   public ExcludeRule[] getExcludeRules(String[] moduleConfigurations) {
/* 386 */     Set rules = new LinkedHashSet();
/* 387 */     for (int i = 0; i < moduleConfigurations.length; i++) {
/* 388 */       rules.addAll(Arrays.asList(getExcludeRules(moduleConfigurations[i])));
/*     */     }
/* 390 */     return (ExcludeRule[])rules.toArray((Object[])new ExcludeRule[rules.size()]);
/*     */   }
/*     */   
/*     */   public DependencyArtifactDescriptor[] getAllDependencyArtifacts() {
/* 394 */     if (this.dependencyArtifacts == null) {
/* 395 */       return new DependencyArtifactDescriptor[0];
/*     */     }
/* 397 */     Set ret = mergeAll(this.dependencyArtifacts);
/* 398 */     return (DependencyArtifactDescriptor[])ret.toArray((Object[])new DependencyArtifactDescriptor[ret.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   public IncludeRule[] getAllIncludeRules() {
/* 403 */     if (this.includeRules == null) {
/* 404 */       return new IncludeRule[0];
/*     */     }
/* 406 */     Set ret = mergeAll(this.includeRules);
/* 407 */     return (IncludeRule[])ret.toArray((Object[])new IncludeRule[ret.size()]);
/*     */   }
/*     */   
/*     */   public ExcludeRule[] getAllExcludeRules() {
/* 411 */     if (this.excludeRules == null) {
/* 412 */       return new ExcludeRule[0];
/*     */     }
/* 414 */     Set ret = mergeAll(this.excludeRules);
/* 415 */     return (ExcludeRule[])ret.toArray((Object[])new ExcludeRule[ret.size()]);
/*     */   }
/*     */   
/*     */   private Set mergeAll(Map artifactsMap) {
/* 419 */     Set ret = new LinkedHashSet();
/* 420 */     for (Iterator it = artifactsMap.values().iterator(); it.hasNext(); ) {
/* 421 */       Collection artifacts = it.next();
/* 422 */       ret.addAll(artifacts);
/*     */     } 
/* 424 */     return ret;
/*     */   }
/*     */   
/*     */   public void addDependencyConfiguration(String masterConf, String depConf) {
/* 428 */     if (this.md != null && !""*"".equals(masterConf) && !""%"".equals(masterConf)) {
/* 429 */       Configuration config = this.md.getConfiguration(masterConf);
/* 430 */       if (config == null) {
/* 431 */         throw new IllegalArgumentException(""Configuration '"" + masterConf + ""' does not exist in module "" + this.md);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 436 */     List confsList = (List)this.confs.get(masterConf);
/* 437 */     if (confsList == null) {
/* 438 */       confsList = new ArrayList();
/* 439 */       this.confs.put(masterConf, confsList);
/*     */     } 
/* 441 */     if (!confsList.contains(depConf)) {
/* 442 */       confsList.add(depConf);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 447 */   public void addDependencyArtifact(String masterConf, DependencyArtifactDescriptor dad) { addObjectToConfiguration(masterConf, dad, getDependencyArtifacts()); }
/*     */ 
/*     */ 
/*     */   
/* 451 */   public void addIncludeRule(String masterConf, IncludeRule rule) { addObjectToConfiguration(masterConf, rule, getIncludeRules()); }
/*     */ 
/*     */ 
/*     */   
/* 455 */   public void addExcludeRule(String masterConf, ExcludeRule rule) { addObjectToConfiguration(masterConf, rule, getExcludeRules()); }
/*     */ 
/*     */   
/*     */   private void addObjectToConfiguration(String callerConf, Object toAdd, Map confsMap) {
/* 459 */     Collection col = (Collection)confsMap.get(callerConf);
/* 460 */     if (col == null) {
/* 461 */       col = new ArrayList();
/* 462 */       confsMap.put(callerConf, col);
/*     */     } 
/* 464 */     col.add(toAdd);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean doesExclude(String[] moduleConfigurations, ArtifactId artifactId) {
/* 472 */     if (this.namespace != null) {
/* 473 */       artifactId = NameSpaceHelper.transform(artifactId, this.namespace.getFromSystemTransformer());
/*     */     }
/*     */     
/* 476 */     ExcludeRule[] rules = getExcludeRules(moduleConfigurations);
/* 477 */     for (int i = 0; i < rules.length; i++) {
/* 478 */       if (MatcherHelper.matches(rules[i].getMatcher(), rules[i].getId(), artifactId)) {
/* 479 */         return true;
/*     */       }
/*     */     } 
/* 482 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 491 */   public boolean canExclude() { return (this.excludeRules != null && !this.excludeRules.isEmpty()); }
/*     */ 
/*     */ 
/*     */   
/* 495 */   public String toString() { return ""dependency: "" + this.revId + "" "" + this.confs; }
/*     */ 
/*     */ 
/*     */   
/* 499 */   public boolean isForce() { return this.isForce; }
/*     */ 
/*     */ 
/*     */   
/* 503 */   public ModuleRevisionId getParentRevisionId() { return (this.md != null) ? this.md.getResolvedModuleRevisionId() : this.parentId; }
/*     */ 
/*     */ 
/*     */   
/* 507 */   public boolean isChanging() { return this.isChanging; }
/*     */ 
/*     */ 
/*     */   
/* 511 */   public boolean isTransitive() { return this.isTransitive; }
/*     */ 
/*     */ 
/*     */   
/* 515 */   public Namespace getNamespace() { return this.namespace; }
/*     */ 
/*     */ 
/*     */   
/* 519 */   public String getAttribute(String attName) { return this.revId.getAttribute(attName); }
/*     */ 
/*     */ 
/*     */   
/* 523 */   public Map getAttributes() { return this.revId.getAttributes(); }
/*     */ 
/*     */ 
/*     */   
/* 527 */   public String getExtraAttribute(String attName) { return this.revId.getExtraAttribute(attName); }
/*     */ 
/*     */ 
/*     */   
/* 531 */   public Map getExtraAttributes() { return this.revId.getExtraAttributes(); }
/*     */ 
/*     */ 
/*     */   
/* 535 */   public Map getQualifiedExtraAttributes() { return this.revId.getQualifiedExtraAttributes(); }
/*     */ 
/*     */ 
/*     */   
/* 539 */   public DependencyDescriptor asSystem() { return this.asSystem; }
/*     */ 
/*     */ 
/*     */   
/* 543 */   private void setDependencyArtifacts(Map dependencyArtifacts) { this.dependencyArtifacts = dependencyArtifacts; }
/*     */ 
/*     */   
/*     */   private Map getDependencyArtifacts() {
/* 547 */     if (this.dependencyArtifacts == null) {
/* 548 */       this.dependencyArtifacts = new LinkedHashMap();
/*     */     }
/* 550 */     return this.dependencyArtifacts;
/*     */   }
/*     */ 
/*     */   
/* 554 */   private void setIncludeRules(Map includeRules) { this.includeRules = includeRules; }
/*     */ 
/*     */   
/*     */   private Map getIncludeRules() {
/* 558 */     if (this.includeRules == null) {
/* 559 */       this.includeRules = new LinkedHashMap();
/*     */     }
/* 561 */     return this.includeRules;
/*     */   }
/*     */ 
/*     */   
/* 565 */   private void setExcludeRules(Map excludeRules) { this.excludeRules = excludeRules; }
/*     */ 
/*     */   
/*     */   private Map getExcludeRules() {
/* 569 */     if (this.excludeRules == null) {
/* 570 */       this.excludeRules = new LinkedHashMap();
/*     */     }
/* 572 */     return this.excludeRules;
/*     */   }
/*     */ 
/*     */   
/* 576 */   public DependencyDescriptor clone(ModuleRevisionId revision) { return new DefaultDependencyDescriptor(this, revision); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultDependencyDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultExcludeRule,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.id.ArtifactId;
/*    */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultExcludeRule
/*    */   extends AbstractIncludeExcludeRule
/*    */   implements ExcludeRule
/*    */ {
/* 28 */   public DefaultExcludeRule(ArtifactId aid, PatternMatcher matcher, Map extraAttributes) { super(aid, matcher, extraAttributes); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public String toString() { return ""E:"" + super.toString(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultExcludeRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultIncludeRule,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.id.ArtifactId;
/*    */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultIncludeRule
/*    */   extends AbstractIncludeExcludeRule
/*    */   implements IncludeRule
/*    */ {
/* 28 */   public DefaultIncludeRule(ArtifactId aid, PatternMatcher matcher, Map extraAttributes) { super(aid, matcher, extraAttributes); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public String toString() { return ""I:"" + super.toString(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultIncludeRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.Stack;
/*     */ import org.apache.ivy.core.module.id.ArtifactId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.module.id.ModuleRules;
/*     */ import org.apache.ivy.core.module.status.StatusManager;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.matcher.MapMatcher;
/*     */ import org.apache.ivy.plugins.matcher.MatcherHelper;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.namespace.NameSpaceHelper;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.namespace.NamespaceTransformer;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultModuleDescriptor
/*     */   implements ModuleDescriptor
/*     */ {
/*     */   private ModuleRevisionId revId;
/*     */   private ModuleRevisionId resolvedRevId;
/*     */   
/*  61 */   public static DefaultModuleDescriptor newDefaultInstance(ModuleRevisionId mrid) { return newDefaultInstance(mrid, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static DefaultModuleDescriptor newCallerInstance(ModuleRevisionId mrid, String[] confs, boolean transitive, boolean changing) {
/*  66 */     DefaultModuleDescriptor moduleDescriptor = new DefaultModuleDescriptor(ModuleRevisionId.newInstance(mrid.getOrganisation(), mrid.getName() + ""-caller"", ""working""), ""integration"", null, true);
/*     */ 
/*     */     
/*  69 */     for (int i = 0; i < confs.length; i++) {
/*  70 */       moduleDescriptor.addConfiguration(new Configuration(confs[i]));
/*     */     }
/*  72 */     moduleDescriptor.setLastModified(System.currentTimeMillis());
/*  73 */     DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(moduleDescriptor, mrid, true, changing, transitive);
/*     */     
/*  75 */     for (int j = 0; j < confs.length; j++) {
/*  76 */       dd.addDependencyConfiguration(confs[j], confs[j]);
/*     */     }
/*  78 */     moduleDescriptor.addDependency(dd);
/*     */     
/*  80 */     return moduleDescriptor;
/*     */   }
/*     */ 
/*     */   
/*     */   public static DefaultModuleDescriptor newCallerInstance(ModuleRevisionId[] mrid, boolean transitive, boolean changing) {
/*  85 */     DefaultModuleDescriptor moduleDescriptor = new DefaultModuleDescriptor(ModuleRevisionId.newInstance(""caller"", ""all-caller"", ""working""), ""integration"", null, true);
/*     */     
/*  87 */     moduleDescriptor.addConfiguration(new Configuration(""default""));
/*  88 */     moduleDescriptor.setLastModified(System.currentTimeMillis());
/*  89 */     for (int i = 0; i < mrid.length; i++) {
/*  90 */       DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(moduleDescriptor, mrid[i], true, changing, transitive);
/*     */       
/*  92 */       dd.addDependencyConfiguration(""default"", ""*"");
/*  93 */       moduleDescriptor.addDependency(dd);
/*     */     } 
/*     */     
/*  96 */     return moduleDescriptor;
/*     */   }
/*     */ 
/*     */   
/*     */   public static DefaultModuleDescriptor newDefaultInstance(ModuleRevisionId mrid, DependencyArtifactDescriptor[] artifacts) {
/* 101 */     DefaultModuleDescriptor moduleDescriptor = new DefaultModuleDescriptor(mrid, ""release"", null, true);
/*     */     
/* 103 */     moduleDescriptor.addConfiguration(new Configuration(""default""));
/* 104 */     if (artifacts != null && artifacts.length > 0) {
/* 105 */       for (int i = 0; i < artifacts.length; i++) {
/* 106 */         moduleDescriptor.addArtifact(""default"", new MDArtifact(moduleDescriptor, artifacts[i].getName(), artifacts[i].getType(), artifacts[i].getExt(), artifacts[i].getUrl(), null));
/*     */       }
/*     */     }
/*     */     else {
/*     */       
/* 111 */       moduleDescriptor.addArtifact(""default"", new MDArtifact(moduleDescriptor, mrid.getName(), ""jar"", ""jar""));
/*     */     } 
/*     */     
/* 114 */     moduleDescriptor.setLastModified(System.currentTimeMillis());
/* 115 */     return moduleDescriptor;
/*     */   }
/*     */ 
/*     */   
/*     */   public static DefaultModuleDescriptor newBasicInstance(ModuleRevisionId mrid, Date publicationDate) {
/* 120 */     DefaultModuleDescriptor moduleDescriptor = new DefaultModuleDescriptor(mrid, ""release"", publicationDate, false);
/*     */     
/* 122 */     moduleDescriptor.addConfiguration(new Configuration(""default""));
/* 123 */     moduleDescriptor.addArtifact(""default"", new MDArtifact(moduleDescriptor, mrid.getName(), ""jar"", ""jar""));
/*     */     
/* 125 */     return moduleDescriptor;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleDescriptor transformInstance(ModuleDescriptor md, Namespace ns) {
/* 139 */     NamespaceTransformer t = ns.getToSystemTransformer();
/* 140 */     if (t.isIdentity()) {
/* 141 */       return md;
/*     */     }
/* 143 */     DefaultModuleDescriptor nmd = new DefaultModuleDescriptor(md.getParser(), md.getResource());
/* 144 */     nmd.revId = t.transform(md.getModuleRevisionId());
/* 145 */     nmd.resolvedRevId = t.transform(md.getResolvedModuleRevisionId());
/* 146 */     nmd.status = md.getStatus();
/* 147 */     nmd.publicationDate = md.getPublicationDate();
/* 148 */     nmd.resolvedPublicationDate = md.getResolvedPublicationDate();
/* 149 */     DependencyDescriptor[] dd = md.getDependencies();
/* 150 */     for (int i = 0; i < dd.length; i++) {
/* 151 */       nmd.dependencies.add(NameSpaceHelper.toSystem(dd[i], ns));
/*     */     }
/* 153 */     Configuration[] confs = md.getConfigurations();
/* 154 */     for (int i = 0; i < confs.length; i++) {
/* 155 */       nmd.configurations.put(confs[i].getName(), confs[i]);
/* 156 */       Artifact[] arts = md.getArtifacts(confs[i].getName());
/* 157 */       for (int j = 0; j < arts.length; j++) {
/* 158 */         nmd.addArtifact(confs[i].getName(), NameSpaceHelper.transform(arts[j], t));
/*     */       }
/*     */     } 
/* 161 */     nmd.setDefault(md.isDefault());
/* 162 */     if (md instanceof DefaultModuleDescriptor) {
/* 163 */       DefaultModuleDescriptor dmd = (DefaultModuleDescriptor)md;
/* 164 */       nmd.conflictManagers = (ModuleRules)dmd.conflictManagers.clone();
/* 165 */       nmd.dependencyDescriptorMediators = (ModuleRules)dmd.dependencyDescriptorMediators.clone();
/*     */     } else {
/*     */       
/* 168 */       Message.warn(""transformed module descriptor is not a default module descriptor: impossible to copy conflict manager and version mediation configuration: "" + md);
/*     */     } 
/*     */ 
/*     */     
/* 172 */     nmd.licenses.addAll(Arrays.asList(md.getLicenses()));
/* 173 */     nmd.homePage = md.getHomePage();
/* 174 */     nmd.description = md.getDescription();
/* 175 */     nmd.lastModified = md.getLastModified();
/* 176 */     nmd.extraAttributesNamespaces = md.getExtraAttributesNamespaces();
/* 177 */     nmd.extraInfo = md.getExtraInfo();
/* 178 */     nmd.namespace = ns;
/*     */     
/* 180 */     return nmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   private String status = StatusManager.getCurrent().getDefaultStatus();
/*     */   
/*     */   private Date publicationDate;
/*     */   
/*     */   private Date resolvedPublicationDate;
/*     */   
/* 193 */   private List dependencies = new ArrayList();
/*     */   
/* 195 */   private Map configurations = new LinkedHashMap();
/*     */   
/* 197 */   private Map artifactsByConf = new HashMap();
/*     */   
/* 199 */   private Collection artifacts = new LinkedHashSet();
/*     */ 
/*     */   
/*     */   private boolean isDefault = false;
/*     */ 
/*     */   
/* 205 */   private ModuleRules conflictManagers = new ModuleRules();
/*     */   
/* 207 */   private ModuleRules dependencyDescriptorMediators = new ModuleRules();
/*     */   
/* 209 */   private List licenses = new ArrayList();
/*     */   
/*     */   private String homePage;
/*     */   
/* 213 */   private String description = """";
/*     */   
/* 215 */   private long lastModified = 0L;
/*     */   
/*     */   private Namespace namespace;
/*     */   
/*     */   private boolean mappingOverride;
/*     */   
/*     */   private ModuleDescriptorParser parser;
/*     */   
/*     */   private Resource resource;
/*     */   
/* 225 */   private List excludeRules = new ArrayList();
/*     */   
/*     */   private Artifact metadataArtifact;
/*     */   
/* 229 */   private Map extraAttributesNamespaces = new LinkedHashMap();
/*     */   
/* 231 */   private Map extraInfo = new HashMap();
/*     */ 
/*     */   
/* 234 */   public DefaultModuleDescriptor(ModuleRevisionId id, String status, Date pubDate) { this(id, status, pubDate, false); }
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultModuleDescriptor(ModuleRevisionId id, String status, Date pubDate, boolean isDefault) {
/* 239 */     if (id == null) {
/* 240 */       throw new NullPointerException(""null module revision id not allowed"");
/*     */     }
/* 242 */     if (status == null) {
/* 243 */       throw new NullPointerException(""null status not allowed"");
/*     */     }
/* 245 */     this.revId = id;
/* 246 */     this.resolvedRevId = id;
/* 247 */     this.status = status;
/* 248 */     this.publicationDate = pubDate;
/* 249 */     this.resolvedPublicationDate = (this.publicationDate == null) ? new Date() : this.publicationDate;
/* 250 */     this.isDefault = isDefault;
/* 251 */     this.parser = (ModuleDescriptorParser)XmlModuleDescriptorParser.getInstance();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DefaultModuleDescriptor(ModuleDescriptorParser parser, Resource res) {
/* 259 */     this.parser = parser;
/* 260 */     this.resource = res;
/*     */   }
/*     */   
/*     */   public Artifact getMetadataArtifact() {
/* 264 */     if (this.metadataArtifact == null) {
/* 265 */       this.metadataArtifact = DefaultArtifact.newIvyArtifact(this.resolvedRevId, this.resolvedPublicationDate);
/*     */     }
/*     */     
/* 268 */     return this.metadataArtifact;
/*     */   }
/*     */ 
/*     */   
/* 272 */   public void setModuleArtifact(Artifact moduleArtifact) { this.metadataArtifact = moduleArtifact; }
/*     */ 
/*     */ 
/*     */   
/* 276 */   public boolean isDefault() { return this.isDefault; }
/*     */ 
/*     */   
/*     */   public void setPublicationDate(Date publicationDate) {
/* 280 */     this.publicationDate = publicationDate;
/* 281 */     if (this.resolvedPublicationDate == null) {
/* 282 */       this.resolvedPublicationDate = (publicationDate == null) ? new Date() : publicationDate;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 287 */   public Date getPublicationDate() { return this.publicationDate; }
/*     */ 
/*     */   
/*     */   public void setResolvedPublicationDate(Date publicationDate) {
/* 291 */     if (publicationDate == null) {
/* 292 */       throw new NullPointerException(""null publication date not allowed"");
/*     */     }
/* 294 */     this.resolvedPublicationDate = publicationDate;
/*     */   }
/*     */ 
/*     */   
/* 298 */   public Date getResolvedPublicationDate() { return this.resolvedPublicationDate; }
/*     */ 
/*     */ 
/*     */   
/* 302 */   public String getRevision() { return getResolvedModuleRevisionId().getRevision(); }
/*     */ 
/*     */   
/*     */   public void setModuleRevisionId(ModuleRevisionId revId) {
/* 306 */     if (revId == null) {
/* 307 */       throw new NullPointerException(""null module revision id not allowed"");
/*     */     }
/* 309 */     this.revId = revId;
/* 310 */     if (this.resolvedRevId == null) {
/* 311 */       this.resolvedRevId = revId;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 316 */   public void setResolvedModuleRevisionId(ModuleRevisionId revId) { this.resolvedRevId = revId; }
/*     */ 
/*     */ 
/*     */   
/* 320 */   public void setStatus(String status) { this.status = status; }
/*     */ 
/*     */ 
/*     */   
/* 324 */   public void addDependency(DependencyDescriptor dependency) { this.dependencies.add(dependency); }
/*     */ 
/*     */ 
/*     */   
/* 328 */   public void addConfiguration(Configuration conf) { this.configurations.put(conf.getName(), conf); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArtifact(String conf, Artifact artifact) {
/* 339 */     if (!this.configurations.containsKey(conf)) {
/* 340 */       throw new IllegalArgumentException(""Configuration '"" + conf + ""' doesn't exist in module "" + this);
/*     */     }
/*     */ 
/*     */     
/* 344 */     Collection artifacts = (Collection)this.artifactsByConf.get(conf);
/* 345 */     if (artifacts == null) {
/* 346 */       artifacts = new ArrayList();
/* 347 */       this.artifactsByConf.put(conf, artifacts);
/*     */     } 
/* 349 */     artifacts.add(artifact);
/* 350 */     this.artifacts.add(artifact);
/*     */   }
/*     */ 
/*     */   
/* 354 */   public ModuleRevisionId getModuleRevisionId() { return this.revId; }
/*     */ 
/*     */ 
/*     */   
/* 358 */   public ModuleRevisionId getResolvedModuleRevisionId() { return this.resolvedRevId; }
/*     */ 
/*     */ 
/*     */   
/* 362 */   public String getStatus() { return this.status; }
/*     */ 
/*     */ 
/*     */   
/* 366 */   public Configuration[] getConfigurations() { return (Configuration[])this.configurations.values().toArray((Object[])new Configuration[this.configurations.size()]); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 371 */   public String[] getConfigurationsNames() { return (String[])this.configurations.keySet().toArray((Object[])new String[this.configurations.size()]); }
/*     */ 
/*     */   
/*     */   public String[] getPublicConfigurationsNames() {
/* 375 */     List ret = new ArrayList();
/* 376 */     for (Iterator iter = this.configurations.values().iterator(); iter.hasNext(); ) {
/* 377 */       Configuration conf = iter.next();
/* 378 */       if (conf.getVisibility() == Configuration.Visibility.PUBLIC) {
/* 379 */         ret.add(conf.getName());
/*     */       }
/*     */     } 
/* 382 */     return ret.toArray(new String[ret.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 390 */   public Configuration getConfiguration(String confName) { return (Configuration)this.configurations.get(confName); }
/*     */ 
/*     */   
/*     */   public Artifact[] getArtifacts(String conf) {
/* 394 */     Collection artifacts = (Collection)this.artifactsByConf.get(conf);
/* 395 */     if (artifacts == null) {
/* 396 */       return new Artifact[0];
/*     */     }
/* 398 */     return (Artifact[])artifacts.toArray((Object[])new Artifact[artifacts.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 403 */   public Artifact[] getAllArtifacts() { return (Artifact[])this.artifacts.toArray((Object[])new Artifact[this.artifacts.size()]); }
/*     */ 
/*     */ 
/*     */   
/* 407 */   public DependencyDescriptor[] getDependencies() { return (DependencyDescriptor[])this.dependencies.toArray((Object[])new DependencyDescriptor[this.dependencies.size()]); }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean dependsOn(VersionMatcher matcher, ModuleDescriptor md) {
/* 412 */     for (Iterator iter = this.dependencies.iterator(); iter.hasNext(); ) {
/* 413 */       DependencyDescriptor dd = iter.next();
/* 414 */       if (dd.getDependencyId().equals(md.getModuleRevisionId().getModuleId())) {
/* 415 */         if (md.getResolvedModuleRevisionId().getRevision() == null)
/* 416 */           return true; 
/* 417 */         if (matcher.accept(dd.getDependencyRevisionId(), md)) {
/* 418 */           return true;
/*     */         }
/*     */       } 
/*     */     } 
/* 422 */     return false;
/*     */   }
/*     */   
/*     */   public void toIvyFile(File destFile) throws ParseException, IOException {
/* 426 */     if (this.parser != null && this.resource != null) {
/* 427 */       this.parser.toIvyFile(this.resource.openStream(), this.resource, destFile, this);
/*     */     } else {
/* 429 */       XmlModuleDescriptorWriter.write(this, destFile);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 434 */   public String toString() { return ""module: "" + this.revId + "" status="" + this.status + "" publication="" + this.publicationDate + "" configurations="" + this.configurations + "" artifacts="" + this.artifactsByConf + "" dependencies="" + this.dependencies; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 440 */   public void setDefault(boolean b) { this.isDefault = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 453 */   public void addConflictManager(ModuleId moduleId, PatternMatcher matcher, ConflictManager manager) { this.conflictManagers.defineRule(new MapMatcher(moduleId.getAttributes(), matcher), manager); }
/*     */ 
/*     */ 
/*     */   
/* 457 */   public ConflictManager getConflictManager(ModuleId moduleId) { return (ConflictManager)this.conflictManagers.getRule(moduleId); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 462 */   public void addDependencyDescriptorMediator(ModuleId moduleId, PatternMatcher matcher, DependencyDescriptorMediator ddm) { this.dependencyDescriptorMediators.defineRule(new MapMatcher(moduleId.getAttributes(), matcher), ddm); }
/*     */ 
/*     */ 
/*     */   
/*     */   public DependencyDescriptor mediate(DependencyDescriptor dd) {
/* 467 */     Object[] mediators = this.dependencyDescriptorMediators.getRules(dd.getDependencyId());
/* 468 */     for (int i = 0; i < mediators.length; i++) {
/* 469 */       dd = ((DependencyDescriptorMediator)mediators[i]).mediate(dd);
/*     */     }
/* 471 */     return dd;
/*     */   }
/*     */ 
/*     */   
/* 475 */   public ModuleRules getAllDependencyDescriptorMediators() { return (ModuleRules)this.dependencyDescriptorMediators.clone(); }
/*     */ 
/*     */ 
/*     */   
/* 479 */   public void addLicense(License license) { this.licenses.add(license); }
/*     */ 
/*     */ 
/*     */   
/* 483 */   public License[] getLicenses() { return (License[])this.licenses.toArray((Object[])new License[this.licenses.size()]); }
/*     */ 
/*     */ 
/*     */   
/* 487 */   public String getHomePage() { return this.homePage; }
/*     */ 
/*     */ 
/*     */   
/* 491 */   public void setHomePage(String homePage) { this.homePage = homePage; }
/*     */ 
/*     */ 
/*     */   
/* 495 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/* 499 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */   
/* 503 */   public long getLastModified() { return this.lastModified; }
/*     */ 
/*     */ 
/*     */   
/* 507 */   public void setLastModified(long lastModified) { this.lastModified = lastModified; }
/*     */ 
/*     */ 
/*     */   
/* 511 */   public Namespace getNamespace() { return this.namespace; }
/*     */ 
/*     */   
/*     */   public boolean isNamespaceUseful() {
/* 515 */     for (Iterator iter = this.dependencies.iterator(); iter.hasNext(); ) {
/* 516 */       DependencyDescriptor dd = iter.next();
/* 517 */       if ((dd.getAllExcludeRules()).length > 0) {
/* 518 */         return true;
/*     */       }
/*     */     } 
/* 521 */     return false;
/*     */   }
/*     */ 
/*     */   
/* 525 */   public void setNamespace(Namespace ns) { this.namespace = ns; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void check() {
/* 533 */     Stack confs = new Stack();
/* 534 */     for (Iterator iter = this.configurations.values().iterator(); iter.hasNext(); ) {
/* 535 */       Configuration conf = iter.next();
/* 536 */       String[] ext = conf.getExtends();
/* 537 */       for (int i = 0; i < ext.length; i++) {
/* 538 */         confs.push(conf.getName());
/* 539 */         checkConf(confs, ext[i].trim());
/* 540 */         confs.pop();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void checkConf(Stack confs, String confName) {
/* 546 */     int index = confs.indexOf(confName);
/* 547 */     if (index != -1) {
/* 548 */       StringBuffer cycle = new StringBuffer();
/* 549 */       for (; index < confs.size(); index++) {
/* 550 */         cycle.append(confs.get(index)).append("" => "");
/*     */       }
/* 552 */       cycle.append(confName);
/* 553 */       throw new IllegalStateException(""illegal cycle detected in configuration extension: "" + cycle);
/*     */     } 
/*     */     
/* 556 */     Configuration conf = getConfiguration(confName);
/* 557 */     if (conf == null) {
/* 558 */       throw new IllegalStateException(""unknown configuration '"" + confName + ""'. It is extended by "" + confs.get(confs.size() - 1));
/*     */     }
/*     */     
/* 561 */     String[] ext = conf.getExtends();
/* 562 */     for (int i = 0; i < ext.length; i++) {
/* 563 */       confs.push(conf.getName());
/* 564 */       checkConf(confs, ext[i].trim());
/* 565 */       confs.pop();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 570 */   public void setMappingOverride(boolean override) { this.mappingOverride = override; }
/*     */ 
/*     */ 
/*     */   
/* 574 */   public boolean isMappingOverride() { return this.mappingOverride; }
/*     */ 
/*     */ 
/*     */   
/* 578 */   public String getAttribute(String attName) { return this.resolvedRevId.getAttribute(attName); }
/*     */ 
/*     */ 
/*     */   
/* 582 */   public Map getAttributes() { return this.resolvedRevId.getAttributes(); }
/*     */ 
/*     */ 
/*     */   
/* 586 */   public String getExtraAttribute(String attName) { return this.resolvedRevId.getExtraAttribute(attName); }
/*     */ 
/*     */ 
/*     */   
/* 590 */   public Map getExtraAttributes() { return this.resolvedRevId.getExtraAttributes(); }
/*     */ 
/*     */ 
/*     */   
/* 594 */   public Map getQualifiedExtraAttributes() { return this.resolvedRevId.getQualifiedExtraAttributes(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 600 */   public ModuleDescriptorParser getParser() { return this.parser; }
/*     */ 
/*     */ 
/*     */   
/* 604 */   public Resource getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */   
/* 608 */   public void addExcludeRule(ExcludeRule rule) { this.excludeRules.add(rule); }
/*     */ 
/*     */ 
/*     */   
/* 612 */   public boolean canExclude() { return !this.excludeRules.isEmpty(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean doesExclude(String[] moduleConfigurations, ArtifactId artifactId) {
/* 620 */     if (this.namespace != null) {
/* 621 */       artifactId = NameSpaceHelper.transform(artifactId, this.namespace.getFromSystemTransformer());
/*     */     }
/*     */     
/* 624 */     ExcludeRule[] rules = getExcludeRules(moduleConfigurations);
/* 625 */     for (int i = 0; i < rules.length; i++) {
/* 626 */       if (MatcherHelper.matches(rules[i].getMatcher(), rules[i].getId(), artifactId)) {
/* 627 */         return true;
/*     */       }
/*     */     } 
/* 630 */     return false;
/*     */   }
/*     */ 
/*     */   
/* 634 */   public ExcludeRule[] getAllExcludeRules() { return (ExcludeRule[])this.excludeRules.toArray((Object[])new ExcludeRule[this.excludeRules.size()]); }
/*     */ 
/*     */   
/*     */   public ExcludeRule[] getExcludeRules(String[] moduleConfigurations) {
/* 638 */     Set rules = new LinkedHashSet();
/* 639 */     for (Iterator iter = this.excludeRules.iterator(); iter.hasNext(); ) {
/* 640 */       ExcludeRule rule = iter.next();
/* 641 */       String[] ruleConfs = rule.getConfigurations();
/* 642 */       if (containsAny(ruleConfs, moduleConfigurations)) {
/* 643 */         rules.add(rule);
/*     */       }
/*     */     } 
/* 646 */     return rules.toArray(new ExcludeRule[rules.size()]);
/*     */   }
/*     */ 
/*     */   
/* 650 */   private boolean containsAny(String[] arr1, String[] arr2) { return (new ArrayList(Arrays.asList((Object[])arr1))).removeAll(Arrays.asList((Object[])arr2)); }
/*     */ 
/*     */ 
/*     */   
/* 654 */   public Map getExtraAttributesNamespaces() { return this.extraAttributesNamespaces; }
/*     */ 
/*     */ 
/*     */   
/* 658 */   public void addExtraAttributeNamespace(String prefix, String namespace) { this.extraAttributesNamespaces.put(prefix, namespace); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 664 */   public void addExtraInfo(String infoKey, String value) { this.extraInfo.put(infoKey, value); }
/*     */ 
/*     */ 
/*     */   
/* 668 */   public Map getExtraInfo() { return this.extraInfo; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DefaultModuleDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor,"package org.apache.ivy.core.module.descriptor;
import java.net.URL;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface DependencyArtifactDescriptor extends ExtendableItem {
  DependencyDescriptor getDependencyDescriptor();
  String getName();
  String getType();
  String getExt();
  URL getUrl();
  String[] getConfigurations();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DependencyArtifactDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DependencyDescriptor,"package org.apache.ivy.core.module.descriptor;
import org.apache.ivy.core.module.id.ArtifactId;
import org.apache.ivy.core.module.id.ModuleId;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.plugins.namespace.Namespace;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface DependencyDescriptor extends ExtendableItem {
  ModuleId getDependencyId();
  boolean isForce();
  boolean isChanging();
  boolean isTransitive();
  ModuleRevisionId getParentRevisionId();
  ModuleRevisionId getDependencyRevisionId();
  ModuleRevisionId getDynamicConstraintDependencyRevisionId();
  String[] getModuleConfigurations();
  String[] getDependencyConfigurations(String paramString1, String paramString2);
  String[] getDependencyConfigurations(String paramString);
  String[] getDependencyConfigurations(String[] paramArrayOfString);
  Namespace getNamespace();
  DependencyArtifactDescriptor[] getAllDependencyArtifacts();
  DependencyArtifactDescriptor[] getDependencyArtifacts(String paramString);
  DependencyArtifactDescriptor[] getDependencyArtifacts(String[] paramArrayOfString);
  IncludeRule[] getAllIncludeRules();
  IncludeRule[] getIncludeRules(String paramString);
  IncludeRule[] getIncludeRules(String[] paramArrayOfString);
  ExcludeRule[] getAllExcludeRules();
  ExcludeRule[] getExcludeRules(String paramString);
  ExcludeRule[] getExcludeRules(String[] paramArrayOfString);
  boolean doesExclude(String[] paramArrayOfString, ArtifactId paramArtifactId);
  boolean canExclude();
  DependencyDescriptor asSystem();
  DependencyDescriptor clone(ModuleRevisionId paramModuleRevisionId);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DependencyDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.DependencyDescriptorMediator,"package org.apache.ivy.core.module.descriptor;
public interface DependencyDescriptorMediator {
  DependencyDescriptor mediate(DependencyDescriptor paramDependencyDescriptor);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\DependencyDescriptorMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.ExcludeRule,"package org.apache.ivy.core.module.descriptor;
import org.apache.ivy.core.module.id.ArtifactId;
import org.apache.ivy.plugins.matcher.PatternMatcher;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface ExcludeRule extends ExtendableItem {
  ArtifactId getId();
  String[] getConfigurations();
  PatternMatcher getMatcher();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\ExcludeRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.IncludeRule,"package org.apache.ivy.core.module.descriptor;
import org.apache.ivy.core.module.id.ArtifactId;
import org.apache.ivy.plugins.matcher.PatternMatcher;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface IncludeRule extends ExtendableItem {
  ArtifactId getId();
  String[] getConfigurations();
  PatternMatcher getMatcher();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\IncludeRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.License,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class License
/*    */ {
/*    */   private String name;
/*    */   private String url;
/*    */   
/*    */   public License(String name, String url) {
/* 26 */     this.name = name;
/* 27 */     this.url = url;
/*    */   }
/*    */ 
/*    */   
/* 31 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public String getUrl() { return this.url; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\License.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.MDArtifact,"/*     */ package org.apache.ivy.core.module.descriptor;
/*     */ 
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.id.ArtifactRevisionId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MDArtifact
/*     */   extends AbstractArtifact
/*     */ {
/*     */   private ModuleDescriptor md;
/*     */   private String name;
/*     */   private String type;
/*     */   private String ext;
/*     */   
/*  35 */   public static Artifact newIvyArtifact(ModuleDescriptor md) { return new MDArtifact(md, ""ivy"", ""ivy"", ""xml"", true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  46 */   private List confs = new ArrayList();
/*     */   
/*  48 */   private Map extraAttributes = null;
/*     */   
/*     */   private URL url;
/*     */   
/*     */   private boolean isMetadata = false;
/*     */ 
/*     */   
/*  55 */   public MDArtifact(ModuleDescriptor md, String name, String type, String ext) { this(md, name, type, ext, null, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public MDArtifact(ModuleDescriptor md, String name, String type, String ext, boolean isMetadata) {
/*  60 */     this(md, name, type, ext, null, null);
/*  61 */     this.isMetadata = isMetadata;
/*     */   }
/*     */ 
/*     */   
/*     */   public MDArtifact(ModuleDescriptor md, String name, String type, String ext, URL url, Map extraAttributes) {
/*  66 */     if (md == null) {
/*  67 */       throw new NullPointerException(""null module descriptor not allowed"");
/*     */     }
/*  69 */     if (name == null) {
/*  70 */       throw new NullPointerException(""null name not allowed"");
/*     */     }
/*  72 */     if (type == null) {
/*  73 */       throw new NullPointerException(""null type not allowed"");
/*     */     }
/*  75 */     if (ext == null) {
/*  76 */       throw new NullPointerException(""null ext not allowed"");
/*     */     }
/*  78 */     this.md = md;
/*  79 */     this.name = name;
/*  80 */     this.type = type;
/*  81 */     this.ext = ext;
/*  82 */     this.url = url;
/*  83 */     this.extraAttributes = extraAttributes;
/*     */   }
/*     */ 
/*     */   
/*  87 */   public ModuleRevisionId getModuleRevisionId() { return this.md.getResolvedModuleRevisionId(); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public Date getPublicationDate() { return this.md.getResolvedPublicationDate(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public ArtifactRevisionId getId() { return ArtifactRevisionId.newInstance(this.md.getResolvedModuleRevisionId(), this.name, this.type, this.ext, this.extraAttributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 105 */   public String getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/* 109 */   public String getExt() { return this.ext; }
/*     */ 
/*     */ 
/*     */   
/* 113 */   public String[] getConfigurations() { return (String[])this.confs.toArray((Object[])new String[this.confs.size()]); }
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void addConfiguration(String conf) { this.confs.add(conf); }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public URL getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public boolean isMetadata() { return this.isMetadata; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\MDArtifact.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.ModuleDescriptor,"package org.apache.ivy.core.module.descriptor;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.Map;
import org.apache.ivy.core.module.id.ArtifactId;
import org.apache.ivy.core.module.id.ModuleId;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.core.module.id.ModuleRules;
import org.apache.ivy.plugins.conflict.ConflictManager;
import org.apache.ivy.plugins.latest.ArtifactInfo;
import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
import org.apache.ivy.plugins.repository.Resource;
import org.apache.ivy.plugins.version.VersionMatcher;
import org.apache.ivy.util.extendable.ExtendableItem;
public interface ModuleDescriptor extends ExtendableItem, ArtifactInfo, DependencyDescriptorMediator {
  public static final String DEFAULT_CONFIGURATION = ""default"";
  public static final String CALLER_ALL_CONFIGURATION = ""all"";
  boolean isDefault();
  ModuleRevisionId getModuleRevisionId();
  ModuleRevisionId getResolvedModuleRevisionId();
  void setResolvedModuleRevisionId(ModuleRevisionId paramModuleRevisionId);
  void setResolvedPublicationDate(Date paramDate);
  String getStatus();
  Date getPublicationDate();
  Date getResolvedPublicationDate();
  Configuration[] getConfigurations();
  String[] getConfigurationsNames();
  String[] getPublicConfigurationsNames();
  Artifact[] getArtifacts(String paramString);
  Artifact[] getAllArtifacts();
  DependencyDescriptor[] getDependencies();
  boolean dependsOn(VersionMatcher paramVersionMatcher, ModuleDescriptor paramModuleDescriptor);
  Configuration getConfiguration(String paramString);
  ConflictManager getConflictManager(ModuleId paramModuleId);
  License[] getLicenses();
  String getHomePage();
  String getDescription();
  long getLastModified();
  void toIvyFile(File paramFile) throws ParseException, IOException;
  ModuleDescriptorParser getParser();
  Resource getResource();
  Artifact getMetadataArtifact();
  boolean canExclude();
  boolean doesExclude(String[] paramArrayOfString, ArtifactId paramArtifactId);
  ExcludeRule[] getAllExcludeRules();
  ModuleRules getAllDependencyDescriptorMediators();
  Map getExtraAttributesNamespaces();
  Map getExtraInfo();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\ModuleDescriptor.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.descriptor.OverrideDependencyDescriptorMediator,"/*    */ package org.apache.ivy.core.module.descriptor;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OverrideDependencyDescriptorMediator
/*    */   implements DependencyDescriptorMediator
/*    */ {
/*    */   private String version;
/*    */   private String branch;
/*    */   
/*    */   public OverrideDependencyDescriptorMediator(String branch, String version) {
/* 41 */     this.branch = branch;
/* 42 */     this.version = version;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 52 */   public String getVersion() { return this.version; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 62 */   public String getBranch() { return this.branch; }
/*    */ 
/*    */   
/*    */   public DependencyDescriptor mediate(DependencyDescriptor dd) {
/* 66 */     ModuleRevisionId mrid = dd.getDependencyRevisionId();
/* 67 */     if ((this.version == null || this.version.equals(mrid.getRevision())) && (this.branch == null || this.branch.equals(mrid.getBranch())))
/*    */     {
/* 69 */       return dd;
/*    */     }
/*    */     
/* 72 */     String version = (this.version == null) ? mrid.getRevision() : this.version;
/* 73 */     String branch = (this.branch == null) ? mrid.getBranch() : this.branch;
/*    */     
/* 75 */     return dd.clone(ModuleRevisionId.newInstance(mrid.getOrganisation(), mrid.getName(), branch, version, mrid.getQualifiedExtraAttributes()));
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\descriptor\OverrideDependencyDescriptorMediator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.id.ArtifactId,"/*    */ package org.apache.ivy.core.module.id;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ArtifactId
/*    */ {
/*    */   private ModuleId mid;
/*    */   private String name;
/*    */   private String type;
/*    */   private String ext;
/*    */   
/*    */   public ArtifactId(ModuleId mid, String name, String type, String ext) {
/* 40 */     this.mid = mid;
/* 41 */     this.name = name;
/* 42 */     this.type = type;
/* 43 */     this.ext = ext;
/*    */   }
/*    */ 
/*    */   
/*    */   public boolean equals(Object obj) {
/* 48 */     if (!(obj instanceof ArtifactId)) {
/* 49 */       return false;
/*    */     }
/* 51 */     ArtifactId aid = (ArtifactId)obj;
/* 52 */     return (getModuleId().equals(aid.getModuleId()) && getName().equals(aid.getName()) && getExt().equals(aid.getExt()) && getType().equals(aid.getType()));
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public int hashCode() {
/* 59 */     int hash = 17;
/* 60 */     hash += getModuleId().hashCode() * 37;
/* 61 */     hash += getName().hashCode() * 37;
/* 62 */     hash += getType().hashCode() * 37;
/*    */     
/* 64 */     return hash;
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 69 */   public String toString() { return getModuleId() + ""!"" + getName() + ""."" + getExt() + (getType().equals(getExt()) ? """" : (""("" + getType() + "")"")); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 78 */   public ModuleId getModuleId() { return this.mid; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 92 */   public String getType() { return this.type; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 99 */   public String getExt() { return this.ext; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\id\ArtifactId.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.id.ArtifactRevisionId,"/*     */ package org.apache.ivy.core.module.id;
/*     */ 
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.util.extendable.UnmodifiableExtendableItem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ArtifactRevisionId
/*     */   extends UnmodifiableExtendableItem
/*     */ {
/*     */   private ArtifactId artifactId;
/*     */   private ModuleRevisionId mrid;
/*     */   
/*  33 */   public static ArtifactRevisionId newInstance(ModuleRevisionId mrid, String name, String type, String ext) { return newInstance(mrid, name, type, ext, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  38 */   public static ArtifactRevisionId newInstance(ModuleRevisionId mrid, String name, String type, String ext, Map extraAttributes) { return new ArtifactRevisionId(new ArtifactId(mrid.getModuleId(), name, type, ext), mrid, extraAttributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  47 */   public ArtifactRevisionId(ArtifactId artifactId, ModuleRevisionId mrid) { this(artifactId, mrid, null); }
/*     */ 
/*     */   
/*     */   public ArtifactRevisionId(ArtifactId artfId, ModuleRevisionId mdlRevId, Map extraAttributes) {
/*  51 */     super(null, extraAttributes);
/*  52 */     this.artifactId = artfId;
/*  53 */     this.mrid = mdlRevId;
/*     */     
/*  55 */     setStandardAttribute(""organisation"", getModuleRevisionId().getOrganisation());
/*     */     
/*  57 */     setStandardAttribute(""module"", getModuleRevisionId().getName());
/*  58 */     setStandardAttribute(""revision"", getModuleRevisionId().getRevision());
/*  59 */     setStandardAttribute(""artifact"", getName());
/*  60 */     setStandardAttribute(""type"", getType());
/*  61 */     setStandardAttribute(""ext"", getExt());
/*     */   }
/*     */   
/*     */   public boolean equals(Object obj) {
/*  65 */     if (!(obj instanceof ArtifactRevisionId)) {
/*  66 */       return false;
/*     */     }
/*  68 */     ArtifactRevisionId arid = (ArtifactRevisionId)obj;
/*  69 */     return (getArtifactId().equals(arid.getArtifactId()) && getModuleRevisionId().equals(arid.getModuleRevisionId()) && getQualifiedExtraAttributes().equals(arid.getQualifiedExtraAttributes()));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int hashCode() {
/*  77 */     int hash = 17;
/*  78 */     hash += getArtifactId().hashCode() * 37;
/*  79 */     hash += getModuleRevisionId().hashCode() * 37;
/*  80 */     hash += getQualifiedExtraAttributes().hashCode() * 37;
/*     */ 
/*     */     
/*  83 */     return hash;
/*     */   }
/*     */ 
/*     */   
/*  87 */   public String toString() { return getModuleRevisionId() + ""!"" + getName() + ""."" + getExt() + (getType().equals(getExt()) ? """" : (""("" + getType() + "")"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public ArtifactId getArtifactId() { return this.artifactId; }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public ModuleRevisionId getModuleRevisionId() { return this.mrid; }
/*     */ 
/*     */ 
/*     */   
/* 104 */   public String getName() { return this.artifactId.getName(); }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public String getType() { return this.artifactId.getType(); }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public String getExt() { return this.artifactId.getExt(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public String getRevision() { return this.mrid.getRevision(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\id\ArtifactRevisionId.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.id.ModuleId,"/*     */ package org.apache.ivy.core.module.id;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import java.util.WeakHashMap;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ModuleId
/*     */   implements Comparable
/*     */ {
/*     */   static final String ENCODE_SEPARATOR = "":#@#:"";
/*  36 */   private static final Map CACHE = new WeakHashMap();
/*     */ 
/*     */   
/*     */   private String organisation;
/*     */ 
/*     */   
/*     */   private String name;
/*     */ 
/*     */   
/*     */   private int hash;
/*     */ 
/*     */   
/*  48 */   public static ModuleId newInstance(String org, String name) { return intern(new ModuleId(org, name)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleId intern(ModuleId moduleId) {
/*  63 */     ModuleId r = (ModuleId)CACHE.get(moduleId);
/*  64 */     if (r == null) {
/*  65 */       r = moduleId;
/*  66 */       CACHE.put(r, r);
/*     */     } 
/*  68 */     return r;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   private Map attributes = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleId(String organisation, String name) {
/*  85 */     if (name == null) {
/*  86 */       throw new IllegalArgumentException(""null name not allowed"");
/*     */     }
/*  88 */     this.organisation = organisation;
/*  89 */     this.name = name;
/*  90 */     this.attributes.put(""organisation"", organisation);
/*  91 */     this.attributes.put(""module"", name);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String getOrganisation() { return this.organisation; }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 112 */     if (!(obj instanceof ModuleId)) {
/* 113 */       return false;
/*     */     }
/* 115 */     ModuleId other = (ModuleId)obj;
/* 116 */     if (other.organisation == null) {
/* 117 */       return (this.organisation == null && other.name.equals(this.name));
/*     */     }
/* 119 */     return (other.organisation.equals(this.organisation) && other.name.equals(this.name));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public int hashCode() {
/* 125 */     if (this.hash == 0) {
/*     */       
/* 127 */       this.hash = 31;
/* 128 */       this.hash = this.hash * 13 + ((this.organisation == null) ? 0 : this.organisation.hashCode());
/* 129 */       this.hash = this.hash * 13 + this.name.hashCode();
/*     */     } 
/*     */     
/* 132 */     return this.hash;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 137 */   public String toString() { return this.organisation + ""#"" + this.name; }
/*     */ 
/*     */ 
/*     */   
/*     */   public int compareTo(Object obj) {
/* 142 */     ModuleId that = (ModuleId)obj;
/* 143 */     int result = this.organisation.compareTo(that.organisation);
/* 144 */     if (result == 0) {
/* 145 */       result = this.name.compareTo(that.name);
/*     */     }
/* 147 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public String encodeToString() { return getOrganisation() + "":#@#:"" + getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public Map getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleId decode(String encoded) {
/* 176 */     String[] parts = encoded.split("":#@#:"");
/* 177 */     if (parts.length != 2) {
/* 178 */       throw new IllegalArgumentException(""badly encoded module id: '"" + encoded + ""'"");
/*     */     }
/* 180 */     return new ModuleId(parts[0], parts[1]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public static final Pattern MID_PATTERN = Pattern.compile(""([a-zA-Z0-9\\-/\\._+=]*)#([a-zA-Z0-9\\-/\\._+=]+)"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleId parse(String mid) {
/* 202 */     Matcher m = MID_PATTERN.matcher(mid);
/* 203 */     if (!m.matches()) {
/* 204 */       throw new IllegalArgumentException(""module text representation do not match expected pattern. given mid='"" + mid + ""' expected form="" + MID_PATTERN.pattern());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 210 */     return newInstance(m.group(1), m.group(2));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\id\ModuleId.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.id.ModuleRevisionId,"/*     */ package org.apache.ivy.core.module.id;
/*     */ 
/*     */ import java.lang.ref.WeakReference;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.WeakHashMap;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.util.extendable.UnmodifiableExtendableItem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ModuleRevisionId
/*     */   extends UnmodifiableExtendableItem
/*     */ {
/*     */   private static final String ENCODE_SEPARATOR = "":#@#:"";
/*     */   private static final String ENCODE_PREFIX = ""+"";
/*     */   private static final String NULL_ENCODE = ""@#:NULL:#@"";
/*     */   static final String STRICT_CHARS_PATTERN = ""[a-zA-Z0-9\\-/\\._+=]"";
/*     */   private static final String REV_STRICT_CHARS_PATTERN = ""[a-zA-Z0-9\\-/\\._+=,\\[\\]\\{\\}\\(\\):@]"";
/*  49 */   private static final Map CACHE = new WeakHashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   public static final Pattern MRID_PATTERN = Pattern.compile(""([a-zA-Z0-9\\-/\\._+=]*)#([a-zA-Z0-9\\-/\\._+=]+)(?:#([a-zA-Z0-9\\-/\\._+=]+))?;([a-zA-Z0-9\\-/\\._+=,\\[\\]\\{\\}\\(\\):@]+)"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   public static final Pattern NON_CAPTURING_PATTERN = Pattern.compile(""(?:[a-zA-Z0-9\\-/\\._+=]*)#(?:[a-zA-Z0-9\\-/\\._+=]+)(?:#(?:[a-zA-Z0-9\\-/\\._+=]+))?;(?:[a-zA-Z0-9\\-/\\._+=,\\[\\]\\{\\}\\(\\):@]+)"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final ModuleId moduleId;
/*     */ 
/*     */ 
/*     */   
/*     */   private final String branch;
/*     */ 
/*     */ 
/*     */   
/*     */   private final String revision;
/*     */ 
/*     */ 
/*     */   
/*     */   private int hash;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleRevisionId parse(String mrid) {
/*  87 */     Matcher m = MRID_PATTERN.matcher(mrid.trim());
/*  88 */     if (!m.matches()) {
/*  89 */       throw new IllegalArgumentException(""module revision text representation do not match expected pattern. given mrid='"" + mrid + ""' expected form="" + MRID_PATTERN.pattern());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  95 */     return newInstance(m.group(1), m.group(2), m.group(3), m.group(4));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public static ModuleRevisionId newInstance(String organisation, String name, String revision) { return intern(new ModuleRevisionId(ModuleId.newInstance(organisation, name), revision)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public static ModuleRevisionId newInstance(String organisation, String name, String revision, Map extraAttributes) { return intern(new ModuleRevisionId(ModuleId.newInstance(organisation, name), revision, extraAttributes)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public static ModuleRevisionId newInstance(String organisation, String name, String branch, String revision) { return intern(new ModuleRevisionId(ModuleId.newInstance(organisation, name), branch, revision)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public static ModuleRevisionId newInstance(String organisation, String name, String branch, String revision, Map extraAttributes) { return intern(new ModuleRevisionId(ModuleId.newInstance(organisation, name), branch, revision, extraAttributes)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public static ModuleRevisionId newInstance(ModuleRevisionId mrid, String rev) { return intern(new ModuleRevisionId(mrid.getModuleId(), mrid.getBranch(), rev, mrid.getQualifiedExtraAttributes())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public static ModuleRevisionId newInstance(ModuleRevisionId mrid, String branch, String rev) { return intern(new ModuleRevisionId(mrid.getModuleId(), branch, rev, mrid.getQualifiedExtraAttributes())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ModuleRevisionId intern(ModuleRevisionId moduleRevisionId) {
/* 153 */     ModuleRevisionId r = null;
/*     */     
/* 155 */     synchronized (CACHE) {
/* 156 */       WeakReference ref = (WeakReference)CACHE.get(moduleRevisionId);
/* 157 */       if (ref != null) {
/* 158 */         r = ref.get();
/*     */       }
/* 160 */       if (r == null) {
/* 161 */         r = moduleRevisionId;
/* 162 */         CACHE.put(r, new WeakReference(r));
/*     */       } 
/*     */     } 
/*     */     
/* 166 */     return r;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public ModuleRevisionId(ModuleId moduleId, String revision) { this(moduleId, null, revision, null); }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public ModuleRevisionId(ModuleId moduleId, String branch, String revision) { this(moduleId, branch, revision, null); }
/*     */ 
/*     */ 
/*     */   
/* 188 */   private ModuleRevisionId(ModuleId moduleId, String revision, Map extraAttributes) { this(moduleId, null, revision, extraAttributes); }
/*     */ 
/*     */ 
/*     */   
/*     */   private ModuleRevisionId(ModuleId moduleId, String branch, String revision, Map extraAttributes) {
/* 193 */     super(null, extraAttributes);
/* 194 */     this.moduleId = moduleId;
/* 195 */     IvyContext context = IvyContext.getContext();
/* 196 */     this.branch = (branch == null) ? ((context.peekIvy() == null) ? null : context.getSettings().getDefaultBranch(moduleId)) : branch;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 201 */     this.revision = (revision == null) ? Ivy.getWorkingRevision() : revision;
/* 202 */     setStandardAttribute(""organisation"", this.moduleId.getOrganisation());
/* 203 */     setStandardAttribute(""module"", this.moduleId.getName());
/* 204 */     setStandardAttribute(""branch"", this.branch);
/* 205 */     setStandardAttribute(""revision"", this.revision);
/*     */   }
/*     */ 
/*     */   
/* 209 */   public ModuleId getModuleId() { return this.moduleId; }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public String getName() { return getModuleId().getName(); }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public String getOrganisation() { return getModuleId().getOrganisation(); }
/*     */ 
/*     */ 
/*     */   
/* 221 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 225 */     if (!(obj instanceof ModuleRevisionId)) {
/* 226 */       return false;
/*     */     }
/* 228 */     ModuleRevisionId other = (ModuleRevisionId)obj;
/*     */     
/* 230 */     if (!other.getRevision().equals(getRevision()))
/* 231 */       return false; 
/* 232 */     if (other.getBranch() == null && getBranch() != null)
/* 233 */       return false; 
/* 234 */     if (other.getBranch() != null && !other.getBranch().equals(getBranch()))
/* 235 */       return false; 
/* 236 */     if (!other.getModuleId().equals(getModuleId())) {
/* 237 */       return false;
/*     */     }
/* 239 */     return other.getQualifiedExtraAttributes().equals(getQualifiedExtraAttributes());
/*     */   }
/*     */ 
/*     */   
/*     */   public int hashCode() {
/* 244 */     if (this.hash == 0) {
/*     */       
/* 246 */       this.hash = 31;
/* 247 */       this.hash = this.hash * 13 + ((getBranch() == null) ? 0 : getBranch().hashCode());
/* 248 */       this.hash = this.hash * 13 + getRevision().hashCode();
/* 249 */       this.hash = this.hash * 13 + getModuleId().hashCode();
/* 250 */       this.hash = this.hash * 13 + getQualifiedExtraAttributes().hashCode();
/*     */     } 
/*     */     
/* 253 */     return this.hash;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 258 */   public String toString() { return this.moduleId + ((this.branch == null || this.branch.length() == 0) ? """" : (""#"" + this.branch)) + "";"" + ((this.revision == null) ? ""NONE"" : this.revision); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encodeToString() {
/* 264 */     StringBuffer buf = new StringBuffer();
/* 265 */     Map attributes = getAttributes();
/* 266 */     for (Iterator iter = attributes.keySet().iterator(); iter.hasNext(); ) {
/* 267 */       String attName = iter.next();
/* 268 */       String value = (String)attributes.get(attName);
/* 269 */       value = (value == null) ? ""@#:NULL:#@"" : value;
/* 270 */       buf.append(""+"").append(attName).append("":#@#:"").append(""+"").append(value).append("":#@#:"");
/*     */     } 
/*     */     
/* 273 */     return buf.toString();
/*     */   }
/*     */   
/*     */   public static ModuleRevisionId decode(String encoded) {
/* 277 */     String[] parts = encoded.split("":#@#:"");
/* 278 */     if (parts.length % 2 != 0) {
/* 279 */       throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""'"");
/*     */     }
/*     */     
/* 282 */     Map attributes = new HashMap();
/* 283 */     for (int i = 0; i < parts.length; i += 2) {
/* 284 */       String attName = parts[i];
/* 285 */       if (!attName.startsWith(""+"")) {
/* 286 */         throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""': "" + attName + "" doesn't start with "" + ""+"");
/*     */       }
/*     */       
/* 289 */       attName = attName.substring(1);
/*     */       
/* 291 */       String attValue = parts[i + 1];
/* 292 */       if (!attValue.startsWith(""+"")) {
/* 293 */         throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""': "" + attValue + "" doesn't start with "" + ""+"");
/*     */       }
/*     */       
/* 296 */       attValue = attValue.substring(1);
/*     */       
/* 298 */       if (""@#:NULL:#@"".equals(attValue)) {
/* 299 */         attValue = null;
/*     */       }
/* 301 */       attributes.put(attName, attValue);
/*     */     } 
/* 303 */     String org = (String)attributes.remove(""organisation"");
/* 304 */     String mod = (String)attributes.remove(""module"");
/* 305 */     String rev = (String)attributes.remove(""revision"");
/* 306 */     String branch = (String)attributes.remove(""branch"");
/* 307 */     if (org == null) {
/* 308 */       throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""': no organisation"");
/*     */     }
/*     */     
/* 311 */     if (mod == null) {
/* 312 */       throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""': no module name"");
/*     */     }
/*     */     
/* 315 */     if (rev == null) {
/* 316 */       throw new IllegalArgumentException(""badly encoded module revision id: '"" + encoded + ""': no revision"");
/*     */     }
/*     */     
/* 319 */     return newInstance(org, mod, branch, rev, attributes);
/*     */   }
/*     */ 
/*     */   
/* 323 */   public String getBranch() { return this.branch; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\id\ModuleRevisionId.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.id.ModuleRules,"/*     */ package org.apache.ivy.core.module.id;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.plugins.matcher.MapMatcher;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.NoFilter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ModuleRules
/*     */ {
/*  54 */   private Map rules = new LinkedHashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleRules() {}
/*     */ 
/*     */ 
/*     */   
/*  63 */   private ModuleRules(Map rules) { this.rules = new LinkedHashMap(rules); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void defineRule(MapMatcher condition, Object rule) {
/*  75 */     Checks.checkNotNull(condition, ""condition"");
/*  76 */     Checks.checkNotNull(rule, ""rule"");
/*     */     
/*  78 */     this.rules.put(condition, rule);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public Object getRule(ModuleId mid) { return getRule(mid, NoFilter.INSTANCE); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public Object[] getRules(ModuleId mid) { return getRules(mid.getAttributes(), NoFilter.INSTANCE); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public Object getRule(ModuleRevisionId mrid) { return getRule(mrid, NoFilter.INSTANCE); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getRule(ModuleId mid, Filter filter) {
/* 141 */     Checks.checkNotNull(mid, ""mid"");
/* 142 */     return getRule(mid.getAttributes(), filter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getRule(ModuleRevisionId mrid, Filter filter) {
/* 162 */     Checks.checkNotNull(mrid, ""mrid"");
/* 163 */     Checks.checkNotNull(filter, ""filter"");
/* 164 */     Map moduleAttributes = mrid.getAttributes();
/* 165 */     return getRule(moduleAttributes, filter);
/*     */   }
/*     */   
/*     */   private Object getRule(Map moduleAttributes, Filter filter) {
/* 169 */     for (Iterator iter = this.rules.entrySet().iterator(); iter.hasNext(); ) {
/* 170 */       Map.Entry ruleEntry = iter.next();
/* 171 */       MapMatcher midm = (MapMatcher)ruleEntry.getKey();
/* 172 */       if (midm.matches(moduleAttributes)) {
/* 173 */         Object rule = ruleEntry.getValue();
/* 174 */         if (filter.accept(rule)) {
/* 175 */           return rule;
/*     */         }
/*     */       } 
/*     */     } 
/* 179 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object[] getRules(ModuleRevisionId mrid, Filter filter) {
/* 199 */     Checks.checkNotNull(mrid, ""mrid"");
/* 200 */     Checks.checkNotNull(filter, ""filter"");
/* 201 */     Map moduleAttributes = mrid.getAttributes();
/* 202 */     return getRules(moduleAttributes, filter);
/*     */   }
/*     */ 
/*     */   
/*     */   private Object[] getRules(Map moduleAttributes, Filter filter) {
/* 207 */     List matchingRules = new ArrayList();
/* 208 */     for (Iterator iter = this.rules.entrySet().iterator(); iter.hasNext(); ) {
/* 209 */       Map.Entry ruleEntry = iter.next();
/* 210 */       MapMatcher midm = (MapMatcher)ruleEntry.getKey();
/* 211 */       if (midm.matches(moduleAttributes)) {
/* 212 */         Object rule = ruleEntry.getValue();
/* 213 */         if (filter.accept(rule)) {
/* 214 */           matchingRules.add(rule);
/*     */         }
/*     */       } 
/*     */     } 
/* 218 */     return matchingRules.toArray();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void dump(String prefix) {
/* 228 */     if (this.rules.isEmpty()) {
/* 229 */       Message.debug(prefix + ""NONE"");
/*     */     } else {
/* 231 */       for (Iterator iter = this.rules.keySet().iterator(); iter.hasNext(); ) {
/* 232 */         MapMatcher midm = iter.next();
/* 233 */         Object rule = this.rules.get(midm);
/* 234 */         Message.debug(prefix + midm + "" -> "" + rule);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public Map getAllRules() { return Collections.unmodifiableMap(this.rules); }
/*     */ 
/*     */ 
/*     */   
/* 253 */   public Object clone() { return new ModuleRules(this.rules); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\id\ModuleRules.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.status.Status,"/*    */ package org.apache.ivy.core.module.status;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Status
/*    */ {
/*    */   private String name;
/*    */   private boolean integration;
/*    */   
/*    */   public Status() {}
/*    */   
/*    */   public Status(String name, boolean integration) {
/* 29 */     this.name = name;
/* 30 */     this.integration = integration;
/*    */   }
/*    */ 
/*    */   
/* 34 */   public boolean isIntegration() { return this.integration; }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public void setIntegration(boolean integration) { this.integration = integration; }
/*    */ 
/*    */ 
/*    */   
/* 42 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 46 */   public void setName(String name) { this.name = name; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\status\Status.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.module.status.StatusManager,"/*     */ package org.apache.ivy.core.module.status;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatusManager
/*     */ {
/*  37 */   public static StatusManager newDefaultInstance() { return new StatusManager(new Status[] { new Status(""release"", false), new Status(""milestone"", false), new Status(""integration"", true) }""integration""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  42 */   public static StatusManager getCurrent() { return IvyContext.getContext().getSettings().getStatusManager(); }
/*     */ 
/*     */   
/*  45 */   private List status = new ArrayList();
/*     */   
/*     */   private String defaultStatus;
/*     */   
/*     */   private Map statusPriorityMap;
/*     */   
/*     */   private Map statusIntegrationMap;
/*     */   
/*     */   private String deliveryStatusListString;
/*     */ 
/*     */   
/*     */   public StatusManager(Status[] status, String defaultStatus) {
/*  57 */     this.status.addAll(Arrays.asList(status));
/*  58 */     this.defaultStatus = defaultStatus;
/*     */     
/*  60 */     computeMaps();
/*     */   }
/*     */ 
/*     */   
/*     */   public StatusManager() {}
/*     */ 
/*     */   
/*  67 */   public void addStatus(Status status) { this.status.add(status); }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public void setDefaultStatus(String defaultStatus) { this.defaultStatus = defaultStatus; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public List getStatuses() { return this.status; }
/*     */ 
/*     */   
/*     */   private void computeMaps() {
/*  79 */     if (this.status.isEmpty()) {
/*  80 */       throw new IllegalStateException(""badly configured statuses: no status found"");
/*     */     }
/*  82 */     this.statusPriorityMap = new HashMap();
/*  83 */     for (ListIterator iter = this.status.listIterator(); iter.hasNext(); ) {
/*  84 */       Status status = iter.next();
/*  85 */       this.statusPriorityMap.put(status.getName(), new Integer(iter.previousIndex()));
/*     */     } 
/*  87 */     this.statusIntegrationMap = new HashMap();
/*  88 */     for (Iterator iter = this.status.iterator(); iter.hasNext(); ) {
/*  89 */       Status status = iter.next();
/*  90 */       this.statusIntegrationMap.put(status.getName(), Boolean.valueOf(status.isIntegration()));
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean isStatus(String status) {
/*  95 */     if (this.statusPriorityMap == null) {
/*  96 */       computeMaps();
/*     */     }
/*  98 */     return this.statusPriorityMap.containsKey(status);
/*     */   }
/*     */   
/*     */   public int getPriority(String status) {
/* 102 */     if (this.statusPriorityMap == null) {
/* 103 */       computeMaps();
/*     */     }
/* 105 */     Integer priority = (Integer)this.statusPriorityMap.get(status);
/* 106 */     if (priority == null) {
/* 107 */       Message.debug(""unknown status "" + status + "": assuming lowest priority"");
/* 108 */       return Integer.MAX_VALUE;
/*     */     } 
/* 110 */     return priority.intValue();
/*     */   }
/*     */   
/*     */   public boolean isIntegration(String status) {
/* 114 */     if (this.statusIntegrationMap == null) {
/* 115 */       computeMaps();
/*     */     }
/* 117 */     Boolean isIntegration = (Boolean)this.statusIntegrationMap.get(status);
/* 118 */     if (isIntegration == null) {
/* 119 */       Message.debug(""unknown status "" + status + "": assuming integration"");
/* 120 */       return true;
/*     */     } 
/* 122 */     return isIntegration.booleanValue();
/*     */   }
/*     */   
/*     */   public String getDeliveryStatusListString() {
/* 126 */     if (this.deliveryStatusListString == null) {
/* 127 */       StringBuffer ret = new StringBuffer();
/* 128 */       for (Iterator iter = this.status.iterator(); iter.hasNext(); ) {
/* 129 */         Status status = iter.next();
/* 130 */         if (!status.isIntegration()) {
/* 131 */           ret.append(status.getName()).append("","");
/*     */         }
/*     */       } 
/* 134 */       if (ret.length() > 0) {
/* 135 */         ret.deleteCharAt(ret.length() - 1);
/*     */       }
/* 137 */       this.deliveryStatusListString = ret.toString();
/*     */     } 
/* 139 */     return this.deliveryStatusListString;
/*     */   }
/*     */   
/*     */   public String getDefaultStatus() {
/* 143 */     if (this.defaultStatus == null) {
/* 144 */       if (this.status.isEmpty()) {
/* 145 */         throw new IllegalStateException(""badly configured statuses: no status found"");
/*     */       }
/* 147 */       this.defaultStatus = ((Status)this.status.get(this.status.size() - 1)).getName();
/*     */     } 
/* 149 */     return this.defaultStatus;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\module\status\StatusManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.publish.PublishEngine,"/*     */ package org.apache.ivy.core.publish;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Date;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.event.publish.EndArtifactPublishEvent;
/*     */ import org.apache.ivy.core.event.publish.StartArtifactPublishEvent;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.MDArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.parser.xml.UpdateOptions;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorUpdater;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.ConfigurationUtils;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PublishEngine
/*     */ {
/*     */   private PublishEngineSettings settings;
/*     */   private EventManager eventManager;
/*     */   
/*     */   public PublishEngine(PublishEngineSettings settings, EventManager eventManager) {
/*  61 */     this.settings = settings;
/*  62 */     this.eventManager = eventManager;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Collection publish(ModuleRevisionId mrid, Collection srcArtifactPattern, String resolverName, PublishOptions options) throws IOException {
/*     */     File ivyFile;
/*  80 */     Message.info("":: publishing :: "" + mrid.getModuleId());
/*  81 */     Message.verbose(""\tvalidate = "" + options.isValidate());
/*  82 */     long start = System.currentTimeMillis();
/*     */     
/*  84 */     options.setSrcIvyPattern(this.settings.substitute(options.getSrcIvyPattern()));
/*  85 */     if (options.getPubBranch() == null) {
/*  86 */       options.setPubbranch(mrid.getBranch());
/*     */     }
/*  88 */     if (options.getPubrevision() == null) {
/*  89 */       options.setPubrevision(mrid.getRevision());
/*     */     }
/*  91 */     ModuleRevisionId pubmrid = ModuleRevisionId.newInstance(mrid, options.getPubBranch(), options.getPubrevision());
/*     */ 
/*     */     
/*  94 */     if (options.getSrcIvyPattern() != null) {
/*  95 */       ivyFile = this.settings.resolveFile(IvyPatternHelper.substitute(options.getSrcIvyPattern(), DefaultArtifact.newIvyArtifact(pubmrid, new Date())));
/*     */       
/*  97 */       if (!ivyFile.exists()) {
/*  98 */         throw new IllegalArgumentException(""ivy file to publish not found for "" + mrid + "": call deliver before ("" + ivyFile + "")"");
/*     */       }
/*     */     } else {
/*     */       
/* 102 */       ResolutionCacheManager cacheManager = this.settings.getResolutionCacheManager();
/* 103 */       ivyFile = cacheManager.getResolvedIvyFileInCache(mrid);
/* 104 */       if (!ivyFile.exists()) {
/* 105 */         throw new IllegalStateException(""ivy file not found in cache for "" + mrid + "": please resolve dependencies before publishing ("" + ivyFile + "")"");
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 111 */     ModuleDescriptor md = null;
/* 112 */     URL ivyFileURL = null;
/*     */     try {
/* 114 */       ivyFileURL = ivyFile.toURI().toURL();
/* 115 */       md = XmlModuleDescriptorParser.getInstance().parseDescriptor(this.settings, ivyFileURL, false);
/*     */       
/* 117 */       if (options.getSrcIvyPattern() != null) {
/* 118 */         if (options.isUpdate()) {
/* 119 */           File tmp = File.createTempFile(""ivy"", "".xml"");
/* 120 */           tmp.deleteOnExit();
/*     */           
/* 122 */           String[] confs = ConfigurationUtils.replaceWildcards(options.getConfs(), md);
/* 123 */           Set confsToRemove = new HashSet(Arrays.asList((Object[])md.getConfigurationsNames()));
/* 124 */           confsToRemove.removeAll(Arrays.asList((Object[])confs));
/*     */           
/*     */           try {
/* 127 */             XmlModuleDescriptorUpdater.update(ivyFileURL, tmp, (new UpdateOptions()).setSettings(this.settings).setStatus((options.getStatus() == null) ? md.getStatus() : options.getStatus()).setRevision(options.getPubrevision()).setBranch(options.getPubBranch()).setPubdate((options.getPubdate() == null) ? new Date() : options.getPubdate()).setConfsToExclude((String[])confsToRemove.toArray((Object[])new String[confsToRemove.size()])));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 138 */             ivyFile = tmp;
/*     */             
/* 140 */             md = XmlModuleDescriptorParser.getInstance().parseDescriptor(this.settings, ivyFile.toURI().toURL(), false);
/*     */             
/* 142 */             options.setSrcIvyPattern(ivyFile.getAbsolutePath());
/* 143 */           } catch (SAXException e) {
/* 144 */             throw new IllegalStateException(""bad ivy file for "" + mrid + "": "" + ivyFile + "": "" + e);
/*     */           }
/*     */         
/* 147 */         } else if (!options.getPubrevision().equals(md.getModuleRevisionId().getRevision())) {
/*     */           
/* 149 */           throw new IllegalArgumentException(""cannot publish "" + ivyFile + "" as "" + options.getPubrevision() + "": bad revision found in ivy file (Revision: "" + md.getModuleRevisionId().getRevision() + ""). Use forcedeliver or update."");
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 156 */         md.setResolvedModuleRevisionId(pubmrid);
/*     */       } 
/* 158 */     } catch (MalformedURLException e) {
/* 159 */       throw new RuntimeException(""malformed url obtained for file "" + ivyFile);
/* 160 */     } catch (ParseException e) {
/* 161 */       throw new IllegalStateException(""bad ivy file for "" + mrid + "": "" + ivyFile + "": "" + e);
/*     */     } 
/*     */     
/* 164 */     DependencyResolver resolver = this.settings.getResolver(resolverName);
/* 165 */     if (resolver == null) {
/* 166 */       throw new IllegalArgumentException(""unknown resolver "" + resolverName);
/*     */     }
/*     */ 
/*     */     
/* 170 */     Collection missing = publish(md, srcArtifactPattern, resolver, options);
/* 171 */     Message.verbose(""\tpublish done ("" + (System.currentTimeMillis() - start) + ""ms)"");
/* 172 */     return missing;
/*     */   }
/*     */ 
/*     */   
/*     */   public Collection publish(ModuleDescriptor md, Collection srcArtifactPattern, DependencyResolver resolver, PublishOptions options) throws IOException {
/* 177 */     Collection missing = new ArrayList();
/* 178 */     Set artifactsSet = new LinkedHashSet();
/* 179 */     String[] confs = options.getConfs();
/* 180 */     if (confs == null || (confs.length == 1 && ""*"".equals(confs[0]))) {
/* 181 */       confs = md.getConfigurationsNames();
/*     */     }
/*     */     
/* 184 */     for (int i = 0; i < confs.length; i++) {
/* 185 */       Artifact[] artifacts = md.getArtifacts(confs[i]);
/* 186 */       for (int j = 0; j < artifacts.length; j++) {
/* 187 */         artifactsSet.add(artifacts[j]);
/*     */       }
/*     */     } 
/* 190 */     Artifact[] extraArtifacts = options.getExtraArtifacts();
/* 191 */     if (extraArtifacts != null) {
/* 192 */       for (int i = 0; i < extraArtifacts.length; i++) {
/* 193 */         artifactsSet.add(new MDArtifact(md, extraArtifacts[i].getName(), extraArtifacts[i].getType(), extraArtifacts[i].getExt(), extraArtifacts[i].getUrl(), extraArtifacts[i].getQualifiedExtraAttributes()));
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 199 */     Map artifactsFiles = new LinkedHashMap();
/* 200 */     for (Iterator iter = artifactsSet.iterator(); iter.hasNext(); ) {
/* 201 */       Artifact artifact = iter.next();
/* 202 */       for (Iterator iterator = srcArtifactPattern.iterator(); iterator.hasNext(); ) {
/* 203 */         String pattern = iterator.next();
/* 204 */         File artifactFile = this.settings.resolveFile(IvyPatternHelper.substitute(this.settings.substitute(pattern), artifact));
/*     */         
/* 206 */         if (artifactFile.exists()) {
/* 207 */           artifactsFiles.put(artifact, artifactFile);
/*     */           break;
/*     */         } 
/*     */       } 
/* 211 */       if (!artifactsFiles.containsKey(artifact)) {
/* 212 */         StringBuffer sb = new StringBuffer();
/* 213 */         sb.append(""missing artifact "" + artifact + "":\n"");
/* 214 */         for (Iterator iterator = srcArtifactPattern.iterator(); iterator.hasNext(); ) {
/* 215 */           String pattern = iterator.next();
/* 216 */           sb.append(""\t"" + this.settings.resolveFile(IvyPatternHelper.substitute(pattern, artifact)) + "" file does not exist\n"");
/*     */         } 
/*     */ 
/*     */         
/* 220 */         if (options.isWarnOnMissing() || options.isHaltOnMissing()) {
/* 221 */           Message.warn(sb.toString());
/*     */         } else {
/* 223 */           Message.verbose(sb.toString());
/*     */         } 
/* 225 */         if (options.isHaltOnMissing()) {
/* 226 */           throw new IOException(""missing artifact "" + artifact);
/*     */         }
/* 228 */         missing.add(artifact);
/*     */       } 
/*     */     } 
/* 231 */     if (options.getSrcIvyPattern() != null) {
/* 232 */       Artifact artifact = MDArtifact.newIvyArtifact(md);
/* 233 */       File artifactFile = this.settings.resolveFile(IvyPatternHelper.substitute(options.getSrcIvyPattern(), artifact));
/*     */       
/* 235 */       if (!artifactFile.exists()) {
/* 236 */         String msg = ""missing ivy file for "" + md.getModuleRevisionId() + "": \n"" + artifactFile + "" file does not exist"";
/*     */         
/* 238 */         if (options.isWarnOnMissing() || options.isHaltOnMissing()) {
/* 239 */           Message.warn(msg);
/*     */         } else {
/* 241 */           Message.verbose(msg);
/*     */         } 
/* 243 */         if (options.isHaltOnMissing()) {
/* 244 */           throw new IOException(""missing ivy artifact "" + artifact);
/*     */         }
/* 246 */         missing.add(artifact);
/*     */       } else {
/* 248 */         artifactsFiles.put(artifact, artifactFile);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 253 */     boolean successfullyPublished = false;
/*     */     try {
/* 255 */       resolver.beginPublishTransaction(md.getModuleRevisionId(), options.isOverwrite());
/*     */       
/* 257 */       for (Iterator iter = artifactsFiles.entrySet().iterator(); iter.hasNext(); ) {
/* 258 */         Map.Entry entry = iter.next();
/* 259 */         Artifact artifact = (Artifact)entry.getKey();
/* 260 */         File artifactFile = (File)entry.getValue();
/* 261 */         publish(artifact, artifactFile, resolver, options.isOverwrite());
/*     */       } 
/* 263 */       resolver.commitPublishTransaction();
/* 264 */       successfullyPublished = true;
/*     */     } finally {
/* 266 */       if (!successfullyPublished) {
/* 267 */         resolver.abortPublishTransaction();
/*     */       }
/*     */     } 
/* 270 */     return missing;
/*     */   }
/*     */ 
/*     */   
/*     */   private void publish(Artifact artifact, File src, DependencyResolver resolver, boolean overwrite) throws IOException {
/* 275 */     IvyContext.getContext().checkInterrupted();
/*     */     
/* 277 */     this.eventManager.fireIvyEvent((IvyEvent)new StartArtifactPublishEvent(resolver, artifact, src, overwrite));
/*     */     
/* 279 */     boolean successful = false;
/*     */     try {
/* 281 */       if (src.exists()) {
/* 282 */         resolver.publish(artifact, src, overwrite);
/* 283 */         successful = true;
/*     */       } 
/*     */     } finally {
/*     */       
/* 287 */       this.eventManager.fireIvyEvent((IvyEvent)new EndArtifactPublishEvent(resolver, artifact, src, overwrite, successful));
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\publish\PublishEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.publish.PublishEngineSettings,"package org.apache.ivy.core.publish;
import org.apache.ivy.plugins.parser.ParserSettings;
import org.apache.ivy.plugins.resolver.DependencyResolver;
public interface PublishEngineSettings extends ParserSettings {
  String substitute(String paramString);
  DependencyResolver getResolver(String paramString);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\publish\PublishEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.publish.PublishOptions,"/*     */ package org.apache.ivy.core.publish;
/*     */ 
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PublishOptions
/*     */ {
/*     */   private String srcIvyPattern;
/*     */   private String pubrevision;
/*     */   private String status;
/*     */   private Date pubdate;
/*     */   private Artifact[] extraArtifacts;
/*     */   private boolean validate;
/*     */   private boolean overwrite;
/*     */   private boolean update;
/*     */   private String[] confs;
/*     */   private boolean haltonmissing;
/*     */   private String pubBranch;
/*     */   private boolean warnonmissing;
/*     */   
/*  65 */   public String[] getConfs() { return this.confs; }
/*     */ 
/*     */   
/*     */   public PublishOptions setConfs(String[] confs) {
/*  69 */     this.confs = confs;
/*  70 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  74 */   public Artifact[] getExtraArtifacts() { return this.extraArtifacts; }
/*     */ 
/*     */   
/*     */   public PublishOptions setExtraArtifacts(Artifact[] extraArtifacts) {
/*  78 */     this.extraArtifacts = extraArtifacts;
/*  79 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  83 */   public boolean isOverwrite() { return this.overwrite; }
/*     */ 
/*     */   
/*     */   public PublishOptions setOverwrite(boolean overwrite) {
/*  87 */     this.overwrite = overwrite;
/*  88 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  92 */   public Date getPubdate() { return this.pubdate; }
/*     */ 
/*     */   
/*     */   public PublishOptions setPubdate(Date pubdate) {
/*  96 */     this.pubdate = pubdate;
/*  97 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 101 */   public String getPubrevision() { return this.pubrevision; }
/*     */ 
/*     */   
/*     */   public PublishOptions setPubrevision(String pubrevision) {
/* 105 */     this.pubrevision = pubrevision;
/* 106 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 110 */   public String getSrcIvyPattern() { return this.srcIvyPattern; }
/*     */ 
/*     */   
/*     */   public PublishOptions setSrcIvyPattern(String srcIvyPattern) {
/* 114 */     this.srcIvyPattern = srcIvyPattern;
/* 115 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 119 */   public String getStatus() { return this.status; }
/*     */ 
/*     */   
/*     */   public PublishOptions setStatus(String status) {
/* 123 */     this.status = status;
/* 124 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 128 */   public boolean isUpdate() { return this.update; }
/*     */ 
/*     */   
/*     */   public PublishOptions setUpdate(boolean update) {
/* 132 */     this.update = update;
/* 133 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 137 */   public boolean isValidate() { return this.validate; }
/*     */ 
/*     */   
/*     */   public PublishOptions setValidate(boolean validate) {
/* 141 */     this.validate = validate;
/* 142 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 146 */   public boolean isHaltOnMissing() { return this.haltonmissing; }
/*     */ 
/*     */   
/*     */   public PublishOptions setHaltOnMissing(boolean haltonmissing) {
/* 150 */     this.haltonmissing = haltonmissing;
/* 151 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 155 */   public String getPubBranch() { return this.pubBranch; }
/*     */ 
/*     */   
/*     */   public PublishOptions setPubbranch(String pubbranch) {
/* 159 */     this.pubBranch = pubbranch;
/* 160 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 164 */   public boolean isWarnOnMissing() { return this.warnonmissing; }
/*     */ 
/*     */   
/*     */   public PublishOptions setWarnOnMissing(boolean warnonmissing) {
/* 168 */     this.warnonmissing = warnonmissing;
/* 169 */     return this;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\publish\PublishOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.ArtifactDownloadReport,"/*     */ package org.apache.ivy.core.report;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ArtifactDownloadReport
/*     */ {
/*     */   public static final String MISSING_ARTIFACT = ""missing artifact"";
/*     */   private Artifact artifact;
/*     */   private ArtifactOrigin origin;
/*     */   private File localFile;
/*     */   private DownloadStatus downloadStatus;
/*     */   private long size;
/*  54 */   private String downloadDetails = """";
/*     */   
/*     */   private long downloadTimeMillis;
/*     */ 
/*     */   
/*  59 */   public ArtifactDownloadReport(Artifact artifact) { this.artifact = artifact; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public DownloadStatus getDownloadStatus() { return this.downloadStatus; }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public void setDownloadStatus(DownloadStatus downloadStatus) { this.downloadStatus = downloadStatus; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public String getName() { return this.artifact.getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  79 */   public String getType() { return this.artifact.getType(); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public Artifact getArtifact() { return this.artifact; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public String getExt() { return this.artifact.getExt(); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public long getSize() { return this.size; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setSize(long size) { this.size = size; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setArtifactOrigin(ArtifactOrigin origin) { this.origin = origin; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public ArtifactOrigin getArtifactOrigin() { return this.origin; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setDownloadDetails(String message) { this.downloadDetails = message; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public String getDownloadDetails() { return this.downloadDetails; }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setDownloadTimeMillis(long l) { this.downloadTimeMillis = l; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public long getDownloadTimeMillis() { return this.downloadTimeMillis; }
/*     */ 
/*     */   
/*     */   public String toString() {
/* 123 */     if (this.downloadStatus == DownloadStatus.SUCCESSFUL)
/* 124 */       return ""[SUCCESSFUL ] "" + this.artifact + "" ("" + this.downloadTimeMillis + ""ms)""; 
/* 125 */     if (this.downloadStatus == DownloadStatus.FAILED) {
/* 126 */       if (this.downloadDetails == ""missing artifact"") {
/* 127 */         return ""[NOT FOUND  ] "" + this.artifact + "" ("" + this.downloadTimeMillis + ""ms)"";
/*     */       }
/*     */       
/* 130 */       return ""[FAILED     ] "" + this.artifact + "": "" + this.downloadDetails + "" ("" + this.downloadTimeMillis + ""ms)"";
/*     */     } 
/*     */     
/* 133 */     if (this.downloadStatus == DownloadStatus.NO) {
/* 134 */       return ""[NOT REQUIRED] "" + this.artifact;
/*     */     }
/* 136 */     return super.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public File getLocalFile() { return this.localFile; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setLocalFile(File localFile) { this.localFile = localFile; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public boolean isDownloaded() { return (DownloadStatus.SUCCESSFUL == this.downloadStatus); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\ArtifactDownloadReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.ConfigurationResolveReport,"/*     */ package org.apache.ivy.core.report;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.sort.SortOptions;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ConfigurationResolveReport
/*     */ {
/*     */   private final ModuleDescriptor md;
/*     */   private final String conf;
/*     */   private final Date date;
/*     */   private final ResolveOptions options;
/*  59 */   private Map dependencyReports = new LinkedHashMap();
/*     */   
/*  61 */   private Map dependencies = new LinkedHashMap();
/*     */   
/*     */   private final ResolveEngine resolveEngine;
/*     */   
/*  65 */   private Map modulesIdsMap = new LinkedHashMap();
/*     */   
/*     */   private List modulesIds;
/*     */   
/*  69 */   private Boolean hasChanged = null;
/*     */ 
/*     */   
/*     */   public ConfigurationResolveReport(ResolveEngine resolveEngine, ModuleDescriptor md, String conf, Date date, ResolveOptions options) {
/*  73 */     this.resolveEngine = resolveEngine;
/*  74 */     this.md = md;
/*  75 */     this.conf = conf;
/*  76 */     this.date = date;
/*  77 */     this.options = options;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkIfChanged() {
/*  92 */     ResolutionCacheManager cache = this.resolveEngine.getSettings().getResolutionCacheManager();
/*  93 */     String resolveId = this.options.getResolveId();
/*  94 */     File previousReportFile = cache.getConfigurationResolveReportInCache(resolveId, this.conf);
/*  95 */     if (previousReportFile.exists()) {
/*     */       try {
/*  97 */         XmlReportParser parser = new XmlReportParser();
/*  98 */         parser.parse(previousReportFile);
/*  99 */         List previousDeps = Arrays.asList(parser.getDependencyRevisionIds());
/* 100 */         HashSet previousDepSet = new HashSet(previousDeps);
/* 101 */         this.hasChanged = Boolean.valueOf(!previousDepSet.equals(getModuleRevisionIds()));
/* 102 */       } catch (Exception e) {
/* 103 */         Message.warn(""Error while parsing configuration resolve report "" + previousReportFile.getAbsolutePath());
/*     */         
/* 105 */         e.printStackTrace();
/* 106 */         this.hasChanged = Boolean.TRUE;
/*     */       } 
/*     */     } else {
/* 109 */       this.hasChanged = Boolean.TRUE;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public boolean hasChanged() { return this.hasChanged.booleanValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Set getModuleRevisionIds() {
/* 127 */     Set mrids = new LinkedHashSet();
/* 128 */     for (Iterator iter = getDependencies().iterator(); iter.hasNext(); ) {
/* 129 */       IvyNode node = iter.next();
/* 130 */       if (!node.isEvicted(getConfiguration()) && !node.hasProblem()) {
/* 131 */         mrids.add(node.getResolvedId());
/*     */       }
/*     */     } 
/* 134 */     return mrids;
/*     */   }
/*     */   
/*     */   public void addDependency(IvyNode node) {
/* 138 */     this.dependencies.put(node.getId(), node);
/* 139 */     this.dependencies.put(node.getResolvedId(), node);
/* 140 */     this.dependencyReports.put(node, Collections.EMPTY_LIST);
/*     */   }
/*     */ 
/*     */   
/* 144 */   public void updateDependency(ModuleRevisionId mrid, IvyNode node) { this.dependencies.put(mrid, node); }
/*     */ 
/*     */   
/*     */   public void addDependency(IvyNode node, DownloadReport report) {
/* 148 */     this.dependencies.put(node.getId(), node);
/* 149 */     this.dependencies.put(node.getResolvedId(), node);
/* 150 */     List adrs = new ArrayList();
/* 151 */     Artifact[] artifacts = node.getArtifacts(this.conf);
/* 152 */     for (int i = 0; i < artifacts.length; i++) {
/* 153 */       ArtifactDownloadReport artifactReport = report.getArtifactReport(artifacts[i]);
/* 154 */       if (artifactReport != null) {
/* 155 */         adrs.add(artifactReport);
/*     */       } else {
/* 157 */         Message.debug(""no report found for "" + artifacts[i]);
/*     */       } 
/*     */     } 
/* 160 */     this.dependencyReports.put(node, adrs);
/*     */   }
/*     */ 
/*     */   
/* 164 */   public String getConfiguration() { return this.conf; }
/*     */ 
/*     */ 
/*     */   
/* 168 */   public Date getDate() { return this.date; }
/*     */ 
/*     */ 
/*     */   
/* 172 */   public ModuleDescriptor getModuleDescriptor() { return this.md; }
/*     */ 
/*     */   
/*     */   public IvyNode[] getUnresolvedDependencies() {
/* 176 */     List unresolved = new ArrayList();
/* 177 */     for (Iterator iter = getDependencies().iterator(); iter.hasNext(); ) {
/* 178 */       IvyNode node = iter.next();
/* 179 */       if (node.hasProblem()) {
/* 180 */         unresolved.add(node);
/*     */       }
/*     */     } 
/* 183 */     return unresolved.toArray(new IvyNode[unresolved.size()]);
/*     */   }
/*     */ 
/*     */   
/* 187 */   private Collection getDependencies() { return new LinkedHashSet(this.dependencies.values()); }
/*     */ 
/*     */   
/*     */   public IvyNode[] getEvictedNodes() {
/* 191 */     List evicted = new ArrayList();
/* 192 */     for (Iterator iter = getDependencies().iterator(); iter.hasNext(); ) {
/* 193 */       IvyNode node = iter.next();
/* 194 */       if (node.isEvicted(this.conf)) {
/* 195 */         evicted.add(node);
/*     */       }
/*     */     } 
/* 198 */     return evicted.toArray(new IvyNode[evicted.size()]);
/*     */   }
/*     */   
/*     */   private Set getEvictedMrids() {
/* 202 */     Set evicted = new LinkedHashSet();
/* 203 */     IvyNode[] evictedNodes = getEvictedNodes();
/* 204 */     for (int i = 0; i < evictedNodes.length; i++) {
/* 205 */       evicted.add(evictedNodes[i].getId());
/*     */     }
/* 207 */     return evicted;
/*     */   }
/*     */   
/*     */   public IvyNode[] getDownloadedNodes() {
/* 211 */     List downloaded = new ArrayList();
/* 212 */     for (Iterator iter = getDependencies().iterator(); iter.hasNext(); ) {
/* 213 */       IvyNode node = iter.next();
/* 214 */       if (node.isDownloaded() && node.getRealNode() == node) {
/* 215 */         downloaded.add(node);
/*     */       }
/*     */     } 
/* 218 */     return downloaded.toArray(new IvyNode[downloaded.size()]);
/*     */   }
/*     */   
/*     */   public IvyNode[] getSearchedNodes() {
/* 222 */     List downloaded = new ArrayList();
/* 223 */     for (Iterator iter = getDependencies().iterator(); iter.hasNext(); ) {
/* 224 */       IvyNode node = iter.next();
/* 225 */       if (node.isSearched() && node.getRealNode() == node) {
/* 226 */         downloaded.add(node);
/*     */       }
/*     */     } 
/* 229 */     return downloaded.toArray(new IvyNode[downloaded.size()]);
/*     */   }
/*     */   
/*     */   public ArtifactDownloadReport[] getDownloadReports(ModuleRevisionId mrid) {
/* 233 */     Collection col = (Collection)this.dependencyReports.get(getDependency(mrid));
/* 234 */     if (col == null) {
/* 235 */       return new ArtifactDownloadReport[0];
/*     */     }
/* 237 */     return (ArtifactDownloadReport[])col.toArray((Object[])new ArtifactDownloadReport[col.size()]);
/*     */   }
/*     */ 
/*     */   
/* 241 */   public IvyNode getDependency(ModuleRevisionId mrid) { return (IvyNode)this.dependencies.get(mrid); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List getModuleIds() {
/* 250 */     if (this.modulesIds == null) {
/* 251 */       List sortedDependencies = this.resolveEngine.getSortEngine().sortNodes(getDependencies(), SortOptions.SILENT);
/*     */       
/* 253 */       Collections.reverse(sortedDependencies);
/* 254 */       for (Iterator iter = sortedDependencies.iterator(); iter.hasNext(); ) {
/* 255 */         IvyNode dependency = (IvyNode)iter.next();
/* 256 */         ModuleId mid = dependency.getResolvedId().getModuleId();
/* 257 */         Collection deps = (Collection)this.modulesIdsMap.get(mid);
/* 258 */         if (deps == null) {
/* 259 */           deps = new LinkedHashSet();
/* 260 */           this.modulesIdsMap.put(mid, deps);
/*     */         } 
/* 262 */         deps.add(dependency);
/*     */       } 
/* 264 */       this.modulesIds = new ArrayList(this.modulesIdsMap.keySet());
/*     */     } 
/* 266 */     return Collections.unmodifiableList(this.modulesIds);
/*     */   }
/*     */   
/*     */   public Collection getNodes(ModuleId mid) {
/* 270 */     if (this.modulesIds == null) {
/* 271 */       getModuleIds();
/*     */     }
/* 273 */     return (Collection)this.modulesIdsMap.get(mid);
/*     */   }
/*     */ 
/*     */   
/* 277 */   public ResolveEngine getResolveEngine() { return this.resolveEngine; }
/*     */ 
/*     */   
/*     */   public int getArtifactsNumber() {
/* 281 */     int total = 0;
/* 282 */     for (Iterator iter = this.dependencyReports.values().iterator(); iter.hasNext(); ) {
/* 283 */       Collection reports = iter.next();
/* 284 */       total += (reports == null) ? 0 : reports.size();
/*     */     } 
/* 286 */     return total;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public ArtifactDownloadReport[] getAllArtifactsReports() { return getArtifactsReports(null, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport[] getArtifactsReports(DownloadStatus downloadStatus, boolean withEvicted) {
/* 313 */     Collection all = new LinkedHashSet();
/* 314 */     Collection evictedMrids = null;
/* 315 */     if (!withEvicted) {
/* 316 */       evictedMrids = getEvictedMrids();
/*     */     }
/* 318 */     for (Iterator iter = this.dependencyReports.values().iterator(); iter.hasNext(); ) {
/* 319 */       Collection reports = iter.next();
/* 320 */       for (Iterator itReport = reports.iterator(); itReport.hasNext(); ) {
/* 321 */         ArtifactDownloadReport report = itReport.next();
/* 322 */         if (downloadStatus != null && report.getDownloadStatus() != downloadStatus) {
/*     */           continue;
/*     */         }
/* 325 */         if (withEvicted || !evictedMrids.contains(report.getArtifact().getModuleRevisionId()))
/*     */         {
/* 327 */           all.add(report);
/*     */         }
/*     */       } 
/*     */     } 
/* 331 */     return all.toArray(new ArtifactDownloadReport[all.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 340 */   public ArtifactDownloadReport[] getDownloadedArtifactsReports() { return getArtifactsReports(DownloadStatus.SUCCESSFUL, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport[] getFailedArtifactsReports() {
/* 349 */     ArtifactDownloadReport[] allFailedReports = getArtifactsReports(DownloadStatus.FAILED, true);
/*     */     
/* 351 */     return filterOutMergedArtifacts(allFailedReports);
/*     */   }
/*     */ 
/*     */   
/* 355 */   public boolean hasError() { return ((getUnresolvedDependencies()).length > 0 || (getFailedArtifactsReports()).length > 0); }
/*     */ 
/*     */ 
/*     */   
/* 359 */   public int getNodesNumber() { return getDependencies().size(); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static ArtifactDownloadReport[] filterOutMergedArtifacts(ArtifactDownloadReport[] allFailedReports) {
/* 364 */     Collection adrs = new ArrayList(Arrays.asList((Object[])allFailedReports));
/* 365 */     for (Iterator iterator = adrs.iterator(); iterator.hasNext(); ) {
/* 366 */       ArtifactDownloadReport adr = iterator.next();
/*     */       
/* 368 */       if (adr.getArtifact().getExtraAttribute(""ivy:merged"") != null) {
/* 369 */         iterator.remove();
/*     */       }
/*     */     } 
/* 372 */     return (ArtifactDownloadReport[])adrs.toArray((Object[])new ArtifactDownloadReport[adrs.size()]);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\ConfigurationResolveReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.DownloadReport,"/*    */ package org.apache.ivy.core.report;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.HashMap;
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DownloadReport
/*    */ {
/* 32 */   private Map artifacts = new HashMap();
/*    */ 
/*    */   
/* 35 */   public void addArtifactReport(ArtifactDownloadReport adr) { this.artifacts.put(adr.getArtifact(), adr); }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public ArtifactDownloadReport[] getArtifactsReports() { return (ArtifactDownloadReport[])this.artifacts.values().toArray((Object[])new ArtifactDownloadReport[this.artifacts.size()]); }
/*    */ 
/*    */ 
/*    */   
/*    */   public ArtifactDownloadReport[] getArtifactsReports(DownloadStatus status) {
/* 44 */     List ret = new ArrayList(this.artifacts.size());
/* 45 */     for (Iterator iter = this.artifacts.values().iterator(); iter.hasNext(); ) {
/* 46 */       ArtifactDownloadReport adr = iter.next();
/* 47 */       if (adr.getDownloadStatus() == status) {
/* 48 */         ret.add(adr);
/*    */       }
/*    */     } 
/* 51 */     return ret.toArray(new ArtifactDownloadReport[ret.size()]);
/*    */   }
/*    */ 
/*    */   
/* 55 */   public ArtifactDownloadReport getArtifactReport(Artifact artifact) { return (ArtifactDownloadReport)this.artifacts.get(artifact); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\DownloadReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.DownloadStatus,"/*    */ package org.apache.ivy.core.report;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class DownloadStatus
/*    */ {
/*    */   private String name;
/*    */   
/* 27 */   private DownloadStatus(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 33 */   public static final DownloadStatus NO = new DownloadStatus(""no"");
/*    */   
/* 35 */   public static final DownloadStatus SUCCESSFUL = new DownloadStatus(""successful"");
/*    */   
/* 37 */   public static final DownloadStatus FAILED = new DownloadStatus(""failed"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static final DownloadStatus fromString(String status) {
/* 47 */     if (NO.name.equals(status)) {
/* 48 */       return NO;
/*    */     }
/* 50 */     if (SUCCESSFUL.name.equals(status)) {
/* 51 */       return SUCCESSFUL;
/*    */     }
/* 53 */     if (FAILED.name.equals(status)) {
/* 54 */       return FAILED;
/*    */     }
/* 56 */     throw new IllegalArgumentException(""unknown download status '"" + status + ""'"");
/*    */   }
/*    */ 
/*    */   
/* 60 */   public String toString() { return this.name; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\DownloadStatus.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.MetadataArtifactDownloadReport,"/*    */ package org.apache.ivy.core.report;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MetadataArtifactDownloadReport
/*    */   extends ArtifactDownloadReport
/*    */ {
/*    */   private boolean isSearched;
/*    */   private File originalLocalFile;
/*    */   
/* 30 */   public MetadataArtifactDownloadReport(Artifact artifact) { super(artifact); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 41 */   public boolean isSearched() { return this.isSearched; }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public void setSearched(boolean isSearched) { this.isSearched = isSearched; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 56 */   public File getOriginalLocalFile() { return this.originalLocalFile; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public void setOriginalLocalFile(File originalLocalFile) { this.originalLocalFile = originalLocalFile; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\MetadataArtifactDownloadReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.report.ResolveReport,"/*     */ package org.apache.ivy.core.report;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.plugins.report.ReportOutputter;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResolveReport
/*     */ {
/*     */   private ModuleDescriptor md;
/*  46 */   private Map confReports = new LinkedHashMap();
/*     */   
/*  48 */   private List problemMessages = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   private List dependencies = new ArrayList();
/*     */   
/*  55 */   private List artifacts = new ArrayList();
/*     */   
/*     */   private long resolveTime;
/*     */   
/*     */   private long downloadTime;
/*     */   
/*     */   private String resolveId;
/*     */   
/*     */   private long downloadSize;
/*     */ 
/*     */   
/*  66 */   public ResolveReport(ModuleDescriptor md) { this(md, ResolveOptions.getDefaultResolveId(md)); }
/*     */ 
/*     */   
/*     */   public ResolveReport(ModuleDescriptor md, String resolveId) {
/*  70 */     this.md = md;
/*  71 */     this.resolveId = resolveId;
/*     */   }
/*     */ 
/*     */   
/*  75 */   public void addReport(String conf, ConfigurationResolveReport report) { this.confReports.put(conf, report); }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public ConfigurationResolveReport getConfigurationReport(String conf) { return (ConfigurationResolveReport)this.confReports.get(conf); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public String[] getConfigurations() { return (String[])this.confReports.keySet().toArray((Object[])new String[this.confReports.size()]); }
/*     */ 
/*     */   
/*     */   public boolean hasError() {
/*  87 */     boolean hasError = false;
/*  88 */     for (Iterator it = this.confReports.values().iterator(); it.hasNext() && !hasError; ) {
/*  89 */       ConfigurationResolveReport report = it.next();
/*  90 */       hasError |= report.hasError();
/*     */     } 
/*  92 */     return hasError;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void output(ReportOutputter[] outputters, ResolutionCacheManager cacheMgr, ResolveOptions options) throws IOException {
/*  98 */     for (int i = 0; i < outputters.length; i++) {
/*  99 */       outputters[i].output(this, cacheMgr, options);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 104 */   public ModuleDescriptor getModuleDescriptor() { return this.md; }
/*     */ 
/*     */   
/*     */   public IvyNode[] getEvictedNodes() {
/* 108 */     Collection all = new LinkedHashSet();
/* 109 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 110 */       ConfigurationResolveReport report = iter.next();
/* 111 */       all.addAll(Arrays.asList(report.getEvictedNodes()));
/*     */     } 
/* 113 */     return (IvyNode[])all.toArray((Object[])new IvyNode[all.size()]);
/*     */   }
/*     */   
/*     */   public IvyNode[] getUnresolvedDependencies() {
/* 117 */     Collection all = new LinkedHashSet();
/* 118 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 119 */       ConfigurationResolveReport report = iter.next();
/* 120 */       all.addAll(Arrays.asList(report.getUnresolvedDependencies()));
/*     */     } 
/* 122 */     return (IvyNode[])all.toArray((Object[])new IvyNode[all.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public ArtifactDownloadReport[] getFailedArtifactsReports() { return ConfigurationResolveReport.filterOutMergedArtifacts(getArtifactsReports(DownloadStatus.FAILED, true)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public ArtifactDownloadReport[] getAllArtifactsReports() { return getArtifactsReports(null, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport[] getArtifactsReports(DownloadStatus downloadStatus, boolean withEvicted) {
/* 160 */     Collection all = new LinkedHashSet();
/* 161 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 162 */       ConfigurationResolveReport report = iter.next();
/* 163 */       ArtifactDownloadReport[] reports = report.getArtifactsReports(downloadStatus, withEvicted);
/*     */       
/* 165 */       all.addAll(Arrays.asList(reports));
/*     */     } 
/* 167 */     return (ArtifactDownloadReport[])all.toArray((Object[])new ArtifactDownloadReport[all.size()]);
/*     */   }
/*     */   
/*     */   public ArtifactDownloadReport[] getArtifactsReports(ModuleRevisionId mrid) {
/* 171 */     Collection all = new LinkedHashSet();
/* 172 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 173 */       ConfigurationResolveReport report = iter.next();
/* 174 */       all.addAll(Arrays.asList(report.getDownloadReports(mrid)));
/*     */     } 
/* 176 */     return (ArtifactDownloadReport[])all.toArray((Object[])new ArtifactDownloadReport[all.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   public void checkIfChanged() {
/* 181 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 182 */       ConfigurationResolveReport report = iter.next();
/* 183 */       report.checkIfChanged();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasChanged() {
/* 190 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 191 */       ConfigurationResolveReport report = iter.next();
/* 192 */       if (report.hasChanged()) {
/* 193 */         return true;
/*     */       }
/*     */     } 
/* 196 */     return false;
/*     */   }
/*     */ 
/*     */   
/* 200 */   public void setProblemMessages(List problems) { this.problemMessages = problems; }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public List getProblemMessages() { return this.problemMessages; }
/*     */ 
/*     */   
/*     */   public List getAllProblemMessages() {
/* 208 */     List ret = new ArrayList(this.problemMessages);
/* 209 */     for (Iterator iter = this.confReports.values().iterator(); iter.hasNext(); ) {
/* 210 */       ConfigurationResolveReport r = iter.next();
/* 211 */       IvyNode[] unresolved = r.getUnresolvedDependencies();
/* 212 */       for (int i = 0; i < unresolved.length; i++) {
/* 213 */         String errMsg = unresolved[i].getProblemMessage();
/* 214 */         if (errMsg.length() > 0) {
/* 215 */           ret.add(""unresolved dependency: "" + unresolved[i].getId() + "": "" + errMsg);
/*     */         } else {
/* 217 */           ret.add(""unresolved dependency: "" + unresolved[i].getId());
/*     */         } 
/*     */       } 
/* 220 */       ArtifactDownloadReport[] adrs = r.getFailedArtifactsReports();
/* 221 */       for (int i = 0; i < adrs.length; i++) {
/* 222 */         ret.add(""download failed: "" + adrs[i].getArtifact());
/*     */       }
/*     */     } 
/* 225 */     return ret;
/*     */   }
/*     */   
/*     */   public void setDependencies(List dependencies, Filter artifactFilter) {
/* 229 */     this.dependencies = dependencies;
/*     */     
/* 231 */     this.artifacts = new ArrayList();
/* 232 */     for (Iterator iter = dependencies.iterator(); iter.hasNext(); ) {
/* 233 */       IvyNode dependency = iter.next();
/* 234 */       if (!dependency.isCompletelyEvicted() && !dependency.hasProblem()) {
/* 235 */         this.artifacts.addAll(Arrays.asList(dependency.getSelectedArtifacts(artifactFilter)));
/*     */       }
/*     */ 
/*     */       
/* 239 */       String[] dconfs = dependency.getRootModuleConfigurations();
/* 240 */       for (int j = 0; j < dconfs.length; j++) {
/* 241 */         ConfigurationResolveReport configurationReport = getConfigurationReport(dconfs[j]);
/* 242 */         if (configurationReport != null) {
/* 243 */           configurationReport.addDependency(dependency);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 256 */   public List getDependencies() { return this.dependencies; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public List getArtifacts() { return this.artifacts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List getModuleIds() {
/* 275 */     List ret = new ArrayList();
/* 276 */     List sortedDependencies = new ArrayList(this.dependencies);
/* 277 */     for (Iterator iter = sortedDependencies.iterator(); iter.hasNext(); ) {
/* 278 */       IvyNode dependency = iter.next();
/* 279 */       ModuleId mid = dependency.getResolvedId().getModuleId();
/* 280 */       if (!ret.contains(mid)) {
/* 281 */         ret.add(mid);
/*     */       }
/*     */     } 
/* 284 */     return ret;
/*     */   }
/*     */ 
/*     */   
/* 288 */   public void setResolveTime(long elapsedTime) { this.resolveTime = elapsedTime; }
/*     */ 
/*     */ 
/*     */   
/* 292 */   public long getResolveTime() { return this.resolveTime; }
/*     */ 
/*     */ 
/*     */   
/* 296 */   public void setDownloadTime(long elapsedTime) { this.downloadTime = elapsedTime; }
/*     */ 
/*     */ 
/*     */   
/* 300 */   public long getDownloadTime() { return this.downloadTime; }
/*     */ 
/*     */ 
/*     */   
/* 304 */   public void setDownloadSize(long size) { this.downloadSize = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 317 */   public long getDownloadSize() { return this.downloadSize; }
/*     */ 
/*     */ 
/*     */   
/* 321 */   public String getResolveId() { return this.resolveId; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\report\ResolveReport.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.repository.RepositoryManagementEngine,"/*     */ package org.apache.ivy.core.repository;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Comparator;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.TreeSet;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.search.SearchEngine;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.matcher.RegexpPatternMatcher;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.MemoryUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RepositoryManagementEngine
/*     */ {
/*     */   private static final double THOUSAND = 1000.0D;
/*     */   private static final int KILO = 1024;
/*     */   private boolean loaded;
/*  86 */   private Map revisions = new HashMap();
/*     */ 
/*     */ 
/*     */   
/*  90 */   private Map errors = new HashMap();
/*     */ 
/*     */ 
/*     */   
/*  94 */   private Map modules = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean analyzed;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   private Map cache = new HashMap();
/*     */ 
/*     */ 
/*     */   
/* 111 */   private Map dependers = new HashMap();
/*     */ 
/*     */   
/*     */   private SearchEngine searchEngine;
/*     */ 
/*     */   
/*     */   private ResolveEngine resolveEngine;
/*     */   
/*     */   private RepositoryManagementEngineSettings settings;
/*     */ 
/*     */   
/*     */   public RepositoryManagementEngine(RepositoryManagementEngineSettings settings, SearchEngine searchEngine, ResolveEngine resolveEngine) {
/* 123 */     this.settings = settings;
/* 124 */     this.searchEngine = searchEngine;
/* 125 */     this.resolveEngine = resolveEngine;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void load() {
/* 136 */     long startingMemoryUse = 0L;
/* 137 */     if (this.settings.dumpMemoryUsage()) {
/* 138 */       startingMemoryUse = MemoryUtil.getUsedMemory();
/*     */     }
/* 140 */     long startTime = System.currentTimeMillis();
/* 141 */     Message.rawinfo(""searching modules... "");
/* 142 */     ModuleRevisionId[] mrids = searchModules();
/* 143 */     Message.info(""loading repository metadata..."");
/* 144 */     for (int i = 0; i < mrids.length; i++) {
/*     */       try {
/* 146 */         loadModuleRevision(mrids[i]);
/* 147 */       } catch (Exception e) {
/* 148 */         this.errors.put(mrids[i], e.getMessage());
/*     */       } 
/*     */     } 
/* 151 */     long endTime = System.currentTimeMillis();
/* 152 */     Message.info(""\nrepository loaded: "" + this.modules.size() + "" modules; "" + this.revisions.size() + "" revisions; "" + (this.settings.dumpMemoryUsage() ? (((MemoryUtil.getUsedMemory() - startingMemoryUse) / 1024L) + ""kB; "") : """") + ((endTime - startTime) / 1000.0D) + ""s"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 158 */     this.loaded = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void analyze() {
/* 172 */     ensureLoaded();
/* 173 */     Message.info(""\nanalyzing dependencies..."");
/* 174 */     for (Iterator iterator = this.revisions.values().iterator(); iterator.hasNext(); ) {
/* 175 */       ModuleDescriptor md = iterator.next();
/* 176 */       DependencyDescriptor[] dds = md.getDependencies();
/* 177 */       for (int i = 0; i < dds.length; i++) {
/* 178 */         ModuleRevisionId dep = getDependency(dds[i]);
/* 179 */         if (dep == null) {
/* 180 */           Message.warn(""inconsistent repository: declared dependency not found: "" + dds[i]);
/*     */         } else {
/*     */           
/* 183 */           getDependers(dep).add(md.getModuleRevisionId());
/*     */         } 
/*     */       } 
/* 186 */       Message.progress();
/*     */     } 
/* 188 */     this.analyzed = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int getRevisionsNumber() {
/* 200 */     ensureLoaded();
/* 201 */     return this.revisions.size();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int getModuleIdsNumber() {
/* 213 */     ensureLoaded();
/* 214 */     return this.modules.size();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Collection getOrphans() {
/* 227 */     ensureAnalyzed();
/* 228 */     Collection orphans = new HashSet(this.revisions.keySet());
/* 229 */     orphans.removeAll(this.dependers.keySet());
/* 230 */     return orphans;
/*     */   }
/*     */ 
/*     */   
/*     */   private ModuleRevisionId[] searchModules() {
/* 235 */     ModuleRevisionId[] mrids = this.searchEngine.listModules(ModuleRevisionId.newInstance(""*"", ""*"", ""*"", ""*""), (PatternMatcher)RegexpPatternMatcher.INSTANCE);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 242 */     return mrids;
/*     */   }
/*     */   
/*     */   private ModuleRevisionId getDependency(DependencyDescriptor dd) {
/* 246 */     ModuleRevisionId askedMrid = dd.getDependencyRevisionId();
/* 247 */     VersionMatcher vmatcher = this.settings.getVersionMatcher();
/* 248 */     if (vmatcher.isDynamic(askedMrid)) {
/* 249 */       ModuleRevisionId mrid = (ModuleRevisionId)this.cache.get(askedMrid);
/* 250 */       if (mrid == null) {
/* 251 */         Collection revs = getAllRevisions(askedMrid);
/* 252 */         for (Iterator iterator = revs.iterator(); iterator.hasNext(); ) {
/* 253 */           ModuleDescriptor md = iterator.next();
/* 254 */           if (vmatcher.needModuleDescriptor(askedMrid, md.getResolvedModuleRevisionId())) {
/*     */             
/* 256 */             if (vmatcher.accept(askedMrid, md)) {
/* 257 */               mrid = md.getResolvedModuleRevisionId(); break;
/*     */             } 
/*     */             continue;
/*     */           } 
/* 261 */           if (vmatcher.accept(askedMrid, md.getResolvedModuleRevisionId())) {
/* 262 */             mrid = md.getResolvedModuleRevisionId();
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/* 267 */         if (mrid == null) {
/* 268 */           return null;
/*     */         }
/* 270 */         this.cache.put(askedMrid, mrid);
/*     */       } 
/*     */       
/* 273 */       return mrid;
/*     */     } 
/* 275 */     return askedMrid;
/*     */   }
/*     */ 
/*     */   
/*     */   private Collection getDependers(ModuleRevisionId id) {
/* 280 */     Collection depders = (Collection)this.dependers.get(id);
/* 281 */     if (depders == null) {
/* 282 */       depders = new ArrayList();
/* 283 */       this.dependers.put(id, depders);
/*     */     } 
/* 285 */     return depders;
/*     */   }
/*     */   
/*     */   private void loadModuleRevision(ModuleRevisionId mrid) throws Exception {
/* 289 */     ResolvedModuleRevision module = this.settings.getResolver(mrid).getDependency((DependencyDescriptor)new DefaultDependencyDescriptor(mrid, false), newResolveData());
/*     */ 
/*     */     
/* 292 */     if (module == null) {
/* 293 */       Message.warn(""module not found while listed: "" + mrid);
/*     */     } else {
/* 295 */       this.revisions.put(module.getId(), module.getDescriptor());
/* 296 */       getAllRevisions(module.getId()).add(module.getDescriptor());
/*     */     } 
/* 298 */     Message.progress();
/*     */   }
/*     */   
/*     */   private Collection getAllRevisions(ModuleRevisionId id) {
/* 302 */     Collection revisions = (Collection)this.modules.get(id.getModuleId());
/* 303 */     if (revisions == null) {
/* 304 */       revisions = new TreeSet(new Comparator() {
/*     */             public int compare(Object o1, Object o2) {
/* 306 */               ModuleDescriptor md1 = (ModuleDescriptor)o1;
/* 307 */               ModuleDescriptor md2 = (ModuleDescriptor)o2;
/*     */ 
/*     */               
/* 310 */               return RepositoryManagementEngine.this.settings.getDefaultLatestStrategy().sort(new ArtifactInfo[] { (ArtifactInfo)md1, (ArtifactInfo)md2 }).get(0).equals(md1) ? 1 : -1;
/*     */             }
/*     */             private final RepositoryManagementEngine this$0;
/*     */           });
/* 314 */       this.modules.put(id.getModuleId(), revisions);
/*     */     } 
/* 316 */     return revisions;
/*     */   }
/*     */ 
/*     */   
/* 320 */   private ResolveData newResolveData() { return new ResolveData(this.resolveEngine, new ResolveOptions()); }
/*     */ 
/*     */   
/*     */   private void ensureAnalyzed() {
/* 324 */     if (!this.analyzed) {
/* 325 */       throw new IllegalStateException(""repository must have been analyzed to perform this method"");
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private void ensureLoaded() {
/* 331 */     if (!this.loaded)
/* 332 */       throw new IllegalStateException(""repository must have be loaded to perform this method""); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\repository\RepositoryManagementEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.repository.RepositoryManagementEngineSettings,"package org.apache.ivy.core.repository;
import org.apache.ivy.core.resolve.ResolveEngineSettings;
public interface RepositoryManagementEngineSettings extends ResolveEngineSettings {
  boolean dumpMemoryUsage();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\repository\RepositoryManagementEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.DownloadOptions,"package org.apache.ivy.core.resolve;
import org.apache.ivy.core.LogOptions;
public class DownloadOptions extends LogOptions {}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\DownloadOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.IvyNode,"/*      */ package org.apache.ivy.core.resolve;
/*      */ 
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.Collection;
/*      */ import java.util.HashMap;
/*      */ import java.util.HashSet;
/*      */ import java.util.Iterator;
/*      */ import java.util.LinkedHashMap;
/*      */ import java.util.LinkedHashSet;
/*      */ import java.util.LinkedList;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import java.util.Set;
/*      */ import java.util.Stack;
/*      */ import java.util.regex.Matcher;
/*      */ import java.util.regex.Pattern;
/*      */ import org.apache.ivy.core.IvyContext;
/*      */ import org.apache.ivy.core.event.IvyEvent;
/*      */ import org.apache.ivy.core.event.resolve.EndResolveDependencyEvent;
/*      */ import org.apache.ivy.core.event.resolve.StartResolveDependencyEvent;
/*      */ import org.apache.ivy.core.module.descriptor.Artifact;
/*      */ import org.apache.ivy.core.module.descriptor.Configuration;
/*      */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*      */ import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.IncludeRule;
/*      */ import org.apache.ivy.core.module.descriptor.MDArtifact;
/*      */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*      */ import org.apache.ivy.core.module.id.ArtifactId;
/*      */ import org.apache.ivy.core.module.id.ModuleId;
/*      */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*      */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*      */ import org.apache.ivy.plugins.matcher.MatcherHelper;
/*      */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*      */ import org.apache.ivy.util.Message;
/*      */ import org.apache.ivy.util.StringUtils;
/*      */ import org.apache.ivy.util.filter.Filter;
/*      */ import org.apache.ivy.util.filter.FilterHelper;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class IvyNode
/*      */   implements Comparable
/*      */ {
/*   62 */   private static final Pattern FALLBACK_CONF_PATTERN = Pattern.compile(""(.+)\\((.*)\\)"");
/*      */ 
/*      */   
/*      */   private ResolveData data;
/*      */ 
/*      */   
/*      */   private ResolveEngineSettings settings;
/*      */ 
/*      */   
/*      */   private IvyNodeCallers callers;
/*      */ 
/*      */   
/*      */   private IvyNodeEviction eviction;
/*      */ 
/*      */   
/*      */   private IvyNode root;
/*      */ 
/*      */   
/*      */   private ModuleRevisionId id;
/*      */ 
/*      */   
/*   83 */   private Map dds = new HashMap();
/*      */ 
/*      */   
/*      */   private ModuleDescriptor md;
/*      */ 
/*      */   
/*      */   private ResolvedModuleRevision module;
/*      */   
/*   91 */   private Exception problem = null;
/*      */   
/*      */   private boolean downloaded = false;
/*      */   
/*      */   private boolean searched = false;
/*      */   
/*   97 */   private Collection confsToFetch = new HashSet();
/*      */   
/*   99 */   private Collection fetchedConfigurations = new HashSet();
/*      */   
/*  101 */   private Collection loadedRootModuleConfs = new HashSet();
/*      */ 
/*      */ 
/*      */   
/*  105 */   private IvyNodeUsage usage = new IvyNodeUsage(this);
/*      */ 
/*      */   
/*  108 */   private Map mergedUsages = new LinkedHashMap();
/*      */   
/*      */   public IvyNode(ResolveData data, IvyNode parent, DependencyDescriptor dd) {
/*  111 */     this.id = dd.getDependencyRevisionId();
/*  112 */     this.dds.put(parent, dd);
/*  113 */     this.root = parent.getRoot();
/*  114 */     init(data);
/*      */   }
/*      */   
/*      */   public IvyNode(ResolveData data, ModuleDescriptor md) {
/*  118 */     this.id = md.getModuleRevisionId();
/*  119 */     this.md = md;
/*  120 */     this.root = this;
/*  121 */     init(data);
/*      */   }
/*      */   
/*      */   private void init(ResolveData data) {
/*  125 */     this.data = data;
/*  126 */     this.settings = data.getSettings();
/*  127 */     this.eviction = new IvyNodeEviction(this);
/*  128 */     this.callers = new IvyNodeCallers(this);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean loadData(String rootModuleConf, IvyNode parent, String parentConf, String conf, boolean shouldBePublic, IvyNodeUsage usage) {
/*  137 */     Message.debug(""loadData of "" + toString() + "" of rootConf="" + rootModuleConf);
/*  138 */     if (!isRoot() && this.data.getReport() != null) {
/*  139 */       this.data.getReport().addDependency(this);
/*      */     }
/*      */     
/*  142 */     boolean loaded = false;
/*  143 */     if (hasProblem()) {
/*  144 */       Message.debug(""Node has problem.  Skip loading"");
/*  145 */     } else if (isEvicted(rootModuleConf)) {
/*  146 */       Message.debug(rootModuleConf + "" is evicted.  Skip loading"");
/*  147 */     } else if (!hasConfigurationsToLoad() && isRootModuleConfLoaded(rootModuleConf)) {
/*  148 */       Message.debug(rootModuleConf + "" is loaded and no conf to load.  Skip loading"");
/*      */     } else {
/*  150 */       markRootModuleConfLoaded(rootModuleConf);
/*  151 */       if (this.md == null) {
/*  152 */         DependencyResolver resolver = this.data.getSettings().getResolver(getId());
/*  153 */         if (resolver == null) {
/*  154 */           Message.error(""no resolver found for "" + getModuleId() + "": check your configuration"");
/*      */           
/*  156 */           this.problem = new RuntimeException(""no resolver found for "" + getModuleId() + "": check your configuration"");
/*      */           
/*  158 */           return false;
/*      */         } 
/*      */         try {
/*  161 */           Message.debug(""\tusing "" + resolver + "" to resolve "" + getId());
/*  162 */           DependencyDescriptor dependencyDescriptor = getDependencyDescriptor(parent);
/*  163 */           long start = System.currentTimeMillis();
/*  164 */           ModuleRevisionId requestedRevisionId = dependencyDescriptor.getDependencyRevisionId();
/*      */           
/*  166 */           this.data.getEventManager().fireIvyEvent((IvyEvent)new StartResolveDependencyEvent(resolver, dependencyDescriptor, requestedRevisionId));
/*      */ 
/*      */           
/*  169 */           this.module = resolver.getDependency(dependencyDescriptor, this.data);
/*  170 */           this.data.getEventManager().fireIvyEvent((IvyEvent)new EndResolveDependencyEvent(resolver, dependencyDescriptor, requestedRevisionId, this.module, System.currentTimeMillis() - start));
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  175 */           if (this.module != null) {
/*  176 */             this.module.getResolver().getRepositoryCacheManager().saveResolvers(this.module.getDescriptor(), this.module.getResolver().getName(), this.module.getArtifactResolver().getName());
/*      */ 
/*      */ 
/*      */             
/*  180 */             if (this.settings.logModuleWhenFound() && ""default"".equals(getData().getOptions().getLog())) {
/*      */               
/*  182 */               Message.info(""\tfound "" + this.module.getId() + "" in "" + this.module.getResolver().getName());
/*      */             } else {
/*      */               
/*  185 */               Message.verbose(""\tfound "" + this.module.getId() + "" in "" + this.module.getResolver().getName());
/*      */             } 
/*      */ 
/*      */ 
/*      */             
/*  190 */             if (this.settings.getVersionMatcher().isDynamic(getId()) && this.settings.getVersionMatcher().isDynamic(this.module.getId())) {
/*      */               
/*  192 */               Message.error(""impossible to resolve dynamic revision for "" + getId() + "": check your configuration and "" + ""make sure revision is part of your pattern"");
/*      */ 
/*      */               
/*  195 */               this.problem = new RuntimeException(""impossible to resolve dynamic revision"");
/*      */               
/*  197 */               return false;
/*      */             } 
/*  199 */             if (!getId().equals(this.module.getId())) {
/*  200 */               IvyNode resolved = this.data.getNode(this.module.getId());
/*  201 */               if (resolved != null) {
/*      */ 
/*      */                 
/*  204 */                 this.md = this.module.getDescriptor();
/*  205 */                 if (!handleConfiguration(loaded, rootModuleConf, parent, parentConf, conf, shouldBePublic, usage))
/*      */                 {
/*  207 */                   return false;
/*      */                 }
/*      */                 
/*  210 */                 moveToRealNode(rootModuleConf, parent, parentConf, conf, shouldBePublic, resolved);
/*      */ 
/*      */                 
/*  213 */                 return true;
/*      */               } 
/*  215 */               String log = ""\t["" + this.module.getId().getRevision() + ""] "" + getId();
/*  216 */               if (!this.settings.getVersionMatcher().isDynamic(getId())) {
/*  217 */                 log = log + "" (forced)"";
/*      */               }
/*  219 */               if (this.settings.logResolvedRevision()) {
/*  220 */                 Message.info(log);
/*      */               } else {
/*  222 */                 Message.verbose(log);
/*      */               } 
/*      */             } 
/*  225 */             this.downloaded = this.module.getReport().isDownloaded();
/*  226 */             this.searched = this.module.getReport().isSearched();
/*  227 */             loaded = true;
/*      */             
/*  229 */             this.md = this.module.getDescriptor();
/*  230 */             this.confsToFetch.remove(""*"");
/*  231 */             updateConfsToFetch(Arrays.asList(resolveSpecialConfigurations(getRequiredConfigurations(parent, parentConf), this)));
/*      */           } else {
/*      */             
/*  234 */             Message.warn(""\tmodule not found: "" + getId());
/*  235 */             resolver.reportFailure();
/*  236 */             this.problem = new RuntimeException(""not found"");
/*  237 */             return false;
/*      */           } 
/*  239 */         } catch (ResolveProcessException e) {
/*  240 */           throw e;
/*  241 */         } catch (Exception e) {
/*  242 */           this.problem = e;
/*  243 */           return false;
/*      */         } 
/*      */       } else {
/*  246 */         loaded = true;
/*      */       } 
/*      */     } 
/*  249 */     handleConfiguration(loaded, rootModuleConf, parent, parentConf, conf, shouldBePublic, usage);
/*      */     
/*  251 */     if (hasProblem()) {
/*  252 */       Message.debug(""problem : "" + this.problem.getMessage());
/*  253 */       return false;
/*      */     } 
/*  255 */     DependencyDescriptor dd = getDependencyDescriptor(parent);
/*  256 */     if (dd != null) {
/*  257 */       usage.addUsage(rootModuleConf, dd, parentConf);
/*      */     }
/*  259 */     return loaded;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private void moveToRealNode(String rootModuleConf, IvyNode parent, String parentConf, String conf, boolean shouldBePublic, IvyNode resolved) {
/*  265 */     if (resolved.md == null) {
/*  266 */       resolved.md = this.md;
/*      */     }
/*  268 */     if (resolved.module == null) {
/*  269 */       resolved.module = this.module;
/*      */     }
/*  271 */     resolved.downloaded |= this.module.getReport().isDownloaded();
/*  272 */     resolved.searched |= this.module.getReport().isSearched();
/*  273 */     resolved.dds.putAll(this.dds);
/*  274 */     resolved.updateDataFrom(this, rootModuleConf, true);
/*  275 */     resolved.loadData(rootModuleConf, parent, parentConf, conf, shouldBePublic, this.usage);
/*  276 */     resolved.usage.updateDataFrom(getAllUsages(), rootModuleConf);
/*  277 */     this.usage = resolved.usage;
/*      */     
/*  279 */     this.data.replaceNode(getId(), resolved, rootModuleConf);
/*      */     
/*  281 */     if (this.settings.logResolvedRevision()) {
/*  282 */       Message.info(""\t["" + this.module.getId().getRevision() + ""] "" + getId());
/*      */     } else {
/*  284 */       Message.verbose(""\t["" + this.module.getId().getRevision() + ""] "" + getId());
/*      */     } 
/*      */   }
/*      */   
/*      */   public Collection getDependencies(String rootModuleConf, String[] confs) {
/*  289 */     if (this.md == null) {
/*  290 */       throw new IllegalStateException(""impossible to get dependencies when data has not been loaded"");
/*      */     }
/*      */     
/*  293 */     if (Arrays.asList(confs).contains(""*"")) {
/*  294 */       confs = this.md.getConfigurationsNames();
/*      */     }
/*  296 */     Collection deps = new HashSet();
/*  297 */     for (int i = 0; i < confs.length; i++) {
/*  298 */       deps.addAll(getDependencies(rootModuleConf, confs[i], confs[i]));
/*      */     }
/*  300 */     return deps;
/*      */   }
/*      */   
/*      */   public Collection getDependencies(String rootModuleConf, String conf, String requestedConf) {
/*  304 */     if (this.md == null) {
/*  305 */       throw new IllegalStateException(""impossible to get dependencies when data has not been loaded"");
/*      */     }
/*      */     
/*  308 */     DependencyDescriptor[] dds = this.md.getDependencies();
/*  309 */     Collection dependencies = new LinkedHashSet();
/*  310 */     for (int i = 0; i < dds.length; i++) {
/*  311 */       DependencyDescriptor dd = this.data.mediate(dds[i]);
/*  312 */       String[] dependencyConfigurations = dd.getDependencyConfigurations(conf, requestedConf);
/*  313 */       if (dependencyConfigurations.length != 0) {
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  318 */         ModuleRevisionId requestedDependencyRevisionId = dd.getDependencyRevisionId();
/*  319 */         if (isDependencyModuleExcluded(rootModuleConf, requestedDependencyRevisionId, conf))
/*      */         
/*      */         { 
/*  322 */           Message.verbose(""excluding "" + dd + "" in "" + conf); }
/*      */         else
/*      */         
/*  325 */         { IvyNode depNode = this.data.getNode(requestedDependencyRevisionId);
/*      */ 
/*      */           
/*  328 */           if (depNode == null) {
/*  329 */             depNode = new IvyNode(this.data, this, dd);
/*      */           } else {
/*  331 */             depNode.addDependencyDescriptor(this, dd);
/*  332 */             if (depNode.hasProblem());
/*      */           } 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  338 */           String[] confsArray = resolveSpecialConfigurations(dependencyConfigurations, depNode);
/*      */           
/*  340 */           Collection confs = Arrays.asList(confsArray);
/*  341 */           depNode.updateConfsToFetch(confs);
/*  342 */           depNode.addRootModuleConfigurations(depNode.usage, rootModuleConf, confsArray);
/*  343 */           depNode.usage.setRequiredConfs(this, conf, confs);
/*      */           
/*  345 */           depNode.addCaller(rootModuleConf, this, conf, dependencyConfigurations, dd);
/*  346 */           dependencies.add(depNode); } 
/*      */       } 
/*  348 */     }  return dependencies;
/*      */   }
/*      */ 
/*      */   
/*  352 */   private void addDependencyDescriptor(IvyNode parent, DependencyDescriptor dd) { this.dds.put(parent, dd); }
/*      */ 
/*      */ 
/*      */   
/*  356 */   public DependencyDescriptor getDependencyDescriptor(IvyNode parent) { return (DependencyDescriptor)this.dds.get(parent); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  361 */   private boolean isDependencyModuleExcluded(String rootModuleConf, ModuleRevisionId dependencyRevisionId, String conf) { return this.callers.doesCallersExclude(rootModuleConf, DefaultArtifact.newIvyArtifact(dependencyRevisionId, null)); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  366 */   public boolean hasConfigurationsToLoad() { return !this.confsToFetch.isEmpty(); }
/*      */ 
/*      */ 
/*      */   
/*  370 */   private boolean markRootModuleConfLoaded(String rootModuleConf) { return this.loadedRootModuleConfs.add(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/*  374 */   private boolean isRootModuleConfLoaded(String rootModuleConf) { return this.loadedRootModuleConfs.contains(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean handleConfiguration(boolean loaded, String rootModuleConf, IvyNode parent, String parentConf, String conf, boolean shouldBePublic, IvyNodeUsage usage) {
/*  379 */     if (this.md != null) {
/*  380 */       String[] confs = getRealConfs(conf);
/*  381 */       addRootModuleConfigurations(usage, rootModuleConf, confs);
/*  382 */       for (int i = 0; i < confs.length; i++) {
/*  383 */         Configuration c = this.md.getConfiguration(confs[i]);
/*  384 */         if (c == null) {
/*  385 */           this.confsToFetch.remove(conf);
/*  386 */           if (isConfRequiredByMergedUsageOnly(rootModuleConf, conf)) {
/*  387 */             Message.info(""configuration required by evicted revision is not available in selected revision. skipping "" + conf + "" in "" + this);
/*      */           
/*      */           }
/*  390 */           else if (!conf.equals(confs[i])) {
/*  391 */             this.problem = new RuntimeException(""configuration not found in "" + this + "": '"" + conf + ""'. Missing configuration: '"" + confs[i] + ""'. It was required from "" + parent + "" "" + parentConf);
/*      */           }
/*      */           else {
/*      */             
/*  395 */             this.problem = new RuntimeException(""configuration not found in "" + this + "": '"" + confs[i] + ""'. It was required from "" + parent + "" "" + parentConf);
/*      */           } 
/*      */ 
/*      */           
/*  399 */           return false;
/*  400 */         }  if (shouldBePublic && !isRoot() && c.getVisibility() != Configuration.Visibility.PUBLIC) {
/*      */           
/*  402 */           this.confsToFetch.remove(conf);
/*  403 */           if (isConfRequiredByMergedUsageOnly(rootModuleConf, conf)) {
/*  404 */             Message.info(""configuration required by evicted revision is not visible in selected revision. skipping "" + conf + "" in "" + this);
/*      */           }
/*      */           else {
/*      */             
/*  408 */             this.problem = new RuntimeException(""configuration not public in "" + this + "": '"" + c + ""'. It was required from "" + parent + "" "" + parentConf);
/*      */           } 
/*      */           
/*  411 */           return false;
/*      */         } 
/*      */       } 
/*  414 */       if (loaded) {
/*  415 */         this.fetchedConfigurations.add(conf);
/*  416 */         this.confsToFetch.removeAll(Arrays.asList((Object[])confs));
/*  417 */         this.confsToFetch.remove(conf);
/*      */       } 
/*      */     } 
/*  420 */     return true;
/*      */   }
/*      */   
/*      */   private String getDefaultConf(String conf) {
/*  424 */     Matcher m = FALLBACK_CONF_PATTERN.matcher(conf);
/*  425 */     if (m.matches()) {
/*  426 */       return m.group(2);
/*      */     }
/*  428 */     return conf;
/*      */   }
/*      */ 
/*      */   
/*      */   private String getMainConf(String conf) {
/*  433 */     Matcher m = FALLBACK_CONF_PATTERN.matcher(conf);
/*  434 */     if (m.matches()) {
/*  435 */       return m.group(1);
/*      */     }
/*  437 */     return null;
/*      */   }
/*      */ 
/*      */   
/*      */   public void updateConfsToFetch(Collection confs) {
/*  442 */     this.confsToFetch.addAll(confs);
/*  443 */     this.confsToFetch.removeAll(this.fetchedConfigurations);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String[] resolveSpecialConfigurations(String[] dependencyConfigurations, IvyNode node) {
/*  450 */     if (dependencyConfigurations.length == 1 && dependencyConfigurations[0].startsWith(""*"") && node != null && node.isLoaded()) {
/*      */       
/*  452 */       String conf = dependencyConfigurations[0];
/*  453 */       if (""*"".equals(conf)) {
/*  454 */         return node.getDescriptor().getPublicConfigurationsNames();
/*      */       }
/*      */       
/*  457 */       List exclusions = Arrays.asList(conf.substring(2).split(""\\!""));
/*      */       
/*  459 */       List ret = new ArrayList(Arrays.asList((Object[])node.getDescriptor().getPublicConfigurationsNames()));
/*      */       
/*  461 */       ret.removeAll(exclusions);
/*      */       
/*  463 */       return (String[])ret.toArray((Object[])new String[ret.size()]);
/*      */     } 
/*  465 */     return dependencyConfigurations;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getRequiredConfigurations(IvyNode in, String inConf) {
/*  475 */     Collection req = new LinkedHashSet();
/*  476 */     addAllIfNotNull(req, this.usage.getRequiredConfigurations(in, inConf));
/*  477 */     for (Iterator iterator = this.mergedUsages.values().iterator(); iterator.hasNext(); ) {
/*  478 */       IvyNodeUsage usage = iterator.next();
/*  479 */       addAllIfNotNull(req, usage.getRequiredConfigurations(in, inConf));
/*      */     } 
/*  481 */     return (req == null) ? new String[0] : (String[])req.toArray((Object[])new String[req.size()]);
/*      */   }
/*      */   
/*      */   private void addAllIfNotNull(Collection into, Collection col) {
/*  485 */     if (col != null) {
/*  486 */       into.addAll(col);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getRequiredConfigurations() {
/*  496 */     Collection required = new ArrayList(this.confsToFetch.size() + this.fetchedConfigurations.size());
/*  497 */     required.addAll(this.fetchedConfigurations);
/*  498 */     required.addAll(this.confsToFetch);
/*  499 */     return (String[])required.toArray((Object[])new String[required.size()]);
/*      */   }
/*      */   
/*      */   public Configuration getConfiguration(String conf) {
/*  503 */     if (this.md == null) {
/*  504 */       throw new IllegalStateException(""impossible to get configuration when data has not been loaded"");
/*      */     }
/*      */     
/*  507 */     String defaultConf = getDefaultConf(conf);
/*  508 */     conf = getMainConf(conf);
/*  509 */     Configuration configuration = this.md.getConfiguration(conf);
/*  510 */     if (configuration == null) {
/*  511 */       configuration = this.md.getConfiguration(defaultConf);
/*      */     }
/*  513 */     return configuration;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getConfigurations(String rootModuleConf) {
/*  523 */     Set depConfs = new LinkedHashSet();
/*  524 */     addAllIfNotNull(depConfs, this.usage.getConfigurations(rootModuleConf));
/*  525 */     for (Iterator iterator = this.mergedUsages.values().iterator(); iterator.hasNext(); ) {
/*  526 */       IvyNodeUsage usage = iterator.next();
/*  527 */       addAllIfNotNull(depConfs, usage.getConfigurations(rootModuleConf));
/*      */     } 
/*  529 */     return (String[])depConfs.toArray((Object[])new String[depConfs.size()]);
/*      */   }
/*      */   
/*      */   protected boolean isConfRequiredByMergedUsageOnly(String rootModuleConf, String conf) {
/*  533 */     Set confs = this.usage.getConfigurations(rootModuleConf);
/*  534 */     return (confs == null || !confs.contains(conf));
/*      */   }
/*      */ 
/*      */   
/*      */   public void discardConf(String rootModuleConf, String conf) {
/*  539 */     Set depConfs = this.usage.addAndGetConfigurations(rootModuleConf);
/*  540 */     if (this.md != null) {
/*      */       
/*  542 */       Configuration c = this.md.getConfiguration(conf);
/*  543 */       if (conf != null) {
/*  544 */         String[] exts = c.getExtends();
/*  545 */         for (int i = 0; i < exts.length; i++) {
/*  546 */           discardConf(rootModuleConf, exts[i]);
/*      */         }
/*      */         
/*  549 */         depConfs.remove(c.getName());
/*      */       } else {
/*  551 */         Message.warn(""unknown configuration in "" + getId() + "": "" + conf);
/*      */       } 
/*      */     } else {
/*  554 */       depConfs.remove(conf);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private void addRootModuleConfigurations(IvyNodeUsage usage, String rootModuleConf, String[] dependencyConfs) {
/*  560 */     Set depConfs = usage.addAndGetConfigurations(rootModuleConf);
/*  561 */     if (this.md != null) {
/*      */       
/*  563 */       for (int i = 0; i < dependencyConfs.length; i++) {
/*  564 */         depConfs.add(dependencyConfs[i]);
/*  565 */         Configuration conf = this.md.getConfiguration(dependencyConfs[i]);
/*  566 */         if (conf != null) {
/*  567 */           String[] exts = conf.getExtends();
/*      */           
/*  569 */           addRootModuleConfigurations(usage, rootModuleConf, exts);
/*      */         } 
/*      */       } 
/*      */     } else {
/*  573 */       for (int i = 0; i < dependencyConfs.length; i++) {
/*  574 */         depConfs.add(dependencyConfs[i]);
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getRootModuleConfigurations() {
/*  585 */     Set confs = getRootModuleConfigurationsSet();
/*  586 */     return (String[])confs.toArray((Object[])new String[confs.size()]);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Set getRootModuleConfigurationsSet() {
/*  595 */     Set confs = new LinkedHashSet();
/*  596 */     addAllIfNotNull(confs, this.usage.getRootModuleConfigurations());
/*  597 */     for (Iterator iterator = this.mergedUsages.values().iterator(); iterator.hasNext(); ) {
/*  598 */       IvyNodeUsage usage = iterator.next();
/*  599 */       addAllIfNotNull(confs, usage.getRootModuleConfigurations());
/*      */     } 
/*  601 */     return confs;
/*      */   }
/*      */ 
/*      */   
/*  605 */   public String[] getConfsToFetch() { return (String[])this.confsToFetch.toArray((Object[])new String[this.confsToFetch.size()]); }
/*      */ 
/*      */   
/*      */   public String[] getRealConfs(String conf) {
/*  609 */     if (this.md == null) {
/*  610 */       return new String[] { conf };
/*      */     }
/*  612 */     String defaultConf = getDefaultConf(conf);
/*  613 */     conf = getMainConf(conf);
/*  614 */     if (this.md.getConfiguration(conf) == null) {
/*  615 */       if ("""".equals(defaultConf)) {
/*  616 */         return new String[0];
/*      */       }
/*  618 */       conf = defaultConf;
/*      */     } 
/*  620 */     if (conf.startsWith(""*""))
/*  621 */       return resolveSpecialConfigurations(new String[] { conf }, this); 
/*  622 */     if (conf.indexOf(',') != -1) {
/*  623 */       String[] confs = conf.split("","");
/*  624 */       for (int i = 0; i < confs.length; i++) {
/*  625 */         confs[i] = confs[i].trim();
/*      */       }
/*      */     } 
/*  628 */     return new String[] { conf };
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  641 */   private Collection findPath(ModuleId from) { return findPath(from, this, new LinkedList()); }
/*      */ 
/*      */   
/*      */   private Collection findPath(ModuleId from, IvyNode node, List path) {
/*  645 */     IvyNode parent = node.getDirectCallerFor(from);
/*  646 */     if (parent == null) {
/*  647 */       throw new IllegalArgumentException(""no path from "" + from + "" to "" + getId() + "" found"");
/*      */     }
/*      */     
/*  650 */     if (path.contains(parent)) {
/*  651 */       path.add(0, parent);
/*  652 */       Message.verbose(""circular dependency found while looking for the path for another one: was looking for "" + from + "" as a caller of "" + path.get(path.size() - 1));
/*      */ 
/*      */       
/*  655 */       return path;
/*      */     } 
/*  657 */     path.add(0, parent);
/*  658 */     if (parent.getId().getModuleId().equals(from)) {
/*  659 */       return path;
/*      */     }
/*  661 */     return findPath(from, parent, path);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void updateDataFrom(IvyNode node, String rootModuleConf, boolean real) {
/*  679 */     this.callers.updateFrom(node.callers, rootModuleConf, real);
/*      */     
/*  681 */     if (real) {
/*  682 */       this.usage.updateDataFrom(node.getAllUsages(), rootModuleConf);
/*      */     }
/*      */     else {
/*      */       
/*  686 */       IvyNodeUsage mergedUsage = (IvyNodeUsage)this.mergedUsages.get(node.getId());
/*  687 */       if (mergedUsage == null) {
/*  688 */         mergedUsage = new IvyNodeUsage(node);
/*  689 */         this.mergedUsages.put(node.getId(), mergedUsage);
/*      */       } 
/*  691 */       mergedUsage.updateDataFrom(node.getAllUsages(), rootModuleConf);
/*      */     } 
/*      */ 
/*      */     
/*  695 */     updateConfsToFetch(node.fetchedConfigurations);
/*  696 */     updateConfsToFetch(node.confsToFetch);
/*      */   }
/*      */   
/*      */   private Collection getAllUsages() {
/*  700 */     Collection usages = new ArrayList();
/*  701 */     usages.add(this.usage);
/*  702 */     usages.addAll(this.mergedUsages.values());
/*  703 */     return usages;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Artifact[] getAllArtifacts() {
/*  712 */     Set ret = new HashSet();
/*      */     
/*  714 */     for (Iterator it = getRootModuleConfigurationsSet().iterator(); it.hasNext(); ) {
/*  715 */       String rootModuleConf = it.next();
/*  716 */       ret.addAll(Arrays.asList(getArtifacts(rootModuleConf)));
/*      */     } 
/*  718 */     return (Artifact[])ret.toArray((Object[])new Artifact[ret.size()]);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Artifact[] getSelectedArtifacts(Filter artifactFilter) {
/*  729 */     Collection ret = new HashSet();
/*  730 */     for (Iterator it = getRootModuleConfigurationsSet().iterator(); it.hasNext(); ) {
/*  731 */       String rootModuleConf = it.next();
/*  732 */       if (!isEvicted(rootModuleConf) && !isBlacklisted(rootModuleConf)) {
/*  733 */         ret.addAll(Arrays.asList(getArtifacts(rootModuleConf)));
/*      */       }
/*      */     } 
/*  736 */     ret = FilterHelper.filter(ret, artifactFilter);
/*  737 */     return (Artifact[])ret.toArray((Object[])new Artifact[ret.size()]);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Artifact[] getArtifacts(String rootModuleConf) {
/*  750 */     String[] confs = getConfigurations(rootModuleConf);
/*  751 */     if (confs == null || confs.length == 0)
/*      */     {
/*  753 */       return new Artifact[0];
/*      */     }
/*  755 */     if (this.md == null) {
/*  756 */       throw new IllegalStateException(""impossible to get artifacts when data has not been loaded. IvyNode = "" + toString());
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  762 */     Set artifacts = new HashSet();
/*      */ 
/*      */     
/*  765 */     Set dependencyArtifacts = this.usage.getDependencyArtifactsSet(rootModuleConf);
/*      */     
/*  767 */     if (this.md.isDefault() && dependencyArtifacts != null && !dependencyArtifacts.isEmpty()) {
/*  768 */       addArtifactsFromOwnUsage(artifacts, dependencyArtifacts);
/*  769 */       addArtifactsFromMergedUsage(rootModuleConf, artifacts);
/*      */     } else {
/*  771 */       Set includes = new LinkedHashSet();
/*  772 */       addAllIfNotNull(includes, this.usage.getDependencyIncludesSet(rootModuleConf));
/*  773 */       for (Iterator iterator = this.mergedUsages.values().iterator(); iterator.hasNext(); ) {
/*  774 */         IvyNodeUsage usage = iterator.next();
/*  775 */         addAllIfNotNull(includes, usage.getDependencyIncludesSet(rootModuleConf));
/*      */       } 
/*      */       
/*  778 */       if ((dependencyArtifacts == null || dependencyArtifacts.isEmpty()) && includes.isEmpty()) {
/*      */ 
/*      */         
/*  781 */         for (int i = 0; i < confs.length; i++) {
/*  782 */           artifacts.addAll(Arrays.asList(this.md.getArtifacts(confs[i])));
/*      */         
/*      */         }
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  789 */         Map allArtifacts = new HashMap();
/*  790 */         for (int i = 0; i < confs.length; i++) {
/*  791 */           Artifact[] arts = this.md.getArtifacts(confs[i]);
/*  792 */           for (int j = 0; j < arts.length; j++) {
/*  793 */             allArtifacts.put(arts[j].getId().getArtifactId(), arts[j]);
/*      */           }
/*      */         } 
/*      */ 
/*      */         
/*  798 */         if (dependencyArtifacts != null) {
/*  799 */           addArtifactsFromOwnUsage(artifacts, dependencyArtifacts);
/*      */         }
/*  801 */         addArtifactsFromMergedUsage(rootModuleConf, artifacts);
/*      */ 
/*      */         
/*  804 */         for (Iterator it = includes.iterator(); it.hasNext(); ) {
/*  805 */           IncludeRule dad = it.next();
/*  806 */           Collection arts = findArtifactsMatching(dad, allArtifacts);
/*  807 */           if (arts.isEmpty()) {
/*  808 */             Message.error(""a required artifact is not listed by module descriptor: "" + dad.getId());
/*      */ 
/*      */ 
/*      */             
/*  812 */             it.remove(); continue;
/*      */           } 
/*  814 */           Message.debug(this + "" in "" + rootModuleConf + "": including "" + arts);
/*  815 */           artifacts.addAll(arts);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  822 */     for (Iterator iter = artifacts.iterator(); iter.hasNext(); ) {
/*  823 */       Artifact artifact = iter.next();
/*  824 */       boolean excluded = this.callers.doesCallersExclude(rootModuleConf, artifact);
/*  825 */       if (excluded) {
/*  826 */         Message.debug(this + "" in "" + rootModuleConf + "": excluding "" + artifact);
/*  827 */         iter.remove();
/*      */       } 
/*      */     } 
/*  830 */     return (Artifact[])artifacts.toArray((Object[])new Artifact[artifacts.size()]);
/*      */   }
/*      */   
/*      */   private void addArtifactsFromOwnUsage(Set artifacts, Set dependencyArtifacts) {
/*  834 */     for (Iterator it = dependencyArtifacts.iterator(); it.hasNext(); ) {
/*  835 */       DependencyArtifactDescriptor dad = it.next();
/*  836 */       artifacts.add(new MDArtifact(this.md, dad.getName(), dad.getType(), dad.getExt(), dad.getUrl(), dad.getQualifiedExtraAttributes()));
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private void addArtifactsFromMergedUsage(String rootModuleConf, Set artifacts) {
/*  842 */     for (Iterator iterator = this.mergedUsages.values().iterator(); iterator.hasNext(); ) {
/*  843 */       IvyNodeUsage usage = iterator.next();
/*  844 */       Set mergedDependencyArtifacts = usage.getDependencyArtifactsSet(rootModuleConf);
/*  845 */       if (mergedDependencyArtifacts != null) {
/*  846 */         for (Iterator it = mergedDependencyArtifacts.iterator(); it.hasNext(); ) {
/*  847 */           DependencyArtifactDescriptor dad = it.next();
/*  848 */           Map extraAttributes = new HashMap(dad.getQualifiedExtraAttributes());
/*      */           
/*  850 */           extraAttributes.put(""ivy:merged"", dad.getDependencyDescriptor().getParentRevisionId() + "" -> "" + usage.getNode().getId());
/*      */ 
/*      */           
/*  853 */           artifacts.add(new MDArtifact(this.md, dad.getName(), dad.getType(), dad.getExt(), dad.getUrl(), extraAttributes));
/*      */         } 
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private static Collection findArtifactsMatching(IncludeRule rule, Map allArtifacts) {
/*  861 */     Collection ret = new ArrayList();
/*  862 */     for (Iterator iter = allArtifacts.keySet().iterator(); iter.hasNext(); ) {
/*  863 */       ArtifactId aid = iter.next();
/*  864 */       if (MatcherHelper.matches(rule.getMatcher(), rule.getId(), aid)) {
/*  865 */         ret.add(allArtifacts.get(aid));
/*      */       }
/*      */     } 
/*  868 */     return ret;
/*      */   }
/*      */ 
/*      */   
/*  872 */   public boolean hasProblem() { return (this.problem != null); }
/*      */ 
/*      */ 
/*      */   
/*  876 */   public Exception getProblem() { return this.problem; }
/*      */ 
/*      */ 
/*      */   
/*  880 */   public String getProblemMessage() { return StringUtils.getErrorMessage(this.problem); }
/*      */ 
/*      */ 
/*      */   
/*  884 */   public boolean isDownloaded() { return this.downloaded; }
/*      */ 
/*      */ 
/*      */   
/*  888 */   public boolean isSearched() { return this.searched; }
/*      */ 
/*      */ 
/*      */   
/*  892 */   public boolean isLoaded() { return (this.md != null); }
/*      */ 
/*      */ 
/*      */   
/*  896 */   public boolean isFetched(String conf) { return this.fetchedConfigurations.contains(conf); }
/*      */ 
/*      */ 
/*      */   
/*  900 */   public IvyNode findNode(ModuleRevisionId mrid) { return this.data.getNode(mrid); }
/*      */ 
/*      */ 
/*      */   
/*  904 */   boolean isRoot() { return (this.root == this); }
/*      */ 
/*      */ 
/*      */   
/*  908 */   public IvyNode getRoot() { return this.root; }
/*      */ 
/*      */   
/*      */   public ConflictManager getConflictManager(ModuleId mid) {
/*  912 */     if (this.md == null) {
/*  913 */       throw new IllegalStateException(""impossible to get conflict manager when data has not been loaded. IvyNode = "" + toString());
/*      */     }
/*      */ 
/*      */     
/*  917 */     ConflictManager cm = this.md.getConflictManager(mid);
/*  918 */     return (cm == null) ? this.settings.getConflictManager(mid) : cm;
/*      */   }
/*      */   
/*      */   public IvyNode getRealNode() {
/*  922 */     IvyNode real = this.data.getNode(getId());
/*  923 */     return (real != null) ? real : this;
/*      */   }
/*      */ 
/*      */   
/*  927 */   public ModuleRevisionId getId() { return this.id; }
/*      */ 
/*      */ 
/*      */   
/*  931 */   public ModuleId getModuleId() { return this.id.getModuleId(); }
/*      */ 
/*      */ 
/*      */   
/*  935 */   public ModuleDescriptor getDescriptor() { return this.md; }
/*      */ 
/*      */ 
/*      */   
/*  939 */   public ResolveData getData() { return this.data; }
/*      */ 
/*      */ 
/*      */   
/*  943 */   public ResolvedModuleRevision getModuleRevision() { return this.module; }
/*      */ 
/*      */   
/*      */   public long getPublication() {
/*  947 */     if (this.module != null) {
/*  948 */       return this.module.getPublicationDate().getTime();
/*      */     }
/*  950 */     return 0L;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public long getLastModified() {
/*  960 */     if (this.md != null) {
/*  961 */       return this.md.getLastModified();
/*      */     }
/*  963 */     return 0L;
/*      */   }
/*      */   
/*      */   public ModuleRevisionId getResolvedId() {
/*  967 */     if (this.md != null && this.md.getResolvedModuleRevisionId().getRevision() != null)
/*  968 */       return this.md.getResolvedModuleRevisionId(); 
/*  969 */     if (this.module != null) {
/*  970 */       return this.module.getId();
/*      */     }
/*  972 */     return getId();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  980 */   public void clean() { this.confsToFetch.clear(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   boolean canExclude(String rootModuleConf) {
/*  988 */     IvyNodeCallers.Caller[] callers = getCallers(rootModuleConf);
/*  989 */     for (int i = 0; i < callers.length; i++) {
/*  990 */       if (callers[i].canExclude()) {
/*  991 */         return true;
/*      */       }
/*      */     } 
/*  994 */     return false;
/*      */   }
/*      */ 
/*      */   
/*  998 */   private IvyNode getDirectCallerFor(ModuleId from) { return this.callers.getDirectCallerFor(from); }
/*      */ 
/*      */ 
/*      */   
/* 1002 */   public IvyNodeCallers.Caller[] getCallers(String rootModuleConf) { return this.callers.getCallers(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1006 */   public Collection getAllCallersModuleIds() { return this.callers.getAllCallersModuleIds(); }
/*      */ 
/*      */ 
/*      */   
/* 1010 */   public IvyNodeCallers.Caller[] getAllCallers() { return this.callers.getAllCallers(); }
/*      */ 
/*      */ 
/*      */   
/* 1014 */   public IvyNodeCallers.Caller[] getAllRealCallers() { return this.callers.getAllRealCallers(); }
/*      */ 
/*      */ 
/*      */   
/*      */   public void addCaller(String rootModuleConf, IvyNode callerNode, String callerConf, String[] dependencyConfs, DependencyDescriptor dd) {
/* 1019 */     this.callers.addCaller(rootModuleConf, callerNode, callerConf, dependencyConfs, dd);
/* 1020 */     boolean isCircular = this.callers.getAllCallersModuleIds().contains(getId().getModuleId());
/* 1021 */     if (isCircular) {
/* 1022 */       IvyContext.getContext().getCircularDependencyStrategy().handleCircularDependency(toMrids(findPath(getId().getModuleId()), this));
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1029 */   public boolean doesCallersExclude(String rootModuleConf, Artifact artifact, Stack callersStack) { return this.callers.doesCallersExclude(rootModuleConf, artifact, callersStack); }
/*      */ 
/*      */   
/*      */   private ModuleRevisionId[] toMrids(Collection path, IvyNode depNode) {
/* 1033 */     ModuleRevisionId[] ret = new ModuleRevisionId[path.size() + 1];
/* 1034 */     int i = 0;
/* 1035 */     for (Iterator iter = path.iterator(); iter.hasNext(); i++) {
/* 1036 */       IvyNode node = iter.next();
/* 1037 */       ret[i] = node.getId();
/*      */     } 
/* 1039 */     ret[ret.length - 1] = depNode.getId();
/* 1040 */     return ret;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1049 */   public Set getResolvedNodes(ModuleId moduleId, String rootModuleConf) { return this.eviction.getResolvedNodes(moduleId, rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1053 */   public Collection getResolvedRevisions(ModuleId moduleId, String rootModuleConf) { return this.eviction.getResolvedRevisions(moduleId, rootModuleConf); }
/*      */ 
/*      */   
/*      */   public void markEvicted(IvyNodeEviction.EvictionData evictionData) {
/* 1057 */     this.eviction.markEvicted(evictionData);
/* 1058 */     String rootModuleConf = evictionData.getRootModuleConf();
/*      */ 
/*      */     
/* 1061 */     if (evictionData.getSelected() != null) {
/* 1062 */       for (Iterator iter = evictionData.getSelected().iterator(); iter.hasNext(); ) {
/* 1063 */         IvyNode selected = iter.next();
/* 1064 */         selected.updateDataFrom(this, rootModuleConf, false);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */   
/* 1070 */   public Collection getAllEvictingConflictManagers() { return this.eviction.getAllEvictingConflictManagers(); }
/*      */ 
/*      */ 
/*      */   
/* 1074 */   public Collection getAllEvictingNodes() { return this.eviction.getAllEvictingNodes(); }
/*      */ 
/*      */ 
/*      */   
/* 1078 */   public Collection getAllEvictingNodesDetails() { return this.eviction.getAllEvictingNodesDetails(); }
/*      */ 
/*      */ 
/*      */   
/* 1082 */   public String[] getEvictedConfs() { return this.eviction.getEvictedConfs(); }
/*      */ 
/*      */ 
/*      */   
/* 1086 */   public IvyNodeEviction.EvictionData getEvictedData(String rootModuleConf) { return this.eviction.getEvictedData(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1090 */   public Collection getEvictedNodes(ModuleId mid, String rootModuleConf) { return this.eviction.getEvictedNodes(mid, rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1094 */   public Collection getEvictedRevisions(ModuleId mid, String rootModuleConf) { return this.eviction.getEvictedRevisions(mid, rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1098 */   public IvyNodeEviction.EvictionData getEvictionDataInRoot(String rootModuleConf, IvyNode ancestor) { return this.eviction.getEvictionDataInRoot(rootModuleConf, ancestor); }
/*      */ 
/*      */ 
/*      */   
/* 1102 */   public boolean isCompletelyEvicted() { return this.eviction.isCompletelyEvicted(); }
/*      */ 
/*      */ 
/*      */   
/* 1106 */   public boolean isEvicted(String rootModuleConf) { return this.eviction.isEvicted(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/*      */   public void markEvicted(String rootModuleConf, IvyNode node, ConflictManager conflictManager, Collection resolved) {
/* 1111 */     IvyNodeEviction.EvictionData evictionData = new IvyNodeEviction.EvictionData(rootModuleConf, node, conflictManager, resolved);
/*      */     
/* 1113 */     markEvicted(evictionData);
/*      */   }
/*      */ 
/*      */   
/* 1117 */   public void setEvictedNodes(ModuleId moduleId, String rootModuleConf, Collection evicted) { this.eviction.setEvictedNodes(moduleId, rootModuleConf, evicted); }
/*      */ 
/*      */ 
/*      */   
/* 1121 */   public void setResolvedNodes(ModuleId moduleId, String rootModuleConf, Collection resolved) { this.eviction.setResolvedNodes(moduleId, rootModuleConf, resolved); }
/*      */ 
/*      */ 
/*      */   
/* 1125 */   public String toString() { return getResolvedId().toString(); }
/*      */ 
/*      */   
/*      */   public boolean equals(Object obj) {
/* 1129 */     if (!(obj instanceof IvyNode)) {
/* 1130 */       return false;
/*      */     }
/* 1132 */     IvyNode node = (IvyNode)obj;
/* 1133 */     return node.getId().equals(getId());
/*      */   }
/*      */   
/*      */   public int compareTo(Object obj) {
/* 1137 */     IvyNode that = (IvyNode)obj;
/* 1138 */     return getModuleId().compareTo(that.getModuleId());
/*      */   }
/*      */ 
/*      */   
/* 1142 */   public int hashCode() { return getId().hashCode(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1155 */   public Collection getPendingConflicts(String rootModuleConf, ModuleId mid) { return this.eviction.getPendingConflicts(rootModuleConf, mid); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1160 */   public void setPendingConflicts(ModuleId moduleId, String rootModuleConf, Collection conflicts) { this.eviction.setPendingConflicts(moduleId, rootModuleConf, conflicts); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void blacklist(IvyNodeBlacklist bdata) {
/* 1179 */     if (this.data.getSettings().logResolvedRevision()) {
/* 1180 */       Message.info(""BLACKLISTING "" + bdata);
/*      */     } else {
/* 1182 */       Message.verbose(""BLACKLISTING "" + bdata);
/*      */     } 
/*      */     
/* 1185 */     Stack callerStack = new Stack();
/* 1186 */     callerStack.push(this);
/* 1187 */     clearEvictionDataInAllCallers(bdata.getRootModuleConf(), callerStack);
/*      */     
/* 1189 */     this.usage.blacklist(bdata);
/* 1190 */     this.data.blacklist(this);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private void clearEvictionDataInAllCallers(String rootModuleConf, Stack callerStack) {
/* 1196 */     IvyNode node = callerStack.peek();
/* 1197 */     IvyNodeCallers.Caller[] callers = node.getCallers(rootModuleConf);
/* 1198 */     for (int i = 0; i < callers.length; i++) {
/* 1199 */       IvyNode callerNode = findNode(callers[i].getModuleRevisionId());
/* 1200 */       if (callerNode != null) {
/* 1201 */         callerNode.eviction = new IvyNodeEviction(callerNode);
/* 1202 */         if (!callerStack.contains(callerNode)) {
/* 1203 */           callerStack.push(callerNode);
/* 1204 */           clearEvictionDataInAllCallers(rootModuleConf, callerStack);
/* 1205 */           callerStack.pop();
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1224 */   public boolean isBlacklisted(String rootModuleConf) { return this.usage.isBlacklisted(rootModuleConf); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean isCompletelyBlacklisted() {
/* 1234 */     if (isRoot()) {
/* 1235 */       return false;
/*      */     }
/* 1237 */     String[] rootModuleConfigurations = getRootModuleConfigurations();
/* 1238 */     for (int i = 0; i < rootModuleConfigurations.length; i++) {
/* 1239 */       if (!isBlacklisted(rootModuleConfigurations[i])) {
/* 1240 */         return false;
/*      */       }
/*      */     } 
/* 1243 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1255 */   public IvyNodeBlacklist getBlacklistData(String rootModuleConf) { return this.usage.getBlacklistData(rootModuleConf); }
/*      */ 
/*      */ 
/*      */   
/* 1259 */   public IvyNodeUsage getMainUsage() { return this.usage; }
/*      */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\IvyNode.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.IvyNodeBlacklist,"/*    */ package org.apache.ivy.core.resolve;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyNodeBlacklist
/*    */ {
/*    */   private IvyNode conflictParent;
/*    */   private IvyNode selectedNode;
/*    */   private IvyNode evictedNode;
/*    */   private IvyNode blacklistedNode;
/*    */   private String rootModuleConf;
/*    */   
/*    */   public IvyNodeBlacklist(IvyNode conflictParent, IvyNode selectedNode, IvyNode evictedNode, IvyNode blacklistedNode, String rootModuleConf) {
/* 38 */     this.conflictParent = conflictParent;
/* 39 */     this.selectedNode = selectedNode;
/* 40 */     this.evictedNode = evictedNode;
/* 41 */     this.blacklistedNode = blacklistedNode;
/* 42 */     this.rootModuleConf = rootModuleConf;
/*    */   }
/*    */ 
/*    */   
/* 46 */   public IvyNode getConflictParent() { return this.conflictParent; }
/*    */ 
/*    */ 
/*    */   
/* 50 */   public IvyNode getSelectedNode() { return this.selectedNode; }
/*    */ 
/*    */ 
/*    */   
/* 54 */   public IvyNode getEvictedNode() { return this.evictedNode; }
/*    */ 
/*    */ 
/*    */   
/* 58 */   public IvyNode getBlacklistedNode() { return this.blacklistedNode; }
/*    */ 
/*    */ 
/*    */   
/* 62 */   public String getRootModuleConf() { return this.rootModuleConf; }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public String toString() { return ""["" + this.blacklistedNode + "" blacklisted to evict "" + this.evictedNode + "" in favor of "" + this.selectedNode + "" in "" + this.conflictParent + "" for "" + this.rootModuleConf + ""]""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\IvyNodeBlacklist.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.IvyNodeCallers,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.Stack;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyNodeCallers
/*     */ {
/*     */   public static class Caller
/*     */   {
/*     */     private ModuleDescriptor md;
/*     */     private ModuleRevisionId mrid;
/*  41 */     private Map confs = new HashMap();
/*     */     
/*     */     private DependencyDescriptor dd;
/*     */     
/*     */     private boolean callerCanExclude;
/*     */     
/*     */     private boolean real = true;
/*     */ 
/*     */     
/*     */     public Caller(ModuleDescriptor md, ModuleRevisionId mrid, DependencyDescriptor dd, boolean callerCanExclude) {
/*  51 */       this.md = md;
/*  52 */       this.mrid = mrid;
/*  53 */       this.dd = dd;
/*  54 */       this.callerCanExclude = callerCanExclude;
/*     */     }
/*     */     
/*     */     public void addConfiguration(String callerConf, String[] dependencyConfs) {
/*  58 */       String[] prevDepConfs = (String[])this.confs.get(callerConf);
/*  59 */       if (prevDepConfs != null) {
/*  60 */         Set newDepConfs = new HashSet(Arrays.asList((Object[])prevDepConfs));
/*  61 */         newDepConfs.addAll(Arrays.asList(dependencyConfs));
/*  62 */         this.confs.put(callerConf, (String[])newDepConfs.toArray((Object[])new String[newDepConfs.size()]));
/*     */       } else {
/*     */         
/*  65 */         this.confs.put(callerConf, dependencyConfs);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*  70 */     public String[] getCallerConfigurations() { return (String[])this.confs.keySet().toArray((Object[])new String[this.confs.keySet().size()]); }
/*     */ 
/*     */ 
/*     */     
/*  74 */     public ModuleRevisionId getModuleRevisionId() { return this.mrid; }
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/*  78 */       if (!(obj instanceof Caller)) {
/*  79 */         return false;
/*     */       }
/*  81 */       Caller other = (Caller)obj;
/*  82 */       return (other.confs.equals(this.confs) && this.mrid.equals(other.mrid));
/*     */     }
/*     */ 
/*     */     
/*     */     public int hashCode() {
/*  87 */       int hash = 31;
/*  88 */       hash = hash * 13 + this.confs.hashCode();
/*  89 */       hash = hash * 13 + this.mrid.hashCode();
/*     */       
/*  91 */       return hash;
/*     */     }
/*     */ 
/*     */     
/*  95 */     public String toString() { return this.mrid.toString(); }
/*     */ 
/*     */ 
/*     */     
/*  99 */     public ModuleRevisionId getAskedDependencyId(ResolveData resolveData) { return this.dd.getDependencyRevisionId(); }
/*     */ 
/*     */ 
/*     */     
/* 103 */     public ModuleDescriptor getModuleDescriptor() { return this.md; }
/*     */ 
/*     */ 
/*     */     
/* 107 */     public boolean canExclude() { return (this.callerCanExclude || this.md.canExclude() || this.dd.canExclude()); }
/*     */ 
/*     */ 
/*     */     
/* 111 */     public DependencyDescriptor getDependencyDescriptor() { return this.dd; }
/*     */ 
/*     */ 
/*     */     
/* 115 */     public void setRealCaller(boolean b) { this.real = b; }
/*     */ 
/*     */ 
/*     */     
/* 119 */     public boolean isRealCaller() { return this.real; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   private Map callersByRootConf = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private Map allCallers = new HashMap();
/*     */   
/*     */   private IvyNode node;
/*     */ 
/*     */   
/* 136 */   public IvyNodeCallers(IvyNode node) { this.node = node; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addCaller(String rootModuleConf, IvyNode callerNode, String callerConf, String[] dependencyConfs, DependencyDescriptor dd) {
/* 150 */     ModuleDescriptor md = callerNode.getDescriptor();
/* 151 */     ModuleRevisionId mrid = callerNode.getResolvedId();
/* 152 */     if (mrid.getModuleId().equals(this.node.getId().getModuleId())) {
/* 153 */       throw new IllegalArgumentException(""a module is not authorized to depend on itself: "" + this.node.getId());
/*     */     }
/*     */     
/* 156 */     Map callers = (Map)this.callersByRootConf.get(rootModuleConf);
/* 157 */     if (callers == null) {
/* 158 */       callers = new HashMap();
/* 159 */       this.callersByRootConf.put(rootModuleConf, callers);
/*     */     } 
/* 161 */     Caller caller = (Caller)callers.get(mrid);
/* 162 */     if (caller == null) {
/* 163 */       caller = new Caller(md, mrid, dd, callerNode.canExclude(rootModuleConf));
/* 164 */       callers.put(mrid, caller);
/*     */     } 
/* 166 */     caller.addConfiguration(callerConf, dependencyConfs);
/*     */     
/* 168 */     IvyNode parent = callerNode.getRealNode();
/* 169 */     for (Iterator iter = parent.getAllCallersModuleIds().iterator(); iter.hasNext(); ) {
/* 170 */       ModuleId mid = iter.next();
/* 171 */       this.allCallers.put(mid, parent);
/*     */     } 
/* 173 */     this.allCallers.put(mrid.getModuleId(), callerNode);
/*     */   }
/*     */   
/*     */   void removeCaller(String rootModuleConf, ModuleRevisionId callerMrid) {
/* 177 */     this.allCallers.remove(callerMrid.getModuleId());
/* 178 */     Map callers = (Map)this.callersByRootConf.get(rootModuleConf);
/* 179 */     if (callers != null) {
/* 180 */       callers.remove(callerMrid);
/*     */     }
/*     */   }
/*     */   
/*     */   public Caller[] getCallers(String rootModuleConf) {
/* 185 */     Map callers = (Map)this.callersByRootConf.get(rootModuleConf);
/* 186 */     if (callers == null) {
/* 187 */       return new Caller[0];
/*     */     }
/* 189 */     return (Caller[])callers.values().toArray((Object[])new Caller[callers.values().size()]);
/*     */   }
/*     */   
/*     */   public Caller[] getAllCallers() {
/* 193 */     Set all = new HashSet();
/* 194 */     for (Iterator iter = this.callersByRootConf.values().iterator(); iter.hasNext(); ) {
/* 195 */       Map callers = iter.next();
/* 196 */       all.addAll(callers.values());
/*     */     } 
/* 198 */     return (Caller[])all.toArray((Object[])new Caller[all.size()]);
/*     */   }
/*     */   
/*     */   public Caller[] getAllRealCallers() {
/* 202 */     Set all = new HashSet();
/* 203 */     for (Iterator iter = this.callersByRootConf.values().iterator(); iter.hasNext(); ) {
/* 204 */       Map callers = iter.next();
/* 205 */       for (Iterator iterator = callers.values().iterator(); iterator.hasNext(); ) {
/* 206 */         Caller c = iterator.next();
/* 207 */         if (c.isRealCaller()) {
/* 208 */           all.add(c);
/*     */         }
/*     */       } 
/*     */     } 
/* 212 */     return all.toArray(new Caller[all.size()]);
/*     */   }
/*     */ 
/*     */   
/* 216 */   public Collection getAllCallersModuleIds() { return this.allCallers.keySet(); }
/*     */ 
/*     */   
/*     */   void updateFrom(IvyNodeCallers callers, String rootModuleConf, boolean real) {
/* 220 */     Map nodecallers = (Map)callers.callersByRootConf.get(rootModuleConf);
/* 221 */     if (nodecallers != null) {
/* 222 */       Map thiscallers = (Map)this.callersByRootConf.get(rootModuleConf);
/* 223 */       if (thiscallers == null) {
/* 224 */         thiscallers = new HashMap();
/* 225 */         this.callersByRootConf.put(rootModuleConf, thiscallers);
/*     */       } 
/* 227 */       for (Iterator iter = nodecallers.values().iterator(); iter.hasNext(); ) {
/* 228 */         Caller caller = iter.next();
/* 229 */         if (!thiscallers.containsKey(caller.getModuleRevisionId())) {
/* 230 */           if (!real) {
/* 231 */             caller.setRealCaller(false);
/*     */           }
/* 233 */           thiscallers.put(caller.getModuleRevisionId(), caller);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 240 */   public IvyNode getDirectCallerFor(ModuleId from) { return (IvyNode)this.allCallers.get(from); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 251 */   boolean doesCallersExclude(String rootModuleConf, Artifact artifact) { return doesCallersExclude(rootModuleConf, artifact, new Stack()); }
/*     */ 
/*     */   
/*     */   boolean doesCallersExclude(String rootModuleConf, Artifact artifact, Stack callersStack) {
/* 255 */     if (callersStack.contains(this.node.getId())) {
/* 256 */       return false;
/*     */     }
/* 258 */     callersStack.push(this.node.getId());
/*     */     
/* 260 */     try { Caller[] callers = getCallers(rootModuleConf);
/* 261 */       if (callers.length == 0)
/* 262 */         return false; 
/*     */       int i;
/* 264 */       for (i = 0; i < callers.length; i++) {
/* 265 */         if (!callers[i].canExclude()) {
/* 266 */           return false;
/*     */         }
/* 268 */         ModuleDescriptor md = callers[i].getModuleDescriptor();
/* 269 */         if (!doesExclude(md, rootModuleConf, callers[i].getCallerConfigurations(), callers[i].getDependencyDescriptor(), artifact, callersStack))
/*     */         {
/* 271 */           return false;
/*     */         }
/*     */       } 
/* 274 */       i = 1;
/*     */       
/* 276 */       return i; } finally { callersStack.pop(); }
/*     */   
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean doesExclude(ModuleDescriptor md, String rootModuleConf, String[] moduleConfs, DependencyDescriptor dd, Artifact artifact, Stack callersStack) {
/* 283 */     if (dd != null && 
/* 284 */       dd.doesExclude(moduleConfs, artifact.getId().getArtifactId())) {
/* 285 */       return true;
/*     */     }
/*     */     
/* 288 */     if (md.doesExclude(moduleConfs, artifact.getId().getArtifactId())) {
/* 289 */       return true;
/*     */     }
/*     */     
/* 292 */     IvyNode c = this.node.getData().getNode(md.getModuleRevisionId());
/* 293 */     if (c != null) {
/* 294 */       return c.doesCallersExclude(rootModuleConf, artifact, callersStack);
/*     */     }
/* 296 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\IvyNodeCallers.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.IvyNodeEviction,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyNodeEviction
/*     */ {
/*     */   private IvyNode node;
/*     */   
/*     */   public static class EvictionData
/*     */   {
/*     */     private IvyNode parent;
/*     */     private ConflictManager conflictManager;
/*     */     private Collection selected;
/*     */     private String rootModuleConf;
/*     */     private String detail;
/*     */     
/*  70 */     public EvictionData(String rootModuleConf, IvyNode parent, ConflictManager conflictManager, Collection selected) { this(rootModuleConf, parent, conflictManager, selected, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public EvictionData(String rootModuleConf, IvyNode parent, ConflictManager conflictManager, Collection selected, String detail) {
/*  91 */       this.rootModuleConf = rootModuleConf;
/*  92 */       this.parent = parent;
/*  93 */       this.conflictManager = conflictManager;
/*  94 */       this.selected = selected;
/*  95 */       this.detail = detail;
/*     */     }
/*     */     
/*     */     public String toString() {
/*  99 */       if (this.selected != null) {
/* 100 */         return this.selected + "" in "" + this.parent + ((this.detail == null) ? """" : ("" "" + this.detail)) + "" ("" + this.conflictManager + "") ["" + this.rootModuleConf + ""]"";
/*     */       }
/*     */ 
/*     */       
/* 104 */       return ""transitively ["" + this.rootModuleConf + ""]"";
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 109 */     public ConflictManager getConflictManager() { return this.conflictManager; }
/*     */ 
/*     */ 
/*     */     
/* 113 */     public IvyNode getParent() { return this.parent; }
/*     */ 
/*     */ 
/*     */     
/* 117 */     public Collection getSelected() { return this.selected; }
/*     */ 
/*     */ 
/*     */     
/* 121 */     public String getRootModuleConf() { return this.rootModuleConf; }
/*     */ 
/*     */ 
/*     */     
/* 125 */     public boolean isTransitivelyEvicted() { return (this.parent == null); }
/*     */ 
/*     */ 
/*     */     
/* 129 */     public String getDetail() { return this.detail; }
/*     */   }
/*     */ 
/*     */   
/*     */   private static final class ModuleIdConf
/*     */   {
/*     */     private ModuleId moduleId;
/*     */     private String conf;
/*     */     
/*     */     public ModuleIdConf(ModuleId mid, String conf) {
/* 139 */       if (mid == null) {
/* 140 */         throw new NullPointerException(""mid cannot be null"");
/*     */       }
/* 142 */       if (conf == null) {
/* 143 */         throw new NullPointerException(""conf cannot be null"");
/*     */       }
/* 145 */       this.moduleId = mid;
/* 146 */       this.conf = conf;
/*     */     }
/*     */ 
/*     */     
/* 150 */     public final String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */     
/* 154 */     public final ModuleId getModuleId() { return this.moduleId; }
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/* 158 */       if (!(obj instanceof ModuleIdConf)) {
/* 159 */         return false;
/*     */       }
/* 161 */       return (getModuleId().equals(((ModuleIdConf)obj).getModuleId()) && getConf().equals(((ModuleIdConf)obj).getConf()));
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public int hashCode() {
/* 167 */       int hash = 33;
/* 168 */       hash += getModuleId().hashCode() * 17;
/* 169 */       hash += getConf().hashCode() * 17;
/*     */       
/* 171 */       return hash;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 177 */   private Map selectedDeps = new HashMap();
/*     */ 
/*     */ 
/*     */   
/* 181 */   private Map pendingConflicts = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   private Map evictedDeps = new HashMap();
/*     */ 
/*     */ 
/*     */   
/* 191 */   private Map evictedRevs = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   private Map evicted = new HashMap();
/*     */ 
/*     */ 
/*     */   
/*     */   public IvyNodeEviction(IvyNode node) {
/* 201 */     if (node == null) {
/* 202 */       throw new NullPointerException(""node must not be null"");
/*     */     }
/* 204 */     this.node = node;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Set getResolvedNodes(ModuleId mid, String rootModuleConf) {
/* 211 */     Collection resolved = (Collection)this.selectedDeps.get(new ModuleIdConf(mid, rootModuleConf));
/* 212 */     Set ret = new HashSet();
/* 213 */     if (resolved != null) {
/* 214 */       for (Iterator iter = resolved.iterator(); iter.hasNext(); ) {
/* 215 */         IvyNode node = iter.next();
/* 216 */         ret.add(node.getRealNode());
/*     */       } 
/*     */     }
/* 219 */     return ret;
/*     */   }
/*     */   
/*     */   public Collection getResolvedRevisions(ModuleId mid, String rootModuleConf) {
/* 223 */     Collection resolved = (Collection)this.selectedDeps.get(new ModuleIdConf(mid, rootModuleConf));
/* 224 */     if (resolved == null) {
/* 225 */       return new HashSet();
/*     */     }
/* 227 */     Collection resolvedRevs = new HashSet();
/* 228 */     for (Iterator iter = resolved.iterator(); iter.hasNext(); ) {
/* 229 */       IvyNode node = iter.next();
/* 230 */       resolvedRevs.add(node.getId());
/* 231 */       resolvedRevs.add(node.getResolvedId());
/*     */     } 
/* 233 */     return resolvedRevs;
/*     */   }
/*     */ 
/*     */   
/*     */   public void setResolvedNodes(ModuleId moduleId, String rootModuleConf, Collection resolved) {
/* 238 */     ModuleIdConf moduleIdConf = new ModuleIdConf(moduleId, rootModuleConf);
/* 239 */     this.selectedDeps.put(moduleIdConf, new HashSet(resolved));
/*     */   }
/*     */   
/*     */   public Collection getEvictedNodes(ModuleId mid, String rootModuleConf) {
/* 243 */     Collection resolved = (Collection)this.evictedDeps.get(new ModuleIdConf(mid, rootModuleConf));
/* 244 */     Set ret = new HashSet();
/* 245 */     if (resolved != null) {
/* 246 */       for (Iterator iter = resolved.iterator(); iter.hasNext(); ) {
/* 247 */         IvyNode node = iter.next();
/* 248 */         ret.add(node.getRealNode());
/*     */       } 
/*     */     }
/* 251 */     return ret;
/*     */   }
/*     */   
/*     */   public Collection getEvictedRevisions(ModuleId mid, String rootModuleConf) {
/* 255 */     Collection evicted = (Collection)this.evictedRevs.get(new ModuleIdConf(mid, rootModuleConf));
/* 256 */     if (evicted == null) {
/* 257 */       return new HashSet();
/*     */     }
/* 259 */     return new HashSet(evicted);
/*     */   }
/*     */ 
/*     */   
/*     */   public void setEvictedNodes(ModuleId moduleId, String rootModuleConf, Collection evicted) {
/* 264 */     ModuleIdConf moduleIdConf = new ModuleIdConf(moduleId, rootModuleConf);
/* 265 */     this.evictedDeps.put(moduleIdConf, new HashSet(evicted));
/* 266 */     Collection evictedRevs = new HashSet();
/* 267 */     for (Iterator iter = evicted.iterator(); iter.hasNext(); ) {
/* 268 */       IvyNode node = (IvyNode)iter.next();
/* 269 */       evictedRevs.add(node.getId());
/* 270 */       evictedRevs.add(node.getResolvedId());
/*     */     } 
/* 272 */     this.evictedRevs.put(moduleIdConf, evictedRevs);
/*     */   }
/*     */   
/*     */   public boolean isEvicted(String rootModuleConf) {
/* 276 */     cleanEvicted();
/* 277 */     IvyNode root = this.node.getRoot();
/* 278 */     ModuleId moduleId = this.node.getId().getModuleId();
/* 279 */     Collection resolvedRevisions = root.getResolvedRevisions(moduleId, rootModuleConf);
/* 280 */     EvictionData evictedData = getEvictedData(rootModuleConf);
/* 281 */     return (root != this.node && evictedData != null && (!resolvedRevisions.contains(this.node.getResolvedId()) || evictedData.isTransitivelyEvicted()));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isCompletelyEvicted() {
/* 288 */     cleanEvicted();
/* 289 */     if (this.node.isRoot()) {
/* 290 */       return false;
/*     */     }
/* 292 */     String[] rootModuleConfigurations = this.node.getRootModuleConfigurations();
/* 293 */     for (int i = 0; i < rootModuleConfigurations.length; i++) {
/* 294 */       if (!isEvicted(rootModuleConfigurations[i])) {
/* 295 */         return false;
/*     */       }
/*     */     } 
/* 298 */     return true;
/*     */   }
/*     */ 
/*     */   
/*     */   private void cleanEvicted() {
/* 303 */     for (Iterator iter = this.evicted.keySet().iterator(); iter.hasNext(); ) {
/* 304 */       String rootModuleConf = iter.next();
/* 305 */       EvictionData ed = (EvictionData)this.evicted.get(rootModuleConf);
/* 306 */       Collection sel = ed.getSelected();
/* 307 */       if (sel != null) {
/* 308 */         for (Iterator iterator = sel.iterator(); iterator.hasNext(); ) {
/* 309 */           IvyNode n = iterator.next();
/* 310 */           if (n.getRealNode().equals(this))
/*     */           {
/*     */             
/* 313 */             iter.remove();
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 321 */   public void markEvicted(EvictionData evictionData) { this.evicted.put(evictionData.getRootModuleConf(), evictionData); }
/*     */ 
/*     */   
/*     */   public EvictionData getEvictedData(String rootModuleConf) {
/* 325 */     cleanEvicted();
/* 326 */     return (EvictionData)this.evicted.get(rootModuleConf);
/*     */   }
/*     */   
/*     */   public String[] getEvictedConfs() {
/* 330 */     cleanEvicted();
/* 331 */     return (String[])this.evicted.keySet().toArray((Object[])new String[this.evicted.keySet().size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Collection getAllEvictingNodes() {
/* 341 */     Collection allEvictingNodes = null;
/* 342 */     for (Iterator iter = this.evicted.values().iterator(); iter.hasNext(); ) {
/* 343 */       EvictionData ed = iter.next();
/* 344 */       Collection selected = ed.getSelected();
/* 345 */       if (selected != null) {
/* 346 */         if (allEvictingNodes == null) {
/* 347 */           allEvictingNodes = new HashSet();
/*     */         }
/* 349 */         allEvictingNodes.addAll(selected);
/*     */       } 
/*     */     } 
/* 352 */     return allEvictingNodes;
/*     */   }
/*     */   
/*     */   public Collection getAllEvictingNodesDetails() {
/* 356 */     Collection ret = null;
/* 357 */     for (Iterator iter = this.evicted.values().iterator(); iter.hasNext(); ) {
/* 358 */       EvictionData ed = iter.next();
/* 359 */       Collection selected = ed.getSelected();
/* 360 */       if (selected != null) {
/* 361 */         if (ret == null) {
/* 362 */           ret = new HashSet();
/*     */         }
/* 364 */         if (selected.size() == 1) {
/* 365 */           ret.add((new StringBuffer()).append(selected.iterator().next()).append((ed.getDetail() == null) ? """" : ("" "" + ed.getDetail())).toString()); continue;
/*     */         } 
/* 367 */         if (selected.size() > 1) {
/* 368 */           ret.add(selected + ((ed.getDetail() == null) ? """" : ("" "" + ed.getDetail())));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 373 */     return ret;
/*     */   }
/*     */   
/*     */   public Collection getAllEvictingConflictManagers() {
/* 377 */     Collection ret = new HashSet();
/* 378 */     for (Iterator iter = this.evicted.values().iterator(); iter.hasNext(); ) {
/* 379 */       EvictionData ed = iter.next();
/* 380 */       ret.add(ed.getConflictManager());
/*     */     } 
/* 382 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EvictionData getEvictionDataInRoot(String rootModuleConf, IvyNode ancestor) {
/* 395 */     Collection selectedNodes = this.node.getRoot().getResolvedNodes(this.node.getModuleId(), rootModuleConf);
/*     */     
/* 397 */     for (Iterator iter = selectedNodes.iterator(); iter.hasNext(); ) {
/* 398 */       IvyNode node = iter.next();
/* 399 */       if (node.getResolvedId().equals(this.node.getResolvedId()))
/*     */       {
/* 401 */         return null;
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 406 */     return new EvictionData(rootModuleConf, ancestor, this.node.getRoot().getConflictManager(this.node.getModuleId()), selectedNodes);
/*     */   }
/*     */ 
/*     */   
/*     */   public Collection getPendingConflicts(String rootModuleConf, ModuleId mid) {
/* 411 */     Collection resolved = (Collection)this.pendingConflicts.get(new ModuleIdConf(mid, rootModuleConf));
/*     */     
/* 413 */     Set ret = new HashSet();
/* 414 */     if (resolved != null) {
/* 415 */       for (Iterator iter = resolved.iterator(); iter.hasNext(); ) {
/* 416 */         IvyNode node = iter.next();
/* 417 */         ret.add(node.getRealNode());
/*     */       } 
/*     */     }
/* 420 */     return ret;
/*     */   }
/*     */ 
/*     */   
/*     */   public void setPendingConflicts(ModuleId moduleId, String rootModuleConf, Collection conflicts) {
/* 425 */     ModuleIdConf moduleIdConf = new ModuleIdConf(moduleId, rootModuleConf);
/* 426 */     this.pendingConflicts.put(moduleIdConf, new HashSet(conflicts));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\IvyNodeEviction.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.IvyNodeUsage,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.IncludeRule;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyNodeUsage
/*     */ {
/*     */   private IvyNode node;
/*     */   
/*     */   private static final class NodeConf
/*     */   {
/*     */     private IvyNode node;
/*     */     private String conf;
/*     */     
/*     */     public NodeConf(IvyNode node, String conf) {
/*  49 */       if (node == null) {
/*  50 */         throw new NullPointerException(""node must not null"");
/*     */       }
/*  52 */       if (conf == null) {
/*  53 */         throw new NullPointerException(""conf must not null"");
/*     */       }
/*  55 */       this.node = node;
/*  56 */       this.conf = conf;
/*     */     }
/*     */ 
/*     */     
/*  60 */     public final String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */     
/*  64 */     public final IvyNode getNode() { return this.node; }
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/*  68 */       if (!(obj instanceof NodeConf)) {
/*  69 */         return false;
/*     */       }
/*  71 */       return (getNode().equals(((NodeConf)obj).getNode()) && getConf().equals(((NodeConf)obj).getConf()));
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public int hashCode() {
/*  77 */       int hash = 33;
/*  78 */       hash += getNode().hashCode() * 17;
/*  79 */       hash += getConf().hashCode() * 17;
/*     */       
/*  81 */       return hash;
/*     */     }
/*     */ 
/*     */     
/*  85 */     public String toString() { return ""NodeConf("" + this.conf + "")""; }
/*     */   }
/*     */   
/*     */   private static final class Depender
/*     */   {
/*     */     private DependencyDescriptor dd;
/*     */     private String dependerConf;
/*     */     
/*     */     public Depender(DependencyDescriptor dd, String dependerConf) {
/*  94 */       this.dd = dd;
/*  95 */       this.dependerConf = dependerConf;
/*     */     }
/*     */ 
/*     */     
/*  99 */     public String toString() { return this.dd + "" ["" + this.dependerConf + ""]""; }
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/* 103 */       if (!(obj instanceof Depender)) {
/* 104 */         return false;
/*     */       }
/* 106 */       Depender other = (Depender)obj;
/* 107 */       return (other.dd == this.dd && other.dependerConf.equals(this.dependerConf));
/*     */     }
/*     */     public int hashCode() {
/* 110 */       int hash = 33;
/* 111 */       hash += this.dd.hashCode() * 13;
/* 112 */       hash += this.dependerConf.hashCode() * 13;
/* 113 */       return hash;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   private Map rootModuleConfs = new HashMap();
/*     */ 
/*     */   
/* 125 */   private Map requiredConfs = new HashMap();
/*     */   
/* 127 */   private Map dependers = new HashMap();
/*     */ 
/*     */   
/* 130 */   private Map blacklisted = new HashMap();
/*     */ 
/*     */   
/* 133 */   public IvyNodeUsage(IvyNode node) { this.node = node; }
/*     */ 
/*     */ 
/*     */   
/* 137 */   protected Collection getRequiredConfigurations(IvyNode in, String inConf) { return (Collection)this.requiredConfs.get(new NodeConf(in, inConf)); }
/*     */ 
/*     */ 
/*     */   
/* 141 */   protected void setRequiredConfs(IvyNode parent, String parentConf, Collection confs) { this.requiredConfs.put(new NodeConf(parent, parentConf), new HashSet(confs)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   protected Set getConfigurations(String rootModuleConf) { return (Set)this.rootModuleConfs.get(rootModuleConf); }
/*     */ 
/*     */   
/*     */   protected Set addAndGetConfigurations(String rootModuleConf) {
/* 155 */     Set depConfs = (Set)this.rootModuleConfs.get(rootModuleConf);
/* 156 */     if (depConfs == null) {
/* 157 */       depConfs = new HashSet();
/* 158 */       this.rootModuleConfs.put(rootModuleConf, depConfs);
/*     */     } 
/* 160 */     return depConfs;
/*     */   }
/*     */ 
/*     */   
/* 164 */   protected Set getRootModuleConfigurations() { return this.rootModuleConfs.keySet(); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateDataFrom(Collection usages, String rootModuleConf) {
/* 169 */     for (Iterator iterator = usages.iterator(); iterator.hasNext(); ) {
/* 170 */       IvyNodeUsage usage = iterator.next();
/* 171 */       updateDataFrom(usage, rootModuleConf);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void updateDataFrom(IvyNodeUsage usage, String rootModuleConf) {
/* 177 */     updateMapOfSet(usage.requiredConfs, this.requiredConfs);
/*     */ 
/*     */     
/* 180 */     updateMapOfSetForKey(usage.rootModuleConfs, this.rootModuleConfs, rootModuleConf);
/*     */ 
/*     */     
/* 183 */     updateMapOfSetForKey(usage.dependers, this.dependers, rootModuleConf);
/*     */   }
/*     */   
/*     */   private void updateMapOfSet(Map from, Map to) {
/* 187 */     for (Iterator iter = from.keySet().iterator(); iter.hasNext(); ) {
/* 188 */       Object key = iter.next();
/* 189 */       updateMapOfSetForKey(from, to, key);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void updateMapOfSetForKey(Map from, Map to, Object key) {
/* 194 */     Set set = (Set)from.get(key);
/* 195 */     if (set != null) {
/* 196 */       Set toupdate = (Set)to.get(key);
/* 197 */       if (toupdate != null) {
/* 198 */         toupdate.addAll(set);
/*     */       } else {
/* 200 */         to.put(key, new HashSet(set));
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addObjectsForConf(String rootModuleConf, Object objectToAdd, Map map) {
/* 216 */     Set set = (Set)map.get(rootModuleConf);
/* 217 */     if (set == null) {
/* 218 */       set = new HashSet();
/* 219 */       map.put(rootModuleConf, set);
/*     */     } 
/* 221 */     set.add(objectToAdd);
/*     */   }
/*     */ 
/*     */   
/* 225 */   public void addUsage(String rootModuleConf, DependencyDescriptor dd, String parentConf) { addObjectsForConf(rootModuleConf, new Depender(dd, parentConf), this.dependers); }
/*     */ 
/*     */   
/*     */   protected Set getDependencyArtifactsSet(String rootModuleConf) {
/* 229 */     Collection dependersInConf = (Collection)this.dependers.get(rootModuleConf);
/* 230 */     if (dependersInConf == null) {
/* 231 */       return null;
/*     */     }
/* 233 */     Set dependencyArtifacts = new HashSet();
/* 234 */     for (Iterator iterator = dependersInConf.iterator(); iterator.hasNext(); ) {
/* 235 */       Depender depender = iterator.next();
/* 236 */       DependencyArtifactDescriptor[] dads = depender.dd.getDependencyArtifacts(depender.dependerConf);
/*     */       
/* 238 */       dependencyArtifacts.addAll(Arrays.asList(dads));
/*     */     } 
/* 240 */     return dependencyArtifacts;
/*     */   }
/*     */   
/*     */   protected Set getDependencyIncludesSet(String rootModuleConf) {
/* 244 */     Collection dependersInConf = (Collection)this.dependers.get(rootModuleConf);
/* 245 */     if (dependersInConf == null) {
/* 246 */       return null;
/*     */     }
/* 248 */     Set dependencyIncludes = new HashSet();
/* 249 */     for (Iterator iterator = dependersInConf.iterator(); iterator.hasNext(); ) {
/* 250 */       Depender depender = iterator.next();
/* 251 */       IncludeRule[] rules = depender.dd.getIncludeRules(depender.dependerConf);
/*     */       
/* 253 */       if (rules == null || rules.length == 0)
/*     */       {
/*     */         
/* 256 */         return null;
/*     */       }
/* 258 */       dependencyIncludes.addAll(Arrays.asList(rules));
/*     */     } 
/* 260 */     return dependencyIncludes;
/*     */   }
/*     */ 
/*     */   
/* 264 */   protected void removeRootModuleConf(String rootModuleConf) { this.rootModuleConfs.remove(rootModuleConf); }
/*     */ 
/*     */ 
/*     */   
/* 268 */   protected void blacklist(IvyNodeBlacklist bdata) { this.blacklisted.put(bdata.getRootModuleConf(), bdata); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   protected boolean isBlacklisted(String rootModuleConf) { return this.blacklisted.containsKey(rootModuleConf); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 296 */   protected IvyNodeBlacklist getBlacklistData(String rootModuleConf) { return (IvyNodeBlacklist)this.blacklisted.get(rootModuleConf); }
/*     */ 
/*     */ 
/*     */   
/* 300 */   protected IvyNode getNode() { return this.node; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\IvyNodeUsage.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolveData,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResolveData
/*     */ {
/*     */   private ResolveEngine engine;
/*     */   private Map visitData;
/*     */   private ConfigurationResolveReport report;
/*     */   private ResolveOptions options;
/*  46 */   private VisitNode currentVisitNode = null;
/*     */   
/*     */   private ResolvedModuleRevision currentResolvedModuleRevision;
/*     */   
/*     */   public ResolveData(ResolveData data, boolean validate) {
/*  51 */     this(data.engine, (new ResolveOptions(data.options)).setValidate(validate), data.report, data.visitData);
/*     */     
/*  53 */     setCurrentVisitNode(data.currentVisitNode);
/*  54 */     setCurrentResolvedModuleRevision(data.currentResolvedModuleRevision);
/*     */   }
/*     */ 
/*     */   
/*  58 */   public ResolveData(ResolveEngine engine, ResolveOptions options) { this(engine, options, null, new LinkedHashMap()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  63 */   public ResolveData(ResolveEngine engine, ResolveOptions options, ConfigurationResolveReport report) { this(engine, options, report, new LinkedHashMap()); }
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolveData(ResolveEngine engine, ResolveOptions options, ConfigurationResolveReport report, Map visitData) {
/*  68 */     this.engine = engine;
/*  69 */     this.report = report;
/*  70 */     this.visitData = visitData;
/*  71 */     this.options = options;
/*     */   }
/*     */ 
/*     */   
/*  75 */   public ConfigurationResolveReport getReport() { return this.report; }
/*     */ 
/*     */   
/*     */   public IvyNode getNode(ModuleRevisionId mrid) {
/*  79 */     VisitData visitData = getVisitData(mrid);
/*  80 */     return (visitData == null) ? null : visitData.getNode();
/*     */   }
/*     */   
/*     */   public Collection getNodes() {
/*  84 */     Collection nodes = new ArrayList();
/*  85 */     for (Iterator iter = this.visitData.values().iterator(); iter.hasNext(); ) {
/*  86 */       VisitData vdata = iter.next();
/*  87 */       nodes.add(vdata.getNode());
/*     */     } 
/*  89 */     return nodes;
/*     */   }
/*     */ 
/*     */   
/*  93 */   public Collection getNodeIds() { return this.visitData.keySet(); }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public VisitData getVisitData(ModuleRevisionId mrid) { return (VisitData)this.visitData.get(mrid); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public VisitNode getCurrentVisitNode() { return this.currentVisitNode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   void setCurrentVisitNode(VisitNode currentVisitNode) { this.currentVisitNode = currentVisitNode; }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void register(VisitNode node) { register(node.getId(), node); }
/*     */ 
/*     */   
/*     */   public void register(ModuleRevisionId mrid, VisitNode node) {
/* 125 */     VisitData visitData = getVisitData(mrid);
/* 126 */     if (visitData == null) {
/* 127 */       visitData = new VisitData(node.getNode());
/* 128 */       visitData.addVisitNode(node);
/* 129 */       this.visitData.put(mrid, visitData);
/*     */     } else {
/* 131 */       visitData.setNode(node.getNode());
/* 132 */       visitData.addVisitNode(node);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void replaceNode(ModuleRevisionId mrid, IvyNode node, String rootModuleConf) {
/* 148 */     VisitData visitData = getVisitData(mrid);
/* 149 */     if (visitData == null) {
/* 150 */       throw new IllegalArgumentException(""impossible to replace node for id "" + mrid + "". No registered node found."");
/*     */     }
/*     */     
/* 153 */     VisitData keptVisitData = getVisitData(node.getId());
/* 154 */     if (keptVisitData == null) {
/* 155 */       throw new IllegalArgumentException(""impossible to replace node with "" + node + "". No registered node found for "" + node.getId() + ""."");
/*     */     }
/*     */ 
/*     */     
/* 159 */     this.visitData.put(mrid, keptVisitData);
/*     */     
/* 161 */     keptVisitData.addVisitNodes(rootModuleConf, visitData.getVisitNodes(rootModuleConf));
/*     */     
/* 163 */     this.report.updateDependency(mrid, node);
/*     */   }
/*     */ 
/*     */   
/* 167 */   public void setReport(ConfigurationResolveReport report) { this.report = report; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public Date getDate() { return this.options.getDate(); }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public boolean isValidate() { return this.options.isValidate(); }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public boolean isTransitive() { return this.options.isTransitive(); }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public ResolveOptions getOptions() { return this.options; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public ResolveEngineSettings getSettings() { return this.engine.getSettings(); }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public EventManager getEventManager() { return this.engine.getEventManager(); }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public ResolveEngine getEngine() { return this.engine; }
/*     */ 
/*     */   
/*     */   void blacklist(IvyNode node) {
/* 199 */     for (Iterator iter = this.visitData.entrySet().iterator(); iter.hasNext(); ) {
/* 200 */       Map.Entry entry = iter.next();
/* 201 */       VisitData vdata = (VisitData)entry.getValue();
/* 202 */       if (vdata.getNode() == node && !node.getResolvedId().equals(entry.getKey()))
/*     */       {
/*     */         
/* 205 */         iter.remove();
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean isBlacklisted(String rootModuleConf, ModuleRevisionId mrid) {
/* 211 */     IvyNode node = getNode(mrid);
/* 212 */     return (node != null && node.isBlacklisted(rootModuleConf));
/*     */   }
/*     */ 
/*     */   
/*     */   public DependencyDescriptor mediate(DependencyDescriptor dd) {
/* 217 */     VisitNode current = getCurrentVisitNode();
/* 218 */     if (current != null) {
/*     */       
/* 220 */       DependencyDescriptor originalDD = dd;
/* 221 */       List dependers = new ArrayList(current.getPath());
/*     */ 
/*     */       
/* 224 */       dependers.remove(dependers.size() - 1);
/*     */       
/* 226 */       Collections.reverse(dependers);
/* 227 */       for (Iterator iterator = dependers.iterator(); iterator.hasNext(); ) {
/* 228 */         VisitNode n = (VisitNode)iterator.next();
/* 229 */         ModuleDescriptor md = n.getDescriptor();
/* 230 */         if (md != null) {
/* 231 */           dd = md.mediate(dd);
/*     */         }
/*     */       } 
/* 234 */       if (originalDD != dd) {
/* 235 */         Message.verbose(""dependency descriptor has been mediated: "" + originalDD + "" => "" + dd);
/*     */       }
/*     */     } 
/*     */     
/* 239 */     return getEngine().mediate(dd, getOptions());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 256 */   public void setCurrentResolvedModuleRevision(ResolvedModuleRevision mr) { this.currentResolvedModuleRevision = mr; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 268 */   public ResolvedModuleRevision getCurrentResolvedModuleRevision() { return this.currentResolvedModuleRevision; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolveData.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolvedModuleRevision,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResolvedModuleRevision
/*     */ {
/*     */   private DependencyResolver resolver;
/*     */   private DependencyResolver artifactResolver;
/*     */   private ModuleDescriptor descriptor;
/*     */   private MetadataArtifactDownloadReport report;
/*     */   private boolean force = false;
/*     */   
/*     */   public ResolvedModuleRevision(DependencyResolver resolver, DependencyResolver artifactResolver, ModuleDescriptor descriptor, MetadataArtifactDownloadReport report) {
/*  44 */     this.resolver = resolver;
/*  45 */     this.artifactResolver = artifactResolver;
/*  46 */     this.descriptor = descriptor;
/*  47 */     this.report = report;
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision(DependencyResolver resolver, DependencyResolver artifactResolver, ModuleDescriptor descriptor, MetadataArtifactDownloadReport report, boolean force) {
/*  52 */     this.resolver = resolver;
/*  53 */     this.artifactResolver = artifactResolver;
/*  54 */     this.descriptor = descriptor;
/*  55 */     this.report = report;
/*  56 */     this.force = force;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  65 */   public ModuleRevisionId getId() { return this.descriptor.getResolvedModuleRevisionId(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  75 */   public Date getPublicationDate() { return this.descriptor.getResolvedPublicationDate(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  85 */   public ModuleDescriptor getDescriptor() { return this.descriptor; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public DependencyResolver getResolver() { return this.resolver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public DependencyResolver getArtifactResolver() { return this.artifactResolver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public MetadataArtifactDownloadReport getReport() { return this.report; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public boolean isForce() { return this.force; }
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 133 */     if (!(obj instanceof ResolvedModuleRevision)) {
/* 134 */       return false;
/*     */     }
/* 136 */     return ((ResolvedModuleRevision)obj).getId().equals(getId());
/*     */   }
/*     */ 
/*     */   
/* 140 */   public int hashCode() { return getId().hashCode(); }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public String toString() { return getId().toString(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolvedModuleRevision.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolveEngine,"/*      */ package org.apache.ivy.core.resolve;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.IOException;
/*      */ import java.net.URL;
/*      */ import java.text.ParseException;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.Collection;
/*      */ import java.util.Collections;
/*      */ import java.util.Date;
/*      */ import java.util.HashSet;
/*      */ import java.util.Iterator;
/*      */ import java.util.LinkedHashSet;
/*      */ import java.util.List;
/*      */ import java.util.ListIterator;
/*      */ import java.util.Properties;
/*      */ import java.util.Set;
/*      */ import org.apache.ivy.Ivy;
/*      */ import org.apache.ivy.core.IvyContext;
/*      */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*      */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*      */ import org.apache.ivy.core.event.EventManager;
/*      */ import org.apache.ivy.core.event.IvyEvent;
/*      */ import org.apache.ivy.core.event.download.PrepareDownloadEvent;
/*      */ import org.apache.ivy.core.event.resolve.EndResolveEvent;
/*      */ import org.apache.ivy.core.event.resolve.StartResolveEvent;
/*      */ import org.apache.ivy.core.module.descriptor.Artifact;
/*      */ import org.apache.ivy.core.module.descriptor.Configuration;
/*      */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*      */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*      */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*      */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*      */ import org.apache.ivy.core.report.DownloadReport;
/*      */ import org.apache.ivy.core.report.DownloadStatus;
/*      */ import org.apache.ivy.core.report.ResolveReport;
/*      */ import org.apache.ivy.core.sort.SortEngine;
/*      */ import org.apache.ivy.core.sort.SortOptions;
/*      */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*      */ import org.apache.ivy.plugins.parser.ParserSettings;
/*      */ import org.apache.ivy.plugins.repository.Resource;
/*      */ import org.apache.ivy.plugins.repository.url.URLResource;
/*      */ import org.apache.ivy.plugins.resolver.CacheResolver;
/*      */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*      */ import org.apache.ivy.plugins.version.VersionMatcher;
/*      */ import org.apache.ivy.util.Message;
/*      */ import org.apache.ivy.util.filter.Filter;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ResolveEngine
/*      */ {
/*      */   private ResolveEngineSettings settings;
/*      */   private EventManager eventManager;
/*      */   private SortEngine sortEngine;
/*   88 */   private Set fetchedSet = new HashSet();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private DependencyResolver dictatorResolver;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolveEngine(ResolveEngineSettings settings, EventManager eventManager, SortEngine sortEngine) {
/*  106 */     this.settings = settings;
/*  107 */     this.eventManager = eventManager;
/*  108 */     this.sortEngine = sortEngine;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  118 */   public DependencyResolver getDictatorResolver() { return this.dictatorResolver; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDictatorResolver(DependencyResolver dictatorResolver) {
/*  129 */     this.dictatorResolver = dictatorResolver;
/*  130 */     this.settings.setDictatorResolver(dictatorResolver);
/*      */   }
/*      */ 
/*      */   
/*  134 */   public ResolveReport resolve(File ivySource) throws ParseException, IOException { return resolve(ivySource.toURI().toURL()); }
/*      */ 
/*      */ 
/*      */   
/*  138 */   public ResolveReport resolve(URL ivySource) throws ParseException, IOException { return resolve(ivySource, new ResolveOptions()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolveReport resolve(ModuleRevisionId mrid, ResolveOptions options, boolean changing) throws ParseException, IOException {
/*      */     DefaultModuleDescriptor md;
/*  148 */     ResolveOptions optionsToUse = new ResolveOptions(options);
/*      */     
/*  150 */     if (options.useSpecialConfs()) {
/*      */ 
/*      */       
/*  153 */       ResolvedModuleRevision rmr = findModule(mrid, new ResolveOptions(options));
/*  154 */       if (rmr == null) {
/*  155 */         Message.verbose(""module not found "" + mrid);
/*      */ 
/*      */ 
/*      */         
/*  159 */         optionsToUse.setLog(""download-only"");
/*  160 */         md = DefaultModuleDescriptor.newCallerInstance(mrid, new String[] { ""default"" }, options.isTransitive(), changing);
/*      */       } else {
/*      */         
/*  163 */         String[] confs = options.getConfs(rmr.getDescriptor());
/*  164 */         md = DefaultModuleDescriptor.newCallerInstance(ModuleRevisionId.newInstance(mrid, rmr.getId().getRevision()), confs, options.isTransitive(), changing);
/*      */       } 
/*      */     } else {
/*      */       
/*  168 */       md = DefaultModuleDescriptor.newCallerInstance(mrid, options.getConfs(), options.isTransitive(), changing);
/*      */     } 
/*      */ 
/*      */     
/*  172 */     return resolve((ModuleDescriptor)md, optionsToUse);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolveReport resolve(URL ivySource, ResolveOptions options) throws ParseException, IOException {
/*  180 */     URLResource res = new URLResource(ivySource);
/*  181 */     ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser((Resource)res);
/*  182 */     Message.verbose(""using "" + parser + "" to parse "" + ivySource);
/*  183 */     ModuleDescriptor md = parser.parseDescriptor((ParserSettings)this.settings, ivySource, options.isValidate());
/*  184 */     String revision = options.getRevision();
/*  185 */     if (revision == null && md.getResolvedModuleRevisionId().getRevision() == null) {
/*  186 */       revision = Ivy.getWorkingRevision();
/*      */     }
/*  188 */     if (revision != null) {
/*  189 */       md.setResolvedModuleRevisionId(ModuleRevisionId.newInstance(md.getModuleRevisionId(), revision));
/*      */     }
/*      */ 
/*      */     
/*  193 */     return resolve(md, options);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolveReport resolve(ModuleDescriptor md, ResolveOptions options) throws ParseException, IOException {
/*  201 */     DependencyResolver oldDictator = getDictatorResolver();
/*  202 */     IvyContext context = IvyContext.getContext();
/*  203 */     if (options.isUseCacheOnly()) {
/*  204 */       setDictatorResolver((DependencyResolver)new CacheResolver(this.settings));
/*      */     }
/*      */     try {
/*  207 */       String[] confs = options.getConfs(md);
/*  208 */       options.setConfs(confs);
/*      */       
/*  210 */       if (options.getResolveId() == null) {
/*  211 */         options.setResolveId(ResolveOptions.getDefaultResolveId(md));
/*      */       }
/*      */       
/*  214 */       this.eventManager.fireIvyEvent((IvyEvent)new StartResolveEvent(md, confs));
/*      */       
/*  216 */       long start = System.currentTimeMillis();
/*  217 */       if (""default"".equals(options.getLog())) {
/*  218 */         Message.info("":: resolving dependencies :: "" + md.getResolvedModuleRevisionId() + (options.isTransitive() ? """" : "" [not transitive]""));
/*      */         
/*  220 */         Message.info(""\tconfs: "" + Arrays.asList(confs));
/*      */       } else {
/*  222 */         Message.verbose("":: resolving dependencies :: "" + md.getResolvedModuleRevisionId() + (options.isTransitive() ? """" : "" [not transitive]""));
/*      */         
/*  224 */         Message.verbose(""\tconfs: "" + Arrays.asList(confs));
/*      */       } 
/*  226 */       Message.verbose(""\tvalidate = "" + options.isValidate());
/*  227 */       Message.verbose(""\trefresh = "" + options.isRefresh());
/*      */       
/*  229 */       ResolveReport report = new ResolveReport(md, options.getResolveId());
/*      */       
/*  231 */       ResolveData data = new ResolveData(this, options);
/*  232 */       context.setResolveData(data);
/*      */ 
/*      */       
/*  235 */       IvyNode[] dependencies = getDependencies(md, options, report);
/*  236 */       report.setDependencies(Arrays.asList(dependencies), options.getArtifactFilter());
/*      */       
/*  238 */       if (options.getCheckIfChanged()) {
/*  239 */         report.checkIfChanged();
/*      */       }
/*      */ 
/*      */       
/*  243 */       ResolutionCacheManager cacheManager = this.settings.getResolutionCacheManager();
/*  244 */       File ivyFileInCache = cacheManager.getResolvedIvyFileInCache(md.getResolvedModuleRevisionId());
/*      */       
/*  246 */       md.toIvyFile(ivyFileInCache);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  252 */       File ivyPropertiesInCache = cacheManager.getResolvedIvyPropertiesInCache(md.getResolvedModuleRevisionId());
/*      */       
/*  254 */       Properties props = new Properties();
/*  255 */       if (dependencies.length > 0) {
/*  256 */         IvyNode root = dependencies[0].getRoot();
/*  257 */         for (int i = 0; i < dependencies.length; i++) {
/*  258 */           if (!dependencies[i].hasProblem()) {
/*  259 */             DependencyDescriptor dd = dependencies[i].getDependencyDescriptor(root);
/*  260 */             if (dd != null) {
/*  261 */               ModuleRevisionId depResolvedId = dependencies[i].getResolvedId();
/*  262 */               ModuleDescriptor depDescriptor = dependencies[i].getDescriptor();
/*  263 */               ModuleRevisionId depRevisionId = dd.getDependencyRevisionId();
/*  264 */               if (depResolvedId == null) {
/*  265 */                 throw new NullPointerException(""getResolvedId() is null for "" + dependencies[i].toString());
/*      */               }
/*      */               
/*  268 */               if (depRevisionId == null) {
/*  269 */                 throw new NullPointerException(""getDependencyRevisionId() is null for "" + dd.toString());
/*      */               }
/*      */               
/*  272 */               String rev = depResolvedId.getRevision();
/*      */ 
/*      */               
/*  275 */               String status = (depDescriptor == null) ? ""?"" : depDescriptor.getStatus();
/*  276 */               props.put(depRevisionId.encodeToString(), rev + "" "" + status);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       } 
/*  281 */       FileOutputStream out = new FileOutputStream(ivyPropertiesInCache);
/*  282 */       props.store(out, md.getResolvedModuleRevisionId() + "" resolved revisions"");
/*  283 */       out.close();
/*  284 */       Message.verbose(""\tresolved ivy file produced in "" + ivyFileInCache);
/*      */       
/*  286 */       report.setResolveTime(System.currentTimeMillis() - start);
/*      */       
/*  288 */       if (options.isDownload()) {
/*  289 */         Message.verbose("":: downloading artifacts ::"");
/*      */         
/*  291 */         downloadArtifacts(report, options.getArtifactFilter(), (DownloadOptions)(new DownloadOptions()).setLog(options.getLog()));
/*      */       } 
/*      */ 
/*      */       
/*  295 */       if (options.isOutputReport()) {
/*  296 */         outputReport(report, cacheManager, options);
/*      */       }
/*      */       
/*  299 */       Message.verbose(""\tresolve done ("" + report.getResolveTime() + ""ms resolve - "" + report.getDownloadTime() + ""ms download)"");
/*      */       
/*  301 */       Message.sumupProblems();
/*      */       
/*  303 */       this.eventManager.fireIvyEvent((IvyEvent)new EndResolveEvent(md, confs, report));
/*  304 */       return report;
/*  305 */     } catch (RuntimeException ex) {
/*  306 */       Message.error(ex.getMessage());
/*  307 */       Message.sumupProblems();
/*  308 */       throw ex;
/*      */     } finally {
/*  310 */       context.setResolveData(null);
/*  311 */       setDictatorResolver(oldDictator);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public void outputReport(ResolveReport report, ResolutionCacheManager cacheMgr, ResolveOptions options) throws IOException {
/*  318 */     if (""default"".equals(options.getLog())) {
/*  319 */       Message.info("":: resolution report :: resolve "" + report.getResolveTime() + ""ms"" + "" :: artifacts dl "" + report.getDownloadTime() + ""ms"");
/*      */     } else {
/*      */       
/*  322 */       Message.verbose("":: resolution report :: resolve "" + report.getResolveTime() + ""ms"" + "" :: artifacts dl "" + report.getDownloadTime() + ""ms"");
/*      */     } 
/*      */     
/*  325 */     report.setProblemMessages(Message.getProblems());
/*      */     
/*  327 */     report.output(this.settings.getReportOutputters(), cacheMgr, options);
/*      */   }
/*      */ 
/*      */   
/*      */   public void downloadArtifacts(ResolveReport report, Filter artifactFilter, DownloadOptions options) {
/*  332 */     long start = System.currentTimeMillis();
/*  333 */     IvyNode[] dependencies = (IvyNode[])report.getDependencies().toArray((Object[])new IvyNode[report.getDependencies().size()]);
/*      */ 
/*      */     
/*  336 */     this.eventManager.fireIvyEvent((IvyEvent)new PrepareDownloadEvent((Artifact[])report.getArtifacts().toArray((Object[])new Artifact[report.getArtifacts().size()])));
/*      */ 
/*      */     
/*  339 */     long totalSize = 0L;
/*  340 */     for (int i = 0; i < dependencies.length; i++) {
/*  341 */       checkInterrupted();
/*      */       
/*  343 */       if (!dependencies[i].isCompletelyEvicted() && !dependencies[i].hasProblem() && dependencies[i].getModuleRevision() != null) {
/*      */         
/*  345 */         DependencyResolver resolver = dependencies[i].getModuleRevision().getArtifactResolver();
/*      */         
/*  347 */         Artifact[] selectedArtifacts = dependencies[i].getSelectedArtifacts(artifactFilter);
/*  348 */         DownloadReport dReport = resolver.download(selectedArtifacts, options);
/*  349 */         ArtifactDownloadReport[] adrs = dReport.getArtifactsReports();
/*  350 */         for (int j = 0; j < adrs.length; j++) {
/*  351 */           if (adrs[j].getDownloadStatus() == DownloadStatus.FAILED) {
/*  352 */             if (adrs[j].getArtifact().getExtraAttribute(""ivy:merged"") != null) {
/*  353 */               Message.warn(""\tmerged artifact not found: "" + adrs[j].getArtifact() + "". It was required in "" + adrs[j].getArtifact().getExtraAttribute(""ivy:merged""));
/*      */             }
/*      */             else {
/*      */               
/*  357 */               Message.warn(""\t"" + adrs[j]);
/*  358 */               resolver.reportFailure(adrs[j].getArtifact());
/*      */             } 
/*  360 */           } else if (adrs[j].getDownloadStatus() == DownloadStatus.SUCCESSFUL) {
/*  361 */             totalSize += adrs[j].getSize();
/*      */           } 
/*      */         } 
/*      */         
/*  365 */         String[] dconfs = dependencies[i].getRootModuleConfigurations();
/*  366 */         for (int j = 0; j < dconfs.length; j++) {
/*      */ 
/*      */ 
/*      */           
/*  370 */           if (dependencies[i].isEvicted(dconfs[j]) || dependencies[i].isBlacklisted(dconfs[j])) {
/*      */             
/*  372 */             report.getConfigurationReport(dconfs[j]).addDependency(dependencies[i]);
/*      */           } else {
/*  374 */             report.getConfigurationReport(dconfs[j]).addDependency(dependencies[i], dReport);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } 
/*      */     
/*  380 */     report.setDownloadTime(System.currentTimeMillis() - start);
/*  381 */     report.setDownloadSize(totalSize);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ArtifactDownloadReport download(Artifact artifact, DownloadOptions options) {
/*  401 */     DependencyResolver resolver = this.settings.getResolver(artifact.getModuleRevisionId());
/*  402 */     DownloadReport r = resolver.download(new Artifact[] { artifact }, options);
/*  403 */     return r.getArtifactReport(artifact);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ArtifactOrigin locate(Artifact artifact) {
/*  417 */     DependencyResolver resolver = this.settings.getResolver(artifact.getModuleRevisionId());
/*  418 */     return resolver.locate(artifact);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ArtifactDownloadReport download(ArtifactOrigin origin, DownloadOptions options) {
/*  443 */     DependencyResolver resolver = this.settings.getResolver(origin.getArtifact().getModuleRevisionId());
/*      */     
/*  445 */     return resolver.download(origin, options);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  470 */   public IvyNode[] getDependencies(URL ivySource, ResolveOptions options) throws ParseException, IOException { return getDependencies(ModuleDescriptorParserRegistry.getInstance().parseDescriptor((ParserSettings)this.settings, ivySource, options.isValidate()), options, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public IvyNode[] getDependencies(ModuleDescriptor md, ResolveOptions options, ResolveReport report) {
/*  491 */     if (md == null) {
/*  492 */       throw new NullPointerException(""module descriptor must not be null"");
/*      */     }
/*  494 */     String[] confs = options.getConfs(md);
/*  495 */     Collection missingConfs = new ArrayList();
/*  496 */     for (int i = 0; i < confs.length; i++) {
/*  497 */       if (confs[i] == null) {
/*  498 */         throw new NullPointerException(""null conf not allowed: confs where: "" + Arrays.asList((T[])confs));
/*      */       }
/*      */ 
/*      */       
/*  502 */       if (md.getConfiguration(confs[i]) == null) {
/*  503 */         missingConfs.add("" '"" + confs[i] + ""' "");
/*      */       }
/*      */     } 
/*  506 */     if (!missingConfs.isEmpty()) {
/*  507 */       throw new IllegalArgumentException(""requested configuration"" + ((missingConfs.size() > 1) ? ""s"" : """") + "" not found in "" + md.getModuleRevisionId() + "": "" + missingConfs);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  513 */     IvyContext context = IvyContext.pushNewCopyContext();
/*      */     try {
/*  515 */       options.setConfs(confs);
/*      */       
/*  517 */       Date reportDate = new Date();
/*  518 */       ResolveData data = context.getResolveData();
/*  519 */       if (data == null) {
/*  520 */         data = new ResolveData(this, options);
/*  521 */         context.setResolveData(data);
/*      */       } 
/*  523 */       IvyNode rootNode = new IvyNode(data, md);
/*      */       
/*  525 */       for (int i = 0; i < confs.length; i++) {
/*  526 */         Message.verbose(""resolving dependencies for configuration '"" + confs[i] + ""'"");
/*      */         
/*  528 */         this.fetchedSet.clear();
/*      */         
/*  530 */         ConfigurationResolveReport confReport = null;
/*  531 */         if (report != null) {
/*  532 */           confReport = report.getConfigurationReport(confs[i]);
/*  533 */           if (confReport == null) {
/*  534 */             confReport = new ConfigurationResolveReport(this, md, confs[i], reportDate, options);
/*      */             
/*  536 */             report.addReport(confs[i], confReport);
/*      */           } 
/*      */         } 
/*      */         
/*  540 */         data.setReport(confReport);
/*      */ 
/*      */         
/*  543 */         VisitNode root = new VisitNode(data, rootNode, null, confs[i], null);
/*  544 */         root.setRequestedConf(confs[i]);
/*  545 */         rootNode.updateConfsToFetch(Collections.singleton(confs[i]));
/*      */ 
/*      */         
/*  548 */         boolean fetched = false;
/*  549 */         while (!fetched) {
/*      */           try {
/*  551 */             fetchDependencies(root, confs[i], false);
/*  552 */             fetched = true;
/*  553 */           } catch (RestartResolveProcess restart) {
/*  554 */             Message.verbose(""===================================================="");
/*  555 */             Message.verbose(""=           RESTARTING RESOLVE PROCESS"");
/*  556 */             Message.verbose(""= "" + restart.getMessage());
/*  557 */             Message.verbose(""===================================================="");
/*  558 */             this.fetchedSet.clear();
/*      */           } 
/*      */         } 
/*      */ 
/*      */         
/*  563 */         for (Iterator iter = data.getNodes().iterator(); iter.hasNext(); ) {
/*  564 */           IvyNode dep = iter.next();
/*  565 */           dep.clean();
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  570 */       Collection nodes = data.getNodes();
/*      */       
/*  572 */       Collection dependencies = new LinkedHashSet(nodes.size());
/*  573 */       for (Iterator iter = nodes.iterator(); iter.hasNext(); ) {
/*  574 */         IvyNode node = iter.next();
/*  575 */         if (node != null && !node.isRoot() && !node.isCompletelyBlacklisted()) {
/*  576 */           dependencies.add(node);
/*      */         }
/*      */       } 
/*  579 */       List sortedDependencies = this.sortEngine.sortNodes(dependencies, SortOptions.SILENT);
/*  580 */       Collections.reverse(sortedDependencies);
/*      */       
/*  582 */       handleTransiviteEviction(md, confs, data, sortedDependencies);
/*      */       
/*  584 */       return dependencies.toArray(new IvyNode[dependencies.size()]);
/*      */     } finally {
/*  586 */       IvyContext.popContext();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void handleTransiviteEviction(ModuleDescriptor md, String[] confs, ResolveData data, List sortedDependencies) {
/*  596 */     for (ListIterator iter = sortedDependencies.listIterator(); iter.hasNext(); ) {
/*  597 */       IvyNode node = iter.next();
/*  598 */       if (!node.isCompletelyEvicted()) {
/*  599 */         for (int i = 0; i < confs.length; i++) {
/*  600 */           IvyNodeCallers.Caller[] callers = node.getCallers(confs[i]);
/*  601 */           if (this.settings.debugConflictResolution()) {
/*  602 */             Message.debug(""checking if "" + node.getId() + "" is transitively evicted in "" + confs[i]);
/*      */           }
/*      */           
/*  605 */           boolean allEvicted = (callers.length > 0);
/*  606 */           for (int j = 0; j < callers.length; j++) {
/*  607 */             if (callers[j].getModuleRevisionId().equals(md.getModuleRevisionId())) {
/*      */               
/*  609 */               allEvicted = false;
/*      */               break;
/*      */             } 
/*  612 */             IvyNode callerNode = data.getNode(callers[j].getModuleRevisionId());
/*  613 */             if (callerNode == null) {
/*  614 */               Message.warn(""ivy internal error: no node found for "" + callers[j].getModuleRevisionId() + "": looked in "" + data.getNodeIds() + "" and root module id was "" + md.getModuleRevisionId());
/*      */             }
/*      */             else {
/*      */               
/*  618 */               if (!callerNode.isEvicted(confs[i])) {
/*  619 */                 allEvicted = false;
/*      */                 break;
/*      */               } 
/*  622 */               if (this.settings.debugConflictResolution()) {
/*  623 */                 Message.debug(""caller "" + callerNode.getId() + "" of "" + node.getId() + "" is evicted"");
/*      */               }
/*      */             } 
/*      */           } 
/*      */ 
/*      */           
/*  629 */           if (allEvicted) {
/*  630 */             Message.verbose(""all callers are evicted for "" + node + "": evicting too"");
/*      */             
/*  632 */             node.markEvicted(confs[i], null, null, null);
/*      */           }
/*  634 */           else if (this.settings.debugConflictResolution()) {
/*  635 */             Message.debug(node.getId() + "" isn't transitively evicted, at least one caller was"" + "" not evicted"");
/*      */           } 
/*      */         } 
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void fetchDependencies(VisitNode node, String conf, boolean shouldBePublic) {
/*  646 */     checkInterrupted();
/*  647 */     long start = System.currentTimeMillis();
/*  648 */     if (node.getParent() != null) {
/*  649 */       Message.verbose(""== resolving dependencies "" + node.getParent().getId() + ""->"" + node.getId() + "" ["" + node.getParentConf() + ""->"" + conf + ""]"");
/*      */     } else {
/*      */       
/*  652 */       Message.verbose(""== resolving dependencies for "" + node.getId() + "" ["" + conf + ""]"");
/*      */     } 
/*  654 */     ResolveData data = node.getNode().getData();
/*  655 */     VisitNode parentVisitNode = data.getCurrentVisitNode();
/*      */     
/*  657 */     data.setCurrentVisitNode(node);
/*  658 */     DependencyDescriptor dd = node.getDependencyDescriptor();
/*  659 */     VersionMatcher versionMatcher = node.getNode().getData().getSettings().getVersionMatcher();
/*  660 */     if (dd != null && (node.getRoot() != node.getParent() || !versionMatcher.isDynamic(dd.getDependencyRevisionId())))
/*      */     {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  668 */       resolveConflict(node, conf);
/*      */     }
/*      */     
/*  671 */     if (node.loadData(conf, shouldBePublic)) {
/*      */ 
/*      */ 
/*      */       
/*  675 */       resolveConflict(node, conf);
/*  676 */       if (!node.isEvicted() && !node.isCircular()) {
/*  677 */         String[] confs = node.getRealConfs(conf);
/*  678 */         for (int i = 0; i < confs.length; i++) {
/*  679 */           doFetchDependencies(node, confs[i]);
/*      */         }
/*      */       } 
/*  682 */     } else if (!node.hasProblem()) {
/*      */ 
/*      */       
/*  685 */       if (!node.isEvicted() && !node.isCircular()) {
/*  686 */         String[] confs = node.getRealConfs(conf);
/*  687 */         for (int i = 0; i < confs.length; i++) {
/*  688 */           doFetchDependencies(node, confs[i]);
/*      */         }
/*      */       } 
/*      */     } 
/*  692 */     if (node.isEvicted()) {
/*      */       
/*  694 */       IvyNodeEviction.EvictionData ed = node.getEvictedData();
/*  695 */       if (ed.getSelected() != null) {
/*  696 */         for (Iterator iter = ed.getSelected().iterator(); iter.hasNext(); ) {
/*  697 */           IvyNode selected = iter.next();
/*  698 */           if (!selected.isLoaded()) {
/*      */ 
/*      */             
/*  701 */             selected.updateConfsToFetch(Collections.singleton(conf));
/*      */             
/*      */             continue;
/*      */           } 
/*  705 */           fetchDependencies(node.gotoNode(selected), conf, true);
/*      */         } 
/*      */       }
/*      */     } 
/*      */     
/*  710 */     if (this.settings.debugConflictResolution()) {
/*  711 */       Message.debug(node.getId() + "" => dependencies resolved in "" + conf + "" ("" + (System.currentTimeMillis() - start) + ""ms)"");
/*      */     }
/*      */     
/*  714 */     data.setCurrentVisitNode(parentVisitNode);
/*      */   }
/*      */   
/*      */   private void doFetchDependencies(VisitNode node, String conf) {
/*  718 */     Configuration c = node.getConfiguration(conf);
/*  719 */     if (c == null) {
/*  720 */       if (!node.isConfRequiredByMergedUsageOnly(conf)) {
/*  721 */         Message.warn(""configuration not found '"" + conf + ""' in "" + node.getResolvedId() + "": ignoring"");
/*      */         
/*  723 */         if (node.getParent() != null) {
/*  724 */           Message.warn(""it was required from "" + node.getParent().getResolvedId());
/*      */         }
/*      */       } 
/*      */ 
/*      */       
/*      */       return;
/*      */     } 
/*      */ 
/*      */     
/*  733 */     boolean requestedConfSet = false;
/*  734 */     if (node.getRequestedConf() == null) {
/*  735 */       node.setRequestedConf(conf);
/*  736 */       requestedConfSet = true;
/*      */     } 
/*      */     
/*  739 */     String[] extendedConfs = c.getExtends();
/*  740 */     if (extendedConfs.length > 0) {
/*  741 */       node.updateConfsToFetch(Arrays.asList(extendedConfs));
/*      */     }
/*  743 */     for (int i = 0; i < extendedConfs.length; i++) {
/*  744 */       fetchDependencies(node, extendedConfs[i], false);
/*      */     }
/*      */ 
/*      */     
/*  748 */     DependencyDescriptor dd = node.getDependencyDescriptor();
/*  749 */     if (!isDependenciesFetched(node.getNode(), conf) && (dd == null || node.isTransitive())) {
/*  750 */       Collection dependencies = node.getDependencies(conf);
/*  751 */       for (Iterator iter = dependencies.iterator(); iter.hasNext(); ) {
/*  752 */         VisitNode dep = iter.next();
/*  753 */         dep.useRealNode();
/*      */         
/*  755 */         String[] confs = dep.getRequiredConfigurations(node, conf);
/*  756 */         for (int i = 0; i < confs.length; i++) {
/*  757 */           fetchDependencies(dep, confs[i], true);
/*      */         }
/*  759 */         if (!dep.isEvicted() && !dep.hasProblem()) {
/*      */ 
/*      */           
/*  762 */           confs = dep.getConfsToFetch();
/*  763 */           for (int i = 0; i < confs.length; i++)
/*      */           {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  769 */             fetchDependencies(dep, confs[i], false);
/*      */           }
/*      */         } 
/*      */       } 
/*  773 */       markDependenciesFetched(node.getNode(), conf);
/*      */     } 
/*      */ 
/*      */     
/*  777 */     if (requestedConfSet) {
/*  778 */       node.setRequestedConf(null);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isDependenciesFetched(IvyNode node, String conf) {
/*  793 */     String key = getDependenciesFetchedKey(node, conf);
/*  794 */     return this.fetchedSet.contains(key);
/*      */   }
/*      */   
/*      */   private void markDependenciesFetched(IvyNode node, String conf) {
/*  798 */     String key = getDependenciesFetchedKey(node, conf);
/*  799 */     this.fetchedSet.add(key);
/*      */   }
/*      */   
/*      */   private String getDependenciesFetchedKey(IvyNode node, String conf) {
/*  803 */     ModuleRevisionId moduleRevisionId = node.getResolvedId();
/*  804 */     String key = moduleRevisionId.getOrganisation() + ""|"" + moduleRevisionId.getName() + ""|"" + moduleRevisionId.getRevision() + ""|"" + conf;
/*      */     
/*  806 */     return key;
/*      */   }
/*      */ 
/*      */   
/*  810 */   private void resolveConflict(VisitNode node, String conf) { resolveConflict(node, node.getParent(), conf, Collections.EMPTY_SET); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean resolveConflict(VisitNode node, VisitNode ancestor, String conf, Collection toevict) {
/*  828 */     if (ancestor == null || node == ancestor) {
/*  829 */       return true;
/*      */     }
/*      */     
/*  832 */     if (checkConflictSolvedEvicted(node, ancestor))
/*      */     {
/*  834 */       return true;
/*      */     }
/*  836 */     boolean debugConflictResolution = this.settings.debugConflictResolution();
/*  837 */     if (checkConflictSolvedSelected(node, ancestor)) {
/*      */ 
/*      */ 
/*      */       
/*  841 */       if (resolveConflict(node, ancestor.getParent(), conf, toevict)) {
/*      */ 
/*      */         
/*  844 */         IvyNodeEviction.EvictionData evictionData = node.getEvictionDataInRoot(node.getRootModuleConf(), ancestor);
/*      */         
/*  846 */         if (evictionData != null) {
/*      */           
/*  848 */           if (debugConflictResolution) {
/*  849 */             Message.debug(node + "" was previously evicted in root module conf "" + node.getRootModuleConf());
/*      */           }
/*      */           
/*  852 */           node.markEvicted(evictionData);
/*  853 */           if (debugConflictResolution) {
/*  854 */             Message.debug(""evicting "" + node + "" by "" + evictionData);
/*      */           }
/*      */         } 
/*  857 */         return true;
/*      */       } 
/*  859 */       return false;
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  864 */     Set resolvedNodes = ancestor.getNode().getResolvedNodes(node.getModuleId(), node.getRootModuleConf());
/*      */     
/*  866 */     resolvedNodes.addAll(ancestor.getNode().getPendingConflicts(node.getRootModuleConf(), node.getModuleId()));
/*      */     
/*  868 */     Collection conflicts = computeConflicts(node, ancestor, conf, toevict, resolvedNodes);
/*      */     
/*  870 */     ConflictManager conflictManager = ancestor.getNode().getConflictManager(node.getModuleId());
/*      */     
/*  872 */     Collection resolved = resolveConflicts(node, ancestor, conflicts, conflictManager);
/*      */     
/*  874 */     if (resolved == null) {
/*  875 */       if (debugConflictResolution) {
/*  876 */         Message.debug(""impossible to resolve conflicts for "" + node + "" in "" + ancestor + "" yet"");
/*      */         
/*  878 */         Message.debug(""setting all nodes as pending conflicts for later conflict resolution: "" + conflicts);
/*      */       } 
/*      */       
/*  881 */       ancestor.getNode().setPendingConflicts(node.getModuleId(), node.getRootModuleConf(), conflicts);
/*      */       
/*  883 */       return false;
/*      */     } 
/*      */     
/*  886 */     if (debugConflictResolution) {
/*  887 */       Message.debug(""selected revisions for "" + node + "" in "" + ancestor + "": "" + resolved);
/*      */     }
/*  889 */     if (resolved.contains(node.getNode())) {
/*      */ 
/*      */ 
/*      */       
/*  893 */       toevict = resolvedNodes;
/*  894 */       toevict.removeAll(resolved);
/*      */       
/*  896 */       for (Iterator iter = toevict.iterator(); iter.hasNext(); ) {
/*  897 */         IvyNode te = iter.next();
/*  898 */         te.markEvicted(node.getRootModuleConf(), ancestor.getNode(), conflictManager, resolved);
/*      */ 
/*      */         
/*  901 */         if (debugConflictResolution) {
/*  902 */           Message.debug(""evicting "" + te + "" by "" + te.getEvictedData(node.getRootModuleConf()));
/*      */         }
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  910 */       ancestor.getNode().setResolvedNodes(node.getModuleId(), node.getRootModuleConf(), resolved);
/*      */ 
/*      */       
/*  913 */       Collection evicted = new HashSet(ancestor.getNode().getEvictedNodes(node.getModuleId(), node.getRootModuleConf()));
/*      */       
/*  915 */       evicted.removeAll(resolved);
/*  916 */       evicted.addAll(toevict);
/*  917 */       ancestor.getNode().setEvictedNodes(node.getModuleId(), node.getRootModuleConf(), evicted);
/*      */       
/*  919 */       ancestor.getNode().setPendingConflicts(node.getModuleId(), node.getRootModuleConf(), Collections.EMPTY_SET);
/*      */ 
/*      */       
/*  922 */       return resolveConflict(node, ancestor.getParent(), conf, toevict);
/*      */     } 
/*      */     
/*  925 */     if (resolved.isEmpty() && 
/*  926 */       debugConflictResolution) {
/*  927 */       Message.verbose(""conflict manager '"" + conflictManager + ""' evicted all revisions among "" + conflicts);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  934 */     Collection evicted = new HashSet(ancestor.getNode().getEvictedNodes(node.getModuleId(), node.getRootModuleConf()));
/*      */     
/*  936 */     toevict.removeAll(resolved);
/*  937 */     evicted.removeAll(resolved);
/*  938 */     evicted.addAll(toevict);
/*  939 */     evicted.add(node.getNode());
/*  940 */     ancestor.getNode().setEvictedNodes(node.getModuleId(), node.getRootModuleConf(), evicted);
/*      */     
/*  942 */     ancestor.getNode().setPendingConflicts(node.getModuleId(), node.getRootModuleConf(), Collections.EMPTY_SET);
/*      */ 
/*      */     
/*  945 */     node.markEvicted(ancestor, conflictManager, resolved);
/*  946 */     if (debugConflictResolution) {
/*  947 */       Message.debug(""evicting "" + node + "" by "" + node.getEvictedData());
/*      */     }
/*      */ 
/*      */     
/*  951 */     Collection prevResolved = ancestor.getNode().getResolvedNodes(node.getModuleId(), node.getRootModuleConf());
/*      */     
/*  953 */     boolean solved = true;
/*  954 */     if (!prevResolved.equals(resolved)) {
/*  955 */       ancestor.getNode().setResolvedNodes(node.getModuleId(), node.getRootModuleConf(), resolved);
/*      */       
/*  957 */       for (Iterator iter = resolved.iterator(); iter.hasNext(); ) {
/*  958 */         IvyNode sel = (IvyNode)iter.next();
/*  959 */         if (!prevResolved.contains(sel)) {
/*  960 */           solved &= resolveConflict(node.gotoNode(sel), ancestor.getParent(), conf, toevict);
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/*  965 */     return solved;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private Collection resolveConflicts(VisitNode node, VisitNode ancestor, Collection conflicts, ConflictManager conflictManager) {
/*  971 */     if (node.getParent() != ancestor && conflictManager == this.settings.getConflictManager(node.getModuleId()) && node.getParent().getNode().getResolvedNodes(node.getModuleId(), node.getRootModuleConf()).equals(conflicts)) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  983 */       if (this.settings.debugConflictResolution()) {
/*  984 */         Message.debug(""no new conflicting revisions for "" + node + "" in "" + ancestor + "": "" + conflicts);
/*      */       }
/*      */ 
/*      */       
/*  988 */       return conflicts;
/*      */     } 
/*  990 */     if (this.settings.debugConflictResolution()) {
/*  991 */       Message.debug(""found conflicting revisions for "" + node + "" in "" + ancestor + "": "" + conflicts);
/*      */     }
/*      */ 
/*      */     
/*  995 */     return conflictManager.resolveConflicts(ancestor.getNode(), conflicts);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Collection computeConflicts(VisitNode node, VisitNode ancestor, String conf, Collection toevict, Collection selectedNodes) {
/* 1022 */     Collection conflicts = new LinkedHashSet();
/* 1023 */     conflicts.add(node.getNode());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1031 */     if (selectedNodes.removeAll(toevict) || (selectedNodes.isEmpty() && !node.getParent().getNode().equals(ancestor.getNode()))) {
/*      */ 
/*      */       
/* 1034 */       Collection deps = ancestor.getNode().getDependencies(node.getRootModuleConf(), ancestor.getNode().getConfigurations(node.getRootModuleConf()));
/*      */ 
/*      */       
/* 1037 */       for (Iterator iter = deps.iterator(); iter.hasNext(); ) {
/* 1038 */         IvyNode dep = iter.next();
/* 1039 */         if (dep.getModuleId().equals(node.getModuleId())) {
/* 1040 */           conflicts.add(dep);
/*      */         }
/* 1042 */         conflicts.addAll(dep.getResolvedNodes(node.getModuleId(), node.getRootModuleConf()));
/*      */       }
/*      */     
/* 1045 */     } else if (selectedNodes.isEmpty()) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1051 */       Collection parentDepIvyNodes = node.getParent().getNode().getDependencies(node.getRootModuleConf(), new String[] { node.getParentConf() });
/*      */ 
/*      */       
/* 1054 */       for (Iterator it = parentDepIvyNodes.iterator(); it.hasNext(); ) {
/* 1055 */         IvyNode parentDep = it.next();
/* 1056 */         if (parentDep.getModuleId().equals(node.getModuleId())) {
/* 1057 */           conflicts.add(parentDep);
/*      */         }
/*      */       } 
/*      */     } else {
/* 1061 */       conflicts.addAll(selectedNodes);
/*      */     } 
/* 1063 */     return conflicts;
/*      */   }
/*      */   
/*      */   private boolean checkConflictSolvedSelected(VisitNode node, VisitNode ancestor) {
/* 1067 */     if (ancestor.getResolvedRevisions(node.getModuleId()).contains(node.getResolvedId())) {
/*      */       
/* 1069 */       if (this.settings.debugConflictResolution()) {
/* 1070 */         Message.debug(""conflict resolution already done for "" + node + "" in "" + ancestor);
/*      */       }
/* 1072 */       return true;
/*      */     } 
/* 1074 */     return false;
/*      */   }
/*      */   
/*      */   private boolean checkConflictSolvedEvicted(VisitNode node, VisitNode ancestor) {
/* 1078 */     if (ancestor.getEvictedRevisions(node.getModuleId()).contains(node.getResolvedId())) {
/*      */       
/* 1080 */       if (this.settings.debugConflictResolution()) {
/* 1081 */         Message.debug(""conflict resolution already done for "" + node + "" in "" + ancestor);
/*      */       }
/* 1083 */       return true;
/*      */     } 
/* 1085 */     return false;
/*      */   }
/*      */   
/*      */   public ResolvedModuleRevision findModule(ModuleRevisionId id, ResolveOptions options) {
/* 1089 */     DependencyResolver r = this.settings.getResolver(id);
/* 1090 */     if (r == null) {
/* 1091 */       throw new IllegalStateException(""no resolver found for "" + id.getModuleId());
/*      */     }
/* 1093 */     DefaultModuleDescriptor md = DefaultModuleDescriptor.newCallerInstance(id, new String[] { ""*"" }, false, false);
/*      */ 
/*      */     
/* 1096 */     if (options.getResolveId() == null) {
/* 1097 */       options.setResolveId(ResolveOptions.getDefaultResolveId((ModuleDescriptor)md));
/*      */     }
/*      */     
/*      */     try {
/* 1101 */       return r.getDependency((DependencyDescriptor)new DefaultDependencyDescriptor(id, true), new ResolveData(this, options, new ConfigurationResolveReport(this, (ModuleDescriptor)md, ""default"", null, options)));
/*      */     }
/* 1103 */     catch (ParseException e) {
/* 1104 */       throw new RuntimeException(""problem while parsing repository module descriptor for "" + id + "": "" + e, e);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public DependencyDescriptor mediate(DependencyDescriptor dd, ResolveOptions options) {
/* 1125 */     if (dd == null) {
/* 1126 */       return null;
/*      */     }
/* 1128 */     String resolveMode = (options.getResolveMode() == null) ? this.settings.getResolveMode(dd.getDependencyId()) : options.getResolveMode();
/*      */ 
/*      */     
/* 1131 */     if (""dynamic"".equals(resolveMode) && !dd.getDynamicConstraintDependencyRevisionId().equals(dd.getDependencyRevisionId()))
/*      */     {
/*      */       
/* 1134 */       return dd.clone(dd.getDynamicConstraintDependencyRevisionId());
/*      */     }
/* 1136 */     return dd;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/* 1141 */   public EventManager getEventManager() { return this.eventManager; }
/*      */ 
/*      */ 
/*      */   
/* 1145 */   public ResolveEngineSettings getSettings() { return this.settings; }
/*      */ 
/*      */ 
/*      */   
/* 1149 */   public SortEngine getSortEngine() { return this.sortEngine; }
/*      */ 
/*      */ 
/*      */   
/* 1153 */   private void checkInterrupted() { IvyContext.getContext().getIvy().checkInterrupted(); }
/*      */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolveEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolveEngineSettings,"package org.apache.ivy.core.resolve;
import org.apache.ivy.core.module.id.ModuleId;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.plugins.conflict.ConflictManager;
import org.apache.ivy.plugins.report.ReportOutputter;
import org.apache.ivy.plugins.resolver.DependencyResolver;
import org.apache.ivy.plugins.resolver.ResolverSettings;
public interface ResolveEngineSettings extends ResolverSettings {
  void setDictatorResolver(DependencyResolver paramDependencyResolver);
  boolean debugConflictResolution();
  ReportOutputter[] getReportOutputters();
  String getResolverName(ModuleRevisionId paramModuleRevisionId);
  boolean logNotConvertedExclusionRule();
  ConflictManager getConflictManager(ModuleId paramModuleId);
  boolean logModuleWhenFound();
  boolean logResolvedRevision();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolveEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolveOptions,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.Date;
/*     */ import org.apache.ivy.core.LogOptions;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.util.ConfigurationUtils;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResolveOptions
/*     */   extends LogOptions
/*     */ {
/*     */   public static final String RESOLVEMODE_DEFAULT = ""default"";
/*     */   public static final String RESOLVEMODE_DYNAMIC = ""dynamic"";
/*  47 */   public static final String[] RESOLVEMODES = new String[] { ""default"", ""dynamic"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   private String[] confs = new String[] { ""*"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  60 */   private String revision = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private Date date = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validate = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean useCacheOnly = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean transitive = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean download = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean outputReport = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   private Filter artifactFilter = FilterHelper.NO_FILTER;
/*     */ 
/*     */ 
/*     */   
/*     */   private String resolveMode;
/*     */ 
/*     */ 
/*     */   
/*     */   private String resolveId;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean refresh;
/*     */ 
/*     */   
/*     */   private boolean checkIfChanged = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolveOptions() {}
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolveOptions(ResolveOptions options) {
/* 125 */     super(options);
/* 126 */     this.confs = options.confs;
/* 127 */     this.revision = options.revision;
/* 128 */     this.date = options.date;
/* 129 */     this.validate = options.validate;
/* 130 */     this.refresh = options.refresh;
/* 131 */     this.useCacheOnly = options.useCacheOnly;
/* 132 */     this.transitive = options.transitive;
/* 133 */     this.download = options.download;
/* 134 */     this.outputReport = options.outputReport;
/* 135 */     this.resolveMode = options.resolveMode;
/* 136 */     this.artifactFilter = options.artifactFilter;
/* 137 */     this.resolveId = options.resolveId;
/* 138 */     this.checkIfChanged = options.checkIfChanged;
/*     */   }
/*     */ 
/*     */   
/* 142 */   public Filter getArtifactFilter() { return this.artifactFilter; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setArtifactFilter(Filter artifactFilter) {
/* 146 */     this.artifactFilter = artifactFilter;
/* 147 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public String getResolveMode() { return this.resolveMode; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setResolveMode(String resolveMode) {
/* 161 */     this.resolveMode = resolveMode;
/* 162 */     return this;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean useSpecialConfs() {
/* 174 */     for (int i = 0; this.confs != null && i < this.confs.length; i++) {
/* 175 */       if (this.confs[0].startsWith(""*"")) {
/* 176 */         return true;
/*     */       }
/*     */     } 
/* 179 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getConfs() {
/* 188 */     if (useSpecialConfs()) {
/* 189 */       throw new AssertionError(""ResolveOptions.getConfs() can not be used for options used special confs."");
/*     */     }
/*     */     
/* 192 */     return this.confs;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public String[] getConfs(ModuleDescriptor md) { return ConfigurationUtils.replaceWildcards(this.confs, md); }
/*     */ 
/*     */   
/*     */   public ResolveOptions setConfs(String[] confs) {
/* 205 */     this.confs = confs;
/* 206 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 210 */   public Date getDate() { return this.date; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setDate(Date date) {
/* 214 */     this.date = date;
/* 215 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 219 */   public boolean isDownload() { return this.download; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setDownload(boolean download) {
/* 223 */     this.download = download;
/* 224 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 228 */   public boolean isOutputReport() { return this.outputReport; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setOutputReport(boolean outputReport) {
/* 232 */     this.outputReport = outputReport;
/* 233 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 237 */   public boolean isTransitive() { return this.transitive; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setTransitive(boolean transitive) {
/* 241 */     this.transitive = transitive;
/* 242 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 246 */   public boolean isUseCacheOnly() { return this.useCacheOnly; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setUseCacheOnly(boolean useCacheOnly) {
/* 250 */     this.useCacheOnly = useCacheOnly;
/* 251 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 255 */   public boolean isValidate() { return this.validate; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setValidate(boolean validate) {
/* 259 */     this.validate = validate;
/* 260 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 264 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setRevision(String revision) {
/* 268 */     this.revision = revision;
/* 269 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 273 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setResolveId(String resolveId) {
/* 277 */     this.resolveId = resolveId;
/* 278 */     return this;
/*     */   }
/*     */   
/*     */   public ResolveOptions setRefresh(boolean refresh) {
/* 282 */     this.refresh = refresh;
/* 283 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 287 */   public boolean isRefresh() { return this.refresh; }
/*     */ 
/*     */   
/*     */   public ResolveOptions setCheckIfChanged(boolean checkIfChanged) {
/* 291 */     this.checkIfChanged = checkIfChanged;
/* 292 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 296 */   public boolean getCheckIfChanged() { return this.checkIfChanged; }
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getDefaultResolveId(ModuleDescriptor md) {
/* 301 */     ModuleId module = md.getModuleRevisionId().getModuleId();
/* 302 */     return getDefaultResolveId(module);
/*     */   }
/*     */ 
/*     */   
/* 306 */   public static String getDefaultResolveId(ModuleId moduleId) { return moduleId.getOrganisation() + ""-"" + moduleId.getName(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolveOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.ResolveProcessException,"/*    */ package org.apache.ivy.core.resolve;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ResolveProcessException
/*    */   extends RuntimeException
/*    */ {
/*    */   public ResolveProcessException() {}
/*    */   
/* 36 */   public ResolveProcessException(String message, Throwable cause) { super(message, cause); }
/*    */ 
/*    */ 
/*    */   
/* 40 */   public ResolveProcessException(String message) { super(message); }
/*    */ 
/*    */ 
/*    */   
/* 44 */   public ResolveProcessException(Throwable cause) { super(cause); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\ResolveProcessException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.RestartResolveProcess,"/*    */ package org.apache.ivy.core.resolve;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RestartResolveProcess
/*    */   extends ResolveProcessException
/*    */ {
/* 31 */   public RestartResolveProcess(String message) { super(message); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\RestartResolveProcess.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.VisitData,"/*    */ package org.apache.ivy.core.resolve;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.HashMap;
/*    */ import java.util.List;
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class VisitData
/*    */ {
/*    */   private IvyNode node;
/* 41 */   private Map visitNodes = new HashMap();
/*    */ 
/*    */   
/* 44 */   public VisitData(IvyNode node) { this.node = node; }
/*    */ 
/*    */   
/*    */   public void addVisitNode(VisitNode node) {
/* 48 */     String rootModuleConf = node.getRootModuleConf();
/* 49 */     getVisitNodes(rootModuleConf).add(node);
/*    */   }
/*    */   
/*    */   public List getVisitNodes(String rootModuleConf) {
/* 53 */     List visits = (List)this.visitNodes.get(rootModuleConf);
/* 54 */     if (visits == null) {
/* 55 */       visits = new ArrayList();
/* 56 */       this.visitNodes.put(rootModuleConf, visits);
/*    */     } 
/* 58 */     return visits;
/*    */   }
/*    */ 
/*    */   
/* 62 */   public IvyNode getNode() { return this.node; }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public void setNode(IvyNode node) { this.node = node; }
/*    */ 
/*    */ 
/*    */   
/* 70 */   public void addVisitNodes(String rootModuleConf, List visitNodes) { getVisitNodes(rootModuleConf).addAll(visitNodes); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\VisitData.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.resolve.VisitNode,"/*     */ package org.apache.ivy.core.resolve;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.util.Checks;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class VisitNode
/*     */ {
/*     */   private IvyNode node;
/*  62 */   private VisitNode parent = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private VisitNode root = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   private Collection path = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   private String parentConf = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String requestedConf;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String rootModuleConf;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ResolveData data;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Boolean isCircular;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private IvyNodeUsage usage;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public VisitNode(ResolveData data, IvyNode node, VisitNode parent, String rootModuleConf, String parentConf) { this(data, node, parent, rootModuleConf, parentConf, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public VisitNode(ResolveData data, IvyNode node, VisitNode parent, String rootModuleConf, String parentConf, IvyNodeUsage usage) {
/* 117 */     Checks.checkNotNull(data, ""data"");
/* 118 */     Checks.checkNotNull(node, ""node"");
/* 119 */     Checks.checkNotNull(rootModuleConf, ""rootModuleConf"");
/*     */     
/* 121 */     this.data = data;
/* 122 */     this.node = node;
/* 123 */     this.parent = parent;
/* 124 */     this.rootModuleConf = rootModuleConf;
/* 125 */     this.parentConf = parentConf;
/* 126 */     this.usage = usage;
/*     */     
/* 128 */     this.data.register(this);
/*     */   }
/*     */ 
/*     */   
/* 132 */   public IvyNode getNode() { return this.node; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getRequestedConf() { return this.requestedConf; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setRequestedConf(String requestedConf) { this.requestedConf = requestedConf; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public VisitNode getParent() { return this.parent; }
/*     */ 
/*     */   
/*     */   public VisitNode getRoot() {
/* 151 */     if (this.root == null) {
/* 152 */       this.root = computeRoot();
/*     */     }
/* 154 */     return this.root;
/*     */   }
/*     */   
/*     */   public Collection getPath() {
/* 158 */     if (this.path == null) {
/* 159 */       this.path = computePath();
/*     */     }
/* 161 */     return this.path;
/*     */   }
/*     */   
/*     */   private Collection computePath() {
/* 165 */     if (this.parent != null) {
/* 166 */       Collection p = new LinkedHashSet(this.parent.getPath());
/* 167 */       p.add(this);
/* 168 */       return p;
/*     */     } 
/* 170 */     return Collections.singletonList(this);
/*     */   }
/*     */ 
/*     */   
/*     */   private VisitNode computeRoot() {
/* 175 */     if (this.node.isRoot())
/* 176 */       return this; 
/* 177 */     if (this.parent != null) {
/* 178 */       return this.parent.getRoot();
/*     */     }
/* 180 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 185 */   public String getParentConf() { return this.parentConf; }
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setParentConf(String parentConf) { this.parentConf = parentConf; }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public String getRootModuleConf() { return this.rootModuleConf; }
/*     */ 
/*     */   
/*     */   public static VisitNode getRoot(VisitNode parent) {
/* 197 */     VisitNode root = parent;
/* 198 */     Collection path = new HashSet();
/* 199 */     path.add(root);
/* 200 */     while (root.getParent() != null && !root.getNode().isRoot()) {
/* 201 */       if (path.contains(root.getParent())) {
/* 202 */         return root;
/*     */       }
/* 204 */       root = root.getParent();
/* 205 */       path.add(root);
/*     */     } 
/* 207 */     return root;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public boolean isTransitive() { return (this.data.isTransitive() && this.node.getDependencyDescriptor(getParentNode()).isTransitive() && isParentConfTransitive()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isParentConfTransitive() {
/* 230 */     String conf = getParent().getRequestedConf();
/* 231 */     if (conf == null) {
/* 232 */       return true;
/*     */     }
/* 234 */     Configuration parentConf = getParentNode().getConfiguration(conf);
/* 235 */     return parentConf.isTransitive();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public IvyNode getRealNode() {
/* 249 */     IvyNode node = this.node.getRealNode();
/* 250 */     if (node != null) {
/* 251 */       return node;
/*     */     }
/* 253 */     return this.node;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void useRealNode() {
/* 262 */     if (this.parent != null) {
/* 263 */       IvyNode node = this.data.getNode(this.node.getId());
/* 264 */       if (node != null && node != this.node) {
/* 265 */         this.node = node;
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean loadData(String conf, boolean shouldBePublic) {
/* 271 */     boolean loaded = this.node.loadData(this.rootModuleConf, getParentNode(), this.parentConf, conf, shouldBePublic, getUsage());
/*     */     
/* 273 */     if (loaded) {
/* 274 */       useRealNode();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 282 */       if (this.data.getNode(this.node.getResolvedId()) == null || !this.data.getNode(this.node.getResolvedId()).getId().equals(this.node.getResolvedId()))
/*     */       {
/* 284 */         this.data.register(this.node.getResolvedId(), this);
/*     */       }
/*     */     } 
/*     */     
/* 288 */     return loaded;
/*     */   }
/*     */   
/*     */   public Collection getDependencies(String conf) {
/* 292 */     Collection deps = this.node.getDependencies(this.rootModuleConf, conf, this.requestedConf);
/* 293 */     Collection ret = new ArrayList(deps.size());
/* 294 */     for (Iterator iter = deps.iterator(); iter.hasNext(); ) {
/* 295 */       IvyNode depNode = iter.next();
/* 296 */       ret.add(traverseChild(conf, depNode));
/*     */     } 
/* 298 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   VisitNode gotoNode(IvyNode node) {
/* 310 */     if (!getModuleId().equals(node.getModuleId())) {
/* 311 */       throw new IllegalArgumentException(""You can't use gotoNode for a node which does not represent the same Module as the one represented by this node.\nCurrent node module id="" + getModuleId() + "" Given node module id="" + node.getModuleId());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 316 */     VisitData visitData = this.data.getVisitData(node.getId());
/* 317 */     if (visitData != null) {
/* 318 */       List visitNodes = visitData.getVisitNodes(this.rootModuleConf);
/* 319 */       for (Iterator iter = visitNodes.iterator(); iter.hasNext(); ) {
/* 320 */         VisitNode vnode = iter.next();
/* 321 */         if ((this.parent == null && vnode.getParent() == null) || (this.parent != null && this.parent.getId().equals(vnode.getParent().getId()))) {
/*     */           
/* 323 */           vnode.parentConf = this.parentConf;
/* 324 */           vnode.usage = getUsage();
/* 325 */           return vnode;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 330 */     return traverse(this.parent, this.parentConf, node, getUsage());
/*     */   }
/*     */ 
/*     */   
/* 334 */   private IvyNodeUsage getUsage() { return (this.usage == null) ? this.node.getMainUsage() : this.usage; }
/*     */ 
/*     */   
/*     */   private VisitNode traverseChild(String parentConf, IvyNode child) {
/* 338 */     VisitNode parent = this;
/* 339 */     return traverse(parent, parentConf, child, null);
/*     */   }
/*     */ 
/*     */   
/*     */   private VisitNode traverse(VisitNode parent, String parentConf, IvyNode node, IvyNodeUsage usage) {
/* 344 */     if (getPath().contains(node)) {
/* 345 */       IvyContext.getContext().getCircularDependencyStrategy().handleCircularDependency(toMrids(getPath(), node.getId()));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 351 */     return new VisitNode(this.data, node, parent, this.rootModuleConf, parentConf, usage);
/*     */   }
/*     */   
/*     */   private ModuleRevisionId[] toMrids(Collection path, ModuleRevisionId last) {
/* 355 */     ModuleRevisionId[] ret = new ModuleRevisionId[path.size() + 1];
/* 356 */     int i = 0;
/* 357 */     for (Iterator iter = path.iterator(); iter.hasNext(); i++) {
/* 358 */       VisitNode node = iter.next();
/* 359 */       ret[i] = node.getNode().getId();
/*     */     } 
/* 361 */     ret[ret.length - 1] = last;
/* 362 */     return ret;
/*     */   }
/*     */ 
/*     */   
/* 366 */   public ModuleRevisionId getResolvedId() { return this.node.getResolvedId(); }
/*     */ 
/*     */ 
/*     */   
/* 370 */   public void updateConfsToFetch(Collection confs) { this.node.updateConfsToFetch(confs); }
/*     */ 
/*     */ 
/*     */   
/* 374 */   public ModuleRevisionId getId() { return this.node.getId(); }
/*     */ 
/*     */ 
/*     */   
/* 378 */   public boolean isEvicted() { return this.node.isEvicted(this.rootModuleConf); }
/*     */ 
/*     */ 
/*     */   
/* 382 */   public String[] getRealConfs(String conf) { return this.node.getRealConfs(conf); }
/*     */ 
/*     */ 
/*     */   
/* 386 */   public boolean hasProblem() { return this.node.hasProblem(); }
/*     */ 
/*     */ 
/*     */   
/* 390 */   public Configuration getConfiguration(String conf) { return this.node.getConfiguration(conf); }
/*     */ 
/*     */ 
/*     */   
/* 394 */   public IvyNodeEviction.EvictionData getEvictedData() { return this.node.getEvictedData(this.rootModuleConf); }
/*     */ 
/*     */ 
/*     */   
/* 398 */   public DependencyDescriptor getDependencyDescriptor() { return this.node.getDependencyDescriptor(getParentNode()); }
/*     */ 
/*     */ 
/*     */   
/* 402 */   private IvyNode getParentNode() { return (this.parent == null) ? null : this.parent.getNode(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isCircular() {
/* 411 */     if (this.isCircular == null) {
/* 412 */       if (this.parent != null) {
/* 413 */         this.isCircular = Boolean.FALSE;
/*     */         
/* 415 */         for (Iterator iter = this.parent.getPath().iterator(); iter.hasNext(); ) {
/* 416 */           VisitNode ancestor = iter.next();
/* 417 */           if (getId().getModuleId().equals(ancestor.getId().getModuleId())) {
/* 418 */             this.isCircular = Boolean.TRUE;
/*     */             break;
/*     */           } 
/*     */         } 
/*     */       } else {
/* 423 */         this.isCircular = Boolean.FALSE;
/*     */       } 
/*     */     }
/* 426 */     return this.isCircular.booleanValue();
/*     */   }
/*     */ 
/*     */   
/* 430 */   public String[] getConfsToFetch() { return this.node.getConfsToFetch(); }
/*     */ 
/*     */ 
/*     */   
/* 434 */   public String[] getRequiredConfigurations(VisitNode in, String inConf) { return this.node.getRequiredConfigurations(in.getNode(), inConf); }
/*     */ 
/*     */ 
/*     */   
/* 438 */   public ModuleId getModuleId() { return this.node.getModuleId(); }
/*     */ 
/*     */ 
/*     */   
/* 442 */   public Collection getResolvedRevisions(ModuleId mid) { return this.node.getResolvedRevisions(mid, this.rootModuleConf); }
/*     */ 
/*     */ 
/*     */   
/* 446 */   public void markEvicted(IvyNodeEviction.EvictionData evictionData) { this.node.markEvicted(evictionData); }
/*     */ 
/*     */ 
/*     */   
/* 450 */   public String[] getRequiredConfigurations() { return this.node.getRequiredConfigurations(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 465 */   public void markEvicted(VisitNode parent, ConflictManager conflictMgr, Collection selected) { this.node.markEvicted(this.rootModuleConf, parent.getNode(), conflictMgr, selected); }
/*     */ 
/*     */ 
/*     */   
/* 469 */   public ModuleDescriptor getDescriptor() { return this.node.getDescriptor(); }
/*     */ 
/*     */ 
/*     */   
/* 473 */   public IvyNodeEviction.EvictionData getEvictionDataInRoot(String rootModuleConf, VisitNode ancestor) { return this.node.getEvictionDataInRoot(rootModuleConf, ancestor.getNode()); }
/*     */ 
/*     */ 
/*     */   
/* 477 */   public Collection getEvictedRevisions(ModuleId moduleId) { return this.node.getEvictedRevisions(moduleId, this.rootModuleConf); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 492 */   public String toString() { return this.node.toString(); }
/*     */ 
/*     */ 
/*     */   
/* 496 */   public boolean isConfRequiredByMergedUsageOnly(String conf) { return this.node.isConfRequiredByMergedUsageOnly(this.rootModuleConf, conf); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\resolve\VisitNode.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.retrieve.RetrieveEngine,"/*     */ package org.apache.ivy.core.retrieve;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Comparator;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.event.retrieve.EndRetrieveEvent;
/*     */ import org.apache.ivy.core.event.retrieve.StartRetrieveEvent;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ArtifactRevisionId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*     */ import org.apache.ivy.plugins.report.XmlReportParser;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.url.URLResource;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RetrieveEngine
/*     */ {
/*     */   private static final int KILO = 1024;
/*     */   private RetrieveEngineSettings settings;
/*     */   private EventManager eventManager;
/*     */   
/*     */   public RetrieveEngine(RetrieveEngineSettings settings, EventManager eventManager) {
/*  64 */     this.settings = settings;
/*  65 */     this.eventManager = eventManager;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int retrieve(ModuleRevisionId mrid, String destFilePattern, RetrieveOptions options) throws IOException {
/*  77 */     ModuleId moduleId = mrid.getModuleId();
/*  78 */     if (""default"".equals(options.getLog())) {
/*  79 */       Message.info("":: retrieving :: "" + moduleId + (options.isSync() ? "" [sync]"" : """"));
/*     */     } else {
/*  81 */       Message.verbose("":: retrieving :: "" + moduleId + (options.isSync() ? "" [sync]"" : """"));
/*     */     } 
/*  83 */     Message.verbose(""\tcheckUpToDate="" + this.settings.isCheckUpToDate());
/*  84 */     long start = System.currentTimeMillis();
/*     */     
/*  86 */     destFilePattern = IvyPatternHelper.substituteVariables(destFilePattern, this.settings.getVariables());
/*     */     
/*  88 */     String destIvyPattern = IvyPatternHelper.substituteVariables(options.getDestIvyPattern(), this.settings.getVariables());
/*     */ 
/*     */     
/*  91 */     String[] confs = getConfs(mrid, options);
/*  92 */     if (""default"".equals(options.getLog())) {
/*  93 */       Message.info(""\tconfs: "" + Arrays.asList(confs));
/*     */     } else {
/*  95 */       Message.verbose(""\tconfs: "" + Arrays.asList(confs));
/*     */     } 
/*  97 */     if (this.eventManager != null) {
/*  98 */       this.eventManager.fireIvyEvent((IvyEvent)new StartRetrieveEvent(mrid, confs, options));
/*     */     }
/*     */     
/*     */     try {
/* 102 */       Map artifactsToCopy = determineArtifactsToCopy(mrid, destFilePattern, options);
/* 103 */       File fileRetrieveRoot = this.settings.resolveFile(IvyPatternHelper.getTokenRoot(destFilePattern));
/*     */       
/* 105 */       File ivyRetrieveRoot = (destIvyPattern == null) ? null : this.settings.resolveFile(IvyPatternHelper.getTokenRoot(destIvyPattern));
/*     */       
/* 107 */       Collection targetArtifactsStructure = new HashSet();
/*     */ 
/*     */ 
/*     */       
/* 111 */       Collection targetIvysStructure = new HashSet();
/*     */ 
/*     */       
/* 114 */       int targetsCopied = 0;
/* 115 */       int targetsUpToDate = 0;
/* 116 */       long totalCopiedSize = 0L;
/* 117 */       for (Iterator iter = artifactsToCopy.keySet().iterator(); iter.hasNext(); ) {
/* 118 */         ArtifactDownloadReport artifact = iter.next();
/* 119 */         File archive = artifact.getLocalFile();
/* 120 */         if (archive == null) {
/* 121 */           Message.verbose(""\tno local file available for "" + artifact + "": skipping"");
/*     */           continue;
/*     */         } 
/* 124 */         Set dest = (Set)artifactsToCopy.get(artifact);
/* 125 */         Message.verbose(""\tretrieving "" + archive);
/* 126 */         for (Iterator it2 = dest.iterator(); it2.hasNext(); ) {
/* 127 */           IvyContext.getContext().checkInterrupted();
/* 128 */           File destFile = this.settings.resolveFile(it2.next());
/* 129 */           if (!this.settings.isCheckUpToDate() || !upToDate(archive, destFile)) {
/* 130 */             Message.verbose(""\t\tto "" + destFile);
/* 131 */             if (options.isMakeSymlinks()) {
/* 132 */               FileUtil.symlink(archive, destFile, null, true);
/*     */             } else {
/* 134 */               FileUtil.copy(archive, destFile, null, true);
/*     */             } 
/* 136 */             totalCopiedSize += destFile.length();
/* 137 */             targetsCopied++;
/*     */           } else {
/* 139 */             Message.verbose(""\t\tto "" + destFile + "" [NOT REQUIRED]"");
/* 140 */             targetsUpToDate++;
/*     */           } 
/* 142 */           if (""ivy"".equals(artifact.getType())) {
/* 143 */             targetIvysStructure.addAll(FileUtil.getPathFiles(ivyRetrieveRoot, destFile));
/*     */             continue;
/*     */           } 
/* 146 */           targetArtifactsStructure.addAll(FileUtil.getPathFiles(fileRetrieveRoot, destFile));
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 152 */       if (options.isSync()) {
/* 153 */         Message.verbose(""\tsyncing..."");
/*     */         
/* 155 */         String[] ignorableFilenames = this.settings.getIgnorableFilenames();
/* 156 */         Collection ignoreList = Arrays.asList(ignorableFilenames);
/*     */         
/* 158 */         Collection existingArtifacts = FileUtil.listAll(fileRetrieveRoot, ignoreList);
/* 159 */         Collection existingIvys = (ivyRetrieveRoot == null) ? null : FileUtil.listAll(ivyRetrieveRoot, ignoreList);
/*     */ 
/*     */         
/* 162 */         if (fileRetrieveRoot.equals(ivyRetrieveRoot)) {
/* 163 */           Collection target = targetArtifactsStructure;
/* 164 */           target.addAll(targetIvysStructure);
/* 165 */           Collection existing = existingArtifacts;
/* 166 */           existing.addAll(existingIvys);
/* 167 */           sync(target, existing);
/*     */         } else {
/* 169 */           sync(targetArtifactsStructure, existingArtifacts);
/* 170 */           if (existingIvys != null) {
/* 171 */             sync(targetIvysStructure, existingIvys);
/*     */           }
/*     */         } 
/*     */       } 
/* 175 */       long elapsedTime = System.currentTimeMillis() - start;
/* 176 */       String msg = ""\t"" + targetsCopied + "" artifacts copied"" + (this.settings.isCheckUpToDate() ? ("", "" + targetsUpToDate + "" already retrieved"") : """") + "" ("" + (totalCopiedSize / 1024L) + ""kB/"" + elapsedTime + ""ms)"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 182 */       if (""default"".equals(options.getLog())) {
/* 183 */         Message.info(msg);
/*     */       } else {
/* 185 */         Message.verbose(msg);
/*     */       } 
/* 187 */       Message.verbose(""\tretrieve done ("" + elapsedTime + ""ms)"");
/* 188 */       if (this.eventManager != null) {
/* 189 */         this.eventManager.fireIvyEvent((IvyEvent)new EndRetrieveEvent(mrid, confs, elapsedTime, targetsCopied, targetsUpToDate, totalCopiedSize, options));
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 194 */       return targetsCopied;
/* 195 */     } catch (Exception ex) {
/* 196 */       throw new RuntimeException(""problem during retrieve of "" + moduleId + "": "" + ex, ex);
/*     */     } 
/*     */   }
/*     */   
/*     */   private String[] getConfs(ModuleRevisionId mrid, RetrieveOptions options) throws IOException {
/* 201 */     String[] confs = options.getConfs();
/* 202 */     if (confs == null || (confs.length == 1 && ""*"".equals(confs[0]))) {
/*     */       try {
/* 204 */         File ivyFile = getCache().getResolvedIvyFileInCache(mrid);
/* 205 */         Message.verbose(""no explicit confs given for retrieve, using ivy file: "" + ivyFile);
/* 206 */         URL ivySource = ivyFile.toURI().toURL();
/* 207 */         URLResource res = new URLResource(ivySource);
/* 208 */         ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser((Resource)res);
/*     */         
/* 210 */         Message.debug(""using "" + parser + "" to parse "" + ivyFile);
/* 211 */         ModuleDescriptor md = parser.parseDescriptor(this.settings, ivySource, false);
/* 212 */         confs = md.getConfigurationsNames();
/* 213 */         options.setConfs(confs);
/* 214 */       } catch (IOException e) {
/* 215 */         throw e;
/* 216 */       } catch (Exception e) {
/* 217 */         IOException ioex = new IOException(e.getMessage());
/* 218 */         ioex.initCause(e);
/* 219 */         throw ioex;
/*     */       } 
/*     */     }
/* 222 */     return confs;
/*     */   }
/*     */ 
/*     */   
/* 226 */   private ResolutionCacheManager getCache() { return this.settings.getResolutionCacheManager(); }
/*     */ 
/*     */   
/*     */   private void sync(Collection target, Collection existing) {
/* 230 */     Collection toRemove = new HashSet();
/* 231 */     for (Iterator iter = existing.iterator(); iter.hasNext(); ) {
/* 232 */       File file = iter.next();
/* 233 */       toRemove.add(file.getAbsoluteFile());
/*     */     } 
/* 235 */     for (Iterator iter = target.iterator(); iter.hasNext(); ) {
/* 236 */       File file = iter.next();
/* 237 */       toRemove.remove(file.getAbsoluteFile());
/*     */     } 
/* 239 */     for (Iterator iter = toRemove.iterator(); iter.hasNext(); ) {
/* 240 */       File file = iter.next();
/* 241 */       if (file.exists()) {
/* 242 */         Message.verbose(""\t\tdeleting "" + file);
/* 243 */         FileUtil.forceDelete(file);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public Map determineArtifactsToCopy(ModuleRevisionId mrid, String destFilePattern, RetrieveOptions options) throws ParseException, IOException {
/* 250 */     ModuleId moduleId = mrid.getModuleId();
/*     */     
/* 252 */     if (options.getResolveId() == null) {
/* 253 */       options.setResolveId(ResolveOptions.getDefaultResolveId(moduleId));
/*     */     }
/*     */     
/* 256 */     ResolutionCacheManager cacheManager = getCache();
/* 257 */     String[] confs = getConfs(mrid, options);
/* 258 */     String destIvyPattern = IvyPatternHelper.substituteVariables(options.getDestIvyPattern(), this.settings.getVariables());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 264 */     Map artifactsToCopy = new HashMap();
/*     */     
/* 266 */     Map conflictsMap = new HashMap();
/*     */     
/* 268 */     Map conflictsReportsMap = new HashMap();
/*     */     
/* 270 */     Map conflictsConfMap = new HashMap();
/*     */     
/* 272 */     XmlReportParser parser = new XmlReportParser();
/* 273 */     for (int i = 0; i < confs.length; i++) {
/* 274 */       String conf = confs[i];
/*     */       
/* 276 */       File report = cacheManager.getConfigurationResolveReportInCache(options.getResolveId(), conf);
/*     */       
/* 278 */       parser.parse(report);
/*     */       
/* 280 */       Collection artifacts = new ArrayList(Arrays.asList((Object[])parser.getArtifactReports()));
/* 281 */       if (destIvyPattern != null) {
/* 282 */         ModuleRevisionId[] mrids = parser.getRealDependencyRevisionIds();
/* 283 */         for (int j = 0; j < mrids.length; j++) {
/* 284 */           artifacts.add(parser.getMetadataArtifactReport(mrids[j]));
/*     */         }
/*     */       } 
/* 287 */       for (Iterator iter = artifacts.iterator(); iter.hasNext(); ) {
/* 288 */         ArtifactDownloadReport artifact = (ArtifactDownloadReport)iter.next();
/* 289 */         String destPattern = ""ivy"".equals(artifact.getType()) ? destIvyPattern : destFilePattern;
/*     */ 
/*     */         
/* 292 */         if (!""ivy"".equals(artifact.getType()) && !options.getArtifactFilter().accept(artifact.getArtifact())) {
/*     */           continue;
/*     */         }
/*     */ 
/*     */         
/* 297 */         String destFileName = IvyPatternHelper.substitute(destPattern, artifact.getArtifact(), conf);
/*     */ 
/*     */         
/* 300 */         Set dest = (Set)artifactsToCopy.get(artifact);
/* 301 */         if (dest == null) {
/* 302 */           dest = new HashSet();
/* 303 */           artifactsToCopy.put(artifact, dest);
/*     */         } 
/* 305 */         String copyDest = this.settings.resolveFile(destFileName).getAbsolutePath();
/* 306 */         dest.add(copyDest);
/*     */         
/* 308 */         Set conflicts = (Set)conflictsMap.get(copyDest);
/* 309 */         Set conflictsReports = (Set)conflictsReportsMap.get(copyDest);
/* 310 */         Set conflictsConf = (Set)conflictsConfMap.get(copyDest);
/* 311 */         if (conflicts == null) {
/* 312 */           conflicts = new HashSet();
/* 313 */           conflictsMap.put(copyDest, conflicts);
/*     */         } 
/* 315 */         if (conflictsReports == null) {
/* 316 */           conflictsReports = new HashSet();
/* 317 */           conflictsReportsMap.put(copyDest, conflictsReports);
/*     */         } 
/* 319 */         if (conflictsConf == null) {
/* 320 */           conflictsConf = new HashSet();
/* 321 */           conflictsConfMap.put(copyDest, conflictsConf);
/*     */         } 
/* 323 */         if (conflicts.add(artifact.getArtifact().getId())) {
/* 324 */           conflictsReports.add(artifact);
/* 325 */           conflictsConf.add(conf);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 331 */     for (Iterator iter = conflictsMap.keySet().iterator(); iter.hasNext(); ) {
/* 332 */       String copyDest = iter.next();
/* 333 */       Set artifacts = (Set)conflictsMap.get(copyDest);
/* 334 */       Set conflictsConfs = (Set)conflictsConfMap.get(copyDest);
/* 335 */       if (artifacts.size() > 1) {
/* 336 */         List artifactsList = new ArrayList((Collection)conflictsReportsMap.get(copyDest));
/*     */ 
/*     */ 
/*     */         
/* 340 */         Collections.sort(artifactsList, getConflictResolvingPolicy());
/*     */         
/* 342 */         Message.info(""\tconflict on "" + copyDest + "" in "" + conflictsConfs + "": "" + ((ArtifactDownloadReport)artifactsList.get(artifactsList.size() - 1)).getArtifact().getModuleRevisionId().getRevision() + "" won"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 352 */         for (int i = artifactsList.size() - 2; i >= 0; i--) {
/* 353 */           ArtifactDownloadReport looser = (ArtifactDownloadReport)artifactsList.get(i);
/* 354 */           Message.verbose(""\t\tremoving conflict looser artifact: "" + looser.getArtifact());
/*     */ 
/*     */ 
/*     */           
/* 358 */           Set dest = (Set)artifactsToCopy.get(looser);
/* 359 */           dest.remove(copyDest);
/* 360 */           if (dest.isEmpty()) {
/* 361 */             artifactsToCopy.remove(looser);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/* 366 */     return artifactsToCopy;
/*     */   }
/*     */   
/*     */   private boolean upToDate(File source, File target) {
/* 370 */     if (!target.exists()) {
/* 371 */       return false;
/*     */     }
/* 373 */     return (source.lastModified() <= target.lastModified());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Comparator getConflictResolvingPolicy() {
/* 383 */     return new Comparator()
/*     */       {
/*     */         public int compare(Object o1, Object o2) {
/* 386 */           Artifact a1 = ((ArtifactDownloadReport)o1).getArtifact();
/* 387 */           Artifact a2 = ((ArtifactDownloadReport)o2).getArtifact();
/* 388 */           if (a1.getPublicationDate().after(a2.getPublicationDate()))
/*     */           {
/* 390 */             return 1; } 
/* 391 */           if (a1.getPublicationDate().before(a2.getPublicationDate()))
/*     */           {
/* 393 */             return -1;
/*     */           }
/* 395 */           return 0;
/*     */         }
/*     */         
/*     */         private final RetrieveEngine this$0;
/*     */       };
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\retrieve\RetrieveEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.retrieve.RetrieveEngineSettings,"package org.apache.ivy.core.retrieve;
import org.apache.ivy.core.settings.IvyVariableContainer;
import org.apache.ivy.plugins.parser.ParserSettings;
public interface RetrieveEngineSettings extends ParserSettings {
  boolean isCheckUpToDate();
  IvyVariableContainer getVariables();
  String[] getIgnorableFilenames();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\retrieve\RetrieveEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.retrieve.RetrieveOptions,"/*     */ package org.apache.ivy.core.retrieve;
/*     */ 
/*     */ import org.apache.ivy.core.LogOptions;
/*     */ import org.apache.ivy.util.filter.Filter;
/*     */ import org.apache.ivy.util.filter.FilterHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RetrieveOptions
/*     */   extends LogOptions
/*     */ {
/*  34 */   private String[] confs = new String[] { ""*"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  40 */   private String destIvyPattern = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  45 */   private Filter artifactFilter = FilterHelper.NO_FILTER;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean sync = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean useOrigin = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean makeSymlinks = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String resolveId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  71 */   public Filter getArtifactFilter() { return this.artifactFilter; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setArtifactFilter(Filter artifactFilter) {
/*  75 */     this.artifactFilter = artifactFilter;
/*  76 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  80 */   public String[] getConfs() { return this.confs; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setConfs(String[] confs) {
/*  84 */     this.confs = confs;
/*  85 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  89 */   public String getDestIvyPattern() { return this.destIvyPattern; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setDestIvyPattern(String destIvyPattern) {
/*  93 */     this.destIvyPattern = destIvyPattern;
/*  94 */     return this;
/*     */   }
/*     */ 
/*     */   
/*  98 */   public boolean isMakeSymlinks() { return this.makeSymlinks; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setMakeSymlinks(boolean makeSymlinks) {
/* 102 */     this.makeSymlinks = makeSymlinks;
/* 103 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 107 */   public boolean isSync() { return this.sync; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setSync(boolean sync) {
/* 111 */     this.sync = sync;
/* 112 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 116 */   public boolean isUseOrigin() { return this.useOrigin; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setUseOrigin(boolean useOrigin) {
/* 120 */     this.useOrigin = useOrigin;
/* 121 */     return this;
/*     */   }
/*     */ 
/*     */   
/* 125 */   public String getResolveId() { return this.resolveId; }
/*     */ 
/*     */   
/*     */   public RetrieveOptions setResolveId(String resolveId) {
/* 129 */     this.resolveId = resolveId;
/* 130 */     return this;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\retrieve\RetrieveOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.search.ModuleEntry,"/*    */ package org.apache.ivy.core.search;
/*    */ 
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ModuleEntry
/*    */ {
/*    */   private OrganisationEntry organisationEntry;
/*    */   private String module;
/*    */   
/*    */   public ModuleEntry(OrganisationEntry org, String name) {
/* 28 */     this.organisationEntry = org;
/* 29 */     this.module = name;
/*    */   }
/*    */ 
/*    */   
/* 33 */   public String getOrganisation() { return this.organisationEntry.getOrganisation(); }
/*    */ 
/*    */ 
/*    */   
/* 37 */   public DependencyResolver getResolver() { return this.organisationEntry.getResolver(); }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public String getModule() { return this.module; }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public OrganisationEntry getOrganisationEntry() { return this.organisationEntry; }
/*    */ 
/*    */ 
/*    */   
/* 49 */   public String toString() { return this.organisationEntry + ""#"" + this.module; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\search\ModuleEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.search.OrganisationEntry,"/*    */ package org.apache.ivy.core.search;
/*    */ 
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OrganisationEntry
/*    */ {
/*    */   private DependencyResolver resolver;
/*    */   private String organisation;
/*    */   
/*    */   public OrganisationEntry(DependencyResolver resolver, String organisation) {
/* 28 */     this.resolver = resolver;
/* 29 */     this.organisation = organisation;
/*    */   }
/*    */ 
/*    */   
/* 33 */   public String getOrganisation() { return this.organisation; }
/*    */ 
/*    */ 
/*    */   
/* 37 */   public DependencyResolver getResolver() { return this.resolver; }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public String toString() { return this.organisation; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\search\OrganisationEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.search.RevisionEntry,"/*    */ package org.apache.ivy.core.search;
/*    */ 
/*    */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RevisionEntry
/*    */ {
/*    */   private ModuleEntry moduleEntry;
/*    */   private String revision;
/*    */   
/*    */   public RevisionEntry(ModuleEntry mod, String name) {
/* 28 */     this.moduleEntry = mod;
/* 29 */     this.revision = name;
/*    */   }
/*    */ 
/*    */   
/* 33 */   public ModuleEntry getModuleEntry() { return this.moduleEntry; }
/*    */ 
/*    */ 
/*    */   
/* 37 */   public String getRevision() { return this.revision; }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public String getModule() { return this.moduleEntry.getModule(); }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public String getOrganisation() { return this.moduleEntry.getOrganisation(); }
/*    */ 
/*    */ 
/*    */   
/* 49 */   public OrganisationEntry getOrganisationEntry() { return this.moduleEntry.getOrganisationEntry(); }
/*    */ 
/*    */ 
/*    */   
/* 53 */   public DependencyResolver getResolver() { return this.moduleEntry.getResolver(); }
/*    */ 
/*    */ 
/*    */   
/* 57 */   public String toString() { return this.moduleEntry + "";"" + this.revision; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\search\RevisionEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.search.SearchEngine,"/*     */ package org.apache.ivy.core.search;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.matcher.Matcher;
/*     */ import org.apache.ivy.plugins.matcher.MatcherHelper;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.namespace.NameSpaceHelper;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.resolver.AbstractResolver;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SearchEngine
/*     */ {
/*     */   private IvySettings settings;
/*     */   
/*  48 */   public SearchEngine(IvySettings settings) { this.settings = settings; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] listTokenValues(String token, Map otherTokenValues) {
/*  59 */     Set entries = new LinkedHashSet();
/*     */     
/*  61 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/*  62 */       DependencyResolver resolver = iter.next();
/*  63 */       Map[] values = resolver.listTokenValues(new String[] { token }, otherTokenValues);
/*  64 */       for (int i = 0; i < values.length; i++) {
/*  65 */         entries.add(values[i].get(token));
/*     */       }
/*     */     } 
/*     */     
/*  69 */     return (String[])entries.toArray((Object[])new String[entries.size()]);
/*     */   }
/*     */   
/*     */   public OrganisationEntry[] listOrganisationEntries() {
/*  73 */     Set entries = new HashSet();
/*     */     
/*  75 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/*  76 */       DependencyResolver resolver = iter.next();
/*  77 */       Map[] orgs = resolver.listTokenValues(new String[] { ""organisation"" }, new HashMap());
/*     */       
/*  79 */       for (int i = 0; i < orgs.length; i++) {
/*  80 */         String org = orgs[i].get(""organisation"");
/*  81 */         entries.add(new OrganisationEntry(resolver, org));
/*     */       } 
/*     */     } 
/*     */     
/*  85 */     return entries.toArray(new OrganisationEntry[entries.size()]);
/*     */   }
/*     */   
/*     */   public String[] listOrganisations() {
/*  89 */     Set entries = new HashSet();
/*     */     
/*  91 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/*  92 */       DependencyResolver resolver = iter.next();
/*  93 */       Map[] orgs = resolver.listTokenValues(new String[] { ""organisation"" }, new HashMap());
/*     */       
/*  95 */       for (int i = 0; i < orgs.length; i++) {
/*  96 */         entries.add(orgs[i].get(""organisation""));
/*     */       }
/*     */     } 
/*     */     
/* 100 */     return (String[])entries.toArray((Object[])new String[entries.size()]);
/*     */   }
/*     */   
/*     */   public ModuleEntry[] listModuleEntries(OrganisationEntry org) {
/* 104 */     Set entries = new HashSet();
/*     */     
/* 106 */     Map tokenValues = new HashMap();
/* 107 */     tokenValues.put(""organisation"", org.getOrganisation());
/*     */     
/* 109 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 110 */       DependencyResolver resolver = iter.next();
/* 111 */       Map[] modules = resolver.listTokenValues(new String[] { ""module"" }, tokenValues);
/*     */       
/* 113 */       for (int i = 0; i < modules.length; i++) {
/* 114 */         String module = modules[i].get(""module"");
/* 115 */         entries.add(new ModuleEntry(org, module));
/*     */       } 
/*     */     } 
/*     */     
/* 119 */     return entries.toArray(new ModuleEntry[entries.size()]);
/*     */   }
/*     */   
/*     */   public String[] listModules(String org) {
/* 123 */     Set entries = new HashSet();
/*     */     
/* 125 */     Map tokenValues = new HashMap();
/* 126 */     tokenValues.put(""organisation"", org);
/*     */     
/* 128 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 129 */       DependencyResolver resolver = iter.next();
/* 130 */       Map[] modules = resolver.listTokenValues(new String[] { ""module"" }, tokenValues);
/*     */       
/* 132 */       for (int i = 0; i < modules.length; i++) {
/* 133 */         entries.add(modules[i].get(""module""));
/*     */       }
/*     */     } 
/*     */     
/* 137 */     return (String[])entries.toArray((Object[])new String[entries.size()]);
/*     */   }
/*     */   
/*     */   public RevisionEntry[] listRevisionEntries(ModuleEntry module) {
/* 141 */     Set entries = new HashSet();
/*     */     
/* 143 */     Map tokenValues = new HashMap();
/* 144 */     tokenValues.put(""organisation"", module.getOrganisation());
/* 145 */     tokenValues.put(""module"", module.getModule());
/*     */     
/* 147 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 148 */       DependencyResolver resolver = iter.next();
/* 149 */       Map[] revisions = resolver.listTokenValues(new String[] { ""revision"" }, tokenValues);
/*     */       
/* 151 */       for (int i = 0; i < revisions.length; i++) {
/* 152 */         String revision = revisions[i].get(""revision"");
/* 153 */         entries.add(new RevisionEntry(module, revision));
/*     */       } 
/*     */     } 
/*     */     
/* 157 */     return entries.toArray(new RevisionEntry[entries.size()]);
/*     */   }
/*     */   
/*     */   public String[] listRevisions(String org, String module) {
/* 161 */     Set entries = new HashSet();
/*     */     
/* 163 */     Map tokenValues = new HashMap();
/* 164 */     tokenValues.put(""organisation"", org);
/* 165 */     tokenValues.put(""module"", module);
/*     */     
/* 167 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 168 */       DependencyResolver resolver = iter.next();
/* 169 */       Map[] revisions = resolver.listTokenValues(new String[] { ""revision"" }, tokenValues);
/*     */       
/* 171 */       for (int i = 0; i < revisions.length; i++) {
/* 172 */         entries.add(revisions[i].get(""revision""));
/*     */       }
/*     */     } 
/*     */     
/* 176 */     return (String[])entries.toArray((Object[])new String[entries.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleId[] listModules(ModuleId moduleCrit, PatternMatcher matcher) {
/* 191 */     List ret = new ArrayList();
/*     */     
/* 193 */     Map criteria = new HashMap();
/* 194 */     addMatcher(matcher, moduleCrit.getOrganisation(), criteria, ""organisation"");
/*     */     
/* 196 */     addMatcher(matcher, moduleCrit.getName(), criteria, ""module"");
/*     */     
/* 198 */     String[] tokensToList = { ""organisation"", ""module"" };
/*     */ 
/*     */     
/* 201 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 202 */       DependencyResolver resolver = iter.next();
/* 203 */       Map[] moduleIdAsMap = resolver.listTokenValues(tokensToList, criteria);
/* 204 */       for (int i = 0; i < moduleIdAsMap.length; i++) {
/* 205 */         String org = moduleIdAsMap[i].get(""organisation"");
/* 206 */         String name = moduleIdAsMap[i].get(""module"");
/* 207 */         ModuleId modId = ModuleId.newInstance(org, name);
/* 208 */         ret.add(NameSpaceHelper.transform(modId, resolver.getNamespace().getToSystemTransformer()));
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 213 */     return ret.toArray(new ModuleId[ret.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleRevisionId[] listModules(ModuleRevisionId moduleCrit, PatternMatcher matcher) {
/* 228 */     List ret = new ArrayList();
/*     */     
/* 230 */     Map criteria = new HashMap();
/* 231 */     addMatcher(matcher, moduleCrit.getOrganisation(), criteria, ""organisation"");
/*     */     
/* 233 */     addMatcher(matcher, moduleCrit.getName(), criteria, ""module"");
/* 234 */     addMatcher(matcher, moduleCrit.getBranch(), criteria, ""branch"");
/* 235 */     addMatcher(matcher, moduleCrit.getRevision(), criteria, ""revision"");
/*     */     
/* 237 */     String[] tokensToList = { ""organisation"", ""module"", ""branch"", ""revision"" };
/*     */ 
/*     */ 
/*     */     
/* 241 */     for (Iterator iter = this.settings.getResolvers().iterator(); iter.hasNext(); ) {
/* 242 */       DependencyResolver resolver = iter.next();
/* 243 */       Map[] moduleIdAsMap = resolver.listTokenValues(tokensToList, criteria);
/* 244 */       for (int i = 0; i < moduleIdAsMap.length; i++) {
/* 245 */         String org = moduleIdAsMap[i].get(""organisation"");
/* 246 */         String name = moduleIdAsMap[i].get(""module"");
/* 247 */         String branch = moduleIdAsMap[i].get(""branch"");
/* 248 */         String rev = moduleIdAsMap[i].get(""revision"");
/* 249 */         ModuleRevisionId modRevId = ModuleRevisionId.newInstance(org, name, branch, rev);
/* 250 */         ret.add(resolver.getNamespace().getToSystemTransformer().transform(modRevId));
/*     */       } 
/*     */     } 
/*     */     
/* 254 */     return ret.toArray(new ModuleRevisionId[ret.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleRevisionId[] listModules(DependencyResolver resolver, ModuleRevisionId moduleCrit, PatternMatcher matcher) {
/* 270 */     Map criteria = new HashMap();
/* 271 */     addMatcher(matcher, moduleCrit.getOrganisation(), criteria, ""organisation"");
/*     */     
/* 273 */     addMatcher(matcher, moduleCrit.getName(), criteria, ""module"");
/* 274 */     addMatcher(matcher, moduleCrit.getBranch(), criteria, ""branch"");
/* 275 */     addMatcher(matcher, moduleCrit.getRevision(), criteria, ""revision"");
/*     */     
/* 277 */     String[] tokensToList = { ""organisation"", ""module"", ""branch"", ""revision"" };
/*     */ 
/*     */ 
/*     */     
/* 281 */     Map[] moduleIdAsMap = resolver.listTokenValues(tokensToList, criteria);
/* 282 */     Set result = new LinkedHashSet();
/* 283 */     for (int i = 0; i < moduleIdAsMap.length; i++) {
/* 284 */       String org = moduleIdAsMap[i].get(""organisation"");
/* 285 */       String name = moduleIdAsMap[i].get(""module"");
/* 286 */       String branch = moduleIdAsMap[i].get(""branch"");
/* 287 */       String rev = moduleIdAsMap[i].get(""revision"");
/* 288 */       result.add(resolver.getNamespace().getToSystemTransformer().transform(ModuleRevisionId.newInstance(org, name, branch, rev)));
/*     */     } 
/*     */ 
/*     */     
/* 292 */     return result.toArray(new ModuleRevisionId[result.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   private void addMatcher(PatternMatcher patternMatcher, String expression, Map criteria, String key) {
/* 297 */     if (expression == null) {
/*     */       return;
/*     */     }
/*     */     
/* 301 */     Matcher matcher = patternMatcher.getMatcher(expression);
/* 302 */     if (matcher.isExact()) {
/* 303 */       criteria.put(key, expression);
/*     */     } else {
/* 305 */       criteria.put(key, matcher);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public Collection findModuleRevisionIds(DependencyResolver resolver, ModuleRevisionId pattern, PatternMatcher matcher) {
/* 311 */     Collection mrids = new ArrayList();
/* 312 */     String resolverName = resolver.getName();
/*     */     
/* 314 */     Message.verbose(""looking for modules matching "" + pattern + "" using "" + matcher.getName());
/* 315 */     Namespace fromNamespace = null;
/* 316 */     if (resolver instanceof AbstractResolver) {
/* 317 */       fromNamespace = ((AbstractResolver)resolver).getNamespace();
/*     */     }
/*     */     
/* 320 */     Collection modules = new ArrayList();
/*     */     
/* 322 */     OrganisationEntry[] orgs = resolver.listOrganisations();
/* 323 */     if (orgs == null || orgs.length == 0) {
/*     */ 
/*     */       
/* 326 */       String org = pattern.getOrganisation();
/* 327 */       if (fromNamespace != null) {
/* 328 */         org = NameSpaceHelper.transform(pattern.getModuleId(), fromNamespace.getFromSystemTransformer()).getOrganisation();
/*     */       }
/*     */       
/* 331 */       modules.addAll(Arrays.asList(resolver.listModules(new OrganisationEntry(resolver, org))));
/*     */     } else {
/*     */       
/* 334 */       Matcher orgMatcher = matcher.getMatcher(pattern.getOrganisation());
/* 335 */       for (int i = 0; i < orgs.length; i++) {
/* 336 */         String org = orgs[i].getOrganisation();
/* 337 */         String systemOrg = org;
/* 338 */         if (fromNamespace != null) {
/* 339 */           systemOrg = NameSpaceHelper.transformOrganisation(org, fromNamespace.getToSystemTransformer());
/*     */         }
/*     */         
/* 342 */         if (orgMatcher.matches(systemOrg)) {
/* 343 */           modules.addAll(Arrays.asList(resolver.listModules(new OrganisationEntry(resolver, org))));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 348 */     Message.debug(""found "" + modules.size() + "" modules for "" + pattern.getOrganisation() + "" on "" + resolverName);
/*     */     
/* 350 */     boolean foundModule = false;
/* 351 */     for (Iterator iter = modules.iterator(); iter.hasNext(); ) {
/* 352 */       ModuleEntry mEntry = iter.next();
/*     */       
/* 354 */       ModuleId foundMid = new ModuleId(mEntry.getOrganisation(), mEntry.getModule());
/* 355 */       ModuleId systemMid = foundMid;
/* 356 */       if (fromNamespace != null) {
/* 357 */         systemMid = NameSpaceHelper.transform(foundMid, fromNamespace.getToSystemTransformer());
/*     */       }
/*     */ 
/*     */       
/* 361 */       if (MatcherHelper.matches(matcher, pattern.getModuleId(), systemMid)) {
/*     */         
/* 363 */         foundModule = true;
/* 364 */         RevisionEntry[] rEntries = resolver.listRevisions(mEntry);
/* 365 */         Message.debug(""found "" + rEntries.length + "" revisions for ["" + mEntry.getOrganisation() + "", "" + mEntry.getModule() + ""] on "" + resolverName);
/*     */ 
/*     */ 
/*     */         
/* 369 */         boolean foundRevision = false;
/* 370 */         for (int j = 0; j < rEntries.length; j++) {
/* 371 */           RevisionEntry rEntry = rEntries[j];
/*     */           
/* 373 */           ModuleRevisionId foundMrid = ModuleRevisionId.newInstance(mEntry.getOrganisation(), mEntry.getModule(), rEntry.getRevision());
/*     */           
/* 375 */           ModuleRevisionId systemMrid = foundMrid;
/* 376 */           if (fromNamespace != null) {
/* 377 */             systemMrid = fromNamespace.getToSystemTransformer().transform(foundMrid);
/*     */           }
/*     */           
/* 380 */           if (MatcherHelper.matches(matcher, pattern, systemMrid)) {
/*     */             
/* 382 */             foundRevision = true;
/* 383 */             mrids.add(systemMrid);
/*     */           } 
/*     */         } 
/* 386 */         if (!foundRevision) {
/* 387 */           Message.debug(""no revision found matching "" + pattern + "" in ["" + mEntry.getOrganisation() + "","" + mEntry.getModule() + ""] using "" + resolverName);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 393 */     if (!foundModule) {
/* 394 */       Message.debug(""no module found matching "" + pattern + "" using "" + resolverName);
/*     */     }
/* 396 */     return mrids;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\search\SearchEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.IvyPattern,"/*    */ package org.apache.ivy.core.settings;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyPattern
/*    */ {
/*    */   private String pattern;
/*    */   
/* 27 */   public String getPattern() { return this.pattern; }
/*    */ 
/*    */ 
/*    */   
/* 31 */   public void setPattern(String pattern) { this.pattern = pattern; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\IvyPattern.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.IvySettings,"/*      */ package org.apache.ivy.core.settings;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileNotFoundException;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Field;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.net.URLClassLoader;
/*      */ import java.text.ParseException;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Collection;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.LinkedHashMap;
/*      */ import java.util.List;
/*      */ import java.util.Map;
/*      */ import java.util.Properties;
/*      */ import org.apache.ivy.Ivy;
/*      */ import org.apache.ivy.core.IvyPatternHelper;
/*      */ import org.apache.ivy.core.NormalRelativeUrlResolver;
/*      */ import org.apache.ivy.core.RelativeUrlResolver;
/*      */ import org.apache.ivy.core.cache.CacheUtil;
/*      */ import org.apache.ivy.core.cache.DefaultRepositoryCacheManager;
/*      */ import org.apache.ivy.core.cache.DefaultResolutionCacheManager;
/*      */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*      */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*      */ import org.apache.ivy.core.check.CheckEngineSettings;
/*      */ import org.apache.ivy.core.deliver.DeliverEngineSettings;
/*      */ import org.apache.ivy.core.install.InstallEngineSettings;
/*      */ import org.apache.ivy.core.module.id.ModuleId;
/*      */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*      */ import org.apache.ivy.core.module.id.ModuleRules;
/*      */ import org.apache.ivy.core.module.status.StatusManager;
/*      */ import org.apache.ivy.core.publish.PublishEngineSettings;
/*      */ import org.apache.ivy.core.repository.RepositoryManagementEngineSettings;
/*      */ import org.apache.ivy.core.resolve.ResolveEngineSettings;
/*      */ import org.apache.ivy.core.retrieve.RetrieveEngineSettings;
/*      */ import org.apache.ivy.core.sort.SortEngineSettings;
/*      */ import org.apache.ivy.plugins.IvySettingsAware;
/*      */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*      */ import org.apache.ivy.plugins.circular.ErrorCircularDependencyStrategy;
/*      */ import org.apache.ivy.plugins.circular.IgnoreCircularDependencyStrategy;
/*      */ import org.apache.ivy.plugins.circular.WarnCircularDependencyStrategy;
/*      */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*      */ import org.apache.ivy.plugins.conflict.LatestCompatibleConflictManager;
/*      */ import org.apache.ivy.plugins.conflict.LatestConflictManager;
/*      */ import org.apache.ivy.plugins.conflict.NoConflictManager;
/*      */ import org.apache.ivy.plugins.conflict.StrictConflictManager;
/*      */ import org.apache.ivy.plugins.latest.LatestLexicographicStrategy;
/*      */ import org.apache.ivy.plugins.latest.LatestRevisionStrategy;
/*      */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*      */ import org.apache.ivy.plugins.latest.LatestTimeStrategy;
/*      */ import org.apache.ivy.plugins.lock.ArtifactLockStrategy;
/*      */ import org.apache.ivy.plugins.lock.LockStrategy;
/*      */ import org.apache.ivy.plugins.lock.NoLockStrategy;
/*      */ import org.apache.ivy.plugins.matcher.ExactOrRegexpPatternMatcher;
/*      */ import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
/*      */ import org.apache.ivy.plugins.matcher.MapMatcher;
/*      */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*      */ import org.apache.ivy.plugins.matcher.RegexpPatternMatcher;
/*      */ import org.apache.ivy.plugins.namespace.Namespace;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*      */ import org.apache.ivy.plugins.parser.ParserSettings;
/*      */ import org.apache.ivy.plugins.report.LogReportOutputter;
/*      */ import org.apache.ivy.plugins.report.ReportOutputter;
/*      */ import org.apache.ivy.plugins.report.XmlReportOutputter;
/*      */ import org.apache.ivy.plugins.resolver.ChainResolver;
/*      */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*      */ import org.apache.ivy.plugins.resolver.DualResolver;
/*      */ import org.apache.ivy.plugins.resolver.ResolverSettings;
/*      */ import org.apache.ivy.plugins.trigger.Trigger;
/*      */ import org.apache.ivy.plugins.version.ChainVersionMatcher;
/*      */ import org.apache.ivy.plugins.version.ExactVersionMatcher;
/*      */ import org.apache.ivy.plugins.version.LatestVersionMatcher;
/*      */ import org.apache.ivy.plugins.version.SubVersionMatcher;
/*      */ import org.apache.ivy.plugins.version.VersionMatcher;
/*      */ import org.apache.ivy.plugins.version.VersionRangeMatcher;
/*      */ import org.apache.ivy.util.Checks;
/*      */ import org.apache.ivy.util.FileUtil;
/*      */ import org.apache.ivy.util.Message;
/*      */ import org.apache.ivy.util.filter.Filter;
/*      */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class IvySettings
/*      */   implements SortEngineSettings, PublishEngineSettings, ParserSettings, DeliverEngineSettings, CheckEngineSettings, InstallEngineSettings, ResolverSettings, ResolveEngineSettings, RetrieveEngineSettings, RepositoryManagementEngineSettings
/*      */ {
/*      */   private static final long INTERUPT_TIMEOUT = 2000L;
/*  113 */   private Map typeDefs = new HashMap();
/*      */   
/*  115 */   private Map resolversMap = new HashMap();
/*      */   
/*      */   private DependencyResolver defaultResolver;
/*      */   
/*  119 */   private DependencyResolver dictatorResolver = null;
/*      */   
/*      */   private String defaultResolverName;
/*      */   
/*      */   private File defaultCache;
/*      */   
/*  125 */   private String defaultBranch = null;
/*      */   
/*      */   private boolean checkUpToDate = true;
/*      */   
/*  129 */   private ModuleRules moduleSettings = new ModuleRules();
/*      */ 
/*      */   
/*  132 */   private Map conflictsManager = new HashMap();
/*      */ 
/*      */   
/*  135 */   private Map latestStrategies = new HashMap();
/*      */ 
/*      */   
/*  138 */   private Map lockStrategies = new HashMap();
/*      */ 
/*      */   
/*  141 */   private Map namespaces = new HashMap();
/*      */ 
/*      */   
/*  144 */   private Map matchers = new HashMap();
/*      */ 
/*      */   
/*  147 */   private Map reportOutputters = new HashMap();
/*      */ 
/*      */   
/*  150 */   private Map versionMatchers = new HashMap();
/*      */ 
/*      */   
/*  153 */   private Map circularDependencyStrategies = new HashMap();
/*      */ 
/*      */   
/*  156 */   private Map repositoryCacheManagers = new HashMap();
/*      */ 
/*      */   
/*  159 */   private List triggers = new ArrayList();
/*      */   
/*  161 */   private IvyVariableContainer variableContainer = new IvyVariableContainerImpl();
/*      */   
/*      */   private boolean validate = true;
/*      */   
/*  165 */   private LatestStrategy defaultLatestStrategy = null;
/*      */   
/*  167 */   private LockStrategy defaultLockStrategy = null;
/*      */   
/*  169 */   private ConflictManager defaultConflictManager = null;
/*      */   
/*  171 */   private CircularDependencyStrategy circularDependencyStrategy = null;
/*      */   
/*  173 */   private RepositoryCacheManager defaultRepositoryCacheManager = null;
/*      */   
/*  175 */   private ResolutionCacheManager resolutionCacheManager = null;
/*      */   
/*  177 */   private List listingIgnore = new ArrayList();
/*      */   
/*      */   private boolean repositoriesConfigured;
/*      */   
/*      */   private boolean useRemoteConfig = false;
/*      */   
/*      */   private File defaultUserDir;
/*      */   
/*  185 */   private File baseDir = (new File(""."")).getAbsoluteFile();
/*      */   
/*  187 */   private List classpathURLs = new ArrayList();
/*      */   
/*      */   private ClassLoader classloader;
/*      */   
/*      */   private Boolean debugConflictResolution;
/*      */   
/*      */   private boolean logNotConvertedExclusionRule;
/*      */   
/*      */   private VersionMatcher versionMatcher;
/*      */   
/*      */   private StatusManager statusManager;
/*      */   
/*      */   private Boolean debugLocking;
/*      */   
/*      */   private Boolean dumpMemoryUsage;
/*      */   
/*      */   private String defaultCacheIvyPattern;
/*      */   
/*      */   private String defaultCacheArtifactPattern;
/*      */   
/*      */   private boolean defaultUseOrigin;
/*      */   
/*  209 */   private String defaultResolveMode = ""default"";
/*      */ 
/*      */   
/*  212 */   public IvySettings() { this(new IvyVariableContainerImpl()); }
/*      */ 
/*      */   
/*      */   public IvySettings(IvyVariableContainer variableContainer) {
/*  216 */     setVariableContainer(variableContainer);
/*  217 */     setVariable(""ivy.default.settings.dir"", getDefaultSettingsDir(), true);
/*  218 */     setVariable(""ivy.basedir"", getBaseDir().getAbsolutePath());
/*  219 */     setDeprecatedVariable(""ivy.default.conf.dir"", ""ivy.default.settings.dir"");
/*      */     
/*  221 */     String ivyTypeDefs = System.getProperty(""ivy.typedef.files"");
/*  222 */     if (ivyTypeDefs != null) {
/*  223 */       String[] files = ivyTypeDefs.split(""\\,"");
/*  224 */       for (int i = 0; i < files.length; i++) {
/*      */         try {
/*  226 */           typeDefs(new FileInputStream(Checks.checkAbsolute(files[i].trim(), ""ivy.typedef.files"")), true);
/*      */         }
/*  228 */         catch (FileNotFoundException e) {
/*  229 */           Message.warn(""typedefs file not found: "" + files[i].trim());
/*  230 */         } catch (IOException e) {
/*  231 */           Message.warn(""problem with typedef file: "" + files[i].trim() + "": "" + e.getMessage());
/*      */         } 
/*      */       } 
/*      */     } else {
/*      */       
/*      */       try {
/*  237 */         typeDefs(getSettingsURL(""typedef.properties"").openStream(), true);
/*  238 */       } catch (IOException e) {
/*  239 */         Message.warn(""impossible to load default type defs"");
/*      */       } 
/*      */     } 
/*  242 */     LatestLexicographicStrategy latestLexicographicStrategy = new LatestLexicographicStrategy();
/*  243 */     LatestRevisionStrategy latestRevisionStrategy = new LatestRevisionStrategy();
/*  244 */     LatestTimeStrategy latestTimeStrategy = new LatestTimeStrategy();
/*      */     
/*  246 */     addLatestStrategy(""latest-revision"", (LatestStrategy)latestRevisionStrategy);
/*  247 */     addLatestStrategy(""latest-lexico"", (LatestStrategy)latestLexicographicStrategy);
/*  248 */     addLatestStrategy(""latest-time"", (LatestStrategy)latestTimeStrategy);
/*      */     
/*  250 */     addLockStrategy(""no-lock"", (LockStrategy)new NoLockStrategy());
/*  251 */     addLockStrategy(""artifact-lock"", (LockStrategy)new ArtifactLockStrategy(debugLocking()));
/*      */     
/*  253 */     addConflictManager(""latest-revision"", (ConflictManager)new LatestConflictManager(""latest-revision"", (LatestStrategy)latestRevisionStrategy));
/*      */     
/*  255 */     addConflictManager(""latest-compatible"", (ConflictManager)new LatestCompatibleConflictManager(""latest-compatible"", (LatestStrategy)latestRevisionStrategy));
/*      */     
/*  257 */     addConflictManager(""latest-time"", (ConflictManager)new LatestConflictManager(""latest-time"", (LatestStrategy)latestTimeStrategy));
/*      */     
/*  259 */     addConflictManager(""all"", (ConflictManager)new NoConflictManager());
/*  260 */     addConflictManager(""strict"", (ConflictManager)new StrictConflictManager());
/*      */     
/*  262 */     addMatcher((PatternMatcher)ExactPatternMatcher.INSTANCE);
/*  263 */     addMatcher((PatternMatcher)RegexpPatternMatcher.INSTANCE);
/*  264 */     addMatcher((PatternMatcher)ExactOrRegexpPatternMatcher.INSTANCE);
/*      */ 
/*      */     
/*      */     try {
/*  268 */       Class globClazz = IvySettings.class.getClassLoader().loadClass(""org.apache.ivy.plugins.matcher.GlobPatternMatcher"");
/*      */       
/*  270 */       Field instanceField = globClazz.getField(""INSTANCE"");
/*  271 */       addMatcher((PatternMatcher)instanceField.get(null));
/*  272 */     } catch (Exception e) {
/*      */       
/*  274 */       Message.info(""impossible to define glob matcher: org.apache.ivy.plugins.matcher.GlobPatternMatcher was not found."");
/*      */     } 
/*      */ 
/*      */     
/*  278 */     addReportOutputter((ReportOutputter)new LogReportOutputter());
/*  279 */     addReportOutputter((ReportOutputter)new XmlReportOutputter());
/*      */     
/*  281 */     configureDefaultCircularDependencyStrategies();
/*      */     
/*  283 */     this.listingIgnore.add("".cvsignore"");
/*  284 */     this.listingIgnore.add(""CVS"");
/*  285 */     this.listingIgnore.add("".svn"");
/*  286 */     this.listingIgnore.add(""maven-metadata.xml"");
/*  287 */     this.listingIgnore.add(""maven-metadata.xml.md5"");
/*  288 */     this.listingIgnore.add(""maven-metadata.xml.sha1"");
/*      */     
/*  290 */     addSystemProperties();
/*      */   }
/*      */ 
/*      */   
/*  294 */   private void addSystemProperties() { addAllVariables(System.getProperties()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void configureRepositories(boolean remote) {
/*  302 */     if (!this.repositoriesConfigured) {
/*  303 */       Properties props = new Properties();
/*  304 */       boolean configured = false;
/*  305 */       if (this.useRemoteConfig && remote) {
/*      */         try {
/*  307 */           URL url = new URL(""http://ant.apache.org/ivy/repository.properties"");
/*  308 */           Message.verbose(""configuring repositories with "" + url);
/*  309 */           props.load(URLHandlerRegistry.getDefault().openStream(url));
/*  310 */           configured = true;
/*  311 */         } catch (Exception ex) {
/*  312 */           Message.verbose(""unable to use remote repository configuration: "" + ex.getMessage());
/*      */           
/*  314 */           props = new Properties();
/*      */         } 
/*      */       }
/*  317 */       if (!configured) {
/*  318 */         InputStream repositoryPropsStream = null;
/*      */         try {
/*  320 */           repositoryPropsStream = getSettingsURL(""repository.properties"").openStream();
/*  321 */           props.load(repositoryPropsStream);
/*  322 */         } catch (IOException e) {
/*  323 */           Message.error(""unable to use internal repository configuration: "" + e.getMessage());
/*      */           
/*  325 */           if (repositoryPropsStream != null) {
/*      */             try {
/*  327 */               repositoryPropsStream.close();
/*  328 */             } catch (Exception ex) {}
/*      */           }
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  334 */       addAllVariables(props, false);
/*  335 */       this.repositoriesConfigured = true;
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*  340 */   public void typeDefs(InputStream stream) throws IOException { typeDefs(stream, false); }
/*      */ 
/*      */   
/*      */   public void typeDefs(InputStream stream, boolean silentFail) throws IOException {
/*      */     try {
/*  345 */       Properties p = new Properties();
/*  346 */       p.load(stream);
/*  347 */       typeDefs(p, silentFail);
/*      */     } finally {
/*  349 */       stream.close();
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*  354 */   public void typeDefs(Properties p) { typeDefs(p, false); }
/*      */ 
/*      */   
/*      */   public void typeDefs(Properties p, boolean silentFail) {
/*  358 */     for (Iterator iter = p.keySet().iterator(); iter.hasNext(); ) {
/*  359 */       String name = iter.next();
/*  360 */       typeDef(name, p.getProperty(name), silentFail);
/*      */     } 
/*      */   }
/*      */   
/*      */   public void load(File settingsFile) throws ParseException, IOException {
/*  365 */     Message.info("":: loading settings :: file = "" + settingsFile);
/*  366 */     long start = System.currentTimeMillis();
/*  367 */     setSettingsVariables(settingsFile);
/*  368 */     if (getVariable(""ivy.default.ivy.user.dir"") != null) {
/*  369 */       setDefaultIvyUserDir(Checks.checkAbsolute(getVariable(""ivy.default.ivy.user.dir""), ""ivy.default.ivy.user.dir""));
/*      */     } else {
/*      */       
/*  372 */       getDefaultIvyUserDir();
/*      */     } 
/*      */     
/*  375 */     loadDefaultProperties();
/*      */     try {
/*  377 */       (new XmlSettingsParser(this)).parse(settingsFile.toURI().toURL());
/*  378 */     } catch (MalformedURLException e) {
/*  379 */       IllegalArgumentException iae = new IllegalArgumentException(""given file cannot be transformed to url: "" + settingsFile);
/*      */       
/*  381 */       iae.initCause(e);
/*  382 */       throw iae;
/*      */     } 
/*  384 */     setVariable(""ivy.default.ivy.user.dir"", getDefaultIvyUserDir().getAbsolutePath(), false);
/*  385 */     Message.verbose(""settings loaded ("" + (System.currentTimeMillis() - start) + ""ms)"");
/*  386 */     dumpSettings();
/*      */   }
/*      */   
/*      */   public void load(URL settingsURL) throws ParseException, IOException {
/*  390 */     Message.info("":: loading settings :: url = "" + settingsURL);
/*  391 */     long start = System.currentTimeMillis();
/*  392 */     setSettingsVariables(settingsURL);
/*  393 */     if (getVariable(""ivy.default.ivy.user.dir"") != null) {
/*  394 */       setDefaultIvyUserDir(Checks.checkAbsolute(getVariable(""ivy.default.ivy.user.dir""), ""ivy.default.ivy.user.dir""));
/*      */     } else {
/*      */       
/*  397 */       getDefaultIvyUserDir();
/*      */     } 
/*      */     
/*  400 */     loadDefaultProperties();
/*  401 */     (new XmlSettingsParser(this)).parse(settingsURL);
/*  402 */     setVariable(""ivy.default.ivy.user.dir"", getDefaultIvyUserDir().getAbsolutePath(), false);
/*  403 */     Message.verbose(""settings loaded ("" + (System.currentTimeMillis() - start) + ""ms)"");
/*  404 */     dumpSettings();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void defaultInit() throws IOException {
/*  415 */     if (getVariable(""ivy.default.ivy.user.dir"") != null) {
/*  416 */       setDefaultIvyUserDir(Checks.checkAbsolute(getVariable(""ivy.default.ivy.user.dir""), ""ivy.default.ivy.user.dir""));
/*      */     } else {
/*      */       
/*  419 */       getDefaultIvyUserDir();
/*      */     } 
/*  421 */     getDefaultCache();
/*      */     
/*  423 */     loadDefaultProperties();
/*  424 */     setVariable(""ivy.default.ivy.user.dir"", getDefaultIvyUserDir().getAbsolutePath(), false);
/*  425 */     dumpSettings();
/*      */   }
/*      */ 
/*      */   
/*  429 */   public void loadDefault() throws ParseException, IOException { load(getDefaultSettingsURL()); }
/*      */ 
/*      */ 
/*      */   
/*  433 */   public void loadDefault14() throws ParseException, IOException { load(getDefault14SettingsURL()); }
/*      */ 
/*      */ 
/*      */   
/*  437 */   private void loadDefaultProperties() throws IOException { loadProperties(getDefaultPropertiesURL(), false); }
/*      */ 
/*      */ 
/*      */   
/*  441 */   public static URL getDefaultPropertiesURL() { return getSettingsURL(""ivy.properties""); }
/*      */ 
/*      */ 
/*      */   
/*  445 */   public static URL getDefaultSettingsURL() { return getSettingsURL(""ivysettings.xml""); }
/*      */ 
/*      */ 
/*      */   
/*  449 */   public static URL getDefault14SettingsURL() { return getSettingsURL(""ivysettings-1.4.xml""); }
/*      */ 
/*      */   
/*      */   private String getDefaultSettingsDir() {
/*  453 */     String ivysettingsLocation = getDefaultSettingsURL().toExternalForm();
/*  454 */     return ivysettingsLocation.substring(0, ivysettingsLocation.length() - ""ivysettings.xml"".length() - 1);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  459 */   private static URL getSettingsURL(String file) { return XmlSettingsParser.class.getResource(file); }
/*      */ 
/*      */   
/*      */   public void setSettingsVariables(File settingsFile) {
/*      */     try {
/*  464 */       setVariable(""ivy.settings.dir"", (new File(settingsFile.getAbsolutePath())).getParent());
/*  465 */       setDeprecatedVariable(""ivy.conf.dir"", ""ivy.settings.dir"");
/*  466 */       setVariable(""ivy.settings.file"", settingsFile.getAbsolutePath());
/*  467 */       setDeprecatedVariable(""ivy.conf.file"", ""ivy.settings.file"");
/*  468 */       setVariable(""ivy.settings.url"", settingsFile.toURI().toURL().toExternalForm());
/*  469 */       setDeprecatedVariable(""ivy.conf.url"", ""ivy.settings.url"");
/*  470 */     } catch (MalformedURLException e) {
/*  471 */       IllegalArgumentException iae = new IllegalArgumentException(""given file cannot be transformed to url: "" + settingsFile);
/*      */       
/*  473 */       iae.initCause(e);
/*  474 */       throw iae;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  487 */   private void setDeprecatedVariable(String deprecatedKey, String newKey) { setVariable(deprecatedKey, getVariable(newKey)); }
/*      */ 
/*      */   
/*      */   public void setSettingsVariables(URL settingsURL) {
/*  491 */     String settingsURLStr = settingsURL.toExternalForm();
/*  492 */     setVariable(""ivy.settings.url"", settingsURLStr);
/*  493 */     setDeprecatedVariable(""ivy.conf.url"", ""ivy.settings.url"");
/*  494 */     int slashIndex = settingsURLStr.lastIndexOf('/');
/*  495 */     if (slashIndex != -1) {
/*  496 */       setVariable(""ivy.settings.dir"", settingsURLStr.substring(0, slashIndex));
/*  497 */       setDeprecatedVariable(""ivy.conf.dir"", ""ivy.settings.dir"");
/*      */     } else {
/*  499 */       Message.warn(""settings url does not contain any slash (/): ivy.settings.dir variable not set"");
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private void dumpSettings() {
/*  505 */     Message.verbose(""\tdefault cache: "" + getDefaultCache());
/*  506 */     Message.verbose(""\tdefault resolver: "" + getDefaultResolver());
/*  507 */     Message.debug(""\tdefault latest strategy: "" + getDefaultLatestStrategy());
/*  508 */     Message.debug(""\tdefault conflict manager: "" + getDefaultConflictManager());
/*  509 */     Message.debug(""\tcircular dependency strategy: "" + getCircularDependencyStrategy());
/*  510 */     Message.debug(""\tvalidate: "" + doValidate());
/*  511 */     Message.debug(""\tcheck up2date: "" + isCheckUpToDate());
/*      */     
/*  513 */     if (!this.classpathURLs.isEmpty()) {
/*  514 */       Message.verbose(""\t-- "" + this.classpathURLs.size() + "" custom classpath urls:"");
/*  515 */       for (Iterator iter = this.classpathURLs.iterator(); iter.hasNext();) {
/*  516 */         Message.debug(""\t\t"" + iter.next());
/*      */       }
/*      */     } 
/*  519 */     Message.verbose(""\t-- "" + this.resolversMap.size() + "" resolvers:"");
/*  520 */     for (Iterator iter = this.resolversMap.values().iterator(); iter.hasNext(); ) {
/*  521 */       DependencyResolver resolver = iter.next();
/*  522 */       resolver.dumpSettings();
/*      */     } 
/*  524 */     Message.debug(""\tmodule settings:"");
/*  525 */     this.moduleSettings.dump(""\t\t"");
/*      */   }
/*      */ 
/*      */   
/*  529 */   public void loadProperties(URL url) throws IOException { loadProperties(url, true); }
/*      */ 
/*      */ 
/*      */   
/*  533 */   public void loadProperties(URL url, boolean overwrite) throws IOException { loadProperties(url.openStream(), overwrite); }
/*      */ 
/*      */ 
/*      */   
/*  537 */   public void loadProperties(File file) throws IOException { loadProperties(file, true); }
/*      */ 
/*      */ 
/*      */   
/*  541 */   public void loadProperties(File file, boolean overwrite) throws IOException { loadProperties(new FileInputStream(file), overwrite); }
/*      */ 
/*      */   
/*      */   private void loadProperties(InputStream stream, boolean overwrite) throws IOException {
/*      */     try {
/*  546 */       Properties properties = new Properties();
/*  547 */       properties.load(stream);
/*  548 */       addAllVariables(properties, overwrite);
/*      */     } finally {
/*  550 */       if (stream != null) {
/*      */         try {
/*  552 */           stream.close();
/*  553 */         } catch (IOException e) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  561 */   public void setVariable(String varName, String value) { setVariable(varName, value, true); }
/*      */ 
/*      */ 
/*      */   
/*  565 */   public void setVariable(String varName, String value, boolean overwrite) { this.variableContainer.setVariable(varName, value, overwrite); }
/*      */ 
/*      */ 
/*      */   
/*  569 */   public void addAllVariables(Map variables) { addAllVariables(variables, true); }
/*      */ 
/*      */   
/*      */   public void addAllVariables(Map variables, boolean overwrite) {
/*  573 */     for (Iterator iter = variables.keySet().iterator(); iter.hasNext(); ) {
/*  574 */       String key = iter.next();
/*  575 */       String val = (String)variables.get(key);
/*  576 */       setVariable(key, val, overwrite);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  589 */   public String substitute(String str) { return IvyPatternHelper.substituteVariables(str, this.variableContainer); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Map substitute(Map strings) {
/*  602 */     Map substituted = new LinkedHashMap();
/*  603 */     for (Iterator it = strings.entrySet().iterator(); it.hasNext(); ) {
/*  604 */       Map.Entry entry = it.next();
/*  605 */       substituted.put(entry.getKey(), substitute((String)entry.getValue()));
/*      */     } 
/*  607 */     return substituted;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  617 */   public IvyVariableContainer getVariables() { return this.variableContainer; }
/*      */ 
/*      */ 
/*      */   
/*  621 */   public Class typeDef(String name, String className) { return typeDef(name, className, false); }
/*      */ 
/*      */   
/*      */   public Class typeDef(String name, String className, boolean silentFail) {
/*  625 */     Class clazz = classForName(className, silentFail);
/*  626 */     if (clazz != null) {
/*  627 */       this.typeDefs.put(name, clazz);
/*      */     }
/*  629 */     return clazz;
/*      */   }
/*      */   
/*      */   private Class classForName(String className, boolean silentFail) {
/*      */     try {
/*  634 */       return getClassLoader().loadClass(className);
/*  635 */     } catch (ClassNotFoundException e) {
/*  636 */       if (silentFail) {
/*  637 */         Message.info(""impossible to define new type: class not found: "" + className + "" in "" + this.classpathURLs + "" nor Ivy classloader"");
/*      */         
/*  639 */         return null;
/*      */       } 
/*  641 */       throw new RuntimeException(""impossible to define new type: class not found: "" + className + "" in "" + this.classpathURLs + "" nor Ivy classloader"");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private ClassLoader getClassLoader() {
/*  648 */     if (this.classloader == null) {
/*  649 */       if (this.classpathURLs.isEmpty()) {
/*  650 */         this.classloader = Ivy.class.getClassLoader();
/*      */       } else {
/*  652 */         this.classloader = new URLClassLoader((URL[])this.classpathURLs.toArray((Object[])new URL[this.classpathURLs.size()]), Ivy.class.getClassLoader());
/*      */       } 
/*      */     }
/*      */     
/*  656 */     return this.classloader;
/*      */   }
/*      */   
/*      */   public void addClasspathURL(URL url) {
/*  660 */     this.classpathURLs.add(url);
/*  661 */     this.classloader = null;
/*      */   }
/*      */ 
/*      */   
/*  665 */   public Map getTypeDefs() { return this.typeDefs; }
/*      */ 
/*      */ 
/*      */   
/*  669 */   public Class getTypeDef(String name) { return (Class)this.typeDefs.get(name); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  674 */   public void addConfigured(DependencyResolver resolver) { addResolver(resolver); }
/*      */ 
/*      */ 
/*      */   
/*  678 */   public void addConfigured(ModuleDescriptorParser parser) { ModuleDescriptorParserRegistry.getInstance().addParser(parser); }
/*      */ 
/*      */   
/*      */   public void addResolver(DependencyResolver resolver) {
/*  682 */     if (resolver == null) {
/*  683 */       throw new NullPointerException(""null resolver"");
/*      */     }
/*  685 */     init(resolver);
/*  686 */     this.resolversMap.put(resolver.getName(), resolver);
/*  687 */     if (resolver instanceof ChainResolver) {
/*  688 */       List subresolvers = ((ChainResolver)resolver).getResolvers();
/*  689 */       for (Iterator iter = subresolvers.iterator(); iter.hasNext(); ) {
/*  690 */         DependencyResolver dr = iter.next();
/*  691 */         addResolver(dr);
/*      */       } 
/*  693 */     } else if (resolver instanceof DualResolver) {
/*  694 */       DependencyResolver ivyResolver = ((DualResolver)resolver).getIvyResolver();
/*  695 */       if (ivyResolver != null) {
/*  696 */         addResolver(ivyResolver);
/*      */       }
/*  698 */       DependencyResolver artifactResolver = ((DualResolver)resolver).getArtifactResolver();
/*  699 */       if (artifactResolver != null) {
/*  700 */         addResolver(artifactResolver);
/*      */       }
/*      */     } 
/*      */   }
/*      */   
/*      */   public void setDefaultCache(File cacheDirectory) {
/*  706 */     setVariable(""ivy.cache.dir"", cacheDirectory.getAbsolutePath(), false);
/*  707 */     this.defaultCache = cacheDirectory;
/*  708 */     if (this.defaultRepositoryCacheManager != null && 
/*  709 */       ""default-cache"".equals(this.defaultRepositoryCacheManager.getName()) && this.defaultRepositoryCacheManager instanceof DefaultRepositoryCacheManager)
/*      */     {
/*  711 */       ((DefaultRepositoryCacheManager)this.defaultRepositoryCacheManager).setBasedir(this.defaultCache);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDefaultResolver(String resolverName) {
/*  718 */     checkResolverName(resolverName);
/*  719 */     this.defaultResolverName = resolverName;
/*      */   }
/*      */   
/*      */   private void checkResolverName(String resolverName) {
/*  723 */     if (resolverName != null && !this.resolversMap.containsKey(resolverName)) {
/*  724 */       throw new IllegalArgumentException(""no resolver found called "" + resolverName + "": check your settings"");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addModuleConfiguration(Map attributes, PatternMatcher matcher, String resolverName, String branch, String conflictManager, String resolveMode) {
/*  734 */     checkResolverName(resolverName);
/*  735 */     this.moduleSettings.defineRule(new MapMatcher(attributes, matcher), new ModuleSettings(resolverName, branch, conflictManager, resolveMode));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  753 */   public File resolveFile(String fileName) { return FileUtil.resolveFile(this.baseDir, fileName); }
/*      */ 
/*      */   
/*      */   public void setBaseDir(File baseDir) {
/*  757 */     this.baseDir = baseDir.getAbsoluteFile();
/*  758 */     setVariable(""ivy.basedir"", this.baseDir.getAbsolutePath());
/*  759 */     setVariable(""basedir"", this.baseDir.getAbsolutePath(), false);
/*      */   }
/*      */ 
/*      */   
/*  763 */   public File getBaseDir() { return this.baseDir; }
/*      */ 
/*      */   
/*      */   public File getDefaultIvyUserDir() {
/*  767 */     if (this.defaultUserDir == null) {
/*  768 */       if (getVariable(""ivy.home"") != null) {
/*  769 */         setDefaultIvyUserDir(Checks.checkAbsolute(getVariable(""ivy.home""), ""ivy.home""));
/*  770 */         Message.verbose(""using ivy.default.ivy.user.dir variable for default ivy user dir: "" + this.defaultUserDir);
/*      */       } else {
/*      */         
/*  773 */         setDefaultIvyUserDir(new File(System.getProperty(""user.home""), "".ivy2""));
/*  774 */         Message.verbose(""no default ivy user dir defined: set to "" + this.defaultUserDir);
/*      */       } 
/*      */     }
/*  777 */     return this.defaultUserDir;
/*      */   }
/*      */   
/*      */   public void setDefaultIvyUserDir(File defaultUserDir) {
/*  781 */     this.defaultUserDir = defaultUserDir;
/*  782 */     setVariable(""ivy.default.ivy.user.dir"", this.defaultUserDir.getAbsolutePath());
/*  783 */     setVariable(""ivy.home"", this.defaultUserDir.getAbsolutePath());
/*      */   }
/*      */   
/*      */   public File getDefaultCache() {
/*  787 */     if (this.defaultCache == null) {
/*  788 */       String cache = getVariable(""ivy.cache.dir"");
/*  789 */       if (cache != null) {
/*  790 */         this.defaultCache = Checks.checkAbsolute(cache, ""ivy.cache.dir"");
/*      */       } else {
/*  792 */         setDefaultCache(new File(getDefaultIvyUserDir(), ""cache""));
/*  793 */         Message.verbose(""no default cache defined: set to "" + this.defaultCache);
/*      */       } 
/*      */     } 
/*  796 */     return this.defaultCache;
/*      */   }
/*      */   
/*      */   public void setDefaultRepositoryCacheBasedir(String repositoryCacheRoot) {
/*  800 */     setVariable(""ivy.cache.repository"", repositoryCacheRoot, true);
/*  801 */     if (this.defaultRepositoryCacheManager != null && ""default-cache"".equals(this.defaultRepositoryCacheManager.getName()) && this.defaultRepositoryCacheManager instanceof DefaultRepositoryCacheManager)
/*      */     {
/*      */       
/*  804 */       ((DefaultRepositoryCacheManager)this.defaultRepositoryCacheManager).setBasedir(getDefaultRepositoryCacheBasedir());
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   public void setDefaultResolutionCacheBasedir(String resolutionCacheRoot) {
/*  810 */     setVariable(""ivy.cache.resolution"", resolutionCacheRoot, true);
/*  811 */     if (this.resolutionCacheManager != null && this.resolutionCacheManager instanceof DefaultResolutionCacheManager)
/*      */     {
/*  813 */       ((DefaultResolutionCacheManager)this.resolutionCacheManager).setBasedir(getDefaultResolutionCacheBasedir());
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   public File getDefaultRepositoryCacheBasedir() {
/*  819 */     String repositoryCacheRoot = getVariable(""ivy.cache.repository"");
/*  820 */     if (repositoryCacheRoot != null) {
/*  821 */       return Checks.checkAbsolute(repositoryCacheRoot, ""ivy.cache.repository"");
/*      */     }
/*  823 */     return getDefaultCache();
/*      */   }
/*      */ 
/*      */   
/*      */   public File getDefaultResolutionCacheBasedir() {
/*  828 */     String resolutionCacheRoot = getVariable(""ivy.cache.resolution"");
/*  829 */     if (resolutionCacheRoot != null) {
/*  830 */       return Checks.checkAbsolute(resolutionCacheRoot, ""ivy.cache.resolution"");
/*      */     }
/*  832 */     return getDefaultCache();
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  837 */   public void setDictatorResolver(DependencyResolver resolver) { this.dictatorResolver = resolver; }
/*      */ 
/*      */   
/*      */   public DependencyResolver getResolver(ModuleRevisionId mrid) {
/*  841 */     if (this.dictatorResolver != null) {
/*  842 */       return this.dictatorResolver;
/*      */     }
/*  844 */     String resolverName = getResolverName(mrid);
/*  845 */     return getResolver(resolverName);
/*      */   }
/*      */   
/*      */   public DependencyResolver getResolver(String resolverName) {
/*  849 */     if (this.dictatorResolver != null) {
/*  850 */       return this.dictatorResolver;
/*      */     }
/*  852 */     DependencyResolver resolver = (DependencyResolver)this.resolversMap.get(resolverName);
/*  853 */     if (resolver == null) {
/*  854 */       Message.error(""unknown resolver "" + resolverName);
/*      */     }
/*  856 */     return resolver;
/*      */   }
/*      */   
/*      */   public DependencyResolver getDefaultResolver() {
/*  860 */     if (this.dictatorResolver != null) {
/*  861 */       return this.dictatorResolver;
/*      */     }
/*  863 */     if (this.defaultResolver == null) {
/*  864 */       this.defaultResolver = (DependencyResolver)this.resolversMap.get(this.defaultResolverName);
/*      */     }
/*  866 */     return this.defaultResolver;
/*      */   }
/*      */   
/*      */   public String getResolverName(ModuleRevisionId mrid) {
/*  870 */     ModuleSettings ms = (ModuleSettings)this.moduleSettings.getRule(mrid, new Filter()
/*      */         {
/*  872 */           public boolean accept(Object o) { return (((IvySettings.ModuleSettings)o).getResolverName() != null); }
/*      */           private final IvySettings this$0;
/*      */         });
/*  875 */     return (ms == null) ? this.defaultResolverName : ms.getResolverName();
/*      */   }
/*      */   
/*      */   public String getDefaultBranch(ModuleId moduleId) {
/*  879 */     ModuleSettings ms = (ModuleSettings)this.moduleSettings.getRule(moduleId, new Filter() { private final IvySettings this$0;
/*      */           
/*  881 */           public boolean accept(Object o) { return (((IvySettings.ModuleSettings)o).getBranch() != null); }
/*      */            }
/*      */       );
/*  884 */     return (ms == null) ? getDefaultBranch() : ms.getBranch();
/*      */   }
/*      */ 
/*      */   
/*  888 */   public String getDefaultBranch() { return this.defaultBranch; }
/*      */ 
/*      */ 
/*      */   
/*  892 */   public void setDefaultBranch(String defaultBranch) { this.defaultBranch = defaultBranch; }
/*      */ 
/*      */   
/*      */   public ConflictManager getConflictManager(ModuleId moduleId) {
/*  896 */     ModuleSettings ms = (ModuleSettings)this.moduleSettings.getRule(moduleId, new Filter() { private final IvySettings this$0;
/*      */           
/*  898 */           public boolean accept(Object o) { return (((IvySettings.ModuleSettings)o).getConflictManager() != null); }
/*      */            }
/*      */       );
/*  901 */     if (ms == null) {
/*  902 */       return getDefaultConflictManager();
/*      */     }
/*  904 */     ConflictManager cm = getConflictManager(ms.getConflictManager());
/*  905 */     if (cm == null) {
/*  906 */       throw new IllegalStateException(""ivy badly configured: unknown conflict manager "" + ms.getConflictManager());
/*      */     }
/*      */ 
/*      */     
/*  910 */     return cm;
/*      */   }
/*      */ 
/*      */   
/*      */   public String getResolveMode(ModuleId moduleId) {
/*  915 */     ModuleSettings ms = (ModuleSettings)this.moduleSettings.getRule(moduleId, new Filter() { private final IvySettings this$0;
/*      */           
/*  917 */           public boolean accept(Object o) { return (((IvySettings.ModuleSettings)o).getResolveMode() != null); }
/*      */            }
/*      */       );
/*  920 */     return (ms == null) ? getDefaultResolveMode() : ms.getResolveMode();
/*      */   }
/*      */ 
/*      */   
/*  924 */   public String getDefaultResolveMode() { return this.defaultResolveMode; }
/*      */ 
/*      */ 
/*      */   
/*  928 */   public void setDefaultResolveMode(String defaultResolveMode) { this.defaultResolveMode = defaultResolveMode; }
/*      */ 
/*      */ 
/*      */   
/*  932 */   public void addConfigured(ConflictManager cm) { addConflictManager(cm.getName(), cm); }
/*      */ 
/*      */   
/*      */   public ConflictManager getConflictManager(String name) {
/*  936 */     if (""default"".equals(name)) {
/*  937 */       return getDefaultConflictManager();
/*      */     }
/*  939 */     return (ConflictManager)this.conflictsManager.get(name);
/*      */   }
/*      */   
/*      */   public void addConflictManager(String name, ConflictManager cm) {
/*  943 */     init(cm);
/*  944 */     this.conflictsManager.put(name, cm);
/*      */   }
/*      */ 
/*      */   
/*  948 */   public void addConfigured(LatestStrategy latest) { addLatestStrategy(latest.getName(), latest); }
/*      */ 
/*      */   
/*      */   public LatestStrategy getLatestStrategy(String name) {
/*  952 */     if (""default"".equals(name)) {
/*  953 */       return getDefaultLatestStrategy();
/*      */     }
/*  955 */     return (LatestStrategy)this.latestStrategies.get(name);
/*      */   }
/*      */   
/*      */   public void addLatestStrategy(String name, LatestStrategy latest) {
/*  959 */     init(latest);
/*  960 */     this.latestStrategies.put(name, latest);
/*      */   }
/*      */ 
/*      */   
/*  964 */   public void addConfigured(LockStrategy lockStrategy) { addLockStrategy(lockStrategy.getName(), lockStrategy); }
/*      */ 
/*      */   
/*      */   public LockStrategy getLockStrategy(String name) {
/*  968 */     if (""default"".equals(name)) {
/*  969 */       return getDefaultLockStrategy();
/*      */     }
/*  971 */     return (LockStrategy)this.lockStrategies.get(name);
/*      */   }
/*      */   
/*      */   public void addLockStrategy(String name, LockStrategy lockStrategy) {
/*  975 */     init(lockStrategy);
/*  976 */     this.lockStrategies.put(name, lockStrategy);
/*      */   }
/*      */ 
/*      */   
/*  980 */   public void addConfigured(Namespace ns) { addNamespace(ns); }
/*      */ 
/*      */   
/*      */   public Namespace getNamespace(String name) {
/*  984 */     if (""system"".equals(name)) {
/*  985 */       return getSystemNamespace();
/*      */     }
/*  987 */     return (Namespace)this.namespaces.get(name);
/*      */   }
/*      */ 
/*      */   
/*  991 */   public Namespace getSystemNamespace() { return Namespace.SYSTEM_NAMESPACE; }
/*      */ 
/*      */   
/*      */   public void addNamespace(Namespace ns) {
/*  995 */     init(ns);
/*  996 */     this.namespaces.put(ns.getName(), ns);
/*      */   }
/*      */ 
/*      */   
/* 1000 */   public void addConfigured(PatternMatcher m) { addMatcher(m); }
/*      */ 
/*      */ 
/*      */   
/* 1004 */   public PatternMatcher getMatcher(String name) { return (PatternMatcher)this.matchers.get(name); }
/*      */ 
/*      */   
/*      */   public void addMatcher(PatternMatcher m) {
/* 1008 */     init(m);
/* 1009 */     this.matchers.put(m.getName(), m);
/*      */   }
/*      */ 
/*      */   
/* 1013 */   public void addConfigured(RepositoryCacheManager c) { addRepositoryCacheManager(c); }
/*      */ 
/*      */ 
/*      */   
/* 1017 */   public RepositoryCacheManager getRepositoryCacheManager(String name) { return (RepositoryCacheManager)this.repositoryCacheManagers.get(name); }
/*      */ 
/*      */   
/*      */   public void addRepositoryCacheManager(RepositoryCacheManager c) {
/* 1021 */     init(c);
/* 1022 */     this.repositoryCacheManagers.put(c.getName(), c);
/*      */   }
/*      */ 
/*      */   
/* 1026 */   public RepositoryCacheManager[] getRepositoryCacheManagers() { return (RepositoryCacheManager[])this.repositoryCacheManagers.values().toArray((Object[])new RepositoryCacheManager[this.repositoryCacheManagers.size()]); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1031 */   public void addConfigured(ReportOutputter outputter) { addReportOutputter(outputter); }
/*      */ 
/*      */ 
/*      */   
/* 1035 */   public ReportOutputter getReportOutputter(String name) { return (ReportOutputter)this.reportOutputters.get(name); }
/*      */ 
/*      */   
/*      */   public void addReportOutputter(ReportOutputter outputter) {
/* 1039 */     init(outputter);
/* 1040 */     this.reportOutputters.put(outputter.getName(), outputter);
/*      */   }
/*      */ 
/*      */   
/* 1044 */   public ReportOutputter[] getReportOutputters() { return (ReportOutputter[])this.reportOutputters.values().toArray((Object[])new ReportOutputter[this.reportOutputters.size()]); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1049 */   public void addConfigured(VersionMatcher vmatcher) { addVersionMatcher(vmatcher); }
/*      */ 
/*      */ 
/*      */   
/* 1053 */   public VersionMatcher getVersionMatcher(String name) { return (VersionMatcher)this.versionMatchers.get(name); }
/*      */ 
/*      */   
/*      */   public void addVersionMatcher(VersionMatcher vmatcher) {
/* 1057 */     init(vmatcher);
/* 1058 */     this.versionMatchers.put(vmatcher.getName(), vmatcher);
/*      */     
/* 1060 */     if (this.versionMatcher == null) {
/* 1061 */       this.versionMatcher = (VersionMatcher)new ChainVersionMatcher();
/* 1062 */       addVersionMatcher((VersionMatcher)new ExactVersionMatcher());
/*      */     } 
/* 1064 */     if (this.versionMatcher instanceof ChainVersionMatcher) {
/* 1065 */       ChainVersionMatcher chain = (ChainVersionMatcher)this.versionMatcher;
/* 1066 */       chain.add(vmatcher);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/* 1071 */   public VersionMatcher[] getVersionMatchers() { return (VersionMatcher[])this.versionMatchers.values().toArray((Object[])new VersionMatcher[this.versionMatchers.size()]); }
/*      */ 
/*      */ 
/*      */   
/*      */   public VersionMatcher getVersionMatcher() {
/* 1076 */     if (this.versionMatcher == null) {
/* 1077 */       configureDefaultVersionMatcher();
/*      */     }
/* 1079 */     return this.versionMatcher;
/*      */   }
/*      */   
/*      */   public void configureDefaultVersionMatcher() {
/* 1083 */     addVersionMatcher((VersionMatcher)new LatestVersionMatcher());
/* 1084 */     addVersionMatcher((VersionMatcher)new SubVersionMatcher());
/* 1085 */     addVersionMatcher((VersionMatcher)new VersionRangeMatcher());
/*      */   }
/*      */   
/*      */   public CircularDependencyStrategy getCircularDependencyStrategy() {
/* 1089 */     if (this.circularDependencyStrategy == null) {
/* 1090 */       this.circularDependencyStrategy = getCircularDependencyStrategy(""default"");
/*      */     }
/* 1092 */     return this.circularDependencyStrategy;
/*      */   }
/*      */   
/*      */   public CircularDependencyStrategy getCircularDependencyStrategy(String name) {
/* 1096 */     if (""default"".equals(name)) {
/* 1097 */       name = ""warn"";
/*      */     }
/* 1099 */     return (CircularDependencyStrategy)this.circularDependencyStrategies.get(name);
/*      */   }
/*      */ 
/*      */   
/* 1103 */   public void setCircularDependencyStrategy(CircularDependencyStrategy strategy) { this.circularDependencyStrategy = strategy; }
/*      */ 
/*      */ 
/*      */   
/* 1107 */   public void addConfigured(CircularDependencyStrategy strategy) { addCircularDependencyStrategy(strategy); }
/*      */ 
/*      */ 
/*      */   
/* 1111 */   private void addCircularDependencyStrategy(CircularDependencyStrategy strategy) { this.circularDependencyStrategies.put(strategy.getName(), strategy); }
/*      */ 
/*      */   
/*      */   private void configureDefaultCircularDependencyStrategies() {
/* 1115 */     addCircularDependencyStrategy(WarnCircularDependencyStrategy.getInstance());
/* 1116 */     addCircularDependencyStrategy(ErrorCircularDependencyStrategy.getInstance());
/* 1117 */     addCircularDependencyStrategy(IgnoreCircularDependencyStrategy.getInstance());
/*      */   }
/*      */   
/*      */   public StatusManager getStatusManager() {
/* 1121 */     if (this.statusManager == null) {
/* 1122 */       this.statusManager = StatusManager.newDefaultInstance();
/*      */     }
/* 1124 */     return this.statusManager;
/*      */   }
/*      */ 
/*      */   
/* 1128 */   public void setStatusManager(StatusManager statusManager) { this.statusManager = statusManager; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1136 */   public String[] getIgnorableFilenames() { return (String[])this.listingIgnore.toArray((Object[])new String[this.listingIgnore.size()]); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1146 */   public void filterIgnore(Collection names) { names.removeAll(this.listingIgnore); }
/*      */ 
/*      */ 
/*      */   
/* 1150 */   public boolean isCheckUpToDate() { return this.checkUpToDate; }
/*      */ 
/*      */ 
/*      */   
/* 1154 */   public void setCheckUpToDate(boolean checkUpToDate) { this.checkUpToDate = checkUpToDate; }
/*      */ 
/*      */ 
/*      */   
/* 1158 */   public boolean doValidate() { return this.validate; }
/*      */ 
/*      */ 
/*      */   
/* 1162 */   public void setValidate(boolean validate) { this.validate = validate; }
/*      */ 
/*      */ 
/*      */   
/* 1166 */   public String getVariable(String name) { return this.variableContainer.getVariable(name); }
/*      */ 
/*      */   
/*      */   public ConflictManager getDefaultConflictManager() {
/* 1170 */     if (this.defaultConflictManager == null) {
/* 1171 */       this.defaultConflictManager = (ConflictManager)new LatestConflictManager(getDefaultLatestStrategy());
/*      */     }
/* 1173 */     return this.defaultConflictManager;
/*      */   }
/*      */ 
/*      */   
/* 1177 */   public void setDefaultConflictManager(ConflictManager defaultConflictManager) { this.defaultConflictManager = defaultConflictManager; }
/*      */ 
/*      */   
/*      */   public LatestStrategy getDefaultLatestStrategy() {
/* 1181 */     if (this.defaultLatestStrategy == null) {
/* 1182 */       this.defaultLatestStrategy = (LatestStrategy)new LatestRevisionStrategy();
/*      */     }
/* 1184 */     return this.defaultLatestStrategy;
/*      */   }
/*      */ 
/*      */   
/* 1188 */   public void setDefaultLatestStrategy(LatestStrategy defaultLatestStrategy) { this.defaultLatestStrategy = defaultLatestStrategy; }
/*      */ 
/*      */   
/*      */   public LockStrategy getDefaultLockStrategy() {
/* 1192 */     if (this.defaultLockStrategy == null) {
/* 1193 */       this.defaultLockStrategy = (LockStrategy)new NoLockStrategy();
/*      */     }
/* 1195 */     return this.defaultLockStrategy;
/*      */   }
/*      */ 
/*      */   
/* 1199 */   public void setDefaultLockStrategy(LockStrategy defaultLockStrategy) { this.defaultLockStrategy = defaultLockStrategy; }
/*      */ 
/*      */   
/*      */   public RepositoryCacheManager getDefaultRepositoryCacheManager() {
/* 1203 */     if (this.defaultRepositoryCacheManager == null) {
/* 1204 */       this.defaultRepositoryCacheManager = (RepositoryCacheManager)new DefaultRepositoryCacheManager(""default-cache"", this, getDefaultRepositoryCacheBasedir());
/*      */ 
/*      */       
/* 1207 */       addRepositoryCacheManager(this.defaultRepositoryCacheManager);
/*      */     } 
/* 1209 */     return this.defaultRepositoryCacheManager;
/*      */   }
/*      */ 
/*      */   
/* 1213 */   public void setDefaultRepositoryCacheManager(RepositoryCacheManager cache) { this.defaultRepositoryCacheManager = cache; }
/*      */ 
/*      */   
/*      */   public ResolutionCacheManager getResolutionCacheManager() {
/* 1217 */     if (this.resolutionCacheManager == null) {
/* 1218 */       this.resolutionCacheManager = (ResolutionCacheManager)new DefaultResolutionCacheManager(getDefaultResolutionCacheBasedir());
/*      */     }
/*      */     
/* 1221 */     return this.resolutionCacheManager;
/*      */   }
/*      */ 
/*      */   
/* 1225 */   public void setResolutionCacheManager(ResolutionCacheManager resolutionCacheManager) { this.resolutionCacheManager = resolutionCacheManager; }
/*      */ 
/*      */   
/*      */   public void addTrigger(Trigger trigger) {
/* 1229 */     init(trigger);
/* 1230 */     this.triggers.add(trigger);
/*      */   }
/*      */ 
/*      */   
/* 1234 */   public List getTriggers() { return this.triggers; }
/*      */ 
/*      */ 
/*      */   
/* 1238 */   public void addConfigured(Trigger trigger) { addTrigger(trigger); }
/*      */ 
/*      */ 
/*      */   
/* 1242 */   public boolean isUseRemoteConfig() { return this.useRemoteConfig; }
/*      */ 
/*      */ 
/*      */   
/* 1246 */   public void setUseRemoteConfig(boolean useRemoteConfig) { this.useRemoteConfig = useRemoteConfig; }
/*      */ 
/*      */   
/*      */   public boolean logModulesInUse() {
/* 1250 */     String var = getVariable(""ivy.log.modules.in.use"");
/* 1251 */     return (var == null || Boolean.valueOf(var).booleanValue());
/*      */   }
/*      */   
/*      */   public boolean logModuleWhenFound() {
/* 1255 */     String var = getVariable(""ivy.log.module.when.found"");
/* 1256 */     return (var == null || Boolean.valueOf(var).booleanValue());
/*      */   }
/*      */   
/*      */   public boolean logResolvedRevision() {
/* 1260 */     String var = getVariable(""ivy.log.resolved.revision"");
/* 1261 */     return (var == null || Boolean.valueOf(var).booleanValue());
/*      */   }
/*      */   
/*      */   public boolean debugConflictResolution() {
/* 1265 */     if (this.debugConflictResolution == null) {
/* 1266 */       String var = getVariable(""ivy.log.conflict.resolution"");
/* 1267 */       this.debugConflictResolution = Boolean.valueOf((var != null && Boolean.valueOf(var).booleanValue()));
/*      */     } 
/*      */     
/* 1270 */     return this.debugConflictResolution.booleanValue();
/*      */   }
/*      */   
/*      */   public final boolean debugLocking() {
/* 1274 */     if (this.debugLocking == null) {
/* 1275 */       String var = getVariable(""ivy.log.locking"");
/* 1276 */       this.debugLocking = Boolean.valueOf((var != null && Boolean.valueOf(var).booleanValue()));
/*      */     } 
/*      */     
/* 1279 */     return this.debugLocking.booleanValue();
/*      */   }
/*      */   
/*      */   public boolean dumpMemoryUsage() {
/* 1283 */     if (this.dumpMemoryUsage == null) {
/* 1284 */       String var = getVariable(""ivy.log.memory"");
/* 1285 */       this.dumpMemoryUsage = Boolean.valueOf((var != null && Boolean.valueOf(var).booleanValue()));
/*      */     } 
/*      */     
/* 1288 */     return this.dumpMemoryUsage.booleanValue();
/*      */   }
/*      */ 
/*      */ 
/*      */   
/* 1293 */   public boolean logNotConvertedExclusionRule() { return this.logNotConvertedExclusionRule; }
/*      */ 
/*      */ 
/*      */   
/* 1297 */   public void setLogNotConvertedExclusionRule(boolean logNotConvertedExclusionRule) { this.logNotConvertedExclusionRule = logNotConvertedExclusionRule; }
/*      */ 
/*      */   
/*      */   private void init(Object obj) {
/* 1301 */     if (obj instanceof IvySettingsAware) {
/* 1302 */       ((IvySettingsAware)obj).setSettings(this);
/* 1303 */     } else if (obj instanceof DependencyResolver) {
/* 1304 */       ((DependencyResolver)obj).setSettings(this);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private static class ModuleSettings
/*      */   {
/*      */     private String resolverName;
/*      */     
/*      */     private String branch;
/*      */     
/*      */     private String conflictManager;
/*      */     private String resolveMode;
/*      */     
/*      */     public ModuleSettings(String resolver, String branchName, String conflictMgr, String resolveMode) {
/* 1319 */       this.resolverName = resolver;
/* 1320 */       this.branch = branchName;
/* 1321 */       this.conflictManager = conflictMgr;
/* 1322 */       this.resolveMode = resolveMode;
/*      */     }
/*      */ 
/*      */     
/* 1326 */     public String toString() { return ((this.resolverName != null) ? (""resolver: "" + this.resolverName) : """") + ((this.branch != null) ? (""branch: "" + this.branch) : """") + ((this.conflictManager != null) ? (""conflictManager: "" + this.conflictManager) : """") + ((this.resolveMode != null) ? (""resolveMode: "" + this.resolveMode) : """"); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1333 */     public String getBranch() { return this.branch; }
/*      */ 
/*      */ 
/*      */     
/* 1337 */     public String getResolverName() { return this.resolverName; }
/*      */ 
/*      */ 
/*      */     
/* 1341 */     public String getConflictManager() { return this.conflictManager; }
/*      */ 
/*      */ 
/*      */     
/* 1345 */     public String getResolveMode() { return this.resolveMode; }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/* 1350 */   public long getInterruptTimeout() { return 2000L; }
/*      */ 
/*      */ 
/*      */   
/* 1354 */   public Collection getResolvers() { return this.resolversMap.values(); }
/*      */ 
/*      */ 
/*      */   
/* 1358 */   public Collection getResolverNames() { return this.resolversMap.keySet(); }
/*      */ 
/*      */ 
/*      */   
/* 1362 */   public Collection getMatcherNames() { return this.matchers.keySet(); }
/*      */ 
/*      */ 
/*      */   
/* 1366 */   public IvyVariableContainer getVariableContainer() { return this.variableContainer; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1375 */   public void setVariableContainer(IvyVariableContainer variables) { this.variableContainer = variables; }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1380 */   public RelativeUrlResolver getRelativeUrlResolver() { return (RelativeUrlResolver)new NormalRelativeUrlResolver(); }
/*      */ 
/*      */   
/*      */   public void setDefaultCacheIvyPattern(String defaultCacheIvyPattern) {
/* 1384 */     CacheUtil.checkCachePattern(defaultCacheIvyPattern);
/* 1385 */     this.defaultCacheIvyPattern = defaultCacheIvyPattern;
/*      */   }
/*      */ 
/*      */   
/* 1389 */   public String getDefaultCacheIvyPattern() { return this.defaultCacheIvyPattern; }
/*      */ 
/*      */   
/*      */   public void setDefaultCacheArtifactPattern(String defaultCacheArtifactPattern) {
/* 1393 */     CacheUtil.checkCachePattern(defaultCacheArtifactPattern);
/* 1394 */     this.defaultCacheArtifactPattern = defaultCacheArtifactPattern;
/*      */   }
/*      */ 
/*      */   
/* 1398 */   public String getDefaultCacheArtifactPattern() { return this.defaultCacheArtifactPattern; }
/*      */ 
/*      */ 
/*      */   
/* 1402 */   public void setDefaultUseOrigin(boolean useOrigin) { this.defaultUseOrigin = useOrigin; }
/*      */ 
/*      */ 
/*      */   
/* 1406 */   public boolean isDefaultUseOrigin() { return this.defaultUseOrigin; }
/*      */ 
/*      */   
/*      */   public void useDeprecatedUseOrigin() {
/* 1410 */     Message.deprecated(""useOrigin option is deprecated when calling resolve, use useOrigin setting on the cache implementation instead"");
/*      */     
/* 1412 */     setDefaultUseOrigin(true);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void validate() {
/* 1424 */     validateAll(this.resolversMap.values());
/* 1425 */     validateAll(this.conflictsManager.values());
/* 1426 */     validateAll(this.latestStrategies.values());
/* 1427 */     validateAll(this.lockStrategies.values());
/* 1428 */     validateAll(this.repositoryCacheManagers.values());
/* 1429 */     validateAll(this.reportOutputters.values());
/* 1430 */     validateAll(this.circularDependencyStrategies.values());
/* 1431 */     validateAll(this.versionMatchers.values());
/* 1432 */     validateAll(this.namespaces.values());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void validateAll(Collection values) {
/* 1444 */     for (Iterator iterator = values.iterator(); iterator.hasNext(); ) {
/* 1445 */       Object object = iterator.next();
/* 1446 */       if (object instanceof Validatable)
/* 1447 */         ((Validatable)object).validate(); 
/*      */     } 
/*      */   }
/*      */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\IvySettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.IvyVariableContainer,"package org.apache.ivy.core.settings;
public interface IvyVariableContainer extends Cloneable {
  void setVariable(String paramString1, String paramString2, boolean paramBoolean);
  String getVariable(String paramString);
  void setEnvironmentPrefix(String paramString);
  Object clone();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\IvyVariableContainer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.IvyVariableContainerImpl,"/*    */ package org.apache.ivy.core.settings;
/*    */ 
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.IvyPatternHelper;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IvyVariableContainerImpl
/*    */   implements IvyVariableContainer
/*    */ {
/*    */   private Map variables;
/*    */   private String envPrefix;
/*    */   
/* 32 */   public IvyVariableContainerImpl() { this.variables = new HashMap(); }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public IvyVariableContainerImpl(Map variables) { this.variables = variables; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void setVariable(String varName, String value, boolean overwrite) {
/* 46 */     if (overwrite || !this.variables.containsKey(varName)) {
/* 47 */       Message.debug(""setting '"" + varName + ""' to '"" + value + ""'"");
/* 48 */       this.variables.put(varName, substitute(value));
/*    */     } else {
/* 50 */       Message.debug(""'"" + varName + ""' already set: discarding '"" + value + ""'"");
/*    */     } 
/*    */   }
/*    */   
/*    */   public void setEnvironmentPrefix(String prefix) {
/* 55 */     if (prefix != null && !prefix.endsWith(""."")) {
/* 56 */       this.envPrefix = prefix + ""."";
/*    */     } else {
/* 58 */       this.envPrefix = prefix;
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 63 */   protected String substitute(String value) { return IvyPatternHelper.substituteVariables(value, this); }
/*    */ 
/*    */ 
/*    */   
/* 67 */   protected Map getVariables() { return this.variables; }
/*    */ 
/*    */ 
/*    */   
/* 71 */   protected String getEnvironmentPrefix() { return this.envPrefix; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public String getVariable(String name) {
/* 80 */     String val = null;
/* 81 */     if (this.envPrefix != null && name.startsWith(this.envPrefix)) {
/* 82 */       val = System.getenv(name.substring(this.envPrefix.length()));
/*    */     } else {
/* 84 */       val = (String)this.variables.get(name);
/*    */     } 
/*    */     
/* 87 */     return val;
/*    */   }
/*    */   
/*    */   public Object clone() {
/*    */     IvyVariableContainerImpl clone;
/*    */     try {
/* 93 */       clone = (IvyVariableContainerImpl)super.clone();
/* 94 */     } catch (CloneNotSupportedException e) {
/* 95 */       throw new RuntimeException(""unable to clone a "" + getClass());
/*    */     } 
/* 97 */     clone.variables = new HashMap(this.variables);
/* 98 */     return clone;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\IvyVariableContainerImpl.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.Validatable,"package org.apache.ivy.core.settings;
public interface Validatable {
  void validate();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\Validatable.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.settings.XmlSettingsParser,"/*     */ package org.apache.ivy.core.settings;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*     */ import org.apache.ivy.core.module.status.StatusManager;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ import org.apache.ivy.plugins.lock.LockStrategy;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Configurator;
/*     */ import org.apache.ivy.util.FileResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.url.CredentialsStore;
/*     */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlSettingsParser
/*     */   extends DefaultHandler
/*     */ {
/*     */   private Configurator configurator;
/*     */   
/*     */   private static final class IvyVariableContainerWrapper
/*     */     implements IvyVariableContainer
/*     */   {
/*  66 */     private static final Collection SETTINGS_VARIABLES = Arrays.asList(new String[] { ""ivy.settings.dir"", ""ivy.settings.url"", ""ivy.settings.file"", ""ivy.conf.dir"", ""ivy.conf.url"", ""ivy.conf.file"" });
/*     */ 
/*     */     
/*     */     private final IvyVariableContainer variables;
/*     */ 
/*     */     
/*  72 */     private Map localVariables = new HashMap();
/*     */ 
/*     */     
/*  75 */     private IvyVariableContainerWrapper(IvyVariableContainer variables) { this.variables = variables; }
/*     */ 
/*     */     
/*     */     public void setVariable(String varName, String value, boolean overwrite) {
/*  79 */       if (SETTINGS_VARIABLES.contains(varName)) {
/*  80 */         if (!this.localVariables.containsKey(varName) || overwrite) {
/*  81 */           this.localVariables.put(varName, value);
/*     */         }
/*     */       } else {
/*  84 */         this.variables.setVariable(varName, value, overwrite);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*  89 */     public void setEnvironmentPrefix(String prefix) { this.variables.setEnvironmentPrefix(prefix); }
/*     */ 
/*     */     
/*     */     public String getVariable(String name) {
/*  93 */       if (this.localVariables.containsKey(name)) {
/*  94 */         return (String)this.localVariables.get(name);
/*     */       }
/*  96 */       return this.variables.getVariable(name);
/*     */     }
/*     */ 
/*     */     
/* 100 */     public Object clone() { throw new UnsupportedOperationException(); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   private List configuratorTags = Arrays.asList(new String[] { ""resolvers"", ""namespaces"", ""parsers"", ""latest-strategies"", ""conflict-managers"", ""outputters"", ""version-matchers"", ""statuses"", ""circular-dependency-strategies"", ""triggers"", ""lock-strategies"", ""caches"" });
/*     */ 
/*     */   
/*     */   private IvySettings ivy;
/*     */ 
/*     */   
/*     */   private String defaultResolver;
/*     */ 
/*     */   
/*     */   private String defaultCM;
/*     */   
/*     */   private String defaultLatest;
/*     */   
/*     */   private String defaultCacheManager;
/*     */   
/*     */   private String defaultCircular;
/*     */   
/*     */   private String defaultLock;
/*     */   
/*     */   private String currentConfiguratorTag;
/*     */   
/*     */   private URL settings;
/*     */   
/*     */   private boolean deprecatedMessagePrinted = false;
/*     */ 
/*     */   
/* 132 */   public XmlSettingsParser(IvySettings ivy) { this.ivy = ivy; }
/*     */ 
/*     */   
/*     */   public void parse(URL settings) throws ParseException, IOException {
/* 136 */     this.configurator = new Configurator();
/* 137 */     this.configurator.setFileResolver(new FileResolver() { private final XmlSettingsParser this$0;
/*     */           
/* 139 */           public File resolveFile(String path, String filename) { return Checks.checkAbsolute(path, filename); }
/*     */            }
/*     */       );
/*     */     
/* 143 */     Map typeDefs = this.ivy.getTypeDefs();
/* 144 */     for (Iterator iter = typeDefs.keySet().iterator(); iter.hasNext(); ) {
/* 145 */       String name = iter.next();
/* 146 */       this.configurator.typeDef(name, (Class)typeDefs.get(name));
/*     */     } 
/*     */     
/* 149 */     doParse(settings);
/*     */   }
/*     */   
/*     */   private void doParse(URL settingsUrl) throws IOException, ParseException {
/* 153 */     this.settings = settingsUrl;
/* 154 */     InputStream stream = null;
/*     */     try {
/* 156 */       stream = URLHandlerRegistry.getDefault().openStream(settingsUrl);
/* 157 */       InputSource inSrc = new InputSource(stream);
/* 158 */       inSrc.setSystemId(settingsUrl.toExternalForm());
/* 159 */       SAXParserFactory.newInstance().newSAXParser().parse(settingsUrl.toExternalForm(), this);
/* 160 */       this.ivy.validate();
/* 161 */     } catch (IOException e) {
/* 162 */       throw e;
/* 163 */     } catch (Exception e) {
/* 164 */       ParseException pe = new ParseException(""failed to load settings from "" + settingsUrl + "": "" + e.getMessage(), 0);
/*     */       
/* 166 */       pe.initCause(e);
/* 167 */       throw pe;
/*     */     } finally {
/* 169 */       if (stream != null) {
/*     */         try {
/* 171 */           stream.close();
/* 172 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parse(Configurator configurator, URL configuration) throws IOException, ParseException {
/* 181 */     this.configurator = configurator;
/* 182 */     doParse(configuration);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void startElement(String uri, String localName, String qName, Attributes att) throws SAXException {
/* 188 */     Map attributes = new HashMap();
/* 189 */     for (int i = 0; i < att.getLength(); i++) {
/* 190 */       attributes.put(att.getQName(i), this.ivy.substitute(att.getValue(i)));
/*     */     }
/*     */     
/*     */     try {
/* 194 */       if (""ivyconf"".equals(qName)) {
/* 195 */         this.deprecatedMessagePrinted = true;
/* 196 */         Message.deprecated(""'ivyconf' element is deprecated, use 'ivysettings' instead ("" + this.settings + "")"");
/*     */       } 
/*     */       
/* 199 */       if (this.configurator.getCurrent() != null) {
/* 200 */         inConfiguratorStarted(qName, attributes);
/* 201 */       } else if (""classpath"".equals(qName)) {
/* 202 */         classpathStarted(attributes);
/* 203 */       } else if (""typedef"".equals(qName)) {
/* 204 */         typedefStarted(attributes);
/* 205 */       } else if (""property"".equals(qName)) {
/* 206 */         propertyStarted(attributes);
/* 207 */       } else if (""properties"".equals(qName)) {
/* 208 */         propertiesStarted(attributes);
/* 209 */       } else if (""include"".equals(qName)) {
/* 210 */         includeStarted(attributes);
/* 211 */       } else if (""settings"".equals(qName) || ""conf"".equals(qName)) {
/* 212 */         settingsStarted(qName, attributes);
/* 213 */       } else if (""caches"".equals(qName)) {
/* 214 */         cachesStarted(qName, attributes);
/* 215 */       } else if (""version-matchers"".equals(qName)) {
/* 216 */         versionMatchersStarted(qName, attributes);
/* 217 */       } else if (""statuses"".equals(qName)) {
/* 218 */         statusesStarted(qName, attributes);
/* 219 */       } else if (this.configuratorTags.contains(qName)) {
/* 220 */         anyConfiguratorStarted(qName);
/* 221 */       } else if (""macrodef"".equals(qName)) {
/* 222 */         macrodefStarted(qName, attributes);
/* 223 */       } else if (""module"".equals(qName)) {
/* 224 */         moduleStarted(attributes);
/* 225 */       } else if (""credentials"".equals(qName)) {
/* 226 */         credentialsStarted(attributes);
/*     */       } 
/* 228 */     } catch (ParseException ex) {
/* 229 */       SAXException sax = new SAXException(""problem in config file: "" + ex.getMessage(), ex);
/* 230 */       sax.initCause(ex);
/* 231 */       throw sax;
/* 232 */     } catch (IOException ex) {
/* 233 */       SAXException sax = new SAXException(""io problem while parsing config file: "" + ex.getMessage(), ex);
/*     */       
/* 235 */       sax.initCause(ex);
/* 236 */       throw sax;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void credentialsStarted(Map attributes) {
/* 241 */     String realm = (String)attributes.remove(""realm"");
/* 242 */     String host = (String)attributes.remove(""host"");
/* 243 */     String userName = (String)attributes.remove(""username"");
/* 244 */     String passwd = (String)attributes.remove(""passwd"");
/* 245 */     CredentialsStore.INSTANCE.addCredentials(realm, host, userName, passwd);
/*     */   }
/*     */   
/*     */   private void moduleStarted(Map attributes) {
/* 249 */     attributes.put(""module"", attributes.remove(""name""));
/* 250 */     String resolver = (String)attributes.remove(""resolver"");
/* 251 */     String branch = (String)attributes.remove(""branch"");
/* 252 */     String cm = (String)attributes.remove(""conflict-manager"");
/* 253 */     String resolveMode = (String)attributes.remove(""resolveMode"");
/* 254 */     String matcher = (String)attributes.remove(""matcher"");
/* 255 */     matcher = (matcher == null) ? ""exactOrRegexp"" : matcher;
/* 256 */     this.ivy.addModuleConfiguration(attributes, this.ivy.getMatcher(matcher), resolver, branch, cm, resolveMode);
/*     */   }
/*     */ 
/*     */   
/*     */   private void macrodefStarted(String qName, Map attributes) {
/* 261 */     this.currentConfiguratorTag = qName;
/* 262 */     Configurator.MacroDef macrodef = this.configurator.startMacroDef((String)attributes.get(""name""));
/*     */     
/* 264 */     macrodef.addAttribute(""name"", null);
/*     */   }
/*     */   
/*     */   private void anyConfiguratorStarted(String qName) {
/* 268 */     this.currentConfiguratorTag = qName;
/* 269 */     this.configurator.setRoot(this.ivy);
/*     */   }
/*     */   
/*     */   private void statusesStarted(String qName, Map attributes) {
/* 273 */     this.currentConfiguratorTag = qName;
/* 274 */     StatusManager m = new StatusManager();
/* 275 */     String defaultStatus = (String)attributes.get(""default"");
/* 276 */     if (defaultStatus != null) {
/* 277 */       m.setDefaultStatus(defaultStatus);
/*     */     }
/* 279 */     this.ivy.setStatusManager(m);
/* 280 */     this.configurator.setRoot(m);
/*     */   }
/*     */   
/*     */   private void versionMatchersStarted(String qName, Map attributes) {
/* 284 */     anyConfiguratorStarted(qName);
/* 285 */     if (""true"".equals(attributes.get(""usedefaults""))) {
/* 286 */       this.ivy.configureDefaultVersionMatcher();
/*     */     }
/*     */   }
/*     */   
/*     */   private void cachesStarted(String qName, Map attributes) {
/* 291 */     anyConfiguratorStarted(qName);
/* 292 */     this.defaultLock = (String)attributes.get(""lockStrategy"");
/* 293 */     this.defaultCacheManager = (String)attributes.get(""default"");
/*     */     
/* 295 */     String cache = (String)attributes.get(""defaultCacheDir"");
/* 296 */     if (cache != null) {
/* 297 */       this.ivy.setDefaultCache(Checks.checkAbsolute(cache, ""defaultCacheDir""));
/*     */     }
/* 299 */     String up2d = (String)attributes.get(""checkUpToDate"");
/* 300 */     if (up2d != null) {
/* 301 */       this.ivy.setCheckUpToDate(Boolean.valueOf(up2d).booleanValue());
/*     */     }
/* 303 */     String resolutionDir = (String)attributes.get(""resolutionCacheDir"");
/* 304 */     if (resolutionDir != null) {
/* 305 */       this.ivy.setDefaultResolutionCacheBasedir(resolutionDir);
/*     */     }
/* 307 */     String useOrigin = (String)attributes.get(""useOrigin"");
/* 308 */     if (useOrigin != null) {
/* 309 */       this.ivy.setDefaultUseOrigin(Boolean.valueOf(useOrigin).booleanValue());
/*     */     }
/* 311 */     String cacheIvyPattern = (String)attributes.get(""ivyPattern"");
/* 312 */     if (cacheIvyPattern != null) {
/* 313 */       this.ivy.setDefaultCacheIvyPattern(cacheIvyPattern);
/*     */     }
/* 315 */     String cacheArtPattern = (String)attributes.get(""artifactPattern"");
/* 316 */     if (cacheArtPattern != null) {
/* 317 */       this.ivy.setDefaultCacheArtifactPattern(cacheArtPattern);
/*     */     }
/* 319 */     String repositoryDir = (String)attributes.get(""repositoryCacheDir"");
/* 320 */     if (repositoryDir != null) {
/* 321 */       this.ivy.setDefaultRepositoryCacheBasedir(repositoryDir);
/*     */     }
/*     */   }
/*     */   
/*     */   private void settingsStarted(String qName, Map attributes) {
/* 326 */     if (""conf"".equals(qName) && !this.deprecatedMessagePrinted) {
/* 327 */       Message.deprecated(""'conf' is deprecated, use 'settings' instead ("" + this.settings + "")"");
/*     */     }
/*     */     
/* 330 */     String cache = (String)attributes.get(""defaultCache"");
/* 331 */     if (cache != null) {
/* 332 */       Message.deprecated(""'defaultCache' is deprecated, use 'caches[@defaultCacheDir]' instead ("" + this.settings + "")"");
/*     */       
/* 334 */       this.ivy.setDefaultCache(Checks.checkAbsolute(cache, ""defaultCache""));
/*     */     } 
/* 336 */     String defaultBranch = (String)attributes.get(""defaultBranch"");
/* 337 */     if (defaultBranch != null) {
/* 338 */       this.ivy.setDefaultBranch(defaultBranch);
/*     */     }
/* 340 */     String defaultResolveMode = (String)attributes.get(""defaultResolveMode"");
/* 341 */     if (defaultResolveMode != null) {
/* 342 */       this.ivy.setDefaultResolveMode(defaultResolveMode);
/*     */     }
/* 344 */     String validate = (String)attributes.get(""validate"");
/* 345 */     if (validate != null) {
/* 346 */       this.ivy.setValidate(Boolean.valueOf(validate).booleanValue());
/*     */     }
/* 348 */     String up2d = (String)attributes.get(""checkUpToDate"");
/* 349 */     if (up2d != null) {
/* 350 */       Message.deprecated(""'checkUpToDate' is deprecated, use 'caches[@checkUpToDate]' instead ("" + this.settings + "")"");
/*     */       
/* 352 */       this.ivy.setCheckUpToDate(Boolean.valueOf(up2d).booleanValue());
/*     */     } 
/* 354 */     String useRemoteConfig = (String)attributes.get(""useRemoteConfig"");
/* 355 */     if (useRemoteConfig != null) {
/* 356 */       this.ivy.setUseRemoteConfig(Boolean.valueOf(useRemoteConfig).booleanValue());
/*     */     }
/*     */     
/* 359 */     String cacheIvyPattern = (String)attributes.get(""cacheIvyPattern"");
/* 360 */     if (cacheIvyPattern != null) {
/* 361 */       Message.deprecated(""'cacheIvyPattern' is deprecated, use 'caches[@ivyPattern]' instead ("" + this.settings + "")"");
/*     */ 
/*     */       
/* 364 */       this.ivy.setDefaultCacheIvyPattern(cacheIvyPattern);
/*     */     } 
/* 366 */     String cacheArtPattern = (String)attributes.get(""cacheArtifactPattern"");
/* 367 */     if (cacheArtPattern != null) {
/* 368 */       Message.deprecated(""'cacheArtifactPattern' is deprecated, use 'caches[@artifactPattern]' instead ("" + this.settings + "")"");
/*     */ 
/*     */       
/* 371 */       this.ivy.setDefaultCacheArtifactPattern(cacheArtPattern);
/*     */     } 
/*     */ 
/*     */     
/* 375 */     this.defaultResolver = (String)attributes.get(""defaultResolver"");
/* 376 */     this.defaultCM = (String)attributes.get(""defaultConflictManager"");
/* 377 */     this.defaultLatest = (String)attributes.get(""defaultLatestStrategy"");
/* 378 */     this.defaultCircular = (String)attributes.get(""circularDependencyStrategy"");
/*     */     
/* 380 */     String requestMethod = (String)attributes.get(""httpRequestMethod"");
/* 381 */     if (""head"".equalsIgnoreCase(requestMethod)) {
/* 382 */       URLHandlerRegistry.getHttp().setRequestMethod(2);
/* 383 */     } else if (""get"".equalsIgnoreCase(requestMethod)) {
/* 384 */       URLHandlerRegistry.getHttp().setRequestMethod(1);
/* 385 */     } else if (requestMethod != null && requestMethod.trim().length() > 0) {
/* 386 */       throw new IllegalArgumentException(""Invalid httpRequestMethod specified, must be one of {'HEAD', 'GET'}"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void includeStarted(Map attributes) throws IOException, ParseException {
/* 392 */     IvyVariableContainer variables = this.ivy.getVariableContainer();
/* 393 */     this.ivy.setVariableContainer(new IvyVariableContainerWrapper(variables));
/*     */     try {
/* 395 */       String propFilePath = (String)attributes.get(""file"");
/* 396 */       URL settingsURL = null;
/* 397 */       if (propFilePath == null) {
/* 398 */         propFilePath = (String)attributes.get(""url"");
/* 399 */         if (propFilePath == null) {
/* 400 */           throw new IllegalArgumentException(""bad include tag: specify file or url to include"");
/*     */         }
/*     */ 
/*     */         
/*     */         try {
/* 405 */           settingsURL = new URL(propFilePath);
/* 406 */         } catch (MalformedURLException e) {
/*     */           
/* 408 */           settingsURL = new URL(this.settings, propFilePath);
/*     */         } 
/* 410 */         Message.verbose(""including url: "" + settingsURL.toString());
/* 411 */         this.ivy.setSettingsVariables(settingsURL);
/*     */       } else {
/*     */         
/* 414 */         settingsURL = urlFromFileAttribute(propFilePath);
/* 415 */         Message.verbose(""including file: "" + settingsURL);
/* 416 */         if (""file"".equals(settingsURL.getProtocol())) {
/* 417 */           this.ivy.setSettingsVariables(Checks.checkAbsolute(settingsURL.getPath(), ""settings include path""));
/*     */         }
/*     */         else {
/*     */           
/* 421 */           this.ivy.setSettingsVariables(settingsURL);
/*     */         } 
/*     */       } 
/* 424 */       (new XmlSettingsParser(this.ivy)).parse(this.configurator, settingsURL);
/*     */     } finally {
/* 426 */       this.ivy.setVariableContainer(variables);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private URL urlFromFileAttribute(String filePath) throws MalformedURLException {
/*     */     try {
/* 436 */       return new URL(filePath);
/* 437 */     } catch (MalformedURLException e) {
/*     */ 
/*     */ 
/*     */       
/* 441 */       File incFile = new File(filePath);
/* 442 */       if (incFile.isAbsolute())
/* 443 */         return incFile.toURI().toURL(); 
/* 444 */       if (""file"".equals(this.settings.getProtocol())) {
/*     */         try {
/* 446 */           File settingsFile = new File(new URI(this.settings.toExternalForm()));
/* 447 */           return (new File(settingsFile.getParentFile(), filePath)).toURI().toURL();
/* 448 */         } catch (URISyntaxException e) {
/* 449 */           return new URL(this.settings, filePath);
/*     */         } 
/*     */       }
/* 452 */       return new URL(this.settings, filePath);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void propertiesStarted(Map attributes) throws IOException {
/* 457 */     String propFilePath = (String)attributes.get(""file"");
/* 458 */     String environmentPrefix = (String)attributes.get(""environment"");
/* 459 */     if (propFilePath != null) {
/* 460 */       String overrideStr = (String)attributes.get(""override"");
/* 461 */       boolean override = (overrideStr == null) ? true : Boolean.valueOf(overrideStr).booleanValue();
/*     */       
/* 463 */       Message.verbose(""loading properties: "" + propFilePath);
/* 464 */       URL fileUrl = urlFromFileAttribute(propFilePath);
/* 465 */       this.ivy.loadProperties(fileUrl, override);
/* 466 */     } else if (environmentPrefix != null) {
/* 467 */       this.ivy.getVariableContainer().setEnvironmentPrefix(environmentPrefix);
/*     */     } else {
/* 469 */       throw new IllegalArgumentException(""Didn't find a 'file' or 'environment' attribute on the 'properties' element"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void propertyStarted(Map attributes) {
/* 476 */     String name = (String)attributes.get(""name"");
/* 477 */     String value = (String)attributes.get(""value"");
/* 478 */     String override = (String)attributes.get(""override"");
/* 479 */     if (name == null) {
/* 480 */       throw new IllegalArgumentException(""missing attribute name on property tag"");
/*     */     }
/* 482 */     if (value == null) {
/* 483 */       throw new IllegalArgumentException(""missing attribute value on property tag"");
/*     */     }
/* 485 */     this.ivy.setVariable(name, value, (override == null) ? true : Boolean.valueOf(override).booleanValue());
/*     */   }
/*     */ 
/*     */   
/*     */   private void typedefStarted(Map attributes) {
/* 490 */     String name = (String)attributes.get(""name"");
/* 491 */     String className = (String)attributes.get(""classname"");
/* 492 */     Class clazz = this.ivy.typeDef(name, className);
/* 493 */     this.configurator.typeDef(name, clazz);
/*     */   }
/*     */   
/*     */   private void classpathStarted(Map attributes) throws MalformedURLException {
/* 497 */     String urlStr = (String)attributes.get(""url"");
/* 498 */     URL url = null;
/* 499 */     if (urlStr == null) {
/* 500 */       String file = (String)attributes.get(""file"");
/* 501 */       if (file == null) {
/* 502 */         throw new IllegalArgumentException(""either url or file should be given for classpath element"");
/*     */       }
/*     */       
/* 505 */       url = Checks.checkAbsolute(file, ""classpath"").toURI().toURL();
/*     */     } else {
/*     */       
/* 508 */       url = new URL(urlStr);
/*     */     } 
/* 510 */     this.ivy.addClasspathURL(url);
/*     */   }
/*     */   
/*     */   private void inConfiguratorStarted(String qName, Map attributes) {
/* 514 */     if (""macrodef"".equals(this.currentConfiguratorTag) && this.configurator.getTypeDef(qName) != null) {
/*     */       
/* 516 */       String name = (String)attributes.get(""name"");
/* 517 */       if (name == null) {
/* 518 */         attributes.put(""name"", ""@{name}"");
/* 519 */       } else if (name.indexOf(""@{name}"") != -1) {
/* 520 */         attributes.put(""name"", name);
/*     */       } else {
/* 522 */         attributes.put(""name"", ""@{name}-"" + name);
/*     */       } 
/*     */     } 
/* 525 */     if (attributes.get(""ref"") != null) {
/* 526 */       if (attributes.size() != 1) {
/* 527 */         throw new IllegalArgumentException(""ref attribute should be the only one ! found "" + attributes.size() + "" in "" + qName);
/*     */       }
/*     */ 
/*     */       
/* 531 */       String name = attributes.get(""ref"");
/* 532 */       Object child = null;
/* 533 */       if (""resolvers"".equals(this.currentConfiguratorTag) || ""resolver"".equals(qName)) {
/* 534 */         child = this.ivy.getResolver(name);
/* 535 */         if (child == null) {
/* 536 */           throw new IllegalArgumentException(""unknown resolver "" + name + "": resolver should be defined before being referenced"");
/*     */         }
/*     */       }
/* 539 */       else if (""latest-strategies"".equals(this.currentConfiguratorTag)) {
/* 540 */         child = this.ivy.getLatestStrategy(name);
/* 541 */         if (child == null) {
/* 542 */           throw new IllegalArgumentException(""unknown latest strategy "" + name + "": latest strategy should be defined before being referenced"");
/*     */         }
/*     */       }
/* 545 */       else if (""conflict-managers"".equals(this.currentConfiguratorTag)) {
/* 546 */         child = this.ivy.getConflictManager(name);
/* 547 */         if (child == null) {
/* 548 */           throw new IllegalArgumentException(""unknown conflict manager "" + name + "": conflict manager should be defined before being referenced"");
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 553 */       if (child == null) {
/* 554 */         throw new IllegalArgumentException(""bad reference "" + name);
/*     */       }
/* 556 */       this.configurator.addChild(qName, child);
/*     */     } else {
/* 558 */       this.configurator.startCreateChild(qName);
/* 559 */       for (Iterator iter = attributes.keySet().iterator(); iter.hasNext(); ) {
/* 560 */         String attName = iter.next();
/* 561 */         this.configurator.setAttribute(attName, attributes.get(attName));
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void endElement(String uri, String localName, String qName) throws SAXException {
/* 568 */     if (this.configurator.getCurrent() != null) {
/* 569 */       if (this.configuratorTags.contains(qName) && this.configurator.getDepth() == 1) {
/* 570 */         this.configurator.clear();
/* 571 */         this.currentConfiguratorTag = null;
/* 572 */       } else if (""macrodef"".equals(qName) && this.configurator.getDepth() == 1) {
/* 573 */         this.configurator.endMacroDef();
/* 574 */         this.currentConfiguratorTag = null;
/*     */       } else {
/* 576 */         this.configurator.endCreateChild();
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   public void endDocument() throws SAXException {
/* 582 */     if (this.defaultResolver != null) {
/* 583 */       this.ivy.setDefaultResolver(this.ivy.substitute(this.defaultResolver));
/*     */     }
/* 585 */     if (this.defaultCM != null) {
/* 586 */       ConflictManager conflictManager = this.ivy.getConflictManager(this.ivy.substitute(this.defaultCM));
/* 587 */       if (conflictManager == null) {
/* 588 */         throw new IllegalArgumentException(""unknown conflict manager "" + this.ivy.substitute(this.defaultCM));
/*     */       }
/*     */       
/* 591 */       this.ivy.setDefaultConflictManager(conflictManager);
/*     */     } 
/* 593 */     if (this.defaultLatest != null) {
/* 594 */       LatestStrategy latestStrategy = this.ivy.getLatestStrategy(this.ivy.substitute(this.defaultLatest));
/* 595 */       if (latestStrategy == null) {
/* 596 */         throw new IllegalArgumentException(""unknown latest strategy "" + this.ivy.substitute(this.defaultLatest));
/*     */       }
/*     */       
/* 599 */       this.ivy.setDefaultLatestStrategy(latestStrategy);
/*     */     } 
/* 601 */     if (this.defaultCacheManager != null) {
/* 602 */       RepositoryCacheManager cache = this.ivy.getRepositoryCacheManager(this.ivy.substitute(this.defaultCacheManager));
/*     */       
/* 604 */       if (cache == null) {
/* 605 */         throw new IllegalArgumentException(""unknown cache manager "" + this.ivy.substitute(this.defaultCacheManager));
/*     */       }
/*     */       
/* 608 */       this.ivy.setDefaultRepositoryCacheManager(cache);
/*     */     } 
/* 610 */     if (this.defaultCircular != null) {
/* 611 */       CircularDependencyStrategy strategy = this.ivy.getCircularDependencyStrategy(this.ivy.substitute(this.defaultCircular));
/*     */       
/* 613 */       if (strategy == null) {
/* 614 */         throw new IllegalArgumentException(""unknown circular dependency strategy "" + this.ivy.substitute(this.defaultCircular));
/*     */       }
/*     */       
/* 617 */       this.ivy.setCircularDependencyStrategy(strategy);
/*     */     } 
/* 619 */     if (this.defaultLock != null) {
/* 620 */       LockStrategy strategy = this.ivy.getLockStrategy(this.ivy.substitute(this.defaultLock));
/* 621 */       if (strategy == null) {
/* 622 */         throw new IllegalArgumentException(""unknown lock strategy "" + this.ivy.substitute(this.defaultLock));
/*     */       }
/*     */       
/* 625 */       this.ivy.setDefaultLockStrategy(strategy);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\settings\XmlSettingsParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.CollectionOfModulesToSort,"/*     */ package org.apache.ivy.core.sort;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CollectionOfModulesToSort
/*     */ {
/*     */   private final List moduleDescriptors;
/*     */   private final VersionMatcher versionMatcher;
/*     */   private final Map modulesByModuleId;
/*     */   private final NonMatchingVersionReporter nonMatchingVersionReporter;
/*     */   
/*     */   public CollectionOfModulesToSort(Collection modulesToSort, VersionMatcher matcher, NonMatchingVersionReporter nonMatchingVersionReporter) {
/*  58 */     this.versionMatcher = matcher;
/*  59 */     this.nonMatchingVersionReporter = nonMatchingVersionReporter;
/*  60 */     this.modulesByModuleId = new HashMap();
/*  61 */     this.moduleDescriptors = new ArrayList(modulesToSort.size());
/*  62 */     for (Iterator it = modulesToSort.iterator(); it.hasNext(); ) {
/*  63 */       ModuleDescriptor md = it.next();
/*  64 */       ModuleInSort mdInSort = new ModuleInSort(md);
/*  65 */       this.moduleDescriptors.add(mdInSort);
/*  66 */       addToModulesByModuleId(md, mdInSort);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void addToModulesByModuleId(ModuleDescriptor md, ModuleInSort mdInSort) {
/*  71 */     ModuleId mdId = md.getModuleRevisionId().getModuleId();
/*  72 */     List mdInSortAsList = new LinkedList();
/*  73 */     mdInSortAsList.add(mdInSort);
/*  74 */     List previousList = this.modulesByModuleId.put(mdId, mdInSortAsList);
/*  75 */     if (previousList != null) {
/*  76 */       mdInSortAsList.addAll(previousList);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*  81 */   public Iterator iterator() { return this.moduleDescriptors.iterator(); }
/*     */ 
/*     */ 
/*     */   
/*  85 */   public int size() { return this.moduleDescriptors.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleInSort getModuleDescriptorDependency(DependencyDescriptor descriptor) {
/*  96 */     Collection modulesOfSameId = (Collection)this.modulesByModuleId.get(descriptor.getDependencyId());
/*     */     
/*  98 */     if (modulesOfSameId == null) {
/*  99 */       return null;
/*     */     }
/* 101 */     for (Iterator it = modulesOfSameId.iterator(); it.hasNext(); ) {
/* 102 */       ModuleInSort mdInSort = it.next();
/* 103 */       if (mdInSort.match(descriptor, this.versionMatcher)) {
/* 104 */         return mdInSort;
/*     */       }
/* 106 */       this.nonMatchingVersionReporter.reportNonMatchingVersion(descriptor, mdInSort.getSortedModuleDescriptor());
/*     */     } 
/*     */ 
/*     */     
/* 110 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\CollectionOfModulesToSort.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.MessageBasedNonMatchingVersionReporter,"/*    */ package org.apache.ivy.core.sort;
/*    */ 
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleId;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ abstract class MessageBasedNonMatchingVersionReporter
/*    */   implements NonMatchingVersionReporter
/*    */ {
/*    */   public void reportNonMatchingVersion(DependencyDescriptor descriptor, ModuleDescriptor md) {
/* 28 */     ModuleRevisionId dependencyRevisionId = descriptor.getDependencyRevisionId();
/* 29 */     ModuleRevisionId parentRevisionId = descriptor.getParentRevisionId();
/* 30 */     if (parentRevisionId == null) {
/*    */ 
/*    */ 
/*    */       
/* 34 */       reportMessage(""Non matching revision detected when sorting.  Dependency "" + dependencyRevisionId + "" doesn't match "" + md.getModuleRevisionId());
/*    */     } else {
/*    */       
/* 37 */       ModuleId parentModuleId = parentRevisionId.getModuleId();
/* 38 */       reportMessage(""Non matching revision detected when sorting.  "" + parentModuleId + "" depends on "" + dependencyRevisionId + "", doesn't match "" + md.getModuleRevisionId());
/*    */     } 
/*    */   }
/*    */   
/*    */   protected abstract void reportMessage(String paramString);
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\MessageBasedNonMatchingVersionReporter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.ModuleDescriptorSorter,"/*     */ package org.apache.ivy.core.sort;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyException;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ModuleDescriptorSorter
/*     */ {
/*     */   private final CollectionOfModulesToSort moduleDescriptors;
/*  43 */   private final List sorted = new LinkedList();
/*     */ 
/*     */   
/*     */   private final CircularDependencyStrategy circularDepStrategy;
/*     */ 
/*     */   
/*     */   public ModuleDescriptorSorter(Collection modulesDescriptorsToSort, VersionMatcher matcher, NonMatchingVersionReporter nonMatchingVersionReporter, CircularDependencyStrategy circularDepStrategy) {
/*  50 */     this.circularDepStrategy = circularDepStrategy;
/*  51 */     this.moduleDescriptors = new CollectionOfModulesToSort(modulesDescriptorsToSort, matcher, nonMatchingVersionReporter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List sortModuleDescriptors() throws CircularDependencyException {
/*  62 */     Message.debug(""Nbr of module to sort : "" + this.moduleDescriptors.size());
/*  63 */     Iterator moduleDescriptorsIterator = this.moduleDescriptors.iterator();
/*  64 */     while (moduleDescriptorsIterator.hasNext()) {
/*  65 */       ModuleInSort next = moduleDescriptorsIterator.next();
/*  66 */       sortModuleDescriptorsHelp(next, next);
/*     */     } 
/*  68 */     return this.sorted;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sortModuleDescriptorsHelp(ModuleInSort current, ModuleInSort caller) throws CircularDependencyException {
/*  86 */     if (current.isProcessed()) {
/*     */       return;
/*     */     }
/*  89 */     if (current.checkLoop(caller, this.circularDepStrategy)) {
/*     */       return;
/*     */     }
/*  92 */     DependencyDescriptor[] descriptors = current.getDependencies();
/*  93 */     Message.debug(""Sort dependencies of : "" + current.toString() + "" / Number of dependencies = "" + descriptors.length);
/*     */     
/*  95 */     current.setCaller(caller);
/*  96 */     for (int i = 0; i < descriptors.length; i++) {
/*  97 */       ModuleInSort child = this.moduleDescriptors.getModuleDescriptorDependency(descriptors[i]);
/*  98 */       if (child != null) {
/*  99 */         sortModuleDescriptorsHelp(child, current);
/*     */       }
/*     */     } 
/* 102 */     current.endOfCall();
/* 103 */     Message.debug(""Sort done for : "" + current.toString());
/* 104 */     current.addToSortedListIfRequired(this.sorted);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\ModuleDescriptorSorter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.ModuleInSort,"/*     */ package org.apache.ivy.core.sort;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyHelper;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ModuleInSort
/*     */ {
/*     */   private final ModuleDescriptor module;
/*     */   private boolean isSorted = false;
/*  54 */   private List loopElements = new LinkedList();
/*     */   
/*     */   private boolean isLoopIntermediateElement = false;
/*     */   
/*     */   private ModuleInSort caller;
/*     */ 
/*     */   
/*  61 */   public ModuleInSort(ModuleDescriptor moduleToSort) { this.module = moduleToSort; }
/*     */ 
/*     */ 
/*     */   
/*  65 */   public boolean isInLoop() { return this.isLoopIntermediateElement; }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSorted() {
/*  70 */     if (this.isSorted) {
/*  71 */       Message.debug(""Module descriptor already sorted : "" + this.module.getModuleRevisionId().toString());
/*     */       
/*  73 */       return true;
/*     */     } 
/*  75 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isProcessed() {
/*  84 */     if (this.isSorted || this.isLoopIntermediateElement) {
/*  85 */       Message.debug(""Module descriptor is processed : "" + this.module.getModuleRevisionId().toString());
/*     */       
/*  87 */       return true;
/*     */     } 
/*  89 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setCaller(ModuleInSort caller) { this.caller = caller; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void endOfCall() { this.caller = null; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean checkLoop(ModuleInSort futurCaller, CircularDependencyStrategy depStrategy) {
/* 113 */     if (this.caller != null) {
/* 114 */       LinkedList elemOfLoop = new LinkedList();
/* 115 */       elemOfLoop.add(this.module.getModuleRevisionId());
/* 116 */       for (ModuleInSort stackEl = futurCaller; stackEl != this; stackEl = stackEl.caller) {
/* 117 */         elemOfLoop.add(stackEl.module.getModuleRevisionId());
/* 118 */         stackEl.isLoopIntermediateElement = true;
/* 119 */         this.loopElements.add(stackEl);
/*     */       } 
/* 121 */       elemOfLoop.add(this.module.getModuleRevisionId());
/* 122 */       ModuleRevisionId[] mrids = elemOfLoop.toArray(new ModuleRevisionId[elemOfLoop.size()]);
/*     */       
/* 124 */       depStrategy.handleCircularDependency(mrids);
/* 125 */       return true;
/*     */     } 
/* 127 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addToSortedListIfRequired(List sorted) {
/* 140 */     if (!this.isLoopIntermediateElement) {
/* 141 */       addToSortList(sorted);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addToSortList(List sortedList) {
/* 150 */     for (Iterator it = this.loopElements.iterator(); it.hasNext(); ) {
/* 151 */       ModuleInSort moduleInLoop = it.next();
/* 152 */       moduleInLoop.addToSortList(sortedList);
/*     */     } 
/* 154 */     if (!isSorted()) {
/* 155 */       sortedList.add(this.module);
/* 156 */       this.isSorted = true;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 161 */   public String toString() { return this.module.getModuleRevisionId().toString(); }
/*     */ 
/*     */ 
/*     */   
/* 165 */   public DependencyDescriptor[] getDependencies() { return this.module.getDependencies(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public static void logLoopWarning(List loopElement) { Message.warn(""circular dependency detected during sort: "" + CircularDependencyHelper.formatMessageFromDescriptors(loopElement)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean match(DependencyDescriptor descriptor, VersionMatcher versionMatcher) {
/* 179 */     ModuleDescriptor md = this.module;
/* 180 */     return (md.getResolvedModuleRevisionId().getRevision() == null || md.getResolvedModuleRevisionId().getRevision().equals(Ivy.getWorkingRevision()) || versionMatcher.accept(descriptor.getDependencyRevisionId(), md));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public ModuleDescriptor getSortedModuleDescriptor() { return this.module; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\ModuleInSort.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.NonMatchingVersionReporter,"package org.apache.ivy.core.sort;
import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
public interface NonMatchingVersionReporter {
  void reportNonMatchingVersion(DependencyDescriptor paramDependencyDescriptor, ModuleDescriptor paramModuleDescriptor);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\NonMatchingVersionReporter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.SilentNonMatchingVersionReporter,"/*    */ package org.apache.ivy.core.sort;
/*    */ 
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SilentNonMatchingVersionReporter
/*    */   extends MessageBasedNonMatchingVersionReporter
/*    */   implements NonMatchingVersionReporter
/*    */ {
/* 29 */   protected void reportMessage(String msg) { Message.debug(msg); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\SilentNonMatchingVersionReporter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.SimpleSortEngineSettings,"/*    */ package org.apache.ivy.core.sort;
/*    */ 
/*    */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*    */ import org.apache.ivy.plugins.version.VersionMatcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SimpleSortEngineSettings
/*    */   implements SortEngineSettings
/*    */ {
/*    */   private CircularDependencyStrategy circularStrategy;
/*    */   private VersionMatcher versionMatcher;
/*    */   
/* 30 */   public CircularDependencyStrategy getCircularDependencyStrategy() { return this.circularStrategy; }
/*    */ 
/*    */ 
/*    */   
/* 34 */   public VersionMatcher getVersionMatcher() { return this.versionMatcher; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 39 */   public void setCircularDependencyStrategy(CircularDependencyStrategy strategy) { this.circularStrategy = strategy; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public void setVersionMatcher(VersionMatcher matcher) { this.versionMatcher = matcher; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\SimpleSortEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.SortEngine,"/*     */ package org.apache.ivy.core.sort;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
/*     */ import org.apache.ivy.plugins.circular.IgnoreCircularDependencyStrategy;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Checks;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SortEngine
/*     */ {
/*     */   private SortEngineSettings settings;
/*     */   
/*     */   public SortEngine(SortEngineSettings settings) {
/*  39 */     if (settings == null) {
/*  40 */       throw new NullPointerException(""SortEngine.settings can not be null"");
/*     */     }
/*  42 */     this.settings = settings;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List sortNodes(Collection nodes, SortOptions options) {
/*  55 */     Map dependenciesMap = new LinkedHashMap();
/*  56 */     List nulls = new ArrayList();
/*  57 */     for (Iterator iter = nodes.iterator(); iter.hasNext(); ) {
/*  58 */       IvyNode node = iter.next();
/*  59 */       if (node.getDescriptor() == null) {
/*  60 */         nulls.add(node); continue;
/*     */       } 
/*  62 */       List n = (List)dependenciesMap.get(node.getDescriptor());
/*  63 */       if (n == null) {
/*  64 */         n = new ArrayList();
/*  65 */         dependenciesMap.put(node.getDescriptor(), n);
/*     */       } 
/*  67 */       n.add(node);
/*     */     } 
/*     */     
/*  70 */     List list = sortModuleDescriptors(dependenciesMap.keySet(), options);
/*  71 */     double adjustFactor = 1.3D;
/*  72 */     List ret = new ArrayList((int)(list.size() * 1.3D + nulls.size()));
/*     */     
/*  74 */     for (int i = 0; i < list.size(); i++) {
/*  75 */       ModuleDescriptor md = list.get(i);
/*  76 */       List n = (List)dependenciesMap.get(md);
/*  77 */       ret.addAll(n);
/*     */     } 
/*  79 */     ret.addAll(0, nulls);
/*  80 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List sortModuleDescriptors(Collection moduleDescriptors, SortOptions options) {
/*  98 */     Checks.checkNotNull(options, ""options"");
/*  99 */     ModuleDescriptorSorter sorter = new ModuleDescriptorSorter(moduleDescriptors, getVersionMatcher(), options.getNonMatchingVersionReporter(), options.isUseCircularDependencyStrategy() ? getCircularStrategy() : IgnoreCircularDependencyStrategy.getInstance());
/*     */ 
/*     */ 
/*     */     
/* 103 */     return sorter.sortModuleDescriptors();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   protected CircularDependencyStrategy getCircularStrategy() { return this.settings.getCircularDependencyStrategy(); }
/*     */ 
/*     */ 
/*     */   
/* 113 */   protected VersionMatcher getVersionMatcher() { return this.settings.getVersionMatcher(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\SortEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.SortEngineSettings,"package org.apache.ivy.core.sort;
import org.apache.ivy.plugins.circular.CircularDependencyStrategy;
import org.apache.ivy.plugins.version.VersionMatcher;
public interface SortEngineSettings {
  CircularDependencyStrategy getCircularDependencyStrategy();
  VersionMatcher getVersionMatcher();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\SortEngineSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.SortOptions,"/*    */ package org.apache.ivy.core.sort;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SortOptions
/*    */ {
/* 21 */   public static final SortOptions DEFAULT = new SortOptions();
/* 22 */   public static final SortOptions SILENT = (new SortOptions()).setNonMatchingVersionReporter(new SilentNonMatchingVersionReporter()).setUseCircularDependencyStrategy(false);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 30 */   private NonMatchingVersionReporter nonMatchingVersionReporter = new WarningNonMatchingVersionReporter();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   private boolean useCircularDependencyStrategy = true;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 41 */   public NonMatchingVersionReporter getNonMatchingVersionReporter() { return this.nonMatchingVersionReporter; }
/*    */ 
/*    */   
/*    */   public SortOptions setNonMatchingVersionReporter(NonMatchingVersionReporter nonMatchingVersionReporter) {
/* 45 */     this.nonMatchingVersionReporter = nonMatchingVersionReporter;
/* 46 */     return this;
/*    */   }
/*    */   
/* 49 */   public boolean isUseCircularDependencyStrategy() { return this.useCircularDependencyStrategy; }
/*    */   
/*    */   public SortOptions setUseCircularDependencyStrategy(boolean useCircularDependencyStrategy) {
/* 52 */     this.useCircularDependencyStrategy = useCircularDependencyStrategy;
/* 53 */     return this;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\SortOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.core.sort.WarningNonMatchingVersionReporter,"/*    */ package org.apache.ivy.core.sort;
/*    */ 
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class WarningNonMatchingVersionReporter
/*    */   extends MessageBasedNonMatchingVersionReporter
/*    */   implements NonMatchingVersionReporter
/*    */ {
/* 29 */   protected void reportMessage(String msg) { Message.warn(msg); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\core\sort\WarningNonMatchingVersionReporter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.IvySettingsAware,"package org.apache.ivy.plugins;
import org.apache.ivy.core.settings.IvySettings;
public interface IvySettingsAware {
  void setSettings(IvySettings paramIvySettings);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\IvySettingsAware.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.AbstractCircularDependencyStrategy,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractCircularDependencyStrategy
/*    */   implements CircularDependencyStrategy
/*    */ {
/*    */   private String name;
/*    */   
/* 24 */   protected AbstractCircularDependencyStrategy(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 28 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public String toString() { return getName(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\AbstractCircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.AbstractLogCircularDependencyStrategy,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import java.util.Arrays;
/*    */ import java.util.Collection;
/*    */ import java.util.HashSet;
/*    */ import org.apache.ivy.core.IvyContext;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.resolve.ResolveData;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractLogCircularDependencyStrategy
/*    */   extends AbstractCircularDependencyStrategy
/*    */ {
/*    */   private Collection circularDependencies;
/*    */   
/*    */   protected AbstractLogCircularDependencyStrategy(String name) {
/* 32 */     super(name);
/*    */ 
/*    */     
/* 35 */     this.circularDependencies = new HashSet();
/*    */   }
/*    */   public void handleCircularDependency(ModuleRevisionId[] mrids) {
/* 38 */     String circularDependencyId = getCircularDependencyId(mrids);
/* 39 */     if (!this.circularDependencies.contains(circularDependencyId)) {
/* 40 */       this.circularDependencies.add(circularDependencyId);
/* 41 */       logCircularDependency(mrids);
/*    */     } 
/*    */   }
/*    */   
/*    */   protected abstract void logCircularDependency(ModuleRevisionId[] paramArrayOfModuleRevisionId);
/*    */   
/*    */   protected String getCircularDependencyId(ModuleRevisionId[] mrids) {
/* 48 */     String contextPrefix = """";
/* 49 */     ResolveData data = IvyContext.getContext().getResolveData();
/* 50 */     if (data != null) {
/* 51 */       contextPrefix = data.getOptions().getResolveId() + "" "";
/*    */     }
/* 53 */     return contextPrefix + Arrays.asList(mrids);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\AbstractLogCircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.CircularDependencyException,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CircularDependencyException
/*    */   extends RuntimeException
/*    */ {
/*    */   private ModuleRevisionId[] mrids;
/*    */   
/*    */   public CircularDependencyException(ModuleRevisionId[] mrids) {
/* 35 */     super(CircularDependencyHelper.formatMessage(mrids));
/* 36 */     this.mrids = mrids;
/*    */   }
/*    */ 
/*    */   
/* 40 */   public ModuleRevisionId[] getPath() { return this.mrids; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\CircularDependencyException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.CircularDependencyHelper,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import java.util.HashSet;
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import java.util.Set;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class CircularDependencyHelper
/*    */ {
/*    */   public static String formatMessage(ModuleRevisionId[] mrids) {
/* 43 */     Set alreadyAdded = new HashSet();
/* 44 */     StringBuffer buff = new StringBuffer();
/* 45 */     buff.append(mrids[0]);
/* 46 */     alreadyAdded.add(mrids[0]);
/* 47 */     for (int i = 1; i < mrids.length; i++) {
/* 48 */       buff.append(""->"");
/* 49 */       if (alreadyAdded.add(mrids[i])) {
/* 50 */         buff.append(mrids[i]);
/*    */       } else {
/* 52 */         buff.append(""..."");
/*    */         break;
/*    */       } 
/*    */     } 
/* 56 */     return buff.toString();
/*    */   }
/*    */ 
/*    */   
/* 60 */   public static String formatMessage(ModuleDescriptor[] descriptors) { return formatMessage(toMrids(descriptors)); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static String formatMessageFromDescriptors(List loopElements) {
/* 68 */     ModuleRevisionId[] mrids = new ModuleRevisionId[loopElements.size()];
/* 69 */     int pos = 0;
/* 70 */     for (Iterator it = loopElements.iterator(); it.hasNext(); ) {
/* 71 */       ModuleDescriptor descriptor = it.next();
/* 72 */       mrids[pos] = descriptor.getModuleRevisionId();
/* 73 */       pos++;
/*    */     } 
/* 75 */     return formatMessage(mrids);
/*    */   }
/*    */   
/*    */   public static ModuleRevisionId[] toMrids(ModuleDescriptor[] descriptors) {
/* 79 */     ModuleRevisionId[] mrids = new ModuleRevisionId[descriptors.length];
/* 80 */     for (int i = 0; i < descriptors.length; i++) {
/* 81 */       mrids[i] = descriptors[i].getModuleRevisionId();
/*    */     }
/* 83 */     return mrids;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\CircularDependencyHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.CircularDependencyStrategy,"package org.apache.ivy.plugins.circular;
import org.apache.ivy.core.module.id.ModuleRevisionId;
public interface CircularDependencyStrategy {
  String getName();
  void handleCircularDependency(ModuleRevisionId[] paramArrayOfModuleRevisionId) throws CircularDependencyException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\CircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.ErrorCircularDependencyStrategy,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ErrorCircularDependencyStrategy
/*    */   extends AbstractCircularDependencyStrategy
/*    */ {
/* 24 */   private static final CircularDependencyStrategy INSTANCE = new ErrorCircularDependencyStrategy();
/*    */ 
/*    */ 
/*    */   
/* 28 */   public static CircularDependencyStrategy getInstance() { return INSTANCE; }
/*    */ 
/*    */ 
/*    */   
/* 32 */   private ErrorCircularDependencyStrategy() { super(""error""); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 37 */   public void handleCircularDependency(ModuleRevisionId[] mrids) throws CircularDependencyException { throw new CircularDependencyException(mrids); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\ErrorCircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.IgnoreCircularDependencyStrategy,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class IgnoreCircularDependencyStrategy
/*    */   extends AbstractLogCircularDependencyStrategy
/*    */ {
/* 25 */   private static final CircularDependencyStrategy INSTANCE = new IgnoreCircularDependencyStrategy();
/*    */ 
/*    */ 
/*    */   
/* 29 */   public static CircularDependencyStrategy getInstance() { return INSTANCE; }
/*    */ 
/*    */ 
/*    */   
/* 33 */   private IgnoreCircularDependencyStrategy() { super(""warn""); }
/*    */ 
/*    */ 
/*    */   
/* 37 */   protected void logCircularDependency(ModuleRevisionId[] mrids) { Message.verbose(""circular dependency found: "" + CircularDependencyHelper.formatMessage(mrids)); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\IgnoreCircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.circular.WarnCircularDependencyStrategy,"/*    */ package org.apache.ivy.plugins.circular;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class WarnCircularDependencyStrategy
/*    */   extends AbstractLogCircularDependencyStrategy
/*    */ {
/* 25 */   private static final CircularDependencyStrategy INSTANCE = new WarnCircularDependencyStrategy();
/*    */ 
/*    */   
/* 28 */   public static CircularDependencyStrategy getInstance() { return INSTANCE; }
/*    */ 
/*    */ 
/*    */   
/* 32 */   private WarnCircularDependencyStrategy() { super(""warn""); }
/*    */ 
/*    */ 
/*    */   
/* 36 */   protected void logCircularDependency(ModuleRevisionId[] mrids) { Message.warn(""circular dependency found: "" + CircularDependencyHelper.formatMessage(mrids)); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\circular\WarnCircularDependencyStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.AbstractConflictManager,"/*    */ package org.apache.ivy.plugins.conflict;
/*    */ 
/*    */ import java.util.Collection;
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.settings.IvySettings;
/*    */ import org.apache.ivy.plugins.IvySettingsAware;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractConflictManager
/*    */   implements ConflictManager, IvySettingsAware
/*    */ {
/*    */   private String name;
/*    */   private IvySettings settings;
/*    */   
/* 32 */   public IvySettings getSettings() { return this.settings; }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public void setSettings(IvySettings settings) { this.settings = settings; }
/*    */ 
/*    */ 
/*    */   
/* 40 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 44 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 48 */   public String toString() { return this.name; }
/*    */   
/*    */   public void handleAllBlacklistedRevisions(DependencyDescriptor dd, Collection foundBlacklisted) {}
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\AbstractConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.ConflictManager,"package org.apache.ivy.plugins.conflict;
import java.util.Collection;
import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
import org.apache.ivy.core.resolve.IvyNode;
public interface ConflictManager {
  Collection resolveConflicts(IvyNode paramIvyNode, Collection paramCollection);
  String getName();
  void handleAllBlacklistedRevisions(DependencyDescriptor paramDependencyDescriptor, Collection paramCollection);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\ConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.FixedConflictManager,"/*    */ package org.apache.ivy.plugins.conflict;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Arrays;
/*    */ import java.util.Collection;
/*    */ import java.util.Iterator;
/*    */ import org.apache.ivy.core.resolve.IvyNode;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FixedConflictManager
/*    */   extends AbstractConflictManager
/*    */ {
/*    */   private Collection revisions;
/*    */   
/*    */   public FixedConflictManager(String[] revs) {
/* 31 */     this.revisions = Arrays.asList(revs);
/* 32 */     setName(""fixed"" + this.revisions);
/*    */   }
/*    */   
/*    */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) {
/* 36 */     Collection resolved = new ArrayList(conflicts.size());
/* 37 */     for (Iterator iter = conflicts.iterator(); iter.hasNext(); ) {
/* 38 */       IvyNode node = iter.next();
/* 39 */       String revision = node.getResolvedId().getRevision();
/* 40 */       if (this.revisions.contains(revision)) {
/* 41 */         resolved.add(node);
/*    */       }
/*    */     } 
/* 44 */     return resolved;
/*    */   }
/*    */ 
/*    */   
/* 48 */   public Collection getRevs() { return this.revisions; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\FixedConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.LatestCompatibleConflictManager,"/*     */ package org.apache.ivy.plugins.conflict;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.Stack;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.IvyNodeBlacklist;
/*     */ import org.apache.ivy.core.resolve.IvyNodeCallers;
/*     */ import org.apache.ivy.core.resolve.IvyNodeEviction;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.RestartResolveProcess;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LatestCompatibleConflictManager
/*     */   extends LatestConflictManager
/*     */ {
/*     */   public LatestCompatibleConflictManager() {}
/*     */   
/*  70 */   public LatestCompatibleConflictManager(String name, LatestStrategy strategy) { super(name, strategy); }
/*     */ 
/*     */ 
/*     */   
/*     */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) {
/*  75 */     if (conflicts.size() < 2) {
/*  76 */       return conflicts;
/*     */     }
/*  78 */     VersionMatcher versionMatcher = getSettings().getVersionMatcher();
/*     */     
/*  80 */     Iterator iter = conflicts.iterator();
/*  81 */     IvyNode node = iter.next();
/*  82 */     ModuleRevisionId mrid = node.getResolvedId();
/*     */     
/*  84 */     if (versionMatcher.isDynamic(mrid)) {
/*  85 */       while (iter.hasNext()) {
/*  86 */         IvyNode other = iter.next();
/*  87 */         if (versionMatcher.isDynamic(other.getResolvedId()))
/*     */         {
/*  89 */           return null; } 
/*  90 */         if (!versionMatcher.accept(mrid, other.getResolvedId()))
/*     */         {
/*  92 */           if (!handleIncompatibleConflict(parent, conflicts, node, other)) {
/*  93 */             return null;
/*     */           }
/*     */         }
/*     */       } 
/*     */       
/*  98 */       if (conflicts.size() == 2) {
/*     */ 
/*     */         
/* 101 */         Iterator it = conflicts.iterator();
/* 102 */         it.next();
/* 103 */         return Collections.singleton(it.next());
/*     */       } 
/* 105 */       Collection newConflicts = new LinkedHashSet(conflicts);
/* 106 */       newConflicts.remove(node);
/* 107 */       return super.resolveConflicts(parent, newConflicts);
/*     */     } 
/*     */     
/* 110 */     while (iter.hasNext()) {
/* 111 */       IvyNode other = iter.next();
/* 112 */       if (!versionMatcher.accept(other.getResolvedId(), mrid))
/*     */       {
/* 114 */         if (!handleIncompatibleConflict(parent, conflicts, node, other)) {
/* 115 */           return null;
/*     */         }
/*     */       }
/*     */     } 
/*     */     
/* 120 */     return Collections.singleton(node);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean handleIncompatibleConflict(IvyNode parent, Collection conflicts, IvyNode node, IvyNode other) {
/*     */     try {
/* 160 */       LatestConflictManager.IvyNodeArtifactInfo latest = (LatestConflictManager.IvyNodeArtifactInfo)getStrategy().findLatest(toArtifactInfo(Arrays.asList(new IvyNode[] { node, other }, )), null);
/*     */ 
/*     */       
/* 163 */       if (latest != null) {
/* 164 */         IvyNode latestNode = latest.getNode();
/* 165 */         IvyNode oldestNode = (latestNode == node) ? other : node;
/* 166 */         blackListIncompatibleCallerAndRestartResolveIfPossible(getSettings(), parent, oldestNode, latestNode);
/*     */ 
/*     */ 
/*     */         
/* 170 */         blackListIncompatibleCallerAndRestartResolveIfPossible(getSettings(), parent, latestNode, oldestNode);
/*     */ 
/*     */         
/* 173 */         handleUnsolvableConflict(parent, conflicts, node, other);
/*     */         
/* 175 */         return true;
/*     */       } 
/* 177 */       return false;
/*     */     }
/* 179 */     catch (NoConflictResolvedYetException ex) {
/*     */ 
/*     */       
/* 182 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void blackListIncompatibleCallerAndRestartResolveIfPossible(IvySettings settings, IvyNode parent, IvyNode selected, IvyNode evicted) {
/* 188 */     Stack callerStack = new Stack();
/* 189 */     callerStack.push(evicted);
/* 190 */     Collection toBlacklist = blackListIncompatibleCaller(settings.getVersionMatcher(), parent, selected, evicted, callerStack);
/*     */     
/* 192 */     if (toBlacklist != null) {
/* 193 */       StringBuffer blacklisted = new StringBuffer();
/* 194 */       for (Iterator iterator = toBlacklist.iterator(); iterator.hasNext(); ) {
/* 195 */         IvyNodeBlacklist blacklist = iterator.next();
/* 196 */         blacklist.getBlacklistedNode().blacklist(blacklist);
/* 197 */         blacklisted.append(blacklist.getBlacklistedNode());
/* 198 */         if (iterator.hasNext()) {
/* 199 */           blacklisted.append("" "");
/*     */         }
/*     */       } 
/*     */       
/* 203 */       String rootModuleConf = parent.getData().getReport().getConfiguration();
/*     */       
/* 205 */       evicted.markEvicted(new IvyNodeEviction.EvictionData(rootModuleConf, parent, this, Collections.singleton(selected), ""with blacklisting of "" + blacklisted));
/*     */ 
/*     */ 
/*     */       
/* 209 */       if (settings.debugConflictResolution()) {
/* 210 */         Message.debug(""evicting "" + evicted + "" by "" + evicted.getEvictedData(rootModuleConf));
/*     */       }
/*     */       
/* 213 */       throw new RestartResolveProcess(""trying to handle incompatibilities between "" + selected + "" and "" + evicted);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Collection blackListIncompatibleCaller(VersionMatcher versionMatcher, IvyNode conflictParent, IvyNode selectedNode, IvyNode evictedNode, Stack callerStack) {
/* 238 */     Collection blacklisted = new ArrayList();
/* 239 */     IvyNode node = callerStack.peek();
/* 240 */     String rootModuleConf = conflictParent.getData().getReport().getConfiguration();
/* 241 */     IvyNodeCallers.Caller[] callers = node.getCallers(rootModuleConf);
/* 242 */     for (int i = 0; i < callers.length; i++) {
/* 243 */       IvyNode callerNode = node.findNode(callers[i].getModuleRevisionId());
/* 244 */       if (!callerNode.isBlacklisted(rootModuleConf))
/*     */       {
/*     */         
/* 247 */         if (versionMatcher.isDynamic(callers[i].getAskedDependencyId(node.getData()))) {
/* 248 */           blacklisted.add(new IvyNodeBlacklist(conflictParent, selectedNode, evictedNode, node, rootModuleConf));
/*     */         
/*     */         }
/* 251 */         else if (!callerStack.subList(0, callerStack.size() - 1).contains(node)) {
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 256 */           if (callerNode == null)
/*     */           {
/*     */             
/* 259 */             return null;
/*     */           }
/* 261 */           callerStack.push(callerNode);
/* 262 */           Collection sub = blackListIncompatibleCaller(versionMatcher, conflictParent, selectedNode, evictedNode, callerStack);
/*     */           
/* 264 */           callerStack.pop();
/* 265 */           if (sub == null)
/*     */           {
/* 267 */             return null;
/*     */           }
/* 269 */           blacklisted.addAll(sub);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 274 */     if (blacklisted.isEmpty() && !callerStack.subList(0, callerStack.size() - 1).contains(node))
/*     */     {
/* 276 */       return null;
/*     */     }
/* 278 */     return blacklisted;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 283 */   protected void handleUnsolvableConflict(IvyNode parent, Collection conflicts, IvyNode node1, IvyNode node2) { throw new StrictConflictException(node1, node2); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleAllBlacklistedRevisions(DependencyDescriptor dd, Collection foundBlacklisted) {
/* 288 */     ResolveData resolveData = IvyContext.getContext().getResolveData();
/* 289 */     Collection blacklisted = new HashSet();
/* 290 */     for (Iterator iterator = foundBlacklisted.iterator(); iterator.hasNext(); ) {
/* 291 */       ModuleRevisionId mrid = iterator.next();
/* 292 */       blacklisted.add(resolveData.getNode(mrid));
/*     */     } 
/*     */     
/* 295 */     for (Iterator iterator = blacklisted.iterator(); iterator.hasNext(); ) {
/* 296 */       IvyNode node = iterator.next();
/* 297 */       IvyNodeBlacklist bdata = node.getBlacklistData(resolveData.getReport().getConfiguration());
/*     */       
/* 299 */       handleUnsolvableConflict(bdata.getConflictParent(), Arrays.asList(new Object[] { bdata.getEvictedNode(), bdata.getSelectedNode() }, ), bdata.getEvictedNode(), bdata.getSelectedNode());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 309 */   public String toString() { return getName(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\LatestCompatibleConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.LatestConflictManager,"/*     */ package org.apache.ivy.plugins.conflict;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LatestConflictManager
/*     */   extends AbstractConflictManager
/*     */ {
/*     */   private LatestStrategy strategy;
/*     */   private String strategyName;
/*     */   
/*     */   public static class NoConflictResolvedYetException
/*     */     extends RuntimeException {}
/*     */   
/*     */   protected static final class IvyNodeArtifactInfo
/*     */     implements ArtifactInfo
/*     */   {
/*     */     private final IvyNode node;
/*     */     
/*  40 */     private IvyNodeArtifactInfo(IvyNode dep) { this.node = dep; }
/*     */ 
/*     */     
/*     */     public long getLastModified() {
/*  44 */       long lastModified = this.node.getLastModified();
/*  45 */       if (lastModified == 0L)
/*     */       {
/*     */ 
/*     */         
/*  49 */         throw new LatestConflictManager.NoConflictResolvedYetException();
/*     */       }
/*  51 */       return lastModified;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  56 */     public String getRevision() { return this.node.getResolvedId().getRevision(); }
/*     */ 
/*     */ 
/*     */     
/*  60 */     public IvyNode getNode() { return this.node; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LatestConflictManager() {}
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  72 */   public LatestConflictManager(LatestStrategy strategy) { this.strategy = strategy; }
/*     */ 
/*     */   
/*     */   public LatestConflictManager(String name, LatestStrategy strategy) {
/*  76 */     setName(name);
/*  77 */     this.strategy = strategy;
/*     */   }
/*     */   
/*     */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) {
/*  81 */     if (conflicts.size() < 2) {
/*  82 */       return conflicts;
/*     */     }
/*  84 */     for (Iterator iter = conflicts.iterator(); iter.hasNext(); ) {
/*  85 */       IvyNode node = iter.next();
/*  86 */       DependencyDescriptor dd = node.getDependencyDescriptor(parent);
/*  87 */       if (dd != null && dd.isForce() && parent.getResolvedId().equals(dd.getParentRevisionId()))
/*     */       {
/*  89 */         return Collections.singleton(node);
/*     */       }
/*     */     } 
/*     */     try {
/*  93 */       IvyNodeArtifactInfo latest = (IvyNodeArtifactInfo)getStrategy().findLatest(toArtifactInfo(conflicts), null);
/*     */       
/*  95 */       if (latest != null) {
/*  96 */         return Collections.singleton(latest.getNode());
/*     */       }
/*  98 */       return conflicts;
/*     */     }
/* 100 */     catch (NoConflictResolvedYetException ex) {
/*     */ 
/*     */       
/* 103 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   protected ArtifactInfo[] toArtifactInfo(Collection conflicts) {
/* 108 */     List artifacts = new ArrayList(conflicts.size());
/* 109 */     for (Iterator iter = conflicts.iterator(); iter.hasNext(); ) {
/* 110 */       IvyNode node = iter.next();
/* 111 */       artifacts.add(new IvyNodeArtifactInfo(node));
/*     */     } 
/* 113 */     return artifacts.toArray(new ArtifactInfo[artifacts.size()]);
/*     */   }
/*     */   
/*     */   public LatestStrategy getStrategy() {
/* 117 */     if (this.strategy == null) {
/* 118 */       if (this.strategyName != null) {
/* 119 */         this.strategy = getSettings().getLatestStrategy(this.strategyName);
/* 120 */         if (this.strategy == null) {
/* 121 */           Message.error(""unknown latest strategy: "" + this.strategyName);
/* 122 */           this.strategy = getSettings().getDefaultLatestStrategy();
/*     */         } 
/*     */       } else {
/* 125 */         this.strategy = getSettings().getDefaultLatestStrategy();
/*     */       } 
/*     */     }
/* 128 */     return this.strategy;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setLatest(String strategyName) { this.strategyName = strategyName; }
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setStrategy(LatestStrategy strategy) { this.strategy = strategy; }
/*     */ 
/*     */ 
/*     */   
/* 145 */   public String toString() { return (this.strategy != null) ? String.valueOf(this.strategy) : this.strategyName; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\LatestConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.NoConflictManager,"/*    */ package org.apache.ivy.plugins.conflict;
/*    */ 
/*    */ import java.util.Collection;
/*    */ import org.apache.ivy.core.resolve.IvyNode;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NoConflictManager
/*    */   extends AbstractConflictManager
/*    */ {
/* 26 */   public NoConflictManager() { setName(""all""); }
/*    */ 
/*    */ 
/*    */   
/* 30 */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) { return conflicts; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\NoConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.RegexpConflictManager,"/*     */ package org.apache.ivy.plugins.conflict;
/*     */ 
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpConflictManager
/*     */   extends AbstractConflictManager
/*     */ {
/*  48 */   private Pattern pattern = Pattern.compile(""(.*)"");
/*     */ 
/*     */   
/*     */   private boolean mIgnoreNonMatching;
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRegexp(String regexp) {
/*  56 */     this.pattern = Pattern.compile(regexp);
/*  57 */     Matcher matcher = this.pattern.matcher(""abcdef"");
/*  58 */     if (matcher.groupCount() != 1) {
/*  59 */       String message = ""Pattern does not contain ONE (capturing group): '"" + this.pattern + ""'"";
/*  60 */       Message.error(message);
/*  61 */       throw new IllegalArgumentException(message);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  66 */   public void setIgnoreNonMatching(boolean ignoreNonMatching) { this.mIgnoreNonMatching = ignoreNonMatching; }
/*     */ 
/*     */   
/*     */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) {
/*  70 */     IvyNode lastNode = null;
/*  71 */     for (Iterator iter = conflicts.iterator(); iter.hasNext(); ) {
/*  72 */       IvyNode node = iter.next();
/*     */       
/*  74 */       if (lastNode != null && !matchEquals(node, lastNode)) {
/*  75 */         String msg = lastNode + "":"" + getMatch(lastNode) + "" (needed by "" + Arrays.asList(lastNode.getAllRealCallers()) + "") conflicts with "" + node + "":"" + getMatch(node) + "" (needed by "" + Arrays.asList(node.getAllRealCallers()) + "")"";
/*     */ 
/*     */ 
/*     */         
/*  79 */         throw new StrictConflictException(msg);
/*     */       } 
/*  81 */       if (lastNode == null || nodeIsGreater(node, lastNode)) {
/*  82 */         lastNode = node;
/*     */       }
/*     */     } 
/*     */     
/*  86 */     return Collections.singleton(lastNode);
/*     */   }
/*     */ 
/*     */   
/*  90 */   private boolean nodeIsGreater(IvyNode node, IvyNode lastNode) { return (getMatch(node).compareTo(getMatch(lastNode)) > 0); }
/*     */ 
/*     */ 
/*     */   
/*  94 */   private boolean matchEquals(IvyNode lastNode, IvyNode node) { return getMatch(lastNode).equals(getMatch(node)); }
/*     */ 
/*     */   
/*     */   private String getMatch(IvyNode node) {
/*  98 */     String revision = node.getId().getRevision();
/*  99 */     Matcher matcher = this.pattern.matcher(revision);
/* 100 */     if (matcher.matches()) {
/* 101 */       String match = matcher.group(1);
/* 102 */       if (match != null) {
/* 103 */         return match;
/*     */       }
/* 105 */       warnOrThrow(""First group of pattern: '"" + this.pattern + ""' does not match: "" + revision + "" "" + node);
/*     */     } else {
/*     */       
/* 108 */       warnOrThrow(""Pattern: '"" + this.pattern + ""' does not match: "" + revision + "" "" + node);
/*     */     } 
/* 110 */     return revision;
/*     */   }
/*     */   
/*     */   private void warnOrThrow(String message) {
/* 114 */     if (this.mIgnoreNonMatching) {
/* 115 */       Message.warn(message);
/*     */     } else {
/* 117 */       throw new StrictConflictException(message);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\RegexpConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.StrictConflictException,"/*    */ package org.apache.ivy.plugins.conflict;
/*    */ 
/*    */ import java.util.Arrays;
/*    */ import org.apache.ivy.core.resolve.IvyNode;
/*    */ import org.apache.ivy.core.resolve.ResolveProcessException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StrictConflictException
/*    */   extends ResolveProcessException
/*    */ {
/*    */   public StrictConflictException() {}
/*    */   
/* 32 */   public StrictConflictException(IvyNode node1, IvyNode node2) { super(node1 + "" (needed by "" + Arrays.asList(node1.getAllRealCallers()) + "") conflicts with "" + node2 + "" (needed by "" + Arrays.asList(node2.getAllRealCallers()) + "")""); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 38 */   public StrictConflictException(String msg) { super(msg); }
/*    */ 
/*    */ 
/*    */   
/* 42 */   public StrictConflictException(Throwable t) { super(t); }
/*    */ 
/*    */ 
/*    */   
/* 46 */   public StrictConflictException(String msg, Throwable t) { super(msg, t); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\StrictConflictException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.conflict.StrictConflictManager,"/*    */ package org.apache.ivy.plugins.conflict;
/*    */ 
/*    */ import java.util.Collection;
/*    */ import java.util.Collections;
/*    */ import java.util.Iterator;
/*    */ import org.apache.ivy.core.resolve.IvyNode;
/*    */ import org.apache.ivy.plugins.version.VersionMatcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class StrictConflictManager
/*    */   extends AbstractConflictManager
/*    */ {
/*    */   public Collection resolveConflicts(IvyNode parent, Collection conflicts) {
/* 33 */     VersionMatcher versionMatcher = getSettings().getVersionMatcher();
/*    */     
/* 35 */     IvyNode lastNode = null;
/* 36 */     for (Iterator iter = conflicts.iterator(); iter.hasNext(); ) {
/* 37 */       IvyNode node = iter.next();
/*    */       
/* 39 */       if (versionMatcher.isDynamic(node.getResolvedId()))
/*    */       {
/* 41 */         return null;
/*    */       }
/*    */       
/* 44 */       if (lastNode != null && !lastNode.equals(node)) {
/* 45 */         throw new StrictConflictException(lastNode, node);
/*    */       }
/* 47 */       lastNode = node;
/*    */     } 
/*    */     
/* 50 */     return Collections.singleton(lastNode);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\conflict\StrictConflictManager.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.AbstractLatestStrategy,"/*    */ package org.apache.ivy.plugins.latest;
/*    */ 
/*    */ import java.util.Date;
/*    */ import java.util.List;
/*    */ import java.util.ListIterator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractLatestStrategy
/*    */   implements LatestStrategy
/*    */ {
/*    */   private String name;
/*    */   
/* 28 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public String toString() { return this.name; }
/*    */ 
/*    */   
/*    */   public ArtifactInfo findLatest(ArtifactInfo[] infos, Date date) {
/* 40 */     List l = sort(infos);
/*    */ 
/*    */ 
/*    */     
/* 44 */     for (ListIterator iter = l.listIterator(l.size()); iter.hasPrevious(); ) {
/* 45 */       ArtifactInfo info = iter.previous();
/* 46 */       if (date == null || info.getLastModified() < date.getTime()) {
/* 47 */         return info;
/*    */       }
/*    */     } 
/* 50 */     return null;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\AbstractLatestStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.ArtifactInfo,"package org.apache.ivy.plugins.latest;
public interface ArtifactInfo {
  String getRevision();
  long getLastModified();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\ArtifactInfo.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.ComparatorLatestStrategy,"/*    */ package org.apache.ivy.plugins.latest;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Arrays;
/*    */ import java.util.Collections;
/*    */ import java.util.Comparator;
/*    */ import java.util.List;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ComparatorLatestStrategy
/*    */   extends AbstractLatestStrategy
/*    */ {
/*    */   private Comparator comparator;
/*    */   
/*    */   public ComparatorLatestStrategy() {}
/*    */   
/* 34 */   public ComparatorLatestStrategy(Comparator comparator) { this.comparator = comparator; }
/*    */ 
/*    */   
/*    */   public List sort(ArtifactInfo[] infos) {
/* 38 */     List ret = new ArrayList(Arrays.asList((Object[])infos));
/* 39 */     Collections.sort(ret, this.comparator);
/* 40 */     return ret;
/*    */   }
/*    */ 
/*    */   
/* 44 */   public Comparator getComparator() { return this.comparator; }
/*    */ 
/*    */ 
/*    */   
/* 48 */   public void setComparator(Comparator comparator) { this.comparator = comparator; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\ComparatorLatestStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.LatestLexicographicStrategy,"/*    */ package org.apache.ivy.plugins.latest;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LatestLexicographicStrategy
/*    */   extends ComparatorLatestStrategy
/*    */ {
/* 29 */   private static final Comparator COMPARATOR = new Comparator() {
/*    */       public int compare(Object o1, Object o2) {
/* 31 */         String rev1 = ((ArtifactInfo)o1).getRevision();
/* 32 */         String rev2 = ((ArtifactInfo)o2).getRevision();
/* 33 */         if (rev1.startsWith(""latest"")) {
/* 34 */           return 1;
/*    */         }
/* 36 */         if (rev1.endsWith(""+"") && rev2.startsWith(rev1.substring(0, rev1.length() - 1))) {
/* 37 */           return 1;
/*    */         }
/* 39 */         if (rev2.startsWith(""latest"")) {
/* 40 */           return -1;
/*    */         }
/* 42 */         if (rev2.endsWith(""+"") && rev1.startsWith(rev2.substring(0, rev2.length() - 1))) {
/* 43 */           return -1;
/*    */         }
/* 45 */         return rev1.compareTo(rev2);
/*    */       }
/*    */     };
/*    */ 
/*    */   
/*    */   public LatestLexicographicStrategy() {
/* 51 */     super(COMPARATOR);
/* 52 */     setName(""latest-lexico"");
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\LatestLexicographicStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.LatestRevisionStrategy,"/*     */ package org.apache.ivy.plugins.latest;
/*     */ 
/*     */ import java.util.Comparator;
/*     */ import java.util.HashMap;
/*     */ import java.util.Locale;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LatestRevisionStrategy
/*     */   extends ComparatorLatestStrategy
/*     */ {
/*     */   final class MridComparator
/*     */     implements Comparator
/*     */   {
/*     */     private final LatestRevisionStrategy this$0;
/*     */     
/*     */     public int compare(Object o1, Object o2) {
/*  36 */       String rev1 = ((ModuleRevisionId)o1).getRevision();
/*  37 */       String rev2 = ((ModuleRevisionId)o2).getRevision();
/*     */       
/*  39 */       rev1 = rev1.replaceAll(""([a-zA-Z])(\\d)"", ""$1.$2"");
/*  40 */       rev1 = rev1.replaceAll(""(\\d)([a-zA-Z])"", ""$1.$2"");
/*  41 */       rev2 = rev2.replaceAll(""([a-zA-Z])(\\d)"", ""$1.$2"");
/*  42 */       rev2 = rev2.replaceAll(""(\\d)([a-zA-Z])"", ""$1.$2"");
/*     */       
/*  44 */       String[] parts1 = rev1.split(""[\\._\\-\\+]"");
/*  45 */       String[] parts2 = rev2.split(""[\\._\\-\\+]"");
/*     */       
/*  47 */       int i = 0;
/*  48 */       while (i < parts1.length && i < parts2.length) {
/*  49 */         if (parts1[i].equals(parts2[i])) {
/*     */           i++; continue;
/*     */         } 
/*  52 */         boolean is1Number = isNumber(parts1[i]);
/*  53 */         boolean is2Number = isNumber(parts2[i]);
/*  54 */         if (is1Number && !is2Number) {
/*  55 */           return 1;
/*     */         }
/*  57 */         if (is2Number && !is1Number) {
/*  58 */           return -1;
/*     */         }
/*  60 */         if (is1Number && is2Number) {
/*  61 */           return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));
/*     */         }
/*     */         
/*  64 */         Map specialMeanings = LatestRevisionStrategy.this.getSpecialMeanings();
/*  65 */         Integer sm1 = (Integer)specialMeanings.get(parts1[i].toLowerCase(Locale.US));
/*  66 */         Integer sm2 = (Integer)specialMeanings.get(parts2[i].toLowerCase(Locale.US));
/*  67 */         if (sm1 != null) {
/*  68 */           sm2 = (sm2 == null) ? new Integer(0) : sm2;
/*  69 */           return sm1.compareTo(sm2);
/*     */         } 
/*  71 */         if (sm2 != null) {
/*  72 */           return (new Integer(0)).compareTo(sm2);
/*     */         }
/*  74 */         return parts1[i].compareTo(parts2[i]);
/*     */       } 
/*  76 */       if (i < parts1.length) {
/*  77 */         return isNumber(parts1[i]) ? 1 : -1;
/*     */       }
/*  79 */       if (i < parts2.length) {
/*  80 */         return isNumber(parts2[i]) ? -1 : 1;
/*     */       }
/*  82 */       return 0;
/*     */     }
/*     */ 
/*     */     
/*  86 */     private boolean isNumber(String str) { return str.matches(""\\d+""); }
/*     */   }
/*     */ 
/*     */   
/*     */   final class ArtifactInfoComparator
/*     */     implements Comparator
/*     */   {
/*     */     private final LatestRevisionStrategy this$0;
/*     */ 
/*     */     
/*     */     public int compare(Object o1, Object o2) {
/*  97 */       String rev1 = ((ArtifactInfo)o1).getRevision();
/*  98 */       String rev2 = ((ArtifactInfo)o2).getRevision();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 108 */       VersionMatcher vmatcher = IvyContext.getContext().getSettings().getVersionMatcher();
/* 109 */       ModuleRevisionId mrid1 = ModuleRevisionId.newInstance("""", """", rev1);
/* 110 */       ModuleRevisionId mrid2 = ModuleRevisionId.newInstance("""", """", rev2);
/* 111 */       if (vmatcher.isDynamic(mrid1)) {
/* 112 */         int c = vmatcher.compare(mrid1, mrid2, LatestRevisionStrategy.this.mridComparator);
/* 113 */         return (c >= 0) ? 1 : -1;
/* 114 */       }  if (vmatcher.isDynamic(mrid2)) {
/* 115 */         int c = vmatcher.compare(mrid2, mrid1, LatestRevisionStrategy.this.mridComparator);
/* 116 */         return (c >= 0) ? -1 : 1;
/*     */       } 
/*     */       
/* 119 */       return LatestRevisionStrategy.this.mridComparator.compare(mrid1, mrid2);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class SpecialMeaning
/*     */   {
/*     */     private String name;
/*     */     private Integer value;
/*     */     
/* 129 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 133 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 137 */     public Integer getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */     
/* 141 */     public void setValue(Integer value) { this.value = value; }
/*     */ 
/*     */     
/*     */     public void validate() {
/* 145 */       if (this.name == null) {
/* 146 */         throw new IllegalStateException(""a special meaning should have a name"");
/*     */       }
/* 148 */       if (this.value == null) {
/* 149 */         throw new IllegalStateException(""a special meaning should have a value"");
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 156 */   private static final Map DEFAULT_SPECIAL_MEANINGS = new HashMap(); static  {
/* 157 */     DEFAULT_SPECIAL_MEANINGS.put(""dev"", new Integer(-1));
/* 158 */     DEFAULT_SPECIAL_MEANINGS.put(""rc"", new Integer(1));
/* 159 */     DEFAULT_SPECIAL_MEANINGS.put(""final"", new Integer(2));
/*     */   }
/*     */   
/* 162 */   private final Comparator mridComparator = new MridComparator();
/*     */   
/* 164 */   private final Comparator artifactInfoComparator = new ArtifactInfoComparator();
/*     */   
/* 166 */   private Map specialMeanings = null;
/*     */   
/*     */   private boolean usedefaultspecialmeanings = true;
/*     */   
/*     */   public LatestRevisionStrategy() {
/* 171 */     setComparator(this.artifactInfoComparator);
/* 172 */     setName(""latest-revision"");
/*     */   }
/*     */   
/*     */   public void addConfiguredSpecialMeaning(SpecialMeaning meaning) {
/* 176 */     meaning.validate();
/* 177 */     getSpecialMeanings().put(meaning.getName().toLowerCase(Locale.US), meaning.getValue());
/*     */   }
/*     */   
/*     */   public synchronized Map getSpecialMeanings() {
/* 181 */     if (this.specialMeanings == null) {
/* 182 */       this.specialMeanings = new HashMap();
/* 183 */       if (isUsedefaultspecialmeanings()) {
/* 184 */         this.specialMeanings.putAll(DEFAULT_SPECIAL_MEANINGS);
/*     */       }
/*     */     } 
/* 187 */     return this.specialMeanings;
/*     */   }
/*     */ 
/*     */   
/* 191 */   public boolean isUsedefaultspecialmeanings() { return this.usedefaultspecialmeanings; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setUsedefaultspecialmeanings(boolean usedefaultspecialmeanings) { this.usedefaultspecialmeanings = usedefaultspecialmeanings; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\LatestRevisionStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.LatestStrategy,"package org.apache.ivy.plugins.latest;
import java.util.Date;
import java.util.List;
public interface LatestStrategy {
  ArtifactInfo findLatest(ArtifactInfo[] paramArrayOfArtifactInfo, Date paramDate);
  List sort(ArtifactInfo[] paramArrayOfArtifactInfo);
  String getName();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\LatestStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.latest.LatestTimeStrategy,"/*    */ package org.apache.ivy.plugins.latest;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LatestTimeStrategy
/*    */   extends ComparatorLatestStrategy
/*    */ {
/* 23 */   private static final Comparator COMPARATOR = new Comparator() {
/*    */       public int compare(Object o1, Object o2) {
/* 25 */         long d1 = ((ArtifactInfo)o1).getLastModified();
/* 26 */         long d2 = ((ArtifactInfo)o2).getLastModified();
/* 27 */         return (new Long(d1)).compareTo(new Long(d2));
/*    */       }
/*    */     };
/*    */ 
/*    */   
/*    */   public LatestTimeStrategy() {
/* 33 */     super(COMPARATOR);
/* 34 */     setName(""latest-time"");
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\latest\LatestTimeStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.lock.AbstractLockStrategy,"/*    */ package org.apache.ivy.plugins.lock;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractLockStrategy
/*    */   implements LockStrategy
/*    */ {
/*    */   private String name;
/*    */   private boolean debugLocking = false;
/*    */   
/*    */   protected AbstractLockStrategy() {}
/*    */   
/* 29 */   protected AbstractLockStrategy(boolean debugLocking) { this.debugLocking = debugLocking; }
/*    */ 
/*    */ 
/*    */   
/* 33 */   public String getName() { return this.name; }
/*    */ 
/*    */   
/* 36 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */   
/* 39 */   public String toString() { return this.name; }
/*    */ 
/*    */   
/* 42 */   public boolean isDebugLocking() { return this.debugLocking; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\lock\AbstractLockStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.lock.ArtifactLockStrategy,"/*    */ package org.apache.ivy.plugins.lock;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ArtifactLockStrategy
/*    */   extends FileBasedLockStrategy
/*    */ {
/* 26 */   public ArtifactLockStrategy() { init(); }
/*    */ 
/*    */   
/*    */   public ArtifactLockStrategy(boolean debugLocking) {
/* 30 */     super(debugLocking);
/* 31 */     init();
/*    */   }
/*    */ 
/*    */   
/* 35 */   private void init() { setName(""artifact-lock""); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 40 */   public boolean lockArtifact(Artifact artifact, File artifactFileToDownload) throws InterruptedException { return acquireLock(new File(artifactFileToDownload.getAbsolutePath() + "".lck"")); }
/*    */ 
/*    */ 
/*    */   
/* 44 */   public void unlockArtifact(Artifact artifact, File artifactFileToDownload) { releaseLock(new File(artifactFileToDownload.getAbsolutePath() + "".lck"")); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\lock\ArtifactLockStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.lock.FileBasedLockStrategy,"/*     */ package org.apache.ivy.plugins.lock;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.RandomAccessFile;
/*     */ import java.nio.channels.FileChannel;
/*     */ import java.nio.channels.FileLock;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class FileBasedLockStrategy
/*     */   extends AbstractLockStrategy
/*     */ {
/*     */   private static final int SLEEP_TIME = 100;
/*     */   private static final long DEFAULT_TIMEOUT = 120000L;
/*     */   private FileLocker locker;
/*  44 */   private long timeout = 120000L;
/*     */   
/*  46 */   private Map currentLockCounters = new HashMap();
/*     */ 
/*     */   
/*  49 */   protected FileBasedLockStrategy() { this(new CreateFileLocker(false), false); }
/*     */ 
/*     */ 
/*     */   
/*  53 */   protected FileBasedLockStrategy(boolean debugLocking) { this(new CreateFileLocker(debugLocking), debugLocking); }
/*     */ 
/*     */   
/*     */   protected FileBasedLockStrategy(FileLocker locker, boolean debugLocking) {
/*  57 */     super(debugLocking);
/*  58 */     this.locker = locker;
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean acquireLock(File file) throws InterruptedException {
/*  63 */     if (isDebugLocking()) {
/*  64 */       debugLocking(""acquiring lock on "" + file);
/*     */     }
/*  66 */     long start = System.currentTimeMillis();
/*     */     do {
/*  68 */       synchronized (this) {
/*  69 */         if (hasLock(file)) {
/*  70 */           int holdLocks = incrementLock(file);
/*  71 */           if (isDebugLocking()) {
/*  72 */             debugLocking(""reentrant lock acquired on "" + file + "" in "" + (System.currentTimeMillis() - start) + ""ms"" + "" - hold locks = "" + holdLocks);
/*     */           }
/*     */ 
/*     */           
/*  76 */           return true;
/*     */         } 
/*  78 */         if (this.locker.tryLock(file)) {
/*  79 */           if (isDebugLocking()) {
/*  80 */             debugLocking(""lock acquired on "" + file + "" in "" + (System.currentTimeMillis() - start) + ""ms"");
/*     */           }
/*     */           
/*  83 */           incrementLock(file);
/*  84 */           return true;
/*     */         } 
/*     */       } 
/*  87 */       Thread.sleep(100L);
/*  88 */     } while (System.currentTimeMillis() - start < this.timeout);
/*  89 */     return false;
/*     */   }
/*     */   
/*     */   protected void releaseLock(File file) {
/*  93 */     synchronized (this) {
/*  94 */       int holdLocks = decrementLock(file);
/*  95 */       if (holdLocks == 0) {
/*  96 */         this.locker.unlock(file);
/*  97 */         if (isDebugLocking()) {
/*  98 */           debugLocking(""lock released on "" + file);
/*     */         }
/*     */       }
/* 101 */       else if (isDebugLocking()) {
/* 102 */         debugLocking(""reentrant lock released on "" + file + "" - hold locks = "" + holdLocks);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   private static void debugLocking(String msg) { Message.info(Thread.currentThread() + "" "" + System.currentTimeMillis() + "" "" + msg); }
/*     */ 
/*     */   
/*     */   private boolean hasLock(File file) {
/* 115 */     Integer c = (Integer)this.currentLockCounters.get(file);
/* 116 */     return (c != null && c.intValue() > 0);
/*     */   }
/*     */   
/*     */   private int incrementLock(File file) {
/* 120 */     Integer c = (Integer)this.currentLockCounters.get(file);
/* 121 */     int holdLocks = (c == null) ? 1 : (c.intValue() + 1);
/* 122 */     this.currentLockCounters.put(file, new Integer(holdLocks));
/* 123 */     return holdLocks;
/*     */   }
/*     */   
/*     */   private int decrementLock(File file) {
/* 127 */     Integer c = (Integer)this.currentLockCounters.get(file);
/* 128 */     int dc = (c == null) ? 0 : (c.intValue() - 1);
/* 129 */     this.currentLockCounters.put(file, new Integer(dc));
/* 130 */     return dc;
/*     */   }
/*     */ 
/*     */   
/*     */   public static interface FileLocker
/*     */   {
/*     */     boolean tryLock(File param1File);
/*     */     
/*     */     void unlock(File param1File);
/*     */   }
/*     */   
/*     */   public static class CreateFileLocker
/*     */     implements FileLocker
/*     */   {
/*     */     private boolean debugLocking;
/*     */     
/* 146 */     public CreateFileLocker(boolean debugLocking) { this.debugLocking = debugLocking; }
/*     */ 
/*     */     
/*     */     public boolean tryLock(File file) {
/*     */       try {
/* 151 */         if (file.getParentFile().exists() || file.getParentFile().mkdirs()) {
/* 152 */           if (file.createNewFile()) {
/* 153 */             return true;
/*     */           }
/* 155 */           if (this.debugLocking) {
/* 156 */             FileBasedLockStrategy.debugLocking(""file creation failed "" + file);
/*     */           }
/*     */         }
/*     */       
/* 160 */       } catch (IOException e) {
/*     */         
/* 162 */         Message.verbose(""file creation failed due to an exception: "" + e.getMessage() + "" ("" + file + "")"");
/*     */       } 
/*     */       
/* 165 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 169 */     public void unlock(File file) { file.delete(); }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class NIOFileLocker
/*     */     implements FileLocker
/*     */   {
/* 177 */     private Map locks = new HashMap();
/*     */     
/*     */     private boolean debugLocking;
/*     */     
/* 181 */     public NIOFileLocker(boolean debugLocking) { this.debugLocking = debugLocking; }
/*     */ 
/*     */     
/*     */     public boolean tryLock(File file) {
/*     */       try {
/* 186 */         if (file.getParentFile().exists() || file.getParentFile().mkdirs()) {
/* 187 */           RandomAccessFile raf = new RandomAccessFile(file, ""rw"");
/*     */           
/* 189 */           FileChannel channel = raf.getChannel();
/*     */           try {
/* 191 */             FileLock l = channel.tryLock();
/* 192 */             if (l != null) {
/* 193 */               synchronized (this) {
/* 194 */                 this.locks.put(file, l);
/*     */               } 
/* 196 */               return true;
/*     */             } 
/* 198 */             if (this.debugLocking) {
/* 199 */               FileBasedLockStrategy.debugLocking(""failed to acquire lock on "" + file);
/*     */             }
/*     */           } finally {
/*     */             
/* 203 */             raf.close();
/*     */           } 
/*     */         } 
/* 206 */       } catch (IOException e) {
/*     */         
/* 208 */         Message.verbose(""file lock failed due to an exception: "" + e.getMessage() + "" ("" + file + "")"");
/*     */       } 
/*     */       
/* 211 */       return false;
/*     */     }
/*     */     
/*     */     public void unlock(File file) {
/* 215 */       synchronized (this) {
/* 216 */         FileLock l = (FileLock)this.locks.get(file);
/* 217 */         if (l == null) {
/* 218 */           throw new IllegalArgumentException(""file not previously locked: "" + file);
/*     */         }
/*     */         try {
/* 221 */           l.release();
/* 222 */         } catch (IOException e) {
/* 223 */           Message.error(""problem while releasing lock on "" + file + "": "" + e.getMessage());
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\lock\FileBasedLockStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.lock.LockStrategy,"package org.apache.ivy.plugins.lock;
import java.io.File;
import org.apache.ivy.core.module.descriptor.Artifact;
public interface LockStrategy {
  String getName();
  boolean lockArtifact(Artifact paramArtifact, File paramFile) throws InterruptedException;
  void unlockArtifact(Artifact paramArtifact, File paramFile);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\lock\LockStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.lock.NoLockStrategy,"/*    */ package org.apache.ivy.plugins.lock;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NoLockStrategy
/*    */   extends AbstractLockStrategy
/*    */ {
/* 26 */   public NoLockStrategy() { setName(""no-lock""); }
/*    */ 
/*    */ 
/*    */   
/* 30 */   public final boolean lockArtifact(Artifact artifact, File artifactFileToDownload) { return true; }
/*    */   
/*    */   public final void unlockArtifact(Artifact artifact, File artifactFileToDownload) {}
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\lock\NoLockStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.AbstractPatternMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractPatternMatcher
/*    */   implements PatternMatcher
/*    */ {
/*    */   private final String name;
/*    */   
/* 34 */   public AbstractPatternMatcher(String name) { this.name = name; }
/*    */ 
/*    */   
/*    */   public Matcher getMatcher(String expression) {
/* 38 */     if (expression == null) {
/* 39 */       throw new NullPointerException();
/*    */     }
/* 41 */     if (""*"".equals(expression)) {
/* 42 */       return AnyMatcher.INSTANCE;
/*    */     }
/* 44 */     return newMatcher(expression);
/*    */   }
/*    */ 
/*    */   
/* 48 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   protected abstract Matcher newMatcher(String paramString);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 61 */   public String toString() { return getName(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\AbstractPatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.AnyMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AnyMatcher
/*    */   implements Matcher
/*    */ {
/* 24 */   public static final Matcher INSTANCE = new AnyMatcher();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean matches(String input) {
/* 30 */     if (input == null) {
/* 31 */       throw new NullPointerException();
/*    */     }
/* 33 */     return true;
/*    */   }
/*    */ 
/*    */   
/* 37 */   public boolean isExact() { return false; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\AnyMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.ExactOrRegexpPatternMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ExactOrRegexpPatternMatcher
/*    */   extends AbstractPatternMatcher
/*    */ {
/* 31 */   public static final ExactOrRegexpPatternMatcher INSTANCE = new ExactOrRegexpPatternMatcher();
/*    */ 
/*    */   
/* 34 */   public ExactOrRegexpPatternMatcher() { super(""exactOrRegexp""); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   protected Matcher newMatcher(String expression) { return new ExactOrRegexpMatcher(expression); }
/*    */   
/*    */   private static final class ExactOrRegexpMatcher
/*    */     implements Matcher
/*    */   {
/*    */     private Matcher exact;
/*    */     private Matcher regexp;
/*    */     
/*    */     public ExactOrRegexpMatcher(String expression) {
/* 47 */       this.exact = ExactPatternMatcher.INSTANCE.getMatcher(expression);
/* 48 */       this.regexp = RegexpPatternMatcher.INSTANCE.getMatcher(expression);
/*    */     }
/*    */     
/*    */     public boolean matches(String input) {
/* 52 */       if (input == null) {
/* 53 */         throw new NullPointerException();
/*    */       }
/* 55 */       return (this.exact.matches(input) || this.regexp.matches(input));
/*    */     }
/*    */ 
/*    */     
/* 59 */     public boolean isExact() { return this.regexp.isExact(); }
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\ExactOrRegexpPatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.ExactPatternMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ExactPatternMatcher
/*    */   extends AbstractPatternMatcher
/*    */ {
/* 27 */   public static final ExactPatternMatcher INSTANCE = new ExactPatternMatcher();
/*    */ 
/*    */   
/* 30 */   public ExactPatternMatcher() { super(""exact""); }
/*    */ 
/*    */ 
/*    */   
/* 34 */   protected Matcher newMatcher(String expression) { return new ExactMatcher(expression); }
/*    */   
/*    */   private static class ExactMatcher
/*    */     implements Matcher
/*    */   {
/*    */     private String expression;
/*    */     
/* 41 */     public ExactMatcher(String expression) { this.expression = expression; }
/*    */ 
/*    */     
/*    */     public boolean matches(String input) {
/* 45 */       if (input == null) {
/* 46 */         throw new NullPointerException();
/*    */       }
/* 48 */       return input.equals(this.expression);
/*    */     }
/*    */ 
/*    */     
/* 52 */     public boolean isExact() { return true; }
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\ExactPatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.GlobPatternMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ import java.util.regex.PatternSyntaxException;
/*    */ import org.apache.oro.text.GlobCompiler;
/*    */ import org.apache.oro.text.regex.MalformedPatternException;
/*    */ import org.apache.oro.text.regex.Pattern;
/*    */ import org.apache.oro.text.regex.Perl5Matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class GlobPatternMatcher
/*    */   extends AbstractPatternMatcher
/*    */ {
/* 41 */   public static final GlobPatternMatcher INSTANCE = new GlobPatternMatcher();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 50 */   public GlobPatternMatcher() { super(""glob""); }
/*    */ 
/*    */ 
/*    */   
/* 54 */   protected Matcher newMatcher(String expression) { return new GlobMatcher(expression); }
/*    */   
/*    */   private static class GlobMatcher
/*    */     implements Matcher
/*    */   {
/*    */     private Pattern pattern;
/*    */     private String expression;
/*    */     private Boolean exact;
/*    */     
/*    */     public GlobMatcher(String expression) throws PatternSyntaxException {
/* 64 */       this.expression = expression;
/*    */       try {
/* 66 */         this.pattern = (new GlobCompiler()).compile(expression);
/* 67 */       } catch (MalformedPatternException e) {
/* 68 */         throw new PatternSyntaxException(e.getMessage(), expression, 0);
/*    */       } 
/*    */     }
/*    */     
/*    */     public boolean matches(String input) {
/* 73 */       if (input == null) {
/* 74 */         throw new NullPointerException();
/*    */       }
/* 76 */       return (new Perl5Matcher()).matches(input, this.pattern);
/*    */     }
/*    */     
/*    */     public boolean isExact() {
/* 80 */       if (this.exact == null) {
/* 81 */         this.exact = calculateExact();
/*    */       }
/* 83 */       return this.exact.booleanValue();
/*    */     }
/*    */     
/*    */     private Boolean calculateExact() {
/* 87 */       Boolean result = Boolean.TRUE;
/*    */       
/* 89 */       char[] expressionChars = this.expression.toCharArray();
/* 90 */       for (int i = 0; i < expressionChars.length; i++) {
/* 91 */         char ch = expressionChars[i];
/* 92 */         if (ch == '*' || ch == '?' || ch == '[' || ch == ']') {
/* 93 */           result = Boolean.FALSE;
/*    */           
/*    */           break;
/*    */         } 
/*    */       } 
/* 98 */       return result;
/*    */     }
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\GlobPatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.MapMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ import java.util.Collections;
/*    */ import java.util.HashMap;
/*    */ import java.util.Iterator;
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MapMatcher
/*    */ {
/* 27 */   private Map matchers = new HashMap();
/*    */   
/*    */   private PatternMatcher pm;
/*    */   
/*    */   private Map attributes;
/*    */   
/*    */   public MapMatcher(Map attributes, PatternMatcher pm) {
/* 34 */     this.attributes = attributes;
/* 35 */     this.pm = pm;
/* 36 */     for (Iterator iter = attributes.entrySet().iterator(); iter.hasNext(); ) {
/* 37 */       Map.Entry entry = iter.next();
/* 38 */       String value = (String)entry.getValue();
/* 39 */       if (value != null) {
/* 40 */         this.matchers.put(entry.getKey(), pm.getMatcher(value));
/*    */       }
/*    */     } 
/*    */   }
/*    */   
/*    */   public boolean matches(Map m) {
/* 46 */     for (Iterator iter = this.matchers.entrySet().iterator(); iter.hasNext(); ) {
/* 47 */       Map.Entry entry = iter.next();
/*    */       
/* 49 */       Matcher matcher = (Matcher)entry.getValue();
/* 50 */       String value = (String)m.get(entry.getKey());
/* 51 */       if (value == null || !matcher.matches(value)) {
/* 52 */         return false;
/*    */       }
/*    */     } 
/*    */     
/* 56 */     return true;
/*    */   }
/*    */ 
/*    */   
/* 60 */   public String toString() { return this.attributes + "" ("" + this.pm.getName() + "")""; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public Map getAttributes() { return Collections.unmodifiableMap(this.attributes); }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public PatternMatcher getPatternMatcher() { return this.pm; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\MapMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.Matcher,"package org.apache.ivy.plugins.matcher;
public interface Matcher {
  boolean matches(String paramString);
  boolean isExact();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\Matcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.MatcherHelper,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ArtifactId;
/*    */ import org.apache.ivy.core.module.id.ModuleId;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class MatcherHelper
/*    */ {
/* 34 */   public static boolean matches(PatternMatcher m, String expression, String input) { return m.getMatcher(expression).matches(input); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public static boolean matches(PatternMatcher m, ModuleId exp, ModuleId mid) { return (matches(m, exp.getOrganisation(), mid.getOrganisation()) && matches(m, exp.getName(), mid.getName())); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 43 */   public static boolean matches(PatternMatcher m, ModuleRevisionId exp, ModuleRevisionId mrid) { return (matches(m, exp.getOrganisation(), mrid.getOrganisation()) && matches(m, exp.getName(), mrid.getName()) && matches(m, exp.getRevision(), mrid.getRevision())); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 49 */   public static boolean matches(PatternMatcher m, ArtifactId exp, ArtifactId aid) { return (matches(m, exp.getModuleId(), aid.getModuleId()) && matches(m, exp.getName(), aid.getName()) && matches(m, exp.getExt(), aid.getExt()) && matches(m, exp.getType(), aid.getType())); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 56 */   public static boolean isExact(PatternMatcher m, ModuleRevisionId exp) { return (isExact(m, exp.getOrganisation()) && isExact(m, exp.getName()) && isExact(m, exp.getRevision())); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 62 */   public static boolean isExact(PatternMatcher m, ModuleId exp) { return (isExact(m, exp.getOrganisation()) && isExact(m, exp.getName())); }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public static boolean isExact(PatternMatcher m, String exp) { return m.getMatcher(exp).isExact(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\MatcherHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.NoMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class NoMatcher
/*    */   implements Matcher
/*    */ {
/* 25 */   public static final Matcher INSTANCE = new NoMatcher();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean matches(String input) {
/* 31 */     if (input == null) {
/* 32 */       throw new NullPointerException();
/*    */     }
/* 34 */     return false;
/*    */   }
/*    */ 
/*    */   
/* 38 */   public boolean isExact() { return true; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\NoMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.PatternMatcher,"package org.apache.ivy.plugins.matcher;
public interface PatternMatcher {
  public static final String EXACT = ""exact"";
  public static final String REGEXP = ""regexp"";
  public static final String GLOB = ""glob"";
  public static final String EXACT_OR_REGEXP = ""exactOrRegexp"";
  public static final String ANY_EXPRESSION = ""*"";
  Matcher getMatcher(String paramString);
  String getName();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\PatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.matcher.RegexpPatternMatcher,"/*    */ package org.apache.ivy.plugins.matcher;
/*    */ 
/*    */ import java.util.regex.Pattern;
/*    */ import java.util.regex.PatternSyntaxException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class RegexpPatternMatcher
/*    */   extends AbstractPatternMatcher
/*    */ {
/* 29 */   public static final RegexpPatternMatcher INSTANCE = new RegexpPatternMatcher();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 38 */   public RegexpPatternMatcher() { super(""regexp""); }
/*    */ 
/*    */ 
/*    */   
/* 42 */   protected Matcher newMatcher(String expression) { return new RegexpMatcher(expression); }
/*    */   
/*    */   private static class RegexpMatcher
/*    */     implements Matcher
/*    */   {
/*    */     private Pattern pattern;
/*    */     private String expression;
/*    */     private Boolean exact;
/*    */     
/*    */     public RegexpMatcher(String expression) throws PatternSyntaxException {
/* 52 */       if (expression == null) {
/* 53 */         throw new NullPointerException();
/*    */       }
/* 55 */       this.expression = expression;
/* 56 */       this.pattern = Pattern.compile(expression);
/*    */     }
/*    */     
/*    */     public boolean matches(String input) {
/* 60 */       if (input == null) {
/* 61 */         throw new NullPointerException();
/*    */       }
/* 63 */       return this.pattern.matcher(input).matches();
/*    */     }
/*    */     
/*    */     public boolean isExact() {
/* 67 */       if (this.exact == null) {
/* 68 */         this.exact = calculateExact();
/*    */       }
/* 70 */       return this.exact.booleanValue();
/*    */     }
/*    */     
/*    */     private Boolean calculateExact() {
/* 74 */       Boolean result = Boolean.TRUE;
/*    */       
/* 76 */       char[] expressionChars = this.expression.toCharArray();
/* 77 */       for (int i = 0; i < expressionChars.length; i++) {
/* 78 */         char ch = expressionChars[i];
/* 79 */         if (!Character.isLetterOrDigit(ch) && !Character.isWhitespace(ch) && '-' != ch && '_' != ch) {
/*    */           
/* 81 */           result = Boolean.FALSE;
/*    */           
/*    */           break;
/*    */         } 
/*    */       } 
/* 86 */       return result;
/*    */     }
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\matcher\RegexpPatternMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.MRIDRule,"/*    */ package org.apache.ivy.plugins.namespace;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MRIDRule
/*    */ {
/*    */   private String org;
/*    */   private String module;
/*    */   private String branch;
/*    */   private String rev;
/*    */   
/*    */   public MRIDRule(String org, String mod, String rev) {
/* 30 */     this.org = org;
/* 31 */     this.module = mod;
/* 32 */     this.rev = rev;
/*    */   }
/*    */ 
/*    */   
/*    */   public MRIDRule() {}
/*    */ 
/*    */   
/* 39 */   public String getModule() { return this.module; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public void setModule(String module) { this.module = module; }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public String getOrg() { return this.org; }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public void setOrg(String org) { this.org = org; }
/*    */ 
/*    */ 
/*    */   
/* 55 */   public String getRev() { return this.rev; }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public void setRev(String rev) { this.rev = rev; }
/*    */ 
/*    */ 
/*    */   
/* 63 */   public String toString() { return ""[ "" + this.org + "" "" + this.module + ((this.branch != null) ? ("" "" + this.branch) : """") + "" "" + this.rev + "" ]""; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 68 */   public String getBranch() { return this.branch; }
/*    */ 
/*    */ 
/*    */   
/* 72 */   public void setBranch(String branch) { this.branch = branch; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\MRIDRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.MRIDTransformationRule,"/*     */ package org.apache.ivy.plugins.namespace;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MRIDTransformationRule
/*     */   implements NamespaceTransformer
/*     */ {
/*     */   private static class MridRuleMatcher
/*     */   {
/*  31 */     private static final String[] TYPES = new String[] { ""o"", ""m"", ""b"", ""r"" };
/*     */     
/*  33 */     private Matcher[] matchers = new Matcher[TYPES.length];
/*     */ 
/*     */     
/*     */     public boolean match(MRIDRule src, ModuleRevisionId mrid) {
/*  37 */       this.matchers[0] = Pattern.compile(getPattern(src.getOrg())).matcher(mrid.getOrganisation());
/*     */       
/*  39 */       if (!this.matchers[0].matches()) {
/*  40 */         return false;
/*     */       }
/*  42 */       this.matchers[1] = Pattern.compile(getPattern(src.getModule())).matcher(mrid.getName());
/*  43 */       if (!this.matchers[1].matches()) {
/*  44 */         return false;
/*     */       }
/*  46 */       if (mrid.getBranch() == null) {
/*  47 */         this.matchers[2] = null;
/*     */       } else {
/*  49 */         this.matchers[2] = Pattern.compile(getPattern(src.getBranch())).matcher(mrid.getBranch());
/*     */         
/*  51 */         if (!this.matchers[2].matches()) {
/*  52 */           return false;
/*     */         }
/*     */       } 
/*  55 */       this.matchers[3] = Pattern.compile(getPattern(src.getRev())).matcher(mrid.getRevision());
/*  56 */       if (!this.matchers[3].matches()) {
/*  57 */         return false;
/*     */       }
/*     */       
/*  60 */       return true;
/*     */     }
/*     */ 
/*     */     
/*     */     public ModuleRevisionId apply(MRIDRule dest, ModuleRevisionId mrid) {
/*  65 */       String org = applyRules(dest.getOrg(), ""o"");
/*  66 */       String mod = applyRules(dest.getModule(), ""m"");
/*  67 */       String branch = applyRules(dest.getBranch(), ""b"");
/*  68 */       String rev = applyRules(dest.getRev(), ""r"");
/*     */       
/*  70 */       return ModuleRevisionId.newInstance(org, mod, branch, rev, mrid.getQualifiedExtraAttributes());
/*     */     }
/*     */ 
/*     */     
/*     */     private String applyRules(String str, String type) {
/*  75 */       for (int i = 0; i < TYPES.length; i++) {
/*  76 */         str = applyTypeRule(str, TYPES[i], type, this.matchers[i]);
/*     */       }
/*  78 */       return str;
/*     */     }
/*     */     
/*     */     private String applyTypeRule(String rule, String type, String ruleType, Matcher m) {
/*  82 */       if (m == null) {
/*  83 */         return rule;
/*     */       }
/*  85 */       String res = (rule == null) ? (""$"" + ruleType + ""0"") : rule;
/*  86 */       for (int i = 0; i < TYPES.length; i++) {
/*  87 */         if (TYPES[i].equals(type)) {
/*  88 */           res = res.replaceAll(""([^\\\\])\\$"" + type, ""$1\\$"");
/*  89 */           res = res.replaceAll(""^\\$"" + type, ""\\$"");
/*     */         } else {
/*  91 */           res = res.replaceAll(""([^\\\\])\\$"" + TYPES[i], ""$1\\\\\\$"" + TYPES[i]);
/*  92 */           res = res.replaceAll(""^\\$"" + TYPES[i], ""\\\\\\$"" + TYPES[i]);
/*     */         } 
/*     */       } 
/*     */       
/*  96 */       StringBuffer sb = new StringBuffer();
/*  97 */       m.reset();
/*  98 */       m.find();
/*  99 */       m.appendReplacement(sb, res);
/*     */       
/* 101 */       String str = sb.toString();
/*     */       
/* 103 */       if (rule == null && (""$"" + ruleType + ""0"").equals(str)) {
/* 104 */         return null;
/*     */       }
/*     */       
/* 107 */       return str;
/*     */     }
/*     */ 
/*     */     
/* 111 */     private String getPattern(String p) { return (p == null) ? "".*"" : p; }
/*     */     
/*     */     private MridRuleMatcher() {}
/*     */   }
/* 115 */   private List src = new ArrayList();
/*     */   
/*     */   private MRIDRule dest;
/*     */ 
/*     */   
/* 120 */   public void addSrc(MRIDRule src) { this.src.add(src); }
/*     */ 
/*     */   
/*     */   public void addDest(MRIDRule dest) {
/* 124 */     if (this.dest != null) {
/* 125 */       throw new IllegalArgumentException(""only one dest is allowed per mapping"");
/*     */     }
/* 127 */     this.dest = dest;
/*     */   }
/*     */   
/*     */   public ModuleRevisionId transform(ModuleRevisionId mrid) {
/* 131 */     MridRuleMatcher matcher = new MridRuleMatcher();
/* 132 */     for (Iterator iter = this.src.iterator(); iter.hasNext(); ) {
/* 133 */       MRIDRule rule = iter.next();
/* 134 */       if (matcher.match(rule, mrid)) {
/* 135 */         ModuleRevisionId destMrid = matcher.apply(this.dest, mrid);
/* 136 */         Message.debug(""found matching namespace rule: "" + rule + "". Applied "" + this.dest + "" on "" + mrid + "". Transformed to "" + destMrid);
/*     */         
/* 138 */         return destMrid;
/*     */       } 
/*     */     } 
/* 141 */     return mrid;
/*     */   }
/*     */ 
/*     */   
/* 145 */   public boolean isIdentity() { return false; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\MRIDTransformationRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.Namespace,"/*     */ package org.apache.ivy.plugins.namespace;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Namespace
/*     */ {
/*  29 */   public static final Namespace SYSTEM_NAMESPACE = new Namespace();
/*     */ 
/*     */   
/*  32 */   private List rules = new ArrayList();
/*     */   
/*     */   private String name;
/*     */   
/*     */   private boolean chainRules = false;
/*     */   
/*  38 */   private NamespaceTransformer fromSystemTransformer = new NamespaceTransformer() {
/*     */       public ModuleRevisionId transform(ModuleRevisionId mrid) {
/*  40 */         if (mrid == null) {
/*  41 */           return null;
/*     */         }
/*  43 */         for (Iterator iter = Namespace.this.rules.iterator(); iter.hasNext(); ) {
/*  44 */           NamespaceRule rule = iter.next();
/*  45 */           ModuleRevisionId nmrid = rule.getFromSystem().transform(mrid);
/*  46 */           if (Namespace.this.chainRules) {
/*  47 */             mrid = nmrid; continue;
/*  48 */           }  if (!nmrid.equals(mrid)) {
/*  49 */             return nmrid;
/*     */           }
/*     */         } 
/*  52 */         return mrid;
/*     */       }
/*     */       private final Namespace this$0;
/*     */       
/*  56 */       public boolean isIdentity() { return Namespace.this.rules.isEmpty(); }
/*     */     };
/*     */ 
/*     */   
/*  60 */   private NamespaceTransformer toSystemTransformer = new NamespaceTransformer() { private final Namespace this$0;
/*     */       public ModuleRevisionId transform(ModuleRevisionId mrid) {
/*  62 */         if (mrid == null) {
/*  63 */           return null;
/*     */         }
/*  65 */         for (Iterator iter = Namespace.this.rules.iterator(); iter.hasNext(); ) {
/*  66 */           NamespaceRule rule = iter.next();
/*  67 */           ModuleRevisionId nmrid = rule.getToSystem().transform(mrid);
/*  68 */           if (Namespace.this.chainRules) {
/*  69 */             mrid = nmrid; continue;
/*  70 */           }  if (!nmrid.equals(mrid)) {
/*  71 */             return nmrid;
/*     */           }
/*     */         } 
/*  74 */         return mrid;
/*     */       }
/*     */ 
/*     */       
/*  78 */       public boolean isIdentity() { return Namespace.this.rules.isEmpty(); } }
/*     */   ;
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void addRule(NamespaceRule rule) { this.rules.add(rule); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public NamespaceTransformer getFromSystemTransformer() { return this.fromSystemTransformer; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public NamespaceTransformer getToSystemTransformer() { return this.toSystemTransformer; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public boolean isChainrules() { return this.chainRules; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setChainrules(boolean chainRules) { this.chainRules = chainRules; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\Namespace.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.NameSpaceHelper,"/*     */ package org.apache.ivy.plugins.namespace;
/*     */ 
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ArtifactId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class NameSpaceHelper
/*     */ {
/*  37 */   public static DependencyDescriptor toSystem(DependencyDescriptor dd, Namespace ns) { return DefaultDependencyDescriptor.transformInstance(dd, ns); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  42 */   public static DependencyDescriptor transform(DependencyDescriptor dd, NamespaceTransformer t, boolean fromSystem) { return (DependencyDescriptor)DefaultDependencyDescriptor.transformInstance(dd, t, fromSystem); }
/*     */ 
/*     */ 
/*     */   
/*  46 */   public static ModuleDescriptor toSystem(ModuleDescriptor md, Namespace ns) { return DefaultModuleDescriptor.transformInstance(md, ns); }
/*     */ 
/*     */   
/*     */   public static ResolvedModuleRevision toSystem(ResolvedModuleRevision rmr, Namespace ns) {
/*  50 */     if (ns.getToSystemTransformer().isIdentity()) {
/*  51 */       return rmr;
/*     */     }
/*  53 */     ModuleDescriptor md = toSystem(rmr.getDescriptor(), ns);
/*  54 */     if (md.equals(rmr.getDescriptor())) {
/*  55 */       return rmr;
/*     */     }
/*  57 */     return new ResolvedModuleRevision(rmr.getResolver(), rmr.getArtifactResolver(), md, transform(rmr.getReport(), ns.getToSystemTransformer()), rmr.isForce());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Artifact transform(Artifact artifact, NamespaceTransformer t) {
/*  64 */     if (t.isIdentity()) {
/*  65 */       return artifact;
/*     */     }
/*  67 */     ModuleRevisionId mrid = t.transform(artifact.getModuleRevisionId());
/*  68 */     if (artifact.getModuleRevisionId().equals(mrid)) {
/*  69 */       return artifact;
/*     */     }
/*  71 */     return (Artifact)new DefaultArtifact(mrid, artifact.getPublicationDate(), artifact.getName(), artifact.getType(), artifact.getExt(), artifact.getUrl(), artifact.getQualifiedExtraAttributes());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static MetadataArtifactDownloadReport transform(MetadataArtifactDownloadReport report, NamespaceTransformer t) {
/*  78 */     if (t.isIdentity()) {
/*  79 */       return report;
/*     */     }
/*  81 */     MetadataArtifactDownloadReport madr = new MetadataArtifactDownloadReport(transform(report.getArtifact(), t));
/*     */     
/*  83 */     madr.setSearched(report.isSearched());
/*  84 */     madr.setDownloadStatus(report.getDownloadStatus());
/*  85 */     madr.setDownloadDetails(report.getDownloadDetails());
/*  86 */     madr.setArtifactOrigin(report.getArtifactOrigin());
/*  87 */     madr.setDownloadTimeMillis(report.getDownloadTimeMillis());
/*  88 */     madr.setOriginalLocalFile(report.getOriginalLocalFile());
/*  89 */     madr.setLocalFile(report.getLocalFile());
/*  90 */     madr.setSize(report.getSize());
/*  91 */     return madr;
/*     */   }
/*     */   
/*     */   public static ArtifactId transform(ArtifactId artifactId, NamespaceTransformer t) {
/*  95 */     if (t.isIdentity()) {
/*  96 */       return artifactId;
/*     */     }
/*  98 */     ModuleId mid = transform(artifactId.getModuleId(), t);
/*  99 */     if (mid.equals(artifactId.getModuleId())) {
/* 100 */       return artifactId;
/*     */     }
/* 102 */     return new ArtifactId(mid, artifactId.getName(), artifactId.getType(), artifactId.getExt());
/*     */   }
/*     */   
/*     */   public static ModuleId transform(ModuleId mid, NamespaceTransformer t) {
/* 106 */     if (t.isIdentity()) {
/* 107 */       return mid;
/*     */     }
/* 109 */     return t.transform(new ModuleRevisionId(mid, """")).getModuleId();
/*     */   }
/*     */ 
/*     */   
/* 113 */   public static String transformOrganisation(String org, NamespaceTransformer t) { return transform(new ModuleId(org, """"), t).getOrganisation(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\NameSpaceHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.NamespaceRule,"/*    */ package org.apache.ivy.plugins.namespace;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NamespaceRule
/*    */ {
/*    */   private String name;
/*    */   private String description;
/*    */   private MRIDTransformationRule fromSystem;
/*    */   private MRIDTransformationRule toSystem;
/*    */   
/* 30 */   public MRIDTransformationRule getFromSystem() { return this.fromSystem; }
/*    */ 
/*    */   
/*    */   public void addFromsystem(MRIDTransformationRule fromSystem) {
/* 34 */     if (this.fromSystem != null) {
/* 35 */       throw new IllegalArgumentException(""only one fromsystem is allowed per rule"");
/*    */     }
/* 37 */     this.fromSystem = fromSystem;
/*    */   }
/*    */ 
/*    */   
/* 41 */   public MRIDTransformationRule getToSystem() { return this.toSystem; }
/*    */ 
/*    */   
/*    */   public void addTosystem(MRIDTransformationRule toSystem) {
/* 45 */     if (this.toSystem != null) {
/* 46 */       throw new IllegalArgumentException(""only one tosystem is allowed per rule"");
/*    */     }
/* 48 */     this.toSystem = toSystem;
/*    */   }
/*    */ 
/*    */   
/* 52 */   public String getDescription() { return this.description; }
/*    */ 
/*    */ 
/*    */   
/* 56 */   public void setDescription(String description) { this.description = description; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public void setName(String name) { this.name = name; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\NamespaceRule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.namespace.NamespaceTransformer,"package org.apache.ivy.plugins.namespace;
import org.apache.ivy.core.module.id.ModuleRevisionId;
public interface NamespaceTransformer {
  ModuleRevisionId transform(ModuleRevisionId paramModuleRevisionId);
  boolean isIdentity();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\namespace\NamespaceTransformer.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.AbstractModuleDescriptorParser,"/*     */ package org.apache.ivy.plugins.parser;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.HashSet;
/*     */ import java.util.List;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.ResourceHelper;
/*     */ import org.apache.ivy.plugins.repository.url.URLResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractModuleDescriptorParser
/*     */   implements ModuleDescriptorParser
/*     */ {
/*  48 */   public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descriptorURL, boolean validate) throws ParseException, IOException { return parseDescriptor(ivySettings, descriptorURL, (Resource)new URLResource(descriptorURL), validate); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   public String getType() { return ""ivy""; }
/*     */ 
/*     */ 
/*     */   
/*  57 */   public Artifact getMetadataArtifact(ModuleRevisionId mrid, Resource res) { return DefaultArtifact.newIvyArtifact(mrid, new Date(res.getLastModified())); }
/*     */ 
/*     */   
/*     */   protected static abstract class AbstractParser
/*     */     extends DefaultHandler
/*     */   {
/*     */     private static final String DEFAULT_CONF_MAPPING = ""*->*"";
/*     */     
/*     */     private String defaultConf;
/*     */     
/*     */     private String defaultConfMapping;
/*     */     
/*     */     private DefaultDependencyDescriptor defaultConfMappingDescriptor;
/*     */     
/*     */     private Resource res;
/*     */     
/*  73 */     private List errors = new ArrayList();
/*     */     
/*     */     private DefaultModuleDescriptor md;
/*     */     
/*     */     private ModuleDescriptorParser parser;
/*     */ 
/*     */     
/*  80 */     protected AbstractParser(ModuleDescriptorParser parser) { this.parser = parser; }
/*     */ 
/*     */ 
/*     */     
/*  84 */     public ModuleDescriptorParser getModuleDescriptorParser() { return this.parser; }
/*     */ 
/*     */     
/*     */     protected void checkErrors() throws ParseException {
/*  88 */       if (!this.errors.isEmpty()) {
/*  89 */         throw new ParseException(this.errors.toString(), 0);
/*     */       }
/*     */     }
/*     */     
/*     */     public void setResource(Resource res) {
/*  94 */       this.res = res;
/*  95 */       this.md = new DefaultModuleDescriptor(this.parser, res);
/*  96 */       this.md.setLastModified(ResourceHelper.getLastModifiedOrDefault(res));
/*     */     }
/*     */ 
/*     */     
/* 100 */     protected Resource getResource() { return this.res; }
/*     */ 
/*     */ 
/*     */     
/* 104 */     protected String getDefaultConfMapping() { return this.defaultConfMapping; }
/*     */ 
/*     */ 
/*     */     
/* 108 */     protected void setDefaultConfMapping(String defaultConf) { this.defaultConfMapping = defaultConf; }
/*     */ 
/*     */ 
/*     */     
/* 112 */     protected void parseDepsConfs(String confs, DefaultDependencyDescriptor dd) { parseDepsConfs(confs, dd, (this.defaultConfMapping != null)); }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 117 */     protected void parseDepsConfs(String confs, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande) { parseDepsConfs(confs, dd, useDefaultMappingToGuessRightOperande, true); }
/*     */ 
/*     */ 
/*     */     
/*     */     protected void parseDepsConfs(String confs, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande, boolean evaluateConditions) {
/* 122 */       if (confs == null) {
/*     */         return;
/*     */       }
/*     */       
/* 126 */       String[] conf = confs.split("";"");
/* 127 */       parseDepsConfs(conf, dd, useDefaultMappingToGuessRightOperande, evaluateConditions);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 132 */     protected void parseDepsConfs(String[] conf, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande) { parseDepsConfs(conf, dd, useDefaultMappingToGuessRightOperande, true); }
/*     */ 
/*     */ 
/*     */     
/*     */     protected void parseDepsConfs(String[] conf, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande, boolean evaluateConditions) {
/* 137 */       replaceConfigurationWildcards((ModuleDescriptor)this.md);
/* 138 */       for (int i = 0; i < conf.length; i++) {
/* 139 */         String[] ops = conf[i].split(""->"");
/* 140 */         if (ops.length == 1) {
/* 141 */           String[] modConfs = ops[0].split("","");
/* 142 */           if (!useDefaultMappingToGuessRightOperande) {
/* 143 */             for (int j = 0; j < modConfs.length; j++) {
/* 144 */               dd.addDependencyConfiguration(modConfs[j].trim(), modConfs[j].trim());
/*     */             }
/*     */           } else {
/* 147 */             for (int j = 0; j < modConfs.length; j++) {
/* 148 */               String[] depConfs = getDefaultConfMappingDescriptor().getDependencyConfigurations(modConfs[j]);
/*     */               
/* 150 */               if (depConfs.length > 0) {
/* 151 */                 for (int k = 0; k < depConfs.length; k++) {
/* 152 */                   String mappedDependency = evaluateConditions ? evaluateCondition(depConfs[k].trim(), dd) : depConfs[k].trim();
/*     */ 
/*     */                   
/* 155 */                   if (mappedDependency != null) {
/* 156 */                     dd.addDependencyConfiguration(modConfs[j].trim(), mappedDependency);
/*     */                   }
/*     */                 }
/*     */               
/*     */               }
/*     */               else {
/*     */                 
/* 163 */                 dd.addDependencyConfiguration(modConfs[j].trim(), modConfs[j].trim());
/*     */               }
/*     */             
/*     */             } 
/*     */           } 
/* 168 */         } else if (ops.length == 2) {
/* 169 */           String[] modConfs = ops[0].split("","");
/* 170 */           String[] depConfs = ops[1].split("","");
/* 171 */           for (int j = 0; j < modConfs.length; j++) {
/* 172 */             for (int k = 0; k < depConfs.length; k++) {
/* 173 */               String mappedDependency = evaluateConditions ? evaluateCondition(depConfs[k].trim(), dd) : depConfs[k].trim();
/*     */               
/* 175 */               if (mappedDependency != null) {
/* 176 */                 dd.addDependencyConfiguration(modConfs[j].trim(), mappedDependency);
/*     */               }
/*     */             } 
/*     */           } 
/*     */         } else {
/* 181 */           addError(""invalid conf "" + conf[i] + "" for "" + dd);
/*     */         } 
/*     */       } 
/*     */       
/* 185 */       if (this.md.isMappingOverride()) {
/* 186 */         addExtendingConfigurations(conf, dd, useDefaultMappingToGuessRightOperande);
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private String evaluateCondition(String conf, DefaultDependencyDescriptor dd) {
/* 203 */       if (conf.charAt(0) != '[') {
/* 204 */         return conf;
/*     */       }
/*     */       
/* 207 */       int endConditionIndex = conf.indexOf(']');
/* 208 */       if (endConditionIndex == -1) {
/* 209 */         addError(""invalid conf "" + conf + "" for "" + dd);
/* 210 */         return null;
/*     */       } 
/*     */       
/* 213 */       String condition = conf.substring(1, endConditionIndex);
/*     */       
/* 215 */       int notEqualIndex = condition.indexOf(""!="");
/* 216 */       if (notEqualIndex == -1) {
/* 217 */         int equalIndex = condition.indexOf('=');
/* 218 */         if (equalIndex == -1) {
/* 219 */           addError(""invalid conf "" + conf + "" for "" + dd.getDependencyRevisionId());
/* 220 */           return null;
/*     */         } 
/*     */         
/* 223 */         String leftOp = condition.substring(0, equalIndex).trim();
/* 224 */         String rightOp = condition.substring(equalIndex + 1).trim();
/*     */ 
/*     */         
/* 227 */         if (leftOp.equals(""org"") || leftOp.equals(""organization"")) {
/* 228 */           leftOp = ""organisation"";
/*     */         }
/*     */         
/* 231 */         String attrValue = dd.getAttribute(leftOp);
/* 232 */         if (!rightOp.equals(attrValue)) {
/* 233 */           return null;
/*     */         }
/*     */       } else {
/* 236 */         String leftOp = condition.substring(0, notEqualIndex).trim();
/* 237 */         String rightOp = condition.substring(notEqualIndex + 2).trim();
/*     */ 
/*     */         
/* 240 */         if (leftOp.equals(""org"") || leftOp.equals(""organization"")) {
/* 241 */           leftOp = ""organisation"";
/*     */         }
/*     */         
/* 244 */         String attrValue = dd.getAttribute(leftOp);
/* 245 */         if (rightOp.equals(attrValue)) {
/* 246 */           return null;
/*     */         }
/*     */       } 
/*     */       
/* 250 */       return conf.substring(endConditionIndex + 1);
/*     */     }
/*     */ 
/*     */     
/*     */     private void addExtendingConfigurations(String[] confs, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande) {
/* 255 */       for (int i = 0; i < confs.length; i++) {
/* 256 */         addExtendingConfigurations(confs[i], dd, useDefaultMappingToGuessRightOperande);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/*     */     private void addExtendingConfigurations(String conf, DefaultDependencyDescriptor dd, boolean useDefaultMappingToGuessRightOperande) {
/* 262 */       Set configsToAdd = new HashSet();
/* 263 */       Configuration[] configs = this.md.getConfigurations();
/* 264 */       for (int i = 0; i < configs.length; i++) {
/* 265 */         String[] ext = configs[i].getExtends();
/* 266 */         for (int j = 0; j < ext.length; j++) {
/* 267 */           if (conf.equals(ext[j])) {
/* 268 */             String configName = configs[i].getName();
/* 269 */             configsToAdd.add(configName);
/* 270 */             addExtendingConfigurations(configName, dd, useDefaultMappingToGuessRightOperande);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 276 */       String[] confs = configsToAdd.toArray(new String[configsToAdd.size()]);
/* 277 */       parseDepsConfs(confs, dd, useDefaultMappingToGuessRightOperande);
/*     */     }
/*     */     
/*     */     protected DependencyDescriptor getDefaultConfMappingDescriptor() {
/* 281 */       if (this.defaultConfMappingDescriptor == null) {
/* 282 */         this.defaultConfMappingDescriptor = new DefaultDependencyDescriptor(ModuleRevisionId.newInstance("""", """", """"), false);
/*     */         
/* 284 */         parseDepsConfs(this.defaultConfMapping, this.defaultConfMappingDescriptor, false, false);
/*     */       } 
/* 286 */       return (DependencyDescriptor)this.defaultConfMappingDescriptor;
/*     */     }
/*     */     
/*     */     protected void addError(String msg) {
/* 290 */       if (this.res != null) {
/* 291 */         this.errors.add(msg + "" in "" + this.res + ""\n"");
/*     */       } else {
/* 293 */         this.errors.add(msg + ""\n"");
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 298 */     public void warning(SAXParseException ex) { Message.warn(""xml parsing: "" + getLocationString(ex) + "": "" + ex.getMessage()); }
/*     */ 
/*     */ 
/*     */     
/* 302 */     public void error(SAXParseException ex) { addError(""xml parsing: "" + getLocationString(ex) + "": "" + ex.getMessage()); }
/*     */ 
/*     */ 
/*     */     
/* 306 */     public void fatalError(SAXParseException ex) throws SAXException { addError(""[Fatal Error] "" + getLocationString(ex) + "": "" + ex.getMessage()); }
/*     */ 
/*     */ 
/*     */     
/*     */     private String getLocationString(SAXParseException ex) {
/* 311 */       StringBuffer str = new StringBuffer();
/*     */       
/* 313 */       String systemId = ex.getSystemId();
/* 314 */       if (systemId != null) {
/* 315 */         int index = systemId.lastIndexOf('/');
/* 316 */         if (index != -1) {
/* 317 */           systemId = systemId.substring(index + 1);
/*     */         }
/* 319 */         str.append(systemId);
/* 320 */       } else if (getResource() != null) {
/* 321 */         str.append(getResource().toString());
/*     */       } 
/* 323 */       str.append(':');
/* 324 */       str.append(ex.getLineNumber());
/* 325 */       str.append(':');
/* 326 */       str.append(ex.getColumnNumber());
/*     */       
/* 328 */       return str.toString();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 333 */     protected String getDefaultConf() { return (this.defaultConfMapping != null) ? this.defaultConfMapping : ((this.defaultConf != null) ? this.defaultConf : ""*->*""); }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 338 */     protected void setDefaultConf(String defaultConf) { this.defaultConf = defaultConf; }
/*     */ 
/*     */     
/*     */     public ModuleDescriptor getModuleDescriptor() throws ParseException {
/* 342 */       checkErrors();
/* 343 */       return (ModuleDescriptor)this.md;
/*     */     }
/*     */ 
/*     */     
/* 347 */     protected Date getDefaultPubDate() { return new Date(this.md.getLastModified()); }
/*     */ 
/*     */     
/*     */     private void replaceConfigurationWildcards(ModuleDescriptor md) {
/* 351 */       Configuration[] configs = md.getConfigurations();
/* 352 */       for (int i = 0; i < configs.length; i++) {
/* 353 */         configs[i].replaceWildcards(md);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 358 */     protected void setMd(DefaultModuleDescriptor md) { this.md = md; }
/*     */ 
/*     */ 
/*     */     
/* 362 */     protected DefaultModuleDescriptor getMd() { return this.md; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\AbstractModuleDescriptorParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.ModuleDescriptorParser,"package org.apache.ivy.plugins.parser;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.text.ParseException;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.plugins.repository.Resource;
public interface ModuleDescriptorParser {
  ModuleDescriptor parseDescriptor(ParserSettings paramParserSettings, URL paramURL, boolean paramBoolean) throws ParseException, IOException;
  ModuleDescriptor parseDescriptor(ParserSettings paramParserSettings, URL paramURL, Resource paramResource, boolean paramBoolean) throws ParseException, IOException;
  void toIvyFile(InputStream paramInputStream, Resource paramResource, File paramFile, ModuleDescriptor paramModuleDescriptor) throws ParseException, IOException;
  boolean accept(Resource paramResource);
  String getType();
  Artifact getMetadataArtifact(ModuleRevisionId paramModuleRevisionId, Resource paramResource);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\ModuleDescriptorParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry,"/*    */ package org.apache.ivy.plugins.parser;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import java.net.URL;
/*    */ import java.text.ParseException;
/*    */ import java.util.Iterator;
/*    */ import java.util.LinkedList;
/*    */ import java.util.List;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.plugins.parser.m2.PomModuleDescriptorParser;
/*    */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ModuleDescriptorParserRegistry
/*    */   extends AbstractModuleDescriptorParser
/*    */ {
/* 36 */   private static final ModuleDescriptorParserRegistry INSTANCE = new ModuleDescriptorParserRegistry();
/*    */ 
/*    */ 
/*    */   
/* 40 */   public static ModuleDescriptorParserRegistry getInstance() { return INSTANCE; }
/*    */ 
/*    */   
/* 43 */   private List parsers = new LinkedList();
/*    */   
/*    */   private ModuleDescriptorParserRegistry() {
/* 46 */     this.parsers.add(PomModuleDescriptorParser.getInstance());
/* 47 */     this.parsers.add(XmlModuleDescriptorParser.getInstance());
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 61 */   public void addParser(ModuleDescriptorParser parser) { this.parsers.add(0, parser); }
/*    */ 
/*    */ 
/*    */   
/* 65 */   public ModuleDescriptorParser[] getParsers() { return (ModuleDescriptorParser[])this.parsers.toArray((Object[])new ModuleDescriptorParser[this.parsers.size()]); }
/*    */ 
/*    */ 
/*    */   
/*    */   public ModuleDescriptorParser getParser(Resource res) {
/* 70 */     for (Iterator iter = this.parsers.iterator(); iter.hasNext(); ) {
/* 71 */       ModuleDescriptorParser parser = iter.next();
/* 72 */       if (parser.accept(res)) {
/* 73 */         return parser;
/*    */       }
/*    */     } 
/* 76 */     return null;
/*    */   }
/*    */ 
/*    */   
/*    */   public ModuleDescriptor parseDescriptor(ParserSettings settings, URL descriptorURL, Resource res, boolean validate) throws ParseException, IOException {
/* 81 */     ModuleDescriptorParser parser = getParser(res);
/* 82 */     if (parser == null) {
/* 83 */       Message.warn(""no module descriptor parser found for "" + res);
/* 84 */       return null;
/*    */     } 
/* 86 */     return parser.parseDescriptor(settings, descriptorURL, res, validate);
/*    */   }
/*    */ 
/*    */   
/* 90 */   public boolean accept(Resource res) { return (getParser(res) != null); }
/*    */ 
/*    */ 
/*    */   
/*    */   public void toIvyFile(InputStream is, Resource res, File destFile, ModuleDescriptor md) throws ParseException, IOException {
/* 95 */     ModuleDescriptorParser parser = getParser(res);
/* 96 */     if (parser == null) {
/* 97 */       Message.warn(""no module descriptor parser found for "" + res);
/*    */     } else {
/* 99 */       parser.toIvyFile(is, res, destFile, md);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\ModuleDescriptorParserRegistry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.ParserSettings,"package org.apache.ivy.plugins.parser;
import java.io.File;
import java.util.Map;
import org.apache.ivy.core.RelativeUrlResolver;
import org.apache.ivy.core.cache.ResolutionCacheManager;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.core.module.status.StatusManager;
import org.apache.ivy.plugins.conflict.ConflictManager;
import org.apache.ivy.plugins.matcher.PatternMatcher;
import org.apache.ivy.plugins.namespace.Namespace;
import org.apache.ivy.plugins.resolver.DependencyResolver;
public interface ParserSettings {
  String substitute(String paramString);
  Map substitute(Map paramMap);
  ResolutionCacheManager getResolutionCacheManager();
  ConflictManager getConflictManager(String paramString);
  PatternMatcher getMatcher(String paramString);
  Namespace getNamespace(String paramString);
  StatusManager getStatusManager();
  RelativeUrlResolver getRelativeUrlResolver();
  DependencyResolver getResolver(ModuleRevisionId paramModuleRevisionId);
  File resolveFile(String paramString);
  File getBaseDir();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\ParserSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.DefaultPomDependencyMgt,"/*    */ package org.apache.ivy.plugins.parser.m2;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultPomDependencyMgt
/*    */   implements PomDependencyMgt
/*    */ {
/*    */   private String groupId;
/*    */   private String artifactId;
/*    */   private String version;
/*    */   private String scope;
/*    */   
/*    */   public DefaultPomDependencyMgt(String groupId, String artifactId, String version, String scope) {
/* 28 */     this.groupId = groupId;
/* 29 */     this.artifactId = artifactId;
/* 30 */     this.version = version;
/* 31 */     this.scope = scope;
/*    */   }
/*    */ 
/*    */   
/* 35 */   public String getScope() { return this.scope; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public String getGroupId() { return this.groupId; }
/*    */ 
/*    */   
/* 42 */   public String getArtifactId() { return this.artifactId; }
/*    */ 
/*    */   
/* 45 */   public String getVersion() { return this.version; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\DefaultPomDependencyMgt.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.PomDependencyMgt,"package org.apache.ivy.plugins.parser.m2;
public interface PomDependencyMgt {
  String getGroupId();
  String getArtifactId();
  String getVersion();
  String getScope();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\PomDependencyMgt.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.PomModuleDescriptorBuilder,"/*     */ package org.apache.ivy.plugins.parser.m2;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultExcludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptorMediator;
/*     */ import org.apache.ivy.core.module.descriptor.ExcludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.License;
/*     */ import org.apache.ivy.core.module.descriptor.MDArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.OverrideDependencyDescriptorMediator;
/*     */ import org.apache.ivy.core.module.id.ArtifactId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.matcher.ExactPatternMatcher;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PomModuleDescriptorBuilder
/*     */ {
/*     */   private static final int DEPENDENCY_MANAGEMENT_KEY_PARTS_COUNT = 4;
/*  69 */   public static final Configuration[] MAVEN2_CONFIGURATIONS = new Configuration[] { new Configuration(""default"", Configuration.Visibility.PUBLIC, ""runtime dependencies and master artifact can be used with this conf"", new String[] { ""runtime"", ""master"" }, true, null), new Configuration(""master"", Configuration.Visibility.PUBLIC, ""contains only the artifact published by this module itself, with no transitive dependencies"", new String[0], true, null), new Configuration(""compile"", Configuration.Visibility.PUBLIC, ""this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."", new String[0], true, null), new Configuration(""provided"", Configuration.Visibility.PUBLIC, ""this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."", new String[0], true, null), new Configuration(""runtime"", Configuration.Visibility.PUBLIC, ""this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath."", new String[] { ""compile"" }, true, null), new Configuration(""test"", Configuration.Visibility.PRIVATE, ""this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases."", new String[] { ""runtime"" }, true, null), new Configuration(""system"", Configuration.Visibility.PUBLIC, ""this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."", new String[0], true, null), new Configuration(""sources"", Configuration.Visibility.PUBLIC, ""this configuration contains the source artifact of this module, if any."", new String[0], true, null), new Configuration(""javadoc"", Configuration.Visibility.PUBLIC, ""this configuration contains the javadoc artifact of this module, if any."", new String[0], true, null), new Configuration(""optional"", Configuration.Visibility.PUBLIC, ""contains all optional dependencies"", new String[0], true, null) };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   static final Map MAVEN2_CONF_MAPPING = new HashMap();
/*     */   
/*     */   private static final String DEPENDENCY_MANAGEMENT = ""m:dependency.management"";
/*     */   private static final String PROPERTIES = ""m:properties"";
/*     */   private static final String EXTRA_INFO_DELIMITER = ""__"";
/* 116 */   private static final Collection JAR_PACKAGINGS = Arrays.asList(new String[] { ""ejb"", ""bundle"", ""maven-plugin"" });
/*     */   
/*     */   private final DefaultModuleDescriptor ivyModuleDescriptor;
/*     */   
/*     */   private ModuleRevisionId mrid;
/*     */   private DefaultArtifact mainArtifact;
/*     */   private ParserSettings parserSettings;
/*     */   
/*     */   static  {
/* 125 */     MAVEN2_CONF_MAPPING.put(""compile"", new ConfMapper() {
/*     */           public void addMappingConfs(DefaultDependencyDescriptor dd, boolean isOptional) {
/* 127 */             if (isOptional) {
/* 128 */               dd.addDependencyConfiguration(""optional"", ""compile(*)"");
/*     */               
/* 130 */               dd.addDependencyConfiguration(""optional"", ""master(*)"");
/*     */             } else {
/*     */               
/* 133 */               dd.addDependencyConfiguration(""compile"", ""compile(*)"");
/*     */               
/* 135 */               dd.addDependencyConfiguration(""compile"", ""master(*)"");
/* 136 */               dd.addDependencyConfiguration(""runtime"", ""runtime(*)"");
/*     */             } 
/*     */           }
/*     */         });
/* 140 */     MAVEN2_CONF_MAPPING.put(""provided"", new ConfMapper() {
/*     */           public void addMappingConfs(DefaultDependencyDescriptor dd, boolean isOptional) {
/* 142 */             if (isOptional) {
/* 143 */               dd.addDependencyConfiguration(""optional"", ""compile(*)"");
/* 144 */               dd.addDependencyConfiguration(""optional"", ""provided(*)"");
/* 145 */               dd.addDependencyConfiguration(""optional"", ""runtime(*)"");
/* 146 */               dd.addDependencyConfiguration(""optional"", ""master(*)"");
/*     */             } else {
/* 148 */               dd.addDependencyConfiguration(""provided"", ""compile(*)"");
/* 149 */               dd.addDependencyConfiguration(""provided"", ""provided(*)"");
/* 150 */               dd.addDependencyConfiguration(""provided"", ""runtime(*)"");
/* 151 */               dd.addDependencyConfiguration(""provided"", ""master(*)"");
/*     */             } 
/*     */           }
/*     */         });
/* 155 */     MAVEN2_CONF_MAPPING.put(""runtime"", new ConfMapper() {
/*     */           public void addMappingConfs(DefaultDependencyDescriptor dd, boolean isOptional) {
/* 157 */             if (isOptional) {
/* 158 */               dd.addDependencyConfiguration(""optional"", ""compile(*)"");
/* 159 */               dd.addDependencyConfiguration(""optional"", ""provided(*)"");
/* 160 */               dd.addDependencyConfiguration(""optional"", ""master(*)"");
/*     */             } else {
/*     */               
/* 163 */               dd.addDependencyConfiguration(""runtime"", ""compile(*)"");
/* 164 */               dd.addDependencyConfiguration(""runtime"", ""runtime(*)"");
/* 165 */               dd.addDependencyConfiguration(""runtime"", ""master(*)"");
/*     */             } 
/*     */           }
/*     */         });
/* 169 */     MAVEN2_CONF_MAPPING.put(""test"", new ConfMapper()
/*     */         {
/*     */           public void addMappingConfs(DefaultDependencyDescriptor dd, boolean isOptional) {
/* 172 */             dd.addDependencyConfiguration(""test"", ""runtime(*)"");
/* 173 */             dd.addDependencyConfiguration(""test"", ""master(*)"");
/*     */           }
/*     */         });
/* 176 */     MAVEN2_CONF_MAPPING.put(""system"", new ConfMapper()
/*     */         {
/*     */           public void addMappingConfs(DefaultDependencyDescriptor dd, boolean isOptional) {
/* 179 */             dd.addDependencyConfiguration(""system"", ""master(*)"");
/*     */           }
/*     */         });
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PomModuleDescriptorBuilder(ModuleDescriptorParser parser, Resource res, ParserSettings ivySettings) {
/* 198 */     this.ivyModuleDescriptor = new DefaultModuleDescriptor(parser, res);
/* 199 */     this.ivyModuleDescriptor.setResolvedPublicationDate(new Date(res.getLastModified()));
/* 200 */     for (int i = 0; i < MAVEN2_CONFIGURATIONS.length; i++) {
/* 201 */       this.ivyModuleDescriptor.addConfiguration(MAVEN2_CONFIGURATIONS[i]);
/*     */     }
/* 203 */     this.ivyModuleDescriptor.setMappingOverride(true);
/* 204 */     this.ivyModuleDescriptor.addExtraAttributeNamespace(""m"", Ivy.getIvyHomeURL() + ""maven"");
/* 205 */     this.parserSettings = ivySettings;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 210 */   public ModuleDescriptor getModuleDescriptor() { return (ModuleDescriptor)this.ivyModuleDescriptor; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setModuleRevId(String groupId, String artifactId, String version) {
/* 215 */     this.mrid = ModuleRevisionId.newInstance(groupId, artifactId, version);
/* 216 */     this.ivyModuleDescriptor.setModuleRevisionId(this.mrid);
/*     */     
/* 218 */     if (version == null || version.endsWith(""SNAPSHOT"")) {
/* 219 */       this.ivyModuleDescriptor.setStatus(""integration"");
/*     */     } else {
/* 221 */       this.ivyModuleDescriptor.setStatus(""release"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 226 */   public void setHomePage(String homePage) { this.ivyModuleDescriptor.setHomePage(homePage); }
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setDescription(String description) { this.ivyModuleDescriptor.setDescription(description); }
/*     */ 
/*     */   
/*     */   public void setLicenses(License[] licenses) {
/* 234 */     for (int i = 0; i < licenses.length; i++) {
/* 235 */       this.ivyModuleDescriptor.addLicense(licenses[i]);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMainArtifact(String artifactId, String packaging) {
/*     */     String ext;
/* 246 */     if (""pom"".equals(packaging)) {
/*     */       
/* 248 */       DependencyResolver resolver = this.parserSettings.getResolver(this.mrid);
/*     */       
/* 250 */       if (resolver != null) {
/* 251 */         DefaultArtifact artifact = new DefaultArtifact(this.mrid, new Date(), artifactId, ""jar"", ""jar"");
/*     */         
/* 253 */         ArtifactOrigin artifactOrigin = resolver.locate((Artifact)artifact);
/*     */         
/* 255 */         if (!ArtifactOrigin.isUnknown(artifactOrigin)) {
/* 256 */           this.mainArtifact = artifact;
/* 257 */           this.ivyModuleDescriptor.addArtifact(""master"", (Artifact)this.mainArtifact);
/*     */         } 
/*     */       } 
/*     */       return;
/*     */     } 
/* 262 */     if (JAR_PACKAGINGS.contains(packaging)) {
/* 263 */       ext = ""jar"";
/*     */     } else {
/* 265 */       ext = packaging;
/*     */     } 
/*     */     
/* 268 */     this.mainArtifact = new DefaultArtifact(this.mrid, new Date(), artifactId, packaging, ext);
/* 269 */     this.ivyModuleDescriptor.addArtifact(""master"", (Artifact)this.mainArtifact);
/*     */   }
/*     */   
/*     */   public void addDependency(Resource res, PomReader.PomDependencyData dep) {
/* 273 */     String scope = dep.getScope();
/* 274 */     if (scope != null && scope.length() > 0 && !MAVEN2_CONF_MAPPING.containsKey(scope))
/*     */     {
/* 276 */       scope = ""compile"";
/*     */     }
/*     */     
/* 279 */     String version = dep.getVersion();
/* 280 */     version = (version == null || version.length() == 0) ? getDefaultVersion(dep) : version;
/* 281 */     ModuleRevisionId moduleRevId = ModuleRevisionId.newInstance(dep.getGroupId(), dep.getArtifactId(), version);
/*     */     
/* 283 */     DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor((ModuleDescriptor)this.ivyModuleDescriptor, moduleRevId, true, false, true);
/*     */     
/* 285 */     scope = (scope == null || scope.length() == 0) ? getDefaultScope(dep) : scope;
/* 286 */     ConfMapper mapping = (ConfMapper)MAVEN2_CONF_MAPPING.get(scope);
/* 287 */     mapping.addMappingConfs(dd, dep.isOptional());
/* 288 */     Map extraAtt = new HashMap();
/* 289 */     if (dep.getClassifier() != null || dep.getType() != null) {
/* 290 */       String type = ""jar"";
/* 291 */       if (dep.getType() != null) {
/* 292 */         type = dep.getType();
/*     */       }
/*     */ 
/*     */       
/* 296 */       if (dep.getClassifier() != null) {
/* 297 */         extraAtt.put(""m:classifier"", dep.getClassifier());
/*     */       }
/* 299 */       DefaultDependencyArtifactDescriptor depArtifact = new DefaultDependencyArtifactDescriptor((DependencyDescriptor)dd, dd.getDependencyId().getName(), type, type, null, extraAtt);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 304 */       String optionalizedScope = dep.isOptional() ? ""optional"" : scope;
/* 305 */       dd.addDependencyArtifact(optionalizedScope, (DependencyArtifactDescriptor)depArtifact);
/*     */     } 
/*     */     
/* 308 */     for (Iterator itExcl = dep.getExcludedModules().iterator(); itExcl.hasNext(); ) {
/* 309 */       ModuleId excludedModule = itExcl.next();
/* 310 */       String[] confs = dd.getModuleConfigurations();
/* 311 */       for (int k = 0; k < confs.length; k++) {
/* 312 */         dd.addExcludeRule(confs[k], (ExcludeRule)new DefaultExcludeRule(new ArtifactId(excludedModule, ""*"", ""*"", ""*""), (PatternMatcher)ExactPatternMatcher.INSTANCE, null));
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 320 */     this.ivyModuleDescriptor.addDependency((DependencyDescriptor)dd);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 325 */   public void addDependency(DependencyDescriptor descriptor) { this.ivyModuleDescriptor.addDependency(descriptor); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDependencyMgt(PomDependencyMgt dep) {
/* 330 */     String key = getDependencyMgtExtraInfoKeyForVersion(dep.getGroupId(), dep.getArtifactId());
/* 331 */     this.ivyModuleDescriptor.addExtraInfo(key, dep.getVersion());
/* 332 */     if (dep.getScope() != null) {
/* 333 */       String scopeKey = getDependencyMgtExtraInfoKeyForScope(dep.getGroupId(), dep.getArtifactId());
/*     */       
/* 335 */       this.ivyModuleDescriptor.addExtraInfo(scopeKey, dep.getScope());
/*     */     } 
/*     */     
/* 338 */     this.ivyModuleDescriptor.addDependencyDescriptorMediator(ModuleId.newInstance(dep.getGroupId(), dep.getArtifactId()), (PatternMatcher)ExactPatternMatcher.INSTANCE, (DependencyDescriptorMediator)new OverrideDependencyDescriptorMediator(null, dep.getVersion()));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addPlugin(PomDependencyMgt plugin) {
/* 345 */     String pluginValue = plugin.getGroupId() + ""__"" + plugin.getArtifactId() + ""__"" + plugin.getVersion();
/*     */     
/* 347 */     String pluginExtraInfo = (String)this.ivyModuleDescriptor.getExtraInfo().get(""m:maven.plugins"");
/* 348 */     if (pluginExtraInfo == null) {
/* 349 */       pluginExtraInfo = pluginValue;
/*     */     } else {
/* 351 */       pluginExtraInfo = pluginExtraInfo + ""|"" + pluginValue;
/*     */     } 
/* 353 */     this.ivyModuleDescriptor.getExtraInfo().put(""m:maven.plugins"", pluginExtraInfo);
/*     */   }
/*     */   
/*     */   public static List getPlugins(ModuleDescriptor md) {
/* 357 */     List result = new ArrayList();
/* 358 */     String plugins = (String)md.getExtraInfo().get(""m:maven.plugins"");
/* 359 */     if (plugins == null) {
/* 360 */       return new ArrayList();
/*     */     }
/* 362 */     String[] pluginsArray = plugins.split(""\\|"");
/* 363 */     for (int i = 0; i < pluginsArray.length; i++) {
/* 364 */       String[] parts = pluginsArray[i].split(""__"");
/* 365 */       result.add(new PomPluginElement(parts[0], parts[1], parts[2]));
/*     */     } 
/*     */     
/* 368 */     return result;
/*     */   }
/*     */   
/*     */   private static class PomPluginElement implements PomDependencyMgt {
/*     */     private String groupId;
/*     */     private String artifactId;
/*     */     private String version;
/*     */     
/*     */     public PomPluginElement(String groupId, String artifactId, String version) {
/* 377 */       this.groupId = groupId;
/* 378 */       this.artifactId = artifactId;
/* 379 */       this.version = version;
/*     */     }
/*     */ 
/*     */     
/* 383 */     public String getGroupId() { return this.groupId; }
/*     */ 
/*     */ 
/*     */     
/* 387 */     public String getArtifactId() { return this.artifactId; }
/*     */ 
/*     */ 
/*     */     
/* 391 */     public String getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */     
/* 395 */     public String getScope() { return null; }
/*     */   }
/*     */ 
/*     */   
/*     */   private String getDefaultVersion(PomReader.PomDependencyData dep) {
/* 400 */     String key = getDependencyMgtExtraInfoKeyForVersion(dep.getGroupId(), dep.getArtifactId());
/* 401 */     return (String)this.ivyModuleDescriptor.getExtraInfo().get(key);
/*     */   }
/*     */   
/*     */   private String getDefaultScope(PomReader.PomDependencyData dep) {
/* 405 */     String key = getDependencyMgtExtraInfoKeyForScope(dep.getGroupId(), dep.getArtifactId());
/* 406 */     String result = (String)this.ivyModuleDescriptor.getExtraInfo().get(key);
/* 407 */     if (result == null || !MAVEN2_CONF_MAPPING.containsKey(result)) {
/* 408 */       result = ""compile"";
/*     */     }
/* 410 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 415 */   private static String getDependencyMgtExtraInfoKeyForVersion(String groupId, String artifaceId) { return ""m:dependency.management__"" + groupId + ""__"" + artifaceId + ""__"" + ""version""; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 420 */   private static String getDependencyMgtExtraInfoKeyForScope(String groupId, String artifaceId) { return ""m:dependency.management__"" + groupId + ""__"" + artifaceId + ""__"" + ""scope""; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   private static String getPropertyExtraInfoKey(String propertyName) { return ""m:properties__"" + propertyName; }
/*     */ 
/*     */ 
/*     */   
/*     */   public static Map getDependencyManagementMap(ModuleDescriptor md) {
/* 430 */     Map ret = new LinkedHashMap();
/* 431 */     for (Iterator iterator = md.getExtraInfo().entrySet().iterator(); iterator.hasNext(); ) {
/* 432 */       Map.Entry entry = iterator.next();
/* 433 */       String key = (String)entry.getKey();
/* 434 */       if (key.startsWith(""m:dependency.management"")) {
/* 435 */         String[] parts = key.split(""__"");
/* 436 */         if (parts.length != 4) {
/* 437 */           Message.warn(""what seem to be a dependency management extra info doesn't match expected pattern: "" + key);
/*     */           continue;
/*     */         } 
/* 440 */         ret.put(ModuleId.newInstance(parts[1], parts[2]), entry.getValue());
/*     */       } 
/*     */     } 
/*     */     
/* 444 */     return ret;
/*     */   }
/*     */   
/*     */   public static List getDependencyManagements(ModuleDescriptor md) {
/* 448 */     List result = new ArrayList();
/*     */     
/* 450 */     for (Iterator iterator = md.getExtraInfo().entrySet().iterator(); iterator.hasNext(); ) {
/* 451 */       Map.Entry entry = iterator.next();
/* 452 */       String key = (String)entry.getKey();
/* 453 */       if (key.startsWith(""m:dependency.management"")) {
/* 454 */         String[] parts = key.split(""__"");
/* 455 */         if (parts.length != 4) {
/* 456 */           Message.warn(""what seem to be a dependency management extra info doesn't match expected pattern: "" + key);
/*     */           continue;
/*     */         } 
/* 459 */         String versionKey = ""m:dependency.management__"" + parts[1] + ""__"" + parts[2] + ""__"" + ""version"";
/*     */ 
/*     */         
/* 462 */         String scopeKey = ""m:dependency.management__"" + parts[1] + ""__"" + parts[2] + ""__"" + ""scope"";
/*     */ 
/*     */ 
/*     */         
/* 466 */         String version = (String)md.getExtraInfo().get(versionKey);
/* 467 */         String scope = (String)md.getExtraInfo().get(scopeKey);
/*     */         
/* 469 */         result.add(new DefaultPomDependencyMgt(parts[1], parts[2], version, scope));
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 474 */     return result;
/*     */   }
/*     */ 
/*     */   
/*     */   public void addExtraInfos(Map extraAttributes) {
/* 479 */     for (Iterator it = extraAttributes.entrySet().iterator(); it.hasNext(); ) {
/* 480 */       Map.Entry entry = it.next();
/* 481 */       String key = (String)entry.getKey();
/* 482 */       String value = (String)entry.getValue();
/* 483 */       addExtraInfo(key, value);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void addExtraInfo(String key, String value) {
/* 489 */     if (!this.ivyModuleDescriptor.getExtraInfo().containsKey(key)) {
/* 490 */       this.ivyModuleDescriptor.addExtraInfo(key, value);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static Map extractPomProperties(Map extraInfo) {
/* 497 */     Map r = new HashMap();
/* 498 */     for (Iterator it = extraInfo.entrySet().iterator(); it.hasNext(); ) {
/* 499 */       Map.Entry extraInfoEntry = it.next();
/* 500 */       if (((String)extraInfoEntry.getKey()).startsWith(""m:properties"")) {
/* 501 */         String prop = ((String)extraInfoEntry.getKey()).substring(""m:properties"".length() + ""__"".length());
/*     */         
/* 503 */         r.put(prop, extraInfoEntry.getValue());
/*     */       } 
/*     */     } 
/* 506 */     return r;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 511 */   public void addProperty(String propertyName, String value) { addExtraInfo(getPropertyExtraInfoKey(propertyName), value); }
/*     */ 
/*     */ 
/*     */   
/* 515 */   public Artifact getMainArtifact() { return (Artifact)this.mainArtifact; }
/*     */ 
/*     */ 
/*     */   
/* 519 */   public Artifact getSourceArtifact() { return (Artifact)new MDArtifact((ModuleDescriptor)this.ivyModuleDescriptor, this.mrid.getName(), ""source"", ""jar"", null, Collections.singletonMap(""m:classifier"", ""sources"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 525 */   public Artifact getJavadocArtifact() { return (Artifact)new MDArtifact((ModuleDescriptor)this.ivyModuleDescriptor, this.mrid.getName(), ""javadoc"", ""jar"", null, Collections.singletonMap(""m:classifier"", ""javadoc"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 531 */   public void addSourceArtifact() { this.ivyModuleDescriptor.addArtifact(""sources"", getSourceArtifact()); }
/*     */ 
/*     */ 
/*     */   
/* 535 */   public void addJavadocArtifact() { this.ivyModuleDescriptor.addArtifact(""javadoc"", getJavadocArtifact()); }
/*     */   
/*     */   static interface ConfMapper {
/*     */     void addMappingConfs(DefaultDependencyDescriptor param1DefaultDependencyDescriptor, boolean param1Boolean);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\PomModuleDescriptorBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.PomModuleDescriptorParser,"/*     */ package org.apache.ivy.plugins.parser.m2;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolveEngine;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.url.URLResource;
/*     */ import org.apache.ivy.plugins.resolver.DependencyResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class PomModuleDescriptorParser
/*     */   implements ModuleDescriptorParser
/*     */ {
/*  64 */   private static final PomModuleDescriptorParser INSTANCE = new PomModuleDescriptorParser();
/*     */ 
/*     */   
/*  67 */   public static PomModuleDescriptorParser getInstance() { return INSTANCE; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void toIvyFile(InputStream is, Resource res, File destFile, ModuleDescriptor md) throws ParseException, IOException {
/*     */     try {
/*  77 */       XmlModuleDescriptorWriter.write(md, destFile);
/*     */     } finally {
/*  79 */       if (is != null) {
/*  80 */         is.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  86 */   public boolean accept(Resource res) { return (res.getName().endsWith("".pom"") || res.getName().endsWith(""pom.xml"") || res.getName().endsWith(""project.xml"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public String toString() { return ""pom parser""; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public Artifact getMetadataArtifact(ModuleRevisionId mrid, Resource res) { return DefaultArtifact.newPomArtifact(mrid, new Date(res.getLastModified())); }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public String getType() { return ""pom""; }
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descriptorURL, boolean validate) throws ParseException, IOException {
/* 104 */     URLResource resource = new URLResource(descriptorURL);
/* 105 */     return parseDescriptor(ivySettings, descriptorURL, (Resource)resource, validate);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL descriptorURL, Resource res, boolean validate) throws ParseException, IOException {
/* 111 */     PomModuleDescriptorBuilder mdBuilder = new PomModuleDescriptorBuilder(this, res, ivySettings);
/*     */ 
/*     */     
/*     */     try {
/* 115 */       PomReader domReader = new PomReader(descriptorURL, res);
/* 116 */       domReader.setProperty(""parent.version"", domReader.getParentVersion());
/* 117 */       domReader.setProperty(""project.parent.version"", domReader.getParentVersion());
/*     */       
/* 119 */       Map pomProperties = domReader.getPomProperties();
/* 120 */       for (Iterator iter = pomProperties.entrySet().iterator(); iter.hasNext(); ) {
/* 121 */         Map.Entry prop = iter.next();
/* 122 */         domReader.setProperty((String)prop.getKey(), (String)prop.getValue());
/* 123 */         mdBuilder.addProperty((String)prop.getKey(), (String)prop.getValue());
/*     */       } 
/*     */       
/* 126 */       ModuleDescriptor parentDescr = null;
/* 127 */       if (domReader.hasParent()) {
/*     */ 
/*     */         
/* 130 */         ModuleRevisionId parentModRevID = ModuleRevisionId.newInstance(domReader.getParentGroupId(), domReader.getParentArtifactId(), domReader.getParentVersion());
/*     */ 
/*     */ 
/*     */         
/* 134 */         ResolvedModuleRevision parentModule = parseOtherPom(ivySettings, parentModRevID);
/*     */         
/* 136 */         if (parentModule != null) {
/* 137 */           parentDescr = parentModule.getDescriptor();
/*     */         } else {
/* 139 */           throw new IOException(""Impossible to load parent for "" + descriptorURL + ""."" + "" Parent="" + parentModRevID);
/*     */         } 
/*     */         
/* 142 */         if (parentDescr != null) {
/* 143 */           Map parentPomProps = PomModuleDescriptorBuilder.extractPomProperties(parentDescr.getExtraInfo());
/*     */           
/* 145 */           for (Iterator iter = parentPomProps.entrySet().iterator(); iter.hasNext(); ) {
/* 146 */             Map.Entry prop = iter.next();
/* 147 */             domReader.setProperty((String)prop.getKey(), (String)prop.getValue());
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 152 */       String groupId = domReader.getGroupId();
/* 153 */       String artifactId = domReader.getArtifactId();
/* 154 */       String version = domReader.getVersion();
/* 155 */       mdBuilder.setModuleRevId(groupId, artifactId, version);
/*     */       
/* 157 */       mdBuilder.setHomePage(domReader.getHomePage());
/* 158 */       mdBuilder.setDescription(domReader.getDescription());
/* 159 */       mdBuilder.setLicenses(domReader.getLicenses());
/*     */       
/* 161 */       ModuleRevisionId relocation = domReader.getRelocation();
/*     */       
/* 163 */       if (relocation != null) {
/* 164 */         if (groupId != null && artifactId != null && artifactId.equals(relocation.getName()) && groupId.equals(relocation.getOrganisation())) {
/*     */ 
/*     */           
/* 167 */           Message.error(""Relocation to an other version number not supported in ivy : "" + mdBuilder.getModuleDescriptor().getModuleRevisionId() + "" relocated to "" + relocation + "". Please update your dependency to directly use the right version."");
/*     */ 
/*     */ 
/*     */           
/* 171 */           Message.warn(""Resolution will only pick dependencies of the relocated element.  Artefact and other metadata will be ignored."");
/*     */           
/* 173 */           ResolvedModuleRevision relocatedModule = parseOtherPom(ivySettings, relocation);
/* 174 */           if (relocatedModule == null) {
/* 175 */             throw new ParseException(""impossible to load module "" + relocation + "" to which "" + mdBuilder.getModuleDescriptor().getModuleRevisionId() + "" has been relocated"", 0);
/*     */           }
/*     */ 
/*     */ 
/*     */           
/* 180 */           DependencyDescriptor[] dds = relocatedModule.getDescriptor().getDependencies();
/* 181 */           for (int i = 0; i < dds.length; i++) {
/* 182 */             mdBuilder.addDependency(dds[i]);
/*     */           }
/*     */         } else {
/* 185 */           Message.info(mdBuilder.getModuleDescriptor().getModuleRevisionId() + "" is relocated to "" + relocation + "". Please update your dependencies."");
/*     */ 
/*     */           
/* 188 */           Message.verbose(""Relocated module will be considered as a dependency"");
/* 189 */           DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(mdBuilder.getModuleDescriptor(), relocation, true, false, true);
/*     */ 
/*     */           
/* 192 */           dd.addDependencyConfiguration(""compile"", ""compile"");
/* 193 */           dd.addDependencyConfiguration(""runtime"", ""runtime"");
/* 194 */           dd.addDependencyConfiguration(""default"", ""default"");
/* 195 */           dd.addDependencyConfiguration(""master"", ""master"");
/* 196 */           dd.addDependencyConfiguration(""provided"", ""provided"");
/* 197 */           dd.addDependencyConfiguration(""system"", ""system"");
/* 198 */           mdBuilder.addDependency((DependencyDescriptor)dd);
/*     */         } 
/*     */       } else {
/* 201 */         domReader.setProperty(""project.groupId"", groupId);
/* 202 */         domReader.setProperty(""pom.groupId"", groupId);
/* 203 */         domReader.setProperty(""groupId"", groupId);
/* 204 */         domReader.setProperty(""project.artifactId"", artifactId);
/* 205 */         domReader.setProperty(""pom.artifactId"", artifactId);
/* 206 */         domReader.setProperty(""artifactId"", artifactId);
/* 207 */         domReader.setProperty(""project.version"", version);
/* 208 */         domReader.setProperty(""pom.version"", version);
/* 209 */         domReader.setProperty(""version"", version);
/*     */         
/* 211 */         if (parentDescr != null) {
/* 212 */           mdBuilder.addExtraInfos(parentDescr.getExtraInfo());
/*     */ 
/*     */           
/* 215 */           List depMgt = PomModuleDescriptorBuilder.getDependencyManagements(parentDescr);
/* 216 */           for (Iterator it = depMgt.iterator(); it.hasNext();) {
/* 217 */             mdBuilder.addDependencyMgt(it.next());
/*     */           }
/*     */ 
/*     */           
/* 221 */           List plugins = PomModuleDescriptorBuilder.getPlugins(parentDescr);
/*     */           
/* 223 */           for (Iterator it = plugins.iterator(); it.hasNext();) {
/* 224 */             mdBuilder.addPlugin(it.next());
/*     */           }
/*     */         } 
/*     */         
/* 228 */         for (Iterator it = domReader.getDependencyMgt().iterator(); it.hasNext(); ) {
/* 229 */           PomDependencyMgt dep = it.next();
/* 230 */           mdBuilder.addDependencyMgt(dep);
/*     */         } 
/*     */         
/* 233 */         for (Iterator it = domReader.getDependencies().iterator(); it.hasNext(); ) {
/* 234 */           PomReader.PomDependencyData dep = it.next();
/* 235 */           mdBuilder.addDependency(res, dep);
/*     */         } 
/*     */         
/* 238 */         if (parentDescr != null) {
/* 239 */           for (int i = 0; i < (parentDescr.getDependencies()).length; i++) {
/* 240 */             mdBuilder.addDependency(parentDescr.getDependencies()[i]);
/*     */           }
/*     */         }
/*     */         
/* 244 */         for (Iterator it = domReader.getPlugins().iterator(); it.hasNext(); ) {
/* 245 */           PomReader.PomPluginElement plugin = it.next();
/* 246 */           mdBuilder.addPlugin(plugin);
/*     */         } 
/*     */         
/* 249 */         mdBuilder.addMainArtifact(artifactId, domReader.getPackaging());
/*     */         
/* 251 */         addSourcesAndJavadocArtifactsIfPresent(mdBuilder, ivySettings);
/*     */       } 
/* 253 */     } catch (SAXException e) {
/* 254 */       throw newParserException(e);
/*     */     } 
/*     */     
/* 257 */     return mdBuilder.getModuleDescriptor();
/*     */   }
/*     */ 
/*     */   
/*     */   private void addSourcesAndJavadocArtifactsIfPresent(PomModuleDescriptorBuilder mdBuilder, ParserSettings ivySettings) {
/* 262 */     if (mdBuilder.getMainArtifact() == null) {
/*     */       return;
/*     */     }
/*     */     
/* 266 */     ModuleDescriptor md = mdBuilder.getModuleDescriptor();
/* 267 */     ModuleRevisionId mrid = md.getModuleRevisionId();
/* 268 */     DependencyResolver resolver = ivySettings.getResolver(mrid);
/*     */ 
/*     */     
/* 271 */     if (resolver == null) {
/* 272 */       Message.debug(""no resolver found for "" + mrid + "": no source or javadoc artifact lookup"");
/*     */     } else {
/*     */       
/* 275 */       ArtifactOrigin mainArtifact = resolver.locate(mdBuilder.getMainArtifact());
/*     */       
/* 277 */       if (!ArtifactOrigin.isUnknown(mainArtifact)) {
/* 278 */         String mainArtifactLocation = mainArtifact.getLocation();
/*     */         
/* 280 */         ArtifactOrigin sourceArtifact = resolver.locate(mdBuilder.getSourceArtifact());
/* 281 */         if (!ArtifactOrigin.isUnknown(sourceArtifact) && !sourceArtifact.getLocation().equals(mainArtifactLocation)) {
/*     */           
/* 283 */           Message.debug(""source artifact found for "" + mrid);
/* 284 */           mdBuilder.addSourceArtifact();
/*     */         } else {
/* 286 */           Message.debug(""no source artifact found for "" + mrid);
/*     */         } 
/* 288 */         ArtifactOrigin javadocArtifact = resolver.locate(mdBuilder.getJavadocArtifact());
/* 289 */         if (!ArtifactOrigin.isUnknown(javadocArtifact) && !javadocArtifact.getLocation().equals(mainArtifactLocation)) {
/*     */           
/* 291 */           Message.debug(""javadoc artifact found for "" + mrid);
/* 292 */           mdBuilder.addJavadocArtifact();
/*     */         } else {
/* 294 */           Message.debug(""no javadoc artifact found for "" + mrid);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private ResolvedModuleRevision parseOtherPom(ParserSettings ivySettings, ModuleRevisionId parentModRevID) throws ParseException {
/* 302 */     DefaultDependencyDescriptor defaultDependencyDescriptor = new DefaultDependencyDescriptor(parentModRevID, true);
/* 303 */     ResolveData data = IvyContext.getContext().getResolveData();
/* 304 */     if (data == null) {
/* 305 */       ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();
/* 306 */       ResolveOptions options = new ResolveOptions();
/* 307 */       options.setDownload(false);
/* 308 */       data = new ResolveData(engine, options);
/*     */     } 
/*     */     
/* 311 */     DependencyResolver resolver = ivySettings.getResolver(parentModRevID);
/* 312 */     if (resolver == null)
/*     */     {
/* 314 */       return null;
/*     */     }
/* 316 */     ResolvedModuleRevision otherModule = resolver.getDependency((DependencyDescriptor)defaultDependencyDescriptor, data);
/* 317 */     return otherModule;
/*     */   }
/*     */ 
/*     */   
/*     */   private ParseException newParserException(Exception e) {
/* 322 */     Message.error(e.getMessage());
/* 323 */     ParseException pe = new ParseException(e.getMessage(), 0);
/* 324 */     pe.initCause(e);
/* 325 */     return pe;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\PomModuleDescriptorParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.PomModuleDescriptorWriter,"/*     */ package org.apache.ivy.plugins.parser.m2;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class PomModuleDescriptorWriter
/*     */ {
/*     */   private static boolean addIvyVersion = true;
/*     */   
/*  38 */   static void setAddIvyVersion(boolean addIvyVersion) { PomModuleDescriptorWriter.addIvyVersion = addIvyVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  46 */   public static void write(ModuleDescriptor md, ConfigurationScopeMapping mapping, File output) throws IOException { write(md, null, mapping, output); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void write(ModuleDescriptor md, String licenseHeader, ConfigurationScopeMapping mapping, File output) throws IOException {
/*  52 */     if (output.getParentFile() != null) {
/*  53 */       output.getParentFile().mkdirs();
/*     */     }
/*  55 */     PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output), ""UTF-8""));
/*     */     
/*     */     try {
/*  58 */       out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/*  59 */       if (licenseHeader != null) {
/*  60 */         out.print(licenseHeader);
/*     */       }
/*  62 */       out.println(""<!--"");
/*  63 */       out.println(""   Apache Maven 2 POM generated by Apache Ivy"");
/*  64 */       out.println(""   "" + Ivy.getIvyHomeURL());
/*  65 */       if (addIvyVersion) {
/*  66 */         out.println(""   Apache Ivy version: "" + Ivy.getIvyVersion() + "" "" + Ivy.getIvyDate());
/*     */       }
/*     */       
/*  69 */       out.println(""-->"");
/*  70 */       out.println(""<project xmlns=\""http://maven.apache.org/POM/4.0.0\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"""");
/*     */       
/*  72 */       out.println(""    xsi:schemaLocation=\""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"">\n"");
/*     */       
/*  74 */       out.println(""  <modelVersion>4.0.0</modelVersion>"");
/*  75 */       printModuleId(md, out);
/*  76 */       printDependencies(md, mapping, out);
/*  77 */       out.println(""</project>"");
/*     */     } finally {
/*  79 */       out.close();
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void printModuleId(ModuleDescriptor md, PrintWriter out) {
/*  84 */     ModuleRevisionId mrid = md.getModuleRevisionId();
/*  85 */     out.println(""  <groupId>"" + mrid.getOrganisation() + ""</groupId>"");
/*  86 */     out.println(""  <artifactId>"" + mrid.getName() + ""</artifactId>"");
/*  87 */     out.println(""  <packaging>jar</packaging>"");
/*  88 */     if (mrid.getRevision() != null) {
/*  89 */       out.println(""  <version>"" + mrid.getRevision() + ""</version>"");
/*     */     }
/*  91 */     if (md.getHomePage() != null) {
/*  92 */       out.println(""  <url>"" + md.getHomePage() + ""</url>"");
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static void printDependencies(ModuleDescriptor md, ConfigurationScopeMapping mapping, PrintWriter out) {
/*  98 */     DependencyDescriptor[] dds = md.getDependencies();
/*  99 */     if (dds.length > 0) {
/* 100 */       out.println(""  <dependencies>"");
/* 101 */       for (int i = 0; i < dds.length; i++) {
/* 102 */         ModuleRevisionId mrid = dds[i].getDependencyRevisionId();
/* 103 */         out.println(""    <dependency>"");
/* 104 */         out.println(""      <groupId>"" + mrid.getOrganisation() + ""</groupId>"");
/* 105 */         out.println(""      <artifactId>"" + mrid.getName() + ""</artifactId>"");
/* 106 */         out.println(""      <version>"" + mrid.getRevision() + ""</version>"");
/* 107 */         String scope = mapping.getScope(dds[i].getModuleConfigurations());
/* 108 */         if (scope != null) {
/* 109 */           out.println(""      <scope>"" + scope + ""</scope>"");
/*     */         }
/* 111 */         if (mapping.isOptional(dds[i].getModuleConfigurations())) {
/* 112 */           out.println(""      <optional>true</optional>"");
/*     */         }
/* 114 */         out.println(""    </dependency>"");
/*     */       } 
/* 116 */       out.println(""  </dependencies>"");
/*     */     } 
/*     */   }
/*     */   
/* 120 */   public static final ConfigurationScopeMapping DEFAULT_MAPPING = new ConfigurationScopeMapping(new HashMap()
/*     */       {
/*     */       
/*     */       });
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ConfigurationScopeMapping
/*     */   {
/*     */     private Map scopes;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 135 */     public ConfigurationScopeMapping(Map scopesMapping) { this.scopes = new HashMap(scopesMapping); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 145 */     public String getScope(String[] confs) { return (String)this.scopes.get(StringUtils.join((Object[])confs, "", "")); }
/*     */ 
/*     */     
/* 148 */     public boolean isOptional(String[] confs) { return (getScope(confs) == null); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\PomModuleDescriptorWriter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.m2.PomReader,"/*     */ package org.apache.ivy.plugins.parser.m2;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.FilterInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.LineNumberReader;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.License;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.xml.sax.EntityResolver;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PomReader
/*     */ {
/*     */   private static final String PACKAGING = ""packaging"";
/*     */   private static final String DEPENDENCY = ""dependency"";
/*     */   private static final String DEPENDENCIES = ""dependencies"";
/*     */   private static final String DEPENDENCY_MGT = ""dependencyManagement"";
/*     */   private static final String PROJECT = ""project"";
/*     */   private static final String MODEL = ""model"";
/*     */   private static final String GROUP_ID = ""groupId"";
/*     */   private static final String ARTIFACT_ID = ""artifactId"";
/*     */   private static final String VERSION = ""version"";
/*     */   private static final String DESCRIPTION = ""description"";
/*     */   private static final String HOMEPAGE = ""url"";
/*     */   private static final String LICENSES = ""licenses"";
/*     */   private static final String LICENSE = ""license"";
/*     */   private static final String LICENSE_NAME = ""name"";
/*     */   private static final String LICENSE_URL = ""url"";
/*     */   private static final String PARENT = ""parent"";
/*     */   private static final String SCOPE = ""scope"";
/*     */   private static final String CLASSIFIER = ""classifier"";
/*     */   private static final String OPTIONAL = ""optional"";
/*     */   private static final String EXCLUSIONS = ""exclusions"";
/*     */   private static final String EXCLUSION = ""exclusion"";
/*     */   private static final String DISTRIBUTION_MGT = ""distributionManagement"";
/*     */   private static final String RELOCATION = ""relocation"";
/*     */   private static final String PROPERTIES = ""properties"";
/*     */   private static final String PLUGINS = ""plugins"";
/*     */   private static final String PLUGIN = ""plugin"";
/*     */   private static final String TYPE = ""type"";
/*  85 */   private HashMap properties = new HashMap();
/*     */   private final Element projectElement;
/*     */   private final Element parentElement;
/*     */   static Class class$org$apache$ivy$plugins$parser$m2$PomReader;
/*     */   
/*     */   public PomReader(URL descriptorURL, Resource res) throws IOException, SAXException {
/*  91 */     InputStream stream = new AddDTDFilterInputStream(descriptorURL.openStream());
/*     */     try {
/*  93 */       Document pomDomDoc = XMLHelper.parseToDom(stream, res, new EntityResolver()
/*     */           {
/*     */             public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
/*  96 */               if (systemId != null && systemId.endsWith(""m2-entities.ent"")) {
/*  97 */                 return new InputSource(((PomReader.class$org$apache$ivy$plugins$parser$m2$PomReader == null) ? (PomReader.class$org$apache$ivy$plugins$parser$m2$PomReader = PomReader.class$(""org.apache.ivy.plugins.parser.m2.PomReader"")) : PomReader.class$org$apache$ivy$plugins$parser$m2$PomReader).getResourceAsStream(""m2-entities.ent""));
/*     */               }
/*     */               
/* 100 */               return null;
/*     */             } private final PomReader this$0;
/*     */           });
/* 103 */       this.projectElement = pomDomDoc.getDocumentElement();
/* 104 */       if (!""project"".equals(this.projectElement.getNodeName()) && !""model"".equals(this.projectElement.getNodeName())) {
/* 105 */         throw new SAXParseException(""project must be the root tag"", res.getName(), res.getName(), 0, 0);
/*     */       }
/*     */       
/* 108 */       this.parentElement = getFirstChildElement(this.projectElement, ""parent"");
/*     */     } finally {
/* 110 */       if (stream != null)
/*     */         try {
/* 112 */           stream.close();
/* 113 */         } catch (IOException e) {} 
/*     */     } 
/*     */   }
/*     */   static Class class$(String x0) { try {
/*     */       return Class.forName(x0);
/*     */     } catch (ClassNotFoundException x1) {
/*     */       throw (new NoClassDefFoundError()).initCause(x1);
/*     */     }  }
/*     */   
/* 122 */   public boolean hasParent() { return (this.parentElement != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProperty(String prop, String val) {
/* 131 */     if (!this.properties.containsKey(prop) && val != null) {
/* 132 */       this.properties.put(prop, val);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public String getGroupId() {
/* 138 */     String groupId = getFirstChildText(this.projectElement, ""groupId"");
/* 139 */     if (groupId == null) {
/* 140 */       groupId = getFirstChildText(this.parentElement, ""groupId"");
/*     */     }
/* 142 */     return replaceProps(groupId);
/*     */   }
/*     */ 
/*     */   
/*     */   public String getParentGroupId() {
/* 147 */     String groupId = getFirstChildText(this.parentElement, ""groupId"");
/* 148 */     if (groupId == null) {
/* 149 */       groupId = getFirstChildText(this.projectElement, ""groupId"");
/*     */     }
/* 151 */     return replaceProps(groupId);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public String getArtifactId() {
/* 157 */     String val = getFirstChildText(this.projectElement, ""artifactId"");
/* 158 */     if (val == null) {
/* 159 */       val = getFirstChildText(this.parentElement, ""artifactId"");
/*     */     }
/* 161 */     return replaceProps(val);
/*     */   }
/*     */   
/*     */   public String getParentArtifactId() {
/* 165 */     String val = getFirstChildText(this.parentElement, ""artifactId"");
/* 166 */     if (val == null) {
/* 167 */       val = getFirstChildText(this.projectElement, ""artifactId"");
/*     */     }
/* 169 */     return replaceProps(val);
/*     */   }
/*     */ 
/*     */   
/*     */   public String getVersion() {
/* 174 */     String val = getFirstChildText(this.projectElement, ""version"");
/* 175 */     if (val == null) {
/* 176 */       val = getFirstChildText(this.parentElement, ""version"");
/*     */     }
/* 178 */     return replaceProps(val);
/*     */   }
/*     */   
/*     */   public String getParentVersion() {
/* 182 */     String val = getFirstChildText(this.parentElement, ""version"");
/* 183 */     if (val == null) {
/* 184 */       val = getFirstChildText(this.projectElement, ""version"");
/*     */     }
/* 186 */     return replaceProps(val);
/*     */   }
/*     */ 
/*     */   
/*     */   public String getPackaging() {
/* 191 */     String val = getFirstChildText(this.projectElement, ""packaging"");
/* 192 */     if (val == null) {
/* 193 */       val = ""jar"";
/*     */     }
/* 195 */     return val;
/*     */   }
/*     */   
/*     */   public String getHomePage() {
/* 199 */     String val = getFirstChildText(this.projectElement, ""url"");
/* 200 */     if (val == null) {
/* 201 */       val = """";
/*     */     }
/* 203 */     return val;
/*     */   }
/*     */   
/*     */   public String getDescription() {
/* 207 */     String val = getFirstChildText(this.projectElement, ""description"");
/* 208 */     if (val == null) {
/* 209 */       val = """";
/*     */     }
/* 211 */     return val.trim();
/*     */   }
/*     */   
/*     */   public License[] getLicenses() {
/* 215 */     Element licenses = getFirstChildElement(this.projectElement, ""licenses"");
/* 216 */     if (licenses == null) {
/* 217 */       return new License[0];
/*     */     }
/* 219 */     licenses.normalize();
/* 220 */     List lics = new ArrayList();
/* 221 */     for (Iterator it = getAllChilds(licenses).iterator(); it.hasNext(); ) {
/* 222 */       Element license = it.next();
/* 223 */       if (""license"".equals(license.getNodeName())) {
/* 224 */         String name = getFirstChildText(license, ""name"");
/* 225 */         String url = getFirstChildText(license, ""url"");
/*     */         
/* 227 */         if (name == null && url == null) {
/*     */           continue;
/*     */         }
/*     */ 
/*     */         
/* 232 */         if (name == null)
/*     */         {
/* 234 */           name = ""Unknown License"";
/*     */         }
/*     */         
/* 237 */         lics.add(new License(name, url));
/*     */       } 
/*     */     } 
/* 240 */     return lics.toArray(new License[lics.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   public ModuleRevisionId getRelocation() {
/* 245 */     Element distrMgt = getFirstChildElement(this.projectElement, ""distributionManagement"");
/* 246 */     Element relocation = getFirstChildElement(distrMgt, ""relocation"");
/* 247 */     if (relocation == null) {
/* 248 */       return null;
/*     */     }
/* 250 */     String relocGroupId = getFirstChildText(relocation, ""groupId"");
/* 251 */     String relocArtId = getFirstChildText(relocation, ""artifactId"");
/* 252 */     String relocVersion = getFirstChildText(relocation, ""version"");
/* 253 */     relocGroupId = (relocGroupId == null) ? getGroupId() : relocGroupId;
/* 254 */     relocArtId = (relocArtId == null) ? getArtifactId() : relocArtId;
/* 255 */     relocVersion = (relocVersion == null) ? getVersion() : relocVersion;
/* 256 */     return ModuleRevisionId.newInstance(relocGroupId, relocArtId, relocVersion);
/*     */   }
/*     */ 
/*     */   
/*     */   public List getDependencies() {
/* 261 */     Element dependenciesElement = getFirstChildElement(this.projectElement, ""dependencies"");
/* 262 */     LinkedList dependencies = new LinkedList();
/* 263 */     if (dependenciesElement != null) {
/* 264 */       NodeList childs = dependenciesElement.getChildNodes();
/* 265 */       for (int i = 0; i < childs.getLength(); i++) {
/* 266 */         Node node = childs.item(i);
/* 267 */         if (node instanceof Element && ""dependency"".equals(node.getNodeName())) {
/* 268 */           dependencies.add(new PomDependencyData((Element)node));
/*     */         }
/*     */       } 
/*     */     } 
/* 272 */     return dependencies;
/*     */   }
/*     */ 
/*     */   
/*     */   public List getDependencyMgt() {
/* 277 */     Element dependenciesElement = getFirstChildElement(this.projectElement, ""dependencyManagement"");
/* 278 */     dependenciesElement = getFirstChildElement(dependenciesElement, ""dependencies"");
/* 279 */     LinkedList dependencies = new LinkedList();
/* 280 */     if (dependenciesElement != null) {
/* 281 */       NodeList childs = dependenciesElement.getChildNodes();
/* 282 */       for (int i = 0; i < childs.getLength(); i++) {
/* 283 */         Node node = childs.item(i);
/* 284 */         if (node instanceof Element && ""dependency"".equals(node.getNodeName())) {
/* 285 */           dependencies.add(new PomDependencyMgtElement((Element)node));
/*     */         }
/*     */       } 
/*     */     } 
/* 289 */     return dependencies;
/*     */   }
/*     */   
/*     */   public class PomDependencyMgtElement implements PomDependencyMgt {
/*     */     private final Element depElement;
/*     */     private final PomReader this$0;
/*     */     
/* 296 */     PomDependencyMgtElement(Element depElement) { this.depElement = depElement; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getGroupId() {
/* 303 */       String val = PomReader.getFirstChildText(this.depElement, ""groupId"");
/* 304 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getArtifactId() {
/* 311 */       String val = PomReader.getFirstChildText(this.depElement, ""artifactId"");
/* 312 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getVersion() {
/* 319 */       String val = PomReader.getFirstChildText(this.depElement, ""version"");
/* 320 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public String getScope() {
/* 324 */       String val = PomReader.getFirstChildText(this.depElement, ""scope"");
/* 325 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public List getPlugins() {
/* 331 */     LinkedList plugins = new LinkedList();
/*     */     
/* 333 */     Element buildElement = getFirstChildElement(this.projectElement, ""build"");
/* 334 */     if (buildElement == null) {
/* 335 */       return plugins;
/*     */     }
/*     */     
/* 338 */     Element pluginsElement = getFirstChildElement(buildElement, ""plugins"");
/* 339 */     if (pluginsElement != null) {
/* 340 */       NodeList childs = pluginsElement.getChildNodes();
/* 341 */       for (int i = 0; i < childs.getLength(); i++) {
/* 342 */         Node node = childs.item(i);
/* 343 */         if (node instanceof Element && ""plugin"".equals(node.getNodeName())) {
/* 344 */           plugins.add(new PomPluginElement((Element)node));
/*     */         }
/*     */       } 
/*     */     } 
/* 348 */     return plugins;
/*     */   }
/*     */   
/*     */   public class PomPluginElement implements PomDependencyMgt {
/*     */     private Element pluginElement;
/*     */     private final PomReader this$0;
/*     */     
/* 355 */     PomPluginElement(Element pluginElement) { this.pluginElement = pluginElement; }
/*     */ 
/*     */     
/*     */     public String getGroupId() {
/* 359 */       String val = PomReader.getFirstChildText(this.pluginElement, ""groupId"");
/* 360 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public String getArtifactId() {
/* 364 */       String val = PomReader.getFirstChildText(this.pluginElement, ""artifactId"");
/* 365 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public String getVersion() {
/* 369 */       String val = PomReader.getFirstChildText(this.pluginElement, ""version"");
/* 370 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */ 
/*     */     
/* 374 */     public String getScope() { return null; }
/*     */   }
/*     */   
/*     */   public class PomDependencyData
/*     */     extends PomDependencyMgtElement {
/*     */     private final Element depElement;
/*     */     private final PomReader this$0;
/*     */     
/*     */     PomDependencyData(Element depElement) {
/* 383 */       super(depElement);
/* 384 */       this.depElement = depElement;
/*     */     }
/*     */     
/*     */     public String getScope() {
/* 388 */       String val = PomReader.getFirstChildText(this.depElement, ""scope"");
/* 389 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public String getClassifier() {
/* 393 */       String val = PomReader.getFirstChildText(this.depElement, ""classifier"");
/* 394 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public String getType() {
/* 398 */       String val = PomReader.getFirstChildText(this.depElement, ""type"");
/* 399 */       return PomReader.this.replaceProps(val);
/*     */     }
/*     */     
/*     */     public boolean isOptional() {
/* 403 */       Element e = PomReader.getFirstChildElement(this.depElement, ""optional"");
/* 404 */       return (e != null && ""true"".equalsIgnoreCase(PomReader.getTextContent(e)));
/*     */     }
/*     */     
/*     */     public List getExcludedModules() {
/* 408 */       Element exclusionsElement = PomReader.getFirstChildElement(this.depElement, ""exclusions"");
/* 409 */       LinkedList exclusions = new LinkedList();
/* 410 */       if (exclusionsElement != null) {
/* 411 */         NodeList childs = exclusionsElement.getChildNodes();
/* 412 */         for (int i = 0; i < childs.getLength(); i++) {
/* 413 */           Node node = childs.item(i);
/* 414 */           if (node instanceof Element && ""exclusion"".equals(node.getNodeName())) {
/* 415 */             String groupId = PomReader.getFirstChildText((Element)node, ""groupId"");
/* 416 */             String artifactId = PomReader.getFirstChildText((Element)node, ""artifactId"");
/* 417 */             if (groupId != null && artifactId != null) {
/* 418 */               exclusions.add(ModuleId.newInstance(groupId, artifactId));
/*     */             }
/*     */           } 
/*     */         } 
/*     */       } 
/* 423 */       return exclusions;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getPomProperties() {
/* 432 */     Map pomProperties = new HashMap();
/* 433 */     Element propsEl = getFirstChildElement(this.projectElement, ""properties"");
/* 434 */     if (propsEl != null) {
/* 435 */       propsEl.normalize();
/*     */     }
/* 437 */     for (Iterator it = getAllChilds(propsEl).iterator(); it.hasNext(); ) {
/* 438 */       Element prop = it.next();
/* 439 */       pomProperties.put(prop.getNodeName(), getTextContent(prop));
/*     */     } 
/* 441 */     return pomProperties;
/*     */   }
/*     */ 
/*     */   
/*     */   private String replaceProps(String val) {
/* 446 */     if (val == null) {
/* 447 */       return null;
/*     */     }
/* 449 */     return IvyPatternHelper.substituteVariables(val, this.properties).trim();
/*     */   }
/*     */ 
/*     */   
/*     */   private static String getTextContent(Element element) {
/* 454 */     StringBuffer result = new StringBuffer();
/*     */     
/* 456 */     NodeList childNodes = element.getChildNodes();
/* 457 */     for (int i = 0; i < childNodes.getLength(); i++) {
/* 458 */       Node child = childNodes.item(i);
/*     */       
/* 460 */       switch (child.getNodeType()) {
/*     */         case 3:
/*     */         case 4:
/* 463 */           result.append(child.getNodeValue());
/*     */           break;
/*     */       } 
/*     */ 
/*     */ 
/*     */     
/*     */     } 
/* 470 */     return result.toString();
/*     */   }
/*     */   
/*     */   private static String getFirstChildText(Element parentElem, String name) {
/* 474 */     Element node = getFirstChildElement(parentElem, name);
/* 475 */     if (node != null) {
/* 476 */       return getTextContent(node);
/*     */     }
/* 478 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private static Element getFirstChildElement(Element parentElem, String name) {
/* 483 */     if (parentElem == null) {
/* 484 */       return null;
/*     */     }
/* 486 */     NodeList childs = parentElem.getChildNodes();
/* 487 */     for (int i = 0; i < childs.getLength(); i++) {
/* 488 */       Node node = childs.item(i);
/* 489 */       if (node instanceof Element && name.equals(node.getNodeName())) {
/* 490 */         return (Element)node;
/*     */       }
/*     */     } 
/* 493 */     return null;
/*     */   }
/*     */   
/*     */   private static List getAllChilds(Element parent) {
/* 497 */     List r = new LinkedList();
/* 498 */     if (parent != null) {
/* 499 */       NodeList childs = parent.getChildNodes();
/* 500 */       for (int i = 0; i < childs.getLength(); i++) {
/* 501 */         Node node = childs.item(i);
/* 502 */         if (node instanceof Element) {
/* 503 */           r.add(node);
/*     */         }
/*     */       } 
/*     */     } 
/* 507 */     return r;
/*     */   }
/*     */   
/*     */   private static final class AddDTDFilterInputStream
/*     */     extends FilterInputStream {
/*     */     private static final int MARK = 10000;
/*     */     private static final String DOCTYPE = ""<!DOCTYPE project SYSTEM \""m2-entities.ent\"">\n"";
/*     */     private int count;
/* 515 */     private byte[] prefix = ""<!DOCTYPE project SYSTEM \""m2-entities.ent\"">\n"".getBytes();
/*     */     
/*     */     private AddDTDFilterInputStream(InputStream in) throws IOException {
/* 518 */       super(new BufferedInputStream(in));
/*     */       
/* 520 */       this.in.mark(10000);
/*     */ 
/*     */ 
/*     */       
/* 524 */       int byte1 = this.in.read();
/* 525 */       int byte2 = this.in.read();
/* 526 */       int byte3 = this.in.read();
/*     */       
/* 528 */       if (byte1 == 239 && byte2 == 187 && byte3 == 191) {
/*     */         
/* 530 */         this.in.mark(10000);
/*     */       } else {
/* 532 */         this.in.reset();
/*     */       } 
/*     */       
/* 535 */       int bytesToSkip = 0;
/* 536 */       LineNumberReader reader = new LineNumberReader(new InputStreamReader(this.in, ""UTF-8""), 100);
/* 537 */       String firstLine = reader.readLine();
/* 538 */       if (firstLine != null) {
/* 539 */         String trimmed = firstLine.trim();
/* 540 */         if (trimmed.startsWith(""<?xml "")) {
/* 541 */           int endIndex = trimmed.indexOf(""?>"");
/* 542 */           String xmlDecl = trimmed.substring(0, endIndex + 2);
/* 543 */           this.prefix = (xmlDecl + ""\n"" + ""<!DOCTYPE project SYSTEM \""m2-entities.ent\"">\n"").getBytes();
/* 544 */           bytesToSkip = (xmlDecl.getBytes()).length;
/*     */         } 
/*     */       } 
/*     */       
/* 548 */       this.in.reset();
/* 549 */       for (int i = 0; i < bytesToSkip; i++) {
/* 550 */         this.in.read();
/*     */       }
/*     */     }
/*     */     
/*     */     public int read() throws IOException {
/* 555 */       if (this.count < this.prefix.length) {
/* 556 */         return this.prefix[this.count++];
/*     */       }
/*     */       
/* 559 */       int result = super.read();
/* 560 */       return result;
/*     */     }
/*     */     
/*     */     public int read(byte[] b, int off, int len) throws IOException {
/* 564 */       if (b == null)
/* 565 */         throw new NullPointerException(); 
/* 566 */       if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0)
/*     */       {
/* 568 */         throw new IndexOutOfBoundsException(); } 
/* 569 */       if (len == 0) {
/* 570 */         return 0;
/*     */       }
/*     */       
/* 573 */       int nbrBytesCopied = 0;
/*     */       
/* 575 */       if (this.count < this.prefix.length) {
/* 576 */         int nbrBytesFromPrefix = Math.min(this.prefix.length - this.count, len);
/* 577 */         System.arraycopy(this.prefix, this.count, b, off, nbrBytesFromPrefix);
/* 578 */         nbrBytesCopied = nbrBytesFromPrefix;
/*     */       } 
/*     */       
/* 581 */       if (nbrBytesCopied < len) {
/* 582 */         nbrBytesCopied += this.in.read(b, off + nbrBytesCopied, len - nbrBytesCopied);
/*     */       }
/*     */       
/* 585 */       this.count += nbrBytesCopied;
/* 586 */       return nbrBytesCopied;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\m2\PomReader.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.xml.UpdateOptions,"/*     */ package org.apache.ivy.plugins.parser.xml;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UpdateOptions
/*     */ {
/*  31 */   private ParserSettings settings = null;
/*     */ 
/*     */ 
/*     */   
/*  35 */   private Namespace namespace = null;
/*     */ 
/*     */ 
/*     */   
/*  39 */   private Map resolvedRevisions = Collections.EMPTY_MAP;
/*     */ 
/*     */ 
/*     */   
/*  43 */   private String status = null;
/*     */ 
/*     */ 
/*     */   
/*  47 */   private String revision = null;
/*     */ 
/*     */ 
/*     */   
/*  51 */   private Date pubdate = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean replaceInclude = true;
/*     */ 
/*     */ 
/*     */   
/*  59 */   private String[] confsToExclude = null;
/*     */ 
/*     */   
/*     */   private boolean updateBranch = true;
/*     */ 
/*     */   
/*     */   private String branch;
/*     */ 
/*     */   
/*  68 */   public ParserSettings getSettings() { return this.settings; }
/*     */   
/*     */   public UpdateOptions setSettings(ParserSettings settings) {
/*  71 */     this.settings = settings;
/*  72 */     return this;
/*     */   }
/*     */   
/*  75 */   public Namespace getNamespace() { return this.namespace; }
/*     */   
/*     */   public UpdateOptions setNamespace(Namespace ns) {
/*  78 */     this.namespace = ns;
/*  79 */     return this;
/*     */   }
/*     */   
/*  82 */   public Map getResolvedRevisions() { return this.resolvedRevisions; }
/*     */   
/*     */   public UpdateOptions setResolvedRevisions(Map resolvedRevisions) {
/*  85 */     this.resolvedRevisions = resolvedRevisions;
/*  86 */     return this;
/*     */   }
/*     */   
/*  89 */   public String getStatus() { return this.status; }
/*     */   
/*     */   public UpdateOptions setStatus(String status) {
/*  92 */     this.status = status;
/*  93 */     return this;
/*     */   }
/*     */   
/*  96 */   public String getRevision() { return this.revision; }
/*     */   
/*     */   public UpdateOptions setRevision(String revision) {
/*  99 */     this.revision = revision;
/* 100 */     return this;
/*     */   }
/*     */   
/* 103 */   public Date getPubdate() { return this.pubdate; }
/*     */   
/*     */   public UpdateOptions setPubdate(Date pubdate) {
/* 106 */     this.pubdate = pubdate;
/* 107 */     return this;
/*     */   }
/*     */   
/* 110 */   public boolean isReplaceInclude() { return this.replaceInclude; }
/*     */   
/*     */   public UpdateOptions setReplaceInclude(boolean replaceInclude) {
/* 113 */     this.replaceInclude = replaceInclude;
/* 114 */     return this;
/*     */   }
/*     */   
/* 117 */   public String[] getConfsToExclude() { return this.confsToExclude; }
/*     */   
/*     */   public UpdateOptions setConfsToExclude(String[] confsToExclude) {
/* 120 */     this.confsToExclude = confsToExclude;
/* 121 */     return this;
/*     */   }
/*     */   
/* 124 */   public boolean isUpdateBranch() { return this.updateBranch; }
/*     */   
/*     */   public UpdateOptions setUpdateBranch(boolean updateBranch) {
/* 127 */     this.updateBranch = updateBranch;
/* 128 */     return this;
/*     */   }
/*     */   
/* 131 */   public String getBranch() { return this.branch; }
/*     */   
/*     */   public UpdateOptions setBranch(String pubBranch) {
/* 134 */     this.branch = pubBranch;
/* 135 */     return this;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\xml\UpdateOptions.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser,"/*     */ package org.apache.ivy.plugins.parser.xml;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.ConfigurationAware;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultExcludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultIncludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptorMediator;
/*     */ import org.apache.ivy.core.module.descriptor.ExcludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.IncludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.License;
/*     */ import org.apache.ivy.core.module.descriptor.MDArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.OverrideDependencyDescriptorMediator;
/*     */ import org.apache.ivy.core.module.id.ArtifactId;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.conflict.FixedConflictManager;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.parser.AbstractModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.url.URLResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.apache.ivy.util.extendable.DefaultExtendableItem;
/*     */ import org.apache.ivy.util.extendable.ExtendableItemHelper;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlModuleDescriptorParser
/*     */   extends AbstractModuleDescriptorParser
/*     */ {
/*  72 */   static final String[] DEPENDENCY_REGULAR_ATTRIBUTES = new String[] { ""org"", ""name"", ""branch"", ""branchConstraint"", ""rev"", ""revConstraint"", ""force"", ""transitive"", ""changing"", ""conf"" };
/*     */ 
/*     */   
/*  75 */   private static final XmlModuleDescriptorParser INSTANCE = new XmlModuleDescriptorParser();
/*     */ 
/*     */   
/*  78 */   public static XmlModuleDescriptorParser getInstance() { return INSTANCE; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL xmlURL, Resource res, boolean validate) throws ParseException, IOException {
/*  97 */     Parser parser = newParser(ivySettings);
/*  98 */     parser.setValidate(validate);
/*  99 */     parser.setResource(res);
/* 100 */     parser.setInput(xmlURL);
/* 101 */     parser.parse();
/* 102 */     return parser.getModuleDescriptor();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   ModuleDescriptor parseDescriptor(ParserSettings ivySettings, InputStream descriptor, Resource res, boolean validate) throws ParseException, IOException {
/* 108 */     Parser parser = newParser(ivySettings);
/* 109 */     parser.setValidate(validate);
/* 110 */     parser.setResource(res);
/* 111 */     parser.setInput(descriptor);
/* 112 */     parser.parse();
/* 113 */     return parser.getModuleDescriptor();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   protected Parser newParser(ParserSettings ivySettings) { return new Parser((ModuleDescriptorParser)this, ivySettings); }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public boolean accept(Resource res) { return true; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void toIvyFile(InputStream is, Resource res, File destFile, ModuleDescriptor md) throws IOException, ParseException {
/*     */     try {
/* 137 */       Namespace ns = null;
/* 138 */       if (md instanceof DefaultModuleDescriptor) {
/* 139 */         DefaultModuleDescriptor dmd = (DefaultModuleDescriptor)md;
/* 140 */         ns = dmd.getNamespace();
/*     */       } 
/* 142 */       XmlModuleDescriptorUpdater.update(is, res, destFile, (new UpdateOptions()).setSettings((ParserSettings)IvyContext.getContext().getSettings()).setStatus(md.getStatus()).setRevision(md.getResolvedModuleRevisionId().getRevision()).setPubdate(md.getResolvedPublicationDate()).setUpdateBranch(false).setNamespace(ns));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 150 */     catch (SAXException e) {
/* 151 */       ParseException ex = new ParseException(""exception occured while parsing "" + res, 0);
/* 152 */       ex.initCause(e);
/* 153 */       throw ex;
/*     */     } finally {
/* 155 */       if (is != null) {
/* 156 */         is.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Parser
/*     */     extends AbstractModuleDescriptorParser.AbstractParser
/*     */   {
/*     */     public static final class State
/*     */     {
/*     */       public static final int NONE = 0;
/*     */       
/*     */       public static final int INFO = 1;
/*     */       
/*     */       public static final int CONF = 2;
/*     */       
/*     */       public static final int PUB = 3;
/*     */       
/*     */       public static final int DEP = 4;
/*     */       
/*     */       public static final int DEP_ARTIFACT = 5;
/*     */       
/*     */       public static final int ARTIFACT_INCLUDE = 6;
/*     */       
/*     */       public static final int ARTIFACT_EXCLUDE = 7;
/*     */       
/*     */       public static final int CONFLICT = 8;
/*     */       
/*     */       public static final int EXCLUDE = 9;
/*     */       
/*     */       public static final int DEPS = 10;
/*     */       
/*     */       public static final int DESCRIPTION = 11;
/*     */       
/*     */       public static final int EXTRA_INFO = 12;
/*     */     }
/* 193 */     protected static final List ALLOWED_VERSIONS = Arrays.asList(new String[] { ""1.0"", ""1.1"", ""1.2"", ""1.3"", ""1.4"", ""2.0"" });
/*     */ 
/*     */     
/*     */     private ParserSettings settings;
/*     */     
/*     */     private boolean validate = true;
/*     */     
/*     */     private URL descriptorURL;
/*     */     
/*     */     private InputStream descriptorInput;
/*     */     
/* 204 */     private int state = 0;
/*     */     private PatternMatcher defaultMatcher;
/*     */     private DefaultDependencyDescriptor dd;
/*     */     private ConfigurationAware confAware;
/*     */     private MDArtifact artifact;
/*     */     private String conf;
/*     */     private boolean artifactsDeclared = false;
/*     */     private StringBuffer buffer;
/*     */     private String descriptorVersion;
/*     */     private String[] publicationsDefaultConf;
/*     */     
/*     */     public Parser(ModuleDescriptorParser parser, ParserSettings ivySettings) {
/* 216 */       super(parser);
/* 217 */       this.settings = ivySettings;
/*     */     }
/*     */ 
/*     */     
/* 221 */     public void setInput(InputStream descriptorInput) { this.descriptorInput = descriptorInput; }
/*     */ 
/*     */ 
/*     */     
/* 225 */     public void setInput(URL descriptorURL) { this.descriptorURL = descriptorURL; }
/*     */ 
/*     */ 
/*     */     
/* 229 */     public void setValidate(boolean validate) { this.validate = validate; }
/*     */ 
/*     */ 
/*     */     
/*     */     public void parse() throws ParseException, IOException {
/*     */       try {
/* 235 */         URL schemaURL = this.validate ? getSchemaURL() : null;
/* 236 */         if (this.descriptorURL != null) {
/* 237 */           XMLHelper.parse(this.descriptorURL, schemaURL, (DefaultHandler)this);
/*     */         } else {
/* 239 */           XMLHelper.parse(this.descriptorInput, schemaURL, (DefaultHandler)this, null);
/*     */         } 
/* 241 */         checkConfigurations();
/* 242 */         replaceConfigurationWildcards();
/* 243 */         getMd().setModuleArtifact(DefaultArtifact.newIvyArtifact(getMd().getResolvedModuleRevisionId(), getMd().getPublicationDate()));
/*     */ 
/*     */         
/* 246 */         if (!this.artifactsDeclared) {
/* 247 */           String[] confs = getMd().getConfigurationsNames();
/* 248 */           for (int i = 0; i < confs.length; i++) {
/* 249 */             getMd().addArtifact(confs[i], (Artifact)new MDArtifact((ModuleDescriptor)getMd(), getMd().getModuleRevisionId().getName(), ""jar"", ""jar""));
/*     */           }
/*     */         } 
/*     */ 
/*     */         
/* 254 */         getMd().check();
/* 255 */       } catch (ParserConfigurationException ex) {
/* 256 */         IllegalStateException ise = new IllegalStateException(ex.getMessage() + "" in "" + this.descriptorURL);
/*     */         
/* 258 */         ise.initCause(ex);
/* 259 */         throw ise;
/* 260 */       } catch (Exception ex) {
/* 261 */         checkErrors();
/* 262 */         ParseException pe = new ParseException(ex.getMessage() + "" in "" + this.descriptorURL, 0);
/* 263 */         pe.initCause(ex);
/* 264 */         throw pe;
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*     */     public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
/*     */       try {
/* 271 */         if (this.state == 11) {
/*     */           
/* 273 */           this.buffer.append(""<"" + qName + "">""); return;
/*     */         } 
/* 275 */         if (""ivy-module"".equals(qName)) {
/* 276 */           ivyModuleStarted(attributes);
/* 277 */         } else if (""info"".equals(qName)) {
/* 278 */           infoStarted(attributes);
/* 279 */         } else if (this.state == 1 && ""license"".equals(qName)) {
/* 280 */           getMd().addLicense(new License(this.settings.substitute(attributes.getValue(""name"")), this.settings.substitute(attributes.getValue(""url""))));
/*     */         }
/* 282 */         else if (this.state == 1 && ""description"".equals(qName)) {
/* 283 */           getMd().setHomePage(this.settings.substitute(attributes.getValue(""homepage"")));
/* 284 */           this.state = 11;
/* 285 */           this.buffer = new StringBuffer();
/* 286 */         } else if (this.state != 1 || !""ivyauthor"".equals(qName)) {
/*     */           
/* 288 */           if (this.state != 1 || !""repository"".equals(qName))
/*     */           {
/* 290 */             if (this.state == 1 && isOtherNamespace(qName))
/* 291 */             { this.buffer = new StringBuffer();
/* 292 */               this.state = 12; }
/* 293 */             else if (""configurations"".equals(qName))
/* 294 */             { configurationStarted(attributes); }
/* 295 */             else if (""publications"".equals(qName))
/* 296 */             { publicationsStarted(attributes); }
/* 297 */             else if (""dependencies"".equals(qName))
/* 298 */             { dependenciesStarted(attributes); }
/* 299 */             else if (""conflicts"".equals(qName))
/* 300 */             { if (!this.descriptorVersion.startsWith(""1."")) {
/* 301 */                 Message.deprecated(""using conflicts section is deprecated: please use hints section instead. Ivy file URL: "" + this.descriptorURL);
/*     */               }
/*     */               
/* 304 */               this.state = 8;
/* 305 */               checkConfigurations(); }
/* 306 */             else if (""artifact"".equals(qName))
/* 307 */             { artifactStarted(qName, attributes); }
/* 308 */             else if (""include"".equals(qName) && this.state == 4)
/* 309 */             { addIncludeRule(qName, attributes); }
/* 310 */             else if (""exclude"".equals(qName) && this.state == 4)
/* 311 */             { addExcludeRule(qName, attributes); }
/* 312 */             else if (""exclude"".equals(qName) && this.state == 10)
/* 313 */             { this.state = 9;
/* 314 */               parseRule(qName, attributes);
/* 315 */               getMd().addExcludeRule((ExcludeRule)this.confAware); }
/* 316 */             else if (""dependency"".equals(qName))
/* 317 */             { dependencyStarted(attributes); }
/* 318 */             else if (""conf"".equals(qName))
/* 319 */             { confStarted(attributes); }
/* 320 */             else if (""mapped"".equals(qName))
/* 321 */             { this.dd.addDependencyConfiguration(this.conf, this.settings.substitute(attributes.getValue(""name""))); }
/*     */             
/* 323 */             else if ((""conflict"".equals(qName) && this.state == 10) || (""manager"".equals(qName) && this.state == 8))
/*     */             
/* 325 */             { managerStarted(attributes, (this.state == 8) ? ""name"" : ""manager""); }
/* 326 */             else if (""override"".equals(qName) && this.state == 10)
/* 327 */             { mediationOverrideStarted(attributes); }
/* 328 */             else if (""include"".equals(qName) && this.state == 2)
/* 329 */             { includeConfStarted(attributes); }
/* 330 */             else if (this.validate && this.state != 12 && this.state != 11)
/* 331 */             { addError(""unknown tag "" + qName); }  } 
/*     */         } 
/* 333 */       } catch (Exception ex) {
/* 334 */         if (ex instanceof SAXException) {
/* 335 */           throw (SAXException)ex;
/*     */         }
/* 337 */         SAXException sax = new SAXException(""Problem occured while parsing ivy file: "" + ex.getMessage(), ex);
/*     */         
/* 339 */         sax.initCause(ex);
/* 340 */         throw sax;
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void publicationsStarted(Attributes attributes) {
/* 345 */       this.state = 3;
/* 346 */       this.artifactsDeclared = true;
/* 347 */       checkConfigurations();
/* 348 */       String defaultConf = this.settings.substitute(attributes.getValue(""defaultconf""));
/* 349 */       if (defaultConf != null) {
/* 350 */         setPublicationsDefaultConf(defaultConf);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 355 */     protected void setPublicationsDefaultConf(String defaultConf) { this.publicationsDefaultConf = (defaultConf == null) ? null : defaultConf.split("",""); }
/*     */ 
/*     */ 
/*     */     
/* 359 */     protected boolean isOtherNamespace(String qName) { return (qName.indexOf(':') != -1); }
/*     */     
/*     */     protected void managerStarted(Attributes attributes, String managerAtt) {
/*     */       Object cm;
/* 363 */       String org = this.settings.substitute(attributes.getValue(""org""));
/* 364 */       org = (org == null) ? ""*"" : org;
/* 365 */       String mod = this.settings.substitute(attributes.getValue(""module""));
/* 366 */       mod = (mod == null) ? ""*"" : mod;
/*     */       
/* 368 */       String name = this.settings.substitute(attributes.getValue(managerAtt));
/* 369 */       String rev = this.settings.substitute(attributes.getValue(""rev""));
/* 370 */       if (rev != null) {
/* 371 */         String[] revs = rev.split("","");
/* 372 */         for (int i = 0; i < revs.length; i++) {
/* 373 */           revs[i] = revs[i].trim();
/*     */         }
/* 375 */         cm = new FixedConflictManager(revs);
/* 376 */       } else if (name != null) {
/* 377 */         cm = this.settings.getConflictManager(name);
/* 378 */         if (cm == null) {
/* 379 */           addError(""unknown conflict manager: "" + name);
/*     */           return;
/*     */         } 
/*     */       } else {
/* 383 */         addError(""bad conflict manager: no manager nor rev"");
/*     */         return;
/*     */       } 
/* 386 */       String matcherName = this.settings.substitute(attributes.getValue(""matcher""));
/* 387 */       PatternMatcher matcher = (matcherName == null) ? this.defaultMatcher : this.settings.getMatcher(matcherName);
/*     */       
/* 389 */       if (matcher == null) {
/* 390 */         addError(""unknown matcher: "" + matcherName);
/*     */         return;
/*     */       } 
/* 393 */       getMd().addConflictManager(new ModuleId(org, mod), matcher, (ConflictManager)cm);
/*     */     }
/*     */     
/*     */     protected void mediationOverrideStarted(Attributes attributes) {
/* 397 */       String org = this.settings.substitute(attributes.getValue(""org""));
/* 398 */       org = (org == null) ? ""*"" : org;
/* 399 */       String mod = this.settings.substitute(attributes.getValue(""module""));
/* 400 */       mod = (mod == null) ? ""*"" : mod;
/* 401 */       String rev = this.settings.substitute(attributes.getValue(""rev""));
/* 402 */       String branch = this.settings.substitute(attributes.getValue(""branch""));
/* 403 */       String matcherName = this.settings.substitute(attributes.getValue(""matcher""));
/* 404 */       PatternMatcher matcher = (matcherName == null) ? this.defaultMatcher : this.settings.getMatcher(matcherName);
/*     */       
/* 406 */       if (matcher == null) {
/* 407 */         addError(""unknown matcher: "" + matcherName);
/*     */         return;
/*     */       } 
/* 410 */       getMd().addDependencyDescriptorMediator(new ModuleId(org, mod), matcher, (DependencyDescriptorMediator)new OverrideDependencyDescriptorMediator(branch, rev));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void includeConfStarted(Attributes attributes) throws SAXException, IOException, ParserConfigurationException, ParseException {
/* 417 */       URL url = this.settings.getRelativeUrlResolver().getURL(this.descriptorURL, this.settings.substitute(attributes.getValue(""file"")), this.settings.substitute(attributes.getValue(""url"")));
/*     */ 
/*     */ 
/*     */       
/* 421 */       if (url == null) {
/* 422 */         throw new SAXException(""include tag must have a file or an url attribute"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 427 */       Parser parser = new Parser(getModuleDescriptorParser(), this.settings);
/* 428 */       parser.setInput(url);
/* 429 */       parser.setMd(new DefaultModuleDescriptor(getModuleDescriptorParser(), (Resource)new URLResource(url)));
/*     */       
/* 431 */       XMLHelper.parse(url, null, (DefaultHandler)parser);
/*     */ 
/*     */       
/* 434 */       Configuration[] configs = parser.getModuleDescriptor().getConfigurations();
/* 435 */       for (int i = 0; i < configs.length; i++) {
/* 436 */         getMd().addConfiguration(configs[i]);
/*     */       }
/* 438 */       if (parser.getDefaultConfMapping() != null) {
/* 439 */         Message.debug(""setting default conf from imported configurations file: "" + parser.getDefaultConfMapping());
/*     */         
/* 441 */         setDefaultConfMapping(parser.getDefaultConfMapping());
/*     */       } 
/* 443 */       if (parser.getMd().isMappingOverride()) {
/* 444 */         Message.debug(""enabling mapping-override from imported configurations file"");
/*     */         
/* 446 */         getMd().setMappingOverride(true);
/*     */       }  } protected void confStarted(Attributes attributes) { String mappeds;
/*     */       Configuration configuration;
/*     */       String deprecated;
/*     */       boolean transitive;
/* 451 */       String transitiveValue, ext, visibility, conf = this.settings.substitute(attributes.getValue(""name""));
/* 452 */       switch (this.state) {
/*     */         case 2:
/* 454 */           visibility = this.settings.substitute(attributes.getValue(""visibility""));
/* 455 */           ext = this.settings.substitute(attributes.getValue(""extends""));
/* 456 */           transitiveValue = attributes.getValue(""transitive"");
/* 457 */           transitive = (transitiveValue == null) ? true : Boolean.valueOf(attributes.getValue(""transitive"")).booleanValue();
/*     */           
/* 459 */           deprecated = attributes.getValue(""deprecated"");
/* 460 */           configuration = new Configuration(conf, Configuration.Visibility.getVisibility((visibility == null) ? ""public"" : visibility), this.settings.substitute(attributes.getValue(""description"")), (ext == null) ? null : ext.split("",""), transitive, deprecated);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 466 */           ExtendableItemHelper.fillExtraAttributes(this.settings, (DefaultExtendableItem)configuration, attributes, new String[] { ""name"", ""visibility"", ""extends"", ""transitive"", ""description"", ""deprecated"" });
/*     */ 
/*     */           
/* 469 */           getMd().addConfiguration(configuration);
/*     */           return;
/*     */         case 3:
/* 472 */           if (""*"".equals(conf)) {
/* 473 */             String[] confs = getMd().getConfigurationsNames();
/* 474 */             for (int i = 0; i < confs.length; i++) {
/* 475 */               this.artifact.addConfiguration(confs[i]);
/* 476 */               getMd().addArtifact(confs[i], (Artifact)this.artifact);
/*     */             } 
/*     */           } else {
/* 479 */             this.artifact.addConfiguration(conf);
/* 480 */             getMd().addArtifact(conf, (Artifact)this.artifact);
/*     */           } 
/*     */           return;
/*     */         case 4:
/* 484 */           this.conf = conf;
/* 485 */           mappeds = this.settings.substitute(attributes.getValue(""mapped""));
/* 486 */           if (mappeds != null) {
/* 487 */             String[] mapped = mappeds.split("","");
/* 488 */             for (int i = 0; i < mapped.length; i++) {
/* 489 */               this.dd.addDependencyConfiguration(conf, mapped[i].trim());
/*     */             }
/*     */           } 
/*     */           return;
/*     */         case 5:
/*     */         case 6:
/*     */         case 7:
/* 496 */           addConfiguration(conf);
/*     */           return;
/*     */       } 
/* 499 */       if (this.validate) {
/* 500 */         addError(""conf tag found in invalid tag: "" + this.state);
/*     */       } }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void dependencyStarted(Attributes attributes) {
/* 507 */       this.state = 4;
/* 508 */       String org = this.settings.substitute(attributes.getValue(""org""));
/* 509 */       if (org == null) {
/* 510 */         org = getMd().getModuleRevisionId().getOrganisation();
/*     */       }
/* 512 */       boolean force = Boolean.valueOf(this.settings.substitute(attributes.getValue(""force""))).booleanValue();
/*     */       
/* 514 */       boolean changing = Boolean.valueOf(this.settings.substitute(attributes.getValue(""changing""))).booleanValue();
/*     */ 
/*     */       
/* 517 */       String transitiveValue = this.settings.substitute(attributes.getValue(""transitive""));
/* 518 */       boolean transitive = (transitiveValue == null) ? true : Boolean.valueOf(attributes.getValue(""transitive"")).booleanValue();
/*     */ 
/*     */       
/* 521 */       String name = this.settings.substitute(attributes.getValue(""name""));
/* 522 */       String branch = this.settings.substitute(attributes.getValue(""branch""));
/* 523 */       String branchConstraint = this.settings.substitute(attributes.getValue(""branchConstraint""));
/* 524 */       String rev = this.settings.substitute(attributes.getValue(""rev""));
/* 525 */       String revConstraint = this.settings.substitute(attributes.getValue(""revConstraint""));
/* 526 */       revConstraint = (revConstraint == null) ? rev : revConstraint;
/* 527 */       Map extraAttributes = ExtendableItemHelper.getExtraAttributes(this.settings, attributes, XmlModuleDescriptorParser.DEPENDENCY_REGULAR_ATTRIBUTES);
/*     */       
/* 529 */       this.dd = new DefaultDependencyDescriptor((ModuleDescriptor)getMd(), ModuleRevisionId.newInstance(org, name, branch, rev, extraAttributes), ModuleRevisionId.newInstance(org, name, branchConstraint, revConstraint, extraAttributes), force, changing, transitive);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 535 */       getMd().addDependency((DependencyDescriptor)this.dd);
/* 536 */       String confs = this.settings.substitute(attributes.getValue(""conf""));
/* 537 */       if (confs != null && confs.length() > 0) {
/* 538 */         parseDepsConfs(confs, this.dd);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/*     */     protected void artifactStarted(String qName, Attributes attributes) throws MalformedURLException {
/* 544 */       if (this.state == 3) {
/*     */         
/* 546 */         String artName = this.settings.substitute(attributes.getValue(""name""));
/* 547 */         artName = (artName == null) ? getMd().getModuleRevisionId().getName() : artName;
/* 548 */         String type = this.settings.substitute(attributes.getValue(""type""));
/* 549 */         type = (type == null) ? ""jar"" : type;
/* 550 */         String ext = this.settings.substitute(attributes.getValue(""ext""));
/* 551 */         ext = (ext != null) ? ext : type;
/* 552 */         String url = this.settings.substitute(attributes.getValue(""url""));
/* 553 */         this.artifact = new MDArtifact((ModuleDescriptor)getMd(), artName, type, ext, (url == null) ? null : new URL(url), ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""ext"", ""type"", ""name"", ""conf"" }));
/*     */ 
/*     */         
/* 556 */         String confs = this.settings.substitute(attributes.getValue(""conf""));
/*     */ 
/*     */ 
/*     */         
/* 560 */         if (confs != null && confs.length() > 0) {
/*     */           String[] conf;
/* 562 */           if (""*"".equals(confs)) {
/* 563 */             conf = getMd().getConfigurationsNames();
/*     */           } else {
/* 565 */             conf = confs.split("","");
/*     */           } 
/* 567 */           for (int i = 0; i < conf.length; i++) {
/* 568 */             this.artifact.addConfiguration(conf[i].trim());
/* 569 */             getMd().addArtifact(conf[i].trim(), (Artifact)this.artifact);
/*     */           } 
/*     */         } 
/* 572 */       } else if (this.state == 4) {
/*     */         
/* 574 */         addDependencyArtifacts(qName, attributes);
/* 575 */       } else if (this.validate) {
/* 576 */         addError(""artifact tag found in invalid tag: "" + this.state);
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void dependenciesStarted(Attributes attributes) {
/* 581 */       this.state = 10;
/* 582 */       String defaultConf = this.settings.substitute(attributes.getValue(""defaultconf""));
/* 583 */       if (defaultConf != null) {
/* 584 */         setDefaultConf(defaultConf);
/*     */       }
/* 586 */       defaultConf = this.settings.substitute(attributes.getValue(""defaultconfmapping""));
/* 587 */       if (defaultConf != null) {
/* 588 */         setDefaultConfMapping(defaultConf);
/*     */       }
/* 590 */       String confMappingOverride = this.settings.substitute(attributes.getValue(""confmappingoverride""));
/*     */       
/* 592 */       if (confMappingOverride != null) {
/* 593 */         getMd().setMappingOverride(Boolean.valueOf(confMappingOverride).booleanValue());
/*     */       }
/* 595 */       checkConfigurations();
/*     */     }
/*     */     
/*     */     protected void configurationStarted(Attributes attributes) {
/* 599 */       this.state = 2;
/* 600 */       setDefaultConfMapping(this.settings.substitute(attributes.getValue(""defaultconfmapping"")));
/*     */       
/* 602 */       getMd().setMappingOverride(Boolean.valueOf(this.settings.substitute(attributes.getValue(""confmappingoverride""))).booleanValue());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void infoStarted(Attributes attributes) {
/* 609 */       this.state = 1;
/* 610 */       String org = this.settings.substitute(attributes.getValue(""organisation""));
/* 611 */       String module = this.settings.substitute(attributes.getValue(""module""));
/* 612 */       String revision = this.settings.substitute(attributes.getValue(""revision""));
/* 613 */       String branch = this.settings.substitute(attributes.getValue(""branch""));
/* 614 */       getMd().setModuleRevisionId(ModuleRevisionId.newInstance(org, module, branch, revision, ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""organisation"", ""module"", ""revision"", ""status"", ""publication"", ""branch"", ""namespace"", ""default"", ""resolver"" })));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 620 */       String namespace = this.settings.substitute(attributes.getValue(""namespace""));
/* 621 */       if (namespace != null) {
/* 622 */         Namespace ns = this.settings.getNamespace(namespace);
/* 623 */         if (ns == null) {
/* 624 */           Message.warn(""namespace not found for "" + getMd().getModuleRevisionId() + "": "" + namespace);
/*     */         } else {
/*     */           
/* 627 */           getMd().setNamespace(ns);
/*     */         } 
/*     */       } 
/*     */       
/* 631 */       String status = this.settings.substitute(attributes.getValue(""status""));
/* 632 */       getMd().setStatus((status == null) ? this.settings.getStatusManager().getDefaultStatus() : status);
/*     */       
/* 634 */       getMd().setDefault(Boolean.valueOf(this.settings.substitute(attributes.getValue(""default""))).booleanValue());
/*     */       
/* 636 */       String pubDate = this.settings.substitute(attributes.getValue(""publication""));
/* 637 */       if (pubDate != null && pubDate.length() > 0) {
/*     */         try {
/* 639 */           getMd().setPublicationDate(Ivy.DATE_FORMAT.parse(pubDate));
/* 640 */         } catch (ParseException e) {
/* 641 */           addError(""invalid publication date format: "" + pubDate);
/* 642 */           getMd().setPublicationDate(getDefaultPubDate());
/*     */         } 
/*     */       } else {
/* 645 */         getMd().setPublicationDate(getDefaultPubDate());
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void ivyModuleStarted(Attributes attributes) throws SAXException {
/* 650 */       this.descriptorVersion = attributes.getValue(""version"");
/* 651 */       int versionIndex = ALLOWED_VERSIONS.indexOf(this.descriptorVersion);
/* 652 */       if (versionIndex == -1) {
/* 653 */         addError(""invalid version "" + this.descriptorVersion);
/* 654 */         throw new SAXException(""invalid version "" + this.descriptorVersion);
/*     */       } 
/* 656 */       if (versionIndex >= ALLOWED_VERSIONS.indexOf(""1.3"")) {
/* 657 */         Message.debug(""post 1.3 ivy file: using exact as default matcher"");
/*     */         
/* 659 */         this.defaultMatcher = this.settings.getMatcher(""exact"");
/*     */       } else {
/* 661 */         Message.debug(""pre 1.3 ivy file: using exactOrRegexp as default matcher"");
/*     */         
/* 663 */         this.defaultMatcher = this.settings.getMatcher(""exactOrRegexp"");
/*     */       } 
/*     */       
/* 666 */       for (int i = 0; i < attributes.getLength(); i++) {
/* 667 */         if (attributes.getQName(i).startsWith(""xmlns:"")) {
/* 668 */           getMd().addExtraAttributeNamespace(attributes.getQName(i).substring(""xmlns:"".length()), attributes.getValue(i));
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void addDependencyArtifacts(String tag, Attributes attributes) throws MalformedURLException {
/* 677 */       this.state = 5;
/* 678 */       parseRule(tag, attributes);
/*     */     }
/*     */ 
/*     */     
/*     */     protected void addIncludeRule(String tag, Attributes attributes) throws MalformedURLException {
/* 683 */       this.state = 6;
/* 684 */       parseRule(tag, attributes);
/*     */     }
/*     */ 
/*     */     
/*     */     protected void addExcludeRule(String tag, Attributes attributes) throws MalformedURLException {
/* 689 */       this.state = 7;
/* 690 */       parseRule(tag, attributes);
/*     */     }
/*     */     
/*     */     protected void parseRule(String tag, Attributes attributes) throws MalformedURLException {
/* 694 */       String name = this.settings.substitute(attributes.getValue(""name""));
/* 695 */       if (name == null) {
/* 696 */         name = this.settings.substitute(attributes.getValue(""artifact""));
/* 697 */         if (name == null) {
/* 698 */           name = ""artifact"".equals(tag) ? this.dd.getDependencyId().getName() : ""*"";
/*     */         }
/*     */       } 
/*     */       
/* 702 */       String type = this.settings.substitute(attributes.getValue(""type""));
/* 703 */       if (type == null) {
/* 704 */         type = ""artifact"".equals(tag) ? ""jar"" : ""*"";
/*     */       }
/* 706 */       String ext = this.settings.substitute(attributes.getValue(""ext""));
/* 707 */       ext = (ext != null) ? ext : type;
/* 708 */       if (this.state == 5) {
/* 709 */         String url = this.settings.substitute(attributes.getValue(""url""));
/* 710 */         Map extraAtt = ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""name"", ""type"", ""ext"", ""url"", ""conf"" });
/*     */         
/* 712 */         this.confAware = (ConfigurationAware)new DefaultDependencyArtifactDescriptor((DependencyDescriptor)this.dd, name, type, ext, (url == null) ? null : new URL(url), extraAtt);
/*     */       }
/* 714 */       else if (this.state == 6) {
/* 715 */         PatternMatcher matcher = getPatternMatcher(attributes.getValue(""matcher""));
/* 716 */         String org = this.settings.substitute(attributes.getValue(""org""));
/* 717 */         org = (org == null) ? ""*"" : org;
/* 718 */         String module = this.settings.substitute(attributes.getValue(""module""));
/* 719 */         module = (module == null) ? ""*"" : module;
/* 720 */         ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);
/* 721 */         Map extraAtt = ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""org"", ""module"", ""name"", ""type"", ""ext"", ""matcher"", ""conf"" });
/*     */         
/* 723 */         this.confAware = (ConfigurationAware)new DefaultIncludeRule(aid, matcher, extraAtt);
/*     */       } else {
/* 725 */         PatternMatcher matcher = getPatternMatcher(attributes.getValue(""matcher""));
/* 726 */         String org = this.settings.substitute(attributes.getValue(""org""));
/* 727 */         org = (org == null) ? ""*"" : org;
/* 728 */         String module = this.settings.substitute(attributes.getValue(""module""));
/* 729 */         module = (module == null) ? ""*"" : module;
/* 730 */         ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);
/* 731 */         Map extraAtt = ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""org"", ""module"", ""name"", ""type"", ""ext"", ""matcher"", ""conf"" });
/*     */         
/* 733 */         this.confAware = (ConfigurationAware)new DefaultExcludeRule(aid, matcher, extraAtt);
/*     */       } 
/* 735 */       String confs = this.settings.substitute(attributes.getValue(""conf""));
/*     */ 
/*     */       
/* 738 */       if (confs != null && confs.length() > 0) {
/*     */         String[] conf;
/* 740 */         if (""*"".equals(confs)) {
/* 741 */           conf = getMd().getConfigurationsNames();
/*     */         } else {
/* 743 */           conf = confs.split("","");
/*     */         } 
/* 745 */         for (int i = 0; i < conf.length; i++) {
/* 746 */           addConfiguration(conf[i].trim());
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void addConfiguration(String c) {
/* 752 */       this.confAware.addConfiguration(c);
/* 753 */       if (this.state != 9)
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 763 */         if (this.confAware instanceof DependencyArtifactDescriptor) {
/* 764 */           this.dd.addDependencyArtifact(c, (DependencyArtifactDescriptor)this.confAware);
/* 765 */         } else if (this.confAware instanceof IncludeRule) {
/* 766 */           this.dd.addIncludeRule(c, (IncludeRule)this.confAware);
/* 767 */         } else if (this.confAware instanceof ExcludeRule) {
/* 768 */           this.dd.addExcludeRule(c, (ExcludeRule)this.confAware);
/*     */         } 
/*     */       }
/*     */     }
/*     */     
/*     */     protected PatternMatcher getPatternMatcher(String m) {
/* 774 */       String matcherName = this.settings.substitute(m);
/* 775 */       PatternMatcher matcher = (matcherName == null) ? this.defaultMatcher : this.settings.getMatcher(matcherName);
/*     */       
/* 777 */       if (matcher == null) {
/* 778 */         throw new IllegalArgumentException(""unknown matcher "" + matcherName);
/*     */       }
/* 780 */       return matcher;
/*     */     }
/*     */ 
/*     */     
/*     */     public void characters(char[] ch, int start, int length) throws SAXException {
/* 785 */       if (this.buffer != null) {
/* 786 */         this.buffer.append(ch, start, length);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/*     */     public void endElement(String uri, String localName, String qName) throws SAXException {
/* 792 */       if (this.state == 3 && ""artifact"".equals(qName) && (this.artifact.getConfigurations()).length == 0) {
/*     */         
/* 794 */         String[] confs = (this.publicationsDefaultConf == null) ? getMd().getConfigurationsNames() : this.publicationsDefaultConf;
/*     */ 
/*     */         
/* 797 */         for (int i = 0; i < confs.length; i++) {
/* 798 */           this.artifact.addConfiguration(confs[i].trim());
/* 799 */           getMd().addArtifact(confs[i].trim(), (Artifact)this.artifact);
/*     */         } 
/* 801 */       } else if (""configurations"".equals(qName)) {
/* 802 */         checkConfigurations();
/* 803 */       } else if ((this.state == 5 && ""artifact"".equals(qName)) || (this.state == 6 && ""include"".equals(qName)) || (this.state == 7 && ""exclude"".equals(qName))) {
/*     */ 
/*     */         
/* 806 */         this.state = 4;
/* 807 */         if ((this.confAware.getConfigurations()).length == 0) {
/* 808 */           String[] confs = getMd().getConfigurationsNames();
/* 809 */           for (int i = 0; i < confs.length; i++) {
/* 810 */             addConfiguration(confs[i]);
/*     */           }
/*     */         } 
/* 813 */         this.confAware = null;
/* 814 */       } else if (""exclude"".equals(qName) && this.state == 9) {
/* 815 */         if ((this.confAware.getConfigurations()).length == 0) {
/* 816 */           String[] confs = getMd().getConfigurationsNames();
/* 817 */           for (int i = 0; i < confs.length; i++) {
/* 818 */             addConfiguration(confs[i]);
/*     */           }
/*     */         } 
/* 821 */         this.confAware = null;
/* 822 */         this.state = 10;
/* 823 */       } else if (""dependency"".equals(qName) && this.state == 4) {
/* 824 */         if ((this.dd.getModuleConfigurations()).length == 0) {
/* 825 */           parseDepsConfs(getDefaultConf(), this.dd);
/*     */         }
/* 827 */         this.state = 10;
/* 828 */       } else if (""dependencies"".equals(qName) && this.state == 10) {
/* 829 */         this.state = 0;
/* 830 */       } else if (this.state == 1 && ""info"".equals(qName)) {
/* 831 */         this.state = 0;
/* 832 */       } else if (this.state == 11 && ""description"".equals(qName)) {
/* 833 */         getMd().setDescription((this.buffer == null) ? """" : this.buffer.toString().trim());
/* 834 */         this.buffer = null;
/* 835 */         this.state = 1;
/* 836 */       } else if (this.state == 12) {
/* 837 */         getMd().addExtraInfo(qName, (this.buffer == null) ? """" : this.buffer.toString());
/* 838 */         this.buffer = null;
/* 839 */         this.state = 1;
/* 840 */       } else if (this.state == 11) {
/* 841 */         if (this.buffer.toString().endsWith(""<"" + qName + "">"")) {
/* 842 */           this.buffer.deleteCharAt(this.buffer.length() - 1);
/* 843 */           this.buffer.append(""/>"");
/*     */         } else {
/* 845 */           this.buffer.append(""</"" + qName + "">"");
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void checkConfigurations() {
/* 851 */       if ((getMd().getConfigurations()).length == 0) {
/* 852 */         getMd().addConfiguration(new Configuration(""default""));
/*     */       }
/*     */     }
/*     */     
/*     */     protected void replaceConfigurationWildcards() {
/* 857 */       Configuration[] configs = getMd().getConfigurations();
/* 858 */       for (int i = 0; i < configs.length; i++) {
/* 859 */         configs[i].replaceWildcards((ModuleDescriptor)getMd());
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 865 */     protected ParserSettings getSettings() { return this.settings; }
/*     */ 
/*     */ 
/*     */     
/* 869 */     protected URL getDescriptorURL() { return this.descriptorURL; }
/*     */ 
/*     */ 
/*     */     
/* 873 */     protected InputStream getDescriptorInput() { return this.descriptorInput; }
/*     */ 
/*     */ 
/*     */     
/* 877 */     protected int getState() { return this.state; }
/*     */ 
/*     */ 
/*     */     
/* 881 */     protected void setState(int state) { this.state = state; }
/*     */ 
/*     */ 
/*     */     
/* 885 */     protected PatternMatcher getDefaultMatcher() { return this.defaultMatcher; }
/*     */ 
/*     */ 
/*     */     
/* 889 */     protected DefaultDependencyDescriptor getDd() { return this.dd; }
/*     */ 
/*     */ 
/*     */     
/* 893 */     protected void setDd(DefaultDependencyDescriptor dd) { this.dd = dd; }
/*     */ 
/*     */ 
/*     */     
/* 897 */     protected ConfigurationAware getConfAware() { return this.confAware; }
/*     */ 
/*     */ 
/*     */     
/* 901 */     protected void setConfAware(ConfigurationAware confAware) { this.confAware = confAware; }
/*     */ 
/*     */ 
/*     */     
/* 905 */     protected MDArtifact getArtifact() { return this.artifact; }
/*     */ 
/*     */ 
/*     */     
/* 909 */     protected void setArtifact(MDArtifact artifact) { this.artifact = artifact; }
/*     */ 
/*     */ 
/*     */     
/* 913 */     protected String getConf() { return this.conf; }
/*     */ 
/*     */ 
/*     */     
/* 917 */     protected void setConf(String conf) { this.conf = conf; }
/*     */ 
/*     */ 
/*     */     
/* 921 */     protected boolean isArtifactsDeclared() { return this.artifactsDeclared; }
/*     */ 
/*     */ 
/*     */     
/* 925 */     protected void setArtifactsDeclared(boolean artifactsDeclared) { this.artifactsDeclared = artifactsDeclared; }
/*     */ 
/*     */ 
/*     */     
/* 929 */     protected StringBuffer getBuffer() { return this.buffer; }
/*     */ 
/*     */ 
/*     */     
/* 933 */     protected void setBuffer(StringBuffer buffer) { this.buffer = buffer; }
/*     */ 
/*     */ 
/*     */     
/* 937 */     protected String getDescriptorVersion() { return this.descriptorVersion; }
/*     */ 
/*     */ 
/*     */     
/* 941 */     protected void setDescriptorVersion(String descriptorVersion) { this.descriptorVersion = descriptorVersion; }
/*     */ 
/*     */ 
/*     */     
/* 945 */     protected String[] getPublicationsDefaultConf() { return this.publicationsDefaultConf; }
/*     */ 
/*     */ 
/*     */     
/* 949 */     protected void setPublicationsDefaultConf(String[] publicationsDefaultConf) { this.publicationsDefaultConf = publicationsDefaultConf; }
/*     */ 
/*     */ 
/*     */     
/* 953 */     protected boolean isValidate() { return this.validate; }
/*     */ 
/*     */ 
/*     */     
/* 957 */     protected URL getSchemaURL() { return getClass().getResource(""ivy.xsd""); }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 962 */   public String toString() { return ""ivy parser""; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\xml\XmlModuleDescriptorParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorUpdater,"/*     */ package org.apache.ivy.plugins.parser.xml;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.namespace.NameSpaceHelper;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.parser.ParserSettings;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.file.FileResource;
/*     */ import org.apache.ivy.plugins.repository.url.URLResource;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.apache.ivy.util.extendable.ExtendableItemHelper;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ import org.xml.sax.ext.LexicalHandler;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class XmlModuleDescriptorUpdater
/*     */ {
/*     */   private static final int MAX_HEADER_LENGTH = 10000;
/*  72 */   public static String LINE_SEPARATOR = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void update(URL srcURL, File destFile, UpdateOptions options) throws IOException, SAXException {
/*  89 */     if (destFile.getParentFile() != null) {
/*  90 */       destFile.getParentFile().mkdirs();
/*     */     }
/*  92 */     OutputStream destStream = new FileOutputStream(destFile);
/*     */     try {
/*  94 */       update(srcURL, destStream, options);
/*     */     } finally {
/*     */       try {
/*  97 */         destStream.close();
/*  98 */       } catch (IOException e) {
/*  99 */         Message.warn(""failed to close a stream : "" + e.toString());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void update(URL srcURL, OutputStream destFile, UpdateOptions options) throws IOException, SAXException {
/* 106 */     InputStream in = srcURL.openStream();
/*     */     try {
/* 108 */       update(srcURL, in, destFile, options);
/*     */     } finally {
/*     */       try {
/* 111 */         in.close();
/* 112 */       } catch (IOException e) {
/* 113 */         Message.warn(""failed to close a stream : "" + e.toString());
/*     */       } 
/*     */       try {
/* 116 */         destFile.close();
/* 117 */       } catch (IOException e) {
/* 118 */         Message.warn(""failed to close a stream : "" + e.toString());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void update(InputStream in, Resource res, File destFile, UpdateOptions options) throws IOException, SAXException {
/* 127 */     if (destFile.getParentFile() != null) {
/* 128 */       destFile.getParentFile().mkdirs();
/*     */     }
/* 130 */     OutputStream fos = new FileOutputStream(destFile);
/*     */     
/*     */     try {
/* 133 */       URL inputStreamContext = null;
/* 134 */       if (res instanceof URLResource) {
/* 135 */         inputStreamContext = ((URLResource)res).getURL();
/* 136 */       } else if (res instanceof FileResource) {
/* 137 */         inputStreamContext = ((FileResource)res).getFile().toURI().toURL();
/*     */       } 
/* 139 */       update(inputStreamContext, in, fos, options);
/*     */     } finally {
/*     */       try {
/* 142 */         in.close();
/* 143 */       } catch (IOException e) {
/* 144 */         Message.warn(""failed to close a stream : "" + e.toString());
/*     */       } 
/*     */       try {
/* 147 */         fos.close();
/* 148 */       } catch (IOException e) {
/* 149 */         Message.warn(""failed to close a stream : "" + e.toString());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static class UpdaterHandler
/*     */     extends DefaultHandler
/*     */     implements LexicalHandler
/*     */   {
/*     */     private final ParserSettings settings;
/*     */ 
/*     */     
/*     */     private final PrintWriter out;
/*     */     
/*     */     private final Map resolvedRevisions;
/*     */     
/*     */     private final String status;
/*     */     
/*     */     private final String revision;
/*     */     
/*     */     private final Date pubdate;
/*     */     
/*     */     private final Namespace ns;
/*     */     
/*     */     private final boolean replaceInclude;
/*     */     
/*     */     private boolean inHeader = true;
/*     */     
/*     */     private final List confs;
/*     */     
/*     */     private final URL relativePathCtx;
/*     */     
/*     */     private final UpdateOptions options;
/*     */     
/*     */     private String organisation;
/*     */     
/*     */     private String defaultConfMapping;
/*     */     
/*     */     private Boolean confMappingOverride;
/*     */     
/*     */     private String justOpen;
/*     */     
/*     */     private Stack context;
/*     */     
/*     */     private Stack buffers;
/*     */     
/*     */     private Stack confAttributeBuffers;
/*     */ 
/*     */     
/*     */     public UpdaterHandler(URL relativePathCtx, PrintWriter out, UpdateOptions options) {
/* 201 */       this.organisation = null;
/*     */       
/* 203 */       this.defaultConfMapping = null;
/*     */ 
/*     */ 
/*     */       
/* 207 */       this.confMappingOverride = null;
/*     */ 
/*     */ 
/*     */       
/* 211 */       this.justOpen = null;
/*     */ 
/*     */ 
/*     */       
/* 215 */       this.context = new Stack();
/*     */       
/* 217 */       this.buffers = new Stack();
/*     */       
/* 219 */       this.confAttributeBuffers = new Stack(); this.options = options; this.settings = options.getSettings(); this.out = out; this.resolvedRevisions = options.getResolvedRevisions(); this.status = options.getStatus(); this.revision = options.getRevision(); this.pubdate = options.getPubdate(); this.ns = options.getNamespace(); this.replaceInclude = options.isReplaceInclude(); this.relativePathCtx = relativePathCtx; if (options.getConfsToExclude() != null) {
/*     */         this.confs = Arrays.asList(options.getConfsToExclude());
/*     */       } else {
/*     */         this.confs = Collections.EMPTY_LIST;
/* 223 */       }  } public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException { this.inHeader = false;
/* 224 */       if (this.justOpen != null) {
/* 225 */         write("">"");
/*     */       }
/* 227 */       this.context.push(qName);
/* 228 */       if (""info"".equals(qName)) {
/* 229 */         infoStarted(attributes);
/* 230 */       } else if (this.replaceInclude && ""include"".equals(qName) && this.context.contains(""configurations"")) {
/*     */ 
/*     */ 
/*     */         
/* 234 */         includeStarted(attributes);
/* 235 */       } else if (""ivy-module/dependencies/dependency"".equals(getContext())) {
/* 236 */         startElementInDependency(attributes);
/* 237 */       } else if (""dependencies"".equals(qName)) {
/* 238 */         startDependencies(attributes);
/* 239 */       } else if (""ivy-module/configurations/conf"".equals(getContext())) {
/* 240 */         startElementInConfigurationsConf(qName, attributes);
/* 241 */       } else if (""ivy-module/publications/artifact/conf"".equals(getContext()) || ""ivy-module/dependencies/dependency/conf"".equals(getContext()) || ""ivy-module/dependencies/dependency/artifact/conf"".equals(getContext())) {
/*     */ 
/*     */         
/* 244 */         this.buffers.push(new XmlModuleDescriptorUpdater.ExtendedBuffer(getContext()));
/* 245 */         ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.confAttributeBuffers.peek()).setDefaultPrint(false);
/* 246 */         String confName = substitute(this.settings, attributes.getValue(""name""));
/* 247 */         if (!this.confs.contains(confName)) {
/* 248 */           ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.confAttributeBuffers.peek()).setPrint(true);
/* 249 */           ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.buffers.peek()).setPrint(true);
/* 250 */           write(""<"" + qName);
/* 251 */           for (int i = 0; i < attributes.getLength(); i++) {
/* 252 */             write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */           }
/*     */         }
/*     */       
/* 256 */       } else if (""ivy-module/publications/artifact"".equals(getContext()) || ""ivy-module/dependencies/dependency/artifact"".equals(getContext())) {
/*     */         
/* 258 */         XmlModuleDescriptorUpdater.ExtendedBuffer buffer = new XmlModuleDescriptorUpdater.ExtendedBuffer(getContext());
/* 259 */         this.buffers.push(buffer);
/* 260 */         this.confAttributeBuffers.push(buffer);
/* 261 */         write(""<"" + qName);
/* 262 */         buffer.setDefaultPrint((attributes.getValue(""conf"") == null));
/* 263 */         for (int i = 0; i < attributes.getLength(); i++) {
/* 264 */           String attName = attributes.getQName(i);
/* 265 */           if (""conf"".equals(attName)) {
/* 266 */             String confName = substitute(this.settings, attributes.getValue(""conf""));
/* 267 */             String newConf = removeConfigurationsFromList(confName, this.confs);
/* 268 */             if (newConf.length() > 0) {
/* 269 */               write("" "" + attributes.getQName(i) + ""=\"""" + newConf + ""\"""");
/* 270 */               ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.buffers.peek()).setPrint(true);
/*     */             } 
/*     */           } else {
/* 273 */             write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */           }
/*     */         
/*     */         } 
/*     */       } else {
/*     */         
/* 279 */         write(""<"" + qName);
/* 280 */         for (int i = 0; i < attributes.getLength(); i++) {
/* 281 */           write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */         }
/*     */       } 
/*     */       
/* 285 */       this.justOpen = qName; }
/*     */ 
/*     */ 
/*     */     
/*     */     private void startElementInConfigurationsConf(String qName, Attributes attributes) {
/* 290 */       this.buffers.push(new XmlModuleDescriptorUpdater.ExtendedBuffer(getContext()));
/* 291 */       String confName = substitute(this.settings, attributes.getValue(""name""));
/* 292 */       if (!this.confs.contains(confName)) {
/* 293 */         ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.buffers.peek()).setPrint(true);
/* 294 */         String extend = substitute(this.settings, attributes.getValue(""extends""));
/* 295 */         if (extend != null) {
/* 296 */           StringTokenizer tok = new StringTokenizer(extend, "", "");
/* 297 */           while (tok.hasMoreTokens()) {
/* 298 */             String current = tok.nextToken();
/* 299 */             if (this.confs.contains(current)) {
/* 300 */               throw new IllegalArgumentException(""Cannot exclude a configuration which is extended."");
/*     */             }
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 306 */         write(""<"" + qName);
/* 307 */         for (int i = 0; i < attributes.getLength(); i++) {
/* 308 */           write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     private void startDependencies(Attributes attributes) {
/* 316 */       write(""<dependencies"");
/* 317 */       for (int i = 0; i < attributes.getLength(); i++) {
/* 318 */         String attName = attributes.getQName(i);
/* 319 */         if (""defaultconfmapping"".equals(attName)) {
/* 320 */           String newMapping = removeConfigurationsFromMapping(substitute(this.settings, attributes.getValue(""defaultconfmapping"")), this.confs);
/*     */           
/* 322 */           if (newMapping.length() > 0) {
/* 323 */             write("" "" + attributes.getQName(i) + ""=\"""" + newMapping + ""\"""");
/*     */           }
/*     */         } else {
/* 326 */           write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 331 */       if (this.defaultConfMapping != null && attributes.getValue(""defaultconfmapping"") == null) {
/*     */         
/* 333 */         String newMapping = removeConfigurationsFromMapping(this.defaultConfMapping, this.confs);
/* 334 */         if (newMapping.length() > 0) {
/* 335 */           write("" defaultconfmapping=\"""" + newMapping + ""\"""");
/*     */         }
/*     */       } 
/*     */       
/* 339 */       if (this.confMappingOverride != null && attributes.getValue(""confmappingoverride"") == null)
/*     */       {
/* 341 */         write("" confmappingoverride=\"""" + this.confMappingOverride.toString() + ""\"""");
/*     */       }
/*     */     }
/*     */     
/*     */     private void startElementInDependency(Attributes attributes) {
/* 346 */       XmlModuleDescriptorUpdater.ExtendedBuffer buffer = new XmlModuleDescriptorUpdater.ExtendedBuffer(getContext());
/* 347 */       this.buffers.push(buffer);
/* 348 */       this.confAttributeBuffers.push(buffer);
/* 349 */       buffer.setDefaultPrint((attributes.getValue(""conf"") == null || attributes.getValue(""conf"").trim().length() == 0));
/*     */       
/* 351 */       write(""<dependency"");
/* 352 */       String org = substitute(this.settings, attributes.getValue(""org""));
/* 353 */       org = (org == null) ? this.organisation : org;
/* 354 */       String module = substitute(this.settings, attributes.getValue(""name""));
/* 355 */       String branch = substitute(this.settings, attributes.getValue(""branch""));
/* 356 */       String branchConstraint = substitute(this.settings, attributes.getValue(""branchConstraint""));
/* 357 */       branchConstraint = (branchConstraint == null) ? branch : branchConstraint;
/*     */ 
/*     */       
/* 360 */       if (branch == null) {
/* 361 */         ModuleId mid = ModuleId.newInstance(org, module);
/* 362 */         if (this.ns != null) {
/* 363 */           mid = NameSpaceHelper.transform(mid, this.ns.getToSystemTransformer());
/*     */         }
/* 365 */         for (Iterator iter = this.resolvedRevisions.keySet().iterator(); iter.hasNext(); ) {
/* 366 */           ModuleRevisionId mrid = iter.next();
/* 367 */           if (mrid.getModuleId().equals(mid)) {
/* 368 */             branch = mrid.getBranch();
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/*     */       } 
/* 374 */       String revision = substitute(this.settings, attributes.getValue(""rev""));
/* 375 */       String revisionConstraint = substitute(this.settings, attributes.getValue(""revConstraint""));
/* 376 */       Map extraAttributes = ExtendableItemHelper.getExtraAttributes(this.settings, attributes, XmlModuleDescriptorParser.DEPENDENCY_REGULAR_ATTRIBUTES);
/*     */       
/* 378 */       ModuleRevisionId localMrid = ModuleRevisionId.newInstance(org, module, branch, revision, extraAttributes);
/*     */       
/* 380 */       ModuleRevisionId systemMrid = (this.ns == null) ? localMrid : this.ns.getToSystemTransformer().transform(localMrid);
/*     */ 
/*     */       
/* 383 */       for (int i = 0; i < attributes.getLength(); i++) {
/* 384 */         String attName = attributes.getQName(i);
/* 385 */         if (""rev"".equals(attName)) {
/* 386 */           String rev = (String)this.resolvedRevisions.get(systemMrid);
/* 387 */           if (rev != null) {
/* 388 */             write("" rev=\"""" + rev + ""\"""");
/* 389 */             if (attributes.getIndex(""branchConstraint"") == -1 && branchConstraint != null)
/*     */             {
/* 391 */               write("" branchConstraint=\"""" + branchConstraint + ""\"""");
/*     */             }
/* 393 */             if (attributes.getIndex(""revConstraint"") == -1 && !rev.equals(systemMrid.getRevision()))
/*     */             {
/* 395 */               write("" revConstraint=\"""" + systemMrid.getRevision() + ""\"""");
/*     */             }
/*     */           } else {
/* 398 */             write("" rev=\"""" + systemMrid.getRevision() + ""\"""");
/*     */           } 
/* 400 */         } else if (""revConstraint"".equals(attName)) {
/* 401 */           write("" revConstraint=\"""" + revisionConstraint + ""\"""");
/* 402 */         } else if (""org"".equals(attName)) {
/* 403 */           write("" org=\"""" + systemMrid.getOrganisation() + ""\"""");
/* 404 */         } else if (""name"".equals(attName)) {
/* 405 */           write("" name=\"""" + systemMrid.getName() + ""\"""");
/* 406 */         } else if (""branch"".equals(attName)) {
/* 407 */           write("" branch=\"""" + systemMrid.getBranch() + ""\"""");
/* 408 */         } else if (""branchConstraint"".equals(attName)) {
/* 409 */           write("" branchConstraint=\"""" + branchConstraint + ""\"""");
/* 410 */         } else if (""conf"".equals(attName)) {
/* 411 */           String oldMapping = substitute(this.settings, attributes.getValue(""conf""));
/* 412 */           if (oldMapping.length() > 0) {
/* 413 */             String newMapping = removeConfigurationsFromMapping(oldMapping, this.confs);
/* 414 */             if (newMapping.length() > 0) {
/* 415 */               write("" conf=\"""" + newMapping + ""\"""");
/* 416 */               ((XmlModuleDescriptorUpdater.ExtendedBuffer)this.buffers.peek()).setPrint(true);
/*     */             } 
/*     */           } 
/*     */         } else {
/* 420 */           write("" "" + attName + ""=\"""" + substitute(this.settings, attributes.getValue(attName)) + ""\"""");
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 425 */       if (this.options.isUpdateBranch() && systemMrid.getBranch() != null && attributes.getIndex(""branch"") == -1)
/*     */       {
/*     */         
/* 428 */         write("" branch=\"""" + systemMrid.getBranch() + ""\"""");
/*     */       }
/*     */     }
/*     */     
/*     */     private void includeStarted(Attributes attributes) throws SAXException {
/* 433 */       final XmlModuleDescriptorUpdater.ExtendedBuffer buffer = new XmlModuleDescriptorUpdater.ExtendedBuffer(getContext());
/* 434 */       this.buffers.push(buffer);
/*     */       try {
/*     */         URL url;
/* 437 */         if (this.settings != null) {
/* 438 */           url = this.settings.getRelativeUrlResolver().getURL(this.relativePathCtx, this.settings.substitute(attributes.getValue(""file"")), this.settings.substitute(attributes.getValue(""url"")));
/*     */         
/*     */         }
/*     */         else {
/*     */ 
/*     */           
/* 444 */           String fileName = attributes.getValue(""file"");
/* 445 */           if (fileName == null) {
/* 446 */             String urlStr = attributes.getValue(""url"");
/* 447 */             url = new URL(urlStr);
/*     */           } else {
/* 449 */             url = Checks.checkAbsolute(fileName, ""settings.include"").toURI().toURL();
/*     */           } 
/*     */         } 
/* 452 */         XMLHelper.parse(url, null, new DefaultHandler() {
/*     */               private boolean insideConfigurations = false;
/*     */               private boolean doIndent = false;
/*     */               private final XmlModuleDescriptorUpdater.ExtendedBuffer val$buffer;
/*     */               private final XmlModuleDescriptorUpdater.UpdaterHandler this$0;
/*     */               
/*     */               public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
/* 459 */                 if (""configurations"".equals(qName)) {
/* 460 */                   this.insideConfigurations = true;
/* 461 */                   String defaultconf = XmlModuleDescriptorUpdater.UpdaterHandler.this.substitute(XmlModuleDescriptorUpdater.UpdaterHandler.this.settings, attributes.getValue(""defaultconfmapping""));
/*     */                   
/* 463 */                   if (defaultconf != null) {
/* 464 */                     XmlModuleDescriptorUpdater.UpdaterHandler.this.defaultConfMapping = defaultconf;
/*     */                   }
/* 466 */                   String mappingOverride = XmlModuleDescriptorUpdater.UpdaterHandler.this.substitute(XmlModuleDescriptorUpdater.UpdaterHandler.this.settings, attributes.getValue(""confmappingoverride""));
/*     */                   
/* 468 */                   if (mappingOverride != null) {
/* 469 */                     XmlModuleDescriptorUpdater.UpdaterHandler.this.confMappingOverride = Boolean.valueOf(mappingOverride);
/*     */                   }
/* 471 */                 } else if (""conf"".equals(qName) && this.insideConfigurations) {
/* 472 */                   String confName = XmlModuleDescriptorUpdater.UpdaterHandler.this.substitute(XmlModuleDescriptorUpdater.UpdaterHandler.this.settings, attributes.getValue(""name""));
/* 473 */                   if (!XmlModuleDescriptorUpdater.UpdaterHandler.this.confs.contains(confName)) {
/* 474 */                     buffer.setPrint(true);
/* 475 */                     if (this.doIndent) {
/* 476 */                       XmlModuleDescriptorUpdater.UpdaterHandler.this.write(""/>\n\t\t"");
/*     */                     }
/* 478 */                     String extend = XmlModuleDescriptorUpdater.UpdaterHandler.this.substitute(XmlModuleDescriptorUpdater.UpdaterHandler.this.settings, attributes.getValue(""extends""));
/*     */                     
/* 480 */                     if (extend != null) {
/* 481 */                       StringTokenizer tok = new StringTokenizer(extend, "", "");
/* 482 */                       while (tok.hasMoreTokens()) {
/* 483 */                         String current = tok.nextToken();
/* 484 */                         if (XmlModuleDescriptorUpdater.UpdaterHandler.this.confs.contains(current)) {
/* 485 */                           throw new IllegalArgumentException(""Cannot exclude a configuration which is extended."");
/*     */                         }
/*     */                       } 
/*     */                     } 
/*     */ 
/*     */ 
/*     */                     
/* 492 */                     XmlModuleDescriptorUpdater.UpdaterHandler.this.write(""<"" + qName);
/* 493 */                     for (int i = 0; i < attributes.getLength(); i++) {
/* 494 */                       XmlModuleDescriptorUpdater.UpdaterHandler.this.write("" "" + attributes.getQName(i) + ""=\"""" + XmlModuleDescriptorUpdater.UpdaterHandler.this.substitute(XmlModuleDescriptorUpdater.UpdaterHandler.this.settings, attributes.getValue(i)) + ""\"""");
/*     */                     }
/*     */ 
/*     */                     
/* 498 */                     this.doIndent = true;
/*     */                   } 
/*     */                 } 
/*     */               }
/*     */ 
/*     */               
/*     */               public void endElement(String uri, String localName, String name) throws SAXException {
/* 505 */                 if (""configurations"".equals(name)) {
/* 506 */                   this.insideConfigurations = false;
/*     */                 }
/*     */               }
/*     */             });
/* 510 */       } catch (Exception e) {
/* 511 */         Message.warn(""exception occured while importing configurations: "" + e.getMessage());
/*     */         
/* 513 */         throw new SAXException(e);
/*     */       } 
/*     */     }
/*     */     
/*     */     private void infoStarted(Attributes attributes) {
/* 518 */       this.organisation = substitute(this.settings, attributes.getValue(""organisation""));
/* 519 */       String module = substitute(this.settings, attributes.getValue(""module""));
/* 520 */       String rev = this.revision;
/* 521 */       if (rev == null) {
/* 522 */         rev = substitute(this.settings, attributes.getValue(""revision""));
/*     */       }
/* 524 */       String branch = this.options.getBranch();
/* 525 */       if (branch == null) {
/* 526 */         branch = substitute(this.settings, attributes.getValue(""branch""));
/*     */       }
/* 528 */       ModuleRevisionId localMid = ModuleRevisionId.newInstance(this.organisation, module, branch, rev, ExtendableItemHelper.getExtraAttributes(this.settings, attributes, new String[] { ""organisation"", ""module"", ""revision"", ""status"", ""publication"", ""namespace"" }));
/*     */ 
/*     */ 
/*     */       
/* 532 */       ModuleRevisionId systemMid = (this.ns == null) ? localMid : this.ns.getToSystemTransformer().transform(localMid);
/*     */ 
/*     */       
/* 535 */       write(""<info organisation=\"""" + XMLHelper.escape(systemMid.getOrganisation()) + ""\"" module=\"""" + XMLHelper.escape(systemMid.getName()) + ""\"""");
/*     */       
/* 537 */       if (branch != null) {
/* 538 */         write("" branch=\"""" + XMLHelper.escape(systemMid.getBranch()) + ""\"""");
/*     */       }
/* 540 */       if (systemMid.getRevision() != null) {
/* 541 */         write("" revision=\"""" + XMLHelper.escape(systemMid.getRevision()) + ""\"""");
/*     */       }
/* 543 */       if (this.status != null) {
/* 544 */         write("" status=\"""" + XMLHelper.escape(this.status) + ""\"""");
/*     */       } else {
/* 546 */         write("" status=\"""" + substitute(this.settings, attributes.getValue(""status"")) + ""\"""");
/*     */       } 
/* 548 */       if (this.pubdate != null) {
/* 549 */         write("" publication=\"""" + Ivy.DATE_FORMAT.format(this.pubdate) + ""\"""");
/* 550 */       } else if (attributes.getValue(""publication"") != null) {
/* 551 */         write("" publication=\"""" + substitute(this.settings, attributes.getValue(""publication"")) + ""\"""");
/*     */       } 
/*     */       
/* 554 */       Collection stdAtts = Arrays.asList(new String[] { ""organisation"", ""module"", ""branch"", ""revision"", ""status"", ""publication"", ""namespace"" });
/*     */       
/* 556 */       if (attributes.getValue(""namespace"") != null) {
/* 557 */         write("" namespace=\"""" + substitute(this.settings, attributes.getValue(""namespace"")) + ""\"""");
/*     */       }
/*     */       
/* 560 */       for (int i = 0; i < attributes.getLength(); i++) {
/* 561 */         if (!stdAtts.contains(attributes.getQName(i))) {
/* 562 */           write("" "" + attributes.getQName(i) + ""=\"""" + substitute(this.settings, attributes.getValue(i)) + ""\"""");
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*     */     private void write(String content) {
/* 569 */       if (this.buffers.isEmpty()) {
/* 570 */         this.out.print(content);
/*     */       } else {
/* 572 */         XmlModuleDescriptorUpdater.ExtendedBuffer buffer = this.buffers.peek();
/* 573 */         buffer.getBuffer().append(content);
/*     */       } 
/*     */     }
/*     */     
/*     */     private String getContext() {
/* 578 */       StringBuffer buf = new StringBuffer();
/* 579 */       for (Iterator iter = this.context.iterator(); iter.hasNext(); ) {
/* 580 */         String ctx = iter.next();
/* 581 */         buf.append(ctx).append(""/"");
/*     */       } 
/* 583 */       if (buf.length() > 0) {
/* 584 */         buf.setLength(buf.length() - 1);
/*     */       }
/* 586 */       return buf.toString();
/*     */     }
/*     */     
/*     */     private String substitute(ParserSettings ivy, String value) {
/* 590 */       String result = (ivy == null) ? value : ivy.substitute(value);
/* 591 */       return XMLHelper.escape(result);
/*     */     }
/*     */     
/*     */     private String removeConfigurationsFromMapping(String mapping, List confsToRemove) {
/* 595 */       StringBuffer newMapping = new StringBuffer();
/* 596 */       String mappingSep = """";
/* 597 */       StringTokenizer tokenizer = new StringTokenizer(mapping, "";"");
/* 598 */       while (tokenizer.hasMoreTokens()) {
/* 599 */         String current = tokenizer.nextToken();
/* 600 */         String[] ops = current.split(""->"");
/* 601 */         String[] lhs = ops[0].split("","");
/* 602 */         List confsToWrite = new ArrayList();
/* 603 */         for (int j = 0; j < lhs.length; j++) {
/* 604 */           if (!this.confs.contains(lhs[j].trim())) {
/* 605 */             confsToWrite.add(lhs[j]);
/*     */           }
/*     */         } 
/* 608 */         if (!confsToWrite.isEmpty()) {
/* 609 */           newMapping.append(mappingSep);
/*     */           
/* 611 */           String sep = """";
/* 612 */           for (Iterator it = confsToWrite.iterator(); it.hasNext(); ) {
/* 613 */             newMapping.append(sep);
/* 614 */             newMapping.append(it.next());
/* 615 */             sep = "","";
/*     */           } 
/* 617 */           if (ops.length == 2) {
/* 618 */             newMapping.append(""->"");
/* 619 */             newMapping.append(ops[1]);
/*     */           } 
/* 621 */           mappingSep = "";"";
/*     */         } 
/*     */       } 
/*     */       
/* 625 */       return newMapping.toString();
/*     */     }
/*     */     
/*     */     private String removeConfigurationsFromList(String list, List confsToRemove) {
/* 629 */       StringBuffer newList = new StringBuffer();
/* 630 */       String listSep = """";
/* 631 */       StringTokenizer tokenizer = new StringTokenizer(list, "","");
/* 632 */       while (tokenizer.hasMoreTokens()) {
/* 633 */         String current = tokenizer.nextToken();
/* 634 */         if (!confsToRemove.contains(current.trim())) {
/* 635 */           newList.append(listSep);
/* 636 */           newList.append(current);
/* 637 */           listSep = "","";
/*     */         } 
/*     */       } 
/*     */       
/* 641 */       return newList.toString();
/*     */     }
/*     */     
/*     */     public void characters(char[] ch, int start, int length) throws SAXException {
/* 645 */       if (this.justOpen != null) {
/* 646 */         write("">"");
/* 647 */         this.justOpen = null;
/*     */       } 
/* 649 */       write(String.valueOf(ch, start, length));
/*     */     }
/*     */     
/*     */     public void endElement(String uri, String localName, String qName) throws SAXException {
/* 653 */       if (qName.equals(this.justOpen)) {
/* 654 */         write(""/>"");
/*     */       } else {
/* 656 */         write(""</"" + qName + "">"");
/*     */       } 
/*     */       
/* 659 */       if (!this.buffers.isEmpty()) {
/* 660 */         XmlModuleDescriptorUpdater.ExtendedBuffer buffer = this.buffers.peek();
/* 661 */         if (buffer.getContext().equals(getContext())) {
/* 662 */           this.buffers.pop();
/* 663 */           if (buffer.isPrint()) {
/* 664 */             write(buffer.getBuffer().toString());
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 669 */       if (!this.confAttributeBuffers.isEmpty()) {
/* 670 */         XmlModuleDescriptorUpdater.ExtendedBuffer buffer = this.confAttributeBuffers.peek();
/* 671 */         if (buffer.getContext().equals(getContext())) {
/* 672 */           this.confAttributeBuffers.pop();
/*     */         }
/*     */       } 
/*     */       
/* 676 */       this.justOpen = null;
/* 677 */       this.context.pop();
/*     */     }
/*     */     
/*     */     public void endDocument() throws SAXException {
/* 681 */       this.out.print(XmlModuleDescriptorUpdater.LINE_SEPARATOR);
/* 682 */       this.out.flush();
/* 683 */       this.out.close();
/*     */     }
/*     */ 
/*     */     
/* 687 */     public void warning(SAXParseException e) throws SAXException { throw e; }
/*     */ 
/*     */ 
/*     */     
/* 691 */     public void error(SAXParseException e) throws SAXException { throw e; }
/*     */ 
/*     */ 
/*     */     
/* 695 */     public void fatalError(SAXParseException e) throws SAXException { throw e; }
/*     */ 
/*     */     
/*     */     public void endCDATA() throws SAXException {}
/*     */ 
/*     */     
/*     */     public void endDTD() throws SAXException {}
/*     */ 
/*     */     
/*     */     public void startCDATA() throws SAXException {}
/*     */ 
/*     */     
/*     */     public void comment(char[] ch, int start, int length) throws SAXException {
/* 708 */       if (this.justOpen != null) {
/* 709 */         write("">"");
/* 710 */         this.justOpen = null;
/*     */       } 
/* 712 */       if (!this.inHeader) {
/* 713 */         StringBuffer comment = new StringBuffer();
/* 714 */         comment.append(ch, start, length);
/* 715 */         write(""<!--"");
/* 716 */         write(comment.toString());
/* 717 */         write(""-->"");
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void endEntity(String name) throws SAXException {}
/*     */ 
/*     */ 
/*     */     
/*     */     public void startEntity(String name) throws SAXException {}
/*     */ 
/*     */     
/*     */     public void startDTD(String name, String publicId, String systemId) throws SAXException {}
/*     */   }
/*     */ 
/*     */   
/*     */   public static void update(URL inStreamCtx, InputStream inStream, OutputStream outStream, UpdateOptions options) throws IOException, SAXException {
/* 735 */     PrintWriter out = new PrintWriter(new OutputStreamWriter(outStream, ""UTF-8""));
/* 736 */     BufferedInputStream in = new BufferedInputStream(inStream);
/*     */     
/* 738 */     in.mark(10000);
/* 739 */     copyHeader(in, out);
/* 740 */     in.reset();
/*     */     
/*     */     try {
/* 743 */       UpdaterHandler updaterHandler = new UpdaterHandler(inStreamCtx, out, options);
/* 744 */       InputSource inSrc = new InputSource(in);
/* 745 */       if (inStreamCtx != null) {
/* 746 */         inSrc.setSystemId(inStreamCtx.toExternalForm());
/*     */       }
/* 748 */       XMLHelper.parse(inSrc, null, updaterHandler, updaterHandler);
/* 749 */     } catch (ParserConfigurationException e) {
/* 750 */       IllegalStateException ise = new IllegalStateException(""impossible to update Ivy files: parser problem"");
/*     */       
/* 752 */       ise.initCause(e);
/* 753 */       throw ise;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void copyHeader(InputStream in, PrintWriter out) throws IOException {
/* 768 */     BufferedReader r = new BufferedReader(new InputStreamReader(in));
/* 769 */     String line = r.readLine();
/* 770 */     if (line != null && line.startsWith(""<?xml "")) {
/* 771 */       out.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/* 772 */       line = line.substring(line.indexOf("">"") + 1, line.length());
/*     */     } 
/* 774 */     for (; line != null; line = r.readLine()) {
/* 775 */       int index = line.indexOf(""<ivy-module"");
/* 776 */       if (index == -1) {
/* 777 */         out.write(line);
/* 778 */         out.write(LINE_SEPARATOR);
/*     */       } else {
/* 780 */         out.write(line.substring(0, index));
/*     */         break;
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private static class ExtendedBuffer
/*     */   {
/* 788 */     private String context = null;
/*     */     
/* 790 */     private Boolean print = null;
/*     */     
/*     */     private boolean defaultPrint = false;
/*     */     
/* 794 */     private StringBuffer buffer = new StringBuffer();
/*     */ 
/*     */     
/* 797 */     ExtendedBuffer(String context) { this.context = context; }
/*     */ 
/*     */     
/*     */     boolean isPrint() {
/* 801 */       if (this.print == null) {
/* 802 */         return this.defaultPrint;
/*     */       }
/* 804 */       return this.print.booleanValue();
/*     */     }
/*     */ 
/*     */     
/* 808 */     void setPrint(boolean print) { this.print = Boolean.valueOf(print); }
/*     */ 
/*     */ 
/*     */     
/* 812 */     void setDefaultPrint(boolean print) { this.defaultPrint = print; }
/*     */ 
/*     */ 
/*     */     
/* 816 */     StringBuffer getBuffer() { return this.buffer; }
/*     */ 
/*     */ 
/*     */     
/* 820 */     String getContext() { return this.context; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\xml\XmlModuleDescriptorUpdater.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter,"/*     */ package org.apache.ivy.plugins.parser.xml;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Arrays;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.Configuration;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptorMediator;
/*     */ import org.apache.ivy.core.module.descriptor.ExcludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.IncludeRule;
/*     */ import org.apache.ivy.core.module.descriptor.License;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.OverrideDependencyDescriptorMediator;
/*     */ import org.apache.ivy.plugins.matcher.MapMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.apache.ivy.util.extendable.ExtendableItem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class XmlModuleDescriptorWriter
/*     */ {
/*  58 */   public static void write(ModuleDescriptor md, File output) throws IOException { write(md, null, output); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static void write(ModuleDescriptor md, String licenseHeader, File output) throws IOException {
/*  63 */     if (output.getParentFile() != null) {
/*  64 */       output.getParentFile().mkdirs();
/*     */     }
/*  66 */     PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output), ""UTF-8""));
/*     */     
/*     */     try {
/*  69 */       out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/*  70 */       if (licenseHeader != null) {
/*  71 */         out.print(licenseHeader);
/*     */       }
/*  73 */       StringBuffer xmlNamespace = new StringBuffer();
/*  74 */       Map namespaces = md.getExtraAttributesNamespaces();
/*  75 */       for (Iterator iter = namespaces.entrySet().iterator(); iter.hasNext(); ) {
/*  76 */         Map.Entry ns = iter.next();
/*  77 */         xmlNamespace.append("" xmlns:"").append(ns.getKey()).append(""=\"""").append(ns.getValue()).append(""\"""");
/*     */       } 
/*     */       
/*  80 */       out.println(""<ivy-module version=\""1.0\"""" + xmlNamespace + "">"");
/*  81 */       printInfoTag(md, out);
/*  82 */       printConfigurations(md, out);
/*  83 */       printPublications(md, out);
/*  84 */       printDependencies(md, out);
/*  85 */       out.println(""</ivy-module>"");
/*     */     } finally {
/*  87 */       out.close();
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void printDependencies(ModuleDescriptor md, PrintWriter out) {
/*  92 */     DependencyDescriptor[] dds = md.getDependencies();
/*  93 */     if (dds.length > 0) {
/*  94 */       out.println(""\t<dependencies>"");
/*  95 */       for (int i = 0; i < dds.length; i++) {
/*  96 */         out.print(""\t\t<dependency"");
/*  97 */         out.print("" org=\"""" + XMLHelper.escape(dds[i].getDependencyRevisionId().getOrganisation()) + ""\"""");
/*     */         
/*  99 */         out.print("" name=\"""" + XMLHelper.escape(dds[i].getDependencyRevisionId().getName()) + ""\"""");
/*     */         
/* 101 */         if (dds[i].getDependencyRevisionId().getBranch() != null) {
/* 102 */           out.print("" branch=\"""" + XMLHelper.escape(dds[i].getDependencyRevisionId().getBranch()) + ""\"""");
/*     */         }
/*     */         
/* 105 */         out.print("" rev=\"""" + XMLHelper.escape(dds[i].getDependencyRevisionId().getRevision()) + ""\"""");
/*     */         
/* 107 */         if (!dds[i].getDynamicConstraintDependencyRevisionId().equals(dds[i].getDependencyRevisionId())) {
/*     */           
/* 109 */           if (dds[i].getDynamicConstraintDependencyRevisionId().getBranch() != null) {
/* 110 */             out.print("" branchConstraint=\"""" + XMLHelper.escape(dds[i].getDynamicConstraintDependencyRevisionId().getBranch()) + ""\"""");
/*     */           }
/*     */           
/* 113 */           out.print("" revConstraint=\"""" + XMLHelper.escape(dds[i].getDynamicConstraintDependencyRevisionId().getRevision()) + ""\"""");
/*     */         } 
/*     */         
/* 116 */         if (dds[i].isForce()) {
/* 117 */           out.print("" force=\"""" + dds[i].isForce() + ""\"""");
/*     */         }
/* 119 */         if (dds[i].isChanging()) {
/* 120 */           out.print("" changing=\"""" + dds[i].isChanging() + ""\"""");
/*     */         }
/* 122 */         if (!dds[i].isTransitive()) {
/* 123 */           out.print("" transitive=\"""" + dds[i].isTransitive() + ""\"""");
/*     */         }
/* 125 */         out.print("" conf=\"""");
/* 126 */         String[] modConfs = dds[i].getModuleConfigurations();
/* 127 */         for (int j = 0; j < modConfs.length; j++) {
/* 128 */           String[] depConfs = dds[i].getDependencyConfigurations(modConfs[j]);
/* 129 */           out.print(XMLHelper.escape(modConfs[j]) + ""->"");
/* 130 */           for (int k = 0; k < depConfs.length; k++) {
/* 131 */             out.print(XMLHelper.escape(depConfs[k]));
/* 132 */             if (k + 1 < depConfs.length) {
/* 133 */               out.print("","");
/*     */             }
/*     */           } 
/* 136 */           if (j + 1 < modConfs.length) {
/* 137 */             out.print("";"");
/*     */           }
/*     */         } 
/* 140 */         out.print(""\"""");
/*     */         
/* 142 */         printExtraAttributes((ExtendableItem)dds[i], out, "" "");
/*     */         
/* 144 */         DependencyArtifactDescriptor[] depArtifacts = dds[i].getAllDependencyArtifacts();
/* 145 */         if (depArtifacts.length > 0) {
/* 146 */           out.println("">"");
/*     */         }
/* 148 */         printDependencyArtefacts(md, out, depArtifacts);
/*     */         
/* 150 */         IncludeRule[] includes = dds[i].getAllIncludeRules();
/* 151 */         if (includes.length > 0 && depArtifacts.length == 0) {
/* 152 */           out.println("">"");
/*     */         }
/* 154 */         printDependencyIncludeRules(md, out, includes);
/*     */         
/* 156 */         ExcludeRule[] excludes = dds[i].getAllExcludeRules();
/* 157 */         if (excludes.length > 0 && includes.length == 0 && depArtifacts.length == 0) {
/* 158 */           out.println("">"");
/*     */         }
/* 160 */         printDependencyExcludeRules(md, out, excludes);
/* 161 */         if (includes.length + excludes.length + depArtifacts.length == 0) {
/* 162 */           out.println(""/>"");
/*     */         } else {
/* 164 */           out.println(""\t\t</dependency>"");
/*     */         } 
/*     */       } 
/* 167 */       printAllExcludes(md, out);
/* 168 */       printAllMediators(md, out);
/* 169 */       out.println(""\t</dependencies>"");
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void printAllMediators(ModuleDescriptor md, PrintWriter out) {
/* 174 */     Map mediators = md.getAllDependencyDescriptorMediators().getAllRules();
/*     */ 
/*     */     
/* 177 */     for (Iterator iterator = mediators.entrySet().iterator(); iterator.hasNext(); ) {
/* 178 */       Map.Entry mediatorRule = iterator.next();
/* 179 */       MapMatcher matcher = (MapMatcher)mediatorRule.getKey();
/* 180 */       DependencyDescriptorMediator mediator = (DependencyDescriptorMediator)mediatorRule.getValue();
/*     */ 
/*     */       
/* 183 */       if (mediator instanceof OverrideDependencyDescriptorMediator) {
/* 184 */         OverrideDependencyDescriptorMediator oddm = (OverrideDependencyDescriptorMediator)mediator;
/*     */ 
/*     */         
/* 187 */         out.print(""\t\t<override"");
/* 188 */         out.print("" org=\"""" + XMLHelper.escape((String)matcher.getAttributes().get(""organisation"")) + ""\"""");
/*     */ 
/*     */         
/* 191 */         out.print("" module=\"""" + XMLHelper.escape((String)matcher.getAttributes().get(""module"")) + ""\"""");
/*     */ 
/*     */         
/* 194 */         out.print("" matcher=\"""" + XMLHelper.escape(matcher.getPatternMatcher().getName()) + ""\"""");
/*     */ 
/*     */         
/* 197 */         if (oddm.getBranch() != null) {
/* 198 */           out.print("" branch=\"""" + XMLHelper.escape(oddm.getBranch()) + ""\"""");
/*     */         }
/* 200 */         if (oddm.getVersion() != null) {
/* 201 */           out.print("" rev=\"""" + XMLHelper.escape(oddm.getVersion()) + ""\"""");
/*     */         }
/* 203 */         out.println(""/>""); continue;
/*     */       } 
/* 205 */       Message.verbose(""ignoring unhandled DependencyDescriptorMediator: "" + mediator.getClass());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printAllExcludes(ModuleDescriptor md, PrintWriter out) {
/* 212 */     ExcludeRule[] excludes = md.getAllExcludeRules();
/* 213 */     if (excludes.length > 0) {
/* 214 */       for (int j = 0; j < excludes.length; j++) {
/* 215 */         out.print(""\t\t<exclude"");
/* 216 */         out.print("" org=\"""" + XMLHelper.escape(excludes[j].getId().getModuleId().getOrganisation()) + ""\"""");
/*     */ 
/*     */         
/* 219 */         out.print("" module=\"""" + XMLHelper.escape(excludes[j].getId().getModuleId().getName()) + ""\"""");
/*     */ 
/*     */         
/* 222 */         out.print("" artifact=\"""" + XMLHelper.escape(excludes[j].getId().getName()) + ""\"""");
/* 223 */         out.print("" type=\"""" + XMLHelper.escape(excludes[j].getId().getType()) + ""\"""");
/* 224 */         out.print("" ext=\"""" + XMLHelper.escape(excludes[j].getId().getExt()) + ""\"""");
/* 225 */         String[] ruleConfs = excludes[j].getConfigurations();
/* 226 */         if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
/*     */           
/* 228 */           out.print("" conf=\"""");
/* 229 */           for (int k = 0; k < ruleConfs.length; k++) {
/* 230 */             out.print(XMLHelper.escape(ruleConfs[k]));
/* 231 */             if (k + 1 < ruleConfs.length) {
/* 232 */               out.print("","");
/*     */             }
/*     */           } 
/* 235 */           out.print(""\"""");
/*     */         } 
/* 237 */         out.print("" matcher=\"""" + XMLHelper.escape(excludes[j].getMatcher().getName()) + ""\"""");
/*     */         
/* 239 */         out.println(""/>"");
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static void printDependencyExcludeRules(ModuleDescriptor md, PrintWriter out, ExcludeRule[] excludes) {
/* 246 */     if (excludes.length > 0) {
/* 247 */       for (int j = 0; j < excludes.length; j++) {
/* 248 */         out.print(""\t\t\t<exclude"");
/* 249 */         out.print("" org=\"""" + XMLHelper.escape(excludes[j].getId().getModuleId().getOrganisation()) + ""\"""");
/*     */ 
/*     */         
/* 252 */         out.print("" module=\"""" + XMLHelper.escape(excludes[j].getId().getModuleId().getName()) + ""\"""");
/*     */ 
/*     */         
/* 255 */         out.print("" name=\"""" + XMLHelper.escape(excludes[j].getId().getName()) + ""\"""");
/* 256 */         out.print("" type=\"""" + XMLHelper.escape(excludes[j].getId().getType()) + ""\"""");
/* 257 */         out.print("" ext=\"""" + XMLHelper.escape(excludes[j].getId().getExt()) + ""\"""");
/* 258 */         String[] ruleConfs = excludes[j].getConfigurations();
/* 259 */         if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
/*     */           
/* 261 */           out.print("" conf=\"""");
/* 262 */           for (int k = 0; k < ruleConfs.length; k++) {
/* 263 */             out.print(XMLHelper.escape(ruleConfs[k]));
/* 264 */             if (k + 1 < ruleConfs.length) {
/* 265 */               out.print("","");
/*     */             }
/*     */           } 
/* 268 */           out.print(""\"""");
/*     */         } 
/* 270 */         out.print("" matcher=\"""" + XMLHelper.escape(excludes[j].getMatcher().getName()) + ""\"""");
/*     */         
/* 272 */         out.println(""/>"");
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static void printDependencyIncludeRules(ModuleDescriptor md, PrintWriter out, IncludeRule[] includes) {
/* 279 */     if (includes.length > 0) {
/* 280 */       for (int j = 0; j < includes.length; j++) {
/* 281 */         out.print(""\t\t\t<include"");
/* 282 */         out.print("" name=\"""" + XMLHelper.escape(includes[j].getId().getName()) + ""\"""");
/* 283 */         out.print("" type=\"""" + XMLHelper.escape(includes[j].getId().getType()) + ""\"""");
/* 284 */         out.print("" ext=\"""" + XMLHelper.escape(includes[j].getId().getExt()) + ""\"""");
/* 285 */         String[] ruleConfs = includes[j].getConfigurations();
/* 286 */         if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
/*     */           
/* 288 */           out.print("" conf=\"""");
/* 289 */           for (int k = 0; k < ruleConfs.length; k++) {
/* 290 */             out.print(XMLHelper.escape(ruleConfs[k]));
/* 291 */             if (k + 1 < ruleConfs.length) {
/* 292 */               out.print("","");
/*     */             }
/*     */           } 
/* 295 */           out.print(""\"""");
/*     */         } 
/* 297 */         out.print("" matcher=\"""" + XMLHelper.escape(includes[j].getMatcher().getName()) + ""\"""");
/*     */         
/* 299 */         out.println(""/>"");
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static void printDependencyArtefacts(ModuleDescriptor md, PrintWriter out, DependencyArtifactDescriptor[] depArtifacts) {
/* 306 */     if (depArtifacts.length > 0) {
/* 307 */       for (int j = 0; j < depArtifacts.length; j++) {
/* 308 */         out.print(""\t\t\t<artifact"");
/* 309 */         out.print("" name=\"""" + XMLHelper.escape(depArtifacts[j].getName()) + ""\"""");
/* 310 */         out.print("" type=\"""" + XMLHelper.escape(depArtifacts[j].getType()) + ""\"""");
/* 311 */         out.print("" ext=\"""" + XMLHelper.escape(depArtifacts[j].getExt()) + ""\"""");
/* 312 */         String[] dadconfs = depArtifacts[j].getConfigurations();
/* 313 */         if (!Arrays.asList(dadconfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
/*     */           
/* 315 */           out.print("" conf=\"""");
/* 316 */           for (int k = 0; k < dadconfs.length; k++) {
/* 317 */             out.print(XMLHelper.escape(dadconfs[k]));
/* 318 */             if (k + 1 < dadconfs.length) {
/* 319 */               out.print("","");
/*     */             }
/*     */           } 
/* 322 */           out.print(""\"""");
/*     */         } 
/* 324 */         printExtraAttributes((ExtendableItem)depArtifacts[j], out, "" "");
/* 325 */         out.println(""/>"");
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 339 */   private static void printExtraAttributes(ExtendableItem item, PrintWriter out, String prefix) { printExtraAttributes(item.getQualifiedExtraAttributes(), out, prefix); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printExtraAttributes(Map extra, PrintWriter out, String prefix) {
/* 351 */     if (extra == null) {
/*     */       return;
/*     */     }
/*     */     
/* 355 */     String delim = prefix;
/* 356 */     for (Iterator iter = extra.entrySet().iterator(); iter.hasNext(); ) {
/* 357 */       Map.Entry entry = iter.next();
/* 358 */       out.print(delim + entry.getKey() + ""=\"""" + XMLHelper.escape(entry.getValue().toString()) + ""\"""");
/*     */       
/* 360 */       delim = "" "";
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void printPublications(ModuleDescriptor md, PrintWriter out) {
/* 365 */     out.println(""\t<publications>"");
/* 366 */     Artifact[] artifacts = md.getAllArtifacts();
/* 367 */     for (int i = 0; i < artifacts.length; i++) {
/* 368 */       out.print(""\t\t<artifact"");
/* 369 */       out.print("" name=\"""" + XMLHelper.escape(artifacts[i].getName()) + ""\"""");
/* 370 */       out.print("" type=\"""" + XMLHelper.escape(artifacts[i].getType()) + ""\"""");
/* 371 */       out.print("" ext=\"""" + XMLHelper.escape(artifacts[i].getExt()) + ""\"""");
/* 372 */       out.print("" conf=\"""" + XMLHelper.escape(getConfs(md, artifacts[i])) + ""\"""");
/* 373 */       printExtraAttributes((ExtendableItem)artifacts[i], out, "" "");
/* 374 */       out.println(""/>"");
/*     */     } 
/* 376 */     out.println(""\t</publications>"");
/*     */   }
/*     */   
/*     */   private static void printConfigurations(ModuleDescriptor md, PrintWriter out) {
/* 380 */     Configuration[] confs = md.getConfigurations();
/* 381 */     if (confs.length > 0) {
/* 382 */       out.println(""\t<configurations>"");
/* 383 */       for (int i = 0; i < confs.length; i++) {
/* 384 */         out.print(""\t\t<conf"");
/* 385 */         out.print("" name=\"""" + XMLHelper.escape(confs[i].getName()) + ""\"""");
/* 386 */         out.print("" visibility=\"""" + XMLHelper.escape(confs[i].getVisibility().toString()) + ""\"""");
/*     */         
/* 388 */         if (confs[i].getDescription() != null) {
/* 389 */           out.print("" description=\"""" + XMLHelper.escape(confs[i].getDescription()) + ""\"""");
/*     */         }
/*     */         
/* 392 */         String[] exts = confs[i].getExtends();
/* 393 */         if (exts.length > 0) {
/* 394 */           out.print("" extends=\"""");
/* 395 */           for (int j = 0; j < exts.length; j++) {
/* 396 */             out.print(XMLHelper.escape(exts[j]));
/* 397 */             if (j + 1 < exts.length) {
/* 398 */               out.print("","");
/*     */             }
/*     */           } 
/* 401 */           out.print(""\"""");
/*     */         } 
/* 403 */         if (confs[i].getDeprecated() != null) {
/* 404 */           out.print("" deprecated=\"""" + XMLHelper.escape(confs[i].getDeprecated()) + ""\"""");
/*     */         }
/* 406 */         printExtraAttributes((ExtendableItem)confs[i], out, "" "");
/* 407 */         out.println(""/>"");
/*     */       } 
/* 409 */       out.println(""\t</configurations>"");
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void printInfoTag(ModuleDescriptor md, PrintWriter out) {
/* 414 */     out.println(""\t<info organisation=\"""" + XMLHelper.escape(md.getModuleRevisionId().getOrganisation()) + ""\"""");
/*     */ 
/*     */     
/* 417 */     out.println(""\t\tmodule=\"""" + XMLHelper.escape(md.getModuleRevisionId().getName()) + ""\"""");
/* 418 */     String branch = md.getResolvedModuleRevisionId().getBranch();
/* 419 */     if (branch != null) {
/* 420 */       out.println(""\t\tbranch=\"""" + XMLHelper.escape(branch) + ""\"""");
/*     */     }
/* 422 */     String revision = md.getResolvedModuleRevisionId().getRevision();
/* 423 */     if (revision != null) {
/* 424 */       out.println(""\t\trevision=\"""" + XMLHelper.escape(revision) + ""\"""");
/*     */     }
/* 426 */     out.println(""\t\tstatus=\"""" + XMLHelper.escape(md.getStatus()) + ""\"""");
/* 427 */     out.println(""\t\tpublication=\"""" + Ivy.DATE_FORMAT.format(md.getResolvedPublicationDate()) + ""\"""");
/*     */     
/* 429 */     if (md.isDefault()) {
/* 430 */       out.println(""\t\tdefault=\""true\"""");
/*     */     }
/* 432 */     if (md instanceof DefaultModuleDescriptor) {
/* 433 */       DefaultModuleDescriptor dmd = (DefaultModuleDescriptor)md;
/* 434 */       if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals(""system"")) {
/* 435 */         out.println(""\t\tnamespace=\"""" + XMLHelper.escape(dmd.getNamespace().getName()) + ""\"""");
/*     */       }
/*     */     } 
/*     */     
/* 439 */     if (!md.getExtraAttributes().isEmpty()) {
/* 440 */       printExtraAttributes((ExtendableItem)md, out, ""\t\t"");
/* 441 */       out.println();
/*     */     } 
/* 443 */     if (requireInnerInfoElement(md)) {
/* 444 */       out.println(""\t>"");
/* 445 */       License[] licenses = md.getLicenses();
/* 446 */       for (int i = 0; i < licenses.length; i++) {
/* 447 */         License license = licenses[i];
/* 448 */         out.print(""\t\t<license "");
/* 449 */         if (license.getName() != null) {
/* 450 */           out.print(""name=\"""" + XMLHelper.escape(license.getName()) + ""\"" "");
/*     */         }
/* 452 */         if (license.getUrl() != null) {
/* 453 */           out.print(""url=\"""" + XMLHelper.escape(license.getUrl()) + ""\"" "");
/*     */         }
/* 455 */         out.println(""/>"");
/*     */       } 
/* 457 */       if (md.getHomePage() != null || md.getDescription() != null) {
/* 458 */         out.print(""\t\t<description"");
/* 459 */         if (md.getHomePage() != null) {
/* 460 */           out.print("" homepage=\"""" + XMLHelper.escape(md.getHomePage()) + ""\"""");
/*     */         }
/* 462 */         if (md.getDescription() != null && md.getDescription().trim().length() > 0) {
/* 463 */           out.println("">"");
/* 464 */           out.println(""\t\t"" + XMLHelper.escape(md.getDescription()));
/* 465 */           out.println(""\t\t</description>"");
/*     */         } else {
/* 467 */           out.println("" />"");
/*     */         } 
/*     */       } 
/* 470 */       for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) {
/* 471 */         Map.Entry extraDescr = it.next();
/* 472 */         if (extraDescr.getValue() == null || ((String)extraDescr.getValue()).length() == 0) {
/*     */           continue;
/*     */         }
/*     */         
/* 476 */         out.print(""\t\t<"");
/* 477 */         out.print(extraDescr.getKey());
/* 478 */         out.print("">"");
/* 479 */         out.print(XMLHelper.escape((String)extraDescr.getValue()));
/* 480 */         out.print(""</"");
/* 481 */         out.print(extraDescr.getKey());
/* 482 */         out.println("">"");
/*     */       } 
/* 484 */       out.println(""\t</info>"");
/*     */     } else {
/* 486 */       out.println(""\t/>"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 492 */   private static boolean requireInnerInfoElement(ModuleDescriptor md) { return (md.getExtraInfo().size() > 0 || md.getHomePage() != null || (md.getDescription() != null && md.getDescription().trim().length() > 0) || (md.getLicenses()).length > 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getConfs(ModuleDescriptor md, Artifact artifact) {
/* 499 */     StringBuffer ret = new StringBuffer();
/*     */     
/* 501 */     String[] confs = md.getConfigurationsNames();
/* 502 */     for (int i = 0; i < confs.length; i++) {
/* 503 */       if (Arrays.asList(md.getArtifacts(confs[i])).contains(artifact)) {
/* 504 */         ret.append(confs[i]).append("","");
/*     */       }
/*     */     } 
/* 507 */     if (ret.length() > 0) {
/* 508 */       ret.setLength(ret.length() - 1);
/*     */     }
/* 510 */     return ret.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\parser\xml\XmlModuleDescriptorWriter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.report.LogReportOutputter,"/*     */ package org.apache.ivy.plugins.report;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*     */ import org.apache.ivy.core.report.ResolveReport;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.IvyNodeEviction;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogReportOutputter
/*     */   implements ReportOutputter
/*     */ {
/*  44 */   public String getName() { return ""console""; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void output(ResolveReport report, ResolutionCacheManager cacheMgr, ResolveOptions options) throws IOException {
/*  50 */     IvySettings settings = IvyContext.getContext().getSettings();
/*     */     
/*  52 */     if (settings.logModulesInUse() && ""default"".equals(options.getLog())) {
/*  53 */       Message.info(""\t:: modules in use:"");
/*  54 */       List dependencies = new ArrayList(report.getDependencies());
/*  55 */       Collections.sort(dependencies);
/*  56 */       if (dependencies.size() > 0) {
/*  57 */         String[] confs = report.getConfigurations();
/*  58 */         for (int i = 0; i < dependencies.size(); i++) {
/*  59 */           IvyNode node = (IvyNode)dependencies.get(i);
/*  60 */           if (!node.isCompletelyEvicted() && !node.hasProblem()) {
/*     */ 
/*     */             
/*  63 */             List nodeConfs = new ArrayList(confs.length);
/*  64 */             for (int j = 0; j < confs.length; j++) {
/*  65 */               String conf = confs[j];
/*  66 */               if (report.getConfigurationReport(conf).getModuleRevisionIds().contains(node.getResolvedId()))
/*     */               {
/*  68 */                 nodeConfs.add(conf);
/*     */               }
/*     */             } 
/*  71 */             Message.info(""\t"" + node + "" from "" + node.getModuleRevision().getResolver().getName() + "" in "" + nodeConfs);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*  79 */     IvyNode[] evicted = report.getEvictedNodes();
/*     */     
/*  81 */     if (evicted.length > 0 && ""default"".equals(options.getLog())) {
/*  82 */       Message.info(""\t:: evicted modules:"");
/*  83 */       for (int i = 0; i < evicted.length; i++) {
/*  84 */         Collection allEvictingNodes = evicted[i].getAllEvictingNodesDetails();
/*  85 */         if (allEvictingNodes == null) {
/*  86 */           Message.info(""\t"" + evicted[i] + "" transitively in "" + Arrays.asList(evicted[i].getEvictedConfs()));
/*     */         }
/*  88 */         else if (allEvictingNodes.isEmpty()) {
/*  89 */           Message.info(""\t"" + evicted[i] + "" by [] ("" + evicted[i].getAllEvictingConflictManagers() + "") in "" + Arrays.asList(evicted[i].getEvictedConfs()));
/*     */         }
/*     */         else {
/*     */           
/*  93 */           Message.info(""\t"" + evicted[i] + "" by "" + allEvictingNodes + "" in "" + Arrays.asList(evicted[i].getEvictedConfs()));
/*     */         } 
/*     */         
/*  96 */         String[] confs = evicted[i].getEvictedConfs();
/*  97 */         for (int j = 0; j < confs.length; j++) {
/*  98 */           IvyNodeEviction.EvictionData evictedData = evicted[i].getEvictedData(confs[j]);
/*  99 */           if (evictedData.getParent() != null) {
/* 100 */             Message.verbose(""\t  in "" + evictedData.getParent() + "" with "" + evictedData.getConflictManager());
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 107 */     if (""default"".equals(options.getLog())) {
/*     */       
/* 109 */       char[] sep = new char[69];
/* 110 */       Arrays.fill(sep, '-');
/* 111 */       Message.rawinfo(""\t"" + new String(sep));
/* 112 */       StringBuffer line = new StringBuffer(""\t"");
/* 113 */       append(line, """", 18);
/* 114 */       append(line, ""modules"", 31);
/* 115 */       line.append(""|"");
/* 116 */       append(line, ""artifacts"", 15);
/* 117 */       line.append(""|"");
/* 118 */       Message.rawinfo(line.toString());
/*     */       
/* 120 */       line = new StringBuffer(""\t"");
/* 121 */       append(line, ""conf"", 18);
/* 122 */       append(line, ""number"", 7);
/* 123 */       append(line, ""search"", 7);
/* 124 */       append(line, ""dwnlded"", 7);
/* 125 */       append(line, ""evicted"", 7);
/* 126 */       line.append(""|"");
/* 127 */       append(line, ""number"", 7);
/* 128 */       append(line, ""dwnlded"", 7);
/*     */       
/* 130 */       line.append(""|"");
/* 131 */       Message.rawinfo(line.toString());
/* 132 */       Message.rawinfo(""\t"" + new String(sep));
/*     */       
/* 134 */       String[] confs = report.getConfigurations();
/* 135 */       for (int i = 0; i < confs.length; i++) {
/* 136 */         output(report.getConfigurationReport(confs[i]));
/*     */       }
/* 138 */       Message.rawinfo(""\t"" + new String(sep));
/*     */     } 
/*     */     
/* 141 */     IvyNode[] unresolved = report.getUnresolvedDependencies();
/* 142 */     if (unresolved.length > 0) {
/* 143 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::"");
/* 144 */       Message.warn(""\t::          UNRESOLVED DEPENDENCIES         ::"");
/* 145 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::"");
/*     */     } 
/* 147 */     for (int i = 0; i < unresolved.length; i++) {
/* 148 */       Message.warn(""\t:: "" + unresolved[i] + "": "" + unresolved[i].getProblemMessage());
/*     */     }
/* 150 */     if (unresolved.length > 0) {
/* 151 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::\n"");
/*     */     }
/*     */     
/* 154 */     ArtifactDownloadReport[] errors = report.getFailedArtifactsReports();
/* 155 */     if (errors.length > 0) {
/* 156 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::"");
/* 157 */       Message.warn(""\t::              FAILED DOWNLOADS            ::"");
/* 158 */       Message.warn(""\t:: ^ see resolution messages for details  ^ ::"");
/* 159 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::"");
/*     */     } 
/* 161 */     for (int i = 0; i < errors.length; i++) {
/* 162 */       Message.warn(""\t:: "" + errors[i].getArtifact());
/*     */     }
/* 164 */     if (errors.length > 0) {
/* 165 */       Message.warn(""\t::::::::::::::::::::::::::::::::::::::::::::::\n"");
/*     */     }
/*     */   }
/*     */   
/*     */   public void output(ConfigurationResolveReport report) {
/* 170 */     StringBuffer line = new StringBuffer(""\t"");
/*     */     
/* 172 */     append(line, report.getConfiguration(), 18);
/* 173 */     append(line, String.valueOf(report.getNodesNumber()), 7);
/* 174 */     append(line, String.valueOf((report.getSearchedNodes()).length), 7);
/* 175 */     append(line, String.valueOf((report.getDownloadedNodes()).length), 7);
/* 176 */     append(line, String.valueOf((report.getEvictedNodes()).length), 7);
/* 177 */     line.append(""|"");
/* 178 */     append(line, String.valueOf(report.getArtifactsNumber()), 7);
/* 179 */     append(line, String.valueOf((report.getDownloadedArtifactsReports()).length), 7);
/*     */     
/* 181 */     line.append(""|"");
/*     */     
/* 183 */     Message.rawinfo(line.toString());
/*     */   }
/*     */   
/*     */   private void append(StringBuffer line, Object o, int limit) {
/* 187 */     String v = String.valueOf(o);
/* 188 */     if (v.length() >= limit) {
/* 189 */       v = v.substring(0, limit);
/*     */     } else {
/* 191 */       int missing = limit - v.length();
/* 192 */       int half = missing / 2;
/* 193 */       char[] c = new char[limit];
/* 194 */       Arrays.fill(c, ' ');
/* 195 */       System.arraycopy(v.toCharArray(), 0, c, missing - half, v.length());
/* 196 */       v = new String(c);
/*     */     } 
/* 198 */     line.append(""|"");
/* 199 */     line.append(v);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\report\LogReportOutputter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.report.ReportOutputter,"package org.apache.ivy.plugins.report;
import java.io.IOException;
import org.apache.ivy.core.cache.ResolutionCacheManager;
import org.apache.ivy.core.report.ResolveReport;
import org.apache.ivy.core.resolve.ResolveOptions;
public interface ReportOutputter {
  public static final String CONSOLE = ""console"";
  public static final String XML = ""xml"";
  void output(ResolveReport paramResolveReport, ResolutionCacheManager paramResolutionCacheManager, ResolveOptions paramResolveOptions) throws IOException;
  String getName();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\report\ReportOutputter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.report.XmlReportOutputter,"/*    */ package org.apache.ivy.plugins.report;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ import org.apache.ivy.core.cache.ResolutionCacheManager;
/*    */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*    */ import org.apache.ivy.core.report.ResolveReport;
/*    */ import org.apache.ivy.core.resolve.ResolveOptions;
/*    */ import org.apache.ivy.util.FileUtil;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XmlReportOutputter
/*    */   implements ReportOutputter
/*    */ {
/* 37 */   private XmlReportWriter writer = new XmlReportWriter();
/*    */ 
/*    */   
/* 40 */   public String getName() { return ""xml""; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void output(ResolveReport report, ResolutionCacheManager cacheMgr, ResolveOptions options) throws IOException {
/* 46 */     String[] confs = report.getConfigurations();
/* 47 */     for (int i = 0; i < confs.length; i++) {
/* 48 */       output(report.getConfigurationReport(confs[i]), report.getResolveId(), confs, cacheMgr);
/*    */     }
/*    */   }
/*    */ 
/*    */ 
/*    */   
/*    */   public void output(ConfigurationResolveReport report, String resolveId, String[] confs, ResolutionCacheManager cacheMgr) throws IOException {
/* 55 */     File reportFile = cacheMgr.getConfigurationResolveReportInCache(resolveId, report.getConfiguration());
/*    */     
/* 57 */     File reportParentDir = reportFile.getParentFile();
/* 58 */     reportParentDir.mkdirs();
/* 59 */     OutputStream stream = new FileOutputStream(reportFile);
/* 60 */     this.writer.output(report, confs, stream);
/* 61 */     stream.close();
/*    */     
/* 63 */     Message.verbose(""\treport for "" + report.getModuleDescriptor().getModuleRevisionId() + "" "" + report.getConfiguration() + "" produced in "" + reportFile);
/*    */ 
/*    */     
/* 66 */     File reportXsl = new File(reportParentDir, ""ivy-report.xsl"");
/* 67 */     File reportCss = new File(reportParentDir, ""ivy-report.css"");
/* 68 */     if (!reportXsl.exists()) {
/* 69 */       FileUtil.copy(XmlReportOutputter.class.getResource(""ivy-report.xsl""), reportXsl, null);
/*    */     }
/*    */     
/* 72 */     if (!reportCss.exists())
/* 73 */       FileUtil.copy(XmlReportOutputter.class.getResource(""ivy-report.css""), reportCss, null); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\report\XmlReportOutputter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.report.XmlReportParser,"/*     */ package org.apache.ivy.plugins.report;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.SortedMap;
/*     */ import java.util.TreeMap;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadStatus;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.util.extendable.ExtendableItemHelper;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlReportParser
/*     */ {
/*     */   private static class SaxXmlReportParser
/*     */   {
/*     */     private List mrids;
/*     */     private List defaultMrids;
/*     */     private List realMrids;
/*     */     private List artifacts;
/*     */     private List artifactReports;
/*     */     private Map metadataReports;
/*     */     private ModuleRevisionId mRevisionId;
/*     */     private File report;
/*     */     
/*     */     private final class XmlReportParserHandler
/*     */       extends DefaultHandler
/*     */     {
/*     */       private String organisation;
/*     */       private String module;
/*     */       private String branch;
/*     */       private String revision;
/*     */       private int position;
/*     */       private Date pubdate;
/*     */       private boolean skip;
/*     */       private ModuleRevisionId mrid;
/*     */       private boolean isDefault;
/*  68 */       private SortedMap revisionsMap = new TreeMap();
/*     */       
/*  70 */       private List revisionArtifacts = null;
/*     */       private final XmlReportParser.SaxXmlReportParser this$0;
/*     */       
/*     */       public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
/*  74 */         if (""module"".equals(qName)) {
/*  75 */           this.organisation = attributes.getValue(""organisation"");
/*  76 */           this.module = attributes.getValue(""name"");
/*  77 */         } else if (""revision"".equals(qName)) {
/*  78 */           this.revisionArtifacts = new ArrayList();
/*  79 */           this.branch = attributes.getValue(""branch"");
/*  80 */           this.revision = attributes.getValue(""name"");
/*  81 */           this.isDefault = Boolean.valueOf(attributes.getValue(""default"")).booleanValue();
/*     */ 
/*     */ 
/*     */           
/*  85 */           String pos = attributes.getValue(""position"");
/*  86 */           this.position = (pos == null) ? (getMaxPos() + 1) : Integer.valueOf(pos).intValue();
/*  87 */           if (attributes.getValue(""error"") != null || attributes.getValue(""evicted"") != null) {
/*     */             
/*  89 */             this.skip = true;
/*     */           } else {
/*  91 */             this.revisionsMap.put(new Integer(this.position), this.revisionArtifacts);
/*  92 */             this.mrid = ModuleRevisionId.newInstance(this.organisation, this.module, this.branch, this.revision, ExtendableItemHelper.getExtraAttributes(attributes, ""extra-""));
/*     */ 
/*     */             
/*  95 */             XmlReportParser.SaxXmlReportParser.this.mrids.add(this.mrid);
/*  96 */             if (this.isDefault) {
/*  97 */               XmlReportParser.SaxXmlReportParser.this.defaultMrids.add(this.mrid);
/*     */             } else {
/*  99 */               Artifact metadataArtifact = DefaultArtifact.newIvyArtifact(this.mrid, this.pubdate);
/*     */               
/* 101 */               MetadataArtifactDownloadReport madr = new MetadataArtifactDownloadReport(metadataArtifact);
/*     */               
/* 103 */               XmlReportParser.SaxXmlReportParser.this.metadataReports.put(this.mrid, madr);
/* 104 */               XmlReportParser.SaxXmlReportParser.this.realMrids.add(this.mrid);
/*     */             } 
/*     */             try {
/* 107 */               this.pubdate = Ivy.DATE_FORMAT.parse(attributes.getValue(""pubdate""));
/* 108 */               this.skip = false;
/* 109 */             } catch (ParseException e) {
/* 110 */               throw new IllegalArgumentException(""invalid publication date for "" + this.organisation + "" "" + this.module + "" "" + this.revision + "": "" + attributes.getValue(""pubdate""));
/*     */             }
/*     */           
/*     */           }
/*     */         
/* 115 */         } else if (""metadata-artifact"".equals(qName)) {
/* 116 */           if (this.skip) {
/*     */             return;
/*     */           }
/* 119 */           MetadataArtifactDownloadReport madr = (MetadataArtifactDownloadReport)XmlReportParser.SaxXmlReportParser.this.metadataReports.get(this.mrid);
/*     */           
/* 121 */           if (madr != null) {
/* 122 */             madr.setDownloadStatus(DownloadStatus.fromString(attributes.getValue(""status"")));
/*     */             
/* 124 */             madr.setDownloadDetails(attributes.getValue(""details""));
/* 125 */             madr.setSize(Long.parseLong(attributes.getValue(""size"")));
/* 126 */             madr.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""time"")));
/* 127 */             madr.setSearched(XmlReportParser.SaxXmlReportParser.parseBoolean(attributes.getValue(""searched"")));
/* 128 */             if (attributes.getValue(""location"") != null) {
/* 129 */               madr.setLocalFile(new File(attributes.getValue(""location"")));
/*     */             }
/* 131 */             if (attributes.getValue(""original-local-location"") != null) {
/* 132 */               madr.setOriginalLocalFile(new File(attributes.getValue(""original-local-location"")));
/*     */             }
/*     */             
/* 135 */             if (attributes.getValue(""origin-location"") != null) {
/* 136 */               if (ArtifactOrigin.isUnknown(attributes.getValue(""origin-location""))) {
/* 137 */                 madr.setArtifactOrigin(ArtifactOrigin.unkwnown(madr.getArtifact()));
/*     */               } else {
/* 139 */                 madr.setArtifactOrigin(new ArtifactOrigin(madr.getArtifact(), XmlReportParser.SaxXmlReportParser.parseBoolean(attributes.getValue(""origin-is-local"")), attributes.getValue(""origin-location"")));
/*     */               
/*     */               }
/*     */             
/*     */             }
/*     */           }
/*     */         
/*     */         }
/* 147 */         else if (""artifact"".equals(qName)) {
/* 148 */           if (this.skip) {
/*     */             return;
/*     */           }
/* 151 */           String status = attributes.getValue(""status"");
/* 152 */           String artifactName = attributes.getValue(""name"");
/* 153 */           String type = attributes.getValue(""type"");
/* 154 */           String ext = attributes.getValue(""ext"");
/* 155 */           DefaultArtifact defaultArtifact = new DefaultArtifact(this.mrid, this.pubdate, artifactName, type, ext, ExtendableItemHelper.getExtraAttributes(attributes, ""extra-""));
/*     */ 
/*     */           
/* 158 */           ArtifactDownloadReport aReport = new ArtifactDownloadReport((Artifact)defaultArtifact);
/* 159 */           aReport.setDownloadStatus(DownloadStatus.fromString(status));
/* 160 */           aReport.setDownloadDetails(attributes.getValue(""details""));
/* 161 */           aReport.setSize(Long.parseLong(attributes.getValue(""size"")));
/* 162 */           aReport.setDownloadTimeMillis(Long.parseLong(attributes.getValue(""time"")));
/* 163 */           if (attributes.getValue(""location"") != null) {
/* 164 */             aReport.setLocalFile(new File(attributes.getValue(""location"")));
/*     */           }
/* 166 */           this.revisionArtifacts.add(aReport);
/* 167 */         } else if (""origin-location"".equals(qName)) {
/* 168 */           if (this.skip) {
/*     */             return;
/*     */           }
/* 171 */           ArtifactDownloadReport aReport = this.revisionArtifacts.get(this.revisionArtifacts.size() - 1);
/*     */ 
/*     */           
/* 174 */           if (ArtifactOrigin.isUnknown(attributes.getValue(""location""))) {
/* 175 */             aReport.setArtifactOrigin(ArtifactOrigin.unkwnown(aReport.getArtifact()));
/*     */           } else {
/* 177 */             aReport.setArtifactOrigin(new ArtifactOrigin(aReport.getArtifact(), XmlReportParser.SaxXmlReportParser.parseBoolean(attributes.getValue(""is-local"")), attributes.getValue(""location"")));
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/* 183 */         else if (""info"".equals(qName)) {
/* 184 */           String organisation = attributes.getValue(""organisation"");
/* 185 */           String name = attributes.getValue(""module"");
/* 186 */           String branch = attributes.getValue(""branch"");
/* 187 */           String revision = attributes.getValue(""revision"");
/* 188 */           Map extraAttributes = new HashMap();
/* 189 */           for (int i = 0; i < attributes.getLength(); i++) {
/* 190 */             String attName = attributes.getQName(i);
/* 191 */             if (attName.startsWith(""extra-"")) {
/* 192 */               String extraAttrName = attName.substring(""extra-"".length());
/* 193 */               String extraAttrValue = attributes.getValue(i);
/* 194 */               extraAttributes.put(extraAttrName, extraAttrValue);
/*     */             } 
/*     */           } 
/* 197 */           XmlReportParser.SaxXmlReportParser.this.mRevisionId = ModuleRevisionId.newInstance(organisation, name, branch, revision, extraAttributes);
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*     */       public void endElement(String uri, String localName, String qname) throws SAXException {
/* 204 */         if (""dependencies"".equals(qname))
/*     */         {
/* 206 */           for (Iterator it = this.revisionsMap.values().iterator(); it.hasNext(); ) {
/* 207 */             List artifactReports = it.next();
/* 208 */             XmlReportParser.SaxXmlReportParser.this.artifactReports.addAll(artifactReports);
/* 209 */             for (Iterator iter = artifactReports.iterator(); iter.hasNext(); ) {
/* 210 */               ArtifactDownloadReport artifactReport = iter.next();
/*     */               
/* 212 */               if (artifactReport.getDownloadStatus() != DownloadStatus.FAILED) {
/* 213 */                 XmlReportParser.SaxXmlReportParser.this.artifacts.add(artifactReport.getArtifact());
/*     */               }
/*     */             } 
/*     */           } 
/*     */         }
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 222 */       private int getMaxPos() { return this.revisionsMap.isEmpty() ? -1 : ((Integer)this.revisionsMap.keySet().toArray()[this.revisionsMap.size() - 1]).intValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       private XmlReportParserHandler() {}
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     SaxXmlReportParser(File report) {
/* 244 */       this.artifacts = new ArrayList();
/* 245 */       this.artifactReports = new ArrayList();
/* 246 */       this.mrids = new ArrayList();
/* 247 */       this.defaultMrids = new ArrayList();
/* 248 */       this.realMrids = new ArrayList();
/* 249 */       this.metadataReports = new HashMap();
/* 250 */       this.report = report;
/*     */     }
/*     */     
/*     */     public void parse() throws Exception {
/* 254 */       SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
/* 255 */       saxParser.parse(this.report, new XmlReportParserHandler());
/*     */     }
/*     */ 
/*     */     
/* 259 */     private static boolean parseBoolean(String str) { return (str != null && str.equalsIgnoreCase(""true"")); }
/*     */ 
/*     */ 
/*     */     
/* 263 */     public List getArtifacts() { return this.artifacts; }
/*     */ 
/*     */ 
/*     */     
/* 267 */     public List getArtifactReports() { return this.artifactReports; }
/*     */ 
/*     */ 
/*     */     
/* 271 */     public List getModuleRevisionIds() { return this.mrids; }
/*     */ 
/*     */ 
/*     */     
/* 275 */     public List getRealModuleRevisionIds() { return this.realMrids; }
/*     */ 
/*     */ 
/*     */     
/* 279 */     public ModuleRevisionId getResolvedModule() { return this.mRevisionId; }
/*     */ 
/*     */ 
/*     */     
/* 283 */     public MetadataArtifactDownloadReport getMetadataArtifactReport(ModuleRevisionId id) { return (MetadataArtifactDownloadReport)this.metadataReports.get(id); }
/*     */   }
/*     */ 
/*     */   
/* 287 */   private SaxXmlReportParser parser = null;
/*     */   
/*     */   public void parse(File report) throws ParseException {
/* 290 */     if (!report.exists()) {
/* 291 */       throw new IllegalStateException(""Report file '"" + report.getAbsolutePath() + ""' does not exist."");
/*     */     }
/*     */ 
/*     */     
/* 295 */     this.parser = new SaxXmlReportParser(report);
/*     */     try {
/* 297 */       this.parser.parse();
/* 298 */     } catch (Exception e) {
/* 299 */       ParseException pe = new ParseException(""failed to parse report: "" + report + "": "" + e.getMessage(), 0);
/*     */       
/* 301 */       pe.initCause(e);
/* 302 */       throw pe;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 307 */   public Artifact[] getArtifacts() { return (Artifact[])this.parser.getArtifacts().toArray((Object[])new Artifact[this.parser.getArtifacts().size()]); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public ArtifactDownloadReport[] getArtifactReports() { return (ArtifactDownloadReport[])this.parser.getArtifactReports().toArray((Object[])new ArtifactDownloadReport[this.parser.getArtifactReports().size()]); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 317 */   public ModuleRevisionId[] getDependencyRevisionIds() { return (ModuleRevisionId[])this.parser.getModuleRevisionIds().toArray((Object[])new ModuleRevisionId[this.parser.getModuleRevisionIds().size()]); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 322 */   public ModuleRevisionId[] getRealDependencyRevisionIds() { return (ModuleRevisionId[])this.parser.getRealModuleRevisionIds().toArray((Object[])new ModuleRevisionId[this.parser.getRealModuleRevisionIds().size()]); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 327 */   public MetadataArtifactDownloadReport getMetadataArtifactReport(ModuleRevisionId id) { return this.parser.getMetadataArtifactReport(id); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public ModuleRevisionId getResolvedModule() { return this.parser.getResolvedModule(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\report\XmlReportParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.report.XmlReportWriter,"/*     */ package org.apache.ivy.plugins.report;
/*     */ 
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.License;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleId;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.ConfigurationResolveReport;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.IvyNodeCallers;
/*     */ import org.apache.ivy.core.resolve.IvyNodeEviction;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlReportWriter
/*     */ {
/*     */   static final String REPORT_ENCODING = ""UTF-8"";
/*     */   
/*  56 */   public void output(ConfigurationResolveReport report, OutputStream stream) { output(report, new String[] { report.getConfiguration() }, stream); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void output(ConfigurationResolveReport report, String[] confs, OutputStream stream) {
/*     */     OutputStreamWriter encodedOutStream;
/*     */     try {
/*  63 */       encodedOutStream = new OutputStreamWriter(stream, ""UTF-8"");
/*  64 */     } catch (UnsupportedEncodingException e) {
/*  65 */       throw new RuntimeException(""UTF-8 is not known on your jvm"", e);
/*     */     } 
/*  67 */     PrintWriter out = new PrintWriter(new BufferedWriter(encodedOutStream));
/*  68 */     ModuleRevisionId mrid = report.getModuleDescriptor().getModuleRevisionId();
/*     */     
/*  70 */     out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/*  71 */     out.println(""<?xml-stylesheet type=\""text/xsl\"" href=\""ivy-report.xsl\""?>"");
/*  72 */     out.println(""<ivy-report version=\""1.0\"">"");
/*  73 */     out.println(""\t<info"");
/*  74 */     out.println(""\t\torganisation=\"""" + XMLHelper.escape(mrid.getOrganisation()) + ""\"""");
/*  75 */     out.println(""\t\tmodule=\"""" + XMLHelper.escape(mrid.getName()) + ""\"""");
/*  76 */     out.println(""\t\trevision=\"""" + XMLHelper.escape(mrid.getRevision()) + ""\"""");
/*  77 */     if (mrid.getBranch() != null) {
/*  78 */       out.println(""\t\tbranch=\"""" + XMLHelper.escape(mrid.getBranch()) + ""\"""");
/*     */     }
/*  80 */     Map extraAttributes = mrid.getExtraAttributes();
/*  81 */     for (Iterator it = extraAttributes.entrySet().iterator(); it.hasNext(); ) {
/*  82 */       Map.Entry entry = it.next();
/*  83 */       out.println(""\t\textra-"" + entry.getKey() + ""=\"""" + XMLHelper.escape(entry.getValue().toString()) + ""\"""");
/*     */     } 
/*     */     
/*  86 */     out.println(""\t\tconf=\"""" + XMLHelper.escape(report.getConfiguration()) + ""\"""");
/*  87 */     out.println(""\t\tconfs=\"""" + XMLHelper.escape(StringUtils.join((Object[])confs, "", "")) + ""\"""");
/*  88 */     out.println(""\t\tdate=\"""" + Ivy.DATE_FORMAT.format(report.getDate()) + ""\""/>"");
/*     */     
/*  90 */     out.println(""\t<dependencies>"");
/*     */ 
/*     */     
/*  93 */     List dependencies = new ArrayList(report.getModuleRevisionIds());
/*     */     
/*  95 */     for (Iterator iter = report.getModuleIds().iterator(); iter.hasNext(); ) {
/*  96 */       ModuleId mid = iter.next();
/*  97 */       out.println(""\t\t<module organisation=\"""" + XMLHelper.escape(mid.getOrganisation()) + ""\"""" + "" name=\"""" + XMLHelper.escape(mid.getName()) + ""\"" >"");
/*     */ 
/*     */       
/* 100 */       for (Iterator it2 = report.getNodes(mid).iterator(); it2.hasNext(); ) {
/* 101 */         IvyNode dep = it2.next();
/* 102 */         ouputRevision(report, out, dependencies, dep);
/*     */       } 
/* 104 */       out.println(""\t\t</module>"");
/*     */     } 
/* 106 */     out.println(""\t</dependencies>"");
/* 107 */     out.println(""</ivy-report>"");
/* 108 */     out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void ouputRevision(ConfigurationResolveReport report, PrintWriter out, List dependencies, IvyNode dep) {
/* 114 */     ModuleDescriptor md = null;
/* 115 */     if (dep.getModuleRevision() != null) {
/* 116 */       md = dep.getModuleRevision().getDescriptor();
/*     */     }
/* 118 */     StringBuffer details = new StringBuffer();
/* 119 */     if (dep.isLoaded()) {
/* 120 */       details.append("" status=\"""");
/* 121 */       details.append(XMLHelper.escape(dep.getDescriptor().getStatus()));
/* 122 */       details.append(""\"" pubdate=\"""");
/* 123 */       details.append(Ivy.DATE_FORMAT.format(new Date(dep.getPublication())));
/* 124 */       details.append(""\"" resolver=\"""");
/* 125 */       details.append(XMLHelper.escape(dep.getModuleRevision().getResolver().getName()));
/*     */       
/* 127 */       details.append(""\"" artresolver=\"""");
/* 128 */       details.append(XMLHelper.escape(dep.getModuleRevision().getArtifactResolver().getName()));
/*     */       
/* 130 */       details.append(""\"""");
/*     */     } 
/* 132 */     if (dep.isEvicted(report.getConfiguration())) {
/* 133 */       IvyNodeEviction.EvictionData ed = dep.getEvictedData(report.getConfiguration());
/* 134 */       if (ed.getConflictManager() != null) {
/* 135 */         details.append("" evicted=\"""").append(XMLHelper.escape(ed.getConflictManager().toString())).append(""\"""");
/*     */       } else {
/*     */         
/* 138 */         details.append("" evicted=\""transitive\"""");
/*     */       } 
/* 140 */       details.append("" evicted-reason=\"""").append(XMLHelper.escape((ed.getDetail() == null) ? """" : ed.getDetail())).append(""\"""");
/*     */     } 
/*     */ 
/*     */     
/* 144 */     if (dep.hasProblem()) {
/* 145 */       details.append("" error=\"""").append(XMLHelper.escape(dep.getProblem().getMessage())).append(""\"""");
/*     */     }
/*     */     
/* 148 */     if (md != null && md.getHomePage() != null) {
/* 149 */       details.append("" homepage=\"""").append(XMLHelper.escape(md.getHomePage())).append(""\"""");
/*     */     }
/*     */     
/* 152 */     Map extraAttributes = (md != null) ? md.getExtraAttributes() : dep.getResolvedId().getExtraAttributes();
/*     */     
/* 154 */     for (Iterator iterator = extraAttributes.keySet().iterator(); iterator.hasNext(); ) {
/* 155 */       String attName = iterator.next();
/* 156 */       details.append("" extra-"").append(attName).append(""=\"""").append(XMLHelper.escape(extraAttributes.get(attName).toString())).append(""\"""");
/*     */     } 
/*     */     
/* 159 */     String defaultValue = (dep.getDescriptor() != null) ? ("" default=\"""" + dep.getDescriptor().isDefault() + ""\"""") : """";
/*     */     
/* 161 */     int position = dependencies.indexOf(dep.getResolvedId());
/* 162 */     out.println(""\t\t\t<revision name=\"""" + XMLHelper.escape(dep.getResolvedId().getRevision()) + ""\"""" + ((dep.getResolvedId().getBranch() == null) ? """" : ("" branch=\"""" + XMLHelper.escape(dep.getResolvedId().getBranch()) + ""\"""")) + details + "" downloaded=\"""" + dep.isDownloaded() + ""\"""" + "" searched=\"""" + dep.isSearched() + ""\"""" + defaultValue + "" conf=\"""" + toString(dep.getConfigurations(report.getConfiguration())) + ""\"""" + "" position=\"""" + position + ""\"">"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 172 */     if (md != null) {
/* 173 */       License[] licenses = md.getLicenses();
/* 174 */       for (int i = 0; i < licenses.length; i++) {
/*     */         String lurl;
/* 176 */         if (licenses[i].getUrl() != null) {
/* 177 */           lurl = "" url=\"""" + XMLHelper.escape(licenses[i].getUrl()) + ""\"""";
/*     */         } else {
/* 179 */           lurl = """";
/*     */         } 
/* 181 */         out.println(""\t\t\t\t<license name=\"""" + XMLHelper.escape(licenses[i].getName()) + ""\"""" + lurl + ""/>"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 186 */     outputMetadataArtifact(out, dep);
/* 187 */     outputEvictionInformation(report, out, dep);
/* 188 */     outputCallers(report, out, dep);
/* 189 */     outputArtifacts(report, out, dep);
/* 190 */     out.println(""\t\t\t</revision>"");
/*     */   }
/*     */ 
/*     */   
/*     */   private void outputEvictionInformation(ConfigurationResolveReport report, PrintWriter out, IvyNode dep) {
/* 195 */     if (dep.isEvicted(report.getConfiguration())) {
/* 196 */       IvyNodeEviction.EvictionData ed = dep.getEvictedData(report.getConfiguration());
/* 197 */       Collection selected = ed.getSelected();
/* 198 */       if (selected != null) {
/* 199 */         for (Iterator it3 = selected.iterator(); it3.hasNext(); ) {
/* 200 */           IvyNode sel = it3.next();
/* 201 */           out.println(""\t\t\t\t<evicted-by rev=\"""" + XMLHelper.escape(sel.getResolvedId().getRevision()) + ""\""/>"");
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void outputMetadataArtifact(PrintWriter out, IvyNode dep) {
/* 209 */     if (dep.getModuleRevision() != null) {
/* 210 */       MetadataArtifactDownloadReport madr = dep.getModuleRevision().getReport();
/* 211 */       out.print(""\t\t\t\t<metadata-artifact"");
/* 212 */       out.print("" status=\"""" + XMLHelper.escape(madr.getDownloadStatus().toString()) + ""\"""");
/*     */       
/* 214 */       out.print("" details=\"""" + XMLHelper.escape(madr.getDownloadDetails()) + ""\"""");
/* 215 */       out.print("" size=\"""" + madr.getSize() + ""\"""");
/* 216 */       out.print("" time=\"""" + madr.getDownloadTimeMillis() + ""\"""");
/* 217 */       if (madr.getLocalFile() != null) {
/* 218 */         out.print("" location=\"""" + XMLHelper.escape(madr.getLocalFile().getAbsolutePath()) + ""\"""");
/*     */       }
/*     */ 
/*     */       
/* 222 */       out.print("" searched=\"""" + madr.isSearched() + ""\"""");
/* 223 */       if (madr.getOriginalLocalFile() != null) {
/* 224 */         out.print("" original-local-location=\"""" + XMLHelper.escape(madr.getOriginalLocalFile().getAbsolutePath()) + ""\"""");
/*     */       }
/*     */ 
/*     */       
/* 228 */       ArtifactOrigin origin = madr.getArtifactOrigin();
/* 229 */       if (origin != null) {
/* 230 */         out.print("" origin-is-local=\"""" + String.valueOf(origin.isLocal()) + ""\"""");
/* 231 */         out.print("" origin-location=\"""" + XMLHelper.escape(origin.getLocation()) + ""\"""");
/*     */       } 
/* 233 */       out.println(""/>"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void outputCallers(ConfigurationResolveReport report, PrintWriter out, IvyNode dep) {
/* 239 */     IvyNodeCallers.Caller[] callers = dep.getCallers(report.getConfiguration());
/* 240 */     for (int i = 0; i < callers.length; i++) {
/* 241 */       StringBuffer callerDetails = new StringBuffer();
/* 242 */       Map callerExtraAttributes = callers[i].getDependencyDescriptor().getExtraAttributes();
/*     */       
/* 244 */       Iterator iterator = callerExtraAttributes.keySet().iterator();
/* 245 */       while (iterator.hasNext()) {
/* 246 */         String attName = iterator.next();
/* 247 */         callerDetails.append("" extra-"").append(attName).append(""=\"""").append(XMLHelper.escape(callerExtraAttributes.get(attName).toString())).append(""\"""");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 252 */       out.println(""\t\t\t\t<caller organisation=\"""" + XMLHelper.escape(callers[i].getModuleRevisionId().getOrganisation()) + ""\"""" + "" name=\"""" + XMLHelper.escape(callers[i].getModuleRevisionId().getName()) + ""\"""" + "" conf=\"""" + XMLHelper.escape(toString(callers[i].getCallerConfigurations())) + ""\"""" + "" rev=\"""" + XMLHelper.escape(callers[i].getAskedDependencyId(dep.getData()).getRevision()) + ""\"""" + "" rev-constraint-default=\"""" + XMLHelper.escape(callers[i].getDependencyDescriptor().getDependencyRevisionId().getRevision()) + ""\"""" + "" rev-constraint-dynamic=\"""" + XMLHelper.escape(callers[i].getDependencyDescriptor().getDynamicConstraintDependencyRevisionId().getRevision()) + ""\"""" + "" callerrev=\"""" + XMLHelper.escape(callers[i].getModuleRevisionId().getRevision()) + ""\"""" + callerDetails + ""/>"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void outputArtifacts(ConfigurationResolveReport report, PrintWriter out, IvyNode dep) {
/* 281 */     ArtifactDownloadReport[] adr = report.getDownloadReports(dep.getResolvedId());
/* 282 */     out.println(""\t\t\t\t<artifacts>"");
/* 283 */     for (int i = 0; i < adr.length; i++) {
/* 284 */       out.print(""\t\t\t\t\t<artifact name=\"""" + XMLHelper.escape(adr[i].getName()) + ""\"" type=\"""" + XMLHelper.escape(adr[i].getType()) + ""\"" ext=\"""" + XMLHelper.escape(adr[i].getExt()) + ""\"""");
/*     */ 
/*     */ 
/*     */       
/* 288 */       Map extraAttributes = adr[i].getArtifact().getExtraAttributes();
/* 289 */       Iterator iterator = extraAttributes.keySet().iterator();
/* 290 */       while (iterator.hasNext()) {
/* 291 */         String attName = iterator.next();
/* 292 */         out.print("" extra-"" + attName + ""=\"""" + XMLHelper.escape(extraAttributes.get(attName).toString()) + ""\"""");
/*     */       } 
/*     */ 
/*     */       
/* 296 */       out.print("" status=\"""" + XMLHelper.escape(adr[i].getDownloadStatus().toString()) + ""\"""");
/*     */       
/* 298 */       out.print("" details=\"""" + XMLHelper.escape(adr[i].getDownloadDetails()) + ""\"""");
/* 299 */       out.print("" size=\"""" + adr[i].getSize() + ""\"""");
/* 300 */       out.print("" time=\"""" + adr[i].getDownloadTimeMillis() + ""\"""");
/* 301 */       if (adr[i].getLocalFile() != null) {
/* 302 */         out.print("" location=\"""" + XMLHelper.escape(adr[i].getLocalFile().getAbsolutePath()) + ""\"""");
/*     */       }
/*     */ 
/*     */       
/* 306 */       ArtifactOrigin origin = adr[i].getArtifactOrigin();
/* 307 */       if (origin != null) {
/* 308 */         out.println("">"");
/* 309 */         out.println(""\t\t\t\t\t\t<origin-location is-local=\"""" + String.valueOf(origin.isLocal()) + ""\"""" + "" location=\"""" + XMLHelper.escape(origin.getLocation()) + ""\""/>"");
/*     */ 
/*     */         
/* 312 */         out.println(""\t\t\t\t\t</artifact>"");
/*     */       } else {
/* 314 */         out.println(""/>"");
/*     */       } 
/*     */     } 
/* 317 */     out.println(""\t\t\t\t</artifacts>"");
/*     */   }
/*     */   
/*     */   private String toString(String[] strs) {
/* 321 */     StringBuffer buf = new StringBuffer();
/* 322 */     for (int i = 0; i < strs.length; i++) {
/* 323 */       buf.append(strs[i]);
/* 324 */       if (i + 1 < strs.length) {
/* 325 */         buf.append("", "");
/*     */       }
/*     */     } 
/* 328 */     return XMLHelper.escape(buf.toString());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\report\XmlReportWriter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.AbstractRepository,"/*     */ package org.apache.ivy.plugins.repository;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Arrays;
/*     */ import javax.swing.event.EventListenerList;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractRepository
/*     */   implements Repository
/*     */ {
/*  29 */   private EventListenerList listeners = new EventListenerList();
/*     */   
/*     */   private String name;
/*     */   
/*     */   private TransferEvent evt;
/*     */ 
/*     */   
/*  36 */   public void addTransferListener(TransferListener listener) { this.listeners.add(TransferListener.class, listener); }
/*     */ 
/*     */ 
/*     */   
/*  40 */   public void removeTransferListener(TransferListener listener) { this.listeners.remove(TransferListener.class, listener); }
/*     */ 
/*     */ 
/*     */   
/*  44 */   public boolean hasTransferListener(TransferListener listener) { return Arrays.asList(this.listeners.getListeners(TransferListener.class)).contains(listener); }
/*     */ 
/*     */   
/*     */   protected void fireTransferInitiated(Resource res, int requestType) {
/*  48 */     this.evt = new TransferEvent(this, res, 0, requestType);
/*  49 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferStarted() {
/*  53 */     this.evt.setEventType(1);
/*  54 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferStarted(long totalLength) {
/*  58 */     this.evt.setEventType(1);
/*  59 */     this.evt.setTotalLength(totalLength);
/*  60 */     this.evt.setTotalLengthSet(true);
/*  61 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferProgress(long length) {
/*  65 */     this.evt.setEventType(3);
/*  66 */     this.evt.setLength(length);
/*  67 */     if (!this.evt.isTotalLengthSet()) {
/*  68 */       this.evt.setTotalLength(this.evt.getTotalLength() + length);
/*     */     }
/*  70 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferCompleted() {
/*  74 */     this.evt.setEventType(2);
/*  75 */     if (this.evt.getTotalLength() > 0L && !this.evt.isTotalLengthSet()) {
/*  76 */       this.evt.setTotalLengthSet(true);
/*     */     }
/*  78 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferCompleted(long totalLength) {
/*  82 */     this.evt.setEventType(2);
/*  83 */     this.evt.setTotalLength(totalLength);
/*  84 */     this.evt.setTotalLengthSet(true);
/*  85 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferError() {
/*  89 */     this.evt.setEventType(4);
/*  90 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferError(Exception ex) {
/*  94 */     this.evt.setEventType(4);
/*  95 */     this.evt.setException(ex);
/*  96 */     fireTransferEvent(this.evt);
/*     */   }
/*     */   
/*     */   protected void fireTransferEvent(TransferEvent evt) {
/* 100 */     Object[] listeners = this.listeners.getListenerList();
/* 101 */     for (int i = listeners.length - 2; i >= 0; i -= 2) {
/* 102 */       if (listeners[i] == TransferListener.class) {
/* 103 */         ((TransferListener)listeners[i + 1]).transferProgress(evt);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 109 */   public String getFileSeparator() { return ""/""; }
/*     */ 
/*     */ 
/*     */   
/* 113 */   public String standardize(String source) { return source.replace('\\', '/'); }
/*     */ 
/*     */ 
/*     */   
/* 117 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public String toString() { return getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void put(Artifact artifact, File source, String destination, boolean overwrite) throws IOException { put(source, destination, overwrite); }
/*     */ 
/*     */ 
/*     */   
/* 134 */   protected void put(File source, String destination, boolean overwrite) throws IOException { throw new UnsupportedOperationException(""put in not supported by "" + getName()); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\AbstractRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ArtifactResourceResolver,"package org.apache.ivy.plugins.repository;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.plugins.resolver.util.ResolvedResource;
public interface ArtifactResourceResolver {
  ResolvedResource resolve(Artifact paramArtifact);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ArtifactResourceResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.BasicResource,"/*    */ package org.apache.ivy.plugins.repository;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class BasicResource
/*    */   implements Resource
/*    */ {
/*    */   private boolean local;
/*    */   private String name;
/*    */   private long lastModified;
/*    */   private long contentLength;
/*    */   private boolean exists;
/*    */   
/*    */   public BasicResource(String name, boolean exists, long contentLength, long lastModified, boolean local) {
/* 36 */     this.name = name;
/* 37 */     this.exists = exists;
/* 38 */     this.contentLength = contentLength;
/* 39 */     this.lastModified = lastModified;
/* 40 */     this.local = local;
/*    */   }
/*    */ 
/*    */   
/* 44 */   public Resource clone(String cloneName) { throw new UnsupportedOperationException(""basic resource do not support the clone method""); }
/*    */ 
/*    */ 
/*    */   
/* 48 */   public boolean exists() { return this.exists; }
/*    */ 
/*    */ 
/*    */   
/* 52 */   public long getContentLength() { return this.contentLength; }
/*    */ 
/*    */ 
/*    */   
/* 56 */   public long getLastModified() { return this.lastModified; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public boolean isLocal() { return this.local; }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public InputStream openStream() throws IOException { throw new UnsupportedOperationException(""basic resource do not support the openStream method""); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 73 */   public String toString() { return getName(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\BasicResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.LazyResource,"/*    */ package org.apache.ivy.plugins.repository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class LazyResource
/*    */   implements Resource
/*    */ {
/*    */   private boolean init = false;
/*    */   private boolean local;
/*    */   private String name;
/*    */   private long lastModified;
/*    */   private long contentLength;
/*    */   private boolean exists;
/*    */   
/* 34 */   public LazyResource(String name) { this.name = name; }
/*    */ 
/*    */   
/*    */   protected abstract void init();
/*    */   
/*    */   private void checkInit() {
/* 40 */     if (!this.init) {
/* 41 */       init();
/* 42 */       this.init = true;
/*    */     } 
/*    */   }
/*    */   
/*    */   public boolean exists() {
/* 47 */     checkInit();
/* 48 */     return this.exists;
/*    */   }
/*    */   
/*    */   public long getContentLength() {
/* 52 */     checkInit();
/* 53 */     return this.contentLength;
/*    */   }
/*    */   
/*    */   public long getLastModified() {
/* 57 */     checkInit();
/* 58 */     return this.lastModified;
/*    */   }
/*    */ 
/*    */   
/* 62 */   public String getName() { return this.name; }
/*    */ 
/*    */   
/*    */   public boolean isLocal() {
/* 66 */     checkInit();
/* 67 */     return this.local;
/*    */   }
/*    */ 
/*    */   
/* 71 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 75 */   protected void setContentLength(long contentLength) { this.contentLength = contentLength; }
/*    */ 
/*    */ 
/*    */   
/* 79 */   protected void setExists(boolean exists) { this.exists = exists; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   protected void setLastModified(long lastModified) { this.lastModified = lastModified; }
/*    */ 
/*    */ 
/*    */   
/* 87 */   protected void setLocal(boolean local) { this.local = local; }
/*    */ 
/*    */   
/*    */   protected void init(Resource r) {
/* 91 */     setContentLength(r.getContentLength());
/* 92 */     setLocal(r.isLocal());
/* 93 */     setLastModified(r.getLastModified());
/* 94 */     setExists(r.exists());
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\LazyResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.Repository,"package org.apache.ivy.plugins.repository;
import java.io.File;
import java.io.IOException;
import java.util.List;
import org.apache.ivy.core.module.descriptor.Artifact;
public interface Repository {
  Resource getResource(String paramString) throws IOException;
  void get(String paramString, File paramFile) throws IOException;
  void put(Artifact paramArtifact, File paramFile, String paramString, boolean paramBoolean) throws IOException;
  List list(String paramString) throws IOException;
  void addTransferListener(TransferListener paramTransferListener);
  void removeTransferListener(TransferListener paramTransferListener);
  boolean hasTransferListener(TransferListener paramTransferListener);
  String getFileSeparator();
  String standardize(String paramString);
  String getName();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\Repository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.RepositoryCopyProgressListener,"/*    */ package org.apache.ivy.plugins.repository;
/*    */ 
/*    */ import org.apache.ivy.util.CopyProgressEvent;
/*    */ import org.apache.ivy.util.CopyProgressListener;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RepositoryCopyProgressListener
/*    */   implements CopyProgressListener
/*    */ {
/*    */   private final AbstractRepository repository;
/*    */   private Long totalLength;
/*    */   
/*    */   public RepositoryCopyProgressListener(AbstractRepository repository) {
/* 30 */     this.totalLength = null;
/*    */     this.repository = repository;
/*    */   } public void start(CopyProgressEvent evt) {
/* 33 */     if (this.totalLength != null) {
/* 34 */       this.repository.fireTransferStarted(this.totalLength.longValue());
/*    */     } else {
/* 36 */       this.repository.fireTransferStarted();
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 41 */   public void progress(CopyProgressEvent evt) { this.repository.fireTransferProgress(evt.getReadBytes()); }
/*    */ 
/*    */   
/*    */   public void end(CopyProgressEvent evt) {
/* 45 */     this.repository.fireTransferProgress(evt.getReadBytes());
/* 46 */     this.repository.fireTransferCompleted();
/*    */   }
/*    */ 
/*    */   
/* 50 */   public Long getTotalLength() { return this.totalLength; }
/*    */ 
/*    */ 
/*    */   
/* 54 */   public void setTotalLength(Long totalLength) { this.totalLength = totalLength; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\RepositoryCopyProgressListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.Resource,"package org.apache.ivy.plugins.repository;
import java.io.IOException;
import java.io.InputStream;
public interface Resource {
  String getName();
  long getLastModified();
  long getContentLength();
  boolean exists();
  boolean isLocal();
  Resource clone(String paramString);
  InputStream openStream() throws IOException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\Resource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ResourceDownloader,"package org.apache.ivy.plugins.repository;
import java.io.File;
import java.io.IOException;
import org.apache.ivy.core.module.descriptor.Artifact;
public interface ResourceDownloader {
  void download(Artifact paramArtifact, Resource paramResource, File paramFile) throws IOException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ResourceDownloader.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ResourceHelper,"/*    */ package org.apache.ivy.plugins.repository;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.net.MalformedURLException;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ResourceHelper
/*    */ {
/*    */   public static boolean equals(Resource res, File f) {
/* 34 */     if (res == null && f == null) {
/* 35 */       return true;
/*    */     }
/* 37 */     if (res == null || f == null) {
/* 38 */       return false;
/*    */     }
/* 40 */     if (res instanceof org.apache.ivy.plugins.repository.file.FileResource)
/* 41 */       return (new File(res.getName())).equals(f); 
/* 42 */     if (res instanceof org.apache.ivy.plugins.repository.url.URLResource) {
/*    */       try {
/* 44 */         return f.toURI().toURL().toExternalForm().equals(res.getName());
/* 45 */       } catch (MalformedURLException e) {
/* 46 */         return false;
/*    */       } 
/*    */     }
/* 49 */     return false;
/*    */   }
/*    */   
/*    */   public static long getLastModifiedOrDefault(Resource res) {
/* 53 */     long last = res.getLastModified();
/* 54 */     if (last > 0L) {
/* 55 */       return last;
/*    */     }
/* 57 */     Message.debug(""impossible to get date for "" + res + "": using 'now'"");
/* 58 */     return System.currentTimeMillis();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ResourceHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.TransferEvent,"/*     */ package org.apache.ivy.plugins.repository;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TransferEvent
/*     */   extends IvyEvent
/*     */ {
/*     */   public static final int TRANSFER_INITIATED = 0;
/*     */   public static final int TRANSFER_STARTED = 1;
/*     */   public static final int TRANSFER_COMPLETED = 2;
/*     */   public static final int TRANSFER_PROGRESS = 3;
/*     */   public static final int TRANSFER_ERROR = 4;
/*     */   private static final int LAST_EVENT_TYPE = 4;
/*     */   public static final int REQUEST_GET = 5;
/*     */   public static final int REQUEST_PUT = 6;
/*     */   public static final String TRANSFER_INITIATED_NAME = ""transfer-initiated"";
/*     */   public static final String TRANSFER_STARTED_NAME = ""transfer-started"";
/*     */   public static final String TRANSFER_PROGRESS_NAME = ""transfer-progress"";
/*     */   public static final String TRANSFER_COMPLETED_NAME = ""transfer-completed"";
/*     */   public static final String TRANSFER_ERROR_NAME = ""transfer-error"";
/*     */   private Resource resource;
/*     */   private int eventType;
/*     */   private int requestType;
/*     */   private Exception exception;
/*     */   private File localFile;
/*     */   private Repository repository;
/*     */   private long length;
/*     */   private long totalLength;
/*     */   private boolean isTotalLengthSet = false;
/* 125 */   private long[] timeTracking = new long[5];
/*     */ 
/*     */   
/*     */   public TransferEvent(Repository repository, Resource resource, int eventType, int requestType) {
/* 129 */     super(getName(eventType));
/*     */     
/* 131 */     this.repository = repository;
/* 132 */     setResource(resource);
/*     */     
/* 134 */     setEventType(eventType);
/*     */     
/* 136 */     setRequestType(requestType);
/*     */   }
/*     */ 
/*     */   
/*     */   public TransferEvent(Repository repository, Resource resource, Exception exception, int requestType) {
/* 141 */     this(repository, resource, 4, requestType);
/*     */     
/* 143 */     this.exception = exception;
/*     */   }
/*     */ 
/*     */   
/*     */   public TransferEvent(Repository repository, Resource resource, long length, int requestType) {
/* 148 */     this(repository, resource, 3, requestType);
/*     */     
/* 150 */     this.length = length;
/* 151 */     this.totalLength = length;
/*     */   }
/*     */   
/*     */   private static String getName(int eventType) {
/* 155 */     switch (eventType) {
/*     */       case 0:
/* 157 */         return ""transfer-initiated"";
/*     */       case 1:
/* 159 */         return ""transfer-started"";
/*     */       case 3:
/* 161 */         return ""transfer-progress"";
/*     */       case 2:
/* 163 */         return ""transfer-completed"";
/*     */       case 4:
/* 165 */         return ""transfer-error"";
/*     */     } 
/* 167 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public Resource getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public Exception getException() { return this.exception; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public int getRequestType() { return this.requestType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void setRequestType(int requestType) {
/* 204 */     switch (requestType) {
/*     */       case 6:
/*     */       case 5:
/*     */         break;
/*     */ 
/*     */ 
/*     */       
/*     */       default:
/* 212 */         throw new IllegalArgumentException(""Illegal request type: "" + requestType);
/*     */     } 
/*     */     
/* 215 */     this.requestType = requestType;
/* 216 */     addAttribute(""request-type"", (requestType == 5) ? ""get"" : ""put"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public int getEventType() { return this.eventType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void setEventType(int eventType) {
/* 231 */     checkEventType(eventType);
/* 232 */     if (this.eventType != eventType) {
/* 233 */       this.eventType = eventType;
/* 234 */       this.timeTracking[eventType] = System.currentTimeMillis();
/* 235 */       if (eventType > 0) {
/* 236 */         addAttribute(""total-duration"", String.valueOf(getElapsedTime(0, eventType)));
/*     */         
/* 238 */         if (eventType > 1) {
/* 239 */           addAttribute(""duration"", String.valueOf(getElapsedTime(1, eventType)));
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void setResource(Resource resource) {
/* 251 */     this.resource = resource;
/* 252 */     addAttribute(""resource"", this.resource.getName());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public File getLocalFile() { return this.localFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   protected void setLocalFile(File localFile) { this.localFile = localFile; }
/*     */ 
/*     */ 
/*     */   
/* 271 */   public long getLength() { return this.length; }
/*     */ 
/*     */ 
/*     */   
/* 275 */   protected void setLength(long length) { this.length = length; }
/*     */ 
/*     */ 
/*     */   
/* 279 */   public long getTotalLength() { return this.totalLength; }
/*     */ 
/*     */ 
/*     */   
/* 283 */   protected void setTotalLength(long totalLength) { this.totalLength = totalLength; }
/*     */ 
/*     */ 
/*     */   
/* 287 */   public void setException(Exception exception) { this.exception = exception; }
/*     */ 
/*     */ 
/*     */   
/* 291 */   public boolean isTotalLengthSet() { return this.isTotalLengthSet; }
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setTotalLengthSet(boolean isTotalLengthSet) { this.isTotalLengthSet = isTotalLengthSet; }
/*     */ 
/*     */ 
/*     */   
/* 299 */   public Repository getRepository() { return this.repository; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long getElapsedTime(int fromEventType, int toEventType) {
/* 329 */     checkEventType(fromEventType);
/* 330 */     checkEventType(toEventType);
/* 331 */     long start = this.timeTracking[fromEventType];
/* 332 */     long end = this.timeTracking[toEventType];
/* 333 */     if (start == 0L || end == 0L)
/* 334 */       return -1L; 
/* 335 */     if (end < start) {
/* 336 */       return 0L;
/*     */     }
/* 338 */     return end - start;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void checkEventType(int eventType) {
/* 350 */     if (eventType < 0 || eventType > 4)
/* 351 */       throw new IllegalArgumentException(""invalid event type "" + eventType); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\TransferEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.TransferListener,"package org.apache.ivy.plugins.repository;
import java.util.EventListener;
public interface TransferListener extends EventListener {
  void transferProgress(TransferEvent paramTransferEvent);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\TransferListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.file.FileRepository,"/*     */ package org.apache.ivy.plugins.repository.file;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.plugins.repository.RepositoryCopyProgressListener;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileRepository
/*     */   extends AbstractRepository
/*     */ {
/*  33 */   private RepositoryCopyProgressListener progress = new RepositoryCopyProgressListener(this);
/*     */   
/*     */   private File baseDir;
/*     */   
/*     */   private boolean local = true;
/*     */ 
/*     */   
/*  40 */   public FileRepository() { this.baseDir = null; }
/*     */ 
/*     */ 
/*     */   
/*  44 */   public FileRepository(File basedir) { setBaseDir(basedir); }
/*     */ 
/*     */ 
/*     */   
/*  48 */   public Resource getResource(String source) throws IOException { return new FileResource(this, getFile(source)); }
/*     */ 
/*     */   
/*     */   public void get(String source, File destination) throws IOException {
/*  52 */     fireTransferInitiated(getResource(source), 5);
/*  53 */     copy(getFile(source), destination, true);
/*     */   }
/*     */   
/*     */   public void put(File source, String destination, boolean overwrite) throws IOException {
/*  57 */     fireTransferInitiated(getResource(destination), 6);
/*  58 */     copy(source, getFile(destination), overwrite);
/*     */   }
/*     */   
/*     */   public void move(File src, File dest) throws IOException {
/*  62 */     if (!src.renameTo(dest)) {
/*  63 */       throw new IOException(""impossible to move '"" + src + ""' to '"" + dest + ""'"");
/*     */     }
/*     */   }
/*     */   
/*     */   public void delete(File f) throws IOException {
/*  68 */     if (!FileUtil.forceDelete(f)) {
/*  69 */       throw new IOException(""impossible to delete '"" + f + ""'"");
/*     */     }
/*     */   }
/*     */   
/*     */   private void copy(File src, File destination, boolean overwrite) throws IOException {
/*     */     try {
/*  75 */       getProgressListener().setTotalLength(new Long(src.length()));
/*  76 */       if (!FileUtil.copy(src, destination, (CopyProgressListener)getProgressListener(), overwrite)) {
/*  77 */         if (!overwrite && destination.exists()) {
/*  78 */           throw new IOException(""file copy not done from "" + src + "" to "" + destination + "": destination already exists and overwrite is false"");
/*     */         }
/*     */         
/*  81 */         throw new IOException(""file copy not done from "" + src + "" to "" + destination);
/*     */       }
/*     */     
/*  84 */     } catch (IOException ex) {
/*  85 */       fireTransferError(ex);
/*  86 */       throw ex;
/*  87 */     } catch (RuntimeException ex) {
/*  88 */       fireTransferError(ex);
/*  89 */       throw ex;
/*     */     } finally {
/*  91 */       getProgressListener().setTotalLength(null);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  96 */   protected RepositoryCopyProgressListener getProgressListener() { return this.progress; }
/*     */ 
/*     */   
/*     */   public List list(String parent) throws IOException {
/* 100 */     File dir = getFile(parent);
/* 101 */     if (dir.exists() && dir.isDirectory()) {
/* 102 */       String[] names = dir.list();
/* 103 */       if (names != null) {
/* 104 */         List ret = new ArrayList(names.length);
/* 105 */         for (int i = 0; i < names.length; i++) {
/* 106 */           ret.add(parent + getFileSeparator() + names[i]);
/*     */         }
/* 108 */         return ret;
/*     */       } 
/*     */     } 
/* 111 */     return null;
/*     */   }
/*     */   
/*     */   File getFile(String source) {
/* 115 */     if (this.baseDir != null) {
/* 116 */       return FileUtil.resolveFile(this.baseDir, source);
/*     */     }
/* 118 */     return Checks.checkAbsolute(source, ""source"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public boolean isLocal() { return this.local; }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setLocal(boolean local) { this.local = local; }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public File getBaseDir() { return this.baseDir; }
/*     */ 
/*     */   
/*     */   public final void setBaseDir(File baseDir) {
/* 135 */     Checks.checkAbsolute(baseDir, ""basedir"");
/* 136 */     this.baseDir = baseDir;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\file\FileRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.file.FileResource,"/*    */ package org.apache.ivy.plugins.repository.file;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.FileInputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FileResource
/*    */   implements Resource
/*    */ {
/*    */   private File file;
/*    */   private FileRepository repository;
/*    */   
/*    */   public FileResource(FileRepository repository, File f) {
/* 33 */     this.repository = repository;
/* 34 */     this.file = f;
/*    */   }
/*    */ 
/*    */   
/* 38 */   public String getName() { return this.file.getPath(); }
/*    */ 
/*    */ 
/*    */   
/* 42 */   public Resource clone(String cloneName) { return new FileResource(this.repository, this.repository.getFile(cloneName)); }
/*    */ 
/*    */ 
/*    */   
/* 46 */   public long getLastModified() { return this.file.lastModified(); }
/*    */ 
/*    */ 
/*    */   
/* 50 */   public long getContentLength() { return this.file.length(); }
/*    */ 
/*    */ 
/*    */   
/* 54 */   public boolean exists() { return this.file.exists(); }
/*    */ 
/*    */ 
/*    */   
/* 58 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 62 */   public File getFile() { return this.file; }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public FileRepository getRepository() { return this.repository; }
/*    */ 
/*    */ 
/*    */   
/* 70 */   public boolean isLocal() { return this.repository.isLocal(); }
/*    */ 
/*    */ 
/*    */   
/* 74 */   public InputStream openStream() throws IOException { return new FileInputStream(this.file); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\file\FileResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.sftp.SFTPRepository,"/*     */ package org.apache.ivy.plugins.repository.sftp;
/*     */ 
/*     */ import com.jcraft.jsch.ChannelSftp;
/*     */ import com.jcraft.jsch.JSchException;
/*     */ import com.jcraft.jsch.Session;
/*     */ import com.jcraft.jsch.SftpATTRS;
/*     */ import com.jcraft.jsch.SftpException;
/*     */ import com.jcraft.jsch.SftpProgressMonitor;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.plugins.repository.BasicResource;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.ssh.AbstractSshBasedRepository;
/*     */ import org.apache.ivy.plugins.repository.ssh.SshCache;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SFTPRepository
/*     */   extends AbstractSshBasedRepository
/*     */ {
/*     */   private static final long MILLIS_PER_SECOND = 1000L;
/*     */   
/*     */   private final class MyProgressMonitor
/*     */     implements SftpProgressMonitor
/*     */   {
/*     */     private long totalLength;
/*     */     private final SFTPRepository this$0;
/*     */     
/*     */     private MyProgressMonitor() {}
/*     */     
/*     */     public void init(int op, String src, String dest, long max) {
/*  59 */       this.totalLength = max;
/*  60 */       SFTPRepository.this.fireTransferStarted(max);
/*     */     }
/*     */ 
/*     */     
/*  64 */     public void end() { SFTPRepository.this.fireTransferCompleted(this.totalLength); }
/*     */ 
/*     */     
/*     */     public boolean count(long count) {
/*  68 */       SFTPRepository.this.fireTransferProgress(count);
/*  69 */       return true;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public Resource getResource(String source) { return new SFTPResource(this, source); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource resolveResource(String path) {
/*     */     try {
/*  91 */       ChannelSftp c = getSftpChannel(path);
/*     */       
/*  93 */       Collection r = c.ls(getPath(path));
/*     */       
/*  95 */       if (r != null) {
/*  96 */         for (Iterator iter = r.iterator(); iter.hasNext(); ) {
/*  97 */           Object obj = iter.next();
/*  98 */           if (obj instanceof ChannelSftp.LsEntry) {
/*  99 */             ChannelSftp.LsEntry entry = (ChannelSftp.LsEntry)obj;
/* 100 */             SftpATTRS attrs = entry.getAttrs();
/* 101 */             return (Resource)new BasicResource(path, true, attrs.getSize(), attrs.getMTime() * 1000L, false);
/*     */           }
/*     */         
/*     */         } 
/*     */       }
/* 106 */     } catch (Exception e) {
/* 107 */       Message.debug(""reolving resource error: "" + e.getMessage());
/*     */     } 
/*     */ 
/*     */     
/* 111 */     return (Resource)new BasicResource(path, false, 0L, 0L, false);
/*     */   }
/*     */   
/*     */   public InputStream openStream(SFTPResource resource) throws IOException {
/* 115 */     ChannelSftp c = getSftpChannel(resource.getName());
/*     */     try {
/* 117 */       String path = getPath(resource.getName());
/* 118 */       return c.get(path);
/* 119 */     } catch (SftpException e) {
/* 120 */       IOException ex = new IOException(""impossible to open stream for "" + resource + "" on "" + getHost() + ((e.getMessage() != null) ? ("": "" + e.getMessage()) : """"));
/*     */       
/* 122 */       ex.initCause((Throwable)e);
/* 123 */       throw ex;
/* 124 */     } catch (URISyntaxException e) {
/* 125 */       IOException ex = new IOException(""impossible to open stream for "" + resource + "" on "" + getHost() + ((e.getMessage() != null) ? ("": "" + e.getMessage()) : """"));
/*     */       
/* 127 */       ex.initCause(e);
/* 128 */       throw ex;
/*     */     } 
/*     */   }
/*     */   
/*     */   public void get(String source, File destination) throws IOException {
/* 133 */     fireTransferInitiated(getResource(source), 5);
/* 134 */     ChannelSftp c = getSftpChannel(source);
/*     */     try {
/* 136 */       String path = getPath(source);
/* 137 */       c.get(path, destination.getAbsolutePath(), new MyProgressMonitor());
/* 138 */     } catch (SftpException e) {
/* 139 */       IOException ex = new IOException(""impossible to get "" + source + "" on "" + getHost() + ((e.getMessage() != null) ? ("": "" + e.getMessage()) : """"));
/*     */       
/* 141 */       ex.initCause((Throwable)e);
/* 142 */       throw ex;
/* 143 */     } catch (URISyntaxException e) {
/* 144 */       IOException ex = new IOException(""impossible to get "" + source + "" on "" + getHost() + ((e.getMessage() != null) ? ("": "" + e.getMessage()) : """"));
/*     */       
/* 146 */       ex.initCause(e);
/* 147 */       throw ex;
/*     */     } 
/*     */   }
/*     */   
/*     */   public void put(File source, String destination, boolean overwrite) throws IOException {
/* 152 */     fireTransferInitiated(getResource(destination), 6);
/* 153 */     ChannelSftp c = getSftpChannel(destination);
/*     */     try {
/* 155 */       String path = getPath(destination);
/* 156 */       if (!overwrite && checkExistence(path, c)) {
/* 157 */         throw new IOException(""destination file exists and overwrite == false"");
/*     */       }
/* 159 */       if (path.indexOf('/') != -1) {
/* 160 */         mkdirs(path.substring(0, path.lastIndexOf('/')), c);
/*     */       }
/* 162 */       c.put(source.getAbsolutePath(), path, new MyProgressMonitor());
/* 163 */     } catch (SftpException e) {
/* 164 */       IOException ex = new IOException(e.getMessage());
/* 165 */       ex.initCause((Throwable)e);
/* 166 */       throw ex;
/* 167 */     } catch (URISyntaxException e) {
/* 168 */       IOException ex = new IOException(e.getMessage());
/* 169 */       ex.initCause(e);
/* 170 */       throw ex;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void mkdirs(String directory, ChannelSftp c) throws IOException, SftpException {
/*     */     try {
/* 176 */       SftpATTRS att = c.stat(directory);
/* 177 */       if (att != null && 
/* 178 */         att.isDir()) {
/*     */         return;
/*     */       }
/*     */     }
/* 182 */     catch (SftpException ex) {
/* 183 */       if (directory.indexOf('/') != -1) {
/* 184 */         mkdirs(directory.substring(0, directory.lastIndexOf('/')), c);
/*     */       }
/* 186 */       c.mkdir(directory);
/*     */     } 
/*     */   }
/*     */   
/*     */   private String getPath(String sftpURI) throws URISyntaxException {
/* 191 */     String result = null;
/* 192 */     URI uri = new URI(sftpURI);
/* 193 */     result = uri.getPath();
/*     */     
/* 195 */     if (result == null) {
/* 196 */       throw new URISyntaxException(sftpURI, ""Missing path in URI."");
/*     */     }
/*     */     
/* 199 */     return result;
/*     */   }
/*     */   
/*     */   public List list(String parent) throws IOException {
/*     */     try {
/* 204 */       ChannelSftp c = getSftpChannel(parent);
/* 205 */       Collection r = c.ls(parent);
/* 206 */       if (r != null) {
/* 207 */         if (!parent.endsWith(""/"")) {
/* 208 */           parent = parent + ""/"";
/*     */         }
/* 210 */         List result = new ArrayList();
/* 211 */         for (Iterator iter = r.iterator(); iter.hasNext(); ) {
/* 212 */           Object obj = iter.next();
/* 213 */           if (obj instanceof ChannelSftp.LsEntry) {
/* 214 */             ChannelSftp.LsEntry entry = (ChannelSftp.LsEntry)obj;
/* 215 */             if (""."".equals(entry.getFilename()) || "".."".equals(entry.getFilename())) {
/*     */               continue;
/*     */             }
/* 218 */             result.add(parent + entry.getFilename());
/*     */           } 
/*     */         } 
/* 221 */         return result;
/*     */       } 
/* 223 */     } catch (SftpException e) {
/* 224 */       IOException ex = new IOException(""Failed to return a listing for '"" + parent + ""'"");
/* 225 */       ex.initCause((Throwable)e);
/* 226 */       throw ex;
/*     */     } 
/* 228 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkExistence(String file, ChannelSftp channel) throws IOException, SftpException {
/*     */     try {
/* 245 */       return (channel.stat(file) != null);
/* 246 */     } catch (SftpException ex) {
/* 247 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ChannelSftp getSftpChannel(String pathOrUri) throws IOException {
/* 261 */     Session session = getSession(pathOrUri);
/* 262 */     String host = session.getHost();
/* 263 */     ChannelSftp channel = SshCache.getInstance().getChannelSftp(session);
/* 264 */     if (channel == null) {
/*     */       try {
/* 266 */         channel = (ChannelSftp)session.openChannel(""sftp"");
/* 267 */         channel.connect();
/* 268 */         Message.verbose("":: SFTP :: connected to "" + host + ""!"");
/* 269 */         SshCache.getInstance().attachChannelSftp(session, channel);
/* 270 */       } catch (JSchException e) {
/* 271 */         IOException ex = new IOException(e.getMessage());
/* 272 */         ex.initCause((Throwable)e);
/* 273 */         throw ex;
/*     */       } 
/*     */     }
/* 276 */     return channel;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 282 */   protected String getRepositoryScheme() { return ""sftp""; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\sftp\SFTPRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.sftp.SFTPResource,"/*    */ package org.apache.ivy.plugins.repository.sftp;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SFTPResource
/*    */   implements Resource
/*    */ {
/*    */   private SFTPRepository repository;
/*    */   private String path;
/*    */   private transient boolean init = false;
/*    */   private transient boolean exists;
/*    */   private transient long lastModified;
/*    */   private transient long contentLength;
/*    */   
/*    */   public SFTPResource(SFTPRepository repository, String path) {
/* 39 */     this.repository = repository;
/* 40 */     this.path = path;
/*    */   }
/*    */ 
/*    */   
/* 44 */   public String getName() { return this.path; }
/*    */ 
/*    */ 
/*    */   
/* 48 */   public Resource clone(String cloneName) { return new SFTPResource(this.repository, cloneName); }
/*    */ 
/*    */   
/*    */   public long getLastModified() {
/* 52 */     init();
/* 53 */     return this.lastModified;
/*    */   }
/*    */   
/*    */   public long getContentLength() {
/* 57 */     init();
/* 58 */     return this.contentLength;
/*    */   }
/*    */   
/*    */   public boolean exists() {
/* 62 */     init();
/* 63 */     return this.exists;
/*    */   }
/*    */   
/*    */   private void init() {
/* 67 */     if (!this.init) {
/* 68 */       Resource r = this.repository.resolveResource(this.path);
/* 69 */       this.contentLength = r.getContentLength();
/* 70 */       this.lastModified = r.getLastModified();
/* 71 */       this.exists = r.exists();
/* 72 */       this.init = true;
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 77 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 81 */   public boolean isLocal() { return false; }
/*    */ 
/*    */ 
/*    */   
/* 85 */   public InputStream openStream() throws IOException { return this.repository.openStream(this); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\sftp\SFTPResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.AbstractSshBasedRepository,"/*     */ package org.apache.ivy.plugins.repository.ssh;
/*     */ 
/*     */ import com.jcraft.jsch.Session;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.util.HashMap;
/*     */ import java.util.Locale;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.util.Credentials;
/*     */ import org.apache.ivy.util.CredentialsUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractSshBasedRepository
/*     */   extends AbstractRepository
/*     */ {
/*  36 */   private File keyFile = null;
/*     */   
/*  38 */   private File passFile = null;
/*     */   
/*  40 */   private String userPassword = null;
/*     */   
/*  42 */   private String keyFilePassword = null;
/*     */   
/*  44 */   private String user = null;
/*     */   
/*  46 */   private String host = null;
/*     */   
/*  48 */   private int port = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   private static HashMap credentialsCache = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final int MAX_CREDENTILAS_CACHE_SIZE = 100;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Session getSession(String pathOrUri) throws IOException {
/*  72 */     URI uri = parseURI(pathOrUri);
/*  73 */     String host = getHost();
/*  74 */     int port = getPort();
/*  75 */     String user = getUser();
/*  76 */     String userPassword = getUserPassword();
/*  77 */     if (uri != null && uri.getScheme() != null) {
/*  78 */       if (uri.getHost() != null) {
/*  79 */         host = uri.getHost();
/*     */       }
/*  81 */       if (uri.getPort() != -1) {
/*  82 */         port = uri.getPort();
/*     */       }
/*  84 */       if (uri.getUserInfo() != null) {
/*  85 */         String userInfo = uri.getUserInfo();
/*  86 */         if (userInfo.indexOf("":"") == -1) {
/*  87 */           user = userInfo;
/*     */         } else {
/*  89 */           user = userInfo.substring(0, userInfo.indexOf("":""));
/*  90 */           userPassword = userInfo.substring(userInfo.indexOf("":"") + 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*  94 */     if (host == null) {
/*  95 */       throw new IllegalArgumentException(""missing host information. host should be provided either directly on the repository or in the connection URI"");
/*     */     }
/*     */ 
/*     */     
/*  99 */     if (user == null) {
/* 100 */       Credentials c = requestCredentials(host);
/* 101 */       if (c != null) {
/* 102 */         user = c.getUserName();
/* 103 */         userPassword = c.getPasswd();
/*     */       } else {
/* 105 */         Message.error(""username is not set"");
/*     */       } 
/*     */     } 
/* 108 */     return SshCache.getInstance().getSession(host, port, user, userPassword, getKeyFile(), getKeyFilePassword(), getPassFile());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private URI parseURI(String source) {
/*     */     try {
/* 121 */       URI uri = new URI(source);
/* 122 */       if (uri.getScheme() != null && !uri.getScheme().toLowerCase(Locale.US).equals(getRepositoryScheme().toLowerCase(Locale.US)))
/*     */       {
/* 124 */         throw new URISyntaxException(source, ""Wrong scheme in URI. Expected "" + getRepositoryScheme() + "" as scheme!"");
/*     */       }
/*     */       
/* 127 */       if (uri.getHost() == null && getHost() == null) {
/* 128 */         throw new URISyntaxException(source, ""Missing host in URI or in resolver"");
/*     */       }
/* 130 */       if (uri.getPath() == null) {
/* 131 */         throw new URISyntaxException(source, ""Missing path in URI"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 136 */       return uri;
/* 137 */     } catch (URISyntaxException e) {
/* 138 */       Message.error(e.getMessage());
/* 139 */       Message.error(""The uri is in the wrong format."");
/* 140 */       Message.error(""Please use scheme://user:pass@hostname/path/to/repository"");
/* 141 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Credentials requestCredentials(String host) {
/* 155 */     Object o = credentialsCache.get(host);
/* 156 */     if (o == null) {
/* 157 */       Credentials c = CredentialsUtil.promptCredentials(new Credentials(null, host, this.user, this.userPassword), getPassFile());
/*     */       
/* 159 */       if (c != null) {
/* 160 */         if (credentialsCache.size() > 100) {
/* 161 */           credentialsCache.clear();
/*     */         }
/* 163 */         credentialsCache.put(host, c);
/*     */       } 
/* 165 */       return c;
/*     */     } 
/* 167 */     return (Credentials)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void releaseSession(Session session, String pathOrUri) {
/* 180 */     session.disconnect();
/* 181 */     SshCache.getInstance().clearSession(session);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setUser(String user) { this.user = user; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public String getUser() { return this.user; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeyFile(File filePath) {
/* 208 */     this.keyFile = filePath;
/* 209 */     if (!this.keyFile.exists()) {
/* 210 */       Message.warn(""Pemfile "" + this.keyFile.getAbsolutePath() + "" doesn't exist."");
/* 211 */       this.keyFile = null;
/* 212 */     } else if (!this.keyFile.canRead()) {
/* 213 */       Message.warn(""Pemfile "" + this.keyFile.getAbsolutePath() + "" not readable."");
/* 214 */       this.keyFile = null;
/*     */     } else {
/* 216 */       Message.debug(""Using "" + this.keyFile.getAbsolutePath() + "" as keyfile."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public File getKeyFile() { return this.keyFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setUserPassword(String password) { this.userPassword = password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public String getKeyFilePassword() { return this.keyFilePassword; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setKeyFilePassword(String keyFilePassword) { this.keyFilePassword = keyFilePassword; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public String getUserPassword() { return this.userPassword; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public void setHost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public int getPort() { return this.port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 292 */   public void setPassFile(File passFile) { this.passFile = passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 299 */   public File getPassFile() { return this.passFile; }
/*     */   
/*     */   protected abstract String getRepositoryScheme();
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\AbstractSshBasedRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.RemoteScpException,"/*    */ package org.apache.ivy.plugins.repository.ssh;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RemoteScpException
/*    */   extends Exception
/*    */ {
/*    */   private static final long serialVersionUID = 3107198655563736600L;
/*    */   
/*    */   public RemoteScpException() {}
/*    */   
/* 35 */   public RemoteScpException(String message) { super(message); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 42 */   public RemoteScpException(Throwable cause) { super(cause); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 50 */   public RemoteScpException(String message, Throwable cause) { super(message, cause); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\RemoteScpException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.Scp,"/*     */ package org.apache.ivy.plugins.repository.ssh;
/*     */ 
/*     */ import com.jcraft.jsch.Channel;
/*     */ import com.jcraft.jsch.ChannelExec;
/*     */ import com.jcraft.jsch.JSchException;
/*     */ import com.jcraft.jsch.Session;
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Scp
/*     */ {
/*     */   private static final int MODE_LENGTH = 4;
/*     */   private static final int SEND_FILE_BUFFER_LENGTH = 40000;
/*     */   private static final int SEND_BYTES_BUFFER_LENGTH = 512;
/*     */   private static final int MIN_TLINE_LENGTH = 8;
/*     */   private static final int CLINE_SPACE_INDEX2 = 5;
/*     */   private static final int CLINE_SPACE_INDEX1 = 4;
/*     */   private static final int MIN_C_LINE_LENGTH = 8;
/*     */   private static final int DEFAULT_LINE_BUFFER_LENGTH = 30;
/*     */   private static final int BUFFER_SIZE = 65536;
/*     */   private static final int MAX_SCP_LINE_LENGTH = 8192;
/*     */   private Session session;
/*     */   
/*     */   public class FileInfo
/*     */   {
/*     */     private String filename;
/*     */     private long length;
/*     */     private long lastModified;
/*     */     private final Scp this$0;
/*     */     
/*  85 */     public void setFilename(String filename) { this.filename = filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  92 */     public String getFilename() { return this.filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 100 */     public void setLength(long length) { this.length = length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 107 */     public long getLength() { return this.length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 115 */     public void setLastModified(long lastModified) { this.lastModified = lastModified; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 122 */     public long getLastModified() { return this.lastModified; }
/*     */   }
/*     */ 
/*     */   
/*     */   public Scp(Session session) {
/* 127 */     if (session == null) {
/* 128 */       throw new IllegalArgumentException(""Cannot accept null argument!"");
/*     */     }
/* 130 */     this.session = session;
/*     */   }
/*     */   
/*     */   private void readResponse(InputStream is) throws IOException, RemoteScpException {
/* 134 */     int c = is.read();
/*     */     
/* 136 */     if (c == 0) {
/*     */       return;
/*     */     }
/*     */     
/* 140 */     if (c == -1) {
/* 141 */       throw new RemoteScpException(""Remote scp terminated unexpectedly."");
/*     */     }
/*     */     
/* 144 */     if (c != 1 && c != 2) {
/* 145 */       throw new RemoteScpException(""Remote scp sent illegal error code."");
/*     */     }
/*     */     
/* 148 */     if (c == 2) {
/* 149 */       throw new RemoteScpException(""Remote scp terminated with error."");
/*     */     }
/*     */     
/* 152 */     String err = receiveLine(is);
/* 153 */     throw new RemoteScpException(""Remote scp terminated with error ("" + err + "")."");
/*     */   }
/*     */   
/*     */   private String receiveLine(InputStream is) throws IOException, RemoteScpException {
/* 157 */     StringBuffer sb = new StringBuffer(30);
/*     */ 
/*     */     
/*     */     while (true) {
/* 161 */       if (sb.length() > 8192) {
/* 162 */         throw new RemoteScpException(""Remote scp sent a too long line"");
/*     */       }
/*     */       
/* 165 */       int c = is.read();
/*     */       
/* 167 */       if (c < 0) {
/* 168 */         throw new RemoteScpException(""Remote scp terminated unexpectedly."");
/*     */       }
/*     */       
/* 171 */       if (c == 10) {
/*     */         break;
/*     */       }
/*     */       
/* 175 */       sb.append((char)c);
/*     */     } 
/*     */     
/* 178 */     return sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parseCLine(String line, FileInfo fileInfo) throws RemoteScpException {
/*     */     long len;
/* 186 */     if (line.length() < 8) {
/* 187 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary, line too short."");
/*     */     }
/*     */ 
/*     */     
/* 191 */     if (line.charAt(4) != ' ' || line.charAt(5) == ' ')
/*     */     {
/* 193 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary."");
/*     */     }
/*     */     
/* 196 */     int lengthNameSep = line.indexOf(' ', 5);
/*     */     
/* 198 */     if (lengthNameSep == -1) {
/* 199 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary."");
/*     */     }
/*     */     
/* 202 */     String lengthSubstring = line.substring(5, lengthNameSep);
/* 203 */     String nameSubstring = line.substring(lengthNameSep + 1);
/*     */     
/* 205 */     if (lengthSubstring.length() <= 0 || nameSubstring.length() <= 0) {
/* 206 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary."");
/*     */     }
/*     */     
/* 209 */     if (6 + lengthSubstring.length() + nameSubstring.length() != line.length())
/*     */     {
/* 211 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary."");
/*     */     }
/*     */     
/*     */     try {
/* 215 */       len = Long.parseLong(lengthSubstring);
/* 216 */     } catch (NumberFormatException e) {
/* 217 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary, cannot parse file length."");
/*     */     } 
/*     */ 
/*     */     
/* 221 */     if (len < 0L) {
/* 222 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary, illegal file length."");
/*     */     }
/*     */ 
/*     */     
/* 226 */     fileInfo.setLength(len);
/* 227 */     fileInfo.setFilename(nameSubstring);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parseTLine(String line, FileInfo fileInfo) throws RemoteScpException {
/*     */     long secondMsec, atime, firstMsec, modtime;
/* 238 */     if (line.length() < 8) {
/* 239 */       throw new RemoteScpException(""Malformed T line sent by remote SCP binary, line too short."");
/*     */     }
/*     */ 
/*     */     
/* 243 */     int firstMsecBegin = line.indexOf("" "") + 1;
/* 244 */     if (firstMsecBegin == 0 || firstMsecBegin >= line.length()) {
/* 245 */       throw new RemoteScpException(""Malformed T line sent by remote SCP binary, line not enough data."");
/*     */     }
/*     */ 
/*     */     
/* 249 */     int atimeBegin = line.indexOf("" "", firstMsecBegin + 1) + 1;
/* 250 */     if (atimeBegin == 0 || atimeBegin >= line.length()) {
/* 251 */       throw new RemoteScpException(""Malformed T line sent by remote SCP binary, line not enough data."");
/*     */     }
/*     */ 
/*     */     
/* 255 */     int secondMsecBegin = line.indexOf("" "", atimeBegin + 1) + 1;
/* 256 */     if (secondMsecBegin == 0 || secondMsecBegin >= line.length()) {
/* 257 */       throw new RemoteScpException(""Malformed T line sent by remote SCP binary, line not enough data."");
/*     */     }
/*     */ 
/*     */     
/*     */     try {
/* 262 */       modtime = Long.parseLong(line.substring(0, firstMsecBegin - 1));
/* 263 */       firstMsec = Long.parseLong(line.substring(firstMsecBegin, atimeBegin - 1));
/* 264 */       atime = Long.parseLong(line.substring(atimeBegin, secondMsecBegin - 1));
/* 265 */       secondMsec = Long.parseLong(line.substring(secondMsecBegin));
/* 266 */     } catch (NumberFormatException e) {
/* 267 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary, cannot parse file length."");
/*     */     } 
/*     */ 
/*     */     
/* 271 */     if (modtime < 0L || firstMsec < 0L || atime < 0L || secondMsec < 0L) {
/* 272 */       throw new RemoteScpException(""Malformed C line sent by remote SCP binary, illegal file length."");
/*     */     }
/*     */ 
/*     */     
/* 276 */     fileInfo.setLastModified(modtime);
/*     */   }
/*     */ 
/*     */   
/*     */   private void sendFile(Channel channel, String localFile, String remoteName, String mode) throws IOException, RemoteScpException {
/* 281 */     byte[] buffer = new byte[65536];
/*     */     
/* 283 */     OutputStream os = new BufferedOutputStream(channel.getOutputStream(), 40000);
/*     */     
/* 285 */     InputStream is = new BufferedInputStream(channel.getInputStream(), 512);
/*     */ 
/*     */     
/*     */     try {
/* 289 */       if (channel.isConnected()) {
/* 290 */         channel.start();
/*     */       } else {
/* 292 */         channel.connect();
/*     */       } 
/* 294 */     } catch (JSchException e1) {
/* 295 */       throw (IOException)(new IOException(""Channel connection problems"")).initCause((Throwable)e1);
/*     */     } 
/*     */     
/* 298 */     readResponse(is);
/*     */     
/* 300 */     File f = new File(localFile);
/* 301 */     long remain = f.length();
/*     */     
/* 303 */     String cMode = mode;
/* 304 */     if (cMode == null) {
/* 305 */       cMode = ""0600"";
/*     */     }
/* 307 */     String cline = ""C"" + cMode + "" "" + remain + "" "" + remoteName + ""\n"";
/*     */     
/* 309 */     os.write(cline.getBytes());
/* 310 */     os.flush();
/*     */     
/* 312 */     readResponse(is);
/*     */     
/* 314 */     FileInputStream fis = null;
/*     */     
/*     */     try {
/* 317 */       fis = new FileInputStream(f);
/*     */       
/* 319 */       while (remain > 0L) {
/*     */         int trans;
/* 321 */         if (remain > buffer.length) {
/* 322 */           trans = buffer.length;
/*     */         } else {
/* 324 */           trans = (int)remain;
/*     */         } 
/* 326 */         if (fis.read(buffer, 0, trans) != trans) {
/* 327 */           throw new IOException(""Cannot read enough from local file "" + localFile);
/*     */         }
/*     */         
/* 330 */         os.write(buffer, 0, trans);
/*     */         
/* 332 */         remain -= trans;
/*     */       } 
/*     */       
/* 335 */       fis.close();
/* 336 */     } catch (IOException e) {
/* 337 */       if (fis != null) {
/* 338 */         fis.close();
/*     */       }
/* 340 */       throw e;
/*     */     } 
/*     */     
/* 343 */     os.write(0);
/* 344 */     os.flush();
/*     */     
/* 346 */     readResponse(is);
/*     */     
/* 348 */     os.write(""E\n"".getBytes());
/* 349 */     os.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private FileInfo receiveStream(Channel channel, String file, OutputStream targetStream) throws IOException, RemoteScpException {
/*     */     String line;
/*     */     int c;
/* 369 */     byte[] buffer = new byte[65536];
/*     */     
/* 371 */     OutputStream os = channel.getOutputStream();
/* 372 */     InputStream is = channel.getInputStream();
/*     */     try {
/* 374 */       if (channel.isConnected()) {
/* 375 */         channel.start();
/*     */       } else {
/* 377 */         channel.connect();
/*     */       } 
/* 379 */     } catch (JSchException e1) {
/* 380 */       throw (IOException)(new IOException(""Channel connection problems"")).initCause((Throwable)e1);
/*     */     } 
/* 382 */     os.write(0);
/* 383 */     os.flush();
/*     */     
/* 385 */     FileInfo fileInfo = new FileInfo();
/*     */     
/*     */     while (true) {
/* 388 */       c = is.read();
/* 389 */       if (c < 0) {
/* 390 */         throw new RemoteScpException(""Remote scp terminated unexpectedly."");
/*     */       }
/*     */       
/* 393 */       line = receiveLine(is);
/*     */       
/* 395 */       if (c == 84) {
/* 396 */         parseTLine(line, fileInfo);
/* 397 */         os.write(0);
/* 398 */         os.flush(); continue;
/*     */       }  break;
/*     */     } 
/* 401 */     if (c == 1 || c == 2) {
/* 402 */       throw new RemoteScpException(""Remote SCP error: "" + line);
/*     */     }
/*     */     
/* 405 */     if (c == 67) {
/* 406 */       parseCLine(line, fileInfo);
/*     */     } else {
/*     */       
/* 409 */       throw new RemoteScpException(""Remote SCP error: "" + (char)c + line);
/*     */     } 
/* 411 */     if (targetStream != null) {
/*     */       
/* 413 */       os.write(0);
/* 414 */       os.flush();
/*     */       
/*     */       try {
/* 417 */         long remain = fileInfo.getLength();
/*     */         
/* 419 */         while (remain > 0L) {
/*     */           int trans;
/* 421 */           if (remain > buffer.length) {
/* 422 */             trans = buffer.length;
/*     */           } else {
/* 424 */             trans = (int)remain;
/*     */           } 
/*     */           
/* 427 */           int thisTimeReceived = is.read(buffer, 0, trans);
/*     */           
/* 429 */           if (thisTimeReceived < 0) {
/* 430 */             throw new IOException(""Remote scp terminated connection unexpectedly"");
/*     */           }
/*     */           
/* 433 */           targetStream.write(buffer, 0, thisTimeReceived);
/*     */           
/* 435 */           remain -= thisTimeReceived;
/*     */         } 
/*     */         
/* 438 */         targetStream.close();
/* 439 */       } catch (IOException e) {
/* 440 */         if (targetStream != null) {
/* 441 */           targetStream.close();
/*     */         }
/* 443 */         throw e;
/*     */       } 
/*     */       
/* 446 */       readResponse(is);
/*     */       
/* 448 */       os.write(0);
/* 449 */       os.flush();
/*     */     } 
/* 451 */     return fileInfo;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ChannelExec getExecChannel() throws JSchException {
/* 460 */     ChannelExec channel = (ChannelExec)this.session.openChannel(""exec"");
/* 461 */     return channel;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(String localFile, String remoteTargetDir, String remoteTargetName, String mode) throws IOException, RemoteScpException {
/* 483 */     ChannelExec channel = null;
/*     */     
/* 485 */     if (localFile == null || remoteTargetName == null) {
/* 486 */       throw new IllegalArgumentException(""Null argument."");
/*     */     }
/*     */     
/* 489 */     if (mode != null) {
/* 490 */       if (mode.length() != 4) {
/* 491 */         throw new IllegalArgumentException(""Invalid mode."");
/*     */       }
/*     */       
/* 494 */       for (int i = 0; i < mode.length(); i++) {
/* 495 */         if (!Character.isDigit(mode.charAt(i))) {
/* 496 */           throw new IllegalArgumentException(""Invalid mode."");
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 501 */     String cmd = ""scp -t "";
/* 502 */     if (mode != null) {
/* 503 */       cmd = cmd + ""-p "";
/*     */     }
/* 505 */     if (remoteTargetDir != null && remoteTargetDir.length() > 0) {
/* 506 */       cmd = cmd + ""-d "" + remoteTargetDir;
/*     */     }
/*     */     
/*     */     try {
/* 510 */       channel = getExecChannel();
/* 511 */       channel.setCommand(cmd);
/* 512 */       sendFile((Channel)channel, localFile, remoteTargetName, mode);
/* 513 */       channel.disconnect();
/* 514 */     } catch (JSchException e) {
/* 515 */       if (channel != null) {
/* 516 */         channel.disconnect();
/*     */       }
/* 518 */       throw (IOException)(new IOException(""Error during SCP transfer."" + e.getMessage())).initCause((Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void get(String remoteFile, String localTarget) throws IOException, RemoteScpException {
/* 536 */     File f = new File(localTarget);
/* 537 */     FileOutputStream fop = new FileOutputStream(f);
/* 538 */     get(remoteFile, fop);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void get(String remoteFile, OutputStream localTarget) throws IOException, RemoteScpException {
/* 555 */     ChannelExec channel = null;
/*     */     
/* 557 */     if (remoteFile == null || localTarget == null) {
/* 558 */       throw new IllegalArgumentException(""Null argument."");
/*     */     }
/*     */     
/* 561 */     String cmd = ""scp -p -f "" + remoteFile;
/*     */     
/*     */     try {
/* 564 */       channel = getExecChannel();
/* 565 */       channel.setCommand(cmd);
/* 566 */       receiveStream((Channel)channel, remoteFile, localTarget);
/* 567 */       channel.disconnect();
/* 568 */     } catch (JSchException e) {
/* 569 */       if (channel != null) {
/* 570 */         channel.disconnect();
/*     */       }
/* 572 */       throw (IOException)(new IOException(""Error during SCP transfer."" + e.getMessage())).initCause((Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileInfo getFileinfo(String remoteFile) throws IOException, RemoteScpException {
/* 589 */     ChannelExec channel = null;
/* 590 */     FileInfo fileInfo = null;
/*     */     
/* 592 */     if (remoteFile == null) {
/* 593 */       throw new IllegalArgumentException(""Null argument."");
/*     */     }
/*     */     
/* 596 */     String cmd = ""scp -p -f \"""" + remoteFile + ""\"""";
/*     */     
/*     */     try {
/* 599 */       channel = getExecChannel();
/* 600 */       channel.setCommand(cmd);
/* 601 */       fileInfo = receiveStream((Channel)channel, remoteFile, null);
/* 602 */       channel.disconnect();
/* 603 */     } catch (JSchException e) {
/* 604 */       throw (IOException)(new IOException(""Error during SCP transfer."" + e.getMessage())).initCause((Throwable)e);
/*     */     } finally {
/*     */       
/* 607 */       if (channel != null) {
/* 608 */         channel.disconnect();
/*     */       }
/*     */     } 
/* 611 */     return fileInfo;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\Scp.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.SshCache,"/*     */ package org.apache.ivy.plugins.repository.ssh;
/*     */ 
/*     */ import com.jcraft.jsch.ChannelSftp;
/*     */ import com.jcraft.jsch.JSch;
/*     */ import com.jcraft.jsch.JSchException;
/*     */ import com.jcraft.jsch.Session;
/*     */ import com.jcraft.jsch.UIKeyboardInteractive;
/*     */ import com.jcraft.jsch.UserInfo;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.HashMap;
/*     */ import java.util.Locale;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.event.IvyListener;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Credentials;
/*     */ import org.apache.ivy.util.CredentialsUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class SshCache
/*     */ {
/*     */   private static final int SSH_DEFAULT_PORT = 22;
/*  54 */   private static SshCache instance = new SshCache();
/*     */ 
/*     */   
/*  57 */   public static SshCache getInstance() { return instance; }
/*     */   
/*     */   private class Entry
/*     */   {
/*  61 */     private Session session = null;
/*     */     
/*  63 */     private ChannelSftp channelSftp = null;
/*     */     
/*  65 */     private String host = null;
/*     */     
/*  67 */     private String user = null;
/*     */     
/*  69 */     private int port = 22;
/*     */ 
/*     */     
/*     */     private final SshCache this$0;
/*     */ 
/*     */     
/*  75 */     public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  82 */     public int getPort() { return this.port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  89 */     public String getUser() { return this.user; }
/*     */ 
/*     */     
/*     */     public Entry(Session newSession, String newUser, String newHost, int newPort) {
/*  93 */       this.session = newSession;
/*  94 */       this.host = newHost;
/*  95 */       this.user = newUser;
/*  96 */       this.port = newPort;
/*  97 */       IvyContext.getContext().getEventManager().addIvyListener(new IvyListener() {
/*     */             public void progress(IvyEvent event) {
/*  99 */               event.getSource().removeIvyListener(this);
/* 100 */               SshCache.Entry.access$100(SshCache.Entry.this).clearSession(SshCache.Entry.this.session);
/*     */             }
/*     */ 
/*     */             
/*     */             private final SshCache val$this$0;
/*     */             
/*     */             private final SshCache.Entry this$1;
/*     */           },  ""post-resolve"");
/*     */     }
/*     */ 
/*     */     
/*     */     public void setChannelSftp(ChannelSftp newChannel) {
/* 112 */       if (this.channelSftp != null && newChannel != null) {
/* 113 */         throw new IllegalStateException(""Only one sftp channelSftp per session allowed"");
/*     */       }
/* 115 */       this.channelSftp = newChannel;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 122 */     public ChannelSftp getChannelSftp() { return this.channelSftp; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 129 */     private Session getSession() { return this.session; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void releaseChannelSftp() {
/* 136 */       if (this.channelSftp != null && 
/* 137 */         this.channelSftp.isConnected()) {
/* 138 */         Message.verbose("":: SFTP :: closing sftp connection from "" + this.host + ""..."");
/* 139 */         this.channelSftp.disconnect();
/* 140 */         this.channelSftp = null;
/* 141 */         Message.verbose("":: SFTP :: sftp connection closed from "" + this.host);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   private Map uriCacheMap = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   private Map sessionCacheMap = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   private Entry getCacheEntry(String user, String host, int port) { return (Entry)this.uriCacheMap.get(createCacheKey(user, host, port)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String createCacheKey(String user, String host, int port) {
/* 182 */     String portToUse = ""22"";
/* 183 */     if (port != -1 && port != 22) {
/* 184 */       portToUse = Integer.toString(port);
/*     */     }
/* 186 */     return user.toLowerCase(Locale.US).trim() + ""@"" + host.toLowerCase(Locale.US).trim() + "":"" + portToUse;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   private Entry getCacheEntry(Session session) { return (Entry)this.sessionCacheMap.get(session); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setSession(String user, String host, int port, Session newSession) {
/* 215 */     Entry entry = (Entry)this.uriCacheMap.get(createCacheKey(user, host, port));
/* 216 */     Session oldSession = null;
/* 217 */     if (entry != null) {
/* 218 */       oldSession = entry.getSession();
/*     */     }
/* 220 */     if (oldSession != null && !oldSession.equals(newSession) && oldSession.isConnected()) {
/* 221 */       entry.releaseChannelSftp();
/* 222 */       String oldhost = oldSession.getHost();
/* 223 */       Message.verbose("":: SSH :: closing ssh connection from "" + oldhost + ""..."");
/* 224 */       oldSession.disconnect();
/* 225 */       Message.verbose("":: SSH :: ssh connection closed from "" + oldhost);
/*     */     } 
/* 227 */     if (newSession == null && entry != null) {
/* 228 */       this.uriCacheMap.remove(createCacheKey(user, host, port));
/* 229 */       if (entry.getSession() != null) {
/* 230 */         this.sessionCacheMap.remove(entry.getSession());
/*     */       }
/*     */     } else {
/* 233 */       Entry newEntry = new Entry(newSession, user, host, port);
/* 234 */       this.uriCacheMap.put(createCacheKey(user, host, port), newEntry);
/* 235 */       this.sessionCacheMap.put(newSession, newEntry);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void clearSession(Session session) {
/* 246 */     Entry entry = (Entry)this.sessionCacheMap.get(session);
/* 247 */     if (entry != null) {
/* 248 */       setSession(entry.getUser(), entry.getHost(), entry.getPort(), null);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ChannelSftp getChannelSftp(Session session) throws IOException {
/* 260 */     ChannelSftp channel = null;
/* 261 */     Entry entry = getCacheEntry(session);
/* 262 */     if (entry != null) {
/* 263 */       channel = entry.getChannelSftp();
/* 264 */       if (channel != null && !channel.isConnected()) {
/* 265 */         entry.releaseChannelSftp();
/* 266 */         channel = null;
/*     */       } 
/*     */     } 
/* 269 */     return channel;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void attachChannelSftp(Session session, ChannelSftp channel) {
/* 281 */     Entry entry = getCacheEntry(session);
/* 282 */     if (entry == null) {
/* 283 */       throw new IllegalArgumentException(""No entry for "" + session + "" in the cache"");
/*     */     }
/* 285 */     entry.setChannelSftp(channel);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Session getSession(String host, int port, String username, String userPassword, File pemFile, String pemPassword, File passFile) throws IOException {
/* 309 */     Checks.checkNotNull(host, ""host"");
/* 310 */     Checks.checkNotNull(username, ""user"");
/* 311 */     Entry entry = getCacheEntry(username, host, port);
/* 312 */     Session session = null;
/* 313 */     if (entry != null) {
/* 314 */       session = entry.getSession();
/*     */     }
/* 316 */     if (session == null || !session.isConnected()) {
/* 317 */       Message.verbose("":: SSH :: connecting to "" + host + ""..."");
/*     */       try {
/* 319 */         JSch jsch = new JSch();
/* 320 */         if (port != -1) {
/* 321 */           session = jsch.getSession(username, host, port);
/*     */         } else {
/* 323 */           session = jsch.getSession(username, host);
/*     */         } 
/* 325 */         if (pemFile != null) {
/* 326 */           jsch.addIdentity(pemFile.getAbsolutePath(), pemPassword);
/*     */         }
/* 328 */         session.setUserInfo(new CfUserInfo(host, username, userPassword, pemFile, pemPassword, passFile));
/*     */         
/* 330 */         session.connect();
/* 331 */         Message.verbose("":: SSH :: connected to "" + host + ""!"");
/* 332 */         setSession(username, host, port, session);
/* 333 */       } catch (JSchException e) {
/* 334 */         if (passFile != null && passFile.exists()) {
/* 335 */           passFile.delete();
/*     */         }
/* 337 */         IOException ex = new IOException(e.getMessage());
/* 338 */         ex.initCause((Throwable)e);
/* 339 */         throw ex;
/*     */       } 
/*     */     } 
/* 342 */     return session;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static class CfUserInfo
/*     */     implements UserInfo, UIKeyboardInteractive
/*     */   {
/*     */     private String userPassword;
/*     */     
/*     */     private String pemPassword;
/*     */     
/*     */     private String userName;
/*     */     
/*     */     private final File pemFile;
/*     */     
/*     */     private final String host;
/*     */     
/*     */     private final File passfile;
/*     */ 
/*     */     
/*     */     public CfUserInfo(String host, String userName, String userPassword, File pemFile, String pemPassword, File passfile) {
/* 364 */       this.userPassword = userPassword;
/* 365 */       this.pemPassword = pemPassword;
/* 366 */       this.host = host;
/* 367 */       this.passfile = passfile;
/* 368 */       this.userName = userName;
/* 369 */       this.pemFile = pemFile;
/*     */     }
/*     */ 
/*     */     
/* 373 */     public void showMessage(String message) { Message.info(message); }
/*     */ 
/*     */ 
/*     */     
/* 377 */     public boolean promptYesNo(String message) { return true; }
/*     */ 
/*     */ 
/*     */     
/* 381 */     public boolean promptPassword(String message) { return true; }
/*     */ 
/*     */ 
/*     */     
/* 385 */     public boolean promptPassphrase(String message) { return true; }
/*     */ 
/*     */     
/*     */     public String getPassword() {
/* 389 */       if (this.userPassword == null) {
/* 390 */         Credentials c = CredentialsUtil.promptCredentials(new Credentials(null, this.host, this.userName, this.userPassword), this.passfile);
/*     */         
/* 392 */         if (c != null) {
/* 393 */           this.userName = c.getUserName();
/* 394 */           this.userPassword = c.getPasswd();
/*     */         } 
/*     */       } 
/* 397 */       return this.userPassword;
/*     */     }
/*     */     
/*     */     public String getPassphrase() {
/* 401 */       if (this.pemPassword == null && this.pemFile != null) {
/* 402 */         Credentials c = CredentialsUtil.promptCredentials(new Credentials(null, this.pemFile.getAbsolutePath(), this.userName, this.pemPassword), this.passfile);
/*     */         
/* 404 */         if (c != null) {
/* 405 */           this.userName = c.getUserName();
/* 406 */           this.pemPassword = c.getPasswd();
/*     */         } 
/*     */       } 
/* 409 */       return this.pemPassword;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 414 */     public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt, boolean[] echo) { return new String[] { getPassword() }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\SshCache.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.SshRepository,"/*     */ package org.apache.ivy.plugins.repository.ssh;
/*     */ 
/*     */ import com.jcraft.jsch.ChannelExec;
/*     */ import com.jcraft.jsch.JSchException;
/*     */ import com.jcraft.jsch.Session;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.StringReader;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SshRepository
/*     */   extends AbstractSshBasedRepository
/*     */ {
/*     */   private static final int BUFFER_SIZE = 65536;
/*     */   private static final String ARGUMENT_PLACEHOLDER = ""%arg"";
/*     */   private static final int POLL_SLEEP_TIME = 500;
/*  50 */   private char fileSeparator = '/';
/*     */   
/*  52 */   private String listCommand = ""ls -1"";
/*     */   
/*  54 */   private String existCommand = ""ls"";
/*     */   
/*  56 */   private String createDirCommand = ""mkdir"";
/*     */   
/*  58 */   private String publishPermissions = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource getResource(String source) {
/*  64 */     Message.debug(""SShRepository:getResource called: "" + source);
/*  65 */     return new SshResource(this, source);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public SshResource resolveResource(String source) {
/*  78 */     Message.debug(""SShRepository:resolveResource called: "" + source);
/*  79 */     SshResource result = null;
/*  80 */     Session session = null;
/*     */     try {
/*  82 */       session = getSession(source);
/*  83 */       Scp myCopy = new Scp(session);
/*  84 */       Scp.FileInfo fileInfo = myCopy.getFileinfo((new URI(source)).getPath());
/*  85 */       result = new SshResource(this, source, true, fileInfo.getLength(), fileInfo.getLastModified());
/*     */     }
/*  87 */     catch (IOException e) {
/*  88 */       if (session != null) {
/*  89 */         releaseSession(session, source);
/*     */       }
/*  91 */       result = new SshResource();
/*  92 */     } catch (URISyntaxException e) {
/*  93 */       if (session != null) {
/*  94 */         releaseSession(session, source);
/*     */       }
/*  96 */       result = new SshResource();
/*  97 */     } catch (RemoteScpException e) {
/*  98 */       result = new SshResource();
/*     */     } 
/* 100 */     Message.debug(""SShRepository:resolveResource end."");
/* 101 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readSessionOutput(ChannelExec channel, StringBuffer strStdout, StringBuffer strStderr) throws IOException {
/* 118 */     InputStream stdout = channel.getInputStream();
/* 119 */     InputStream stderr = channel.getErrStream();
/*     */     
/*     */     try {
/* 122 */       channel.connect();
/* 123 */     } catch (JSchException e1) {
/* 124 */       throw (IOException)(new IOException(""Channel connection problems"")).initCause((Throwable)e1);
/*     */     } 
/*     */     
/* 127 */     byte[] buffer = new byte[65536];
/*     */     while (true) {
/* 129 */       int avail = 0;
/* 130 */       while ((avail = stdout.available()) > 0) {
/* 131 */         int len = stdout.read(buffer, 0, (avail > 65535) ? 65536 : avail);
/* 132 */         strStdout.append(new String(buffer, 0, len));
/*     */       } 
/* 134 */       while ((avail = stderr.available()) > 0) {
/* 135 */         int len = stderr.read(buffer, 0, (avail > 65535) ? 65536 : avail);
/* 136 */         strStderr.append(new String(buffer, 0, len));
/*     */       } 
/* 138 */       if (channel.isClosed()) {
/*     */         break;
/*     */       }
/*     */       try {
/* 142 */         Thread.sleep(500L);
/* 143 */       } catch (Exception ee) {}
/*     */     } 
/*     */ 
/*     */     
/* 147 */     int avail = 0;
/* 148 */     while ((avail = stdout.available()) > 0) {
/* 149 */       int len = stdout.read(buffer, 0, (avail > 65535) ? 65536 : avail);
/* 150 */       strStdout.append(new String(buffer, 0, len));
/*     */     } 
/* 152 */     while ((avail = stderr.available()) > 0) {
/* 153 */       int len = stderr.read(buffer, 0, (avail > 65535) ? 65536 : avail);
/* 154 */       strStderr.append(new String(buffer, 0, len));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List list(String parent) throws IOException {
/* 164 */     Message.debug(""SShRepository:list called: "" + parent);
/* 165 */     ArrayList result = new ArrayList();
/* 166 */     Session session = null;
/* 167 */     ChannelExec channel = null;
/* 168 */     session = getSession(parent);
/* 169 */     channel = getExecChannel(session);
/* 170 */     URI parentUri = null;
/*     */     try {
/* 172 */       parentUri = new URI(parent);
/* 173 */     } catch (URISyntaxException e1) {}
/*     */ 
/*     */     
/* 176 */     String fullCmd = replaceArgument(this.listCommand, parentUri.getPath());
/* 177 */     channel.setCommand(fullCmd);
/* 178 */     StringBuffer stdOut = new StringBuffer();
/* 179 */     StringBuffer stdErr = new StringBuffer();
/* 180 */     readSessionOutput(channel, stdOut, stdErr);
/* 181 */     if (channel.getExitStatus() != 0) {
/* 182 */       Message.error(""Ssh ListCommand exited with status != 0"");
/* 183 */       Message.error(stdErr.toString());
/* 184 */       return null;
/*     */     } 
/* 186 */     BufferedReader br = new BufferedReader(new StringReader(stdOut.toString()));
/* 187 */     String line = null;
/* 188 */     while ((line = br.readLine()) != null) {
/* 189 */       result.add(line);
/*     */     }
/*     */     
/* 192 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ChannelExec getExecChannel(Session session) throws IOException {
/*     */     ChannelExec channel;
/*     */     try {
/* 203 */       channel = (ChannelExec)session.openChannel(""exec"");
/* 204 */     } catch (JSchException e) {
/* 205 */       throw new IOException();
/*     */     } 
/* 207 */     return channel;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String replaceArgument(String command, String argument) {
/*     */     String fullCmd;
/* 221 */     if (command.indexOf(""%arg"") == -1) {
/* 222 */       fullCmd = command + "" "" + argument;
/*     */     } else {
/* 224 */       fullCmd = command.replaceAll(""%arg"", argument);
/*     */     } 
/* 226 */     return fullCmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(File source, String destination, boolean overwrite) throws IOException {
/* 235 */     Message.debug(""SShRepository:put called: "" + destination);
/* 236 */     Session session = getSession(destination); try {
/*     */       String name, path;
/* 238 */       URI destinationUri = null;
/*     */       try {
/* 240 */         destinationUri = new URI(destination);
/* 241 */       } catch (URISyntaxException e) {}
/*     */ 
/*     */       
/* 244 */       String filePath = destinationUri.getPath();
/* 245 */       int lastSep = filePath.lastIndexOf(this.fileSeparator);
/*     */ 
/*     */       
/* 248 */       if (lastSep == -1) {
/* 249 */         name = filePath;
/* 250 */         path = null;
/*     */       } else {
/* 252 */         name = filePath.substring(lastSep + 1);
/* 253 */         path = filePath.substring(0, lastSep);
/*     */       } 
/* 255 */       if (!overwrite && 
/* 256 */         checkExistence(filePath, session)) {
/* 257 */         throw new IOException(""destination file exists and overwrite == false"");
/*     */       }
/*     */       
/* 260 */       if (path != null) {
/* 261 */         makePath(path, session);
/*     */       }
/* 263 */       Scp myCopy = new Scp(session);
/* 264 */       myCopy.put(source.getCanonicalPath(), path, name, this.publishPermissions);
/* 265 */     } catch (IOException e) {
/* 266 */       if (session != null) {
/* 267 */         releaseSession(session, destination);
/*     */       }
/* 269 */       throw e;
/* 270 */     } catch (RemoteScpException e) {
/* 271 */       throw new IOException(e.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void makePath(String path, Session session) throws IOException {
/* 284 */     ChannelExec channel = null;
/* 285 */     String trimmed = path;
/*     */     try {
/* 287 */       while (trimmed.length() > 0 && trimmed.charAt(trimmed.length() - 1) == this.fileSeparator) {
/* 288 */         trimmed = trimmed.substring(0, trimmed.length() - 1);
/*     */       }
/* 290 */       if (trimmed.length() == 0 || checkExistence(trimmed, session)) {
/*     */         return;
/*     */       }
/* 293 */       int nextSlash = trimmed.lastIndexOf(this.fileSeparator);
/* 294 */       if (nextSlash > 0) {
/* 295 */         String parent = trimmed.substring(0, nextSlash);
/* 296 */         makePath(parent, session);
/*     */       } 
/* 298 */       channel = getExecChannel(session);
/* 299 */       String mkdir = replaceArgument(this.createDirCommand, trimmed);
/* 300 */       Message.debug(""SShRepository: trying to create path: "" + mkdir);
/* 301 */       channel.setCommand(mkdir);
/* 302 */       StringBuffer stdOut = new StringBuffer();
/* 303 */       StringBuffer stdErr = new StringBuffer();
/* 304 */       readSessionOutput(channel, stdOut, stdErr);
/*     */     } finally {
/* 306 */       if (channel != null) {
/* 307 */         channel.disconnect();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkExistence(String filePath, Session session) throws IOException {
/* 322 */     Message.debug(""SShRepository: checkExistence called: "" + filePath);
/* 323 */     ChannelExec channel = null;
/* 324 */     channel = getExecChannel(session);
/* 325 */     String fullCmd = replaceArgument(this.existCommand, filePath);
/* 326 */     channel.setCommand(fullCmd);
/* 327 */     StringBuffer stdOut = new StringBuffer();
/* 328 */     StringBuffer stdErr = new StringBuffer();
/* 329 */     readSessionOutput(channel, stdOut, stdErr);
/* 330 */     return (channel.getExitStatus() == 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void get(String source, File destination) throws IOException {
/* 339 */     Message.debug(""SShRepository:get called: "" + source + "" to "" + destination.getCanonicalPath());
/*     */     
/* 341 */     if (destination.getParentFile() != null) {
/* 342 */       destination.getParentFile().mkdirs();
/*     */     }
/* 344 */     Session session = getSession(source);
/*     */     try {
/* 346 */       URI sourceUri = null;
/*     */       try {
/* 348 */         sourceUri = new URI(source);
/* 349 */       } catch (URISyntaxException e) {}
/*     */ 
/*     */       
/* 352 */       if (sourceUri == null) {
/* 353 */         Message.error(""could not parse URI "" + source);
/*     */         return;
/*     */       } 
/* 356 */       Scp myCopy = new Scp(session);
/* 357 */       myCopy.get(sourceUri.getPath(), destination.getCanonicalPath());
/* 358 */     } catch (IOException e) {
/* 359 */       if (session != null) {
/* 360 */         releaseSession(session, source);
/*     */       }
/* 362 */       throw e;
/* 363 */     } catch (RemoteScpException e) {
/* 364 */       throw new IOException(e.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 376 */   public void setListCommand(String cmd) { this.listCommand = cmd.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public String getListCommand() { return this.listCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 390 */   public String getCreateDirCommand() { return this.createDirCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 398 */   public void setCreateDirCommand(String createDirCommand) { this.createDirCommand = createDirCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public String getExistCommand() { return this.existCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 413 */   public void setExistCommand(String existCommand) { this.existCommand = existCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   public void setFileSeparator(char fileSeparator) { this.fileSeparator = fileSeparator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 433 */   public void setPublishPermissions(String permissions) { this.publishPermissions = permissions; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 441 */   protected String getRepositoryScheme() { return ""ssh""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public InputStream openStream(SshResource resource) throws IOException {
/* 452 */     Session session = getSession(resource.getName());
/* 453 */     Scp scp = new Scp(session);
/* 454 */     ByteArrayOutputStream os = new ByteArrayOutputStream();
/*     */     try {
/* 456 */       scp.get(resource.getName(), os);
/* 457 */     } catch (IOException e) {
/* 458 */       if (session != null) {
/* 459 */         releaseSession(session, resource.getName());
/*     */       }
/* 461 */       throw e;
/* 462 */     } catch (RemoteScpException e) {
/* 463 */       throw new IOException(e.getMessage());
/*     */     } 
/* 465 */     return new ByteArrayInputStream(os.toByteArray());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\SshRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.ssh.SshResource,"/*     */ package org.apache.ivy.plugins.repository.ssh;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SshResource
/*     */   implements Resource
/*     */ {
/*     */   private boolean resolved = false;
/*  33 */   private String uri = null;
/*     */   
/*     */   private boolean bExists = false;
/*     */   
/*  37 */   private long len = 0L;
/*     */   
/*  39 */   private long lastModified = 0L;
/*     */   
/*  41 */   private SshRepository repository = null;
/*     */ 
/*     */   
/*  44 */   public SshResource() { this.resolved = true; }
/*     */ 
/*     */   
/*     */   public SshResource(SshRepository repository, String uri) {
/*  48 */     this.uri = uri;
/*  49 */     this.repository = repository;
/*  50 */     this.resolved = false;
/*     */   }
/*     */ 
/*     */   
/*     */   public SshResource(SshRepository repository, String uri, boolean bExists, long len, long lastModified) {
/*  55 */     this.uri = uri;
/*  56 */     this.bExists = bExists;
/*  57 */     this.len = len;
/*  58 */     this.lastModified = lastModified;
/*  59 */     this.repository = repository;
/*  60 */     this.resolved = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean exists() {
/*  69 */     if (!this.resolved) {
/*  70 */       resolve();
/*     */     }
/*  72 */     return this.bExists;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long getContentLength() {
/*  81 */     if (!this.resolved) {
/*  82 */       resolve();
/*     */     }
/*  84 */     return this.len;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long getLastModified() {
/*  93 */     if (!this.resolved) {
/*  94 */       resolve();
/*     */     }
/*  96 */     return this.lastModified;
/*     */   }
/*     */   
/*     */   private void resolve() {
/* 100 */     Message.debug(""SShResource: resolving "" + this.uri);
/* 101 */     SshResource res = this.repository.resolveResource(this.uri);
/* 102 */     this.len = res.getContentLength();
/* 103 */     this.lastModified = res.getLastModified();
/* 104 */     this.bExists = res.exists();
/* 105 */     this.resolved = true;
/* 106 */     Message.debug(""SShResource: resolved "" + this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public String getName() { return this.uri; }
/*     */ 
/*     */   
/*     */   public String toString() {
/* 119 */     StringBuffer buffer = new StringBuffer();
/* 120 */     buffer.append(""SshResource:"");
/* 121 */     buffer.append(this.uri);
/* 122 */     buffer.append("" ("");
/* 123 */     buffer.append(this.len);
/* 124 */     buffer.append("")]"");
/* 125 */     return buffer.toString();
/*     */   }
/*     */ 
/*     */   
/* 129 */   public boolean isLocal() { return false; }
/*     */ 
/*     */ 
/*     */   
/* 133 */   public Resource clone(String cloneName) { return new SshResource(this.repository, cloneName); }
/*     */ 
/*     */ 
/*     */   
/* 137 */   public InputStream openStream() throws IOException { return this.repository.openStream(this); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\ssh\SshResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.url.URLRepository,"/*     */ package org.apache.ivy.plugins.repository.url;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.plugins.repository.RepositoryCopyProgressListener;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.url.ApacheURLLister;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class URLRepository
/*     */   extends AbstractRepository
/*     */ {
/*  40 */   private RepositoryCopyProgressListener progress = new RepositoryCopyProgressListener(this);
/*     */   
/*  42 */   private Map resourcesCache = new HashMap();
/*     */   
/*     */   public Resource getResource(String source) throws IOException {
/*  45 */     Resource res = (Resource)this.resourcesCache.get(source);
/*  46 */     if (res == null) {
/*  47 */       res = new URLResource(new URL(source));
/*  48 */       this.resourcesCache.put(source, res);
/*     */     } 
/*  50 */     return res;
/*     */   }
/*     */   
/*     */   public void get(String source, File destination) throws IOException {
/*  54 */     fireTransferInitiated(getResource(source), 5);
/*     */     try {
/*  56 */       Resource res = getResource(source);
/*  57 */       long totalLength = res.getContentLength();
/*  58 */       if (totalLength > 0L) {
/*  59 */         this.progress.setTotalLength(new Long(totalLength));
/*     */       }
/*  61 */       FileUtil.copy(new URL(source), destination, (CopyProgressListener)this.progress);
/*  62 */     } catch (IOException ex) {
/*  63 */       fireTransferError(ex);
/*  64 */       throw ex;
/*  65 */     } catch (RuntimeException ex) {
/*  66 */       fireTransferError(ex);
/*  67 */       throw ex;
/*     */     } finally {
/*  69 */       this.progress.setTotalLength(null);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void put(File source, String destination, boolean overwrite) throws IOException {
/*  74 */     if (!overwrite) {
/*  75 */       throw new UnsupportedOperationException(""URL repository do not support append operations at the moment"");
/*     */     }
/*     */ 
/*     */     
/*  79 */     fireTransferInitiated(getResource(destination), 6);
/*     */     try {
/*  81 */       long totalLength = source.length();
/*  82 */       if (totalLength > 0L) {
/*  83 */         this.progress.setTotalLength(new Long(totalLength));
/*     */       }
/*  85 */       FileUtil.copy(source, new URL(destination), (CopyProgressListener)this.progress);
/*  86 */     } catch (IOException ex) {
/*  87 */       fireTransferError(ex);
/*  88 */       throw ex;
/*  89 */     } catch (RuntimeException ex) {
/*  90 */       fireTransferError(ex);
/*  91 */       throw ex;
/*     */     } finally {
/*  93 */       this.progress.setTotalLength(null);
/*     */     } 
/*     */   }
/*     */   
/*  97 */   private ApacheURLLister lister = new ApacheURLLister();
/*     */   
/*     */   public List list(String parent) throws IOException {
/* 100 */     if (parent.startsWith(""http"")) {
/* 101 */       List urls = this.lister.listAll(new URL(parent));
/* 102 */       if (urls != null) {
/* 103 */         List ret = new ArrayList(urls.size());
/* 104 */         for (ListIterator iter = urls.listIterator(); iter.hasNext(); ) {
/* 105 */           URL url = iter.next();
/* 106 */           ret.add(url.toExternalForm());
/*     */         } 
/* 108 */         return ret;
/*     */       } 
/* 110 */     } else if (parent.startsWith(""file"")) {
/*     */       String path;
/*     */       try {
/* 113 */         path = (new URI(parent)).getPath();
/* 114 */       } catch (URISyntaxException e) {
/* 115 */         IOException ioe = new IOException(""Couldn't list content of '"" + parent + ""'"");
/* 116 */         ioe.initCause(e);
/* 117 */         throw ioe;
/*     */       } 
/*     */       
/* 120 */       File file = new File(path);
/* 121 */       if (file.exists() && file.isDirectory()) {
/* 122 */         String[] files = file.list();
/* 123 */         List ret = new ArrayList(files.length);
/* 124 */         URL context = path.endsWith(""/"") ? new URL(parent) : new URL(parent + ""/"");
/* 125 */         for (int i = 0; i < files.length; i++) {
/* 126 */           ret.add((new URL(context, files[i])).toExternalForm());
/*     */         }
/* 128 */         return ret;
/*     */       } 
/* 130 */       return Collections.EMPTY_LIST;
/*     */     } 
/*     */ 
/*     */     
/* 134 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repositor\\url\URLRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.url.URLResource,"/*    */ package org.apache.ivy.plugins.repository.url;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ import org.apache.ivy.util.url.URLHandler;
/*    */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class URLResource
/*    */   implements Resource
/*    */ {
/*    */   private URL url;
/*    */   private boolean init = false;
/*    */   private long lastModified;
/*    */   private long contentLength;
/*    */   private boolean exists;
/*    */   
/* 41 */   public URLResource(URL url) { this.url = url; }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public String getName() { return this.url.toExternalForm(); }
/*    */ 
/*    */   
/*    */   public Resource clone(String cloneName) {
/*    */     try {
/* 50 */       return new URLResource(new URL(cloneName));
/* 51 */     } catch (MalformedURLException e) {
/* 52 */       throw new IllegalArgumentException(""bad clone name provided: not suitable for an URLResource: "" + cloneName);
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public long getLastModified() {
/* 58 */     if (!this.init) {
/* 59 */       init();
/*    */     }
/* 61 */     return this.lastModified;
/*    */   }
/*    */   
/*    */   private void init() {
/* 65 */     URLHandler.URLInfo info = URLHandlerRegistry.getDefault().getURLInfo(this.url);
/* 66 */     this.contentLength = info.getContentLength();
/* 67 */     this.lastModified = info.getLastModified();
/* 68 */     this.exists = info.isReachable();
/* 69 */     this.init = true;
/*    */   }
/*    */   
/*    */   public long getContentLength() {
/* 73 */     if (!this.init) {
/* 74 */       init();
/*    */     }
/* 76 */     return this.contentLength;
/*    */   }
/*    */   
/*    */   public boolean exists() {
/* 80 */     if (!this.init) {
/* 81 */       init();
/*    */     }
/* 83 */     return this.exists;
/*    */   }
/*    */ 
/*    */   
/* 87 */   public URL getURL() { return this.url; }
/*    */ 
/*    */ 
/*    */   
/* 91 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 95 */   public boolean isLocal() { return false; }
/*    */ 
/*    */ 
/*    */   
/* 99 */   public InputStream openStream() throws IOException { return this.url.openStream(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repositor\\url\URLResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.vfs.VfsRepository,"/*     */ package org.apache.ivy.plugins.repository.vfs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.List;
/*     */ import org.apache.commons.vfs.FileContent;
/*     */ import org.apache.commons.vfs.FileObject;
/*     */ import org.apache.commons.vfs.FileSystemException;
/*     */ import org.apache.commons.vfs.FileSystemManager;
/*     */ import org.apache.commons.vfs.FileType;
/*     */ import org.apache.commons.vfs.impl.StandardFileSystemManager;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.plugins.repository.RepositoryCopyProgressListener;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class VfsRepository
/*     */   extends AbstractRepository
/*     */ {
/*     */   private static final String IVY_VFS_CONFIG = ""ivy_vfs.xml"";
/*  51 */   private StandardFileSystemManager manager = null;
/*     */   
/*  53 */   private final CopyProgressListener progress = (CopyProgressListener)new RepositoryCopyProgressListener(this);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private FileSystemManager getVFSManager() throws IOException {
/*  62 */     synchronized (this) {
/*  63 */       if (this.manager == null) {
/*  64 */         this.manager = createVFSManager();
/*     */       }
/*     */     } 
/*  67 */     return (FileSystemManager)this.manager;
/*     */   }
/*     */   
/*     */   private StandardFileSystemManager createVFSManager() throws IOException {
/*  71 */     StandardFileSystemManager result = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/*  79 */       result = new StandardFileSystemManager() {
/*     */           private final VfsRepository this$0;
/*     */           
/*     */           protected void configurePlugins() throws FileSystemException {}
/*     */         };
/*  84 */       result.setConfiguration(getClass().getResource(""ivy_vfs.xml""));
/*  85 */       result.init();
/*     */ 
/*     */       
/*  88 */       Message.verbose(""Available VFS schemes..."");
/*  89 */       String[] schemes = result.getSchemes();
/*  90 */       Arrays.sort((Object[])schemes);
/*  91 */       for (int i = 0; i < schemes.length; i++) {
/*  92 */         Message.verbose(""VFS Supported Scheme: "" + schemes[i]);
/*     */       }
/*  94 */     } catch (FileSystemException e) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 101 */       Message.error(""Unable to initialize VFS repository manager!"");
/* 102 */       Message.error(e.getLocalizedMessage());
/* 103 */       IOException error = new IOException(e.getLocalizedMessage());
/* 104 */       error.initCause((Throwable)e);
/* 105 */       throw error;
/*     */     } 
/*     */     
/* 108 */     return result;
/*     */   }
/*     */   
/*     */   protected void finalize() {
/* 112 */     if (this.manager != null) {
/* 113 */       this.manager.close();
/* 114 */       this.manager = null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public Resource getResource(String vfsURI) throws IOException { return new VfsResource(vfsURI, getVFSManager()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void get(String srcVfsURI, File destination) throws IOException {
/* 141 */     VfsResource src = new VfsResource(srcVfsURI, getVFSManager());
/* 142 */     fireTransferInitiated(src, 5);
/*     */     try {
/* 144 */       FileContent content = src.getContent();
/* 145 */       if (content == null) {
/* 146 */         throw new IllegalArgumentException(""invalid vfs uri "" + srcVfsURI + "": no content found"");
/*     */       }
/*     */       
/* 149 */       FileUtil.copy(content.getInputStream(), destination, this.progress);
/* 150 */     } catch (IOException ex) {
/* 151 */       fireTransferError(ex);
/* 152 */       throw ex;
/* 153 */     } catch (RuntimeException ex) {
/* 154 */       fireTransferError(ex);
/* 155 */       throw ex;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List list(String vfsURI) throws IOException {
/* 170 */     ArrayList list = new ArrayList();
/* 171 */     Message.debug(""list called for URI"" + vfsURI);
/* 172 */     FileObject resourceImpl = getVFSManager().resolveFile(vfsURI);
/* 173 */     Message.debug(""resourceImpl="" + resourceImpl.toString());
/* 174 */     Message.debug(""resourceImpl.exists()"" + resourceImpl.exists());
/* 175 */     Message.debug(""resourceImpl.getType()"" + resourceImpl.getType());
/* 176 */     Message.debug(""FileType.FOLDER"" + FileType.FOLDER);
/* 177 */     if (resourceImpl != null && resourceImpl.exists() && resourceImpl.getType() == FileType.FOLDER) {
/*     */       
/* 179 */       FileObject[] children = resourceImpl.getChildren();
/* 180 */       for (int i = 0; i < children.length; i++) {
/* 181 */         FileObject child = children[i];
/* 182 */         Message.debug(""child "" + i + child.getName().getURI());
/* 183 */         list.add(VfsResource.normalize(child.getName().getURI()));
/*     */       } 
/*     */     } 
/* 186 */     return list;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(File source, String vfsURI, boolean overwrite) throws IOException {
/* 202 */     VfsResource dest = new VfsResource(vfsURI, getVFSManager());
/* 203 */     fireTransferInitiated(dest, 6);
/* 204 */     if (dest.physicallyExists() && !overwrite) {
/* 205 */       throw new IOException(""Cannot copy. Destination file: "" + dest.getName() + "" exists and overwrite not set."");
/*     */     }
/*     */     
/* 208 */     if (dest.getContent() == null) {
/* 209 */       throw new IllegalArgumentException(""invalid vfs uri "" + vfsURI + "" to put data to: resource has no content"");
/*     */     }
/*     */ 
/*     */     
/* 213 */     FileUtil.copy(new FileInputStream(source), dest.getContent().getOutputStream(), this.progress);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\vfs\VfsRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.vfs.VfsResource,"/*     */ package org.apache.ivy.plugins.repository.vfs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.commons.vfs.FileContent;
/*     */ import org.apache.commons.vfs.FileObject;
/*     */ import org.apache.commons.vfs.FileSystemException;
/*     */ import org.apache.commons.vfs.FileSystemManager;
/*     */ import org.apache.commons.vfs.FileType;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.resolver.VfsResolver;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class VfsResource
/*     */   implements Resource
/*     */ {
/*     */   private String vfsURI;
/*     */   private FileSystemManager fsManager;
/*     */   private transient boolean init = false;
/*     */   private transient boolean exists;
/*     */   private transient long lastModified;
/*     */   private transient long contentLength;
/*  50 */   private transient FileContent content = null;
/*     */   
/*     */   private transient FileObject resourceImpl;
/*     */ 
/*     */   
/*     */   public VfsResource(String vfsURI, FileSystemManager fsManager) {
/*  56 */     this.vfsURI = vfsURI;
/*  57 */     this.fsManager = fsManager;
/*  58 */     this.init = false;
/*     */   }
/*     */   
/*     */   private void init() {
/*  62 */     if (!this.init) {
/*     */       try {
/*  64 */         this.resourceImpl = this.fsManager.resolveFile(this.vfsURI);
/*  65 */         this.content = this.resourceImpl.getContent();
/*     */         
/*  67 */         this.exists = this.resourceImpl.exists();
/*  68 */         this.lastModified = this.content.getLastModifiedTime();
/*  69 */         this.contentLength = this.content.getSize();
/*  70 */       } catch (FileSystemException e) {
/*  71 */         Message.verbose(e.getLocalizedMessage());
/*  72 */         this.exists = false;
/*  73 */         this.lastModified = 0L;
/*  74 */         this.contentLength = 0L;
/*     */       } 
/*     */       
/*  77 */       this.init = true;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List getChildren() {
/*  89 */     init();
/*  90 */     ArrayList list = new ArrayList();
/*     */     try {
/*  92 */       if (this.resourceImpl != null && this.resourceImpl.exists() && this.resourceImpl.getType() == FileType.FOLDER) {
/*     */         
/*  94 */         FileObject[] children = this.resourceImpl.getChildren();
/*  95 */         for (int i = 0; i < children.length; i++) {
/*  96 */           FileObject child = children[i];
/*  97 */           list.add(normalize(child.getName().getURI()));
/*     */         } 
/*     */       } 
/* 100 */     } catch (IOException e) {
/* 101 */       Message.verbose(e.getLocalizedMessage());
/*     */     } 
/* 103 */     return list;
/*     */   }
/*     */   
/*     */   public FileContent getContent() {
/* 107 */     init();
/* 108 */     return this.content;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public String getName() { return normalize(this.vfsURI); }
/*     */ 
/*     */ 
/*     */   
/* 121 */   public Resource clone(String cloneName) { return new VfsResource(cloneName, this.fsManager); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String normalize(String vfsURI) {
/* 132 */     if (vfsURI == null) {
/* 133 */       return """";
/*     */     }
/*     */     
/* 136 */     if (vfsURI.startsWith(""file:////"")) {
/* 137 */       vfsURI = vfsURI.replaceFirst(""////"", ""///"");
/*     */     }
/* 139 */     return vfsURI;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long getLastModified() {
/* 148 */     init();
/* 149 */     return this.lastModified;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long getContentLength() {
/* 158 */     init();
/* 159 */     return this.contentLength;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean exists() {
/* 169 */     init();
/* 170 */     return this.exists;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean physicallyExists() {
/* 181 */     init();
/*     */     
/*     */     try {
/* 184 */       return this.resourceImpl.exists();
/*     */ 
/*     */     
/*     */     }
/* 188 */     catch (Exception e) {
/* 189 */       Message.verbose(e.getLocalizedMessage());
/* 190 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 195 */   public String toString() { return VfsResolver.prepareForDisplay(getName()); }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public boolean isLocal() { return getName().startsWith(""file:""); }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public InputStream openStream() throws IOException { return getContent().getInputStream(); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\vfs\VfsResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.vsftp.VsftpRepository,"/*     */ package org.apache.ivy.plugins.repository.vsftp;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.Reader;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import java.util.Locale;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyThread;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.event.IvyListener;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.plugins.repository.BasicResource;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class VsftpRepository
/*     */   extends AbstractRepository
/*     */ {
/*     */   private static final int LS_DATE_INDEX4 = 7;
/*     */   private static final int LS_DATE_INDEX3 = 6;
/*     */   private static final int LS_DATE_INDEX2 = 5;
/*     */   private static final int LS_DATE_INDEX1 = 4;
/*     */   private static final int LS_SIZE_INDEX = 3;
/*     */   private static final int LS_PARTS_NUMBER = 9;
/*     */   private static final int DISCONNECT_COMMAND_TIMEOUT = 300;
/*     */   private static final int REUSE_CONNECTION_SLEEP_TIME = 10;
/*     */   private static final int READER_ALIVE_SLEEP_TIME = 100;
/*     */   private static final int MAX_READER_ALIVE_ATTEMPT = 5;
/*     */   private static final int ERROR_SLEEP_TIME = 30;
/*     */   private static final int PROMPT_SLEEP_TIME = 50;
/*     */   private static final int MAX_READ_PROMPT_ATTEMPT = 5;
/*     */   private static final int GET_JOIN_MAX_TIME = 100;
/*     */   private static final int DEFAULT_REUSE_CONNECTION_TIME = 300000;
/*     */   private static final int DEFAULT_READ_TIMEOUT = 30000;
/*     */   private static final String PROMPT = ""vsftp> "";
/*  86 */   private static final SimpleDateFormat FORMAT = new SimpleDateFormat(""MMM dd, yyyy HH:mm"", Locale.US);
/*     */ 
/*     */   
/*     */   private String host;
/*     */   
/*     */   private String username;
/*     */   
/*  93 */   private String authentication = ""gssapi"";
/*     */   
/*     */   private Reader in;
/*     */   
/*     */   private Reader err;
/*     */   
/*     */   private PrintWriter out;
/*     */   
/* 101 */   private volatile StringBuffer errors = new StringBuffer();
/*     */   
/* 103 */   private long readTimeout = 30000L;
/*     */   
/* 105 */   private long reuseConnection = 300000L;
/*     */   
/*     */   private volatile long lastCommand;
/*     */   
/*     */   private volatile boolean inCommand;
/*     */   
/*     */   private Process process;
/*     */   
/*     */   private Thread connectionCleaner;
/*     */   
/*     */   private Thread errorsReader;
/*     */   
/*     */   private volatile long errorsLastUpdateTime;
/*     */   
/* 119 */   private Ivy ivy = null;
/*     */   
/*     */   public Resource getResource(String source) throws IOException {
/* 122 */     initIvy();
/* 123 */     return (Resource)new VsftpResource(this, source);
/*     */   }
/*     */ 
/*     */   
/* 127 */   private void initIvy() { this.ivy = IvyContext.getContext().getIvy(); }
/*     */ 
/*     */   
/*     */   protected Resource getInitResource(String source) throws IOException {
/*     */     try {
/* 132 */       return lslToResource(source, sendCommand(""ls -l "" + source, true, true));
/* 133 */     } catch (IOException ex) {
/* 134 */       cleanup(ex);
/* 135 */       throw ex;
/*     */     } finally {
/* 137 */       cleanup();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void get(final String source, File destination) throws IOException {
/* 142 */     initIvy();
/*     */     try {
/* 144 */       fireTransferInitiated(getResource(source), 5);
/* 145 */       File destDir = destination.getParentFile();
/* 146 */       if (destDir != null) {
/* 147 */         sendCommand(""lcd "" + destDir.getAbsolutePath());
/*     */       }
/* 149 */       if (destination.exists()) {
/* 150 */         destination.delete();
/*     */       }
/*     */       
/* 153 */       int index = source.lastIndexOf('/');
/* 154 */       String srcName = (index == -1) ? source : source.substring(index + 1);
/* 155 */       final File to = (destDir == null) ? Checks.checkAbsolute(srcName, ""source"") : new File(destDir, srcName);
/*     */ 
/*     */       
/* 158 */       final IOException[] ex = new IOException[1];
/* 159 */       IvyThread ivyThread = new IvyThread() { private final String val$source; private final File val$to; private final IOException[] val$ex; private final VsftpRepository this$0;
/*     */           public void run() {
/* 161 */             initContext();
/*     */             try {
/* 163 */               VsftpRepository.this.sendCommand(""get "" + source, VsftpRepository.this.getExpectedDownloadMessage(source, to), 0L);
/* 164 */             } catch (IOException e) {
/* 165 */               ex[0] = e;
/*     */             } 
/*     */           } }
/*     */         ;
/* 169 */       ivyThread.start();
/*     */       
/* 171 */       long prevLength = 0L;
/* 172 */       long lastUpdate = System.currentTimeMillis();
/* 173 */       long timeout = this.readTimeout;
/* 174 */       while (ivyThread.isAlive()) {
/* 175 */         checkInterrupted();
/* 176 */         long length = to.exists() ? to.length() : 0L;
/* 177 */         if (length > prevLength) {
/* 178 */           fireTransferProgress(length - prevLength);
/* 179 */           lastUpdate = System.currentTimeMillis();
/* 180 */           prevLength = length;
/*     */         }
/* 182 */         else if (System.currentTimeMillis() - lastUpdate > timeout) {
/* 183 */           Message.verbose(""download hang for more than "" + timeout + ""ms. Interrupting."");
/*     */           
/* 185 */           ivyThread.interrupt();
/* 186 */           if (to.exists()) {
/* 187 */             to.delete();
/*     */           }
/* 189 */           throw new IOException(source + "" download timeout from "" + getHost());
/*     */         } 
/*     */         
/*     */         try {
/* 193 */           ivyThread.join(100L);
/* 194 */         } catch (InterruptedException e) {
/* 195 */           if (to.exists()) {
/* 196 */             to.delete();
/*     */           }
/*     */           return;
/*     */         } 
/*     */       } 
/* 201 */       if (ex[0] != null) {
/* 202 */         if (to.exists()) {
/* 203 */           to.delete();
/*     */         }
/* 205 */         throw ex[0];
/*     */       } 
/*     */       
/* 208 */       to.renameTo(destination);
/* 209 */       fireTransferCompleted(destination.length());
/* 210 */     } catch (IOException ex) {
/* 211 */       fireTransferError(ex);
/* 212 */       cleanup(ex);
/* 213 */       throw ex;
/*     */     } finally {
/* 215 */       cleanup();
/*     */     } 
/*     */   }
/*     */   
/*     */   public List list(String parent) throws IOException {
/* 220 */     initIvy();
/*     */     try {
/* 222 */       if (!parent.endsWith(""/"")) {
/* 223 */         parent = parent + ""/"";
/*     */       }
/* 225 */       String response = sendCommand(""ls -l "" + parent, true, true);
/* 226 */       if (response.startsWith(""ls"")) {
/* 227 */         return null;
/*     */       }
/* 229 */       String[] lines = response.split(""\n"");
/* 230 */       List ret = new ArrayList(lines.length);
/* 231 */       for (int i = 0; i < lines.length; i++) {
/* 232 */         while (lines[i].endsWith(""\r"") || lines[i].endsWith(""\n"")) {
/* 233 */           lines[i] = lines[i].substring(0, lines[i].length() - 1);
/*     */         }
/* 235 */         if (lines[i].trim().length() != 0) {
/* 236 */           ret.add(parent + lines[i].substring(lines[i].lastIndexOf(' ') + 1));
/*     */         }
/*     */       } 
/* 239 */       return ret;
/* 240 */     } catch (IOException ex) {
/* 241 */       cleanup(ex);
/* 242 */       throw ex;
/*     */     } finally {
/* 244 */       cleanup();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void put(File source, String destination, boolean overwrite) throws IOException {
/* 249 */     initIvy();
/*     */     try {
/* 251 */       if (getResource(destination).exists()) {
/* 252 */         if (overwrite) {
/* 253 */           sendCommand(""rm "" + destination, getExpectedRemoveMessage(destination));
/*     */         } else {
/*     */           return;
/*     */         } 
/*     */       }
/* 258 */       int index = destination.lastIndexOf('/');
/* 259 */       String destDir = null;
/* 260 */       if (index != -1) {
/* 261 */         destDir = destination.substring(0, index);
/* 262 */         mkdirs(destDir);
/* 263 */         sendCommand(""cd "" + destDir);
/*     */       } 
/* 265 */       String to = (destDir != null) ? (destDir + ""/"" + source.getName()) : source.getName();
/* 266 */       sendCommand(""put "" + source.getAbsolutePath(), getExpectedUploadMessage(source, to), 0L);
/* 267 */       sendCommand(""mv "" + to + "" "" + destination);
/* 268 */     } catch (IOException ex) {
/* 269 */       cleanup(ex);
/* 270 */       throw ex;
/*     */     } finally {
/* 272 */       cleanup();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void mkdirs(String destDir) throws IOException {
/* 277 */     if (dirExists(destDir)) {
/*     */       return;
/*     */     }
/* 280 */     if (destDir.endsWith(""/"")) {
/* 281 */       destDir = destDir.substring(0, destDir.length() - 1);
/*     */     }
/* 283 */     int index = destDir.lastIndexOf('/');
/* 284 */     if (index != -1) {
/* 285 */       mkdirs(destDir.substring(0, index));
/*     */     }
/* 287 */     sendCommand(""mkdir "" + destDir);
/*     */   }
/*     */ 
/*     */   
/* 291 */   private boolean dirExists(String dir) throws IOException { return !sendCommand(""ls "" + dir, true).startsWith(""ls: ""); }
/*     */ 
/*     */ 
/*     */   
/* 295 */   protected String sendCommand(String command) throws IOException { return sendCommand(command, false, this.readTimeout); }
/*     */ 
/*     */ 
/*     */   
/* 299 */   protected void sendCommand(String command, Pattern expectedResponse) throws IOException { sendCommand(command, expectedResponse, this.readTimeout); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void sendCommand(String command, Pattern expectedResponse, long timeout) throws IOException {
/* 311 */     String response = sendCommand(command, true, timeout);
/* 312 */     if (!expectedResponse.matcher(response).matches()) {
/* 313 */       Message.debug(""invalid response from server:"");
/* 314 */       Message.debug(""expected: '"" + expectedResponse + ""'"");
/* 315 */       Message.debug(""was:      '"" + response + ""'"");
/* 316 */       throw new IOException(response);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 321 */   protected String sendCommand(String command, boolean sendErrorAsResponse) throws IOException { return sendCommand(command, sendErrorAsResponse, this.readTimeout); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 326 */   protected String sendCommand(String command, boolean sendErrorAsResponse, boolean single) throws IOException { return sendCommand(command, sendErrorAsResponse, single, this.readTimeout); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 331 */   protected String sendCommand(String command, boolean sendErrorAsResponse, long timeout) throws IOException { return sendCommand(command, sendErrorAsResponse, false, timeout); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected String sendCommand(String command, boolean sendErrorAsResponse, boolean single, long timeout) throws IOException {
/* 336 */     single = false;
/*     */ 
/*     */     
/* 339 */     checkInterrupted();
/* 340 */     this.inCommand = true;
/* 341 */     this.errorsLastUpdateTime = 0L;
/* 342 */     synchronized (this) {
/* 343 */       if (!single || this.in != null) {
/* 344 */         ensureConnectionOpened();
/* 345 */         Message.debug(""sending command '"" + command + ""' to "" + getHost());
/* 346 */         updateLastCommandTime();
/* 347 */         this.out.println(command);
/* 348 */         this.out.flush();
/*     */       } else {
/* 350 */         sendSingleCommand(command);
/*     */       } 
/*     */     } 
/*     */     
/*     */     try {
/* 355 */       return readResponse(sendErrorAsResponse, timeout);
/*     */     } finally {
/* 357 */       this.inCommand = false;
/* 358 */       if (single) {
/* 359 */         closeConnection();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 365 */   protected String readResponse(boolean sendErrorAsResponse) throws IOException { return readResponse(sendErrorAsResponse, this.readTimeout); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected synchronized String readResponse(final boolean sendErrorAsResponse, long timeout) throws IOException {
/* 370 */     final StringBuffer response = new StringBuffer();
/* 371 */     final IOException[] exc = new IOException[1];
/* 372 */     final boolean[] done = new boolean[1];
/* 373 */     Runnable r = new Runnable() { private final StringBuffer val$response; private final boolean val$sendErrorAsResponse;
/*     */         public void run() {
/* 375 */           synchronized (VsftpRepository.this) {
/*     */             
/*     */             try {
/* 378 */               boolean getPrompt = false;
/*     */ 
/*     */               
/* 381 */               int attempts = 0;
/* 382 */               for (; !getPrompt && attempts < 5; attempts++) {
/* 383 */                 int c; while ((c = VsftpRepository.this.in.read()) != -1) {
/* 384 */                   attempts = 0;
/*     */                   
/* 386 */                   response.append((char)c);
/* 387 */                   if (response.length() >= ""vsftp> "".length() && response.substring(response.length() - ""vsftp> "".length(), response.length()).equals(""vsftp> "")) {
/*     */ 
/*     */                     
/* 390 */                     response.setLength(response.length() - ""vsftp> "".length());
/* 391 */                     getPrompt = true;
/*     */                     break;
/*     */                   } 
/*     */                 } 
/* 395 */                 if (!getPrompt) {
/*     */                   try {
/* 397 */                     Thread.sleep(50L);
/* 398 */                   } catch (InterruptedException e) {
/*     */                     break;
/*     */                   } 
/*     */                 }
/*     */               } 
/* 403 */               if (getPrompt) {
/*     */                 
/* 405 */                 if (VsftpRepository.this.errorsLastUpdateTime == 0L)
/*     */                 {
/* 407 */                   VsftpRepository.this.errorsLastUpdateTime = VsftpRepository.this.lastCommand;
/*     */                 }
/*     */ 
/*     */                 
/* 411 */                 while (System.currentTimeMillis() - VsftpRepository.this.errorsLastUpdateTime < 50L) {
/*     */                   try {
/* 413 */                     Thread.sleep(30L);
/* 414 */                   } catch (InterruptedException e) {
/*     */                     break;
/*     */                   } 
/*     */                 } 
/*     */               } 
/* 419 */               if (VsftpRepository.this.errors.length() > 0) {
/* 420 */                 if (sendErrorAsResponse) {
/* 421 */                   response.append(VsftpRepository.this.errors);
/* 422 */                   VsftpRepository.this.errors.setLength(0);
/*     */                 } else {
/* 424 */                   throw new IOException(VsftpRepository.chomp(VsftpRepository.this.errors).toString());
/*     */                 } 
/*     */               }
/* 427 */               VsftpRepository.chomp(response);
/* 428 */               done[0] = true;
/* 429 */             } catch (IOException e) {
/* 430 */               exc[0] = e;
/*     */             } finally {
/* 432 */               VsftpRepository.this.notify();
/*     */             } 
/*     */           } 
/*     */         } private final boolean[] val$done; private final IOException[] val$exc; private final VsftpRepository this$0; }
/*     */       ;
/* 437 */     Object object = null;
/* 438 */     if (timeout == 0L) {
/* 439 */       r.run();
/*     */     } else {
/* 441 */       object = new IvyThread(r);
/* 442 */       object.start();
/*     */       try {
/* 444 */         wait(timeout);
/* 445 */       } catch (InterruptedException e) {}
/*     */     } 
/*     */ 
/*     */     
/* 449 */     updateLastCommandTime();
/* 450 */     if (exc[0] != null)
/* 451 */       throw exc[0]; 
/* 452 */     if (!done[0]) {
/* 453 */       if (object != null && object.isAlive()) {
/* 454 */         object.interrupt();
/* 455 */         for (int i = 0; i < 5 && object.isAlive(); i++) {
/*     */           try {
/* 457 */             Thread.sleep(100L);
/* 458 */           } catch (InterruptedException e) {
/*     */             break;
/*     */           } 
/*     */         } 
/* 462 */         if (object.isAlive()) {
/* 463 */           object.stop();
/*     */         }
/*     */       } 
/* 466 */       throw new IOException(""connection timeout to "" + getHost());
/*     */     } 
/* 468 */     if (""Not connected."".equals(response)) {
/* 469 */       Message.info(""vsftp connection to "" + getHost() + "" reset"");
/* 470 */       closeConnection();
/* 471 */       throw new IOException(""not connected to "" + getHost());
/*     */     } 
/* 473 */     Message.debug(""received response '"" + response + ""' from "" + getHost());
/* 474 */     return response.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 479 */   private synchronized void sendSingleCommand(String command) throws IOException { exec(getSingleCommand(command)); }
/*     */ 
/*     */   
/*     */   protected synchronized void ensureConnectionOpened() throws IOException {
/* 483 */     if (this.in == null) {
/* 484 */       Message.verbose(""connecting to "" + getUsername() + ""@"" + getHost() + ""... "");
/* 485 */       String connectionCommand = getConnectionCommand();
/* 486 */       exec(connectionCommand);
/*     */       
/*     */       try {
/* 489 */         readResponse(false);
/*     */         
/* 491 */         if (this.reuseConnection > 0L) {
/* 492 */           this.connectionCleaner = (Thread)new IvyThread() { private final VsftpRepository this$0;
/*     */               public void run() {
/* 494 */                 initContext();
/*     */                 try {
/* 496 */                   long sleep = 10L;
/* 497 */                   while (VsftpRepository.this.in != null && sleep > 0L) {
/* 498 */                     sleep(sleep);
/* 499 */                     sleep = VsftpRepository.this.reuseConnection - System.currentTimeMillis() - VsftpRepository.this.lastCommand;
/*     */                     
/* 501 */                     if (VsftpRepository.this.inCommand) {
/* 502 */                       sleep = (sleep <= 0L) ? VsftpRepository.this.reuseConnection : sleep;
/*     */                     }
/*     */                   } 
/* 505 */                 } catch (InterruptedException e) {}
/*     */ 
/*     */                 
/* 508 */                 VsftpRepository.this.disconnect();
/*     */               } }
/*     */             ;
/* 511 */           this.connectionCleaner.start();
/*     */         } 
/*     */         
/* 514 */         if (this.ivy != null) {
/* 515 */           this.ivy.getEventManager().addIvyListener(new IvyListener() { private final VsftpRepository this$0;
/*     */                 public void progress(IvyEvent event) {
/* 517 */                   VsftpRepository.this.disconnect();
/* 518 */                   event.getSource().removeIvyListener(this);
/*     */                 }
/*     */               }, 
/*     */               ""post-resolve"");
/*     */         }
/* 523 */       } catch (IOException ex) {
/* 524 */         closeConnection();
/* 525 */         throw new IOException(""impossible to connect to "" + getUsername() + ""@"" + getHost() + "" using "" + getAuthentication() + "": "" + ex.getMessage());
/*     */       } 
/*     */       
/* 528 */       Message.verbose(""connected to "" + getHost());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 533 */   private void updateLastCommandTime() { this.lastCommand = System.currentTimeMillis(); }
/*     */ 
/*     */   
/*     */   private void exec(String command) throws IOException {
/* 537 */     Message.debug(""launching '"" + command + ""'"");
/* 538 */     this.process = Runtime.getRuntime().exec(command);
/* 539 */     this.in = new InputStreamReader(this.process.getInputStream());
/* 540 */     this.err = new InputStreamReader(this.process.getErrorStream());
/* 541 */     this.out = new PrintWriter(this.process.getOutputStream());
/*     */     
/* 543 */     this.errorsReader = (Thread)new IvyThread() { private final VsftpRepository this$0;
/*     */         public void run() {
/* 545 */           initContext();
/*     */           
/*     */           try {
/*     */             int c;
/* 549 */             while (VsftpRepository.this.err != null && (c = VsftpRepository.this.err.read()) != -1) {
/* 550 */               VsftpRepository.this.errors.append((char)c);
/* 551 */               VsftpRepository.this.errorsLastUpdateTime = System.currentTimeMillis();
/*     */             }
/*     */           
/* 554 */           } catch (IOException e) {}
/*     */         } }
/*     */       ;
/*     */ 
/*     */     
/* 559 */     this.errorsReader.start();
/*     */   }
/*     */   
/*     */   private void checkInterrupted() {
/* 563 */     if (this.ivy != null) {
/* 564 */       this.ivy.checkInterrupted();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void cleanup(Exception ex) {
/* 572 */     if (ex.getMessage().equals(""connection timeout to "" + getHost())) {
/* 573 */       closeConnection();
/*     */     } else {
/* 575 */       disconnect();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void cleanup() {
/* 583 */     if (this.reuseConnection == 0L) {
/* 584 */       disconnect();
/*     */     }
/*     */   }
/*     */   
/*     */   public synchronized void disconnect() {
/* 589 */     if (this.in != null) {
/* 590 */       Message.verbose(""disconnecting from "" + getHost() + ""... "");
/*     */       try {
/* 592 */         sendCommand(""exit"", false, 300L);
/* 593 */       } catch (IOException e) {
/*     */       
/*     */       } finally {
/* 596 */         closeConnection();
/* 597 */         Message.verbose(""disconnected of "" + getHost());
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private synchronized void closeConnection() {
/* 603 */     if (this.connectionCleaner != null) {
/* 604 */       this.connectionCleaner.interrupt();
/*     */     }
/* 606 */     if (this.errorsReader != null) {
/* 607 */       this.errorsReader.interrupt();
/*     */     }
/*     */     try {
/* 610 */       this.process.destroy();
/* 611 */     } catch (Exception ex) {}
/*     */ 
/*     */     
/*     */     try {
/* 615 */       this.in.close();
/* 616 */     } catch (Exception e) {}
/*     */ 
/*     */     
/*     */     try {
/* 620 */       this.err.close();
/* 621 */     } catch (Exception e) {}
/*     */ 
/*     */     
/*     */     try {
/* 625 */       this.out.close();
/* 626 */     } catch (Exception e) {}
/*     */ 
/*     */ 
/*     */     
/* 630 */     this.connectionCleaner = null;
/* 631 */     this.errorsReader = null;
/* 632 */     this.process = null;
/* 633 */     this.in = null;
/* 634 */     this.out = null;
/* 635 */     this.err = null;
/* 636 */     Message.debug(""connection to "" + getHost() + "" closed"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Resource lslToResource(String file, String responseLine) {
/* 647 */     if (responseLine == null || responseLine.startsWith(""ls"")) {
/* 648 */       return (Resource)new BasicResource(file, false, 0L, 0L, false);
/*     */     }
/* 650 */     String[] parts = responseLine.split(""\\s+"");
/* 651 */     if (parts.length != 9) {
/* 652 */       Message.debug(""unrecognized ls format: "" + responseLine);
/* 653 */       return (Resource)new BasicResource(file, false, 0L, 0L, false);
/*     */     } 
/*     */     try {
/* 656 */       long contentLength = Long.parseLong(parts[3]);
/* 657 */       String date = parts[4] + "" "" + parts[5] + "" "" + parts[6] + "" "" + parts[7];
/*     */       
/* 659 */       return (Resource)new BasicResource(file, true, contentLength, FORMAT.parse(date).getTime(), false);
/*     */     }
/* 661 */     catch (Exception ex) {
/* 662 */       Message.warn(""impossible to parse server response: "" + responseLine + "": "" + ex);
/*     */ 
/*     */       
/* 665 */       return (Resource)new BasicResource(file, false, 0L, 0L, false);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 672 */   protected String getSingleCommand(String command) { return ""vsh -noprompt -auth "" + this.authentication + "" "" + this.username + ""@"" + this.host + "" "" + command; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 677 */   protected String getConnectionCommand() { return ""vsftp -noprompt -auth "" + this.authentication + "" "" + this.username + ""@"" + this.host; }
/*     */ 
/*     */ 
/*     */   
/* 681 */   protected Pattern getExpectedDownloadMessage(String source, File to) { return Pattern.compile(""Downloading "" + to.getName() + "" from [^\\s]+""); }
/*     */ 
/*     */ 
/*     */   
/* 685 */   protected Pattern getExpectedRemoveMessage(String destination) { return Pattern.compile(""Removing [^\\s]+""); }
/*     */ 
/*     */ 
/*     */   
/* 689 */   protected Pattern getExpectedUploadMessage(File source, String to) { return Pattern.compile(""Uploading "" + source.getName() + "" to [^\\s]+""); }
/*     */ 
/*     */ 
/*     */   
/* 693 */   public String getAuthentication() { return this.authentication; }
/*     */ 
/*     */ 
/*     */   
/* 697 */   public void setAuthentication(String authentication) { this.authentication = authentication; }
/*     */ 
/*     */ 
/*     */   
/* 701 */   public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */   
/* 705 */   public void setHost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */   
/* 709 */   public String getUsername() { return this.username; }
/*     */ 
/*     */ 
/*     */   
/* 713 */   public void setUsername(String username) { this.username = username; }
/*     */ 
/*     */   
/*     */   private static StringBuffer chomp(StringBuffer str) {
/* 717 */     if (str == null || str.length() == 0) {
/* 718 */       return str;
/*     */     }
/*     */     
/* 721 */     while (""\n"".equals(str.substring(str.length() - 1)) || ""\r"".equals(str.substring(str.length() - 1))) {
/* 722 */       str.setLength(str.length() - 1);
/*     */     }
/* 724 */     return str;
/*     */   }
/*     */ 
/*     */   
/* 728 */   public String toString() { return getName() + "" "" + getUsername() + ""@"" + getHost() + "" ("" + getAuthentication() + "")""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 738 */   public void setReuseConnection(long time) { this.reuseConnection = time; }
/*     */ 
/*     */ 
/*     */   
/* 742 */   public long getReadTimeout() { return this.readTimeout; }
/*     */ 
/*     */ 
/*     */   
/* 746 */   public void setReadTimeout(long readTimeout) { this.readTimeout = readTimeout; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\vsftp\VsftpRepository.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.repository.vsftp.VsftpResource,"/*    */ package org.apache.ivy.plugins.repository.vsftp;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import org.apache.ivy.plugins.repository.LazyResource;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class VsftpResource
/*    */   extends LazyResource
/*    */ {
/*    */   private VsftpRepository repository;
/*    */   
/*    */   public VsftpResource(VsftpRepository repository, String file) {
/* 31 */     super(file);
/* 32 */     this.repository = repository;
/*    */   }
/*    */   
/*    */   protected void init() {
/*    */     try {
/* 37 */       init(this.repository.getInitResource(getName()));
/* 38 */     } catch (IOException e) {
/* 39 */       Message.verbose(e.toString());
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 44 */   public InputStream openStream() throws IOException { throw new UnsupportedOperationException(""vsftp resource does not support openStream operation""); }
/*    */ 
/*    */ 
/*    */   
/*    */   public Resource clone(String cloneName) {
/*    */     try {
/* 50 */       return this.repository.getResource(cloneName);
/* 51 */     } catch (IOException e) {
/* 52 */       throw new RuntimeException(e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\repository\vsftp\VsftpResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.AbstractPatternsBasedResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashSet;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.settings.IvyPattern;
/*     */ import org.apache.ivy.plugins.conflict.ConflictManager;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.matcher.Matcher;
/*     */ import org.apache.ivy.plugins.resolver.util.MDResolvedResource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResourceMDParser;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractPatternsBasedResolver
/*     */   extends BasicResolver
/*     */ {
/*  58 */   private static final Map IVY_ARTIFACT_ATTRIBUTES = new HashMap();
/*     */   static  {
/*  60 */     IVY_ARTIFACT_ATTRIBUTES.put(""artifact"", ""ivy"");
/*  61 */     IVY_ARTIFACT_ATTRIBUTES.put(""type"", ""ivy"");
/*  62 */     IVY_ARTIFACT_ATTRIBUTES.put(""ext"", ""xml"");
/*     */   }
/*     */   
/*  65 */   private List ivyPatterns = new ArrayList();
/*     */   
/*  67 */   private List artifactPatterns = new ArrayList();
/*     */ 
/*     */   
/*     */   private boolean m2compatible = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedResource findIvyFileRef(DependencyDescriptor dd, ResolveData data) {
/*  75 */     ModuleRevisionId mrid = dd.getDependencyRevisionId();
/*  76 */     if (isM2compatible()) {
/*  77 */       mrid = convertM2IdForResourceSearch(mrid);
/*     */     }
/*  79 */     return findResourceUsingPatterns(mrid, this.ivyPatterns, DefaultArtifact.newIvyArtifact(mrid, data.getDate()), getRMDParser(dd, data), data.getDate());
/*     */   }
/*     */ 
/*     */   
/*     */   protected ResolvedResource findArtifactRef(Artifact artifact, Date date) {
/*  84 */     ModuleRevisionId mrid = artifact.getModuleRevisionId();
/*  85 */     if (isM2compatible()) {
/*  86 */       mrid = convertM2IdForResourceSearch(mrid);
/*     */     }
/*  88 */     return findResourceUsingPatterns(mrid, this.artifactPatterns, artifact, getDefaultRMDParser(artifact.getModuleRevisionId().getModuleId()), date);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected ResolvedResource findResourceUsingPatterns(ModuleRevisionId moduleRevision, List patternList, Artifact artifact, ResourceMDParser rmdparser, Date date) {
/*  94 */     List resolvedResources = new ArrayList();
/*  95 */     Set foundRevisions = new HashSet();
/*  96 */     boolean dynamic = getSettings().getVersionMatcher().isDynamic(moduleRevision);
/*  97 */     boolean stop = false;
/*  98 */     for (Iterator iter = patternList.iterator(); iter.hasNext() && !stop; ) {
/*  99 */       String pattern = iter.next();
/* 100 */       ResolvedResource rres = findResourceUsingPattern(moduleRevision, pattern, artifact, rmdparser, date);
/*     */       
/* 102 */       if (rres != null && !foundRevisions.contains(rres.getRevision())) {
/*     */         
/* 104 */         foundRevisions.add(rres.getRevision());
/* 105 */         resolvedResources.add(rres);
/* 106 */         stop = !dynamic;
/*     */       } 
/*     */     } 
/*     */     
/* 110 */     if (resolvedResources.size() > 1) {
/* 111 */       ResolvedResource[] rress = resolvedResources.toArray(new ResolvedResource[resolvedResources.size()]);
/*     */       
/* 113 */       return findResource(rress, rmdparser, moduleRevision, date);
/* 114 */     }  if (resolvedResources.size() == 1) {
/* 115 */       return resolvedResources.get(0);
/*     */     }
/* 117 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedResource findResource(ResolvedResource[] rress, ResourceMDParser rmdparser, ModuleRevisionId mrid, Date date) {
/* 126 */     String name = getName();
/* 127 */     VersionMatcher versionMatcher = getSettings().getVersionMatcher();
/*     */     
/* 129 */     ResolvedResource found = null;
/* 130 */     List sorted = getLatestStrategy().sort((ArtifactInfo[])rress);
/* 131 */     List rejected = new ArrayList();
/* 132 */     List foundBlacklisted = new ArrayList();
/* 133 */     IvyContext context = IvyContext.getContext();
/*     */     
/* 135 */     for (ListIterator iter = sorted.listIterator(sorted.size()); iter.hasPrevious(); ) {
/* 136 */       ResolvedResource rres = iter.previous();
/* 137 */       if (filterNames(new ArrayList(Collections.singleton(rres.getRevision()))).isEmpty()) {
/* 138 */         Message.debug(""\t"" + name + "": filtered by name: "" + rres);
/*     */         continue;
/*     */       } 
/* 141 */       if (date != null && rres.getLastModified() > date.getTime()) {
/* 142 */         Message.verbose(""\t"" + name + "": too young: "" + rres);
/* 143 */         rejected.add(rres.getRevision() + "" ("" + rres.getLastModified() + "")"");
/*     */         continue;
/*     */       } 
/* 146 */       ModuleRevisionId foundMrid = ModuleRevisionId.newInstance(mrid, rres.getRevision());
/*     */       
/* 148 */       ResolveData data = context.getResolveData();
/* 149 */       if (data != null && data.getReport() != null && data.isBlacklisted(data.getReport().getConfiguration(), foundMrid)) {
/*     */ 
/*     */         
/* 152 */         Message.debug(""\t"" + name + "": blacklisted: "" + rres);
/* 153 */         rejected.add(rres.getRevision() + "" (blacklisted)"");
/* 154 */         foundBlacklisted.add(foundMrid);
/*     */         
/*     */         continue;
/*     */       } 
/* 158 */       if (!versionMatcher.accept(mrid, foundMrid)) {
/* 159 */         Message.debug(""\t"" + name + "": rejected by version matcher: "" + rres);
/* 160 */         rejected.add(rres.getRevision());
/*     */         continue;
/*     */       } 
/* 163 */       if (versionMatcher.needModuleDescriptor(mrid, foundMrid)) {
/* 164 */         MDResolvedResource mDResolvedResource2 = rmdparser.parse(rres.getResource(), rres.getRevision());
/* 165 */         if (mDResolvedResource2 == null) {
/* 166 */           Message.debug(""\t"" + name + "": impossible to get module descriptor resource: "" + rres);
/*     */           
/* 168 */           rejected.add(rres.getRevision() + "" (no or bad MD)"");
/*     */           continue;
/*     */         } 
/* 171 */         ModuleDescriptor md = mDResolvedResource2.getResolvedModuleRevision().getDescriptor();
/*     */         
/* 173 */         if (md.isDefault()) {
/* 174 */           Message.debug(""\t"" + name + "": default md rejected by version matcher"" + ""requiring module descriptor: "" + rres);
/*     */           
/* 176 */           rejected.add(rres.getRevision() + "" (MD)""); continue;
/*     */         } 
/* 178 */         if (!versionMatcher.accept(mrid, md)) {
/* 179 */           Message.debug(""\t"" + name + "": md rejected by version matcher: "" + rres);
/* 180 */           rejected.add(rres.getRevision() + "" (MD)"");
/*     */           continue;
/*     */         } 
/* 183 */         MDResolvedResource mDResolvedResource1 = mDResolvedResource2;
/*     */       } else {
/*     */         
/* 186 */         found = rres;
/*     */       } 
/*     */       
/* 189 */       if (found != null) {
/* 190 */         if (!found.getResource().exists()) {
/* 191 */           Message.debug(""\t"" + name + "": resource not reachable for "" + mrid + "": res="" + found.getResource());
/*     */           
/* 193 */           logAttempt(found.getResource().toString());
/*     */           continue;
/*     */         } 
/*     */         break;
/*     */       } 
/*     */     } 
/* 199 */     if (found == null && !rejected.isEmpty()) {
/* 200 */       logAttempt(rejected.toString());
/*     */     }
/* 202 */     if (found == null && !foundBlacklisted.isEmpty()) {
/*     */ 
/*     */       
/* 205 */       DependencyDescriptor dd = context.getDependencyDescriptor();
/* 206 */       IvyNode parentNode = context.getResolveData().getNode(dd.getParentRevisionId());
/* 207 */       ConflictManager cm = parentNode.getConflictManager(mrid.getModuleId());
/* 208 */       cm.handleAllBlacklistedRevisions(dd, foundBlacklisted);
/*     */     } 
/*     */     
/* 211 */     return found;
/*     */   }
/*     */   
/*     */   protected Collection findNames(Map tokenValues, String token) {
/* 215 */     Collection names = new HashSet();
/* 216 */     names.addAll(findIvyNames(tokenValues, token));
/* 217 */     if (isAllownomd()) {
/* 218 */       names.addAll(findArtifactNames(tokenValues, token));
/*     */     }
/* 220 */     return names;
/*     */   }
/*     */   
/*     */   protected Collection findIvyNames(Map tokenValues, String token) {
/* 224 */     Collection names = new HashSet();
/* 225 */     tokenValues = new HashMap(tokenValues);
/* 226 */     tokenValues.put(""artifact"", ""ivy"");
/* 227 */     tokenValues.put(""type"", ""ivy"");
/* 228 */     tokenValues.put(""ext"", ""xml"");
/* 229 */     if (isM2compatible()) {
/* 230 */       convertM2TokenValuesForResourceSearch(tokenValues);
/*     */     }
/* 232 */     findTokenValues(names, getIvyPatterns(), tokenValues, token);
/* 233 */     filterNames(names);
/* 234 */     return names;
/*     */   }
/*     */   
/*     */   protected Collection findArtifactNames(Map tokenValues, String token) {
/* 238 */     Collection names = new HashSet();
/* 239 */     tokenValues = new HashMap(tokenValues);
/* 240 */     tokenValues.put(""artifact"", tokenValues.get(""module""));
/*     */     
/* 242 */     tokenValues.put(""type"", ""jar"");
/* 243 */     tokenValues.put(""ext"", ""jar"");
/* 244 */     if (isM2compatible()) {
/* 245 */       convertM2TokenValuesForResourceSearch(tokenValues);
/*     */     }
/* 247 */     findTokenValues(names, getArtifactPatterns(), tokenValues, token);
/* 248 */     filterNames(names);
/* 249 */     return names;
/*     */   }
/*     */   
/*     */   public Map[] listTokenValues(String[] tokens, Map criteria) {
/* 253 */     Set result = new LinkedHashSet();
/*     */ 
/*     */     
/* 256 */     List ivyPatterns = getIvyPatterns();
/* 257 */     Map tokenValues = new HashMap(criteria);
/* 258 */     tokenValues.put(""type"", ""ivy"");
/* 259 */     tokenValues.put(""ext"", ""xml"");
/* 260 */     if (isM2compatible()) {
/* 261 */       convertM2TokenValuesForResourceSearch(tokenValues);
/*     */     }
/* 263 */     for (Iterator it = ivyPatterns.iterator(); it.hasNext(); ) {
/* 264 */       String ivyPattern = it.next();
/* 265 */       result.addAll(resolveTokenValues(tokens, ivyPattern, tokenValues, false));
/*     */     } 
/*     */     
/* 268 */     if (isAllownomd()) {
/* 269 */       List artifactPatterns = getArtifactPatterns();
/* 270 */       tokenValues = new HashMap(criteria);
/* 271 */       tokenValues.put(""type"", ""jar"");
/* 272 */       tokenValues.put(""ext"", ""jar"");
/* 273 */       if (isM2compatible()) {
/* 274 */         convertM2TokenValuesForResourceSearch(tokenValues);
/*     */       }
/* 276 */       for (Iterator it = artifactPatterns.iterator(); it.hasNext(); ) {
/* 277 */         String artifactPattern = it.next();
/* 278 */         result.addAll(resolveTokenValues(tokens, artifactPattern, tokenValues, true));
/*     */       } 
/*     */     } 
/*     */     
/* 282 */     return (Map[])result.toArray((Object[])new Map[result.size()]);
/*     */   }
/*     */   
/*     */   private Set resolveTokenValues(String[] tokens, String pattern, Map criteria, boolean noMd) {
/* 286 */     Set result = new LinkedHashSet();
/* 287 */     Set tokenSet = new HashSet(Arrays.asList((Object[])tokens));
/*     */     
/* 289 */     Map tokenValues = new HashMap();
/* 290 */     for (Iterator it = criteria.entrySet().iterator(); it.hasNext(); ) {
/* 291 */       Map.Entry entry = it.next();
/* 292 */       Object key = entry.getKey();
/* 293 */       Object value = entry.getValue();
/* 294 */       if (value instanceof String) {
/* 295 */         tokenValues.put(key, value);
/*     */       }
/*     */     } 
/*     */     
/* 299 */     if (tokenSet.isEmpty()) {
/*     */       
/* 301 */       result.add(tokenValues);
/* 302 */       return result;
/*     */     } 
/*     */     
/* 305 */     String partiallyResolvedPattern = IvyPatternHelper.substituteTokens(pattern, tokenValues);
/* 306 */     String token = IvyPatternHelper.getFirstToken(partiallyResolvedPattern);
/* 307 */     if (token == null && exist(partiallyResolvedPattern)) {
/*     */       
/* 309 */       result.add(tokenValues);
/* 310 */       return result;
/*     */     } 
/*     */     
/* 313 */     tokenSet.remove(token);
/*     */     
/* 315 */     Matcher matcher = null;
/* 316 */     Object criteriaForToken = criteria.get(token);
/* 317 */     if (criteriaForToken instanceof Matcher) {
/* 318 */       matcher = (Matcher)criteriaForToken;
/*     */     }
/*     */     
/* 321 */     String[] values = listTokenValues(partiallyResolvedPattern, token);
/* 322 */     if (values == null) {
/* 323 */       return result;
/*     */     }
/*     */     
/* 326 */     List vals = new ArrayList(Arrays.asList((Object[])values));
/* 327 */     filterNames(vals);
/*     */     
/* 329 */     for (Iterator it = vals.iterator(); it.hasNext(); ) {
/* 330 */       String value = it.next();
/* 331 */       if (matcher != null && !matcher.matches(value)) {
/*     */         continue;
/*     */       }
/*     */       
/* 335 */       tokenValues.put(token, value);
/* 336 */       String moreResolvedPattern = IvyPatternHelper.substituteTokens(partiallyResolvedPattern, tokenValues);
/*     */ 
/*     */       
/* 339 */       Map newCriteria = new HashMap(criteria);
/* 340 */       newCriteria.put(token, value);
/* 341 */       if (noMd && ""artifact"".equals(token)) {
/* 342 */         newCriteria.put(""module"", value);
/* 343 */       } else if (noMd && ""module"".equals(token)) {
/* 344 */         newCriteria.put(""artifact"", value);
/*     */       } 
/* 346 */       result.addAll(resolveTokenValues((String[])tokenSet.toArray((Object[])new String[tokenSet.size()]), moreResolvedPattern, newCriteria, noMd));
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 351 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Collection filterNames(Collection names) {
/* 369 */     getSettings().filterIgnore(names);
/* 370 */     return names;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void findTokenValues(Collection names, List patterns, Map tokenValues, String token) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public void addIvyPattern(String pattern) { this.ivyPatterns.add(pattern); }
/*     */ 
/*     */ 
/*     */   
/* 387 */   public void addArtifactPattern(String pattern) { this.artifactPatterns.add(pattern); }
/*     */ 
/*     */ 
/*     */   
/* 391 */   public List getIvyPatterns() { return Collections.unmodifiableList(this.ivyPatterns); }
/*     */ 
/*     */ 
/*     */   
/* 395 */   public List getArtifactPatterns() { return Collections.unmodifiableList(this.artifactPatterns); }
/*     */ 
/*     */ 
/*     */   
/* 399 */   protected void setIvyPatterns(List patterns) { this.ivyPatterns = patterns; }
/*     */ 
/*     */ 
/*     */   
/* 403 */   protected void setArtifactPatterns(List patterns) { this.artifactPatterns = patterns; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 410 */   public void addConfiguredIvy(IvyPattern p) { this.ivyPatterns.add(p.getPattern()); }
/*     */ 
/*     */ 
/*     */   
/* 414 */   public void addConfiguredArtifact(IvyPattern p) { this.artifactPatterns.add(p.getPattern()); }
/*     */ 
/*     */   
/*     */   public void dumpSettings() {
/* 418 */     super.dumpSettings();
/* 419 */     Message.debug(""\t\tm2compatible: "" + isM2compatible());
/* 420 */     Message.debug(""\t\tivy patterns:"");
/* 421 */     for (ListIterator iter = getIvyPatterns().listIterator(); iter.hasNext(); ) {
/* 422 */       String p = iter.next();
/* 423 */       Message.debug(""\t\t\t"" + p);
/*     */     } 
/* 425 */     Message.debug(""\t\tartifact patterns:"");
/* 426 */     for (ListIterator iter = getArtifactPatterns().listIterator(); iter.hasNext(); ) {
/* 427 */       String p = iter.next();
/* 428 */       Message.debug(""\t\t\t"" + p);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 433 */   public boolean isM2compatible() { return this.m2compatible; }
/*     */ 
/*     */ 
/*     */   
/* 437 */   public void setM2compatible(boolean compatible) { this.m2compatible = compatible; }
/*     */ 
/*     */   
/*     */   protected ModuleRevisionId convertM2IdForResourceSearch(ModuleRevisionId mrid) {
/* 441 */     if (mrid.getOrganisation() == null || mrid.getOrganisation().indexOf('.') == -1) {
/* 442 */       return mrid;
/*     */     }
/* 444 */     return ModuleRevisionId.newInstance(mrid.getOrganisation().replace('.', '/'), mrid.getName(), mrid.getBranch(), mrid.getRevision(), mrid.getQualifiedExtraAttributes());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 450 */   protected String convertM2OrganizationForResourceSearch(String org) { return org.replace('.', '/'); }
/*     */ 
/*     */   
/*     */   protected void convertM2TokenValuesForResourceSearch(Map tokenValues) {
/* 454 */     if (tokenValues.get(""organisation"") instanceof String)
/* 455 */       tokenValues.put(""organisation"", convertM2OrganizationForResourceSearch(tokenValues.get(""organisation""))); 
/*     */   }
/*     */   
/*     */   protected abstract ResolvedResource findResourceUsingPattern(ModuleRevisionId paramModuleRevisionId, String paramString, Artifact paramArtifact, ResourceMDParser paramResourceMDParser, Date paramDate);
/*     */   
/*     */   protected abstract String[] listTokenValues(String paramString1, String paramString2);
/*     */   
/*     */   protected abstract boolean exist(String paramString);
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\AbstractPatternsBasedResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.AbstractResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Date;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.cache.CacheDownloadOptions;
/*     */ import org.apache.ivy.core.cache.CacheMetadataOptions;
/*     */ import org.apache.ivy.core.cache.DownloadListener;
/*     */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.event.download.EndArtifactDownloadEvent;
/*     */ import org.apache.ivy.core.event.download.NeedArtifactEvent;
/*     */ import org.apache.ivy.core.event.download.StartArtifactDownloadEvent;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadStatus;
/*     */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolveOptions;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.core.settings.Validatable;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ import org.apache.ivy.plugins.namespace.NameSpaceHelper;
/*     */ import org.apache.ivy.plugins.namespace.Namespace;
/*     */ import org.apache.ivy.plugins.resolver.util.HasLatestStrategy;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractResolver
/*     */   implements DependencyResolver, HasLatestStrategy, Validatable
/*     */ {
/*  73 */   private Boolean validate = null;
/*     */   
/*     */   private String name;
/*     */   
/*     */   private ResolverSettings settings;
/*     */   
/*  79 */   private EventManager eventManager = null;
/*     */ 
/*     */   
/*     */   private LatestStrategy latestStrategy;
/*     */ 
/*     */   
/*     */   private String latestStrategyName;
/*     */ 
/*     */   
/*     */   private Namespace namespace;
/*     */ 
/*     */   
/*     */   private String namespaceName;
/*     */ 
/*     */   
/*     */   private String cacheManagerName;
/*     */ 
/*     */   
/*     */   private RepositoryCacheManager repositoryCacheManager;
/*     */ 
/*     */   
/*     */   private String changingMatcherName;
/*     */   
/*     */   private String changingPattern;
/*     */   
/*     */   private Boolean checkmodified;
/*     */ 
/*     */   
/* 107 */   public ResolverSettings getSettings() { return this.settings; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void setSettings(ResolverSettings ivy) { this.settings = ivy; }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public String hidePassword(String name) { return name; }
/*     */ 
/*     */   
/*     */   protected boolean doValidate(ResolveData data) {
/* 134 */     if (this.validate != null) {
/* 135 */       return this.validate.booleanValue();
/*     */     }
/* 137 */     return data.isValidate();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 142 */   public boolean isValidate() { return (this.validate == null) ? true : this.validate.booleanValue(); }
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setValidate(boolean validate) { this.validate = Boolean.valueOf(validate); }
/*     */ 
/*     */ 
/*     */   
/* 150 */   protected void checkInterrupted() { IvyContext.getContext().getIvy().checkInterrupted(); }
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void reportFailure() { Message.verbose(""no failure report implemented by "" + getName()); }
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void reportFailure(Artifact art) { Message.verbose(""no failure report implemented by "" + getName()); }
/*     */ 
/*     */ 
/*     */   
/* 162 */   public String[] listTokenValues(String token, Map otherTokenValues) { return new String[0]; }
/*     */ 
/*     */ 
/*     */   
/* 166 */   public Map[] listTokenValues(String[] tokens, Map criteria) { return new Map[0]; }
/*     */ 
/*     */ 
/*     */   
/* 170 */   public OrganisationEntry[] listOrganisations() { return new OrganisationEntry[0]; }
/*     */ 
/*     */ 
/*     */   
/* 174 */   public ModuleEntry[] listModules(OrganisationEntry org) { return new ModuleEntry[0]; }
/*     */ 
/*     */ 
/*     */   
/* 178 */   public RevisionEntry[] listRevisions(ModuleEntry module) { return new RevisionEntry[0]; }
/*     */ 
/*     */ 
/*     */   
/* 182 */   public String toString() { return getName(); }
/*     */ 
/*     */   
/*     */   public void dumpSettings() {
/* 186 */     Message.verbose(""\t"" + getName() + "" ["" + getTypeName() + ""]"");
/* 187 */     Message.debug(""\t\tcache: "" + this.cacheManagerName);
/*     */   }
/*     */ 
/*     */   
/* 191 */   public String getTypeName() { return getClass().getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport download(ArtifactOrigin artifact, DownloadOptions options) {
/* 198 */     DownloadReport r = download(new Artifact[] { artifact.getArtifact() }, options);
/* 199 */     return r.getArtifactReport(artifact.getArtifact());
/*     */   }
/*     */ 
/*     */   
/* 203 */   public boolean exists(Artifact artifact) { return (locate(artifact) != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 211 */     DownloadReport dr = download(new Artifact[] { artifact }, new DownloadOptions());
/* 212 */     if (dr == null)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 217 */       throw new IllegalStateException(""null download report returned by "" + getName() + "" ("" + getClass().getName() + "")"" + "" when trying to download "" + artifact);
/*     */     }
/*     */ 
/*     */     
/* 221 */     ArtifactDownloadReport adr = dr.getArtifactReport(artifact);
/* 222 */     return (adr.getDownloadStatus() == DownloadStatus.FAILED) ? null : adr.getArtifactOrigin();
/*     */   }
/*     */   
/*     */   public LatestStrategy getLatestStrategy() {
/* 226 */     if (this.latestStrategy == null) {
/* 227 */       initLatestStrategyFromSettings();
/*     */     }
/* 229 */     return this.latestStrategy;
/*     */   }
/*     */   
/*     */   private void initLatestStrategyFromSettings() {
/* 233 */     if (getSettings() != null) {
/* 234 */       if (this.latestStrategyName != null && !""default"".equals(this.latestStrategyName)) {
/* 235 */         this.latestStrategy = getSettings().getLatestStrategy(this.latestStrategyName);
/* 236 */         if (this.latestStrategy == null) {
/* 237 */           throw new IllegalStateException(""unknown latest strategy '"" + this.latestStrategyName + ""'"");
/*     */         }
/*     */       } else {
/*     */         
/* 241 */         this.latestStrategy = getSettings().getDefaultLatestStrategy();
/* 242 */         Message.debug(getName() + "": no latest strategy defined: using default"");
/*     */       } 
/*     */     } else {
/* 245 */       throw new IllegalStateException(""no ivy instance found: impossible to get a latest strategy without ivy instance"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void setLatestStrategy(LatestStrategy latestStrategy) { this.latestStrategy = latestStrategy; }
/*     */ 
/*     */ 
/*     */   
/* 256 */   public void setLatest(String strategyName) { this.latestStrategyName = strategyName; }
/*     */ 
/*     */   
/*     */   public String getLatest() {
/* 260 */     if (this.latestStrategyName == null) {
/* 261 */       this.latestStrategyName = ""default"";
/*     */     }
/* 263 */     return this.latestStrategyName;
/*     */   }
/*     */   
/*     */   public Namespace getNamespace() {
/* 267 */     if (this.namespace == null) {
/* 268 */       initNamespaceFromSettings();
/*     */     }
/* 270 */     return this.namespace;
/*     */   }
/*     */   
/*     */   private void initNamespaceFromSettings() {
/* 274 */     if (getSettings() != null) {
/* 275 */       if (this.namespaceName != null) {
/* 276 */         this.namespace = getSettings().getNamespace(this.namespaceName);
/* 277 */         if (this.namespace == null) {
/* 278 */           throw new IllegalStateException(""unknown namespace '"" + this.namespaceName + ""'"");
/*     */         }
/*     */       } else {
/*     */         
/* 282 */         this.namespace = getSettings().getSystemNamespace();
/* 283 */         Message.debug(getName() + "": no namespace defined: using system"");
/*     */       } 
/*     */     } else {
/* 286 */       Message.verbose(getName() + "": no namespace defined nor ivy instance: using system namespace"");
/*     */       
/* 288 */       this.namespace = Namespace.SYSTEM_NAMESPACE;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 293 */   public void setNamespace(String namespaceName) { this.namespaceName = namespaceName; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 298 */   protected ModuleDescriptor toSystem(ModuleDescriptor md) { return NameSpaceHelper.toSystem(md, getNamespace()); }
/*     */ 
/*     */ 
/*     */   
/* 302 */   protected Artifact fromSystem(Artifact artifact) { return NameSpaceHelper.transform(artifact, getNamespace().getFromSystemTransformer()); }
/*     */ 
/*     */ 
/*     */   
/* 306 */   protected Artifact toSystem(Artifact artifact) { return NameSpaceHelper.transform(artifact, getNamespace().getToSystemTransformer()); }
/*     */ 
/*     */ 
/*     */   
/* 310 */   protected MetadataArtifactDownloadReport toSystem(MetadataArtifactDownloadReport report) { return NameSpaceHelper.transform(report, getNamespace().getToSystemTransformer()); }
/*     */ 
/*     */ 
/*     */   
/* 314 */   protected ResolvedModuleRevision toSystem(ResolvedModuleRevision rmr) { return NameSpaceHelper.toSystem(rmr, getNamespace()); }
/*     */ 
/*     */ 
/*     */   
/* 318 */   protected ModuleRevisionId toSystem(ModuleRevisionId resolvedMrid) { return getNamespace().getToSystemTransformer().transform(resolvedMrid); }
/*     */ 
/*     */ 
/*     */   
/* 322 */   protected DependencyDescriptor fromSystem(DependencyDescriptor dd) { return NameSpaceHelper.transform(dd, getNamespace().getFromSystemTransformer(), true); }
/*     */ 
/*     */ 
/*     */   
/* 326 */   protected DependencyDescriptor toSystem(DependencyDescriptor dd) { return NameSpaceHelper.transform(dd, getNamespace().getToSystemTransformer(), true); }
/*     */ 
/*     */ 
/*     */   
/* 330 */   protected IvyNode getSystemNode(ResolveData data, ModuleRevisionId resolvedMrid) { return data.getNode(toSystem(resolvedMrid)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 335 */   protected ResolvedModuleRevision findModuleInCache(DependencyDescriptor dd, ResolveData data) { return findModuleInCache(dd, data, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 340 */   protected ResolvedModuleRevision findModuleInCache(DependencyDescriptor dd, ResolveData data, boolean anyResolver) { return getRepositoryCacheManager().findModuleInCache(dd, dd.getDependencyRevisionId(), getCacheOptions(data), anyResolver ? null : getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 346 */   public void setChangingMatcher(String changingMatcherName) { this.changingMatcherName = changingMatcherName; }
/*     */ 
/*     */ 
/*     */   
/* 350 */   protected String getChangingMatcherName() { return this.changingMatcherName; }
/*     */ 
/*     */ 
/*     */   
/* 354 */   public void setChangingPattern(String changingPattern) { this.changingPattern = changingPattern; }
/*     */ 
/*     */ 
/*     */   
/* 358 */   protected String getChangingPattern() { return this.changingPattern; }
/*     */ 
/*     */ 
/*     */   
/* 362 */   public void setCheckmodified(boolean check) { this.checkmodified = Boolean.valueOf(check); }
/*     */ 
/*     */   
/*     */   public RepositoryCacheManager getRepositoryCacheManager() {
/* 366 */     if (this.repositoryCacheManager == null) {
/* 367 */       initRepositoryCacheManagerFromSettings();
/*     */     }
/* 369 */     return this.repositoryCacheManager;
/*     */   }
/*     */   
/*     */   private void initRepositoryCacheManagerFromSettings() {
/* 373 */     if (this.cacheManagerName == null) {
/* 374 */       this.repositoryCacheManager = this.settings.getDefaultRepositoryCacheManager();
/* 375 */       if (this.repositoryCacheManager == null) {
/* 376 */         throw new IllegalStateException(""no default cache manager defined with current settings"");
/*     */       }
/*     */     } else {
/*     */       
/* 380 */       this.repositoryCacheManager = this.settings.getRepositoryCacheManager(this.cacheManagerName);
/* 381 */       if (this.repositoryCacheManager == null) {
/* 382 */         throw new IllegalStateException(""unknown cache manager '"" + this.cacheManagerName + ""'. Available caches are "" + Arrays.asList((T[])this.settings.getRepositoryCacheManagers()));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRepositoryCacheManager(RepositoryCacheManager repositoryCacheManager) {
/* 391 */     this.cacheManagerName = repositoryCacheManager.getName();
/* 392 */     this.repositoryCacheManager = repositoryCacheManager;
/*     */   }
/*     */ 
/*     */   
/* 396 */   public void setCache(String cacheName) { this.cacheManagerName = cacheName; }
/*     */ 
/*     */ 
/*     */   
/* 400 */   public void setEventManager(EventManager eventManager) { this.eventManager = eventManager; }
/*     */ 
/*     */ 
/*     */   
/* 404 */   public EventManager getEventManager() { return this.eventManager; }
/*     */ 
/*     */   
/*     */   public void validate() {
/* 408 */     initRepositoryCacheManagerFromSettings();
/* 409 */     initNamespaceFromSettings();
/* 410 */     initLatestStrategyFromSettings();
/*     */   }
/*     */ 
/*     */   
/* 414 */   protected CacheMetadataOptions getCacheOptions(ResolveData data) { return (CacheMetadataOptions)(new CacheMetadataOptions()).setChangingMatcherName(getChangingMatcherName()).setChangingPattern(getChangingPattern()).setCheckmodified(this.checkmodified).setValidate(doValidate(data)).setNamespace(getNamespace()).setForce(data.getOptions().isRefresh()).setListener(getDownloadListener(getDownloadOptions(data.getOptions()))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   protected CacheDownloadOptions getCacheDownloadOptions(DownloadOptions options) { return (new CacheDownloadOptions()).setListener(getDownloadListener(options)); }
/*     */ 
/*     */ 
/*     */   
/* 429 */   protected DownloadOptions getDownloadOptions(ResolveOptions options) { return (DownloadOptions)(new DownloadOptions()).setLog(options.getLog()); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void abortPublishTransaction() throws IOException {}
/*     */ 
/*     */ 
/*     */   
/*     */   public void commitPublishTransaction() throws IOException {}
/*     */ 
/*     */ 
/*     */   
/*     */   public void beginPublishTransaction(ModuleRevisionId module, boolean overwrite) throws IOException {}
/*     */ 
/*     */ 
/*     */   
/*     */   private DownloadListener getDownloadListener(final DownloadOptions options) {
/* 446 */     return new DownloadListener() {
/*     */         public void needArtifact(RepositoryCacheManager cache, Artifact artifact) {
/* 448 */           if (AbstractResolver.this.eventManager != null)
/* 449 */             AbstractResolver.this.eventManager.fireIvyEvent((IvyEvent)new NeedArtifactEvent(AbstractResolver.this, artifact)); 
/*     */         }
/*     */         
/*     */         private final DownloadOptions val$options;
/*     */         private final AbstractResolver this$0;
/*     */         
/*     */         public void startArtifactDownload(RepositoryCacheManager cache, ResolvedResource rres, Artifact artifact, ArtifactOrigin origin) {
/* 456 */           if (artifact.isMetadata() || ""quiet"".equals(options.getLog())) {
/* 457 */             Message.verbose(""downloading "" + rres.getResource() + "" ..."");
/*     */           } else {
/* 459 */             Message.info(""downloading "" + rres.getResource() + "" ..."");
/*     */           } 
/* 461 */           if (AbstractResolver.this.eventManager != null) {
/* 462 */             AbstractResolver.this.eventManager.fireIvyEvent((IvyEvent)new StartArtifactDownloadEvent(AbstractResolver.this, artifact, origin));
/*     */           }
/*     */         }
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         public void endArtifactDownload(RepositoryCacheManager cache, Artifact artifact, ArtifactDownloadReport adr, File archiveFile) {
/* 470 */           if (AbstractResolver.this.eventManager != null) {
/* 471 */             AbstractResolver.this.eventManager.fireIvyEvent((IvyEvent)new EndArtifactDownloadEvent(AbstractResolver.this, artifact, adr, archiveFile));
/*     */           }
/*     */         }
/*     */       };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isAfter(ResolvedModuleRevision rmr1, ResolvedModuleRevision rmr2, Date date) {
/* 489 */     ArtifactInfo[] ais = { new ChainResolver.ResolvedModuleRevisionArtifactInfo(rmr1), new ChainResolver.ResolvedModuleRevisionArtifactInfo(rmr2) };
/*     */ 
/*     */     
/* 492 */     return (getLatestStrategy().findLatest(ais, date) == ais[0]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ResolvedModuleRevision checkLatest(ResolvedModuleRevision newModuleFound, ResolveData data) {
/* 499 */     ResolvedModuleRevision previousModuleFound = data.getCurrentResolvedModuleRevision();
/* 500 */     String newModuleDesc = describe(newModuleFound);
/* 501 */     Message.debug(""\tchecking "" + newModuleDesc + "" against "" + describe(previousModuleFound));
/* 502 */     if (previousModuleFound == null) {
/* 503 */       Message.debug(""\tmodule revision kept as first found: "" + newModuleDesc);
/* 504 */       return newModuleFound;
/* 505 */     }  if (isAfter(newModuleFound, previousModuleFound, data.getDate())) {
/* 506 */       Message.debug(""\tmodule revision kept as younger: "" + newModuleDesc);
/* 507 */       return newModuleFound;
/* 508 */     }  if (!newModuleFound.getDescriptor().isDefault() && previousModuleFound.getDescriptor().isDefault()) {
/*     */       
/* 510 */       Message.debug(""\tmodule revision kept as better (not default): "" + newModuleDesc);
/* 511 */       return newModuleFound;
/*     */     } 
/* 513 */     Message.debug(""\tmodule revision discarded as older: "" + newModuleDesc);
/* 514 */     return previousModuleFound;
/*     */   }
/*     */ 
/*     */   
/*     */   private String describe(ResolvedModuleRevision rmr) {
/* 519 */     if (rmr == null) {
/* 520 */       return ""[none]"";
/*     */     }
/* 522 */     return rmr.getId() + (rmr.getDescriptor().isDefault() ? ""[default]"" : """") + "" from "" + rmr.getResolver().getName();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\AbstractResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.AbstractSshBasedResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.repository.ssh.AbstractSshBasedRepository;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractSshBasedResolver
/*     */   extends RepositoryResolver
/*     */ {
/*     */   private boolean passfileSet = false;
/*     */   
/*  45 */   private AbstractSshBasedRepository getSshBasedRepository() { return (AbstractSshBasedRepository)getRepository(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   public void setKeyFile(File filePath) { getSshBasedRepository().setKeyFile(filePath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPassfile(File passfile) {
/*  64 */     getSshBasedRepository().setPassFile(passfile);
/*  65 */     this.passfileSet = true;
/*     */   }
/*     */   
/*     */   public void setSettings(IvySettings settings) {
/*  69 */     setSettings((ResolverSettings)settings);
/*  70 */     if (!this.passfileSet) {
/*  71 */       getSshBasedRepository().setPassFile(new File(settings.getDefaultIvyUserDir(), getSshBasedRepository().getHost() + "".ssh.passwd""));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setUserPassword(String password) { getSshBasedRepository().setUserPassword(password); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setKeyFilePassword(String password) { getSshBasedRepository().setKeyFilePassword(password); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setUser(String user) { getSshBasedRepository().setUser(user); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setHost(String host) { getSshBasedRepository().setHost(host); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setPort(int port) { getSshBasedRepository().setPort(port); }
/*     */   
/*     */   public abstract String getTypeName();
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\AbstractSshBasedResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.BasicResolver,"/*      */ package org.apache.ivy.plugins.resolver;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.IOException;
/*      */ import java.net.URL;
/*      */ import java.text.ParseException;
/*      */ import java.text.SimpleDateFormat;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.Collection;
/*      */ import java.util.Collections;
/*      */ import java.util.Date;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import java.util.ListIterator;
/*      */ import java.util.Map;
/*      */ import org.apache.ivy.core.IvyContext;
/*      */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*      */ import org.apache.ivy.core.cache.ModuleDescriptorWriter;
/*      */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*      */ import org.apache.ivy.core.module.descriptor.Artifact;
/*      */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*      */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*      */ import org.apache.ivy.core.module.id.ModuleId;
/*      */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*      */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*      */ import org.apache.ivy.core.report.DownloadReport;
/*      */ import org.apache.ivy.core.report.DownloadStatus;
/*      */ import org.apache.ivy.core.report.MetadataArtifactDownloadReport;
/*      */ import org.apache.ivy.core.resolve.DownloadOptions;
/*      */ import org.apache.ivy.core.resolve.IvyNode;
/*      */ import org.apache.ivy.core.resolve.ResolveData;
/*      */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*      */ import org.apache.ivy.core.search.ModuleEntry;
/*      */ import org.apache.ivy.core.search.OrganisationEntry;
/*      */ import org.apache.ivy.core.search.RevisionEntry;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*      */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*      */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
/*      */ import org.apache.ivy.plugins.repository.ArtifactResourceResolver;
/*      */ import org.apache.ivy.plugins.repository.Resource;
/*      */ import org.apache.ivy.plugins.repository.ResourceDownloader;
/*      */ import org.apache.ivy.plugins.repository.file.FileRepository;
/*      */ import org.apache.ivy.plugins.repository.file.FileResource;
/*      */ import org.apache.ivy.plugins.repository.url.URLRepository;
/*      */ import org.apache.ivy.plugins.repository.url.URLResource;
/*      */ import org.apache.ivy.plugins.resolver.util.MDResolvedResource;
/*      */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*      */ import org.apache.ivy.plugins.resolver.util.ResourceMDParser;
/*      */ import org.apache.ivy.util.Checks;
/*      */ import org.apache.ivy.util.HostUtil;
/*      */ import org.apache.ivy.util.Message;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public abstract class BasicResolver
/*      */   extends AbstractResolver
/*      */ {
/*      */   public static final String DESCRIPTOR_OPTIONAL = ""optional"";
/*      */   public static final String DESCRIPTOR_REQUIRED = ""required"";
/*      */   
/*      */   private static class UnresolvedDependencyException
/*      */     extends RuntimeException
/*      */   {
/*      */     private boolean error;
/*      */     
/*  102 */     public UnresolvedDependencyException() { this("""", false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  109 */     public UnresolvedDependencyException(String message) { this(message, true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public UnresolvedDependencyException(String message, boolean error) {
/*  116 */       super(message);
/*  117 */       this.error = error;
/*      */     }
/*      */     
/*  120 */     public boolean isError() { return this.error; }
/*      */   }
/*      */ 
/*      */   
/*  124 */   public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(""yyyyMMddHHmmss"");
/*      */ 
/*      */ 
/*      */   
/*      */   private String workspaceName;
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean envDependent = true;
/*      */ 
/*      */   
/*  135 */   private List ivyattempts = new ArrayList();
/*      */   
/*  137 */   private Map artattempts = new HashMap();
/*      */   
/*      */   private boolean checkconsistency = true;
/*      */   
/*      */   private boolean allownomd = true;
/*      */   
/*      */   private boolean force = false;
/*      */   
/*  145 */   private String checksums = null;
/*      */   
/*  147 */   private URLRepository extartifactrep = new URLRepository();
/*      */ 
/*      */   
/*      */   private final ArtifactResourceResolver artifactResourceResolver;
/*      */ 
/*      */   
/*      */   private final ResourceDownloader downloader;
/*      */ 
/*      */   
/*  156 */   public String getWorkspaceName() { return this.workspaceName; }
/*      */ 
/*      */ 
/*      */   
/*  160 */   public void setWorkspaceName(String workspaceName) { this.workspaceName = workspaceName; }
/*      */ 
/*      */ 
/*      */   
/*  164 */   public boolean isEnvDependent() { return this.envDependent; }
/*      */ 
/*      */ 
/*      */   
/*  168 */   public void setEnvDependent(boolean envDependent) { this.envDependent = envDependent; }
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/*  173 */     IvyContext context = IvyContext.pushNewCopyContext();
/*      */     try {
/*  175 */       ResolvedModuleRevision mr = data.getCurrentResolvedModuleRevision();
/*  176 */       if (mr != null && 
/*  177 */         shouldReturnResolvedModule(dd, mr)) {
/*  178 */         return mr;
/*      */       }
/*      */ 
/*      */       
/*  182 */       if (isForce()) {
/*  183 */         dd = dd.clone(ModuleRevisionId.newInstance(dd.getDependencyRevisionId(), ""latest.integration""));
/*      */       }
/*      */       
/*  186 */       DependencyDescriptor systemDd = dd;
/*  187 */       DependencyDescriptor nsDd = fromSystem(dd);
/*  188 */       context.setDependencyDescriptor(systemDd);
/*  189 */       context.setResolveData(data);
/*      */       
/*  191 */       clearIvyAttempts();
/*  192 */       clearArtifactAttempts();
/*  193 */       ModuleRevisionId systemMrid = systemDd.getDependencyRevisionId();
/*  194 */       ModuleRevisionId nsMrid = nsDd.getDependencyRevisionId();
/*      */       
/*  196 */       checkRevision(systemMrid);
/*      */       
/*  198 */       boolean isDynamic = getAndCheckIsDynamic(systemMrid);
/*      */ 
/*      */       
/*  201 */       ResolvedModuleRevision rmr = null;
/*  202 */       rmr = findModuleInCache(systemDd, data);
/*  203 */       if (rmr != null) {
/*  204 */         if (rmr.getDescriptor().isDefault() && rmr.getResolver() != this) {
/*  205 */           Message.verbose(""\t"" + getName() + "": found revision in cache: "" + systemMrid + "" (resolved by "" + rmr.getResolver().getName() + ""): but it's a default one, maybe we can find a better one"");
/*      */ 
/*      */         
/*      */         }
/*  209 */         else if (isForce() && rmr.getResolver() != this) {
/*  210 */           Message.verbose(""\t"" + getName() + "": found revision in cache: "" + systemMrid + "" (resolved by "" + rmr.getResolver().getName() + ""): but we are in force mode, let's try to find one ourself"");
/*      */         
/*      */         }
/*      */         else {
/*      */           
/*  215 */           Message.verbose(""\t"" + getName() + "": revision in cache: "" + systemMrid);
/*  216 */           return checkLatest(checkForcedResolvedModuleRevision(rmr), data);
/*      */         } 
/*      */       }
/*      */       
/*  220 */       checkInterrupted();
/*      */       
/*  222 */       ResolvedResource ivyRef = findIvyFileRef(nsDd, data);
/*  223 */       checkInterrupted();
/*      */ 
/*      */ 
/*      */       
/*  227 */       ModuleDescriptor systemMd = null;
/*  228 */       if (ivyRef == null) {
/*  229 */         if (!isAllownomd()) {
/*  230 */           throw new UnresolvedDependencyException(""\t"" + getName() + "": no ivy file found for "" + systemMrid, false);
/*      */         }
/*      */         
/*  233 */         DefaultModuleDescriptor defaultModuleDescriptor = DefaultModuleDescriptor.newDefaultInstance(nsMrid, nsDd.getAllDependencyArtifacts());
/*      */         
/*  235 */         ResolvedResource artifactRef = findFirstArtifactRef((ModuleDescriptor)defaultModuleDescriptor, nsDd, data);
/*  236 */         checkInterrupted();
/*  237 */         if (artifactRef == null) {
/*  238 */           throw new UnresolvedDependencyException(""\t"" + getName() + "": no ivy file nor artifact found for "" + systemMrid, false);
/*      */         }
/*      */         
/*  241 */         long lastModified = artifactRef.getLastModified();
/*  242 */         if (lastModified != 0L && defaultModuleDescriptor instanceof DefaultModuleDescriptor) {
/*  243 */           defaultModuleDescriptor.setLastModified(lastModified);
/*      */         }
/*  245 */         Message.verbose(""\t"" + getName() + "": no ivy file found for "" + systemMrid + "": using default data"");
/*      */         
/*  247 */         if (isDynamic) {
/*  248 */           defaultModuleDescriptor.setResolvedModuleRevisionId(ModuleRevisionId.newInstance(nsMrid, artifactRef.getRevision()));
/*      */         }
/*      */         
/*  251 */         systemMd = toSystem((ModuleDescriptor)defaultModuleDescriptor);
/*  252 */         MetadataArtifactDownloadReport madr = new MetadataArtifactDownloadReport(systemMd.getMetadataArtifact());
/*      */         
/*  254 */         madr.setDownloadStatus(DownloadStatus.NO);
/*  255 */         madr.setSearched(true);
/*  256 */         rmr = new ResolvedModuleRevision(this, this, systemMd, madr, isForce());
/*      */       } else {
/*      */         
/*  259 */         if (ivyRef instanceof MDResolvedResource) {
/*  260 */           rmr = ((MDResolvedResource)ivyRef).getResolvedModuleRevision();
/*      */         }
/*  262 */         if (rmr == null) {
/*  263 */           rmr = parse(ivyRef, systemDd, data);
/*  264 */           if (rmr == null) {
/*  265 */             throw new UnresolvedDependencyException();
/*      */           }
/*      */         } 
/*  268 */         if (!rmr.getReport().isDownloaded() && rmr.getReport().getLocalFile() != null)
/*      */         {
/*  270 */           return checkLatest(checkForcedResolvedModuleRevision(rmr), data);
/*      */         }
/*  272 */         ModuleDescriptor nsMd = rmr.getDescriptor();
/*      */ 
/*      */         
/*  275 */         systemMd = toSystem(nsMd);
/*  276 */         if (isCheckconsistency()) {
/*  277 */           checkDescriptorConsistency(systemMrid, systemMd, ivyRef);
/*  278 */           checkDescriptorConsistency(nsMrid, nsMd, ivyRef);
/*      */         }
/*  280 */         else if (systemMd instanceof DefaultModuleDescriptor) {
/*  281 */           DefaultModuleDescriptor defaultMd = (DefaultModuleDescriptor)systemMd;
/*  282 */           ModuleRevisionId revision = getRevision(ivyRef, systemMrid, systemMd);
/*  283 */           defaultMd.setModuleRevisionId(revision);
/*  284 */           defaultMd.setResolvedModuleRevisionId(revision);
/*      */         } else {
/*  286 */           Message.warn(""consistency disabled with instance of non DefaultModuleDescriptor... module info can't be updated, so consistency check will be done"");
/*      */ 
/*      */           
/*  289 */           checkDescriptorConsistency(nsMrid, nsMd, ivyRef);
/*  290 */           checkDescriptorConsistency(systemMrid, systemMd, ivyRef);
/*      */         } 
/*      */         
/*  293 */         rmr = new ResolvedModuleRevision(this, this, systemMd, toSystem(rmr.getReport()), isForce());
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  298 */       resolveAndCheckRevision(systemMd, systemMrid, ivyRef, isDynamic);
/*  299 */       resolveAndCheckPublicationDate(systemDd, systemMd, systemMrid, data);
/*  300 */       checkNotConvertedExclusionRule(systemMd, ivyRef, data);
/*      */       
/*  302 */       cacheModuleDescriptor(systemMd, systemMrid, ivyRef, rmr);
/*      */       
/*  304 */       return checkLatest(checkForcedResolvedModuleRevision(rmr), data);
/*  305 */     } catch (UnresolvedDependencyException ex) {
/*  306 */       if (ex.getMessage().length() > 0) {
/*  307 */         if (ex.isError()) {
/*  308 */           Message.error(ex.getMessage());
/*      */         } else {
/*  310 */           Message.verbose(ex.getMessage());
/*      */         } 
/*      */       }
/*  313 */       return data.getCurrentResolvedModuleRevision();
/*      */     } finally {
/*  315 */       IvyContext.popContext();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean shouldReturnResolvedModule(DependencyDescriptor dd, ResolvedModuleRevision mr) {
/*  324 */     ModuleRevisionId mrid = dd.getDependencyRevisionId();
/*  325 */     boolean isDynamic = getSettings().getVersionMatcher().isDynamic(mrid);
/*  326 */     boolean shouldReturn = mr.isForce();
/*  327 */     int i = shouldReturn | ((!isDynamic && !mr.getDescriptor().isDefault()) ? 1 : 0);
/*  328 */     i &= !isForce() ? 1 : 0;
/*      */     
/*  330 */     return i;
/*      */   }
/*      */   
/*      */   private ResolvedModuleRevision checkForcedResolvedModuleRevision(ResolvedModuleRevision rmr) {
/*  334 */     if (rmr == null) {
/*  335 */       return null;
/*      */     }
/*  337 */     if (!isForce() || rmr.isForce()) {
/*  338 */       return rmr;
/*      */     }
/*  340 */     return new ResolvedModuleRevision(rmr.getResolver(), rmr.getArtifactResolver(), rmr.getDescriptor(), rmr.getReport(), true);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void cacheModuleDescriptor(ModuleDescriptor systemMd, ModuleRevisionId systemMrid, ResolvedResource ivyRef, ResolvedModuleRevision rmr) {
/*  347 */     RepositoryCacheManager cacheManager = getRepositoryCacheManager();
/*      */     
/*  349 */     final ModuleDescriptorParser parser = systemMd.getParser();
/*      */ 
/*      */     
/*  352 */     Artifact requestedMetadataArtifact = (ivyRef == null) ? systemMd.getMetadataArtifact() : parser.getMetadataArtifact(ModuleRevisionId.newInstance(systemMrid, ivyRef.getRevision()), ivyRef.getResource());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  359 */     cacheManager.originalToCachedModuleDescriptor(this, ivyRef, requestedMetadataArtifact, rmr, new ModuleDescriptorWriter() {
/*      */           private final ModuleDescriptorParser val$parser;
/*      */           private final BasicResolver this$0;
/*      */           
/*      */           public void write(ResolvedResource originalMdResource, ModuleDescriptor md, File src, File dest) throws IOException, ParseException {
/*  364 */             if (originalMdResource == null) {
/*      */               
/*  366 */               XmlModuleDescriptorWriter.write(md, dest);
/*      */             } else {
/*      */               
/*  369 */               parser.toIvyFile(new FileInputStream(src), originalMdResource.getResource(), dest, md);
/*      */ 
/*      */ 
/*      */               
/*  373 */               long repLastModified = originalMdResource.getLastModified();
/*  374 */               if (repLastModified > 0L) {
/*  375 */                 dest.setLastModified(repLastModified);
/*      */               }
/*      */             } 
/*      */           }
/*      */         });
/*      */   }
/*      */ 
/*      */   
/*      */   private void checkNotConvertedExclusionRule(ModuleDescriptor systemMd, ResolvedResource ivyRef, ResolveData data) {
/*  384 */     if (!systemMd.isDefault() && data.getSettings().logNotConvertedExclusionRule() && systemMd instanceof DefaultModuleDescriptor) {
/*      */ 
/*      */       
/*  387 */       DefaultModuleDescriptor dmd = (DefaultModuleDescriptor)systemMd;
/*  388 */       if (dmd.isNamespaceUseful()) {
/*  389 */         Message.warn(""the module descriptor "" + ivyRef.getResource() + "" has information which can't be converted into "" + ""the system namespace. "" + ""It will require the availability of the namespace '"" + getNamespace().getName() + ""' to be fully usable."");
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void resolveAndCheckPublicationDate(DependencyDescriptor systemDd, ModuleDescriptor systemMd, ModuleRevisionId systemMrid, ResolveData data) {
/*  403 */     if (data.getDate() != null) {
/*  404 */       long pubDate = getPublicationDate(systemMd, systemDd, data);
/*  405 */       if (pubDate > data.getDate().getTime()) {
/*  406 */         throw new UnresolvedDependencyException(""\t"" + getName() + "": unacceptable publication date => was="" + new Date(pubDate) + "" required="" + data.getDate());
/*      */       }
/*      */       
/*  409 */       if (pubDate == -1L) {
/*  410 */         throw new UnresolvedDependencyException(""\t"" + getName() + "": impossible to guess publication date: artifact missing for "" + systemMrid);
/*      */       }
/*      */ 
/*      */       
/*  414 */       systemMd.setResolvedPublicationDate(new Date(pubDate));
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   private void checkModuleDescriptorRevision(ModuleDescriptor systemMd, ModuleRevisionId systemMrid) {
/*  420 */     if (!getSettings().getVersionMatcher().accept(systemMrid, systemMd)) {
/*  421 */       throw new UnresolvedDependencyException(""\t"" + getName() + "": unacceptable revision => was="" + systemMd.getResolvedModuleRevisionId().getRevision() + "" required="" + systemMrid.getRevision());
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean getAndCheckIsDynamic(ModuleRevisionId systemMrid) {
/*  429 */     boolean isDynamic = getSettings().getVersionMatcher().isDynamic(systemMrid);
/*  430 */     if (isDynamic && !acceptLatest()) {
/*  431 */       throw new UnresolvedDependencyException(""dynamic revisions not handled by "" + getClass().getName() + "". impossible to resolve "" + systemMrid);
/*      */     }
/*      */ 
/*      */     
/*  435 */     return isDynamic;
/*      */   }
/*      */ 
/*      */   
/*      */   private void checkRevision(ModuleRevisionId systemMrid) {
/*  440 */     int index = systemMrid.getRevision().indexOf(""@"");
/*  441 */     if (index != -1 && !systemMrid.getRevision().substring(index + 1).equals(this.workspaceName))
/*      */     {
/*  443 */       throw new UnresolvedDependencyException(""\t"" + getName() + "": unhandled revision => "" + systemMrid.getRevision());
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void resolveAndCheckRevision(ModuleDescriptor systemMd, ModuleRevisionId dependencyConstraint, ResolvedResource ivyRef, boolean isDynamic) {
/*  452 */     ModuleRevisionId resolvedMrid = systemMd.getResolvedModuleRevisionId();
/*  453 */     if (resolvedMrid.getRevision() == null || resolvedMrid.getRevision().length() == 0 || resolvedMrid.getRevision().startsWith(""working@""))
/*      */     {
/*      */       
/*  456 */       if (!isDynamic) {
/*  457 */         resolvedMrid = ModuleRevisionId.newInstance(resolvedMrid, dependencyConstraint.getRevision());
/*      */       }
/*  459 */       else if (ivyRef == null) {
/*  460 */         resolvedMrid = systemMd.getMetadataArtifact().getModuleRevisionId();
/*  461 */       } else if (ivyRef.getRevision() == null || ivyRef.getRevision().length() == 0) {
/*  462 */         resolvedMrid = ModuleRevisionId.newInstance(resolvedMrid, ""working@"" + getName());
/*      */       } else {
/*      */         
/*  465 */         resolvedMrid = ModuleRevisionId.newInstance(resolvedMrid, ivyRef.getRevision());
/*      */       } 
/*      */     }
/*      */     
/*  469 */     if (isDynamic) {
/*  470 */       Message.verbose(""\t\t["" + toSystem(resolvedMrid).getRevision() + ""] "" + dependencyConstraint.getModuleId());
/*      */     }
/*      */     
/*  473 */     systemMd.setResolvedModuleRevisionId(resolvedMrid);
/*  474 */     checkModuleDescriptorRevision(systemMd, dependencyConstraint);
/*      */   }
/*      */ 
/*      */   
/*      */   private ModuleRevisionId getRevision(ResolvedResource ivyRef, ModuleRevisionId askedMrid, ModuleDescriptor md) throws ParseException {
/*  479 */     Map allAttributes = new HashMap();
/*  480 */     allAttributes.putAll(md.getQualifiedExtraAttributes());
/*  481 */     allAttributes.putAll(askedMrid.getQualifiedExtraAttributes());
/*      */     
/*  483 */     String revision = ivyRef.getRevision();
/*  484 */     if (revision == null) {
/*  485 */       Message.debug(""no revision found in reference for "" + askedMrid);
/*  486 */       if (getSettings().getVersionMatcher().isDynamic(askedMrid)) {
/*  487 */         if (md.getModuleRevisionId().getRevision() == null) {
/*  488 */           revision = ""working@"" + getName();
/*      */         } else {
/*  490 */           Message.debug(""using "" + askedMrid);
/*  491 */           revision = askedMrid.getRevision();
/*      */         } 
/*      */       } else {
/*  494 */         Message.debug(""using "" + askedMrid);
/*  495 */         revision = askedMrid.getRevision();
/*      */       } 
/*      */     } 
/*      */     
/*  499 */     return ModuleRevisionId.newInstance(askedMrid.getOrganisation(), askedMrid.getName(), askedMrid.getBranch(), revision, allAttributes);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public ResolvedModuleRevision parse(ResolvedResource mdRef, DependencyDescriptor dd, ResolveData data) throws ParseException {
/*  506 */     DependencyDescriptor nsDd = dd;
/*  507 */     dd = toSystem(nsDd);
/*      */     
/*  509 */     ModuleRevisionId mrid = dd.getDependencyRevisionId();
/*  510 */     ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(mdRef.getResource());
/*      */     
/*  512 */     if (parser == null) {
/*  513 */       Message.warn(""no module descriptor parser available for "" + mdRef.getResource());
/*  514 */       return null;
/*      */     } 
/*  516 */     Message.verbose(""\t"" + getName() + "": found md file for "" + mrid);
/*  517 */     Message.verbose(""\t\t=> "" + mdRef);
/*  518 */     Message.debug(""\tparser = "" + parser);
/*      */     
/*  520 */     ModuleRevisionId resolvedMrid = mrid;
/*      */ 
/*      */     
/*  523 */     if (getSettings().getVersionMatcher().isDynamic(mrid)) {
/*  524 */       resolvedMrid = ModuleRevisionId.newInstance(mrid, mdRef.getRevision());
/*  525 */       IvyNode node = data.getNode(resolvedMrid);
/*  526 */       if (node != null && node.getModuleRevision() != null)
/*      */       {
/*  528 */         if (node.getDescriptor() != null && node.getDescriptor().isDefault()) {
/*  529 */           Message.verbose(""\t"" + getName() + "": found already resolved revision: "" + resolvedMrid + "": but it's a default one, maybe we can find a better one"");
/*      */         }
/*      */         else {
/*      */           
/*  533 */           Message.verbose(""\t"" + getName() + "": revision already resolved: "" + resolvedMrid);
/*      */           
/*  535 */           node.getModuleRevision().getReport().setSearched(true);
/*  536 */           return node.getModuleRevision();
/*      */         } 
/*      */       }
/*      */     } 
/*      */     
/*  541 */     Artifact moduleArtifact = parser.getMetadataArtifact(resolvedMrid, mdRef.getResource());
/*  542 */     return getRepositoryCacheManager().cacheModuleDescriptor(this, mdRef, dd, moduleArtifact, this.downloader, getCacheOptions(data));
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   protected ResourceMDParser getRMDParser(final DependencyDescriptor dd, final ResolveData data) {
/*  548 */     return new ResourceMDParser() { private final DependencyDescriptor val$dd;
/*      */         public MDResolvedResource parse(Resource resource, String rev) {
/*      */           try {
/*  551 */             ResolvedModuleRevision rmr = BasicResolver.this.parse(new ResolvedResource(resource, rev), dd, data);
/*      */             
/*  553 */             if (rmr == null) {
/*  554 */               return null;
/*      */             }
/*  556 */             return new MDResolvedResource(resource, rev, rmr);
/*      */           }
/*  558 */           catch (ParseException e) {
/*  559 */             Message.warn(""Failed to parse the file '"" + resource + ""': "" + e.getMessage());
/*      */             
/*  561 */             return null;
/*      */           } 
/*      */         }
/*      */         private final ResolveData val$data; private final BasicResolver this$0; }
/*      */       ;
/*      */   }
/*      */   
/*      */   protected ResourceMDParser getDefaultRMDParser(final ModuleId mid) {
/*  569 */     return new ResourceMDParser() { private final ModuleId val$mid; private final BasicResolver this$0;
/*      */         public MDResolvedResource parse(Resource resource, String rev) {
/*  571 */           DefaultModuleDescriptor md = DefaultModuleDescriptor.newDefaultInstance(new ModuleRevisionId(mid, rev));
/*      */           
/*  573 */           MetadataArtifactDownloadReport madr = new MetadataArtifactDownloadReport(md.getMetadataArtifact());
/*      */           
/*  575 */           madr.setDownloadStatus(DownloadStatus.NO);
/*  576 */           madr.setSearched(true);
/*  577 */           return new MDResolvedResource(resource, rev, new ResolvedModuleRevision(BasicResolver.this, BasicResolver.this, (ModuleDescriptor)md, madr, BasicResolver.this.isForce()));
/*      */         } }
/*      */       ;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void checkDescriptorConsistency(ModuleRevisionId mrid, ModuleDescriptor md, ResolvedResource ivyRef) throws ParseException {
/*  590 */     boolean ok = true;
/*  591 */     StringBuffer errors = new StringBuffer();
/*  592 */     if (!mrid.getOrganisation().equals(md.getModuleRevisionId().getOrganisation())) {
/*  593 */       Message.error(""\t"" + getName() + "": bad organisation found in "" + ivyRef.getResource() + "": expected='"" + mrid.getOrganisation() + ""' found='"" + md.getModuleRevisionId().getOrganisation() + ""'"");
/*      */ 
/*      */       
/*  596 */       errors.append(""bad organisation: expected='"" + mrid.getOrganisation() + ""' found='"" + md.getModuleRevisionId().getOrganisation() + ""'; "");
/*      */       
/*  598 */       ok = false;
/*      */     } 
/*  600 */     if (!mrid.getName().equals(md.getModuleRevisionId().getName())) {
/*  601 */       Message.error(""\t"" + getName() + "": bad module name found in "" + ivyRef.getResource() + "": expected='"" + mrid.getName() + "" found='"" + md.getModuleRevisionId().getName() + ""'"");
/*      */ 
/*      */       
/*  604 */       errors.append(""bad module name: expected='"" + mrid.getName() + ""' found='"" + md.getModuleRevisionId().getName() + ""'; "");
/*      */       
/*  606 */       ok = false;
/*      */     } 
/*  608 */     if (mrid.getBranch() != null && !mrid.getBranch().equals(md.getModuleRevisionId().getBranch())) {
/*      */       
/*  610 */       Message.error(""\t"" + getName() + "": bad branch name found in "" + ivyRef.getResource() + "": expected='"" + mrid.getBranch() + "" found='"" + md.getModuleRevisionId().getBranch() + ""'"");
/*      */ 
/*      */       
/*  613 */       errors.append(""bad branch name: expected='"" + mrid.getBranch() + ""' found='"" + md.getModuleRevisionId().getBranch() + ""'; "");
/*      */       
/*  615 */       ok = false;
/*      */     } 
/*  617 */     if (ivyRef.getRevision() != null && !ivyRef.getRevision().startsWith(""working@"")) {
/*  618 */       ModuleRevisionId expectedMrid = ModuleRevisionId.newInstance(mrid, ivyRef.getRevision());
/*      */       
/*  620 */       if (!getSettings().getVersionMatcher().accept(expectedMrid, md)) {
/*  621 */         Message.error(""\t"" + getName() + "": bad revision found in "" + ivyRef.getResource() + "": expected='"" + ivyRef.getRevision() + "" found='"" + md.getModuleRevisionId().getRevision() + ""'"");
/*      */ 
/*      */         
/*  624 */         errors.append(""bad revision: expected='"" + ivyRef.getRevision() + ""' found='"" + md.getModuleRevisionId().getRevision() + ""'; "");
/*      */         
/*  626 */         ok = false;
/*      */       } 
/*      */     } 
/*  629 */     if (!getSettings().getStatusManager().isStatus(md.getStatus())) {
/*  630 */       Message.error(""\t"" + getName() + "": bad status found in "" + ivyRef.getResource() + "": '"" + md.getStatus() + ""'"");
/*      */       
/*  632 */       errors.append(""bad status: '"" + md.getStatus() + ""'; "");
/*  633 */       ok = false;
/*      */     } 
/*  635 */     for (Iterator it = mrid.getExtraAttributes().entrySet().iterator(); it.hasNext(); ) {
/*  636 */       Map.Entry extra = it.next();
/*  637 */       if (extra.getValue() != null && !extra.getValue().equals(md.getExtraAttribute((String)extra.getKey()))) {
/*      */         
/*  639 */         String errorMsg = ""bad "" + extra.getKey() + "" found in "" + ivyRef.getResource() + "": expected='"" + extra.getValue() + ""' found='"" + md.getExtraAttribute((String)extra.getKey()) + ""'"";
/*      */ 
/*      */         
/*  642 */         Message.error(""\t"" + getName() + "": "" + errorMsg);
/*  643 */         errors.append(errorMsg + "";"");
/*  644 */         ok = false;
/*      */       } 
/*      */     } 
/*  647 */     if (!ok) {
/*  648 */       throw new ParseException(""inconsistent module descriptor file found in '"" + ivyRef.getResource() + ""': "" + errors, 0);
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   protected void clearIvyAttempts() {
/*  654 */     this.ivyattempts.clear();
/*  655 */     clearArtifactAttempts();
/*      */   }
/*      */   
/*      */   protected void logIvyAttempt(String attempt) {
/*  659 */     this.ivyattempts.add(attempt);
/*  660 */     Message.verbose(""\t\ttried "" + attempt);
/*      */   }
/*      */   
/*      */   protected void logArtifactAttempt(Artifact art, String attempt) {
/*  664 */     List attempts = (List)this.artattempts.get(art);
/*  665 */     if (attempts == null) {
/*  666 */       attempts = new ArrayList();
/*  667 */       this.artattempts.put(art, attempts);
/*      */     } 
/*  669 */     attempts.add(attempt);
/*  670 */     Message.verbose(""\t\ttried "" + attempt);
/*      */   }
/*      */   
/*      */   protected void logAttempt(String attempt) {
/*  674 */     Artifact currentArtifact = (Artifact)IvyContext.getContext().get(getName() + "".artifact"");
/*  675 */     if (currentArtifact != null) {
/*  676 */       logArtifactAttempt(currentArtifact, attempt);
/*      */     } else {
/*  678 */       logIvyAttempt(attempt);
/*      */     } 
/*      */   }
/*      */   
/*      */   public void reportFailure() {
/*  683 */     Message.warn(""==== "" + getName() + "": tried"");
/*  684 */     for (ListIterator iter = this.ivyattempts.listIterator(); iter.hasNext(); ) {
/*  685 */       String m = iter.next();
/*  686 */       Message.warn(""  "" + m);
/*      */     } 
/*  688 */     for (Iterator iter = this.artattempts.keySet().iterator(); iter.hasNext(); ) {
/*  689 */       Artifact art = iter.next();
/*  690 */       List attempts = (List)this.artattempts.get(art);
/*  691 */       if (attempts != null) {
/*  692 */         Message.warn(""  -- artifact "" + art + "":"");
/*  693 */         for (ListIterator iterator = attempts.listIterator(); iterator.hasNext(); ) {
/*  694 */           String m = iterator.next();
/*  695 */           Message.warn(""  "" + m);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */   
/*      */   public void reportFailure(Artifact art) {
/*  702 */     Message.warn(""==== "" + getName() + "": tried"");
/*  703 */     List attempts = (List)this.artattempts.get(art);
/*  704 */     if (attempts != null) {
/*  705 */       for (ListIterator iter = attempts.listIterator(); iter.hasNext(); ) {
/*  706 */         String m = iter.next();
/*  707 */         Message.warn(""  "" + m);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*  713 */   protected boolean acceptLatest() { return true; }
/*      */ 
/*      */   
/*      */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/*  717 */     RepositoryCacheManager cacheManager = getRepositoryCacheManager();
/*      */     
/*  719 */     clearArtifactAttempts();
/*  720 */     DownloadReport dr = new DownloadReport();
/*  721 */     for (int i = 0; i < artifacts.length; i++) {
/*  722 */       ArtifactDownloadReport adr = cacheManager.download(artifacts[i], this.artifactResourceResolver, this.downloader, getCacheDownloadOptions(options));
/*      */ 
/*      */       
/*  725 */       if (DownloadStatus.FAILED == adr.getDownloadStatus()) {
/*  726 */         if (!""missing artifact"".equals(adr.getDownloadDetails())) {
/*  727 */           Message.warn(""\t"" + adr);
/*      */         }
/*  729 */       } else if (DownloadStatus.NO == adr.getDownloadStatus()) {
/*  730 */         Message.verbose(""\t"" + adr);
/*  731 */       } else if (""quiet"".equals(options.getLog())) {
/*  732 */         Message.verbose(""\t"" + adr);
/*      */       } else {
/*  734 */         Message.info(""\t"" + adr);
/*      */       } 
/*  736 */       dr.addArtifactReport(adr);
/*  737 */       checkInterrupted();
/*      */     } 
/*  739 */     return dr;
/*      */   }
/*      */ 
/*      */   
/*  743 */   protected void clearArtifactAttempts() { this.artattempts.clear(); }
/*      */ 
/*      */   
/*      */   public ArtifactDownloadReport download(final ArtifactOrigin origin, DownloadOptions options) {
/*  747 */     Checks.checkNotNull(origin, ""origin"");
/*  748 */     return getRepositoryCacheManager().download(origin.getArtifact(), new ArtifactResourceResolver() { private final ArtifactOrigin val$origin;
/*      */           private final BasicResolver this$0;
/*      */           
/*      */           public ResolvedResource resolve(Artifact artifact) {
/*      */             try {
/*  753 */               Resource resource = BasicResolver.this.getResource(origin.getLocation());
/*  754 */               if (resource == null) {
/*  755 */                 return null;
/*      */               }
/*  757 */               String revision = origin.getArtifact().getModuleRevisionId().getRevision();
/*  758 */               return new ResolvedResource(resource, revision);
/*  759 */             } catch (IOException e) {
/*  760 */               return null;
/*      */             } 
/*      */           } }
/*      */         this.downloader, getCacheDownloadOptions(options));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean exists(Artifact artifact) {
/*  771 */     ResolvedResource artifactRef = getArtifactRef(artifact, null);
/*  772 */     if (artifactRef != null) {
/*  773 */       return artifactRef.getResource().exists();
/*      */     }
/*  775 */     return false;
/*      */   }
/*      */   
/*      */   public ArtifactOrigin locate(Artifact artifact) {
/*  779 */     ArtifactOrigin origin = getRepositoryCacheManager().getSavedArtifactOrigin(artifact);
/*  780 */     if (!ArtifactOrigin.isUnknown(origin)) {
/*  781 */       return origin;
/*      */     }
/*  783 */     ResolvedResource artifactRef = getArtifactRef(artifact, null);
/*  784 */     if (artifactRef != null && artifactRef.getResource().exists()) {
/*  785 */       return new ArtifactOrigin(artifact, artifactRef.getResource().isLocal(), artifactRef.getResource().getName());
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  790 */     return null;
/*      */   }
/*      */ 
/*      */   
/*      */   protected long getPublicationDate(ModuleDescriptor md, DependencyDescriptor dd, ResolveData data) {
/*  795 */     if (md.getPublicationDate() != null) {
/*  796 */       return md.getPublicationDate().getTime();
/*      */     }
/*  798 */     ResolvedResource artifactRef = findFirstArtifactRef(md, dd, data);
/*  799 */     if (artifactRef != null) {
/*  800 */       return artifactRef.getLastModified();
/*      */     }
/*  802 */     return -1L;
/*      */   }
/*      */ 
/*      */   
/*  806 */   public String toString() { return getName(); }
/*      */ 
/*      */   
/*      */   public String[] listTokenValues(String token, Map otherTokenValues) {
/*  810 */     Collection ret = findNames(otherTokenValues, token);
/*  811 */     return (String[])ret.toArray((Object[])new String[ret.size()]);
/*      */   }
/*      */   
/*      */   public OrganisationEntry[] listOrganisations() {
/*  815 */     Collection names = findNames(Collections.EMPTY_MAP, ""organisation"");
/*  816 */     OrganisationEntry[] ret = new OrganisationEntry[names.size()];
/*  817 */     int i = 0;
/*  818 */     for (Iterator iter = names.iterator(); iter.hasNext(); i++) {
/*  819 */       String org = iter.next();
/*  820 */       ret[i] = new OrganisationEntry(this, org);
/*      */     } 
/*  822 */     return ret;
/*      */   }
/*      */   
/*      */   public ModuleEntry[] listModules(OrganisationEntry org) {
/*  826 */     Map tokenValues = new HashMap();
/*  827 */     tokenValues.put(""organisation"", org.getOrganisation());
/*  828 */     Collection names = findNames(tokenValues, ""module"");
/*  829 */     ModuleEntry[] ret = new ModuleEntry[names.size()];
/*  830 */     int i = 0;
/*  831 */     for (Iterator iter = names.iterator(); iter.hasNext(); i++) {
/*  832 */       String name = iter.next();
/*  833 */       ret[i] = new ModuleEntry(org, name);
/*      */     } 
/*  835 */     return ret;
/*      */   }
/*      */   
/*      */   public RevisionEntry[] listRevisions(ModuleEntry mod) {
/*  839 */     Map tokenValues = new HashMap();
/*  840 */     tokenValues.put(""organisation"", mod.getOrganisation());
/*  841 */     tokenValues.put(""module"", mod.getModule());
/*  842 */     Collection names = findNames(tokenValues, ""revision"");
/*  843 */     RevisionEntry[] ret = new RevisionEntry[names.size()];
/*  844 */     int i = 0;
/*  845 */     for (Iterator iter = names.iterator(); iter.hasNext(); i++) {
/*  846 */       String name = iter.next();
/*  847 */       ret[i] = new RevisionEntry(mod, name);
/*      */     } 
/*  849 */     return ret;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected ResolvedResource findFirstArtifactRef(ModuleDescriptor md, DependencyDescriptor dd, ResolveData data) {
/*  856 */     ResolvedResource ret = null;
/*  857 */     String[] conf = md.getConfigurationsNames();
/*  858 */     for (int i = 0; i < conf.length; i++) {
/*  859 */       Artifact[] artifacts = md.getArtifacts(conf[i]);
/*  860 */       for (int j = 0; j < artifacts.length; j++) {
/*  861 */         ret = getArtifactRef(artifacts[j], data.getDate());
/*  862 */         if (ret != null) {
/*  863 */           return ret;
/*      */         }
/*      */       } 
/*      */     } 
/*  867 */     return null;
/*      */   }
/*      */   
/*      */   protected long getAndCheck(Resource resource, File dest) throws IOException {
/*  871 */     long size = get(resource, dest);
/*  872 */     String[] checksums = getChecksumAlgorithms();
/*  873 */     boolean checked = false;
/*  874 */     for (int i = 0; i < checksums.length && !checked; i++) {
/*  875 */       checked = check(resource, dest, checksums[i]);
/*      */     }
/*  877 */     return size;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean check(Resource resource, File dest, String algorithm) throws IOException {
/*  895 */     Resource csRes = resource.clone(resource.getName() + ""."" + algorithm);
/*  896 */     if (csRes.exists()) {
/*  897 */       Message.debug(algorithm + "" file found for "" + resource + "": checking..."");
/*  898 */       File csFile = File.createTempFile(""ivytmp"", algorithm);
/*      */       try {
/*  900 */         get(csRes, csFile);
/*      */ 
/*      */ 
/*      */       
/*      */       }
/*      */       finally {
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  910 */         csFile.delete();
/*      */       } 
/*      */     } 
/*  913 */     return false;
/*      */   }
/*      */ 
/*      */   
/*      */   protected ResolvedResource getArtifactRef(Artifact artifact, Date date) {
/*  918 */     IvyContext.getContext().set(getName() + "".artifact"", artifact);
/*      */     try {
/*  920 */       ResolvedResource ret = findArtifactRef(artifact, date);
/*  921 */       if (ret == null && artifact.getUrl() != null) {
/*  922 */         Object object; URL url = artifact.getUrl();
/*  923 */         Message.verbose(""\tusing url for "" + artifact + "": "" + url);
/*  924 */         logArtifactAttempt(artifact, url.toExternalForm());
/*      */         
/*  926 */         if (""file"".equals(url.getProtocol())) {
/*  927 */           object = new FileResource(new FileRepository(), new File(url.getPath()));
/*      */         } else {
/*  929 */           object = new URLResource(url);
/*      */         } 
/*  931 */         ret = new ResolvedResource((Resource)object, artifact.getModuleRevisionId().getRevision());
/*      */       } 
/*      */       
/*  934 */       return ret;
/*      */     } finally {
/*  936 */       IvyContext.getContext().set(getName() + "".artifact"", null);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  945 */   public boolean isCheckconsistency() { return this.checkconsistency; }
/*      */ 
/*      */ 
/*      */   
/*  949 */   public void setCheckconsistency(boolean checkConsitency) { this.checkconsistency = checkConsitency; }
/*      */ 
/*      */ 
/*      */   
/*  953 */   public void setForce(boolean force) { this.force = force; }
/*      */ 
/*      */ 
/*      */   
/*  957 */   public boolean isForce() { return this.force; }
/*      */ 
/*      */ 
/*      */   
/*  961 */   public boolean isAllownomd() { return this.allownomd; }
/*      */ 
/*      */   
/*      */   public void setAllownomd(boolean b) {
/*  965 */     Message.deprecated(""allownomd is deprecated, please use descriptor=\"""" + (b ? ""optional"" : ""required"") + ""\"" instead"");
/*      */ 
/*      */     
/*  968 */     this.allownomd = b;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDescriptor(String descriptorRule) {
/*  978 */     if (""required"".equals(descriptorRule)) {
/*  979 */       this.allownomd = false;
/*  980 */     } else if (""optional"".equals(descriptorRule)) {
/*  981 */       this.allownomd = true;
/*      */     } else {
/*  983 */       throw new IllegalArgumentException(""unknown descriptor rule '"" + descriptorRule + ""'. Allowed rules are: "" + Arrays.asList((T[])new String[] { ""required"", ""optional"" }));
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getChecksumAlgorithms() {
/*  991 */     String csDef = (this.checksums == null) ? getSettings().getVariable(""ivy.checksums"") : this.checksums;
/*  992 */     if (csDef == null) {
/*  993 */       return new String[0];
/*      */     }
/*      */ 
/*      */     
/*  997 */     String[] checksums = csDef.split("","");
/*  998 */     List algos = new ArrayList();
/*  999 */     for (int i = 0; i < checksums.length; i++) {
/* 1000 */       String cs = checksums[i].trim();
/* 1001 */       if (!"""".equals(cs) && !""none"".equals(cs)) {
/* 1002 */         algos.add(cs);
/*      */       }
/*      */     } 
/* 1005 */     return algos.toArray(new String[algos.size()]);
/*      */   }
/*      */ 
/*      */   
/* 1009 */   public void setChecksums(String checksums) { this.checksums = checksums; }
/*      */   
/*      */   public BasicResolver() {
/* 1012 */     this.artifactResourceResolver = new ArtifactResourceResolver() { private final BasicResolver this$0;
/*      */         
/*      */         public ResolvedResource resolve(Artifact artifact) {
/* 1015 */           artifact = BasicResolver.this.fromSystem(artifact);
/* 1016 */           return BasicResolver.this.getArtifactRef(artifact, null);
/*      */         } }
/*      */       ;
/*      */     
/* 1020 */     this.downloader = new ResourceDownloader() { private final BasicResolver this$0;
/*      */         public void download(Artifact artifact, Resource resource, File dest) throws IOException {
/* 1022 */           if (dest.exists()) {
/* 1023 */             dest.delete();
/*      */           }
/* 1025 */           File part = new File(dest.getAbsolutePath() + "".part"");
/* 1026 */           if (resource.getName().equals(String.valueOf(artifact.getUrl()))) {
/*      */             
/* 1028 */             if (part.getParentFile() != null) {
/* 1029 */               part.getParentFile().mkdirs();
/*      */             }
/* 1031 */             BasicResolver.this.extartifactrep.get(resource.getName(), part);
/*      */           } else {
/* 1033 */             BasicResolver.this.getAndCheck(resource, part);
/*      */           } 
/* 1035 */           if (!part.renameTo(dest))
/* 1036 */             throw new IOException(""impossible to move part file to definitive one: "" + part + "" -> "" + dest); 
/*      */         } }
/*      */       ;
/*      */     this.workspaceName = HostUtil.getLocalHostName();
/*      */   }
/*      */   
/*      */   protected abstract Resource getResource(String paramString) throws IOException;
/*      */   
/*      */   protected abstract Collection findNames(Map paramMap, String paramString);
/*      */   
/*      */   protected abstract ResolvedResource findArtifactRef(Artifact paramArtifact, Date paramDate);
/*      */   
/*      */   protected abstract long get(Resource paramResource, File paramFile) throws IOException;
/*      */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\BasicResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.CacheResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.cache.DefaultRepositoryCacheManager;
/*     */ import org.apache.ivy.core.cache.RepositoryCacheManager;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadStatus;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.IvyNode;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.plugins.repository.file.FileResource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CacheResolver
/*     */   extends FileSystemResolver
/*     */ {
/*     */   public CacheResolver() {}
/*     */   
/*     */   public CacheResolver(ResolverSettings settings) {
/*  50 */     setSettings(settings);
/*  51 */     setName(""cache"");
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/*  56 */     clearIvyAttempts();
/*     */     
/*  58 */     ModuleRevisionId mrid = dd.getDependencyRevisionId();
/*     */ 
/*     */     
/*  61 */     ResolvedModuleRevision rmr = getRepositoryCacheManager().findModuleInCache(dd, mrid, getCacheOptions(data), null);
/*     */     
/*  63 */     if (rmr != null) {
/*  64 */       Message.verbose(""\t"" + getName() + "": revision in cache: "" + mrid);
/*  65 */       return rmr;
/*  66 */     }  if (!getSettings().getVersionMatcher().isDynamic(mrid)) {
/*  67 */       Message.verbose(""\t"" + getName() + "": no ivy file in cache found for "" + mrid);
/*  68 */       return null;
/*     */     } 
/*  70 */     ensureConfigured();
/*  71 */     ResolvedResource ivyRef = findIvyFileRef(dd, data);
/*  72 */     if (ivyRef != null) {
/*  73 */       Message.verbose(""\t"" + getName() + "": found ivy file in cache for "" + mrid);
/*  74 */       Message.verbose(""\t\t=> "" + ivyRef);
/*     */       
/*  76 */       ModuleRevisionId resolvedMrid = ModuleRevisionId.newInstance(mrid, ivyRef.getRevision());
/*     */       
/*  78 */       IvyNode node = data.getNode(resolvedMrid);
/*  79 */       if (node != null && node.getModuleRevision() != null) {
/*     */         
/*  81 */         Message.verbose(""\t"" + getName() + "": revision already resolved: "" + resolvedMrid);
/*     */         
/*  83 */         return node.getModuleRevision();
/*     */       } 
/*  85 */       rmr = getRepositoryCacheManager().findModuleInCache(dd.clone(ModuleRevisionId.newInstance(dd.getDependencyRevisionId(), ivyRef.getRevision())), dd.getDependencyRevisionId(), getCacheOptions(data), null);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  90 */       if (rmr != null) {
/*  91 */         Message.verbose(""\t"" + getName() + "": revision in cache: "" + resolvedMrid);
/*  92 */         return rmr;
/*     */       } 
/*  94 */       Message.error(""\t"" + getName() + "": inconsistent cache: clean it and resolve again"");
/*     */       
/*  96 */       return null;
/*     */     } 
/*     */     
/*  99 */     Message.verbose(""\t"" + getName() + "": no ivy file in cache found for "" + mrid);
/* 100 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/* 106 */     clearArtifactAttempts();
/* 107 */     DownloadReport dr = new DownloadReport();
/* 108 */     for (int i = 0; i < artifacts.length; i++) {
/* 109 */       ArtifactDownloadReport adr = new ArtifactDownloadReport(artifacts[i]);
/* 110 */       dr.addArtifactReport(adr);
/* 111 */       ResolvedResource artifactRef = getArtifactRef(artifacts[i], null);
/* 112 */       if (artifactRef != null) {
/* 113 */         Message.verbose(""\t[NOT REQUIRED] "" + artifacts[i]);
/* 114 */         ArtifactOrigin origin = new ArtifactOrigin(artifacts[i], true, artifactRef.getResource().getName());
/*     */         
/* 116 */         File archiveFile = ((FileResource)artifactRef.getResource()).getFile();
/* 117 */         adr.setDownloadStatus(DownloadStatus.NO);
/* 118 */         adr.setSize(archiveFile.length());
/* 119 */         adr.setArtifactOrigin(origin);
/* 120 */         adr.setLocalFile(archiveFile);
/*     */       } else {
/* 122 */         adr.setDownloadStatus(DownloadStatus.FAILED);
/*     */       } 
/*     */     } 
/* 125 */     return dr;
/*     */   }
/*     */   
/*     */   public boolean exists(Artifact artifact) {
/* 129 */     ensureConfigured();
/* 130 */     return super.exists(artifact);
/*     */   }
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 134 */     ensureConfigured();
/* 135 */     return super.locate(artifact);
/*     */   }
/*     */   
/*     */   public void publish(Artifact artifact, File src, boolean overwrite) throws IOException {
/* 139 */     ensureConfigured();
/* 140 */     super.publish(artifact, src, overwrite);
/*     */   }
/*     */   
/*     */   public OrganisationEntry[] listOrganisations() {
/* 144 */     ensureConfigured();
/* 145 */     return super.listOrganisations();
/*     */   }
/*     */   
/*     */   public ModuleEntry[] listModules(OrganisationEntry org) {
/* 149 */     ensureConfigured();
/* 150 */     return super.listModules(org);
/*     */   }
/*     */   
/*     */   public RevisionEntry[] listRevisions(ModuleEntry module) {
/* 154 */     ensureConfigured();
/* 155 */     return super.listRevisions(module);
/*     */   }
/*     */ 
/*     */   
/* 159 */   public void dumpSettings() { Message.verbose(""\t"" + getName() + "" [cache]""); }
/*     */ 
/*     */   
/*     */   private void ensureConfigured() {
/* 163 */     if (getIvyPatterns().isEmpty()) {
/* 164 */       setIvyPatterns(new ArrayList());
/* 165 */       setArtifactPatterns(new ArrayList());
/* 166 */       RepositoryCacheManager[] caches = getSettings().getRepositoryCacheManagers();
/* 167 */       for (int i = 0; i < caches.length; i++) {
/* 168 */         if (caches[i] instanceof DefaultRepositoryCacheManager) {
/* 169 */           DefaultRepositoryCacheManager c = (DefaultRepositoryCacheManager)caches[i];
/* 170 */           addIvyPattern(c.getBasedir().getAbsolutePath() + ""/"" + c.getIvyPattern());
/* 171 */           addArtifactPattern(c.getBasedir().getAbsolutePath() + ""/"" + c.getArtifactPattern());
/*     */         } else {
/*     */           
/* 174 */           Message.verbose(caches[i] + "": cache implementation is not a DefaultRepositoryCacheManager:"" + "" unable to configure cache resolver with it"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public String getTypeName() { return ""cache""; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\CacheResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.ChainResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadStatus;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ import org.apache.ivy.plugins.resolver.util.HasLatestStrategy;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ChainResolver
/*     */   extends AbstractResolver
/*     */ {
/*     */   public static class ResolvedModuleRevisionArtifactInfo
/*     */     implements ArtifactInfo
/*     */   {
/*     */     private ResolvedModuleRevision rmr;
/*     */     
/*  53 */     public ResolvedModuleRevisionArtifactInfo(ResolvedModuleRevision rmr) { this.rmr = rmr; }
/*     */ 
/*     */ 
/*     */     
/*  57 */     public String getRevision() { return this.rmr.getId().getRevision(); }
/*     */ 
/*     */ 
/*     */     
/*  61 */     public long getLastModified() { return this.rmr.getPublicationDate().getTime(); }
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean returnFirst = false;
/*     */ 
/*     */   
/*  68 */   private List chain = new ArrayList();
/*     */   
/*     */   private boolean dual;
/*     */   
/*  72 */   private Boolean checkmodified = null;
/*     */ 
/*     */   
/*  75 */   public void add(DependencyResolver resolver) { this.chain.add(resolver); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isCheckmodified() {
/*  84 */     if (this.checkmodified == null) {
/*  85 */       if (getSettings() != null) {
/*  86 */         String check = getSettings().getVariable(""ivy.resolver.default.check.modified"");
/*  87 */         return (check != null) ? Boolean.valueOf(check).booleanValue() : false;
/*     */       } 
/*  89 */       return false;
/*     */     } 
/*     */     
/*  92 */     return this.checkmodified.booleanValue();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setCheckmodified(boolean check) { this.checkmodified = Boolean.valueOf(check); }
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/* 102 */     data = new ResolveData(data, doValidate(data));
/*     */     
/* 104 */     List errors = new ArrayList();
/*     */     
/* 106 */     ResolvedModuleRevision resolved = data.getCurrentResolvedModuleRevision();
/* 107 */     ResolvedModuleRevision mr = resolved;
/*     */     
/* 109 */     if (mr == null) {
/* 110 */       Message.verbose(getName() + "": Checking cache for: "" + dd);
/* 111 */       mr = findModuleInCache(dd, data, true);
/* 112 */       if (mr != null) {
/* 113 */         Message.verbose(getName() + "": module revision found in cache: "" + mr.getId());
/* 114 */         if (!isCheckmodified()) {
/* 115 */           mr = forcedRevision(mr);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 120 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 121 */       DependencyResolver resolver = iter.next();
/* 122 */       LatestStrategy oldLatest = setLatestIfRequired(resolver, getLatestStrategy());
/*     */       try {
/* 124 */         ResolvedModuleRevision previouslyResolved = mr;
/* 125 */         data.setCurrentResolvedModuleRevision(previouslyResolved);
/* 126 */         mr = resolver.getDependency(dd, data);
/* 127 */         if (mr != previouslyResolved && isReturnFirst()) {
/* 128 */           mr = forcedRevision(mr);
/*     */         }
/* 130 */       } catch (Exception ex) {
/* 131 */         Message.verbose(""problem occured while resolving "" + dd + "" with "" + resolver + "": "" + StringUtils.getStackTrace(ex));
/*     */         
/* 133 */         errors.add(ex);
/*     */       } finally {
/* 135 */         if (oldLatest != null) {
/* 136 */           setLatest(resolver, oldLatest);
/*     */         }
/*     */       } 
/* 139 */       checkInterrupted();
/*     */     } 
/* 141 */     if (mr == null && !errors.isEmpty()) {
/* 142 */       if (errors.size() == 1) {
/* 143 */         Exception ex = errors.get(0);
/* 144 */         if (ex instanceof RuntimeException)
/* 145 */           throw (RuntimeException)ex; 
/* 146 */         if (ex instanceof ParseException) {
/* 147 */           throw (ParseException)ex;
/*     */         }
/* 149 */         throw new RuntimeException(ex.toString(), ex);
/*     */       } 
/*     */       
/* 152 */       StringBuffer err = new StringBuffer();
/* 153 */       for (Iterator iter = errors.iterator(); iter.hasNext(); ) {
/* 154 */         Exception ex = iter.next();
/* 155 */         err.append(""\t"").append(StringUtils.getErrorMessage(ex)).append(""\n"");
/*     */       } 
/* 157 */       err.setLength(err.length() - 1);
/* 158 */       throw new RuntimeException(""several problems occured while resolving "" + dd + "":\n"" + err);
/*     */     } 
/*     */ 
/*     */     
/* 162 */     if (resolved == mr)
/*     */     {
/* 164 */       return resolved;
/*     */     }
/* 166 */     return resolvedRevision(mr);
/*     */   }
/*     */   
/*     */   private ResolvedModuleRevision resolvedRevision(ResolvedModuleRevision mr) {
/* 170 */     if (isDual() && mr != null) {
/* 171 */       return new ResolvedModuleRevision(mr.getResolver(), this, mr.getDescriptor(), mr.getReport(), mr.isForce());
/*     */     }
/*     */     
/* 174 */     return mr;
/*     */   }
/*     */ 
/*     */   
/*     */   private ResolvedModuleRevision forcedRevision(ResolvedModuleRevision rmr) {
/* 179 */     if (rmr == null) {
/* 180 */       return null;
/*     */     }
/* 182 */     return new ResolvedModuleRevision(rmr.getResolver(), rmr.getArtifactResolver(), rmr.getDescriptor(), rmr.getReport(), true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private LatestStrategy setLatestIfRequired(DependencyResolver resolver, LatestStrategy latestStrategy) {
/* 189 */     String latestName = getLatestStrategyName(resolver);
/* 190 */     if (latestName != null && !""default"".equals(latestName)) {
/* 191 */       LatestStrategy oldLatest = getLatest(resolver);
/* 192 */       setLatest(resolver, latestStrategy);
/* 193 */       return oldLatest;
/*     */     } 
/* 195 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public ResolvedResource findIvyFileRef(DependencyDescriptor dd, ResolveData data) {
/* 200 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 201 */       DependencyResolver resolver = iter.next();
/* 202 */       ResolvedResource result = resolver.findIvyFileRef(dd, data);
/* 203 */       if (result != null) {
/* 204 */         return result;
/*     */       }
/*     */     } 
/*     */     
/* 208 */     return null;
/*     */   }
/*     */   
/*     */   public void reportFailure() {
/* 212 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 213 */       DependencyResolver resolver = iter.next();
/* 214 */       resolver.reportFailure();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void reportFailure(Artifact art) {
/* 219 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 220 */       DependencyResolver resolver = iter.next();
/* 221 */       resolver.reportFailure(art);
/*     */     } 
/*     */   }
/*     */   
/*     */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/* 226 */     List artifactsToDownload = new ArrayList(Arrays.asList((Object[])artifacts));
/* 227 */     DownloadReport report = new DownloadReport();
/* 228 */     for (Iterator iter = this.chain.iterator(); iter.hasNext() && !artifactsToDownload.isEmpty(); ) {
/* 229 */       DependencyResolver resolver = iter.next();
/* 230 */       DownloadReport r = resolver.download((Artifact[])artifactsToDownload.toArray((Object[])new Artifact[artifactsToDownload.size()]), options);
/*     */       
/* 232 */       ArtifactDownloadReport[] adr = r.getArtifactsReports();
/* 233 */       for (int i = 0; i < adr.length; i++) {
/* 234 */         if (adr[i].getDownloadStatus() != DownloadStatus.FAILED) {
/* 235 */           artifactsToDownload.remove(adr[i].getArtifact());
/* 236 */           report.addArtifactReport(adr[i]);
/*     */         } 
/*     */       } 
/*     */     } 
/* 240 */     for (Iterator iter = artifactsToDownload.iterator(); iter.hasNext(); ) {
/* 241 */       Artifact art = iter.next();
/* 242 */       ArtifactDownloadReport adr = new ArtifactDownloadReport(art);
/* 243 */       adr.setDownloadStatus(DownloadStatus.FAILED);
/* 244 */       report.addArtifactReport(adr);
/*     */     } 
/* 246 */     return report;
/*     */   }
/*     */ 
/*     */   
/* 250 */   public List getResolvers() { return this.chain; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void publish(Artifact artifact, File src, boolean overwrite) throws IOException { getFirstResolver().publish(artifact, src, overwrite); }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void abortPublishTransaction() throws IOException { getFirstResolver().abortPublishTransaction(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 264 */   public void beginPublishTransaction(ModuleRevisionId module, boolean overwrite) throws IOException { getFirstResolver().beginPublishTransaction(module, overwrite); }
/*     */ 
/*     */ 
/*     */   
/* 268 */   public void commitPublishTransaction() throws IOException { getFirstResolver().commitPublishTransaction(); }
/*     */ 
/*     */   
/*     */   private DependencyResolver getFirstResolver() {
/* 272 */     if (this.chain.isEmpty()) {
/* 273 */       throw new IllegalStateException(""invalid chain resolver with no sub resolver"");
/*     */     }
/* 275 */     return this.chain.get(0);
/*     */   }
/*     */ 
/*     */   
/* 279 */   public boolean isReturnFirst() { return this.returnFirst; }
/*     */ 
/*     */ 
/*     */   
/* 283 */   public void setReturnFirst(boolean returnFirst) { this.returnFirst = returnFirst; }
/*     */ 
/*     */   
/*     */   public void dumpSettings() {
/* 287 */     Message.verbose(""\t"" + getName() + "" [chain] "" + this.chain);
/* 288 */     Message.debug(""\t\treturn first: "" + isReturnFirst());
/* 289 */     Message.debug(""\t\tdual: "" + isDual());
/* 290 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 291 */       DependencyResolver r = iter.next();
/* 292 */       Message.debug(""\t\t-> "" + r.getName());
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean exists(Artifact artifact) {
/* 297 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 298 */       DependencyResolver resolver = iter.next();
/* 299 */       if (resolver.exists(artifact)) {
/* 300 */         return true;
/*     */       }
/*     */     } 
/* 303 */     return false;
/*     */   }
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 307 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 308 */       DependencyResolver resolver = iter.next();
/* 309 */       ArtifactOrigin origin = resolver.locate(artifact);
/* 310 */       if (!ArtifactOrigin.isUnknown(origin)) {
/* 311 */         return origin;
/*     */       }
/*     */     } 
/* 314 */     return ArtifactOrigin.unkwnown(artifact);
/*     */   }
/*     */   
/*     */   public ArtifactDownloadReport download(ArtifactOrigin artifact, DownloadOptions options) {
/* 318 */     for (Iterator iter = this.chain.iterator(); iter.hasNext(); ) {
/* 319 */       DependencyResolver resolver = iter.next();
/* 320 */       ArtifactDownloadReport adr = resolver.download(artifact, options);
/* 321 */       if (adr.getDownloadStatus() != DownloadStatus.FAILED) {
/* 322 */         return adr;
/*     */       }
/*     */     } 
/* 325 */     ArtifactDownloadReport adr = new ArtifactDownloadReport(artifact.getArtifact());
/* 326 */     adr.setDownloadStatus(DownloadStatus.FAILED);
/* 327 */     return adr;
/*     */   }
/*     */   
/*     */   private static void setLatest(DependencyResolver resolver, LatestStrategy latest) {
/* 331 */     if (resolver instanceof HasLatestStrategy) {
/* 332 */       HasLatestStrategy r = (HasLatestStrategy)resolver;
/* 333 */       r.setLatestStrategy(latest);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static LatestStrategy getLatest(DependencyResolver resolver) {
/* 338 */     if (resolver instanceof HasLatestStrategy) {
/* 339 */       HasLatestStrategy r = (HasLatestStrategy)resolver;
/* 340 */       return r.getLatestStrategy();
/*     */     } 
/* 342 */     return null;
/*     */   }
/*     */   
/*     */   private static String getLatestStrategyName(DependencyResolver resolver) {
/* 346 */     if (resolver instanceof HasLatestStrategy) {
/* 347 */       HasLatestStrategy r = (HasLatestStrategy)resolver;
/* 348 */       return r.getLatest();
/*     */     } 
/* 350 */     return null;
/*     */   }
/*     */ 
/*     */   
/* 354 */   public void setDual(boolean b) { this.dual = b; }
/*     */ 
/*     */ 
/*     */   
/* 358 */   public boolean isDual() { return this.dual; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\ChainResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.DependencyResolver,"package org.apache.ivy.plugins.resolver;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.Map;
import org.apache.ivy.core.cache.ArtifactOrigin;
import org.apache.ivy.core.cache.RepositoryCacheManager;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.core.report.ArtifactDownloadReport;
import org.apache.ivy.core.report.DownloadReport;
import org.apache.ivy.core.resolve.DownloadOptions;
import org.apache.ivy.core.resolve.ResolveData;
import org.apache.ivy.core.resolve.ResolvedModuleRevision;
import org.apache.ivy.core.search.ModuleEntry;
import org.apache.ivy.core.search.OrganisationEntry;
import org.apache.ivy.core.search.RevisionEntry;
import org.apache.ivy.plugins.namespace.Namespace;
import org.apache.ivy.plugins.resolver.util.ResolvedResource;
public interface DependencyResolver {
  String getName();
  void setName(String paramString);
  ResolvedModuleRevision getDependency(DependencyDescriptor paramDependencyDescriptor, ResolveData paramResolveData) throws ParseException;
  ResolvedResource findIvyFileRef(DependencyDescriptor paramDependencyDescriptor, ResolveData paramResolveData);
  DownloadReport download(Artifact[] paramArrayOfArtifact, DownloadOptions paramDownloadOptions);
  ArtifactDownloadReport download(ArtifactOrigin paramArtifactOrigin, DownloadOptions paramDownloadOptions);
  boolean exists(Artifact paramArtifact);
  ArtifactOrigin locate(Artifact paramArtifact);
  void publish(Artifact paramArtifact, File paramFile, boolean paramBoolean) throws IOException;
  void beginPublishTransaction(ModuleRevisionId paramModuleRevisionId, boolean paramBoolean) throws IOException;
  void abortPublishTransaction() throws IOException;
  void commitPublishTransaction() throws IOException;
  void reportFailure();
  void reportFailure(Artifact paramArtifact);
  String[] listTokenValues(String paramString, Map paramMap);
  Map[] listTokenValues(String[] paramArrayOfString, Map paramMap);
  OrganisationEntry[] listOrganisations();
  ModuleEntry[] listModules(OrganisationEntry paramOrganisationEntry);
  RevisionEntry[] listRevisions(ModuleEntry paramModuleEntry);
  Namespace getNamespace();
  void dumpSettings();
  void setSettings(ResolverSettings paramResolverSettings);
  RepositoryCacheManager getRepositoryCacheManager();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\DependencyResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.DualResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.Arrays;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.ArtifactDownloadReport;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DualResolver
/*     */   extends AbstractResolver
/*     */ {
/*     */   public static final String DESCRIPTOR_OPTIONAL = ""optional"";
/*     */   public static final String DESCRIPTOR_REQUIRED = ""required"";
/*     */   private DependencyResolver ivyResolver;
/*     */   private DependencyResolver artifactResolver;
/*     */   private boolean allownomd = true;
/*     */   
/*     */   public void add(DependencyResolver resolver) {
/*  58 */     if (this.ivyResolver == null) {
/*  59 */       this.ivyResolver = resolver;
/*  60 */     } else if (this.artifactResolver == null) {
/*  61 */       this.artifactResolver = resolver;
/*     */     } else {
/*  63 */       throw new IllegalStateException(""exactly two resolvers must be added: ivy(1) and artifact(2) one"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/*  70 */     if (this.ivyResolver == null || this.artifactResolver == null) {
/*  71 */       throw new IllegalStateException(""exactly two resolvers must be added: ivy(1) and artifact(2) one"");
/*     */     }
/*     */     
/*  74 */     ResolvedModuleRevision resolved = data.getCurrentResolvedModuleRevision();
/*     */     
/*  76 */     data = new ResolveData(data, doValidate(data));
/*  77 */     ResolvedModuleRevision mr = this.ivyResolver.getDependency(dd, data);
/*  78 */     if (mr == null) {
/*  79 */       checkInterrupted();
/*  80 */       if (isAllownomd()) {
/*  81 */         Message.verbose(""ivy resolver didn't find "" + dd + "": trying with artifact resolver"");
/*     */         
/*  83 */         return this.artifactResolver.getDependency(dd, data);
/*     */       } 
/*  85 */       return null;
/*     */     } 
/*     */     
/*  88 */     if (mr == resolved)
/*     */     {
/*  90 */       return mr;
/*     */     }
/*  92 */     return new ResolvedModuleRevision(mr.getResolver(), this, mr.getDescriptor(), mr.getReport(), mr.isForce());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public ResolvedResource findIvyFileRef(DependencyDescriptor dd, ResolveData data) { return this.ivyResolver.findIvyFileRef(dd, data); }
/*     */ 
/*     */   
/*     */   public void reportFailure() {
/* 102 */     this.ivyResolver.reportFailure();
/* 103 */     this.artifactResolver.reportFailure();
/*     */   }
/*     */   
/*     */   public void reportFailure(Artifact art) {
/* 107 */     this.ivyResolver.reportFailure(art);
/* 108 */     this.artifactResolver.reportFailure(art);
/*     */   }
/*     */ 
/*     */   
/* 112 */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) { return this.artifactResolver.download(artifacts, options); }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public DependencyResolver getArtifactResolver() { return this.artifactResolver; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setArtifactResolver(DependencyResolver artifactResolver) { this.artifactResolver = artifactResolver; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public DependencyResolver getIvyResolver() { return this.ivyResolver; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setIvyResolver(DependencyResolver ivyResolver) { this.ivyResolver = ivyResolver; }
/*     */ 
/*     */   
/*     */   public void publish(Artifact artifact, File src, boolean overwrite) throws IOException {
/* 132 */     if (""ivy"".equals(artifact.getType())) {
/* 133 */       this.ivyResolver.publish(artifact, src, overwrite);
/*     */     } else {
/* 135 */       this.artifactResolver.publish(artifact, src, overwrite);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void abortPublishTransaction() throws IOException {
/* 140 */     this.ivyResolver.abortPublishTransaction();
/* 141 */     this.artifactResolver.abortPublishTransaction();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void beginPublishTransaction(ModuleRevisionId module, boolean overwrite) throws IOException {
/* 147 */     this.ivyResolver.beginPublishTransaction(module, overwrite);
/* 148 */     this.artifactResolver.beginPublishTransaction(module, overwrite);
/*     */   }
/*     */ 
/*     */   
/*     */   public void commitPublishTransaction() throws IOException {
/* 153 */     this.ivyResolver.commitPublishTransaction();
/* 154 */     this.artifactResolver.commitPublishTransaction();
/*     */   }
/*     */   
/*     */   public void dumpSettings() {
/* 158 */     if (this.ivyResolver == null || this.artifactResolver == null) {
/* 159 */       throw new IllegalStateException(""exactly two resolvers must be added: ivy(1) and artifact(2) one"");
/*     */     }
/*     */     
/* 162 */     Message.verbose(""\t"" + getName() + "" [dual "" + this.ivyResolver.getName() + "" "" + this.artifactResolver.getName() + ""]"");
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean exists(Artifact artifact) {
/* 167 */     if (artifact.isMetadata()) {
/* 168 */       return this.ivyResolver.exists(artifact);
/*     */     }
/* 170 */     return this.artifactResolver.exists(artifact);
/*     */   }
/*     */ 
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 175 */     if (artifact.isMetadata()) {
/* 176 */       return this.ivyResolver.locate(artifact);
/*     */     }
/* 178 */     return this.artifactResolver.locate(artifact);
/*     */   }
/*     */ 
/*     */   
/*     */   public ArtifactDownloadReport download(ArtifactOrigin artifact, DownloadOptions options) {
/* 183 */     if (artifact.getArtifact().isMetadata()) {
/* 184 */       return this.ivyResolver.download(artifact, options);
/*     */     }
/* 186 */     return this.artifactResolver.download(artifact, options);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public boolean isAllownomd() { return this.allownomd; }
/*     */ 
/*     */   
/*     */   public void setAllownomd(boolean allownomd) {
/* 195 */     Message.deprecated(""allownomd is deprecated, please use descriptor=\"""" + (allownomd ? ""optional"" : ""required"") + ""\"" instead"");
/*     */ 
/*     */     
/* 198 */     this.allownomd = allownomd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDescriptor(String descriptorRule) {
/* 208 */     if (""required"".equals(descriptorRule)) {
/* 209 */       this.allownomd = false;
/* 210 */     } else if (""optional"".equals(descriptorRule)) {
/* 211 */       this.allownomd = true;
/*     */     } else {
/* 213 */       throw new IllegalArgumentException(""unknown descriptor rule '"" + descriptorRule + ""'. Allowed rules are: "" + Arrays.asList((T[])new String[] { ""required"", ""optional"" }));
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\DualResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.FileSystemResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.settings.IvyPattern;
/*     */ import org.apache.ivy.plugins.repository.Repository;
/*     */ import org.apache.ivy.plugins.repository.file.FileRepository;
/*     */ import org.apache.ivy.util.Checks;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileSystemResolver
/*     */   extends RepositoryResolver
/*     */ {
/*     */   private static final String TRANSACTION_DESTINATION_SUFFIX = "".part"";
/*  43 */   private static final Pattern TRANSACTION_PATTERN = Pattern.compile(""(.*[/\\\\]\\[revision\\])([/\\\\].+)"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   private String transactional = ""auto"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Boolean supportTransaction;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String baseTransactionPattern;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  68 */   private Map fullTransactionPatterns = new HashMap();
/*     */ 
/*     */ 
/*     */   
/*     */   private File transactionTempDir;
/*     */ 
/*     */ 
/*     */   
/*     */   private File transactionDestDir;
/*     */ 
/*     */ 
/*     */   
/*  80 */   public FileSystemResolver() { setRepository((Repository)new FileRepository()); }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public String getTypeName() { return ""file""; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public boolean isLocal() { return getFileRepository().isLocal(); }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setLocal(boolean local) { getFileRepository().setLocal(local); }
/*     */ 
/*     */ 
/*     */   
/*  96 */   private FileRepository getFileRepository() { return (FileRepository)getRepository(); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getDestination(String pattern, Artifact artifact, ModuleRevisionId mrid) {
/* 101 */     if (supportTransaction() && isTransactionStarted()) {
/*     */       
/* 103 */       String destPattern = (String)this.fullTransactionPatterns.get(pattern);
/* 104 */       if (destPattern == null) {
/* 105 */         throw new IllegalArgumentException(""unsupported pattern for publish destination pattern: "" + pattern + "". supported patterns: "" + this.fullTransactionPatterns.keySet());
/*     */       }
/*     */ 
/*     */       
/* 109 */       return IvyPatternHelper.substitute(destPattern, mrid, artifact);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 114 */     return super.getDestination(pattern, artifact, mrid);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 119 */   private boolean isTransactionStarted() { return (this.transactionTempDir != null); }
/*     */ 
/*     */   
/*     */   public void abortPublishTransaction() throws IOException {
/* 123 */     if (supportTransaction()) {
/* 124 */       if (!isTransactionStarted()) {
/* 125 */         throw new IllegalStateException(""no current transaction!"");
/*     */       }
/*     */       try {
/* 128 */         getFileRepository().delete(this.transactionTempDir);
/* 129 */         Message.info(""\tpublish aborted: deleted "" + this.transactionTempDir);
/*     */       } finally {
/* 131 */         closeTransaction();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void commitPublishTransaction() throws IOException {
/* 137 */     if (supportTransaction()) {
/* 138 */       if (!isTransactionStarted()) {
/* 139 */         throw new IllegalStateException(""no current transaction!"");
/*     */       }
/* 141 */       if (this.transactionDestDir.exists()) {
/* 142 */         throw new IOException(""impossible to commit transaction: transaction destination directory already exists: "" + this.transactionDestDir + ""\npossible cause: usage of identifying tokens after the revision token"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 148 */         getFileRepository().move(this.transactionTempDir, this.transactionDestDir);
/*     */         
/* 150 */         Message.info(""\tpublish commited: moved "" + this.transactionTempDir + "" \n\t\tto "" + this.transactionDestDir);
/*     */       }
/* 152 */       catch (IOException ex) {
/*     */         IOException iOException;
/*     */         try {
/* 155 */           getFileRepository().delete(this.transactionTempDir);
/* 156 */           iOException = new IOException(""publish transaction commit error for "" + this.transactionDestDir + "": rolled back"");
/*     */         
/*     */         }
/* 159 */         catch (IOException deleteEx) {
/* 160 */           iOException = new IOException(""publish transaction commit error for "" + this.transactionDestDir + "": rollback impossible either, "" + ""please remove "" + this.transactionTempDir + "" manually"");
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 165 */         iOException.initCause(ex);
/* 166 */         throw iOException;
/*     */       } finally {
/* 168 */         closeTransaction();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void beginPublishTransaction(ModuleRevisionId module, boolean overwrite) throws IOException {
/* 175 */     if (supportTransaction()) {
/* 176 */       if (isTransactionStarted()) {
/* 177 */         throw new IllegalStateException(""a transaction is already started and not closed!"");
/*     */       }
/* 179 */       if (overwrite) {
/* 180 */         unsupportedTransaction(""overwrite transaction not supported yet"");
/*     */       } else {
/* 182 */         initTransaction(module);
/* 183 */         if (this.transactionDestDir.exists()) {
/* 184 */           unsupportedTransaction(""transaction destination directory already exists: "" + this.transactionDestDir + ""\npossible cause: usage of identifying tokens after the revision token"");
/*     */ 
/*     */           
/* 187 */           closeTransaction();
/*     */         } else {
/* 189 */           Message.verbose(""\tstarting transaction: publish during transaction will be done in \n\t\t"" + this.transactionTempDir + ""\n\tand on commit moved to \n\t\t"" + this.transactionDestDir);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Collection filterNames(Collection values) {
/* 199 */     if (supportTransaction()) {
/* 200 */       values = super.filterNames(values);
/* 201 */       for (Iterator iterator = values.iterator(); iterator.hasNext(); ) {
/* 202 */         String v = iterator.next();
/* 203 */         if (v.endsWith("".part"")) {
/* 204 */           iterator.remove();
/*     */         }
/*     */       } 
/* 207 */       return values;
/*     */     } 
/* 209 */     return super.filterNames(values);
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean supportTransaction() {
/* 214 */     if (""false"".equals(this.transactional)) {
/* 215 */       return false;
/*     */     }
/* 217 */     checkSupportTransaction();
/* 218 */     return this.supportTransaction.booleanValue();
/*     */   }
/*     */   
/*     */   private void closeTransaction() {
/* 222 */     this.transactionTempDir = null;
/* 223 */     this.transactionDestDir = null;
/*     */   }
/*     */   
/*     */   private void checkSupportTransaction() {
/* 227 */     if (this.supportTransaction == null) {
/* 228 */       this.supportTransaction = Boolean.FALSE;
/* 229 */       List ivyPatterns = getIvyPatterns();
/* 230 */       List artifactPatterns = getArtifactPatterns();
/*     */       
/* 232 */       if (ivyPatterns.size() > 0) {
/* 233 */         String pattern = ivyPatterns.get(0);
/* 234 */         Matcher m = TRANSACTION_PATTERN.matcher(pattern);
/* 235 */         if (!m.matches()) {
/* 236 */           unsupportedTransaction(""ivy pattern does not use revision as a directory"");
/*     */           return;
/*     */         } 
/* 239 */         this.baseTransactionPattern = m.group(1);
/* 240 */         this.fullTransactionPatterns.put(pattern, m.group(1) + "".part"" + m.group(2));
/*     */       } 
/*     */ 
/*     */       
/* 244 */       if (artifactPatterns.size() > 0) {
/* 245 */         String pattern = artifactPatterns.get(0);
/* 246 */         Matcher m = TRANSACTION_PATTERN.matcher(pattern);
/* 247 */         if (!m.matches()) {
/* 248 */           unsupportedTransaction(""artifact pattern does not use revision as a directory""); return;
/*     */         } 
/* 250 */         if (this.baseTransactionPattern != null) {
/* 251 */           if (!this.baseTransactionPattern.equals(m.group(1))) {
/* 252 */             unsupportedTransaction(""ivy pattern and artifact pattern do not use the same directory for revision"");
/*     */             
/*     */             return;
/*     */           } 
/* 256 */           this.fullTransactionPatterns.put(pattern, m.group(1) + "".part"" + m.group(2));
/*     */         }
/*     */         else {
/*     */           
/* 260 */           this.baseTransactionPattern = m.group(1);
/* 261 */           this.fullTransactionPatterns.put(pattern, m.group(1) + "".part"" + m.group(2));
/*     */         } 
/*     */       } 
/*     */       
/* 265 */       this.supportTransaction = Boolean.TRUE;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void unsupportedTransaction(String msg) {
/* 270 */     String fullMsg = getName() + "" do not support transaction. "" + msg;
/* 271 */     if (""true"".equals(this.transactional)) {
/* 272 */       throw new IllegalStateException(fullMsg + "". Set transactional attribute to 'auto' or 'false' or fix the problem."");
/*     */     }
/*     */     
/* 275 */     Message.verbose(fullMsg);
/* 276 */     this.supportTransaction = Boolean.FALSE;
/*     */   }
/*     */ 
/*     */   
/*     */   private void initTransaction(ModuleRevisionId module) {
/* 281 */     this.transactionTempDir = Checks.checkAbsolute(IvyPatternHelper.substitute(this.baseTransactionPattern, ModuleRevisionId.newInstance(module, module.getRevision() + "".part"")), ""baseTransactionPattern"");
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 286 */     this.transactionDestDir = Checks.checkAbsolute(IvyPatternHelper.substitute(this.baseTransactionPattern, module), ""baseTransactionPattern"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 291 */   public String getTransactional() { return this.transactional; }
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setTransactional(String transactional) { this.transactional = transactional; }
/*     */ 
/*     */   
/*     */   public void addConfiguredIvy(IvyPattern p) {
/* 299 */     Checks.checkAbsolute(p.getPattern(), ""ivy pattern"");
/* 300 */     super.addConfiguredIvy(p);
/*     */   }
/*     */   
/*     */   public void addIvyPattern(String pattern) {
/* 304 */     Checks.checkAbsolute(pattern, ""ivy pattern"");
/* 305 */     super.addIvyPattern(pattern);
/*     */   }
/*     */   
/*     */   public void addConfiguredArtifact(IvyPattern p) {
/* 309 */     Checks.checkAbsolute(p.getPattern(), ""artifact pattern"");
/* 310 */     super.addConfiguredArtifact(p);
/*     */   }
/*     */   
/*     */   public void addArtifactPattern(String pattern) {
/* 314 */     Checks.checkAbsolute(pattern, ""artifact pattern"");
/* 315 */     super.addArtifactPattern(pattern);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\FileSystemResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.IBiblioResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.plugins.repository.Repository;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.ContextualSAXHandler;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IBiblioResolver
/*     */   extends URLResolver
/*     */ {
/*     */   private static final String M2_PER_MODULE_PATTERN = ""[revision]/[artifact]-[revision](-[classifier]).[ext]"";
/*     */   private static final String M2_PATTERN = ""[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"";
/*     */   public static final String DEFAULT_PATTERN = ""[module]/[type]s/[artifact]-[revision].[ext]"";
/*     */   public static final String DEFAULT_ROOT = ""http://www.ibiblio.org/maven/"";
/*     */   public static final String DEFAULT_M2_ROOT = ""http://repo1.maven.org/maven2/"";
/*  73 */   private String root = null;
/*     */   
/*  75 */   private String pattern = null;
/*     */ 
/*     */   
/*     */   private boolean usepoms = true;
/*     */ 
/*     */   
/*     */   private boolean useMavenMetadata = true;
/*     */ 
/*     */   
/*     */   public IBiblioResolver() {
/*  85 */     setChangingMatcher(""regexp"");
/*  86 */     setChangingPattern("".*-SNAPSHOT"");
/*     */   }
/*     */   
/*     */   public ResolvedResource findIvyFileRef(DependencyDescriptor dd, ResolveData data) {
/*  90 */     if (isM2compatible() && isUsepoms()) {
/*  91 */       ModuleRevisionId mrid = dd.getDependencyRevisionId();
/*  92 */       mrid = convertM2IdForResourceSearch(mrid);
/*     */       
/*  94 */       ResolvedResource rres = null;
/*  95 */       if (dd.getDependencyRevisionId().getRevision().endsWith(""SNAPSHOT"")) {
/*  96 */         rres = findSnapshotDescriptor(dd, data, mrid);
/*  97 */         if (rres != null) {
/*  98 */           return rres;
/*     */         }
/*     */       } 
/*     */       
/* 102 */       rres = findResourceUsingPatterns(mrid, getIvyPatterns(), DefaultArtifact.newPomArtifact(mrid, data.getDate()), getRMDParser(dd, data), data.getDate());
/*     */ 
/*     */       
/* 105 */       return rres;
/*     */     } 
/* 107 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   protected ResolvedResource findArtifactRef(Artifact artifact, Date date) {
/* 112 */     ensureConfigured(getSettings());
/* 113 */     ModuleRevisionId mrid = artifact.getModuleRevisionId();
/* 114 */     if (isM2compatible()) {
/* 115 */       mrid = convertM2IdForResourceSearch(mrid);
/*     */     }
/* 117 */     ResolvedResource rres = null;
/* 118 */     if (artifact.getId().getRevision().endsWith(""SNAPSHOT"")) {
/* 119 */       rres = findSnapshotArtifact(artifact, date, mrid);
/* 120 */       if (rres != null) {
/* 121 */         return rres;
/*     */       }
/*     */     } 
/* 124 */     return findResourceUsingPatterns(mrid, getArtifactPatterns(), artifact, getDefaultRMDParser(artifact.getModuleRevisionId().getModuleId()), date);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private ResolvedResource findSnapshotArtifact(Artifact artifact, Date date, ModuleRevisionId mrid) {
/* 130 */     String rev = findSnapshotVersion(mrid);
/* 131 */     if (rev != null) {
/*     */       
/* 133 */       String pattern = getArtifactPatterns().get(0);
/* 134 */       pattern = pattern.replaceFirst(""\\-\\[revision\\]"", ""-"" + rev);
/* 135 */       return findResourceUsingPattern(mrid, pattern, artifact, getDefaultRMDParser(artifact.getModuleRevisionId().getModuleId()), date);
/*     */     } 
/*     */     
/* 138 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ResolvedResource findSnapshotDescriptor(DependencyDescriptor dd, ResolveData data, ModuleRevisionId mrid) {
/* 143 */     String rev = findSnapshotVersion(mrid);
/* 144 */     if (rev != null) {
/*     */ 
/*     */ 
/*     */       
/* 148 */       Message.verbose(""["" + rev + ""] "" + mrid);
/*     */ 
/*     */       
/* 151 */       String pattern = getIvyPatterns().get(0);
/* 152 */       pattern = pattern.replaceFirst(""\\-\\[revision\\]"", ""-"" + rev);
/* 153 */       return findResourceUsingPattern(mrid, pattern, DefaultArtifact.newPomArtifact(mrid, data.getDate()), getRMDParser(dd, data), data.getDate());
/*     */     } 
/*     */ 
/*     */     
/* 157 */     return null;
/*     */   }
/*     */   
/*     */   private String findSnapshotVersion(ModuleRevisionId mrid) {
/* 161 */     String pattern = getIvyPatterns().get(0);
/* 162 */     if (shouldUseMavenMetadata(pattern)) {
/* 163 */       InputStream metadataStream = null;
/*     */       try {
/* 165 */         String metadataLocation = IvyPatternHelper.substitute(this.root + ""[organisation]/[module]/[revision]/maven-metadata.xml"", mrid);
/*     */         
/* 167 */         Resource metadata = getRepository().getResource(metadataLocation);
/* 168 */         if (metadata.exists()) {
/* 169 */           metadataStream = metadata.openStream();
/* 170 */           final StringBuffer timestamp = new StringBuffer();
/* 171 */           final StringBuffer buildNumer = new StringBuffer();
/* 172 */           XMLHelper.parse(metadataStream, null, (DefaultHandler)new ContextualSAXHandler() { private final StringBuffer val$timestamp;
/*     */                 
/*     */                 public void endElement(String uri, String localName, String qName) throws SAXException {
/* 175 */                   if (""metadata/versioning/snapshot/timestamp"".equals(getContext())) {
/* 176 */                     timestamp.append(getText());
/*     */                   }
/* 178 */                   if (""metadata/versioning/snapshot/buildNumber"".equals(getContext()))
/*     */                   {
/* 180 */                     buildNumer.append(getText());
/*     */                   }
/* 182 */                   super.endElement(uri, localName, qName);
/*     */                 } private final StringBuffer val$buildNumer; private final IBiblioResolver this$0; }
/*     */               null);
/* 185 */           if (timestamp.length() > 0) {
/*     */             
/* 187 */             String rev = mrid.getRevision();
/* 188 */             rev = rev.substring(0, rev.length() - ""SNAPSHOT"".length());
/* 189 */             rev = rev + timestamp.toString() + ""-"" + buildNumer.toString();
/*     */             
/* 191 */             return rev;
/*     */           } 
/*     */         } else {
/* 194 */           Message.verbose(""\tmaven-metadata not available: "" + metadata);
/*     */         } 
/* 196 */       } catch (IOException e) {
/* 197 */         Message.verbose(""impossible to access maven metadata file, ignored: "" + e.getMessage());
/*     */       }
/* 199 */       catch (SAXException e) {
/* 200 */         Message.verbose(""impossible to parse maven metadata file, ignored: "" + e.getMessage());
/*     */       }
/* 202 */       catch (ParserConfigurationException e) {
/* 203 */         Message.verbose(""impossible to parse maven metadata file, ignored: "" + e.getMessage());
/*     */       } finally {
/*     */         
/* 206 */         if (metadataStream != null) {
/*     */           try {
/* 208 */             metadataStream.close();
/* 209 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 215 */     return null;
/*     */   }
/*     */   
/*     */   public void setM2compatible(boolean m2compatible) {
/* 219 */     super.setM2compatible(m2compatible);
/* 220 */     if (m2compatible) {
/* 221 */       if (this.root == null) {
/* 222 */         this.root = ""http://repo1.maven.org/maven2/"";
/*     */       }
/* 224 */       if (this.pattern == null) {
/* 225 */         this.pattern = ""[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"";
/*     */       }
/* 227 */       updateWholePattern();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void ensureConfigured(ResolverSettings settings) {
/* 232 */     if (settings != null && (this.root == null || this.pattern == null)) {
/* 233 */       if (this.root == null) {
/* 234 */         String root = settings.getVariable(""ivy.ibiblio.default.artifact.root"");
/* 235 */         if (root != null) {
/* 236 */           this.root = root;
/*     */         } else {
/* 238 */           settings.configureRepositories(true);
/* 239 */           this.root = settings.getVariable(""ivy.ibiblio.default.artifact.root"");
/*     */         } 
/*     */       } 
/* 242 */       if (this.pattern == null) {
/* 243 */         String pattern = settings.getVariable(""ivy.ibiblio.default.artifact.pattern"");
/* 244 */         if (pattern != null) {
/* 245 */           this.pattern = pattern;
/*     */         } else {
/* 247 */           settings.configureRepositories(false);
/* 248 */           this.pattern = settings.getVariable(""ivy.ibiblio.default.artifact.pattern"");
/*     */         } 
/*     */       } 
/* 251 */       updateWholePattern();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 256 */   private String getWholePattern() { return this.root + this.pattern; }
/*     */ 
/*     */ 
/*     */   
/* 260 */   public String getPattern() { return this.pattern; }
/*     */ 
/*     */   
/*     */   public void setPattern(String pattern) {
/* 264 */     if (pattern == null) {
/* 265 */       throw new NullPointerException(""pattern must not be null"");
/*     */     }
/* 267 */     this.pattern = pattern;
/* 268 */     ensureConfigured(getSettings());
/* 269 */     updateWholePattern();
/*     */   }
/*     */ 
/*     */   
/* 273 */   public String getRoot() { return this.root; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRoot(String root) {
/* 286 */     if (root == null) {
/* 287 */       throw new NullPointerException(""root must not be null"");
/*     */     }
/* 289 */     if (!root.endsWith(""/"")) {
/* 290 */       this.root = root + ""/"";
/*     */     } else {
/* 292 */       this.root = root;
/*     */     } 
/* 294 */     ensureConfigured(getSettings());
/* 295 */     updateWholePattern();
/*     */   }
/*     */   
/*     */   private void updateWholePattern() {
/* 299 */     if (isM2compatible() && isUsepoms()) {
/* 300 */       setIvyPatterns(Collections.singletonList(getWholePattern()));
/*     */     }
/* 302 */     setArtifactPatterns(Collections.singletonList(getWholePattern()));
/*     */   }
/*     */ 
/*     */   
/* 306 */   public void publish(Artifact artifact, File src) { throw new UnsupportedOperationException(""publish not supported by IBiblioResolver""); }
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] listTokenValues(String token, Map otherTokenValues) {
/* 311 */     if (""organisation"".equals(token)) {
/* 312 */       return new String[0];
/*     */     }
/* 314 */     if (""module"".equals(token) && !isM2compatible()) {
/* 315 */       return new String[0];
/*     */     }
/* 317 */     ensureConfigured(getSettings());
/* 318 */     return super.listTokenValues(token, otherTokenValues);
/*     */   }
/*     */   
/*     */   protected String[] listTokenValues(String pattern, String token) {
/* 322 */     if (""organisation"".equals(token)) {
/* 323 */       return new String[0];
/*     */     }
/* 325 */     if (""module"".equals(token) && !isM2compatible()) {
/* 326 */       return new String[0];
/*     */     }
/* 328 */     ensureConfigured(getSettings());
/*     */ 
/*     */     
/* 331 */     if (""revision"".equals(token) && isM2compatible() && isUseMavenMetadata())
/*     */     {
/*     */       
/* 334 */       if (((String)getIvyPatterns().get(0)).endsWith(""[revision]/[artifact]-[revision](-[classifier]).[ext]"")) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 340 */         String partiallyResolvedM2PerModulePattern = IvyPatternHelper.substituteTokens(""[revision]/[artifact]-[revision](-[classifier]).[ext]"", Collections.singletonMap(""ext"", ""xml""));
/*     */ 
/*     */         
/* 343 */         if (pattern.endsWith(partiallyResolvedM2PerModulePattern)) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 349 */           String metadataLocation = pattern.substring(0, pattern.lastIndexOf(partiallyResolvedM2PerModulePattern)) + ""maven-metadata.xml"";
/*     */ 
/*     */           
/* 352 */           List revs = listRevisionsWithMavenMetadata(getRepository(), metadataLocation);
/* 353 */           if (revs != null) {
/* 354 */             return (String[])revs.toArray((Object[])new String[revs.size()]);
/*     */ 
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/*     */         else {
/*     */ 
/*     */           
/* 364 */           return new String[0];
/*     */         } 
/*     */       } 
/*     */     }
/* 368 */     return super.listTokenValues(pattern, token);
/*     */   }
/*     */ 
/*     */   
/* 372 */   public OrganisationEntry[] listOrganisations() { return new OrganisationEntry[0]; }
/*     */ 
/*     */   
/*     */   public ModuleEntry[] listModules(OrganisationEntry org) {
/* 376 */     if (isM2compatible()) {
/* 377 */       ensureConfigured(getSettings());
/* 378 */       return super.listModules(org);
/*     */     } 
/* 380 */     return new ModuleEntry[0];
/*     */   }
/*     */   
/*     */   public RevisionEntry[] listRevisions(ModuleEntry mod) {
/* 384 */     ensureConfigured(getSettings());
/* 385 */     return super.listRevisions(mod);
/*     */   }
/*     */ 
/*     */   
/*     */   protected ResolvedResource[] listResources(Repository repository, ModuleRevisionId mrid, String pattern, Artifact artifact) {
/* 390 */     if (shouldUseMavenMetadata(pattern)) {
/* 391 */       List revs = listRevisionsWithMavenMetadata(repository, mrid.getModuleId().getAttributes());
/*     */       
/* 393 */       if (revs != null) {
/* 394 */         Message.debug(""\tfound revs: "" + revs);
/* 395 */         List rres = new ArrayList();
/* 396 */         for (Iterator iter = revs.iterator(); iter.hasNext(); ) {
/* 397 */           String rev = iter.next();
/* 398 */           String resolvedPattern = IvyPatternHelper.substitute(pattern, ModuleRevisionId.newInstance(mrid, rev), artifact);
/*     */           
/*     */           try {
/* 401 */             Resource res = repository.getResource(resolvedPattern);
/* 402 */             if (res != null && res.exists()) {
/* 403 */               rres.add(new ResolvedResource(res, rev));
/*     */             }
/* 405 */           } catch (IOException e) {
/* 406 */             Message.warn(""impossible to get resource from name listed by maven-metadata.xml:"" + rres + "": "" + e.getMessage());
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 411 */         return rres.toArray(new ResolvedResource[rres.size()]);
/*     */       } 
/*     */ 
/*     */       
/* 415 */       return super.listResources(repository, mrid, pattern, artifact);
/*     */     } 
/*     */     
/* 418 */     return super.listResources(repository, mrid, pattern, artifact);
/*     */   }
/*     */ 
/*     */   
/*     */   private List listRevisionsWithMavenMetadata(Repository repository, Map tokenValues) {
/* 423 */     String metadataLocation = IvyPatternHelper.substituteTokens(this.root + ""[organisation]/[module]/maven-metadata.xml"", tokenValues);
/*     */     
/* 425 */     return listRevisionsWithMavenMetadata(repository, metadataLocation);
/*     */   }
/*     */   
/*     */   private List listRevisionsWithMavenMetadata(Repository repository, String metadataLocation) {
/* 429 */     List revs = null;
/* 430 */     InputStream metadataStream = null;
/*     */     try {
/* 432 */       Resource metadata = repository.getResource(metadataLocation);
/* 433 */       if (metadata.exists()) {
/* 434 */         Message.verbose(""\tlisting revisions from maven-metadata: "" + metadata);
/* 435 */         final List metadataRevs = new ArrayList();
/* 436 */         metadataStream = metadata.openStream();
/* 437 */         XMLHelper.parse(metadataStream, null, (DefaultHandler)new ContextualSAXHandler() { private final List val$metadataRevs; private final IBiblioResolver this$0;
/*     */               
/*     */               public void endElement(String uri, String localName, String qName) throws SAXException {
/* 440 */                 if (""metadata/versioning/versions/version"".equals(getContext())) {
/* 441 */                   metadataRevs.add(getText().trim());
/*     */                 }
/* 443 */                 super.endElement(uri, localName, qName);
/*     */               } }
/*     */             null);
/* 446 */         revs = metadataRevs;
/*     */       } else {
/* 448 */         Message.verbose(""\tmaven-metadata not available: "" + metadata);
/*     */       } 
/* 450 */     } catch (IOException e) {
/* 451 */       Message.verbose(""impossible to access maven metadata file, ignored: "" + e.getMessage());
/*     */     }
/* 453 */     catch (SAXException e) {
/* 454 */       Message.verbose(""impossible to parse maven metadata file, ignored: "" + e.getMessage());
/*     */     }
/* 456 */     catch (ParserConfigurationException e) {
/* 457 */       Message.verbose(""impossible to parse maven metadata file, ignored: "" + e.getMessage());
/*     */     } finally {
/*     */       
/* 460 */       if (metadataStream != null) {
/*     */         try {
/* 462 */           metadataStream.close();
/* 463 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 468 */     return revs;
/*     */   }
/*     */   
/*     */   protected void findTokenValues(Collection names, List patterns, Map tokenValues, String token) {
/* 472 */     if (""revision"".equals(token)) {
/* 473 */       String pattern = patterns.get(0);
/* 474 */       if (shouldUseMavenMetadata(pattern)) {
/* 475 */         List revs = listRevisionsWithMavenMetadata(getRepository(), tokenValues);
/* 476 */         if (revs != null) {
/* 477 */           names.addAll(filterNames(revs));
/*     */           return;
/*     */         } 
/*     */       } 
/*     */     } 
/* 482 */     super.findTokenValues(names, patterns, tokenValues, token);
/*     */   }
/*     */ 
/*     */   
/* 486 */   private boolean shouldUseMavenMetadata(String pattern) { return (isUseMavenMetadata() && isM2compatible() && pattern.endsWith(""[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 491 */   public String getTypeName() { return ""ibiblio""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/* 499 */     ensureConfigured((ResolverSettings)data.getSettings());
/* 500 */     return super.getDependency(dd, data);
/*     */   }
/*     */   
/*     */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/* 504 */     ensureConfigured(getSettings());
/* 505 */     return super.download(artifacts, options);
/*     */   }
/*     */   
/*     */   public boolean exists(Artifact artifact) {
/* 509 */     ensureConfigured(getSettings());
/* 510 */     return super.exists(artifact);
/*     */   }
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 514 */     ensureConfigured(getSettings());
/* 515 */     return super.locate(artifact);
/*     */   }
/*     */   
/*     */   public List getArtifactPatterns() {
/* 519 */     ensureConfigured(getSettings());
/* 520 */     return super.getArtifactPatterns();
/*     */   }
/*     */ 
/*     */   
/* 524 */   public boolean isUsepoms() { return this.usepoms; }
/*     */ 
/*     */   
/*     */   public void setUsepoms(boolean usepoms) {
/* 528 */     this.usepoms = usepoms;
/* 529 */     updateWholePattern();
/*     */   }
/*     */ 
/*     */   
/* 533 */   public boolean isUseMavenMetadata() { return this.useMavenMetadata; }
/*     */ 
/*     */ 
/*     */   
/* 537 */   public void setUseMavenMetadata(boolean useMavenMetadata) { this.useMavenMetadata = useMavenMetadata; }
/*     */ 
/*     */   
/*     */   public void dumpSettings() {
/* 541 */     ensureConfigured(getSettings());
/* 542 */     super.dumpSettings();
/* 543 */     Message.debug(""\t\troot: "" + getRoot());
/* 544 */     Message.debug(""\t\tpattern: "" + getPattern());
/* 545 */     Message.debug(""\t\tusepoms: "" + this.usepoms);
/* 546 */     Message.debug(""\t\tuseMavenMetadata: "" + this.useMavenMetadata);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\IBiblioResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.IvyRepResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.cache.ArtifactOrigin;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.core.resolve.ResolveData;
/*     */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*     */ import org.apache.ivy.core.search.ModuleEntry;
/*     */ import org.apache.ivy.core.search.OrganisationEntry;
/*     */ import org.apache.ivy.core.search.RevisionEntry;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.ivy.util.XMLHelper;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IvyRepResolver
/*     */   extends URLResolver
/*     */ {
/*     */   public static final String DEFAULT_IVYPATTERN = ""[organisation]/[module]/ivy-[revision].xml"";
/*     */   public static final String DEFAULT_IVYROOT = ""http://ivyrep.jayasoft.org/"";
/*  61 */   private String ivyroot = null;
/*     */   
/*  63 */   private String ivypattern = null;
/*     */   
/*  65 */   private String artroot = null;
/*     */   
/*  67 */   private String artpattern = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void ensureArtifactConfigured(ResolverSettings settings) {
/*  73 */     if (settings != null && (this.artroot == null || this.artpattern == null)) {
/*  74 */       if (this.artroot == null) {
/*  75 */         String root = settings.getVariable(""ivy.ivyrep.default.artifact.root"");
/*  76 */         if (root != null) {
/*  77 */           this.artroot = root;
/*     */         } else {
/*  79 */           settings.configureRepositories(true);
/*  80 */           this.artroot = settings.getVariable(""ivy.ivyrep.default.artifact.root"");
/*     */         } 
/*     */       } 
/*  83 */       if (this.artpattern == null) {
/*  84 */         String pattern = settings.getVariable(""ivy.ivyrep.default.artifact.pattern"");
/*  85 */         if (pattern != null) {
/*  86 */           this.artpattern = pattern;
/*     */         } else {
/*  88 */           settings.configureRepositories(false);
/*  89 */           this.artpattern = settings.getVariable(""ivy.ivyrep.default.artifact.pattern"");
/*     */         } 
/*     */       } 
/*  92 */       updateWholeArtPattern();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void ensureIvyConfigured(ResolverSettings settings) {
/*  97 */     if (settings != null && (this.ivyroot == null || this.ivypattern == null)) {
/*  98 */       if (this.ivyroot == null) {
/*  99 */         String root = settings.getVariable(""ivy.ivyrep.default.ivy.root"");
/* 100 */         if (root != null) {
/* 101 */           this.ivyroot = root;
/*     */         } else {
/* 103 */           throw new IllegalStateException(""ivyroot is mandatory on IvyRepResolver. Make sure to set it in your settings, before setting ivypattern if you wish to set ivypattern too."");
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 109 */       if (this.ivypattern == null) {
/* 110 */         String pattern = settings.getVariable(""ivy.ivyrep.default.ivy.pattern"");
/* 111 */         if (pattern != null) {
/* 112 */           this.ivypattern = pattern;
/*     */         } else {
/* 114 */           settings.configureRepositories(false);
/* 115 */           this.ivypattern = settings.getVariable(""ivy.ivyrep.default.ivy.pattern"");
/*     */         } 
/*     */       } 
/* 118 */       updateWholeIvyPattern();
/*     */     } 
/*     */   }
/*     */   
/*     */   private String getWholeIvyPattern() {
/* 123 */     if (this.ivyroot == null || this.ivypattern == null) {
/* 124 */       return null;
/*     */     }
/* 126 */     return this.ivyroot + this.ivypattern;
/*     */   }
/*     */ 
/*     */   
/* 130 */   private String getWholeArtPattern() { return this.artroot + this.artpattern; }
/*     */ 
/*     */ 
/*     */   
/* 134 */   public String getIvypattern() { return this.ivypattern; }
/*     */ 
/*     */   
/*     */   public void setIvypattern(String pattern) {
/* 138 */     if (pattern == null) {
/* 139 */       throw new NullPointerException(""pattern must not be null"");
/*     */     }
/* 141 */     this.ivypattern = pattern;
/* 142 */     ensureIvyConfigured(getSettings());
/* 143 */     updateWholeIvyPattern();
/*     */   }
/*     */ 
/*     */   
/* 147 */   public String getIvyroot() { return this.ivyroot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIvyroot(String root) {
/* 160 */     if (root == null) {
/* 161 */       throw new NullPointerException(""root must not be null"");
/*     */     }
/* 163 */     if (!root.endsWith(""/"")) {
/* 164 */       this.ivyroot = root + ""/"";
/*     */     } else {
/* 166 */       this.ivyroot = root;
/*     */     } 
/* 168 */     ensureIvyConfigured(getSettings());
/* 169 */     updateWholeIvyPattern();
/*     */   }
/*     */   
/*     */   public void setM2compatible(boolean m2compatible) {
/* 173 */     if (m2compatible) {
/* 174 */       throw new IllegalArgumentException(""ivyrep does not support maven2 compatibility. Please use ibiblio resolver instead, or even url or filesystem resolvers for more specific needs."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   private void updateWholeIvyPattern() { setIvyPatterns(Collections.singletonList(getWholeIvyPattern())); }
/*     */ 
/*     */ 
/*     */   
/* 185 */   private void updateWholeArtPattern() { setArtifactPatterns(Collections.singletonList(getWholeArtPattern())); }
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void publish(Artifact artifact, File src) { throw new UnsupportedOperationException(""publish not supported by IBiblioResolver""); }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public String getArtroot() { return this.artroot; }
/*     */ 
/*     */ 
/*     */   
/* 197 */   public String getArtpattern() { return this.artpattern; }
/*     */ 
/*     */   
/*     */   public void setArtpattern(String pattern) {
/* 201 */     if (pattern == null) {
/* 202 */       throw new NullPointerException(""pattern must not be null"");
/*     */     }
/* 204 */     this.artpattern = pattern;
/* 205 */     ensureArtifactConfigured(getSettings());
/* 206 */     updateWholeArtPattern();
/*     */   }
/*     */   
/*     */   public void setArtroot(String root) {
/* 210 */     if (root == null) {
/* 211 */       throw new NullPointerException(""root must not be null"");
/*     */     }
/* 213 */     if (!root.endsWith(""/"")) {
/* 214 */       this.artroot = root + ""/"";
/*     */     } else {
/* 216 */       this.artroot = root;
/*     */     } 
/* 218 */     ensureArtifactConfigured(getSettings());
/* 219 */     updateWholeArtPattern();
/*     */   }
/*     */   
/*     */   public OrganisationEntry[] listOrganisations() {
/* 223 */     ensureIvyConfigured(getSettings());
/*     */     try {
/* 225 */       URL content = new URL(this.ivyroot + ""content.xml"");
/* 226 */       final List ret = new ArrayList();
/* 227 */       XMLHelper.parse(content, null, new DefaultHandler() { private final List val$ret;
/*     */             
/*     */             public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
/* 230 */               if (""organisation"".equals(qName)) {
/* 231 */                 String org = attributes.getValue(""name"");
/* 232 */                 if (org != null)
/* 233 */                   ret.add(new OrganisationEntry(IvyRepResolver.this, org)); 
/*     */               } 
/*     */             }
/*     */             private final IvyRepResolver this$0; }
/*     */         );
/* 238 */       return (OrganisationEntry[])ret.toArray((Object[])new OrganisationEntry[ret.size()]);
/* 239 */     } catch (MalformedURLException e) {
/*     */     
/* 241 */     } catch (Exception e) {
/* 242 */       Message.warn(""unable to parse content.xml file on ivyrep: "" + e.getMessage());
/*     */     } 
/* 244 */     return super.listOrganisations();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public ModuleEntry[] listModules(OrganisationEntry org) {
/* 250 */     ensureIvyConfigured(getSettings());
/* 251 */     Map tokenValues = new HashMap();
/* 252 */     tokenValues.put(""organisation"", org.getOrganisation());
/* 253 */     Collection names = findIvyNames(tokenValues, ""module"");
/* 254 */     ModuleEntry[] ret = new ModuleEntry[names.size()];
/* 255 */     int i = 0;
/* 256 */     for (Iterator iter = names.iterator(); iter.hasNext(); i++) {
/* 257 */       String name = iter.next();
/* 258 */       ret[i] = new ModuleEntry(org, name);
/*     */     } 
/* 260 */     return ret;
/*     */   }
/*     */   
/*     */   public RevisionEntry[] listRevisions(ModuleEntry mod) {
/* 264 */     ensureIvyConfigured(getSettings());
/* 265 */     ensureArtifactConfigured(getSettings());
/* 266 */     return super.listRevisions(mod);
/*     */   }
/*     */ 
/*     */   
/* 270 */   public String getTypeName() { return ""ivyrep""; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedModuleRevision getDependency(DependencyDescriptor dd, ResolveData data) throws ParseException {
/* 276 */     ensureIvyConfigured((ResolverSettings)data.getSettings());
/* 277 */     return super.getDependency(dd, data);
/*     */   }
/*     */   
/*     */   protected ResolvedResource findArtifactRef(Artifact artifact, Date date) {
/* 281 */     ensureArtifactConfigured(getSettings());
/* 282 */     return super.findArtifactRef(artifact, date);
/*     */   }
/*     */   
/*     */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/* 286 */     ensureArtifactConfigured(getSettings());
/* 287 */     return super.download(artifacts, options);
/*     */   }
/*     */   
/*     */   public boolean exists(Artifact artifact) {
/* 291 */     ensureArtifactConfigured(getSettings());
/* 292 */     return super.exists(artifact);
/*     */   }
/*     */   
/*     */   public ArtifactOrigin locate(Artifact artifact) {
/* 296 */     ensureArtifactConfigured(getSettings());
/* 297 */     return super.locate(artifact);
/*     */   }
/*     */   
/*     */   public List getIvyPatterns() {
/* 301 */     ensureIvyConfigured(getSettings());
/* 302 */     return super.getIvyPatterns();
/*     */   }
/*     */   
/*     */   public List getArtifactPatterns() {
/* 306 */     ensureArtifactConfigured(getSettings());
/* 307 */     return super.getArtifactPatterns();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\IvyRepResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.RepositoryResolver,"/*     */ package org.apache.ivy.plugins.resolver;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.ParseException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.event.EventManager;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.report.DownloadReport;
/*     */ import org.apache.ivy.core.resolve.DownloadOptions;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
/*     */ import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
/*     */ import org.apache.ivy.plugins.repository.AbstractRepository;
/*     */ import org.apache.ivy.plugins.repository.Repository;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.repository.TransferListener;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolverHelper;
/*     */ import org.apache.ivy.plugins.resolver.util.ResourceMDParser;
/*     */ import org.apache.ivy.plugins.version.VersionMatcher;
/*     */ import org.apache.ivy.util.ChecksumHelper;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RepositoryResolver
/*     */   extends AbstractPatternsBasedResolver
/*     */ {
/*     */   private Repository repository;
/*  60 */   private Boolean alwaysCheckExactRevision = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   public Repository getRepository() { return this.repository; }
/*     */ 
/*     */ 
/*     */   
/*  70 */   public void setRepository(Repository repository) { this.repository = repository; }
/*     */ 
/*     */   
/*     */   public void setName(String name) {
/*  74 */     super.setName(name);
/*  75 */     if (this.repository instanceof AbstractRepository) {
/*  76 */       ((AbstractRepository)this.repository).setName(name);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   protected ResolvedResource findResourceUsingPattern(ModuleRevisionId mrid, String pattern, Artifact artifact, ResourceMDParser rmdparser, Date date) {
/*  82 */     String name = getName();
/*  83 */     VersionMatcher versionMatcher = getSettings().getVersionMatcher();
/*     */     try {
/*  85 */       if (!versionMatcher.isDynamic(mrid) || isAlwaysCheckExactRevision()) {
/*  86 */         String resourceName = IvyPatternHelper.substitute(pattern, mrid, artifact);
/*  87 */         Message.debug(""\t trying "" + resourceName);
/*  88 */         logAttempt(resourceName);
/*  89 */         Resource res = this.repository.getResource(resourceName);
/*  90 */         boolean reachable = res.exists();
/*  91 */         if (reachable) {
/*     */           String revision;
/*  93 */           if (pattern.indexOf(""revision"") == -1) {
/*  94 */             if (""ivy"".equals(artifact.getType()) || ""pom"".equals(artifact.getType())) {
/*     */ 
/*     */               
/*  97 */               File temp = File.createTempFile(""ivy"", artifact.getExt());
/*  98 */               temp.deleteOnExit();
/*  99 */               this.repository.get(res.getName(), temp);
/* 100 */               ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(res);
/*     */               
/* 102 */               ModuleDescriptor md = parser.parseDescriptor(getSettings(), temp.toURI().toURL(), res, false);
/*     */ 
/*     */               
/* 105 */               revision = md.getRevision();
/* 106 */               if (revision == null || revision.length() == 0) {
/* 107 */                 revision = ""working@"" + name;
/*     */               }
/*     */             } else {
/* 110 */               revision = ""working@"" + name;
/*     */             } 
/*     */           } else {
/* 113 */             revision = mrid.getRevision();
/*     */           } 
/* 115 */           return new ResolvedResource(res, revision);
/* 116 */         }  if (versionMatcher.isDynamic(mrid)) {
/* 117 */           return findDynamicResourceUsingPattern(rmdparser, mrid, pattern, artifact, date);
/*     */         }
/*     */         
/* 120 */         Message.debug(""\t"" + name + "": resource not reachable for "" + mrid + "": res="" + res);
/*     */         
/* 122 */         return null;
/*     */       } 
/*     */       
/* 125 */       return findDynamicResourceUsingPattern(rmdparser, mrid, pattern, artifact, date);
/*     */     }
/* 127 */     catch (IOException ex) {
/* 128 */       throw new RuntimeException(name + "": unable to get resource for "" + mrid + "": res="" + IvyPatternHelper.substitute(pattern, mrid, artifact) + "": "" + ex, ex);
/*     */     }
/* 130 */     catch (ParseException ex) {
/* 131 */       throw new RuntimeException(name + "": unable to get resource for "" + mrid + "": res="" + IvyPatternHelper.substitute(pattern, mrid, artifact) + "": "" + ex, ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ResolvedResource findDynamicResourceUsingPattern(ResourceMDParser rmdparser, ModuleRevisionId mrid, String pattern, Artifact artifact, Date date) {
/* 139 */     String name = getName();
/* 140 */     logAttempt(IvyPatternHelper.substitute(pattern, ModuleRevisionId.newInstance(mrid, IvyPatternHelper.getTokenString(""revision"")), artifact));
/*     */     
/* 142 */     ResolvedResource[] rress = listResources(this.repository, mrid, pattern, artifact);
/* 143 */     if (rress == null) {
/* 144 */       Message.debug(""\t"" + name + "": unable to list resources for "" + mrid + "": pattern="" + pattern);
/*     */       
/* 146 */       return null;
/*     */     } 
/* 148 */     ResolvedResource found = findResource(rress, rmdparser, mrid, date);
/* 149 */     if (found == null) {
/* 150 */       Message.debug(""\t"" + name + "": no resource found for "" + mrid + "": pattern="" + pattern);
/*     */     }
/*     */     
/* 153 */     return found;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 158 */   protected Resource getResource(String source) throws IOException { return this.repository.getResource(source); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   protected ResolvedResource[] listResources(Repository repository, ModuleRevisionId mrid, String pattern, Artifact artifact) { return ResolverHelper.findAll(repository, mrid, pattern, artifact); }
/*     */ 
/*     */   
/*     */   protected long get(Resource resource, File dest) throws IOException {
/* 182 */     Message.verbose(""\t"" + getName() + "": downloading "" + resource.getName());
/* 183 */     Message.debug(""\t\tto "" + dest);
/* 184 */     if (dest.getParentFile() != null) {
/* 185 */       dest.getParentFile().mkdirs();
/*     */     }
/* 187 */     this.repository.get(resource.getName(), dest);
/* 188 */     return dest.length();
/*     */   }
/*     */   
/*     */   public void publish(Artifact artifact, File src, boolean overwrite) throws IOException {
/*     */     String destPattern;
/* 193 */     if (""ivy"".equals(artifact.getType()) && !getIvyPatterns().isEmpty()) {
/* 194 */       destPattern = getIvyPatterns().get(0);
/* 195 */     } else if (!getArtifactPatterns().isEmpty()) {
/* 196 */       destPattern = getArtifactPatterns().get(0);
/*     */     } else {
/* 198 */       throw new IllegalStateException(""impossible to publish "" + artifact + "" using "" + this + "": no artifact pattern defined"");
/*     */     } 
/*     */ 
/*     */     
/* 202 */     ModuleRevisionId mrid = artifact.getModuleRevisionId();
/* 203 */     if (isM2compatible()) {
/* 204 */       mrid = convertM2IdForResourceSearch(mrid);
/*     */     }
/*     */     
/* 207 */     String dest = getDestination(destPattern, artifact, mrid);
/*     */     
/* 209 */     put(artifact, src, dest, overwrite);
/* 210 */     Message.info(""\tpublished "" + artifact.getName() + "" to "" + hidePassword(dest));
/*     */   }
/*     */ 
/*     */   
/* 214 */   protected String getDestination(String pattern, Artifact artifact, ModuleRevisionId mrid) { return IvyPatternHelper.substitute(pattern, mrid, artifact); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void put(Artifact artifact, File src, String dest, boolean overwrite) throws IOException {
/* 219 */     this.repository.put(artifact, src, dest, overwrite);
/* 220 */     String[] checksums = getChecksumAlgorithms();
/* 221 */     for (int i = 0; i < checksums.length; i++) {
/* 222 */       putChecksum(artifact, src, dest, overwrite, checksums[i]);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   protected void putChecksum(Artifact artifact, File src, String dest, boolean overwrite, String algorithm) throws IOException {
/* 228 */     File csFile = File.createTempFile(""ivytemp"", algorithm);
/*     */     try {
/* 230 */       FileUtil.copy(new ByteArrayInputStream(ChecksumHelper.computeAsString(src, algorithm).getBytes()), csFile, null);
/*     */       
/* 232 */       this.repository.put(DefaultArtifact.cloneWithAnotherTypeAndExt(artifact, algorithm, artifact.getExt() + ""."" + algorithm), csFile, dest + ""."" + algorithm, overwrite);
/*     */     } finally {
/*     */       
/* 235 */       csFile.delete();
/*     */     } 
/*     */   }
/*     */   
/*     */   public DownloadReport download(Artifact[] artifacts, DownloadOptions options) {
/* 240 */     EventManager eventManager = getEventManager();
/*     */     try {
/* 242 */       if (eventManager != null) {
/* 243 */         this.repository.addTransferListener((TransferListener)eventManager);
/*     */       }
/* 245 */       return super.download(artifacts, options);
/*     */     } finally {
/* 247 */       if (eventManager != null) {
/* 248 */         this.repository.removeTransferListener((TransferListener)eventManager);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void findTokenValues(Collection names, List patterns, Map tokenValues, String token) {
/* 254 */     for (Iterator iter = patterns.iterator(); iter.hasNext(); ) {
/* 255 */       String pattern = iter.next();
/* 256 */       String partiallyResolvedPattern = IvyPatternHelper.substituteTokens(pattern, tokenValues);
/*     */       
/* 258 */       String[] values = ResolverHelper.listTokenValues(this.repository, partiallyResolvedPattern, token);
/*     */       
/* 260 */       if (values != null) {
/* 261 */         names.addAll(filterNames(new ArrayList(Arrays.asList((Object[])values))));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 267 */   protected String[] listTokenValues(String pattern, String token) { return ResolverHelper.listTokenValues(this.repository, pattern, token); }
/*     */ 
/*     */   
/*     */   protected boolean exist(String path) {
/*     */     try {
/* 272 */       Resource resource = this.repository.getResource(path);
/* 273 */       return resource.exists();
/* 274 */     } catch (IOException e) {
/* 275 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 280 */   public String getTypeName() { return ""repository""; }
/*     */ 
/*     */   
/*     */   public void dumpSettings() {
/* 284 */     super.dumpSettings();
/* 285 */     Message.debug(""\t\trepository: "" + getRepository());
/*     */   }
/*     */   
/*     */   public void setSettings(ResolverSettings settings) {
/* 289 */     super.setSettings(settings);
/* 290 */     if (settings != null && 
/* 291 */       this.alwaysCheckExactRevision == null) {
/* 292 */       this.alwaysCheckExactRevision = Boolean.valueOf(settings.getVariable(""ivy.default.always.check.exact.revision""));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 299 */   public boolean isAlwaysCheckExactRevision() { return (this.alwaysCheckExactRevision == null) ? true : this.alwaysCheckExactRevision.booleanValue(); }
/*     */ 
/*     */ 
/*     */   
/* 303 */   public void setAlwaysCheckExactRevision(boolean alwaysCheckExactRevision) { this.alwaysCheckExactRevision = Boolean.valueOf(alwaysCheckExactRevision); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\RepositoryResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.ResolverSettings,"package org.apache.ivy.plugins.resolver;
import java.util.Collection;
import org.apache.ivy.core.cache.RepositoryCacheManager;
import org.apache.ivy.core.module.id.ModuleId;
import org.apache.ivy.plugins.latest.LatestStrategy;
import org.apache.ivy.plugins.namespace.Namespace;
import org.apache.ivy.plugins.parser.ParserSettings;
import org.apache.ivy.plugins.version.VersionMatcher;
public interface ResolverSettings extends ParserSettings {
  LatestStrategy getLatestStrategy(String paramString);
  LatestStrategy getDefaultLatestStrategy();
  RepositoryCacheManager getRepositoryCacheManager(String paramString);
  RepositoryCacheManager getDefaultRepositoryCacheManager();
  RepositoryCacheManager[] getRepositoryCacheManagers();
  Namespace getNamespace(String paramString);
  Namespace getSystemNamespace();
  String getVariable(String paramString);
  void configureRepositories(boolean paramBoolean);
  VersionMatcher getVersionMatcher();
  String getResolveMode(ModuleId paramModuleId);
  void filterIgnore(Collection paramCollection);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\ResolverSettings.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.SFTPResolver,"/*    */ package org.apache.ivy.plugins.resolver;
/*    */ 
/*    */ import org.apache.ivy.plugins.repository.Repository;
/*    */ import org.apache.ivy.plugins.repository.sftp.SFTPRepository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SFTPResolver
/*    */   extends AbstractSshBasedResolver
/*    */ {
/* 31 */   public SFTPResolver() { setRepository((Repository)new SFTPRepository()); }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public String getTypeName() { return ""sftp""; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public SFTPRepository getSFTPRepository() { return (SFTPRepository)getRepository(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\SFTPResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.SshResolver,"/*    */ package org.apache.ivy.plugins.resolver;
/*    */ 
/*    */ import org.apache.ivy.plugins.repository.Repository;
/*    */ import org.apache.ivy.plugins.repository.ssh.SshRepository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SshResolver
/*    */   extends AbstractSshBasedResolver
/*    */ {
/* 28 */   public SshResolver() { setRepository((Repository)new SshRepository()); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 36 */   public void setPublishPermissions(String permissions) { ((SshRepository)getRepository()).setPublishPermissions(permissions); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void setFileSeparator(String sep) {
/* 47 */     if (sep == null || sep.length() != 1) {
/* 48 */       throw new IllegalArgumentException(""File Separator has to be a single character and not "" + sep);
/*    */     }
/*    */     
/* 51 */     ((SshRepository)getRepository()).setFileSeparator(sep.trim().charAt(0));
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 62 */   public void setListCommand(String cmd) { ((SshRepository)getRepository()).setListCommand(cmd); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 73 */   public void setExistCommand(String cmd) { ((SshRepository)getRepository()).setExistCommand(cmd); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 83 */   public void setCreateDirCommand(String cmd) { ((SshRepository)getRepository()).setExistCommand(cmd); }
/*    */ 
/*    */ 
/*    */   
/* 87 */   public String getTypeName() { return ""ssh""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\SshResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.URLResolver,"/*    */ package org.apache.ivy.plugins.resolver;
/*    */ 
/*    */ import org.apache.ivy.plugins.repository.Repository;
/*    */ import org.apache.ivy.plugins.repository.url.URLRepository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class URLResolver
/*    */   extends RepositoryResolver
/*    */ {
/* 28 */   public URLResolver() { setRepository((Repository)new URLRepository()); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public String getTypeName() { return ""url""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\URLResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.VfsResolver,"/*    */ package org.apache.ivy.plugins.resolver;
/*    */ 
/*    */ import java.util.regex.Matcher;
/*    */ import java.util.regex.Pattern;
/*    */ import org.apache.ivy.plugins.repository.Repository;
/*    */ import org.apache.ivy.plugins.repository.vfs.VfsRepository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class VfsResolver
/*    */   extends RepositoryResolver
/*    */ {
/* 29 */   private static final Pattern URL_PATTERN = Pattern.compile(""[a-z]*://(.+):(.+)@.*"");
/*    */   
/*    */   private static final int PASSWORD_GROUP = 2;
/*    */ 
/*    */   
/* 34 */   public VfsResolver() { setRepository((Repository)new VfsRepository()); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public String getTypeName() { return ""vfs""; }
/*    */ 
/*    */ 
/*    */   
/* 42 */   public String hidePassword(String name) { return prepareForDisplay(name); }
/*    */ 
/*    */   
/*    */   public static String prepareForDisplay(String name) {
/* 46 */     StringBuffer s = new StringBuffer(name);
/* 47 */     Matcher m = URL_PATTERN.matcher(s);
/* 48 */     if (m.matches()) {
/* 49 */       String password = m.group(2);
/* 50 */       int passwordposi = s.indexOf(password);
/* 51 */       StringBuffer stars = new StringBuffer(password);
/* 52 */       for (int posi = 0; posi < password.length(); posi++) {
/* 53 */         stars.setCharAt(posi, '*');
/*    */       }
/* 55 */       String replacement = stars.toString();
/* 56 */       s = s.replace(passwordposi, passwordposi + password.length(), replacement);
/*    */     } 
/* 58 */     return s.toString();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\VfsResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.VsftpResolver,"/*    */ package org.apache.ivy.plugins.resolver;
/*    */ 
/*    */ import org.apache.ivy.plugins.repository.Repository;
/*    */ import org.apache.ivy.plugins.repository.vsftp.VsftpRepository;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class VsftpResolver
/*    */   extends RepositoryResolver
/*    */ {
/* 28 */   public VsftpResolver() { setRepository((Repository)new VsftpRepository()); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public String getTypeName() { return ""vsftp""; }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public VsftpRepository getVsftpRepository() { return (VsftpRepository)getRepository(); }
/*    */ 
/*    */ 
/*    */   
/* 40 */   public void disconnect() { getVsftpRepository().disconnect(); }
/*    */ 
/*    */ 
/*    */   
/* 44 */   public String getAuthentication() { return getVsftpRepository().getAuthentication(); }
/*    */ 
/*    */ 
/*    */   
/* 48 */   public String getHost() { return getVsftpRepository().getHost(); }
/*    */ 
/*    */ 
/*    */   
/* 52 */   public String getUsername() { return getVsftpRepository().getUsername(); }
/*    */ 
/*    */ 
/*    */   
/* 56 */   public void setAuthentication(String authentication) { getVsftpRepository().setAuthentication(authentication); }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public void setHost(String host) { getVsftpRepository().setHost(host); }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public void setUsername(String username) { getVsftpRepository().setUsername(username); }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public void setReuseConnection(long time) { getVsftpRepository().setReuseConnection(time); }
/*    */ 
/*    */ 
/*    */   
/* 72 */   public void setReadTimeout(long readTimeout) { getVsftpRepository().setReadTimeout(readTimeout); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\VsftpResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.packager.BuiltFileResource,"/*    */ package org.apache.ivy.plugins.resolver.packager;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.FileInputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import org.apache.ivy.core.IvyPatternHelper;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class BuiltFileResource
/*    */   implements Resource
/*    */ {
/*    */   public static final String BUILT_ARTIFACT_PATTERN = ""artifacts/[type]s/[artifact].[ext]"";
/*    */   private final File file;
/*    */   
/* 43 */   public BuiltFileResource(File file) { this.file = file; }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public BuiltFileResource(File dir, Artifact artifact) { this(new File(dir, IvyPatternHelper.substitute(""artifacts/[type]s/[artifact].[ext]"", artifact))); }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public String getName() { return this.file.toURI().toString(); }
/*    */ 
/*    */ 
/*    */   
/* 55 */   public Resource clone(String name) { return new BuiltFileResource(new File(name)); }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public long getLastModified() { return this.file.lastModified(); }
/*    */ 
/*    */ 
/*    */   
/* 63 */   public long getContentLength() { return this.file.length(); }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public boolean exists() { return this.file.exists(); }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 75 */   public File getFile() { return this.file; }
/*    */ 
/*    */ 
/*    */   
/* 79 */   public boolean isLocal() { return false; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public InputStream openStream() throws IOException { return new FileInputStream(this.file); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\packager\BuiltFileResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.packager.PackagerCacheEntry,"/*     */ package org.apache.ivy.plugins.resolver.packager;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PackagerCacheEntry
/*     */ {
/*     */   private final ModuleRevisionId mr;
/*     */   private final File dir;
/*     */   private final File resourceCache;
/*     */   private final String resourceURL;
/*     */   private final boolean validate;
/*     */   private final boolean preserve;
/*     */   private final boolean restricted;
/*     */   private final boolean verbose;
/*     */   private final boolean quiet;
/*     */   private boolean built;
/*     */   
/*     */   public PackagerCacheEntry(ModuleRevisionId mr, File rootDir, File resourceCache, String resourceURL, boolean validate, boolean preserve, boolean restricted, boolean verbose, boolean quiet) {
/*  61 */     this.mr = mr;
/*  62 */     this.dir = getSubdir(rootDir, this.mr);
/*  63 */     this.resourceCache = resourceCache;
/*  64 */     this.resourceURL = resourceURL;
/*  65 */     this.validate = validate;
/*  66 */     this.preserve = preserve;
/*  67 */     this.restricted = restricted;
/*  68 */     this.verbose = verbose;
/*  69 */     this.quiet = quiet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void build(Resource packagerResource, Map properties) throws IOException {
/*  87 */     if (this.built) {
/*  88 */       throw new IllegalStateException(""build in directory `"" + this.dir + ""' already completed"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (this.dir.exists() && 
/*  94 */       !cleanup()) {
/*  95 */       throw new IOException(""can't remove directory `"" + this.dir + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 100 */     if (!this.dir.mkdirs()) {
/* 101 */       throw new IOException(""can't create directory `"" + this.dir + ""'"");
/*     */     }
/*     */ 
/*     */     
/* 105 */     InputStream packagerXML = packagerResource.openStream();
/* 106 */     saveFile(""packager.xml"", packagerXML);
/*     */ 
/*     */     
/* 109 */     saveFile(""packager.xsl"");
/*     */ 
/*     */     
/* 112 */     saveFile(""packager-1.0.xsd"");
/*     */ 
/*     */     
/* 115 */     saveFile(""build.xml"");
/*     */ 
/*     */     
/* 118 */     Project project = new Project();
/* 119 */     project.init();
/* 120 */     project.setUserProperty(""ant.file"", (new File(this.dir, ""build.xml"")).getAbsolutePath());
/* 121 */     ProjectHelper.configureProject(project, new File(this.dir, ""build.xml""));
/* 122 */     project.setBaseDir(this.dir);
/*     */ 
/*     */     
/* 125 */     DefaultLogger defaultLogger = new DefaultLogger();
/* 126 */     defaultLogger.setMessageOutputLevel(this.verbose ? 3 : (this.quiet ? 1 : 2));
/*     */     
/* 128 */     defaultLogger.setOutputPrintStream(System.out);
/* 129 */     defaultLogger.setErrorPrintStream(System.err);
/* 130 */     project.addBuildListener((BuildListener)defaultLogger);
/*     */ 
/*     */     
/* 133 */     project.setUserProperty(""ivy.packager.organisation"", """" + this.mr.getModuleId().getOrganisation());
/*     */     
/* 135 */     project.setUserProperty(""ivy.packager.module"", """" + this.mr.getModuleId().getName());
/* 136 */     project.setUserProperty(""ivy.packager.revision"", """" + this.mr.getRevision());
/* 137 */     project.setUserProperty(""ivy.packager.branch"", """" + this.mr.getBranch());
/* 138 */     if (this.resourceCache != null) {
/* 139 */       project.setUserProperty(""ivy.packager.resourceCache"", """" + this.resourceCache.getCanonicalPath());
/*     */     }
/*     */     
/* 142 */     if (this.resourceURL != null) {
/* 143 */       project.setUserProperty(""ivy.packager.resourceURL"", """" + getResourceURL());
/*     */     }
/* 145 */     if (this.validate) {
/* 146 */       project.setUserProperty(""ivy.packager.validate"", ""true"");
/*     */     }
/* 148 */     project.setUserProperty(""ivy.packager.restricted"", """" + this.restricted);
/* 149 */     if (properties != null) {
/* 150 */       for (Iterator it = properties.entrySet().iterator(); it.hasNext(); ) {
/* 151 */         Map.Entry entry = it.next();
/* 152 */         project.setUserProperty((String)entry.getKey(), (String)entry.getValue());
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 157 */     Message.verbose(""performing packager resolver build in "" + this.dir);
/*     */     try {
/* 159 */       project.executeTarget(""build"");
/* 160 */       this.built = true;
/* 161 */     } catch (BuildException e) {
/* 162 */       e.printStackTrace(System.out);
/* 163 */       Message.verbose(""packager resolver build failed: "" + e);
/* 164 */       throw e;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public synchronized boolean isBuilt() { return this.built; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ResolvedResource getBuiltArtifact(Artifact artifact) {
/* 182 */     if (!this.built) {
/* 183 */       throw new IllegalStateException(""build in directory `"" + this.dir + ""' has not yet successfully completed"");
/*     */     }
/*     */     
/* 186 */     return new ResolvedResource(new BuiltFileResource(this.dir, artifact), this.mr.getRevision());
/*     */   }
/*     */ 
/*     */   
/*     */   public synchronized boolean cleanup() {
/* 191 */     this.built = false;
/* 192 */     return FileUtil.forceDelete(this.dir);
/*     */   }
/*     */ 
/*     */   
/* 196 */   protected void saveFile(String name, InputStream input) throws IOException { FileUtil.copy(input, new File(this.dir, name), null); }
/*     */ 
/*     */   
/*     */   protected void saveFile(String name) throws IOException {
/* 200 */     InputStream input = getClass().getResourceAsStream(name);
/* 201 */     if (input == null) {
/* 202 */       throw new IOException(""can't find resource `"" + name + ""'"");
/*     */     }
/* 204 */     saveFile(name, input);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void finalize() throws Throwable {
/*     */     try {
/* 210 */       if (!this.preserve) {
/* 211 */         cleanup();
/*     */       }
/*     */     } finally {
/* 214 */       super.finalize();
/*     */     } 
/*     */   }
/*     */   
/*     */   private String getResourceURL() {
/* 219 */     String baseURL = IvyPatternHelper.substitute(this.resourceURL, this.mr.getOrganisation(), this.mr.getName(), this.mr.getRevision(), null, null, null, null, this.mr.getAttributes());
/*     */ 
/*     */     
/* 222 */     int slash = baseURL.lastIndexOf('/');
/* 223 */     if (slash != -1) {
/* 224 */       baseURL = baseURL.substring(0, slash + 1);
/*     */     }
/* 226 */     return baseURL;
/*     */   }
/*     */ 
/*     */   
/* 230 */   private static File getSubdir(File rootDir, ModuleRevisionId mr) { return new File(rootDir, mr.getOrganisation() + File.separatorChar + mr.getName() + File.separatorChar + mr.getRevision()); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\packager\PackagerCacheEntry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.packager.PackagerResolver,"/*     */ package org.apache.ivy.plugins.resolver.packager;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.resolver.URLResolver;
/*     */ import org.apache.ivy.plugins.resolver.util.ResolvedResource;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PackagerResolver
/*     */   extends URLResolver
/*     */ {
/*     */   private static final String PACKAGER_ARTIFACT_NAME = ""packager"";
/*     */   private static final String PACKAGER_ARTIFACT_TYPE = ""packager"";
/*     */   private static final String PACKAGER_ARTIFACT_EXT = ""xml"";
/*  51 */   private final HashMap packagerCache = new HashMap();
/*     */   
/*     */   private File buildRoot;
/*     */   private File resourceCache;
/*     */   private String resourceURL;
/*  56 */   private Map properties = new LinkedHashMap();
/*     */   
/*     */   private boolean validate = true;
/*     */   private boolean preserve;
/*     */   private boolean restricted = true;
/*     */   private boolean verbose;
/*     */   private boolean quiet;
/*     */   
/*     */   public PackagerResolver() {
/*  65 */     Runtime.getRuntime().addShutdownHook(new Thread()
/*     */         {
/*  67 */           public void run() { PackagerResolver.this.clearCache(); }
/*     */           private final PackagerResolver this$0;
/*     */         });
/*     */   }
/*     */   
/*     */   protected synchronized void clearCache() {
/*  73 */     if (this.preserve) {
/*     */       return;
/*     */     }
/*  76 */     for (Iterator i = this.packagerCache.values().iterator(); i.hasNext(); ) {
/*  77 */       PackagerCacheEntry entry = i.next();
/*  78 */       entry.cleanup();
/*     */     } 
/*  80 */     this.packagerCache.clear();
/*  81 */     if (this.buildRoot != null) {
/*  82 */       FileUtil.forceDelete(this.buildRoot);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setBuildRoot(File buildRoot) { this.buildRoot = buildRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public File getBuildRoot() { return this.buildRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setResourceCache(File resourceCache) { this.resourceCache = resourceCache; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public File getResourceCache() { return this.resourceCache; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setResourceURL(String resourceURL) { this.resourceURL = resourceURL; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPackagerPattern(String pattern) {
/* 125 */     ArrayList list = new ArrayList();
/* 126 */     list.add(pattern);
/* 127 */     setArtifactPatterns(list);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setPreserveBuildDirectories(boolean preserve) { this.preserve = preserve; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setRestricted(boolean restricted) { this.restricted = restricted; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setQuiet(boolean quiet) { this.quiet = quiet; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setValidate(boolean validate) { this.validate = validate; }
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setAllownomd(boolean b) { Message.error(""allownomd not supported by resolver "" + this); }
/*     */   
/*     */   public void setDescriptor(String rule) {
/* 169 */     if (""optional"".equals(rule)) {
/* 170 */       Message.error(""descriptor=\""optional\"" not supported by resolver "" + this);
/*     */       
/*     */       return;
/*     */     } 
/* 174 */     super.setDescriptor(rule);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setProperty(String propertyKey, String propertyValue) { this.properties.put(propertyKey, propertyValue); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() {
/* 189 */     super.validate();
/* 190 */     if (this.buildRoot == null) {
/* 191 */       throw new IllegalStateException(""no buildRoot specified"");
/*     */     }
/* 193 */     if (getArtifactPatterns().size() == 0) {
/* 194 */       throw new IllegalStateException(""no packager pattern specified"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected synchronized ResolvedResource findArtifactRef(Artifact artifact, Date date) {
/* 202 */     if (""packager"".equals(artifact.getName()) && ""packager"".equals(artifact.getType()) && ""xml"".equals(artifact.getExt()))
/*     */     {
/*     */       
/* 205 */       return super.findArtifactRef(artifact, date);
/*     */     }
/*     */ 
/*     */     
/* 209 */     ModuleRevisionId mr = artifact.getModuleRevisionId();
/* 210 */     PackagerCacheEntry entry = (PackagerCacheEntry)this.packagerCache.get(mr);
/*     */ 
/*     */     
/* 213 */     if (entry != null && !entry.isBuilt()) {
/* 214 */       this.packagerCache.remove(mr);
/* 215 */       entry.cleanup();
/* 216 */       entry = null;
/*     */     } 
/*     */ 
/*     */     
/* 220 */     if (entry == null) {
/* 221 */       ResolvedResource packager = findArtifactRef((Artifact)new DefaultArtifact(mr, null, ""packager"", ""packager"", ""xml""), date);
/*     */       
/* 223 */       if (packager == null) {
/* 224 */         return null;
/*     */       }
/* 226 */       entry = new PackagerCacheEntry(mr, this.buildRoot, this.resourceCache, this.resourceURL, this.validate, this.preserve, this.restricted, this.verbose, this.quiet);
/*     */ 
/*     */       
/*     */       try {
/* 230 */         entry.build(packager.getResource(), this.properties);
/* 231 */       } catch (IOException e) {
/* 232 */         throw new RuntimeException(""can't build artifact "" + artifact, e);
/*     */       } 
/* 234 */       this.packagerCache.put(mr, entry);
/*     */     } 
/*     */ 
/*     */     
/* 238 */     return entry.getBuiltArtifact(artifact);
/*     */   }
/*     */ 
/*     */   
/* 242 */   public String getTypeName() { return ""packager""; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolver\packager\PackagerResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.ApacheHttpURLLister,"/*    */ package org.apache.ivy.plugins.resolver.util;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.net.URL;
/*    */ import java.util.List;
/*    */ import org.apache.ivy.util.url.ApacheURLLister;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ApacheHttpURLLister
/*    */   implements URLLister
/*    */ {
/* 27 */   private ApacheURLLister lister = new ApacheURLLister();
/*    */ 
/*    */   
/* 30 */   public boolean accept(String pattern) { return pattern.startsWith(""http""); }
/*    */ 
/*    */ 
/*    */   
/* 34 */   public List listAll(URL url) throws IOException { return this.lister.listAll(url); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public String toString() { return ""apache http lister""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\ApacheHttpURLLister.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.FileURLLister,"/*    */ package org.apache.ivy.plugins.resolver.util;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import java.net.URL;
/*    */ import java.util.ArrayList;
/*    */ import java.util.Collections;
/*    */ import java.util.List;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FileURLLister
/*    */   implements URLLister
/*    */ {
/*    */   private File basedir;
/*    */   
/* 31 */   public FileURLLister() { this(null); }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public FileURLLister(File baseDir) { this.basedir = baseDir; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public boolean accept(String pattern) { return pattern.startsWith(""file""); }
/*    */ 
/*    */   
/*    */   public List listAll(URL url) throws IOException {
/* 43 */     String path = url.getPath();
/* 44 */     File file = (this.basedir == null) ? new File(path) : new File(this.basedir, path);
/* 45 */     if (file.exists() && file.isDirectory()) {
/* 46 */       String[] files = file.list();
/* 47 */       List ret = new ArrayList(files.length);
/* 48 */       URL context = url.getPath().endsWith(""/"") ? url : new URL(url.toExternalForm() + ""/"");
/* 49 */       for (int i = 0; i < files.length; i++) {
/* 50 */         ret.add(new URL(context, files[i]));
/*    */       }
/* 52 */       return ret;
/*    */     } 
/* 54 */     return Collections.EMPTY_LIST;
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public String toString() { return ""file lister""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\FileURLLister.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.HasLatestStrategy,"package org.apache.ivy.plugins.resolver.util;
import org.apache.ivy.plugins.latest.LatestStrategy;
public interface HasLatestStrategy {
  LatestStrategy getLatestStrategy();
  void setLatestStrategy(LatestStrategy paramLatestStrategy);
  String getLatest();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\HasLatestStrategy.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.MDResolvedResource,"/*    */ package org.apache.ivy.plugins.resolver.util;
/*    */ 
/*    */ import org.apache.ivy.core.resolve.ResolvedModuleRevision;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MDResolvedResource
/*    */   extends ResolvedResource
/*    */ {
/*    */   private ResolvedModuleRevision rmr;
/*    */   
/*    */   public MDResolvedResource(Resource res, String rev, ResolvedModuleRevision rmr) {
/* 27 */     super(res, rev);
/* 28 */     this.rmr = rmr;
/*    */   }
/*    */ 
/*    */   
/* 32 */   public ResolvedModuleRevision getResolvedModuleRevision() { return this.rmr; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\MDResolvedResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.ResolvedResource,"/*    */ package org.apache.ivy.plugins.resolver.util;
/*    */ 
/*    */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*    */ import org.apache.ivy.plugins.repository.Resource;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ResolvedResource
/*    */   implements ArtifactInfo
/*    */ {
/*    */   private Resource res;
/*    */   private String rev;
/*    */   
/*    */   public ResolvedResource(Resource res, String rev) {
/* 29 */     this.res = res;
/* 30 */     this.rev = rev;
/*    */   }
/*    */ 
/*    */   
/* 34 */   public String getRevision() { return this.rev; }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public Resource getResource() { return this.res; }
/*    */ 
/*    */ 
/*    */   
/* 42 */   public String toString() { return this.res + "" ("" + this.rev + "")""; }
/*    */ 
/*    */ 
/*    */   
/* 46 */   public long getLastModified() { return getResource().getLastModified(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\ResolvedResource.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.ResolverHelper,"/*     */ package org.apache.ivy.plugins.resolver.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.descriptor.Artifact;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.repository.Repository;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ResolverHelper
/*     */ {
/*     */   public static String[] listTokenValues(Repository rep, String pattern, String token) {
/*  43 */     String fileSep = rep.getFileSeparator();
/*  44 */     pattern = rep.standardize(pattern);
/*  45 */     String tokenString = IvyPatternHelper.getTokenString(token);
/*  46 */     int index = pattern.indexOf(tokenString);
/*  47 */     if (index == -1) {
/*  48 */       Message.verbose(""unable to list "" + token + "" in "" + pattern + "": token not found in pattern"");
/*     */       
/*  50 */       return null;
/*     */     } 
/*  52 */     if ((pattern.length() <= index + tokenString.length() || fileSep.equals(pattern.substring(index + tokenString.length(), index + tokenString.length() + 1))) && (index == 0 || fileSep.equals(pattern.substring(index - 1, index)))) {
/*     */ 
/*     */ 
/*     */       
/*  56 */       String root = pattern.substring(0, index);
/*  57 */       return listAll(rep, root);
/*     */     } 
/*  59 */     int slashIndex = pattern.substring(0, index).lastIndexOf(fileSep);
/*  60 */     String root = (slashIndex == -1) ? """" : pattern.substring(0, slashIndex);
/*     */     
/*     */     try {
/*  63 */       Message.debug(""\tusing "" + rep + "" to list all in "" + root);
/*  64 */       List all = rep.list(root);
/*  65 */       if (all != null) {
/*  66 */         String namePattern; Message.debug(""\t\tfound "" + all.size() + "" urls"");
/*  67 */         List ret = new ArrayList(all.size());
/*  68 */         int endNameIndex = pattern.indexOf(fileSep, slashIndex + 1);
/*     */         
/*  70 */         if (endNameIndex != -1) {
/*  71 */           namePattern = pattern.substring(slashIndex + 1, endNameIndex);
/*     */         } else {
/*  73 */           namePattern = pattern.substring(slashIndex + 1);
/*     */         } 
/*  75 */         String acceptNamePattern = "".*"" + IvyPatternHelper.substituteToken(namePattern, token, ""([^"" + fileSep + ""]+)"") + "".*"";
/*     */ 
/*     */         
/*  78 */         Pattern p = Pattern.compile(acceptNamePattern.toString());
/*  79 */         for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/*  80 */           String path = iter.next();
/*  81 */           Matcher m = p.matcher(path);
/*  82 */           if (m.matches()) {
/*  83 */             String value = m.group(1);
/*  84 */             ret.add(value);
/*     */           } 
/*     */         } 
/*  87 */         Message.debug(""\t\t"" + ret.size() + "" matched "" + pattern);
/*  88 */         return ret.toArray(new String[ret.size()]);
/*     */       } 
/*  90 */       return null;
/*     */     }
/*  92 */     catch (IOException e) {
/*  93 */       Message.verbose(""problem while listing resources in "" + root + "" with "" + rep + "":"");
/*     */       
/*  95 */       Message.verbose(""  "" + e.getClass().getName() + "" "" + e.getMessage());
/*  96 */       return null;
/*  97 */     } catch (Exception e) {
/*  98 */       Message.warn(""problem while listing resources in "" + root + "" with "" + rep + "":"");
/*  99 */       Message.warn(""  "" + e.getClass().getName() + "" "" + e.getMessage());
/* 100 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static String[] listAll(Repository rep, String parent) {
/*     */     try {
/* 107 */       String fileSep = rep.getFileSeparator();
/* 108 */       Message.debug(""\tusing "" + rep + "" to list all in "" + parent);
/* 109 */       List all = rep.list(parent);
/* 110 */       if (all != null) {
/* 111 */         Message.debug(""\t\tfound "" + all.size() + "" resources"");
/* 112 */         List names = new ArrayList(all.size());
/* 113 */         for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/* 114 */           String path = iter.next();
/* 115 */           if (path.endsWith(fileSep)) {
/* 116 */             path = path.substring(0, path.length() - 1);
/*     */           }
/* 118 */           int slashIndex = path.lastIndexOf(fileSep);
/* 119 */           names.add(path.substring(slashIndex + 1));
/*     */         } 
/* 121 */         return names.toArray(new String[names.size()]);
/*     */       } 
/* 123 */       Message.debug(""\t\tno resources found"");
/* 124 */       return null;
/*     */     }
/* 126 */     catch (IOException e) {
/* 127 */       Message.verbose(""problem while listing resources in "" + parent + "" with "" + rep + "":"");
/* 128 */       Message.verbose(""  "" + e.getClass().getName() + "" "" + e.getMessage());
/* 129 */       return null;
/* 130 */     } catch (Exception e) {
/* 131 */       Message.warn(""problem while listing resources in "" + parent + "" with "" + rep + "":"");
/* 132 */       Message.warn(""  "" + e.getClass().getName() + "" "" + e.getMessage());
/* 133 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static ResolvedResource[] findAll(Repository rep, ModuleRevisionId mrid, String pattern, Artifact artifact) {
/* 140 */     String partiallyResolvedPattern = IvyPatternHelper.substitute(pattern, ModuleRevisionId.newInstance(mrid, IvyPatternHelper.getTokenString(""revision"")), artifact);
/*     */ 
/*     */     
/* 143 */     Message.debug(""\tlisting all in "" + partiallyResolvedPattern);
/*     */     
/* 145 */     String[] revs = listTokenValues(rep, partiallyResolvedPattern, ""revision"");
/*     */     
/* 147 */     if (revs != null) {
/* 148 */       Message.debug(""\tfound revs: "" + Arrays.asList(revs));
/* 149 */       List ret = new ArrayList(revs.length);
/* 150 */       for (int i = 0; i < revs.length; i++) {
/* 151 */         String rres = IvyPatternHelper.substituteToken(partiallyResolvedPattern, ""revision"", revs[i]);
/*     */         
/*     */         try {
/* 154 */           Resource res = rep.getResource(rres);
/* 155 */           if (res != null && res.exists()) {
/* 156 */             ret.add(new ResolvedResource(res, revs[i]));
/*     */           }
/* 158 */         } catch (IOException e) {
/* 159 */           Message.warn(""impossible to get resource from name listed by repository: "" + rres + "": "" + e.getMessage());
/*     */         } 
/*     */       } 
/*     */       
/* 163 */       if (revs.length != ret.size()) {
/* 164 */         Message.debug(""\tfound resolved res: "" + ret);
/*     */       }
/* 166 */       return ret.toArray(new ResolvedResource[ret.size()]);
/* 167 */     }  if (partiallyResolvedPattern.indexOf(""[revision]"") == -1) {
/*     */ 
/*     */       
/*     */       try {
/* 171 */         Resource res = rep.getResource(partiallyResolvedPattern);
/* 172 */         if (res.exists()) {
/* 173 */           Message.debug(""\tonly one resource found without real listing: using and defining it as working@"" + rep.getName() + "" revision: "" + res.getName());
/*     */ 
/*     */           
/* 176 */           return new ResolvedResource[] { new ResolvedResource(res, ""working@"" + rep.getName()) };
/*     */         }
/*     */       
/* 179 */       } catch (IOException e) {
/* 180 */         Message.debug(""\timpossible to get resource from name listed by repository: "" + partiallyResolvedPattern + "": "" + e.getMessage());
/*     */       } 
/*     */       
/* 183 */       Message.debug(""\tno revision found"");
/*     */     } 
/* 185 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String[] listTokenValues(URLLister lister, String pattern, String token) {
/* 251 */     pattern = standardize(pattern);
/* 252 */     if (lister.accept(pattern)) {
/* 253 */       String tokenString = IvyPatternHelper.getTokenString(token);
/* 254 */       int index = pattern.indexOf(tokenString);
/* 255 */       if (index == -1) {
/* 256 */         Message.verbose(""unable to list "" + token + "" in "" + pattern + "": token not found in pattern"");
/*     */         
/* 258 */         return null;
/*     */       } 
/* 260 */       if ((pattern.length() <= index + tokenString.length() || ""/"".equals(pattern.substring(index + tokenString.length(), index + tokenString.length() + 1))) && (index == 0 || ""/"".equals(pattern.substring(index - 1, index)))) {
/*     */ 
/*     */ 
/*     */         
/* 264 */         String root = pattern.substring(0, index);
/*     */         try {
/* 266 */           return listAll(lister, new URL(root));
/* 267 */         } catch (MalformedURLException e) {
/* 268 */           Message.warn(""malformed url from pattern root: "" + root + "": "" + e.getMessage());
/*     */ 
/*     */           
/* 271 */           return null;
/*     */         } 
/*     */       } 
/* 274 */       int slashIndex = pattern.substring(0, index).lastIndexOf('/');
/* 275 */       String root = (slashIndex == -1) ? """" : pattern.substring(0, slashIndex);
/*     */       try {
/*     */         String namePattern;
/* 278 */         Message.debug(""\tusing "" + lister + "" to list all in "" + root);
/* 279 */         List all = lister.listAll(new URL(root));
/* 280 */         Message.debug(""\t\tfound "" + all.size() + "" urls"");
/* 281 */         List ret = new ArrayList(all.size());
/* 282 */         int endNameIndex = pattern.indexOf('/', slashIndex + 1);
/*     */         
/* 284 */         if (endNameIndex != -1) {
/* 285 */           namePattern = pattern.substring(slashIndex + 1, endNameIndex);
/*     */         } else {
/* 287 */           namePattern = pattern.substring(slashIndex + 1);
/*     */         } 
/* 289 */         String acceptNamePattern = "".*"" + IvyPatternHelper.substituteToken(namePattern, token, ""([^/]+)"") + "".*"";
/*     */ 
/*     */         
/* 292 */         Pattern p = Pattern.compile(acceptNamePattern.toString());
/* 293 */         for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/* 294 */           URL url = iter.next();
/* 295 */           String path = standardize(url.getPath());
/* 296 */           Matcher m = p.matcher(path);
/* 297 */           if (m.matches()) {
/* 298 */             String value = m.group(1);
/* 299 */             ret.add(value);
/*     */           } 
/*     */         } 
/* 302 */         Message.debug(""\t\t"" + ret.size() + "" matched "" + pattern);
/* 303 */         return ret.toArray(new String[ret.size()]);
/* 304 */       } catch (Exception e) {
/* 305 */         Message.warn(""problem while listing files in "" + root + "": "" + e.getClass() + "" "" + e.getMessage());
/*     */         
/* 307 */         return null;
/*     */       } 
/*     */     } 
/*     */     
/* 311 */     return null;
/*     */   }
/*     */ 
/*     */   
/* 315 */   private static String standardize(String path) { return path.replace('\\', '/'); }
/*     */ 
/*     */   
/*     */   public static String[] listAll(URLLister lister, URL root) {
/*     */     try {
/* 320 */       if (lister.accept(root.toExternalForm())) {
/* 321 */         Message.debug(""\tusing "" + lister + "" to list all in "" + root);
/* 322 */         List all = lister.listAll(root);
/* 323 */         Message.debug(""\t\tfound "" + all.size() + "" urls"");
/* 324 */         List names = new ArrayList(all.size());
/* 325 */         for (Iterator iter = all.iterator(); iter.hasNext(); ) {
/* 326 */           URL dir = iter.next();
/* 327 */           String path = dir.getPath();
/* 328 */           if (path.endsWith(""/"")) {
/* 329 */             path = path.substring(0, path.length() - 1);
/*     */           }
/* 331 */           int slashIndex = path.lastIndexOf('/');
/* 332 */           names.add(path.substring(slashIndex + 1));
/*     */         } 
/* 334 */         return names.toArray(new String[names.size()]);
/*     */       } 
/* 336 */       return null;
/* 337 */     } catch (Exception e) {
/* 338 */       Message.warn(""problem while listing directories in "" + root + "": "" + e.getClass() + "" "" + e.getMessage());
/*     */       
/* 340 */       return null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\ResolverHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.ResourceMDParser,"package org.apache.ivy.plugins.resolver.util;
import org.apache.ivy.plugins.repository.Resource;
public interface ResourceMDParser {
  MDResolvedResource parse(Resource paramResource, String paramString);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\ResourceMDParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.resolver.util.URLLister,"package org.apache.ivy.plugins.resolver.util;
import java.io.IOException;
import java.net.URL;
import java.util.List;
public interface URLLister {
  boolean accept(String paramString);
  List listAll(URL paramURL) throws IOException;
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\resolve\\util\URLLister.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.trigger.AbstractTrigger,"/*    */ package org.apache.ivy.plugins.trigger;
/*    */ 
/*    */ import org.apache.ivy.core.IvyContext;
/*    */ import org.apache.ivy.core.event.IvyEventFilter;
/*    */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*    */ import org.apache.ivy.util.filter.Filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractTrigger
/*    */   implements Trigger
/*    */ {
/*    */   private Filter filter;
/*    */   private String event;
/*    */   private String expression;
/* 40 */   private String matcher = ""exact"";
/*    */   
/*    */   public Filter getEventFilter() {
/* 43 */     if (this.filter == null) {
/* 44 */       this.filter = createFilter();
/*    */     }
/* 46 */     return this.filter;
/*    */   }
/*    */ 
/*    */   
/* 50 */   private Filter createFilter() { return (Filter)new IvyEventFilter(getEvent(), getFilter(), getPatternMatcher()); }
/*    */ 
/*    */ 
/*    */   
/* 54 */   private PatternMatcher getPatternMatcher() { return IvyContext.getContext().getSettings().getMatcher(this.matcher); }
/*    */ 
/*    */ 
/*    */   
/* 58 */   public String getEvent() { return this.event; }
/*    */ 
/*    */ 
/*    */   
/* 62 */   public void setEvent(String event) { this.event = event; }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public String getFilter() { return this.expression; }
/*    */ 
/*    */ 
/*    */   
/* 70 */   public void setFilter(String filterExpression) { this.expression = filterExpression; }
/*    */ 
/*    */ 
/*    */   
/* 74 */   public String getMatcher() { return this.matcher; }
/*    */ 
/*    */ 
/*    */   
/* 78 */   public void setMatcher(String matcher) { this.matcher = matcher; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\trigger\AbstractTrigger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.trigger.LogTrigger,"/*     */ package org.apache.ivy.plugins.trigger;
/*     */ 
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Writer;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.event.IvyEvent;
/*     */ import org.apache.ivy.core.resolve.ResolveProcessException;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogTrigger
/*     */   extends AbstractTrigger
/*     */ {
/*  40 */   private static final String LINE_SEPARATOR = System.getProperty(""line.separator"");
/*     */   
/*  42 */   private String message = """";
/*     */   
/*  44 */   private File file = null;
/*     */   
/*     */   private boolean append = true;
/*     */   
/*  48 */   private String encoding = """";
/*     */ 
/*     */   
/*  51 */   public void progress(IvyEvent event) { log(IvyPatternHelper.substituteVariables(this.message, event.getAttributes())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void log(String message) {
/*  60 */     if (this.file == null) {
/*  61 */       Message.info(message);
/*     */     } else {
/*  63 */       Writer out = null;
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/*  68 */         message = message + LINE_SEPARATOR;
/*  69 */         String filename = this.file.getAbsolutePath();
/*  70 */         if (this.encoding == null || this.encoding.length() == 0) {
/*  71 */           out = new FileWriter(filename, this.append);
/*     */         } else {
/*  73 */           out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename, this.append), this.encoding));
/*     */         } 
/*     */ 
/*     */         
/*  77 */         out.write(message, 0, message.length());
/*  78 */       } catch (IOException e) {
/*  79 */         throw new ResolveProcessException(e);
/*     */       } finally {
/*  81 */         if (out != null) {
/*     */           try {
/*  83 */             out.close();
/*  84 */           } catch (IOException e) {
/*  85 */             throw new ResolveProcessException(e);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setMessage(String msg) { this.message = msg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\trigger\LogTrigger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.trigger.Trigger,"package org.apache.ivy.plugins.trigger;
import org.apache.ivy.core.event.IvyListener;
import org.apache.ivy.util.filter.Filter;
public interface Trigger extends IvyListener {
  Filter getEventFilter();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\trigger\Trigger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.AbstractVersionMatcher,"/*    */ package org.apache.ivy.plugins.version;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.settings.IvySettings;
/*    */ import org.apache.ivy.plugins.IvySettingsAware;
/*    */ import org.apache.ivy.util.Checks;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractVersionMatcher
/*    */   implements VersionMatcher, IvySettingsAware
/*    */ {
/*    */   private String name;
/*    */   private IvySettings settings;
/*    */   
/*    */   public AbstractVersionMatcher() {}
/*    */   
/* 37 */   public AbstractVersionMatcher(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 49 */   public boolean needModuleDescriptor(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) { return false; }
/*    */ 
/*    */ 
/*    */   
/* 53 */   public boolean accept(ModuleRevisionId askedMrid, ModuleDescriptor foundMD) { return accept(askedMrid, foundMD.getResolvedModuleRevisionId()); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 62 */   public int compare(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid, Comparator staticComparator) { return 0; }
/*    */ 
/*    */ 
/*    */   
/* 66 */   public String toString() { return getName(); }
/*    */ 
/*    */ 
/*    */   
/* 70 */   public IvySettings getSettings() { return this.settings; }
/*    */ 
/*    */   
/*    */   public void setSettings(IvySettings settings) {
/* 74 */     Checks.checkNotNull(settings, ""settings"");
/* 75 */     this.settings = settings;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\AbstractVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.ChainVersionMatcher,"/*     */ package org.apache.ivy.plugins.version;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.Comparator;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.core.settings.IvySettings;
/*     */ import org.apache.ivy.plugins.IvySettingsAware;
/*     */ import org.apache.ivy.util.Checks;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ChainVersionMatcher
/*     */   extends AbstractVersionMatcher
/*     */ {
/*  42 */   private List matchers = new LinkedList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  48 */   public ChainVersionMatcher() { super(""chain""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void add(VersionMatcher matcher) {
/*  58 */     Checks.checkNotNull(matcher, ""matcher"");
/*  59 */     this.matchers.add(0, matcher);
/*  60 */     if (getSettings() != null && matcher instanceof IvySettingsAware) {
/*  61 */       ((IvySettingsAware)matcher).setSettings(getSettings());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSettings(IvySettings settings) {
/*  73 */     super.setSettings(settings);
/*  74 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/*  75 */       VersionMatcher matcher = iter.next();
/*  76 */       if (matcher instanceof IvySettingsAware) {
/*  77 */         ((IvySettingsAware)matcher).setSettings(settings);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public List getMatchers() { return Collections.unmodifiableList(this.matchers); }
/*     */ 
/*     */   
/*     */   public boolean isDynamic(ModuleRevisionId askedMrid) {
/*  95 */     Checks.checkNotNull(askedMrid, ""askedMrid"");
/*  96 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/*  97 */       VersionMatcher matcher = iter.next();
/*  98 */       if (matcher.isDynamic(askedMrid)) {
/*  99 */         return true;
/*     */       }
/*     */     } 
/* 102 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   public int compare(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid, Comparator staticComparator) {
/* 107 */     Checks.checkNotNull(askedMrid, ""askedMrid"");
/* 108 */     Checks.checkNotNull(foundMrid, ""foundMrid"");
/* 109 */     Checks.checkNotNull(staticComparator, ""staticComparator"");
/* 110 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/* 111 */       VersionMatcher matcher = iter.next();
/* 112 */       if (matcher.isDynamic(askedMrid)) {
/* 113 */         return matcher.compare(askedMrid, foundMrid, staticComparator);
/*     */       }
/*     */     } 
/* 116 */     throw new IllegalArgumentException(""impossible to compare revisions: askedMrid is not dynamic: "" + askedMrid);
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) {
/* 121 */     Checks.checkNotNull(askedMrid, ""askedMrid"");
/* 122 */     Checks.checkNotNull(foundMrid, ""foundMrid"");
/* 123 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/* 124 */       VersionMatcher matcher = iter.next();
/* 125 */       if (!iter.hasNext() || matcher.isDynamic(askedMrid)) {
/* 126 */         return matcher.accept(askedMrid, foundMrid);
/*     */       }
/*     */     } 
/* 129 */     return false;
/*     */   }
/*     */   
/*     */   public boolean needModuleDescriptor(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) {
/* 133 */     Checks.checkNotNull(askedMrid, ""askedMrid"");
/* 134 */     Checks.checkNotNull(foundMrid, ""foundMrid"");
/* 135 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/* 136 */       VersionMatcher matcher = iter.next();
/* 137 */       if (!iter.hasNext() || matcher.isDynamic(askedMrid)) {
/* 138 */         return matcher.needModuleDescriptor(askedMrid, foundMrid);
/*     */       }
/*     */     } 
/* 141 */     return false;
/*     */   }
/*     */   
/*     */   public boolean accept(ModuleRevisionId askedMrid, ModuleDescriptor foundMD) {
/* 145 */     Checks.checkNotNull(askedMrid, ""askedMrid"");
/* 146 */     Checks.checkNotNull(foundMD, ""foundMD"");
/* 147 */     for (Iterator iter = this.matchers.iterator(); iter.hasNext(); ) {
/* 148 */       VersionMatcher matcher = iter.next();
/* 149 */       if (!iter.hasNext() || matcher.isDynamic(askedMrid)) {
/* 150 */         return matcher.accept(askedMrid, foundMD);
/*     */       }
/*     */     } 
/* 153 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\ChainVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.ExactVersionMatcher,"/*    */ package org.apache.ivy.plugins.version;
/*    */ 
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ExactVersionMatcher
/*    */   extends AbstractVersionMatcher
/*    */ {
/* 25 */   public ExactVersionMatcher() { super(""exact""); }
/*    */ 
/*    */ 
/*    */   
/* 29 */   public boolean isDynamic(ModuleRevisionId askedMrid) { return false; }
/*    */ 
/*    */ 
/*    */   
/* 33 */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) { return askedMrid.getRevision().equals(foundMrid.getRevision()); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\ExactVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.LatestVersionMatcher,"/*    */ package org.apache.ivy.plugins.version;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.core.module.status.StatusManager;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LatestVersionMatcher
/*    */   extends AbstractVersionMatcher
/*    */ {
/* 28 */   public LatestVersionMatcher() { super(""latest""); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public boolean isDynamic(ModuleRevisionId askedMrid) { return askedMrid.getRevision().startsWith(""latest.""); }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) { return true; }
/*    */ 
/*    */ 
/*    */   
/* 40 */   public boolean needModuleDescriptor(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) { return !""latest.integration"".equals(askedMrid.getRevision()); }
/*    */ 
/*    */   
/*    */   public boolean accept(ModuleRevisionId askedMrid, ModuleDescriptor foundMD) {
/* 44 */     String askedStatus = askedMrid.getRevision().substring(""latest."".length());
/* 45 */     return (StatusManager.getCurrent().getPriority(askedStatus) >= StatusManager.getCurrent().getPriority(foundMD.getStatus()));
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 55 */   public int compare(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid, Comparator staticComparator) { return needModuleDescriptor(askedMrid, foundMrid) ? 0 : 1; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\LatestVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.Match,"/*     */ package org.apache.ivy.plugins.version;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.matcher.Matcher;
/*     */ import org.apache.ivy.plugins.matcher.PatternMatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Match
/*     */ {
/*     */   private String revision;
/*     */   private String pattern;
/*     */   private String args;
/*     */   private String matcher;
/*     */   
/*  45 */   public String getArgs() { return this.args; }
/*     */ 
/*     */ 
/*     */   
/*  49 */   public void setArgs(String args) { this.args = args; }
/*     */ 
/*     */ 
/*     */   
/*  53 */   public String getMatcher() { return this.matcher; }
/*     */ 
/*     */ 
/*     */   
/*  57 */   public void setMatcher(String matcher) { this.matcher = matcher; }
/*     */ 
/*     */ 
/*     */   
/*  61 */   public String getPattern() { return this.pattern; }
/*     */ 
/*     */ 
/*     */   
/*  65 */   public void setPattern(String pattern) { this.pattern = pattern; }
/*     */ 
/*     */ 
/*     */   
/*  69 */   public String getRevision() { return this.revision; }
/*     */ 
/*     */ 
/*     */   
/*  73 */   public void setRevision(String revision) { this.revision = revision; }
/*     */ 
/*     */   
/*     */   public Matcher getPatternMatcher(ModuleRevisionId askedMrid) {
/*  77 */     String revision = askedMrid.getRevision();
/*     */     
/*  79 */     String[] args = split(getArgs());
/*  80 */     String[] argValues = getRevisionArgs(revision);
/*     */     
/*  82 */     if (args.length != argValues.length) {
/*  83 */       return new NoMatchMatcher();
/*     */     }
/*     */     
/*  86 */     Map variables = new HashMap();
/*  87 */     for (int i = 0; i < args.length; i++) {
/*  88 */       variables.put(args[i], argValues[i]);
/*     */     }
/*     */     
/*  91 */     String pattern = getPattern();
/*  92 */     pattern = IvyPatternHelper.substituteVariables(pattern, variables);
/*     */     
/*  94 */     PatternMatcher pMatcher = IvyContext.getContext().getSettings().getMatcher(this.matcher);
/*  95 */     return pMatcher.getMatcher(pattern);
/*     */   }
/*     */   
/*     */   private String[] getRevisionArgs(String revision) {
/*  99 */     int bracketStartIndex = revision.indexOf('(');
/* 100 */     if (bracketStartIndex == -1) {
/* 101 */       return new String[0];
/*     */     }
/*     */     
/* 104 */     int bracketEndIndex = revision.indexOf(')');
/* 105 */     if (bracketEndIndex <= bracketStartIndex + 1) {
/* 106 */       return new String[0];
/*     */     }
/*     */     
/* 109 */     String args = revision.substring(bracketStartIndex + 1, bracketEndIndex);
/* 110 */     return split(args);
/*     */   }
/*     */   
/*     */   private static String[] split(String string) {
/* 114 */     if (string == null) {
/* 115 */       return new String[0];
/*     */     }
/*     */     
/* 118 */     StringTokenizer tokenizer = new StringTokenizer(string, "", "");
/* 119 */     List tokens = new ArrayList();
/* 120 */     while (tokenizer.hasMoreTokens()) {
/* 121 */       tokens.add(tokenizer.nextToken());
/*     */     }
/*     */     
/* 124 */     return tokens.toArray(new String[tokens.size()]);
/*     */   }
/*     */   
/*     */   private static class NoMatchMatcher
/*     */     implements Matcher {
/* 129 */     public boolean isExact() { return false; }
/*     */     
/*     */     private NoMatchMatcher() {}
/*     */     
/* 133 */     public boolean matches(String str) { return false; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\Match.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.PatternVersionMatcher,"/*    */ package org.apache.ivy.plugins.version;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.HashMap;
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.plugins.matcher.Matcher;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PatternVersionMatcher
/*    */   extends AbstractVersionMatcher
/*    */ {
/* 34 */   private List matches = new ArrayList();
/*    */   
/* 36 */   private Map revisionMatches = new HashMap();
/*    */   
/*    */   private boolean init = false;
/*    */ 
/*    */   
/* 41 */   public void addMatch(Match match) { this.matches.add(match); }
/*    */ 
/*    */   
/*    */   private void init() {
/* 45 */     if (!this.init) {
/* 46 */       for (Iterator it = this.matches.iterator(); it.hasNext(); ) {
/* 47 */         Match match = it.next();
/* 48 */         List revMatches = (List)this.revisionMatches.get(match.getRevision());
/* 49 */         if (revMatches == null) {
/* 50 */           revMatches = new ArrayList();
/* 51 */           this.revisionMatches.put(match.getRevision(), revMatches);
/*    */         } 
/* 53 */         revMatches.add(match);
/*    */       } 
/* 55 */       this.init = true;
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) {
/* 63 */     init();
/* 64 */     boolean accept = false;
/*    */     
/* 66 */     String revision = askedMrid.getRevision();
/* 67 */     int bracketIndex = revision.indexOf('(');
/* 68 */     if (bracketIndex > 0) {
/* 69 */       revision = revision.substring(0, bracketIndex);
/*    */     }
/*    */     
/* 72 */     List revMatches = (List)this.revisionMatches.get(revision);
/*    */     
/* 74 */     if (revMatches != null) {
/* 75 */       Iterator it = revMatches.iterator();
/* 76 */       while (!accept && it.hasNext()) {
/* 77 */         Match match = it.next();
/* 78 */         Matcher matcher = match.getPatternMatcher(askedMrid);
/* 79 */         accept = matcher.matches(foundMrid.getRevision());
/*    */       } 
/*    */     } 
/*    */     
/* 83 */     return accept;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean isDynamic(ModuleRevisionId askedMrid) {
/* 90 */     init();
/* 91 */     String revision = askedMrid.getRevision();
/* 92 */     int bracketIndex = revision.indexOf('(');
/* 93 */     if (bracketIndex > 0) {
/* 94 */       revision = revision.substring(0, bracketIndex);
/*    */     }
/* 96 */     return this.revisionMatches.containsKey(revision);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\PatternVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.SubVersionMatcher,"/*    */ package org.apache.ivy.plugins.version;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SubVersionMatcher
/*    */   extends AbstractVersionMatcher
/*    */ {
/* 26 */   public SubVersionMatcher() { super(""sub-version""); }
/*    */ 
/*    */ 
/*    */   
/* 30 */   public boolean isDynamic(ModuleRevisionId askedMrid) { return askedMrid.getRevision().endsWith(""+""); }
/*    */ 
/*    */   
/*    */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) {
/* 34 */     String prefix = askedMrid.getRevision().substring(0, askedMrid.getRevision().length() - 1);
/* 35 */     return foundMrid.getRevision().startsWith(prefix);
/*    */   }
/*    */ 
/*    */   
/*    */   public int compare(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid, Comparator staticComparator) {
/* 40 */     if (foundMrid.getRevision().startsWith(askedMrid.getRevision().substring(0, askedMrid.getRevision().length() - 1)))
/*    */     {
/* 42 */       return 1;
/*    */     }
/* 44 */     return staticComparator.compare(askedMrid, foundMrid);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\SubVersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.VersionMatcher,"package org.apache.ivy.plugins.version;
import java.util.Comparator;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.core.module.id.ModuleRevisionId;
public interface VersionMatcher {
  boolean isDynamic(ModuleRevisionId paramModuleRevisionId);
  boolean accept(ModuleRevisionId paramModuleRevisionId1, ModuleRevisionId paramModuleRevisionId2);
  boolean needModuleDescriptor(ModuleRevisionId paramModuleRevisionId1, ModuleRevisionId paramModuleRevisionId2);
  boolean accept(ModuleRevisionId paramModuleRevisionId, ModuleDescriptor paramModuleDescriptor);
  int compare(ModuleRevisionId paramModuleRevisionId1, ModuleRevisionId paramModuleRevisionId2, Comparator paramComparator);
  String getName();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\VersionMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.plugins.version.VersionRangeMatcher,"/*     */ package org.apache.ivy.plugins.version;
/*     */ 
/*     */ import java.util.Comparator;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*     */ import org.apache.ivy.plugins.latest.ArtifactInfo;
/*     */ import org.apache.ivy.plugins.latest.LatestStrategy;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class VersionRangeMatcher
/*     */   extends AbstractVersionMatcher
/*     */ {
/*     */   private static final String OPEN_INC = ""["";
/*     */   private static final String OPEN_EXC = ""]"";
/*     */   private static final String OPEN_EXC_MAVEN = ""("";
/*     */   private static final String CLOSE_INC = ""]"";
/*     */   private static final String CLOSE_EXC = ""["";
/*     */   private static final String CLOSE_EXC_MAVEN = "")"";
/*     */   private static final String LOWER_INFINITE = ""("";
/*     */   private static final String UPPER_INFINITE = "")"";
/*     */   private static final String SEPARATOR = "","";
/*     */   private static final String OPEN_INC_PATTERN = ""\\["";
/*     */   private static final String OPEN_EXC_PATTERN = ""\\]\\("";
/*     */   private static final String CLOSE_INC_PATTERN = ""\\]"";
/*     */   private static final String CLOSE_EXC_PATTERN = ""\\[\\)"";
/*     */   private static final String LI_PATTERN = ""\\("";
/*     */   private static final String UI_PATTERN = ""\\)"";
/*     */   private static final String SEP_PATTERN = ""\\s*\\,\\s*"";
/*     */   private static final String OPEN_PATTERN = ""[\\[\\]\\(]"";
/*     */   private static final String CLOSE_PATTERN = ""[\\]\\[\\)]"";
/*     */   private static final String ANY_NON_SPECIAL_PATTERN = ""[^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]"";
/*     */   private static final String FINITE_PATTERN = ""[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]"";
/*     */   private static final String LOWER_INFINITE_PATTERN = ""\\(\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]"";
/*     */   private static final String UPPER_INFINITE_PATTERN = ""[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*\\)"";
/*  90 */   private static final Pattern FINITE_RANGE = Pattern.compile(""[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]"");
/*     */   
/*  92 */   private static final Pattern LOWER_INFINITE_RANGE = Pattern.compile(""\\(\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]"");
/*     */   
/*  94 */   private static final Pattern UPPER_INFINITE_RANGE = Pattern.compile(""[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*\\)"");
/*     */   
/*  96 */   private static final Pattern ALL_RANGE = Pattern.compile(""[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]|\\(\\s*\\,\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*[\\]\\[\\)]|[\\[\\]\\(]\\s*([^\\s,\\[\\]\\(\\]\\[\\)\\(\\)]+)\\s*\\,\\s*\\)"");
/*     */   
/*     */   private final class MRIDArtifactInfo
/*     */     implements ArtifactInfo {
/*     */     private ModuleRevisionId mrid;
/*     */     private final VersionRangeMatcher this$0;
/*     */     
/* 103 */     public MRIDArtifactInfo(ModuleRevisionId id) { this.mrid = id; }
/*     */ 
/*     */ 
/*     */     
/* 107 */     public long getLastModified() { return 0L; }
/*     */ 
/*     */ 
/*     */     
/* 111 */     public String getRevision() { return this.mrid.getRevision(); }
/*     */   }
/*     */ 
/*     */   
/* 115 */   private final Comparator comparator = new Comparator() {
/*     */       public int compare(Object o1, Object o2) {
/* 117 */         if (o1.equals(o2)) {
/* 118 */           return 0;
/*     */         }
/* 120 */         ArtifactInfo art1 = new VersionRangeMatcher.MRIDArtifactInfo((ModuleRevisionId)o1);
/* 121 */         ArtifactInfo art2 = new VersionRangeMatcher.MRIDArtifactInfo((ModuleRevisionId)o2);
/* 122 */         ArtifactInfo art = VersionRangeMatcher.this.getLatestStrategy().findLatest(new ArtifactInfo[] { art1, art2 }, null);
/*     */         
/* 124 */         return (art == art1) ? -1 : 1;
/*     */       }
/*     */       
/*     */       private final VersionRangeMatcher this$0;
/*     */     };
/*     */   
/* 130 */   private String latestStrategyName = ""default"";
/*     */   private LatestStrategy latestStrategy;
/*     */   
/* 133 */   public VersionRangeMatcher() { super(""version-range""); }
/*     */ 
/*     */ 
/*     */   
/* 137 */   public VersionRangeMatcher(String name) { super(name); }
/*     */ 
/*     */   
/*     */   public VersionRangeMatcher(String name, LatestStrategy strategy) {
/* 141 */     super(name);
/* 142 */     this.latestStrategy = strategy;
/*     */   }
/*     */   
/*     */   public boolean isDynamic(ModuleRevisionId askedMrid) {
/* 146 */     String revision = askedMrid.getRevision();
/* 147 */     return ALL_RANGE.matcher(revision).matches();
/*     */   }
/*     */   
/*     */   public boolean accept(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid) {
/* 151 */     String revision = askedMrid.getRevision();
/*     */     
/* 153 */     Matcher m = FINITE_RANGE.matcher(revision);
/* 154 */     if (m.matches()) {
/* 155 */       String lower = m.group(1);
/* 156 */       String upper = m.group(2);
/* 157 */       return (isUpper(askedMrid, lower, foundMrid, revision.startsWith(""["")) && isLower(askedMrid, upper, foundMrid, revision.endsWith(""]"")));
/*     */     } 
/*     */     
/* 160 */     m = LOWER_INFINITE_RANGE.matcher(revision);
/* 161 */     if (m.matches()) {
/* 162 */       String upper = m.group(1);
/* 163 */       return isLower(askedMrid, upper, foundMrid, revision.endsWith(""]""));
/*     */     } 
/* 165 */     m = UPPER_INFINITE_RANGE.matcher(revision);
/* 166 */     if (m.matches()) {
/* 167 */       String lower = m.group(1);
/* 168 */       return isUpper(askedMrid, lower, foundMrid, revision.startsWith(""[""));
/*     */     } 
/* 170 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean isLower(ModuleRevisionId askedMrid, String revision, ModuleRevisionId foundMrid, boolean inclusive) {
/* 175 */     ModuleRevisionId mRevId = ModuleRevisionId.newInstance(askedMrid, revision);
/* 176 */     int result = this.comparator.compare(mRevId, foundMrid);
/* 177 */     return (result <= (inclusive ? 0 : -1));
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean isUpper(ModuleRevisionId askedMrid, String revision, ModuleRevisionId foundMrid, boolean inclusive) {
/* 182 */     ModuleRevisionId mRevId = ModuleRevisionId.newInstance(askedMrid, revision);
/* 183 */     int result = this.comparator.compare(mRevId, foundMrid);
/* 184 */     return (result >= (inclusive ? 0 : 1));
/*     */   }
/*     */ 
/*     */   
/*     */   public int compare(ModuleRevisionId askedMrid, ModuleRevisionId foundMrid, Comparator staticComparator) {
/* 189 */     String upper, revision = askedMrid.getRevision();
/*     */     
/* 191 */     Matcher m = UPPER_INFINITE_RANGE.matcher(revision);
/* 192 */     if (m.matches())
/*     */     {
/* 194 */       return 1;
/*     */     }
/*     */     
/* 197 */     m = FINITE_RANGE.matcher(revision);
/* 198 */     if (m.matches()) {
/* 199 */       upper = m.group(2);
/*     */     } else {
/* 201 */       m = LOWER_INFINITE_RANGE.matcher(revision);
/* 202 */       if (m.matches()) {
/* 203 */         upper = m.group(1);
/*     */       } else {
/* 205 */         throw new IllegalArgumentException(""impossible to compare: askedMrid is not a dynamic revision: "" + askedMrid);
/*     */       } 
/*     */     } 
/*     */     
/* 209 */     int c = staticComparator.compare(ModuleRevisionId.newInstance(askedMrid, upper), foundMrid);
/*     */ 
/*     */ 
/*     */     
/* 213 */     return (c == 0) ? -1 : c;
/*     */   }
/*     */   
/*     */   public LatestStrategy getLatestStrategy() {
/* 217 */     if (this.latestStrategy == null) {
/* 218 */       if (getSettings() == null) {
/* 219 */         throw new IllegalStateException(""no ivy instance nor latest strategy configured in version range matcher "" + this);
/*     */       }
/*     */ 
/*     */       
/* 223 */       if (this.latestStrategyName == null) {
/* 224 */         throw new IllegalStateException(""null latest strategy defined in version range matcher "" + this);
/*     */       }
/*     */       
/* 227 */       this.latestStrategy = getSettings().getLatestStrategy(this.latestStrategyName);
/* 228 */       if (this.latestStrategy == null) {
/* 229 */         throw new IllegalStateException(""unknown latest strategy '"" + this.latestStrategyName + ""' configured in version range matcher "" + this);
/*     */       }
/*     */     } 
/*     */     
/* 233 */     return this.latestStrategy;
/*     */   }
/*     */ 
/*     */   
/* 237 */   public void setLatestStrategy(LatestStrategy latestStrategy) { this.latestStrategy = latestStrategy; }
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setLatest(String latestStrategyName) { this.latestStrategyName = latestStrategyName; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\plugins\version\VersionRangeMatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.tools.analyser.DependencyAnalyser,"package org.apache.ivy.tools.analyser;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
public interface DependencyAnalyser {
  ModuleDescriptor[] analyze(JarModule[] paramArrayOfJarModule);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\tools\analyser\DependencyAnalyser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.tools.analyser.JarJarDependencyAnalyser,"/*    */ package org.apache.ivy.tools.analyser;
/*    */ 
/*    */ import java.io.BufferedReader;
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStreamReader;
/*    */ import java.util.Date;
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor;
/*    */ import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
/*    */ import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JarJarDependencyAnalyser
/*    */   implements DependencyAnalyser
/*    */ {
/*    */   private File jarjarjarLocation;
/*    */   
/* 37 */   public JarJarDependencyAnalyser(File jarjarjarLocation) { this.jarjarjarLocation = jarjarjarLocation; }
/*    */ 
/*    */ 
/*    */   
/*    */   public ModuleDescriptor[] analyze(JarModule[] modules) {
/* 42 */     StringBuffer jarjarCmd = (new StringBuffer(""java -jar \"""")).append(this.jarjarjarLocation.getAbsolutePath()).append(""\"" --find --level=jar "");
/*    */     
/* 44 */     Map jarModulesMap = new HashMap();
/* 45 */     Map mds = new HashMap();
/*    */     
/* 47 */     for (int i = 0; i < modules.length; i++) {
/* 48 */       jarModulesMap.put(modules[i].getJar().getAbsolutePath(), modules[i]);
/* 49 */       DefaultModuleDescriptor md = DefaultModuleDescriptor.newBasicInstance(modules[i].getMrid(), new Date(modules[i].getJar().lastModified()));
/*    */       
/* 51 */       mds.put(modules[i].getMrid(), md);
/* 52 */       jarjarCmd.append(""\"""").append(modules[i].getJar().getAbsolutePath()).append(""\"""");
/* 53 */       if (i + 1 < modules.length) {
/* 54 */         jarjarCmd.append(File.pathSeparator);
/*    */       }
/*    */     } 
/*    */     
/* 58 */     Message.verbose(""jarjar command: "" + jarjarCmd);
/*    */     
/*    */     try {
/* 61 */       Process p = Runtime.getRuntime().exec(jarjarCmd.toString());
/* 62 */       BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
/*    */       String line;
/* 64 */       while ((line = r.readLine()) != null) {
/* 65 */         String[] deps = line.split("" -> "");
/* 66 */         JarModule module = (JarModule)jarModulesMap.get(deps[0]);
/* 67 */         JarModule dependency = (JarModule)jarModulesMap.get(deps[1]);
/*    */         
/* 69 */         if (module.getMrid().getModuleId().equals(dependency.getMrid().getModuleId())) {
/*    */           continue;
/*    */         }
/* 72 */         Message.verbose(module.getMrid() + "" depends on "" + dependency.getMrid());
/*    */         
/* 74 */         DefaultModuleDescriptor md = (DefaultModuleDescriptor)mds.get(module.getMrid());
/*    */         
/* 76 */         DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor((ModuleDescriptor)md, dependency.getMrid(), false, false, true);
/*    */         
/* 78 */         dd.addDependencyConfiguration(""default"", ""default"");
/*    */         
/* 80 */         md.addDependency((DependencyDescriptor)dd);
/*    */       } 
/* 82 */     } catch (IOException e) {
/*    */       
/* 84 */       e.printStackTrace();
/*    */     } 
/* 86 */     return (ModuleDescriptor[])mds.values().toArray((Object[])new ModuleDescriptor[mds.values().size()]);
/*    */   }
/*    */   
/*    */   public static void main(String[] args) {
/* 90 */     JarJarDependencyAnalyser a = new JarJarDependencyAnalyser(new File(""D:/temp/test2/jarjar-0.7.jar""));
/*    */     
/* 92 */     a.analyze((new JarModuleFinder(""D:/temp/test2/ivyrep/[organisation]/[module]/[revision]/[artifact].[ext]"")).findJarModules());
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\tools\analyser\JarJarDependencyAnalyser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.tools.analyser.JarModule,"/*    */ package org.apache.ivy.tools.analyser;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JarModule
/*    */ {
/*    */   private ModuleRevisionId mrid;
/*    */   private File jar;
/*    */   
/*    */   public JarModule(ModuleRevisionId mrid, File jar) {
/* 30 */     this.mrid = mrid;
/* 31 */     this.jar = jar;
/*    */   }
/*    */ 
/*    */   
/* 35 */   public File getJar() { return this.jar; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public ModuleRevisionId getMrid() { return this.mrid; }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public String toString() { return this.jar + "" "" + this.mrid; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\tools\analyser\JarModule.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.tools.analyser.JarModuleFinder,"/*    */ package org.apache.ivy.tools.analyser;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.util.ArrayList;
/*    */ import java.util.List;
/*    */ import org.apache.ivy.core.IvyPatternHelper;
/*    */ import org.apache.ivy.core.module.id.ModuleRevisionId;
/*    */ import org.apache.ivy.plugins.resolver.util.FileURLLister;
/*    */ import org.apache.ivy.plugins.resolver.util.ResolverHelper;
/*    */ import org.apache.ivy.plugins.resolver.util.URLLister;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JarModuleFinder
/*    */ {
/*    */   private String pattern;
/*    */   private String filePattern;
/*    */   
/*    */   public JarModuleFinder(String pattern) {
/* 36 */     this.pattern = ""file:///"" + pattern;
/* 37 */     this.filePattern = pattern;
/*    */   }
/*    */   
/*    */   public JarModule[] findJarModules() {
/* 41 */     List ret = new ArrayList();
/* 42 */     FileURLLister fileURLLister = new FileURLLister();
/*    */     try {
/* 44 */       String[] orgs = ResolverHelper.listTokenValues((URLLister)fileURLLister, this.pattern, ""organisation"");
/* 45 */       for (int i = 0; i < orgs.length; i++) {
/* 46 */         String orgPattern = IvyPatternHelper.substituteToken(this.pattern, ""organisation"", orgs[i]);
/*    */         
/* 48 */         String[] modules = ResolverHelper.listTokenValues((URLLister)fileURLLister, orgPattern, ""module"");
/* 49 */         for (int j = 0; j < modules.length; j++) {
/* 50 */           String modPattern = IvyPatternHelper.substituteToken(orgPattern, ""module"", modules[j]);
/*    */           
/* 52 */           String[] revs = ResolverHelper.listTokenValues((URLLister)fileURLLister, modPattern, ""revision"");
/* 53 */           for (int k = 0; k < revs.length; k++) {
/* 54 */             File jar = new File(IvyPatternHelper.substitute(this.filePattern, orgs[i], modules[j], revs[k], modules[j], ""jar"", ""jar""));
/*    */             
/* 56 */             if (jar.exists()) {
/* 57 */               ret.add(new JarModule(ModuleRevisionId.newInstance(orgs[i], modules[j], revs[k]), jar));
/*    */             }
/*    */           }
/*    */         
/*    */         }
/*    */       
/*    */       } 
/* 64 */     } catch (Exception e) {}
/*    */ 
/*    */     
/* 67 */     return ret.toArray(new JarModule[ret.size()]);
/*    */   }
/*    */   
/*    */   public static void main(String[] args) {
/* 71 */     JarModule[] mods = (new JarModuleFinder(""D:/temp/test2/ivyrep/[organisation]/[module]/[revision]/[artifact].[ext]"")).findJarModules();
/*    */ 
/*    */     
/* 74 */     for (int i = 0; i < mods.length; i++)
/* 75 */       System.out.println(mods[i]); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\tools\analyser\JarModuleFinder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.tools.analyser.RepositoryAnalyser,"/*    */ package org.apache.ivy.tools.analyser;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import org.apache.ivy.core.IvyPatternHelper;
/*    */ import org.apache.ivy.core.module.descriptor.DefaultArtifact;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RepositoryAnalyser
/*    */ {
/*    */   public void analyse(String pattern, DependencyAnalyser depAnalyser) {
/* 31 */     JarModuleFinder finder = new JarModuleFinder(pattern);
/* 32 */     ModuleDescriptor[] mds = depAnalyser.analyze(finder.findJarModules());
/* 33 */     Message.info(""found "" + mds.length + "" modules"");
/* 34 */     for (int i = 0; i < mds.length; i++) {
/* 35 */       File ivyFile = new File(IvyPatternHelper.substitute(pattern, DefaultArtifact.newIvyArtifact(mds[i].getModuleRevisionId(), mds[i].getPublicationDate())));
/*    */       
/*    */       try {
/* 38 */         Message.info(""generating "" + ivyFile);
/* 39 */         XmlModuleDescriptorWriter.write(mds[i], ivyFile);
/* 40 */       } catch (IOException e) {
/*    */         
/* 42 */         e.printStackTrace();
/*    */       } 
/*    */     } 
/*    */   }
/*    */   
/*    */   public static void main(String[] args) {
/* 48 */     if (args.length != 2) {
/* 49 */       System.out.println(""usage: ivyanalyser path/to/jarjar.jar absolute-ivy-repository-pattern"");
/*    */       
/*    */       return;
/*    */     } 
/* 53 */     String jarjarLocation = args[0];
/* 54 */     String pattern = args[1];
/*    */     
/* 56 */     JarJarDependencyAnalyser a = new JarJarDependencyAnalyser(new File(jarjarLocation));
/* 57 */     (new RepositoryAnalyser()).analyse(pattern, a);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\ivy\tools\analyser\RepositoryAnalyser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.AbstractMessageLogger,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractMessageLogger
/*     */   implements MessageLogger
/*     */ {
/*  27 */   private List problems = new ArrayList();
/*     */   
/*  29 */   private List warns = new ArrayList();
/*     */   
/*  31 */   private List errors = new ArrayList();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean showProgress = true;
/*     */ 
/*     */ 
/*     */   
/*  39 */   public void debug(String msg) { log(msg, 4); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  46 */   public void verbose(String msg) { log(msg, 3); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   public void deprecated(String msg) { log(""DEPRECATED: "" + msg, 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  61 */   public void info(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  68 */   public void rawinfo(String msg) { rawlog(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void warn(String msg) {
/*  75 */     log(""WARN: "" + msg, 3);
/*  76 */     this.problems.add(""WARN:  "" + msg);
/*  77 */     getWarns().add(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void error(String msg) {
/*  86 */     log(""ERROR: "" + msg, 3);
/*  87 */     this.problems.add(""\tERROR: "" + msg);
/*  88 */     getErrors().add(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public List getProblems() { return this.problems; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void sumupProblems() {
/* 102 */     MessageLoggerHelper.sumupProblems(this);
/* 103 */     clearProblems();
/*     */   }
/*     */   
/*     */   public void clearProblems() {
/* 107 */     this.problems.clear();
/* 108 */     this.warns.clear();
/* 109 */     this.errors.clear();
/*     */   }
/*     */ 
/*     */   
/* 113 */   public List getErrors() { return this.errors; }
/*     */ 
/*     */ 
/*     */   
/* 117 */   public List getWarns() { return this.warns; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void progress() {
/* 124 */     if (this.showProgress) {
/* 125 */       doProgress();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void endProgress() { endProgress(""""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void endProgress(String msg) {
/* 141 */     if (this.showProgress) {
/* 142 */       doEndProgress(msg);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public boolean isShowProgress() { return this.showProgress; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setShowProgress(boolean progress) { this.showProgress = progress; }
/*     */   
/*     */   protected abstract void doProgress();
/*     */   
/*     */   protected abstract void doEndProgress(String paramString);
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\AbstractMessageLogger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.Checks,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class Checks
/*    */ {
/*    */   public static void checkNotNull(Object o, String objectName) {
/* 40 */     if (o == null) {
/* 41 */       throw new IllegalArgumentException(objectName + "" must not be null"");
/*    */     }
/*    */   }
/*    */   
/*    */   public static File checkAbsolute(File f, String fileName) {
/* 46 */     checkNotNull(f, fileName);
/* 47 */     if (!f.isAbsolute()) {
/* 48 */       throw new IllegalArgumentException(fileName + "" must be absolute: "" + f.getPath());
/*    */     }
/* 50 */     return f;
/*    */   }
/*    */   
/*    */   public static File checkAbsolute(String path, String fileName) {
/* 54 */     checkNotNull(path, fileName);
/* 55 */     File f = new File(path);
/* 56 */     if (!f.isAbsolute()) {
/* 57 */       throw new IllegalArgumentException(fileName + "" must be absolute: "" + path);
/*    */     }
/* 59 */     return f;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\Checks.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.ChecksumHelper,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.util.HashMap;
/*     */ import java.util.Locale;
/*     */ import java.util.Map;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ChecksumHelper
/*     */ {
/*     */   private static final int BUFFER_SIZE = 2048;
/*  35 */   private static Map algorithms = new HashMap();
/*     */   static  {
/*  37 */     algorithms.put(""md5"", ""MD5"");
/*  38 */     algorithms.put(""sha1"", ""SHA-1"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 107 */     CHARS = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final char[] CHARS;
/*     */ 
/*     */ 
/*     */   
/*     */   public static String byteArrayToHexString(byte[] in) {
/* 118 */     byte ch = 0;
/*     */     
/* 120 */     if (in == null || in.length <= 0) {
/* 121 */       return null;
/*     */     }
/*     */     
/* 124 */     StringBuffer out = new StringBuffer(in.length * 2);
/*     */ 
/*     */     
/* 127 */     for (int i = 0; i < in.length; i++) {
/* 128 */       ch = (byte)(in[i] & 0xF0);
/* 129 */       ch = (byte)(ch >>> 4);
/* 130 */       ch = (byte)(ch & 0xF);
/*     */       
/* 132 */       out.append(CHARS[ch]);
/* 133 */       ch = (byte)(in[i] & 0xF);
/* 134 */       out.append(CHARS[ch]);
/*     */     } 
/*     */ 
/*     */     
/* 138 */     return out.toString();
/*     */   }
/*     */   
/*     */   public static void check(File dest, File checksumFile, String algorithm) throws IOException {
/*     */     String expected, csFileContent = FileUtil.readEntirely(new BufferedReader(new FileReader(checksumFile))).trim().toLowerCase(Locale.US);
/*     */     int spaceIndex = csFileContent.indexOf(' ');
/*     */     if (spaceIndex != -1) {
/*     */       expected = csFileContent.substring(0, spaceIndex);
/*     */     } else {
/*     */       expected = csFileContent;
/*     */     } 
/*     */     String computed = computeAsString(dest, algorithm).trim().toLowerCase(Locale.US);
/*     */     if (!expected.equals(computed))
/*     */       throw new IOException(""invalid "" + algorithm + "": expected="" + expected + "" computed="" + computed); 
/*     */   }
/*     */   
/*     */   public static String computeAsString(File f, String algorithm) throws IOException { return byteArrayToHexString(compute(f, algorithm)); }
/*     */   
/*     */   private static byte[] compute(File f, String algorithm) throws IOException {
/*     */     InputStream is = new FileInputStream(f);
/*     */     try {
/*     */       MessageDigest md = getMessageDigest(algorithm);
/*     */       md.reset();
/*     */       byte[] buf = new byte[2048];
/*     */       int len = 0;
/*     */       while ((len = is.read(buf)) != -1)
/*     */         md.update(buf, 0, len); 
/*     */       return md.digest();
/*     */     } finally {
/*     */       is.close();
/*     */     } 
/*     */   }
/*     */   
/*     */   private static MessageDigest getMessageDigest(String algorithm) {
/*     */     String mdAlgorithm = (String)algorithms.get(algorithm);
/*     */     if (mdAlgorithm == null)
/*     */       throw new IllegalArgumentException(""unknown algorithm "" + algorithm); 
/*     */     try {
/*     */       return MessageDigest.getInstance(mdAlgorithm);
/*     */     } catch (NoSuchAlgorithmException e) {
/*     */       throw new IllegalArgumentException(""unknown algorithm "" + algorithm);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\ChecksumHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.ConfigurationUtils,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.util.Arrays;
/*    */ import java.util.Iterator;
/*    */ import java.util.LinkedHashSet;
/*    */ import java.util.Set;
/*    */ import org.apache.ivy.core.module.descriptor.Configuration;
/*    */ import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ConfigurationUtils
/*    */ {
/*    */   public static String[] replaceWildcards(String[] confs, ModuleDescriptor md) {
/* 60 */     if (confs == null) {
/* 61 */       return md.getConfigurationsNames();
/*    */     }
/*    */     
/* 64 */     Set result = new LinkedHashSet();
/* 65 */     Set excluded = new LinkedHashSet();
/* 66 */     for (int i = 0; i < confs.length; i++) {
/* 67 */       if (""*"".equals(confs[i])) {
/* 68 */         result.addAll(Arrays.asList(md.getConfigurationsNames()));
/* 69 */       } else if (""*(public)"".equals(confs[i])) {
/* 70 */         Configuration[] all = md.getConfigurations();
/* 71 */         for (int j = 0; j < all.length; j++) {
/* 72 */           if (all[j].getVisibility().equals(Configuration.Visibility.PUBLIC)) {
/* 73 */             result.add(all[j].getName());
/*    */           }
/*    */         } 
/* 76 */       } else if (""*(private)"".equals(confs[i])) {
/* 77 */         Configuration[] all = md.getConfigurations();
/* 78 */         for (int j = 0; j < all.length; j++) {
/* 79 */           if (all[j].getVisibility().equals(Configuration.Visibility.PRIVATE)) {
/* 80 */             result.add(all[j].getName());
/*    */           }
/*    */         } 
/* 83 */       } else if (confs[i].startsWith(""!"")) {
/* 84 */         excluded.add(confs[i].substring(1));
/*    */       } else {
/* 86 */         result.add(confs[i]);
/*    */       } 
/*    */     } 
/* 89 */     for (Iterator iter = excluded.iterator(); iter.hasNext();) {
/* 90 */       result.remove(iter.next());
/*    */     }
/*    */     
/* 93 */     return result.toArray(new String[result.size()]);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\ConfigurationUtils.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.Configurator,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import org.apache.ivy.core.IvyPatternHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Configurator
/*     */ {
/*     */   public static class Macro
/*     */   {
/*     */     private Configurator.MacroDef macrodef;
/*  62 */     private Map attValues = new HashMap();
/*     */     
/*  64 */     private Map macroRecords = new HashMap();
/*     */ 
/*     */     
/*  67 */     public Macro(Configurator.MacroDef def) { this.macrodef = def; }
/*     */ 
/*     */     
/*     */     public void defineAttribute(String attributeName, String value) {
/*  71 */       if (this.macrodef.getAttribute(attributeName) == null) {
/*  72 */         throw new IllegalArgumentException(""undeclared attribute "" + attributeName + "" on macro "" + this.macrodef.getName());
/*     */       }
/*     */       
/*  75 */       this.attValues.put(attributeName, value);
/*     */     }
/*     */     
/*     */     public Configurator.MacroRecord recordCreateChild(String name) {
/*  79 */       Configurator.MacroRecord macroRecord = new Configurator.MacroRecord(name);
/*  80 */       List records = (List)this.macroRecords.get(name);
/*  81 */       if (records == null) {
/*  82 */         records = new ArrayList();
/*  83 */         this.macroRecords.put(name, records);
/*     */       } 
/*  85 */       records.add(macroRecord);
/*  86 */       return macroRecord;
/*     */     }
/*     */ 
/*     */     
/*  90 */     public Object play(Configurator conf) { return this.macrodef.play(conf, this.attValues, this.macroRecords); }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Attribute
/*     */   {
/*     */     private String name;
/*     */     
/*     */     private String defaultValue;
/*     */ 
/*     */     
/* 101 */     public String getDefault() { return this.defaultValue; }
/*     */ 
/*     */ 
/*     */     
/* 105 */     public void setDefault(String default1) { this.defaultValue = default1; }
/*     */ 
/*     */ 
/*     */     
/* 109 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 113 */     public void setName(String name) { this.name = name; }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Element
/*     */   {
/*     */     private String name;
/*     */     
/*     */     private boolean optional = false;
/*     */     
/* 123 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 127 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 131 */     public boolean isOptional() { return this.optional; }
/*     */ 
/*     */ 
/*     */     
/* 135 */     public void setOptional(boolean optional) { this.optional = optional; }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class MacroRecord
/*     */   {
/*     */     private String name;
/* 142 */     private Map attributes = new LinkedHashMap();
/*     */     
/* 144 */     private List children = new ArrayList();
/*     */     
/*     */     private Object object;
/*     */ 
/*     */     
/* 149 */     public MacroRecord(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 153 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 157 */     public void recordAttribute(String name, String value) { this.attributes.put(name, value); }
/*     */ 
/*     */     
/*     */     public MacroRecord recordChild(String name) {
/* 161 */       MacroRecord child = new MacroRecord(name);
/* 162 */       this.children.add(child);
/* 163 */       return child;
/*     */     }
/*     */     
/*     */     public MacroRecord recordChild(String name, Object object) {
/* 167 */       MacroRecord child = recordChild(name);
/* 168 */       child.object = object;
/* 169 */       return child;
/*     */     }
/*     */ 
/*     */     
/* 173 */     public Map getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */     
/* 177 */     public List getChildren() { return this.children; }
/*     */ 
/*     */ 
/*     */     
/* 181 */     public Object getObject() { return this.object; }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class MacroDef
/*     */   {
/*     */     private String name;
/* 188 */     private Map attributes = new HashMap();
/*     */     
/* 190 */     private Map elements = new HashMap();
/*     */     
/*     */     private Configurator.MacroRecord macroRecord;
/*     */ 
/*     */     
/* 195 */     public MacroDef(String macroName) { this.name = macroName; }
/*     */ 
/*     */ 
/*     */     
/* 199 */     public Configurator.Attribute getAttribute(String attributeName) { return (Configurator.Attribute)this.attributes.get(attributeName); }
/*     */ 
/*     */     
/*     */     public Object play(Configurator conf, Map attValues, Map macroRecords) {
/* 203 */       for (Iterator iter = this.attributes.values().iterator(); iter.hasNext(); ) {
/* 204 */         Configurator.Attribute att = iter.next();
/* 205 */         String val = (String)attValues.get(att.getName());
/* 206 */         if (val == null) {
/* 207 */           if (att.getDefault() == null) {
/* 208 */             throw new IllegalArgumentException(""attribute "" + att.getName() + "" is required in "" + getName());
/*     */           }
/*     */           
/* 211 */           attValues.put(att.getName(), att.getDefault());
/*     */         } 
/*     */       } 
/*     */       
/* 215 */       return play(conf, this.macroRecord, attValues, macroRecords);
/*     */     }
/*     */ 
/*     */     
/*     */     private Object play(Configurator conf, Configurator.MacroRecord macroRecord, Map attValues, Map childrenRecords) {
/* 220 */       if (macroRecord.getObject() != null) {
/*     */         
/* 222 */         conf.addChild(macroRecord.getName(), macroRecord.getObject());
/* 223 */         conf.endCreateChild();
/* 224 */         return macroRecord.getObject();
/*     */       } 
/* 226 */       conf.startCreateChild(macroRecord.getName());
/* 227 */       Map attributes = macroRecord.getAttributes();
/* 228 */       for (Iterator iter = attributes.keySet().iterator(); iter.hasNext(); ) {
/* 229 */         String attName = iter.next();
/* 230 */         String attValue = replaceParam((String)attributes.get(attName), attValues);
/* 231 */         conf.setAttribute(attName, attValue);
/*     */       } 
/* 233 */       for (Iterator iter = macroRecord.getChildren().iterator(); iter.hasNext(); ) {
/* 234 */         Configurator.MacroRecord child = iter.next();
/* 235 */         Configurator.Element elt = (Configurator.Element)this.elements.get(child.getName());
/* 236 */         if (elt != null) {
/* 237 */           List elements = (List)childrenRecords.get(child.getName());
/* 238 */           if (elements != null) {
/* 239 */             for (Iterator iterator = elements.iterator(); iterator.hasNext(); ) {
/* 240 */               Configurator.MacroRecord element = iterator.next();
/* 241 */               for (Iterator it2 = element.getChildren().iterator(); it2.hasNext(); ) {
/* 242 */                 Configurator.MacroRecord r = it2.next();
/* 243 */                 play(conf, r, attValues, Collections.EMPTY_MAP);
/*     */               } 
/*     */             }  continue;
/* 246 */           }  if (!elt.isOptional()) {
/* 247 */             throw new IllegalArgumentException(""non optional element is not specified: "" + elt.getName() + "" in macro "" + getName());
/*     */           }
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 253 */         play(conf, child, attValues, childrenRecords);
/*     */       } 
/* 255 */       return conf.endCreateChild();
/*     */     }
/*     */ 
/*     */     
/* 259 */     private String replaceParam(String string, Map attValues) { return IvyPatternHelper.substituteParams(string, attValues); }
/*     */ 
/*     */ 
/*     */     
/* 263 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 267 */     public void addConfiguredAttribute(Configurator.Attribute att) { this.attributes.put(att.getName(), att); }
/*     */ 
/*     */ 
/*     */     
/* 271 */     public void addConfiguredElement(Configurator.Element elt) { this.elements.put(elt.getName(), elt); }
/*     */ 
/*     */ 
/*     */     
/* 275 */     public Configurator.Macro createMacro() { return new Configurator.Macro(this); }
/*     */ 
/*     */     
/*     */     public void addAttribute(String attName, String attDefaultValue) {
/* 279 */       Configurator.Attribute att = new Configurator.Attribute();
/* 280 */       att.setName(attName);
/* 281 */       att.setDefault(attDefaultValue);
/* 282 */       addConfiguredAttribute(att);
/*     */     }
/*     */     
/*     */     public void addElement(String elementName, boolean optional) {
/* 286 */       Configurator.Element elt = new Configurator.Element();
/* 287 */       elt.setName(elementName);
/* 288 */       elt.setOptional(optional);
/* 289 */       addConfiguredElement(elt);
/*     */     }
/*     */     
/*     */     public Configurator.MacroRecord recordCreateChild(String name) {
/* 293 */       this.macroRecord = new Configurator.MacroRecord(name);
/* 294 */       return this.macroRecord;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static class ObjectDescriptor
/*     */   {
/*     */     private Object obj;
/*     */     private String objName;
/* 303 */     private Map createMethods = new HashMap();
/*     */     
/* 305 */     private Map addMethods = new HashMap();
/*     */     
/* 307 */     private Map addConfiguredMethods = new HashMap();
/*     */     
/* 309 */     private Map setMethods = new HashMap();
/*     */     
/* 311 */     private Map typeAddMethods = new HashMap();
/*     */     
/* 313 */     private Map typeAddConfiguredMethods = new HashMap();
/*     */     
/*     */     public ObjectDescriptor(Object object, String objName) {
/* 316 */       this.obj = object;
/* 317 */       this.objName = objName;
/* 318 */       Method[] methods = object.getClass().getMethods();
/* 319 */       for (int i = 0; i < methods.length; i++) {
/* 320 */         Method m = methods[i];
/* 321 */         if (m.getName().startsWith(""create"") && (m.getParameterTypes()).length == 0 && !void.class.equals(m.getReturnType())) {
/*     */           
/* 323 */           String name = StringUtils.uncapitalize(m.getName().substring(""create"".length()));
/*     */           
/* 325 */           if (name.length() != 0)
/*     */           {
/*     */             
/* 328 */             addCreateMethod(name, m); } 
/* 329 */         } else if (m.getName().startsWith(""addConfigured"") && (m.getParameterTypes()).length == 1 && void.class.equals(m.getReturnType())) {
/*     */ 
/*     */           
/* 332 */           String name = StringUtils.uncapitalize(m.getName().substring(""addConfigured"".length()));
/*     */           
/* 334 */           if (name.length() == 0) {
/* 335 */             addAddConfiguredMethod(m);
/*     */           }
/* 337 */           addAddConfiguredMethod(name, m);
/* 338 */         } else if (m.getName().startsWith(""add"") && !m.getName().startsWith(""addConfigured"") && (m.getParameterTypes()).length == 1 && void.class.equals(m.getReturnType())) {
/*     */ 
/*     */ 
/*     */           
/* 342 */           String name = StringUtils.uncapitalize(m.getName().substring(""add"".length()));
/* 343 */           if (name.length() == 0) {
/* 344 */             addAddMethod(m);
/*     */           }
/* 346 */           addAddMethod(name, m);
/* 347 */         } else if (m.getName().startsWith(""set"") && (m.getParameterTypes()).length == 1 && void.class.equals(m.getReturnType())) {
/*     */           
/* 349 */           String name = StringUtils.uncapitalize(m.getName().substring(""set"".length()));
/* 350 */           if (name.length() != 0)
/*     */           {
/*     */             
/* 353 */             addSetMethod(name, m);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/* 359 */     public void addCreateMethod(String name, Method m) { this.createMethods.put(name, m); }
/*     */ 
/*     */ 
/*     */     
/* 363 */     public void addAddMethod(String name, Method m) { this.addMethods.put(name, m); }
/*     */ 
/*     */ 
/*     */     
/* 367 */     public void addAddConfiguredMethod(String name, Method m) { this.addConfiguredMethods.put(name, m); }
/*     */ 
/*     */ 
/*     */     
/* 371 */     private void addAddMethod(Method m) { this.typeAddMethods.put(m.getParameterTypes()[0], m); }
/*     */ 
/*     */ 
/*     */     
/* 375 */     private void addAddConfiguredMethod(Method m) { this.typeAddConfiguredMethods.put(m.getParameterTypes()[0], m); }
/*     */ 
/*     */     
/*     */     public void addSetMethod(String name, Method m) {
/* 379 */       Method current = (Method)this.setMethods.get(name);
/* 380 */       if (current != null && current.getParameterTypes()[0] == ((Configurator.class$java$lang$String == null) ? (Configurator.class$java$lang$String = Configurator.class$(""java.lang.String"")) : Configurator.class$java$lang$String)) {
/*     */         return;
/*     */       }
/*     */       
/* 384 */       this.setMethods.put(name, m);
/*     */     }
/*     */ 
/*     */     
/* 388 */     public Object getObject() { return this.obj; }
/*     */ 
/*     */ 
/*     */     
/* 392 */     public Method getCreateMethod(String name) { return (Method)this.createMethods.get(name); }
/*     */ 
/*     */ 
/*     */     
/* 396 */     public Method getAddMethod(String name) { return (Method)this.addMethods.get(name); }
/*     */ 
/*     */ 
/*     */     
/* 400 */     public Method getAddConfiguredMethod(String name) { return (Method)this.addConfiguredMethods.get(name); }
/*     */ 
/*     */ 
/*     */     
/* 404 */     public Method getAddMethod(Class type) { return getTypeMatchingMethod(type, this.typeAddMethods); }
/*     */ 
/*     */ 
/*     */     
/* 408 */     public Method getAddConfiguredMethod(Class type) { return getTypeMatchingMethod(type, this.typeAddConfiguredMethods); }
/*     */ 
/*     */     
/*     */     private Method getTypeMatchingMethod(Class type, Map typeMethods) {
/* 412 */       Method m = (Method)typeMethods.get(type);
/* 413 */       if (m != null) {
/* 414 */         return m;
/*     */       }
/* 416 */       for (Iterator iter = typeMethods.keySet().iterator(); iter.hasNext(); ) {
/* 417 */         Class clss = iter.next();
/* 418 */         if (clss.isAssignableFrom(type)) {
/* 419 */           return (Method)typeMethods.get(clss);
/*     */         }
/*     */       } 
/* 422 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 426 */     public Method getSetMethod(String name) { return (Method)this.setMethods.get(name); }
/*     */ 
/*     */ 
/*     */     
/* 430 */     public String getObjectName() { return this.objName; }
/*     */   }
/*     */ 
/*     */   
/* 434 */   private FileResolver fileResolver = FileResolver.DEFAULT;
/*     */   
/* 436 */   private Map typedefs = new HashMap();
/*     */   
/* 438 */   private Map macrodefs = new HashMap();
/*     */ 
/*     */   
/* 441 */   private Stack objectStack = new Stack();
/*     */   
/* 443 */   private static final List TRUE_VALUES = Arrays.asList(new String[] { ""true"", ""yes"", ""on"" });
/*     */ 
/*     */   
/* 446 */   public void typeDef(String name, String className) throws ClassNotFoundException { typeDef(name, Class.forName(className)); }
/*     */ 
/*     */ 
/*     */   
/* 450 */   public void typeDef(String name, Class clazz) { this.typedefs.put(name, clazz); }
/*     */ 
/*     */   
/*     */   public void setRoot(Object root) {
/* 454 */     if (root == null) {
/* 455 */       throw new NullPointerException();
/*     */     }
/* 457 */     this.objectStack.clear();
/* 458 */     setCurrent(root, null);
/*     */   }
/*     */ 
/*     */   
/* 462 */   public void clear() { this.objectStack.clear(); }
/*     */ 
/*     */ 
/*     */   
/* 466 */   private void setCurrent(Object object, String name) { this.objectStack.push(new ObjectDescriptor(object, name)); }
/*     */ 
/*     */   
/*     */   public Object startCreateChild(String name) {
/* 470 */     if (this.objectStack.isEmpty()) {
/* 471 */       throw new IllegalStateException(""set root before creating child"");
/*     */     }
/* 473 */     ObjectDescriptor parentOD = this.objectStack.peek();
/* 474 */     Object parent = parentOD.getObject();
/* 475 */     if (parent instanceof MacroDef && 
/* 476 */       !""attribute"".equals(name) && !""element"".equals(name)) {
/* 477 */       MacroRecord record = ((MacroDef)parent).recordCreateChild(name);
/* 478 */       setCurrent(record, name);
/* 479 */       return record;
/*     */     } 
/*     */     
/* 482 */     if (parent instanceof Macro) {
/* 483 */       MacroRecord record = ((Macro)parent).recordCreateChild(name);
/* 484 */       setCurrent(record, name);
/* 485 */       return record;
/*     */     } 
/* 487 */     if (parent instanceof MacroRecord) {
/* 488 */       MacroRecord record = ((MacroRecord)parent).recordChild(name);
/* 489 */       setCurrent(record, name);
/* 490 */       return record;
/*     */     } 
/* 492 */     Object child = null;
/* 493 */     MacroDef macrodef = (MacroDef)this.macrodefs.get(name);
/* 494 */     if (macrodef != null) {
/* 495 */       Macro macro = macrodef.createMacro();
/* 496 */       setCurrent(macro, name);
/* 497 */       return macro;
/*     */     } 
/* 499 */     Class childClass = (Class)this.typedefs.get(name);
/* 500 */     Method addChild = null;
/*     */     try {
/* 502 */       if (childClass != null) {
/* 503 */         return addChild(parentOD, childClass, name, null);
/*     */       }
/* 505 */       addChild = parentOD.getCreateMethod(name);
/* 506 */       if (addChild != null) {
/* 507 */         child = (Object)addChild.invoke(parent, new Object[0]);
/* 508 */         setCurrent(child, name);
/* 509 */         return child;
/*     */       } 
/* 511 */       addChild = parentOD.getAddMethod(name);
/* 512 */       if (addChild != null) {
/* 513 */         childClass = addChild.getParameterTypes()[0];
/* 514 */         child = (Object)childClass.newInstance();
/* 515 */         addChild.invoke(parent, new Object[] { child });
/* 516 */         setCurrent(child, name);
/* 517 */         return child;
/*     */       } 
/* 519 */       addChild = parentOD.getAddConfiguredMethod(name);
/* 520 */       if (addChild != null) {
/* 521 */         childClass = addChild.getParameterTypes()[0];
/* 522 */         if (Map.class == childClass) {
/* 523 */           child = (Object)new HashMap();
/*     */         } else {
/* 525 */           child = (Object)childClass.newInstance();
/*     */         } 
/* 527 */         setCurrent(child, name);
/* 528 */         return child;
/*     */       }
/*     */     
/* 531 */     } catch (InstantiationException ex) {
/* 532 */       throw new IllegalArgumentException(""no default constructor on "" + childClass + "" for adding "" + name + "" on "" + parent.getClass());
/*     */     }
/* 534 */     catch (Exception ex) {
/* 535 */       IllegalArgumentException iae = new IllegalArgumentException(""bad method found for "" + name + "" on "" + parent.getClass());
/*     */       
/* 537 */       iae.initCause(ex);
/* 538 */       throw iae;
/*     */     } 
/* 540 */     throw new IllegalArgumentException(""no appropriate method found for adding "" + name + "" on "" + parent.getClass());
/*     */   }
/*     */ 
/*     */   
/*     */   public void addChild(String name, Object child) {
/* 545 */     if (this.objectStack.isEmpty()) {
/* 546 */       throw new IllegalStateException(""set root before creating child"");
/*     */     }
/* 548 */     ObjectDescriptor parentOD = this.objectStack.peek();
/*     */     try {
/* 550 */       addChild(parentOD, child.getClass(), name, child);
/* 551 */     } catch (InstantiationException ex) {
/* 552 */       throw new IllegalArgumentException(""no default constructor on "" + child.getClass() + "" for adding "" + name + "" on "" + parentOD.getObject().getClass());
/*     */     }
/* 554 */     catch (Exception ex) {
/* 555 */       IllegalArgumentException iae = new IllegalArgumentException(""bad method found for "" + name + "" on "" + parentOD.getObject().getClass());
/*     */       
/* 557 */       iae.initCause(ex);
/* 558 */       throw iae;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private Object addChild(ObjectDescriptor parentOD, Class childClass, String name, Object child) throws InstantiationException, IllegalAccessException, InvocationTargetException {
/* 564 */     Object parent = parentOD.getObject();
/* 565 */     if (parent instanceof MacroRecord) {
/* 566 */       MacroRecord record = (MacroRecord)parent;
/* 567 */       MacroRecord recordChild = record.recordChild(name, child);
/* 568 */       setCurrent(recordChild, name);
/* 569 */       return recordChild;
/*     */     } 
/* 571 */     Method addChild = parentOD.getAddMethod(childClass);
/* 572 */     if (addChild != null) {
/* 573 */       if (child == null) {
/* 574 */         child = (Object)childClass.newInstance();
/*     */       }
/* 576 */       addChild.invoke(parent, new Object[] { child });
/* 577 */       setCurrent(child, name);
/* 578 */       return child;
/*     */     } 
/* 580 */     addChild = parentOD.getAddConfiguredMethod(childClass);
/* 581 */     if (addChild != null) {
/* 582 */       if (child == null) {
/* 583 */         if (Map.class == childClass) {
/* 584 */           child = (Object)new HashMap();
/*     */         } else {
/* 586 */           child = (Object)childClass.newInstance();
/*     */         } 
/*     */       }
/* 589 */       setCurrent(child, name);
/* 590 */       return child;
/*     */     } 
/* 592 */     throw new IllegalArgumentException(""no appropriate method found for adding "" + name + "" on "" + parent.getClass());
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean isTopLevelMacroRecord() {
/* 597 */     if (this.objectStack.isEmpty()) {
/* 598 */       return false;
/*     */     }
/* 600 */     ObjectDescriptor od = this.objectStack.peek();
/* 601 */     return od.getObject() instanceof MacroDef;
/*     */   }
/*     */   
/*     */   public void setAttribute(String attributeName, String value) {
/* 605 */     if (this.objectStack.isEmpty()) {
/* 606 */       throw new IllegalStateException(""set root before setting attribute"");
/*     */     }
/* 608 */     ObjectDescriptor od = this.objectStack.peek();
/* 609 */     if (od.getObject() instanceof Macro) {
/* 610 */       ((Macro)od.getObject()).defineAttribute(attributeName, value);
/*     */       return;
/*     */     } 
/* 613 */     if (od.getObject() instanceof MacroRecord) {
/* 614 */       ((MacroRecord)od.getObject()).recordAttribute(attributeName, value);
/*     */       return;
/*     */     } 
/* 617 */     Method m = od.getSetMethod(attributeName);
/* 618 */     if (m == null) {
/* 619 */       if (od.getObject() instanceof Map) {
/* 620 */         ((Map)od.getObject()).put(attributeName, value);
/*     */         return;
/*     */       } 
/* 623 */       throw new IllegalArgumentException(""no set method found for "" + attributeName + "" on "" + od.getObject().getClass());
/*     */     } 
/*     */     
/* 626 */     Object convertedValue = null;
/* 627 */     Class paramClass = m.getParameterTypes()[0];
/*     */     try {
/* 629 */       if (paramClass.equals(String.class)) {
/* 630 */         convertedValue = (Object)value;
/* 631 */       } else if (paramClass.equals(Boolean.class) || paramClass.equals(boolean.class)) {
/* 632 */         convertedValue = (Object)Boolean.valueOf(TRUE_VALUES.contains(value));
/* 633 */       } else if (paramClass.equals(Character.class) || paramClass.equals(char.class)) {
/* 634 */         convertedValue = (Object)new Character((value.length() > 0) ? value.charAt(0) : 32);
/* 635 */       } else if (paramClass.equals(Short.class) || paramClass.equals(short.class)) {
/* 636 */         convertedValue = (Object)Short.valueOf(value);
/* 637 */       } else if (paramClass.equals(Integer.class) || paramClass.equals(int.class)) {
/* 638 */         convertedValue = (Object)Integer.valueOf(value);
/* 639 */       } else if (paramClass.equals(Long.class) || paramClass.equals(long.class)) {
/* 640 */         convertedValue = (Object)Long.valueOf(value);
/* 641 */       } else if (paramClass.equals(Class.class)) {
/* 642 */         convertedValue = (Object)Class.forName(value);
/* 643 */       } else if (paramClass.equals(File.class)) {
/* 644 */         convertedValue = (Object)this.fileResolver.resolveFile(value, od.getObjectName() + ""."" + attributeName);
/*     */       } else {
/*     */         
/* 647 */         convertedValue = paramClass.getConstructor(new Class[] { String.class }).newInstance(new Object[] { value });
/*     */       }
/*     */     
/* 650 */     } catch (Exception ex) {
/* 651 */       IllegalArgumentException iae = new IllegalArgumentException(""impossible to convert "" + value + "" to "" + paramClass + "" for setting "" + attributeName + "" on "" + od.getObject().getClass() + "": "" + ex.getMessage());
/*     */ 
/*     */       
/* 654 */       iae.initCause(ex);
/* 655 */       throw iae;
/*     */     } 
/*     */     try {
/* 658 */       m.invoke(od.getObject(), new Object[] { convertedValue });
/* 659 */     } catch (Exception ex) {
/* 660 */       IllegalArgumentException iae = new IllegalArgumentException(""impossible to set "" + attributeName + "" to "" + convertedValue + "" on "" + od.getObject().getClass());
/*     */       
/* 662 */       iae.initCause(ex);
/* 663 */       throw iae;
/*     */     } 
/*     */   }
/*     */   
/*     */   public void addText(String text) {
/* 668 */     if (this.objectStack.isEmpty()) {
/* 669 */       throw new IllegalStateException(""set root before adding text"");
/*     */     }
/* 671 */     ObjectDescriptor od = this.objectStack.peek();
/*     */     try {
/* 673 */       od.getObject().getClass().getMethod(""addText"", new Class[] { String.class }).invoke(od.getObject(), new Object[] { text });
/*     */     }
/* 675 */     catch (Exception ex) {
/* 676 */       IllegalArgumentException iae = new IllegalArgumentException(""impossible to add text on "" + od.getObject().getClass());
/*     */       
/* 678 */       iae.initCause(ex);
/* 679 */       throw iae;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object endCreateChild() {
/* 687 */     if (this.objectStack.isEmpty()) {
/* 688 */       throw new IllegalStateException(""set root before ending child"");
/*     */     }
/* 690 */     ObjectDescriptor od = this.objectStack.pop();
/* 691 */     if (this.objectStack.isEmpty()) {
/* 692 */       this.objectStack.push(od);
/* 693 */       throw new IllegalStateException(""cannot end root"");
/*     */     } 
/* 695 */     if (od.getObject() instanceof Macro) {
/* 696 */       return ((Macro)od.getObject()).play(this);
/*     */     }
/* 698 */     ObjectDescriptor parentOD = this.objectStack.peek();
/* 699 */     String name = od.getObjectName();
/* 700 */     Class childClass = (Class)this.typedefs.get(name);
/* 701 */     Method m = null;
/* 702 */     if (childClass != null) {
/* 703 */       m = parentOD.getAddConfiguredMethod(childClass);
/*     */     } else {
/* 705 */       m = parentOD.getAddConfiguredMethod(name);
/*     */     } 
/*     */     try {
/* 708 */       if (m != null) {
/* 709 */         m.invoke(parentOD.getObject(), new Object[] { od.getObject() });
/*     */       }
/* 711 */       return od.getObject();
/* 712 */     } catch (Exception ex) {
/* 713 */       IllegalArgumentException iae = new IllegalArgumentException(""impossible to add configured child for "" + name + "" on "" + parentOD.getObject().getClass() + "": "" + StringUtils.getErrorMessage(ex));
/*     */ 
/*     */ 
/*     */       
/* 717 */       iae.initCause(ex);
/* 718 */       throw iae;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 723 */   public Object getCurrent() { return this.objectStack.isEmpty() ? null : ((ObjectDescriptor)this.objectStack.peek()).getObject(); }
/*     */ 
/*     */ 
/*     */   
/* 727 */   public int getDepth() { return this.objectStack.size(); }
/*     */ 
/*     */   
/*     */   public MacroDef startMacroDef(String macroName) {
/* 731 */     MacroDef macroDef = new MacroDef(macroName);
/* 732 */     setCurrent(macroDef, macroName);
/* 733 */     return macroDef;
/*     */   }
/*     */ 
/*     */   
/* 737 */   public void addMacroAttribute(String attName, String attDefaultValue) { ((MacroDef)getCurrent()).addAttribute(attName, attDefaultValue); }
/*     */ 
/*     */ 
/*     */   
/* 741 */   public void addMacroElement(String elementName, boolean optional) { ((MacroDef)getCurrent()).addElement(elementName, optional); }
/*     */ 
/*     */   
/*     */   public void endMacroDef() {
/* 745 */     addConfiguredMacrodef((MacroDef)getCurrent());
/* 746 */     this.objectStack.pop();
/*     */   }
/*     */ 
/*     */   
/* 750 */   public void addConfiguredMacrodef(MacroDef macrodef) { this.macrodefs.put(macrodef.getName(), macrodef); }
/*     */ 
/*     */ 
/*     */   
/* 754 */   public Class getTypeDef(String name) { return (Class)this.typedefs.get(name); }
/*     */ 
/*     */ 
/*     */   
/* 758 */   public FileResolver getFileResolver() { return this.fileResolver; }
/*     */ 
/*     */   
/*     */   public void setFileResolver(FileResolver fileResolver) {
/* 762 */     Checks.checkNotNull(fileResolver, ""fileResolver"");
/* 763 */     this.fileResolver = fileResolver;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\Configurator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.ContextualSAXHandler,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.Stack;
/*    */ import org.xml.sax.Attributes;
/*    */ import org.xml.sax.SAXException;
/*    */ import org.xml.sax.helpers.DefaultHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ContextualSAXHandler
/*    */   extends DefaultHandler
/*    */ {
/* 29 */   private Stack contextStack = new Stack();
/*    */   
/* 31 */   private StringBuffer buffer = new StringBuffer();
/*    */ 
/*    */   
/* 34 */   public void characters(char[] ch, int start, int length) throws SAXException { this.buffer.append(ch, start, length); }
/*    */ 
/*    */ 
/*    */   
/*    */   public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
/* 39 */     this.contextStack.push(qName);
/* 40 */     this.buffer.setLength(0);
/*    */   }
/*    */   
/*    */   public void endElement(String uri, String localName, String qName) throws SAXException {
/* 44 */     this.contextStack.pop();
/* 45 */     this.buffer.setLength(0);
/*    */   }
/*    */ 
/*    */   
/*    */   protected String getContext() {
/* 50 */     StringBuffer buf = new StringBuffer();
/* 51 */     for (Iterator iter = this.contextStack.iterator(); iter.hasNext(); ) {
/* 52 */       String ctx = iter.next();
/* 53 */       buf.append(ctx).append(""/"");
/*    */     } 
/* 55 */     if (buf.length() > 0) {
/* 56 */       buf.setLength(buf.length() - 1);
/*    */     }
/* 58 */     return buf.toString();
/*    */   }
/*    */ 
/*    */   
/* 62 */   protected String getText() { return this.buffer.toString(); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\ContextualSAXHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.CopyProgressEvent,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CopyProgressEvent
/*    */ {
/*    */   private long totalReadBytes;
/*    */   private byte[] buffer;
/*    */   private int readBytes;
/*    */   
/*    */   public CopyProgressEvent() {}
/*    */   
/* 34 */   public CopyProgressEvent(byte[] buffer, int read, long total) { update(buffer, read, total); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public CopyProgressEvent(byte[] buffer, long total) { update(buffer, 0, total); }
/*    */ 
/*    */   
/*    */   protected CopyProgressEvent update(byte[] buffer, int read, long total) {
/* 42 */     this.buffer = buffer;
/* 43 */     this.readBytes = read;
/* 44 */     this.totalReadBytes = total;
/* 45 */     return this;
/*    */   }
/*    */ 
/*    */   
/* 49 */   public long getTotalReadBytes() { return this.totalReadBytes; }
/*    */ 
/*    */ 
/*    */   
/* 53 */   public byte[] getBuffer() { return this.buffer; }
/*    */ 
/*    */ 
/*    */   
/* 57 */   public int getReadBytes() { return this.readBytes; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\CopyProgressEvent.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.CopyProgressListener,"package org.apache.ivy.util;
public interface CopyProgressListener {
  void start(CopyProgressEvent paramCopyProgressEvent);
  void progress(CopyProgressEvent paramCopyProgressEvent);
  void end(CopyProgressEvent paramCopyProgressEvent);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\CopyProgressListener.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.Credentials,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Credentials
/*     */ {
/*     */   private String realm;
/*     */   private String host;
/*     */   private String userName;
/*     */   private String passwd;
/*     */   
/*     */   public Credentials(String realm, String host, String userName, String passwd) {
/*  33 */     this.realm = realm;
/*  34 */     this.host = host;
/*  35 */     this.userName = userName;
/*  36 */     this.passwd = passwd;
/*     */   }
/*     */ 
/*     */   
/*  40 */   public String getHost() { return this.host; }
/*     */ 
/*     */ 
/*     */   
/*  44 */   public String getPasswd() { return this.passwd; }
/*     */ 
/*     */ 
/*     */   
/*  48 */   public String getRealm() { return this.realm; }
/*     */ 
/*     */ 
/*     */   
/*  52 */   public String getUserName() { return this.userName; }
/*     */ 
/*     */   
/*     */   public static String buildKey(String realm, String host) {
/*  56 */     if (realm == null || """".equals(realm.trim())) {
/*  57 */       return host;
/*     */     }
/*  59 */     return realm + ""@"" + host;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  68 */   public String toString() { return getKey() + "" "" + getUserName() + ""/"" + getPasswdAsStars(); }
/*     */ 
/*     */   
/*     */   private String getPasswdAsStars() {
/*  72 */     if (this.passwd == null) {
/*  73 */       return null;
/*     */     }
/*  75 */     StringBuffer sb = new StringBuffer();
/*  76 */     for (int i = this.passwd.length(); i > 0; i--) {
/*  77 */       sb.append('*');
/*     */     }
/*  79 */     return sb.toString();
/*     */   }
/*     */   
/*     */   public boolean equals(Object o) {
/*  83 */     if (o == null) {
/*  84 */       return false;
/*     */     }
/*     */     
/*  87 */     if (o instanceof Credentials) {
/*  88 */       Credentials c = (Credentials)o;
/*  89 */       return getKey().equals(c.getKey());
/*     */     } 
/*     */     
/*  92 */     return false;
/*     */   }
/*     */ 
/*     */   
/*  96 */   public int hashCode() { return getKey().hashCode(); }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getKey() { return buildKey(this.realm, this.host); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\Credentials.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.CredentialsUtil,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.awt.GridBagConstraints;
/*     */ import java.awt.GridBagLayout;
/*     */ import java.awt.Insets;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import javax.swing.ImageIcon;
/*     */ import javax.swing.JCheckBox;
/*     */ import javax.swing.JLabel;
/*     */ import javax.swing.JOptionPane;
/*     */ import javax.swing.JPanel;
/*     */ import javax.swing.JPasswordField;
/*     */ import javax.swing.JTextField;
/*     */ import org.apache.ivy.Ivy;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class CredentialsUtil
/*     */ {
/*     */   private static final class CredentialPanel
/*     */     extends JPanel
/*     */   {
/*     */     private static final int FIELD_LENGTH = 20;
/*  44 */     private JTextField userNameField = new JTextField(20);
/*     */     
/*  46 */     private JTextField passwordField = new JPasswordField(20);
/*     */     
/*  48 */     private JCheckBox rememberDataCB = new JCheckBox(""remember my information"");
/*     */     
/*     */     CredentialPanel(Credentials credentials, File passfile) {
/*  51 */       GridBagLayout layout = new GridBagLayout();
/*  52 */       setLayout(layout);
/*  53 */       GridBagConstraints c = new GridBagConstraints();
/*  54 */       c.insets = new Insets(2, 2, 2, 2);
/*     */       
/*  56 */       c.gridx = 1;
/*  57 */       c.gridheight = 1;
/*  58 */       c.gridwidth = 2;
/*  59 */       String prompt = (credentials.getRealm() != null) ? (""Enter username and password for \"""" + credentials.getRealm() + ""\"" at "" + credentials.getHost()) : (""Enter username and password for "" + credentials.getHost());
/*     */ 
/*     */       
/*  62 */       add(new JLabel(prompt), c);
/*     */       
/*  64 */       c.gridy = 1;
/*  65 */       c.gridwidth = 1;
/*     */       
/*  67 */       add(new JLabel(""username: ""), c);
/*  68 */       c.gridx = 2;
/*  69 */       add(this.userNameField, c);
/*  70 */       c.gridx = 1;
/*  71 */       c.gridy++;
/*     */       
/*  73 */       if (credentials.getUserName() != null) {
/*  74 */         this.userNameField.setText(credentials.getUserName());
/*     */       }
/*     */       
/*  77 */       if (credentials.getPasswd() == null) {
/*  78 */         add(new JLabel(""passwd:  ""), c);
/*  79 */         c.gridx = 2;
/*  80 */         add(this.passwordField, c);
/*  81 */         c.gridx = 1;
/*  82 */         c.gridy++;
/*     */       } else {
/*  84 */         this.passwordField.setText(credentials.getPasswd());
/*     */       } 
/*     */       
/*  87 */       if (passfile != null) {
/*  88 */         c.gridwidth = 2;
/*  89 */         add(this.rememberDataCB, c);
/*  90 */         c.gridy++;
/*     */       } 
/*  92 */       c.gridwidth = 2;
/*  93 */       add(new JLabel(), c);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static Credentials promptCredentials(Credentials c, File passfile) {
/*  99 */     c = loadPassfile(c, passfile);
/* 100 */     if (c.getUserName() != null && c.getPasswd() != null) {
/* 101 */       return c;
/*     */     }
/* 103 */     CredentialPanel credentialPanel = new CredentialPanel(c, passfile);
/* 104 */     if (JOptionPane.showOptionDialog(null, credentialPanel, c.getHost() + "" credentials"", 2, 0, new ImageIcon(Ivy.class.getResource(""logo.png"")), null, new Integer(0)) == 0) {
/*     */ 
/*     */       
/* 107 */       String username = credentialPanel.userNameField.getText();
/* 108 */       String passwd = credentialPanel.passwordField.getText();
/* 109 */       if (credentialPanel.rememberDataCB.isSelected()) {
/* 110 */         Properties props = new EncrytedProperties();
/* 111 */         props.setProperty(""username"", username);
/* 112 */         props.setProperty(""passwd"", passwd);
/* 113 */         FileOutputStream fos = null;
/*     */         try {
/* 115 */           fos = new FileOutputStream(passfile);
/* 116 */           props.store(fos, """");
/* 117 */         } catch (Exception e) {
/* 118 */           Message.warn(""error occured while saving password file "" + passfile + "": "" + e);
/*     */         } finally {
/* 120 */           if (fos != null) {
/*     */             try {
/* 122 */               fos.close();
/* 123 */             } catch (Exception e) {}
/*     */           }
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 129 */       c = new Credentials(c.getRealm(), c.getHost(), username, passwd);
/*     */     } 
/* 131 */     return c;
/*     */   }
/*     */   
/*     */   public static Credentials loadPassfile(Credentials c, File passfile) {
/* 135 */     if (passfile != null && passfile.exists()) {
/* 136 */       Properties props = new EncrytedProperties();
/* 137 */       FileInputStream fis = null;
/*     */       try {
/* 139 */         fis = new FileInputStream(passfile);
/* 140 */         props.load(fis);
/* 141 */         String username = c.getUserName();
/* 142 */         String passwd = c.getPasswd();
/* 143 */         if (username == null) {
/* 144 */           username = props.getProperty(""username"");
/*     */         }
/* 146 */         if (passwd == null) {
/* 147 */           passwd = props.getProperty(""passwd"");
/*     */         }
/* 149 */         return new Credentials(c.getRealm(), c.getHost(), username, passwd);
/* 150 */       } catch (IOException e) {
/* 151 */         Message.warn(""error occured while loading password file "" + passfile + "": "" + e);
/*     */       } finally {
/* 153 */         if (fis != null) {
/*     */           try {
/* 155 */             fis.close();
/* 156 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 162 */     return c;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\CredentialsUtil.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.DefaultMessageLogger,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultMessageLogger
/*    */   extends AbstractMessageLogger
/*    */ {
/* 21 */   private int level = 2;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 27 */   public DefaultMessageLogger(int level) { this.level = level; }
/*    */ 
/*    */   
/*    */   public void log(String msg, int level) {
/* 31 */     if (level <= this.level) {
/* 32 */       System.out.println(msg);
/*    */     }
/*    */   }
/*    */ 
/*    */   
/* 37 */   public void rawlog(String msg, int level) { log(msg, level); }
/*    */ 
/*    */ 
/*    */   
/* 41 */   public void doProgress() { System.out.print("".""); }
/*    */ 
/*    */ 
/*    */   
/* 45 */   public void doEndProgress(String msg) { System.out.println(msg); }
/*    */ 
/*    */ 
/*    */   
/* 49 */   public int getLevel() { return this.level; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\DefaultMessageLogger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.EncrytedProperties,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Collection;
/*    */ import java.util.List;
/*    */ import java.util.Properties;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EncrytedProperties
/*    */   extends Properties
/*    */ {
/* 39 */   public synchronized Object setProperty(String key, String value) { return StringUtils.decrypt((String)super.setProperty(key, StringUtils.encrypt(value))); }
/*    */ 
/*    */ 
/*    */   
/* 43 */   public String getProperty(String key) { return StringUtils.decrypt(super.getProperty(key)); }
/*    */ 
/*    */ 
/*    */   
/* 47 */   public String getProperty(String key, String defaultValue) { return StringUtils.decrypt(super.getProperty(key, StringUtils.encrypt(defaultValue))); }
/*    */ 
/*    */ 
/*    */   
/* 51 */   public boolean containsValue(Object value) { return super.containsValue(StringUtils.encrypt((String)value)); }
/*    */ 
/*    */ 
/*    */   
/* 55 */   public synchronized boolean contains(Object value) { return super.contains(StringUtils.encrypt((String)value)); }
/*    */ 
/*    */   
/*    */   public Collection values() {
/* 59 */     List ret = new ArrayList(super.values());
/* 60 */     for (int i = 0; i < ret.size(); i++) {
/* 61 */       ret.set(i, StringUtils.decrypt(ret.get(i)));
/*    */     }
/* 63 */     return ret;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\EncrytedProperties.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.FileResolver,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public interface FileResolver
/*    */ {
/* 23 */   public static final FileResolver DEFAULT = new FileResolver()
/*    */     {
/* 25 */       public File resolveFile(String path, String filename) { return new File(path); }
/*    */     };
/*    */   
/*    */   File resolveFile(String paramString1, String paramString2);
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\FileResolver.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.FileUtil,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.List;
/*     */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class FileUtil
/*     */ {
/*     */   private static final int BUFFER_SIZE = 65536;
/*  51 */   private static final byte[] EMPTY_BUFFER = new byte[0];
/*     */ 
/*     */   
/*     */   public static void symlink(File src, File dest, CopyProgressListener l, boolean overwrite) throws IOException {
/*     */     try {
/*  56 */       if (dest.exists()) {
/*  57 */         if (!dest.isFile()) {
/*  58 */           throw new IOException(""impossible to copy: destination is not a file: "" + dest);
/*     */         }
/*  60 */         if (!overwrite) {
/*  61 */           Message.verbose(dest + "" already exists, nothing done"");
/*     */           return;
/*     */         } 
/*     */       } 
/*  65 */       if (dest.getParentFile() != null) {
/*  66 */         dest.getParentFile().mkdirs();
/*     */       }
/*     */       
/*  69 */       Runtime runtime = Runtime.getRuntime();
/*  70 */       Message.verbose(""executing 'ln -s -f "" + src.getAbsolutePath() + "" "" + dest.getPath() + ""'"");
/*     */       
/*  72 */       Process process = runtime.exec(new String[] { ""ln"", ""-s"", ""-f"", src.getAbsolutePath(), dest.getPath() });
/*     */ 
/*     */       
/*  75 */       if (process.waitFor() != 0) {
/*  76 */         InputStream errorStream = process.getErrorStream();
/*  77 */         InputStreamReader isr = new InputStreamReader(errorStream);
/*  78 */         BufferedReader br = new BufferedReader(isr);
/*     */         
/*  80 */         StringBuffer error = new StringBuffer();
/*     */         String line;
/*  82 */         while ((line = br.readLine()) != null) {
/*  83 */           error.append(line);
/*  84 */           error.append('\n');
/*     */         } 
/*     */         
/*  87 */         throw new IOException(""error symlinking "" + src + "" to "" + dest + "":\n"" + error);
/*     */       } 
/*  89 */       if (!dest.exists()) {
/*  90 */         throw new IOException(""error symlinking "" + dest + "" doesn't exists"");
/*     */       }
/*  92 */     } catch (IOException x) {
/*  93 */       Message.verbose(""symlink failed; falling back to copy"");
/*  94 */       StringWriter buffer = new StringWriter();
/*  95 */       x.printStackTrace(new PrintWriter(buffer));
/*  96 */       Message.debug(buffer.toString());
/*  97 */       copy(src, dest, l, overwrite);
/*  98 */     } catch (InterruptedException x) {
/*  99 */       Thread.currentThread().interrupt();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 104 */   public static boolean copy(File src, File dest, CopyProgressListener l) throws IOException { return copy(src, dest, l, false); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean copy(File src, File dest, CopyProgressListener l, boolean overwrite) throws IOException {
/* 109 */     if (dest.exists()) {
/* 110 */       if (!dest.isFile()) {
/* 111 */         throw new IOException(""impossible to copy: destination is not a file: "" + dest);
/*     */       }
/* 113 */       if (overwrite) {
/* 114 */         if (!dest.canWrite()) {
/* 115 */           dest.delete();
/*     */         }
/*     */       } else {
/* 118 */         Message.verbose(dest + "" already exists, nothing done"");
/* 119 */         return false;
/*     */       } 
/*     */     } 
/* 122 */     copy(new FileInputStream(src), dest, l);
/* 123 */     long srcLen = src.length();
/* 124 */     long destLen = dest.length();
/* 125 */     if (srcLen != destLen) {
/* 126 */       dest.delete();
/* 127 */       throw new IOException(""size of source file "" + src.toString() + ""("" + srcLen + "") differs from size of dest file "" + dest.toString() + ""("" + destLen + "") - please retry"");
/*     */     } 
/*     */ 
/*     */     
/* 131 */     dest.setLastModified(src.lastModified());
/* 132 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 136 */   public static void copy(URL src, File dest, CopyProgressListener l) throws IOException { URLHandlerRegistry.getDefault().download(src, dest, l); }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public static void copy(File src, URL dest, CopyProgressListener l) throws IOException { URLHandlerRegistry.getDefault().upload(src, dest, l); }
/*     */ 
/*     */   
/*     */   public static void copy(InputStream src, File dest, CopyProgressListener l) throws IOException {
/* 144 */     if (dest.getParentFile() != null) {
/* 145 */       dest.getParentFile().mkdirs();
/*     */     }
/* 147 */     copy(src, new FileOutputStream(dest), l);
/*     */   }
/*     */ 
/*     */   
/*     */   public static void copy(InputStream src, OutputStream dest, CopyProgressListener l) throws IOException {
/* 152 */     CopyProgressEvent evt = null;
/* 153 */     if (l != null) {
/* 154 */       evt = new CopyProgressEvent();
/*     */     }
/*     */     try {
/* 157 */       byte[] buffer = new byte[65536];
/*     */       
/* 159 */       long total = 0L;
/*     */       
/* 161 */       if (l != null)
/* 162 */         l.start(evt); 
/*     */       int c;
/* 164 */       while ((c = src.read(buffer)) != -1) {
/* 165 */         if (Thread.currentThread().isInterrupted()) {
/* 166 */           throw new IOException(""transfer interrupted"");
/*     */         }
/* 168 */         dest.write(buffer, 0, c);
/* 169 */         total += c;
/* 170 */         if (l != null) {
/* 171 */           l.progress(evt.update(buffer, c, total));
/*     */         }
/*     */       } 
/*     */       
/* 175 */       if (l != null) {
/* 176 */         evt.update(EMPTY_BUFFER, 0, total);
/*     */       }
/*     */       
/*     */       try {
/* 180 */         dest.flush();
/* 181 */       } catch (IOException ex) {}
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 186 */       src.close();
/* 187 */       dest.close();
/*     */     } finally {
/*     */       try {
/* 190 */         src.close();
/* 191 */       } catch (IOException ex) {}
/*     */ 
/*     */       
/*     */       try {
/* 195 */         dest.close();
/* 196 */       } catch (IOException ex) {}
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 201 */     if (l != null) {
/* 202 */       l.end(evt);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String readEntirely(BufferedReader in) throws IOException {
/*     */     try {
/* 224 */       StringBuffer buf = new StringBuffer();
/*     */       
/* 226 */       String line = in.readLine();
/* 227 */       while (line != null) {
/* 228 */         buf.append(line + ""\n"");
/* 229 */         line = in.readLine();
/*     */       } 
/* 231 */       return buf.toString();
/*     */     } finally {
/* 233 */       in.close();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public static String readEntirely(File f) throws IOException { return readEntirely(new FileInputStream(f)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String readEntirely(InputStream is) throws IOException {
/*     */     try {
/* 264 */       StringBuffer sb = new StringBuffer();
/* 265 */       byte[] buffer = new byte[65536];
/*     */       
/*     */       int c;
/* 268 */       while ((c = is.read(buffer)) != -1) {
/* 269 */         sb.append(new String(buffer, 0, c));
/*     */       }
/* 271 */       return sb.toString();
/*     */     } finally {
/* 273 */       is.close();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 278 */   public static String concat(String dir, String file) { return dir + ""/"" + file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean forceDelete(File file) {
/* 290 */     if (!file.exists()) {
/* 291 */       return true;
/*     */     }
/* 293 */     if (file.isDirectory()) {
/* 294 */       File[] files = file.listFiles();
/* 295 */       for (int i = 0; i < files.length; i++) {
/* 296 */         if (!forceDelete(files[i])) {
/* 297 */           return false;
/*     */         }
/*     */       } 
/*     */     } 
/* 301 */     return file.delete();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static List getPathFiles(File root, File file) {
/* 312 */     List ret = new ArrayList();
/* 313 */     while (file != null && !file.getAbsolutePath().equals(root.getAbsolutePath())) {
/* 314 */       ret.add(file);
/* 315 */       file = file.getParentFile();
/*     */     } 
/* 317 */     if (root != null) {
/* 318 */       ret.add(root);
/*     */     }
/* 320 */     Collections.reverse(ret);
/* 321 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 335 */   public static Collection listAll(File dir, Collection ignore) { return listAll(dir, new ArrayList(), ignore); }
/*     */ 
/*     */   
/*     */   private static Collection listAll(File file, Collection list, Collection ignore) {
/* 339 */     if (ignore.contains(file.getName())) {
/* 340 */       return list;
/*     */     }
/*     */     
/* 343 */     if (file.exists()) {
/* 344 */       list.add(file);
/*     */     }
/* 346 */     if (file.isDirectory()) {
/* 347 */       File[] files = file.listFiles();
/* 348 */       for (int i = 0; i < files.length; i++) {
/* 349 */         listAll(files[i], list, ignore);
/*     */       }
/*     */     } 
/* 352 */     return list;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static File resolveFile(File file, String filename) {
/* 360 */     File f = new File(filename);
/* 361 */     if (f.isAbsolute()) {
/* 362 */       return f;
/*     */     }
/* 364 */     return new File(file, filename);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\FileUtil.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.HostUtil,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.net.InetAddress;
/*    */ import java.net.UnknownHostException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class HostUtil
/*    */ {
/* 29 */   private static String localHostName = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static String getLocalHostName() {
/* 44 */     if (localHostName == null) {
/*    */       try {
/* 46 */         localHostName = InetAddress.getLocalHost().getHostName();
/* 47 */       } catch (UnknownHostException e) {
/* 48 */         localHostName = ""localhost"";
/*    */       } 
/*    */     }
/* 51 */     return localHostName;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\HostUtil.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.MemoryUtil,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class MemoryUtil
/*    */ {
/*    */   private static final int SAMPLING_SIZE = 100;
/*    */   private static final int SLEEP_TIME = 100;
/*    */   
/*    */   public static long sizeOf(Class clazz) {
/* 38 */     long size = 0L;
/* 39 */     Object[] objects = new Object[100];
/*    */     try {
/* 41 */       clazz.newInstance();
/* 42 */       long startingMemoryUse = getUsedMemory();
/* 43 */       for (int i = 0; i < objects.length; i++) {
/* 44 */         objects[i] = clazz.newInstance();
/*    */       }
/* 46 */       long endingMemoryUse = getUsedMemory();
/* 47 */       float approxSize = (float)(endingMemoryUse - startingMemoryUse) / objects.length;
/* 48 */       size = Math.round(approxSize);
/* 49 */     } catch (Exception e) {
/* 50 */       System.out.println(""WARNING:couldn't instantiate"" + clazz);
/* 51 */       e.printStackTrace();
/*    */     } 
/* 53 */     return size;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static long getUsedMemory() {
/* 64 */     gc();
/* 65 */     long totalMemory = Runtime.getRuntime().totalMemory();
/* 66 */     gc();
/* 67 */     long freeMemory = Runtime.getRuntime().freeMemory();
/* 68 */     long usedMemory = totalMemory - freeMemory;
/* 69 */     return usedMemory;
/*    */   }
/*    */   
/*    */   private static void gc() {
/*    */     try {
/* 74 */       System.gc();
/* 75 */       Thread.sleep(100L);
/* 76 */       System.runFinalization();
/* 77 */       Thread.sleep(100L);
/* 78 */       System.gc();
/* 79 */       Thread.sleep(100L);
/* 80 */       System.runFinalization();
/* 81 */       Thread.sleep(100L);
/* 82 */     } catch (Exception e) {
/* 83 */       e.printStackTrace();
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 88 */   public static void main(String[] args) throws ClassNotFoundException { System.out.println(sizeOf(Class.forName(args[0]))); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\MemoryUtil.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.Message,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.core.IvyContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class Message
/*     */ {
/*     */   public static final int MSG_ERR = 0;
/*     */   public static final int MSG_WARN = 1;
/*     */   public static final int MSG_INFO = 2;
/*     */   public static final int MSG_VERBOSE = 3;
/*     */   public static final int MSG_DEBUG = 4;
/*     */   private static boolean showedInfo = false;
/*  55 */   private static MessageLogger defaultLogger = new DefaultMessageLogger(2);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   public static MessageLogger getDefaultLogger() { return defaultLogger; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void setDefaultLogger(MessageLogger logger) {
/*  70 */     Checks.checkNotNull(logger, ""logger"");
/*  71 */     defaultLogger = logger;
/*     */   }
/*     */ 
/*     */   
/*  75 */   private static MessageLogger getLogger() { return IvyContext.getContext().getMessageLogger(); }
/*     */ 
/*     */   
/*     */   public static void showInfo() {
/*  79 */     if (!showedInfo) {
/*  80 */       info("":: Ivy "" + Ivy.getIvyVersion() + "" - "" + Ivy.getIvyDate() + "" :: "" + Ivy.getIvyHomeURL() + "" ::"");
/*     */       
/*  82 */       showedInfo = true;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  87 */   public static void debug(String msg) { getLogger().debug(msg); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public static void verbose(String msg) { getLogger().verbose(msg); }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public static void info(String msg) { getLogger().info(msg); }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public static void rawinfo(String msg) { getLogger().rawinfo(msg); }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public static void deprecated(String msg) { getLogger().deprecated(msg); }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public static void warn(String msg) { getLogger().warn(msg); }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public static void error(String msg) { getLogger().error(msg); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public static List getProblems() { return getLogger().getProblems(); }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public static void sumupProblems() { getLogger().sumupProblems(); }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public static void progress() { getLogger().progress(); }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public static void endProgress() { getLogger().endProgress(); }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public static void endProgress(String msg) { getLogger().endProgress(msg); }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public static boolean isShowProgress() { return getLogger().isShowProgress(); }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public static void setShowProgress(boolean progress) { getLogger().setShowProgress(progress); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\Message.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.MessageLogger,"package org.apache.ivy.util;
import java.util.List;
public interface MessageLogger {
  void log(String paramString, int paramInt);
  void rawlog(String paramString, int paramInt);
  void debug(String paramString);
  void verbose(String paramString);
  void deprecated(String paramString);
  void info(String paramString);
  void rawinfo(String paramString);
  void warn(String paramString);
  void error(String paramString);
  List getProblems();
  List getWarns();
  List getErrors();
  void clearProblems();
  void sumupProblems();
  void progress();
  void endProgress();
  void endProgress(String paramString);
  boolean isShowProgress();
  void setShowProgress(boolean paramBoolean);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\MessageLogger.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.MessageLoggerEngine,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Stack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MessageLoggerEngine
/*     */   implements MessageLogger
/*     */ {
/*  37 */   private final Stack loggerStack = new Stack();
/*     */   
/*  39 */   private MessageLogger defaultLogger = null;
/*     */   
/*  41 */   private List problems = new ArrayList();
/*     */   
/*  43 */   private List warns = new ArrayList();
/*     */   
/*  45 */   private List errors = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   public void setDefaultLogger(MessageLogger defaultLogger) { this.defaultLogger = defaultLogger; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void pushLogger(MessageLogger logger) {
/*  68 */     Checks.checkNotNull(logger, ""logger"");
/*  69 */     this.loggerStack.push(logger);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void popLogger() {
/*  79 */     if (!this.loggerStack.isEmpty()) {
/*  80 */       this.loggerStack.pop();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private MessageLogger peekLogger() {
/*  89 */     if (this.loggerStack.isEmpty()) {
/*  90 */       return getDefaultLogger();
/*     */     }
/*  92 */     return this.loggerStack.peek();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   private MessageLogger getDefaultLogger() { return (this.defaultLogger == null) ? Message.getDefaultLogger() : this.defaultLogger; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void warn(String msg) {
/* 103 */     peekLogger().warn(msg);
/* 104 */     this.problems.add(""WARN:  "" + msg);
/* 105 */     this.warns.add(msg);
/*     */   }
/*     */   
/*     */   public void error(String msg) {
/* 109 */     peekLogger().error(msg);
/* 110 */     this.problems.add(""\tERROR: "" + msg);
/* 111 */     this.errors.add(msg);
/*     */   }
/*     */ 
/*     */   
/* 115 */   public List getErrors() { return this.errors; }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public List getProblems() { return this.problems; }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public List getWarns() { return this.warns; }
/*     */ 
/*     */   
/*     */   public void sumupProblems() {
/* 127 */     MessageLoggerHelper.sumupProblems(this);
/* 128 */     clearProblems();
/*     */   }
/*     */   
/*     */   public void clearProblems() {
/* 132 */     getDefaultLogger().clearProblems();
/* 133 */     for (Iterator iter = this.loggerStack.iterator(); iter.hasNext(); ) {
/* 134 */       MessageLogger l = iter.next();
/* 135 */       l.clearProblems();
/*     */     } 
/* 137 */     this.problems.clear();
/* 138 */     this.errors.clear();
/* 139 */     this.warns.clear();
/*     */   }
/*     */   
/*     */   public void setShowProgress(boolean progress) {
/* 143 */     getDefaultLogger().setShowProgress(progress);
/*     */     
/* 145 */     for (Iterator iter = this.loggerStack.iterator(); iter.hasNext(); ) {
/* 146 */       MessageLogger l = iter.next();
/* 147 */       l.setShowProgress(progress);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 153 */   public boolean isShowProgress() { return getDefaultLogger().isShowProgress(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void debug(String msg) { peekLogger().debug(msg); }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void deprecated(String msg) { peekLogger().deprecated(msg); }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void endProgress() { peekLogger().endProgress(); }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void endProgress(String msg) { peekLogger().endProgress(msg); }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void info(String msg) { peekLogger().info(msg); }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void rawinfo(String msg) { peekLogger().rawinfo(msg); }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void log(String msg, int level) { peekLogger().log(msg, level); }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void progress() { peekLogger().progress(); }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void rawlog(String msg, int level) { peekLogger().rawlog(msg, level); }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void verbose(String msg) { peekLogger().verbose(msg); }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\MessageLoggerEngine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.MessageLoggerHelper,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class MessageLoggerHelper
/*    */ {
/*    */   public static void sumupProblems(MessageLogger logger) {
/* 25 */     List myProblems = logger.getProblems();
/* 26 */     if (myProblems.size() > 0) {
/* 27 */       List myWarns = logger.getWarns();
/* 28 */       List myErrors = logger.getErrors();
/* 29 */       logger.info("""");
/* 30 */       if (!myErrors.isEmpty()) {
/* 31 */         logger.log("":: problems summary ::"", 0);
/*    */       } else {
/* 33 */         logger.log("":: problems summary ::"", 1);
/*    */       } 
/* 35 */       if (myWarns.size() > 0) {
/* 36 */         logger.log("":::: WARNINGS"", 1);
/* 37 */         for (Iterator iter = myWarns.iterator(); iter.hasNext(); ) {
/* 38 */           String msg = iter.next();
/* 39 */           logger.log(""\t"" + msg + ""\n"", 1);
/*    */         } 
/*    */       } 
/* 42 */       if (myErrors.size() > 0) {
/* 43 */         logger.log("":::: ERRORS"", 0);
/* 44 */         for (Iterator iter = myErrors.iterator(); iter.hasNext(); ) {
/* 45 */           String msg = iter.next();
/* 46 */           logger.log(""\t"" + msg + ""\n"", 0);
/*    */         } 
/*    */       } 
/* 49 */       logger.info(""\n:: USE VERBOSE OR DEBUG MESSAGE LEVEL FOR MORE DETAILS"");
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\MessageLoggerHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.PropertiesFile,"/*    */ package org.apache.ivy.util;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.FileInputStream;
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.util.Properties;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PropertiesFile
/*    */   extends Properties
/*    */ {
/*    */   private File file;
/*    */   private String header;
/*    */   
/*    */   public PropertiesFile(File file, String header) {
/* 35 */     this.file = file;
/* 36 */     this.header = header;
/* 37 */     if (file.exists()) {
/* 38 */       FileInputStream fis = null;
/*    */       try {
/* 40 */         fis = new FileInputStream(file);
/* 41 */         load(fis);
/* 42 */       } catch (Exception ex) {
/* 43 */         Message.warn(""exception occured while reading properties file "" + file + "": "" + ex.getMessage());
/*    */       } 
/*    */       
/*    */       try {
/* 47 */         if (fis != null) {
/* 48 */           fis.close();
/*    */         }
/* 50 */       } catch (IOException e) {}
/*    */     } 
/*    */   }
/*    */ 
/*    */ 
/*    */   
/*    */   public void save() {
/* 57 */     FileOutputStream fos = null;
/*    */     try {
/* 59 */       if (this.file.getParentFile() != null && !this.file.getParentFile().exists()) {
/* 60 */         this.file.getParentFile().mkdirs();
/*    */       }
/* 62 */       fos = new FileOutputStream(this.file);
/* 63 */       store(fos, this.header);
/* 64 */     } catch (Exception ex) {
/* 65 */       Message.warn(""exception occured while writing properties file "" + this.file + "": "" + ex.getMessage());
/*    */     } 
/*    */     
/*    */     try {
/* 69 */       if (fos != null) {
/* 70 */         fos.close();
/*    */       }
/* 72 */     } catch (IOException e) {}
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\PropertiesFile.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.StringUtils,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.util.Locale;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StringUtils
/*     */ {
/*     */   public static String uncapitalize(String string) {
/*  36 */     if (string == null || string.length() == 0) {
/*  37 */       return string;
/*     */     }
/*  39 */     if (string.length() == 1) {
/*  40 */       return string.toLowerCase(Locale.US);
/*     */     }
/*  42 */     return string.substring(0, 1).toLowerCase(Locale.US) + string.substring(1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getErrorMessage(Throwable t) {
/*  55 */     if (t == null) {
/*  56 */       return """";
/*     */     }
/*  58 */     if (t instanceof InvocationTargetException) {
/*  59 */       InvocationTargetException ex = (InvocationTargetException)t;
/*  60 */       t = ex.getTargetException();
/*     */     } 
/*  62 */     String errMsg = (t instanceof RuntimeException) ? t.getMessage() : t.toString();
/*  63 */     if (errMsg == null || errMsg.length() == 0 || ""null"".equals(errMsg)) {
/*  64 */       errMsg = t.getClass().getName() + "" at "" + t.getStackTrace()[0].toString();
/*     */     }
/*  66 */     return errMsg;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStackTrace(Exception e) {
/*  77 */     if (e == null) {
/*  78 */       return """";
/*     */     }
/*  80 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*  81 */     PrintWriter printWriter = new PrintWriter(baos);
/*  82 */     e.printStackTrace(printWriter);
/*  83 */     printWriter.flush();
/*  84 */     String stackTrace = new String(baos.toByteArray());
/*  85 */     printWriter.close();
/*  86 */     return stackTrace;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String join(Object[] objs, String sep) {
/* 102 */     StringBuffer buf = new StringBuffer();
/* 103 */     for (int i = 0; i < objs.length; i++) {
/* 104 */       buf.append(objs[i]).append(sep);
/*     */     }
/* 106 */     if (objs.length > 0) {
/* 107 */       buf.setLength(buf.length() - sep.length());
/*     */     }
/* 109 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 114 */   private static final char[] SHIFTS = new char[] { Character.MIN_VALUE, '\001', '\002', '\003', '\004', '\005', '\006', '\007', '\b', '\t', '\n', '\013', '\f', '\r', '\016', '\017', '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027', '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037', 'r', 'x', '5', 'O', '`', 'm', 'H', 'l', 'F', '@', 'L', 'C', 't', 'J', 'D', 'W', 'o', '4', 'K', 'w', '1', '""', 'R', 'Q', '_', 'A', 'p', 'V', 'v', 'n', 'z', 'i', ')', '9', 'S', '+', '.', 'f', '(', 'Y', '&', 'g', '-', '2', '*', '{', '[', '#', '}', '7', '6', 'B', '|', '~', ';', '/', '\\', 'G', 's', 'N', 'X', 'k', 'j', '8', '$', 'y', 'u', 'h', 'e', 'd', 'E', 'I', 'c', '?', '^', ']', '\'', '%', '=', '0', ':', 'q', ' ', 'Z', ',', 'b', '<', '3', '!', 'a', '>', 'M', 'T', 'P', 'U', 'ß', 'á', 'Ø', '»', '¦', 'å', '½', 'Þ', '¼', '', 'ù', '', 'È', '¸', '', 'ø', '¾', 'Ç', 'ª', 'µ', 'Ì', '', 'è', 'Ú', '·', 'ÿ', 'ê', 'Ü', '÷', 'Õ', 'Ë', 'â', 'Á', '®', '¬', 'ä', 'ü', 'Ù', 'É', '', 'æ', 'Å', 'Ó', '', 'î', '¡', '³', ' ', 'Ô', 'Ï', 'Ý', 'þ', '­', 'Ê', '', 'à', '', '', 'Ä', 'Í', '', '', '', '', 'ö', 'À', '', 'ô', 'ï', '¹', '¨', '×', '', '', '¥', '´', '', '', 'º', 'Ö', '°', 'ã', 'ç', 'Û', '©', '¯', '', 'Î', 'Æ', '', '¤', '', 'Ò', '', '±', '', '', '¶', '', '', 'Ð', '¢', '', '§', 'Ñ', '', 'ñ', '', 'û', 'í', 'ì', '«', 'Ã', 'ó', 'é', 'ý', 'ð', 'Â', 'ú', '¿', '', '', '', 'õ', 'ë', '£', 'ò', '²', '' };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String encrypt(String str) {
/* 140 */     if (str == null) {
/* 141 */       return null;
/*     */     }
/* 143 */     StringBuffer buf = new StringBuffer();
/* 144 */     for (int i = 0; i < str.length(); i++) {
/* 145 */       char c = str.charAt(i);
/* 146 */       if (c >= SHIFTS.length) {
/* 147 */         throw new IllegalArgumentException(""encrypt method can only be used with simple characters. '"" + c + ""' not allowed"");
/*     */       }
/*     */ 
/*     */       
/* 151 */       buf.append(SHIFTS[c]);
/*     */     } 
/* 153 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String decrypt(String str) {
/* 164 */     if (str == null) {
/* 165 */       return null;
/*     */     }
/* 167 */     StringBuffer buf = new StringBuffer();
/* 168 */     for (int i = 0; i < str.length(); i++) {
/* 169 */       buf.append(decrypt(str.charAt(i)));
/*     */     }
/* 171 */     return buf.toString();
/*     */   }
/*     */   
/*     */   private static char decrypt(char c) {
/* 175 */     for (char i = Character.MIN_VALUE; i < SHIFTS.length; i = (char)(i + 1)) {
/* 176 */       if (SHIFTS[i] == c) {
/* 177 */         return i;
/*     */       }
/*     */     } 
/* 180 */     throw new IllegalArgumentException(""Impossible to decrypt '"" + c + ""'. Unhandled character."");
/*     */   }
/*     */ 
/*     */   
/*     */   public static String repeat(String str, int count) {
/* 185 */     StringBuffer sb = new StringBuffer();
/* 186 */     for (int i = 0; i < count; i++) {
/* 187 */       sb.append(str);
/*     */     }
/* 189 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\StringUtils.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.XMLHelper,"/*     */ package org.apache.ivy.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.ivy.plugins.repository.Resource;
/*     */ import org.apache.ivy.util.url.URLHandlerRegistry;
/*     */ import org.w3c.dom.Document;
/*     */ import org.xml.sax.EntityResolver;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXNotRecognizedException;
/*     */ import org.xml.sax.ext.LexicalHandler;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class XMLHelper
/*     */ {
/*  42 */   private static final SAXParserFactory VALIDATING_FACTORY = SAXParserFactory.newInstance();
/*     */   
/*  44 */   private static final SAXParserFactory FACTORY = SAXParserFactory.newInstance();
/*     */ 
/*     */   
/*     */   static final String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";
/*     */ 
/*     */   
/*     */   static final String JAXP_SCHEMA_SOURCE = ""http://java.sun.com/xml/jaxp/properties/schemaSource"";
/*     */   
/*     */   static final String XML_NAMESPACE_PREFIXES = ""http://xml.org/sax/features/namespace-prefixes"";
/*     */   
/*     */   static final String W3C_XML_SCHEMA = ""http://www.w3.org/2001/XMLSchema"";
/*     */   
/*     */   private static boolean canUseSchemaValidation = true;
/*     */   
/*     */   private static DocumentBuilder docBuilder;
/*     */ 
/*     */   
/*     */   static  {
/*  62 */     VALIDATING_FACTORY.setNamespaceAware(true);
/*  63 */     VALIDATING_FACTORY.setValidating(true);
/*     */   }
/*     */ 
/*     */   
/*     */   private static SAXParser newSAXParser(URL schema, InputStream schemaStream) throws ParserConfigurationException, SAXException {
/*  68 */     if (!canUseSchemaValidation || schema == null) {
/*  69 */       return FACTORY.newSAXParser();
/*     */     }
/*     */     try {
/*  72 */       SAXParser parser = VALIDATING_FACTORY.newSAXParser();
/*  73 */       parser.setProperty(""http://java.sun.com/xml/jaxp/properties/schemaLanguage"", ""http://www.w3.org/2001/XMLSchema"");
/*  74 */       parser.setProperty(""http://java.sun.com/xml/jaxp/properties/schemaSource"", schemaStream);
/*  75 */       parser.getXMLReader().setFeature(""http://xml.org/sax/features/namespace-prefixes"", true);
/*  76 */       return parser;
/*  77 */     } catch (SAXNotRecognizedException ex) {
/*  78 */       System.err.println(""WARNING: problem while setting JAXP validating property on SAXParser... XML validation will not be done: "" + ex.getMessage());
/*     */ 
/*     */       
/*  81 */       canUseSchemaValidation = false;
/*  82 */       return FACTORY.newSAXParser();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public static void parse(URL xmlURL, URL schema, DefaultHandler handler) throws SAXException, IOException, ParserConfigurationException { parse(xmlURL, schema, handler, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void parse(URL xmlURL, URL schema, DefaultHandler handler, LexicalHandler lHandler) throws SAXException, IOException, ParserConfigurationException {
/*  98 */     InputStream xmlStream = URLHandlerRegistry.getDefault().openStream(xmlURL);
/*     */     try {
/* 100 */       InputSource inSrc = new InputSource(xmlStream);
/* 101 */       inSrc.setSystemId(xmlURL.toExternalForm());
/* 102 */       parse(inSrc, schema, handler, lHandler);
/*     */     } finally {
/*     */       try {
/* 105 */         xmlStream.close();
/* 106 */       } catch (IOException e) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public static void parse(InputStream xmlStream, URL schema, DefaultHandler handler, LexicalHandler lHandler) throws SAXException, IOException, ParserConfigurationException { parse(new InputSource(xmlStream), schema, handler, lHandler); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void parse(InputSource xmlStream, URL schema, DefaultHandler handler, LexicalHandler lHandler) throws SAXException, IOException, ParserConfigurationException {
/* 121 */     InputStream schemaStream = null;
/*     */     try {
/* 123 */       if (schema != null) {
/* 124 */         schemaStream = URLHandlerRegistry.getDefault().openStream(schema);
/*     */       }
/* 126 */       SAXParser parser = newSAXParser(schema, schemaStream);
/*     */       
/* 128 */       if (lHandler != null) {
/*     */         try {
/* 130 */           parser.setProperty(""http://xml.org/sax/properties/lexical-handler"", lHandler);
/* 131 */         } catch (SAXException ex) {
/* 132 */           System.err.println(""WARNING: problem while setting the lexical handler property on SAXParser: "" + ex.getMessage());
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 139 */       parser.parse(xmlStream, handler);
/*     */     } finally {
/* 141 */       if (schemaStream != null) {
/*     */         try {
/* 143 */           schemaStream.close();
/* 144 */         } catch (IOException ex) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public static boolean canUseSchemaValidation() { return canUseSchemaValidation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String escape(String text) {
/* 168 */     if (text == null) {
/* 169 */       return null;
/*     */     }
/*     */     
/* 172 */     StringBuffer result = new StringBuffer(text.length());
/*     */     
/* 174 */     char[] chars = text.toCharArray();
/* 175 */     for (int i = 0; i < chars.length; i++) {
/* 176 */       switch (chars[i]) {
/*     */         case '&':
/* 178 */           result.append(""&amp;"");
/*     */           break;
/*     */         case '<':
/* 181 */           result.append(""&lt;"");
/*     */           break;
/*     */         case '\'':
/* 184 */           result.append(""&apos;"");
/*     */           break;
/*     */         case '""':
/* 187 */           result.append(""&quot;"");
/*     */           break;
/*     */         default:
/* 190 */           result.append(chars[i]);
/*     */           break;
/*     */       } 
/*     */     } 
/* 194 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static Document parseToDom(InputStream stream, Resource res, EntityResolver entityResolver) throws IOException, SAXException {
/*     */     Document pomDomDoc;
/* 201 */     DocumentBuilder docBuilder = getDocBuilder(entityResolver);
/*     */     
/*     */     try {
/* 204 */       pomDomDoc = docBuilder.parse(stream, res.getName());
/* 205 */     } catch (SAXException e) {
/* 206 */       e.printStackTrace();
/* 207 */       throw e;
/*     */     } finally {
/* 209 */       stream.close();
/*     */     } 
/* 211 */     return pomDomDoc;
/*     */   }
/*     */   
/*     */   public static DocumentBuilder getDocBuilder(EntityResolver entityResolver) {
/* 215 */     if (docBuilder == null) {
/*     */       try {
/* 217 */         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
/* 218 */         factory.setValidating(false);
/* 219 */         docBuilder = factory.newDocumentBuilder();
/* 220 */         if (entityResolver != null) {
/* 221 */           docBuilder.setEntityResolver(entityResolver);
/*     */         }
/* 223 */       } catch (ParserConfigurationException e) {
/* 224 */         throw new RuntimeException(e);
/*     */       } 
/*     */     }
/* 227 */     return docBuilder;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\XMLHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.cli.CommandLine,"/*    */ package org.apache.ivy.util.cli;
/*    */ 
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CommandLine
/*    */ {
/* 24 */   private Map optionValues = new HashMap();
/*    */   
/*    */   private String[] leftOverArgs;
/*    */   
/* 28 */   void addOptionValues(String option, String[] values) { this.optionValues.put(option, values); }
/*    */ 
/*    */ 
/*    */   
/* 32 */   void setLeftOverArgs(String[] args) { this.leftOverArgs = args; }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public boolean hasOption(String option) { return this.optionValues.containsKey(option); }
/*    */ 
/*    */   
/*    */   public String getOptionValue(String option) {
/* 40 */     String[] values = getOptionValues(option);
/* 41 */     return (values == null || values.length == 0) ? null : values[0];
/*    */   }
/*    */   
/*    */   public String getOptionValue(String option, String defaultValue) {
/* 45 */     String value = getOptionValue(option);
/* 46 */     return (value == null) ? defaultValue : value;
/*    */   }
/*    */ 
/*    */   
/* 50 */   public String[] getOptionValues(String option) { return (String[])this.optionValues.get(option); }
/*    */ 
/*    */ 
/*    */   
/* 54 */   public String[] getLeftOverArgs() { return this.leftOverArgs; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\cli\CommandLine.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.cli.CommandLineParser,"/*     */ package org.apache.ivy.util.cli;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedHashMap;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CommandLineParser
/*     */ {
/*     */   private static final int MIN_DESC_WIDTH = 40;
/*     */   private static final int MAX_SPEC_WIDTH = 30;
/*  35 */   private Map options = new LinkedHashMap();
/*  36 */   private Map categories = new LinkedHashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public CommandLineParser addCategory(String category) {
/*  42 */     this.categories.put(category, new ArrayList());
/*  43 */     return this;
/*     */   }
/*     */   
/*     */   public CommandLineParser addOption(Option option) {
/*  47 */     this.options.put(option.getName(), option);
/*  48 */     if (!this.categories.isEmpty()) {
/*  49 */       ((List)this.categories.values().toArray()[this.categories.values().size() - 1]).add(option);
/*     */     }
/*     */     
/*  52 */     return this;
/*     */   }
/*     */   
/*     */   public CommandLine parse(String[] args) throws ParseException {
/*  56 */     CommandLine line = new CommandLine();
/*     */     
/*  58 */     int index = args.length;
/*  59 */     ListIterator iterator = Arrays.asList(args).listIterator();
/*  60 */     while (iterator.hasNext()) {
/*  61 */       String arg = iterator.next();
/*  62 */       if (""--"".equals(arg)) {
/*     */         
/*  64 */         index = iterator.nextIndex();
/*     */         
/*     */         break;
/*     */       } 
/*  68 */       if (!arg.startsWith(""-"")) {
/*  69 */         index = iterator.previousIndex();
/*     */         
/*     */         break;
/*     */       } 
/*  73 */       Option option = (Option)this.options.get(arg.substring(1));
/*  74 */       if (option == null) {
/*  75 */         throw new ParseException(""Unrecognized option: "" + arg);
/*     */       }
/*  77 */       line.addOptionValues(arg.substring(1), option.parse(iterator));
/*     */     } 
/*     */ 
/*     */     
/*  81 */     String[] leftOverArgs = new String[args.length - index];
/*  82 */     System.arraycopy(args, index, leftOverArgs, 0, leftOverArgs.length);
/*  83 */     line.setLeftOverArgs(leftOverArgs);
/*     */     
/*  85 */     return line;
/*     */   }
/*     */   
/*     */   public void printHelp(PrintWriter pw, int width, String command, boolean showDeprecated) {
/*  89 */     pw.println(""usage: "" + command);
/*     */     
/*  91 */     int specWidth = 0;
/*  92 */     for (Iterator iterator = this.options.values().iterator(); iterator.hasNext(); ) {
/*  93 */       Option option = iterator.next();
/*  94 */       if (option.isDeprecated() && !showDeprecated) {
/*     */         continue;
/*     */       }
/*  97 */       specWidth = Math.min(30, Math.max(specWidth, option.getSpec().length()));
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 102 */     for (Iterator iterator = this.categories.entrySet().iterator(); iterator.hasNext(); ) {
/* 103 */       Map.Entry entry = iterator.next();
/* 104 */       String category = (String)entry.getKey();
/* 105 */       pw.println(""==== "" + category);
/* 106 */       List options = (List)entry.getValue();
/* 107 */       for (Iterator it = options.iterator(); it.hasNext(); ) {
/* 108 */         Option option = it.next();
/* 109 */         if (option.isDeprecated() && !showDeprecated) {
/*     */           continue;
/*     */         }
/*     */         
/* 113 */         String spec = option.getSpec();
/* 114 */         pw.print("" "" + spec);
/* 115 */         int specLength = spec.length() + 1;
/* 116 */         pw.print(StringUtils.repeat("" "", specWidth - specLength));
/*     */ 
/*     */         
/* 119 */         StringBuffer desc = new StringBuffer((option.isDeprecated() ? ""DEPRECATED: "" : """") + option.getDescription());
/*     */         
/* 121 */         int count = Math.min(desc.length(), width - Math.max(specLength, specWidth));
/*     */         
/* 123 */         if (count > 40 || desc.length() + specLength < width) {
/* 124 */           pw.print(desc.substring(0, count));
/* 125 */           desc.delete(0, count);
/*     */         } 
/* 127 */         pw.println();
/*     */ 
/*     */         
/* 130 */         while (desc.length() > 0) {
/* 131 */           pw.print(StringUtils.repeat("" "", specWidth));
/* 132 */           count = Math.min(desc.length(), width - specWidth);
/* 133 */           pw.println(desc.substring(0, count));
/* 134 */           desc.delete(0, count);
/*     */         } 
/*     */       } 
/* 137 */       pw.println();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\cli\CommandLineParser.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.cli.Option,"/*     */ package org.apache.ivy.util.cli;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Option
/*     */ {
/*     */   private String name;
/*     */   private String[] args;
/*     */   private String description;
/*     */   private boolean required;
/*     */   private boolean countArgs;
/*     */   private boolean deprecated;
/*     */   
/*     */   Option(String name, String[] args, String description, boolean required, boolean countArgs, boolean deprecated) {
/*  34 */     this.name = name;
/*  35 */     this.args = args;
/*  36 */     this.description = description;
/*  37 */     this.required = required;
/*  38 */     this.countArgs = countArgs;
/*  39 */     this.deprecated = deprecated;
/*  40 */     if (required) {
/*  41 */       throw new UnsupportedOperationException(""required option not supported yet"");
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*  46 */   public String getName() { return this.name; }
/*     */ 
/*     */   
/*  49 */   public String[] getArgs() { return this.args; }
/*     */ 
/*     */   
/*  52 */   public String getDescription() { return this.description; }
/*     */ 
/*     */   
/*  55 */   public boolean isRequired() { return this.required; }
/*     */ 
/*     */   
/*  58 */   public boolean isCountArgs() { return this.countArgs; }
/*     */ 
/*     */   
/*  61 */   public boolean isDeprecated() { return this.deprecated; }
/*     */ 
/*     */   
/*     */   String[] parse(ListIterator iterator) throws ParseException {
/*  65 */     if (isCountArgs()) {
/*  66 */       String[] values = new String[this.args.length];
/*  67 */       for (int i = 0; i < values.length; i++) {
/*  68 */         if (!iterator.hasNext()) {
/*  69 */           missingArgument(i);
/*     */         }
/*  71 */         values[i] = iterator.next();
/*  72 */         if (values[i].startsWith(""-"")) {
/*  73 */           missingArgument(i);
/*     */         }
/*     */       } 
/*  76 */       return values;
/*     */     } 
/*  78 */     List values = new ArrayList();
/*  79 */     while (iterator.hasNext()) {
/*  80 */       String value = iterator.next();
/*  81 */       if (value.startsWith(""-"")) {
/*  82 */         iterator.previous();
/*     */         break;
/*     */       } 
/*  85 */       values.add(value);
/*     */     } 
/*  87 */     return values.toArray(new String[values.size()]);
/*     */   }
/*     */ 
/*     */   
/*     */   private void missingArgument(int i) throws ParseException {
/*  92 */     if (i == 0) {
/*  93 */       throw new ParseException(""no argument for: "" + this.name);
/*     */     }
/*  95 */     throw new ParseException(""missing argument for: "" + this.name + "". Expected: "" + getArgsSpec());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public String getSpec() { return ""-"" + this.name + "" "" + getArgsSpec(); }
/*     */ 
/*     */   
/*     */   private String getArgsSpec() {
/* 105 */     if (this.args.length == 0) {
/* 106 */       return """";
/*     */     }
/* 108 */     StringBuffer sb = new StringBuffer();
/* 109 */     for (int i = 0; i < this.args.length; i++) {
/* 110 */       sb.append(""<"").append(this.args[i]).append(""> "");
/*     */     }
/* 112 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\cli\Option.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.cli.OptionBuilder,"/*    */ package org.apache.ivy.util.cli;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.List;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OptionBuilder
/*    */ {
/*    */   private String name;
/* 25 */   private List args = new ArrayList();
/* 26 */   private String description = """";
/*    */   
/*    */   private boolean required = false;
/*    */   private boolean countArgs = true;
/*    */   private boolean deprecated = false;
/*    */   
/* 32 */   public OptionBuilder(String name) { this.name = name; }
/*    */ 
/*    */   
/*    */   public OptionBuilder required(boolean required) {
/* 36 */     this.required = required;
/* 37 */     return this;
/*    */   }
/*    */   
/*    */   public OptionBuilder description(String description) {
/* 41 */     this.description = description;
/* 42 */     return this;
/*    */   }
/*    */   
/*    */   public OptionBuilder arg(String argName) {
/* 46 */     this.args.add(argName);
/* 47 */     return this;
/*    */   }
/*    */   
/*    */   public OptionBuilder countArgs(boolean countArgs) {
/* 51 */     this.countArgs = countArgs;
/* 52 */     return this;
/*    */   }
/*    */   
/*    */   public OptionBuilder deprecated() {
/* 56 */     this.deprecated = true;
/* 57 */     return this;
/*    */   }
/*    */ 
/*    */   
/* 61 */   public Option create() { return new Option(this.name, (String[])this.args.toArray((Object[])new String[this.args.size()]), this.description, this.required, this.countArgs, this.deprecated); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\cli\OptionBuilder.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.cli.ParseException,"/*    */ package org.apache.ivy.util.cli;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ParseException
/*    */   extends Exception
/*    */ {
/* 22 */   public ParseException(String reason) { super(reason); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\cli\ParseException.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.extendable.DefaultExtendableItem,"/*    */ package org.apache.ivy.util.extendable;
/*    */ 
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DefaultExtendableItem
/*    */   extends UnmodifiableExtendableItem
/*    */ {
/* 27 */   public DefaultExtendableItem() { this(null, null); }
/*    */ 
/*    */ 
/*    */   
/* 31 */   public DefaultExtendableItem(Map stdAttributes, Map extraAttributes) { super(stdAttributes, extraAttributes); }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public void setExtraAttribute(String attName, String attValue) { super.setExtraAttribute(attName, attValue); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\extendable\DefaultExtendableItem.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.extendable.ExtendableItem,"package org.apache.ivy.util.extendable;
import java.util.Map;
public interface ExtendableItem {
  String getAttribute(String paramString);
  String getExtraAttribute(String paramString);
  Map getAttributes();
  Map getExtraAttributes();
  Map getQualifiedExtraAttributes();
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\extendable\ExtendableItem.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.extendable.ExtendableItemHelper,"/*    */ package org.apache.ivy.util.extendable;
/*    */ 
/*    */ import java.util.Arrays;
/*    */ import java.util.Collection;
/*    */ import java.util.HashMap;
/*    */ import java.util.Iterator;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.plugins.parser.ParserSettings;
/*    */ import org.xml.sax.Attributes;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class ExtendableItemHelper
/*    */ {
/*    */   public static Map getExtraAttributes(Attributes attributes, String prefix) {
/* 34 */     Map ret = new HashMap();
/* 35 */     for (int i = 0; i < attributes.getLength(); i++) {
/* 36 */       if (attributes.getQName(i).startsWith(prefix)) {
/* 37 */         ret.put(attributes.getQName(i).substring(prefix.length()), attributes.getValue(i));
/*    */       }
/*    */     } 
/* 40 */     return ret;
/*    */   }
/*    */ 
/*    */   
/*    */   public static Map getExtraAttributes(ParserSettings settings, Attributes attributes, String[] ignoredAttNames) {
/* 45 */     Map ret = new HashMap();
/* 46 */     Collection ignored = Arrays.asList(ignoredAttNames);
/* 47 */     for (int i = 0; i < attributes.getLength(); i++) {
/* 48 */       if (!ignored.contains(attributes.getQName(i))) {
/* 49 */         ret.put(attributes.getQName(i), settings.substitute(attributes.getValue(i)));
/*    */       }
/*    */     } 
/* 52 */     return ret;
/*    */   }
/*    */ 
/*    */   
/*    */   public static void fillExtraAttributes(ParserSettings settings, DefaultExtendableItem item, Attributes attributes, String[] ignoredAttNames) {
/* 57 */     Map att = getExtraAttributes(settings, attributes, ignoredAttNames);
/* 58 */     for (Iterator iter = att.keySet().iterator(); iter.hasNext(); ) {
/* 59 */       String attName = iter.next();
/* 60 */       String attValue = (String)att.get(attName);
/* 61 */       item.setExtraAttribute(attName, attValue);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\extendable\ExtendableItemHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.extendable.UnmodifiableExtendableItem,"/*    */ package org.apache.ivy.util.extendable;
/*    */ 
/*    */ import java.util.Collections;
/*    */ import java.util.HashMap;
/*    */ import java.util.Iterator;
/*    */ import java.util.Map;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class UnmodifiableExtendableItem
/*    */   implements ExtendableItem
/*    */ {
/* 27 */   private final Map attributes = new HashMap();
/*    */   
/* 29 */   private final Map unmodifiableAttributesView = Collections.unmodifiableMap(this.attributes);
/*    */   
/* 31 */   private final Map extraAttributes = new HashMap();
/*    */   
/* 33 */   private final Map unmodifiableExtraAttributesView = Collections.unmodifiableMap(this.extraAttributes);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 40 */   private final Map qualifiedExtraAttributes = new HashMap();
/*    */   
/* 42 */   private final Map unmodifiableQualifiedExtraAttributesView = Collections.unmodifiableMap(this.qualifiedExtraAttributes);
/*    */ 
/*    */   
/*    */   public UnmodifiableExtendableItem(Map stdAttributes, Map extraAttributes) {
/* 46 */     if (stdAttributes != null) {
/* 47 */       this.attributes.putAll(stdAttributes);
/*    */     }
/* 49 */     if (extraAttributes != null) {
/* 50 */       for (Iterator iter = extraAttributes.entrySet().iterator(); iter.hasNext(); ) {
/* 51 */         Map.Entry extraAtt = iter.next();
/* 52 */         setExtraAttribute((String)extraAtt.getKey(), (String)extraAtt.getValue());
/*    */       } 
/*    */     }
/*    */   }
/*    */ 
/*    */   
/* 58 */   public String getAttribute(String attName) { return (String)this.attributes.get(attName); }
/*    */ 
/*    */   
/*    */   public String getExtraAttribute(String attName) {
/* 62 */     String v = (String)this.qualifiedExtraAttributes.get(attName);
/* 63 */     if (v == null) {
/* 64 */       v = (String)this.extraAttributes.get(attName);
/*    */     }
/* 66 */     return v;
/*    */   }
/*    */ 
/*    */   
/*    */   protected void setExtraAttribute(String attName, String attValue) {
/* 71 */     this.qualifiedExtraAttributes.put(attName, attValue);
/*    */ 
/*    */     
/* 74 */     int index = attName.indexOf(':');
/* 75 */     if (index != -1) {
/* 76 */       attName = attName.substring(index + 1);
/*    */     }
/* 78 */     this.extraAttributes.put(attName, attValue);
/* 79 */     this.attributes.put(attName, attValue);
/*    */   }
/*    */ 
/*    */   
/* 83 */   protected void setStandardAttribute(String attName, String attValue) { this.attributes.put(attName, attValue); }
/*    */ 
/*    */ 
/*    */   
/* 87 */   public Map getAttributes() { return this.unmodifiableAttributesView; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 92 */   public Map getExtraAttributes() { return this.unmodifiableExtraAttributesView; }
/*    */ 
/*    */ 
/*    */   
/* 96 */   public Map getQualifiedExtraAttributes() { return this.unmodifiableQualifiedExtraAttributesView; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\extendable\UnmodifiableExtendableItem.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.AndFilter,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AndFilter
/*    */   implements Filter
/*    */ {
/*    */   private Filter op1;
/*    */   private Filter op2;
/*    */   
/*    */   public AndFilter(Filter op1, Filter op2) {
/* 26 */     this.op1 = op1;
/* 27 */     this.op2 = op2;
/*    */   }
/*    */ 
/*    */   
/* 31 */   public Filter getOp1() { return this.op1; }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public Filter getOp2() { return this.op2; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public boolean accept(Object o) { return (this.op1.accept(o) && this.op2.accept(o)); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\AndFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.ArtifactTypeFilter,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Collection;
/*    */ import org.apache.ivy.core.module.descriptor.Artifact;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ArtifactTypeFilter
/*    */   implements Filter
/*    */ {
/*    */   private Collection acceptedTypes;
/*    */   
/* 29 */   public ArtifactTypeFilter(Collection acceptedTypes) { this.acceptedTypes = new ArrayList(acceptedTypes); }
/*    */ 
/*    */   
/*    */   public boolean accept(Object o) {
/* 33 */     if (!(o instanceof Artifact)) {
/* 34 */       return false;
/*    */     }
/* 36 */     Artifact art = (Artifact)o;
/* 37 */     return this.acceptedTypes.contains(art.getType());
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\ArtifactTypeFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.Filter,"package org.apache.ivy.util.filter;
public interface Filter {
  boolean accept(Object paramObject);
}
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\Filter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.FilterHelper,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Collection;
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class FilterHelper
/*    */ {
/* 29 */   public static final Filter NO_FILTER = NoFilter.INSTANCE;
/*    */   
/*    */   public static Filter getArtifactTypeFilter(String types) {
/* 32 */     if (types == null || types.trim().equals(""*"")) {
/* 33 */       return NO_FILTER;
/*    */     }
/* 35 */     String[] t = types.split("","");
/* 36 */     List acceptedTypes = new ArrayList(t.length);
/* 37 */     for (int i = 0; i < t.length; i++) {
/* 38 */       acceptedTypes.add(t[i].trim());
/*    */     }
/* 40 */     return new ArtifactTypeFilter(acceptedTypes);
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static Collection filter(Collection col, Filter filter) {
/* 57 */     if (filter == null) {
/* 58 */       return col;
/*    */     }
/* 60 */     Collection ret = new ArrayList(col);
/* 61 */     for (Iterator iter = ret.iterator(); iter.hasNext(); ) {
/* 62 */       Object element = iter.next();
/* 63 */       if (!filter.accept(element)) {
/* 64 */         iter.remove();
/*    */       }
/*    */     } 
/* 67 */     return ret;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\FilterHelper.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.NoFilter,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class NoFilter
/*    */   implements Filter
/*    */ {
/* 21 */   public static final Filter INSTANCE = new NoFilter();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 27 */   public boolean accept(Object o) { return true; }
/*    */ 
/*    */ 
/*    */   
/* 31 */   public String toString() { return ""NoFilter""; }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\NoFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.NotFilter,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NotFilter
/*    */   implements Filter
/*    */ {
/*    */   private Filter op;
/*    */   
/* 24 */   public NotFilter(Filter op) { this.op = op; }
/*    */ 
/*    */ 
/*    */   
/* 28 */   public Filter getOp() { return this.op; }
/*    */ 
/*    */ 
/*    */   
/* 32 */   public boolean accept(Object o) { return !this.op.accept(o); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\NotFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.filter.OrFilter,"/*    */ package org.apache.ivy.util.filter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OrFilter
/*    */   implements Filter
/*    */ {
/*    */   private Filter op1;
/*    */   private Filter op2;
/*    */   
/*    */   public OrFilter(Filter op1, Filter op2) {
/* 26 */     this.op1 = op1;
/* 27 */     this.op2 = op2;
/*    */   }
/*    */ 
/*    */   
/* 31 */   public Filter getOp1() { return this.op1; }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public Filter getOp2() { return this.op2; }
/*    */ 
/*    */ 
/*    */   
/* 39 */   public boolean accept(Object o) { return (this.op1.accept(o) || this.op2.accept(o)); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\util\filter\OrFilter.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.AbstractURLHandler,"/*     */ package org.apache.ivy.util.url;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.net.URL;
/*     */ import java.util.regex.Pattern;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractURLHandler
/*     */   implements URLHandler
/*     */ {
/*  30 */   private static final Pattern ESCAPE_PATTERN = Pattern.compile(""%25([0-9a-fA-F][0-9a-fA-F])"");
/*     */ 
/*     */   
/*  33 */   private static int requestMethod = 2;
/*     */ 
/*     */   
/*  36 */   public boolean isReachable(URL url) { return getURLInfo(url).isReachable(); }
/*     */ 
/*     */ 
/*     */   
/*  40 */   public boolean isReachable(URL url, int timeout) { return getURLInfo(url, timeout).isReachable(); }
/*     */ 
/*     */ 
/*     */   
/*  44 */   public long getContentLength(URL url) { return getURLInfo(url).getContentLength(); }
/*     */ 
/*     */ 
/*     */   
/*  48 */   public long getContentLength(URL url, int timeout) { return getURLInfo(url, timeout).getContentLength(); }
/*     */ 
/*     */ 
/*     */   
/*  52 */   public long getLastModified(URL url) { return getURLInfo(url).getLastModified(); }
/*     */ 
/*     */ 
/*     */   
/*  56 */   public long getLastModified(URL url, int timeout) { return getURLInfo(url, timeout).getLastModified(); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void validatePutStatusCode(URL dest, int statusCode, String statusMessage) throws IOException {
/*  61 */     switch (statusCode) {
/*     */       case 200:
/*     */       case 201:
/*     */       case 202:
/*     */       case 204:
/*     */         return;
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       case 401:
/*     */       case 403:
/*  73 */         throw new IOException(""Access to URL "" + dest + "" was refused by the server"" + ((statusMessage == null) ? """" : ("": "" + statusMessage)));
/*     */     } 
/*     */     
/*  76 */     throw new IOException(""PUT operation to URL "" + dest + "" failed with status code "" + statusCode + ((statusMessage == null) ? """" : ("": "" + statusMessage)));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void setRequestMethod(int requestMethod) { AbstractURLHandler.requestMethod = requestMethod; }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public int getRequestMethod() { return requestMethod; }
/*     */ 
/*     */   
/*     */   protected String normalizeToString(URL url) throws IOException {
/*  90 */     if (!""http"".equals(url.getProtocol()) && !""https"".equals(url.getProtocol())) {
/*  91 */       return url.toExternalForm();
/*     */     }
/*     */     
/*     */     try {
/*  95 */       URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getRef());
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 100 */       String uriString = uri.toASCIIString();
/*     */ 
/*     */       
/* 103 */       uriString = uriString.replaceAll(""\\+"", ""%2B"");
/*     */       
/* 105 */       return ESCAPE_PATTERN.matcher(uriString).replaceAll(""%$1"");
/* 106 */     } catch (URISyntaxException e) {
/* 107 */       IOException ioe = new MalformedURLException(""Couldn't convert '"" + url.toString() + ""' to a valid URI"");
/*     */       
/* 109 */       ioe.initCause(e);
/* 110 */       throw ioe;
/*     */     } 
/*     */   }
/*     */   
/*     */   protected URL normalizeToURL(URL url) throws IOException {
/* 115 */     if (!""http"".equals(url.getProtocol()) && !""https"".equals(url.getProtocol())) {
/* 116 */       return url;
/*     */     }
/*     */     
/* 119 */     return new URL(normalizeToString(url));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\AbstractURLHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.ApacheURLLister,"/*     */ package org.apache.ivy.util.url;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import java.util.Locale;
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ApacheURLLister
/*     */ {
/*  41 */   private static final Pattern PATTERN = Pattern.compile(""<a[^>]*href=\""([^\""]*)\""[^>]*>(?:<[^>]+>)*?([^<>]+?)(?:<[^>]+>)*?</a>"", 2);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  57 */   public List listAll(URL url) throws IOException { return retrieveListing(url, true, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   public List listDirectories(URL url) throws IOException { return retrieveListing(url, false, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   public List listFiles(URL url) throws IOException { return retrieveListing(url, true, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List retrieveListing(URL url, boolean includeFiles, boolean includeDirectories) throws IOException {
/* 103 */     List urlList = new ArrayList();
/*     */ 
/*     */     
/* 106 */     if (!url.getPath().endsWith(""/"") && !url.getPath().endsWith("".html"")) {
/* 107 */       url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getPath() + ""/"");
/*     */     }
/*     */     
/* 110 */     BufferedReader r = new BufferedReader(new InputStreamReader(URLHandlerRegistry.getDefault().openStream(url)));
/*     */ 
/*     */     
/* 113 */     String htmlText = FileUtil.readEntirely(r);
/*     */     
/* 115 */     Matcher matcher = PATTERN.matcher(htmlText);
/*     */     
/* 117 */     while (matcher.find()) {
/*     */       
/* 119 */       String href = matcher.group(1);
/* 120 */       String text = matcher.group(2);
/*     */       
/* 122 */       if (href == null || text == null) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */       
/* 127 */       text = text.trim();
/*     */       
/* 129 */       if (href.startsWith(""../"")) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 135 */       if (href.startsWith(""/"")) {
/* 136 */         int slashIndex = href.substring(0, href.length() - 1).lastIndexOf('/');
/* 137 */         href = href.substring(slashIndex + 1);
/*     */       } 
/*     */ 
/*     */       
/* 141 */       if (href.startsWith(""./"")) {
/* 142 */         href = href.substring(""./"".length());
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 148 */       int dotIndex = text.indexOf('.');
/*     */       
/* 150 */       if ((dotIndex != -1 && !href.startsWith(text.substring(0, dotIndex))) || (dotIndex == -1 && !href.toLowerCase(Locale.US).equals(text.toLowerCase(Locale.US)))) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 157 */       boolean directory = href.endsWith(""/"");
/*     */       
/* 159 */       if ((directory && includeDirectories) || (!directory && includeFiles)) {
/* 160 */         URL child = new URL(url, href);
/* 161 */         urlList.add(child);
/* 162 */         Message.debug(""ApacheURLLister found URL=["" + child + ""]."");
/*     */       } 
/*     */     } 
/*     */     
/* 166 */     return urlList;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\ApacheURLLister.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.BasicURLHandler,"/*     */ package org.apache.ivy.util.url;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.net.HttpURLConnection;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.net.UnknownHostException;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BasicURLHandler
/*     */   extends AbstractURLHandler
/*     */ {
/*     */   private static final int BUFFER_SIZE = 65536;
/*     */   
/*     */   private static final class HttpStatus
/*     */   {
/*     */     static final int SC_OK = 200;
/*     */     static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407;
/*     */   }
/*     */   
/*  54 */   public BasicURLHandler() { Message.debug(""installing "" + IvyAuthenticator.INSTANCE.getClass()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  61 */   public URLHandler.URLInfo getURLInfo(URL url) { return getURLInfo(url, 0); }
/*     */ 
/*     */   
/*     */   public URLHandler.URLInfo getURLInfo(URL url, int timeout) {
/*  65 */     URLConnection con = null;
/*     */     try {
/*  67 */       url = normalizeToURL(url);
/*  68 */       con = url.openConnection();
/*  69 */       con.setRequestProperty(""User-Agent"", ""Apache Ivy/"" + Ivy.getIvyVersion());
/*  70 */       if (con instanceof HttpURLConnection) {
/*  71 */         HttpURLConnection httpCon = (HttpURLConnection)con;
/*  72 */         if (getRequestMethod() == 2) {
/*  73 */           httpCon.setRequestMethod(""HEAD"");
/*     */         }
/*  75 */         if (checkStatusCode(url, httpCon)) {
/*  76 */           return new URLHandler.URLInfo(true, httpCon.getContentLength(), con.getLastModified());
/*     */         }
/*     */       } else {
/*  79 */         int contentLength = con.getContentLength();
/*  80 */         if (contentLength <= 0) {
/*  81 */           return UNAVAILABLE;
/*     */         }
/*  83 */         return new URLHandler.URLInfo(true, contentLength, con.getLastModified());
/*     */       }
/*     */     
/*  86 */     } catch (UnknownHostException e) {
/*  87 */       Message.warn(""Host "" + e.getMessage() + "" not found. url="" + url);
/*  88 */       Message.info(""You probably access the destination server through a proxy server that is not well configured."");
/*     */     }
/*  90 */     catch (IOException e) {
/*  91 */       Message.error(""Server access Error: "" + e.getMessage() + "" url="" + url);
/*     */     } finally {
/*  93 */       disconnect(con);
/*     */     } 
/*  95 */     return UNAVAILABLE;
/*     */   }
/*     */   
/*     */   private boolean checkStatusCode(URL url, HttpURLConnection con) throws IOException {
/*  99 */     int status = con.getResponseCode();
/* 100 */     if (status == 200) {
/* 101 */       return true;
/*     */     }
/* 103 */     Message.debug(""HTTP response status: "" + status + "" url="" + url);
/* 104 */     if (status == 407) {
/* 105 */       Message.warn(""Your proxy requires authentication."");
/* 106 */     } else if (String.valueOf(status).startsWith(""4"")) {
/* 107 */       Message.verbose(""CLIENT ERROR: "" + con.getResponseMessage() + "" url="" + url);
/*     */     }
/* 109 */     else if (String.valueOf(status).startsWith(""5"")) {
/* 110 */       Message.error(""SERVER ERROR: "" + con.getResponseMessage() + "" url="" + url);
/*     */     } 
/*     */     
/* 113 */     return false;
/*     */   }
/*     */   
/*     */   public InputStream openStream(URL url) throws IOException {
/* 117 */     URLConnection conn = null;
/* 118 */     InputStream inStream = null;
/*     */     try {
/* 120 */       url = normalizeToURL(url);
/* 121 */       conn = url.openConnection();
/* 122 */       conn.setRequestProperty(""User-Agent"", ""Apache Ivy/"" + Ivy.getIvyVersion());
/* 123 */       if (conn instanceof HttpURLConnection) {
/* 124 */         HttpURLConnection httpCon = (HttpURLConnection)conn;
/* 125 */         if (!checkStatusCode(url, httpCon)) {
/* 126 */           throw new IOException(""The HTTP response code for "" + url + "" did not indicate a success."" + "" See log for more detail."");
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 131 */       inStream = conn.getInputStream();
/* 132 */       ByteArrayOutputStream outStream = new ByteArrayOutputStream();
/*     */       
/* 134 */       byte[] buffer = new byte[65536];
/*     */       int len;
/* 136 */       while ((len = inStream.read(buffer)) > 0) {
/* 137 */         outStream.write(buffer, 0, len);
/*     */       }
/* 139 */       return new ByteArrayInputStream(outStream.toByteArray());
/*     */     } finally {
/* 141 */       if (inStream != null) {
/* 142 */         inStream.close();
/*     */       }
/*     */       
/* 145 */       disconnect(conn);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void download(URL src, File dest, CopyProgressListener l) throws IOException {
/* 150 */     URLConnection srcConn = null;
/*     */     try {
/* 152 */       src = normalizeToURL(src);
/* 153 */       srcConn = src.openConnection();
/* 154 */       srcConn.setRequestProperty(""User-Agent"", ""Apache Ivy/"" + Ivy.getIvyVersion());
/* 155 */       if (srcConn instanceof HttpURLConnection) {
/* 156 */         HttpURLConnection httpCon = (HttpURLConnection)srcConn;
/* 157 */         if (!checkStatusCode(src, httpCon)) {
/* 158 */           throw new IOException(""The HTTP response code for "" + src + "" did not indicate a success."" + "" See log for more detail."");
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 163 */       int contentLength = srcConn.getContentLength();
/* 164 */       FileUtil.copy(srcConn.getInputStream(), dest, l);
/* 165 */       if (dest.length() != contentLength && contentLength != -1) {
/* 166 */         dest.delete();
/* 167 */         throw new IOException(""Downloaded file size doesn't match expected Content Length for "" + src + "". Please retry."");
/*     */       } 
/*     */ 
/*     */       
/* 171 */       long lastModified = srcConn.getLastModified();
/* 172 */       if (lastModified > 0L) {
/* 173 */         dest.setLastModified(lastModified);
/*     */       }
/*     */     } finally {
/* 176 */       disconnect(srcConn);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void upload(File source, URL dest, CopyProgressListener l) throws IOException {
/* 181 */     if (!""http"".equals(dest.getProtocol()) && !""https"".equals(dest.getProtocol())) {
/* 182 */       throw new UnsupportedOperationException(""URL repository only support HTTP PUT at the moment"");
/*     */     }
/*     */ 
/*     */     
/* 186 */     HttpURLConnection conn = null;
/*     */     try {
/* 188 */       dest = normalizeToURL(dest);
/* 189 */       conn = (HttpURLConnection)dest.openConnection();
/* 190 */       conn.setDoOutput(true);
/* 191 */       conn.setRequestMethod(""PUT"");
/* 192 */       conn.setRequestProperty(""User-Agent"", ""Apache Ivy/"" + Ivy.getIvyVersion());
/* 193 */       conn.setRequestProperty(""Content-type"", ""application/octet-stream"");
/* 194 */       conn.setRequestProperty(""Content-length"", Long.toString(source.length()));
/* 195 */       conn.setInstanceFollowRedirects(true);
/*     */       
/* 197 */       InputStream in = new FileInputStream(source);
/*     */       try {
/* 199 */         OutputStream os = conn.getOutputStream();
/* 200 */         FileUtil.copy(in, os, l);
/*     */       } finally {
/*     */         try {
/* 203 */           in.close();
/* 204 */         } catch (IOException e) {}
/*     */       } 
/*     */ 
/*     */       
/* 208 */       validatePutStatusCode(dest, conn.getResponseCode(), conn.getResponseMessage());
/*     */     } finally {
/* 210 */       disconnect(conn);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void disconnect(URLConnection con) {
/* 215 */     if (con instanceof HttpURLConnection) {
/* 216 */       ((HttpURLConnection)con).disconnect();
/* 217 */     } else if (con != null && ""sun.net.www.protocol.file.FileURLConnection"".equals(con.getClass().getName())) {
/*     */ 
/*     */       
/*     */       try {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 225 */         con.getInputStream().close();
/* 226 */       } catch (IOException e) {}
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\BasicURLHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.CredentialsStore,"/*    */ package org.apache.ivy.util.url;
/*    */ 
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ import org.apache.ivy.util.Credentials;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class CredentialsStore
/*    */ {
/* 33 */   private static final Map KEYRING = new HashMap();
/*    */   
/* 35 */   public static final CredentialsStore INSTANCE = new CredentialsStore();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void addCredentials(String realm, String host, String userName, String passwd) {
/* 41 */     if (userName == null) {
/*    */       return;
/*    */     }
/* 44 */     Credentials c = new Credentials(realm, host, userName, passwd);
/* 45 */     Message.debug(""credentials added: "" + c);
/* 46 */     KEYRING.put(c.getKey(), c);
/*    */ 
/*    */     
/* 49 */     KEYRING.put(c.getHost(), c);
/*    */   }
/*    */ 
/*    */   
/* 53 */   public Credentials getCredentials(String realm, String host) { return (Credentials)KEYRING.get(Credentials.buildKey(realm, host)); }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\CredentialsStore.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.HttpClientHandler,"/*     */ package org.apache.ivy.util.url;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.net.UnknownHostException;
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import java.util.Locale;
/*     */ import org.apache.commons.httpclient.Credentials;
/*     */ import org.apache.commons.httpclient.Header;
/*     */ import org.apache.commons.httpclient.HttpClient;
/*     */ import org.apache.commons.httpclient.HttpConnectionManager;
/*     */ import org.apache.commons.httpclient.HttpException;
/*     */ import org.apache.commons.httpclient.HttpMethod;
/*     */ import org.apache.commons.httpclient.HttpMethodBase;
/*     */ import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
/*     */ import org.apache.commons.httpclient.UsernamePasswordCredentials;
/*     */ import org.apache.commons.httpclient.methods.GetMethod;
/*     */ import org.apache.commons.httpclient.methods.HeadMethod;
/*     */ import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
/*     */ import org.apache.commons.httpclient.methods.PutMethod;
/*     */ import org.apache.commons.httpclient.methods.RequestEntity;
/*     */ import org.apache.ivy.Ivy;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ import org.apache.ivy.util.Credentials;
/*     */ import org.apache.ivy.util.FileUtil;
/*     */ import org.apache.ivy.util.Message;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HttpClientHandler
/*     */   extends AbstractURLHandler
/*     */ {
/*  54 */   private static final SimpleDateFormat LAST_MODIFIED_FORMAT = new SimpleDateFormat(""EEE, d MMM yyyy HH:mm:ss z"", Locale.US);
/*     */ 
/*     */   
/*     */   private int proxyPort;
/*     */ 
/*     */   
/*  60 */   private String proxyRealm = null;
/*     */   
/*  62 */   private String proxyHost = null;
/*     */   
/*  64 */   private String proxyUserName = null;
/*     */   
/*  66 */   private String proxyPasswd = null;
/*     */   
/*     */   private HttpClientHelper httpClientHelper;
/*     */   
/*     */   private static HttpClient httpClient;
/*     */ 
/*     */   
/*  73 */   public HttpClientHandler() { configureProxy(); }
/*     */ 
/*     */   
/*     */   private void configureProxy() {
/*  77 */     this.proxyRealm = null;
/*     */     
/*  79 */     this.proxyHost = System.getProperty(""http.proxyHost"");
/*     */     
/*  81 */     if (useProxy()) {
/*  82 */       this.proxyPort = Integer.parseInt(System.getProperty(""http.proxyPort"", ""80""));
/*  83 */       this.proxyUserName = System.getProperty(""http.proxyUser"");
/*  84 */       this.proxyPasswd = System.getProperty(""http.proxyPassword"");
/*     */ 
/*     */       
/*  87 */       Message.verbose(""proxy configured: host="" + this.proxyHost + "" port="" + this.proxyPort + "" user="" + this.proxyUserName);
/*     */     } else {
/*     */       
/*  90 */       Message.verbose(""no proxy configured"");
/*     */     } 
/*     */   }
/*     */   
/*     */   public InputStream openStream(URL url) throws IOException {
/*  95 */     GetMethod get = doGet(url, 0);
/*  96 */     if (!checkStatusCode(url, (HttpMethodBase)get)) {
/*  97 */       get.releaseConnection();
/*  98 */       throw new IOException(""The HTTP response code for "" + url + "" did not indicate a success."" + "" See log for more detail."");
/*     */     } 
/*     */ 
/*     */     
/* 102 */     return new GETInputStream(get);
/*     */   }
/*     */   
/*     */   public void download(URL src, File dest, CopyProgressListener l) throws IOException {
/* 106 */     GetMethod get = doGet(src, 0);
/*     */     
/*     */     try {
/* 109 */       if (!checkStatusCode(src, (HttpMethodBase)get)) {
/* 110 */         throw new IOException(""The HTTP response code for "" + src + "" did not indicate a success."" + "" See log for more detail."");
/*     */       }
/*     */ 
/*     */       
/* 114 */       FileUtil.copy(get.getResponseBodyAsStream(), dest, l);
/* 115 */       dest.setLastModified(getLastModified((HttpMethodBase)get));
/*     */     } finally {
/* 117 */       get.releaseConnection();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void upload(File src, URL dest, CopyProgressListener l) throws IOException {
/* 122 */     HttpClient client = getClient(dest);
/*     */     
/* 124 */     PutMethod put = new PutMethod(normalizeToString(dest));
/* 125 */     put.setDoAuthentication((useAuthentication(dest) || useProxyAuthentication()));
/* 126 */     FileInputStream fileStream = null;
/*     */     try {
/* 128 */       fileStream = new FileInputStream(src);
/* 129 */       put.setRequestEntity((RequestEntity)new InputStreamRequestEntity(fileStream));
/* 130 */       int statusCode = client.executeMethod((HttpMethod)put);
/* 131 */       validatePutStatusCode(dest, statusCode, null);
/*     */     } finally {
/* 133 */       if (fileStream != null) {
/*     */         try {
/* 135 */           fileStream.close();
/* 136 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 140 */       put.releaseConnection();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 145 */   public URLHandler.URLInfo getURLInfo(URL url) { return getURLInfo(url, 0); }
/*     */ 
/*     */   
/*     */   public URLHandler.URLInfo getURLInfo(URL url, int timeout) {
/* 149 */     Object object = null;
/*     */     try {
/* 151 */       if (getRequestMethod() == 2) {
/* 152 */         object = doHead(url, timeout);
/*     */       } else {
/* 154 */         object = doGet(url, timeout);
/*     */       } 
/* 156 */       if (checkStatusCode(url, (HttpMethodBase)object)) {
/* 157 */         return new URLHandler.URLInfo(true, getResponseContentLength((HttpMethodBase)object), getLastModified((HttpMethodBase)object));
/*     */       }
/* 159 */     } catch (HttpException e) {
/* 160 */       Message.error(""HttpClientHandler: "" + e.getMessage() + "":"" + e.getReasonCode() + ""="" + e.getReason() + "" url="" + url);
/*     */     }
/* 162 */     catch (UnknownHostException e) {
/* 163 */       Message.warn(""Host "" + e.getMessage() + "" not found. url="" + url);
/* 164 */       Message.info(""You probably access the destination server through a proxy server that is not well configured."");
/*     */     }
/* 166 */     catch (IOException e) {
/* 167 */       Message.error(""HttpClientHandler: "" + e.getMessage() + "" url="" + url);
/* 168 */     } catch (IllegalArgumentException e) {
/*     */ 
/*     */     
/*     */     } finally {
/* 172 */       if (object != null) {
/* 173 */         object.releaseConnection();
/*     */       }
/*     */     } 
/* 176 */     return UNAVAILABLE;
/*     */   }
/*     */   
/*     */   private boolean checkStatusCode(URL url, HttpMethodBase method) throws IOException {
/* 180 */     int status = method.getStatusCode();
/* 181 */     if (status == 200) {
/* 182 */       return true;
/*     */     }
/* 184 */     Message.debug(""HTTP response status: "" + status + "" url="" + url);
/* 185 */     if (status == 407) {
/* 186 */       Message.warn(""Your proxy requires authentication."");
/* 187 */     } else if (String.valueOf(status).startsWith(""4"")) {
/* 188 */       Message.verbose(""CLIENT ERROR: "" + method.getStatusText() + "" url="" + url);
/* 189 */     } else if (String.valueOf(status).startsWith(""5"")) {
/* 190 */       Message.error(""SERVER ERROR: "" + method.getStatusText() + "" url="" + url);
/*     */     } 
/*     */     
/* 193 */     return false;
/*     */   }
/*     */   
/*     */   private long getLastModified(HttpMethodBase method) {
/* 197 */     Header header = method.getResponseHeader(""last-modified"");
/* 198 */     if (header != null) {
/* 199 */       String lastModified = header.getValue();
/*     */       try {
/* 201 */         return LAST_MODIFIED_FORMAT.parse(lastModified).getTime();
/* 202 */       } catch (ParseException e) {
/*     */ 
/*     */         
/* 205 */         return System.currentTimeMillis();
/*     */       } 
/* 207 */     }  return System.currentTimeMillis();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 212 */   private long getResponseContentLength(HttpMethodBase head) { return getHttpClientHelper().getResponseContentLength(head); }
/*     */ 
/*     */   
/*     */   private HttpClientHelper getHttpClientHelper() {
/* 216 */     if (this.httpClientHelper == null) {
/*     */       
/*     */       try {
/* 219 */         HttpMethodBase.class.getMethod(""getResponseContentLength"", new Class[0]);
/* 220 */         this.httpClientHelper = new HttpClientHelper3x();
/* 221 */         Message.verbose(""using commons httpclient 3.x helper"");
/* 222 */       } catch (SecurityException e) {
/* 223 */         Message.verbose(""unable to get access to getResponseContentLength of commons-httpclient HeadMethod. Please use commons-httpclient 3.0 or use ivy with sufficient security permissions."");
/*     */ 
/*     */         
/* 226 */         Message.verbose(""exception: "" + e.getMessage());
/* 227 */         this.httpClientHelper = new HttpClientHelper2x();
/* 228 */         Message.verbose(""using commons httpclient 2.x helper"");
/* 229 */       } catch (NoSuchMethodException e) {
/* 230 */         this.httpClientHelper = new HttpClientHelper2x();
/* 231 */         Message.verbose(""using commons httpclient 2.x helper"");
/*     */       } 
/*     */     }
/* 234 */     return this.httpClientHelper;
/*     */   }
/*     */   
/*     */   public int getHttpClientMajorVersion() {
/* 238 */     HttpClientHelper helper = getHttpClientHelper();
/* 239 */     return helper.getHttpClientMajorVersion();
/*     */   }
/*     */   
/*     */   private GetMethod doGet(URL url, int timeout) throws IOException {
/* 243 */     HttpClient client = getClient(url);
/* 244 */     client.setTimeout(timeout);
/*     */     
/* 246 */     GetMethod get = new GetMethod(normalizeToString(url));
/* 247 */     get.setDoAuthentication((useAuthentication(url) || useProxyAuthentication()));
/* 248 */     client.executeMethod((HttpMethod)get);
/* 249 */     return get;
/*     */   }
/*     */   
/*     */   private HeadMethod doHead(URL url, int timeout) throws IOException {
/* 253 */     HttpClient client = getClient(url);
/* 254 */     client.setTimeout(timeout);
/*     */     
/* 256 */     HeadMethod head = new HeadMethod(normalizeToString(url));
/* 257 */     head.setDoAuthentication((useAuthentication(url) || useProxyAuthentication()));
/* 258 */     client.executeMethod((HttpMethod)head);
/* 259 */     return head;
/*     */   }
/*     */   
/*     */   private HttpClient getClient(URL url) {
/* 263 */     if (httpClient == null) {
/* 264 */       final MultiThreadedHttpConnectionManager connManager = new MultiThreadedHttpConnectionManager();
/*     */       
/* 266 */       httpClient = new HttpClient((HttpConnectionManager)connManager);
/*     */       
/* 268 */       Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() { private final MultiThreadedHttpConnectionManager val$connManager;
/*     */               
/* 270 */               public void run() { connManager.shutdown(); }
/*     */               
/*     */               private final HttpClientHandler this$0; }
/*     */           ));
/* 274 */       List authPrefs = new ArrayList(2);
/* 275 */       authPrefs.add(""Digest"");
/* 276 */       authPrefs.add(""Basic"");
/*     */       
/* 278 */       httpClient.getParams().setParameter(""http.auth.scheme-priority"", authPrefs);
/*     */       
/* 280 */       if (useProxy()) {
/* 281 */         httpClient.getHostConfiguration().setProxy(this.proxyHost, this.proxyPort);
/* 282 */         if (useProxyAuthentication()) {
/* 283 */           httpClient.getState().setProxyCredentials(this.proxyRealm, this.proxyHost, (Credentials)new UsernamePasswordCredentials(this.proxyUserName, this.proxyPasswd));
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 289 */       httpClient.getParams().setParameter(""http.useragent"", ""Apache Ivy/"" + Ivy.getIvyVersion());
/*     */     } 
/*     */ 
/*     */     
/* 293 */     Credentials c = getCredentials(url);
/* 294 */     if (c != null) {
/* 295 */       Message.debug(""found credentials for "" + url + "": "" + c);
/* 296 */       httpClient.getState().setCredentials(c.getRealm(), c.getHost(), (Credentials)new UsernamePasswordCredentials(c.getUserName(), c.getPasswd()));
/*     */     } 
/*     */ 
/*     */     
/* 300 */     return httpClient;
/*     */   }
/*     */ 
/*     */   
/* 304 */   private boolean useProxy() { return (this.proxyHost != null && this.proxyHost.trim().length() > 0); }
/*     */ 
/*     */ 
/*     */   
/* 308 */   private boolean useAuthentication(URL url) { return (getCredentials(url) != null); }
/*     */ 
/*     */ 
/*     */   
/* 312 */   private Credentials getCredentials(URL url) { return CredentialsStore.INSTANCE.getCredentials(null, url.getHost()); }
/*     */ 
/*     */ 
/*     */   
/* 316 */   private boolean useProxyAuthentication() { return (this.proxyUserName != null && this.proxyUserName.trim().length() > 0); }
/*     */   
/*     */   private static final class GETInputStream
/*     */     extends InputStream
/*     */   {
/*     */     private InputStream is;
/*     */     private GetMethod get;
/*     */     
/*     */     private GETInputStream(GetMethod get) throws IOException {
/* 325 */       this.get = get;
/* 326 */       this.is = get.getResponseBodyAsStream();
/*     */     }
/*     */ 
/*     */     
/* 330 */     public int available() throws IOException { return this.is.available(); }
/*     */ 
/*     */     
/*     */     public void close() throws IOException {
/* 334 */       this.is.close();
/* 335 */       this.get.releaseConnection();
/*     */     }
/*     */ 
/*     */     
/* 339 */     public boolean equals(Object obj) { return this.is.equals(obj); }
/*     */ 
/*     */ 
/*     */     
/* 343 */     public int hashCode() { return this.is.hashCode(); }
/*     */ 
/*     */ 
/*     */     
/* 347 */     public void mark(int readlimit) { this.is.mark(readlimit); }
/*     */ 
/*     */ 
/*     */     
/* 351 */     public boolean markSupported() { return this.is.markSupported(); }
/*     */ 
/*     */ 
/*     */     
/* 355 */     public int read() throws IOException { return this.is.read(); }
/*     */ 
/*     */ 
/*     */     
/* 359 */     public int read(byte[] b, int off, int len) throws IOException { return this.is.read(b, off, len); }
/*     */ 
/*     */ 
/*     */     
/* 363 */     public int read(byte[] b) throws IOException { return this.is.read(b); }
/*     */ 
/*     */ 
/*     */     
/* 367 */     public void reset() throws IOException { this.is.reset(); }
/*     */ 
/*     */ 
/*     */     
/* 371 */     public long skip(long n) throws IOException { return this.is.skip(n); }
/*     */ 
/*     */ 
/*     */     
/* 375 */     public String toString() { return this.is.toString(); }
/*     */   }
/*     */ 
/*     */   
/*     */   private static final class HttpClientHelper3x
/*     */     implements HttpClientHelper
/*     */   {
/*     */     private static final int VERSION = 3;
/*     */     
/*     */     private HttpClientHelper3x() {}
/*     */     
/* 386 */     public long getResponseContentLength(HttpMethodBase method) { return method.getResponseContentLength(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 393 */     public int getHttpClientMajorVersion() { return 3; }
/*     */   }
/*     */   
/*     */   private static final class HttpClientHelper2x
/*     */     implements HttpClientHelper
/*     */   {
/*     */     private static final int VERSION = 2;
/*     */     
/*     */     private HttpClientHelper2x() {}
/*     */     
/*     */     public long getResponseContentLength(HttpMethodBase method) {
/* 404 */       Header header = method.getResponseHeader(""Content-Length"");
/* 405 */       if (header != null) {
/*     */         try {
/* 407 */           return Integer.parseInt(header.getValue());
/* 408 */         } catch (NumberFormatException e) {
/* 409 */           Message.verbose(""Invalid content-length value: "" + e.getMessage());
/*     */         } 
/*     */       }
/* 412 */       return 0L;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 419 */     public int getHttpClientMajorVersion() { return 2; }
/*     */   }
/*     */   
/*     */   public static interface HttpClientHelper {
/*     */     long getResponseContentLength(HttpMethodBase param1HttpMethodBase);
/*     */     
/*     */     int getHttpClientMajorVersion();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\HttpClientHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.IvyAuthenticator,"/*    */ package org.apache.ivy.util.url;
/*    */ 
/*    */ import java.net.Authenticator;
/*    */ import java.net.PasswordAuthentication;
/*    */ import org.apache.ivy.util.Credentials;
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class IvyAuthenticator
/*    */   extends Authenticator
/*    */ {
/* 34 */   public static final IvyAuthenticator INSTANCE = new IvyAuthenticator();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 42 */   private IvyAuthenticator() { Authenticator.setDefault(this); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   protected PasswordAuthentication getPasswordAuthentication() {
/* 50 */     PasswordAuthentication result = null;
/*    */     
/* 52 */     String proxyHost = System.getProperty(""http.proxyHost"");
/* 53 */     if (getRequestingHost().equals(proxyHost)) {
/* 54 */       String proxyUser = System.getProperty(""http.proxyUser"");
/* 55 */       if (proxyUser != null && proxyUser.trim().length() > 0) {
/* 56 */         String proxyPass = System.getProperty(""http.proxyPassword"", """");
/* 57 */         Message.debug(""authenicating to proxy server with username ["" + proxyUser + ""]"");
/* 58 */         result = new PasswordAuthentication(proxyUser, proxyPass.toCharArray());
/*    */       } 
/*    */     } else {
/* 61 */       Credentials c = CredentialsStore.INSTANCE.getCredentials(getRequestingPrompt(), getRequestingHost());
/*    */       
/* 63 */       Message.debug(""authentication: k='"" + Credentials.buildKey(getRequestingPrompt(), getRequestingHost()) + ""' c='"" + c + ""'"");
/*    */ 
/*    */       
/* 66 */       if (c != null) {
/* 67 */         result = new PasswordAuthentication(c.getUserName(), c.getPasswd().toCharArray());
/*    */       }
/*    */     } 
/*    */     
/* 71 */     return result;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\IvyAuthenticator.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.URLHandler,"/*    */ package org.apache.ivy.util.url;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ import java.net.URL;
/*    */ import org.apache.ivy.util.CopyProgressListener;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public interface URLHandler
/*    */ {
/*    */   public static final int REQUEST_METHOD_GET = 1;
/*    */   public static final int REQUEST_METHOD_HEAD = 2;
/*    */   
/*    */   public static class URLInfo
/*    */   {
/*    */     private long contentLength;
/*    */     private long lastModified;
/*    */     private boolean available;
/*    */     
/*    */     protected URLInfo(boolean available, long contentLength, long lastModified) {
/* 52 */       this.available = available;
/* 53 */       this.contentLength = contentLength;
/* 54 */       this.lastModified = lastModified;
/*    */     }
/*    */ 
/*    */     
/* 58 */     public boolean isReachable() { return this.available; }
/*    */ 
/*    */ 
/*    */     
/* 62 */     public long getContentLength() { return this.contentLength; }
/*    */ 
/*    */ 
/*    */     
/* 66 */     public long getLastModified() { return this.lastModified; }
/*    */   }
/*    */ 
/*    */   
/* 70 */   public static final URLInfo UNAVAILABLE = new URLInfo(false, 0L, 0L);
/*    */   
/*    */   boolean isReachable(URL paramURL);
/*    */   
/*    */   boolean isReachable(URL paramURL, int paramInt);
/*    */   
/*    */   long getContentLength(URL paramURL);
/*    */   
/*    */   long getContentLength(URL paramURL, int paramInt);
/*    */   
/*    */   long getLastModified(URL paramURL);
/*    */   
/*    */   long getLastModified(URL paramURL, int paramInt);
/*    */   
/*    */   URLInfo getURLInfo(URL paramURL);
/*    */   
/*    */   URLInfo getURLInfo(URL paramURL, int paramInt);
/*    */   
/*    */   InputStream openStream(URL paramURL) throws IOException;
/*    */   
/*    */   void download(URL paramURL, File paramFile, CopyProgressListener paramCopyProgressListener) throws IOException;
/*    */   
/*    */   void upload(File paramFile, URL paramURL, CopyProgressListener paramCopyProgressListener) throws IOException;
/*    */   
/*    */   void setRequestMethod(int paramInt);
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\URLHandler.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.URLHandlerDispatcher,"/*     */ package org.apache.ivy.util.url;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.ivy.util.CopyProgressListener;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class URLHandlerDispatcher
/*     */   implements URLHandler
/*     */ {
/*  34 */   private Map handlers = new HashMap();
/*     */   
/*  36 */   private URLHandler defaultHandler = new BasicURLHandler();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  42 */   public boolean isReachable(URL url) { return getHandler(url.getProtocol()).isReachable(url); }
/*     */ 
/*     */ 
/*     */   
/*  46 */   public boolean isReachable(URL url, int timeout) { return getHandler(url.getProtocol()).isReachable(url, timeout); }
/*     */ 
/*     */ 
/*     */   
/*  50 */   public long getContentLength(URL url) { return getHandler(url.getProtocol()).getContentLength(url); }
/*     */ 
/*     */ 
/*     */   
/*  54 */   public long getContentLength(URL url, int timeout) { return getHandler(url.getProtocol()).getContentLength(url, timeout); }
/*     */ 
/*     */ 
/*     */   
/*  58 */   public long getLastModified(URL url) { return getHandler(url.getProtocol()).getLastModified(url); }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public long getLastModified(URL url, int timeout) { return getHandler(url.getProtocol()).getLastModified(url, timeout); }
/*     */ 
/*     */ 
/*     */   
/*  66 */   public URLHandler.URLInfo getURLInfo(URL url) { return getHandler(url.getProtocol()).getURLInfo(url); }
/*     */ 
/*     */ 
/*     */   
/*  70 */   public URLHandler.URLInfo getURLInfo(URL url, int timeout) { return getHandler(url.getProtocol()).getURLInfo(url, timeout); }
/*     */ 
/*     */ 
/*     */   
/*  74 */   public InputStream openStream(URL url) throws IOException { return getHandler(url.getProtocol()).openStream(url); }
/*     */ 
/*     */ 
/*     */   
/*  78 */   public void download(URL src, File dest, CopyProgressListener l) throws IOException { getHandler(src.getProtocol()).download(src, dest, l); }
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void upload(File src, URL dest, CopyProgressListener l) throws IOException { getHandler(dest.getProtocol()).upload(src, dest, l); }
/*     */ 
/*     */   
/*     */   public void setRequestMethod(int requestMethod) {
/*  86 */     this.defaultHandler.setRequestMethod(requestMethod);
/*  87 */     for (Iterator it = this.handlers.values().iterator(); it.hasNext(); ) {
/*  88 */       URLHandler handler = it.next();
/*  89 */       handler.setRequestMethod(requestMethod);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  94 */   public void setDownloader(String protocol, URLHandler downloader) { this.handlers.put(protocol, downloader); }
/*     */ 
/*     */   
/*     */   public URLHandler getHandler(String protocol) {
/*  98 */     URLHandler downloader = (URLHandler)this.handlers.get(protocol);
/*  99 */     return (downloader == null) ? this.defaultHandler : downloader;
/*     */   }
/*     */ 
/*     */   
/* 103 */   public URLHandler getDefault() { return this.defaultHandler; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setDefault(URLHandler default1) { this.defaultHandler = default1; }
/*     */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\URLHandlerDispatcher.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.ivy.util.url.URLHandlerRegistry,"/*    */ package org.apache.ivy.util.url;
/*    */ 
/*    */ import org.apache.ivy.util.Message;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class URLHandlerRegistry
/*    */ {
/* 29 */   private static URLHandler defaultHandler = new BasicURLHandler();
/*    */ 
/*    */   
/* 32 */   public static URLHandler getDefault() { return defaultHandler; }
/*    */ 
/*    */ 
/*    */   
/* 36 */   public static void setDefault(URLHandler def) { defaultHandler = def; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static URLHandler getHttp() {
/*    */     try {
/* 47 */       Class.forName(""org.apache.commons.httpclient.HttpClient"");
/*    */ 
/*    */ 
/*    */       
/* 51 */       Class.forName(""org.apache.commons.httpclient.params.HttpClientParams"");
/*    */       
/* 53 */       Class handler = Class.forName(""org.apache.ivy.util.url.HttpClientHandler"");
/* 54 */       Message.verbose(""jakarta commons httpclient detected: using it for http downloading"");
/* 55 */       return (URLHandler)handler.newInstance();
/* 56 */     } catch (ClassNotFoundException e) {
/* 57 */       Message.verbose(""jakarta commons httpclient not found: using jdk url handling"");
/* 58 */       return new BasicURLHandler();
/* 59 */     } catch (NoClassDefFoundError e) {
/* 60 */       Message.verbose(""error occurred while loading jakarta commons httpclient: "" + e.getMessage());
/*    */       
/* 62 */       Message.verbose(""Using jdk url handling instead."");
/* 63 */       return new BasicURLHandler();
/* 64 */     } catch (InstantiationException e) {
/* 65 */       Message.verbose(""couldn't instantiate HttpClientHandler: using jdk url handling"");
/* 66 */       return new BasicURLHandler();
/* 67 */     } catch (IllegalAccessException e) {
/* 68 */       Message.verbose(""couldn't instantiate HttpClientHandler: using jdk url handling"");
/* 69 */       return new BasicURLHandler();
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ivy-2.0.0.jar!\org\apache\iv\\uti\\url\URLHandlerRegistry.class
 * Java compiler version: 4 (48.0)
 * JD-Core Version:       1.1.2
 */"
