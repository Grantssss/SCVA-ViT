metric_name,file
org.apache.tools.ant.AntClassLoader,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntClassLoader
/*     */   extends ClassLoader
/*     */   implements BuildListener
/*     */ {
/*     */   private static final int BUFFER_SIZE = 8192;
/*     */   
/*     */   private class ResourceEnumeration
/*     */     implements Enumeration
/*     */   {
/*     */     private String resourceName;
/*     */     private int pathElementsIndex;
/*     */     private URL nextResource;
/*     */     private final AntClassLoader this$0;
/*     */     
/*     */     ResourceEnumeration(AntClassLoader this$0, String param1String) {
/* 111 */       this.this$0 = this$0;
/* 112 */       this.resourceName = param1String;
/* 113 */       this.pathElementsIndex = 0;
/* 114 */       findNextResource();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 125 */     public boolean hasMoreElements() { return (this.nextResource != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Object nextElement() {
/* 134 */       URL uRL = this.nextResource;
/* 135 */       findNextResource();
/* 136 */       return uRL;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void findNextResource() {
/* 146 */       URL uRL = null;
/* 147 */       while (this.pathElementsIndex < this.this$0.pathComponents.size() && uRL == null) {
/*     */         
/*     */         try {
/* 150 */           File file = this.this$0.pathComponents.elementAt(this.pathElementsIndex);
/*     */           
/* 152 */           uRL = this.this$0.getResourceURL(file, this.resourceName);
/* 153 */           this.pathElementsIndex++;
/*     */         }
/* 155 */         catch (BuildException buildException) {}
/*     */       } 
/*     */ 
/*     */       
/* 159 */       this.nextResource = uRL;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   Vector pathComponents = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean parentFirst = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   private Vector systemPackages = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   private Vector loaderPackages = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean ignoreBase = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   private ClassLoader parent = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   private Hashtable zipFiles = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   private ClassLoader savedContextLoader = null;
/*     */   
/*     */   private boolean isContextLoaderSaved = false;
/* 218 */   private static Method getProtectionDomain = null;
/* 219 */   private static Method defineClassProtectionDomain = null;
/* 220 */   private static Method getContextClassLoader = null;
/* 221 */   private static Method setContextClassLoader = null;
/*     */   static  {
/*     */     try {
/* 224 */       getProtectionDomain = Class.class.getMethod(""getProtectionDomain"", new Class[0]);
/* 225 */       Class clazz = Class.forName(""java.security.ProtectionDomain"");
/* 226 */       Class[] arrayOfClass = { String.class, (array$B == null) ? (array$B = class$(""[B"")) : array$B, int.class, int.class, clazz };
/* 227 */       defineClassProtectionDomain = ClassLoader.class.getDeclaredMethod(""defineClass"", arrayOfClass);
/*     */       
/* 229 */       getContextClassLoader = Thread.class.getMethod(""getContextClassLoader"", new Class[0]);
/* 230 */       arrayOfClass = new Class[] { ClassLoader.class };
/* 231 */       setContextClassLoader = Thread.class.getMethod(""setContextClassLoader"", arrayOfClass);
/*     */     }
/* 233 */     catch (Exception exception) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static Class array$B;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AntClassLoader(Project paramProject, Path paramPath) {
/* 246 */     this.parent = AntClassLoader.class.getClassLoader();
/* 247 */     this.project = paramProject;
/* 248 */     paramProject.addBuildListener(this);
/* 249 */     if (paramPath != null) {
/* 250 */       Path path = paramPath.concatSystemClasspath(""ignore"");
/* 251 */       String[] arrayOfString = path.list();
/* 252 */       for (byte b = 0; b < arrayOfString.length; b++) {
/*     */         try {
/* 254 */           addPathElement(arrayOfString[b]);
/*     */         }
/* 256 */         catch (BuildException buildException) {}
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AntClassLoader(ClassLoader paramClassLoader, Project paramProject, Path paramPath, boolean paramBoolean) {
/* 275 */     this(paramProject, paramPath);
/* 276 */     if (paramClassLoader != null) {
/* 277 */       this.parent = paramClassLoader;
/*     */     }
/* 279 */     this.parentFirst = paramBoolean;
/* 280 */     addSystemPackageRoot(""java"");
/* 281 */     addSystemPackageRoot(""javax"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public AntClassLoader(Project paramProject, Path paramPath, boolean paramBoolean) { this(null, paramProject, paramPath, paramBoolean); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AntClassLoader(ClassLoader paramClassLoader, boolean paramBoolean) {
/* 307 */     if (paramClassLoader != null) {
/* 308 */       this.parent = paramClassLoader;
/*     */     } else {
/*     */       
/* 311 */       paramClassLoader = AntClassLoader.class.getClassLoader();
/*     */     } 
/* 313 */     this.project = null;
/* 314 */     this.parentFirst = paramBoolean;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void log(String paramString, int paramInt) {
/* 324 */     if (this.project != null) {
/* 325 */       this.project.log(paramString, paramInt);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setThreadContextLoader() {
/* 337 */     if (this.isContextLoaderSaved) {
/* 338 */       throw new BuildException(""Context loader has not been reset"");
/*     */     }
/* 340 */     if (getContextClassLoader != null && setContextClassLoader != null) {
/*     */       try {
/* 342 */         this.savedContextLoader = (ClassLoader)getContextClassLoader.invoke(Thread.currentThread(), new Object[0]);
/*     */         
/* 344 */         Object[] arrayOfObject = { this };
/* 345 */         setContextClassLoader.invoke(Thread.currentThread(), arrayOfObject);
/* 346 */         this.isContextLoaderSaved = true;
/*     */       } catch (InvocationTargetException invocationTargetException) {
/*     */         
/* 349 */         Throwable throwable = invocationTargetException.getTargetException();
/* 350 */         throw new BuildException(throwable.toString());
/*     */       } catch (Exception exception) {
/*     */         
/* 353 */         throw new BuildException(exception.toString());
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void resetThreadContextLoader() {
/* 362 */     if (this.isContextLoaderSaved && getContextClassLoader != null && setContextClassLoader != null) {
/*     */       
/*     */       try {
/* 365 */         Object[] arrayOfObject = { this.savedContextLoader };
/* 366 */         setContextClassLoader.invoke(Thread.currentThread(), arrayOfObject);
/* 367 */         this.savedContextLoader = null;
/* 368 */         this.isContextLoaderSaved = false;
/*     */       } catch (InvocationTargetException invocationTargetException) {
/*     */         
/* 371 */         Throwable throwable = invocationTargetException.getTargetException();
/* 372 */         throw new BuildException(throwable.toString());
/*     */       } catch (Exception exception) {
/*     */         
/* 375 */         throw new BuildException(exception.toString());
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addPathElement(String paramString) throws BuildException {
/* 386 */     File file = (this.project != null) ? this.project.resolveFile(paramString) : new File(paramString);
/*     */ 
/*     */     
/* 389 */     this.pathComponents.addElement(file);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 398 */   public void setIsolated(boolean paramBoolean) { this.ignoreBase = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void initializeClass(Class paramClass) {
/*     */     try {
/* 410 */       paramClass.newInstance();
/*     */     }
/* 412 */     catch (Throwable throwable) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 426 */   public void addSystemPackageRoot(String paramString) { this.systemPackages.addElement(paramString + "".""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 438 */   public void addLoaderPackageRoot(String paramString) { this.loaderPackages.addElement(paramString + "".""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class forceLoadClass(String paramString) throws ClassNotFoundException {
/* 458 */     log(""force loading "" + paramString, 4);
/*     */     
/* 460 */     Class clazz = findLoadedClass(paramString);
/*     */     
/* 462 */     if (clazz == null) {
/* 463 */       clazz = findClass(paramString);
/*     */     }
/*     */     
/* 466 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class forceLoadSystemClass(String paramString) throws ClassNotFoundException {
/* 483 */     log(""force system loading "" + paramString, 4);
/*     */     
/* 485 */     Class clazz = findLoadedClass(paramString);
/*     */     
/* 487 */     if (clazz == null) {
/* 488 */       clazz = findBaseClass(paramString);
/*     */     }
/*     */     
/* 491 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public InputStream getResourceAsStream(String paramString) {
/* 504 */     InputStream inputStream = null;
/* 505 */     if (isParentFirst(paramString)) {
/* 506 */       inputStream = loadBaseResource(paramString);
/* 507 */       if (inputStream != null) {
/* 508 */         log(""ResourceStream for "" + paramString + "" loaded from parent loader"", 4);
/*     */       }
/*     */       else {
/*     */         
/* 512 */         inputStream = loadResource(paramString);
/* 513 */         if (inputStream != null) {
/* 514 */           log(""ResourceStream for "" + paramString + "" loaded from ant loader"", 4);
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 520 */       inputStream = loadResource(paramString);
/* 521 */       if (inputStream != null) {
/* 522 */         log(""ResourceStream for "" + paramString + "" loaded from ant loader"", 4);
/*     */       }
/*     */       else {
/*     */         
/* 526 */         inputStream = loadBaseResource(paramString);
/* 527 */         if (inputStream != null) {
/* 528 */           log(""ResourceStream for "" + paramString + "" loaded from parent loader"", 4);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 534 */     if (inputStream == null) {
/* 535 */       log(""Couldn't load ResourceStream for "" + paramString, 4);
/*     */     }
/*     */ 
/*     */     
/* 539 */     return inputStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputStream loadResource(String paramString) {
/* 555 */     InputStream inputStream = null;
/*     */     
/* 557 */     for (Enumeration enumeration = this.pathComponents.elements(); enumeration.hasMoreElements() && inputStream == null; ) {
/* 558 */       File file = enumeration.nextElement();
/* 559 */       inputStream = getResourceStream(file, paramString);
/*     */     } 
/* 561 */     return inputStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputStream loadBaseResource(String paramString) {
/* 568 */     if (this.parent == null) {
/* 569 */       return ClassLoader.getSystemResourceAsStream(paramString);
/*     */     }
/*     */     
/* 572 */     return this.parent.getResourceAsStream(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputStream getResourceStream(File paramFile, String paramString) {
/*     */     try {
/* 588 */       if (!paramFile.exists()) {
/* 589 */         return null;
/*     */       }
/*     */       
/* 592 */       if (paramFile.isDirectory()) {
/* 593 */         File file = new File(paramFile, paramString);
/*     */         
/* 595 */         if (file.exists()) {
/* 596 */           return new FileInputStream(file);
/*     */         }
/*     */       }
/*     */       else {
/*     */         
/* 601 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(paramFile);
/* 602 */         if (zipFile == null) {
/* 603 */           zipFile = new ZipFile(paramFile);
/* 604 */           this.zipFiles.put(paramFile, zipFile);
/*     */         } 
/* 606 */         ZipEntry zipEntry = zipFile.getEntry(paramString);
/* 607 */         if (zipEntry != null) {
/* 608 */           return zipFile.getInputStream(zipEntry);
/*     */         }
/*     */       } 
/*     */     } catch (Exception exception) {
/*     */       
/* 613 */       log(""Ignoring Exception "" + exception.getClass().getName() + "": "" + exception.getMessage() + "" reading resource "" + paramString + "" from "" + paramFile, 3);
/*     */     } 
/*     */ 
/*     */     
/* 617 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isParentFirst(String paramString) {
/* 624 */     boolean bool = this.parentFirst;
/*     */     
/* 626 */     for (Enumeration enumeration1 = this.systemPackages.elements(); enumeration1.hasMoreElements(); ) {
/* 627 */       String str = enumeration1.nextElement();
/* 628 */       if (paramString.startsWith(str)) {
/* 629 */         bool = true;
/*     */         
/*     */         break;
/*     */       } 
/*     */     } 
/* 634 */     for (Enumeration enumeration2 = this.loaderPackages.elements(); enumeration2.hasMoreElements(); ) {
/* 635 */       String str = enumeration2.nextElement();
/* 636 */       if (paramString.startsWith(str)) {
/* 637 */         bool = false;
/*     */         
/*     */         break;
/*     */       } 
/*     */     } 
/* 642 */     return bool;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public URL getResource(String paramString) {
/* 660 */     URL uRL = null;
/* 661 */     if (isParentFirst(paramString)) {
/* 662 */       uRL = (this.parent == null) ? super.getResource(paramString) : this.parent.getResource(paramString);
/*     */     }
/*     */     
/* 665 */     if (uRL != null) {
/* 666 */       log(""Resource "" + paramString + "" loaded from parent loader"", 4);
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/* 672 */       for (Enumeration enumeration = this.pathComponents.elements(); enumeration.hasMoreElements() && uRL == null; ) {
/* 673 */         File file = enumeration.nextElement();
/* 674 */         uRL = getResourceURL(file, paramString);
/* 675 */         if (uRL != null) {
/* 676 */           log(""Resource "" + paramString + "" loaded from ant loader"", 4);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 683 */     if (uRL == null && !isParentFirst(paramString)) {
/*     */ 
/*     */       
/* 686 */       uRL = (this.parent == null) ? super.getResource(paramString) : this.parent.getResource(paramString);
/* 687 */       if (uRL != null) {
/* 688 */         log(""Resource "" + paramString + "" loaded from parent loader"", 4);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 693 */     if (uRL == null) {
/* 694 */       log(""Couldn't load Resource "" + paramString, 4);
/*     */     }
/*     */     
/* 697 */     return uRL;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 709 */   protected Enumeration findResources(String paramString) throws IOException { return new ResourceEnumeration(this, paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private URL getResourceURL(File paramFile, String paramString) {
/*     */     try {
/* 726 */       if (!paramFile.exists()) {
/* 727 */         return null;
/*     */       }
/*     */       
/* 730 */       if (paramFile.isDirectory()) {
/* 731 */         File file = new File(paramFile, paramString);
/*     */         
/* 733 */         if (file.exists()) {
/*     */           try {
/* 735 */             return new URL(""file:"" + file.toString());
/*     */           } catch (MalformedURLException malformedURLException) {
/* 737 */             return null;
/*     */           } 
/*     */         }
/*     */       } else {
/*     */         
/* 742 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(paramFile);
/* 743 */         if (zipFile == null) {
/* 744 */           zipFile = new ZipFile(paramFile);
/* 745 */           this.zipFiles.put(paramFile, zipFile);
/*     */         } 
/*     */         
/* 748 */         ZipEntry zipEntry = zipFile.getEntry(paramString);
/* 749 */         if (zipEntry != null) {
/*     */           try {
/* 751 */             return new URL(""jar:file:"" + paramFile.toString() + ""!/"" + zipEntry);
/*     */           } catch (MalformedURLException malformedURLException) {
/* 753 */             return null;
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } catch (Exception exception) {
/*     */       
/* 759 */       exception.printStackTrace();
/*     */     } 
/*     */     
/* 762 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Class loadClass(String paramString, boolean paramBoolean) throws ClassNotFoundException {
/* 784 */     Class clazz = findLoadedClass(paramString);
/* 785 */     if (clazz != null) {
/* 786 */       return clazz;
/*     */     }
/*     */     
/* 789 */     if (isParentFirst(paramString)) {
/*     */       try {
/* 791 */         clazz = findBaseClass(paramString);
/* 792 */         log(""Class "" + paramString + "" loaded from parent loader"", 4);
/*     */       } catch (ClassNotFoundException classNotFoundException) {
/*     */         
/* 795 */         clazz = findClass(paramString);
/* 796 */         log(""Class "" + paramString + "" loaded from ant loader"", 4);
/*     */       } 
/*     */     } else {
/*     */       
/*     */       try {
/* 801 */         clazz = findClass(paramString);
/* 802 */         log(""Class "" + paramString + "" loaded from ant loader"", 4);
/*     */       } catch (ClassNotFoundException classNotFoundException) {
/*     */         
/* 805 */         if (this.ignoreBase) {
/* 806 */           throw classNotFoundException;
/*     */         }
/* 808 */         clazz = findBaseClass(paramString);
/* 809 */         log(""Class "" + paramString + "" loaded from parent loader"", 4);
/*     */       } 
/*     */     } 
/*     */     
/* 813 */     if (paramBoolean) {
/* 814 */       resolveClass(clazz);
/*     */     }
/*     */     
/* 817 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 829 */   private String getClassFilename(String paramString) { return paramString.replace('.', '/') + "".class""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class getClassFromStream(InputStream paramInputStream, String paramString) throws IOException {
/* 845 */     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/* 846 */     int i = -1;
/* 847 */     byte[] arrayOfByte1 = new byte[8192];
/*     */     
/* 849 */     while ((i = paramInputStream.read(arrayOfByte1, 0, 8192)) != -1) {
/* 850 */       byteArrayOutputStream.write(arrayOfByte1, 0, i);
/*     */     }
/*     */     
/* 853 */     byte[] arrayOfByte2 = byteArrayOutputStream.toByteArray();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 858 */     if (defineClassProtectionDomain != null) {
/*     */       try {
/* 860 */         Object object = getProtectionDomain.invoke(Project.class, new Object[0]);
/* 861 */         Object[] arrayOfObject = { paramString, arrayOfByte2, new Integer(0), new Integer(arrayOfByte2.length), object };
/* 862 */         return (Class)defineClassProtectionDomain.invoke(this, arrayOfObject);
/*     */       } catch (InvocationTargetException invocationTargetException) {
/*     */         
/* 865 */         Throwable throwable = invocationTargetException.getTargetException();
/* 866 */         if (throwable instanceof ClassFormatError) {
/* 867 */           throw (ClassFormatError)throwable;
/*     */         }
/* 869 */         if (throwable instanceof NoClassDefFoundError) {
/* 870 */           throw (NoClassDefFoundError)throwable;
/*     */         }
/*     */         
/* 873 */         throw new IOException(throwable.toString());
/*     */       }
/*     */       catch (Exception exception) {
/*     */         
/* 877 */         throw new IOException(exception.toString());
/*     */       } 
/*     */     }
/*     */     
/* 881 */     return defineClass(paramString, arrayOfByte2, 0, arrayOfByte2.length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class findClass(String paramString) throws ClassNotFoundException {
/* 896 */     log(""Finding class "" + paramString, 4);
/*     */     
/* 898 */     return findClassInComponents(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class findClassInComponents(String paramString) throws ClassNotFoundException {
/* 908 */     InputStream inputStream = null;
/* 909 */     String str = getClassFilename(paramString);
/*     */     try {
/* 911 */       for (Enumeration enumeration = this.pathComponents.elements(); enumeration.hasMoreElements(); ) {
/* 912 */         File file = enumeration.nextElement();
/*     */         try {
/* 914 */           inputStream = getResourceStream(file, str);
/* 915 */           if (inputStream != null) {
/* 916 */             return getClassFromStream(inputStream, paramString);
/*     */           }
/*     */         }
/*     */         catch (IOException iOException) {
/*     */           
/* 921 */           log(""Exception reading component "" + file, 3);
/*     */         } 
/*     */       } 
/*     */       
/* 925 */       throw new ClassNotFoundException(paramString);
/*     */     } finally {
/*     */       
/*     */       try {
/* 929 */         if (inputStream != null) {
/* 930 */           inputStream.close();
/*     */         }
/*     */       }
/* 933 */       catch (IOException iOException) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class findBaseClass(String paramString) throws ClassNotFoundException {
/* 941 */     if (this.parent == null) {
/* 942 */       return findSystemClass(paramString);
/*     */     }
/*     */     
/* 945 */     return this.parent.loadClass(paramString);
/*     */   }
/*     */ 
/*     */   
/*     */   public void cleanup() {
/* 950 */     this.pathComponents = null;
/* 951 */     this.project = null;
/* 952 */     for (Enumeration enumeration = this.zipFiles.elements(); enumeration.hasMoreElements(); ) {
/* 953 */       ZipFile zipFile = enumeration.nextElement();
/*     */       try {
/* 955 */         zipFile.close();
/*     */       }
/* 957 */       catch (IOException iOException) {}
/*     */     } 
/*     */ 
/*     */     
/* 961 */     this.zipFiles = new Hashtable();
/*     */   }
/*     */ 
/*     */   
/*     */   public void buildStarted(BuildEvent paramBuildEvent) {}
/*     */ 
/*     */   
/* 968 */   public void buildFinished(BuildEvent paramBuildEvent) { cleanup(); }
/*     */   
/*     */   public void targetStarted(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void targetFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskStarted(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void messageLogged(BuildEvent paramBuildEvent) {}
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\AntClassLoader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildEvent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.EventObject;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildEvent
/*     */   extends EventObject
/*     */ {
/*     */   private Project project;
/*     */   private Target target;
/*     */   private Task task;
/*     */   private String message;
/*  63 */   private int priority = 3;
/*     */ 
/*     */ 
/*     */   
/*     */   private Throwable exception;
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Project paramProject) {
/*  72 */     super(paramProject);
/*  73 */     this.project = paramProject;
/*  74 */     this.target = null;
/*  75 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Target paramTarget) {
/*  84 */     super(paramTarget);
/*  85 */     this.project = paramTarget.getProject();
/*  86 */     this.target = paramTarget;
/*  87 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Task paramTask) {
/*  96 */     super(paramTask);
/*  97 */     this.project = paramTask.getProject();
/*  98 */     this.target = paramTask.getOwningTarget();
/*  99 */     this.task = paramTask;
/*     */   }
/*     */   
/*     */   public void setMessage(String paramString, int paramInt) {
/* 103 */     this.message = paramString;
/* 104 */     this.priority = paramInt;
/*     */   }
/*     */ 
/*     */   
/* 108 */   public void setException(Throwable paramThrowable) { this.exception = paramThrowable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public Target getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public Task getTask() { return this.task; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public String getMessage() { return this.message; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public int getPriority() { return this.priority; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public Throwable getException() { return this.exception; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\BuildEvent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildException,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildException
/*     */   extends RuntimeException
/*     */ {
/*     */   private Throwable cause;
/*  70 */   private Location location = Location.UNKNOWN_LOCATION;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   public BuildException(String paramString) { super(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String paramString, Throwable paramThrowable) {
/*  94 */     super(paramString);
/*  95 */     this.cause = paramThrowable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String paramString, Throwable paramThrowable, Location paramLocation) {
/* 106 */     this(paramString, paramThrowable);
/* 107 */     this.location = paramLocation;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable paramThrowable) {
/* 115 */     super(paramThrowable.toString());
/* 116 */     this.cause = paramThrowable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String paramString, Location paramLocation) {
/* 126 */     super(paramString);
/* 127 */     this.location = paramLocation;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable paramThrowable, Location paramLocation) {
/* 137 */     this(paramThrowable);
/* 138 */     this.location = paramLocation;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public Throwable getException() { return this.cause; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public String toString() { return this.location.toString() + getMessage(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setLocation(Location paramLocation) { this.location = paramLocation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void printStackTrace() { printStackTrace(System.err); }
/*     */ 
/*     */   
/*     */   public void printStackTrace(PrintStream paramPrintStream) {
/* 175 */     synchronized (paramPrintStream) {
/* 176 */       super.printStackTrace(paramPrintStream);
/* 177 */       if (this.cause != null) {
/* 178 */         paramPrintStream.println(""--- Nested Exception ---"");
/* 179 */         this.cause.printStackTrace(paramPrintStream);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void printStackTrace(PrintWriter paramPrintWriter) {
/* 185 */     synchronized (paramPrintWriter) {
/* 186 */       super.printStackTrace(paramPrintWriter);
/* 187 */       if (this.cause != null) {
/* 188 */         paramPrintWriter.println(""--- Nested Exception ---"");
/* 189 */         this.cause.printStackTrace(paramPrintWriter);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\BuildException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildListener,"package org.apache.tools.ant;
import java.util.EventListener;
public interface BuildListener extends EventListener {
  void buildStarted(BuildEvent paramBuildEvent);
  void buildFinished(BuildEvent paramBuildEvent);
  void targetStarted(BuildEvent paramBuildEvent);
  void targetFinished(BuildEvent paramBuildEvent);
  void taskStarted(BuildEvent paramBuildEvent);
  void taskFinished(BuildEvent paramBuildEvent);
  void messageLogged(BuildEvent paramBuildEvent);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\BuildListener.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildLogger,"package org.apache.tools.ant;
import java.io.PrintStream;
public interface BuildLogger extends BuildListener {
  void setMessageOutputLevel(int paramInt);
  void setOutputPrintStream(PrintStream paramPrintStream);
  void setEmacsMode(boolean paramBoolean);
  void setErrorPrintStream(PrintStream paramPrintStream);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\BuildLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Constants,"package org.apache.tools.ant;
interface Constants {}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Constants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DefaultLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultLogger
/*     */   implements BuildLogger
/*     */ {
/*  65 */   private static int LEFT_COLUMN_SIZE = 12;
/*     */   
/*     */   protected PrintStream out;
/*     */   protected PrintStream err;
/*  69 */   protected int msgOutputLevel = 0;
/*  70 */   private long startTime = System.currentTimeMillis();
/*     */   
/*  72 */   protected static String lSep = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setMessageOutputLevel(int paramInt) { this.msgOutputLevel = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setOutputPrintStream(PrintStream paramPrintStream) { this.out = paramPrintStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setErrorPrintStream(PrintStream paramPrintStream) { this.err = paramPrintStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setEmacsMode(boolean paramBoolean) { this.emacsMode = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void buildStarted(BuildEvent paramBuildEvent) { this.startTime = System.currentTimeMillis(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent paramBuildEvent) {
/* 133 */     Throwable throwable = paramBuildEvent.getException();
/*     */     
/* 135 */     if (throwable == null) {
/* 136 */       this.out.println(lSep + ""BUILD SUCCESSFUL"");
/*     */     } else {
/*     */       
/* 139 */       this.err.println(lSep + ""BUILD FAILED"" + lSep);
/*     */       
/* 141 */       if (3 <= this.msgOutputLevel || !(throwable instanceof BuildException)) {
/*     */         
/* 143 */         throwable.printStackTrace(this.err);
/*     */       
/*     */       }
/* 146 */       else if (throwable instanceof BuildException) {
/* 147 */         this.err.println(throwable.toString());
/*     */       } else {
/*     */         
/* 150 */         this.err.println(throwable.getMessage());
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 155 */     this.out.println(lSep + ""Total time: "" + formatTime(System.currentTimeMillis() - this.startTime));
/*     */   }
/*     */   
/*     */   public void targetStarted(BuildEvent paramBuildEvent) {
/* 159 */     if (2 <= this.msgOutputLevel) {
/* 160 */       this.out.println(lSep + paramBuildEvent.getTarget().getName() + "":"");
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskStarted(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void messageLogged(BuildEvent paramBuildEvent) {
/* 172 */     PrintStream printStream = (paramBuildEvent.getPriority() == 0) ? this.err : this.out;
/*     */ 
/*     */     
/* 175 */     if (paramBuildEvent.getPriority() <= this.msgOutputLevel) {
/*     */ 
/*     */       
/* 178 */       if (paramBuildEvent.getTask() != null) {
/* 179 */         String str = paramBuildEvent.getTask().getTaskName();
/*     */         
/* 181 */         if (!this.emacsMode) {
/* 182 */           String str1 = ""["" + str + ""] "";
/* 183 */           for (byte b = 0; b < LEFT_COLUMN_SIZE - str1.length(); b++) {
/* 184 */             printStream.print("" "");
/*     */           }
/* 186 */           printStream.print(str1);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 191 */       printStream.println(paramBuildEvent.getMessage());
/*     */     } 
/*     */   }
/*     */   
/*     */   protected static String formatTime(long paramLong) {
/* 196 */     long l1 = paramLong / 1000L;
/* 197 */     long l2 = l1 / 60L;
/*     */ 
/*     */     
/* 200 */     if (l2 > 0L) {
/* 201 */       return Long.toString(l2) + "" minute"" + ((l2 == 1L) ? "" "" : ""s "") + Long.toString(l1 % 60L) + "" second"" + ((l1 % 60L == 1L) ? """" : ""s"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 207 */     return Long.toString(l1) + "" second"" + ((l1 % 60L == 1L) ? """" : ""s"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\DefaultLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DemuxOutputStream,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Hashtable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DemuxOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private static final int MAX_SIZE = 1024;
/*  72 */   private Hashtable buffers = new Hashtable();
/*     */ 
/*     */   
/*     */   private boolean skip = false;
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */   
/*     */   private boolean isErrorStream;
/*     */ 
/*     */   
/*     */   public DemuxOutputStream(Project paramProject, boolean paramBoolean) {
/*  85 */     this.project = paramProject;
/*  86 */     this.isErrorStream = paramBoolean;
/*     */   }
/*     */   
/*     */   private ByteArrayOutputStream getBuffer() {
/*  90 */     Thread thread = Thread.currentThread();
/*  91 */     ByteArrayOutputStream byteArrayOutputStream = (ByteArrayOutputStream)this.buffers.get(thread);
/*  92 */     if (byteArrayOutputStream == null) {
/*  93 */       byteArrayOutputStream = new ByteArrayOutputStream();
/*  94 */       this.buffers.put(thread, byteArrayOutputStream);
/*     */     } 
/*  96 */     return byteArrayOutputStream;
/*     */   }
/*     */   
/*     */   private void resetBuffer() {
/* 100 */     Thread thread = Thread.currentThread();
/* 101 */     this.buffers.remove(thread);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) throws IOException {
/* 111 */     byte b = (byte)paramInt;
/* 112 */     if (b == 10 || b == 13) {
/* 113 */       if (!this.skip) {
/* 114 */         processBuffer();
/*     */       }
/*     */     } else {
/* 117 */       ByteArrayOutputStream byteArrayOutputStream = getBuffer();
/* 118 */       byteArrayOutputStream.write(paramInt);
/* 119 */       if (byteArrayOutputStream.size() > 1024) {
/* 120 */         processBuffer();
/*     */       }
/*     */     } 
/* 123 */     this.skip = (b == 13);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer() {
/* 131 */     String str = getBuffer().toString();
/* 132 */     this.project.demuxOutput(str, this.isErrorStream);
/* 133 */     resetBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void close() throws IOException { flush(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void flush() throws IOException {
/* 147 */     if (getBuffer().size() > 0)
/* 148 */       processBuffer(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\DemuxOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DesirableFilter,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DesirableFilter
/*     */   implements FilenameFilter
/*     */ {
/*     */   public boolean accept(File paramFile, String paramString) {
/*  77 */     if (paramString.endsWith(""~"")) {
/*  78 */       return false;
/*     */     }
/*     */ 
/*     */     
/*  82 */     if (paramString.startsWith(""#"") && paramString.endsWith(""#"")) {
/*  83 */       return false;
/*     */     }
/*     */ 
/*     */     
/*  87 */     if (paramString.startsWith(""%"") && paramString.endsWith(""%"")) {
/*  88 */       return false;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  96 */     if (paramString.equals(""CVS"")) {
/*  97 */       return false;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 103 */     if (paramString.equals("".cvsignore"")) {
/* 104 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 108 */     if (paramString.startsWith("".#"")) {
/* 109 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 113 */     if (paramString.equals(""SCCS"")) {
/* 114 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 118 */     if (paramString.equals(""vssver.scc"")) {
/* 119 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 123 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\DesirableFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DirectoryScanner,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.Vector;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class DirectoryScanner
/*      */   implements FileScanner
/*      */ {
/*  148 */   protected static final String[] DEFAULTEXCLUDES = new String[] { ""**/*~"", ""**/#*#"", ""**/.#*"", ""**/%*%"", ""**/CVS"", ""**/CVS/**"", ""**/.cvsignore"", ""**/SCCS"", ""**/SCCS/**"", ""**/vssver.scc"" };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected File basedir;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected String[] includes;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected String[] excludes;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector filesIncluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector filesNotIncluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector filesExcluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector dirsIncluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector dirsNotIncluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Vector dirsExcluded;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean haveSlowResults = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isCaseSensitive = true;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  239 */   protected static boolean matchPatternStart(String paramString1, String paramString2) { return matchPatternStart(paramString1, paramString2, true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static boolean matchPatternStart(String paramString1, String paramString2, boolean paramBoolean) {
/*  260 */     if (paramString2.startsWith(File.separator) != paramString1.startsWith(File.separator))
/*      */     {
/*  262 */       return false;
/*      */     }
/*      */     
/*  265 */     Vector vector1 = new Vector();
/*  266 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString1, File.separator);
/*  267 */     while (stringTokenizer.hasMoreTokens()) {
/*  268 */       vector1.addElement(stringTokenizer.nextToken());
/*      */     }
/*      */     
/*  271 */     Vector vector2 = new Vector();
/*  272 */     stringTokenizer = new StringTokenizer(paramString2, File.separator);
/*  273 */     while (stringTokenizer.hasMoreTokens()) {
/*  274 */       vector2.addElement(stringTokenizer.nextToken());
/*      */     }
/*      */     
/*  277 */     byte b1 = 0;
/*  278 */     int i = vector1.size() - 1;
/*  279 */     byte b2 = 0;
/*  280 */     int j = vector2.size() - 1;
/*      */ 
/*      */     
/*  283 */     while (b1 <= i && b2 <= j) {
/*  284 */       String str = vector1.elementAt(b1);
/*  285 */       if (str.equals(""**"")) {
/*      */         break;
/*      */       }
/*  288 */       if (!match(str, vector2.elementAt(b2), paramBoolean)) {
/*  289 */         return false;
/*      */       }
/*  291 */       b1++;
/*  292 */       b2++;
/*      */     } 
/*      */     
/*  295 */     if (b2 > j)
/*      */     {
/*  297 */       return true; } 
/*  298 */     if (b1 > i)
/*      */     {
/*  300 */       return false;
/*      */     }
/*      */ 
/*      */     
/*  304 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  318 */   protected static boolean matchPath(String paramString1, String paramString2) { return matchPath(paramString1, paramString2, true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static boolean matchPath(String paramString1, String paramString2, boolean paramBoolean) {
/*  336 */     if (paramString2.startsWith(File.separator) != paramString1.startsWith(File.separator))
/*      */     {
/*  338 */       return false;
/*      */     }
/*      */     
/*  341 */     Vector vector1 = new Vector();
/*  342 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString1, File.separator);
/*  343 */     while (stringTokenizer.hasMoreTokens()) {
/*  344 */       vector1.addElement(stringTokenizer.nextToken());
/*      */     }
/*      */     
/*  347 */     Vector vector2 = new Vector();
/*  348 */     stringTokenizer = new StringTokenizer(paramString2, File.separator);
/*  349 */     while (stringTokenizer.hasMoreTokens()) {
/*  350 */       vector2.addElement(stringTokenizer.nextToken());
/*      */     }
/*      */     
/*  353 */     int i = 0;
/*  354 */     int j = vector1.size() - 1;
/*  355 */     int k = 0;
/*  356 */     int m = vector2.size() - 1;
/*      */ 
/*      */     
/*  359 */     while (i <= j && k <= m) {
/*  360 */       String str = vector1.elementAt(i);
/*  361 */       if (str.equals(""**"")) {
/*      */         break;
/*      */       }
/*  364 */       if (!match(str, vector2.elementAt(k), paramBoolean)) {
/*  365 */         return false;
/*      */       }
/*  367 */       i++;
/*  368 */       k++;
/*      */     } 
/*  370 */     if (k > m) {
/*      */       
/*  372 */       for (int i1 = i; i1 <= j; i1++) {
/*  373 */         if (!vector1.elementAt(i1).equals(""**"")) {
/*  374 */           return false;
/*      */         }
/*      */       } 
/*  377 */       return true;
/*      */     } 
/*  379 */     if (i > j)
/*      */     {
/*  381 */       return false;
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  386 */     while (i <= j && k <= m) {
/*  387 */       String str = vector1.elementAt(j);
/*  388 */       if (str.equals(""**"")) {
/*      */         break;
/*      */       }
/*  391 */       if (!match(str, vector2.elementAt(m), paramBoolean)) {
/*  392 */         return false;
/*      */       }
/*  394 */       j--;
/*  395 */       m--;
/*      */     } 
/*  397 */     if (k > m) {
/*      */       
/*  399 */       for (int i1 = i; i1 <= j; i1++) {
/*  400 */         if (!vector1.elementAt(i1).equals(""**"")) {
/*  401 */           return false;
/*      */         }
/*      */       } 
/*  404 */       return true;
/*      */     } 
/*      */     
/*  407 */     while (i != j && k <= m) {
/*  408 */       int i1 = -1;
/*  409 */       for (int i2 = i + 1; i2 <= j; i2++) {
/*  410 */         if (vector1.elementAt(i2).equals(""**"")) {
/*  411 */           i1 = i2;
/*      */           break;
/*      */         } 
/*      */       } 
/*  415 */       if (i1 == i + 1) {
/*      */         
/*  417 */         i++;
/*      */         
/*      */         continue;
/*      */       } 
/*      */       
/*  422 */       int i3 = i1 - i - 1;
/*  423 */       int i4 = m - k + 1;
/*  424 */       int i5 = -1;
/*      */       
/*  426 */       for (byte b = 0; b <= i4 - i3; ) {
/*  427 */         for (byte b1 = 0; b1 < i3; b1++) {
/*  428 */           String str1 = vector1.elementAt(i + b1 + 1);
/*  429 */           String str2 = vector2.elementAt(k + b + b1);
/*  430 */           if (!match(str1, str2, paramBoolean)) {
/*      */             b++;
/*      */             continue;
/*      */           } 
/*      */         } 
/*  435 */         i5 = k + b;
/*      */         
/*      */         break;
/*      */       } 
/*  439 */       if (i5 == -1) {
/*  440 */         return false;
/*      */       }
/*      */       
/*  443 */       i = i1;
/*  444 */       k = i5 + i3;
/*      */     } 
/*      */     
/*  447 */     for (int n = i; n <= j; n++) {
/*  448 */       if (!vector1.elementAt(n).equals(""**"")) {
/*  449 */         return false;
/*      */       }
/*      */     } 
/*      */     
/*  453 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  471 */   protected static boolean match(String paramString1, String paramString2) { return match(paramString1, paramString2, true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static boolean match(String paramString1, String paramString2, boolean paramBoolean) {
/*  489 */     char[] arrayOfChar1 = paramString1.toCharArray();
/*  490 */     char[] arrayOfChar2 = paramString2.toCharArray();
/*  491 */     int i = 0;
/*  492 */     int j = arrayOfChar1.length - 1;
/*  493 */     int k = 0;
/*  494 */     int m = arrayOfChar2.length - 1;
/*      */ 
/*      */     
/*  497 */     boolean bool = false;
/*  498 */     for (byte b = 0; b < arrayOfChar1.length; b++) {
/*  499 */       if (arrayOfChar1[b] == '*') {
/*  500 */         bool = true;
/*      */         
/*      */         break;
/*      */       } 
/*      */     } 
/*  505 */     if (!bool) {
/*      */       
/*  507 */       if (j != m) {
/*  508 */         return false;
/*      */       }
/*  510 */       for (byte b1 = 0; b1 <= j; b1++) {
/*  511 */         char c1 = arrayOfChar1[b1];
/*  512 */         if (c1 != '?') {
/*  513 */           if (paramBoolean && c1 != arrayOfChar2[b1]) {
/*  514 */             return false;
/*      */           }
/*  516 */           if (!paramBoolean && Character.toUpperCase(c1) != Character.toUpperCase(arrayOfChar2[b1]))
/*      */           {
/*  518 */             return false;
/*      */           }
/*      */         } 
/*      */       } 
/*  522 */       return true;
/*      */     } 
/*      */     
/*  525 */     if (j == 0) {
/*  526 */       return true;
/*      */     }
/*      */     
/*      */     char c;
/*  530 */     while ((c = arrayOfChar1[i]) != '*' && k <= m) {
/*  531 */       if (c != '?') {
/*  532 */         if (paramBoolean && c != arrayOfChar2[k]) {
/*  533 */           return false;
/*      */         }
/*  535 */         if (!paramBoolean && Character.toUpperCase(c) != Character.toUpperCase(arrayOfChar2[k]))
/*      */         {
/*  537 */           return false;
/*      */         }
/*      */       } 
/*  540 */       i++;
/*  541 */       k++;
/*      */     } 
/*  543 */     if (k > m) {
/*      */ 
/*      */       
/*  546 */       for (int i1 = i; i1 <= j; i1++) {
/*  547 */         if (arrayOfChar1[i1] != '*') {
/*  548 */           return false;
/*      */         }
/*      */       } 
/*  551 */       return true;
/*      */     } 
/*      */ 
/*      */     
/*  555 */     while ((c = arrayOfChar1[j]) != '*' && k <= m) {
/*  556 */       if (c != '?') {
/*  557 */         if (paramBoolean && c != arrayOfChar2[m]) {
/*  558 */           return false;
/*      */         }
/*  560 */         if (!paramBoolean && Character.toUpperCase(c) != Character.toUpperCase(arrayOfChar2[m]))
/*      */         {
/*  562 */           return false;
/*      */         }
/*      */       } 
/*  565 */       j--;
/*  566 */       m--;
/*      */     } 
/*  568 */     if (k > m) {
/*      */ 
/*      */       
/*  571 */       for (int i1 = i; i1 <= j; i1++) {
/*  572 */         if (arrayOfChar1[i1] != '*') {
/*  573 */           return false;
/*      */         }
/*      */       } 
/*  576 */       return true;
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  581 */     while (i != j && k <= m) {
/*  582 */       int i1 = -1;
/*  583 */       for (int i2 = i + 1; i2 <= j; i2++) {
/*  584 */         if (arrayOfChar1[i2] == '*') {
/*  585 */           i1 = i2;
/*      */           break;
/*      */         } 
/*      */       } 
/*  589 */       if (i1 == i + 1) {
/*      */         
/*  591 */         i++;
/*      */         
/*      */         continue;
/*      */       } 
/*      */       
/*  596 */       int i3 = i1 - i - 1;
/*  597 */       int i4 = m - k + 1;
/*  598 */       int i5 = -1;
/*      */       
/*  600 */       for (byte b1 = 0; b1 <= i4 - i3; ) {
/*  601 */         for (byte b2 = 0; b2 < i3; b2++) {
/*  602 */           c = arrayOfChar1[i + b2 + 1];
/*  603 */           if (c != '?') {
/*  604 */             if (paramBoolean && c != arrayOfChar2[k + b1 + b2]) {
/*      */               // Byte code: goto -> 544
/*      */             }
/*  607 */             if (!paramBoolean && Character.toUpperCase(c) != Character.toUpperCase(arrayOfChar2[k + b1 + b2])) {
/*      */               b1++;
/*      */               
/*      */               continue;
/*      */             } 
/*      */           } 
/*      */         } 
/*  614 */         i5 = k + b1;
/*      */         
/*      */         break;
/*      */       } 
/*  618 */       if (i5 == -1) {
/*  619 */         return false;
/*      */       }
/*      */       
/*  622 */       i = i1;
/*  623 */       k = i5 + i3;
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  628 */     for (int n = i; n <= j; n++) {
/*  629 */       if (arrayOfChar1[n] != '*') {
/*  630 */         return false;
/*      */       }
/*      */     } 
/*  633 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  647 */   public void setBasedir(String paramString) { setBasedir(new File(paramString.replace('/', File.separatorChar).replace('\\', File.separatorChar))); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  659 */   public void setBasedir(File paramFile) { this.basedir = paramFile; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  671 */   public File getBasedir() { return this.basedir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  682 */   public void setCaseSensitive(boolean paramBoolean) { this.isCaseSensitive = paramBoolean; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setIncludes(String[] paramArrayOfString) {
/*  695 */     if (paramArrayOfString == null) {
/*  696 */       this.includes = null;
/*      */     } else {
/*  698 */       this.includes = new String[paramArrayOfString.length];
/*  699 */       for (byte b = 0; b < paramArrayOfString.length; b++) {
/*      */         
/*  701 */         String str = paramArrayOfString[b].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*  702 */         if (str.endsWith(File.separator)) {
/*  703 */           str = str + ""**"";
/*      */         }
/*  705 */         this.includes[b] = str;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExcludes(String[] paramArrayOfString) {
/*  722 */     if (paramArrayOfString == null) {
/*  723 */       this.excludes = null;
/*      */     } else {
/*  725 */       this.excludes = new String[paramArrayOfString.length];
/*  726 */       for (byte b = 0; b < paramArrayOfString.length; b++) {
/*      */         
/*  728 */         String str = paramArrayOfString[b].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*  729 */         if (str.endsWith(File.separator)) {
/*  730 */           str = str + ""**"";
/*      */         }
/*  732 */         this.excludes[b] = str;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void scan() {
/*  746 */     if (this.basedir == null) {
/*  747 */       throw new IllegalStateException(""No basedir set"");
/*      */     }
/*  749 */     if (!this.basedir.exists()) {
/*  750 */       throw new IllegalStateException(""basedir "" + this.basedir + "" does not exist"");
/*      */     }
/*      */     
/*  753 */     if (!this.basedir.isDirectory()) {
/*  754 */       throw new IllegalStateException(""basedir "" + this.basedir + "" is not a directory"");
/*      */     }
/*      */ 
/*      */     
/*  758 */     if (this.includes == null) {
/*      */       
/*  760 */       this.includes = new String[1];
/*  761 */       this.includes[0] = ""**"";
/*      */     } 
/*  763 */     if (this.excludes == null) {
/*  764 */       this.excludes = new String[0];
/*      */     }
/*      */     
/*  767 */     this.filesIncluded = new Vector();
/*  768 */     this.filesNotIncluded = new Vector();
/*  769 */     this.filesExcluded = new Vector();
/*  770 */     this.dirsIncluded = new Vector();
/*  771 */     this.dirsNotIncluded = new Vector();
/*  772 */     this.dirsExcluded = new Vector();
/*      */     
/*  774 */     if (isIncluded("""")) {
/*  775 */       if (!isExcluded("""")) {
/*  776 */         this.dirsIncluded.addElement("""");
/*      */       } else {
/*  778 */         this.dirsExcluded.addElement("""");
/*      */       } 
/*      */     } else {
/*  781 */       this.dirsNotIncluded.addElement("""");
/*      */     } 
/*  783 */     scandir(this.basedir, """", true);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void slowScan() {
/*  792 */     if (this.haveSlowResults) {
/*      */       return;
/*      */     }
/*      */     
/*  796 */     String[] arrayOfString1 = new String[this.dirsExcluded.size()];
/*  797 */     this.dirsExcluded.copyInto((Object[])arrayOfString1);
/*      */     
/*  799 */     String[] arrayOfString2 = new String[this.dirsNotIncluded.size()];
/*  800 */     this.dirsNotIncluded.copyInto((Object[])arrayOfString2);
/*      */     
/*  802 */     for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/*  803 */       if (!couldHoldIncluded(arrayOfString1[b1])) {
/*  804 */         scandir(new File(this.basedir, arrayOfString1[b1]), arrayOfString1[b1] + File.separator, false);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  809 */     for (byte b2 = 0; b2 < arrayOfString2.length; b2++) {
/*  810 */       if (!couldHoldIncluded(arrayOfString2[b2])) {
/*  811 */         scandir(new File(this.basedir, arrayOfString2[b2]), arrayOfString2[b2] + File.separator, false);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  816 */     this.haveSlowResults = true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void scandir(File paramFile, String paramString, boolean paramBoolean) {
/*  838 */     String[] arrayOfString = paramFile.list();
/*      */     
/*  840 */     if (arrayOfString == null)
/*      */     {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  848 */       throw new BuildException(""IO error scanning directory "" + paramFile.getAbsolutePath());
/*      */     }
/*      */ 
/*      */     
/*  852 */     for (byte b = 0; b < arrayOfString.length; b++) {
/*  853 */       String str = paramString + arrayOfString[b];
/*  854 */       File file = new File(paramFile, arrayOfString[b]);
/*  855 */       if (file.isDirectory()) {
/*  856 */         if (isIncluded(str)) {
/*  857 */           if (!isExcluded(str)) {
/*  858 */             this.dirsIncluded.addElement(str);
/*  859 */             if (paramBoolean) {
/*  860 */               scandir(file, str + File.separator, paramBoolean);
/*      */             }
/*      */           } else {
/*  863 */             this.dirsExcluded.addElement(str);
/*  864 */             if (paramBoolean && couldHoldIncluded(str)) {
/*  865 */               scandir(file, str + File.separator, paramBoolean);
/*      */             }
/*      */           } 
/*      */         } else {
/*  869 */           this.dirsNotIncluded.addElement(str);
/*  870 */           if (paramBoolean && couldHoldIncluded(str)) {
/*  871 */             scandir(file, str + File.separator, paramBoolean);
/*      */           }
/*      */         } 
/*  874 */         if (!paramBoolean) {
/*  875 */           scandir(file, str + File.separator, paramBoolean);
/*      */         }
/*  877 */       } else if (file.isFile()) {
/*  878 */         if (isIncluded(str)) {
/*  879 */           if (!isExcluded(str)) {
/*  880 */             this.filesIncluded.addElement(str);
/*      */           } else {
/*  882 */             this.filesExcluded.addElement(str);
/*      */           } 
/*      */         } else {
/*  885 */           this.filesNotIncluded.addElement(str);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isIncluded(String paramString) {
/*  901 */     for (byte b = 0; b < this.includes.length; b++) {
/*  902 */       if (matchPath(this.includes[b], paramString, this.isCaseSensitive)) {
/*  903 */         return true;
/*      */       }
/*      */     } 
/*  906 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean couldHoldIncluded(String paramString) {
/*  917 */     for (byte b = 0; b < this.includes.length; b++) {
/*  918 */       if (matchPatternStart(this.includes[b], paramString, this.isCaseSensitive)) {
/*  919 */         return true;
/*      */       }
/*      */     } 
/*  922 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isExcluded(String paramString) {
/*  933 */     for (byte b = 0; b < this.excludes.length; b++) {
/*  934 */       if (matchPath(this.excludes[b], paramString, this.isCaseSensitive)) {
/*  935 */         return true;
/*      */       }
/*      */     } 
/*  938 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getIncludedFiles() {
/*  950 */     int i = this.filesIncluded.size();
/*  951 */     String[] arrayOfString = new String[i];
/*  952 */     for (byte b = 0; b < i; b++) {
/*  953 */       arrayOfString[b] = this.filesIncluded.elementAt(b);
/*      */     }
/*  955 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getNotIncludedFiles() {
/*  967 */     slowScan();
/*  968 */     int i = this.filesNotIncluded.size();
/*  969 */     String[] arrayOfString = new String[i];
/*  970 */     for (byte b = 0; b < i; b++) {
/*  971 */       arrayOfString[b] = this.filesNotIncluded.elementAt(b);
/*      */     }
/*  973 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getExcludedFiles() {
/*  986 */     slowScan();
/*  987 */     int i = this.filesExcluded.size();
/*  988 */     String[] arrayOfString = new String[i];
/*  989 */     for (byte b = 0; b < i; b++) {
/*  990 */       arrayOfString[b] = this.filesExcluded.elementAt(b);
/*      */     }
/*  992 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getIncludedDirectories() {
/* 1005 */     int i = this.dirsIncluded.size();
/* 1006 */     String[] arrayOfString = new String[i];
/* 1007 */     for (byte b = 0; b < i; b++) {
/* 1008 */       arrayOfString[b] = this.dirsIncluded.elementAt(b);
/*      */     }
/* 1010 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getNotIncludedDirectories() {
/* 1023 */     slowScan();
/* 1024 */     int i = this.dirsNotIncluded.size();
/* 1025 */     String[] arrayOfString = new String[i];
/* 1026 */     for (byte b = 0; b < i; b++) {
/* 1027 */       arrayOfString[b] = this.dirsNotIncluded.elementAt(b);
/*      */     }
/* 1029 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getExcludedDirectories() {
/* 1042 */     slowScan();
/* 1043 */     int i = this.dirsExcluded.size();
/* 1044 */     String[] arrayOfString = new String[i];
/* 1045 */     for (byte b = 0; b < i; b++) {
/* 1046 */       arrayOfString[b] = this.dirsExcluded.elementAt(b);
/*      */     }
/* 1048 */     return arrayOfString;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDefaultExcludes() {
/* 1058 */     byte b1 = (this.excludes == null) ? 0 : this.excludes.length;
/*      */     
/* 1060 */     String[] arrayOfString = new String[b1 + DEFAULTEXCLUDES.length];
/* 1061 */     if (b1 > 0) {
/* 1062 */       System.arraycopy(this.excludes, 0, arrayOfString, 0, b1);
/*      */     }
/* 1064 */     for (byte b2 = 0; b2 < DEFAULTEXCLUDES.length; b2++) {
/* 1065 */       arrayOfString[b2 + b1] = DEFAULTEXCLUDES[b2].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */     }
/* 1067 */     this.excludes = arrayOfString;
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\DirectoryScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ExitException,"/*    */ package org.apache.tools.ant;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ExitException
/*    */   extends SecurityException
/*    */ {
/*    */   private int status;
/*    */   
/*    */   public ExitException(int paramInt) {
/* 69 */     super(""ExitException: status "" + paramInt);
/* 70 */     this.status = paramInt;
/*    */   }
/*    */ 
/*    */   
/* 74 */   public int getStatus() { return this.status; }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\ExitException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.FileScanner,"package org.apache.tools.ant;
import java.io.File;
public interface FileScanner {
  void addDefaultExcludes();
  File getBasedir();
  String[] getExcludedDirectories();
  String[] getExcludedFiles();
  String[] getIncludedDirectories();
  String[] getIncludedFiles();
  String[] getNotIncludedDirectories();
  String[] getNotIncludedFiles();
  void scan();
  void setBasedir(String paramString);
  void setBasedir(File paramFile);
  void setExcludes(String[] paramArrayOfString);
  void setIncludes(String[] paramArrayOfString);
  void setCaseSensitive(boolean paramBoolean);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\FileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.IntrospectionHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.types.DataType;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IntrospectionHelper
/*     */   implements BuildListener
/*     */ {
/*     */   private Hashtable attributeTypes;
/*     */   private Hashtable attributeSetters;
/*     */   private Hashtable nestedTypes;
/*     */   private Hashtable nestedCreators;
/*     */   private Hashtable nestedStorers;
/* 102 */   private Method addText = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class bean;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   private static Hashtable helpers = new Hashtable();
/*     */   
/*     */   private IntrospectionHelper(Class paramClass) {
/* 115 */     this.attributeTypes = new Hashtable();
/* 116 */     this.attributeSetters = new Hashtable();
/* 117 */     this.nestedTypes = new Hashtable();
/* 118 */     this.nestedCreators = new Hashtable();
/* 119 */     this.nestedStorers = new Hashtable();
/*     */     
/* 121 */     this.bean = paramClass;
/*     */     
/* 123 */     Method[] arrayOfMethod = paramClass.getMethods();
/* 124 */     for (byte b = 0; b < arrayOfMethod.length; b++) {
/* 125 */       Method method = arrayOfMethod[b];
/* 126 */       String str = method.getName();
/* 127 */       Class clazz = method.getReturnType();
/* 128 */       Class[] arrayOfClass = method.getParameterTypes();
/*     */ 
/*     */       
/* 131 */       if (!Task.class.isAssignableFrom(paramClass) || arrayOfClass.length != 1 || ((!""setLocation"".equals(str) || !Location.class.equals(arrayOfClass[0])) && (!""setTaskType"".equals(str) || !String.class.equals(arrayOfClass[0]))))
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 144 */         if (!TaskContainer.class.isAssignableFrom(paramClass) || arrayOfClass.length != 1 || !""addTask"".equals(str) || !Task.class.equals(arrayOfClass[0]))
/*     */         {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 151 */           if (""addText"".equals(str) && void.class.equals(clazz) && arrayOfClass.length == 1 && String.class.equals(arrayOfClass[0])) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 156 */             this.addText = arrayOfMethod[b];
/*     */           }
/* 158 */           else if (str.startsWith(""set"") && void.class.equals(clazz) && arrayOfClass.length == 1 && !arrayOfClass[0].isArray()) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 163 */             String str1 = getPropertyName(str, ""set"");
/* 164 */             AttributeSetter attributeSetter = createAttributeSetter(method, arrayOfClass[0]);
/* 165 */             if (attributeSetter != null) {
/* 166 */               this.attributeTypes.put(str1, arrayOfClass[0]);
/* 167 */               this.attributeSetters.put(str1, attributeSetter);
/*     */             }
/*     */           
/* 170 */           } else if (str.startsWith(""create"") && !clazz.isArray() && !clazz.isPrimitive() && arrayOfClass.length == 0) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 175 */             String str1 = getPropertyName(str, ""create"");
/* 176 */             this.nestedTypes.put(str1, clazz);
/* 177 */             this.nestedCreators.put(str1, new NestedCreator(this, method)
/*     */                 {
/*     */                   private final Method val$m;
/*     */                   private final IntrospectionHelper this$0;
/*     */                   
/*     */                   public Object create(Object param1Object) throws InvocationTargetException, IllegalAccessException {
/* 183 */                     return this.val$m.invoke(param1Object, new Object[0]);
/*     */                   }
/*     */                 });
/*     */           
/*     */           }
/* 188 */           else if (str.startsWith(""addConfigured"") && void.class.equals(clazz) && arrayOfClass.length == 1 && !String.class.equals(arrayOfClass[0]) && !arrayOfClass[0].isArray() && !arrayOfClass[0].isPrimitive()) {
/*     */ 
/*     */             
/*     */             try {
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 196 */               Constructor constructor = arrayOfClass[0].getConstructor(new Class[0]);
/*     */               
/* 198 */               String str1 = getPropertyName(str, ""addConfigured"");
/* 199 */               this.nestedTypes.put(str1, arrayOfClass[0]);
/* 200 */               this.nestedCreators.put(str1, new NestedCreator(this, constructor) {
/*     */                     private final Constructor val$c;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public Object create(Object param1Object) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 205 */                       return this.val$c.newInstance(new Object[0]);
/*     */                     }
/*     */                   });
/*     */ 
/*     */               
/* 210 */               this.nestedStorers.put(str1, new NestedStorer(this, method) {
/*     */                     private final Method val$m;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public void store(Object param1Object1, Object param1Object2) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 215 */                       this.val$m.invoke(param1Object1, new Object[] { param1Object2 });
/*     */                     }
/*     */                   });
/*     */             }
/* 219 */             catch (NoSuchMethodException noSuchMethodException) {}
/*     */           }
/* 221 */           else if (str.startsWith(""add"") && void.class.equals(clazz) && arrayOfClass.length == 1 && !String.class.equals(arrayOfClass[0]) && !arrayOfClass[0].isArray() && !arrayOfClass[0].isPrimitive()) {
/*     */ 
/*     */             
/*     */             try {
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 229 */               Constructor constructor = arrayOfClass[0].getConstructor(new Class[0]);
/*     */               
/* 231 */               String str1 = getPropertyName(str, ""add"");
/* 232 */               this.nestedTypes.put(str1, arrayOfClass[0]);
/* 233 */               this.nestedCreators.put(str1, new NestedCreator(this, constructor, method) { private final Constructor val$c;
/*     */                     private final Method val$m;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public Object create(Object param1Object) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 238 */                       Object object = this.val$c.newInstance(new Object[0]);
/* 239 */                       this.val$m.invoke(param1Object, new Object[] { object });
/* 240 */                       return object;
/*     */                     } }
/*     */                 );
/*     */             }
/* 244 */             catch (NoSuchMethodException noSuchMethodException) {}
/*     */           }  }  } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private static interface AttributeSetter {
/*     */     void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException;
/*     */   }
/*     */   
/*     */   public static synchronized IntrospectionHelper getHelper(Class paramClass) {
/* 254 */     IntrospectionHelper introspectionHelper = (IntrospectionHelper)helpers.get(paramClass);
/* 255 */     if (introspectionHelper == null) {
/* 256 */       introspectionHelper = new IntrospectionHelper(paramClass);
/* 257 */       helpers.put(paramClass, introspectionHelper);
/*     */     } 
/* 259 */     return introspectionHelper;
/*     */   }
/*     */   private static interface NestedStorer {
/*     */     void store(Object param1Object1, Object param1Object2) throws InvocationTargetException, IllegalAccessException, InstantiationException; }
/*     */   
/*     */   private static interface NestedCreator {
/*     */     Object create(Object param1Object) throws InvocationTargetException, IllegalAccessException, InstantiationException; }
/*     */   
/*     */   public void setAttribute(Project paramProject, Object paramObject, String paramString1, String paramString2) throws BuildException {
/* 268 */     AttributeSetter attributeSetter = (AttributeSetter)this.attributeSetters.get(paramString1);
/* 269 */     if (attributeSetter == null) {
/* 270 */       String str = getElementName(paramProject, paramObject) + "" doesn't support the \"""" + paramString1 + ""\"" attribute."";
/*     */ 
/*     */       
/* 273 */       throw new BuildException(str);
/*     */     } 
/*     */     try {
/* 276 */       attributeSetter.set(paramProject, paramObject, paramString2);
/*     */     } catch (IllegalAccessException illegalAccessException) {
/*     */       
/* 279 */       throw new BuildException(illegalAccessException);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 281 */       Throwable throwable = invocationTargetException.getTargetException();
/* 282 */       if (throwable instanceof BuildException) {
/* 283 */         throw (BuildException)throwable;
/*     */       }
/* 285 */       throw new BuildException(throwable);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(Project paramProject, Object paramObject, String paramString) {
/* 293 */     if (this.addText == null) {
/* 294 */       String str = getElementName(paramProject, paramObject) + "" doesn't support nested text data."";
/*     */ 
/*     */       
/* 297 */       throw new BuildException(str);
/*     */     } 
/*     */     try {
/* 300 */       this.addText.invoke(paramObject, (Object[])new String[] { paramString });
/*     */     } catch (IllegalAccessException illegalAccessException) {
/*     */       
/* 303 */       throw new BuildException(illegalAccessException);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 305 */       Throwable throwable = invocationTargetException.getTargetException();
/* 306 */       if (throwable instanceof BuildException) {
/* 307 */         throw (BuildException)throwable;
/*     */       }
/* 309 */       throw new BuildException(throwable);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object createElement(Project paramProject, Object paramObject, String paramString) throws BuildException {
/* 318 */     NestedCreator nestedCreator = (NestedCreator)this.nestedCreators.get(paramString);
/* 319 */     if (nestedCreator == null) {
/* 320 */       String str = getElementName(paramProject, paramObject) + "" doesn't support the nested \"""" + paramString + ""\"" element."";
/*     */ 
/*     */       
/* 323 */       throw new BuildException(str);
/*     */     } 
/*     */     try {
/* 326 */       Object object = nestedCreator.create(paramObject);
/* 327 */       if (object instanceof DataType) {
/* 328 */         ((DataType)object).setProject(paramProject);
/*     */       }
/* 330 */       return object;
/*     */     } catch (IllegalAccessException illegalAccessException) {
/*     */       
/* 333 */       throw new BuildException(illegalAccessException);
/*     */     } catch (InstantiationException instantiationException) {
/*     */       
/* 336 */       throw new BuildException(instantiationException);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 338 */       Throwable throwable = invocationTargetException.getTargetException();
/* 339 */       if (throwable instanceof BuildException) {
/* 340 */         throw (BuildException)throwable;
/*     */       }
/* 342 */       throw new BuildException(throwable);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void storeElement(Project paramProject, Object paramObject1, Object paramObject2, String paramString) throws BuildException {
/* 351 */     if (paramString == null) {
/*     */       return;
/*     */     }
/* 354 */     NestedStorer nestedStorer = (NestedStorer)this.nestedStorers.get(paramString);
/* 355 */     if (nestedStorer == null) {
/*     */       return;
/*     */     }
/*     */     try {
/* 359 */       nestedStorer.store(paramObject1, paramObject2);
/*     */     } catch (IllegalAccessException illegalAccessException) {
/*     */       
/* 362 */       throw new BuildException(illegalAccessException);
/*     */     } catch (InstantiationException instantiationException) {
/*     */       
/* 365 */       throw new BuildException(instantiationException);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 367 */       Throwable throwable = invocationTargetException.getTargetException();
/* 368 */       if (throwable instanceof BuildException) {
/* 369 */         throw (BuildException)throwable;
/*     */       }
/* 371 */       throw new BuildException(throwable);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getElementType(String paramString) throws BuildException {
/* 380 */     Class clazz = (Class)this.nestedTypes.get(paramString);
/* 381 */     if (clazz == null) {
/* 382 */       String str = ""Class "" + this.bean.getName() + "" doesn't support the nested \"""" + paramString + ""\"" element."";
/*     */       
/* 384 */       throw new BuildException(str);
/*     */     } 
/* 386 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getAttributeType(String paramString) throws BuildException {
/* 394 */     Class clazz = (Class)this.attributeTypes.get(paramString);
/* 395 */     if (clazz == null) {
/* 396 */       String str = ""Class "" + this.bean.getName() + "" doesn't support the \"""" + paramString + ""\"" attribute."";
/*     */       
/* 398 */       throw new BuildException(str);
/*     */     } 
/* 400 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 407 */   public boolean supportsCharacters() { return (this.addText != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 414 */   public Enumeration getAttributes() { return this.attributeSetters.keys(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 421 */   public Enumeration getNestedElements() { return this.nestedTypes.keys(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private AttributeSetter createAttributeSetter(Method paramMethod, Class paramClass) {
/* 432 */     if (String.class.equals(paramClass)) {
/* 433 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 436 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new String[] { param1String }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */     
/* 441 */     if (Character.class.equals(paramClass) || char.class.equals(paramClass))
/*     */     {
/* 443 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 446 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Character[] { new Character(param1String.charAt(0)) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 450 */     if (byte.class.equals(paramClass)) {
/* 451 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 454 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Byte[] { new Byte(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 458 */     if (short.class.equals(paramClass)) {
/* 459 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 462 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Short[] { new Short(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 466 */     if (int.class.equals(paramClass)) {
/* 467 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 470 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Integer[] { new Integer(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 474 */     if (long.class.equals(paramClass)) {
/* 475 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 478 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Long[] { new Long(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 482 */     if (float.class.equals(paramClass)) {
/* 483 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 486 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Float[] { new Float(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/* 490 */     if (double.class.equals(paramClass)) {
/* 491 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 494 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Double[] { new Double(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 501 */     if (Boolean.class.equals(paramClass) || boolean.class.equals(paramClass))
/*     */     {
/* 503 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 506 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Boolean[] { new Boolean(Project.toBoolean(param1String)) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 513 */     if (Class.class.equals(paramClass)) {
/* 514 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           
/*     */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 518 */               this.val$m.invoke(param1Object, (Object[])new Class[] { Class.forName(param1String) });
/*     */             } catch (ClassNotFoundException classNotFoundException) {
/* 520 */               throw new BuildException(classNotFoundException);
/*     */             } 
/*     */           }
/*     */           private final IntrospectionHelper this$0; }
/*     */         ;
/*     */     }
/* 526 */     if (File.class.equals(paramClass)) {
/* 527 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 530 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new File[] { param1Project.resolveFile(param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */     
/* 536 */     if (Path.class.equals(paramClass)) {
/* 537 */       return new AttributeSetter(this, paramMethod) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 540 */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(param1Object, (Object[])new Path[] { new Path(param1Project, param1String) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */     
/* 546 */     if (EnumeratedAttribute.class.isAssignableFrom(paramClass)) {
/* 547 */       return new AttributeSetter(this, paramClass, paramMethod) { private final Class val$arg;
/*     */           
/*     */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 551 */               EnumeratedAttribute enumeratedAttribute = this.val$arg.newInstance();
/* 552 */               enumeratedAttribute.setValue(param1String);
/* 553 */               this.val$m.invoke(param1Object, (Object[])new EnumeratedAttribute[] { enumeratedAttribute });
/*     */             } catch (InstantiationException instantiationException) {
/* 555 */               throw new BuildException(instantiationException);
/*     */             } 
/*     */           }
/*     */ 
/*     */           
/*     */           private final Method val$m;
/*     */           private final IntrospectionHelper this$0; }
/*     */         ;
/*     */     }
/*     */     try {
/* 565 */       Constructor constructor = paramClass.getConstructor(new Class[] { String.class });
/*     */ 
/*     */       
/* 568 */       return new AttributeSetter(this, constructor, paramMethod) {
/*     */           private final Constructor val$c;
/*     */           
/*     */           public void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 573 */               DataType dataType = (DataType)this.val$c.newInstance((Object[])new String[] { param1String });
/* 574 */               if (dataType instanceof DataType) {
/* 575 */                 ((DataType)dataType).setProject(param1Project);
/*     */               }
/* 577 */               this.val$m.invoke(param1Object, new Object[] { dataType });
/*     */             } catch (InstantiationException instantiationException) {
/* 579 */               throw new BuildException(instantiationException);
/*     */             } 
/*     */           }
/*     */           private final Method val$m; private final IntrospectionHelper this$0;
/*     */         };
/* 584 */     } catch (NoSuchMethodException noSuchMethodException) {
/*     */ 
/*     */ 
/*     */       
/* 588 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   protected String getElementName(Project paramProject, Object paramObject) {
/* 593 */     Hashtable hashtable = paramProject.getTaskDefinitions();
/* 594 */     String str = ""task"";
/* 595 */     if (!hashtable.contains(paramObject.getClass())) {
/*     */       
/* 597 */       hashtable = paramProject.getDataTypeDefinitions();
/* 598 */       str = ""data type"";
/* 599 */       if (!hashtable.contains(paramObject.getClass()))
/*     */       {
/* 601 */         hashtable = null;
/*     */       }
/*     */     } 
/*     */     
/* 605 */     if (hashtable != null) {
/*     */       
/* 607 */       Enumeration enumeration = hashtable.keys();
/* 608 */       while (enumeration.hasMoreElements()) {
/*     */         
/* 610 */         String str1 = enumeration.nextElement();
/* 611 */         Class clazz = (Class)hashtable.get(str1);
/* 612 */         if (paramObject.getClass().equals(clazz))
/*     */         {
/* 614 */           return ""The <"" + str1 + ""> "" + str;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 619 */     return ""Class "" + paramObject.getClass().getName();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getPropertyName(String paramString1, String paramString2) {
/* 627 */     int i = paramString2.length();
/* 628 */     return paramString1.substring(i).toLowerCase();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildStarted(BuildEvent paramBuildEvent) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent paramBuildEvent) {
/* 649 */     this.attributeTypes.clear();
/* 650 */     this.attributeSetters.clear();
/* 651 */     this.nestedTypes.clear();
/* 652 */     this.nestedCreators.clear();
/* 653 */     this.addText = null;
/* 654 */     helpers.clear();
/*     */   }
/*     */   
/*     */   public void targetStarted(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void targetFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskStarted(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void taskFinished(BuildEvent paramBuildEvent) {}
/*     */   
/*     */   public void messageLogged(BuildEvent paramBuildEvent) {}
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\IntrospectionHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Launcher,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ import java.lang.reflect.Method;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.Properties;
/*     */ import java.util.StringTokenizer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Launcher
/*     */ {
/*     */   private static File determineAntHome11() {
/*  71 */     String str = System.getProperty(""java.class.path"");
/*  72 */     StringTokenizer stringTokenizer = new StringTokenizer(str, System.getProperty(""path.separator""));
/*  73 */     while (stringTokenizer.hasMoreTokens()) {
/*  74 */       String str1 = stringTokenizer.nextToken();
/*  75 */       if (str1.endsWith(""ant.jar"")) {
/*  76 */         File file1 = new File(str1);
/*  77 */         File file2 = new File(file1.getParent());
/*  78 */         return new File(file2.getParent());
/*     */       } 
/*     */     } 
/*     */     
/*  82 */     return null;
/*     */   }
/*     */   
/*     */   private static File determineAntHome(ClassLoader paramClassLoader) {
/*     */     try {
/*  87 */       String str1 = Launcher.class.getName().replace('.', '/') + "".class"";
/*  88 */       URL uRL = paramClassLoader.getResource(str1);
/*  89 */       String str2 = uRL.getFile();
/*  90 */       if (uRL.getProtocol().equals(""file"")) {
/*     */ 
/*     */         
/*  93 */         int i = str2.lastIndexOf(str1);
/*  94 */         if (i != -1) {
/*  95 */           str2 = str2.substring(0, i);
/*     */         }
/*  97 */         File file1 = new File(str2);
/*  98 */         File file2 = new File(file1.getParent());
/*  99 */         return new File(file2.getParent());
/*     */       } 
/*     */       
/* 102 */       if (uRL.getProtocol().equals(""jar""))
/*     */       {
/*     */         
/* 105 */         int i = str2.lastIndexOf(""!"");
/* 106 */         if (i != -1) {
/* 107 */           str2 = str2.substring(0, i);
/*     */         }
/* 109 */         URL uRL1 = new URL(str2);
/* 110 */         File file1 = new File(uRL1.getFile());
/* 111 */         File file2 = new File(file1.getParent());
/* 112 */         return new File(file2.getParent());
/*     */       }
/*     */     
/*     */     } catch (MalformedURLException malformedURLException) {
/*     */       
/* 117 */       malformedURLException.printStackTrace();
/*     */     } 
/* 119 */     return null;
/*     */   }
/*     */   
/*     */   private static void addDirJars(AntClassLoader paramAntClassLoader, File paramFile) {
/* 123 */     String[] arrayOfString = paramFile.list(new FilenameFilter() {
/*     */           public boolean accept(File param1File, String param1String) {
/* 125 */             return param1String.endsWith("".jar"");
/*     */           }
/*     */         });
/*     */     
/* 129 */     if (arrayOfString != null) {
/* 130 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 131 */         File file = new File(paramFile, arrayOfString[b]);
/* 132 */         paramAntClassLoader.addPathElement(file.getAbsolutePath());
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   private static void addToolsJar(AntClassLoader paramAntClassLoader) {
/* 138 */     String str = System.getProperty(""java.home"");
/* 139 */     if (str.endsWith(""jre"")) {
/* 140 */       str = str.substring(0, str.length() - 4);
/*     */     }
/* 142 */     System.out.println(""Java home is "" + str);
/* 143 */     File file = new File(str, ""lib/tools.jar"");
/* 144 */     if (!file.exists()) {
/* 145 */       System.out.println(""Unable to find tools.jar at "" + file.getPath());
/*     */     } else {
/*     */       
/* 148 */       paramAntClassLoader.addPathElement(file.getAbsolutePath());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void main(String[] paramArrayOfString) {
/* 154 */     File file1 = null;
/* 155 */     ClassLoader classLoader = Launcher.class.getClassLoader();
/* 156 */     if (classLoader == null) {
/* 157 */       file1 = determineAntHome11();
/*     */     } else {
/*     */       
/* 160 */       file1 = determineAntHome(classLoader);
/*     */     } 
/* 162 */     if (file1 == null) {
/* 163 */       System.err.println(""Unable to determine ANT_HOME"");
/* 164 */       System.exit(1);
/*     */     } 
/*     */     
/* 167 */     System.out.println(""ANT_HOME is "" + file1);
/*     */ 
/*     */     
/* 170 */     AntClassLoader antClassLoader = new AntClassLoader(classLoader, false);
/*     */ 
/*     */     
/* 173 */     addToolsJar(antClassLoader);
/*     */ 
/*     */     
/* 176 */     File file2 = new File(file1, ""lib"");
/* 177 */     addDirJars(antClassLoader, file2);
/*     */     
/* 179 */     File file3 = new File(file1, ""lib/optional"");
/* 180 */     addDirJars(antClassLoader, file3);
/*     */     
/* 182 */     Properties properties = new Properties();
/* 183 */     properties.put(""ant.home"", file1.getAbsolutePath());
/*     */     
/*     */     try {
/* 186 */       Class clazz = antClassLoader.loadClass(""org.apache.tools.ant.Main"");
/* 187 */       AntClassLoader.initializeClass(clazz);
/*     */       
/* 189 */       Class[] arrayOfClass = { Class.forName(""[Ljava.lang.String;""), Properties.class, ClassLoader.class };
/*     */       
/* 191 */       Method method = clazz.getMethod(""start"", arrayOfClass);
/* 192 */       Object[] arrayOfObject = { paramArrayOfString, properties, classLoader };
/* 193 */       method.invoke(null, arrayOfObject);
/*     */     } catch (Exception exception) {
/*     */       
/* 196 */       System.out.println(""Exception running Ant: "" + exception.getClass().getName() + "": "" + exception.getMessage());
/* 197 */       exception.printStackTrace();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Launcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Location,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Location
/*     */ {
/*     */   private String fileName;
/*     */   private int lineNumber;
/*     */   private int columnNumber;
/*  65 */   public static final Location UNKNOWN_LOCATION = new Location();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  71 */   private Location() { this(null, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   public Location(String paramString) { this(paramString, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Location(String paramString, int paramInt1, int paramInt2) {
/*  85 */     this.fileName = paramString;
/*  86 */     this.lineNumber = paramInt1;
/*  87 */     this.columnNumber = paramInt2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  96 */     StringBuffer stringBuffer = new StringBuffer();
/*     */     
/*  98 */     if (this.fileName != null) {
/*  99 */       stringBuffer.append(this.fileName);
/*     */       
/* 101 */       if (this.lineNumber != 0) {
/* 102 */         stringBuffer.append("":"");
/* 103 */         stringBuffer.append(this.lineNumber);
/*     */       } 
/*     */       
/* 106 */       stringBuffer.append("": "");
/*     */     } 
/*     */     
/* 109 */     return stringBuffer.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Location.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Main,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Main
/*     */ {
/*     */   public static final String DEFAULT_BUILD_FILENAME = ""build.xml"";
/*  78 */   private int msgOutputLevel = 2;
/*     */ 
/*     */   
/*     */   private File buildFile;
/*     */ 
/*     */   
/*  84 */   private PrintStream out = System.out;
/*     */ 
/*     */   
/*  87 */   private PrintStream err = System.err;
/*     */ 
/*     */   
/*  90 */   private Vector targets = new Vector(5);
/*     */ 
/*     */   
/*  93 */   private Properties definedProps = new Properties();
/*     */ 
/*     */   
/*  96 */   private Vector listeners = new Vector(5);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   private String loggerClassname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean readyToRun = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean projectHelp = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printMessage(Throwable paramThrowable) {
/* 124 */     String str = paramThrowable.getMessage();
/* 125 */     if (str != null) {
/* 126 */       System.err.println(str);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void start(String[] paramArrayOfString, Properties paramProperties, ClassLoader paramClassLoader) {
/* 135 */     Main main = null;
/*     */     
/*     */     try {
/* 138 */       main = new Main(paramArrayOfString);
/*     */     } catch (Throwable throwable) {
/* 140 */       printMessage(throwable);
/* 141 */       System.exit(1);
/*     */     } 
/*     */     
/* 144 */     if (paramProperties != null) {
/* 145 */       for (Enumeration enumeration = paramProperties.keys(); enumeration.hasMoreElements(); ) {
/* 146 */         String str1 = enumeration.nextElement();
/* 147 */         String str2 = paramProperties.getProperty(str1);
/* 148 */         main.definedProps.put(str1, str2);
/*     */       } 
/*     */     }
/*     */     
/*     */     try {
/* 153 */       main.runBuild(paramClassLoader);
/* 154 */       System.exit(0);
/*     */     } catch (BuildException buildException) {
/* 156 */       if (main.err != System.err) {
/* 157 */         printMessage(buildException);
/*     */       }
/* 159 */       System.exit(1);
/*     */     } catch (Throwable throwable) {
/* 161 */       printMessage(throwable);
/* 162 */       System.exit(1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public static void main(String[] paramArrayOfString) { start(paramArrayOfString, null, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected Main(String[] paramArrayOfString) throws BuildException {
/* 181 */     String str = null;
/*     */ 
/*     */ 
/*     */     
/* 185 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 186 */       String str1 = paramArrayOfString[b];
/*     */       
/* 188 */       if (str1.equals(""-help"")) {
/* 189 */         printUsage(); return;
/*     */       } 
/* 191 */       if (str1.equals(""-version"")) {
/* 192 */         printVersion(); return;
/*     */       } 
/* 194 */       if (str1.equals(""-quiet"") || str1.equals(""-q""))
/* 195 */       { this.msgOutputLevel = 1; }
/* 196 */       else if (str1.equals(""-verbose"") || str1.equals(""-v""))
/* 197 */       { printVersion();
/* 198 */         this.msgOutputLevel = 3; }
/* 199 */       else if (str1.equals(""-debug""))
/* 200 */       { printVersion();
/* 201 */         this.msgOutputLevel = 4; }
/* 202 */       else if (str1.equals(""-logfile"") || str1.equals(""-l""))
/*     */       { try {
/* 204 */           File file = new File(paramArrayOfString[b + 1]);
/* 205 */           b++;
/* 206 */           this.out = new PrintStream(new FileOutputStream(file));
/* 207 */           this.err = this.out;
/* 208 */           System.setOut(this.out);
/* 209 */           System.setErr(this.out);
/*     */         } catch (IOException iOException) {
/* 211 */           String str2 = ""Cannot write on the specified log file. Make sure the path exists and you have write permissions."";
/*     */           
/* 213 */           System.out.println(str2);
/*     */           return;
/*     */         } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
/* 216 */           String str2 = ""You must specify a log file when using the -log argument"";
/*     */           
/* 218 */           System.out.println(str2);
/*     */           return;
/*     */         }  }
/* 221 */       else if (str1.equals(""-buildfile"") || str1.equals(""-file"") || str1.equals(""-f""))
/*     */       { try {
/* 223 */           this.buildFile = new File(paramArrayOfString[b + 1]);
/* 224 */           b++;
/*     */         } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
/* 226 */           String str2 = ""You must specify a buildfile when using the -buildfile argument"";
/*     */           
/* 228 */           System.out.println(str2);
/*     */           return;
/*     */         }  }
/* 231 */       else if (str1.equals(""-listener""))
/*     */       { try {
/* 233 */           this.listeners.addElement(paramArrayOfString[b + 1]);
/* 234 */           b++;
/*     */         } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
/* 236 */           String str2 = ""You must specify a classname when using the -listener argument"";
/*     */           
/* 238 */           System.out.println(str2);
/*     */           return;
/*     */         }  }
/* 241 */       else if (str1.startsWith(""-D""))
/*     */       
/*     */       { 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 254 */         String str2 = str1.substring(2, str1.length());
/* 255 */         String str3 = null;
/* 256 */         int i = str2.indexOf(""="");
/* 257 */         if (i > 0) {
/* 258 */           str3 = str2.substring(i + 1);
/* 259 */           str2 = str2.substring(0, i);
/* 260 */         } else if (b < paramArrayOfString.length - 1) {
/* 261 */           str3 = paramArrayOfString[++b];
/*     */         } 
/* 263 */         this.definedProps.put(str2, str3); }
/* 264 */       else if (str1.equals(""-logger""))
/* 265 */       { if (this.loggerClassname != null) {
/* 266 */           System.out.println(""Only one logger class may be specified."");
/*     */           return;
/*     */         } 
/*     */         try {
/* 270 */           this.loggerClassname = paramArrayOfString[++b];
/*     */         } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
/*     */           
/* 273 */           System.out.println(""You must specify a classname when using the -logger argument"");
/*     */           
/*     */           return;
/*     */         }  }
/* 277 */       else if (str1.equals(""-emacs""))
/* 278 */       { this.emacsMode = true; }
/* 279 */       else if (str1.equals(""-projecthelp""))
/*     */       
/* 281 */       { this.projectHelp = true; }
/* 282 */       else if (str1.equals(""-find""))
/*     */       
/* 284 */       { if (b < paramArrayOfString.length - 1) {
/* 285 */           str = paramArrayOfString[++b];
/*     */         } else {
/* 287 */           str = ""build.xml"";
/*     */         }  }
/* 289 */       else { if (str1.startsWith(""-"")) {
/*     */           
/* 291 */           String str2 = ""Unknown argument: "" + str1;
/* 292 */           System.out.println(str2);
/* 293 */           printUsage();
/*     */           
/*     */           return;
/*     */         } 
/* 297 */         this.targets.addElement(str1); }
/*     */     
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 303 */     if (this.buildFile == null)
/*     */     {
/* 305 */       if (str != null) {
/* 306 */         this.buildFile = findBuildFile(System.getProperty(""user.dir""), str);
/*     */       } else {
/*     */         
/* 309 */         this.buildFile = new File(""build.xml"");
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 314 */     if (!this.buildFile.exists()) {
/* 315 */       System.out.println(""Buildfile: "" + this.buildFile + "" does not exist!"");
/* 316 */       throw new BuildException(""Build failed"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 322 */     if (this.buildFile.isDirectory()) {
/* 323 */       System.out.println(""What? Buildfile: "" + this.buildFile + "" is a dir!"");
/* 324 */       throw new BuildException(""Build failed"");
/*     */     } 
/*     */     
/* 327 */     this.readyToRun = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File getParentFile(File paramFile) {
/* 339 */     String str = paramFile.getAbsolutePath();
/* 340 */     paramFile = new File(str);
/* 341 */     str = paramFile.getParent();
/*     */     
/* 343 */     if (str != null && this.msgOutputLevel >= 3) {
/* 344 */       System.out.println(""Searching in "" + str);
/*     */     }
/*     */     
/* 347 */     return (str == null) ? null : new File(str);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File findBuildFile(String paramString1, String paramString2) throws BuildException {
/* 364 */     if (this.msgOutputLevel >= 2) {
/* 365 */       System.out.println(""Searching for "" + paramString2 + "" ..."");
/*     */     }
/*     */     
/* 368 */     File file1 = new File((new File(paramString1)).getAbsolutePath());
/* 369 */     File file2 = new File(file1, paramString2);
/*     */ 
/*     */     
/* 372 */     while (!file2.exists()) {
/*     */       
/* 374 */       file1 = getParentFile(file1);
/*     */ 
/*     */ 
/*     */       
/* 378 */       if (file1 == null) {
/* 379 */         throw new BuildException(""Could not locate a build file!"");
/*     */       }
/*     */ 
/*     */       
/* 383 */       file2 = new File(file1, paramString2);
/*     */     } 
/*     */     
/* 386 */     return file2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void runBuild(ClassLoader paramClassLoader) throws BuildException {
/* 394 */     if (!this.readyToRun) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 400 */     if (this.msgOutputLevel >= 2) {
/* 401 */       System.out.println(""Buildfile: "" + this.buildFile);
/*     */     }
/*     */     
/* 404 */     Project project = new Project();
/* 405 */     project.setCoreLoader(paramClassLoader);
/*     */     
/* 407 */     Object object = null;
/*     */     
/*     */     try {
/* 410 */       addBuildListeners(project);
/*     */       
/* 412 */       PrintStream printStream1 = System.err;
/* 413 */       PrintStream printStream2 = System.out;
/* 414 */       SecurityManager securityManager = System.getSecurityManager();
/*     */       
/*     */       try {
/* 417 */         System.setOut(new PrintStream(new DemuxOutputStream(project, false)));
/* 418 */         System.setErr(new PrintStream(new DemuxOutputStream(project, true)));
/* 419 */         project.fireBuildStarted();
/* 420 */         project.init();
/* 421 */         project.setUserProperty(""ant.version"", getAntVersion());
/*     */ 
/*     */         
/* 424 */         Enumeration enumeration = this.definedProps.keys();
/* 425 */         while (enumeration.hasMoreElements()) {
/* 426 */           String str1 = enumeration.nextElement();
/* 427 */           String str2 = (String)this.definedProps.get(str1);
/* 428 */           project.setUserProperty(str1, str2);
/*     */         } 
/*     */         
/* 431 */         project.setUserProperty(""ant.file"", this.buildFile.getAbsolutePath());
/*     */ 
/*     */ 
/*     */         
/* 435 */         String str = ""No JAXP compliant XML parser found. Please visit http://xml.apache.org for a suitable parser"";
/*     */         
/*     */         try {
/* 438 */           Class.forName(""javax.xml.parsers.SAXParserFactory"");
/* 439 */           ProjectHelper.configureProject(project, this.buildFile);
/*     */         } catch (NoClassDefFoundError noClassDefFoundError) {
/* 441 */           throw new BuildException(str, noClassDefFoundError);
/*     */         } catch (ClassNotFoundException classNotFoundException) {
/* 443 */           throw new BuildException(str, classNotFoundException);
/*     */         } catch (NullPointerException nullPointerException) {
/* 445 */           throw new BuildException(str, nullPointerException);
/*     */         } 
/*     */ 
/*     */         
/* 449 */         if (this.targets.size() == 0) {
/* 450 */           this.targets.addElement(project.getDefaultTarget());
/*     */         }
/*     */         
/* 453 */         if (!this.projectHelp) {
/* 454 */           project.executeTargets(this.targets);
/*     */         }
/*     */       } finally {
/*     */         
/* 458 */         System.setOut(printStream2);
/* 459 */         System.setErr(printStream1);
/*     */       } 
/* 461 */       if (this.projectHelp) {
/* 462 */         printDescription(project);
/* 463 */         printTargets(project);
/*     */       } 
/*     */     } catch (RuntimeException runtimeException) {
/*     */       
/* 467 */       object = runtimeException = null;
/* 468 */       throw runtimeException;
/*     */     } catch (Error error) {
/*     */       
/* 471 */       object = error = null;
/* 472 */       throw error;
/*     */     } finally {
/*     */       
/* 475 */       project.fireBuildFinished((Throwable)object);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addBuildListeners(Project paramProject) {
/* 482 */     paramProject.addBuildListener(createLogger());
/*     */     
/* 484 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 485 */       String str = this.listeners.elementAt(b);
/*     */       try {
/* 487 */         BuildListener buildListener = (BuildListener)Class.forName(str).newInstance();
/*     */         
/* 489 */         paramProject.addBuildListener(buildListener);
/*     */       } catch (Throwable throwable) {
/*     */         
/* 492 */         throw new BuildException(""Unable to instantiate listener "" + str, throwable);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private BuildLogger createLogger() {
/* 501 */     BuildLogger buildLogger = null;
/* 502 */     if (this.loggerClassname != null) {
/*     */       try {
/* 504 */         buildLogger = (BuildLogger)Class.forName(this.loggerClassname).newInstance();
/*     */       } catch (ClassCastException classCastException) {
/*     */         
/* 507 */         System.err.println(""The specified logger class "" + this.loggerClassname + "" does not implement the BuildLogger interface"");
/*     */         
/* 509 */         throw new RuntimeException();
/*     */       } catch (Exception exception) {
/*     */         
/* 512 */         System.err.println(""Unable to instantiate specified logger class "" + this.loggerClassname + "" : "" + exception.getClass().getName());
/*     */         
/* 514 */         throw new RuntimeException();
/*     */       } 
/*     */     } else {
/*     */       
/* 518 */       buildLogger = new DefaultLogger();
/*     */     } 
/*     */     
/* 521 */     buildLogger.setMessageOutputLevel(this.msgOutputLevel);
/* 522 */     buildLogger.setOutputPrintStream(this.out);
/* 523 */     buildLogger.setErrorPrintStream(this.err);
/* 524 */     buildLogger.setEmacsMode(this.emacsMode);
/*     */     
/* 526 */     return buildLogger;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printUsage() {
/* 533 */     String str = System.getProperty(""line.separator"");
/* 534 */     StringBuffer stringBuffer = new StringBuffer();
/* 535 */     stringBuffer.append(""ant [options] [target [target2 [target3] ...]]"" + str);
/* 536 */     stringBuffer.append(""Options: "" + str);
/* 537 */     stringBuffer.append(""  -help                  print this message"" + str);
/* 538 */     stringBuffer.append(""  -projecthelp           print project help information"" + str);
/* 539 */     stringBuffer.append(""  -version               print the version information and exit"" + str);
/* 540 */     stringBuffer.append(""  -quiet                 be extra quiet"" + str);
/* 541 */     stringBuffer.append(""  -verbose               be extra verbose"" + str);
/* 542 */     stringBuffer.append(""  -debug                 print debugging information"" + str);
/* 543 */     stringBuffer.append(""  -emacs                 produce logging information without adornments"" + str);
/* 544 */     stringBuffer.append(""  -logfile <file>        use given file for log"" + str);
/* 545 */     stringBuffer.append(""  -logger <classname>    the class which is to perform logging"" + str);
/* 546 */     stringBuffer.append(""  -listener <classname>  add an instance of class as a project listener"" + str);
/* 547 */     stringBuffer.append(""  -buildfile <file>      use given buildfile"" + str);
/* 548 */     stringBuffer.append(""  -D<property>=<value>   use value for given property"" + str);
/* 549 */     stringBuffer.append(""  -find <file>           search for buildfile towards the root of the"" + str);
/* 550 */     stringBuffer.append(""                         filesystem and use it"" + str);
/* 551 */     System.out.println(stringBuffer.toString());
/*     */   }
/*     */ 
/*     */   
/* 555 */   private static void printVersion() throws BuildException { System.out.println(getAntVersion()); }
/*     */ 
/*     */   
/* 558 */   private static String antVersion = null;
/*     */   
/*     */   public static synchronized String getAntVersion() throws BuildException {
/* 561 */     if (antVersion == null) {
/*     */       try {
/* 563 */         Properties properties = new Properties();
/* 564 */         InputStream inputStream = Main.class.getResourceAsStream(""/org/apache/tools/ant/version.txt"");
/*     */         
/* 566 */         properties.load(inputStream);
/* 567 */         inputStream.close();
/*     */         
/* 569 */         String str = System.getProperty(""line.separator"");
/* 570 */         StringBuffer stringBuffer = new StringBuffer();
/* 571 */         stringBuffer.append(""Ant version "");
/* 572 */         stringBuffer.append(properties.getProperty(""VERSION""));
/* 573 */         stringBuffer.append("" compiled on "");
/* 574 */         stringBuffer.append(properties.getProperty(""DATE""));
/* 575 */         antVersion = stringBuffer.toString();
/*     */       } catch (IOException iOException) {
/* 577 */         throw new BuildException(""Could not load the version information:"" + iOException.getMessage());
/*     */       } catch (NullPointerException nullPointerException) {
/*     */         
/* 580 */         throw new BuildException(""Could not load the version information."");
/*     */       } 
/*     */     }
/* 583 */     return antVersion;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printDescription(Project paramProject) {
/* 590 */     if (paramProject.getDescription() != null) {
/* 591 */       System.out.println(paramProject.getDescription());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printTargets(Project paramProject) {
/* 600 */     int i = 0;
/* 601 */     Enumeration enumeration = paramProject.getTargets().elements();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 607 */     Vector vector1 = new Vector();
/* 608 */     Vector vector2 = new Vector();
/* 609 */     Vector vector3 = new Vector();
/*     */     
/* 611 */     while (enumeration.hasMoreElements()) {
/* 612 */       Target target = enumeration.nextElement();
/* 613 */       String str1 = target.getName();
/* 614 */       String str2 = target.getDescription();
/*     */       
/* 616 */       if (str2 == null) {
/* 617 */         int k = findTargetPosition(vector3, str1);
/* 618 */         vector3.insertElementAt(str1, k); continue;
/*     */       } 
/* 620 */       int j = findTargetPosition(vector1, str1);
/* 621 */       vector1.insertElementAt(str1, j);
/* 622 */       vector2.insertElementAt(str2, j);
/* 623 */       if (str1.length() > i) {
/* 624 */         i = str1.length();
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 629 */     String str = paramProject.getDefaultTarget();
/* 630 */     if (str != null && !"""".equals(str)) {
/* 631 */       Vector vector = new Vector();
/* 632 */       Vector vector4 = null;
/* 633 */       vector.addElement(str);
/*     */       
/* 635 */       int j = vector1.indexOf(str);
/* 636 */       if (j >= 0) {
/* 637 */         vector4 = new Vector();
/* 638 */         vector4.addElement(vector2.elementAt(j));
/*     */       } 
/* 640 */       printTargets(vector, vector4, ""Default target:"", i);
/*     */     } 
/*     */ 
/*     */     
/* 644 */     printTargets(vector1, vector2, ""Main targets:"", i);
/* 645 */     printTargets(vector3, null, ""Subtargets:"", 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static int findTargetPosition(Vector paramVector, String paramString) {
/* 652 */     int i = paramVector.size();
/* 653 */     for (byte b = 0; b < paramVector.size() && i == paramVector.size(); b++) {
/* 654 */       if (paramString.compareTo(paramVector.elementAt(b)) < 0) {
/* 655 */         i = b;
/*     */       }
/*     */     } 
/* 658 */     return i;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printTargets(Vector paramVector1, Vector paramVector2, String paramString, int paramInt) {
/* 666 */     String str1 = System.getProperty(""line.separator"");
/*     */     
/* 668 */     String str2 = ""    "";
/* 669 */     while (str2.length() < paramInt) {
/* 670 */       str2 = str2 + str2;
/*     */     }
/* 672 */     StringBuffer stringBuffer = new StringBuffer();
/* 673 */     stringBuffer.append(paramString + str1 + str1);
/* 674 */     for (byte b = 0; b < paramVector1.size(); b++) {
/* 675 */       stringBuffer.append("" "");
/* 676 */       stringBuffer.append(paramVector1.elementAt(b));
/* 677 */       if (paramVector2 != null) {
/* 678 */         stringBuffer.append(str2.substring(0, paramInt - ((String)paramVector1.elementAt(b)).length() + 2));
/* 679 */         stringBuffer.append(paramVector2.elementAt(b));
/*     */       } 
/* 681 */       stringBuffer.append(str1);
/*     */     } 
/* 683 */     System.out.println(stringBuffer.toString());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Main.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.NoBannerLogger,"/*    */ package org.apache.tools.ant;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NoBannerLogger
/*    */   extends DefaultLogger
/*    */ {
/*    */   protected String targetName;
/*    */   
/* 67 */   public void targetStarted(BuildEvent paramBuildEvent) { this.targetName = paramBuildEvent.getTarget().getName(); }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public void targetFinished(BuildEvent paramBuildEvent) { this.targetName = null; }
/*    */ 
/*    */ 
/*    */   
/*    */   public void messageLogged(BuildEvent paramBuildEvent) {
/* 76 */     if (paramBuildEvent.getPriority() > this.msgOutputLevel || null == paramBuildEvent.getMessage() || """".equals(paramBuildEvent.getMessage().trim())) {
/*    */       return;
/*    */     }
/*    */ 
/*    */ 
/*    */     
/* 82 */     if (null != this.targetName) {
/* 83 */       this.out.println(DefaultLogger.lSep + this.targetName + "":"");
/* 84 */       this.targetName = null;
/*    */     } 
/*    */     
/* 87 */     super.messageLogged(paramBuildEvent);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\NoBannerLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.PathTokenizer,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathTokenizer
/*     */ {
/*     */   private StringTokenizer tokenizer;
/*  78 */   private String lookahead = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dosStyleFilesystem;
/*     */ 
/*     */ 
/*     */   
/*     */   public PathTokenizer(String paramString) {
/*  87 */     this.tokenizer = new StringTokenizer(paramString, "":;"", false);
/*  88 */     this.dosStyleFilesystem = (File.pathSeparatorChar == ';');
/*     */   }
/*     */   
/*     */   public boolean hasMoreTokens() {
/*  92 */     if (this.lookahead != null) {
/*  93 */       return true;
/*     */     }
/*     */     
/*  96 */     return this.tokenizer.hasMoreTokens();
/*     */   }
/*     */   
/*     */   public String nextToken() throws NoSuchElementException {
/* 100 */     String str = null;
/* 101 */     if (this.lookahead != null) {
/* 102 */       str = this.lookahead;
/* 103 */       this.lookahead = null;
/*     */     } else {
/*     */       
/* 106 */       str = this.tokenizer.nextToken().trim();
/*     */     } 
/*     */     
/* 109 */     if (str.length() == 1 && Character.isLetter(str.charAt(0)) && this.dosStyleFilesystem && this.tokenizer.hasMoreTokens()) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 114 */       String str1 = this.tokenizer.nextToken().trim();
/* 115 */       if (str1.startsWith(""\\"") || str1.startsWith(""/"")) {
/*     */ 
/*     */         
/* 118 */         str = str + "":"" + str1;
/*     */       }
/*     */       else {
/*     */         
/* 122 */         this.lookahead = str1;
/*     */       } 
/*     */     } 
/*     */     
/* 126 */     return str;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\PathTokenizer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Project,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Project
/*     */ {
/*     */   public static final int MSG_ERR = 0;
/*     */   public static final int MSG_WARN = 1;
/*     */   public static final int MSG_INFO = 2;
/*     */   public static final int MSG_VERBOSE = 3;
/*     */   public static final int MSG_DEBUG = 4;
/*     */   private static final String VISITING = ""VISITING"";
/*     */   private static final String VISITED = ""VISITED"";
/*     */   private static String javaVersion;
/*     */   public static final String JAVA_1_0 = ""1.0"";
/*     */   public static final String JAVA_1_1 = ""1.1"";
/*     */   public static final String JAVA_1_2 = ""1.2"";
/*     */   public static final String JAVA_1_3 = ""1.3"";
/*     */   public static final String JAVA_1_4 = ""1.4"";
/*     */   public static final String TOKEN_START = ""@"";
/*     */   public static final String TOKEN_END = ""@"";
/*     */   private String name;
/*     */   private String description;
/* 104 */   private Hashtable properties = new Hashtable();
/* 105 */   private Hashtable userProperties = new Hashtable();
/* 106 */   private Hashtable references = new Hashtable();
/*     */   private String defaultTarget;
/* 108 */   private Hashtable dataClassDefinitions = new Hashtable();
/* 109 */   private Hashtable taskClassDefinitions = new Hashtable();
/* 110 */   private Hashtable targets = new Hashtable();
/* 111 */   private FilterSet globalFilterSet = new FilterSet();
/* 112 */   private FilterSetCollection globalFilters = new FilterSetCollection(this.globalFilterSet);
/*     */   
/*     */   private File baseDir;
/* 115 */   private Vector listeners = new Vector();
/*     */ 
/*     */   
/* 118 */   private ClassLoader coreLoader = null;
/*     */ 
/*     */   
/* 121 */   private Hashtable threadTasks = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private FileUtils fileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/*     */     try {
/* 132 */       javaVersion = ""1.0"";
/* 133 */       Class.forName(""java.lang.Void"");
/* 134 */       javaVersion = ""1.1"";
/* 135 */       Class.forName(""java.lang.ThreadLocal"");
/* 136 */       javaVersion = ""1.2"";
/* 137 */       Class.forName(""java.lang.StrictMath"");
/* 138 */       javaVersion = ""1.3"";
/* 139 */       Class.forName(""java.lang.CharSequence"");
/* 140 */       javaVersion = ""1.4"";
/* 141 */     } catch (ClassNotFoundException classNotFoundException) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public Project() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {
/* 160 */     setJavaVersionProperty();
/*     */     
/* 162 */     String str1 = ""/org/apache/tools/ant/taskdefs/defaults.properties"";
/*     */     
/*     */     try {
/* 165 */       Properties properties1 = new Properties();
/* 166 */       InputStream inputStream = getClass().getResourceAsStream(str1);
/* 167 */       if (inputStream == null) {
/* 168 */         throw new BuildException(""Can't load default task list"");
/*     */       }
/* 170 */       properties1.load(inputStream);
/* 171 */       inputStream.close();
/*     */       
/* 173 */       Enumeration enumeration = properties1.propertyNames();
/* 174 */       while (enumeration.hasMoreElements()) {
/* 175 */         String str3 = (String)enumeration.nextElement();
/* 176 */         String str4 = properties1.getProperty(str3);
/*     */         try {
/* 178 */           Class clazz = Class.forName(str4);
/* 179 */           addTaskDefinition(str3, clazz);
/* 180 */         } catch (NoClassDefFoundError noClassDefFoundError) {
/*     */         
/* 182 */         } catch (ClassNotFoundException classNotFoundException) {}
/*     */       }
/*     */     
/*     */     } catch (IOException iOException) {
/*     */       
/* 187 */       throw new BuildException(""Can't load default task list"");
/*     */     } 
/*     */     
/* 190 */     String str2 = ""/org/apache/tools/ant/types/defaults.properties"";
/*     */     
/*     */     try {
/* 193 */       Properties properties1 = new Properties();
/* 194 */       InputStream inputStream = getClass().getResourceAsStream(str2);
/* 195 */       if (inputStream == null) {
/* 196 */         throw new BuildException(""Can't load default datatype list"");
/*     */       }
/* 198 */       properties1.load(inputStream);
/* 199 */       inputStream.close();
/*     */       
/* 201 */       Enumeration enumeration = properties1.propertyNames();
/* 202 */       while (enumeration.hasMoreElements()) {
/* 203 */         String str3 = (String)enumeration.nextElement();
/* 204 */         String str4 = properties1.getProperty(str3);
/*     */         try {
/* 206 */           Class clazz = Class.forName(str4);
/* 207 */           addDataTypeDefinition(str3, clazz);
/* 208 */         } catch (NoClassDefFoundError noClassDefFoundError) {
/*     */         
/* 210 */         } catch (ClassNotFoundException classNotFoundException) {}
/*     */       }
/*     */     
/*     */     } catch (IOException iOException) {
/*     */       
/* 215 */       throw new BuildException(""Can't load default datatype list"");
/*     */     } 
/*     */     
/* 218 */     setSystemProperties();
/*     */   }
/*     */ 
/*     */   
/* 222 */   public void setCoreLoader(ClassLoader paramClassLoader) { this.coreLoader = paramClassLoader; }
/*     */ 
/*     */ 
/*     */   
/* 226 */   public ClassLoader getCoreLoader() { return this.coreLoader; }
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void addBuildListener(BuildListener paramBuildListener) { this.listeners.addElement(paramBuildListener); }
/*     */ 
/*     */ 
/*     */   
/* 234 */   public void removeBuildListener(BuildListener paramBuildListener) { this.listeners.removeElement(paramBuildListener); }
/*     */ 
/*     */ 
/*     */   
/* 238 */   public Vector getBuildListeners() { return this.listeners; }
/*     */ 
/*     */ 
/*     */   
/* 242 */   public void log(String paramString) { log(paramString, 2); }
/*     */ 
/*     */ 
/*     */   
/* 246 */   public void log(String paramString, int paramInt) { fireMessageLogged(this, paramString, paramInt); }
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void log(Task paramTask, String paramString, int paramInt) { fireMessageLogged(paramTask, paramString, paramInt); }
/*     */ 
/*     */ 
/*     */   
/* 254 */   public void log(Target paramTarget, String paramString, int paramInt) { fireMessageLogged(paramTarget, paramString, paramInt); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public FilterSet getGlobalFilterSet() { return this.globalFilterSet; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProperty(String paramString1, String paramString2) {
/* 265 */     if (null != this.userProperties.get(paramString1)) {
/* 266 */       log(""Override ignored for user property "" + paramString1, 3);
/*     */       return;
/*     */     } 
/* 269 */     log(""Setting project property: "" + paramString1 + "" -> "" + paramString2, 4);
/*     */     
/* 271 */     this.properties.put(paramString1, paramString2);
/*     */   }
/*     */   
/*     */   public void setUserProperty(String paramString1, String paramString2) {
/* 275 */     log(""Setting ro project property: "" + paramString1 + "" -> "" + paramString2, 4);
/*     */     
/* 277 */     this.userProperties.put(paramString1, paramString2);
/* 278 */     this.properties.put(paramString1, paramString2);
/*     */   }
/*     */   
/*     */   public String getProperty(String paramString) {
/* 282 */     if (paramString == null) return null; 
/* 283 */     return (String)this.properties.get(paramString);
/*     */   }
/*     */ 
/*     */   
/*     */   public String getUserProperty(String paramString) {
/* 288 */     if (paramString == null) return null; 
/* 289 */     return (String)this.userProperties.get(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 294 */   public Hashtable getProperties() { return this.properties; }
/*     */ 
/*     */ 
/*     */   
/* 298 */   public Hashtable getUserProperties() { return this.userProperties; }
/*     */ 
/*     */ 
/*     */   
/* 302 */   public void setDefaultTarget(String paramString) { this.defaultTarget = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   public String getDefaultTarget() { return this.defaultTarget; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public void setDefault(String paramString) { this.defaultTarget = paramString; }
/*     */ 
/*     */   
/*     */   public void setName(String paramString) {
/* 316 */     setUserProperty(""ant.project.name"", paramString);
/* 317 */     this.name = paramString;
/*     */   }
/*     */ 
/*     */   
/* 321 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 325 */   public void setDescription(String paramString) { this.description = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(String paramString1, String paramString2) {
/* 335 */     if (paramString1 == null) {
/*     */       return;
/*     */     }
/*     */     
/* 339 */     this.globalFilterSet.addFilter(new FilterSet.Filter(paramString1, paramString2));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 345 */   public Hashtable getFilters() { return this.globalFilterSet.getFilterHash(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 350 */   public void setBasedir(String paramString) throws BuildException { setBaseDir(new File(paramString)); }
/*     */ 
/*     */   
/*     */   public void setBaseDir(File paramFile) throws BuildException {
/* 354 */     paramFile = this.fileUtils.normalize(paramFile.getAbsolutePath());
/* 355 */     if (!paramFile.exists())
/* 356 */       throw new BuildException(""Basedir "" + paramFile.getAbsolutePath() + "" does not exist""); 
/* 357 */     if (!paramFile.isDirectory())
/* 358 */       throw new BuildException(""Basedir "" + paramFile.getAbsolutePath() + "" is not a directory""); 
/* 359 */     this.baseDir = paramFile;
/* 360 */     setProperty(""basedir"", this.baseDir.getPath());
/* 361 */     String str = ""Project base dir set to: "" + this.baseDir;
/* 362 */     log(str, 3);
/*     */   }
/*     */   
/*     */   public File getBaseDir() {
/* 366 */     if (this.baseDir == null) {
/*     */       try {
/* 368 */         setBasedir(""."");
/*     */       } catch (BuildException buildException) {
/* 370 */         buildException.printStackTrace();
/*     */       } 
/*     */     }
/* 373 */     return this.baseDir;
/*     */   }
/*     */ 
/*     */   
/* 377 */   public static String getJavaVersion() { return javaVersion; }
/*     */ 
/*     */   
/*     */   public void setJavaVersionProperty() {
/* 381 */     setProperty(""ant.java.version"", javaVersion);
/*     */ 
/*     */     
/* 384 */     if (javaVersion == ""1.0"") {
/* 385 */       throw new BuildException(""Ant cannot work on Java 1.0"");
/*     */     }
/*     */     
/* 388 */     log(""Detected Java version: "" + javaVersion + "" in: "" + System.getProperty(""java.home""), 3);
/*     */     
/* 390 */     log(""Detected OS: "" + System.getProperty(""os.name""), 3);
/*     */   }
/*     */   
/*     */   public void setSystemProperties() {
/* 394 */     Properties properties1 = System.getProperties();
/* 395 */     Enumeration enumeration = properties1.keys();
/* 396 */     while (enumeration.hasMoreElements()) {
/* 397 */       Object object = enumeration.nextElement();
/* 398 */       String str = properties1.get(object).toString();
/* 399 */       setProperty(object.toString(), str);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void addTaskDefinition(String paramString, Class paramClass) {
/* 404 */     String str = "" +User task: "" + paramString + ""     "" + paramClass.getName();
/* 405 */     log(str, 4);
/* 406 */     this.taskClassDefinitions.put(paramString, paramClass);
/*     */   }
/*     */ 
/*     */   
/* 410 */   public Hashtable getTaskDefinitions() { return this.taskClassDefinitions; }
/*     */ 
/*     */   
/*     */   public void addDataTypeDefinition(String paramString, Class paramClass) {
/* 414 */     String str = "" +User datatype: "" + paramString + ""     "" + paramClass.getName();
/* 415 */     log(str, 4);
/* 416 */     this.dataClassDefinitions.put(paramString, paramClass);
/*     */   }
/*     */ 
/*     */   
/* 420 */   public Hashtable getDataTypeDefinitions() { return this.dataClassDefinitions; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addTarget(Target paramTarget) {
/* 432 */     String str = paramTarget.getName();
/* 433 */     if (this.targets.get(str) != null) {
/* 434 */       throw new BuildException(""Duplicate target: `"" + str + ""'"");
/*     */     }
/* 436 */     addOrReplaceTarget(str, paramTarget);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addTarget(String paramString, Target paramTarget) throws BuildException {
/* 450 */     if (this.targets.get(paramString) != null) {
/* 451 */       throw new BuildException(""Duplicate target: `"" + paramString + ""'"");
/*     */     }
/* 453 */     addOrReplaceTarget(paramString, paramTarget);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 461 */   public void addOrReplaceTarget(Target paramTarget) { addOrReplaceTarget(paramTarget.getName(), paramTarget); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addOrReplaceTarget(String paramString, Target paramTarget) {
/* 470 */     String str = "" +Target: "" + paramString;
/* 471 */     log(str, 4);
/* 472 */     paramTarget.setProject(this);
/* 473 */     this.targets.put(paramString, paramTarget);
/*     */   }
/*     */ 
/*     */   
/* 477 */   public Hashtable getTargets() { return this.targets; }
/*     */ 
/*     */   
/*     */   public Task createTask(String paramString) throws BuildException {
/* 481 */     Class clazz = (Class)this.taskClassDefinitions.get(paramString);
/*     */     
/* 483 */     if (clazz == null)
/* 484 */       return null; 
/*     */     try {
/* 486 */       Task task1 = (Task)clazz.newInstance();
/* 487 */       Task task2 = null;
/* 488 */       if (task1 instanceof Task) {
/* 489 */         task2 = task1;
/*     */       }
/*     */       else {
/*     */         
/* 493 */         TaskAdapter taskAdapter = new TaskAdapter();
/* 494 */         taskAdapter.setProxy(task1);
/* 495 */         task2 = taskAdapter;
/*     */       } 
/* 497 */       task2.setProject(this);
/* 498 */       task2.setTaskType(paramString);
/*     */ 
/*     */       
/* 501 */       task2.setTaskName(paramString);
/*     */       
/* 503 */       String str = ""   +Task: "" + paramString;
/* 504 */       log(str, 4);
/* 505 */       return task2;
/*     */     } catch (Throwable throwable) {
/* 507 */       String str = ""Could not create task of type: "" + paramString + "" due to "" + throwable;
/*     */       
/* 509 */       throw new BuildException(str, throwable);
/*     */     } 
/*     */   }
/*     */   
/*     */   public Object createDataType(String paramString) throws BuildException {
/* 514 */     Class clazz = (Class)this.dataClassDefinitions.get(paramString);
/*     */     
/* 516 */     if (clazz == null) {
/* 517 */       return null;
/*     */     }
/*     */     try {
/* 520 */       Constructor constructor = null;
/* 521 */       boolean bool = false;
/*     */ 
/*     */       
/*     */       try {
/* 525 */         constructor = clazz.getConstructor(new Class[0]);
/* 526 */         bool = true;
/*     */       } catch (NoSuchMethodException noSuchMethodException) {
/* 528 */         constructor = clazz.getConstructor(new Class[] { getClass() });
/* 529 */         bool = false;
/*     */       } 
/*     */       
/* 532 */       ProjectComponent projectComponent = null;
/* 533 */       if (bool) {
/* 534 */         projectComponent = (ProjectComponent)constructor.newInstance(new Object[0]);
/*     */       } else {
/* 536 */         projectComponent = (ProjectComponent)constructor.newInstance(new Object[] { this });
/*     */       } 
/* 538 */       if (projectComponent instanceof ProjectComponent) {
/* 539 */         ((ProjectComponent)projectComponent).setProject(this);
/*     */       }
/* 541 */       String str = ""   +DataType: "" + paramString;
/* 542 */       log(str, 4);
/* 543 */       return projectComponent;
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 545 */       Throwable throwable = invocationTargetException.getTargetException();
/* 546 */       String str = ""Could not create datatype of type: "" + paramString + "" due to "" + throwable;
/*     */       
/* 548 */       throw new BuildException(str, throwable);
/*     */     } catch (Throwable throwable) {
/* 550 */       String str = ""Could not create datatype of type: "" + paramString + "" due to "" + throwable;
/*     */       
/* 552 */       throw new BuildException(str, throwable);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void executeTargets(Vector paramVector) throws BuildException {
/* 557 */     Object object = null;
/*     */     
/* 559 */     for (byte b = 0; b < paramVector.size(); b++) {
/* 560 */       executeTarget(paramVector.elementAt(b));
/*     */     }
/*     */   }
/*     */   
/*     */   public void demuxOutput(String paramString, boolean paramBoolean) {
/* 565 */     Task task = (Task)this.threadTasks.get(Thread.currentThread());
/* 566 */     if (task == null) {
/* 567 */       fireMessageLogged(this, paramString, paramBoolean ? 0 : 2);
/*     */     
/*     */     }
/* 570 */     else if (paramBoolean) {
/* 571 */       task.handleErrorOutput(paramString);
/*     */     } else {
/*     */       
/* 574 */       task.handleOutput(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void executeTarget(String paramString) throws BuildException {
/*     */     Target target;
/* 584 */     if (paramString == null) {
/* 585 */       String str = ""No target specified"";
/* 586 */       throw new BuildException(str);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 594 */     Vector vector = topoSort(paramString, this.targets);
/*     */     
/* 596 */     byte b = 0;
/*     */ 
/*     */     
/*     */     do {
/* 600 */       target = vector.elementAt(b++);
/* 601 */       target.performTasks();
/* 602 */     } while (!target.getName().equals(paramString));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 614 */   public File resolveFile(String paramString, File paramFile) { return this.fileUtils.resolveFile(paramFile, paramString); }
/*     */ 
/*     */ 
/*     */   
/* 618 */   public File resolveFile(String paramString) { return this.fileUtils.resolveFile(this.baseDir, paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String translatePath(String paramString) {
/* 635 */     if (paramString == null || paramString.length() == 0) {
/* 636 */       return """";
/*     */     }
/*     */     
/* 639 */     StringBuffer stringBuffer = new StringBuffer(paramString.length() + 50);
/* 640 */     PathTokenizer pathTokenizer = new PathTokenizer(paramString);
/* 641 */     while (pathTokenizer.hasMoreTokens()) {
/* 642 */       String str = pathTokenizer.nextToken();
/* 643 */       str = str.replace('/', File.separatorChar);
/* 644 */       str = str.replace('\\', File.separatorChar);
/* 645 */       if (stringBuffer.length() != 0) {
/* 646 */         stringBuffer.append(File.pathSeparatorChar);
/*     */       }
/* 648 */       stringBuffer.append(str);
/*     */     } 
/*     */     
/* 651 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 663 */   public void copyFile(String paramString1, String paramString2) throws IOException { this.fileUtils.copyFile(paramString1, paramString2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 676 */   public void copyFile(String paramString1, String paramString2, boolean paramBoolean) throws IOException { this.fileUtils.copyFile(paramString1, paramString2, paramBoolean ? this.globalFilters : null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 690 */   public void copyFile(String paramString1, String paramString2, boolean paramBoolean1, boolean paramBoolean2) throws IOException { this.fileUtils.copyFile(paramString1, paramString2, paramBoolean1 ? this.globalFilters : null, paramBoolean2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 707 */   public void copyFile(String paramString1, String paramString2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3) throws IOException { this.fileUtils.copyFile(paramString1, paramString2, paramBoolean1 ? this.globalFilters : null, paramBoolean2, paramBoolean3); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 720 */   public void copyFile(File paramFile1, File paramFile2) throws IOException { this.fileUtils.copyFile(paramFile1, paramFile2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 733 */   public void copyFile(File paramFile1, File paramFile2, boolean paramBoolean) throws IOException { this.fileUtils.copyFile(paramFile1, paramFile2, paramBoolean ? this.globalFilters : null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 747 */   public void copyFile(File paramFile1, File paramFile2, boolean paramBoolean1, boolean paramBoolean2) throws IOException { this.fileUtils.copyFile(paramFile1, paramFile2, paramBoolean1 ? this.globalFilters : null, paramBoolean2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 764 */   public void copyFile(File paramFile1, File paramFile2, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3) throws IOException { this.fileUtils.copyFile(paramFile1, paramFile2, paramBoolean1 ? this.globalFilters : null, paramBoolean2, paramBoolean3); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFileLastModified(File paramFile, long paramLong) throws BuildException {
/* 774 */     if (getJavaVersion() == ""1.1"") {
/* 775 */       log(""Cannot change the modification time of "" + paramFile + "" in JDK 1.1"", 1);
/*     */       
/*     */       return;
/*     */     } 
/* 779 */     this.fileUtils.setFileLastModified(paramFile, paramLong);
/* 780 */     log(""Setting modification time for "" + paramFile, 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 788 */   public static boolean toBoolean(String paramString) { return (paramString.equalsIgnoreCase(""on"") || paramString.equalsIgnoreCase(""true"") || paramString.equalsIgnoreCase(""yes"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Vector topoSort(String paramString, Hashtable paramHashtable) throws BuildException {
/* 806 */     Vector vector = new Vector();
/* 807 */     Hashtable hashtable = new Hashtable();
/* 808 */     Stack stack = new Stack();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 818 */     tsort(paramString, paramHashtable, hashtable, stack, vector);
/* 819 */     log(""Build sequence for target `"" + paramString + ""' is "" + vector, 3);
/* 820 */     for (Enumeration enumeration = paramHashtable.keys(); enumeration.hasMoreElements(); ) {
/* 821 */       String str1 = enumeration.nextElement();
/* 822 */       String str2 = (String)hashtable.get(str1);
/* 823 */       if (str2 == null) {
/* 824 */         tsort(str1, paramHashtable, hashtable, stack, vector); continue;
/*     */       } 
/* 826 */       if (str2 == ""VISITING"") {
/* 827 */         throw new RuntimeException(""Unexpected node in visiting state: "" + str1);
/*     */       }
/*     */     } 
/* 830 */     log(""Complete build sequence is "" + vector, 3);
/* 831 */     return vector;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void tsort(String paramString, Hashtable paramHashtable1, Hashtable paramHashtable2, Stack paramStack, Vector paramVector) throws BuildException {
/* 855 */     paramHashtable2.put(paramString, ""VISITING"");
/* 856 */     paramStack.push(paramString);
/*     */     
/* 858 */     Target target = (Target)paramHashtable1.get(paramString);
/*     */ 
/*     */     
/* 861 */     if (target == null) {
/* 862 */       StringBuffer stringBuffer = new StringBuffer(""Target `"");
/* 863 */       stringBuffer.append(paramString);
/* 864 */       stringBuffer.append(""' does not exist in this project. "");
/* 865 */       paramStack.pop();
/* 866 */       if (!paramStack.empty()) {
/* 867 */         String str1 = paramStack.peek();
/* 868 */         stringBuffer.append(""It is used from target `"");
/* 869 */         stringBuffer.append(str1);
/* 870 */         stringBuffer.append(""'."");
/*     */       } 
/*     */       
/* 873 */       throw new BuildException(new String(stringBuffer));
/*     */     } 
/*     */     
/* 876 */     for (Enumeration enumeration = target.getDependencies(); enumeration.hasMoreElements(); ) {
/* 877 */       String str1 = enumeration.nextElement();
/* 878 */       String str2 = paramHashtable2.get(str1);
/* 879 */       if (str2 == null) {
/*     */         
/* 881 */         tsort(str1, paramHashtable1, paramHashtable2, paramStack, paramVector); continue;
/*     */       } 
/* 883 */       if (str2 == ""VISITING"")
/*     */       {
/* 885 */         throw makeCircularException(str1, paramStack);
/*     */       }
/*     */     } 
/*     */     
/* 889 */     String str = paramStack.pop();
/* 890 */     if (paramString != str) {
/* 891 */       throw new RuntimeException(""Unexpected internal error: expected to pop "" + paramString + "" but got "" + str);
/*     */     }
/* 893 */     paramHashtable2.put(paramString, ""VISITED"");
/* 894 */     paramVector.addElement(target);
/*     */   }
/*     */   private static BuildException makeCircularException(String paramString, Stack paramStack) {
/*     */     String str;
/* 898 */     StringBuffer stringBuffer = new StringBuffer(""Circular dependency: "");
/* 899 */     stringBuffer.append(paramString);
/*     */     
/*     */     do {
/* 902 */       str = paramStack.pop();
/* 903 */       stringBuffer.append("" <- "");
/* 904 */       stringBuffer.append(str);
/* 905 */     } while (!str.equals(paramString));
/* 906 */     return new BuildException(new String(stringBuffer));
/*     */   }
/*     */   
/*     */   public void addReference(String paramString, Object paramObject) {
/* 910 */     if (null != this.references.get(paramString)) {
/* 911 */       log(""Overriding previous definition of reference to "" + paramString, 1);
/*     */     }
/*     */     
/* 914 */     log(""Adding reference: "" + paramString + "" -> "" + paramObject, 4);
/* 915 */     this.references.put(paramString, paramObject);
/*     */   }
/*     */ 
/*     */   
/* 919 */   public Hashtable getReferences() { return this.references; }
/*     */ 
/*     */   
/*     */   protected void fireBuildStarted() {
/* 923 */     BuildEvent buildEvent = new BuildEvent(this);
/* 924 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 925 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 926 */       buildListener.buildStarted(buildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void fireBuildFinished(Throwable paramThrowable) {
/* 931 */     BuildEvent buildEvent = new BuildEvent(this);
/* 932 */     buildEvent.setException(paramThrowable);
/* 933 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 934 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 935 */       buildListener.buildFinished(buildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void fireTargetStarted(Target paramTarget) {
/* 940 */     BuildEvent buildEvent = new BuildEvent(paramTarget);
/* 941 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 942 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 943 */       buildListener.targetStarted(buildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void fireTargetFinished(Target paramTarget, Throwable paramThrowable) {
/* 948 */     BuildEvent buildEvent = new BuildEvent(paramTarget);
/* 949 */     buildEvent.setException(paramThrowable);
/* 950 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 951 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 952 */       buildListener.targetFinished(buildEvent);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected void fireTaskStarted(Task paramTask) {
/* 958 */     this.threadTasks.put(Thread.currentThread(), paramTask);
/* 959 */     BuildEvent buildEvent = new BuildEvent(paramTask);
/* 960 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 961 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 962 */       buildListener.taskStarted(buildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void fireTaskFinished(Task paramTask, Throwable paramThrowable) {
/* 967 */     this.threadTasks.remove(Thread.currentThread());
/* 968 */     System.out.flush();
/* 969 */     System.err.flush();
/* 970 */     BuildEvent buildEvent = new BuildEvent(paramTask);
/* 971 */     buildEvent.setException(paramThrowable);
/* 972 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 973 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 974 */       buildListener.taskFinished(buildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void fireMessageLoggedEvent(BuildEvent paramBuildEvent, String paramString, int paramInt) {
/* 979 */     paramBuildEvent.setMessage(paramString, paramInt);
/* 980 */     for (byte b = 0; b < this.listeners.size(); b++) {
/* 981 */       BuildListener buildListener = this.listeners.elementAt(b);
/* 982 */       buildListener.messageLogged(paramBuildEvent);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void fireMessageLogged(Project paramProject, String paramString, int paramInt) {
/* 987 */     BuildEvent buildEvent = new BuildEvent(paramProject);
/* 988 */     fireMessageLoggedEvent(buildEvent, paramString, paramInt);
/*     */   }
/*     */   
/*     */   protected void fireMessageLogged(Target paramTarget, String paramString, int paramInt) {
/* 992 */     BuildEvent buildEvent = new BuildEvent(paramTarget);
/* 993 */     fireMessageLoggedEvent(buildEvent, paramString, paramInt);
/*     */   }
/*     */   
/*     */   protected void fireMessageLogged(Task paramTask, String paramString, int paramInt) {
/* 997 */     BuildEvent buildEvent = new BuildEvent(paramTask);
/* 998 */     fireMessageLoggedEvent(buildEvent, paramString, paramInt);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Project.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectComponent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ProjectComponent
/*     */ {
/*  66 */   protected Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void setProject(Project paramProject) { this.project = paramProject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  86 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void log(String paramString) { log(paramString, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void log(String paramString, int paramInt) {
/* 105 */     if (this.project != null)
/* 106 */       this.project.log(paramString, paramInt); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\ProjectComponent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.xml.sax.AttributeList;
/*     */ import org.xml.sax.DocumentHandler;
/*     */ import org.xml.sax.HandlerBase;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.Locator;
/*     */ import org.xml.sax.Parser;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProjectHelper
/*     */ {
/*  73 */   private static SAXParserFactory parserFactory = null;
/*     */   
/*     */   private Parser parser;
/*     */   
/*     */   private Project project;
/*     */   
/*     */   private File buildFile;
/*     */   
/*     */   private File buildFileParent;
/*     */   
/*     */   private Locator locator;
/*     */   
/*  85 */   public static void configureProject(Project paramProject, File paramFile) throws BuildException { (new ProjectHelper(paramProject, paramFile)).parse(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ProjectHelper(Project paramProject, File paramFile) {
/*  92 */     this.project = paramProject;
/*  93 */     this.buildFile = new File(paramFile.getAbsolutePath());
/*  94 */     this.buildFileParent = new File(this.buildFile.getParent());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parse() throws BuildException {
/* 101 */     FileInputStream fileInputStream = null;
/* 102 */     InputSource inputSource = null;
/*     */     
/*     */     try {
/* 105 */       SAXParser sAXParser = getParserFactory().newSAXParser();
/* 106 */       this.parser = sAXParser.getParser();
/*     */       
/* 108 */       String str = ""file:"" + this.buildFile.getAbsolutePath().replace('\\', '/');
/* 109 */       for (int i = str.indexOf('#'); i != -1; i = str.indexOf('#')) {
/* 110 */         str = str.substring(0, i) + ""%23"" + str.substring(i + 1);
/*     */       }
/*     */       
/* 113 */       fileInputStream = new FileInputStream(this.buildFile);
/* 114 */       inputSource = new InputSource(fileInputStream);
/* 115 */       inputSource.setSystemId(str);
/* 116 */       this.project.log(""parsing buildfile "" + this.buildFile + "" with URI = "" + str, 3);
/* 117 */       sAXParser.parse(inputSource, new RootHandler());
/*     */     } catch (ParserConfigurationException parserConfigurationException) {
/*     */       
/* 120 */       throw new BuildException(""Parser has not been configured correctly"", parserConfigurationException);
/*     */     } catch (SAXParseException sAXParseException) {
/*     */       
/* 123 */       Location location = new Location(this.buildFile.toString(), sAXParseException.getLineNumber(), sAXParseException.getColumnNumber());
/*     */ 
/*     */       
/* 126 */       Exception exception = sAXParseException.getException();
/* 127 */       if (exception instanceof BuildException) {
/* 128 */         BuildException buildException = (BuildException)exception;
/* 129 */         if (buildException.getLocation() == Location.UNKNOWN_LOCATION) {
/* 130 */           buildException.setLocation(location);
/*     */         }
/* 132 */         throw buildException;
/*     */       } 
/*     */       
/* 135 */       throw new BuildException(sAXParseException.getMessage(), exception, location);
/*     */     } catch (SAXException sAXException) {
/*     */       
/* 138 */       Exception exception = sAXException.getException();
/* 139 */       if (exception instanceof BuildException) {
/* 140 */         throw (BuildException)exception;
/*     */       }
/* 142 */       throw new BuildException(sAXException.getMessage(), exception);
/*     */     } catch (FileNotFoundException fileNotFoundException) {
/*     */       
/* 145 */       throw new BuildException(fileNotFoundException);
/*     */     } catch (IOException iOException) {
/*     */       
/* 148 */       throw new BuildException(""Error reading project file"", iOException);
/*     */     } finally {
/*     */       
/* 151 */       if (fileInputStream != null) {
/*     */         try {
/* 153 */           fileInputStream.close();
/*     */         }
/* 155 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private class AbstractHandler
/*     */     extends HandlerBase
/*     */   {
/*     */     protected DocumentHandler parentHandler;
/*     */ 
/*     */ 
/*     */     
/*     */     private final ProjectHelper this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public AbstractHandler(ProjectHelper this$0, DocumentHandler param1DocumentHandler) {
/* 177 */       this.this$0 = this$0;
/* 178 */       this.parentHandler = param1DocumentHandler;
/*     */ 
/*     */       
/* 181 */       this$0.parser.setDocumentHandler(this);
/*     */     }
/*     */ 
/*     */     
/* 185 */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException { throw new SAXParseException(""Unexpected element \"""" + param1String + ""\"""", this.this$0.locator); }
/*     */ 
/*     */     
/*     */     public void characters(char[] param1ArrayOfchar, int param1Int1, int param1Int2) throws SAXParseException {
/* 189 */       String str = (new String(param1ArrayOfchar, param1Int1, param1Int2)).trim();
/*     */       
/* 191 */       if (str.length() > 0) {
/* 192 */         throw new SAXParseException(""Unexpected text \"""" + str + ""\"""", this.this$0.locator);
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void finished() {}
/*     */ 
/*     */ 
/*     */     
/*     */     public void endElement(String param1String) throws SAXException {
/* 204 */       finished();
/*     */       
/* 206 */       this.this$0.parser.setDocumentHandler(this.parentHandler);
/*     */     } }
/*     */   
/*     */   private class RootHandler extends HandlerBase {
/*     */     private final ProjectHelper this$0;
/*     */     
/*     */     private RootHandler(ProjectHelper this$0) {
/* 213 */       ProjectHelper.this = ProjectHelper.this;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public InputSource resolveEntity(String param1String1, String param1String2) {
/* 221 */       ProjectHelper.this.project.log(""resolving systemId: "" + param1String2, 3);
/*     */       
/* 223 */       if (param1String2.startsWith(""file:"")) {
/* 224 */         String str1 = param1String2.substring(5);
/* 225 */         int i = str1.indexOf(""file:"");
/*     */ 
/*     */ 
/*     */         
/* 229 */         while (i != -1) {
/* 230 */           str1 = str1.substring(0, i) + str1.substring(i + 5);
/* 231 */           i = str1.indexOf(""file:"");
/*     */         } 
/*     */         
/* 234 */         String str2 = str1;
/* 235 */         i = str1.indexOf(""%23"");
/*     */         
/* 237 */         while (i != -1) {
/* 238 */           str1 = str1.substring(0, i) + ""#"" + str1.substring(i + 3);
/* 239 */           i = str1.indexOf(""%23"");
/*     */         } 
/*     */         
/* 242 */         File file = new File(str1);
/* 243 */         if (!file.isAbsolute()) {
/* 244 */           file = new File(ProjectHelper.this.buildFileParent, str1);
/*     */         }
/*     */         
/*     */         try {
/* 248 */           InputSource inputSource = new InputSource(new FileInputStream(file));
/* 249 */           inputSource.setSystemId(""file:"" + str2);
/* 250 */           return inputSource;
/*     */         } catch (FileNotFoundException fileNotFoundException) {
/* 252 */           ProjectHelper.this.project.log(file.getAbsolutePath() + "" could not be found"", 1);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 257 */       return null;
/*     */     }
/*     */     
/*     */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 261 */       if (param1String.equals(""project"")) {
/* 262 */         (new ProjectHelper.ProjectHandler(ProjectHelper.this, this)).init(param1String, param1AttributeList);
/*     */       } else {
/* 264 */         throw new SAXParseException(""Config file is not of expected XML type"", ProjectHelper.this.locator);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 269 */     public void setDocumentLocator(Locator param1Locator) { ProjectHelper.this.locator = param1Locator; }
/*     */   }
/*     */   
/*     */   private class ProjectHandler
/*     */     extends AbstractHandler
/*     */   {
/*     */     private final ProjectHelper this$0;
/*     */     
/*     */     public ProjectHandler(ProjectHelper this$0, DocumentHandler param1DocumentHandler) {
/* 278 */       super(this$0, param1DocumentHandler);
/*     */       this.this$0 = this$0;
/*     */     }
/*     */     public void init(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 282 */       String str1 = null;
/* 283 */       String str2 = null;
/* 284 */       String str3 = null;
/* 285 */       String str4 = null;
/*     */       
/* 287 */       for (byte b = 0; b < param1AttributeList.getLength(); b++) {
/* 288 */         String str5 = param1AttributeList.getName(b);
/* 289 */         String str6 = param1AttributeList.getValue(b);
/*     */         
/* 291 */         if (str5.equals(""default"")) {
/* 292 */           str1 = str6;
/* 293 */         } else if (str5.equals(""name"")) {
/* 294 */           str2 = str6;
/* 295 */         } else if (str5.equals(""id"")) {
/* 296 */           str3 = str6;
/* 297 */         } else if (str5.equals(""basedir"")) {
/* 298 */           str4 = str6;
/*     */         } else {
/* 300 */           throw new SAXParseException(""Unexpected attribute \"""" + param1AttributeList.getName(b) + ""\"""", this.this$0.locator);
/*     */         } 
/*     */       } 
/*     */       
/* 304 */       if (str1 == null) {
/* 305 */         throw new SAXParseException(""The default attribute of project is required"", this.this$0.locator);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 310 */       this.this$0.project.setDefaultTarget(str1);
/*     */       
/* 312 */       if (str2 != null) {
/* 313 */         this.this$0.project.setName(str2);
/* 314 */         this.this$0.project.addReference(str2, this.this$0.project);
/*     */       } 
/*     */       
/* 317 */       if (str3 != null) this.this$0.project.addReference(str3, this.this$0.project);
/*     */       
/* 319 */       if (this.this$0.project.getProperty(""basedir"") != null) {
/* 320 */         this.this$0.project.setBasedir(this.this$0.project.getProperty(""basedir""));
/*     */       }
/* 322 */       else if (str4 == null) {
/* 323 */         this.this$0.project.setBasedir(this.this$0.buildFileParent.getAbsolutePath());
/*     */       
/*     */       }
/* 326 */       else if ((new File(str4)).isAbsolute()) {
/* 327 */         this.this$0.project.setBasedir(str4);
/*     */       } else {
/* 329 */         this.this$0.project.setBaseDir(this.this$0.project.resolveFile(str4, this.this$0.buildFileParent));
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 337 */       if (param1String.equals(""taskdef"")) {
/* 338 */         handleTaskdef(param1String, param1AttributeList);
/* 339 */       } else if (param1String.equals(""property"")) {
/* 340 */         handleProperty(param1String, param1AttributeList);
/* 341 */       } else if (param1String.equals(""target"")) {
/* 342 */         handleTarget(param1String, param1AttributeList);
/* 343 */       } else if (this.this$0.project.getDataTypeDefinitions().get(param1String) != null) {
/* 344 */         handleDataType(param1String, param1AttributeList);
/*     */       } else {
/* 346 */         throw new SAXParseException(""Unexpected element \"""" + param1String + ""\"""", this.this$0.locator);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 351 */     private void handleTaskdef(String param1String, AttributeList param1AttributeList) throws SAXParseException { (new ProjectHelper.TaskHandler(this.this$0, this, null, null)).init(param1String, param1AttributeList); }
/*     */ 
/*     */ 
/*     */     
/* 355 */     private void handleProperty(String param1String, AttributeList param1AttributeList) throws SAXParseException { (new ProjectHelper.TaskHandler(this.this$0, this, null, null)).init(param1String, param1AttributeList); }
/*     */ 
/*     */ 
/*     */     
/* 359 */     private void handleTarget(String param1String, AttributeList param1AttributeList) throws SAXParseException { (new ProjectHelper.TargetHandler(this.this$0, this)).init(param1String, param1AttributeList); }
/*     */ 
/*     */ 
/*     */     
/* 363 */     private void handleDataType(String param1String, AttributeList param1AttributeList) throws SAXParseException { (new ProjectHelper.DataTypeHandler(this)).init(param1String, param1AttributeList); }
/*     */   }
/*     */ 
/*     */   
/*     */   private class TargetHandler
/*     */     extends AbstractHandler
/*     */   {
/*     */     private Target target;
/*     */     
/*     */     private final ProjectHelper this$0;
/*     */     
/*     */     public TargetHandler(ProjectHelper this$0, DocumentHandler param1DocumentHandler) {
/* 375 */       super(this$0, param1DocumentHandler);
/*     */       this.this$0 = this$0;
/*     */     }
/*     */     public void init(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 379 */       String str1 = null;
/* 380 */       String str2 = """";
/* 381 */       String str3 = null;
/* 382 */       String str4 = null;
/* 383 */       String str5 = null;
/* 384 */       String str6 = null;
/*     */       
/* 386 */       for (byte b = 0; b < param1AttributeList.getLength(); b++) {
/* 387 */         String str7 = param1AttributeList.getName(b);
/* 388 */         String str8 = param1AttributeList.getValue(b);
/*     */         
/* 390 */         if (str7.equals(""name"")) {
/* 391 */           str1 = str8;
/* 392 */         } else if (str7.equals(""depends"")) {
/* 393 */           str2 = str8;
/* 394 */         } else if (str7.equals(""if"")) {
/* 395 */           str3 = str8;
/* 396 */         } else if (str7.equals(""unless"")) {
/* 397 */           str4 = str8;
/* 398 */         } else if (str7.equals(""id"")) {
/* 399 */           str5 = str8;
/* 400 */         } else if (str7.equals(""description"")) {
/* 401 */           str6 = str8;
/*     */         } else {
/* 403 */           throw new SAXParseException(""Unexpected attribute \"""" + str7 + ""\"""", this.this$0.locator);
/*     */         } 
/*     */       } 
/*     */       
/* 407 */       if (str1 == null) {
/* 408 */         throw new SAXParseException(""target element appears without a name attribute"", this.this$0.locator);
/*     */       }
/*     */       
/* 411 */       this.target = new Target();
/* 412 */       this.target.setName(str1);
/* 413 */       this.target.setIf(str3);
/* 414 */       this.target.setUnless(str4);
/* 415 */       this.target.setDescription(str6);
/* 416 */       this.this$0.project.addTarget(str1, this.target);
/*     */       
/* 418 */       if (str5 != null && !str5.equals("""")) {
/* 419 */         this.this$0.project.addReference(str5, this.target);
/*     */       }
/*     */ 
/*     */       
/* 423 */       if (str2.length() > 0) {
/* 424 */         this.target.setDepends(str2);
/*     */       }
/*     */     }
/*     */     
/*     */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 429 */       if (this.this$0.project.getDataTypeDefinitions().get(param1String) != null) {
/* 430 */         (new ProjectHelper.DataTypeHandler(this, this.target)).init(param1String, param1AttributeList);
/*     */       } else {
/* 432 */         (new ProjectHelper.TaskHandler(this.this$0, this, this.target, this.target)).init(param1String, param1AttributeList);
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   private class TaskHandler
/*     */     extends AbstractHandler
/*     */   {
/*     */     private Target target;
/*     */     private TaskContainer container;
/*     */     private Task task;
/*     */     private RuntimeConfigurable wrapper;
/*     */     private final ProjectHelper this$0;
/*     */     
/*     */     public TaskHandler(ProjectHelper this$0, DocumentHandler param1DocumentHandler, TaskContainer param1TaskContainer, Target param1Target) {
/* 447 */       super(this$0, param1DocumentHandler); this.this$0 = this$0; this.wrapper = null;
/* 448 */       this.container = param1TaskContainer;
/* 449 */       this.target = param1Target;
/*     */     }
/*     */     
/*     */     public void init(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/*     */       try {
/* 454 */         this.task = this.this$0.project.createTask(param1String);
/* 455 */       } catch (BuildException buildException) {}
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 460 */       if (this.task == null) {
/* 461 */         this.task = new UnknownElement(param1String);
/* 462 */         this.task.setProject(this.this$0.project);
/* 463 */         this.task.setTaskType(param1String);
/* 464 */         this.task.setTaskName(param1String);
/*     */       } 
/*     */       
/* 467 */       this.task.setLocation(new Location(this.this$0.buildFile.toString(), this.this$0.locator.getLineNumber(), this.this$0.locator.getColumnNumber()));
/* 468 */       this.this$0.configureId(this.task, param1AttributeList);
/*     */ 
/*     */       
/* 471 */       if (this.target != null) {
/* 472 */         this.task.setOwningTarget(this.target);
/* 473 */         this.container.addTask(this.task);
/* 474 */         this.task.init();
/* 475 */         this.wrapper = this.task.getRuntimeConfigurableWrapper();
/* 476 */         this.wrapper.setAttributes(param1AttributeList);
/*     */       } else {
/* 478 */         this.task.init();
/* 479 */         ProjectHelper.configure(this.task, param1AttributeList, this.this$0.project);
/*     */       } 
/*     */     }
/*     */     
/*     */     protected void finished() {
/* 484 */       if (this.task != null && this.target == null) {
/* 485 */         this.task.execute();
/*     */       }
/*     */     }
/*     */     
/*     */     public void characters(char[] param1ArrayOfchar, int param1Int1, int param1Int2) throws SAXParseException {
/* 490 */       if (this.wrapper == null) {
/*     */         try {
/* 492 */           ProjectHelper.addText(this.this$0.project, this.task, param1ArrayOfchar, param1Int1, param1Int2);
/*     */         } catch (BuildException buildException) {
/* 494 */           throw new SAXParseException(buildException.getMessage(), this.this$0.locator, buildException);
/*     */         } 
/*     */       } else {
/* 497 */         this.wrapper.addText(param1ArrayOfchar, param1Int1, param1Int2);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 502 */       if (this.task instanceof TaskContainer) {
/*     */         
/* 504 */         (new TaskHandler(this.this$0, this, (TaskContainer)this.task, this.target)).init(param1String, param1AttributeList);
/*     */       } else {
/*     */         
/* 507 */         (new ProjectHelper.NestedElementHandler(this.this$0, this, this.task, this.wrapper, this.target)).init(param1String, param1AttributeList);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private class NestedElementHandler
/*     */     extends AbstractHandler
/*     */   {
/*     */     private Object parent;
/*     */     
/*     */     private Object child;
/*     */     
/*     */     private RuntimeConfigurable parentWrapper;
/*     */     private RuntimeConfigurable childWrapper;
/*     */     private Target target;
/*     */     private final ProjectHelper this$0;
/*     */     
/*     */     public NestedElementHandler(ProjectHelper this$0, DocumentHandler param1DocumentHandler, Object param1Object, RuntimeConfigurable param1RuntimeConfigurable, Target param1Target) {
/* 526 */       super(this$0, param1DocumentHandler); this.this$0 = this$0;
/*     */       this.childWrapper = null;
/* 528 */       if (param1Object instanceof TaskAdapter) {
/* 529 */         this.parent = ((TaskAdapter)param1Object).getProxy();
/*     */       } else {
/* 531 */         this.parent = param1Object;
/*     */       } 
/* 533 */       this.parentWrapper = param1RuntimeConfigurable;
/* 534 */       this.target = param1Target;
/*     */     }
/*     */     
/*     */     public void init(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 538 */       Class clazz = this.parent.getClass();
/* 539 */       IntrospectionHelper introspectionHelper = IntrospectionHelper.getHelper(clazz);
/*     */ 
/*     */       
/*     */       try {
/* 543 */         if (this.parent instanceof UnknownElement) {
/* 544 */           this.child = new UnknownElement(param1String.toLowerCase());
/* 545 */           ((UnknownElement)this.parent).addChild((UnknownElement)this.child);
/*     */         } else {
/* 547 */           this.child = introspectionHelper.createElement(this.this$0.project, this.parent, param1String.toLowerCase());
/*     */         } 
/*     */         
/* 550 */         this.this$0.configureId(this.child, param1AttributeList);
/*     */         
/* 552 */         if (this.parentWrapper != null) {
/* 553 */           this.childWrapper = new RuntimeConfigurable(this.child, param1String);
/* 554 */           this.childWrapper.setAttributes(param1AttributeList);
/* 555 */           this.parentWrapper.addChild(this.childWrapper);
/*     */         } else {
/* 557 */           ProjectHelper.configure(this.child, param1AttributeList, this.this$0.project);
/* 558 */           introspectionHelper.storeElement(this.this$0.project, this.parent, this.child, param1String.toLowerCase());
/*     */         } 
/*     */       } catch (BuildException buildException) {
/* 561 */         throw new SAXParseException(buildException.getMessage(), this.this$0.locator, buildException);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void characters(char[] param1ArrayOfchar, int param1Int1, int param1Int2) throws SAXParseException {
/* 566 */       if (this.parentWrapper == null) {
/*     */         try {
/* 568 */           ProjectHelper.addText(this.this$0.project, this.child, param1ArrayOfchar, param1Int1, param1Int2);
/*     */         } catch (BuildException buildException) {
/* 570 */           throw new SAXParseException(buildException.getMessage(), this.this$0.locator, buildException);
/*     */         } 
/*     */       } else {
/* 573 */         this.childWrapper.addText(param1ArrayOfchar, param1Int1, param1Int2);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/* 578 */       if (this.child instanceof TaskContainer) {
/*     */ 
/*     */         
/* 581 */         (new ProjectHelper.TaskHandler(this.this$0, this, (TaskContainer)this.child, this.target)).init(param1String, param1AttributeList);
/*     */       } else {
/*     */         
/* 584 */         (new NestedElementHandler(this.this$0, this, this.child, this.childWrapper, this.target)).init(param1String, param1AttributeList);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private class DataTypeHandler
/*     */     extends AbstractHandler
/*     */   {
/*     */     private Target target;
/*     */     private Object element;
/*     */     private RuntimeConfigurable wrapper;
/*     */     private final ProjectHelper this$0;
/*     */     
/* 598 */     public DataTypeHandler(DocumentHandler param1DocumentHandler) { this(param1DocumentHandler, null); }
/*     */ 
/*     */     
/*     */     public DataTypeHandler(DocumentHandler param1DocumentHandler, Target param1Target) {
/* 602 */       super(param1DocumentHandler); ProjectHelper.this = ProjectHelper.this; this.wrapper = null;
/* 603 */       this.target = param1Target;
/*     */     }
/*     */     
/*     */     public void init(String param1String, AttributeList param1AttributeList) throws SAXParseException {
/*     */       try {
/* 608 */         this.element = ProjectHelper.this.project.createDataType(param1String);
/* 609 */         if (this.element == null) {
/* 610 */           throw new BuildException(""Unknown data type "" + param1String);
/*     */         }
/*     */         
/* 613 */         if (this.target != null) {
/* 614 */           this.wrapper = new RuntimeConfigurable(this.element, param1String);
/* 615 */           this.wrapper.setAttributes(param1AttributeList);
/* 616 */           this.target.addDataType(this.wrapper);
/*     */         } else {
/* 618 */           ProjectHelper.configure(this.element, param1AttributeList, ProjectHelper.this.project);
/* 619 */           ProjectHelper.this.configureId(this.element, param1AttributeList);
/*     */         } 
/*     */       } catch (BuildException buildException) {
/* 622 */         throw new SAXParseException(buildException.getMessage(), ProjectHelper.this.locator, buildException);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void characters(char[] param1ArrayOfchar, int param1Int1, int param1Int2) throws SAXParseException {
/*     */       try {
/* 628 */         ProjectHelper.addText(ProjectHelper.this.project, this.element, param1ArrayOfchar, param1Int1, param1Int2);
/*     */       } catch (BuildException buildException) {
/* 630 */         throw new SAXParseException(buildException.getMessage(), ProjectHelper.this.locator, buildException);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 635 */     public void startElement(String param1String, AttributeList param1AttributeList) throws SAXParseException { (new ProjectHelper.NestedElementHandler(ProjectHelper.this, this, this.element, this.wrapper, this.target)).init(param1String, param1AttributeList); }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static void configure(Object paramObject, AttributeList paramAttributeList, Project paramProject) throws BuildException {
/* 641 */     if (paramObject instanceof TaskAdapter) {
/* 642 */       paramObject = ((TaskAdapter)paramObject).getProxy();
/*     */     }
/* 644 */     IntrospectionHelper introspectionHelper = IntrospectionHelper.getHelper(paramObject.getClass());
/*     */ 
/*     */     
/* 647 */     paramProject.addBuildListener(introspectionHelper);
/*     */     
/* 649 */     for (byte b = 0; b < paramAttributeList.getLength(); b++) {
/*     */       
/* 651 */       String str = replaceProperties(paramProject, paramAttributeList.getValue(b), paramProject.getProperties());
/*     */       
/*     */       try {
/* 654 */         introspectionHelper.setAttribute(paramProject, paramObject, paramAttributeList.getName(b).toLowerCase(), str);
/*     */       
/*     */       }
/*     */       catch (BuildException buildException) {
/*     */         
/* 659 */         if (!paramAttributeList.getName(b).equals(""id"")) {
/* 660 */           throw buildException;
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 671 */   public static void addText(Project paramProject, Object paramObject, char[] paramArrayOfchar, int paramInt1, int paramInt2) throws BuildException { addText(paramProject, paramObject, new String(paramArrayOfchar, paramInt1, paramInt2)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void addText(Project paramProject, Object paramObject, String paramString) throws BuildException {
/* 680 */     if (paramString == null || paramString.trim().length() == 0) {
/*     */       return;
/*     */     }
/*     */     
/* 684 */     if (paramObject instanceof TaskAdapter) {
/* 685 */       paramObject = ((TaskAdapter)paramObject).getProxy();
/*     */     }
/* 687 */     IntrospectionHelper.getHelper(paramObject.getClass()).addText(paramProject, paramObject, paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void storeChild(Project paramProject, Object paramObject1, Object paramObject2, String paramString) {
/* 694 */     IntrospectionHelper introspectionHelper = IntrospectionHelper.getHelper(paramObject1.getClass());
/* 695 */     introspectionHelper.storeElement(paramProject, paramObject1, paramObject2, paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replaceProperties(Project paramProject, String paramString, Hashtable paramHashtable) throws BuildException {
/* 706 */     if (paramString == null) {
/* 707 */       return null;
/*     */     }
/*     */     
/* 710 */     Vector vector1 = new Vector();
/* 711 */     Vector vector2 = new Vector();
/* 712 */     parsePropertyString(paramString, vector1, vector2);
/*     */     
/* 714 */     StringBuffer stringBuffer = new StringBuffer();
/* 715 */     Enumeration enumeration1 = vector1.elements();
/* 716 */     Enumeration enumeration2 = vector2.elements();
/* 717 */     while (enumeration1.hasMoreElements()) {
/* 718 */       String str = enumeration1.nextElement();
/* 719 */       if (str == null) {
/* 720 */         String str1 = enumeration2.nextElement();
/* 721 */         if (!paramHashtable.containsKey(str1)) {
/* 722 */           paramProject.log(""Property ${"" + str1 + ""} has not been set"", 3);
/*     */         }
/* 724 */         str = paramHashtable.containsKey(str1) ? (String)paramHashtable.get(str1) : (""${"" + str1 + ""}"");
/*     */       } 
/*     */       
/* 727 */       stringBuffer.append(str);
/*     */     } 
/*     */     
/* 730 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void parsePropertyString(String paramString, Vector paramVector1, Vector paramVector2) throws BuildException {
/* 742 */     int i = 0;
/*     */     int j;
/* 744 */     while ((j = paramString.indexOf(""$"", i)) >= 0) {
/* 745 */       if (j > 0) {
/* 746 */         paramVector1.addElement(paramString.substring(i, j));
/*     */       }
/*     */       
/* 749 */       if (j == paramString.length() - 1) {
/* 750 */         paramVector1.addElement(""$"");
/* 751 */         i = j + 1; continue;
/*     */       } 
/* 753 */       if (paramString.charAt(j + 1) != '{') {
/* 754 */         paramVector1.addElement(paramString.substring(j + 1, j + 2));
/* 755 */         i = j + 2; continue;
/*     */       } 
/* 757 */       int k = paramString.indexOf('}', j);
/* 758 */       if (k < 0) {
/* 759 */         throw new BuildException(""Syntax error in property: "" + paramString);
/*     */       }
/*     */       
/* 762 */       String str = paramString.substring(j + 2, k);
/* 763 */       paramVector1.addElement(null);
/* 764 */       paramVector2.addElement(str);
/* 765 */       i = k + 1;
/*     */     } 
/*     */ 
/*     */     
/* 769 */     if (i < paramString.length()) {
/* 770 */       paramVector1.addElement(paramString.substring(i));
/*     */     }
/*     */   }
/*     */   
/*     */   private static SAXParserFactory getParserFactory() {
/* 775 */     if (parserFactory == null) {
/* 776 */       parserFactory = SAXParserFactory.newInstance();
/*     */     }
/*     */     
/* 779 */     return parserFactory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void configureId(Object paramObject, AttributeList paramAttributeList) {
/* 790 */     String str = paramAttributeList.getValue(""id"");
/* 791 */     if (str != null)
/* 792 */       this.project.addReference(str, paramObject); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\ProjectHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.RuntimeConfigurable,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.xml.sax.AttributeList;
/*     */ import org.xml.sax.helpers.AttributeListImpl;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RuntimeConfigurable
/*     */ {
/*  71 */   private String elementTag = null;
/*  72 */   private Vector children = new Vector();
/*  73 */   private Object wrappedObject = null;
/*     */   private AttributeList attributes;
/*  75 */   private StringBuffer characters = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable(Object paramObject, String paramString) {
/*  81 */     this.wrappedObject = paramObject;
/*  82 */     this.elementTag = paramString;
/*     */   }
/*     */ 
/*     */   
/*  86 */   void setProxy(Object paramObject) { this.wrappedObject = paramObject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setAttributes(AttributeList paramAttributeList) { this.attributes = new AttributeListImpl(paramAttributeList); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public AttributeList getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void addChild(RuntimeConfigurable paramRuntimeConfigurable) { this.children.addElement(paramRuntimeConfigurable); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   RuntimeConfigurable getChild(int paramInt) { return this.children.elementAt(paramInt); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void addText(String paramString) { this.characters.append(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void addText(char[] paramArrayOfchar, int paramInt1, int paramInt2) { addText(new String(paramArrayOfchar, paramInt1, paramInt2)); }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public String getElementTag() { return this.elementTag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure(Project paramProject) throws BuildException {
/* 140 */     String str = null;
/*     */     
/* 142 */     if (this.attributes != null) {
/* 143 */       ProjectHelper.configure(this.wrappedObject, this.attributes, paramProject);
/* 144 */       str = this.attributes.getValue(""id"");
/* 145 */       this.attributes = null;
/*     */     } 
/* 147 */     if (this.characters.length() != 0) {
/* 148 */       ProjectHelper.addText(paramProject, this.wrappedObject, this.characters.toString());
/* 149 */       this.characters.setLength(0);
/*     */     } 
/* 151 */     Enumeration enumeration = this.children.elements();
/* 152 */     while (enumeration.hasMoreElements()) {
/* 153 */       RuntimeConfigurable runtimeConfigurable = enumeration.nextElement();
/* 154 */       runtimeConfigurable.maybeConfigure(paramProject);
/* 155 */       ProjectHelper.storeChild(paramProject, this.wrappedObject, runtimeConfigurable.wrappedObject, runtimeConfigurable.getElementTag().toLowerCase());
/*     */     } 
/*     */     
/* 158 */     if (str != null)
/* 159 */       paramProject.addReference(str, this.wrappedObject); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\RuntimeConfigurable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Target,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Target
/*     */   implements TaskContainer
/*     */ {
/*     */   private String name;
/*  68 */   private String ifCondition = """";
/*  69 */   private String unlessCondition = """";
/*  70 */   private Vector dependencies = new Vector(2);
/*  71 */   private Vector children = new Vector(5);
/*     */   private Project project;
/*  73 */   private String description = null;
/*     */ 
/*     */   
/*  76 */   public void setProject(Project paramProject) { this.project = paramProject; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public Project getProject() { return this.project; }
/*     */ 
/*     */   
/*     */   public void setDepends(String paramString) {
/*  84 */     if (paramString.length() > 0) {
/*  85 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "","", true);
/*     */       
/*  87 */       while (stringTokenizer.hasMoreTokens()) {
/*  88 */         String str = stringTokenizer.nextToken().trim();
/*     */ 
/*     */         
/*  91 */         if (str.equals("""") || str.equals("","")) {
/*  92 */           throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" has an empty string for dependency."");
/*     */         }
/*     */ 
/*     */ 
/*     */         
/*  97 */         addDependency(str);
/*     */ 
/*     */ 
/*     */         
/* 101 */         if (stringTokenizer.hasMoreTokens()) {
/* 102 */           str = stringTokenizer.nextToken();
/* 103 */           if (!stringTokenizer.hasMoreTokens() || !str.equals("","")) {
/* 104 */             throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" ends with a , character"");
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setName(String paramString) { this.name = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 118 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void addTask(Task paramTask) { this.children.addElement(paramTask); }
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void addDataType(RuntimeConfigurable paramRuntimeConfigurable) { this.children.addElement(paramRuntimeConfigurable); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task[] getTasks() {
/* 135 */     Vector vector = new Vector(this.children.size());
/* 136 */     Enumeration enumeration = this.children.elements();
/* 137 */     while (enumeration.hasMoreElements()) {
/* 138 */       Object object = enumeration.nextElement();
/* 139 */       if (object instanceof Task) {
/* 140 */         vector.addElement(object);
/*     */       }
/*     */     } 
/*     */     
/* 144 */     Task[] arrayOfTask = new Task[vector.size()];
/* 145 */     vector.copyInto((Object[])arrayOfTask);
/* 146 */     return arrayOfTask;
/*     */   }
/*     */ 
/*     */   
/* 150 */   public void addDependency(String paramString) { this.dependencies.addElement(paramString); }
/*     */ 
/*     */ 
/*     */   
/* 154 */   public Enumeration getDependencies() { return this.dependencies.elements(); }
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setIf(String paramString) { this.ifCondition = (paramString == null) ? """" : paramString; }
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setUnless(String paramString) { this.unlessCondition = (paramString == null) ? """" : paramString; }
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setDescription(String paramString) { this.description = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 170 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/* 174 */   public String toString() { return this.name; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 178 */     if (testIfCondition() && testUnlessCondition()) {
/* 179 */       Enumeration enumeration = this.children.elements();
/* 180 */       while (enumeration.hasMoreElements()) {
/* 181 */         Task task = (Task)enumeration.nextElement();
/* 182 */         if (task instanceof Task) {
/* 183 */           Task task1 = task;
/* 184 */           task1.perform(); continue;
/*     */         } 
/* 186 */         RuntimeConfigurable runtimeConfigurable = (RuntimeConfigurable)task;
/* 187 */         runtimeConfigurable.maybeConfigure(this.project);
/*     */       }
/*     */     
/* 190 */     } else if (!testIfCondition()) {
/* 191 */       this.project.log(this, ""Skipped because property '"" + this.ifCondition + ""' not set."", 3);
/*     */     } else {
/*     */       
/* 194 */       this.project.log(this, ""Skipped because property '"" + this.unlessCondition + ""' set."", 3);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public final void performTasks() {
/*     */     try {
/* 201 */       this.project.fireTargetStarted(this);
/* 202 */       execute();
/* 203 */       this.project.fireTargetFinished(this, null);
/*     */     } catch (RuntimeException runtimeException) {
/*     */       
/* 206 */       this.project.fireTargetFinished(this, runtimeException);
/* 207 */       throw runtimeException;
/*     */     } 
/*     */   }
/*     */   
/*     */   void replaceTask(UnknownElement paramUnknownElement, Task paramTask) {
/* 212 */     int i = -1;
/* 213 */     while ((i = this.children.indexOf(paramUnknownElement)) >= 0) {
/* 214 */       this.children.setElementAt(paramTask, i);
/*     */     }
/*     */   }
/*     */   
/*     */   private boolean testIfCondition() {
/* 219 */     if ("""".equals(this.ifCondition)) {
/* 220 */       return true;
/*     */     }
/*     */     
/* 223 */     String str = ProjectHelper.replaceProperties(getProject(), this.ifCondition, getProject().getProperties());
/* 224 */     return (this.project.getProperty(str) != null);
/*     */   }
/*     */   
/*     */   private boolean testUnlessCondition() {
/* 228 */     if ("""".equals(this.unlessCondition)) {
/* 229 */       return true;
/*     */     }
/* 231 */     String str = ProjectHelper.replaceProperties(getProject(), this.unlessCondition, getProject().getProperties());
/* 232 */     return (this.project.getProperty(str) == null);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Target.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Task,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Task
/*     */   extends ProjectComponent
/*     */ {
/*  65 */   protected Target target = null;
/*  66 */   protected String description = null;
/*  67 */   protected Location location = Location.UNKNOWN_LOCATION;
/*  68 */   protected String taskName = null;
/*  69 */   protected String taskType = null;
/*     */ 
/*     */ 
/*     */   
/*     */   protected RuntimeConfigurable wrapper;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   public void setOwningTarget(Target paramTarget) { this.target = paramTarget; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public Target getOwningTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setTaskName(String paramString) { this.taskName = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public String getTaskName() { return this.taskName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   void setTaskType(String paramString) { this.taskType = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setDescription(String paramString) { this.description = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setLocation(Location paramLocation) { this.location = paramLocation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable getRuntimeConfigurableWrapper() {
/* 163 */     if (this.wrapper == null) {
/* 164 */       this.wrapper = new RuntimeConfigurable(this, getTaskName());
/*     */     }
/* 166 */     return this.wrapper;
/*     */   }
/*     */ 
/*     */   
/* 170 */   protected void setRuntimeConfigurableWrapper(RuntimeConfigurable paramRuntimeConfigurable) { this.wrapper = paramRuntimeConfigurable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/* 177 */     if (this.wrapper != null) {
/* 178 */       this.wrapper.maybeConfigure(this.project);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 183 */   protected void handleOutput(String paramString) { log(paramString, 2); }
/*     */ 
/*     */ 
/*     */   
/* 187 */   protected void handleErrorOutput(String paramString) { log(paramString, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void log(String paramString) { log(paramString, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void log(String paramString, int paramInt) { this.project.log(this, paramString, paramInt); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void perform() {
/*     */     try {
/* 215 */       this.project.fireTaskStarted(this);
/* 216 */       maybeConfigure();
/* 217 */       execute();
/* 218 */       this.project.fireTaskFinished(this, null);
/*     */     } catch (RuntimeException runtimeException) {
/*     */       
/* 221 */       if (runtimeException instanceof BuildException) {
/* 222 */         BuildException buildException = (BuildException)runtimeException;
/* 223 */         if (buildException.getLocation() == Location.UNKNOWN_LOCATION) {
/* 224 */           buildException.setLocation(getLocation());
/*     */         }
/*     */       } 
/* 227 */       this.project.fireTaskFinished(this, runtimeException);
/* 228 */       throw runtimeException;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\Task.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskAdapter,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskAdapter
/*     */   extends Task
/*     */ {
/*     */   Object proxy;
/*     */   
/*     */   public void execute() throws BuildException {
/*  74 */     Method method1 = null;
/*     */     try {
/*  76 */       Class clazz = this.proxy.getClass();
/*  77 */       method1 = clazz.getMethod(""setProject"", new Class[] { Project.class });
/*     */       
/*  79 */       if (method1 != null) {
/*  80 */         method1.invoke(this.proxy, new Object[] { this.project });
/*     */       }
/*     */     } catch (Exception exception) {
/*  83 */       log(""Error setting project in "" + this.proxy.getClass(), 0);
/*     */       
/*  85 */       throw new BuildException(exception);
/*     */     } 
/*     */ 
/*     */     
/*  89 */     Method method2 = null;
/*     */     try {
/*  91 */       Class clazz = this.proxy.getClass();
/*  92 */       method2 = clazz.getMethod(""execute"", new Class[0]);
/*  93 */       if (method2 == null) {
/*  94 */         log(""No execute in "" + this.proxy.getClass(), 0);
/*  95 */         throw new BuildException(""No execute in "" + this.proxy.getClass());
/*     */       } 
/*  97 */       method2.invoke(this.proxy, null);
/*     */       return;
/*     */     } catch (Exception exception) {
/* 100 */       log(""Error in "" + this.proxy.getClass(), 0);
/* 101 */       throw new BuildException(exception);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setProxy(Object paramObject) { this.proxy = paramObject; }
/*     */ 
/*     */ 
/*     */   
/* 114 */   public Object getProxy() { return this.proxy; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\TaskAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskContainer,"package org.apache.tools.ant;
public interface TaskContainer {
  void addTask(Task paramTask);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\TaskContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.UnknownElement,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnknownElement
/*     */   extends Task
/*     */ {
/*     */   private String elementName;
/*     */   private Task realTask;
/*  69 */   private Vector children = new Vector();
/*     */ 
/*     */   
/*  72 */   public UnknownElement(String paramString) { this.elementName = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  79 */   public String getTag() { return this.elementName; }
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/*  83 */     this.realTask = makeTask(this, this.wrapper);
/*     */     
/*  85 */     this.wrapper.setProxy(this.realTask);
/*  86 */     this.realTask.setRuntimeConfigurableWrapper(this.wrapper);
/*     */     
/*  88 */     handleChildren(this.realTask, this.wrapper);
/*     */     
/*  90 */     this.realTask.maybeConfigure();
/*  91 */     this.target.replaceTask(this, this.realTask);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/*  98 */     if (this.realTask == null)
/*     */     {
/*     */       
/* 101 */       throw new BuildException(""Could not create task of type: "" + this.elementName, this.location);
/*     */     }
/*     */     
/* 104 */     this.realTask.execute();
/*     */   }
/*     */ 
/*     */   
/* 108 */   public void addChild(UnknownElement paramUnknownElement) { this.children.addElement(paramUnknownElement); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleChildren(Object paramObject, RuntimeConfigurable paramRuntimeConfigurable) throws BuildException {
/* 115 */     if (paramObject instanceof TaskAdapter) {
/* 116 */       paramObject = ((TaskAdapter)paramObject).getProxy();
/*     */     }
/*     */     
/* 119 */     Class clazz = paramObject.getClass();
/* 120 */     IntrospectionHelper introspectionHelper = IntrospectionHelper.getHelper(clazz);
/*     */     
/* 122 */     for (byte b = 0; b < this.children.size(); b++) {
/* 123 */       RuntimeConfigurable runtimeConfigurable = paramRuntimeConfigurable.getChild(b);
/* 124 */       UnknownElement unknownElement = this.children.elementAt(b);
/* 125 */       Object object = null;
/* 126 */       if (paramObject instanceof TaskContainer) {
/* 127 */         object = makeTask(unknownElement, runtimeConfigurable);
/* 128 */         ((TaskContainer)paramObject).addTask((Task)object);
/*     */       } else {
/* 130 */         object = introspectionHelper.createElement(this.project, paramObject, unknownElement.getTag());
/*     */       } 
/*     */       
/* 133 */       runtimeConfigurable.setProxy(object);
/* 134 */       if (object instanceof Task) {
/* 135 */         ((Task)object).setRuntimeConfigurableWrapper(runtimeConfigurable);
/*     */       }
/* 137 */       unknownElement.handleChildren(object, runtimeConfigurable);
/* 138 */       if (object instanceof Task) {
/* 139 */         ((Task)object).maybeConfigure();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Task makeTask(UnknownElement paramUnknownElement, RuntimeConfigurable paramRuntimeConfigurable) {
/* 148 */     Task task = this.project.createTask(paramUnknownElement.getTag());
/* 149 */     if (task == null) {
/* 150 */       log(""Could not create task of type: "" + this.elementName + "" Common solutions"" + "" are adding the task to defaults.properties and executing bin/bootstrap"", 4);
/*     */ 
/*     */       
/* 153 */       throw new BuildException(""Could not create task of type: "" + this.elementName + "". Common solutions are to use taskdef to declare"" + "" your task, or, if this is an optional task,"" + "" to put the optional.jar in the lib directory of"" + "" your ant installation (ANT_HOME)."", this.location);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 160 */     task.setLocation(getLocation());
/* 161 */     String str = paramRuntimeConfigurable.getAttributes().getValue(""id"");
/* 162 */     if (str != null) {
/* 163 */       this.project.addReference(str, task);
/*     */     }
/*     */     
/* 166 */     task.setOwningTarget(this.target);
/*     */     
/* 168 */     task.init();
/* 169 */     return task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public String getTaskName() { return (this.realTask == null) ? super.getTaskName() : this.realTask.getTaskName(); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\UnknownElement.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.XmlLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import org.apache.tools.ant.util.DOMElementWriter;
/*     */ import org.w3c.dom.CDATASection;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlLogger
/*     */   implements BuildListener
/*     */ {
/*  71 */   private static final DocumentBuilder builder = getDocumentBuilder(); private static final String BUILD_TAG = ""build"";
/*     */   
/*     */   private static DocumentBuilder getDocumentBuilder() {
/*     */     try {
/*  75 */       return DocumentBuilderFactory.newInstance().newDocumentBuilder();
/*     */     } catch (Exception exception) {
/*     */       
/*  78 */       throw new ExceptionInInitializerError(exception);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static final String TARGET_TAG = ""target"";
/*     */   
/*     */   private static final String TASK_TAG = ""task"";
/*     */   
/*     */   private static final String MESSAGE_TAG = ""message"";
/*     */   private static final String NAME_ATTR = ""name"";
/*     */   private static final String TIME_ATTR = ""time"";
/*     */   private static final String PRIORITY_ATTR = ""priority"";
/*     */   private static final String LOCATION_ATTR = ""location"";
/*     */   private static final String ERROR_ATTR = ""error"";
/*     */   private Document doc;
/*  94 */   private Hashtable tasks = new Hashtable();
/*  95 */   private Hashtable targets = new Hashtable();
/*  96 */   private Hashtable threadStacks = new Hashtable();
/*  97 */   private TimedElement buildElement = null;
/*     */ 
/*     */   
/*     */   private static class TimedElement
/*     */   {
/*     */     long startTime;
/*     */     
/*     */     Element element;
/*     */ 
/*     */     
/*     */     private TimedElement() {}
/*     */   }
/*     */   
/*     */   public void buildStarted(BuildEvent paramBuildEvent) {
/* 111 */     this.buildElement = new TimedElement();
/* 112 */     this.buildElement.startTime = System.currentTimeMillis();
/*     */     
/* 114 */     this.doc = builder.newDocument();
/* 115 */     this.buildElement.element = this.doc.createElement(""build"");
/*     */   }
/*     */   
/*     */   public void buildFinished(BuildEvent paramBuildEvent) {
/* 119 */     long l = System.currentTimeMillis() - this.buildElement.startTime;
/* 120 */     this.buildElement.element.setAttribute(""time"", DefaultLogger.formatTime(l));
/*     */     
/* 122 */     if (paramBuildEvent.getException() != null) {
/* 123 */       this.buildElement.element.setAttribute(""error"", paramBuildEvent.getException().toString());
/*     */     }
/*     */     
/*     */     try {
/* 127 */       String str = paramBuildEvent.getProject().getProperty(""XmlLogger.file"");
/*     */ 
/*     */       
/* 130 */       if (str == null) {
/* 131 */         str = ""log.xml"";
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 136 */       OutputStreamWriter outputStreamWriter = new OutputStreamWriter(new FileOutputStream(str), ""UTF8"");
/*     */ 
/*     */       
/* 139 */       outputStreamWriter.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>\n"");
/* 140 */       outputStreamWriter.write(""<?xml:stylesheet type=\""text/xsl\"" href=\""log.xsl\""?>\n\n"");
/* 141 */       (new DOMElementWriter()).write(this.buildElement.element, outputStreamWriter, 0, ""\t"");
/* 142 */       outputStreamWriter.flush();
/* 143 */       outputStreamWriter.close();
/*     */     } catch (IOException iOException) {
/*     */       
/* 146 */       throw new BuildException(""Unable to close log file"", iOException);
/*     */     } 
/* 148 */     this.buildElement = null;
/*     */   }
/*     */   
/*     */   private Stack getStack() {
/* 152 */     Stack stack = (Stack)this.threadStacks.get(Thread.currentThread());
/* 153 */     if (stack == null) {
/* 154 */       stack = new Stack();
/* 155 */       this.threadStacks.put(Thread.currentThread(), stack);
/*     */     } 
/* 157 */     return stack;
/*     */   }
/*     */   
/*     */   public void targetStarted(BuildEvent paramBuildEvent) {
/* 161 */     Target target = paramBuildEvent.getTarget();
/* 162 */     TimedElement timedElement = new TimedElement();
/* 163 */     timedElement.startTime = System.currentTimeMillis();
/* 164 */     timedElement.element = this.doc.createElement(""target"");
/* 165 */     timedElement.element.setAttribute(""name"", target.getName());
/* 166 */     this.targets.put(target, timedElement);
/* 167 */     getStack().push(timedElement);
/*     */   }
/*     */   
/*     */   public void targetFinished(BuildEvent paramBuildEvent) {
/* 171 */     Target target = paramBuildEvent.getTarget();
/* 172 */     TimedElement timedElement = (TimedElement)this.targets.get(target);
/* 173 */     if (timedElement != null) {
/* 174 */       long l = System.currentTimeMillis() - timedElement.startTime;
/* 175 */       timedElement.element.setAttribute(""time"", DefaultLogger.formatTime(l));
/*     */       
/* 177 */       TimedElement timedElement1 = null;
/* 178 */       Stack stack = getStack();
/* 179 */       if (!stack.empty()) {
/* 180 */         TimedElement timedElement2 = stack.pop();
/* 181 */         if (timedElement2 != timedElement) {
/* 182 */           throw new RuntimeException(""Mismatch - popped element = "" + timedElement2.element + "" finished task element = "" + timedElement.element);
/*     */         }
/*     */         
/* 185 */         if (!stack.empty()) {
/* 186 */           timedElement1 = stack.peek();
/*     */         }
/*     */       } 
/* 189 */       if (timedElement1 == null) {
/* 190 */         this.buildElement.element.appendChild(timedElement.element);
/*     */       } else {
/*     */         
/* 193 */         timedElement1.element.appendChild(timedElement.element);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void taskStarted(BuildEvent paramBuildEvent) {
/* 199 */     Task task = paramBuildEvent.getTask();
/* 200 */     TimedElement timedElement = new TimedElement();
/* 201 */     timedElement.startTime = System.currentTimeMillis();
/* 202 */     timedElement.element = this.doc.createElement(""task"");
/*     */     
/* 204 */     String str = paramBuildEvent.getTask().getTaskName();
/* 205 */     timedElement.element.setAttribute(""name"", str);
/* 206 */     timedElement.element.setAttribute(""location"", paramBuildEvent.getTask().getLocation().toString());
/* 207 */     this.tasks.put(task, timedElement);
/* 208 */     getStack().push(timedElement);
/*     */   }
/*     */   
/*     */   public void taskFinished(BuildEvent paramBuildEvent) {
/* 212 */     Task task = paramBuildEvent.getTask();
/* 213 */     TimedElement timedElement = (TimedElement)this.tasks.get(task);
/* 214 */     if (timedElement != null) {
/* 215 */       long l = System.currentTimeMillis() - timedElement.startTime;
/* 216 */       timedElement.element.setAttribute(""time"", DefaultLogger.formatTime(l));
/* 217 */       Target target = task.getOwningTarget();
/* 218 */       TimedElement timedElement1 = (TimedElement)this.targets.get(target);
/* 219 */       if (timedElement1 == null) {
/* 220 */         this.buildElement.element.appendChild(timedElement.element);
/*     */       } else {
/*     */         
/* 223 */         timedElement1.element.appendChild(timedElement.element);
/*     */       } 
/* 225 */       Stack stack = getStack();
/* 226 */       if (!stack.empty()) {
/* 227 */         TimedElement timedElement2 = stack.pop();
/* 228 */         if (timedElement2 != timedElement) {
/* 229 */           throw new RuntimeException(""Mismatch - popped element = "" + timedElement2.element + "" finished task element = "" + timedElement.element);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent paramBuildEvent) {
/* 237 */     Element element = this.doc.createElement(""message"");
/*     */     
/* 239 */     String str = ""debug"";
/* 240 */     switch (paramBuildEvent.getPriority()) { case 0:
/* 241 */         str = ""error""; break;
/* 242 */       case 1: str = ""warn""; break;
/* 243 */       case 2: str = ""info""; break;
/* 244 */       default: str = ""debug""; break; }
/*     */     
/* 246 */     element.setAttribute(""priority"", str);
/*     */     
/* 248 */     CDATASection cDATASection = this.doc.createCDATASection(paramBuildEvent.getMessage());
/* 249 */     element.appendChild(cDATASection);
/*     */     
/* 251 */     TimedElement timedElement = null;
/*     */     
/* 253 */     Task task = paramBuildEvent.getTask();
/* 254 */     Target target = paramBuildEvent.getTarget();
/* 255 */     if (task != null) {
/* 256 */       timedElement = (TimedElement)this.tasks.get(task);
/*     */     }
/* 258 */     if (timedElement == null && target != null) {
/* 259 */       timedElement = (TimedElement)this.targets.get(target);
/*     */     }
/*     */     
/* 262 */     if (timedElement == null) {
/* 263 */       Stack stack = (Stack)this.threadStacks.get(Thread.currentThread());
/* 264 */       if (stack != null && 
/* 265 */         !stack.empty()) {
/* 266 */         timedElement = stack.peek();
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 271 */     if (timedElement != null) {
/* 272 */       timedElement.element.appendChild(element);
/*     */     } else {
/*     */       
/* 275 */       this.buildElement.element.appendChild(element);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\XmlLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.listener.Log4jListener,"/*     */ package org.apache.tools.ant.listener;
/*     */ 
/*     */ import org.apache.log4j.Category;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Target;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Log4jListener
/*     */   implements BuildListener
/*     */ {
/*     */   static final String LOG4J_CONFIG_PROPERTY = ""log4j.configuration"";
/*     */   private boolean initialized = false;
/*     */   
/*     */   public Log4jListener() {
/*  74 */     this.initialized = false;
/*  75 */     Category cat = Category.getInstance(""org.apache.tools.ant"");
/*  76 */     Category rootCat = Category.getRoot();
/*  77 */     if (!(rootCat.getAllAppenders() instanceof org.apache.log4j.helpers.NullEnumeration)) {
/*  78 */       this.initialized = true;
/*     */     } else {
/*     */       
/*  81 */       cat.error(""No log4j.properties in build area"");
/*     */     } 
/*     */   }
/*     */   
/*     */   public void buildStarted(BuildEvent event) {
/*  86 */     if (this.initialized) {
/*  87 */       Category cat = Category.getInstance(Project.class.getName());
/*  88 */       cat.info(""Build started."");
/*     */     } 
/*     */   }
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/*  93 */     if (this.initialized) {
/*  94 */       Category cat = Category.getInstance(Project.class.getName());
/*  95 */       if (event.getException() == null) {
/*  96 */         cat.info(""Build finished."");
/*     */       } else {
/*     */         
/*  99 */         cat.error(""Build finished with error."", event.getException());
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 105 */     if (this.initialized) {
/* 106 */       Category cat = Category.getInstance(Target.class.getName());
/* 107 */       cat.info(""Target \"""" + event.getTarget().getName() + ""\"" started."");
/*     */     } 
/*     */   }
/*     */   
/*     */   public void targetFinished(BuildEvent event) {
/* 112 */     if (this.initialized) {
/* 113 */       String targetName = event.getTarget().getName();
/* 114 */       Category cat = Category.getInstance(Target.class.getName());
/* 115 */       if (event.getException() == null) {
/* 116 */         cat.info(""Target \"""" + event.getTarget().getName() + ""\"" finished."");
/*     */       } else {
/*     */         
/* 119 */         cat.error(""Target \"""" + event.getTarget().getName() + ""\"" finished with error."", event.getException());
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void taskStarted(BuildEvent event) {
/* 125 */     if (this.initialized) {
/* 126 */       Task task = event.getTask();
/* 127 */       Category cat = Category.getInstance(task.getClass().getName());
/* 128 */       cat.info(""Task \"""" + task.getTaskName() + ""\"" started."");
/*     */     } 
/*     */   }
/*     */   
/*     */   public void taskFinished(BuildEvent event) {
/* 133 */     if (this.initialized) {
/* 134 */       Task task = event.getTask();
/* 135 */       Category cat = Category.getInstance(task.getClass().getName());
/* 136 */       if (event.getException() == null) {
/* 137 */         cat.info(""Task \"""" + task.getTaskName() + ""\"" finished."");
/*     */       } else {
/*     */         
/* 140 */         cat.error(""Task \"""" + task.getTaskName() + ""\"" finished with error."", event.getException());
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 146 */     if (this.initialized) {
/* 147 */       Object categoryObject = event.getTask();
/* 148 */       if (categoryObject == null) {
/* 149 */         categoryObject = event.getTarget();
/* 150 */         if (categoryObject == null) {
/* 151 */           categoryObject = event.getProject();
/*     */         }
/*     */       } 
/*     */       
/* 155 */       Category cat = Category.getInstance(categoryObject.getClass().getName());
/* 156 */       switch (event.getPriority()) {
/*     */         case 0:
/* 158 */           cat.error(event.getMessage());
/*     */           return;
/*     */         case 1:
/* 161 */           cat.warn(event.getMessage());
/*     */           return;
/*     */         case 2:
/* 164 */           cat.info(event.getMessage());
/*     */           return;
/*     */         case 3:
/* 167 */           cat.debug(event.getMessage());
/*     */           return;
/*     */         case 4:
/* 170 */           cat.debug(event.getMessage());
/*     */           return;
/*     */       } 
/* 173 */       cat.error(event.getMessage());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\listener\Log4jListener.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ant,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ant
/*     */   extends Task
/*     */ {
/*  84 */   private File dir = null;
/*     */ 
/*     */   
/*  87 */   private String antFile = null;
/*     */ 
/*     */   
/*  90 */   private String target = null;
/*     */ 
/*     */   
/*  93 */   private String output = null;
/*     */ 
/*     */   
/*     */   private boolean inheritAll = true;
/*     */ 
/*     */   
/*  99 */   private Vector properties = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Project newProject;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setInheritAll(boolean paramBoolean) { this.inheritAll = paramBoolean; }
/*     */ 
/*     */   
/*     */   public void init() {
/* 114 */     this.newProject = new Project();
/* 115 */     this.newProject.setJavaVersionProperty();
/* 116 */     this.newProject.addTaskDefinition(""property"", (Class)this.project.getTaskDefinitions().get(""property""));
/*     */   }
/*     */ 
/*     */   
/*     */   private void reinit() {
/* 121 */     init();
/* 122 */     for (byte b = 0; b < this.properties.size(); b++) {
/* 123 */       Property property1 = this.properties.elementAt(b);
/* 124 */       Property property2 = (Property)this.newProject.createTask(""property"");
/* 125 */       property2.setName(property1.getName());
/* 126 */       if (property1.getValue() != null) {
/* 127 */         property2.setValue(property1.getValue());
/*     */       }
/* 129 */       if (property1.getFile() != null) {
/* 130 */         property2.setFile(property1.getFile());
/*     */       }
/* 132 */       if (property1.getResource() != null) {
/* 133 */         property2.setResource(property1.getResource());
/*     */       }
/* 135 */       this.properties.setElementAt(property2, b);
/*     */     } 
/*     */   }
/*     */   private void initializeProject() {
/*     */     Object object;
/* 140 */     Vector vector = this.project.getBuildListeners();
/* 141 */     for (byte b = 0; b < vector.size(); b++) {
/* 142 */       this.newProject.addBuildListener(vector.elementAt(b));
/*     */     }
/*     */     
/* 145 */     if (this.output != null) {
/*     */       try {
/* 147 */         PrintStream printStream = new PrintStream(new FileOutputStream(this.output));
/* 148 */         DefaultLogger defaultLogger = new DefaultLogger();
/* 149 */         defaultLogger.setMessageOutputLevel(2);
/* 150 */         defaultLogger.setOutputPrintStream(printStream);
/* 151 */         defaultLogger.setErrorPrintStream(printStream);
/* 152 */         this.newProject.addBuildListener((BuildListener)defaultLogger);
/*     */       } catch (IOException iOException) {
/*     */         
/* 155 */         log(""Ant: Can't set output to "" + this.output);
/*     */       } 
/*     */     }
/*     */     
/* 159 */     Hashtable hashtable1 = this.project.getTaskDefinitions();
/* 160 */     Enumeration enumeration1 = hashtable1.keys();
/* 161 */     while (enumeration1.hasMoreElements()) {
/* 162 */       String str = enumeration1.nextElement();
/* 163 */       Class clazz = (Class)hashtable1.get(str);
/* 164 */       this.newProject.addTaskDefinition(str, clazz);
/*     */     } 
/*     */     
/* 167 */     Hashtable hashtable2 = this.project.getDataTypeDefinitions();
/* 168 */     Enumeration enumeration2 = hashtable2.keys();
/* 169 */     while (enumeration2.hasMoreElements()) {
/* 170 */       object = enumeration2.nextElement();
/* 171 */       Class clazz = (Class)hashtable2.get(object);
/* 172 */       this.newProject.addDataTypeDefinition((String)object, clazz);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 177 */     if (this.inheritAll == true) {
/* 178 */       object = this.project.getProperties();
/*     */     } else {
/*     */       
/* 181 */       object = this.project.getUserProperties();
/*     */ 
/*     */ 
/*     */       
/* 185 */       this.newProject.setSystemProperties();
/*     */     } 
/*     */     
/* 188 */     enumeration2 = object.keys();
/* 189 */     while (enumeration2.hasMoreElements()) {
/* 190 */       String str1 = enumeration2.nextElement();
/* 191 */       String str2 = (String)object.get(str1);
/* 192 */       if (this.inheritAll == true) {
/* 193 */         this.newProject.setProperty(str1, str2); continue;
/*     */       } 
/* 195 */       this.newProject.setUserProperty(str1, str2);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected void handleOutput(String paramString) {
/* 201 */     if (this.newProject != null) {
/* 202 */       this.newProject.demuxOutput(paramString, false);
/*     */     } else {
/*     */       
/* 205 */       super.handleOutput(paramString);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void handleErrorOutput(String paramString) {
/* 210 */     if (this.newProject != null) {
/* 211 */       this.newProject.demuxOutput(paramString, true);
/*     */     } else {
/*     */       
/* 214 */       super.handleErrorOutput(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 223 */       if (this.newProject == null) {
/* 224 */         reinit();
/*     */       }
/*     */       
/* 227 */       if (this.dir == null) {
/* 228 */         this.dir = this.project.getBaseDir();
/*     */       }
/*     */       
/* 231 */       initializeProject();
/*     */       
/* 233 */       this.newProject.setBaseDir(this.dir);
/* 234 */       this.newProject.setUserProperty(""basedir"", this.dir.getAbsolutePath());
/*     */ 
/*     */       
/* 237 */       Enumeration enumeration = this.properties.elements();
/* 238 */       while (enumeration.hasMoreElements()) {
/* 239 */         Property property = enumeration.nextElement();
/* 240 */         property.execute();
/*     */       } 
/*     */       
/* 243 */       if (this.antFile == null) {
/* 244 */         this.antFile = ""build.xml"";
/*     */       }
/*     */       
/* 247 */       File file = FileUtils.newFileUtils().resolveFile(this.dir, this.antFile);
/* 248 */       this.antFile = file.getAbsolutePath();
/*     */       
/* 250 */       this.newProject.setUserProperty(""ant.file"", this.antFile);
/* 251 */       ProjectHelper.configureProject(this.newProject, new File(this.antFile));
/*     */       
/* 253 */       if (this.target == null) {
/* 254 */         this.target = this.newProject.getDefaultTarget();
/*     */       }
/*     */ 
/*     */       
/* 258 */       if (this.newProject.getBaseDir().equals(this.project.getBaseDir()) && this.newProject.getProperty(""ant.file"").equals(this.project.getProperty(""ant.file"")) && getOwningTarget() != null && this.target.equals(getOwningTarget().getName()))
/*     */       {
/*     */ 
/*     */ 
/*     */         
/* 263 */         throw new BuildException(""ant task calling its own parent target"");
/*     */       }
/*     */       
/* 266 */       this.newProject.executeTarget(this.target);
/*     */     } finally {
/*     */       
/* 269 */       this.newProject = null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 277 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setAntfile(String paramString) { this.antFile = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void setTarget(String paramString) { this.target = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 301 */   public void setOutput(String paramString) { this.output = paramString; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Property createProperty() {
/* 306 */     if (this.newProject == null) {
/* 307 */       reinit();
/*     */     }
/* 309 */     Property property = (Property)this.newProject.createTask(""property"");
/* 310 */     property.setUserProperty(true);
/* 311 */     this.properties.addElement(property);
/* 312 */     return property;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Ant.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AntStructure,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.IntrospectionHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntStructure
/*     */   extends Task
/*     */ {
/*  79 */   private final String lSep = System.getProperty(""line.separator"");
/*     */   
/*  81 */   private final String BOOLEAN = ""%boolean;"";
/*  82 */   private final String TASKS = ""%tasks;"";
/*  83 */   private final String TYPES = ""%types;"";
/*     */   
/*  85 */   private Hashtable visited = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setOutput(File paramFile) { this.output = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  98 */     if (this.output == null) {
/*  99 */       throw new BuildException(""output attribute is required"", this.location);
/*     */     }
/*     */     
/* 102 */     PrintWriter printWriter = null;
/*     */     try {
/*     */       try {
/* 105 */         printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.output), ""UTF8""));
/*     */ 
/*     */       
/*     */       }
/*     */       catch (UnsupportedEncodingException unsupportedEncodingException) {
/*     */ 
/*     */ 
/*     */         
/* 113 */         printWriter = new PrintWriter(new FileWriter(this.output));
/*     */       } 
/*     */       
/* 116 */       printHead(printWriter, this.project.getTaskDefinitions().keys(), this.project.getDataTypeDefinitions().keys());
/*     */ 
/*     */       
/* 119 */       printTargetDecl(printWriter);
/*     */       
/* 121 */       Enumeration enumeration1 = this.project.getDataTypeDefinitions().keys();
/* 122 */       while (enumeration1.hasMoreElements()) {
/* 123 */         String str = enumeration1.nextElement();
/* 124 */         printElementDecl(printWriter, str, (Class)this.project.getDataTypeDefinitions().get(str));
/*     */       } 
/*     */ 
/*     */       
/* 128 */       Enumeration enumeration2 = this.project.getTaskDefinitions().keys();
/* 129 */       while (enumeration2.hasMoreElements()) {
/* 130 */         String str = enumeration2.nextElement();
/* 131 */         printElementDecl(printWriter, str, (Class)this.project.getTaskDefinitions().get(str));
/*     */       } 
/*     */ 
/*     */       
/* 135 */       printTail(printWriter);
/*     */     } catch (IOException iOException) {
/*     */       
/* 138 */       throw new BuildException(""Error writing "" + this.output.getAbsolutePath(), iOException, this.location);
/*     */     } finally {
/*     */       
/* 141 */       if (printWriter != null) {
/* 142 */         printWriter.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void printHead(PrintWriter paramPrintWriter, Enumeration paramEnumeration1, Enumeration paramEnumeration2) {
/* 149 */     paramPrintWriter.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>"");
/* 150 */     paramPrintWriter.println(""<!ENTITY % boolean \""(true|false|on|off|yes|no)\"">"");
/* 151 */     paramPrintWriter.print(""<!ENTITY % tasks \"""");
/* 152 */     boolean bool = true;
/* 153 */     while (paramEnumeration1.hasMoreElements()) {
/* 154 */       String str = paramEnumeration1.nextElement();
/* 155 */       if (!bool) {
/* 156 */         paramPrintWriter.print("" | "");
/*     */       } else {
/* 158 */         bool = false;
/*     */       } 
/* 160 */       paramPrintWriter.print(str);
/*     */     } 
/* 162 */     paramPrintWriter.println(""\"">"");
/* 163 */     paramPrintWriter.print(""<!ENTITY % types \"""");
/* 164 */     bool = true;
/* 165 */     while (paramEnumeration2.hasMoreElements()) {
/* 166 */       String str = paramEnumeration2.nextElement();
/* 167 */       if (!bool) {
/* 168 */         paramPrintWriter.print("" | "");
/*     */       } else {
/* 170 */         bool = false;
/*     */       } 
/* 172 */       paramPrintWriter.print(str);
/*     */     } 
/* 174 */     paramPrintWriter.println(""\"">"");
/*     */     
/* 176 */     paramPrintWriter.println("""");
/*     */     
/* 178 */     paramPrintWriter.print(""<!ELEMENT project (target | property | taskdef | "");
/* 179 */     paramPrintWriter.print(""%types;"");
/* 180 */     paramPrintWriter.println("")*>"");
/* 181 */     paramPrintWriter.println(""<!ATTLIST project"");
/* 182 */     paramPrintWriter.println(""          name    CDATA #REQUIRED"");
/* 183 */     paramPrintWriter.println(""          default CDATA #REQUIRED"");
/* 184 */     paramPrintWriter.println(""          basedir CDATA #IMPLIED>"");
/* 185 */     paramPrintWriter.println("""");
/*     */   }
/*     */   
/*     */   private void printTargetDecl(PrintWriter paramPrintWriter) {
/* 189 */     paramPrintWriter.print(""<!ELEMENT target ("");
/* 190 */     paramPrintWriter.print(""%tasks;"");
/* 191 */     paramPrintWriter.print("" | "");
/* 192 */     paramPrintWriter.print(""%types;"");
/* 193 */     paramPrintWriter.println("")*>"");
/* 194 */     paramPrintWriter.println("""");
/*     */     
/* 196 */     paramPrintWriter.println(""<!ATTLIST target"");
/* 197 */     paramPrintWriter.println(""          id          ID    #IMPLIED"");
/* 198 */     paramPrintWriter.println(""          name        CDATA #REQUIRED"");
/* 199 */     paramPrintWriter.println(""          if          CDATA #IMPLIED"");
/* 200 */     paramPrintWriter.println(""          unless      CDATA #IMPLIED"");
/* 201 */     paramPrintWriter.println(""          depends     CDATA #IMPLIED"");
/* 202 */     paramPrintWriter.println(""          description CDATA #IMPLIED>"");
/* 203 */     paramPrintWriter.println("""");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void printElementDecl(PrintWriter paramPrintWriter, String paramString, Class paramClass) throws BuildException {
/* 209 */     if (this.visited.containsKey(paramString)) {
/*     */       return;
/*     */     }
/* 212 */     this.visited.put(paramString, """");
/*     */     
/* 214 */     IntrospectionHelper introspectionHelper = null;
/*     */     try {
/* 216 */       introspectionHelper = IntrospectionHelper.getHelper(paramClass);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 223 */     catch (Throwable throwable) {
/*     */       return;
/*     */     } 
/* 226 */     StringBuffer stringBuffer = new StringBuffer(""<!ELEMENT "");
/* 227 */     stringBuffer.append(paramString).append("" "");
/*     */     
/* 229 */     if (Reference.class.equals(paramClass)) {
/* 230 */       stringBuffer.append(""EMPTY>"").append(this.lSep);
/* 231 */       stringBuffer.append(""<!ATTLIST "").append(paramString);
/* 232 */       stringBuffer.append(this.lSep).append(""          id ID #IMPLIED"");
/* 233 */       stringBuffer.append(this.lSep).append(""          refid IDREF #IMPLIED"");
/* 234 */       stringBuffer.append("">"").append(this.lSep);
/* 235 */       paramPrintWriter.println(stringBuffer);
/*     */       
/*     */       return;
/*     */     } 
/* 239 */     Vector vector = new Vector();
/* 240 */     if (introspectionHelper.supportsCharacters()) {
/* 241 */       vector.addElement(""#PCDATA"");
/*     */     }
/*     */     
/* 244 */     if (TaskContainer.class.isAssignableFrom(paramClass)) {
/* 245 */       vector.addElement(""%tasks;"");
/*     */     }
/*     */     
/* 248 */     Enumeration enumeration = introspectionHelper.getNestedElements();
/* 249 */     while (enumeration.hasMoreElements()) {
/* 250 */       vector.addElement(enumeration.nextElement());
/*     */     }
/*     */     
/* 253 */     if (vector.isEmpty()) {
/* 254 */       stringBuffer.append(""EMPTY"");
/*     */     } else {
/* 256 */       stringBuffer.append(""("");
/* 257 */       for (byte b1 = 0; b1 < vector.size(); b1++) {
/* 258 */         if (b1 != 0) {
/* 259 */           stringBuffer.append("" | "");
/*     */         }
/* 261 */         stringBuffer.append(vector.elementAt(b1));
/*     */       } 
/* 263 */       stringBuffer.append("")"");
/* 264 */       if (vector.size() > 1 || !vector.elementAt(0).equals(""#PCDATA"")) {
/* 265 */         stringBuffer.append(""*"");
/*     */       }
/*     */     } 
/* 268 */     stringBuffer.append("">"");
/* 269 */     paramPrintWriter.println(stringBuffer);
/*     */     
/* 271 */     stringBuffer.setLength(0);
/* 272 */     stringBuffer.append(""<!ATTLIST "").append(paramString);
/* 273 */     stringBuffer.append(this.lSep).append(""          id ID #IMPLIED"");
/*     */     
/* 275 */     enumeration = introspectionHelper.getAttributes();
/* 276 */     while (enumeration.hasMoreElements()) {
/* 277 */       String str = enumeration.nextElement();
/* 278 */       if (""id"".equals(str))
/*     */         continue; 
/* 280 */       stringBuffer.append(this.lSep).append(""          "").append(str).append("" "");
/* 281 */       Class clazz = introspectionHelper.getAttributeType(str);
/* 282 */       if (clazz.equals(Boolean.class) || clazz.equals(boolean.class)) {
/*     */         
/* 284 */         stringBuffer.append(""%boolean;"").append("" "");
/* 285 */       } else if (Reference.class.isAssignableFrom(clazz)) {
/* 286 */         stringBuffer.append(""IDREF "");
/* 287 */       } else if (EnumeratedAttribute.class.isAssignableFrom(clazz)) {
/*     */         try {
/* 289 */           EnumeratedAttribute enumeratedAttribute = (EnumeratedAttribute)clazz.newInstance();
/*     */           
/* 291 */           String[] arrayOfString = enumeratedAttribute.getValues();
/* 292 */           if (arrayOfString == null || arrayOfString.length == 0 || !areNmtokens(arrayOfString)) {
/*     */ 
/*     */             
/* 295 */             stringBuffer.append(""CDATA "");
/*     */           } else {
/* 297 */             stringBuffer.append(""("");
/* 298 */             for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 299 */               if (b1 != 0) {
/* 300 */                 stringBuffer.append("" | "");
/*     */               }
/* 302 */               stringBuffer.append(arrayOfString[b1]);
/*     */             } 
/* 304 */             stringBuffer.append("") "");
/*     */           } 
/*     */         } catch (InstantiationException instantiationException) {
/* 307 */           stringBuffer.append(""CDATA "");
/*     */         } catch (IllegalAccessException illegalAccessException) {
/* 309 */           stringBuffer.append(""CDATA "");
/*     */         } 
/*     */       } else {
/* 312 */         stringBuffer.append(""CDATA "");
/*     */       } 
/* 314 */       stringBuffer.append(""#IMPLIED"");
/*     */     } 
/* 316 */     stringBuffer.append("">"").append(this.lSep);
/* 317 */     paramPrintWriter.println(stringBuffer);
/*     */     
/* 319 */     for (byte b = 0; b < vector.size(); b++) {
/* 320 */       String str = vector.elementAt(b);
/* 321 */       if (!""#PCDATA"".equals(str) && !""%tasks;"".equals(str) && !""%types;"".equals(str))
/*     */       {
/*     */ 
/*     */         
/* 325 */         printElementDecl(paramPrintWriter, str, introspectionHelper.getElementType(str));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void printTail(PrintWriter paramPrintWriter) {}
/*     */ 
/*     */   
/*     */   protected boolean isNmtoken(String paramString) {
/* 336 */     for (byte b = 0; b < paramString.length(); b++) {
/* 337 */       char c = paramString.charAt(b);
/*     */       
/* 339 */       if (!Character.isLetterOrDigit(c) && c != '.' && c != '-' && c != '_' && c != ':')
/*     */       {
/*     */         
/* 342 */         return false;
/*     */       }
/*     */     } 
/* 345 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean areNmtokens(String[] paramArrayOfString) {
/* 355 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 356 */       if (!isNmtoken(paramArrayOfString[b])) {
/* 357 */         return false;
/*     */       }
/*     */     } 
/* 360 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\AntStructure.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Available,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Available
/*     */   extends Task
/*     */   implements Condition
/*     */ {
/*     */   private String property;
/*     */   private String classname;
/*     */   private File file;
/*     */   private Path filepath;
/*     */   private String resource;
/*     */   private String type;
/*     */   private Path classpath;
/*     */   private AntClassLoader loader;
/*  79 */   private String value = ""true"";
/*     */ 
/*     */   
/*  82 */   public void setClasspath(Path paramPath) { createClasspath().append(paramPath); }
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/*  86 */     if (this.classpath == null) {
/*  87 */       this.classpath = new Path(this.project);
/*     */     }
/*  89 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */   
/*  93 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setFilepath(Path paramPath) { createFilepath().append(paramPath); }
/*     */ 
/*     */   
/*     */   public Path createFilepath() {
/* 101 */     if (this.filepath == null) {
/* 102 */       this.filepath = new Path(this.project);
/*     */     }
/* 104 */     return this.filepath.createPath();
/*     */   }
/*     */ 
/*     */   
/* 108 */   public void setProperty(String paramString) { this.property = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setValue(String paramString) { this.value = paramString; }
/*     */ 
/*     */   
/*     */   public void setClassname(String paramString) {
/* 116 */     if (!"""".equals(paramString)) {
/* 117 */       this.classname = paramString;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 122 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void setResource(String paramString) { this.resource = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setType(String paramString) { this.type = paramString; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 134 */     if (this.property == null) {
/* 135 */       throw new BuildException(""property attribute is required"", this.location);
/*     */     }
/*     */     
/* 138 */     if (eval()) {
/* 139 */       this.project.setProperty(this.property, this.value);
/*     */     }
/*     */   }
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 144 */     if (this.classname == null && this.file == null && this.resource == null) {
/* 145 */       throw new BuildException(""At least one of (classname|file|resource) is required"", this.location);
/*     */     }
/*     */     
/* 148 */     if (this.type != null && 
/* 149 */       !this.type.equalsIgnoreCase(""file"") && !this.type.equalsIgnoreCase(""dir"")) {
/* 150 */       throw new BuildException(""Type must be one of either dir or file"");
/*     */     }
/*     */ 
/*     */     
/* 154 */     if (this.classpath != null) {
/* 155 */       this.classpath.setProject(this.project);
/* 156 */       this.loader = new AntClassLoader(this.project, this.classpath);
/*     */     } 
/*     */     
/* 159 */     if (this.classname != null && !checkClass(this.classname)) {
/* 160 */       log(""Unable to load class "" + this.classname + "" to set property "" + this.property, 3);
/* 161 */       return false;
/*     */     } 
/*     */     
/* 164 */     if (this.file != null && !checkFile()) {
/* 165 */       log(""Unable to find "" + this.file + "" to set property "" + this.property, 3);
/* 166 */       return false;
/*     */     } 
/*     */     
/* 169 */     if (this.resource != null && !checkResource(this.resource)) {
/* 170 */       log(""Unable to load resource "" + this.resource + "" to set property "" + this.property, 3);
/* 171 */       return false;
/*     */     } 
/*     */     
/* 174 */     if (this.loader != null) {
/* 175 */       this.loader.cleanup();
/*     */     }
/*     */     
/* 178 */     return true;
/*     */   }
/*     */   
/*     */   private boolean checkFile() {
/* 182 */     if (this.filepath == null) {
/* 183 */       return checkFile(this.file);
/*     */     }
/* 185 */     String[] arrayOfString = this.filepath.list();
/* 186 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 187 */       log(""Searching "" + arrayOfString[b], 3);
/* 188 */       if ((new File(arrayOfString[b], this.file.getName())).isFile()) {
/* 189 */         return true;
/*     */       }
/*     */     } 
/*     */     
/* 193 */     return false;
/*     */   }
/*     */   
/*     */   private boolean checkFile(File paramFile) {
/* 197 */     if (this.type != null) {
/* 198 */       if (this.type.equalsIgnoreCase(""dir""))
/* 199 */         return paramFile.isDirectory(); 
/* 200 */       if (this.type.equalsIgnoreCase(""file"")) {
/* 201 */         return paramFile.isFile();
/*     */       }
/*     */     } 
/* 204 */     return paramFile.exists();
/*     */   }
/*     */   
/*     */   private boolean checkResource(String paramString) {
/* 208 */     if (this.loader != null) {
/* 209 */       return (this.loader.getResourceAsStream(paramString) != null);
/*     */     }
/* 211 */     ClassLoader classLoader = getClass().getClassLoader();
/* 212 */     if (classLoader != null) {
/* 213 */       return (classLoader.getResourceAsStream(paramString) != null);
/*     */     }
/* 215 */     return (ClassLoader.getSystemResourceAsStream(paramString) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkClass(String paramString) {
/*     */     try {
/* 223 */       if (this.loader != null) {
/* 224 */         this.loader.loadClass(paramString);
/*     */       } else {
/* 226 */         ClassLoader classLoader = getClass().getClassLoader();
/*     */ 
/*     */         
/* 229 */         if (classLoader != null) {
/* 230 */           classLoader.loadClass(paramString);
/*     */         } else {
/* 232 */           Class.forName(paramString);
/*     */         } 
/*     */       } 
/* 235 */       return true;
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 237 */       return false;
/*     */     } catch (NoClassDefFoundError noClassDefFoundError) {
/* 239 */       return false;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Available.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CallTarget,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CallTarget
/*     */   extends Task
/*     */ {
/*     */   private Ant callee;
/*     */   private String subTarget;
/*     */   private boolean initialized = false;
/*     */   private boolean inheritAll = true;
/*     */   
/*  94 */   public void setInheritAll(boolean paramBoolean) { this.inheritAll = paramBoolean; }
/*     */ 
/*     */   
/*     */   public void init() {
/*  98 */     this.callee = (Ant)this.project.createTask(""ant"");
/*  99 */     this.callee.setOwningTarget(this.target);
/* 100 */     this.callee.setTaskName(getTaskName());
/* 101 */     this.callee.setLocation(this.location);
/* 102 */     this.callee.init();
/* 103 */     this.initialized = true;
/*     */   }
/*     */   
/*     */   public void execute() {
/* 107 */     if (!this.initialized) {
/* 108 */       init();
/*     */     }
/*     */     
/* 111 */     if (this.subTarget == null) {
/* 112 */       throw new BuildException(""Attribute target is required."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 116 */     this.callee.setDir(this.project.getBaseDir());
/* 117 */     this.callee.setAntfile(this.project.getProperty(""ant.file""));
/* 118 */     this.callee.setTarget(this.subTarget);
/* 119 */     this.callee.setInheritAll(this.inheritAll);
/* 120 */     this.callee.execute();
/*     */   }
/*     */ 
/*     */   
/* 124 */   public Property createParam() { return this.callee.createProperty(); }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setTarget(String paramString) { this.subTarget = paramString; }
/*     */ 
/*     */   
/*     */   protected void handleOutput(String paramString) {
/* 132 */     if (this.callee != null) {
/* 133 */       this.callee.handleOutput(paramString);
/*     */     } else {
/*     */       
/* 136 */       super.handleOutput(paramString);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void handleErrorOutput(String paramString) {
/* 141 */     if (this.callee != null) {
/* 142 */       this.callee.handleErrorOutput(paramString);
/*     */     } else {
/*     */       
/* 145 */       super.handleErrorOutput(paramString);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\CallTarget.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Chmod,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Chmod
/*     */   extends ExecuteOn
/*     */ {
/*  73 */   private FileSet defaultSet = new FileSet();
/*     */   private boolean defaultSetDefined = false;
/*     */   private boolean havePerm = false;
/*     */   
/*     */   public Chmod() {
/*  78 */     super.setExecutable(""chmod"");
/*  79 */     setParallel(true);
/*  80 */     super.setSkipEmptyFilesets(true);
/*     */   }
/*     */   
/*     */   public void setFile(File paramFile) {
/*  84 */     FileSet fileSet = new FileSet();
/*  85 */     fileSet.setDir(new File(paramFile.getParent()));
/*  86 */     fileSet.createInclude().setName(paramFile.getName());
/*  87 */     addFileset(fileSet);
/*     */   }
/*     */ 
/*     */   
/*  91 */   public void setDir(File paramFile) { this.defaultSet.setDir(paramFile); }
/*     */ 
/*     */   
/*     */   public void setPerm(String paramString) {
/*  95 */     createArg().setValue(paramString);
/*  96 */     this.havePerm = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 103 */     this.defaultSetDefined = true;
/* 104 */     return this.defaultSet.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 111 */     this.defaultSetDefined = true;
/* 112 */     return this.defaultSet.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 119 */     this.defaultSetDefined = true;
/* 120 */     return this.defaultSet.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String paramString) {
/* 130 */     this.defaultSetDefined = true;
/* 131 */     this.defaultSet.setIncludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String paramString) {
/* 141 */     this.defaultSetDefined = true;
/* 142 */     this.defaultSet.setExcludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean paramBoolean) {
/* 153 */     this.defaultSetDefined = true;
/* 154 */     this.defaultSet.setDefaultexcludes(paramBoolean);
/*     */   }
/*     */   
/*     */   protected void checkConfiguration() {
/* 158 */     if (!this.havePerm) {
/* 159 */       throw new BuildException(""Required attribute perm not set in chmod"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 163 */     if (this.defaultSetDefined && this.defaultSet.getDir(this.project) != null) {
/* 164 */       addFileset(this.defaultSet);
/*     */     }
/* 166 */     super.checkConfiguration();
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/* 170 */     if (this.defaultSetDefined || this.defaultSet.getDir(this.project) == null) {
/* 171 */       super.execute();
/*     */     }
/* 173 */     else if (isValidOs()) {
/*     */       
/* 175 */       createArg().setValue(this.defaultSet.getDir(this.project).getPath());
/* 176 */       Execute execute = prepareExec();
/*     */       try {
/* 178 */         execute.setCommandline(this.cmdl.getCommandline());
/* 179 */         runExecute(execute);
/*     */       } catch (IOException iOException) {
/* 181 */         throw new BuildException(""Execute failed: "" + iOException, iOException, this.location);
/*     */       } finally {
/*     */         
/* 184 */         logFlush();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setExecutable(String paramString) { throw new BuildException(this.taskType + "" doesn't support the executable attribute"", this.location); }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setCommand(String paramString) { throw new BuildException(this.taskType + "" doesn't support the command attribute"", this.location); }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setSkipEmptyFilesets(boolean paramBoolean) { throw new BuildException(this.taskType + "" doesn't support the skipemptyfileset attribute"", this.location); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   protected boolean isValidOs() { return (System.getProperty(""path.separator"").equals("":"") && (!System.getProperty(""os.name"").startsWith(""Mac"") || System.getProperty(""os.name"").endsWith(""X"")) && super.isValidOs()); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Chmod.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CompileTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CompileTask
/*     */   extends Javac
/*     */ {
/*  74 */   protected Vector taskList = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Taskdef createTaskdef() {
/*  80 */     Taskdef taskdef = new Taskdef();
/*  81 */     this.taskList.addElement(taskdef);
/*  82 */     return taskdef;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/*  89 */     log(""!! CompileTask is deprecated. !!"");
/*  90 */     log(""Use <taskdef> elements nested into <target>s instead"");
/*     */ 
/*     */     
/*  93 */     for (Enumeration enumeration1 = this.taskList.elements(); enumeration1.hasMoreElements(); ) {
/*  94 */       Taskdef taskdef = enumeration1.nextElement();
/*  95 */       String str = taskdef.getClassname().replace('.', '/') + "".java"";
/*  96 */       PatternSet.NameEntry nameEntry = createInclude();
/*  97 */       nameEntry.setName(""**/"" + str);
/*     */     } 
/*     */ 
/*     */     
/* 101 */     super.init();
/* 102 */     super.execute();
/*     */ 
/*     */     
/* 105 */     for (Enumeration enumeration2 = this.taskList.elements(); enumeration2.hasMoreElements(); ) {
/* 106 */       Taskdef taskdef = enumeration2.nextElement();
/* 107 */       taskdef.init();
/*     */     } 
/*     */   }
/*     */   
/*     */   public void execute() {}
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\CompileTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ConditionTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.taskdefs.condition.ConditionBase;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ConditionTask
/*     */   extends ConditionBase
/*     */ {
/*     */   private String property;
/*  77 */   private String value = ""true"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setProperty(String paramString) { this.property = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setValue(String paramString) { this.value = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  99 */     if (countConditions() > 1) {
/* 100 */       throw new BuildException(""You must not nest more than one condition into <condition>"");
/*     */     }
/* 102 */     if (countConditions() < 1) {
/* 103 */       throw new BuildException(""You must nest a condition into <condition>"");
/*     */     }
/* 105 */     Condition condition = getConditions().nextElement();
/* 106 */     if (condition.eval())
/* 107 */       getProject().setProperty(this.property, this.value); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ConditionTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copy,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.FlatFileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copy
/*     */   extends Task
/*     */ {
/*  79 */   protected File file = null;
/*  80 */   protected File destFile = null;
/*  81 */   protected File destDir = null;
/*  82 */   protected Vector filesets = new Vector();
/*     */   
/*     */   protected boolean filtering = false;
/*     */   protected boolean preserveLastModified = false;
/*     */   protected boolean forceOverwrite = false;
/*     */   protected boolean flatten = false;
/*  88 */   protected int verbosity = 3;
/*     */   
/*     */   protected boolean includeEmpty = true;
/*  91 */   protected Hashtable fileCopyMap = new Hashtable();
/*  92 */   protected Hashtable dirCopyMap = new Hashtable();
/*     */   
/*  94 */   protected Mapper mapperElement = null;
/*  95 */   private Vector filterSets = new Vector();
/*     */   
/*     */   private FileUtils fileUtils;
/*     */   
/*  99 */   public Copy() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */   
/* 102 */   protected FileUtils getFileUtils() { return this.fileUtils; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setTofile(File paramFile) { this.destFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void setTodir(File paramFile) { this.destDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FilterSet createFilterSet() {
/* 129 */     FilterSet filterSet = new FilterSet();
/* 130 */     this.filterSets.addElement(filterSet);
/* 131 */     return filterSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void setPreserveLastModified(String paramString) { this.preserveLastModified = Project.toBoolean(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   protected Vector getFilterSets() { return this.filterSets; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void setFiltering(boolean paramBoolean) { this.filtering = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void setOverwrite(boolean paramBoolean) { this.forceOverwrite = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setFlatten(boolean paramBoolean) { this.flatten = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean paramBoolean) {
/* 179 */     if (paramBoolean) {
/* 180 */       this.verbosity = 2;
/*     */     } else {
/* 182 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setIncludeEmptyDirs(boolean paramBoolean) { this.includeEmpty = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 204 */     if (this.mapperElement != null) {
/* 205 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 208 */     this.mapperElement = new Mapper(this.project);
/* 209 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 217 */     validateAttributes();
/*     */ 
/*     */     
/* 220 */     if (this.file != null) {
/* 221 */       if (this.file.exists()) {
/* 222 */         if (this.destFile == null) {
/* 223 */           this.destFile = new File(this.destDir, this.file.getName());
/*     */         }
/*     */         
/* 226 */         if (this.forceOverwrite || this.file.lastModified() > this.destFile.lastModified()) {
/*     */           
/* 228 */           this.fileCopyMap.put(this.file.getAbsolutePath(), this.destFile.getAbsolutePath());
/*     */         } else {
/* 230 */           log(this.file + "" omitted as "" + this.destFile + "" is up to date."", 3);
/*     */         } 
/*     */       } else {
/*     */         
/* 234 */         String str = ""Could not find file "" + this.file.getAbsolutePath() + "" to copy."";
/*     */         
/* 236 */         log(str);
/* 237 */         throw new BuildException(str);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 242 */     for (byte b = 0; b < this.filesets.size(); b++) {
/* 243 */       FileSet fileSet = this.filesets.elementAt(b);
/* 244 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 245 */       File file1 = fileSet.getDir(this.project);
/*     */       
/* 247 */       String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 248 */       String[] arrayOfString2 = directoryScanner.getIncludedDirectories();
/*     */       
/* 250 */       scan(file1, this.destDir, arrayOfString1, arrayOfString2);
/*     */     } 
/*     */ 
/*     */     
/* 254 */     doFileOperations();
/*     */ 
/*     */ 
/*     */     
/* 258 */     if (this.destFile != null) {
/* 259 */       this.destDir = null;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void validateAttributes() throws BuildException {
/* 273 */     if (this.file == null && this.filesets.size() == 0) {
/* 274 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */     
/* 277 */     if (this.destFile != null && this.destDir != null) {
/* 278 */       throw new BuildException(""Only one of destfile and destdir may be set."");
/*     */     }
/*     */     
/* 281 */     if (this.destFile == null && this.destDir == null) {
/* 282 */       throw new BuildException(""One of destfile or destdir must be set."");
/*     */     }
/*     */     
/* 285 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 286 */       throw new BuildException(""Use a fileset to copy directories."");
/*     */     }
/*     */     
/* 289 */     if (this.destFile != null && this.filesets.size() > 0) {
/* 290 */       throw new BuildException(""Cannot concatenate multple files into a single file."");
/*     */     }
/*     */     
/* 293 */     if (this.destFile != null) {
/* 294 */       this.destDir = new File(this.destFile.getParent());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scan(File paramFile1, File paramFile2, String[] paramArrayOfString1, String[] paramArrayOfString2) {
/* 304 */     Object object = null;
/* 305 */     if (this.mapperElement != null) {
/* 306 */       object = this.mapperElement.getImplementation();
/* 307 */     } else if (this.flatten) {
/* 308 */       FlatFileNameMapper flatFileNameMapper = new FlatFileNameMapper();
/*     */     } else {
/* 310 */       object = new IdentityMapper();
/*     */     } 
/*     */     
/* 313 */     buildMap(paramFile1, paramFile2, paramArrayOfString1, (FileNameMapper)object, this.fileCopyMap);
/*     */     
/* 315 */     if (this.includeEmpty) {
/* 316 */       buildMap(paramFile1, paramFile2, paramArrayOfString2, (FileNameMapper)object, this.dirCopyMap);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void buildMap(File paramFile1, File paramFile2, String[] paramArrayOfString, FileNameMapper paramFileNameMapper, Hashtable paramHashtable) {
/* 323 */     String[] arrayOfString = null;
/* 324 */     if (this.forceOverwrite) {
/* 325 */       Vector vector = new Vector();
/* 326 */       for (byte b1 = 0; b1 < paramArrayOfString.length; b1++) {
/* 327 */         if (paramFileNameMapper.mapFileName(paramArrayOfString[b1]) != null) {
/* 328 */           vector.addElement(paramArrayOfString[b1]);
/*     */         }
/*     */       } 
/* 331 */       arrayOfString = new String[vector.size()];
/* 332 */       vector.copyInto((Object[])arrayOfString);
/*     */     } else {
/* 334 */       SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 335 */       arrayOfString = sourceFileScanner.restrict(paramArrayOfString, paramFile1, paramFile2, paramFileNameMapper);
/*     */     } 
/*     */     
/* 338 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 339 */       File file1 = new File(paramFile1, arrayOfString[b]);
/* 340 */       File file2 = new File(paramFile2, paramFileNameMapper.mapFileName(arrayOfString[b])[0]);
/* 341 */       paramHashtable.put(file1.getAbsolutePath(), file2.getAbsolutePath());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/* 350 */     if (this.fileCopyMap.size() > 0) {
/* 351 */       log(""Copying "" + this.fileCopyMap.size() + "" file"" + ((this.fileCopyMap.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */ 
/*     */       
/* 355 */       Enumeration enumeration = this.fileCopyMap.keys();
/* 356 */       while (enumeration.hasMoreElements()) {
/* 357 */         String str1 = enumeration.nextElement();
/* 358 */         String str2 = (String)this.fileCopyMap.get(str1);
/*     */         
/* 360 */         if (str1.equals(str2)) {
/* 361 */           log(""Skipping self-copy of "" + str1, this.verbosity);
/*     */           
/*     */           continue;
/*     */         } 
/*     */         try {
/* 366 */           log(""Copying "" + str1 + "" to "" + str2, this.verbosity);
/*     */           
/* 368 */           FilterSetCollection filterSetCollection = new FilterSetCollection();
/* 369 */           if (this.filtering) {
/* 370 */             filterSetCollection.addFilterSet(this.project.getGlobalFilterSet());
/*     */           }
/* 372 */           for (Enumeration enumeration1 = this.filterSets.elements(); enumeration1.hasMoreElements();) {
/* 373 */             filterSetCollection.addFilterSet(enumeration1.nextElement());
/*     */           }
/* 375 */           this.fileUtils.copyFile(str1, str2, filterSetCollection, this.forceOverwrite, this.preserveLastModified);
/*     */         } catch (IOException iOException) {
/*     */           
/* 378 */           String str = ""Failed to copy "" + str1 + "" to "" + str2 + "" due to "" + iOException.getMessage();
/*     */           
/* 380 */           throw new BuildException(str, iOException, this.location);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 385 */     if (this.includeEmpty) {
/* 386 */       Enumeration enumeration = this.dirCopyMap.elements();
/* 387 */       byte b = 0;
/* 388 */       while (enumeration.hasMoreElements()) {
/* 389 */         File file1 = new File(enumeration.nextElement());
/* 390 */         if (!file1.exists()) {
/* 391 */           if (!file1.mkdirs()) {
/* 392 */             log(""Unable to create directory "" + file1.getAbsolutePath(), 0); continue;
/*     */           } 
/* 394 */           b++;
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 399 */       if (b > 0)
/* 400 */         log(""Copied "" + b + "" empty director"" + ((b == 1) ? ""y"" : ""ies"") + "" to "" + this.destDir.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Copy.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copydir,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copydir
/*     */   extends MatchingTask
/*     */ {
/*     */   private File srcDir;
/*     */   private File destDir;
/*     */   private boolean filtering = false;
/*     */   private boolean flatten = false;
/*     */   private boolean forceOverwrite = false;
/*  76 */   private Hashtable filecopyList = new Hashtable();
/*     */ 
/*     */   
/*  79 */   public void setSrc(File paramFile) { this.srcDir = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setDest(File paramFile) { this.destDir = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setFiltering(boolean paramBoolean) { this.filtering = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setFlatten(boolean paramBoolean) { this.flatten = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setForceoverwrite(boolean paramBoolean) { this.forceOverwrite = paramBoolean; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  99 */     log(""DEPRECATED - The copydir task is deprecated.  Use copy instead."");
/*     */     
/* 101 */     if (this.srcDir == null) {
/* 102 */       throw new BuildException(""src attribute must be set!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 106 */     if (!this.srcDir.exists()) {
/* 107 */       throw new BuildException(""srcdir "" + this.srcDir.toString() + "" does not exist!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 111 */     if (this.destDir == null) {
/* 112 */       throw new BuildException(""The dest attribute must be set."", this.location);
/*     */     }
/*     */     
/* 115 */     if (this.srcDir.equals(this.destDir)) {
/* 116 */       log(""Warning: src == dest"");
/*     */     }
/*     */     
/* 119 */     DirectoryScanner directoryScanner = getDirectoryScanner(this.srcDir);
/*     */     
/* 121 */     String[] arrayOfString = directoryScanner.getIncludedFiles();
/* 122 */     scanDir(this.srcDir, this.destDir, arrayOfString);
/* 123 */     if (this.filecopyList.size() > 0) {
/* 124 */       log(""Copying "" + this.filecopyList.size() + "" file"" + ((this.filecopyList.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */       
/* 127 */       Enumeration enumeration = this.filecopyList.keys();
/* 128 */       while (enumeration.hasMoreElements()) {
/* 129 */         String str1 = enumeration.nextElement();
/* 130 */         String str2 = (String)this.filecopyList.get(str1);
/*     */         try {
/* 132 */           this.project.copyFile(str1, str2, this.filtering, this.forceOverwrite);
/*     */         } catch (IOException iOException) {
/*     */           
/* 135 */           String str = ""Failed to copy "" + str1 + "" to "" + str2 + "" due to "" + iOException.getMessage();
/*     */           
/* 137 */           throw new BuildException(str, iOException, this.location);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void scanDir(File paramFile1, File paramFile2, String[] paramArrayOfString) {
/* 144 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 145 */       File file2; String str = paramArrayOfString[b];
/* 146 */       File file1 = new File(paramFile1, str);
/*     */       
/* 148 */       if (this.flatten) {
/* 149 */         file2 = new File(paramFile2, (new File(str)).getName());
/*     */       } else {
/* 151 */         file2 = new File(paramFile2, str);
/*     */       } 
/* 153 */       if (this.forceOverwrite || file1.lastModified() > file2.lastModified())
/*     */       {
/* 155 */         this.filecopyList.put(file1.getAbsolutePath(), file2.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Copydir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copyfile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copyfile
/*     */   extends Task
/*     */ {
/*     */   private File srcFile;
/*     */   private File destFile;
/*     */   private boolean filtering = false;
/*     */   private boolean forceOverwrite = false;
/*     */   
/*  77 */   public void setSrc(File paramFile) { this.srcFile = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*  81 */   public void setForceoverwrite(boolean paramBoolean) { this.forceOverwrite = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void setDest(File paramFile) { this.destFile = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setFiltering(String paramString) { this.filtering = Project.toBoolean(paramString); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  93 */     log(""DEPRECATED - The copyfile task is deprecated.  Use copy instead."");
/*     */     
/*  95 */     if (this.srcFile == null) {
/*  96 */       throw new BuildException(""The src attribute must be present."", this.location);
/*     */     }
/*     */     
/*  99 */     if (!this.srcFile.exists()) {
/* 100 */       throw new BuildException(""src "" + this.srcFile.toString() + "" does not exist."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 104 */     if (this.destFile == null) {
/* 105 */       throw new BuildException(""The dest attribute must be present."", this.location);
/*     */     }
/*     */     
/* 108 */     if (this.srcFile.equals(this.destFile)) {
/* 109 */       log(""Warning: src == dest"");
/*     */     }
/*     */     
/* 112 */     if (this.forceOverwrite || this.srcFile.lastModified() > this.destFile.lastModified())
/*     */       try {
/* 114 */         this.project.copyFile(this.srcFile, this.destFile, this.filtering, this.forceOverwrite);
/*     */       } catch (IOException iOException) {
/* 116 */         String str = ""Error copying file: "" + this.srcFile.getAbsolutePath() + "" due to "" + iOException.getMessage();
/*     */         
/* 118 */         throw new BuildException(str);
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Copyfile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Cvs,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Cvs
/*     */   extends Task
/*     */ {
/*  72 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsRoot;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String pack;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   private String command = ""checkout"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean noexec = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int port = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   private File passFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File dest;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File error;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failOnError = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 139 */     Commandline commandline = new Commandline();
/*     */     
/* 141 */     commandline.setExecutable(""cvs"");
/* 142 */     if (this.cvsRoot != null) {
/* 143 */       commandline.createArgument().setValue(""-d"");
/* 144 */       commandline.createArgument().setValue(this.cvsRoot);
/*     */     } 
/* 146 */     if (this.noexec) {
/* 147 */       commandline.createArgument().setValue(""-n"");
/*     */     }
/* 149 */     if (this.quiet) {
/* 150 */       commandline.createArgument().setValue(""-q"");
/*     */     }
/* 152 */     commandline.createArgument().setLine(this.command);
/* 153 */     commandline.addArguments(this.cmd.getCommandline());
/*     */     
/* 155 */     if (this.pack != null) {
/* 156 */       commandline.createArgument().setLine(this.pack);
/*     */     }
/*     */     
/* 159 */     Environment environment = new Environment();
/*     */     
/* 161 */     if (this.port > 0) {
/* 162 */       Environment.Variable variable = new Environment.Variable();
/* 163 */       variable.setKey(""CVS_CLIENT_PORT"");
/* 164 */       variable.setValue(String.valueOf(this.port));
/* 165 */       environment.addVariable(variable);
/*     */     } 
/*     */     
/* 168 */     if (this.passFile != null) {
/* 169 */       Environment.Variable variable = new Environment.Variable();
/* 170 */       variable.setKey(""CVS_PASSFILE"");
/* 171 */       variable.setValue(String.valueOf(this.passFile));
/* 172 */       environment.addVariable(variable);
/*     */     } 
/*     */     
/* 175 */     PumpStreamHandler pumpStreamHandler = null;
/* 176 */     Object object1 = null;
/* 177 */     Object object2 = null;
/* 178 */     if (this.error == null && this.output == null) {
/* 179 */       pumpStreamHandler = new LogStreamHandler(this, 2, 1);
/*     */     }
/*     */     else {
/*     */       
/* 183 */       if (this.output != null) {
/*     */         try {
/* 185 */           object1 = new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output)));
/*     */         } catch (IOException iOException) {
/* 187 */           throw new BuildException(iOException, this.location);
/*     */         } 
/*     */       } else {
/*     */         
/* 191 */         object1 = new LogOutputStream(this, 2);
/*     */       } 
/* 193 */       if (this.error != null) {
/*     */         try {
/* 195 */           object2 = new PrintStream(new BufferedOutputStream(new FileOutputStream(this.error)));
/*     */         } catch (IOException iOException) {
/* 197 */           throw new BuildException(iOException, this.location);
/*     */         } 
/*     */       } else {
/*     */         
/* 201 */         object2 = new LogOutputStream(this, 1);
/*     */       } 
/* 203 */       pumpStreamHandler = new PumpStreamHandler((OutputStream)object1, (OutputStream)object2);
/*     */     } 
/*     */     
/* 206 */     Execute execute = new Execute(pumpStreamHandler, null);
/*     */ 
/*     */     
/* 209 */     execute.setAntRun(this.project);
/* 210 */     if (this.dest == null) this.dest = this.project.getBaseDir(); 
/* 211 */     execute.setWorkingDirectory(this.dest);
/*     */     
/* 213 */     execute.setCommandline(commandline.getCommandline());
/* 214 */     execute.setEnvironment(environment.getVariables());
/*     */     try {
/* 216 */       int i = execute.execute();
/*     */       
/* 218 */       if (this.failOnError && i != 0)
/* 219 */         throw new BuildException(""cvs exited with error code "" + i); 
/*     */     } catch (IOException iOException) {
/* 221 */       throw new BuildException(iOException, this.location);
/*     */     } finally {
/* 223 */       if (this.output != null) {
/*     */         try {
/* 225 */           object1.close();
/* 226 */         } catch (IOException iOException) {}
/*     */       }
/* 228 */       if (this.error != null) {
/*     */         try {
/* 230 */           object2.close();
/* 231 */         } catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void setCvsRoot(String paramString) {
/* 238 */     if (paramString != null && 
/* 239 */       paramString.trim().equals("""")) {
/* 240 */       paramString = null;
/*     */     }
/*     */     
/* 243 */     this.cvsRoot = paramString;
/*     */   }
/*     */ 
/*     */   
/* 247 */   public void setPort(int paramInt) { this.port = paramInt; }
/*     */ 
/*     */ 
/*     */   
/* 251 */   public void setPassfile(File paramFile) { this.passFile = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void setPackage(String paramString) { this.pack = paramString; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTag(String paramString) {
/* 264 */     if (paramString != null && paramString.trim().length() > 0) {
/* 265 */       this.cmd.createArgument().setValue(""-r"");
/* 266 */       this.cmd.createArgument().setValue(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void setDate(String paramString) {
/* 272 */     if (paramString != null && paramString.trim().length() > 0) {
/* 273 */       this.cmd.createArgument().setValue(""-D"");
/* 274 */       this.cmd.createArgument().setValue(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 279 */   public void setCommand(String paramString) { this.command = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 283 */   public void setQuiet(boolean paramBoolean) { this.quiet = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 287 */   public void setNoexec(boolean paramBoolean) { this.noexec = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setOutput(File paramFile) { this.output = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setError(File paramFile) { this.error = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 299 */   public void setFailOnError(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Cvs.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CVSPass,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CVSPass
/*     */   extends Task
/*     */ {
/*  70 */   private String cvsRoot = null;
/*     */   
/*  72 */   private File passFile = null;
/*     */   
/*  74 */   private String password = null;
/*     */   
/*  76 */   private final String EOL = System.getProperty(""line.separator"");
/*     */ 
/*     */   
/*  79 */   private final char[] shifts = new char[] { Character.MIN_VALUE, '\001', '\002', '\003', '\004', '\005', '\006', '\007', '\b', '\t', '\n', '\013', '\f', '\r', '\016', '\017', '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027', '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037', 'r', 'x', '5', 'O', '`', 'm', 'H', 'l', 'F', '@', 'L', 'C', 't', 'J', 'D', 'W', 'o', '4', 'K', 'w', '1', '""', 'R', 'Q', '_', 'A', 'p', 'V', 'v', 'n', 'z', 'i', ')', '9', 'S', '+', '.', 'f', '(', 'Y', '&', 'g', '-', '2', '*', '{', '[', '#', '}', '7', '6', 'B', '|', '~', ';', '/', '\\', 'G', 's', 'N', 'X', 'k', 'j', '8', '$', 'y', 'u', 'h', 'e', 'd', 'E', 'I', 'c', '?', '^', ']', '\'', '%', '=', '0', ':', 'q', ' ', 'Z', ',', 'b', '<', '3', '!', 'a', '>', 'M', 'T', 'P', 'U', 'ß', 'á', 'Ø', '»', '¦', 'å', '½', 'Þ', '¼', '', 'ù', '', 'È', '¸', '', 'ø', '¾', 'Ç', 'ª', 'µ', 'Ì', '', 'è', 'Ú', '·', 'ÿ', 'ê', 'Ü', '÷', 'Õ', 'Ë', 'â', 'Á', '®', '¬', 'ä', 'ü', 'Ù', 'É', '', 'æ', 'Å', 'Ó', '', 'î', '¡', '³', ' ', 'Ô', 'Ï', 'Ý', 'þ', '­', 'Ê', '', 'à', '', '', 'Ä', 'Í', '', '', '', '', 'ö', 'À', '', 'ô', 'ï', '¹', '¨', '×', '', '', '¥', '´', '', '', 'º', 'Ö', '°', 'ã', 'ç', 'Û', '©', '¯', '', 'Î', 'Æ', '', '¤', '', 'Ò', '', '±', '', '', '¶', '', '', 'Ð', '¢', '', '§', 'Ñ', '', 'ñ', '', 'û', 'í', 'ì', '«', 'Ã', 'ó', 'é', 'ý', 'ð', 'Â', 'ú', '¿', '', '', '', 'õ', 'ë', '£', 'ò', '²', '' };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public CVSPass() { this.passFile = new File(System.getProperty(""user.home"") + ""/.cvspass""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 107 */     if (this.cvsRoot == null) throw new BuildException(""cvsroot is required""); 
/* 108 */     if (this.password == null) throw new BuildException(""password is required"");
/*     */     
/* 110 */     this; log(""cvsRoot: "" + this.cvsRoot, 4);
/* 111 */     this; log(""password: "" + this.password, 4);
/* 112 */     this; log(""passFile: "" + this.passFile, 4);
/*     */     
/*     */     try {
/* 115 */       StringBuffer stringBuffer = new StringBuffer();
/*     */       
/* 117 */       if (this.passFile.exists()) {
/* 118 */         BufferedReader bufferedReader = new BufferedReader(new FileReader(this.passFile));
/*     */ 
/*     */         
/* 121 */         String str1 = null;
/*     */         
/* 123 */         while ((str1 = bufferedReader.readLine()) != null) {
/* 124 */           if (!str1.startsWith(this.cvsRoot)) {
/* 125 */             stringBuffer.append(str1 + this.EOL);
/*     */           }
/*     */         } 
/*     */         
/* 129 */         bufferedReader.close();
/*     */       } 
/*     */       
/* 132 */       String str = stringBuffer.toString() + this.cvsRoot + "" A"" + mangle(this.password);
/*     */       
/* 134 */       this; log(""Writing -> "" + str, 4);
/*     */       
/* 136 */       PrintWriter printWriter = new PrintWriter(new FileWriter(this.passFile));
/*     */       
/* 138 */       printWriter.println(str);
/*     */       
/* 140 */       printWriter.close();
/*     */     } catch (IOException iOException) {
/* 142 */       throw new BuildException(iOException);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private final String mangle(String paramString) {
/* 148 */     StringBuffer stringBuffer = new StringBuffer();
/* 149 */     for (byte b = 0; b < paramString.length(); b++) {
/* 150 */       stringBuffer.append(this.shifts[paramString.charAt(b)]);
/*     */     }
/* 152 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setCvsroot(String paramString) { this.cvsRoot = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setPassfile(File paramFile) { this.passFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setPassword(String paramString) { this.password = paramString; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\CVSPass.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Definer,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Definer
/*     */   extends Task
/*     */ {
/*     */   private String name;
/*     */   private String value;
/*     */   private Path classpath;
/*     */   private File file;
/*     */   private String resource;
/*     */   private boolean reverseLoader = false;
/*     */   
/*     */   public void setReverseLoader(boolean paramBoolean) {
/*  79 */     this.reverseLoader = paramBoolean;
/*  80 */     log(""The reverseloader attribute is DEPRECATED. It will be removed"", 1);
/*     */   }
/*     */   
/*     */   public void setClasspath(Path paramPath) {
/*  84 */     if (this.classpath == null) {
/*  85 */       this.classpath = paramPath;
/*     */     } else {
/*  87 */       this.classpath.append(paramPath);
/*     */     } 
/*     */   }
/*     */   
/*     */   public Path createClasspath() {
/*  92 */     if (this.classpath == null) {
/*  93 */       this.classpath = new Path(this.project);
/*     */     }
/*  95 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */   
/*  99 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 103 */     AntClassLoader antClassLoader = createLoader();
/*     */     
/* 105 */     if (this.file == null && this.resource == null) {
/*     */ 
/*     */       
/* 108 */       if (this.name == null || this.value == null) {
/* 109 */         String str = ""name or classname attributes of "" + getTaskName() + "" element "" + ""are undefined"";
/*     */ 
/*     */         
/* 112 */         throw new BuildException(str);
/*     */       } 
/* 114 */       addDefinition((ClassLoader)antClassLoader, this.name, this.value);
/*     */     } else {
/*     */ 
/*     */       
/*     */       try {
/* 119 */         if (this.name != null || this.value != null) {
/* 120 */           String str = ""You must not specify name or value together with file or resource."";
/*     */           
/* 122 */           throw new BuildException(str, this.location);
/*     */         } 
/*     */         
/* 125 */         if (this.file != null && this.resource != null) {
/* 126 */           String str = ""You must not specify both, file and resource."";
/* 127 */           throw new BuildException(str, this.location);
/*     */         } 
/*     */ 
/*     */         
/* 131 */         Properties properties = new Properties();
/* 132 */         InputStream inputStream = null;
/* 133 */         if (this.file != null) {
/* 134 */           log(""Loading definitions from file "" + this.file, 3);
/*     */           
/* 136 */           inputStream = new FileInputStream(this.file);
/* 137 */           if (inputStream == null) {
/* 138 */             log(""Could not load definitions from file "" + this.file + "". It doesn't exist."", 1);
/*     */           }
/*     */         } 
/*     */         
/* 142 */         if (this.resource != null) {
/* 143 */           log(""Loading definitions from resource "" + this.resource, 3);
/*     */           
/* 145 */           inputStream = antClassLoader.getResourceAsStream(this.resource);
/* 146 */           if (inputStream == null) {
/* 147 */             log(""Could not load definitions from resource "" + this.resource + "". It could not be found."", 1);
/*     */           }
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 153 */         if (inputStream != null) {
/* 154 */           properties.load(inputStream);
/* 155 */           Enumeration enumeration = properties.keys();
/* 156 */           while (enumeration.hasMoreElements()) {
/* 157 */             String str1 = enumeration.nextElement();
/* 158 */             String str2 = properties.getProperty(str1);
/* 159 */             addDefinition((ClassLoader)antClassLoader, str1, str2);
/*     */           } 
/*     */         } 
/*     */       } catch (IOException iOException) {
/* 163 */         throw new BuildException(iOException, this.location);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void addDefinition(ClassLoader paramClassLoader, String paramString1, String paramString2) {
/*     */     try {
/* 170 */       Class clazz = paramClassLoader.loadClass(paramString2);
/* 171 */       AntClassLoader.initializeClass(clazz);
/* 172 */       addDefinition(paramString1, clazz);
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 174 */       String str = getTaskName() + "" class "" + paramString2 + "" cannot be found"";
/*     */       
/* 176 */       throw new BuildException(str, classNotFoundException, this.location);
/*     */     } catch (NoClassDefFoundError noClassDefFoundError) {
/* 178 */       String str = getTaskName() + "" class "" + paramString2 + "" cannot be found"";
/*     */       
/* 180 */       throw new BuildException(str, noClassDefFoundError, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private AntClassLoader createLoader() {
/* 186 */     AntClassLoader antClassLoader = null;
/* 187 */     if (this.classpath != null) {
/* 188 */       antClassLoader = new AntClassLoader(this.project, this.classpath, !this.reverseLoader);
/*     */     } else {
/* 190 */       antClassLoader = new AntClassLoader(this.project, Path.systemClasspath, !this.reverseLoader);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 195 */     antClassLoader.addSystemPackageRoot(""org.apache.tools.ant"");
/* 196 */     return antClassLoader;
/*     */   }
/*     */ 
/*     */   
/* 200 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void setResource(String paramString) { this.resource = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setName(String paramString) { this.name = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 212 */   public String getClassname() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setClassname(String paramString) { this.value = paramString; }
/*     */   
/*     */   protected abstract void addDefinition(String paramString, Class paramClass);
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Definer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Delete,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Delete
/*     */   extends MatchingTask
/*     */ {
/*  78 */   protected File file = null;
/*  79 */   protected File dir = null;
/*  80 */   protected Vector filesets = new Vector();
/*     */   
/*     */   protected boolean usedMatchingTask = false;
/*     */   protected boolean includeEmpty = false;
/*  84 */   private int verbosity = 3;
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */   
/*     */   private boolean failonerror = true;
/*     */ 
/*     */ 
/*     */   
/*  94 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean paramBoolean) {
/* 112 */     if (paramBoolean) {
/* 113 */       this.verbosity = 2;
/*     */     } else {
/* 115 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean paramBoolean) {
/* 129 */     this.quiet = paramBoolean;
/* 130 */     if (paramBoolean) {
/* 131 */       this.failonerror = false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setFailOnError(boolean paramBoolean) { this.failonerror = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setIncludeEmptyDirs(boolean paramBoolean) { this.includeEmpty = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 162 */     this.usedMatchingTask = true;
/* 163 */     return super.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 170 */     this.usedMatchingTask = true;
/* 171 */     return super.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 178 */     this.usedMatchingTask = true;
/* 179 */     return super.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String paramString) {
/* 189 */     this.usedMatchingTask = true;
/* 190 */     super.setIncludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String paramString) {
/* 200 */     this.usedMatchingTask = true;
/* 201 */     super.setExcludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean paramBoolean) {
/* 212 */     this.usedMatchingTask = true;
/* 213 */     super.setDefaultexcludes(paramBoolean);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File paramFile) {
/* 223 */     this.usedMatchingTask = true;
/* 224 */     super.setIncludesfile(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File paramFile) {
/* 234 */     this.usedMatchingTask = true;
/* 235 */     super.setExcludesfile(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 242 */     if (this.usedMatchingTask) {
/* 243 */       log(""DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element instead."");
/*     */     }
/*     */     
/* 246 */     if (this.file == null && this.dir == null && this.filesets.size() == 0) {
/* 247 */       throw new BuildException(""At least one of the file or dir attributes, or a fileset element, must be set."");
/*     */     }
/*     */     
/* 250 */     if (this.quiet && this.failonerror) {
/* 251 */       throw new BuildException(""quiet and failonerror cannot both be set to true"", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 257 */     if (this.file != null) {
/* 258 */       if (this.file.exists()) {
/* 259 */         if (this.file.isDirectory()) {
/* 260 */           log(""Directory "" + this.file.getAbsolutePath() + "" cannot be removed using the file attribute.  Use dir instead."");
/*     */         } else {
/* 262 */           log(""Deleting: "" + this.file.getAbsolutePath());
/*     */           
/* 264 */           if (!this.file.delete()) {
/* 265 */             String str = ""Unable to delete file "" + this.file.getAbsolutePath();
/* 266 */             if (this.failonerror) {
/* 267 */               throw new BuildException(str);
/*     */             }
/* 269 */             log(str, this.quiet ? 3 : 1);
/*     */           } 
/*     */         } 
/*     */       } else {
/*     */         
/* 274 */         log(""Could not find file "" + this.file.getAbsolutePath() + "" to delete."", 3);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 280 */     if (this.dir != null && this.dir.exists() && this.dir.isDirectory() && !this.usedMatchingTask) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 287 */       if (this.verbosity == 3) {
/* 288 */         log(""Deleting directory "" + this.dir.getAbsolutePath());
/*     */       }
/* 290 */       removeDir(this.dir);
/*     */     } 
/*     */ 
/*     */     
/* 294 */     for (byte b = 0; b < this.filesets.size(); b++) {
/* 295 */       FileSet fileSet = this.filesets.elementAt(b);
/*     */       try {
/* 297 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 298 */         String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 299 */         String[] arrayOfString2 = directoryScanner.getIncludedDirectories();
/* 300 */         removeFiles(fileSet.getDir(this.project), arrayOfString1, arrayOfString2);
/*     */       } catch (BuildException buildException) {
/*     */         
/* 303 */         if (this.failonerror) {
/* 304 */           throw buildException;
/*     */         }
/* 306 */         log(buildException.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 313 */     if (this.usedMatchingTask && this.dir != null) {
/*     */       try {
/* 315 */         DirectoryScanner directoryScanner = getDirectoryScanner(this.dir);
/* 316 */         String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 317 */         String[] arrayOfString2 = directoryScanner.getIncludedDirectories();
/* 318 */         removeFiles(this.dir, arrayOfString1, arrayOfString2);
/*     */       } catch (BuildException buildException) {
/*     */         
/* 321 */         if (this.failonerror) {
/* 322 */           throw buildException;
/*     */         }
/* 324 */         log(buildException.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeDir(File paramFile) {
/* 336 */     String[] arrayOfString = paramFile.list();
/* 337 */     if (arrayOfString == null) arrayOfString = new String[0]; 
/* 338 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 339 */       String str = arrayOfString[b];
/* 340 */       File file1 = new File(paramFile, str);
/* 341 */       if (file1.isDirectory()) {
/* 342 */         removeDir(file1);
/*     */       } else {
/* 344 */         log(""Deleting "" + file1.getAbsolutePath(), this.verbosity);
/* 345 */         if (!file1.delete()) {
/* 346 */           String str1 = ""Unable to delete file "" + file1.getAbsolutePath();
/* 347 */           if (this.failonerror) {
/* 348 */             throw new BuildException(str1);
/*     */           }
/* 350 */           log(str1, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 355 */     log(""Deleting directory "" + paramFile.getAbsolutePath(), this.verbosity);
/* 356 */     if (!paramFile.delete()) {
/* 357 */       String str = ""Unable to delete directory "" + this.dir.getAbsolutePath();
/* 358 */       if (this.failonerror) {
/* 359 */         throw new BuildException(str);
/*     */       }
/* 361 */       log(str, this.quiet ? 3 : 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeFiles(File paramFile, String[] paramArrayOfString1, String[] paramArrayOfString2) {
/* 374 */     if (paramArrayOfString1.length > 0) {
/* 375 */       log(""Deleting "" + paramArrayOfString1.length + "" files from "" + paramFile.getAbsolutePath());
/* 376 */       for (byte b = 0; b < paramArrayOfString1.length; b++) {
/* 377 */         File file1 = new File(paramFile, paramArrayOfString1[b]);
/* 378 */         log(""Deleting "" + file1.getAbsolutePath(), this.verbosity);
/* 379 */         if (!file1.delete()) {
/* 380 */           String str = ""Unable to delete file "" + file1.getAbsolutePath();
/* 381 */           if (this.failonerror) {
/* 382 */             throw new BuildException(str);
/*     */           }
/* 384 */           log(str, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 390 */     if (paramArrayOfString2.length > 0 && this.includeEmpty) {
/* 391 */       byte b = 0;
/* 392 */       for (int i = paramArrayOfString2.length - 1; i >= 0; i--) {
/* 393 */         File file1 = new File(paramFile, paramArrayOfString2[i]);
/* 394 */         String[] arrayOfString = file1.list();
/* 395 */         if (arrayOfString == null || arrayOfString.length == 0) {
/* 396 */           log(""Deleting "" + file1.getAbsolutePath(), this.verbosity);
/* 397 */           if (!file1.delete()) {
/* 398 */             String str = ""Unable to delete directory "" + file1.getAbsolutePath();
/*     */             
/* 400 */             if (this.failonerror) {
/* 401 */               throw new BuildException(str);
/*     */             }
/* 403 */             log(str, this.quiet ? 3 : 1);
/*     */           } else {
/*     */             
/* 406 */             b++;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 411 */       if (b > 0)
/* 412 */         log(""Deleted "" + b + "" director"" + ((b == 1) ? ""y"" : ""ies"") + "" from "" + paramFile.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Delete.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Deltree,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Deltree
/*     */   extends Task
/*     */ {
/*     */   private File dir;
/*     */   
/*  73 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  77 */     log(""DEPRECATED - The deltree task is deprecated.  Use delete instead."");
/*     */     
/*  79 */     if (this.dir == null) {
/*  80 */       throw new BuildException(""dir attribute must be set!"", this.location);
/*     */     }
/*     */     
/*  83 */     if (this.dir.exists()) {
/*  84 */       if (!this.dir.isDirectory()) {
/*  85 */         if (!this.dir.delete()) {
/*  86 */           throw new BuildException(""Unable to delete directory "" + this.dir.getAbsolutePath(), this.location);
/*     */         }
/*     */ 
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*  96 */       log(""Deleting: "" + this.dir.getAbsolutePath());
/*     */       
/*     */       try {
/*  99 */         removeDir(this.dir);
/*     */       } catch (IOException iOException) {
/* 101 */         String str = ""Unable to delete "" + this.dir.getAbsolutePath();
/* 102 */         throw new BuildException(str, this.location);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeDir(File paramFile) throws IOException {
/* 116 */     String[] arrayOfString = paramFile.list();
/* 117 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 118 */       String str = arrayOfString[b];
/* 119 */       File file = new File(paramFile, str);
/* 120 */       if (file.isDirectory()) {
/* 121 */         removeDir(file);
/*     */       }
/* 123 */       else if (!file.delete()) {
/* 124 */         throw new BuildException(""Unable to delete file "" + file.getAbsolutePath());
/*     */       } 
/*     */     } 
/*     */     
/* 128 */     if (!paramFile.delete())
/* 129 */       throw new BuildException(""Unable to delete directory "" + paramFile.getAbsolutePath()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Deltree.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.DependSet,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DependSet
/*     */   extends MatchingTask
/*     */ {
/* 112 */   private Vector sourceFileSets = new Vector();
/* 113 */   private Vector sourceFileLists = new Vector();
/* 114 */   private Vector targetFileSets = new Vector();
/* 115 */   private Vector targetFileLists = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void addSrcfileset(FileSet paramFileSet) { this.sourceFileSets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void addSrcfilelist(FileList paramFileList) { this.sourceFileLists.addElement(paramFileList); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void addTargetfileset(FileSet paramFileSet) { this.targetFileSets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void addTargetfilelist(FileList paramFileList) { this.targetFileLists.addElement(paramFileList); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 157 */     if (this.sourceFileSets.size() == 0 && this.sourceFileLists.size() == 0) {
/* 158 */       throw new BuildException(""At least one <srcfileset> or <srcfilelist> element must be set"");
/*     */     }
/*     */     
/* 161 */     if (this.targetFileSets.size() == 0 && this.targetFileLists.size() == 0) {
/* 162 */       throw new BuildException(""At least one <targetfileset> or <targetfilelist> element must be set"");
/*     */     }
/*     */     
/* 165 */     long l = (new Date()).getTime();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 171 */     String str = System.getProperty(""os.name"").toLowerCase();
/* 172 */     if (str.indexOf(""windows"") >= 0) {
/* 173 */       l += 2000L;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 179 */     Vector vector = new Vector();
/* 180 */     Enumeration enumeration = this.targetFileSets.elements();
/* 181 */     while (enumeration.hasMoreElements()) {
/*     */       
/* 183 */       FileSet fileSet = enumeration.nextElement();
/* 184 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 185 */       String[] arrayOfString = directoryScanner.getIncludedFiles();
/*     */       
/* 187 */       for (byte b = 0; b < arrayOfString.length; b++) {
/*     */         
/* 189 */         File file = new File(fileSet.getDir(this.project), arrayOfString[b]);
/* 190 */         vector.addElement(file);
/*     */         
/* 192 */         if (file.lastModified() > l) {
/* 193 */           log(""Warning: "" + arrayOfString[b] + "" modified in the future."", 1);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 202 */     boolean bool = true;
/* 203 */     Enumeration enumeration1 = this.targetFileLists.elements();
/* 204 */     while (enumeration1.hasMoreElements()) {
/*     */       
/* 206 */       FileList fileList = enumeration1.nextElement();
/* 207 */       String[] arrayOfString = fileList.getFiles(this.project);
/*     */       
/* 209 */       for (byte b = 0; b < arrayOfString.length; b++) {
/*     */         
/* 211 */         File file = new File(fileList.getDir(this.project), arrayOfString[b]);
/* 212 */         if (!file.exists()) {
/* 213 */           log(arrayOfString[b] + "" does not exist."", 3);
/* 214 */           bool = false;
/*     */         }
/*     */         else {
/*     */           
/* 218 */           vector.addElement(file);
/*     */           
/* 220 */           if (file.lastModified() > l) {
/* 221 */             log(""Warning: "" + arrayOfString[b] + "" modified in the future."", 1);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 230 */     if (bool) {
/* 231 */       Enumeration enumeration2 = this.sourceFileSets.elements();
/* 232 */       while (bool && enumeration2.hasMoreElements()) {
/*     */         
/* 234 */         FileSet fileSet = enumeration2.nextElement();
/* 235 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 236 */         String[] arrayOfString = directoryScanner.getIncludedFiles();
/*     */         
/* 238 */         byte b = 0;
/*     */         do {
/* 240 */           File file = new File(fileSet.getDir(this.project), arrayOfString[b]);
/*     */           
/* 242 */           if (file.lastModified() > l) {
/* 243 */             log(""Warning: "" + arrayOfString[b] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 247 */           Enumeration enumeration3 = vector.elements();
/* 248 */           while (bool && enumeration3.hasMoreElements()) {
/*     */             
/* 250 */             File file1 = enumeration3.nextElement();
/* 251 */             if (file.lastModified() > file1.lastModified()) {
/* 252 */               log(file1.getPath() + "" is out of date with respect to "" + arrayOfString[b], 3);
/*     */               
/* 254 */               bool = false;
/*     */             }
/*     */           
/*     */           } 
/* 258 */         } while (bool && ++b < arrayOfString.length);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 265 */     if (bool) {
/* 266 */       Enumeration enumeration2 = this.sourceFileLists.elements();
/* 267 */       while (bool && enumeration2.hasMoreElements()) {
/*     */         
/* 269 */         FileList fileList = enumeration2.nextElement();
/* 270 */         String[] arrayOfString = fileList.getFiles(this.project);
/*     */         
/* 272 */         byte b = 0;
/*     */         do {
/* 274 */           File file = new File(fileList.getDir(this.project), arrayOfString[b]);
/*     */           
/* 276 */           if (file.lastModified() > l) {
/* 277 */             log(""Warning: "" + arrayOfString[b] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 281 */           if (!file.exists()) {
/* 282 */             log(arrayOfString[b] + "" does not exist."", 3);
/* 283 */             bool = false;
/*     */             
/*     */             break;
/*     */           } 
/* 287 */           Enumeration enumeration3 = vector.elements();
/* 288 */           while (bool && enumeration3.hasMoreElements()) {
/*     */             
/* 290 */             File file1 = enumeration3.nextElement();
/*     */             
/* 292 */             if (file.lastModified() > file1.lastModified()) {
/* 293 */               log(file1.getPath() + "" is out of date with respect to "" + arrayOfString[b], 3);
/*     */               
/* 295 */               bool = false;
/*     */             }
/*     */           
/*     */           } 
/* 299 */         } while (bool && ++b < arrayOfString.length);
/*     */       } 
/*     */     } 
/*     */     
/* 303 */     if (!bool) {
/* 304 */       log(""Deleting all target files. "", 3);
/* 305 */       for (Enumeration enumeration2 = vector.elements(); enumeration2.hasMoreElements(); ) {
/* 306 */         File file = enumeration2.nextElement();
/* 307 */         log(""Deleting file "" + file.getAbsolutePath(), 3);
/* 308 */         file.delete();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\DependSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ear,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ear
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*     */   
/*     */   public Ear() {
/*  76 */     this.archiveType = ""ear"";
/*  77 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */   
/*  81 */   public void setEarfile(File paramFile) { setZipfile(paramFile); }
/*     */ 
/*     */   
/*     */   public void setAppxml(File paramFile) {
/*  85 */     this.deploymentDescriptor = paramFile;
/*  86 */     if (!this.deploymentDescriptor.exists()) {
/*  87 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */     
/*  90 */     ZipFileSet zipFileSet = new ZipFileSet();
/*  91 */     zipFileSet.setDir(new File(this.deploymentDescriptor.getParent()));
/*  92 */     zipFileSet.setIncludes(this.deploymentDescriptor.getName());
/*  93 */     zipFileSet.setFullpath(""META-INF/application.xml"");
/*  94 */     addFileset((FileSet)zipFileSet);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArchives(ZipFileSet paramZipFileSet) {
/* 101 */     log(""addArchives called"", 4);
/* 102 */     paramZipFileSet.setPrefix(""/"");
/* 103 */     addFileset((FileSet)paramZipFileSet);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream paramZipOutputStream) throws IOException, BuildException {
/* 111 */     if (this.deploymentDescriptor == null) {
/* 112 */       throw new BuildException(""appxml attribute is required"", this.location);
/*     */     }
/*     */     
/* 115 */     super.initZipOutputStream(paramZipOutputStream);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File paramFile, ZipOutputStream paramZipOutputStream, String paramString) throws IOException {
/* 125 */     if (paramString.equalsIgnoreCase(""META-INF/aplication.xml"")) {
/* 126 */       if (this.deploymentDescriptor == null || !this.deploymentDescriptor.equals(paramFile) || this.descriptorAdded) {
/* 127 */         log(""Warning: selected "" + this.archiveType + "" files include a META-INF/application.xml which will be ignored "" + ""(please use appxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       } else {
/*     */         
/* 130 */         super.zipFile(paramFile, paramZipOutputStream, paramString);
/* 131 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 134 */       super.zipFile(paramFile, paramZipOutputStream, paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 143 */     this.descriptorAdded = false;
/* 144 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Ear.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Echo,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Echo
/*     */   extends Task
/*     */ {
/*  66 */   protected String message = """";
/*  67 */   protected File file = null;
/*     */   
/*     */   protected boolean append = false;
/*     */   
/*  71 */   protected int logLevel = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  79 */     if (this.file == null) {
/*  80 */       log(this.message, this.logLevel);
/*     */     } else {
/*  82 */       FileWriter fileWriter = null;
/*     */       try {
/*  84 */         fileWriter = new FileWriter(this.file.getAbsolutePath(), this.append);
/*  85 */         fileWriter.write(this.message, 0, this.message.length());
/*     */       } catch (IOException iOException) {
/*  87 */         throw new BuildException(iOException, this.location);
/*     */       } finally {
/*  89 */         if (fileWriter != null) {
/*     */           try {
/*  91 */             fileWriter.close();
/*  92 */           } catch (IOException iOException) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setMessage(String paramString) { this.message = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setAppend(boolean paramBoolean) { this.append = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void addText(String paramString) { this.message += ProjectHelper.replaceProperties(this.project, paramString, this.project.getProperties()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLevel(EchoLevel paramEchoLevel) {
/* 142 */     String str = paramEchoLevel.getValue();
/* 143 */     if (str.equals(""error"")) {
/* 144 */       this.logLevel = 0;
/* 145 */     } else if (str.equals(""warning"")) {
/* 146 */       this.logLevel = 1;
/* 147 */     } else if (str.equals(""info"")) {
/* 148 */       this.logLevel = 2;
/* 149 */     } else if (str.equals(""verbose"")) {
/* 150 */       this.logLevel = 3;
/*     */     } else {
/*     */       
/* 153 */       this.logLevel = 4;
/*     */     } 
/*     */   }
/*     */   
/*     */   public static class EchoLevel
/*     */     extends EnumeratedAttribute {
/* 159 */     public String[] getValues() { return new String[] { ""error"", ""warning"", ""info"", ""verbose"", ""debug"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Echo.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Exec
/*     */   extends Task
/*     */ {
/*     */   private String os;
/*     */   private String out;
/*     */   private File dir;
/*     */   private String command;
/*  74 */   protected PrintWriter fos = null;
/*     */   
/*     */   private boolean failOnError = false;
/*     */   
/*     */   private static final int BUFFER_SIZE = 512;
/*     */   
/*  80 */   public void execute() throws BuildException { run(this.command); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected int run(String paramString) throws BuildException {
/*  85 */     int i = -1;
/*     */ 
/*     */     
/*  88 */     String str = System.getProperty(""os.name"");
/*  89 */     log(""Myos = "" + str, 3);
/*  90 */     if (this.os != null && this.os.indexOf(str) < 0) {
/*     */       
/*  92 */       log(""Not found in "" + this.os, 3);
/*  93 */       return 0;
/*     */     } 
/*     */ 
/*     */     
/*  97 */     if (this.dir == null) this.dir = this.project.getBaseDir();
/*     */     
/*  99 */     if (str.toLowerCase().indexOf(""windows"") >= 0) {
/* 100 */       if (!this.dir.equals(this.project.resolveFile("".""))) {
/* 101 */         if (str.toLowerCase().indexOf(""nt"") >= 0) {
/* 102 */           paramString = ""cmd /c cd "" + this.dir + "" && "" + paramString;
/*     */         } else {
/*     */           
/* 105 */           String str1 = this.project.getProperty(""ant.home"");
/* 106 */           if (str1 == null) {
/* 107 */             throw new BuildException(""Property 'ant.home' not found"", this.location);
/*     */           }
/*     */           
/* 110 */           String str2 = this.project.resolveFile(str1 + ""/bin/antRun.bat"").toString();
/* 111 */           paramString = str2 + "" "" + this.dir + "" "" + paramString;
/*     */         } 
/*     */       }
/*     */     } else {
/* 115 */       String str1 = this.project.getProperty(""ant.home"");
/* 116 */       if (str1 == null) throw new BuildException(""Property 'ant.home' not found"", this.location); 
/* 117 */       String str2 = this.project.resolveFile(str1 + ""/bin/antRun"").toString();
/*     */       
/* 119 */       paramString = str2 + "" "" + this.dir + "" "" + paramString;
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 124 */       log(paramString, 3);
/*     */ 
/*     */       
/* 127 */       Process process = Runtime.getRuntime().exec(paramString);
/*     */       
/* 129 */       if (this.out != null) {
/* 130 */         this.fos = new PrintWriter(new FileWriter(this.out));
/* 131 */         log(""Output redirected to "" + this.out, 3);
/*     */       } 
/*     */ 
/*     */       
/* 135 */       StreamPumper streamPumper1 = new StreamPumper(this, process.getInputStream(), 2, this);
/*     */       
/* 137 */       StreamPumper streamPumper2 = new StreamPumper(this, process.getErrorStream(), 1, this);
/*     */ 
/*     */ 
/*     */       
/* 141 */       streamPumper1.start();
/* 142 */       streamPumper2.start();
/*     */ 
/*     */       
/* 145 */       process.waitFor();
/* 146 */       streamPumper1.join();
/* 147 */       streamPumper2.join();
/* 148 */       process.destroy();
/*     */ 
/*     */       
/* 151 */       logFlush();
/*     */ 
/*     */       
/* 154 */       i = process.exitValue();
/* 155 */       if (i != 0) {
/* 156 */         if (this.failOnError) {
/* 157 */           throw new BuildException(""Exec returned: "" + i, this.location);
/*     */         }
/* 159 */         log(""Result: "" + i, 0);
/*     */       } 
/*     */     } catch (IOException iOException) {
/*     */       
/* 163 */       throw new BuildException(""Error exec: "" + paramString, iOException, this.location);
/* 164 */     } catch (InterruptedException interruptedException) {}
/*     */     
/* 166 */     return i;
/*     */   }
/*     */ 
/*     */   
/* 170 */   public void setDir(String paramString) { this.dir = this.project.resolveFile(paramString); }
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void setOs(String paramString) { this.os = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setCommand(String paramString) { this.command = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void setOutput(String paramString) { this.out = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void setFailonerror(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ 
/*     */   
/*     */   protected void outputLog(String paramString, int paramInt) {
/* 190 */     if (this.fos == null) {
/* 191 */       log(paramString, paramInt);
/*     */     } else {
/* 193 */       this.fos.println(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 198 */   protected void logFlush() { if (this.fos != null) this.fos.close();  }
/*     */   
/*     */   class StreamPumper
/*     */     extends Thread {
/*     */     private BufferedReader din;
/*     */     private int messageLevel;
/*     */     private boolean endOfStream;
/*     */     private int SLEEP_TIME;
/*     */     private Exec parent;
/*     */     private final Exec this$0;
/*     */     
/*     */     public StreamPumper(Exec this$0, InputStream param1InputStream, int param1Int, Exec param1Exec1) {
/* 210 */       this.this$0 = this$0; this.endOfStream = false; this.SLEEP_TIME = 5;
/* 211 */       this.din = new BufferedReader(new InputStreamReader(param1InputStream));
/* 212 */       this.messageLevel = param1Int;
/* 213 */       this.parent = param1Exec1;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void pumpStream() throws IOException {
/* 219 */       byte[] arrayOfByte = new byte[512];
/* 220 */       if (!this.endOfStream) {
/* 221 */         String str = this.din.readLine();
/*     */         
/* 223 */         if (str != null) {
/* 224 */           this.this$0.outputLog(str, this.messageLevel);
/*     */         } else {
/* 226 */           this.endOfStream = true;
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/*     */     public void run() {
/*     */       try {
/*     */         try {
/* 234 */           while (!this.endOfStream) {
/* 235 */             pumpStream();
/* 236 */             Thread.sleep(this.SLEEP_TIME);
/*     */           } 
/* 238 */         } catch (InterruptedException interruptedException) {}
/* 239 */         this.din.close();
/* 240 */       } catch (IOException iOException) {}
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Exec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecTask
/*     */   extends Task
/*     */ {
/*  73 */   private static String lSep = System.getProperty(""line.separator"");
/*     */   
/*     */   private String os;
/*     */   private File out;
/*     */   private File dir;
/*     */   protected boolean failOnError = false;
/*     */   protected boolean newEnvironment = false;
/*  80 */   private Integer timeout = null;
/*  81 */   private Environment env = new Environment();
/*  82 */   protected Commandline cmdl = new Commandline();
/*  83 */   private FileOutputStream fos = null;
/*  84 */   private ByteArrayOutputStream baos = null;
/*     */ 
/*     */   
/*     */   private String outputprop;
/*     */ 
/*     */   
/*     */   private boolean vmLauncher = true;
/*     */ 
/*     */ 
/*     */   
/*  94 */   public void setTimeout(Integer paramInteger) { this.timeout = paramInteger; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setExecutable(String paramString) { this.cmdl.setExecutable(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setOs(String paramString) { this.os = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCommand(Commandline paramCommandline) {
/* 122 */     log(""The command attribute is deprecated. Please use the executable attribute and nested arg elements."", 1);
/*     */ 
/*     */     
/* 125 */     this.cmdl = paramCommandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setOutput(File paramFile) { this.out = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setOutputproperty(String paramString) { this.outputprop = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setFailonerror(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void setNewenvironment(boolean paramBoolean) { this.newEnvironment = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void addEnv(Environment.Variable paramVariable) { this.env.addVariable(paramVariable); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 175 */     checkConfiguration();
/* 176 */     if (isValidOs()) {
/* 177 */       runExec(prepareExec());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkConfiguration() throws BuildException {
/* 185 */     if (this.cmdl.getExecutable() == null) {
/* 186 */       throw new BuildException(""no executable specified"", this.location);
/*     */     }
/* 188 */     if (this.dir != null && !this.dir.exists()) {
/* 189 */       throw new BuildException(""The directory you specified does not exist"");
/*     */     }
/* 191 */     if (this.dir != null && !this.dir.isDirectory()) {
/* 192 */       throw new BuildException(""The directory you specified is not a directory"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidOs() {
/* 201 */     String str = System.getProperty(""os.name"");
/* 202 */     log(""Current OS is "" + str, 3);
/* 203 */     if (this.os != null && this.os.indexOf(str) < 0) {
/*     */       
/* 205 */       log(""This OS, "" + str + "" was not found in the specified list of valid OSes: "" + this.os, 3);
/* 206 */       return false;
/*     */     } 
/* 208 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setVMLauncher(boolean paramBoolean) { this.vmLauncher = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Execute prepareExec() throws BuildException {
/* 224 */     if (this.dir == null) this.dir = this.project.getBaseDir();
/*     */     
/* 226 */     log(this.cmdl.toString(), 3);
/*     */     
/* 228 */     Execute execute = new Execute(createHandler(), createWatchdog());
/* 229 */     execute.setAntRun(this.project);
/* 230 */     execute.setWorkingDirectory(this.dir);
/* 231 */     execute.setVMLauncher(this.vmLauncher);
/* 232 */     String[] arrayOfString = this.env.getVariables();
/* 233 */     if (arrayOfString != null) {
/* 234 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 235 */         log(""Setting environment variable: "" + arrayOfString[b], 3);
/*     */       }
/*     */     }
/*     */     
/* 239 */     execute.setNewenvironment(this.newEnvironment);
/* 240 */     execute.setEnvironment(arrayOfString);
/* 241 */     return execute;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void runExecute(Execute paramExecute) throws IOException {
/* 248 */     int i = -1;
/*     */     
/* 250 */     i = paramExecute.execute();
/* 251 */     if (i != 0) {
/* 252 */       if (this.failOnError) {
/* 253 */         throw new BuildException(this.taskType + "" returned: "" + i, this.location);
/*     */       }
/* 255 */       log(""Result: "" + i, 0);
/*     */     } 
/*     */     
/* 258 */     if (this.baos != null) {
/* 259 */       BufferedReader bufferedReader = new BufferedReader(new StringReader(this.baos.toString()));
/*     */       
/* 261 */       String str = null;
/* 262 */       StringBuffer stringBuffer = new StringBuffer();
/* 263 */       while ((str = bufferedReader.readLine()) != null) {
/* 264 */         if (stringBuffer.length() != 0) {
/* 265 */           stringBuffer.append(lSep);
/*     */         }
/* 267 */         stringBuffer.append(str);
/*     */       } 
/* 269 */       this.project.setProperty(this.outputprop, stringBuffer.toString());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runExec(Execute paramExecute) throws BuildException {
/* 277 */     paramExecute.setCommandline(this.cmdl.getCommandline());
/*     */     try {
/* 279 */       runExecute(paramExecute);
/*     */     } catch (IOException iOException) {
/* 281 */       throw new BuildException(""Execute failed: "" + iOException, iOException, this.location);
/*     */     } finally {
/*     */       
/* 284 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteStreamHandler createHandler() throws BuildException {
/* 292 */     if (this.out != null)
/*     */       try {
/* 294 */         this.fos = new FileOutputStream(this.out);
/* 295 */         log(""Output redirected to "" + this.out, 3);
/* 296 */         return new PumpStreamHandler(this.fos);
/*     */       } catch (FileNotFoundException fileNotFoundException) {
/* 298 */         throw new BuildException(""Cannot write to "" + this.out, fileNotFoundException, this.location);
/*     */       } catch (IOException iOException) {
/* 300 */         throw new BuildException(""Cannot write to "" + this.out, iOException, this.location);
/*     */       }  
/* 302 */     if (this.outputprop != null) {
/*     */       
/* 304 */       this.baos = new ByteArrayOutputStream();
/* 305 */       log(""Output redirected to ByteArray"", 3);
/* 306 */       return new PumpStreamHandler(this.baos);
/*     */     } 
/* 308 */     return new LogStreamHandler(this, 2, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteWatchdog createWatchdog() throws BuildException {
/* 317 */     if (this.timeout == null) return null; 
/* 318 */     return new ExecuteWatchdog(this.timeout.intValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logFlush() {
/*     */     try {
/* 326 */       if (this.fos != null) this.fos.close(); 
/* 327 */       if (this.baos != null) this.baos.close(); 
/* 328 */     } catch (IOException iOException) {}
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ExecTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Execute,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.StringReader;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Execute
/*     */ {
/*     */   public static final int INVALID = 2147483647;
/*  83 */   private String[] cmdl = null;
/*  84 */   private String[] env = null;
/*  85 */   private int exitValue = Integer.MAX_VALUE;
/*     */   private ExecuteStreamHandler streamHandler;
/*     */   private ExecuteWatchdog watchdog;
/*  88 */   private File workingDirectory = null;
/*  89 */   private Project project = null;
/*     */   
/*     */   private boolean newEnvironment = false;
/*     */   
/*     */   private boolean useVMLauncher = true;
/*     */   
/*  95 */   private static String antWorkingDirectory = System.getProperty(""user.dir"");
/*  96 */   private static CommandLauncher vmLauncher = null;
/*  97 */   private static CommandLauncher shellLauncher = null;
/*  98 */   private static Vector procEnvironment = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/*     */     try {
/* 106 */       vmLauncher = new Java13CommandLauncher();
/*     */     }
/* 108 */     catch (NoSuchMethodException noSuchMethodException) {}
/*     */ 
/*     */ 
/*     */     
/* 112 */     String str = System.getProperty(""os.name"").toLowerCase();
/* 113 */     if (str.indexOf(""mac os"") >= 0) {
/*     */       
/* 115 */       shellLauncher = new MacCommandLauncher(new CommandLauncher());
/*     */     }
/* 117 */     else if (str.indexOf(""os/2"") >= 0) {
/*     */       
/* 119 */       shellLauncher = new WinNTCommandLauncher(new CommandLauncher());
/*     */     }
/* 121 */     else if (str.indexOf(""windows"") >= 0) {
/*     */       CommandLauncher commandLauncher;
/*     */       
/* 124 */       if (System.getProperty(""java.version"").startsWith(""1.1"")) {
/*     */         
/* 126 */         commandLauncher = new Java11CommandLauncher();
/*     */       }
/*     */       else {
/*     */         
/* 130 */         commandLauncher = new CommandLauncher();
/*     */       } 
/*     */ 
/*     */       
/* 134 */       if (str.indexOf(""nt"") >= 0 || str.indexOf(""2000"") >= 0)
/*     */       {
/* 136 */         shellLauncher = new WinNTCommandLauncher(commandLauncher);
/*     */       }
/*     */       else
/*     */       {
/* 140 */         shellLauncher = new ScriptCommandLauncher(""bin/antRun.bat"", commandLauncher);
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 145 */       shellLauncher = new ScriptCommandLauncher(""bin/antRun"", new CommandLauncher());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized Vector getProcEnvironment() {
/* 153 */     if (procEnvironment != null) return procEnvironment;
/*     */     
/* 155 */     procEnvironment = new Vector();
/*     */     try {
/* 157 */       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/* 158 */       Execute execute = new Execute(new PumpStreamHandler(byteArrayOutputStream));
/* 159 */       execute.setCommandline(getProcEnvCommand());
/*     */       
/* 161 */       execute.setNewenvironment(true);
/* 162 */       int i = execute.execute();
/* 163 */       if (i != 0);
/*     */ 
/*     */ 
/*     */       
/* 167 */       BufferedReader bufferedReader = new BufferedReader(new StringReader(byteArrayOutputStream.toString()));
/*     */       
/* 169 */       String str1 = null;
/* 170 */       String str3 = System.getProperty(""line.separator""); String str2;
/* 171 */       while ((str2 = bufferedReader.readLine()) != null) {
/* 172 */         if (str2.indexOf('=') == -1) {
/*     */ 
/*     */           
/* 175 */           if (str1 == null) {
/* 176 */             str1 = str3 + str2;
/*     */             continue;
/*     */           } 
/* 179 */           str1 = str1 + str3 + str2;
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 184 */         if (str1 != null) {
/* 185 */           procEnvironment.addElement(str1);
/*     */         }
/* 187 */         str1 = str2;
/*     */       } 
/*     */ 
/*     */       
/* 191 */       procEnvironment.addElement(str1);
/*     */     } catch (IOException iOException) {
/*     */       
/* 194 */       iOException.printStackTrace();
/*     */     } 
/*     */     
/* 197 */     return procEnvironment;
/*     */   }
/*     */   
/*     */   private static String[] getProcEnvCommand() {
/* 201 */     String str = System.getProperty(""os.name"").toLowerCase();
/* 202 */     if (str.indexOf(""mac os"") >= 0) {
/*     */ 
/*     */       
/*     */       try {
/* 206 */         String str1 = System.getProperty(""os.version"");
/* 207 */         int i = Integer.parseInt(str1.substring(0, str1.indexOf('.')));
/*     */ 
/*     */         
/* 210 */         if (i >= 10)
/*     */         {
/* 212 */           return new String[] { ""/usr/bin/env"" };
/*     */         }
/*     */       }
/* 215 */       catch (NumberFormatException numberFormatException) {}
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 220 */       return null;
/*     */     } 
/*     */     
/* 223 */     if (str.indexOf(""os/2"") >= 0)
/*     */     {
/*     */       
/* 226 */       return new String[] { ""cmd"", ""/c"", ""set"" };
/*     */     }
/*     */     
/* 229 */     if (str.indexOf(""indows"") >= 0) {
/*     */       
/* 231 */       if (str.indexOf(""nt"") >= 0 || str.indexOf(""2000"") >= 0)
/*     */       {
/* 233 */         return new String[] { ""cmd"", ""/c"", ""set"" };
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 238 */       return new String[] { ""command.com"", ""/c"", ""set"" };
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 245 */     return new String[] { ""/usr/bin/env"" };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public Execute() { this(new PumpStreamHandler(), null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public Execute(ExecuteStreamHandler paramExecuteStreamHandler) { this(paramExecuteStreamHandler, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Execute(ExecuteStreamHandler paramExecuteStreamHandler, ExecuteWatchdog paramExecuteWatchdog) {
/* 278 */     this.streamHandler = paramExecuteStreamHandler;
/* 279 */     this.watchdog = paramExecuteWatchdog;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public String[] getCommandline() { return this.cmdl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 299 */   public void setCommandline(String[] paramArrayOfString) { this.cmdl = paramArrayOfString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   public void setNewenvironment(boolean paramBoolean) { this.newEnvironment = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getEnvironment() {
/* 317 */     if (this.env == null || this.newEnvironment) return this.env; 
/* 318 */     return patchEnvironment();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 329 */   public void setEnvironment(String[] paramArrayOfString) { this.env = paramArrayOfString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setWorkingDirectory(File paramFile) {
/* 343 */     if (paramFile == null || paramFile.getAbsolutePath().equals(antWorkingDirectory)) {
/* 344 */       this.workingDirectory = null;
/*     */     } else {
/* 346 */       this.workingDirectory = paramFile;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public void setAntRun(Project paramProject) throws BuildException { this.project = paramProject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 368 */   public void setVMLauncher(boolean paramBoolean) { this.useVMLauncher = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int execute() throws IOException {
/* 379 */     CommandLauncher commandLauncher = (vmLauncher != null) ? vmLauncher : shellLauncher;
/* 380 */     if (!this.useVMLauncher) {
/* 381 */       commandLauncher = shellLauncher;
/*     */     }
/*     */     
/* 384 */     Process process = commandLauncher.exec(this.project, getCommandline(), getEnvironment(), this.workingDirectory);
/*     */     try {
/* 386 */       this.streamHandler.setProcessInputStream(process.getOutputStream());
/* 387 */       this.streamHandler.setProcessOutputStream(process.getInputStream());
/* 388 */       this.streamHandler.setProcessErrorStream(process.getErrorStream());
/*     */     } catch (IOException iOException) {
/* 390 */       process.destroy();
/* 391 */       throw iOException;
/*     */     } 
/* 393 */     this.streamHandler.start();
/* 394 */     if (this.watchdog != null) this.watchdog.start(process); 
/* 395 */     waitFor(process);
/* 396 */     if (this.watchdog != null) this.watchdog.stop(); 
/* 397 */     this.streamHandler.stop();
/* 398 */     if (this.watchdog != null) this.watchdog.checkException(); 
/* 399 */     return getExitValue();
/*     */   }
/*     */   
/*     */   protected void waitFor(Process paramProcess) {
/*     */     try {
/* 404 */       paramProcess.waitFor();
/* 405 */       setExitValue(paramProcess.exitValue());
/* 406 */     } catch (InterruptedException interruptedException) {}
/*     */   }
/*     */ 
/*     */   
/* 410 */   protected void setExitValue(int paramInt) { this.exitValue = paramInt; }
/*     */ 
/*     */ 
/*     */   
/* 414 */   public int getExitValue() { return this.exitValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String[] patchEnvironment() {
/* 422 */     Vector vector = (Vector)getProcEnvironment().clone();
/* 423 */     for (byte b = 0; b < this.env.length; b++) {
/* 424 */       int i = this.env[b].indexOf('=');
/*     */       
/* 426 */       String str = this.env[b].substring(0, i + 1);
/* 427 */       int j = vector.size();
/* 428 */       for (byte b1 = 0; b1 < j; b1++) {
/* 429 */         if (((String)vector.elementAt(b1)).startsWith(str)) {
/* 430 */           vector.removeElementAt(b1);
/*     */           break;
/*     */         } 
/*     */       } 
/* 434 */       vector.addElement(this.env[b]);
/*     */     } 
/* 436 */     String[] arrayOfString = new String[vector.size()];
/* 437 */     vector.copyInto((Object[])arrayOfString);
/* 438 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void runCommand(Task paramTask, String[] paramArrayOfString) throws BuildException {
/*     */     try {
/* 453 */       paramTask.log(Commandline.toString(paramArrayOfString), 3);
/* 454 */       Execute execute = new Execute(new LogStreamHandler(paramTask, 2, 0));
/*     */ 
/*     */       
/* 457 */       execute.setAntRun(paramTask.getProject());
/* 458 */       execute.setCommandline(paramArrayOfString);
/* 459 */       int i = execute.execute();
/* 460 */       if (i != 0) {
/* 461 */         throw new BuildException(paramArrayOfString[0] + "" failed with return code "" + i, paramTask.getLocation());
/*     */       }
/*     */     } catch (IOException iOException) {
/*     */       
/* 465 */       throw new BuildException(""Could not launch "" + paramArrayOfString[0] + "": "" + iOException, paramTask.getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class CommandLauncher
/*     */   {
/*     */     private CommandLauncher() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2) throws IOException {
/* 486 */       if (param1Project != null) {
/* 487 */         param1Project.log(""Execute:CommandLauncher: "" + Commandline.toString(param1ArrayOfString1), 4);
/*     */       }
/*     */       
/* 490 */       return Runtime.getRuntime().exec(param1ArrayOfString1, param1ArrayOfString2);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2, File param1File) throws IOException {
/* 506 */       if (param1File == null) {
/* 507 */         return exec(param1Project, param1ArrayOfString1, param1ArrayOfString2);
/*     */       }
/* 509 */       throw new IOException(""Cannot execute a process in different directory under this JVM"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class Java11CommandLauncher
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Java11CommandLauncher() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2) throws IOException {
/* 527 */       String[] arrayOfString = new String[param1ArrayOfString1.length];
/* 528 */       for (byte b = 0; b < param1ArrayOfString1.length; b++) {
/* 529 */         arrayOfString[b] = Commandline.quoteArgument(param1ArrayOfString1[b]);
/*     */       }
/* 531 */       if (param1Project != null) {
/* 532 */         param1Project.log(""Execute:Java11CommandLauncher: "" + Commandline.toString(arrayOfString), 4);
/*     */       }
/*     */       
/* 535 */       return Runtime.getRuntime().exec(arrayOfString, param1ArrayOfString2);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static class Java13CommandLauncher
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Method _execWithCWD;
/*     */     
/*     */     static Class array$Ljava$lang$String;
/*     */ 
/*     */     
/* 548 */     public Java13CommandLauncher() throws NoSuchMethodException { this._execWithCWD = Runtime.class.getMethod(""exec"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String, (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String, File.class }); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2, File param1File) throws IOException {
/*     */       try {
/* 559 */         if (param1Project != null) {
/* 560 */           param1Project.log(""Execute:Java13CommandLauncher: "" + Commandline.toString(param1ArrayOfString1), 4);
/*     */         }
/*     */         
/* 563 */         Object[] arrayOfObject = { param1ArrayOfString1, param1ArrayOfString2, param1File };
/* 564 */         return (Process)this._execWithCWD.invoke(Runtime.getRuntime(), arrayOfObject);
/*     */       } catch (InvocationTargetException invocationTargetException) {
/*     */         
/* 567 */         Throwable throwable = invocationTargetException.getTargetException();
/* 568 */         if (throwable instanceof ThreadDeath) {
/* 569 */           throw (ThreadDeath)throwable;
/*     */         }
/* 571 */         if (throwable instanceof IOException) {
/* 572 */           throw (IOException)throwable;
/*     */         }
/*     */         
/* 575 */         throw new BuildException(""Unable to execute command"", throwable);
/*     */       
/*     */       }
/*     */       catch (Exception exception) {
/*     */         
/* 580 */         throw new BuildException(""Unable to execute command"", exception);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class CommandLauncherProxy
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Execute.CommandLauncher _launcher;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 596 */     CommandLauncherProxy(Execute.CommandLauncher param1CommandLauncher) { this._launcher = param1CommandLauncher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 605 */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2) throws IOException { return this._launcher.exec(param1Project, param1ArrayOfString1, param1ArrayOfString2); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class WinNTCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/* 620 */     WinNTCommandLauncher(Execute.CommandLauncher param1CommandLauncher) { super(param1CommandLauncher); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2, File param1File) throws IOException {
/* 629 */       File file = param1File;
/* 630 */       if (param1File == null) {
/* 631 */         if (param1Project != null) {
/* 632 */           file = param1Project.getBaseDir();
/*     */         } else {
/* 634 */           return exec(param1Project, param1ArrayOfString1, param1ArrayOfString2);
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 641 */       String[] arrayOfString = new String[param1ArrayOfString1.length + 6];
/* 642 */       arrayOfString[0] = ""cmd"";
/* 643 */       arrayOfString[1] = ""/c"";
/* 644 */       arrayOfString[2] = ""cd"";
/* 645 */       arrayOfString[3] = ""/d"";
/* 646 */       arrayOfString[4] = file.getAbsolutePath();
/* 647 */       arrayOfString[5] = ""&&"";
/* 648 */       System.arraycopy(param1ArrayOfString1, 0, arrayOfString, 6, param1ArrayOfString1.length);
/*     */       
/* 650 */       return exec(param1Project, arrayOfString, param1ArrayOfString2);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class MacCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/* 662 */     MacCommandLauncher(Execute.CommandLauncher param1CommandLauncher) { super(param1CommandLauncher); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2, File param1File) throws IOException {
/* 671 */       if (param1File == null) {
/* 672 */         return exec(param1Project, param1ArrayOfString1, param1ArrayOfString2);
/*     */       }
/*     */       
/* 675 */       System.getProperties().put(""user.dir"", param1File.getAbsolutePath());
/*     */       try {
/* 677 */         return exec(param1Project, param1ArrayOfString1, param1ArrayOfString2);
/*     */       } finally {
/*     */         
/* 680 */         System.getProperties().put(""user.dir"", antWorkingDirectory);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static class ScriptCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/*     */     private String _script;
/*     */ 
/*     */     
/*     */     ScriptCommandLauncher(String param1String, Execute.CommandLauncher param1CommandLauncher) {
/* 693 */       super(param1CommandLauncher);
/* 694 */       this._script = param1String;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project param1Project, String[] param1ArrayOfString1, String[] param1ArrayOfString2, File param1File) throws IOException {
/* 703 */       if (param1Project == null) {
/* 704 */         if (param1File == null) {
/* 705 */           return exec(param1Project, param1ArrayOfString1, param1ArrayOfString2);
/*     */         }
/* 707 */         throw new IOException(""Cannot locate antRun script: No project provided"");
/*     */       } 
/*     */ 
/*     */       
/* 711 */       String str1 = param1Project.getProperty(""ant.home"");
/* 712 */       if (str1 == null) {
/* 713 */         throw new IOException(""Cannot locate antRun script: Property 'ant.home' not found"");
/*     */       }
/* 715 */       String str2 = param1Project.resolveFile(str1 + File.separator + this._script).toString();
/*     */ 
/*     */       
/* 718 */       File file = param1File;
/* 719 */       if (param1File == null && param1Project != null) {
/* 720 */         file = param1Project.getBaseDir();
/*     */       }
/*     */       
/* 723 */       String[] arrayOfString = new String[param1ArrayOfString1.length + 2];
/* 724 */       arrayOfString[0] = str2;
/* 725 */       arrayOfString[1] = file.getAbsolutePath();
/* 726 */       System.arraycopy(param1ArrayOfString1, 0, arrayOfString, 2, param1ArrayOfString1.length);
/*     */       
/* 728 */       return exec(param1Project, arrayOfString, param1ArrayOfString2);
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Execute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteJava,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteJava
/*     */ {
/*  77 */   private Commandline javaCommand = null;
/*  78 */   private Path classpath = null;
/*  79 */   private CommandlineJava.SysProperties sysProperties = null;
/*     */ 
/*     */   
/*  82 */   public void setJavaCommand(Commandline paramCommandline) { this.javaCommand = paramCommandline; }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public void setClasspath(Path paramPath) { this.classpath = paramPath; }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setSystemProperties(CommandlineJava.SysProperties paramSysProperties) { this.sysProperties = paramSysProperties; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutput(PrintStream paramPrintStream) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute(Project paramProject) throws BuildException {
/* 103 */     String str = this.javaCommand.getExecutable();
/* 104 */     Object[] arrayOfObject = { this.javaCommand.getArguments() };
/*     */     
/* 106 */     AntClassLoader antClassLoader = null;
/*     */     try {
/* 108 */       if (this.sysProperties != null) {
/* 109 */         this.sysProperties.setSystem();
/*     */       }
/*     */       
/* 112 */       Class[] arrayOfClass = { Class.forName(""[Ljava.lang.String;"") };
/* 113 */       Class clazz = null;
/* 114 */       if (this.classpath == null) {
/* 115 */         clazz = Class.forName(str);
/*     */       } else {
/* 117 */         antClassLoader = new AntClassLoader(paramProject.getCoreLoader(), paramProject, this.classpath, false);
/* 118 */         antClassLoader.setIsolated(true);
/* 119 */         antClassLoader.setThreadContextLoader();
/* 120 */         clazz = antClassLoader.forceLoadClass(str);
/* 121 */         AntClassLoader.initializeClass(clazz);
/*     */       } 
/* 123 */       Method method = clazz.getMethod(""main"", arrayOfClass);
/* 124 */       method.invoke(null, arrayOfObject);
/*     */     } catch (NullPointerException nullPointerException) {
/* 126 */       throw new BuildException(""Could not find main() method in "" + str);
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 128 */       throw new BuildException(""Could not find "" + str + "". Make sure you have it in your classpath"");
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 130 */       Throwable throwable = invocationTargetException.getTargetException();
/* 131 */       if (!(throwable instanceof SecurityException)) {
/* 132 */         throw new BuildException(throwable);
/*     */       }
/*     */       
/* 135 */       throw (SecurityException)throwable;
/*     */     } catch (Exception exception) {
/*     */       
/* 138 */       throw new BuildException(exception);
/*     */     } finally {
/* 140 */       if (antClassLoader != null) {
/* 141 */         antClassLoader.resetThreadContextLoader();
/* 142 */         antClassLoader.cleanup();
/*     */       } 
/* 144 */       if (this.sysProperties != null)
/* 145 */         this.sysProperties.restoreSystem(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ExecuteJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteOn,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteOn
/*     */   extends ExecTask
/*     */ {
/*  74 */   protected Vector filesets = new Vector();
/*     */   private boolean parallel = false;
/*  76 */   protected String type = ""file"";
/*  77 */   protected Commandline.Marker srcFilePos = null;
/*     */   private boolean skipEmpty = false;
/*  79 */   protected Commandline.Marker targetFilePos = null;
/*  80 */   protected Mapper mapperElement = null;
/*  81 */   protected FileNameMapper mapper = null;
/*  82 */   protected File destDir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean srcIsFirst = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setParallel(boolean paramBoolean) { this.parallel = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setType(FileDirBoth paramFileDirBoth) { this.type = paramFileDirBoth.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setSkipEmptyFilesets(boolean paramBoolean) { this.skipEmpty = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setDest(File paramFile) { this.destDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createSrcfile() {
/* 129 */     if (this.srcFilePos != null) {
/* 130 */       throw new BuildException(this.taskType + "" doesn't support multiple srcfile elements."", this.location);
/*     */     }
/*     */     
/* 133 */     this.srcFilePos = this.cmdl.createMarker();
/* 134 */     return this.srcFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createTargetfile() {
/* 142 */     if (this.targetFilePos != null) {
/* 143 */       throw new BuildException(this.taskType + "" doesn't support multiple targetfile elements."", this.location);
/*     */     }
/*     */     
/* 146 */     this.targetFilePos = this.cmdl.createMarker();
/* 147 */     this.srcIsFirst = (this.srcFilePos != null);
/* 148 */     return this.targetFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 155 */     if (this.mapperElement != null) {
/* 156 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 159 */     this.mapperElement = new Mapper(this.project);
/* 160 */     return this.mapperElement;
/*     */   }
/*     */   
/*     */   protected void checkConfiguration() {
/* 164 */     if (""execon"".equals(this.taskName)) {
/* 165 */       log(""!! execon is deprecated. Use apply instead. !!"");
/*     */     }
/*     */     
/* 168 */     super.checkConfiguration();
/* 169 */     if (this.filesets.size() == 0) {
/* 170 */       throw new BuildException(""no filesets specified"", this.location);
/*     */     }
/*     */     
/* 173 */     if (this.targetFilePos != null || this.mapperElement != null || this.destDir != null) {
/*     */ 
/*     */       
/* 176 */       if (this.mapperElement == null) {
/* 177 */         throw new BuildException(""no mapper specified"", this.location);
/*     */       }
/* 179 */       if (this.mapperElement == null) {
/* 180 */         throw new BuildException(""no dest attribute specified"", this.location);
/*     */       }
/*     */       
/* 183 */       this.mapper = this.mapperElement.getImplementation();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected void runExec(Execute paramExecute) throws BuildException {
/*     */     try {
/* 190 */       Vector vector = new Vector();
/* 191 */       Vector vector1 = new Vector();
/* 192 */       for (byte b = 0; b < this.filesets.size(); b++) {
/* 193 */         FileSet fileSet = this.filesets.elementAt(b);
/* 194 */         File file = fileSet.getDir(this.project);
/* 195 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/*     */         
/* 197 */         if (!""dir"".equals(this.type)) {
/* 198 */           String[] arrayOfString = getFiles(file, directoryScanner);
/* 199 */           for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 200 */             vector.addElement(arrayOfString[b1]);
/* 201 */             vector1.addElement(file);
/*     */           } 
/*     */         } 
/*     */         
/* 205 */         if (!""file"".equals(this.type)) {
/* 206 */           String[] arrayOfString = getDirs(file, directoryScanner);
/* 207 */           for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 208 */             vector.addElement(arrayOfString[b1]);
/* 209 */             vector1.addElement(file);
/*     */           } 
/*     */         } 
/*     */         
/* 213 */         if (vector.size() == 0 && this.skipEmpty) {
/* 214 */           log(""Skipping fileset for directory "" + file + "". It is empty."", 2);
/*     */ 
/*     */ 
/*     */         
/*     */         }
/* 219 */         else if (!this.parallel) {
/* 220 */           String[] arrayOfString = new String[vector.size()];
/* 221 */           vector.copyInto((Object[])arrayOfString);
/* 222 */           for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 223 */             String[] arrayOfString1 = getCommandline(arrayOfString[b1], file);
/* 224 */             log(""Executing "" + Commandline.toString(arrayOfString1), 3);
/*     */             
/* 226 */             paramExecute.setCommandline(arrayOfString1);
/* 227 */             runExecute(paramExecute);
/*     */           } 
/* 229 */           vector.removeAllElements();
/* 230 */           vector1.removeAllElements();
/*     */         } 
/*     */       } 
/*     */       
/* 234 */       if (this.parallel) {
/* 235 */         String[] arrayOfString1 = new String[vector.size()];
/* 236 */         vector.copyInto((Object[])arrayOfString1);
/* 237 */         File[] arrayOfFile = new File[vector1.size()];
/* 238 */         vector1.copyInto((Object[])arrayOfFile);
/* 239 */         String[] arrayOfString2 = getCommandline(arrayOfString1, arrayOfFile);
/* 240 */         log(""Executing "" + Commandline.toString(arrayOfString2), 3);
/*     */         
/* 242 */         paramExecute.setCommandline(arrayOfString2);
/* 243 */         runExecute(paramExecute);
/*     */       } 
/*     */     } catch (IOException iOException) {
/*     */       
/* 247 */       throw new BuildException(""Execute failed: "" + iOException, iOException, this.location);
/*     */     } finally {
/*     */       
/* 250 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getCommandline(String[] paramArrayOfString, File[] paramArrayOfFile) {
/* 261 */     Vector vector = new Vector();
/* 262 */     if (this.targetFilePos != null) {
/* 263 */       Hashtable hashtable = new Hashtable();
/* 264 */       for (byte b1 = 0; b1 < paramArrayOfString.length; b1++) {
/* 265 */         String[] arrayOfString = this.mapper.mapFileName(paramArrayOfString[b1]);
/* 266 */         if (arrayOfString != null) {
/* 267 */           for (byte b2 = 0; b2 < arrayOfString.length; b2++) {
/* 268 */             String str = (new File(this.destDir, arrayOfString[b2])).getAbsolutePath();
/* 269 */             if (!hashtable.contains(str)) {
/* 270 */               vector.addElement(str);
/* 271 */               hashtable.put(str, str);
/*     */             } 
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/* 277 */     String[] arrayOfString1 = new String[vector.size()];
/* 278 */     vector.copyInto((Object[])arrayOfString1);
/*     */     
/* 280 */     String[] arrayOfString2 = this.cmdl.getCommandline();
/* 281 */     String[] arrayOfString3 = new String[arrayOfString2.length + paramArrayOfString.length + arrayOfString1.length];
/*     */     
/* 283 */     int i = arrayOfString2.length;
/* 284 */     if (this.srcFilePos != null) {
/* 285 */       i = this.srcFilePos.getPosition();
/*     */     }
/*     */     
/* 288 */     if (this.targetFilePos != null) {
/* 289 */       int j = this.targetFilePos.getPosition();
/*     */       
/* 291 */       if (i < j || (i == j && this.srcIsFirst))
/*     */       {
/*     */ 
/*     */         
/* 295 */         System.arraycopy(arrayOfString2, 0, arrayOfString3, 0, i);
/*     */ 
/*     */         
/* 298 */         System.arraycopy(arrayOfString2, i, arrayOfString3, i + paramArrayOfString.length, j - i);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 303 */         System.arraycopy(arrayOfString1, 0, arrayOfString3, j + paramArrayOfString.length, arrayOfString1.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 308 */         System.arraycopy(arrayOfString2, j, arrayOfString3, j + paramArrayOfString.length + arrayOfString1.length, arrayOfString2.length - j);
/*     */       
/*     */       }
/*     */       else
/*     */       {
/* 313 */         System.arraycopy(arrayOfString2, 0, arrayOfString3, 0, j);
/*     */ 
/*     */         
/* 316 */         System.arraycopy(arrayOfString1, 0, arrayOfString3, j, arrayOfString1.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 321 */         System.arraycopy(arrayOfString2, j, arrayOfString3, j + arrayOfString1.length, i - j);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 326 */         System.arraycopy(arrayOfString2, i, arrayOfString3, i + paramArrayOfString.length + arrayOfString1.length, arrayOfString2.length - i);
/*     */ 
/*     */         
/* 329 */         i += arrayOfString1.length;
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 335 */       System.arraycopy(arrayOfString2, 0, arrayOfString3, 0, i);
/*     */       
/* 337 */       System.arraycopy(arrayOfString2, i, arrayOfString3, i + paramArrayOfString.length, arrayOfString2.length - i);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 344 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 345 */       arrayOfString3[i + b] = (new File(paramArrayOfFile[b], paramArrayOfString[b])).getAbsolutePath();
/*     */     }
/*     */     
/* 348 */     return arrayOfString3;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 358 */   protected String[] getCommandline(String paramString, File paramFile) { return getCommandline(new String[] { paramString }, new File[] { paramFile }); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getFiles(File paramFile, DirectoryScanner paramDirectoryScanner) {
/* 366 */     if (this.mapper != null) {
/* 367 */       SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 368 */       return sourceFileScanner.restrict(paramDirectoryScanner.getIncludedFiles(), paramFile, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 371 */     return paramDirectoryScanner.getIncludedFiles();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getDirs(File paramFile, DirectoryScanner paramDirectoryScanner) {
/* 380 */     if (this.mapper != null) {
/* 381 */       SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 382 */       return sourceFileScanner.restrict(paramDirectoryScanner.getIncludedDirectories(), paramFile, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 385 */     return paramDirectoryScanner.getIncludedDirectories();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileDirBoth
/*     */     extends EnumeratedAttribute
/*     */   {
/* 395 */     public String[] getValues() { return new String[] { ""file"", ""dir"", ""both"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ExecuteOn.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteStreamHandler,"package org.apache.tools.ant.taskdefs;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
public interface ExecuteStreamHandler {
  void setProcessInputStream(OutputStream paramOutputStream) throws IOException;
  void setProcessErrorStream(InputStream paramInputStream) throws IOException;
  void setProcessOutputStream(InputStream paramInputStream) throws IOException;
  void start() throws IOException;
  void stop();
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ExecuteStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteWatchdog,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteWatchdog
/*     */   implements Runnable
/*     */ {
/*     */   private Process process;
/*     */   private int timeout;
/*     */   private boolean watch = false;
/*  88 */   private Exception caught = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean killedProcess = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExecuteWatchdog(int paramInt) {
/*  99 */     if (paramInt < 1) {
/* 100 */       throw new IllegalArgumentException(""timeout lesser than 1."");
/*     */     }
/* 102 */     this.timeout = paramInt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void start(Process paramProcess) {
/* 112 */     if (paramProcess == null) {
/* 113 */       throw new NullPointerException(""process is null."");
/*     */     }
/* 115 */     if (this.process != null) {
/* 116 */       throw new IllegalStateException(""Already running."");
/*     */     }
/* 118 */     this.caught = null;
/* 119 */     this.killedProcess = false;
/* 120 */     this.watch = true;
/* 121 */     this.process = paramProcess;
/* 122 */     Thread thread = new Thread(this, ""WATCHDOG"");
/* 123 */     thread.setDaemon(true);
/* 124 */     thread.start();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void stop() {
/* 131 */     this.watch = false;
/* 132 */     notifyAll();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void run() {
/*     */     try {
/* 143 */       long l1 = System.currentTimeMillis() + this.timeout;
/*     */       long l2;
/* 145 */       while (this.watch && l1 > (l2 = System.currentTimeMillis())) {
/*     */         try {
/* 147 */           wait(l1 - l2);
/* 148 */         } catch (InterruptedException interruptedException) {}
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 157 */         this.process.exitValue();
/*     */       }
/*     */       catch (IllegalThreadStateException illegalThreadStateException) {
/*     */         
/* 161 */         if (this.watch) {
/* 162 */           this.killedProcess = true;
/* 163 */           this.process.destroy();
/*     */         } 
/*     */       } 
/*     */     } catch (Exception exception) {
/* 167 */       this.caught = exception = null;
/*     */     } finally {
/* 169 */       cleanUp();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 177 */     this.watch = false;
/* 178 */     this.process = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkException() throws BuildException {
/* 190 */     if (this.caught != null) {
/* 191 */       throw new BuildException(""Exception in ExecuteWatchdog.run: "" + this.caught.getMessage(), this.caught);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public boolean isWatching() { return this.watch; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public boolean killedProcess() { return this.killedProcess; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ExecuteWatchdog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exit,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectHelper;
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Exit
/*    */   extends Task
/*    */ {
/*    */   private String message;
/*    */   
/* 69 */   public void setMessage(String paramString) { this.message = paramString; }
/*    */ 
/*    */   
/*    */   public void execute() throws BuildException {
/* 73 */     if (this.message != null && this.message.length() > 0) {
/* 74 */       throw new BuildException(this.message);
/*    */     }
/* 76 */     throw new BuildException(""No message"");
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 84 */   public void addText(String paramString) { this.message += ProjectHelper.replaceProperties(this.project, paramString, this.project.getProperties()); }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Exit.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Expand,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Expand
/*     */   extends MatchingTask
/*     */ {
/*     */   private File dest;
/*     */   private File source;
/*     */   private boolean overwrite = true;
/*     */   
/*     */   public void execute() throws BuildException {
/*  79 */     if (""expand"".equals(this.taskType)) {
/*  80 */       log(""!! expand is deprecated. Use unzip instead. !!"");
/*     */     }
/*     */ 
/*     */     
/*  84 */     Touch touch = (Touch)this.project.createTask(""touch"");
/*  85 */     touch.setOwningTarget(this.target);
/*  86 */     touch.setTaskName(getTaskName());
/*  87 */     touch.setLocation(getLocation());
/*     */     
/*  89 */     if (this.source == null) {
/*  90 */       throw new BuildException(""Source attribute must be specified"");
/*     */     }
/*  92 */     if (this.dest == null) {
/*  93 */       throw new BuildException(""Dest attribute must be specified"");
/*     */     }
/*     */     
/*  96 */     if (this.source.isDirectory()) {
/*     */       
/*  98 */       DirectoryScanner directoryScanner = getDirectoryScanner(this.source);
/*     */       
/* 100 */       String[] arrayOfString = directoryScanner.getIncludedFiles();
/* 101 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 102 */         File file = new File(this.source, arrayOfString[b]);
/* 103 */         expandFile(touch, file, this.dest);
/*     */       } 
/*     */     } else {
/*     */       
/* 107 */       expandFile(touch, this.source, this.dest);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void expandFile(Touch paramTouch, File paramFile1, File paramFile2) {
/* 112 */     ZipInputStream zipInputStream = null;
/*     */     try {
/* 114 */       log(""Expanding: "" + paramFile1 + "" into "" + paramFile2, 2);
/*     */       
/* 116 */       zipInputStream = new ZipInputStream(new FileInputStream(paramFile1));
/* 117 */       ZipEntry zipEntry = null;
/*     */       
/* 119 */       while ((zipEntry = zipInputStream.getNextEntry()) != null) {
/* 120 */         this; File file = new File(paramFile2, Project.translatePath(zipEntry.getName()));
/*     */         try {
/* 122 */           if (!this.overwrite && file.exists() && file.lastModified() >= zipEntry.getTime()) {
/*     */             
/* 124 */             log(""Skipping "" + file + "" as it is up-to-date"", 4);
/*     */             
/*     */             continue;
/*     */           } 
/*     */           
/* 129 */           log(""expanding "" + zipEntry.getName() + "" to "" + file, 3);
/*     */ 
/*     */           
/* 132 */           File file1 = new File(file.getParent());
/* 133 */           file1.mkdirs();
/*     */           
/* 135 */           if (zipEntry.isDirectory()) {
/* 136 */             file.mkdirs();
/*     */           } else {
/* 138 */             byte[] arrayOfByte = new byte[1024];
/* 139 */             int i = 0;
/* 140 */             FileOutputStream fileOutputStream = new FileOutputStream(file);
/*     */             
/* 142 */             while ((i = zipInputStream.read(arrayOfByte)) >= 0) {
/* 143 */               fileOutputStream.write(arrayOfByte, 0, i);
/*     */             }
/*     */             
/* 146 */             fileOutputStream.close();
/*     */           } 
/*     */           
/* 149 */           this; if (Project.getJavaVersion() != ""1.1"") {
/* 150 */             paramTouch.setFile(file);
/* 151 */             paramTouch.setMillis(zipEntry.getTime());
/* 152 */             paramTouch.touch();
/*     */           } 
/*     */         } catch (FileNotFoundException fileNotFoundException) {
/*     */           
/* 156 */           log(""Unable to expand to file "" + file.getPath(), 1);
/*     */         } 
/*     */       } 
/* 159 */       log(""expand complete"", 3);
/*     */     } catch (IOException iOException) {
/* 161 */       throw new BuildException(""Error while expanding "" + paramFile1.getPath(), iOException);
/*     */     } finally {
/* 163 */       if (zipInputStream != null) {
/*     */         try {
/* 165 */           zipInputStream.close();
/*     */         }
/* 167 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setSrc(File paramFile) { this.source = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setOverwrite(boolean paramBoolean) { this.overwrite = paramBoolean; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Expand.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Filter,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Filter
/*     */   extends Task
/*     */ {
/*     */   private String token;
/*     */   private String value;
/*     */   private File filtersFile;
/*     */   
/*  80 */   public void setToken(String paramString) { this.token = paramString; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setValue(String paramString) { this.value = paramString; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setFiltersfile(File paramFile) { this.filtersFile = paramFile; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  92 */     boolean bool1 = (this.filtersFile != null && this.token == null && this.value == null) ? true : false;
/*  93 */     boolean bool2 = (this.filtersFile == null && this.token != null && this.value != null) ? true : false;
/*     */     
/*  95 */     if (!bool1 && !bool2) {
/*  96 */       throw new BuildException(""both token and value parameters, or only a filtersFile parameter is required"", this.location);
/*     */     }
/*     */     
/*  99 */     if (bool2) {
/* 100 */       this.project.getGlobalFilterSet().addFilter(this.token, this.value);
/*     */     }
/*     */     
/* 103 */     if (bool1) {
/* 104 */       readFilters();
/*     */     }
/*     */   }
/*     */   
/*     */   protected void readFilters() throws BuildException {
/* 109 */     log(""Reading filters from "" + this.filtersFile, 3);
/* 110 */     this.project.getGlobalFilterSet().readFiltersFromFile(this.filtersFile);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Filter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.FixCRLF,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.BufferedWriter;
/*      */ import java.io.File;
/*      */ import java.io.FileReader;
/*      */ import java.io.FileWriter;
/*      */ import java.io.IOException;
/*      */ import java.util.Enumeration;
/*      */ import java.util.NoSuchElementException;
/*      */ import java.util.Random;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FixCRLF
/*      */   extends MatchingTask
/*      */ {
/*      */   private static final int UNDEF = -1;
/*      */   private static final int NOTJAVA = 0;
/*      */   private static final int LOOKING = 1;
/*      */   private static final int IN_CHAR_CONST = 2;
/*      */   private static final int IN_STR_CONST = 3;
/*      */   private static final int IN_SINGLE_COMMENT = 4;
/*      */   private static final int IN_MULTI_COMMENT = 5;
/*      */   private static final int ASIS = 0;
/*      */   private static final int CR = 1;
/*      */   private static final int LF = 2;
/*      */   private static final int CRLF = 3;
/*      */   private static final int ADD = 1;
/*      */   private static final int REMOVE = -1;
/*      */   private static final int SPACES = -1;
/*      */   private static final int TABS = 1;
/*      */   private static final int INBUFLEN = 8192;
/*      */   private static final int LINEBUFLEN = 200;
/*      */   private static final char CTRLZ = '\032';
/*  131 */   private int tablength = 8;
/*  132 */   private String spaces = ""        "";
/*  133 */   private StringBuffer linebuf = new StringBuffer(1024);
/*  134 */   private StringBuffer linebuf2 = new StringBuffer(1024);
/*      */   
/*      */   private int eol;
/*      */   private String eolstr;
/*      */   private int ctrlz;
/*      */   private int tabs;
/*      */   private boolean javafiles = false;
/*      */   private File srcDir;
/*  142 */   private File destDir = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FixCRLF() {
/*  151 */     this.tabs = 0;
/*  152 */     if (System.getProperty(""path.separator"").equals("":"")) {
/*  153 */       this.ctrlz = -1;
/*  154 */       if (System.getProperty(""os.name"").indexOf(""Mac"") > -1) {
/*  155 */         this.eol = 1;
/*  156 */         this.eolstr = ""\r"";
/*      */       } else {
/*  158 */         this.eol = 2;
/*  159 */         this.eolstr = ""\n"";
/*      */       } 
/*      */     } else {
/*      */       
/*  163 */       this.ctrlz = 0;
/*  164 */       this.eol = 3;
/*  165 */       this.eolstr = ""\r\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  173 */   public void setSrcdir(File paramFile) { this.srcDir = paramFile; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  181 */   public void setDestdir(File paramFile) { this.destDir = paramFile; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  188 */   public void setJavafiles(boolean paramBoolean) { this.javafiles = paramBoolean; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEol(CrLf paramCrLf) {
/*  204 */     String str = paramCrLf.getValue();
/*  205 */     if (str.equals(""asis"")) {
/*  206 */       this.eol = 0;
/*  207 */     } else if (str.equals(""cr"")) {
/*  208 */       this.eol = 1;
/*  209 */       this.eolstr = ""\r"";
/*  210 */     } else if (str.equals(""lf"")) {
/*  211 */       this.eol = 2;
/*  212 */       this.eolstr = ""\n"";
/*      */     } else {
/*      */       
/*  215 */       this.eol = 3;
/*  216 */       this.eolstr = ""\r\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setCr(AddAsisRemove paramAddAsisRemove) {
/*  233 */     log(""DEPRECATED: The cr attribute has been deprecated,"", 1);
/*      */     
/*  235 */     log(""Please us the eol attribute instead"", 1);
/*  236 */     String str = paramAddAsisRemove.getValue();
/*  237 */     CrLf crLf = new CrLf();
/*  238 */     if (str.equals(""remove"")) {
/*  239 */       crLf.setValue(""lf"");
/*  240 */     } else if (str.equals(""asis"")) {
/*  241 */       crLf.setValue(""asis"");
/*      */     } else {
/*      */       
/*  244 */       crLf.setValue(""crlf"");
/*      */     } 
/*  246 */     setEol(crLf);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTab(AddAsisRemove paramAddAsisRemove) {
/*  260 */     String str = paramAddAsisRemove.getValue();
/*  261 */     if (str.equals(""remove"")) {
/*  262 */       this.tabs = -1;
/*  263 */     } else if (str.equals(""asis"")) {
/*  264 */       this.tabs = 0;
/*      */     } else {
/*      */       
/*  267 */       this.tabs = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTablength(int paramInt) throws BuildException {
/*  277 */     if (paramInt < 2 || paramInt > 80) {
/*  278 */       throw new BuildException(""tablength must be between 2 and 80"", this.location);
/*      */     }
/*      */     
/*  281 */     this.tablength = paramInt;
/*  282 */     StringBuffer stringBuffer = new StringBuffer();
/*  283 */     for (byte b = 0; b < this.tablength; b++) {
/*  284 */       stringBuffer.append(' ');
/*      */     }
/*  286 */     this.spaces = stringBuffer.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEof(AddAsisRemove paramAddAsisRemove) {
/*  300 */     String str = paramAddAsisRemove.getValue();
/*  301 */     if (str.equals(""remove"")) {
/*  302 */       this.ctrlz = -1;
/*  303 */     } else if (str.equals(""asis"")) {
/*  304 */       this.ctrlz = 0;
/*      */     } else {
/*      */       
/*  307 */       this.ctrlz = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/*  316 */     if (this.srcDir == null) {
/*  317 */       throw new BuildException(""srcdir attribute must be set!"");
/*      */     }
/*  319 */     if (!this.srcDir.exists()) {
/*  320 */       throw new BuildException(""srcdir does not exist!"");
/*      */     }
/*  322 */     if (!this.srcDir.isDirectory()) {
/*  323 */       throw new BuildException(""srcdir is not a directory!"");
/*      */     }
/*  325 */     if (this.destDir != null) {
/*  326 */       if (!this.destDir.exists()) {
/*  327 */         throw new BuildException(""destdir does not exist!"");
/*      */       }
/*  329 */       if (!this.destDir.isDirectory()) {
/*  330 */         throw new BuildException(""destdir is not a directory!"");
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  335 */     log(""options: eol="" + ((this.eol == 0) ? ""asis"" : ((this.eol == 1) ? ""cr"" : ((this.eol == 2) ? ""lf"" : ""crlf""))) + "" tab="" + ((this.tabs == 1) ? ""add"" : ((this.tabs == 0) ? ""asis"" : ""remove"")) + "" eof="" + ((this.ctrlz == 1) ? ""add"" : ((this.ctrlz == 0) ? ""asis"" : ""remove"")) + "" tablength="" + this.tablength, 3);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  343 */     DirectoryScanner directoryScanner = getDirectoryScanner(this.srcDir);
/*  344 */     String[] arrayOfString = directoryScanner.getIncludedFiles();
/*      */     
/*  346 */     for (byte b = 0; b < arrayOfString.length; b++) {
/*  347 */       processFile(arrayOfString[b]);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private File createTempFile() {
/*  355 */     String str = ""fixcrlf"" + (new Random(System.currentTimeMillis())).nextLong();
/*      */     
/*  357 */     if (this.destDir == null) {
/*  358 */       return new File(this.srcDir, str);
/*      */     }
/*  360 */     return new File(this.destDir, str);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean filesEqual(File paramFile1, File paramFile2) {
/*  370 */     char[] arrayOfChar1 = new char[8192];
/*  371 */     char[] arrayOfChar2 = new char[8192];
/*      */ 
/*      */     
/*  374 */     if (paramFile1.length() != paramFile2.length()) {
/*  375 */       return false;
/*      */     }
/*      */     
/*      */     try {
/*  379 */       BufferedReader bufferedReader1 = new BufferedReader(new FileReader(paramFile1), 8192);
/*      */       
/*  381 */       BufferedReader bufferedReader2 = new BufferedReader(new FileReader(paramFile2), 8192);
/*      */       int i;
/*  383 */       while ((i = bufferedReader1.read(arrayOfChar1, 0, 8192)) != -1) {
/*  384 */         bufferedReader2.read(arrayOfChar2, 0, 8192);
/*      */ 
/*      */ 
/*      */         
/*  388 */         for (byte b = 0; b < i; b++) {
/*  389 */           if (arrayOfChar1[b] != arrayOfChar2[b]) {
/*  390 */             bufferedReader1.close();
/*  391 */             bufferedReader2.close();
/*  392 */             return false;
/*      */           } 
/*      */         } 
/*      */       } 
/*  396 */       bufferedReader1.close();
/*  397 */       bufferedReader2.close();
/*  398 */       return true;
/*      */     } catch (IOException iOException) {
/*  400 */       throw new BuildException(""IOException in filesEqual: "" + paramFile1 + "" : "" + paramFile2);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void processFile(String paramString) throws BuildException {
/*  408 */     File file1 = new File(this.srcDir, paramString);
/*  409 */     File file2 = null;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  414 */     OneLiner oneLiner = new OneLiner(this, file1);
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/*  419 */       file2 = createTempFile();
/*  420 */       FileWriter fileWriter = new FileWriter(file2);
/*  421 */       BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
/*      */     } catch (IOException iOException) {
/*  423 */       throw new BuildException(iOException);
/*      */     } finally {
/*      */ 
/*      */       
/*      */       try {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  602 */         if (oneLiner != null) {
/*  603 */           oneLiner.close();
/*      */         }
/*      */       } catch (IOException iOException) {
/*  606 */         log(""Error closing "" + file1, 0);
/*      */       } 
/*      */       
/*  609 */       if (file2 != null) {
/*  610 */         file2.delete();
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void nextStateChange(OneLiner.BufferLine paramBufferLine) throws BuildException {
/*  632 */     int i = paramBufferLine.length();
/*  633 */     int j = paramBufferLine.getNext();
/*      */ 
/*      */ 
/*      */     
/*  637 */     while (j < i) {
/*  638 */       switch (paramBufferLine.getChar(j++)) {
/*      */         case '\'':
/*  640 */           paramBufferLine.setState(2);
/*  641 */           paramBufferLine.setLookahead(--j);
/*      */           return;
/*      */         case '""':
/*  644 */           paramBufferLine.setState(3);
/*  645 */           paramBufferLine.setLookahead(--j);
/*      */           return;
/*      */         case '/':
/*  648 */           if (j < i) {
/*  649 */             if (paramBufferLine.getChar(j) == '*') {
/*  650 */               paramBufferLine.setState(5);
/*  651 */               paramBufferLine.setLookahead(--j);
/*      */               return;
/*      */             } 
/*  654 */             if (paramBufferLine.getChar(j) == '/') {
/*  655 */               paramBufferLine.setState(4);
/*  656 */               paramBufferLine.setLookahead(--j);
/*      */               return;
/*      */             } 
/*      */           } 
/*      */       } 
/*      */ 
/*      */ 
/*      */     
/*      */     } 
/*  665 */     paramBufferLine.setLookahead(j);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void endOfCharConst(OneLiner.BufferLine paramBufferLine, char paramChar) throws BuildException {
/*  685 */     int i = paramBufferLine.getNext();
/*  686 */     int j = paramBufferLine.length();
/*      */     
/*  688 */     i++;
/*  689 */     while (i < j) {
/*  690 */       char c; if ((c = paramBufferLine.getChar(i++)) == '\\') {
/*  691 */         i++;
/*      */         continue;
/*      */       } 
/*  694 */       if (c == paramChar) {
/*  695 */         paramBufferLine.setLookahead(i);
/*      */         
/*      */         return;
/*      */       } 
/*      */     } 
/*      */     
/*  701 */     throw new BuildException(""endOfCharConst: unterminated char constant"");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void notInConstant(OneLiner.BufferLine paramBufferLine, int paramInt, BufferedWriter paramBufferedWriter) {
/*  726 */     String str1 = paramBufferLine.substring(paramBufferLine.getNext(), paramInt);
/*  727 */     int j = 0;
/*  728 */     int k = paramBufferLine.getColumn();
/*      */ 
/*      */ 
/*      */     
/*  732 */     this.linebuf.setLength(0); int i;
/*  733 */     while ((i = str1.indexOf('\t', j)) >= 0) {
/*  734 */       this.linebuf.append(str1.substring(j, i));
/*  735 */       k += i - j;
/*  736 */       int m = this.tablength - k % this.tablength;
/*  737 */       this.linebuf.append(this.spaces.substring(0, m));
/*  738 */       k += m;
/*  739 */       j = i + 1;
/*      */     } 
/*  741 */     this.linebuf.append(str1.substring(j, str1.length()));
/*      */     
/*  743 */     String str2 = new String(this.linebuf.toString());
/*  744 */     if (this.tabs == -1) {
/*      */       try {
/*  746 */         paramBufferedWriter.write(str2);
/*      */       } catch (IOException iOException) {
/*  748 */         throw new BuildException(iOException);
/*      */       }
/*      */     
/*      */     } else {
/*      */       
/*  753 */       this.linebuf2.setLength(0);
/*  754 */       j = 0;
/*  755 */       k = paramBufferLine.getColumn();
/*  756 */       int n = k - 0;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  761 */       int m = k + this.tablength - k % this.tablength;
/*  762 */       if (m - k < 2) {
/*  763 */         this.linebuf2.append(str2.substring(j, m - n));
/*      */         
/*  765 */         j = m - n;
/*  766 */         m += this.tablength;
/*      */       } 
/*      */       
/*  769 */       for (; m - n <= str2.length(); 
/*  770 */         m += this.tablength) {
/*      */         
/*  772 */         int i1 = m; do {
/*      */         
/*  774 */         } while (--i1 - n >= j && str2.charAt(i1 - n) == ' ');
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  781 */         if (m - i1 > 2) {
/*  782 */           this.linebuf2.append(str2.substring(j, ++i1 - n));
/*      */           
/*  784 */           this.linebuf2.append('\t');
/*      */         } else {
/*      */           
/*  787 */           this.linebuf2.append(str2.substring(j, m - n));
/*      */         } 
/*      */ 
/*      */         
/*  791 */         j = m - n;
/*      */       } 
/*      */ 
/*      */       
/*  795 */       this.linebuf2.append(str2.substring(j, str2.length()));
/*      */       
/*      */       try {
/*  798 */         paramBufferedWriter.write(this.linebuf2.toString());
/*      */       } catch (IOException iOException) {
/*  800 */         throw new BuildException(iOException);
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  806 */     paramBufferLine.setColumn(paramBufferLine.getColumn() + str2.length());
/*  807 */     paramBufferLine.setNext(paramInt);
/*      */   }
/*      */ 
/*      */   
/*      */   class OneLiner
/*      */     implements Enumeration
/*      */   {
/*      */     private int state;
/*      */     
/*      */     private StringBuffer eolStr;
/*      */     
/*      */     private StringBuffer eofStr;
/*      */     private BufferedReader reader;
/*      */     private String line;
/*      */     private final FixCRLF this$0;
/*      */     
/*      */     public OneLiner(FixCRLF this$0, File param1File) throws BuildException {
/*  824 */       this.this$0 = this$0; this.state = this.this$0.javafiles ? 1 : 0; this.eolStr = new StringBuffer(200); this.eofStr = new StringBuffer();
/*      */       try {
/*  826 */         this.reader = new BufferedReader(new FileReader(param1File), 8192);
/*      */         
/*  828 */         nextLine();
/*      */       } catch (IOException iOException) {
/*  830 */         throw new BuildException(iOException);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     protected void nextLine() throws BuildException {
/*  837 */       byte b = 0;
/*      */       
/*  839 */       this.eolStr.setLength(0);
/*      */       
/*      */       try {
/*      */         int j;
/*      */         
/*  844 */         this.reader.mark(8192);
/*  845 */         this.line = this.reader.readLine();
/*  846 */         if (this.line == null) {
/*      */           
/*  848 */           j = 0;
/*      */         } else {
/*      */           
/*  851 */           j = this.line.length();
/*      */         } 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  857 */         this.reader.reset();
/*      */ 
/*      */         
/*  860 */         this.reader.skip(j);
/*  861 */         this.reader.mark(8192);
/*  862 */         int i = this.reader.read();
/*  863 */         switch ((char)i) {
/*      */ 
/*      */           
/*      */           case '\r':
/*  867 */             b++;
/*  868 */             this.eolStr.append('\r');
/*  869 */             switch ((char)(i = this.reader.read())) {
/*      */               case '\r':
/*  871 */                 if ((char)(i = this.reader.read()) == '\n') {
/*  872 */                   b += 2;
/*  873 */                   this.eolStr.append(""\r\n"");
/*      */                 } 
/*      */                 break;
/*      */               case '\n':
/*  877 */                 b++;
/*  878 */                 this.eolStr.append('\n');
/*      */                 break;
/*      */             } 
/*      */             
/*      */             break;
/*      */           case '\n':
/*  884 */             b++;
/*  885 */             this.eolStr.append('\n');
/*      */             break;
/*      */         } 
/*      */ 
/*      */ 
/*      */         
/*  891 */         this.reader.reset();
/*  892 */         this.reader.skip(b);
/*      */ 
/*      */ 
/*      */         
/*  896 */         if (this.line != null && b == 0) {
/*  897 */           int k = j; do {  }
/*  898 */           while (--k >= 0 && this.line.charAt(k) == '\032');
/*  899 */           if (k < j - 1)
/*      */           {
/*      */             
/*  902 */             this.eofStr.append(this.line.substring(k + 1));
/*  903 */             this.line = (k < 0) ? null : this.line.substring(0, k + 1);
/*      */           }
/*      */         
/*      */         } 
/*      */       } catch (IOException iOException) {
/*      */         
/*  909 */         throw new BuildException(iOException);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  914 */     public String getEofStr() { return this.eofStr.toString(); }
/*      */ 
/*      */ 
/*      */     
/*  918 */     public int getState() { return this.state; }
/*      */ 
/*      */ 
/*      */     
/*  922 */     public void setState(int param1Int) { this.state = param1Int; }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  927 */     public boolean hasMoreElements() { return (this.line != null); }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object nextElement() throws NoSuchElementException {
/*  933 */       if (!hasMoreElements()) {
/*  934 */         throw new NoSuchElementException(""OneLiner"");
/*      */       }
/*  936 */       BufferLine bufferLine = new BufferLine(this, this.line, this.eolStr.toString());
/*      */       
/*  938 */       nextLine();
/*  939 */       return bufferLine;
/*      */     }
/*      */     
/*      */     public void close() throws IOException {
/*  943 */       if (this.reader != null)
/*  944 */         this.reader.close(); 
/*      */     }
/*      */     
/*      */     class BufferLine
/*      */     {
/*      */       private int next;
/*      */       private int column;
/*      */       private int lookahead;
/*      */       private String line;
/*      */       private String eolStr;
/*      */       private final FixCRLF.OneLiner this$1;
/*      */       
/*      */       public BufferLine(FixCRLF.OneLiner this$0, String param2String1, String param2String2) throws BuildException {
/*  957 */         this.this$1 = this$0; this.next = 0; this.column = 0; this.lookahead = -1;
/*  958 */         this.next = 0;
/*  959 */         this.column = 0;
/*  960 */         this.line = param2String1;
/*  961 */         this.eolStr = param2String2;
/*      */       }
/*      */ 
/*      */       
/*  965 */       public int getNext() { return this.next; }
/*      */ 
/*      */ 
/*      */       
/*  969 */       public void setNext(int param2Int) { this.next = param2Int; }
/*      */ 
/*      */ 
/*      */       
/*  973 */       public int getLookahead() { return this.lookahead; }
/*      */ 
/*      */ 
/*      */       
/*  977 */       public void setLookahead(int param2Int) { this.lookahead = param2Int; }
/*      */ 
/*      */ 
/*      */       
/*  981 */       public char getChar(int param2Int) { return this.line.charAt(param2Int); }
/*      */ 
/*      */ 
/*      */       
/*  985 */       public char getNextChar() { return getChar(this.next); }
/*      */ 
/*      */ 
/*      */       
/*  989 */       public char getNextCharInc() { return getChar(this.next++); }
/*      */ 
/*      */ 
/*      */       
/*  993 */       public int getColumn() { return this.column; }
/*      */ 
/*      */ 
/*      */       
/*  997 */       public void setColumn(int param2Int) { this.column = param2Int; }
/*      */ 
/*      */ 
/*      */       
/* 1001 */       public int incColumn() { return this.column++; }
/*      */ 
/*      */ 
/*      */       
/* 1005 */       public int length() { return this.line.length(); }
/*      */ 
/*      */ 
/*      */       
/* 1009 */       public int getEolLength() { return this.eolStr.length(); }
/*      */ 
/*      */ 
/*      */       
/* 1013 */       public String getLineString() { return this.line; }
/*      */ 
/*      */ 
/*      */       
/* 1017 */       public String getEol() { return this.eolStr; }
/*      */ 
/*      */ 
/*      */       
/* 1021 */       public String substring(int param2Int) { return this.line.substring(param2Int); }
/*      */ 
/*      */ 
/*      */       
/* 1025 */       public String substring(int param2Int1, int param2Int2) { return this.line.substring(param2Int1, param2Int2); }
/*      */ 
/*      */ 
/*      */       
/* 1029 */       public void setState(int param2Int) { this.this$1.setState(param2Int); }
/*      */ 
/*      */ 
/*      */       
/* 1033 */       public int getState() { return this.this$1.getState(); } } } class BufferLine { private int next; private int column; private int lookahead; private String line; private String eolStr; private final FixCRLF.OneLiner this$1; public int getState() { return this.this$1.getState(); } public BufferLine(FixCRLF this$0, String param1String1, String param1String2) throws BuildException {
/*      */       this.this$1 = (FixCRLF.OneLiner)this$0;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.lookahead = -1;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.line = param1String1;
/*      */       this.eolStr = param1String2;
/*      */     } public int getNext() { return this.next; } public void setNext(int param1Int) { this.next = param1Int; } public int getLookahead() { return this.lookahead; } public void setLookahead(int param1Int) { this.lookahead = param1Int; } public char getChar(int param1Int) { return this.line.charAt(param1Int); } public char getNextChar() { return getChar(this.next); } public char getNextCharInc() { return getChar(this.next++); } public int getColumn() { return this.column; } public void setColumn(int param1Int) { this.column = param1Int; } public int incColumn() { return this.column++; } public int length() { return this.line.length(); } public int getEolLength() { return this.eolStr.length(); } public String getLineString() { return this.line; } public String getEol() { return this.eolStr; } public String substring(int param1Int) { return this.line.substring(param1Int); } public String substring(int param1Int1, int param1Int2) { return this.line.substring(param1Int1, param1Int2); } public void setState(int param1Int) { this.this$1.setState(param1Int); } }
/* 1043 */   public static class AddAsisRemove extends EnumeratedAttribute { public String[] getValues() { return new String[] { ""add"", ""asis"", ""remove"" }; } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class CrLf
/*      */     extends EnumeratedAttribute
/*      */   {
/* 1052 */     public String[] getValues() { return new String[] { ""asis"", ""cr"", ""lf"", ""crlf"" }; }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\FixCRLF.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GenerateKey,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GenerateKey
/*     */   extends Task
/*     */ {
/*     */   protected String alias;
/*     */   protected String keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected String sigalg;
/*     */   protected String keyalg;
/*     */   protected String dname;
/*     */   protected DistinguishedName expandedDname;
/*     */   protected int keysize;
/*     */   protected int validity;
/*     */   protected boolean verbose;
/*     */   
/*     */   public static class DnameParam
/*     */   {
/*     */     private String name;
/*     */     private String value;
/*     */     
/*  73 */     public void setName(String param1String) { this.name = param1String; }
/*     */ 
/*     */ 
/*     */     
/*  77 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/*  81 */     public void setValue(String param1String) { this.value = param1String; }
/*     */ 
/*     */ 
/*     */     
/*  85 */     public String getValue() { return this.value; }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class DistinguishedName
/*     */   {
/*     */     private String name;
/*     */     private String path;
/*  93 */     private Vector params = new Vector();
/*     */     
/*     */     public Object createParam() {
/*  96 */       GenerateKey.DnameParam dnameParam = new GenerateKey.DnameParam();
/*  97 */       this.params.addElement(dnameParam);
/*     */       
/*  99 */       return dnameParam;
/*     */     }
/*     */ 
/*     */     
/* 103 */     public Enumeration getParams() { return this.params.elements(); }
/*     */ 
/*     */     
/*     */     public String toString() {
/* 107 */       int i = this.params.size();
/* 108 */       StringBuffer stringBuffer = new StringBuffer();
/* 109 */       boolean bool = true;
/*     */       
/* 111 */       for (byte b = 0; b < i; b++) {
/* 112 */         if (!bool) {
/* 113 */           stringBuffer.append("" ,"");
/*     */         }
/* 115 */         bool = false;
/*     */         
/* 117 */         GenerateKey.DnameParam dnameParam = this.params.elementAt(b);
/* 118 */         stringBuffer.append(encode(dnameParam.getName()));
/* 119 */         stringBuffer.append('=');
/* 120 */         stringBuffer.append(encode(dnameParam.getValue()));
/*     */       } 
/*     */       
/* 123 */       return stringBuffer.toString();
/*     */     }
/*     */     
/*     */     public String encode(String param1String) {
/* 127 */       int i = param1String.indexOf(',');
/*     */       
/* 129 */       if (-1 == i) return param1String;
/*     */       
/* 131 */       StringBuffer stringBuffer = new StringBuffer();
/*     */       
/* 133 */       int j = 0;
/*     */       
/* 135 */       while (-1 != i) {
/*     */         
/* 137 */         stringBuffer.append(param1String.substring(j, i));
/* 138 */         stringBuffer.append(""\\,"");
/* 139 */         j = i + 1;
/* 140 */         i = param1String.indexOf(',', j);
/*     */       } 
/*     */       
/* 143 */       stringBuffer.append(param1String.substring(j));
/*     */       
/* 145 */       return stringBuffer.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DistinguishedName createDname() throws BuildException {
/* 171 */     if (null != this.expandedDname) {
/* 172 */       throw new BuildException(""DName sub-element can only be specified once."");
/*     */     }
/* 174 */     if (null != this.dname) {
/* 175 */       throw new BuildException(""It is not possible to specify dname both as attribute and element."");
/*     */     }
/*     */     
/* 178 */     this.expandedDname = new DistinguishedName();
/* 179 */     return this.expandedDname;
/*     */   }
/*     */   
/*     */   public void setDname(String paramString) {
/* 183 */     if (null != this.expandedDname) {
/* 184 */       throw new BuildException(""It is not possible to specify dname both as attribute and element."");
/*     */     }
/*     */     
/* 187 */     this.dname = paramString;
/*     */   }
/*     */ 
/*     */   
/* 191 */   public void setAlias(String paramString) { this.alias = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setKeystore(String paramString) { this.keystore = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setStorepass(String paramString) { this.storepass = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setStoretype(String paramString) { this.storetype = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setKeypass(String paramString) { this.keypass = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setSigalg(String paramString) { this.sigalg = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public void setKeyalg(String paramString) { this.keyalg = paramString; }
/*     */   
/*     */   public void setKeysize(String paramString) throws BuildException {
/*     */     try {
/* 219 */       this.keysize = Integer.parseInt(paramString);
/*     */     } catch (NumberFormatException numberFormatException) {
/*     */       
/* 222 */       throw new BuildException(""KeySize attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */   public void setValidity(String paramString) throws BuildException {
/*     */     try {
/* 227 */       this.validity = Integer.parseInt(paramString);
/*     */     } catch (NumberFormatException numberFormatException) {
/*     */       
/* 230 */       throw new BuildException(""Validity attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 235 */   public void setVerbose(boolean paramBoolean) { this.verbose = paramBoolean; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 239 */     this; if (Project.getJavaVersion().equals(""1.1"")) {
/* 240 */       throw new BuildException(""The genkey task is only available on JDK versions 1.2 or greater"");
/*     */     }
/*     */ 
/*     */     
/* 244 */     if (null == this.alias) {
/* 245 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 248 */     if (null == this.storepass) {
/* 249 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 252 */     if (null == this.dname && null == this.expandedDname) {
/* 253 */       throw new BuildException(""dname must be set"");
/*     */     }
/*     */     
/* 256 */     StringBuffer stringBuffer = new StringBuffer();
/*     */     
/* 258 */     stringBuffer.append(""keytool -genkey "");
/*     */     
/* 260 */     if (this.verbose) {
/* 261 */       stringBuffer.append(""-v "");
/*     */     }
/*     */     
/* 264 */     stringBuffer.append(""-alias \"""");
/* 265 */     stringBuffer.append(this.alias);
/* 266 */     stringBuffer.append(""\"" "");
/*     */     
/* 268 */     if (null != this.dname) {
/* 269 */       stringBuffer.append(""-dname \"""");
/* 270 */       stringBuffer.append(this.dname);
/* 271 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 274 */     if (null != this.expandedDname) {
/* 275 */       stringBuffer.append(""-dname \"""");
/* 276 */       stringBuffer.append(this.expandedDname);
/* 277 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 280 */     if (null != this.keystore) {
/* 281 */       stringBuffer.append(""-keystore \"""");
/* 282 */       stringBuffer.append(this.keystore);
/* 283 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 286 */     if (null != this.storepass) {
/* 287 */       stringBuffer.append(""-storepass \"""");
/* 288 */       stringBuffer.append(this.storepass);
/* 289 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 292 */     if (null != this.storetype) {
/* 293 */       stringBuffer.append(""-storetype \"""");
/* 294 */       stringBuffer.append(this.storetype);
/* 295 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 298 */     stringBuffer.append(""-keypass \"""");
/* 299 */     if (null != this.keypass) {
/* 300 */       stringBuffer.append(this.keypass);
/*     */     } else {
/*     */       
/* 303 */       stringBuffer.append(this.storepass);
/*     */     } 
/* 305 */     stringBuffer.append(""\"" "");
/*     */     
/* 307 */     if (null != this.sigalg) {
/* 308 */       stringBuffer.append(""-sigalg \"""");
/* 309 */       stringBuffer.append(this.sigalg);
/* 310 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 313 */     if (null != this.keyalg) {
/* 314 */       stringBuffer.append(""-keyalg \"""");
/* 315 */       stringBuffer.append(this.keyalg);
/* 316 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */ 
/*     */     
/* 320 */     if (0 < this.keysize) {
/* 321 */       stringBuffer.append(""-keysize \"""");
/* 322 */       stringBuffer.append(this.keysize);
/* 323 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 326 */     if (0 < this.validity) {
/* 327 */       stringBuffer.append(""-validity \"""");
/* 328 */       stringBuffer.append(this.validity);
/* 329 */       stringBuffer.append(""\"" "");
/*     */     } 
/*     */     
/* 332 */     log(""Generating Key for "" + this.alias);
/* 333 */     ExecTask execTask = (ExecTask)this.project.createTask(""exec"");
/* 334 */     execTask.setCommand(new Commandline(stringBuffer.toString()));
/* 335 */     execTask.setFailonerror(true);
/* 336 */     execTask.setTaskName(getTaskName());
/* 337 */     execTask.execute();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\GenerateKey.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Get,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.HttpURLConnection;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.util.Date;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Get
/*     */   extends Task
/*     */ {
/*     */   private URL source;
/*     */   private File dest;
/*     */   private boolean verbose = false;
/*     */   private boolean useTimestamp = false;
/*     */   private boolean ignoreErrors = false;
/*     */   
/*     */   public void execute() throws BuildException {
/*  83 */     if (this.source == null) {
/*  84 */       throw new BuildException(""src attribute is required"", this.location);
/*     */     }
/*     */     
/*  87 */     if (this.dest == null) {
/*  88 */       throw new BuildException(""dest attribute is required"", this.location);
/*     */     }
/*     */     
/*  91 */     if (this.dest.exists() && this.dest.isDirectory()) {
/*  92 */       throw new BuildException(""The specified destination is a directory"", this.location);
/*     */     }
/*     */ 
/*     */     
/*  96 */     if (this.dest.exists() && !this.dest.canWrite()) {
/*  97 */       throw new BuildException(""Can't write to "" + this.dest.getAbsolutePath(), this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 103 */       log(""Getting: "" + this.source);
/*     */ 
/*     */       
/* 106 */       long l = 0L;
/*     */       
/* 108 */       boolean bool = false;
/* 109 */       if (this.useTimestamp && this.dest.exists()) {
/* 110 */         l = this.dest.lastModified();
/* 111 */         if (this.verbose) {
/* 112 */           Date date = new Date(l);
/* 113 */           log(""local file date : "" + date.toString());
/*     */         } 
/*     */         
/* 116 */         bool = true;
/*     */       } 
/*     */ 
/*     */       
/* 120 */       URLConnection uRLConnection = this.source.openConnection();
/*     */ 
/*     */       
/* 123 */       if (this.useTimestamp && bool) {
/* 124 */         uRLConnection.setIfModifiedSince(l);
/*     */       }
/*     */ 
/*     */       
/* 128 */       uRLConnection.connect();
/*     */       
/* 130 */       if (uRLConnection instanceof HttpURLConnection) {
/* 131 */         HttpURLConnection httpURLConnection = (HttpURLConnection)uRLConnection;
/* 132 */         if (httpURLConnection.getResponseCode() == 304) {
/*     */ 
/*     */ 
/*     */           
/* 136 */           log(""Not modified - so not downloaded"");
/*     */ 
/*     */ 
/*     */           
/*     */           return;
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 145 */       FileOutputStream fileOutputStream = new FileOutputStream(this.dest);
/*     */       
/* 147 */       InputStream inputStream = null;
/* 148 */       for (byte b = 0; b < 3; b++) {
/*     */         try {
/* 150 */           inputStream = uRLConnection.getInputStream();
/*     */           break;
/*     */         } catch (IOException iOException) {
/* 153 */           log(""Error opening connection "" + iOException);
/*     */         } 
/*     */       } 
/* 156 */       if (inputStream == null) {
/* 157 */         log(""Can't get "" + this.source + "" to "" + this.dest);
/* 158 */         if (this.ignoreErrors)
/*     */           return; 
/* 160 */         throw new BuildException(""Can't get "" + this.source + "" to "" + this.dest, this.location);
/*     */       } 
/*     */ 
/*     */       
/* 164 */       byte[] arrayOfByte = new byte[102400];
/*     */       
/*     */       int i;
/* 167 */       while ((i = inputStream.read(arrayOfByte)) >= 0) {
/* 168 */         fileOutputStream.write(arrayOfByte, 0, i);
/* 169 */         if (this.verbose) System.out.print("".""); 
/*     */       } 
/* 171 */       if (this.verbose) System.out.println(); 
/* 172 */       fileOutputStream.close();
/* 173 */       inputStream.close();
/*     */ 
/*     */ 
/*     */       
/* 177 */       if (this.useTimestamp) {
/* 178 */         long l1 = uRLConnection.getLastModified();
/* 179 */         if (this.verbose) {
/* 180 */           Date date = new Date(l1);
/* 181 */           log(""last modified = "" + date.toString() + ((l1 == 0L) ? "" - using current time instead"" : """"));
/*     */         } 
/*     */         
/* 184 */         if (l1 != 0L) {
/* 185 */           touchFile(this.dest, l1);
/*     */         }
/*     */       }
/*     */     
/*     */     } catch (IOException iOException) {
/*     */       
/* 191 */       log(""Error getting "" + this.source + "" to "" + this.dest);
/* 192 */       if (this.ignoreErrors)
/*     */         return; 
/* 194 */       throw new BuildException(iOException, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean touchFile(File paramFile, long paramLong) throws BuildException {
/* 211 */     this; if (Project.getJavaVersion() != ""1.1"") {
/* 212 */       Touch touch = (Touch)this.project.createTask(""touch"");
/* 213 */       touch.setOwningTarget(this.target);
/* 214 */       touch.setTaskName(getTaskName());
/* 215 */       touch.setLocation(getLocation());
/* 216 */       touch.setFile(paramFile);
/* 217 */       touch.setMillis(paramLong);
/* 218 */       touch.touch();
/* 219 */       return true;
/*     */     } 
/*     */     
/* 222 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setSrc(URL paramURL) { this.source = paramURL; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setVerbose(boolean paramBoolean) { this.verbose = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void setIgnoreErrors(boolean paramBoolean) { this.ignoreErrors = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setUseTimestamp(boolean paramBoolean) {
/* 278 */     this; if (Project.getJavaVersion() != ""1.1"")
/* 279 */       this.useTimestamp = paramBoolean; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Get.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GUnzip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.zip.GZIPInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GUnzip
/*     */   extends Task
/*     */ {
/*     */   private File source;
/*     */   private File dest;
/*     */   
/*  76 */   public void setSrc(String paramString) { this.source = this.project.resolveFile(paramString); }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public void setDest(String paramString) { this.dest = this.project.resolveFile(paramString); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  84 */     if (this.source == null) {
/*  85 */       throw new BuildException(""No source for gunzip specified"", this.location);
/*     */     }
/*     */     
/*  88 */     if (!this.source.exists()) {
/*  89 */       throw new BuildException(""source doesn't exist"", this.location);
/*     */     }
/*     */     
/*  92 */     if (this.source.isDirectory()) {
/*  93 */       throw new BuildException(""Cannot expand a directory"", this.location);
/*     */     }
/*     */     
/*  96 */     if (this.dest == null) {
/*  97 */       this.dest = new File(this.source.getParent());
/*     */     }
/*     */     
/* 100 */     if (this.dest.isDirectory()) {
/* 101 */       String str = this.source.getName();
/* 102 */       int i = str.length();
/* 103 */       if (i > 3 && "".gz"".equalsIgnoreCase(str.substring(i - 3))) {
/*     */         
/* 105 */         this.dest = new File(this.dest, str.substring(0, i - 3));
/*     */       } else {
/* 107 */         this.dest = new File(this.dest, str);
/*     */       } 
/*     */     } 
/*     */     
/* 111 */     if (this.source.lastModified() > this.dest.lastModified()) {
/* 112 */       log(""Expanding "" + this.source.getAbsolutePath() + "" to "" + this.dest.getAbsolutePath());
/*     */ 
/*     */       
/* 115 */       FileOutputStream fileOutputStream = null;
/* 116 */       GZIPInputStream gZIPInputStream = null;
/*     */       try {
/* 118 */         fileOutputStream = new FileOutputStream(this.dest);
/* 119 */         gZIPInputStream = new GZIPInputStream(new FileInputStream(this.source));
/* 120 */         byte[] arrayOfByte = new byte[8192];
/* 121 */         int i = 0;
/*     */         do {
/* 123 */           fileOutputStream.write(arrayOfByte, 0, i);
/* 124 */           i = gZIPInputStream.read(arrayOfByte, 0, arrayOfByte.length);
/* 125 */         } while (i != -1);
/*     */       } catch (IOException iOException) {
/* 127 */         String str = ""Problem expanding gzip "" + iOException.getMessage();
/* 128 */         throw new BuildException(str, iOException, this.location);
/*     */       } finally {
/* 130 */         if (fileOutputStream != null) {
/*     */           try {
/* 132 */             fileOutputStream.close();
/* 133 */           } catch (IOException iOException) {}
/*     */         }
/* 135 */         if (gZIPInputStream != null)
/*     */           try {
/* 137 */             gZIPInputStream.close();
/* 138 */           } catch (IOException iOException) {} 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\GUnzip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GZip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.zip.GZIPOutputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GZip
/*     */   extends Task
/*     */ {
/*     */   private File zipFile;
/*     */   private File source;
/*     */   
/*  76 */   public void setZipfile(File paramFile) { this.zipFile = paramFile; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public void setSrc(File paramFile) { this.source = paramFile; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  84 */     if (this.zipFile == null) {
/*  85 */       throw new BuildException(""zipfile attribute is required"", this.location);
/*     */     }
/*     */     
/*  88 */     if (this.source == null) {
/*  89 */       throw new BuildException(""src attribute is required"", this.location);
/*     */     }
/*     */     
/*  92 */     log(""Building gzip: "" + this.zipFile.getAbsolutePath());
/*     */     
/*  94 */     GZIPOutputStream gZIPOutputStream = null;
/*     */     try {
/*  96 */       gZIPOutputStream = new GZIPOutputStream(new FileOutputStream(this.zipFile));
/*     */       
/*  98 */       if (this.source.isDirectory()) {
/*  99 */         log(""Cannot Gzip a directory!"", 0);
/*     */       } else {
/* 101 */         zipFile(this.source, gZIPOutputStream);
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 104 */       String str = ""Problem creating gzip "" + iOException.getMessage();
/* 105 */       throw new BuildException(str, iOException, this.location);
/*     */     } finally {
/* 107 */       if (gZIPOutputStream != null) {
/*     */         
/*     */         try {
/* 110 */           gZIPOutputStream.close();
/*     */         }
/* 112 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void zipFile(InputStream paramInputStream, GZIPOutputStream paramGZIPOutputStream) throws IOException {
/* 120 */     byte[] arrayOfByte = new byte[8192];
/* 121 */     int i = 0;
/*     */     do {
/* 123 */       paramGZIPOutputStream.write(arrayOfByte, 0, i);
/* 124 */       i = paramInputStream.read(arrayOfByte, 0, arrayOfByte.length);
/* 125 */     } while (i != -1);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void zipFile(File paramFile, GZIPOutputStream paramGZIPOutputStream) throws IOException {
/* 131 */     FileInputStream fileInputStream = new FileInputStream(paramFile);
/*     */     try {
/* 133 */       zipFile(fileInputStream, paramGZIPOutputStream);
/*     */     } finally {
/* 135 */       fileInputStream.close();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\GZip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Enumeration;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jar
/*     */   extends Zip
/*     */ {
/*     */   private File manifestFile;
/*     */   private Manifest manifest;
/*     */   private Manifest execManifest;
/*     */   private boolean buildFileManifest = false;
/*     */   
/*     */   public Jar() {
/*  80 */     this.archiveType = ""jar"";
/*  81 */     this.emptyBehavior = ""create"";
/*  82 */     setEncoding(""UTF8"");
/*     */   }
/*     */ 
/*     */   
/*  86 */   public void setJarfile(File paramFile) { setZipfile(paramFile); }
/*     */ 
/*     */   
/*     */   public void addConfiguredManifest(Manifest paramManifest) throws ManifestException {
/*  90 */     if (this.manifest == null) {
/*  91 */       this.manifest = getDefaultManifest();
/*     */     }
/*  93 */     this.manifest.merge(paramManifest);
/*  94 */     this.buildFileManifest = true;
/*     */   }
/*     */   
/*     */   public void setManifest(File paramFile) {
/*  98 */     if (!paramFile.exists()) {
/*  99 */       throw new BuildException(""Manifest file: "" + paramFile + "" does not exist."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 103 */     this.manifestFile = paramFile;
/*     */     
/* 105 */     FileInputStream fileInputStream = null;
/*     */     try {
/* 107 */       fileInputStream = new FileInputStream(paramFile);
/* 108 */       Manifest manifest1 = new Manifest(fileInputStream);
/* 109 */       if (this.manifest == null) {
/* 110 */         this.manifest = getDefaultManifest();
/*     */       }
/* 112 */       this.manifest.merge(manifest1);
/*     */     } catch (ManifestException manifestException) {
/*     */       
/* 115 */       log(""Manifest is invalid: "" + manifestException.getMessage(), 0);
/* 116 */       throw new BuildException(""Invalid Manifest: "" + paramFile, manifestException, getLocation());
/*     */     } catch (IOException iOException) {
/*     */       
/* 119 */       throw new BuildException(""Unable to read manifest file: "" + paramFile, iOException);
/*     */     } finally {
/*     */       
/* 122 */       if (fileInputStream != null) {
/*     */         try {
/* 124 */           fileInputStream.close();
/*     */         }
/* 126 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMetainf(ZipFileSet paramZipFileSet) {
/* 135 */     paramZipFileSet.setPrefix(""META-INF/"");
/* 136 */     addFileset((FileSet)paramZipFileSet);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream paramZipOutputStream) throws IOException, BuildException {
/*     */     try {
/* 143 */       this.execManifest = getDefaultManifest();
/*     */       
/* 145 */       if (this.manifest != null) {
/* 146 */         this.execManifest.merge(this.manifest);
/*     */       }
/* 148 */       for (Enumeration enumeration = this.execManifest.getWarnings(); enumeration.hasMoreElements();) {
/* 149 */         log(""Manifest warning: "" + (String)enumeration.nextElement(), 1);
/*     */       }
/*     */       
/* 152 */       zipDir(null, paramZipOutputStream, ""META-INF/"");
/*     */       
/* 154 */       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/* 155 */       PrintWriter printWriter = new PrintWriter(byteArrayOutputStream);
/* 156 */       this.execManifest.write(printWriter);
/* 157 */       printWriter.flush();
/*     */       
/* 159 */       ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
/* 160 */       super.zipFile(byteArrayInputStream, paramZipOutputStream, ""META-INF/MANIFEST.MF"", System.currentTimeMillis());
/* 161 */       super.initZipOutputStream(paramZipOutputStream);
/*     */     } catch (ManifestException manifestException) {
/*     */       
/* 164 */       log(""Manifest is invalid: "" + manifestException.getMessage(), 0);
/* 165 */       throw new BuildException(""Invalid Manifest"", manifestException, getLocation());
/*     */     } 
/*     */   }
/*     */   
/*     */   private Manifest getDefaultManifest() {
/*     */     try {
/* 171 */       String str = ""/org/apache/tools/ant/defaultManifest.mf"";
/* 172 */       InputStream inputStream = getClass().getResourceAsStream(str);
/* 173 */       if (inputStream == null) {
/* 174 */         throw new BuildException(""Could not find default manifest: "" + str);
/*     */       }
/* 176 */       return new Manifest(inputStream);
/*     */     } catch (ManifestException manifestException) {
/*     */       
/* 179 */       throw new BuildException(""Default manifest is invalid !!"");
/*     */     } catch (IOException iOException) {
/*     */       
/* 182 */       throw new BuildException(""Unable to read default manifest"", iOException);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void zipManifestEntry(InputStream paramInputStream) throws IOException {
/*     */     try {
/* 196 */       if (this.execManifest == null) {
/* 197 */         this.execManifest = new Manifest(paramInputStream);
/*     */       }
/* 199 */       else if (isAddingNewFiles()) {
/* 200 */         this.execManifest.merge(new Manifest(paramInputStream));
/*     */       } 
/*     */     } catch (ManifestException manifestException) {
/*     */       
/* 204 */       log(""Manifest is invalid: "" + manifestException.getMessage(), 0);
/* 205 */       throw new BuildException(""Invalid Manifest"", manifestException, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File paramFile, ZipOutputStream paramZipOutputStream, String paramString) throws IOException {
/* 216 */     if (paramString.equalsIgnoreCase(""META-INF/MANIFEST.MF"")) {
/* 217 */       log(""Warning: selected "" + this.archiveType + "" files include a META-INF/MANIFEST.MF which will be ignored "" + ""(please use manifest attribute to "" + this.archiveType + "" task)"", 1);
/*     */     } else {
/*     */       
/* 220 */       super.zipFile(paramFile, paramZipOutputStream, paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(InputStream paramInputStream, ZipOutputStream paramZipOutputStream, String paramString, long paramLong) throws IOException {
/* 230 */     if (paramString.equalsIgnoreCase(""META-INF/MANIFEST.MF"")) {
/*     */       try {
/* 232 */         zipManifestEntry(paramInputStream);
/*     */       } catch (IOException iOException) {
/*     */         
/* 235 */         throw new BuildException(""Unable to read manifest file: "", iOException);
/*     */       } 
/*     */     } else {
/* 238 */       super.zipFile(paramInputStream, paramZipOutputStream, paramString, paramLong);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isUpToDate(FileScanner[] paramArrayOfFileScanner, File paramFile) throws BuildException {
/* 252 */     if (this.buildFileManifest || this.manifestFile == null) {
/* 253 */       ZipFile zipFile = null;
/*     */       try {
/* 255 */         zipFile = new ZipFile(paramFile);
/* 256 */         ZipEntry zipEntry = zipFile.getEntry(""META-INF/MANIFEST.MF"");
/* 257 */         if (zipEntry == null) {
/* 258 */           log(""Updating jar since the current jar has no manifest"", 3);
/* 259 */           return false;
/*     */         } 
/* 261 */         Manifest manifest1 = new Manifest(zipFile.getInputStream(zipEntry));
/* 262 */         if (this.manifest == null) {
/* 263 */           this.manifest = getDefaultManifest();
/*     */         }
/* 265 */         if (!manifest1.equals(this.manifest)) {
/* 266 */           log(""Updating jar since jar manifest has changed"", 3);
/* 267 */           return false;
/*     */         }
/*     */       
/*     */       } catch (Exception exception) {
/*     */         
/* 272 */         log(""Updating jar since cannot read current jar manifest: "" + exception.getClass().getName() + exception.getMessage(), 3);
/*     */         
/* 274 */         return false;
/*     */       } finally {
/*     */         
/* 277 */         if (zipFile != null) {
/*     */           try {
/* 279 */             zipFile.close();
/*     */           }
/* 281 */           catch (IOException iOException) {}
/*     */         
/*     */         }
/*     */       }
/*     */     
/*     */     }
/* 287 */     else if (this.manifestFile.lastModified() > paramFile.lastModified()) {
/* 288 */       return false;
/*     */     } 
/* 290 */     return super.isUpToDate(paramArrayOfFileScanner, paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 295 */   protected boolean createEmptyZip(File paramFile) { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   protected void cleanUp() { super.cleanUp(); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Jar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Java,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ExitException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Java
/*     */   extends Task
/*     */ {
/*  76 */   private CommandlineJava cmdl = new CommandlineJava();
/*     */   private boolean fork = false;
/*  78 */   private File dir = null;
/*     */   private File out;
/*  80 */   private PrintStream outStream = null;
/*     */ 
/*     */   
/*     */   private boolean failOnError = false;
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  87 */     int i = -1;
/*  88 */     if ((i = executeJava()) != 0) {
/*  89 */       if (this.failOnError) {
/*  90 */         throw new BuildException(""Java returned: "" + i, this.location);
/*     */       }
/*  92 */       log(""Java Result: "" + i, 0);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int executeJava() throws BuildException {
/* 104 */     String str = this.cmdl.getClassname();
/* 105 */     if (str == null && this.cmdl.getJar() == null) {
/* 106 */       throw new BuildException(""Classname must not be null."");
/*     */     }
/* 108 */     if (!this.fork && this.cmdl.getJar() != null) {
/* 109 */       throw new BuildException(""Cannot execute a jar in non-forked mode. Please set fork='true'. "");
/*     */     }
/*     */     
/* 112 */     if (this.fork) {
/* 113 */       log(""Forking "" + this.cmdl.toString(), 3);
/*     */       
/* 115 */       return run(this.cmdl.getCommandline());
/*     */     } 
/* 117 */     if (this.cmdl.getVmCommand().size() > 1) {
/* 118 */       log(""JVM args ignored when same JVM is used."", 1);
/*     */     }
/* 120 */     if (this.dir != null) {
/* 121 */       log(""Working directory ignored when same JVM is used."", 1);
/*     */     }
/*     */     
/* 124 */     log(""Running in same VM "" + this.cmdl.getJavaCommand().toString(), 3);
/*     */     
/*     */     try {
/* 127 */       run(this.cmdl);
/* 128 */       return 0;
/*     */     } catch (ExitException exitException) {
/*     */       
/* 131 */       return exitException.getStatus();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setClasspath(Path paramPath) { createClasspath().append(paramPath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public Path createClasspath() { return this.cmdl.createClasspath(this.project).createPath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(File paramFile) throws BuildException {
/* 161 */     if (this.cmdl.getClassname() != null) {
/* 162 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command."");
/*     */     }
/* 164 */     this.cmdl.setJar(paramFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String paramString) throws BuildException {
/* 171 */     if (this.cmdl.getJar() != null) {
/* 172 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command"");
/*     */     }
/* 174 */     this.cmdl.setClassname(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setArgs(String paramString) {
/* 181 */     log(""The args attribute is deprecated. Please use nested arg elements."", 1);
/*     */ 
/*     */     
/* 184 */     this.cmdl.createArgument().setLine(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setFork(boolean paramBoolean) { this.fork = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJvmargs(String paramString) {
/* 205 */     log(""The jvmargs attribute is deprecated. Please use nested jvmarg elements."", 1);
/*     */ 
/*     */     
/* 208 */     this.cmdl.createVmArgument().setLine(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   public Commandline.Argument createJvmarg() { return this.cmdl.createVmArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setJvm(String paramString) { this.cmdl.setVm(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public void addSysproperty(Environment.Variable paramVariable) { this.cmdl.addSysproperty(paramVariable); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 236 */   public void setFailonerror(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 243 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setOutput(File paramFile) { this.out = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setMaxmemory(String paramString) { this.cmdl.setMaxmemory(paramString); }
/*     */ 
/*     */ 
/*     */   
/* 261 */   public void setJVMVersion(String paramString) { this.cmdl.setVmversion(paramString); }
/*     */ 
/*     */   
/*     */   protected void handleOutput(String paramString) {
/* 265 */     if (this.outStream != null) {
/* 266 */       this.outStream.println(paramString);
/*     */     } else {
/*     */       
/* 269 */       super.handleOutput(paramString);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void handleErrorOutput(String paramString) {
/* 274 */     if (this.outStream != null) {
/* 275 */       this.outStream.println(paramString);
/*     */     } else {
/*     */       
/* 278 */       super.handleErrorOutput(paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void run(CommandlineJava paramCommandlineJava) throws BuildException {
/* 287 */     ExecuteJava executeJava = new ExecuteJava();
/* 288 */     executeJava.setJavaCommand(paramCommandlineJava.getJavaCommand());
/* 289 */     executeJava.setClasspath(paramCommandlineJava.getClasspath());
/* 290 */     executeJava.setSystemProperties(paramCommandlineJava.getSystemProperties());
/* 291 */     if (this.out != null) {
/*     */       try {
/* 293 */         this.outStream = new PrintStream(new FileOutputStream(this.out));
/* 294 */         executeJava.execute(this.project);
/*     */       } catch (IOException iOException) {
/* 296 */         throw new BuildException(iOException, this.location);
/*     */       } finally {
/*     */         
/* 299 */         if (this.outStream != null) {
/* 300 */           this.outStream.close();
/*     */         }
/*     */       } 
/*     */     } else {
/*     */       
/* 305 */       executeJava.execute(this.project);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int run(String[] paramArrayOfString) throws BuildException {
/* 313 */     FileOutputStream fileOutputStream = null;
/*     */     try {
/* 315 */       Execute execute = null;
/* 316 */       if (this.out == null) {
/* 317 */         execute = new Execute(new LogStreamHandler(this, 2, 1), null);
/*     */       }
/*     */       else {
/*     */         
/* 321 */         fileOutputStream = new FileOutputStream(this.out);
/* 322 */         execute = new Execute(new PumpStreamHandler(fileOutputStream), null);
/*     */       } 
/*     */       
/* 325 */       execute.setAntRun(this.project);
/*     */       
/* 327 */       if (this.dir == null) {
/* 328 */         this.dir = this.project.getBaseDir();
/* 329 */       } else if (!this.dir.exists() || !this.dir.isDirectory()) {
/* 330 */         throw new BuildException(this.dir.getAbsolutePath() + "" is not a valid directory"", this.location);
/*     */       } 
/*     */ 
/*     */       
/* 334 */       execute.setWorkingDirectory(this.dir);
/*     */       
/* 336 */       execute.setCommandline(paramArrayOfString);
/*     */       try {
/* 338 */         return execute.execute();
/*     */       } catch (IOException iOException) {
/* 340 */         throw new BuildException(iOException, this.location);
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 343 */       throw new BuildException(iOException, this.location);
/*     */     } finally {
/* 345 */       if (fileOutputStream != null) {
/* 346 */         try { fileOutputStream.close(); } catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void run(String paramString, Vector paramVector) throws BuildException {
/* 356 */     CommandlineJava commandlineJava = new CommandlineJava();
/* 357 */     commandlineJava.setClassname(paramString);
/* 358 */     for (byte b = 0; b < paramVector.size(); b++) {
/* 359 */       commandlineJava.createArgument().setValue(paramVector.elementAt(b));
/*     */     }
/* 361 */     run(commandlineJava);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 368 */   public void clearArgs() { this.cmdl.clearJavaArgs(); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Java.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javac,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.GlobPatternMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Compile failed, messages should have been provided."";
/*     */   private Path src;
/*     */   private File destDir;
/*     */   private Path compileClasspath;
/*     */   private String encoding;
/*     */   private boolean debug = false;
/*     */   private boolean optimize = false;
/*     */   private boolean deprecation = false;
/*     */   private boolean depend = false;
/*     */   private boolean verbose = false;
/*     */   private String target;
/*     */   private Path bootclasspath;
/*     */   private Path extdirs;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/*     */   private boolean fork = false;
/*     */   private boolean nowarn = false;
/*     */   private String memoryInitialSize;
/*     */   private String memoryMaximumSize;
/*     */   protected boolean failOnError = true;
/* 124 */   protected File[] compileList = new File[0];
/*     */ 
/*     */ 
/*     */   
/*     */   private String source;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public String getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setSource(String paramString) { this.source = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createSrc() {
/* 151 */     if (this.src == null) {
/* 152 */       this.src = new Path(this.project);
/*     */     }
/* 154 */     return this.src.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrcdir(Path paramPath) {
/* 161 */     if (this.src == null) {
/* 162 */       this.src = paramPath;
/*     */     } else {
/* 164 */       this.src.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 170 */   public Path getSrcdir() { return this.src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setDestdir(File paramFile) { this.destDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public File getDestdir() { return this.destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path paramPath) {
/* 193 */     if (this.compileClasspath == null) {
/* 194 */       this.compileClasspath = paramPath;
/*     */     } else {
/* 196 */       this.compileClasspath.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 202 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 209 */     if (this.compileClasspath == null) {
/* 210 */       this.compileClasspath = new Path(this.project);
/*     */     }
/* 212 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBootclasspath(Path paramPath) {
/* 227 */     if (this.bootclasspath == null) {
/* 228 */       this.bootclasspath = paramPath;
/*     */     } else {
/* 230 */       this.bootclasspath.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public Path getBootclasspath() { return this.bootclasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createBootclasspath() {
/* 246 */     if (this.bootclasspath == null) {
/* 247 */       this.bootclasspath = new Path(this.project);
/*     */     }
/* 249 */     return this.bootclasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 256 */   public void setBootClasspathRef(Reference paramReference) { createBootclasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path paramPath) {
/* 264 */     if (this.extdirs == null) {
/* 265 */       this.extdirs = paramPath;
/*     */     } else {
/* 267 */       this.extdirs.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 283 */     if (this.extdirs == null) {
/* 284 */       this.extdirs = new Path(this.project);
/*     */     }
/* 286 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void setFailonerror(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void setProceed(boolean paramBoolean) { this.failOnError = !paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   public boolean getFailonerror() { return this.failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 314 */   public void setDeprecation(boolean paramBoolean) { this.deprecation = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 319 */   public boolean getDeprecation() { return this.deprecation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 326 */   public void setMemoryInitialSize(String paramString) { this.memoryInitialSize = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 331 */   public String getMemoryInitialSize() { return this.memoryInitialSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 338 */   public void setMemoryMaximumSize(String paramString) { this.memoryMaximumSize = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   public String getMemoryMaximumSize() { return this.memoryMaximumSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 350 */   public void setEncoding(String paramString) { this.encoding = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 362 */   public void setDebug(boolean paramBoolean) { this.debug = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 367 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 374 */   public void setOptimize(boolean paramBoolean) { this.optimize = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 379 */   public boolean getOptimize() { return this.optimize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 386 */   public void setDepend(boolean paramBoolean) { this.depend = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 391 */   public boolean getDepend() { return this.depend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 398 */   public void setVerbose(boolean paramBoolean) { this.verbose = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 403 */   public boolean getVerbose() { return this.verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 411 */   public void setTarget(String paramString) { this.target = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 416 */   public String getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 423 */   public void setIncludeantruntime(boolean paramBoolean) { this.includeAntRuntime = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 431 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 439 */   public void setIncludejavaruntime(boolean paramBoolean) { this.includeJavaRuntime = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 447 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 455 */   public void setFork(boolean paramBoolean) { this.fork = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 462 */   public boolean isForkedJavac() { return (this.fork || ""extJavac"".equals(this.project.getProperty(""build.compiler""))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 471 */   public void setNowarn(boolean paramBoolean) { this.nowarn = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 478 */   public boolean getNowarn() { return this.nowarn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 487 */     if (this.src == null) {
/* 488 */       throw new BuildException(""srcdir attribute must be set!"", this.location);
/*     */     }
/* 490 */     String[] arrayOfString = this.src.list();
/* 491 */     if (arrayOfString.length == 0) {
/* 492 */       throw new BuildException(""srcdir attribute must be set!"", this.location);
/*     */     }
/*     */     
/* 495 */     if (this.destDir != null && !this.destDir.isDirectory()) {
/* 496 */       throw new BuildException(""destination directory \"""" + this.destDir + ""\"" does not exist or is not a directory"", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 501 */     resetFileLists();
/* 502 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 503 */       File file = this.project.resolveFile(arrayOfString[b]);
/* 504 */       if (!file.exists()) {
/* 505 */         throw new BuildException(""srcdir \"""" + file.getPath() + ""\"" does not exist!"", this.location);
/*     */       }
/*     */       
/* 508 */       DirectoryScanner directoryScanner = getDirectoryScanner(file);
/*     */       
/* 510 */       String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/*     */       
/* 512 */       scanDir(file, (this.destDir != null) ? this.destDir : file, arrayOfString1);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 517 */     String str = this.project.getProperty(""build.compiler"");
/*     */     
/* 519 */     if (this.fork) {
/* 520 */       if (str != null) {
/* 521 */         if (isJdkCompiler(str)) {
/* 522 */           log(""Since fork is true, ignoring build.compiler setting."", 1);
/*     */           
/* 524 */           str = ""extJavac"";
/*     */         } else {
/*     */           
/* 527 */           log(""Since build.compiler setting isn't classic or modern, ignoring fork setting."", 1);
/*     */         } 
/*     */       } else {
/*     */         
/* 531 */         str = ""extJavac"";
/*     */       } 
/*     */     }
/*     */     
/* 535 */     if (str == null) {
/* 536 */       if (Project.getJavaVersion() != ""1.1"" && Project.getJavaVersion() != ""1.2"") {
/*     */         
/* 538 */         str = ""modern"";
/*     */       } else {
/* 540 */         str = ""classic"";
/*     */       } 
/*     */     }
/*     */     
/* 544 */     if (this.compileList.length > 0) {
/*     */       
/* 546 */       CompilerAdapter compilerAdapter = CompilerAdapterFactory.getCompiler(str, this);
/*     */       
/* 548 */       log(""Compiling "" + this.compileList.length + "" source file"" + ((this.compileList.length == 1) ? """" : ""s"") + ((this.destDir != null) ? ("" to "" + this.destDir) : """"));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 554 */       compilerAdapter.setJavac(this);
/*     */ 
/*     */       
/* 557 */       if (!compilerAdapter.execute()) {
/* 558 */         if (this.failOnError) {
/* 559 */           throw new BuildException(""Compile failed, messages should have been provided."", this.location);
/*     */         }
/*     */         
/* 562 */         log(""Compile failed, messages should have been provided."", 0);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 572 */   protected void resetFileLists() { this.compileList = new File[0]; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File paramFile1, File paramFile2, String[] paramArrayOfString) {
/* 580 */     GlobPatternMapper globPatternMapper = new GlobPatternMapper();
/* 581 */     globPatternMapper.setFrom(""*.java"");
/* 582 */     globPatternMapper.setTo(""*.class"");
/* 583 */     SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 584 */     File[] arrayOfFile = sourceFileScanner.restrictAsFiles(paramArrayOfString, paramFile1, paramFile2, (FileNameMapper)globPatternMapper);
/*     */     
/* 586 */     if (arrayOfFile.length > 0) {
/* 587 */       File[] arrayOfFile1 = new File[this.compileList.length + arrayOfFile.length];
/*     */       
/* 589 */       System.arraycopy(this.compileList, 0, arrayOfFile1, 0, this.compileList.length);
/*     */       
/* 591 */       System.arraycopy(arrayOfFile, 0, arrayOfFile1, this.compileList.length, arrayOfFile.length);
/*     */       
/* 593 */       this.compileList = arrayOfFile1;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 599 */   public File[] getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */   
/* 603 */   protected boolean isJdkCompiler(String paramString) { return (""modern"".equals(paramString) || ""classic"".equals(paramString) || ""javac1.1"".equals(paramString) || ""javac1.2"".equals(paramString) || ""javac1.3"".equals(paramString) || ""javac1.4"".equals(paramString)); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Javac.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JavacOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class JavacOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private Task task;
/*     */   private StringBuffer line;
/*     */   private boolean errorFlag = false;
/*     */   
/*     */   JavacOutputStream(Task paramTask) {
/*  82 */     this.task = paramTask;
/*  83 */     this.line = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) throws IOException {
/*  93 */     char c = (char)paramInt;
/*  94 */     if (c == '\r' || c == '\n') {
/*     */       
/*  96 */       if (this.line.length() > 0) {
/*  97 */         processLine();
/*     */       }
/*     */     } else {
/* 100 */       this.line.append(c);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processLine() {
/* 109 */     String str = this.line.toString();
/* 110 */     if (str.indexOf(""error"") > -1) {
/* 111 */       this.errorFlag = true;
/*     */     }
/* 113 */     this.task.log(str);
/* 114 */     this.line = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   boolean getErrorFlag() { return this.errorFlag; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\JavacOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javadoc,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileWriter;
/*      */ import java.io.FilenameFilter;
/*      */ import java.io.IOException;
/*      */ import java.io.PrintWriter;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Random;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.ProjectHelper;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.types.Commandline;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.types.FileSet;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.types.Reference;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Javadoc
/*      */   extends Task
/*      */ {
/*      */   public class DocletParam
/*      */   {
/*      */     private String name;
/*      */     private String value;
/*      */     private final Javadoc this$0;
/*      */     
/*   95 */     public DocletParam(Javadoc this$0) { this.this$0 = this$0; }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  100 */     public void setName(String param1String) { this.name = param1String; }
/*      */ 
/*      */ 
/*      */     
/*  104 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */     
/*  108 */     public void setValue(String param1String) { this.value = param1String; }
/*      */ 
/*      */ 
/*      */     
/*  112 */     public String getValue() { return this.value; } }
/*      */   public class DocletInfo { private String name; private Path path;
/*      */     
/*      */     public DocletInfo(Javadoc this$0) {
/*  116 */       this.this$0 = this$0;
/*      */ 
/*      */ 
/*      */       
/*  120 */       this.params = new Vector();
/*      */     }
/*      */     private Vector params; private final Javadoc this$0;
/*  123 */     public void setName(String param1String) { this.name = param1String; }
/*      */ 
/*      */ 
/*      */     
/*  127 */     public String getName() { return this.name; }
/*      */ 
/*      */     
/*      */     public void setPath(Path param1Path) {
/*  131 */       if (this.path == null) {
/*  132 */         this.path = param1Path;
/*      */       } else {
/*  134 */         this.path.append(param1Path);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  139 */     public Path getPath() { return this.path; }
/*      */ 
/*      */     
/*      */     public Path createPath() {
/*  143 */       if (this.path == null) {
/*  144 */         this.path = new Path(this.this$0.getProject());
/*      */       }
/*  146 */       return this.path.createPath();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  153 */     public void setPathRef(Reference param1Reference) { createPath().setRefid(param1Reference); }
/*      */ 
/*      */     
/*      */     public Javadoc.DocletParam createParam() {
/*  157 */       Javadoc.DocletParam docletParam = new Javadoc.DocletParam(this.this$0);
/*  158 */       this.params.addElement(docletParam);
/*      */       
/*  160 */       return docletParam;
/*      */     }
/*      */ 
/*      */     
/*  164 */     public Enumeration getParams() { return this.params.elements(); } }
/*      */ 
/*      */   
/*      */   public static class PackageName
/*      */   {
/*      */     private String name;
/*      */     
/*  171 */     public void setName(String param1String) { this.name = param1String; }
/*      */ 
/*      */     
/*  174 */     public String getName() { return this.name; }
/*      */ 
/*      */     
/*  177 */     public String toString() { return getName(); }
/*      */   }
/*      */   
/*      */   public static class SourceFile
/*      */   {
/*      */     private File file;
/*      */     
/*  184 */     public void setFile(File param1File) { this.file = param1File; }
/*      */ 
/*      */     
/*  187 */     public File getFile() { return this.file; }
/*      */   }
/*      */   
/*      */   public static class Html
/*      */   {
/*  192 */     private StringBuffer text = new StringBuffer();
/*      */     
/*  194 */     public void addText(String param1String) { this.text.append(param1String); }
/*      */ 
/*      */     
/*  197 */     public String getText() { return this.text.toString(); }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public static class AccessType
/*      */     extends EnumeratedAttribute
/*      */   {
/*  205 */     public String[] getValues() { return new String[] { ""protected"", ""public"", ""package"", ""private"" }; }
/*      */   }
/*      */ 
/*      */   
/*  209 */   private Commandline cmd = new Commandline();
/*  210 */   private static boolean javadoc1 = (Project.getJavaVersion() == ""1.1"");
/*      */ 
/*      */ 
/*      */   
/*      */   private void addArgIf(boolean paramBoolean, String paramString) {
/*  215 */     if (paramBoolean) {
/*  216 */       this.cmd.createArgument().setValue(paramString);
/*      */     }
/*      */   }
/*      */   
/*      */   private void add12ArgIfNotEmpty(String paramString1, String paramString2) {
/*  221 */     if (!javadoc1) {
/*  222 */       if (paramString2 != null && paramString2.length() != 0) {
/*  223 */         this.cmd.createArgument().setValue(paramString1);
/*  224 */         this.cmd.createArgument().setValue(paramString2);
/*      */       } else {
/*  226 */         this.project.log(this, ""Warning: Leaving out empty argument '"" + paramString1 + ""'"", 1);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private void add11ArgIf(boolean paramBoolean, String paramString) {
/*  234 */     if (javadoc1 && paramBoolean) {
/*  235 */       this.cmd.createArgument().setValue(paramString);
/*      */     }
/*      */   }
/*      */   
/*      */   private void add12ArgIf(boolean paramBoolean, String paramString) {
/*  240 */     if (!javadoc1 && paramBoolean) {
/*  241 */       this.cmd.createArgument().setValue(paramString);
/*      */     }
/*      */   }
/*      */   
/*      */   private boolean foundJavaFile = false;
/*      */   private boolean failOnError = false;
/*  247 */   private Path sourcePath = null;
/*  248 */   private File destDir = null;
/*  249 */   private Vector sourceFiles = new Vector();
/*  250 */   private Vector packageNames = new Vector(5);
/*  251 */   private Vector excludePackageNames = new Vector(1);
/*      */   private boolean author = true;
/*      */   private boolean version = true;
/*  254 */   private DocletInfo doclet = null;
/*  255 */   private Path classpath = null;
/*  256 */   private Path bootclasspath = null;
/*  257 */   private String group = null;
/*  258 */   private Vector compileList = new Vector(10);
/*  259 */   private String packageList = null;
/*  260 */   private Vector links = new Vector(2);
/*  261 */   private Vector groups = new Vector(2);
/*      */   private boolean useDefaultExcludes = true;
/*  263 */   private Html doctitle = null;
/*  264 */   private Html header = null;
/*  265 */   private Html footer = null;
/*  266 */   private Html bottom = null;
/*      */   private boolean useExternalFile = false;
/*  268 */   private File tmpList = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setUseExternalFile(boolean paramBoolean) {
/*  275 */     if (!javadoc1) {
/*  276 */       this.useExternalFile = paramBoolean;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  288 */   public void setDefaultexcludes(boolean paramBoolean) { this.useDefaultExcludes = paramBoolean; }
/*      */ 
/*      */   
/*      */   public void setMaxmemory(String paramString) {
/*  292 */     if (javadoc1) {
/*  293 */       this.cmd.createArgument().setValue(""-J-mx"" + paramString);
/*      */     } else {
/*  295 */       this.cmd.createArgument().setValue(""-J-Xmx"" + paramString);
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*  300 */   public void setAdditionalparam(String paramString) { this.cmd.createArgument().setLine(paramString); }
/*      */ 
/*      */   
/*      */   public void setSourcepath(Path paramPath) {
/*  304 */     if (this.sourcePath == null) {
/*  305 */       this.sourcePath = paramPath;
/*      */     } else {
/*  307 */       this.sourcePath.append(paramPath);
/*      */     } 
/*      */   }
/*      */   public Path createSourcepath() {
/*  311 */     if (this.sourcePath == null) {
/*  312 */       this.sourcePath = new Path(this.project);
/*      */     }
/*  314 */     return this.sourcePath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  321 */   public void setSourcepathRef(Reference paramReference) { createSourcepath().setRefid(paramReference); }
/*      */ 
/*      */   
/*      */   public void setDestdir(File paramFile) {
/*  325 */     this.destDir = paramFile;
/*  326 */     this.cmd.createArgument().setValue(""-d"");
/*  327 */     this.cmd.createArgument().setFile(this.destDir);
/*      */   }
/*      */   public void setSourcefiles(String paramString) {
/*  330 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, "","");
/*  331 */     while (stringTokenizer.hasMoreTokens()) {
/*  332 */       String str = stringTokenizer.nextToken();
/*  333 */       SourceFile sourceFile = new SourceFile();
/*  334 */       sourceFile.setFile(this.project.resolveFile(str));
/*  335 */       addSource(sourceFile);
/*      */     } 
/*      */   }
/*      */   
/*  339 */   public void addSource(SourceFile paramSourceFile) { this.sourceFiles.addElement(paramSourceFile); }
/*      */   
/*      */   public void setPackagenames(String paramString) {
/*  342 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, "","");
/*  343 */     while (stringTokenizer.hasMoreTokens()) {
/*  344 */       String str = stringTokenizer.nextToken();
/*  345 */       PackageName packageName = new PackageName();
/*  346 */       packageName.setName(str);
/*  347 */       addPackage(packageName);
/*      */     } 
/*      */   }
/*      */   
/*  351 */   public void addPackage(PackageName paramPackageName) { this.packageNames.addElement(paramPackageName); }
/*      */ 
/*      */   
/*      */   public void setExcludePackageNames(String paramString) {
/*  355 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, "","");
/*  356 */     while (stringTokenizer.hasMoreTokens()) {
/*  357 */       String str = stringTokenizer.nextToken();
/*  358 */       PackageName packageName = new PackageName();
/*  359 */       packageName.setName(str);
/*  360 */       addExcludePackage(packageName);
/*      */     } 
/*      */   }
/*      */   
/*  364 */   public void addExcludePackage(PackageName paramPackageName) { this.excludePackageNames.addElement(paramPackageName); }
/*      */ 
/*      */   
/*      */   public void setOverview(File paramFile) {
/*  368 */     if (!javadoc1) {
/*  369 */       this.cmd.createArgument().setValue(""-overview"");
/*  370 */       this.cmd.createArgument().setFile(paramFile);
/*      */     } 
/*      */   }
/*      */   
/*  374 */   public void setPublic(boolean paramBoolean) { addArgIf(paramBoolean, ""-public""); }
/*      */ 
/*      */   
/*  377 */   public void setProtected(boolean paramBoolean) { addArgIf(paramBoolean, ""-protected""); }
/*      */ 
/*      */   
/*  380 */   public void setPackage(boolean paramBoolean) { addArgIf(paramBoolean, ""-package""); }
/*      */ 
/*      */   
/*  383 */   public void setPrivate(boolean paramBoolean) { addArgIf(paramBoolean, ""-private""); }
/*      */ 
/*      */   
/*  386 */   public void setAccess(AccessType paramAccessType) { this.cmd.createArgument().setValue(""-"" + paramAccessType.getValue()); }
/*      */   
/*      */   public void setDoclet(String paramString) {
/*  389 */     if (this.doclet == null) {
/*  390 */       this.doclet = new DocletInfo(this);
/*      */     }
/*  392 */     this.doclet.setName(paramString);
/*      */   }
/*      */   
/*      */   public void setDocletPath(Path paramPath) {
/*  396 */     if (this.doclet == null) {
/*  397 */       this.doclet = new DocletInfo(this);
/*      */     }
/*  399 */     this.doclet.setPath(paramPath);
/*      */   }
/*      */   
/*      */   public void setDocletPathRef(Reference paramReference) {
/*  403 */     if (this.doclet == null) {
/*  404 */       this.doclet = new DocletInfo(this);
/*      */     }
/*  406 */     this.doclet.createPath().setRefid(paramReference);
/*      */   }
/*      */   
/*      */   public DocletInfo createDoclet() {
/*  410 */     this.doclet = new DocletInfo(this);
/*  411 */     return this.doclet;
/*      */   }
/*      */ 
/*      */   
/*  415 */   public void setOld(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-1.1""); }
/*      */   
/*      */   public void setClasspath(Path paramPath) {
/*  418 */     if (this.classpath == null) {
/*  419 */       this.classpath = paramPath;
/*      */     } else {
/*  421 */       this.classpath.append(paramPath);
/*      */     } 
/*      */   }
/*      */   public Path createClasspath() {
/*  425 */     if (this.classpath == null) {
/*  426 */       this.classpath = new Path(this.project);
/*      */     }
/*  428 */     return this.classpath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  435 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*      */ 
/*      */   
/*      */   public void setBootclasspath(Path paramPath) {
/*  439 */     if (this.bootclasspath == null) {
/*  440 */       this.bootclasspath = paramPath;
/*      */     } else {
/*  442 */       this.bootclasspath.append(paramPath);
/*      */     } 
/*      */   }
/*      */   public Path createBootclasspath() {
/*  446 */     if (this.bootclasspath == null) {
/*  447 */       this.bootclasspath = new Path(this.project);
/*      */     }
/*  449 */     return this.bootclasspath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  456 */   public void setBootClasspathRef(Reference paramReference) { createBootclasspath().setRefid(paramReference); }
/*      */ 
/*      */   
/*      */   public void setExtdirs(String paramString) {
/*  460 */     if (!javadoc1) {
/*  461 */       this.cmd.createArgument().setValue(""-extdirs"");
/*  462 */       this.cmd.createArgument().setValue(paramString);
/*      */     } 
/*      */   }
/*      */   
/*  466 */   public void setVerbose(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-verbose""); }
/*      */   
/*      */   public void setLocale(String paramString) {
/*  469 */     if (!javadoc1) {
/*  470 */       this.cmd.createArgument().setValue(""-locale"");
/*  471 */       this.cmd.createArgument().setValue(paramString);
/*      */     } 
/*      */   }
/*      */   public void setEncoding(String paramString) {
/*  475 */     this.cmd.createArgument().setValue(""-encoding"");
/*  476 */     this.cmd.createArgument().setValue(paramString);
/*      */   }
/*      */   
/*  479 */   public void setVersion(boolean paramBoolean) { this.version = paramBoolean; }
/*      */ 
/*      */   
/*  482 */   public void setUse(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-use""); }
/*      */ 
/*      */   
/*  485 */   public void setAuthor(boolean paramBoolean) { this.author = paramBoolean; }
/*      */ 
/*      */   
/*  488 */   public void setSplitindex(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-splitindex""); }
/*      */ 
/*      */   
/*  491 */   public void setWindowtitle(String paramString) { add12ArgIfNotEmpty(""-windowtitle"", paramString); }
/*      */   
/*      */   public void setDoctitle(String paramString) {
/*  494 */     Html html = new Html();
/*  495 */     html.addText(paramString);
/*  496 */     addDoctitle(html);
/*      */   }
/*      */   public void addDoctitle(Html paramHtml) {
/*  499 */     if (!javadoc1)
/*  500 */       this.doctitle = paramHtml; 
/*      */   }
/*      */   
/*      */   public void setHeader(String paramString) {
/*  504 */     Html html = new Html();
/*  505 */     html.addText(paramString);
/*  506 */     addHeader(html);
/*      */   }
/*      */   public void addHeader(Html paramHtml) {
/*  509 */     if (!javadoc1) {
/*  510 */       this.header = paramHtml;
/*      */     }
/*      */   }
/*      */   
/*      */   public void setFooter(String paramString) {
/*  515 */     Html html = new Html();
/*  516 */     html.addText(paramString);
/*  517 */     addFooter(html);
/*      */   }
/*      */   public void addFooter(Html paramHtml) {
/*  520 */     if (!javadoc1) {
/*  521 */       this.footer = paramHtml;
/*      */     }
/*      */   }
/*      */   
/*      */   public void setBottom(String paramString) {
/*  526 */     Html html = new Html();
/*  527 */     html.addText(paramString);
/*  528 */     addBottom(html);
/*      */   }
/*      */   public void addBottom(Html paramHtml) {
/*  531 */     if (!javadoc1) {
/*  532 */       this.bottom = paramHtml;
/*      */     }
/*      */   }
/*      */   
/*      */   public void setLinkoffline(String paramString) {
/*  537 */     if (!javadoc1) {
/*  538 */       LinkArgument linkArgument = createLink();
/*  539 */       linkArgument.setOffline(true);
/*  540 */       String str = ""The linkoffline attribute must include a URL and a package-list file location separated by a space"";
/*      */       
/*  542 */       if (paramString.trim().length() == 0) {
/*  543 */         throw new BuildException(str);
/*      */       }
/*  545 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "" "", false);
/*  546 */       linkArgument.setHref(stringTokenizer.nextToken());
/*      */       
/*  548 */       if (!stringTokenizer.hasMoreTokens()) {
/*  549 */         throw new BuildException(str);
/*      */       }
/*  551 */       linkArgument.setPackagelistLoc(this.project.resolveFile(stringTokenizer.nextToken()));
/*      */     } 
/*      */   }
/*      */   
/*  555 */   public void setGroup(String paramString) { this.group = paramString; }
/*      */   
/*      */   public void setLink(String paramString) {
/*  558 */     if (!javadoc1) {
/*  559 */       createLink().setHref(paramString);
/*      */     }
/*      */   }
/*      */   
/*  563 */   public void setNodeprecated(boolean paramBoolean) { addArgIf(paramBoolean, ""-nodeprecated""); }
/*      */ 
/*      */   
/*  566 */   public void setNodeprecatedlist(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-nodeprecatedlist""); }
/*      */ 
/*      */   
/*  569 */   public void setNotree(boolean paramBoolean) { addArgIf(paramBoolean, ""-notree""); }
/*      */ 
/*      */   
/*  572 */   public void setNoindex(boolean paramBoolean) { addArgIf(paramBoolean, ""-noindex""); }
/*      */ 
/*      */   
/*  575 */   public void setNohelp(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-nohelp""); }
/*      */ 
/*      */   
/*  578 */   public void setNonavbar(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-nonavbar""); }
/*      */ 
/*      */   
/*  581 */   public void setSerialwarn(boolean paramBoolean) { add12ArgIf(paramBoolean, ""-serialwarn""); }
/*      */   
/*      */   public void setStylesheetfile(File paramFile) {
/*  584 */     if (!javadoc1) {
/*  585 */       this.cmd.createArgument().setValue(""-stylesheetfile"");
/*  586 */       this.cmd.createArgument().setFile(paramFile);
/*      */     } 
/*      */   }
/*      */   public void setHelpfile(File paramFile) {
/*  590 */     if (!javadoc1) {
/*  591 */       this.cmd.createArgument().setValue(""-helpfile"");
/*  592 */       this.cmd.createArgument().setFile(paramFile);
/*      */     } 
/*      */   }
/*      */   public void setDocencoding(String paramString) {
/*  596 */     this.cmd.createArgument().setValue(""-docencoding"");
/*  597 */     this.cmd.createArgument().setValue(paramString);
/*      */   }
/*      */   
/*  600 */   public void setPackageList(String paramString) { this.packageList = paramString; }
/*      */ 
/*      */   
/*      */   public LinkArgument createLink() {
/*  604 */     LinkArgument linkArgument = new LinkArgument(this);
/*  605 */     this.links.addElement(linkArgument);
/*  606 */     return linkArgument;
/*      */   }
/*      */   public class LinkArgument { private String href;
/*      */     private boolean offline;
/*      */     private File packagelistLoc;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public LinkArgument(Javadoc this$0) {
/*  614 */       this.this$0 = this$0;
/*      */       this.offline = false;
/*      */     }
/*      */     
/*  618 */     public void setHref(String param1String) { this.href = param1String; }
/*      */ 
/*      */ 
/*      */     
/*  622 */     public String getHref() { return this.href; }
/*      */ 
/*      */ 
/*      */     
/*  626 */     public void setPackagelistLoc(File param1File) { this.packagelistLoc = param1File; }
/*      */ 
/*      */ 
/*      */     
/*  630 */     public File getPackagelistLoc() { return this.packagelistLoc; }
/*      */ 
/*      */ 
/*      */     
/*  634 */     public void setOffline(boolean param1Boolean) { this.offline = param1Boolean; }
/*      */ 
/*      */ 
/*      */     
/*  638 */     public boolean isLinkOffline() { return this.offline; } }
/*      */ 
/*      */ 
/*      */   
/*      */   public GroupArgument createGroup() {
/*  643 */     GroupArgument groupArgument = new GroupArgument(this);
/*  644 */     this.groups.addElement(groupArgument);
/*  645 */     return groupArgument;
/*      */   }
/*      */   public class GroupArgument { private Javadoc.Html title;
/*      */     private Vector packages;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public GroupArgument(Javadoc this$0) {
/*  652 */       this.this$0 = this$0;
/*      */       this.packages = new Vector(3);
/*      */     }
/*      */     public void setTitle(String param1String) {
/*  656 */       Javadoc.Html html = new Javadoc.Html();
/*  657 */       html.addText(param1String);
/*  658 */       addTitle(html);
/*      */     }
/*      */     
/*  661 */     public void addTitle(Javadoc.Html param1Html) { this.title = param1Html; }
/*      */ 
/*      */ 
/*      */     
/*  665 */     public String getTitle() { return (this.title != null) ? this.title.getText() : null; }
/*      */ 
/*      */     
/*      */     public void setPackages(String param1String) {
/*  669 */       StringTokenizer stringTokenizer = new StringTokenizer(param1String, "","");
/*  670 */       while (stringTokenizer.hasMoreTokens()) {
/*  671 */         String str = stringTokenizer.nextToken();
/*  672 */         Javadoc.PackageName packageName = new Javadoc.PackageName();
/*  673 */         packageName.setName(str);
/*  674 */         addPackage(packageName);
/*      */       } 
/*      */     }
/*      */     
/*  678 */     public void addPackage(Javadoc.PackageName param1PackageName) { this.packages.addElement(param1PackageName); }
/*      */ 
/*      */     
/*      */     public String getPackages() {
/*  682 */       StringBuffer stringBuffer = new StringBuffer();
/*  683 */       for (byte b = 0; b < this.packages.size(); b++) {
/*  684 */         if (b > 0) {
/*  685 */           stringBuffer.append("":"");
/*      */         }
/*  687 */         stringBuffer.append(this.packages.elementAt(b).toString());
/*      */       } 
/*  689 */       return stringBuffer.toString();
/*      */     } }
/*      */ 
/*      */ 
/*      */   
/*  694 */   public void setCharset(String paramString) { add12ArgIfNotEmpty(""-charset"", paramString); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  704 */   public void setFailonerror(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/*  708 */     if (""javadoc2"".equals(this.taskType)) {
/*  709 */       log(""!! javadoc2 is deprecated. Use javadoc instead. !!"");
/*      */     }
/*      */     
/*  712 */     if (this.sourcePath == null) {
/*  713 */       String str = ""sourcePath attribute must be set!"";
/*  714 */       throw new BuildException(str);
/*      */     } 
/*      */     
/*  717 */     log(""Generating Javadoc"", 2);
/*      */     
/*  719 */     if (this.doctitle != null) {
/*  720 */       this.cmd.createArgument().setValue(""-doctitle"");
/*  721 */       this.cmd.createArgument().setValue(expand(this.doctitle.getText()));
/*      */     } 
/*  723 */     if (this.header != null) {
/*  724 */       this.cmd.createArgument().setValue(""-header"");
/*  725 */       this.cmd.createArgument().setValue(expand(this.header.getText()));
/*      */     } 
/*  727 */     if (this.footer != null) {
/*  728 */       this.cmd.createArgument().setValue(""-footer"");
/*  729 */       this.cmd.createArgument().setValue(expand(this.footer.getText()));
/*      */     } 
/*  731 */     if (this.bottom != null) {
/*  732 */       this.cmd.createArgument().setValue(""-bottom"");
/*  733 */       this.cmd.createArgument().setValue(expand(this.bottom.getText()));
/*      */     } 
/*      */     
/*  736 */     Commandline commandline = (Commandline)this.cmd.clone();
/*  737 */     commandline.setExecutable(getJavadocExecutableName());
/*      */ 
/*      */     
/*  740 */     if (this.classpath == null) {
/*  741 */       this.classpath = Path.systemClasspath;
/*      */     } else {
/*  743 */       this.classpath = this.classpath.concatSystemClasspath(""ignore"");
/*      */     } 
/*  745 */     if (!javadoc1) {
/*  746 */       commandline.createArgument().setValue(""-classpath"");
/*  747 */       commandline.createArgument().setPath(this.classpath);
/*  748 */       commandline.createArgument().setValue(""-sourcepath"");
/*  749 */       commandline.createArgument().setPath(this.sourcePath);
/*      */     } else {
/*  751 */       commandline.createArgument().setValue(""-classpath"");
/*  752 */       commandline.createArgument().setValue(this.sourcePath.toString() + System.getProperty(""path.separator"") + this.classpath.toString());
/*      */     } 
/*      */ 
/*      */     
/*  756 */     if (this.version && this.doclet == null)
/*  757 */       commandline.createArgument().setValue(""-version""); 
/*  758 */     if (this.author && this.doclet == null) {
/*  759 */       commandline.createArgument().setValue(""-author"");
/*      */     }
/*  761 */     if ((javadoc1 || this.doclet == null) && 
/*  762 */       this.destDir == null) {
/*  763 */       String str = ""destDir attribute must be set!"";
/*  764 */       throw new BuildException(str);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  773 */     if (!javadoc1) {
/*  774 */       if (this.doclet != null) {
/*  775 */         if (this.doclet.getName() == null) {
/*  776 */           throw new BuildException(""The doclet name must be specified."", this.location);
/*      */         }
/*      */         
/*  779 */         commandline.createArgument().setValue(""-doclet"");
/*  780 */         commandline.createArgument().setValue(this.doclet.getName());
/*  781 */         if (this.doclet.getPath() != null) {
/*  782 */           commandline.createArgument().setValue(""-docletpath"");
/*  783 */           commandline.createArgument().setPath(this.doclet.getPath());
/*      */         } 
/*  785 */         for (Enumeration enumeration = this.doclet.getParams(); enumeration.hasMoreElements(); ) {
/*  786 */           DocletParam docletParam = enumeration.nextElement();
/*  787 */           if (docletParam.getName() == null) {
/*  788 */             throw new BuildException(""Doclet parameters must have a name"");
/*      */           }
/*      */           
/*  791 */           commandline.createArgument().setValue(docletParam.getName());
/*  792 */           if (docletParam.getValue() != null) {
/*  793 */             commandline.createArgument().setValue(docletParam.getValue());
/*      */           }
/*      */         } 
/*      */       } 
/*      */       
/*  798 */       if (this.bootclasspath != null) {
/*  799 */         commandline.createArgument().setValue(""-bootclasspath"");
/*  800 */         commandline.createArgument().setPath(this.bootclasspath);
/*      */       } 
/*      */ 
/*      */       
/*  804 */       if (this.links.size() != 0) {
/*  805 */         for (Enumeration enumeration = this.links.elements(); enumeration.hasMoreElements(); ) {
/*  806 */           LinkArgument linkArgument = enumeration.nextElement();
/*      */           
/*  808 */           if (linkArgument.getHref() == null) {
/*  809 */             throw new BuildException(""Links must provide the URL to the external class documentation."");
/*      */           }
/*      */           
/*  812 */           if (linkArgument.isLinkOffline()) {
/*  813 */             File file1 = linkArgument.getPackagelistLoc();
/*  814 */             if (file1 == null) {
/*  815 */               throw new BuildException(""The package list location for link "" + linkArgument.getHref() + "" must be provided because the link is offline"");
/*      */             }
/*      */             
/*  818 */             File file2 = new File(file1, ""package-list"");
/*  819 */             if (file2.exists()) {
/*  820 */               commandline.createArgument().setValue(""-linkoffline"");
/*  821 */               commandline.createArgument().setValue(linkArgument.getHref());
/*  822 */               commandline.createArgument().setValue(file1.getAbsolutePath());
/*      */               continue;
/*      */             } 
/*  825 */             log(""Warning: No package list was found at "" + file1, 3);
/*      */             
/*      */             continue;
/*      */           } 
/*      */           
/*  830 */           commandline.createArgument().setValue(""-link"");
/*  831 */           commandline.createArgument().setValue(linkArgument.getHref());
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  847 */       if (this.group != null) {
/*  848 */         StringTokenizer stringTokenizer = new StringTokenizer(this.group, "","", false);
/*  849 */         while (stringTokenizer.hasMoreTokens()) {
/*  850 */           String str = stringTokenizer.nextToken().trim();
/*  851 */           int i = str.indexOf("" "");
/*  852 */           if (i > 0) {
/*  853 */             String str1 = str.substring(0, i);
/*  854 */             String str2 = str.substring(i + 1);
/*  855 */             commandline.createArgument().setValue(""-group"");
/*  856 */             commandline.createArgument().setValue(str1);
/*  857 */             commandline.createArgument().setValue(str2);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  863 */       if (this.groups.size() != 0) {
/*  864 */         for (Enumeration enumeration = this.groups.elements(); enumeration.hasMoreElements(); ) {
/*  865 */           GroupArgument groupArgument = enumeration.nextElement();
/*  866 */           String str1 = groupArgument.getTitle();
/*  867 */           String str2 = groupArgument.getPackages();
/*  868 */           if (str1 == null || str2 == null) {
/*  869 */             throw new BuildException(""The title and packages must be specified for group elements."");
/*      */           }
/*  871 */           commandline.createArgument().setValue(""-group"");
/*  872 */           commandline.createArgument().setValue(expand(str1));
/*  873 */           commandline.createArgument().setValue(str2);
/*      */         } 
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  879 */     this.tmpList = null;
/*  880 */     if (this.packageNames.size() > 0) {
/*  881 */       Vector vector1 = new Vector();
/*  882 */       Enumeration enumeration = this.packageNames.elements();
/*  883 */       while (enumeration.hasMoreElements()) {
/*  884 */         PackageName packageName = enumeration.nextElement();
/*  885 */         String str = packageName.getName().trim();
/*  886 */         if (str.endsWith("".*"")) {
/*  887 */           vector1.addElement(str); continue;
/*      */         } 
/*  889 */         commandline.createArgument().setValue(str);
/*      */       } 
/*      */ 
/*      */       
/*  893 */       Vector vector2 = new Vector();
/*  894 */       if (this.excludePackageNames.size() > 0) {
/*  895 */         enumeration = this.excludePackageNames.elements();
/*  896 */         while (enumeration.hasMoreElements()) {
/*  897 */           PackageName packageName = enumeration.nextElement();
/*  898 */           vector2.addElement(packageName.getName().trim());
/*      */         } 
/*      */       } 
/*  901 */       if (vector1.size() > 0) {
/*  902 */         evaluatePackages(commandline, this.sourcePath, vector1, vector2);
/*      */       }
/*      */     } 
/*      */     
/*  906 */     if (this.sourceFiles.size() > 0) {
/*  907 */       PrintWriter printWriter = null;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       try {
/*  913 */         if (this.useExternalFile) {
/*  914 */           if (this.tmpList == null) {
/*  915 */             this.tmpList = createTempFile();
/*  916 */             commandline.createArgument().setValue(""@"" + this.tmpList.getAbsolutePath());
/*      */           } 
/*  918 */           printWriter = new PrintWriter(new FileWriter(this.tmpList.getAbsolutePath(), true));
/*      */         } 
/*      */ 
/*      */         
/*  922 */         Enumeration enumeration = this.sourceFiles.elements();
/*  923 */         while (enumeration.hasMoreElements()) {
/*  924 */           SourceFile sourceFile = enumeration.nextElement();
/*  925 */           String str = sourceFile.getFile().getAbsolutePath();
/*  926 */           if (this.useExternalFile) {
/*  927 */             printWriter.println(str); continue;
/*      */           } 
/*  929 */           commandline.createArgument().setValue(str);
/*      */         }
/*      */       
/*      */       } catch (IOException iOException) {
/*      */         
/*  934 */         throw new BuildException(""Error creating temporary file"", iOException, this.location);
/*      */       } finally {
/*      */         
/*  937 */         if (printWriter != null) {
/*  938 */           printWriter.close();
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/*  943 */     if (this.packageList != null) {
/*  944 */       commandline.createArgument().setValue(""@"" + this.packageList);
/*      */     }
/*  946 */     log(""Javadoc args: "" + commandline, 3);
/*      */     
/*  948 */     log(""Javadoc execution"", 2);
/*      */     
/*  950 */     JavadocOutputStream javadocOutputStream1 = new JavadocOutputStream(this, 2);
/*  951 */     JavadocOutputStream javadocOutputStream2 = new JavadocOutputStream(this, 1);
/*  952 */     Execute execute = new Execute(new PumpStreamHandler(javadocOutputStream1, javadocOutputStream2));
/*  953 */     execute.setAntRun(this.project);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  961 */     execute.setWorkingDirectory(null);
/*      */     try {
/*  963 */       execute.setCommandline(commandline.getCommandline());
/*  964 */       int i = execute.execute();
/*  965 */       if (i != 0 && this.failOnError) {
/*  966 */         throw new BuildException(""Javadoc returned "" + i, this.location);
/*      */       }
/*      */     } catch (IOException iOException) {
/*  969 */       throw new BuildException(""Javadoc failed: "" + iOException, iOException, this.location);
/*      */     } finally {
/*      */       
/*  972 */       if (this.tmpList != null) {
/*  973 */         this.tmpList.delete();
/*  974 */         this.tmpList = null;
/*      */       } 
/*      */       
/*  977 */       javadocOutputStream1.logFlush();
/*  978 */       javadocOutputStream2.logFlush();
/*      */       try {
/*  980 */         javadocOutputStream1.close();
/*  981 */         javadocOutputStream2.close();
/*  982 */       } catch (IOException iOException) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void evaluatePackages(Commandline paramCommandline, Path paramPath, Vector paramVector1, Vector paramVector2) {
/*  993 */     log(""Source path = "" + paramPath.toString(), 3);
/*  994 */     StringBuffer stringBuffer = new StringBuffer(""Packages = "");
/*  995 */     for (byte b1 = 0; b1 < paramVector1.size(); b1++) {
/*  996 */       if (b1 > 0) {
/*  997 */         stringBuffer.append("","");
/*      */       }
/*  999 */       stringBuffer.append(paramVector1.elementAt(b1));
/*      */     } 
/* 1001 */     log(stringBuffer.toString(), 3);
/*      */     
/* 1003 */     stringBuffer.setLength(0);
/* 1004 */     stringBuffer.append(""Exclude Packages = "");
/* 1005 */     for (byte b2 = 0; b2 < paramVector2.size(); b2++) {
/* 1006 */       if (b2 > 0) {
/* 1007 */         stringBuffer.append("","");
/*      */       }
/* 1009 */       stringBuffer.append(paramVector2.elementAt(b2));
/*      */     } 
/* 1011 */     log(stringBuffer.toString(), 3);
/*      */     
/* 1013 */     Vector vector = new Vector();
/*      */     
/* 1015 */     String[] arrayOfString = paramPath.list();
/* 1016 */     if (arrayOfString == null) arrayOfString = new String[0];
/*      */     
/* 1018 */     FileSet fileSet = new FileSet();
/* 1019 */     fileSet.setDefaultexcludes(this.useDefaultExcludes);
/*      */     
/* 1021 */     Enumeration enumeration = paramVector1.elements();
/* 1022 */     while (enumeration.hasMoreElements()) {
/* 1023 */       String str = enumeration.nextElement();
/* 1024 */       str = str.replace('.', '/');
/* 1025 */       if (str.endsWith(""*"")) {
/* 1026 */         str = str + ""*"";
/*      */       }
/*      */       
/* 1029 */       fileSet.createInclude().setName(str);
/*      */     } 
/*      */     
/* 1032 */     enumeration = paramVector2.elements();
/* 1033 */     while (enumeration.hasMoreElements()) {
/* 1034 */       String str = enumeration.nextElement();
/* 1035 */       str = str.replace('.', '/');
/* 1036 */       if (str.endsWith(""*"")) {
/* 1037 */         str = str + ""*"";
/*      */       }
/*      */       
/* 1040 */       fileSet.createExclude().setName(str);
/*      */     } 
/*      */     
/* 1043 */     PrintWriter printWriter = null;
/*      */     try {
/* 1045 */       if (this.useExternalFile) {
/* 1046 */         this.tmpList = createTempFile();
/* 1047 */         paramCommandline.createArgument().setValue(""@"" + this.tmpList.getAbsolutePath());
/* 1048 */         printWriter = new PrintWriter(new FileWriter(this.tmpList));
/*      */       } 
/*      */ 
/*      */       
/* 1052 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 1053 */         File file = this.project.resolveFile(arrayOfString[b]);
/* 1054 */         fileSet.setDir(file);
/*      */         
/* 1056 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 1057 */         String[] arrayOfString1 = directoryScanner.getIncludedDirectories();
/*      */         
/* 1059 */         for (byte b3 = 0; b3 < arrayOfString1.length; b3++) {
/* 1060 */           File file1 = new File(file, arrayOfString1[b3]);
/* 1061 */           String[] arrayOfString2 = file1.list(new FilenameFilter(this) { private final Javadoc this$0;
/*      */                 public boolean accept(File param1File, String param1String) {
/* 1063 */                   if (param1String.endsWith("".java"")) {
/* 1064 */                     return true;
/*      */                   }
/* 1066 */                   return false;
/*      */                 } }
/*      */             );
/*      */           
/* 1070 */           if (arrayOfString2.length > 0) {
/* 1071 */             String str = arrayOfString1[b3].replace('/', '.').replace('\\', '.');
/* 1072 */             if (!vector.contains(str)) {
/* 1073 */               if (this.useExternalFile) {
/* 1074 */                 printWriter.println(str);
/*      */               } else {
/* 1076 */                 paramCommandline.createArgument().setValue(str);
/*      */               } 
/* 1078 */               vector.addElement(str);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       } 
/*      */     } catch (IOException iOException) {
/* 1084 */       throw new BuildException(""Error creating temporary file"", iOException, this.location);
/*      */     } finally {
/*      */       
/* 1087 */       if (printWriter != null)
/* 1088 */         printWriter.close(); 
/*      */     } 
/*      */   }
/*      */   private class JavadocOutputStream extends LogOutputStream { private String queuedLine;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     JavadocOutputStream(Javadoc this$0, int param1Int) {
/* 1095 */       super(this$0, param1Int);
/*      */ 
/*      */ 
/*      */       
/*      */       this.this$0 = this$0;
/*      */ 
/*      */ 
/*      */       
/* 1103 */       this.queuedLine = null;
/*      */     } protected void processLine(String param1String, int param1Int) {
/* 1105 */       if (param1Int == 2 && param1String.startsWith(""Generating "")) {
/* 1106 */         if (this.queuedLine != null) {
/* 1107 */           super.processLine(this.queuedLine, 3);
/*      */         }
/* 1109 */         this.queuedLine = param1String;
/*      */       } else {
/* 1111 */         if (this.queuedLine != null) {
/* 1112 */           if (param1String.startsWith(""Building "")) {
/* 1113 */             super.processLine(this.queuedLine, 3);
/*      */           } else {
/* 1115 */             super.processLine(this.queuedLine, 2);
/* 1116 */           }  this.queuedLine = null;
/*      */         } 
/* 1118 */         super.processLine(param1String, param1Int);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*      */     protected void logFlush() {
/* 1124 */       if (this.queuedLine != null) {
/* 1125 */         super.processLine(this.queuedLine, 3);
/* 1126 */         this.queuedLine = null;
/*      */       } 
/*      */     } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1135 */   protected String expand(String paramString) { return ProjectHelper.replaceProperties(this.project, paramString, this.project.getProperties()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1143 */   private File createTempFile() { return new File(""javadoc"" + (new Random(System.currentTimeMillis())).nextLong()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String getJavadocExecutableName() {
/* 1150 */     String str1 = System.getProperty(""os.name"").toLowerCase();
/* 1151 */     boolean bool = (str1.indexOf(""windows"") >= 0 || str1.indexOf(""os/2"") >= 0) ? true : false;
/*      */     
/* 1153 */     String str2 = bool ? "".exe"" : """";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1159 */     File file = new File(System.getProperty(""java.home"") + ""/../bin/javadoc"" + str2);
/*      */ 
/*      */     
/* 1162 */     if (file.exists())
/*      */     {
/* 1164 */       return file.getAbsolutePath();
/*      */     }
/*      */ 
/*      */     
/* 1168 */     log(""Unable to locate "" + file.getAbsolutePath() + "". Using \""javadoc\"" instead."", 3);
/*      */     
/* 1170 */     return ""javadoc"";
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Javadoc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jikes,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Random;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */ {
/*     */   protected JikesOutputParser jop;
/*     */   protected String command;
/*     */   protected Project project;
/*     */   
/*     */   protected Jikes(JikesOutputParser paramJikesOutputParser, String paramString, Project paramProject) {
/*  79 */     this.jop = paramJikesOutputParser;
/*  80 */     this.command = paramString;
/*  81 */     this.project = paramProject;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void compile(String[] paramArrayOfString) {
/*  89 */     String[] arrayOfString = null;
/*  90 */     File file = null;
/*     */     
/*     */     try {
/*  93 */       String str = System.getProperty(""os.name"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 100 */       if (str.toLowerCase().indexOf(""windows"") >= 0 && paramArrayOfString.length > 250) {
/*     */         
/* 102 */         PrintWriter printWriter = null;
/*     */         try {
/* 104 */           file = new File(""jikes"" + (new Random(System.currentTimeMillis())).nextLong());
/* 105 */           printWriter = new PrintWriter(new FileWriter(file));
/* 106 */           for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 107 */             printWriter.println(paramArrayOfString[b]);
/*     */           }
/* 109 */           printWriter.flush();
/* 110 */           arrayOfString = new String[] { this.command, ""@"" + file.getAbsolutePath() };
/*     */         } catch (IOException iOException) {
/*     */           
/* 113 */           throw new BuildException(""Error creating temporary file"", iOException);
/*     */         } finally {
/* 115 */           if (printWriter != null) {
/* 116 */             try { printWriter.close(); } catch (Throwable throwable) {}
/*     */           }
/*     */         } 
/*     */       } else {
/* 120 */         arrayOfString = new String[paramArrayOfString.length + 1];
/* 121 */         arrayOfString[0] = this.command;
/* 122 */         System.arraycopy(paramArrayOfString, 0, arrayOfString, 1, paramArrayOfString.length);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 130 */         Execute execute = new Execute(this.jop);
/* 131 */         execute.setAntRun(this.project);
/* 132 */         execute.setWorkingDirectory(this.project.getBaseDir());
/* 133 */         execute.setCommandline(arrayOfString);
/* 134 */         execute.execute();
/*     */       } catch (IOException iOException) {
/* 136 */         throw new BuildException(""Error running Jikes compiler"", iOException);
/*     */       } 
/*     */     } finally {
/* 139 */       if (file != null)
/* 140 */         file.delete(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JikesOutputParser,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JikesOutputParser
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   protected Task task;
/*     */   protected boolean errorFlag = false;
/*     */   protected int errors;
/*     */   protected int warnings;
/*     */   protected boolean error = false;
/*     */   protected boolean emacsMode;
/*     */   protected BufferedReader br;
/*     */   
/*     */   public void setProcessInputStream(OutputStream paramOutputStream) {}
/*     */   
/*     */   public void setProcessErrorStream(InputStream paramInputStream) {}
/*     */   
/*  93 */   public void setProcessOutputStream(InputStream paramInputStream) throws IOException { this.br = new BufferedReader(new InputStreamReader(paramInputStream)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void start() throws IOException { parseOutput(this.br); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stop() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected JikesOutputParser(Task paramTask, boolean paramBoolean) {
/* 114 */     this.task = paramTask;
/* 115 */     this.emacsMode = paramBoolean;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void parseOutput(BufferedReader paramBufferedReader) throws IOException {
/* 123 */     if (this.emacsMode) {
/* 124 */       parseEmacsOutput(paramBufferedReader);
/*     */     } else {
/* 126 */       parseStandardOutput(paramBufferedReader);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parseStandardOutput(BufferedReader paramBufferedReader) throws IOException {
/*     */     String str;
/* 141 */     while ((str = paramBufferedReader.readLine()) != null) {
/* 142 */       String str1 = str.toLowerCase();
/* 143 */       if (str.trim().equals(""""))
/*     */         continue; 
/* 145 */       if (str1.indexOf(""error"") != -1) {
/* 146 */         setError(true);
/* 147 */       } else if (str1.indexOf(""warning"") != -1) {
/* 148 */         setError(false);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/* 156 */       else if (this.emacsMode) {
/* 157 */         setError(true);
/*     */       } 
/* 159 */       log(str);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 165 */   private void parseEmacsOutput(BufferedReader paramBufferedReader) throws IOException { parseStandardOutput(paramBufferedReader); }
/*     */ 
/*     */   
/*     */   private void setError(boolean paramBoolean) {
/* 169 */     this.error = paramBoolean;
/* 170 */     if (this.error)
/* 171 */       this.errorFlag = true; 
/*     */   }
/*     */   
/*     */   private void log(String paramString) {
/* 175 */     if (!this.emacsMode) {
/* 176 */       this.task.log("""", this.error ? 0 : 1);
/*     */     }
/* 178 */     this.task.log(paramString, this.error ? 0 : 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   protected boolean getErrorFlag() { return this.errorFlag; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\JikesOutputParser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.KeySubst,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class KeySubst
/*     */   extends Task
/*     */ {
/*  72 */   private File source = null;
/*  73 */   private File dest = null;
/*  74 */   private String sep = ""*"";
/*  75 */   private Hashtable replacements = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  81 */     log(""!! KeySubst is deprecated. Use Filter + CopyDir instead. !!"");
/*  82 */     log(""Performing Substitions"");
/*  83 */     if (this.source == null || this.dest == null) {
/*  84 */       log(""Source and destinations must not be null"");
/*     */       return;
/*     */     } 
/*  87 */     BufferedReader bufferedReader = null;
/*  88 */     BufferedWriter bufferedWriter = null;
/*     */     try {
/*  90 */       bufferedReader = new BufferedReader(new FileReader(this.source));
/*  91 */       this.dest.delete();
/*  92 */       bufferedWriter = new BufferedWriter(new FileWriter(this.dest));
/*     */       
/*  94 */       String str1 = null;
/*  95 */       String str2 = null;
/*     */       
/*  97 */       str1 = bufferedReader.readLine();
/*  98 */       while (str1 != null) {
/*  99 */         if (str1.length() == 0) {
/* 100 */           bufferedWriter.newLine();
/*     */         } else {
/* 102 */           str2 = replace(str1, this.replacements);
/* 103 */           bufferedWriter.write(str2);
/* 104 */           bufferedWriter.newLine();
/*     */         } 
/* 106 */         str1 = bufferedReader.readLine();
/*     */       } 
/* 108 */       bufferedWriter.flush();
/* 109 */       bufferedWriter.close();
/* 110 */       bufferedReader.close();
/*     */     } catch (IOException iOException) {
/* 112 */       iOException.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setSrc(File paramFile) { this.source = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setSep(String paramString) { this.sep = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeys(String paramString) {
/* 147 */     if (paramString != null && paramString.length() > 0) {
/* 148 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, this.sep, false);
/*     */       
/* 150 */       while (stringTokenizer.hasMoreTokens()) {
/* 151 */         String str1 = stringTokenizer.nextToken().trim();
/* 152 */         StringTokenizer stringTokenizer1 = new StringTokenizer(str1, ""="", false);
/*     */ 
/*     */         
/* 155 */         String str2 = stringTokenizer1.nextToken();
/* 156 */         String str3 = stringTokenizer1.nextToken();
/*     */ 
/*     */         
/* 159 */         this.replacements.put(str2, str3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static void main(String[] paramArrayOfString) {
/*     */     try {
/* 168 */       Hashtable hashtable = new Hashtable();
/* 169 */       hashtable.put(""VERSION"", ""1.0.3"");
/* 170 */       hashtable.put(""b"", ""ffff"");
/* 171 */       System.out.println(replace(""$f ${VERSION} f ${b} jj $"", hashtable));
/*     */     } catch (Exception exception) {
/*     */       
/* 174 */       exception.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replace(String paramString, Hashtable paramHashtable) throws BuildException {
/* 186 */     StringBuffer stringBuffer = new StringBuffer();
/* 187 */     int i = 0;
/* 188 */     int j = 0;
/* 189 */     String str = null;
/* 190 */     while ((i = paramString.indexOf(""${"", j)) > -1) {
/* 191 */       str = paramString.substring(i + 2, paramString.indexOf(""}"", i + 3));
/* 192 */       stringBuffer.append(paramString.substring(j, i));
/* 193 */       if (paramHashtable.containsKey(str)) {
/* 194 */         stringBuffer.append(paramHashtable.get(str));
/*     */       } else {
/* 196 */         stringBuffer.append(""${"");
/* 197 */         stringBuffer.append(str);
/* 198 */         stringBuffer.append(""}"");
/*     */       } 
/* 200 */       j = i + 3 + str.length();
/*     */     } 
/* 202 */     stringBuffer.append(paramString.substring(j));
/* 203 */     return stringBuffer.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\KeySubst.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogOutputStream
/*     */   extends OutputStream
/*     */ {
/*  76 */   private ByteArrayOutputStream buffer = new ByteArrayOutputStream();
/*     */   
/*     */   private boolean skip = false;
/*     */   private Task task;
/*  80 */   private int level = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LogOutputStream(Task paramTask, int paramInt) {
/*  89 */     this.task = paramTask;
/*  90 */     this.level = paramInt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) throws IOException {
/* 101 */     byte b = (byte)paramInt;
/* 102 */     if (b == 10 || b == 13)
/* 103 */     { if (!this.skip) processBuffer();  }
/* 104 */     else { this.buffer.write(paramInt); }
/* 105 */      this.skip = (b == 13);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer() {
/* 113 */     processLine(this.buffer.toString());
/* 114 */     this.buffer.reset();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   protected void processLine(String paramString) { processLine(paramString, this.level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   protected void processLine(String paramString, int paramInt) { this.task.log(paramString, paramInt); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 140 */     if (this.buffer.size() > 0) processBuffer(); 
/* 141 */     super.close();
/*     */   }
/*     */ 
/*     */   
/* 145 */   public int getMessageLevel() { return this.level; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\LogOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogStreamHandler,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogStreamHandler
/*    */   extends PumpStreamHandler
/*    */ {
/* 80 */   public LogStreamHandler(Task paramTask, int paramInt1, int paramInt2) { super(new LogOutputStream(paramTask, paramInt1), new LogOutputStream(paramTask, paramInt2)); }
/*    */ 
/*    */ 
/*    */   
/*    */   public void stop() {
/* 85 */     super.stop();
/*    */     try {
/* 87 */       getErr().close();
/* 88 */       getOut().close();
/*    */     } catch (IOException iOException) {
/*    */       
/* 91 */       throw new BuildException(iOException);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\LogStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Manifest,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Manifest
/*     */ {
/*     */   public static final String ATTRIBUTE_MANIFEST_VERSION = ""Manifest-Version"";
/*     */   public static final String ATTRIBUTE_SIGNATURE_VERSION = ""Signature-Version"";
/*     */   public static final String ATTRIBUTE_NAME = ""Name"";
/*     */   public static final String ATTRIBUTE_FROM = ""From"";
/*     */   public static final String DEFAULT_MANIFEST_VERSION = ""1.0"";
/*     */   public static final int MAX_LINE_LENGTH = 70;
/*     */   
/*     */   public static class Attribute
/*     */   {
/*  91 */     private String name = null;
/*     */ 
/*     */     
/*  94 */     private String value = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Attribute() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     public Attribute(String param1String) throws ManifestException { parse(param1String); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Attribute(String param1String1, String param1String2) {
/* 119 */       this.name = param1String1;
/* 120 */       this.value = param1String2;
/*     */     }
/*     */     
/*     */     public boolean equals(Object param1Object) {
/* 124 */       if (!(param1Object instanceof Attribute)) {
/* 125 */         return false;
/*     */       }
/*     */       
/* 128 */       Attribute attribute = (Attribute)param1Object;
/* 129 */       return (this.name != null && attribute.name != null && this.name.toLowerCase().equals(attribute.name.toLowerCase()) && this.value != null && this.value.equals(attribute.value));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void parse(String param1String) throws ManifestException {
/* 143 */       int i = param1String.indexOf("": "");
/* 144 */       if (i == -1) {
/* 145 */         throw new ManifestException(""Manifest line \"""" + param1String + ""\"" is not valid"");
/*     */       }
/* 147 */       this.name = param1String.substring(0, i);
/* 148 */       this.value = param1String.substring(i + 2);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 157 */     public void setName(String param1String) { this.name = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 166 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 175 */     public void setValue(String param1String) { this.value = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 184 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 195 */     public void addContinuation(String param1String) { this.value += param1String.substring(1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void write(PrintWriter param1PrintWriter) throws IOException {
/* 206 */       String str = this.name + "": "" + this.value;
/* 207 */       while ((str.getBytes()).length > 70) {
/*     */         
/* 209 */         byte b = 70;
/* 210 */         String str1 = str.substring(0, b);
/* 211 */         while ((str1.getBytes()).length > 70 && b > 0) {
/* 212 */           b--;
/* 213 */           str1 = str.substring(0, b);
/*     */         } 
/* 215 */         if (b == 0) {
/* 216 */           throw new IOException(""Unable to write manifest line "" + this.name + "": "" + this.value);
/*     */         }
/* 218 */         param1PrintWriter.println(str1);
/* 219 */         str = "" "" + str.substring(b);
/*     */       } 
/* 221 */       param1PrintWriter.println(str);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Section
/*     */   {
/* 231 */     private Vector warnings = new Vector();
/*     */ 
/*     */     
/* 234 */     private String name = null;
/*     */ 
/*     */     
/* 237 */     private Hashtable attributes = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 245 */     public void setName(String param1String) { this.name = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 254 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String read(BufferedReader param1BufferedReader) throws ManifestException, IOException {
/*     */       String str;
/* 269 */       Manifest.Attribute attribute = null;
/*     */       while (true)
/* 271 */       { String str1 = param1BufferedReader.readLine();
/* 272 */         if (str1 == null || str1.length() == 0) {
/* 273 */           return null;
/*     */         }
/* 275 */         if (str1.charAt(0) == ' ') {
/*     */           
/* 277 */           if (attribute == null) {
/* 278 */             throw new ManifestException(""Can't start an attribute with a continuation line "" + str1);
/*     */           }
/* 280 */           attribute.addContinuation(str1);
/*     */           continue;
/*     */         } 
/* 283 */         attribute = new Manifest.Attribute(str1);
/* 284 */         str = addAttributeAndCheck(attribute);
/* 285 */         if (str != null)
/* 286 */           break;  }  return str;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void merge(Section param1Section) throws ManifestException {
/* 300 */       if ((this.name == null && param1Section.getName() != null) || (this.name != null && !this.name.equalsIgnoreCase(param1Section.getName())))
/*     */       {
/* 302 */         throw new ManifestException(""Unable to merge sections with different names"");
/*     */       }
/*     */       
/* 305 */       for (Enumeration enumeration = param1Section.attributes.keys(); enumeration.hasMoreElements(); ) {
/* 306 */         String str = enumeration.nextElement();
/*     */         
/* 308 */         this.attributes.put(str, param1Section.attributes.get(str));
/*     */       } 
/*     */ 
/*     */       
/* 312 */       for (Enumeration enumeration1 = param1Section.warnings.elements(); enumeration1.hasMoreElements();) {
/* 313 */         this.warnings.addElement(enumeration1.nextElement());
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void write(PrintWriter param1PrintWriter) throws IOException {
/* 325 */       if (this.name != null) {
/* 326 */         Manifest.Attribute attribute = new Manifest.Attribute(""Name"", this.name);
/* 327 */         attribute.write(param1PrintWriter);
/*     */       } 
/* 329 */       for (Enumeration enumeration = this.attributes.elements(); enumeration.hasMoreElements(); ) {
/* 330 */         Manifest.Attribute attribute = enumeration.nextElement();
/* 331 */         attribute.write(param1PrintWriter);
/*     */       } 
/* 333 */       param1PrintWriter.println();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getAttributeValue(String param1String) {
/* 345 */       Manifest.Attribute attribute = (Manifest.Attribute)this.attributes.get(param1String.toLowerCase());
/* 346 */       if (attribute == null) {
/* 347 */         return null;
/*     */       }
/* 349 */       return attribute.getValue();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 358 */     public void removeAttribute(String param1String) { this.attributes.remove(param1String.toLowerCase()); }
/*     */ 
/*     */     
/*     */     public void addConfiguredAttribute(Manifest.Attribute param1Attribute) throws ManifestException {
/* 362 */       String str = addAttributeAndCheck(param1Attribute);
/* 363 */       if (str != null) {
/* 364 */         throw new BuildException(""Use the \""name\"" attribute of the <section> element rather than using the \""Name\"" attribute"");
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String addAttributeAndCheck(Manifest.Attribute param1Attribute) throws ManifestException {
/* 379 */       if (param1Attribute.getName() == null || param1Attribute.getValue() == null) {
/* 380 */         throw new BuildException(""Attributes must have name and value"");
/*     */       }
/* 382 */       if (param1Attribute.getName().equalsIgnoreCase(""Name"")) {
/* 383 */         this.warnings.addElement(""\""Name\"" attributes should not occur in the main section and must be the first element in all other sections: \"""" + param1Attribute.getName() + "": "" + param1Attribute.getValue() + ""\"""");
/*     */ 
/*     */         
/* 386 */         return param1Attribute.getValue();
/*     */       } 
/*     */       
/* 389 */       if (param1Attribute.getName().toLowerCase().startsWith(""From"".toLowerCase())) {
/* 390 */         this.warnings.addElement(""Manifest attributes should not start with \""From\"" in \"""" + param1Attribute.getName() + "": "" + param1Attribute.getValue() + ""\"""");
/*     */       } else {
/*     */         
/* 393 */         if (this.attributes.containsKey(param1Attribute.getName().toLowerCase())) {
/* 394 */           throw new ManifestException(""The attribute \"""" + param1Attribute.getName() + ""\"" may not "" + ""occur more than once in the same section"");
/*     */         }
/*     */ 
/*     */         
/* 398 */         this.attributes.put(param1Attribute.getName().toLowerCase(), param1Attribute);
/*     */       } 
/* 400 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 404 */     public Enumeration getWarnings() { return this.warnings.elements(); }
/*     */ 
/*     */     
/*     */     public boolean equals(Object param1Object) {
/* 408 */       if (!(param1Object instanceof Section)) {
/* 409 */         return false;
/*     */       }
/*     */       
/* 412 */       Section section = (Section)param1Object;
/* 413 */       if (this.attributes.size() != section.attributes.size()) {
/* 414 */         return false;
/*     */       }
/*     */       
/* 417 */       for (Enumeration enumeration = this.attributes.elements(); enumeration.hasMoreElements(); ) {
/* 418 */         Manifest.Attribute attribute1 = enumeration.nextElement();
/* 419 */         Manifest.Attribute attribute2 = (Manifest.Attribute)section.attributes.get(attribute1.getName().toLowerCase());
/* 420 */         if (!attribute1.equals(attribute2)) {
/* 421 */           return false;
/*     */         }
/*     */       } 
/*     */       
/* 425 */       return true;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 431 */   private String manifestVersion = ""1.0"";
/*     */ 
/*     */   
/* 434 */   private Section mainSection = new Section();
/*     */ 
/*     */   
/* 437 */   private Hashtable sections = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Manifest() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Manifest(InputStream paramInputStream) throws ManifestException, IOException {
/* 452 */     BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(paramInputStream));
/*     */     
/* 454 */     String str1 = this.mainSection.read(bufferedReader);
/* 455 */     String str2 = this.mainSection.getAttributeValue(""Manifest-Version"");
/* 456 */     if (str2 != null) {
/* 457 */       this.manifestVersion = str2;
/* 458 */       this.mainSection.removeAttribute(""Manifest-Version"");
/*     */     } 
/*     */     
/* 461 */     String str3 = null;
/* 462 */     while ((str3 = bufferedReader.readLine()) != null) {
/* 463 */       if (str3.length() == 0) {
/*     */         continue;
/*     */       }
/*     */       
/* 467 */       Section section = new Section();
/* 468 */       if (str1 == null) {
/* 469 */         Attribute attribute = new Attribute(str3);
/* 470 */         if (!attribute.getName().equalsIgnoreCase(""Name"")) {
/* 471 */           throw new ManifestException(""Manifest sections should start with a \""Name\"" attribute and not \"""" + attribute.getName() + ""\"""");
/*     */         }
/*     */         
/* 474 */         str1 = attribute.getValue();
/*     */       
/*     */       }
/*     */       else {
/*     */ 
/*     */         
/* 480 */         Attribute attribute = new Attribute(str3);
/* 481 */         section.addAttributeAndCheck(attribute);
/*     */       } 
/*     */       
/* 484 */       section.setName(str1);
/* 485 */       str1 = section.read(bufferedReader);
/* 486 */       addConfiguredSection(section);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void addConfiguredSection(Section paramSection) throws ManifestException {
/* 491 */     if (paramSection.getName() == null) {
/* 492 */       throw new BuildException(""Sections must have a name"");
/*     */     }
/* 494 */     this.sections.put(paramSection.getName().toLowerCase(), paramSection);
/*     */   }
/*     */ 
/*     */   
/* 498 */   public void addConfiguredAttribute(Attribute paramAttribute) throws ManifestException { this.mainSection.addConfiguredAttribute(paramAttribute); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void merge(Manifest paramManifest) throws ManifestException {
/* 510 */     this.manifestVersion = paramManifest.manifestVersion;
/* 511 */     this.mainSection.merge(paramManifest.mainSection);
/* 512 */     for (Enumeration enumeration = paramManifest.sections.keys(); enumeration.hasMoreElements(); ) {
/* 513 */       String str = enumeration.nextElement();
/* 514 */       Section section1 = (Section)this.sections.get(str);
/* 515 */       Section section2 = (Section)paramManifest.sections.get(str);
/* 516 */       if (section1 == null) {
/* 517 */         this.sections.put(str.toLowerCase(), section2);
/*     */         continue;
/*     */       } 
/* 520 */       section1.merge(section2);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(PrintWriter paramPrintWriter) throws IOException {
/* 534 */     paramPrintWriter.println(""Manifest-Version: "" + this.manifestVersion);
/* 535 */     String str = this.mainSection.getAttributeValue(""Signature-Version"");
/* 536 */     if (str != null) {
/* 537 */       paramPrintWriter.println(""Signature-Version: "" + str);
/* 538 */       this.mainSection.removeAttribute(""Signature-Version"");
/*     */     } 
/* 540 */     this.mainSection.write(paramPrintWriter);
/* 541 */     if (str != null) {
/*     */       try {
/* 543 */         this.mainSection.addConfiguredAttribute(new Attribute(""Signature-Version"", str));
/*     */       }
/* 545 */       catch (ManifestException manifestException) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 550 */     for (Enumeration enumeration = this.sections.elements(); enumeration.hasMoreElements(); ) {
/* 551 */       Section section = enumeration.nextElement();
/* 552 */       section.write(paramPrintWriter);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 562 */     StringWriter stringWriter = new StringWriter();
/*     */     try {
/* 564 */       write(new PrintWriter(stringWriter));
/*     */     } catch (IOException iOException) {
/*     */       
/* 567 */       return null;
/*     */     } 
/* 569 */     return stringWriter.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration getWarnings() {
/* 578 */     Vector vector = new Vector();
/*     */     
/* 580 */     for (Enumeration enumeration = this.mainSection.getWarnings(); enumeration.hasMoreElements();) {
/* 581 */       vector.addElement(enumeration.nextElement());
/*     */     }
/*     */ 
/*     */     
/* 585 */     for (Enumeration enumeration1 = this.sections.elements(); enumeration1.hasMoreElements(); ) {
/* 586 */       Section section = enumeration1.nextElement();
/* 587 */       for (Enumeration enumeration2 = section.getWarnings(); enumeration2.hasMoreElements();) {
/* 588 */         vector.addElement(enumeration2.nextElement());
/*     */       }
/*     */     } 
/*     */     
/* 592 */     return vector.elements();
/*     */   }
/*     */   
/*     */   public boolean equals(Object paramObject) {
/* 596 */     if (!(paramObject instanceof Manifest)) {
/* 597 */       return false;
/*     */     }
/*     */     
/* 600 */     Manifest manifest = (Manifest)paramObject;
/* 601 */     if (!this.manifestVersion.equals(manifest.manifestVersion)) {
/* 602 */       return false;
/*     */     }
/* 604 */     if (this.sections.size() != manifest.sections.size()) {
/* 605 */       return false;
/*     */     }
/*     */     
/* 608 */     if (!this.mainSection.equals(manifest.mainSection)) {
/* 609 */       return false;
/*     */     }
/*     */     
/* 612 */     for (Enumeration enumeration = this.sections.elements(); enumeration.hasMoreElements(); ) {
/* 613 */       Section section1 = enumeration.nextElement();
/* 614 */       Section section2 = (Section)manifest.sections.get(section1.getName().toLowerCase());
/* 615 */       if (!section1.equals(section2)) {
/* 616 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 620 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Manifest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ManifestException,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ManifestException
/*    */   extends Exception
/*    */ {
/* 71 */   public ManifestException(String paramString) { super(paramString); }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\ManifestException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.MatchingTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class MatchingTask
/*     */   extends Task
/*     */ {
/*     */   protected boolean useDefaultExcludes = true;
/*  77 */   protected FileSet fileset = new FileSet();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public PatternSet.NameEntry createInclude() { return this.fileset.createInclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public PatternSet.NameEntry createIncludesFile() { return this.fileset.createIncludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public PatternSet.NameEntry createExclude() { return this.fileset.createExclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public PatternSet.NameEntry createExcludesFile() { return this.fileset.createExcludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public PatternSet createPatternSet() { return this.fileset.createPatternSet(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setIncludes(String paramString) { this.fileset.setIncludes(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetItems(String paramString) {
/* 132 */     log(""The items attribute is deprecated. Please use the includes attribute."", 1);
/*     */ 
/*     */     
/* 135 */     if (paramString == null || paramString.equals(""*"") || paramString.equals(""."")) {
/*     */       
/* 137 */       createInclude().setName(""**"");
/*     */     } else {
/* 139 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", "");
/* 140 */       while (stringTokenizer.hasMoreTokens()) {
/* 141 */         String str = stringTokenizer.nextToken().trim();
/* 142 */         if (str.length() > 0) {
/* 143 */           createInclude().setName(str + ""/**"");
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setExcludes(String paramString) { this.fileset.setExcludes(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetIgnore(String paramString) {
/* 166 */     log(""The ignore attribute is deprecated.Please use the excludes attribute."", 1);
/*     */ 
/*     */     
/* 169 */     if (paramString != null && paramString.length() > 0) {
/* 170 */       Vector vector = new Vector();
/* 171 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", "", false);
/* 172 */       while (stringTokenizer.hasMoreTokens()) {
/* 173 */         createExclude().setName(""**/"" + stringTokenizer.nextToken().trim() + ""/**"");
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void setDefaultexcludes(boolean paramBoolean) { this.useDefaultExcludes = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected DirectoryScanner getDirectoryScanner(File paramFile) {
/* 193 */     this.fileset.setDir(paramFile);
/* 194 */     this.fileset.setDefaultexcludes(this.useDefaultExcludes);
/* 195 */     return this.fileset.getDirectoryScanner(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public void setIncludesfile(File paramFile) { this.fileset.setIncludesfile(paramFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   public void setExcludesfile(File paramFile) { this.fileset.setExcludesfile(paramFile); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\MatchingTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Mkdir,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Mkdir
/*    */   extends Task
/*    */ {
/*    */   private File dir;
/*    */   
/*    */   public void execute() throws BuildException {
/* 72 */     if (this.dir == null) {
/* 73 */       throw new BuildException(""dir attribute is required"", this.location);
/*    */     }
/*    */     
/* 76 */     if (this.dir.isFile()) {
/* 77 */       throw new BuildException(""Unable to create directory as a file already exists with that name: "" + this.dir.getAbsolutePath());
/*    */     }
/*    */     
/* 80 */     if (!this.dir.exists()) {
/* 81 */       boolean bool = this.dir.mkdirs();
/* 82 */       if (!bool) {
/* 83 */         String str = ""Directory "" + this.dir.getAbsolutePath() + "" creation was not "" + ""successful for an unknown reason"";
/*    */         
/* 85 */         throw new BuildException(str, this.location);
/*    */       } 
/* 87 */       log(""Created dir: "" + this.dir.getAbsolutePath());
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 92 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Mkdir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Move,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Move
/*     */   extends Copy
/*     */ {
/*  85 */   public Move() { this.forceOverwrite = true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/*  93 */     if (this.fileCopyMap.size() > 0) {
/*  94 */       log(""Moving "" + this.fileCopyMap.size() + "" files to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */       
/*  97 */       Enumeration enumeration = this.fileCopyMap.keys();
/*  98 */       while (enumeration.hasMoreElements()) {
/*  99 */         String str1 = enumeration.nextElement();
/* 100 */         String str2 = (String)this.fileCopyMap.get(str1);
/*     */         
/* 102 */         if (str1.equals(str2)) {
/* 103 */           log(""Skipping self-move of "" + str1, this.verbosity);
/*     */           
/*     */           continue;
/*     */         } 
/* 107 */         boolean bool = false;
/* 108 */         File file1 = new File(str1);
/* 109 */         File file2 = new File(str2);
/*     */         
/*     */         try {
/* 112 */           log(""Attempting to rename: "" + str1 + "" to "" + str2, this.verbosity);
/*     */           
/* 114 */           bool = renameFile(file1, file2, this.filtering, this.forceOverwrite);
/*     */         } catch (IOException iOException) {
/* 116 */           String str = ""Failed to rename "" + str1 + "" to "" + str2 + "" due to "" + iOException.getMessage();
/*     */ 
/*     */           
/* 119 */           throw new BuildException(str, iOException, this.location);
/*     */         } 
/*     */         
/* 122 */         if (!bool) {
/*     */           try {
/* 124 */             log(""Moving "" + str1 + "" to "" + str2, this.verbosity);
/*     */             
/* 126 */             FilterSetCollection filterSetCollection = new FilterSetCollection();
/* 127 */             if (this.filtering) {
/* 128 */               filterSetCollection.addFilterSet(this.project.getGlobalFilterSet());
/*     */             }
/* 130 */             for (Enumeration enumeration1 = getFilterSets().elements(); enumeration1.hasMoreElements();) {
/* 131 */               filterSetCollection.addFilterSet(enumeration1.nextElement());
/*     */             }
/* 133 */             getFileUtils().copyFile(file1, file2, filterSetCollection, this.forceOverwrite);
/*     */ 
/*     */             
/* 136 */             file1 = new File(str1);
/* 137 */             if (!file1.delete()) {
/* 138 */               throw new BuildException(""Unable to delete file "" + file1.getAbsolutePath());
/*     */             }
/*     */           } catch (IOException iOException) {
/*     */             
/* 142 */             String str = ""Failed to copy "" + str1 + "" to "" + str2 + "" due to "" + iOException.getMessage();
/*     */ 
/*     */             
/* 145 */             throw new BuildException(str, iOException, this.location);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 151 */     if (this.includeEmpty) {
/* 152 */       Enumeration enumeration = this.dirCopyMap.elements();
/* 153 */       byte b = 0;
/* 154 */       while (enumeration.hasMoreElements()) {
/* 155 */         File file = new File(enumeration.nextElement());
/* 156 */         if (!file.exists()) {
/* 157 */           if (!file.mkdirs()) {
/* 158 */             log(""Unable to create directory "" + file.getAbsolutePath(), 0); continue;
/*     */           } 
/* 160 */           b++;
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 165 */       if (b > 0) {
/* 166 */         log(""Moved "" + b + "" empty directories to "" + this.destDir.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */     
/* 170 */     if (this.filesets.size() > 0) {
/* 171 */       Enumeration enumeration = this.filesets.elements();
/* 172 */       while (enumeration.hasMoreElements()) {
/* 173 */         FileSet fileSet = enumeration.nextElement();
/* 174 */         File file = fileSet.getDir(this.project);
/*     */         
/* 176 */         if (okToDelete(file)) {
/* 177 */           deleteDir(file);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean okToDelete(File paramFile) {
/* 188 */     String[] arrayOfString = paramFile.list();
/* 189 */     if (arrayOfString == null) return false;
/*     */     
/* 191 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 192 */       String str = arrayOfString[b];
/* 193 */       File file = new File(paramFile, str);
/* 194 */       if (file.isDirectory()) {
/* 195 */         if (!okToDelete(file)) return false; 
/*     */       } else {
/* 197 */         return false;
/*     */       } 
/*     */     } 
/*     */     
/* 201 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void deleteDir(File paramFile) {
/* 208 */     String[] arrayOfString = paramFile.list();
/* 209 */     if (arrayOfString == null)
/*     */       return; 
/* 211 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 212 */       String str = arrayOfString[b];
/* 213 */       File file = new File(paramFile, str);
/* 214 */       if (file.isDirectory()) {
/* 215 */         deleteDir(file);
/*     */       } else {
/* 217 */         throw new BuildException(""UNEXPECTED ERROR - The file "" + file.getAbsolutePath() + "" should not exist!"");
/*     */       } 
/*     */     } 
/* 220 */     log(""Deleting directory "" + paramFile.getAbsolutePath(), this.verbosity);
/* 221 */     if (!paramFile.delete()) {
/* 222 */       throw new BuildException(""Unable to delete directory "" + paramFile.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean renameFile(File paramFile1, File paramFile2, boolean paramBoolean1, boolean paramBoolean2) throws IOException, BuildException {
/* 240 */     boolean bool = true;
/* 241 */     if (!paramBoolean1) {
/*     */ 
/*     */       
/* 244 */       String str = paramFile2.getParent();
/* 245 */       if (str != null) {
/* 246 */         File file = new File(str);
/* 247 */         if (!file.exists()) {
/* 248 */           file.mkdirs();
/*     */         }
/*     */       } 
/*     */       
/* 252 */       if (paramFile2.exists() && 
/* 253 */         !paramFile2.delete()) {
/* 254 */         throw new BuildException(""Unable to remove existing file "" + paramFile2);
/*     */       }
/*     */ 
/*     */       
/* 258 */       bool = paramFile1.renameTo(paramFile2);
/*     */     } else {
/* 260 */       bool = false;
/*     */     } 
/* 262 */     return bool;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Move.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Parallel,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Parallel
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*  72 */   private Vector nestedTasks = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   public void addTask(Task paramTask) throws BuildException { this.nestedTasks.addElement(paramTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  90 */     TaskThread[] arrayOfTaskThread = new TaskThread[this.nestedTasks.size()];
/*  91 */     byte b1 = 0;
/*  92 */     for (Enumeration enumeration = this.nestedTasks.elements(); enumeration.hasMoreElements(); b1++) {
/*  93 */       Task task = enumeration.nextElement();
/*  94 */       arrayOfTaskThread[b1] = new TaskThread(this, b1, task);
/*     */     } 
/*     */ 
/*     */     
/*  98 */     for (byte b2 = 0; b2 < arrayOfTaskThread.length; b2++) {
/*  99 */       arrayOfTaskThread[b2].start();
/*     */     }
/*     */ 
/*     */     
/* 103 */     for (byte b3 = 0; b3 < arrayOfTaskThread.length; b3++) {
/*     */       try {
/* 105 */         arrayOfTaskThread[b3].join();
/*     */       }
/* 107 */       catch (InterruptedException interruptedException) {}
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 113 */     StringBuffer stringBuffer = new StringBuffer();
/* 114 */     String str = System.getProperty(""line.separator"");
/* 115 */     byte b4 = 0;
/* 116 */     Throwable throwable = null;
/* 117 */     Location location = Location.UNKNOWN_LOCATION;
/* 118 */     for (byte b5 = 0; b5 < arrayOfTaskThread.length; b5++) {
/* 119 */       Throwable throwable1 = arrayOfTaskThread[b5].getException();
/* 120 */       if (throwable1 != null) {
/* 121 */         b4++;
/* 122 */         if (throwable == null) {
/* 123 */           throwable = throwable1;
/*     */         }
/* 125 */         if (throwable1 instanceof BuildException && location == Location.UNKNOWN_LOCATION)
/*     */         {
/* 127 */           location = ((BuildException)throwable1).getLocation();
/*     */         }
/* 129 */         stringBuffer.append(str);
/* 130 */         stringBuffer.append(throwable1.getMessage());
/*     */       } 
/*     */     } 
/*     */     
/* 134 */     if (b4 == 1) {
/* 135 */       if (throwable instanceof BuildException) {
/* 136 */         throw (BuildException)throwable;
/*     */       }
/*     */       
/* 139 */       throw new BuildException(throwable);
/*     */     } 
/*     */     
/* 142 */     if (b4 > 1) {
/* 143 */       throw new BuildException(stringBuffer.toString(), location);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   class TaskThread
/*     */     extends Thread
/*     */   {
/*     */     private Throwable exception;
/*     */     private Task task;
/*     */     private int taskNumber;
/*     */     private final Parallel this$0;
/*     */     
/*     */     TaskThread(Parallel this$0, int param1Int, Task param1Task) {
/* 157 */       this.this$0 = this$0;
/* 158 */       this.task = param1Task;
/* 159 */       this.taskNumber = param1Int;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void run() {
/*     */       try {
/* 168 */         this.task.perform();
/*     */       } catch (Throwable throwable) {
/*     */         
/* 171 */         this.exception = throwable = null;
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 176 */     public Throwable getException() { return this.exception; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Parallel.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Patch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Patch
/*     */   extends Task
/*     */ {
/*     */   private File originalFile;
/*     */   private boolean havePatchfile = false;
/*  71 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void setOriginalfile(File paramFile) { this.originalFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPatchfile(File paramFile) {
/*  84 */     if (!paramFile.exists()) {
/*  85 */       throw new BuildException(""patchfile "" + paramFile + "" doesn't exist"", this.location);
/*     */     }
/*     */     
/*  88 */     this.cmd.createArgument().setValue(""-i"");
/*  89 */     this.cmd.createArgument().setFile(paramFile);
/*  90 */     this.havePatchfile = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBackups(boolean paramBoolean) {
/*  97 */     if (paramBoolean) {
/*  98 */       this.cmd.createArgument().setValue(""-b"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIgnorewhitespace(boolean paramBoolean) {
/* 106 */     if (paramBoolean) {
/* 107 */       this.cmd.createArgument().setValue(""-l"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setStrip(int paramInt) throws BuildException {
/* 118 */     if (paramInt < 0) {
/* 119 */       throw new BuildException(""strip has to be >= 0"", this.location);
/*     */     }
/* 121 */     this.cmd.createArgument().setValue(""-p"" + paramInt);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean paramBoolean) {
/* 128 */     if (paramBoolean) {
/* 129 */       this.cmd.createArgument().setValue(""-s"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setReverse(boolean paramBoolean) {
/* 137 */     if (paramBoolean) {
/* 138 */       this.cmd.createArgument().setValue(""-R"");
/*     */     }
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/* 143 */     if (!this.havePatchfile) {
/* 144 */       throw new BuildException(""patchfile argument is required"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 148 */     Commandline commandline = (Commandline)this.cmd.clone();
/* 149 */     commandline.setExecutable(""patch"");
/*     */     
/* 151 */     if (this.originalFile != null) {
/* 152 */       commandline.createArgument().setFile(this.originalFile);
/*     */     }
/*     */     
/* 155 */     Execute execute = new Execute(new LogStreamHandler(this, 2, 1), null);
/*     */ 
/*     */     
/* 158 */     execute.setCommandline(commandline.getCommandline());
/*     */     try {
/* 160 */       execute.execute();
/*     */     } catch (IOException iOException) {
/* 162 */       throw new BuildException(iOException, this.location);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Patch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PathConvert,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathConvert
/*     */   extends Task
/*     */ {
/*     */   public class MapEntry
/*     */   {
/*     */     private String from;
/*     */     private String to;
/*     */     private final PathConvert this$0;
/*     */     
/*     */     public void setFrom(String param1String) { this.from = param1String; }
/*     */     
/*     */     public void setTo(String param1String) { this.to = param1String; }
/*     */     
/*     */     public String apply(String param1String) {
/*     */       if (this.from == null || this.to == null)
/*     */         throw new BuildException(""Both 'from' and 'to' must be set in a map entry""); 
/*     */       String str1 = this.this$0.onWindows ? param1String.toLowerCase() : param1String;
/*     */       String str2 = this.this$0.onWindows ? this.from.toLowerCase() : this.from;
/*     */       if (str1.startsWith(str2)) {
/*     */         int i = this.from.length();
/*     */         if (i >= param1String.length()) {
/*     */           param1String = this.to;
/*     */         } else {
/*     */           param1String = this.to + param1String.substring(i);
/*     */         } 
/*     */       } 
/*     */       return param1String;
/*     */     }
/*     */     
/*     */     public MapEntry(PathConvert this$0) {
/*  82 */       this.this$0 = this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 129 */       this.from = null;
/* 130 */       this.to = null;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() {
/* 138 */     if (isReference()) {
/* 139 */       throw noChildrenAllowed();
/*     */     }
/* 141 */     if (this.path == null) {
/* 142 */       this.path = new Path(getProject());
/*     */     }
/* 144 */     return this.path.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MapEntry createMap() {
/* 152 */     MapEntry mapEntry = new MapEntry(this);
/* 153 */     this.prefixMap.addElement(mapEntry);
/* 154 */     return mapEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTargetos(String paramString) {
/* 162 */     this.targetOS = paramString.toLowerCase();
/*     */     
/* 164 */     if (!this.targetOS.equals(""windows"") && !paramString.equals(""unix"")) {
/* 165 */       throw new BuildException(""targetos must be one of 'unix' or 'windows'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 171 */     this.targetWindows = this.targetOS.equals(""windows"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setProperty(String paramString) { this.property = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) {
/* 186 */     if (this.path != null) {
/* 187 */       throw noChildrenAllowed();
/*     */     }
/* 189 */     this.refid = paramReference;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setPathSep(String paramString) { this.pathSep = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setDirSep(String paramString) { this.dirSep = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   public boolean isReference() { return (this.refid != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 219 */     if (isReference()) {
/* 220 */       this.path = (new Path(getProject())).createPath();
/*     */       
/* 222 */       Object object = this.refid.getReferencedObject(getProject());
/*     */       
/* 224 */       if (object instanceof Path) {
/* 225 */         this.path.setRefid(this.refid);
/* 226 */       } else if (object instanceof FileSet) {
/* 227 */         FileSet fileSet = (FileSet)object;
/* 228 */         this.path.addFileset(fileSet);
/*     */       } else {
/* 230 */         throw new BuildException(""'refid' does not refer to a path or fileset"");
/*     */       } 
/*     */     } 
/*     */     
/* 234 */     validateSetup();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 239 */     String str1 = System.getProperty(""os.name"").toLowerCase();
/* 240 */     this.onWindows = (str1.indexOf(""windows"") >= 0);
/*     */ 
/*     */     
/* 243 */     byte b1 = this.onWindows ? 92 : 47;
/* 244 */     char c = this.dirSep.charAt(0);
/*     */     
/* 246 */     StringBuffer stringBuffer = new StringBuffer(100);
/*     */ 
/*     */     
/* 249 */     String[] arrayOfString = this.path.list();
/*     */     
/* 251 */     for (byte b2 = 0; b2 < arrayOfString.length; b2++) {
/* 252 */       String str = arrayOfString[b2];
/*     */       
/* 254 */       str = mapElement(str);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 259 */       str = str.replace(b1, c);
/*     */       
/* 261 */       if (b2 != 0) stringBuffer.append(this.pathSep); 
/* 262 */       stringBuffer.append(str);
/*     */     } 
/*     */ 
/*     */     
/* 266 */     String str2 = stringBuffer.toString();
/*     */     
/* 268 */     log(""Set property "" + this.property + "" = "" + str2, 3);
/*     */     
/* 270 */     getProject().setProperty(this.property, str2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String mapElement(String paramString) {
/* 283 */     int i = this.prefixMap.size();
/*     */     
/* 285 */     if (i != 0)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 290 */       for (byte b = 0; b < i; b++) {
/* 291 */         MapEntry mapEntry = this.prefixMap.elementAt(b);
/* 292 */         String str = mapEntry.apply(paramString);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 297 */         if (str != paramString) {
/* 298 */           paramString = str;
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/*     */     }
/* 304 */     return paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validateSetup() throws BuildException {
/* 313 */     if (this.path == null) {
/* 314 */       throw new BuildException(""You must specify a path to convert"");
/*     */     }
/* 316 */     if (this.property == null) {
/* 317 */       throw new BuildException(""You must specify a property"");
/*     */     }
/*     */ 
/*     */     
/* 321 */     if (this.targetOS == null && this.pathSep == null && this.dirSep == null) {
/* 322 */       throw new BuildException(""You must specify at least one of targetOS, dirSep, or pathSep"");
/*     */     }
/*     */ 
/*     */     
/* 326 */     String str1 = File.separator;
/* 327 */     String str2 = File.pathSeparator;
/*     */     
/* 329 */     if (this.targetOS != null) {
/* 330 */       str2 = this.targetWindows ? "";"" : "":"";
/* 331 */       str1 = this.targetWindows ? ""\\"" : ""/"";
/*     */     } 
/*     */     
/* 334 */     if (this.pathSep != null) {
/* 335 */       str2 = this.pathSep;
/*     */     }
/*     */     
/* 338 */     if (this.dirSep != null) {
/* 339 */       str1 = this.dirSep;
/*     */     }
/*     */     
/* 342 */     this.pathSep = str2;
/* 343 */     this.dirSep = str1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 351 */   private BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested PATH elements when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 356 */   private Path path = null;
/* 357 */   private Reference refid = null;
/* 358 */   private String targetOS = null;
/*     */   private boolean targetWindows = false;
/*     */   private boolean onWindows = false;
/* 361 */   private String property = null;
/* 362 */   private Vector prefixMap = new Vector();
/* 363 */   private String pathSep = null;
/* 364 */   private String dirSep = null;
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\PathConvert.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Property,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Property
/*     */   extends Task
/*     */ {
/*     */   protected String name;
/*     */   protected String value;
/*     */   protected File file;
/*     */   protected String resource;
/*     */   protected Path classpath;
/*     */   protected String env;
/*  79 */   protected Reference ref = null;
/*     */   
/*     */   protected boolean userProperty = false;
/*     */ 
/*     */   
/*  84 */   public void setName(String paramString) { this.name = paramString; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setLocation(File paramFile) { setValue(paramFile.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setValue(String paramString) { this.value = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setRefid(Reference paramReference) { this.ref = paramReference; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public Reference getRefid() { return this.ref; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setResource(String paramString) { this.resource = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public String getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setEnvironment(String paramString) { this.env = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public String getEnvironment() { return this.env; }
/*     */ 
/*     */   
/*     */   public void setClasspath(Path paramPath) {
/* 136 */     if (this.classpath == null) {
/* 137 */       this.classpath = paramPath;
/*     */     } else {
/* 139 */       this.classpath.append(paramPath);
/*     */     } 
/*     */   }
/*     */   
/*     */   public Path createClasspath() {
/* 144 */     if (this.classpath == null) {
/* 145 */       this.classpath = new Path(this.project);
/*     */     }
/* 147 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */   
/* 151 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setUserProperty(boolean paramBoolean) { this.userProperty = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public String toString() { return (this.value == null) ? """" : this.value; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 163 */     if (this.name != null) {
/* 164 */       if (this.value == null && this.ref == null) {
/* 165 */         throw new BuildException(""You must specify value, location or refid with the name attribute"", this.location);
/*     */       
/*     */       }
/*     */     }
/* 169 */     else if (this.file == null && this.resource == null && this.env == null) {
/* 170 */       throw new BuildException(""You must specify file, resource or environment when not using the name attribute"", this.location);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 175 */     if (this.name != null && this.value != null) {
/* 176 */       addProperty(this.name, this.value);
/*     */     }
/*     */     
/* 179 */     if (this.file != null) loadFile(this.file);
/*     */     
/* 181 */     if (this.resource != null) loadResource(this.resource);
/*     */     
/* 183 */     if (this.env != null) loadEnvironment(this.env);
/*     */     
/* 185 */     if (this.name != null && this.ref != null) {
/* 186 */       Object object = this.ref.getReferencedObject(getProject());
/* 187 */       if (object != null) {
/* 188 */         addProperty(this.name, object.toString());
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void loadFile(File paramFile) throws BuildException {
/* 194 */     Properties properties = new Properties();
/* 195 */     log(""Loading "" + paramFile.getAbsolutePath(), 3);
/*     */     try {
/* 197 */       if (paramFile.exists()) {
/* 198 */         FileInputStream fileInputStream = new FileInputStream(paramFile);
/*     */         try {
/* 200 */           properties.load(fileInputStream);
/*     */         } finally {
/* 202 */           if (fileInputStream != null) {
/* 203 */             fileInputStream.close();
/*     */           }
/*     */         } 
/* 206 */         addProperties(properties);
/*     */       } else {
/* 208 */         log(""Unable to find property file: "" + paramFile.getAbsolutePath(), 3);
/*     */       } 
/*     */     } catch (IOException iOException) {
/*     */       
/* 212 */       throw new BuildException(iOException, this.location);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void loadResource(String paramString) {
/* 217 */     Properties properties = new Properties();
/* 218 */     log(""Resource Loading "" + paramString, 3);
/*     */     try {
/* 220 */       Object object = null;
/* 221 */       InputStream inputStream = null;
/*     */       
/* 223 */       if (this.classpath != null) {
/* 224 */         object = new AntClassLoader(this.project, this.classpath);
/*     */       } else {
/* 226 */         object = getClass().getClassLoader();
/*     */       } 
/*     */       
/* 229 */       if (object == null) {
/* 230 */         inputStream = ClassLoader.getSystemResourceAsStream(paramString);
/*     */       } else {
/* 232 */         inputStream = object.getResourceAsStream(paramString);
/*     */       } 
/*     */       
/* 235 */       if (inputStream != null) {
/* 236 */         properties.load(inputStream);
/* 237 */         addProperties(properties);
/*     */       } else {
/* 239 */         log(""Unable to find resource "" + paramString, 1);
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 242 */       throw new BuildException(iOException, this.location);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void loadEnvironment(String paramString) {
/* 247 */     Properties properties = new Properties();
/* 248 */     if (!paramString.endsWith(""."")) paramString = paramString + "".""; 
/* 249 */     log(""Loading Environment "" + paramString, 3);
/* 250 */     Vector vector = Execute.getProcEnvironment();
/* 251 */     for (Enumeration enumeration = vector.elements(); enumeration.hasMoreElements(); ) {
/* 252 */       String str = enumeration.nextElement();
/* 253 */       int i = str.indexOf('=');
/* 254 */       if (i == -1) {
/* 255 */         log(""Ignoring: "" + str, 1); continue;
/*     */       } 
/* 257 */       properties.put(paramString + str.substring(0, i), str.substring(i + 1));
/*     */     } 
/*     */ 
/*     */     
/* 261 */     addProperties(properties);
/*     */   }
/*     */   
/*     */   protected void addProperties(Properties paramProperties) {
/* 265 */     resolveAllProperties(paramProperties);
/* 266 */     Enumeration enumeration = paramProperties.keys();
/* 267 */     while (enumeration.hasMoreElements()) {
/* 268 */       String str1 = enumeration.nextElement();
/* 269 */       String str2 = paramProperties.getProperty(str1);
/*     */       
/* 271 */       String str3 = ProjectHelper.replaceProperties(this.project, str2, this.project.getProperties());
/* 272 */       addProperty(str1, str3);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void addProperty(String paramString1, String paramString2) {
/* 277 */     if (this.userProperty) {
/* 278 */       if (this.project.getUserProperty(paramString1) == null) {
/* 279 */         this.project.setUserProperty(paramString1, paramString2);
/*     */       } else {
/* 281 */         log(""Override ignored for "" + paramString1, 3);
/*     */       }
/*     */     
/* 284 */     } else if (this.project.getProperty(paramString1) == null) {
/* 285 */       this.project.setProperty(paramString1, paramString2);
/*     */     } else {
/* 287 */       log(""Override ignored for "" + paramString1, 3);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void resolveAllProperties(Properties paramProperties) throws BuildException {
/* 293 */     for (Enumeration enumeration = paramProperties.keys(); enumeration.hasMoreElements(); ) {
/* 294 */       String str1 = enumeration.nextElement();
/* 295 */       String str2 = paramProperties.getProperty(str1);
/*     */       
/* 297 */       boolean bool = false;
/* 298 */       while (!bool) {
/* 299 */         Vector vector1 = new Vector();
/* 300 */         Vector vector2 = new Vector();
/* 301 */         ProjectHelper.parsePropertyString(str2, vector1, vector2);
/*     */         
/* 303 */         bool = true;
/* 304 */         if (vector2.size() != 0) {
/* 305 */           StringBuffer stringBuffer = new StringBuffer();
/* 306 */           Enumeration enumeration1 = vector1.elements();
/* 307 */           Enumeration enumeration2 = vector2.elements();
/* 308 */           while (enumeration1.hasMoreElements()) {
/* 309 */             String str = enumeration1.nextElement();
/* 310 */             if (str == null) {
/* 311 */               String str3 = enumeration2.nextElement();
/* 312 */               if (str3.equals(str1)) {
/* 313 */                 throw new BuildException(""Property "" + str1 + "" was circularly defined."");
/*     */               }
/* 315 */               str = getProject().getProperty(str3);
/* 316 */               if (str == null) {
/* 317 */                 if (paramProperties.containsKey(str3)) {
/* 318 */                   str = paramProperties.getProperty(str3);
/* 319 */                   bool = false;
/*     */                 } else {
/*     */                   
/* 322 */                   str = ""${"" + str3 + ""}"";
/*     */                 } 
/*     */               }
/*     */             } 
/* 326 */             stringBuffer.append(str);
/*     */           } 
/* 328 */           str2 = stringBuffer.toString();
/* 329 */           paramProperties.put(str1, str2);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Property.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PumpStreamHandler,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PumpStreamHandler
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   private Thread inputThread;
/*     */   private Thread errorThread;
/*     */   private OutputStream out;
/*     */   private OutputStream err;
/*     */   
/*     */   public PumpStreamHandler(OutputStream paramOutputStream1, OutputStream paramOutputStream2) {
/*  77 */     this.out = paramOutputStream1;
/*  78 */     this.err = paramOutputStream2;
/*     */   }
/*     */ 
/*     */   
/*  82 */   public PumpStreamHandler(OutputStream paramOutputStream) { this(paramOutputStream, paramOutputStream); }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public PumpStreamHandler() { this(System.out, System.err); }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setProcessOutputStream(InputStream paramInputStream) { createProcessOutputPump(paramInputStream, this.out); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setProcessErrorStream(InputStream paramInputStream) { createProcessErrorPump(paramInputStream, this.err); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProcessInputStream(OutputStream paramOutputStream) {}
/*     */ 
/*     */ 
/*     */   
/*     */   public void start() {
/* 104 */     this.inputThread.start();
/* 105 */     this.errorThread.start();
/*     */   }
/*     */ 
/*     */   
/*     */   public void stop() {
/*     */     try {
/* 111 */       this.inputThread.join();
/* 112 */     } catch (InterruptedException interruptedException) {}
/*     */     try {
/* 114 */       this.errorThread.join();
/* 115 */     } catch (InterruptedException interruptedException) {}
/*     */     try {
/* 117 */       this.err.flush();
/* 118 */     } catch (IOException iOException) {}
/*     */     try {
/* 120 */       this.out.flush();
/* 121 */     } catch (IOException iOException) {}
/*     */   }
/*     */ 
/*     */   
/* 125 */   protected OutputStream getErr() { return this.err; }
/*     */ 
/*     */ 
/*     */   
/* 129 */   protected OutputStream getOut() { return this.out; }
/*     */ 
/*     */ 
/*     */   
/* 133 */   protected void createProcessOutputPump(InputStream paramInputStream, OutputStream paramOutputStream) { this.inputThread = createPump(paramInputStream, paramOutputStream); }
/*     */ 
/*     */ 
/*     */   
/* 137 */   protected void createProcessErrorPump(InputStream paramInputStream, OutputStream paramOutputStream) { this.errorThread = createPump(paramInputStream, paramOutputStream); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Thread createPump(InputStream paramInputStream, OutputStream paramOutputStream) {
/* 145 */     Thread thread = new Thread(new StreamPumper(paramInputStream, paramOutputStream));
/* 146 */     thread.setDaemon(true);
/* 147 */     return thread;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\PumpStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Recorder,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Recorder
/*     */   extends Task
/*     */ {
/*  84 */   private String filename = null;
/*     */ 
/*     */ 
/*     */   
/*  88 */   private Boolean append = null;
/*     */ 
/*     */ 
/*     */   
/*  92 */   private Boolean start = null;
/*     */   
/*  94 */   private int loglevel = -1;
/*     */   
/*  96 */   private static Hashtable recorderEntries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setName(String paramString) { this.filename = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAction(ActionChoices paramActionChoices) {
/* 117 */     if (paramActionChoices.getValue().equalsIgnoreCase(""start"")) {
/* 118 */       this.start = Boolean.TRUE;
/*     */     } else {
/* 120 */       this.start = Boolean.FALSE;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setAppend(boolean paramBoolean) { this.append = new Boolean(paramBoolean); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLoglevel(VerbosityLevelChoices paramVerbosityLevelChoices) {
/* 137 */     String str = paramVerbosityLevelChoices.getValue();
/* 138 */     if (str.equalsIgnoreCase(""error"")) {
/* 139 */       this.loglevel = 0;
/* 140 */     } else if (str.equalsIgnoreCase(""warn"")) {
/* 141 */       this.loglevel = 1;
/* 142 */     } else if (str.equalsIgnoreCase(""info"")) {
/* 143 */       this.loglevel = 2;
/* 144 */     } else if (str.equalsIgnoreCase(""verbose"")) {
/* 145 */       this.loglevel = 3;
/* 146 */     } else if (str.equalsIgnoreCase(""debug"")) {
/* 147 */       this.loglevel = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 158 */     if (this.filename == null) {
/* 159 */       throw new BuildException(""No filename specified"");
/*     */     }
/* 161 */     getProject().log(""setting a recorder for name "" + this.filename, 4);
/*     */ 
/*     */ 
/*     */     
/* 165 */     RecorderEntry recorderEntry = getRecorder(this.filename, getProject());
/*     */     
/* 167 */     recorderEntry.setMessageOutputLevel(this.loglevel);
/* 168 */     recorderEntry.setRecordState(this.start);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ActionChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 179 */     private static final String[] values = new String[] { ""start"", ""stop"" };
/*     */     
/* 181 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class VerbosityLevelChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 190 */     private static final String[] values = new String[] { ""error"", ""warn"", ""info"", ""verbose"", ""debug"" };
/*     */ 
/*     */     
/* 193 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RecorderEntry getRecorder(String paramString, Project paramProject) throws BuildException {
/*     */     RecorderEntry recorderEntry;
/* 202 */     Object object = recorderEntries.get(paramString);
/*     */     
/* 204 */     if (object == null) {
/*     */       
/*     */       try {
/* 207 */         recorderEntry = new RecorderEntry(paramString);
/* 208 */         PrintStream printStream = null;
/* 209 */         if (this.append == null) {
/* 210 */           printStream = new PrintStream(new FileOutputStream(paramString));
/*     */         } else {
/*     */           
/* 213 */           printStream = new PrintStream(new FileOutputStream(paramString, this.append.booleanValue()));
/*     */         } 
/*     */         
/* 216 */         recorderEntry.setErrorPrintStream(printStream);
/* 217 */         recorderEntry.setOutputPrintStream(printStream);
/*     */       } catch (IOException iOException) {
/* 219 */         throw new BuildException(""Problems creating a recorder entry"", iOException);
/*     */       } 
/*     */       
/* 222 */       paramProject.addBuildListener((BuildListener)recorderEntry);
/* 223 */       recorderEntries.put(paramString, recorderEntry);
/*     */     } else {
/* 225 */       recorderEntry = (RecorderEntry)object;
/*     */     } 
/* 227 */     return recorderEntry;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Recorder.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.RecorderEntry,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.BuildLogger;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RecorderEntry
/*     */   implements BuildLogger
/*     */ {
/*  76 */   private String filename = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean record = true;
/*     */ 
/*     */ 
/*     */   
/*  84 */   private int loglevel = 2;
/*     */ 
/*     */ 
/*     */   
/*  88 */   private PrintStream out = null;
/*     */ 
/*     */ 
/*     */   
/*  92 */   private long targetStartTime = 0L;
/*     */ 
/*     */ 
/*     */   
/*  96 */   private static String lSep = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   protected RecorderEntry(String paramString) { this.filename = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public String getFilename() { return this.filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRecordState(Boolean paramBoolean) {
/* 124 */     if (paramBoolean != null) {
/* 125 */       this.record = paramBoolean.booleanValue();
/*     */     }
/*     */   }
/*     */   
/* 129 */   public void buildStarted(BuildEvent paramBuildEvent) { log(""> BUILD STARTED"", 4); }
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent paramBuildEvent) {
/* 133 */     log(""< BUILD FINISHED"", 4);
/*     */     
/* 135 */     Throwable throwable = paramBuildEvent.getException();
/* 136 */     if (throwable == null) {
/* 137 */       this.out.println(lSep + ""BUILD SUCCESSFUL"");
/*     */     } else {
/* 139 */       this.out.println(lSep + ""BUILD FAILED"" + lSep);
/* 140 */       throwable.printStackTrace(this.out);
/*     */     } 
/* 142 */     this.out.flush();
/* 143 */     this.out.close();
/*     */   }
/*     */   
/*     */   public void targetStarted(BuildEvent paramBuildEvent) {
/* 147 */     log("">> TARGET STARTED -- "" + paramBuildEvent.getTarget(), 4);
/* 148 */     log(lSep + paramBuildEvent.getTarget().getName() + "":"", 2);
/* 149 */     this.targetStartTime = System.currentTimeMillis();
/*     */   }
/*     */   
/*     */   public void targetFinished(BuildEvent paramBuildEvent) {
/* 153 */     log(""<< TARGET FINISHED -- "" + paramBuildEvent.getTarget(), 4);
/* 154 */     String str = formatTime(System.currentTimeMillis() - this.targetStartTime);
/* 155 */     log(paramBuildEvent.getTarget() + "":  duration "" + str, 3);
/* 156 */     this.out.flush();
/*     */   }
/*     */ 
/*     */   
/* 160 */   public void taskStarted(BuildEvent paramBuildEvent) { log("">>> TAST STARTED -- "" + paramBuildEvent.getTask(), 4); }
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent paramBuildEvent) {
/* 164 */     log(""<<< TASK FINISHED -- "" + paramBuildEvent.getTask(), 4);
/* 165 */     this.out.flush();
/*     */   }
/*     */   
/*     */   public void messageLogged(BuildEvent paramBuildEvent) {
/* 169 */     log(""--- MESSAGE LOGGED"", 4);
/*     */     
/* 171 */     StringBuffer stringBuffer = new StringBuffer();
/* 172 */     if (paramBuildEvent.getTask() != null) {
/* 173 */       String str = ""["" + paramBuildEvent.getTask().getTaskName() + ""]"";
/*     */       
/* 175 */       for (byte b = 0; b < 12 - str.length(); b++) {
/* 176 */         stringBuffer.append("" "");
/*     */       }
/* 178 */       stringBuffer.append(str);
/*     */     } 
/* 180 */     stringBuffer.append(paramBuildEvent.getMessage());
/*     */     
/* 182 */     log(stringBuffer.toString(), paramBuildEvent.getPriority());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void log(String paramString, int paramInt) {
/* 191 */     if (this.record && paramInt <= this.loglevel) {
/* 192 */       this.out.println(paramString);
/*     */     }
/*     */   }
/*     */   
/*     */   public void setMessageOutputLevel(int paramInt) {
/* 197 */     if (paramInt >= 0 && paramInt <= 4) {
/* 198 */       this.loglevel = paramInt;
/*     */     }
/*     */   }
/*     */   
/* 202 */   public void setOutputPrintStream(PrintStream paramPrintStream) { this.out = paramPrintStream; }
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setEmacsMode(boolean paramBoolean) { throw new RuntimeException(""Method setEmacsMode() not yet implemented.""); }
/*     */ 
/*     */ 
/*     */   
/* 210 */   public void setErrorPrintStream(PrintStream paramPrintStream) { this.out = paramPrintStream; }
/*     */ 
/*     */   
/*     */   private static String formatTime(long paramLong) {
/* 214 */     long l1 = paramLong / 1000L;
/* 215 */     long l2 = l1 / 60L;
/*     */ 
/*     */     
/* 218 */     if (l2 > 0L) {
/* 219 */       return Long.toString(l2) + "" minute"" + ((l2 == 1L) ? "" "" : ""s "") + Long.toString(l1 % 60L) + "" second"" + ((l1 % 60L == 1L) ? """" : ""s"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 225 */     return Long.toString(l1) + "" second"" + ((l1 % 60L == 1L) ? """" : ""s"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\RecorderEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rename,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rename
/*     */   extends Task
/*     */ {
/*     */   private File src;
/*     */   private File dest;
/*     */   private boolean replace = true;
/*     */   
/*  81 */   public void setSrc(File paramFile) { this.src = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setReplace(String paramString) { this; this.replace = Project.toBoolean(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 107 */     log(""DEPRECATED - The rename task is deprecated.  Use move instead."");
/*     */     
/* 109 */     if (this.dest == null) {
/* 110 */       throw new BuildException(""dest attribute is required"", this.location);
/*     */     }
/*     */     
/* 113 */     if (this.src == null) {
/* 114 */       throw new BuildException(""src attribute is required"", this.location);
/*     */     }
/*     */     
/* 117 */     if (this.replace && this.dest.exists() && 
/* 118 */       !this.dest.delete()) {
/* 119 */       throw new BuildException(""Unable to remove existing file "" + this.dest);
/*     */     }
/*     */ 
/*     */     
/* 123 */     if (!this.src.renameTo(this.dest))
/* 124 */       throw new BuildException(""Unable to rename "" + this.src + "" to "" + this.dest); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Rename.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Replace,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Replace
/*     */   extends MatchingTask
/*     */ {
/*  72 */   private File src = null;
/*  73 */   private NestedString token = null;
/*  74 */   private NestedString value = new NestedString(this);
/*     */   
/*  76 */   private File propertyFile = null;
/*  77 */   private Properties properties = null;
/*  78 */   private Vector replacefilters = new Vector();
/*     */   
/*  80 */   private File dir = null; private int fileCount;
/*     */   private int replaceCount;
/*     */   private boolean summary = false;
/*     */   
/*     */   public class NestedString { private StringBuffer buf;
/*     */     
/*     */     public NestedString(Replace this$0) {
/*  87 */       this.this$0 = this$0;
/*     */       
/*  89 */       this.buf = new StringBuffer();
/*     */     }
/*     */     private final Replace this$0;
/*  92 */     public void addText(String param1String) { this.buf.append(param1String); }
/*     */ 
/*     */ 
/*     */     
/*  96 */     public String getText() { return this.buf.toString(); } }
/*     */   
/*     */   public class Replacefilter { private String token;
/*     */     private String value;
/*     */     
/* 101 */     public Replacefilter(Replace this$0) { this.this$0 = this$0; }
/*     */ 
/*     */     
/*     */     private String property;
/*     */     
/*     */     private final Replace this$0;
/*     */     
/*     */     public void validate() throws BuildException {
/* 109 */       if (this.token == null) {
/* 110 */         String str = ""token is a mandatory attribute of replacefilter."";
/* 111 */         throw new BuildException(str);
/*     */       } 
/*     */       
/* 114 */       if ("""".equals(this.token)) {
/* 115 */         String str = ""The token attribute must not be an empty string."";
/* 116 */         throw new BuildException(str);
/*     */       } 
/*     */ 
/*     */       
/* 120 */       if (this.value != null && this.property != null) {
/* 121 */         String str = ""Either value or property can be specified, but a replacefilter element cannot have both."";
/* 122 */         throw new BuildException(str);
/*     */       } 
/*     */       
/* 125 */       if (this.property != null) {
/*     */         
/* 127 */         if (this.this$0.propertyFile == null) {
/* 128 */           String str = ""The replacefilter's property attribute can only be used with the replacetask's propertyFile attribute."";
/* 129 */           throw new BuildException(str);
/*     */         } 
/*     */ 
/*     */         
/* 133 */         if (this.this$0.properties == null || this.this$0.properties.getProperty(this.property) == null) {
/*     */           
/* 135 */           String str = ""property \"""" + this.property + ""\"" was not found in "" + this.this$0.propertyFile.getPath();
/* 136 */           throw new BuildException(str);
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*     */     public String getReplaceValue() {
/* 143 */       if (this.property != null) {
/* 144 */         return this.this$0.properties.getProperty(this.property);
/*     */       }
/* 146 */       if (this.value != null) {
/* 147 */         return this.value;
/*     */       }
/* 149 */       if (this.this$0.value != null) {
/* 150 */         return this.this$0.value.getText();
/*     */       }
/*     */ 
/*     */       
/* 154 */       return new String("""");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 159 */     public void setToken(String param1String) { this.token = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 163 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */     
/* 167 */     public void setValue(String param1String) { this.value = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 171 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */     
/* 175 */     public void setProperty(String param1String) { this.property = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 179 */     public String getProperty() { return this.property; } }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 187 */     validateAttributes();
/*     */     
/* 189 */     if (this.propertyFile != null) {
/* 190 */       this.properties = getProperties(this.propertyFile);
/*     */     }
/*     */     
/* 193 */     validateReplacefilters();
/* 194 */     this.fileCount = 0;
/* 195 */     this.replaceCount = 0;
/*     */     
/* 197 */     if (this.src != null) {
/* 198 */       processFile(this.src);
/*     */     }
/*     */     
/* 201 */     if (this.dir != null) {
/* 202 */       DirectoryScanner directoryScanner = getDirectoryScanner(this.dir);
/* 203 */       String[] arrayOfString = directoryScanner.getIncludedFiles();
/*     */       
/* 205 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 206 */         File file = new File(this.dir, arrayOfString[b]);
/* 207 */         processFile(file);
/*     */       } 
/*     */     } 
/*     */     
/* 211 */     if (this.summary) {
/* 212 */       log(""Replaced "" + this.replaceCount + "" occurrences in "" + this.fileCount + "" files."", 2);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateAttributes() throws BuildException {
/* 223 */     if (this.src == null && this.dir == null) {
/* 224 */       String str = ""Either the file or the dir attribute must be specified"";
/* 225 */       throw new BuildException(str, this.location);
/*     */     } 
/* 227 */     if (this.propertyFile != null && !this.propertyFile.exists()) {
/* 228 */       String str = ""Property file "" + this.propertyFile.getPath() + "" does not exist."";
/* 229 */       throw new BuildException(str, this.location);
/*     */     } 
/* 231 */     if (this.token == null && this.replacefilters.size() == 0) {
/* 232 */       String str = ""Either token or a nested replacefilter must be specified"";
/*     */       
/* 234 */       throw new BuildException(str, this.location);
/*     */     } 
/* 236 */     if (this.token != null && """".equals(this.token.getText())) {
/* 237 */       String str = ""The token attribute must not be an empty string."";
/* 238 */       throw new BuildException(str, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateReplacefilters() throws BuildException {
/* 250 */     for (byte b = 0; b < this.replacefilters.size(); b++) {
/* 251 */       Replacefilter replacefilter = this.replacefilters.elementAt(b);
/* 252 */       replacefilter.validate();
/*     */     } 
/*     */   }
/*     */   
/*     */   public Properties getProperties(File paramFile) throws BuildException {
/* 257 */     Properties properties1 = new Properties();
/*     */     
/*     */     try {
/* 260 */       properties1.load(new FileInputStream(paramFile));
/*     */     } catch (FileNotFoundException fileNotFoundException) {
/*     */       
/* 263 */       String str = ""Property file ("" + paramFile.getPath() + "") not found."";
/* 264 */       throw new BuildException(str);
/*     */     } catch (IOException iOException) {
/*     */       
/* 267 */       String str = ""Property file ("" + paramFile.getPath() + "") cannot be loaded."";
/* 268 */       throw new BuildException(str);
/*     */     } 
/*     */     
/* 271 */     return properties1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFile(File paramFile) throws BuildException {
/* 283 */     if (!paramFile.exists()) {
/* 284 */       throw new BuildException(""Replace: source file "" + paramFile.getPath() + "" doesn't exist"", this.location);
/*     */     }
/*     */     
/* 287 */     File file = new File(paramFile.getPath() + "".temp"");
/*     */     
/* 289 */     if (file.exists()) {
/* 290 */       throw new BuildException(""Replace: temporary file "" + file.getPath() + "" already exists"", this.location);
/*     */     }
/*     */     
/*     */     try {
/* 294 */       BufferedReader bufferedReader = new BufferedReader(new FileReader(paramFile));
/* 295 */       BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 302 */       int i = (int)paramFile.length();
/* 303 */       StringBuffer stringBuffer = new StringBuffer(i);
/* 304 */       int j = 0;
/* 305 */       byte b = 0;
/*     */       while (true) {
/* 307 */         j = bufferedReader.read();
/* 308 */         if (j < 0)
/* 309 */           break;  stringBuffer.append((char)j);
/* 310 */         b++;
/*     */       } 
/*     */ 
/*     */       
/* 314 */       String str1 = stringBuffer.toString();
/*     */ 
/*     */       
/* 317 */       String str2 = new String(str1);
/*     */       
/* 319 */       if (this.token != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 324 */         String str3 = System.getProperty(""line.separator"");
/* 325 */         String str4 = stringReplace(this.value.getText(), ""\n"", str3);
/* 326 */         String str5 = stringReplace(this.token.getText(), ""\n"", str3);
/*     */ 
/*     */         
/* 329 */         log(""Replacing in "" + paramFile.getPath() + "": "" + this.token.getText() + "" --> "" + this.value.getText(), 3);
/* 330 */         str2 = stringReplace(str2, str5, str4);
/*     */       } 
/*     */       
/* 333 */       if (this.replacefilters.size() > 0) {
/* 334 */         str2 = processReplacefilters(str2, paramFile.getPath());
/*     */       }
/*     */       
/* 337 */       boolean bool = !str2.equals(str1) ? true : false;
/* 338 */       if (bool) {
/* 339 */         bufferedWriter.write(str2, 0, str2.length());
/* 340 */         bufferedWriter.flush();
/*     */       } 
/*     */ 
/*     */       
/* 344 */       bufferedWriter.close();
/* 345 */       bufferedReader.close();
/*     */ 
/*     */ 
/*     */       
/* 349 */       if (bool) {
/* 350 */         this.fileCount++;
/* 351 */         paramFile.delete();
/* 352 */         file.renameTo(paramFile);
/*     */       } else {
/* 354 */         file.delete();
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 357 */       iOException.printStackTrace();
/* 358 */       throw new BuildException(iOException, this.location);
/*     */     } 
/*     */   }
/*     */   
/*     */   private String processReplacefilters(String paramString1, String paramString2) {
/* 363 */     String str = new String(paramString1);
/*     */     
/* 365 */     for (byte b = 0; b < this.replacefilters.size(); b++) {
/* 366 */       Replacefilter replacefilter = this.replacefilters.elementAt(b);
/*     */ 
/*     */       
/* 369 */       log(""Replacing in "" + paramString2 + "": "" + replacefilter.getToken() + "" --> "" + replacefilter.getReplaceValue(), 3);
/* 370 */       str = stringReplace(str, replacefilter.getToken(), replacefilter.getReplaceValue());
/*     */     } 
/*     */     
/* 373 */     return str;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 381 */   public void setFile(File paramFile) { this.src = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 390 */   public void setSummary(boolean paramBoolean) { this.summary = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 398 */   public void setDir(File paramFile) { this.dir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public void setToken(String paramString) { createReplaceToken().addText(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 412 */   public void setValue(String paramString) { createReplaceValue().addText(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NestedString createReplaceToken() {
/* 419 */     if (this.token == null) {
/* 420 */       this.token = new NestedString(this);
/*     */     }
/* 422 */     return this.token;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 429 */   public NestedString createReplaceValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 436 */   public void setPropertyFile(File paramFile) { this.propertyFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Replacefilter createReplacefilter() {
/* 443 */     Replacefilter replacefilter = new Replacefilter(this);
/* 444 */     this.replacefilters.addElement(replacefilter);
/* 445 */     return replacefilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String stringReplace(String paramString1, String paramString2, String paramString3) {
/* 452 */     StringBuffer stringBuffer = new StringBuffer();
/* 453 */     int i = 0;
/* 454 */     int j = paramString1.indexOf(paramString2);
/* 455 */     while (j >= 0) {
/*     */       
/* 457 */       if (j > i) {
/* 458 */         stringBuffer.append(paramString1.substring(i, j));
/*     */       }
/*     */ 
/*     */       
/* 462 */       if (paramString3 != null) {
/* 463 */         stringBuffer.append(paramString3);
/*     */       }
/*     */ 
/*     */       
/* 467 */       i = j + paramString2.length();
/* 468 */       j = paramString1.indexOf(paramString2, i);
/* 469 */       this.replaceCount++;
/*     */     } 
/*     */ 
/*     */     
/* 473 */     if (paramString1.length() > i) {
/* 474 */       stringBuffer.append(paramString1.substring(i, paramString1.length()));
/*     */     }
/*     */     
/* 477 */     return stringBuffer.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Replace.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rmic,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.rmi.Remote;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapter;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rmic
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Rmic failed, messages should have been provided."";
/*     */   private File baseDir;
/*     */   private String classname;
/*     */   private File sourceBase;
/*     */   private String stubVersion;
/*     */   private Path compileClasspath;
/*     */   private Path extdirs;
/*     */   private boolean verify = false;
/*     */   private boolean filtering = false;
/*     */   private boolean iiop = false;
/*     */   private String iiopopts;
/*     */   private boolean idl = false;
/*     */   private String idlopts;
/*     */   private boolean debug = false;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/* 123 */   private Vector compileList = new Vector();
/*     */   
/* 125 */   private ClassLoader loader = null;
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setBase(File paramFile) { this.baseDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public File getBase() { return this.baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setClassname(String paramString) { this.classname = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public String getClassname() { return this.classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setSourceBase(File paramFile) { this.sourceBase = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public File getSourceBase() { return this.sourceBase; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setStubVersion(String paramString) { this.stubVersion = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public String getStubVersion() { return this.stubVersion; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setFiltering(boolean paramBoolean) { this.filtering = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public boolean getFiltering() { return this.filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setDebug(boolean paramBoolean) { this.debug = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path paramPath) {
/* 188 */     if (this.compileClasspath == null) {
/* 189 */       this.compileClasspath = paramPath;
/*     */     } else {
/* 191 */       this.compileClasspath.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 199 */     if (this.compileClasspath == null) {
/* 200 */       this.compileClasspath = new Path(this.project);
/*     */     }
/* 202 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setVerify(boolean paramBoolean) { this.verify = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public boolean getVerify() { return this.verify; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public void setIiop(boolean paramBoolean) { this.iiop = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 243 */   public boolean getIiop() { return this.iiop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setIiopopts(String paramString) { this.iiopopts = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public String getIiopopts() { return this.iiopopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 264 */   public void setIdl(boolean paramBoolean) { this.idl = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public boolean getIdl() { return this.idl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public void setIdlopts(String paramString) { this.idlopts = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 283 */   public String getIdlopts() { return this.idlopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public Vector getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setIncludeantruntime(boolean paramBoolean) { this.includeAntRuntime = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public void setIncludejavaruntime(boolean paramBoolean) { this.includeJavaRuntime = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 319 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path paramPath) {
/* 327 */     if (this.extdirs == null) {
/* 328 */       this.extdirs = paramPath;
/*     */     } else {
/* 330 */       this.extdirs.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 338 */     if (this.extdirs == null) {
/* 339 */       this.extdirs = new Path(this.project);
/*     */     }
/* 341 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 349 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */   
/* 353 */   public Vector getCompileList() { return this.compileList; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 357 */     if (this.baseDir == null) {
/* 358 */       throw new BuildException(""base attribute must be set!"", this.location);
/*     */     }
/* 360 */     if (!this.baseDir.exists()) {
/* 361 */       throw new BuildException(""base does not exist!"", this.location);
/*     */     }
/*     */     
/* 364 */     if (this.verify) {
/* 365 */       log(""Verify has been turned on."", 2);
/*     */     }
/*     */     
/* 368 */     String str = this.project.getProperty(""build.rmic"");
/* 369 */     RmicAdapter rmicAdapter = RmicAdapterFactory.getRmic(str, this);
/*     */ 
/*     */     
/* 372 */     rmicAdapter.setRmic(this);
/*     */     
/* 374 */     Path path = rmicAdapter.getClasspath();
/* 375 */     this.loader = (ClassLoader)new AntClassLoader(this.project, path);
/*     */ 
/*     */ 
/*     */     
/* 379 */     if (this.classname == null) {
/* 380 */       DirectoryScanner directoryScanner = getDirectoryScanner(this.baseDir);
/* 381 */       String[] arrayOfString = directoryScanner.getIncludedFiles();
/* 382 */       scanDir(this.baseDir, arrayOfString, rmicAdapter.getMapper());
/*     */     } else {
/*     */       
/* 385 */       scanDir(this.baseDir, new String[] { this.classname.replace('.', File.separatorChar) + "".class"" }rmicAdapter.getMapper());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 390 */     int i = this.compileList.size();
/* 391 */     if (i > 0) {
/* 392 */       log(""RMI Compiling "" + i + "" class"" + ((i > 1) ? ""es"" : """") + "" to "" + this.baseDir, 2);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 397 */       if (!rmicAdapter.execute()) {
/* 398 */         throw new BuildException(""Rmic failed, messages should have been provided."", this.location);
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 407 */     if (null != this.sourceBase && !this.baseDir.equals(this.sourceBase)) {
/* 408 */       if (this.idl) {
/* 409 */         log(""Cannot determine sourcefiles in idl mode, "", 1);
/*     */         
/* 411 */         log(""sourcebase attribute will be ignored."", 1);
/*     */       } else {
/* 413 */         for (byte b = 0; b < i; b++) {
/* 414 */           moveGeneratedFile(this.baseDir, this.sourceBase, this.compileList.elementAt(b), rmicAdapter);
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 420 */     this.compileList.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void moveGeneratedFile(File paramFile1, File paramFile2, String paramString, RmicAdapter paramRmicAdapter) throws BuildException {
/* 433 */     String str = paramString.replace('.', File.separatorChar) + "".class"";
/*     */     
/* 435 */     String[] arrayOfString = paramRmicAdapter.getMapper().mapFileName(str);
/*     */ 
/*     */     
/* 438 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 439 */       String str1 = str.substring(0, str.length() - 6) + "".java"";
/*     */       
/* 441 */       File file1 = new File(paramFile1, str1);
/* 442 */       File file2 = new File(paramFile2, str1);
/*     */       try {
/* 444 */         this.project.copyFile(file1, file2, this.filtering);
/* 445 */         file1.delete();
/*     */       } catch (IOException iOException) {
/* 447 */         String str2 = ""Failed to copy "" + file1 + "" to "" + file2 + "" due to "" + iOException.getMessage();
/*     */         
/* 449 */         throw new BuildException(str2, iOException, this.location);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File paramFile, String[] paramArrayOfString, FileNameMapper paramFileNameMapper) {
/* 461 */     String[] arrayOfString = paramArrayOfString;
/* 462 */     if (this.idl) {
/* 463 */       log(""will leave uptodate test to rmic implementation in idl mode."", 3);
/*     */     }
/* 465 */     else if (this.iiop && this.iiopopts != null && this.iiopopts.indexOf(""-always"") > -1) {
/*     */       
/* 467 */       log(""no uptodate test as -always option has been specified"", 3);
/*     */     } else {
/*     */       
/* 470 */       SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 471 */       arrayOfString = sourceFileScanner.restrict(paramArrayOfString, paramFile, paramFile, paramFileNameMapper);
/*     */     } 
/*     */     
/* 474 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 475 */       String str = arrayOfString[b].replace(File.separatorChar, '.');
/* 476 */       str = str.substring(0, str.lastIndexOf("".class""));
/* 477 */       this.compileList.addElement(str);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isValidRmiRemote(String paramString) {
/*     */     try {
/* 486 */       Class clazz = this.loader.loadClass(paramString);
/*     */       
/* 488 */       if (clazz.isInterface() && !this.iiop && !this.idl) {
/* 489 */         return false;
/*     */       }
/* 491 */       return isValidRmiRemote(clazz);
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 493 */       log(""Unable to verify class "" + paramString + "". It could not be found."", 1);
/*     */     } catch (NoClassDefFoundError noClassDefFoundError) {
/*     */       
/* 496 */       log(""Unable to verify class "" + paramString + "". It is not defined."", 1);
/*     */     } catch (Throwable throwable) {
/*     */       
/* 499 */       log(""Unable to verify class "" + paramString + "". Loading caused Exception: "" + throwable.getMessage(), 1);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 504 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getRemoteInterface(Class paramClass) {
/* 512 */     if (Remote.class.isAssignableFrom(paramClass)) {
/* 513 */       Class[] arrayOfClass = paramClass.getInterfaces();
/* 514 */       if (arrayOfClass != null) {
/* 515 */         for (byte b = 0; b < arrayOfClass.length; b++) {
/* 516 */           if (Remote.class.isAssignableFrom(arrayOfClass[b])) {
/* 517 */             return arrayOfClass[b];
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/* 522 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 530 */   private boolean isValidRmiRemote(Class paramClass) { return (getRemoteInterface(paramClass) != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 536 */   public ClassLoader getLoader() { return this.loader; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Rmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SendEmail,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendEmail
/*     */   extends Task
/*     */ {
/*     */   private String from;
/* 110 */   private String mailhost = ""localhost"";
/*     */   private String message;
/*     */   private String toList;
/*     */   private String subject;
/* 114 */   private Vector files = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void setToList(String paramString) { this.toList = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void setFrom(String paramString) { this.from = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setMailhost(String paramString) { this.mailhost = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setMessage(String paramString) { this.message = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setSubject(String paramString) { this.subject = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiles(String paramString) {
/* 171 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", "");
/*     */     
/* 173 */     while (stringTokenizer.hasMoreTokens())
/* 174 */       this.files.addElement(this.project.resolveFile(stringTokenizer.nextToken())); 
/*     */   }
/*     */   
/*     */   public void execute() { // Byte code:
/*     */     //   0: new org/apache/tools/mail/MailMessage
/*     */     //   3: dup
/*     */     //   4: aload_0
/*     */     //   5: getfield mailhost : Ljava/lang/String;
/*     */     //   8: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   11: astore_1
/*     */     //   12: aload_0
/*     */     //   13: getfield from : Ljava/lang/String;
/*     */     //   16: ifnull -> 30
/*     */     //   19: aload_1
/*     */     //   20: aload_0
/*     */     //   21: getfield from : Ljava/lang/String;
/*     */     //   24: invokevirtual from : (Ljava/lang/String;)V
/*     */     //   27: goto -> 40
/*     */     //   30: new org/apache/tools/ant/BuildException
/*     */     //   33: dup
/*     */     //   34: ldc 'Attribute ""from"" is required.'
/*     */     //   36: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   39: athrow
/*     */     //   40: aload_0
/*     */     //   41: getfield toList : Ljava/lang/String;
/*     */     //   44: ifnull -> 83
/*     */     //   47: new java/util/StringTokenizer
/*     */     //   50: dup
/*     */     //   51: aload_0
/*     */     //   52: getfield toList : Ljava/lang/String;
/*     */     //   55: ldc ', '
/*     */     //   57: iconst_0
/*     */     //   58: invokespecial <init> : (Ljava/lang/String;Ljava/lang/String;Z)V
/*     */     //   61: astore_2
/*     */     //   62: goto -> 73
/*     */     //   65: aload_1
/*     */     //   66: aload_2
/*     */     //   67: invokevirtual nextToken : ()Ljava/lang/String;
/*     */     //   70: invokevirtual to : (Ljava/lang/String;)V
/*     */     //   73: aload_2
/*     */     //   74: invokevirtual hasMoreTokens : ()Z
/*     */     //   77: ifne -> 65
/*     */     //   80: goto -> 93
/*     */     //   83: new org/apache/tools/ant/BuildException
/*     */     //   86: dup
/*     */     //   87: ldc 'Attribute ""toList"" is required.'
/*     */     //   89: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   92: athrow
/*     */     //   93: aload_0
/*     */     //   94: getfield subject : Ljava/lang/String;
/*     */     //   97: ifnull -> 108
/*     */     //   100: aload_1
/*     */     //   101: aload_0
/*     */     //   102: getfield subject : Ljava/lang/String;
/*     */     //   105: invokevirtual setSubject : (Ljava/lang/String;)V
/*     */     //   108: aload_0
/*     */     //   109: getfield files : Ljava/util/Vector;
/*     */     //   112: invokevirtual isEmpty : ()Z
/*     */     //   115: ifne -> 300
/*     */     //   118: aload_1
/*     */     //   119: invokevirtual getPrintStream : ()Ljava/io/PrintStream;
/*     */     //   122: astore_2
/*     */     //   123: aload_0
/*     */     //   124: getfield files : Ljava/util/Vector;
/*     */     //   127: invokevirtual elements : ()Ljava/util/Enumeration;
/*     */     //   130: astore_3
/*     */     //   131: goto -> 288
/*     */     //   134: aload_3
/*     */     //   135: invokeinterface nextElement : ()Ljava/lang/Object;
/*     */     //   140: checkcast java/io/File
/*     */     //   143: astore #4
/*     */     //   145: aload #4
/*     */     //   147: invokevirtual exists : ()Z
/*     */     //   150: ifeq -> 252
/*     */     //   153: aload #4
/*     */     //   155: invokevirtual canRead : ()Z
/*     */     //   158: ifeq -> 252
/*     */     //   161: sipush #1024
/*     */     //   164: istore #5
/*     */     //   166: iload #5
/*     */     //   168: newarray byte
/*     */     //   170: astore #7
/*     */     //   172: aconst_null
/*     */     //   173: astore #8
/*     */     //   175: new java/io/BufferedInputStream
/*     */     //   178: dup
/*     */     //   179: new java/io/FileInputStream
/*     */     //   182: dup
/*     */     //   183: aload #4
/*     */     //   185: invokespecial <init> : (Ljava/io/File;)V
/*     */     //   188: iload #5
/*     */     //   190: invokespecial <init> : (Ljava/io/InputStream;I)V
/*     */     //   193: astore #8
/*     */     //   195: goto -> 207
/*     */     //   198: aload_2
/*     */     //   199: aload #7
/*     */     //   201: iconst_0
/*     */     //   202: iload #6
/*     */     //   204: invokevirtual write : ([BII)V
/*     */     //   207: aload #8
/*     */     //   209: aload #7
/*     */     //   211: iconst_0
/*     */     //   212: iload #5
/*     */     //   214: invokevirtual read : ([BII)I
/*     */     //   217: dup
/*     */     //   218: istore #6
/*     */     //   220: iconst_m1
/*     */     //   221: if_icmpne -> 198
/*     */     //   224: jsr -> 238
/*     */     //   227: goto -> 288
/*     */     //   230: astore #9
/*     */     //   232: jsr -> 238
/*     */     //   235: aload #9
/*     */     //   237: athrow
/*     */     //   238: astore #10
/*     */     //   240: aload #8
/*     */     //   242: ifnull -> 250
/*     */     //   245: aload #8
/*     */     //   247: invokevirtual close : ()V
/*     */     //   250: ret #10
/*     */     //   252: new org/apache/tools/ant/BuildException
/*     */     //   255: dup
/*     */     //   256: new java/lang/StringBuffer
/*     */     //   259: dup
/*     */     //   260: invokespecial <init> : ()V
/*     */     //   263: ldc 'File ""'
/*     */     //   265: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuffer;
/*     */     //   268: aload #4
/*     */     //   270: invokevirtual getName : ()Ljava/lang/String;
/*     */     //   273: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuffer;
/*     */     //   276: ldc '"" does not exist or is not readable.'
/*     */     //   278: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuffer;
/*     */     //   281: invokevirtual toString : ()Ljava/lang/String;
/*     */     //   284: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   287: athrow
/*     */     //   288: aload_3
/*     */     //   289: invokeinterface hasMoreElements : ()Z
/*     */     //   294: ifne -> 134
/*     */     //   297: goto -> 333
/*     */     //   300: aload_0
/*     */     //   301: getfield message : Ljava/lang/String;
/*     */     //   304: ifnull -> 323
/*     */     //   307: aload_1
/*     */     //   308: invokevirtual getPrintStream : ()Ljava/io/PrintStream;
/*     */     //   311: astore_2
/*     */     //   312: aload_2
/*     */     //   313: aload_0
/*     */     //   314: getfield message : Ljava/lang/String;
/*     */     //   317: invokevirtual print : (Ljava/lang/String;)V
/*     */     //   320: goto -> 333
/*     */     //   323: new org/apache/tools/ant/BuildException
/*     */     //   326: dup
/*     */     //   327: ldc 'Attribute ""file"" or ""message"" is required.'
/*     */     //   329: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   332: athrow
/*     */     //   333: aload_0
/*     */     //   334: ldc 'Sending email'
/*     */     //   336: invokevirtual log : (Ljava/lang/String;)V
/*     */     //   339: aload_1
/*     */     //   340: invokevirtual sendAndClose : ()V
/*     */     //   343: goto -> 377
/*     */     //   346: astore_1
/*     */     //   347: new org/apache/tools/ant/BuildException
/*     */     //   350: dup
/*     */     //   351: new java/lang/StringBuffer
/*     */     //   354: dup
/*     */     //   355: invokespecial <init> : ()V
/*     */     //   358: ldc 'IO error sending mail: '
/*     */     //   360: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuffer;
/*     */     //   363: aload_1
/*     */     //   364: invokevirtual getMessage : ()Ljava/lang/String;
/*     */     //   367: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuffer;
/*     */     //   370: invokevirtual toString : ()Ljava/lang/String;
/*     */     //   373: invokespecial <init> : (Ljava/lang/String;)V
/*     */     //   376: athrow
/*     */     //   377: return
/*     */     // Line number table:
/*     */     //   Java source line number -> byte code offset
/*     */     //   #186	-> 0
/*     */     //   #188	-> 12
/*     */     //   #189	-> 19
/*     */     //   #191	-> 30
/*     */     //   #194	-> 40
/*     */     //   #195	-> 47
/*     */     //   #197	-> 62
/*     */     //   #198	-> 65
/*     */     //   #197	-> 73
/*     */     //   #201	-> 83
/*     */     //   #204	-> 93
/*     */     //   #205	-> 100
/*     */     //   #208	-> 108
/*     */     //   #209	-> 118
/*     */     //   #211	-> 123
/*     */     //   #212	-> 134
/*     */     //   #214	-> 145
/*     */     //   #215	-> 161
/*     */     //   #217	-> 166
/*     */     //   #219	-> 172
/*     */     //   #221	-> 175
/*     */     //   #224	-> 195
/*     */     //   #225	-> 198
/*     */     //   #224	-> 207
/*     */     //   #228	-> 230
/*     */     //   #229	-> 245
/*     */     //   #234	-> 252
/*     */     //   #211	-> 288
/*     */     //   #238	-> 300
/*     */     //   #239	-> 307
/*     */     //   #240	-> 312
/*     */     //   #242	-> 323
/*     */     //   #245	-> 333
/*     */     //   #246	-> 339
/*     */     //   #248	-> 346
/*     */     //   #250	-> 377
/*     */     // Exception table:
/*     */     //   from	to	target	type
/*     */     //   0	343	346	java/io/IOException
/*     */     //   175	230	230	finally }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\SendEmail.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sequential,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import java.util.Vector;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Task;
/*    */ import org.apache.tools.ant.TaskContainer;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Sequential
/*    */   extends Task
/*    */   implements TaskContainer
/*    */ {
/* 71 */   private Vector nestedTasks = new Vector();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 80 */   public void addTask(Task paramTask) { this.nestedTasks.addElement(paramTask); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void execute() throws BuildException {
/* 87 */     for (Enumeration enumeration = this.nestedTasks.elements(); enumeration.hasMoreElements(); ) {
/* 88 */       Task task = enumeration.nextElement();
/* 89 */       task.perform();
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Sequential.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SignJar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SignJar
/*     */   extends Task
/*     */ {
/*     */   protected String jar;
/*     */   protected String alias;
/*     */   protected String keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected String sigfile;
/*     */   protected String signedjar;
/*     */   protected boolean verbose;
/*     */   protected boolean internalsf;
/*     */   protected boolean sectionsonly;
/* 100 */   protected Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean lazy;
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setJar(String paramString) { this.jar = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setAlias(String paramString) { this.alias = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setKeystore(String paramString) { this.keystore = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setStorepass(String paramString) { this.storepass = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setStoretype(String paramString) { this.storetype = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setKeypass(String paramString) { this.keypass = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setSigfile(String paramString) { this.sigfile = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setSignedjar(String paramString) { this.signedjar = paramString; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setVerbose(boolean paramBoolean) { this.verbose = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setInternalsf(boolean paramBoolean) { this.internalsf = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setSectionsonly(boolean paramBoolean) { this.sectionsonly = paramBoolean; }
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void setLazy(boolean paramBoolean) { this.lazy = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 164 */     if (null == this.jar && null == this.filesets) {
/* 165 */       throw new BuildException(""jar must be set through jar attribute or nested filesets"");
/*     */     }
/* 167 */     if (null != this.jar) {
/* 168 */       doOneJar(this.jar, this.signedjar);
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 174 */     for (byte b = 0; b < this.filesets.size(); b++) {
/* 175 */       FileSet fileSet = this.filesets.elementAt(b);
/* 176 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 177 */       String[] arrayOfString = directoryScanner.getIncludedFiles();
/* 178 */       for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 179 */         doOneJar(arrayOfString[b1], null);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void doOneJar(String paramString1, String paramString2) throws BuildException {
/* 186 */     this; if (Project.getJavaVersion().equals(""1.1"")) {
/* 187 */       throw new BuildException(""The signjar task is only available on JDK versions 1.2 or greater"");
/*     */     }
/*     */     
/* 190 */     if (null == this.alias) {
/* 191 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 194 */     if (null == this.storepass) {
/* 195 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 198 */     if (isUpToDate(paramString1, paramString2))
/*     */       return; 
/* 200 */     StringBuffer stringBuffer = new StringBuffer();
/*     */     
/* 202 */     ExecTask execTask = (ExecTask)this.project.createTask(""exec"");
/* 203 */     execTask.setExecutable(""jarsigner"");
/*     */     
/* 205 */     if (null != this.keystore) {
/* 206 */       execTask.createArg().setValue(""-keystore"");
/* 207 */       execTask.createArg().setValue(this.keystore);
/*     */     } 
/*     */     
/* 210 */     if (null != this.storepass) {
/* 211 */       execTask.createArg().setValue(""-storepass"");
/* 212 */       execTask.createArg().setValue(this.storepass);
/*     */     } 
/*     */     
/* 215 */     if (null != this.storetype) {
/* 216 */       execTask.createArg().setValue(""-storetype"");
/* 217 */       execTask.createArg().setValue(this.storetype);
/*     */     } 
/*     */     
/* 220 */     if (null != this.keypass) {
/* 221 */       execTask.createArg().setValue(""-keypass"");
/* 222 */       execTask.createArg().setValue(this.keypass);
/*     */     } 
/*     */     
/* 225 */     if (null != this.sigfile) {
/* 226 */       execTask.createArg().setValue(""-sigfile"");
/* 227 */       execTask.createArg().setValue(this.sigfile);
/*     */     } 
/*     */     
/* 230 */     if (null != paramString2) {
/* 231 */       execTask.createArg().setValue(""-signedjar"");
/* 232 */       execTask.createArg().setValue(paramString2);
/*     */     } 
/*     */     
/* 235 */     if (this.verbose) {
/* 236 */       execTask.createArg().setValue(""-verbose"");
/*     */     }
/*     */     
/* 239 */     if (this.internalsf) {
/* 240 */       execTask.createArg().setValue(""-internalsf"");
/*     */     }
/*     */     
/* 243 */     if (this.sectionsonly) {
/* 244 */       execTask.createArg().setValue(""-sectionsonly"");
/*     */     }
/*     */     
/* 247 */     execTask.createArg().setValue(paramString1);
/*     */ 
/*     */     
/* 250 */     execTask.createArg().setValue(this.alias);
/*     */     
/* 252 */     log(""Signing Jar : "" + (new File(paramString1)).getAbsolutePath());
/* 253 */     execTask.setFailonerror(true);
/* 254 */     execTask.setTaskName(getTaskName());
/* 255 */     execTask.execute();
/*     */   }
/*     */   
/*     */   protected boolean isUpToDate(String paramString1, String paramString2) {
/* 259 */     if (null == paramString1) {
/* 260 */       return false;
/*     */     }
/*     */     
/* 263 */     if (null != paramString2) {
/*     */       
/* 265 */       File file1 = new File(paramString1);
/* 266 */       File file2 = new File(paramString2);
/*     */       
/* 268 */       if (!file1.exists()) return false; 
/* 269 */       if (!file2.exists()) return false; 
/* 270 */       if (file1.equals(file2)) return false; 
/* 271 */       if (file2.lastModified() > file1.lastModified()) {
/* 272 */         return true;
/*     */       }
/* 274 */     } else if (this.lazy) {
/* 275 */       return isSigned(paramString1);
/*     */     } 
/*     */ 
/*     */     
/* 279 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isSigned(String paramString) {
/* 286 */     File file = new File(paramString);
/* 287 */     if (!file.exists()) {
/* 288 */       return false;
/*     */     }
/* 290 */     ZipFile zipFile = null;
/*     */     try {
/* 292 */       zipFile = new ZipFile(file);
/* 293 */       if (null == this.alias) {
/* 294 */         Enumeration enumeration = zipFile.entries();
/* 295 */         while (enumeration.hasMoreElements()) {
/* 296 */           String str = ((ZipEntry)enumeration.nextElement()).getName();
/* 297 */           if (str.startsWith(""META-INF/"") && str.endsWith("".SF"")) {
/* 298 */             return true;
/*     */           }
/*     */         } 
/* 301 */         return false;
/*     */       } 
/* 303 */       return (zipFile.getEntry(""META-INF/"" + this.alias.toUpperCase() + "".SF"") != null);
/*     */     }
/*     */     catch (IOException iOException) {
/*     */       
/* 307 */       return false;
/*     */     } finally {
/* 309 */       if (zipFile != null)
/* 310 */         try { zipFile.close(); } catch (IOException iOException) {} 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\SignJar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sleep,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sleep
/*     */   extends Task
/*     */ {
/*     */   private boolean failOnError = true;
/*  77 */   private int seconds = 0;
/*     */ 
/*     */ 
/*     */   
/*  81 */   private int hours = 0;
/*     */ 
/*     */ 
/*     */   
/*  85 */   private int minutes = 0;
/*     */ 
/*     */ 
/*     */   
/*  89 */   private int milliseconds = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setSeconds(int paramInt) { this.seconds = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setHours(int paramInt) { this.hours = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void setMinutes(int paramInt) { this.minutes = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setMilliseconds(int paramInt) { this.milliseconds = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void doSleep(long paramLong) {
/*     */     try {
/* 147 */       Thread.currentThread(); Thread.sleep(paramLong);
/*     */     }
/* 149 */     catch (InterruptedException interruptedException) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setFailOnError(boolean paramBoolean) { this.failOnError = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   private long getSleepTime() { return ((this.hours * 60L + this.minutes) * 60L + this.seconds) * 1000L + this.milliseconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() throws BuildException {
/* 182 */     long l = getSleepTime();
/* 183 */     if (getSleepTime() < 0L) {
/* 184 */       throw new BuildException(""Negative sleep periods are not supported"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 198 */       validate();
/* 199 */       long l = getSleepTime();
/* 200 */       log(""sleeping for "" + l + "" milliseconds"", 3);
/*     */       
/* 202 */       doSleep(l);
/*     */     } catch (Exception exception) {
/*     */       
/* 205 */       if (this.failOnError) {
/* 206 */         throw new BuildException(exception);
/*     */       }
/*     */       
/* 209 */       String str = exception.toString();
/* 210 */       log(str, 0);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Sleep.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SQLExec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import java.sql.Connection;
/*     */ import java.sql.DatabaseMetaData;
/*     */ import java.sql.Driver;
/*     */ import java.sql.ResultSet;
/*     */ import java.sql.ResultSetMetaData;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.Statement;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SQLExec
/*     */   extends Task
/*     */ {
/*     */   public static class DelimiterType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String NORMAL = ""normal"";
/*     */     public static final String ROW = ""row"";
/*     */     
/*  83 */     public String[] getValues() { return new String[] { ""normal"", ""row"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  88 */   private int goodSql = 0; private int totalSql = 0;
/*     */   
/*     */   private Path classpath;
/*     */   
/*     */   private AntClassLoader loader;
/*     */   
/*  94 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private Connection conn = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean autocommit = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   private Statement statement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   private String driver = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   private String url = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   private String userId = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   private String password = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   private String sqlCommand = """";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   private Vector transactions = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   private String delimiter = "";"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   private String delimiterType = ""normal"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean print = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean showheaders = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   private File output = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   private String rdbms = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   private String version = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   private String onError = ""abort"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path paramPath) {
/* 191 */     if (this.classpath == null) {
/* 192 */       this.classpath = paramPath;
/*     */     } else {
/* 194 */       this.classpath.append(paramPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 202 */     if (this.classpath == null) {
/* 203 */       this.classpath = new Path(this.project);
/*     */     }
/* 205 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setSrc(File paramFile) { this.srcFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 226 */   public void addText(String paramString) { this.sqlCommand += paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Transaction createTransaction() {
/* 241 */     Transaction transaction = new Transaction(this);
/* 242 */     this.transactions.addElement(transaction);
/* 243 */     return transaction;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setDriver(String paramString) { this.driver = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setUrl(String paramString) { this.url = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 264 */   public void setUserid(String paramString) { this.userId = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void setPassword(String paramString) { this.password = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void setAutocommit(boolean paramBoolean) { this.autocommit = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public void setDelimiter(String paramString) { this.delimiter = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 298 */   public void setDelimiterType(DelimiterType paramDelimiterType) { this.delimiterType = paramDelimiterType.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 305 */   public void setPrint(boolean paramBoolean) { this.print = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public void setShowheaders(boolean paramBoolean) { this.showheaders = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 319 */   public void setOutput(File paramFile) { this.output = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 326 */   public void setRdbms(String paramString) { this.rdbms = paramString.toLowerCase(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 333 */   public void setVersion(String paramString) { this.version = paramString.toLowerCase(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 340 */   public void setOnerror(OnError paramOnError) { this.onError = paramOnError.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 347 */     this.sqlCommand = this.sqlCommand.trim();
/*     */     
/* 349 */     if (this.srcFile == null && this.sqlCommand.length() == 0 && this.filesets.isEmpty()) {
/* 350 */       if (this.transactions.size() == 0) {
/* 351 */         throw new BuildException(""Source file or fileset, transactions or sql statement must be set!"", this.location);
/*     */       }
/*     */     } else {
/*     */       
/* 355 */       for (byte b = 0; b < this.filesets.size(); b++) {
/* 356 */         FileSet fileSet = this.filesets.elementAt(b);
/* 357 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 358 */         File file = fileSet.getDir(this.project);
/*     */         
/* 360 */         String[] arrayOfString = directoryScanner.getIncludedFiles();
/*     */ 
/*     */         
/* 363 */         for (byte b1 = 0; b1 < arrayOfString.length; b1++) {
/* 364 */           Transaction transaction1 = createTransaction();
/* 365 */           transaction1.setSrc(new File(file, arrayOfString[b1]));
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 370 */       Transaction transaction = createTransaction();
/* 371 */       transaction.setSrc(this.srcFile);
/* 372 */       transaction.addText(this.sqlCommand);
/*     */     } 
/*     */     
/* 375 */     if (this.driver == null) {
/* 376 */       throw new BuildException(""Driver attribute must be set!"", this.location);
/*     */     }
/* 378 */     if (this.userId == null) {
/* 379 */       throw new BuildException(""User Id attribute must be set!"", this.location);
/*     */     }
/* 381 */     if (this.password == null) {
/* 382 */       throw new BuildException(""Password attribute must be set!"", this.location);
/*     */     }
/* 384 */     if (this.url == null) {
/* 385 */       throw new BuildException(""Url attribute must be set!"", this.location);
/*     */     }
/* 387 */     if (this.srcFile != null && !this.srcFile.exists()) {
/* 388 */       throw new BuildException(""Source file does not exist!"", this.location);
/*     */     }
/* 390 */     Driver driver1 = null;
/*     */     
/*     */     try {
/*     */       Class clazz;
/* 394 */       if (this.classpath != null) {
/* 395 */         log(""Loading "" + this.driver + "" using AntClassLoader with classpath "" + this.classpath, 3);
/*     */ 
/*     */         
/* 398 */         this.loader = new AntClassLoader(this.project, this.classpath);
/* 399 */         clazz = this.loader.loadClass(this.driver);
/*     */       } else {
/*     */         
/* 402 */         log(""Loading "" + this.driver + "" using system loader."", 3);
/* 403 */         clazz = Class.forName(this.driver);
/*     */       } 
/* 405 */       driver1 = (Driver)clazz.newInstance();
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 407 */       throw new BuildException(""Class Not Found: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     } catch (IllegalAccessException illegalAccessException) {
/* 409 */       throw new BuildException(""Illegal Access: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     } catch (InstantiationException instantiationException) {
/* 411 */       throw new BuildException(""Instantiation Exception: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     } 
/*     */     
/*     */     try {
/* 415 */       log(""connecting to "" + this.url, 3);
/* 416 */       Properties properties = new Properties();
/* 417 */       properties.put(""user"", this.userId);
/* 418 */       properties.put(""password"", this.password);
/* 419 */       this.conn = driver1.connect(this.url, properties);
/*     */       
/* 421 */       if (this.conn == null)
/*     */       {
/* 423 */         throw new SQLException(""No suitable Driver for "" + this.url);
/*     */       }
/*     */       
/* 426 */       if (!isValidRdbms(this.conn))
/*     */         return; 
/* 428 */       this.conn.setAutoCommit(this.autocommit);
/*     */       
/* 430 */       this.statement = this.conn.createStatement();
/*     */ 
/*     */       
/* 433 */       PrintStream printStream = System.out;
/*     */       try {
/* 435 */         if (this.output != null) {
/* 436 */           log(""Opening PrintStream to output file "" + this.output, 3);
/* 437 */           printStream = new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output)));
/*     */         } 
/*     */ 
/*     */         
/* 441 */         Enumeration enumeration = this.transactions.elements();
/* 442 */         while (enumeration.hasMoreElements()) {
/*     */           
/* 444 */           ((Transaction)enumeration.nextElement()).runTransaction(printStream);
/* 445 */           if (!this.autocommit) {
/* 446 */             log(""Commiting transaction"", 3);
/* 447 */             this.conn.commit();
/*     */           } 
/*     */         } 
/*     */       } finally {
/*     */         
/* 452 */         if (printStream != null && printStream != System.out) {
/* 453 */           printStream.close();
/*     */         }
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 457 */       if (!this.autocommit && this.conn != null && this.onError.equals(""abort"")) {
/*     */         try {
/* 459 */           this.conn.rollback();
/* 460 */         } catch (SQLException sQLException) {}
/*     */       }
/* 462 */       throw new BuildException(iOException, this.location);
/*     */     } catch (SQLException sQLException) {
/* 464 */       if (!this.autocommit && this.conn != null && this.onError.equals(""abort"")) {
/*     */         try {
/* 466 */           this.conn.rollback();
/* 467 */         } catch (SQLException sQLException1) {}
/*     */       }
/* 469 */       throw new BuildException(sQLException, this.location);
/*     */     } finally {
/*     */       
/*     */       try {
/* 473 */         if (this.statement != null) {
/* 474 */           this.statement.close();
/*     */         }
/* 476 */         if (this.conn != null) {
/* 477 */           this.conn.close();
/*     */         }
/*     */       }
/* 480 */       catch (SQLException sQLException) {}
/*     */     } 
/*     */     
/* 483 */     log(this.goodSql + "" of "" + this.totalSql + "" SQL statements executed successfully"");
/*     */   }
/*     */ 
/*     */   
/*     */   protected void runStatements(Reader paramReader, PrintStream paramPrintStream) throws SQLException, IOException {
/* 488 */     String str1 = """";
/* 489 */     String str2 = """";
/*     */     
/* 491 */     BufferedReader bufferedReader = new BufferedReader(paramReader);
/*     */     
/*     */     try {
/* 494 */       while ((str2 = bufferedReader.readLine()) != null) {
/* 495 */         str2 = str2.trim();
/* 496 */         str2 = ProjectHelper.replaceProperties(this.project, str2, this.project.getProperties());
/*     */         
/* 498 */         if (str2.startsWith(""//"") || 
/* 499 */           str2.startsWith(""--""))
/* 500 */           continue;  StringTokenizer stringTokenizer = new StringTokenizer(str2);
/* 501 */         if (stringTokenizer.hasMoreTokens()) {
/* 502 */           String str = stringTokenizer.nextToken();
/* 503 */           if (""REM"".equalsIgnoreCase(str)) {
/*     */             continue;
/*     */           }
/*     */         } 
/*     */         
/* 508 */         str1 = str1 + "" "" + str2;
/* 509 */         str1 = str1.trim();
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 514 */         if (str2.indexOf(""--"") >= 0) str1 = str1 + ""\n"";
/*     */         
/* 516 */         if ((this.delimiterType.equals(""normal"") && str1.endsWith(this.delimiter)) || (this.delimiterType.equals(""row"") && str2.equals(this.delimiter))) {
/*     */           
/* 518 */           log(""SQL: "" + str1, 3);
/* 519 */           execSQL(str1.substring(0, str1.length() - this.delimiter.length()), paramPrintStream);
/* 520 */           str1 = """";
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 525 */       if (!str1.equals("""")) {
/* 526 */         execSQL(str1, paramPrintStream);
/*     */       }
/*     */     } catch (SQLException sQLException) {
/* 529 */       throw sQLException;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidRdbms(Connection paramConnection) {
/* 538 */     if (this.rdbms == null && this.version == null) {
/* 539 */       return true;
/*     */     }
/*     */     try {
/* 542 */       DatabaseMetaData databaseMetaData = paramConnection.getMetaData();
/*     */       
/* 544 */       if (this.rdbms != null) {
/* 545 */         String str = databaseMetaData.getDatabaseProductName().toLowerCase();
/*     */         
/* 547 */         log(""RDBMS = "" + str, 3);
/* 548 */         if (str == null || str.indexOf(this.rdbms) < 0) {
/* 549 */           log(""Not the required RDBMS: "" + this.rdbms, 3);
/* 550 */           return false;
/*     */         } 
/*     */       } 
/*     */       
/* 554 */       if (this.version != null) {
/* 555 */         String str = databaseMetaData.getDatabaseProductVersion().toLowerCase();
/*     */         
/* 557 */         log(""Version = "" + str, 3);
/* 558 */         if (str == null || (!str.startsWith(this.version) && str.indexOf("" "" + this.version) < 0))
/*     */         {
/*     */           
/* 561 */           log(""Not the required version: \"""" + this.version + ""\"""", 3);
/* 562 */           return false;
/*     */         }
/*     */       
/*     */       } 
/*     */     } catch (SQLException sQLException) {
/*     */       
/* 568 */       log(""Failed to obtain required RDBMS information"", 0);
/* 569 */       return false;
/*     */     } 
/*     */     
/* 572 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void execSQL(String paramString, PrintStream paramPrintStream) throws SQLException {
/* 580 */     if ("""".equals(paramString.trim()))
/*     */       return; 
/*     */     try {
/* 583 */       this.totalSql++;
/* 584 */       if (!this.statement.execute(paramString)) {
/* 585 */         log(this.statement.getUpdateCount() + "" rows affected"", 3);
/*     */ 
/*     */       
/*     */       }
/* 589 */       else if (this.print) {
/* 590 */         printResults(paramPrintStream);
/*     */       } 
/*     */ 
/*     */       
/* 594 */       SQLWarning sQLWarning = this.conn.getWarnings();
/* 595 */       while (sQLWarning != null) {
/* 596 */         log(sQLWarning + "" sql warning"", 3);
/* 597 */         sQLWarning = sQLWarning.getNextWarning();
/*     */       } 
/* 599 */       this.conn.clearWarnings();
/* 600 */       this.goodSql++;
/*     */     } catch (SQLException sQLException) {
/*     */       
/* 603 */       log(""Failed to execute: "" + paramString, 0);
/* 604 */       if (!this.onError.equals(""continue"")) throw sQLException; 
/* 605 */       log(sQLException.toString(), 0);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void printResults(PrintStream paramPrintStream) throws SQLException {
/* 613 */     ResultSet resultSet = null;
/*     */     do {
/* 615 */       resultSet = this.statement.getResultSet();
/* 616 */       if (resultSet == null)
/* 617 */         continue;  log(""Processing new result set."", 3);
/* 618 */       ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
/* 619 */       int i = resultSetMetaData.getColumnCount();
/* 620 */       StringBuffer stringBuffer = new StringBuffer();
/* 621 */       if (this.showheaders) {
/* 622 */         for (byte b = 1; b < i; b++) {
/* 623 */           stringBuffer.append(resultSetMetaData.getColumnName(b));
/* 624 */           stringBuffer.append("","");
/*     */         } 
/* 626 */         stringBuffer.append(resultSetMetaData.getColumnName(i));
/* 627 */         paramPrintStream.println(stringBuffer);
/* 628 */         stringBuffer.setLength(0);
/*     */       } 
/* 630 */       while (resultSet.next()) {
/* 631 */         boolean bool = true;
/* 632 */         for (byte b = 1; b <= i; b++) {
/* 633 */           String str = resultSet.getString(b);
/* 634 */           if (str != null) {
/* 635 */             str = str.trim();
/*     */           }
/*     */           
/* 638 */           if (bool) {
/* 639 */             bool = false;
/*     */           } else {
/*     */             
/* 642 */             stringBuffer.append("","");
/*     */           } 
/* 644 */           stringBuffer.append(str);
/*     */         } 
/* 646 */         paramPrintStream.println(stringBuffer);
/* 647 */         stringBuffer.setLength(0);
/*     */       }
/*     */     
/*     */     }
/* 651 */     while (this.statement.getMoreResults());
/* 652 */     paramPrintStream.println();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class OnError
/*     */     extends EnumeratedAttribute
/*     */   {
/* 661 */     public String[] getValues() { return new String[] { ""continue"", ""stop"", ""abort"" }; }
/*     */   }
/*     */   
/*     */   public class Transaction
/*     */   {
/*     */     private File tSrcFile;
/*     */     private String tSqlCommand;
/*     */     private final SQLExec this$0;
/*     */     
/*     */     public Transaction(SQLExec this$0) {
/* 671 */       this.this$0 = this$0;
/* 672 */       this.tSrcFile = null;
/* 673 */       this.tSqlCommand = """";
/*     */     }
/*     */     
/* 676 */     public void setSrc(File param1File) { this.tSrcFile = param1File; }
/*     */ 
/*     */ 
/*     */     
/* 680 */     public void addText(String param1String) { this.tSqlCommand += param1String; }
/*     */ 
/*     */     
/*     */     private void runTransaction(PrintStream param1PrintStream) throws IOException, SQLException {
/* 684 */       if (this.tSqlCommand.length() != 0) {
/* 685 */         this.this$0.log(""Executing commands"", 2);
/* 686 */         this.this$0.runStatements(new StringReader(this.tSqlCommand), param1PrintStream);
/*     */       } 
/*     */       
/* 689 */       if (this.tSrcFile != null) {
/* 690 */         this.this$0.log(""Executing file: "" + this.tSrcFile.getAbsolutePath(), 2);
/*     */         
/* 692 */         FileReader fileReader = new FileReader(this.tSrcFile);
/* 693 */         this.this$0.runStatements(fileReader, param1PrintStream);
/* 694 */         fileReader.close();
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\SQLExec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.StreamPumper,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StreamPumper
/*     */   implements Runnable
/*     */ {
/*     */   private static final int SLEEP = 5;
/*     */   private static final int SIZE = 128;
/*     */   private InputStream is;
/*     */   private OutputStream os;
/*     */   
/*     */   public StreamPumper(InputStream paramInputStream, OutputStream paramOutputStream) {
/*  84 */     this.is = paramInputStream;
/*  85 */     this.os = paramOutputStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/*  95 */     byte[] arrayOfByte = new byte[128];
/*     */     
/*     */     try {
/*     */       int i;
/*  99 */       while ((i = this.is.read(arrayOfByte)) > 0) {
/* 100 */         this.os.write(arrayOfByte, 0, i);
/*     */         try {
/* 102 */           Thread.sleep(5L);
/* 103 */         } catch (InterruptedException interruptedException) {}
/*     */       } 
/* 105 */     } catch (IOException iOException) {}
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\StreamPumper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tar
/*     */   extends MatchingTask
/*     */ {
/*     */   public static final String WARN = ""warn"";
/*     */   public static final String FAIL = ""fail"";
/*     */   public static final String TRUNCATE = ""truncate"";
/*     */   public static final String GNU = ""gnu"";
/*     */   public static final String OMIT = ""omit"";
/*  80 */   private String[] validModes = new String[] { ""warn"", ""fail"", ""truncate"", ""gnu"", ""omit"" };
/*     */   
/*     */   File tarFile;
/*     */   
/*     */   File baseDir;
/*  85 */   String longFileMode = ""warn"";
/*     */   
/*  87 */   Vector filesets = new Vector();
/*  88 */   Vector fileSetFiles = new Vector();
/*     */ 
/*     */   
/*     */   private boolean longWarningGiven = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public TarFileSet createTarFileSet() {
/*  96 */     TarFileSet tarFileSet = new TarFileSet();
/*  97 */     this.filesets.addElement(tarFileSet);
/*  98 */     return tarFileSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setTarfile(File paramFile) { this.tarFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setBasedir(File paramFile) { this.baseDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLongfile(String paramString) {
/* 127 */     for (byte b = 0; b < this.validModes.length; b++) {
/* 128 */       if (paramString.equalsIgnoreCase(this.validModes[b])) {
/* 129 */         this.longFileMode = paramString;
/*     */         return;
/*     */       } 
/*     */     } 
/* 133 */     throw new BuildException(""The longfile value "" + paramString + "" is not a valid value"");
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/* 137 */     if (this.tarFile == null) {
/* 138 */       throw new BuildException(""tarfile attribute must be set!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 142 */     if (this.tarFile.exists() && this.tarFile.isDirectory()) {
/* 143 */       throw new BuildException(""tarfile is a directory!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 147 */     if (this.tarFile.exists() && !this.tarFile.canWrite()) {
/* 148 */       throw new BuildException(""Can not write to the specified tarfile!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 152 */     if (this.baseDir != null) {
/* 153 */       if (!this.baseDir.exists()) {
/* 154 */         throw new BuildException(""basedir does not exist!"", this.location);
/*     */       }
/*     */ 
/*     */       
/* 158 */       TarFileSet tarFileSet = new TarFileSet(this.fileset);
/* 159 */       tarFileSet.setDir(this.baseDir);
/* 160 */       this.filesets.addElement(tarFileSet);
/*     */     } 
/*     */     
/* 163 */     if (this.filesets.size() == 0) {
/* 164 */       throw new BuildException(""You must supply either a basdir attribute or some nested filesets."", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 170 */     boolean bool = true;
/* 171 */     for (Enumeration enumeration = this.filesets.elements(); enumeration.hasMoreElements(); ) {
/* 172 */       TarFileSet tarFileSet = enumeration.nextElement();
/* 173 */       String[] arrayOfString = tarFileSet.getFiles(this.project);
/*     */       
/* 175 */       if (!archiveIsUpToDate(arrayOfString)) {
/* 176 */         bool = false;
/*     */       }
/*     */       
/* 179 */       for (byte b = 0; b < arrayOfString.length; b++) {
/* 180 */         if (this.tarFile.equals(new File(tarFileSet.getDir(this.project), arrayOfString[b]))) {
/* 181 */           throw new BuildException(""A tar file cannot include itself"", this.location);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 186 */     if (bool) {
/* 187 */       log(""Nothing to do: "" + this.tarFile.getAbsolutePath() + "" is up to date."", 2);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 192 */     log(""Building tar: "" + this.tarFile.getAbsolutePath(), 2);
/*     */     
/* 194 */     TarOutputStream tarOutputStream = null;
/*     */     try {
/* 196 */       tarOutputStream = new TarOutputStream(new FileOutputStream(this.tarFile));
/* 197 */       tarOutputStream.setDebug(true);
/* 198 */       if (this.longFileMode.equalsIgnoreCase(""truncate"")) {
/* 199 */         tarOutputStream.setLongFileMode(1);
/*     */       }
/* 201 */       else if (this.longFileMode.equalsIgnoreCase(""fail"") || this.longFileMode.equalsIgnoreCase(""omit"")) {
/*     */         
/* 203 */         tarOutputStream.setLongFileMode(0);
/*     */       }
/*     */       else {
/*     */         
/* 207 */         tarOutputStream.setLongFileMode(2);
/*     */       } 
/*     */       
/* 210 */       this.longWarningGiven = false;
/* 211 */       for (Enumeration enumeration1 = this.filesets.elements(); enumeration1.hasMoreElements(); ) {
/* 212 */         TarFileSet tarFileSet = enumeration1.nextElement();
/* 213 */         String[] arrayOfString = tarFileSet.getFiles(this.project);
/* 214 */         for (byte b = 0; b < arrayOfString.length; b++) {
/* 215 */           File file = new File(tarFileSet.getDir(this.project), arrayOfString[b]);
/* 216 */           String str = arrayOfString[b].replace(File.separatorChar, '/');
/* 217 */           tarFile(file, tarOutputStream, str, tarFileSet);
/*     */         } 
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 221 */       String str = ""Problem creating TAR: "" + iOException.getMessage();
/* 222 */       throw new BuildException(str, iOException, this.location);
/*     */     } finally {
/* 224 */       if (tarOutputStream != null) {
/*     */         
/*     */         try {
/* 227 */           tarOutputStream.close();
/*     */         }
/* 229 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void tarFile(File paramFile, TarOutputStream paramTarOutputStream, String paramString, TarFileSet paramTarFileSet) throws IOException {
/* 238 */     FileInputStream fileInputStream = null;
/*     */ 
/*     */     
/* 241 */     if (paramString.length() <= 0) {
/*     */       return;
/*     */     }
/*     */     
/* 245 */     if (paramFile.isDirectory() && !paramString.endsWith(""/"")) {
/* 246 */       paramString = paramString + ""/"";
/*     */     }
/*     */     
/*     */     try {
/* 250 */       if (paramString.length() >= 100) {
/* 251 */         if (this.longFileMode.equalsIgnoreCase(""omit"")) {
/* 252 */           log(""Omitting: "" + paramString, 2); return;
/*     */         } 
/* 254 */         if (this.longFileMode.equalsIgnoreCase(""warn"")) {
/* 255 */           log(""Entry: "" + paramString + "" longer than "" + 'd' + "" characters."", 1);
/*     */           
/* 257 */           if (!this.longWarningGiven) {
/* 258 */             log(""Resulting tar file can only be processed successfully by GNU compatible tar commands"", 1);
/*     */             
/* 260 */             this.longWarningGiven = true;
/*     */           } 
/* 262 */         } else if (this.longFileMode.equalsIgnoreCase(""fail"")) {
/* 263 */           throw new BuildException(""Entry: "" + paramString + "" longer than "" + 'd' + ""characters."", this.location);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 269 */       TarEntry tarEntry = new TarEntry(paramString);
/* 270 */       tarEntry.setModTime(paramFile.lastModified());
/* 271 */       if (!paramFile.isDirectory()) {
/* 272 */         tarEntry.setSize(paramFile.length());
/* 273 */         tarEntry.setMode(paramTarFileSet.getMode());
/*     */       } 
/* 275 */       tarEntry.setUserName(paramTarFileSet.getUserName());
/* 276 */       tarEntry.setGroupName(paramTarFileSet.getGroup());
/*     */       
/* 278 */       paramTarOutputStream.putNextEntry(tarEntry);
/*     */       
/* 280 */       if (!paramFile.isDirectory()) {
/* 281 */         fileInputStream = new FileInputStream(paramFile);
/*     */         
/* 283 */         byte[] arrayOfByte = new byte[8192];
/* 284 */         int i = 0;
/*     */         do {
/* 286 */           paramTarOutputStream.write(arrayOfByte, 0, i);
/* 287 */           i = fileInputStream.read(arrayOfByte, 0, arrayOfByte.length);
/* 288 */         } while (i != -1);
/*     */       } 
/*     */       
/* 291 */       paramTarOutputStream.closeEntry();
/*     */     } finally {
/* 293 */       if (fileInputStream != null)
/* 294 */         fileInputStream.close(); 
/*     */     } 
/*     */   }
/*     */   
/*     */   protected boolean archiveIsUpToDate(String[] paramArrayOfString) {
/* 299 */     SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 300 */     MergingMapper mergingMapper = new MergingMapper();
/* 301 */     mergingMapper.setTo(this.tarFile.getAbsolutePath());
/* 302 */     return ((sourceFileScanner.restrict(paramArrayOfString, this.baseDir, null, (FileNameMapper)mergingMapper)).length == 0);
/*     */   }
/*     */   
/*     */   public static class TarFileSet extends FileSet {
/* 306 */     private String[] files = null;
/*     */     
/* 308 */     private int mode = 33188;
/*     */     
/* 310 */     private String userName = """";
/* 311 */     private String groupName = """";
/*     */ 
/*     */ 
/*     */     
/* 315 */     public TarFileSet(FileSet param1FileSet) { super(param1FileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public TarFileSet() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String[] getFiles(Project param1Project) {
/* 328 */       if (this.files == null) {
/* 329 */         DirectoryScanner directoryScanner = getDirectoryScanner(param1Project);
/* 330 */         String[] arrayOfString1 = directoryScanner.getIncludedDirectories();
/* 331 */         String[] arrayOfString2 = directoryScanner.getIncludedFiles();
/* 332 */         this.files = new String[arrayOfString1.length + arrayOfString2.length];
/* 333 */         System.arraycopy(arrayOfString1, 0, this.files, 0, arrayOfString1.length);
/* 334 */         System.arraycopy(arrayOfString2, 0, this.files, arrayOfString1.length, arrayOfString2.length);
/*     */       } 
/*     */ 
/*     */       
/* 338 */       return this.files;
/*     */     }
/*     */ 
/*     */     
/* 342 */     public void setMode(String param1String) { this.mode = 0x8000 | Integer.parseInt(param1String, 8); }
/*     */ 
/*     */ 
/*     */     
/* 346 */     public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */     
/* 350 */     public void setUserName(String param1String) { this.userName = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 354 */     public String getUserName() { return this.userName; }
/*     */ 
/*     */ 
/*     */     
/* 358 */     public void setGroup(String param1String) { this.groupName = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 362 */     public String getGroup() { return this.groupName; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Tar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Taskdef,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Taskdef
/*    */   extends Definer
/*    */ {
/* 64 */   protected void addDefinition(String paramString, Class paramClass) { this.project.addTaskDefinition(paramString, paramClass); }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Taskdef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.TaskOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private Task task;
/*     */   private StringBuffer line;
/*     */   private int msgOutputLevel;
/*     */   
/*     */   TaskOutputStream(Task paramTask, int paramInt) {
/*  85 */     this.task = paramTask;
/*  86 */     this.msgOutputLevel = paramInt;
/*     */     
/*  88 */     this.line = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) throws IOException {
/*  98 */     char c = (char)paramInt;
/*  99 */     if (c == '\r' || c == '\n') {
/*     */       
/* 101 */       if (this.line.length() > 0) {
/* 102 */         processLine();
/*     */       }
/*     */     } else {
/* 105 */       this.line.append(c);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processLine() {
/* 114 */     String str = this.line.toString();
/* 115 */     this.task.log(str, this.msgOutputLevel);
/* 116 */     this.line = new StringBuffer();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\TaskOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Touch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.text.DateFormat;
/*     */ import java.text.ParseException;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Touch
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*  89 */   private long millis = -1L;
/*     */   private String dateTime;
/*  91 */   private Vector filesets = new Vector();
/*     */   
/*     */   private FileUtils fileUtils;
/*     */   
/*  95 */   public Touch() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setFile(File paramFile) { this.file = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setMillis(long paramLong) { this.millis = paramLong; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void setDatetime(String paramString) { this.dateTime = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 131 */     if (this.file == null && this.filesets.size() == 0) {
/* 132 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */     
/* 136 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 137 */       throw new BuildException(""Use a fileset to touch directories."");
/*     */     }
/*     */     
/* 140 */     if (this.dateTime != null) {
/* 141 */       DateFormat dateFormat = DateFormat.getDateTimeInstance(3, 3, Locale.US);
/*     */ 
/*     */       
/*     */       try {
/* 145 */         setMillis(dateFormat.parse(this.dateTime).getTime());
/* 146 */         if (this.millis < 0L) {
/* 147 */           throw new BuildException(""Date of "" + this.dateTime + "" results in negative milliseconds value relative to epoch (January 1, 1970, 00:00:00 GMT)."");
/*     */         }
/*     */       } catch (ParseException parseException) {
/*     */         
/* 151 */         throw new BuildException(parseException.getMessage(), parseException, this.location);
/*     */       } 
/*     */     } 
/*     */     
/* 155 */     touch();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void touch() throws BuildException {
/* 162 */     if (this.file != null) {
/* 163 */       if (!this.file.exists()) {
/* 164 */         log(""Creating "" + this.file, 2);
/*     */         try {
/* 166 */           FileOutputStream fileOutputStream = new FileOutputStream(this.file);
/* 167 */           fileOutputStream.write(new byte[0]);
/* 168 */           fileOutputStream.close();
/*     */         } catch (IOException iOException) {
/* 170 */           throw new BuildException(""Could not create "" + this.file, iOException, this.location);
/*     */         } 
/*     */       } 
/*     */       
/* 174 */       touch(this.file);
/*     */     } 
/*     */     
/* 177 */     if (this.millis >= 0L) { this; if (Project.getJavaVersion() == ""1.1"") {
/* 178 */         log(""modification time of files cannot be set in JDK 1.1"", 1);
/*     */         
/*     */         return;
/*     */       }  }
/*     */ 
/*     */     
/* 184 */     for (byte b = 0; b < this.filesets.size(); b++) {
/* 185 */       FileSet fileSet = this.filesets.elementAt(b);
/* 186 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 187 */       File file1 = fileSet.getDir(this.project);
/*     */       
/* 189 */       String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 190 */       String[] arrayOfString2 = directoryScanner.getIncludedDirectories();
/*     */       
/* 192 */       for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 193 */         touch(new File(file1, arrayOfString1[b1]));
/*     */       }
/*     */       
/* 196 */       for (byte b2 = 0; b2 < arrayOfString2.length; b2++) {
/* 197 */         touch(new File(file1, arrayOfString2[b2]));
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void touch(File paramFile) throws BuildException {
/* 203 */     if (!paramFile.canWrite()) {
/* 204 */       throw new BuildException(""Can not change modification date of read-only file "" + paramFile);
/*     */     }
/*     */     
/* 207 */     this; if (Project.getJavaVersion() == ""1.1"") {
/*     */       return;
/*     */     }
/*     */     
/* 211 */     if (this.millis < 0L) {
/* 212 */       this.fileUtils.setFileLastModified(paramFile, System.currentTimeMillis());
/*     */     } else {
/* 214 */       this.fileUtils.setFileLastModified(paramFile, this.millis);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Touch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Transform,"package org.apache.tools.ant.taskdefs;
public class Transform extends ExecuteOn {}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Transform.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tstamp,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Locale;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tstamp
/*     */   extends Task
/*     */ {
/*  72 */   private Vector customFormats = new Vector();
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/*  76 */       Date date = new Date();
/*     */       
/*  78 */       SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(""yyyyMMdd"");
/*  79 */       this.project.setProperty(""DSTAMP"", simpleDateFormat1.format(date));
/*     */       
/*  81 */       SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat(""HHmm"");
/*  82 */       this.project.setProperty(""TSTAMP"", simpleDateFormat2.format(date));
/*     */       
/*  84 */       SimpleDateFormat simpleDateFormat3 = new SimpleDateFormat(""MMMM d yyyy"", Locale.US);
/*  85 */       this.project.setProperty(""TODAY"", simpleDateFormat3.format(date));
/*     */       
/*  87 */       Enumeration enumeration = this.customFormats.elements();
/*  88 */       while (enumeration.hasMoreElements()) {
/*  89 */         CustomFormat customFormat = enumeration.nextElement();
/*  90 */         customFormat.execute(this.project, date, this.location);
/*     */       } 
/*     */     } catch (Exception exception) {
/*     */       
/*  94 */       throw new BuildException(exception);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public CustomFormat createFormat() {
/* 100 */     CustomFormat customFormat = new CustomFormat(this);
/* 101 */     this.customFormats.addElement(customFormat);
/* 102 */     return customFormat;
/*     */   }
/*     */   
/*     */   public class CustomFormat {
/*     */     private String propertyName;
/*     */     private String pattern;
/*     */     private String language;
/*     */     private String country;
/*     */     private String variant;
/*     */     private int offset;
/*     */     private int field;
/*     */     private final Tstamp this$0;
/*     */     
/*     */     public CustomFormat(Tstamp this$0) {
/* 116 */       this.this$0 = this$0;
/*     */       this.offset = 0;
/*     */       this.field = 5;
/*     */     }
/*     */     
/* 121 */     public void setProperty(String param1String) { this.propertyName = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 126 */     public void setPattern(String param1String) { this.pattern = param1String; }
/*     */ 
/*     */ 
/*     */     
/*     */     public void setLocale(String param1String) {
/* 131 */       StringTokenizer stringTokenizer = new StringTokenizer(param1String, "" \t\n\r\f,"");
/*     */       try {
/* 133 */         this.language = stringTokenizer.nextToken();
/* 134 */         if (stringTokenizer.hasMoreElements()) {
/* 135 */           this.country = stringTokenizer.nextToken();
/* 136 */           if (stringTokenizer.hasMoreElements()) {
/* 137 */             this.country = stringTokenizer.nextToken();
/* 138 */             if (stringTokenizer.hasMoreElements()) {
/* 139 */               throw new BuildException(""bad locale format"", this.this$0.getLocation());
/*     */             }
/*     */           } 
/*     */         } else {
/*     */           
/* 144 */           this.country = """";
/*     */         } 
/*     */       } catch (NoSuchElementException noSuchElementException) {
/*     */         
/* 148 */         throw new BuildException(""bad locale format"", noSuchElementException, this.this$0.getLocation());
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 153 */     public void setOffset(int param1Int) { this.offset = param1Int; }
/*     */ 
/*     */     
/*     */     public void setUnit(String param1String) {
/* 157 */       if (param1String.equalsIgnoreCase(""millisecond"")) {
/* 158 */         this.field = 14;
/*     */       }
/* 160 */       else if (param1String.equalsIgnoreCase(""second"")) {
/* 161 */         this.field = 13;
/*     */       }
/* 163 */       else if (param1String.equalsIgnoreCase(""minute"")) {
/* 164 */         this.field = 12;
/*     */       }
/* 166 */       else if (param1String.equalsIgnoreCase(""hour"")) {
/* 167 */         this.field = 11;
/*     */       }
/* 169 */       else if (param1String.equalsIgnoreCase(""day"")) {
/* 170 */         this.field = 5;
/*     */       }
/* 172 */       else if (param1String.equalsIgnoreCase(""week"")) {
/* 173 */         this.field = 3;
/*     */       }
/* 175 */       else if (param1String.equalsIgnoreCase(""month"")) {
/* 176 */         this.field = 2;
/*     */       }
/* 178 */       else if (param1String.equalsIgnoreCase(""year"")) {
/* 179 */         this.field = 1;
/*     */       } else {
/*     */         
/* 182 */         throw new BuildException(param1String + "" is not a unit supported by the tstamp task"", this.this$0.getLocation());
/*     */       } 
/*     */     }
/*     */     
/*     */     public void execute(Project param1Project, Date param1Date, Location param1Location) {
/*     */       SimpleDateFormat simpleDateFormat;
/* 188 */       if (this.propertyName == null) {
/* 189 */         throw new BuildException(""property attribute must be provided"", param1Location);
/*     */       }
/*     */       
/* 192 */       if (this.pattern == null) {
/* 193 */         throw new BuildException(""pattern attribute must be provided"", param1Location);
/*     */       }
/*     */ 
/*     */       
/* 197 */       if (this.language == null) {
/* 198 */         simpleDateFormat = new SimpleDateFormat(this.pattern);
/*     */       }
/* 200 */       else if (this.variant == null) {
/* 201 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country));
/*     */       } else {
/*     */         
/* 204 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country, this.variant));
/*     */       } 
/* 206 */       if (this.offset != 0) {
/* 207 */         Calendar calendar = Calendar.getInstance();
/* 208 */         calendar.setTime(param1Date);
/* 209 */         calendar.add(this.field, this.offset);
/* 210 */         param1Date = calendar.getTime();
/*     */       } 
/*     */       
/* 213 */       param1Project.setProperty(this.propertyName, simpleDateFormat.format(param1Date));
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Tstamp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Typedef,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Typedef
/*    */   extends Definer
/*    */ {
/* 64 */   protected void addDefinition(String paramString, Class paramClass) { this.project.addDataTypeDefinition(paramString, paramClass); }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Typedef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Untar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarInputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Untar
/*     */   extends Task
/*     */ {
/*     */   private File dest;
/*     */   private File source;
/*     */   private boolean overwrite = true;
/*     */   
/*     */   public void execute() throws BuildException {
/*  81 */     Touch touch = (Touch)this.project.createTask(""touch"");
/*  82 */     touch.setOwningTarget(this.target);
/*  83 */     touch.setTaskName(getTaskName());
/*  84 */     touch.setLocation(getLocation());
/*     */     
/*  86 */     File file = this.source;
/*     */     
/*  88 */     TarInputStream tarInputStream = null;
/*     */     try {
/*  90 */       if (this.source == null) {
/*  91 */         throw new BuildException(""No source specified"", this.location);
/*     */       }
/*  93 */       if (!file.exists()) {
/*  94 */         throw new BuildException(""source "" + file + "" doesn't exist"", this.location);
/*     */       }
/*     */ 
/*     */       
/*  98 */       if (this.dest == null) {
/*  99 */         throw new BuildException(""No destination specified"", this.location);
/*     */       }
/* 101 */       File file1 = this.dest;
/*     */       
/* 103 */       log(""Expanding: "" + file + "" into "" + file1, 2);
/* 104 */       tarInputStream = new TarInputStream(new FileInputStream(file));
/* 105 */       TarEntry tarEntry = null;
/*     */       
/* 107 */       while ((tarEntry = tarInputStream.getNextEntry()) != null) {
/*     */         try {
/* 109 */           this; File file2 = new File(file1, Project.translatePath(tarEntry.getName()));
/* 110 */           if (!this.overwrite && file2.exists() && file2.lastModified() >= tarEntry.getModTime().getTime()) {
/*     */             
/* 112 */             log(""Skipping "" + file2 + "" as it is up-to-date"", 4);
/*     */             
/*     */             continue;
/*     */           } 
/*     */           
/* 117 */           log(""expanding "" + tarEntry.getName() + "" to "" + file2, 3);
/*     */           
/* 119 */           File file3 = new File(file2.getParent());
/* 120 */           file3.mkdirs();
/*     */           
/* 122 */           if (tarEntry.isDirectory()) {
/* 123 */             file2.mkdirs();
/*     */           } else {
/* 125 */             byte[] arrayOfByte = new byte[1024];
/* 126 */             int i = 0;
/* 127 */             FileOutputStream fileOutputStream = new FileOutputStream(file2);
/*     */             
/* 129 */             while ((i = tarInputStream.read(arrayOfByte)) >= 0) {
/* 130 */               fileOutputStream.write(arrayOfByte, 0, i);
/*     */             }
/*     */             
/* 133 */             fileOutputStream.close();
/*     */           } 
/*     */           
/* 136 */           this; if (Project.getJavaVersion() != ""1.1"") {
/* 137 */             touch.setFile(file2);
/* 138 */             touch.setMillis(tarEntry.getModTime().getTime());
/* 139 */             touch.touch();
/*     */           } 
/*     */         } catch (FileNotFoundException fileNotFoundException) {
/*     */           
/* 143 */           log(""FileNotFoundException: "" + tarEntry.getName(), 1);
/*     */         } 
/*     */       } 
/*     */     } catch (IOException iOException) {
/*     */       
/* 148 */       throw new BuildException(""Error while expanding "" + file.getPath(), iOException, this.location);
/*     */     } finally {
/*     */       
/* 151 */       if (tarInputStream != null) {
/*     */         try {
/* 153 */           tarInputStream.close();
/*     */         }
/* 155 */         catch (IOException iOException) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setDest(File paramFile) { this.dest = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setSrc(File paramFile) { this.source = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setOverwrite(boolean paramBoolean) { this.overwrite = paramBoolean; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Untar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.UpToDate,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UpToDate
/*     */   extends MatchingTask
/*     */   implements Condition
/*     */ {
/*     */   private String _property;
/*     */   private String _value;
/*     */   private File _targetFile;
/*  80 */   private Vector sourceFileSets = new Vector();
/*     */   
/*  82 */   protected Mapper mapperElement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setProperty(String paramString) { this._property = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setValue(String paramString) { this._value = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private String getValue() { return (this._value != null) ? this._value : ""true""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setTargetFile(File paramFile) { this._targetFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void addSrcfiles(FileSet paramFileSet) { this.sourceFileSets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 132 */     if (this.mapperElement != null) {
/* 133 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 136 */     this.mapperElement = new Mapper(this.project);
/* 137 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() {
/* 144 */     if (this.sourceFileSets.size() == 0) {
/* 145 */       throw new BuildException(""At least one <srcfiles> element must be set"");
/*     */     }
/*     */     
/* 148 */     if (this._targetFile == null && this.mapperElement == null) {
/* 149 */       throw new BuildException(""The targetfile attribute or a nested mapper element must be set"");
/*     */     }
/*     */ 
/*     */     
/* 153 */     if (this._targetFile != null && !this._targetFile.exists()) return false;
/*     */     
/* 155 */     Enumeration enumeration = this.sourceFileSets.elements();
/* 156 */     boolean bool = true;
/* 157 */     while (bool && enumeration.hasMoreElements()) {
/* 158 */       FileSet fileSet = enumeration.nextElement();
/* 159 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 160 */       bool = (bool && scanDir(fileSet.getDir(this.project), directoryScanner.getIncludedFiles())) ? true : false;
/*     */     } 
/*     */     
/* 163 */     return bool;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 172 */     boolean bool = eval();
/* 173 */     if (bool) {
/* 174 */       this.project.setProperty(this._property, getValue());
/* 175 */       if (this.mapperElement == null) {
/* 176 */         log(""File \"""" + this._targetFile.getAbsolutePath() + ""\"" is up to date."", 3);
/*     */       } else {
/*     */         
/* 179 */         log(""All target files have been up to date."", 3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean scanDir(File paramFile, String[] paramArrayOfString) {
/* 186 */     SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 187 */     Object object = null;
/* 188 */     File file = paramFile;
/* 189 */     if (this.mapperElement == null) {
/* 190 */       MergingMapper mergingMapper = new MergingMapper();
/* 191 */       mergingMapper.setTo(this._targetFile.getAbsolutePath());
/* 192 */       object = mergingMapper;
/* 193 */       file = null;
/*     */     } else {
/* 195 */       object = this.mapperElement.getImplementation();
/*     */     } 
/* 197 */     return ((sourceFileScanner.restrict(paramArrayOfString, paramFile, file, (FileNameMapper)object)).length == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\UpToDate.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.War,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class War
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*     */   
/*     */   public War() {
/*  76 */     this.archiveType = ""war"";
/*  77 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */   
/*  81 */   public void setWarfile(File paramFile) { setZipfile(paramFile); }
/*     */ 
/*     */   
/*     */   public void setWebxml(File paramFile) {
/*  85 */     this.deploymentDescriptor = paramFile;
/*  86 */     if (!this.deploymentDescriptor.exists()) {
/*  87 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */     
/*  90 */     ZipFileSet zipFileSet = new ZipFileSet();
/*  91 */     zipFileSet.setDir(new File(this.deploymentDescriptor.getParent()));
/*  92 */     zipFileSet.setIncludes(this.deploymentDescriptor.getName());
/*  93 */     zipFileSet.setFullpath(""WEB-INF/web.xml"");
/*  94 */     addFileset((FileSet)zipFileSet);
/*     */   }
/*     */ 
/*     */   
/*     */   public void addLib(ZipFileSet paramZipFileSet) {
/*  99 */     paramZipFileSet.setPrefix(""WEB-INF/lib/"");
/* 100 */     addFileset((FileSet)paramZipFileSet);
/*     */   }
/*     */ 
/*     */   
/*     */   public void addClasses(ZipFileSet paramZipFileSet) {
/* 105 */     paramZipFileSet.setPrefix(""WEB-INF/classes/"");
/* 106 */     addFileset((FileSet)paramZipFileSet);
/*     */   }
/*     */ 
/*     */   
/*     */   public void addWebinf(ZipFileSet paramZipFileSet) {
/* 111 */     paramZipFileSet.setPrefix(""WEB-INF/"");
/* 112 */     addFileset((FileSet)paramZipFileSet);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream paramZipOutputStream) throws IOException, BuildException {
/* 119 */     if (this.deploymentDescriptor == null) {
/* 120 */       throw new BuildException(""webxml attribute is required"", this.location);
/*     */     }
/*     */     
/* 123 */     super.initZipOutputStream(paramZipOutputStream);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File paramFile, ZipOutputStream paramZipOutputStream, String paramString) throws IOException {
/* 133 */     if (paramString.equalsIgnoreCase(""WEB-INF/web.xml"")) {
/* 134 */       if (this.deploymentDescriptor == null || !this.deploymentDescriptor.equals(paramFile) || this.descriptorAdded) {
/* 135 */         log(""Warning: selected "" + this.archiveType + "" files include a WEB-INF/web.xml which will be ignored "" + ""(please use webxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       } else {
/*     */         
/* 138 */         super.zipFile(paramFile, paramZipOutputStream, paramString);
/* 139 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 142 */       super.zipFile(paramFile, paramZipOutputStream, paramString);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 151 */     this.descriptorAdded = false;
/* 152 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\War.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLiaison,"package org.apache.tools.ant.taskdefs;
import java.io.File;
public interface XSLTLiaison {
  public static final String FILE_PROTOCOL_PREFIX = ""file:///"";
  void setStylesheet(File paramFile) throws Exception;
  void addParam(String paramString1, String paramString2) throws Exception;
  void transform(File paramFile1, File paramFile2) throws Exception;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\XSLTLiaison.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTProcess,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTProcess
/*     */   extends MatchingTask
/*     */ {
/*  95 */   private File destDir = null;
/*     */   
/*  97 */   private File baseDir = null;
/*     */   
/*  99 */   private String xslFile = null;
/*     */   
/* 101 */   private String targetExtension = "".html"";
/* 102 */   private Vector params = new Vector();
/*     */   
/* 104 */   private File inFile = null;
/*     */   
/* 106 */   private File outFile = null;
/*     */   
/*     */   private String processor;
/* 109 */   private Path classpath = null;
/*     */ 
/*     */   
/*     */   private XSLTLiaison liaison;
/*     */   
/*     */   private boolean stylesheetLoaded = false;
/*     */   
/*     */   private boolean force = false;
/*     */   
/*     */   private FileUtils fileUtils;
/*     */ 
/*     */   
/* 121 */   public XSLTProcess() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 133 */     if (this.xslFile == null) {
/* 134 */       throw new BuildException(""no stylesheet specified"", this.location);
/*     */     }
/*     */     
/* 137 */     if (this.baseDir == null) {
/* 138 */       this.baseDir = this.project.resolveFile(""."");
/*     */     }
/*     */     
/* 141 */     this.liaison = getLiaison();
/* 142 */     log(""Using "" + this.liaison.getClass().toString(), 3);
/*     */     
/* 144 */     File file = this.project.resolveFile(this.xslFile);
/* 145 */     if (!file.exists()) {
/* 146 */       file = this.fileUtils.resolveFile(this.baseDir, this.xslFile);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 151 */       if (file.exists()) {
/* 152 */         log(""DEPRECATED - the style attribute should be relative to the project's"");
/* 153 */         log(""             basedir, not the tasks's basedir."");
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 158 */     if (this.inFile != null && this.outFile != null) {
/* 159 */       process(this.inFile, this.outFile, file);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 169 */     if (this.destDir == null) {
/* 170 */       String str = ""destdir attributes must be set!"";
/* 171 */       throw new BuildException(str);
/*     */     } 
/* 173 */     DirectoryScanner directoryScanner = getDirectoryScanner(this.baseDir);
/* 174 */     log(""Transforming into "" + this.destDir, 2);
/*     */ 
/*     */     
/* 177 */     String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 178 */     for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 179 */       process(this.baseDir, arrayOfString1[b1], this.destDir, file);
/*     */     }
/*     */ 
/*     */     
/* 183 */     String[] arrayOfString2 = directoryScanner.getIncludedDirectories();
/* 184 */     for (byte b2 = 0; b2 < arrayOfString2.length; b2++) {
/* 185 */       arrayOfString1 = (new File(this.baseDir, arrayOfString2[b2])).list();
/* 186 */       for (byte b = 0; b < arrayOfString1.length; b++) {
/* 187 */         process(this.baseDir, arrayOfString1[b], this.destDir, file);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setForce(boolean paramBoolean) { this.force = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void setBasedir(File paramFile) { this.baseDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setDestdir(File paramFile) { this.destDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setExtension(String paramString) { this.targetExtension = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 227 */   public void setStyle(String paramString) { this.xslFile = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 234 */   public void setClasspath(Path paramPath) { createClasspath().append(paramPath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 241 */     if (this.classpath == null) {
/* 242 */       this.classpath = new Path(this.project);
/*     */     }
/* 244 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void setClasspathRef(Reference paramReference) { createClasspath().setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setProcessor(String paramString) { this.processor = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveProcessor(String paramString) throws Exception {
/* 266 */     if (paramString.equals(""trax"")) {
/* 267 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.TraXLiaison"");
/*     */       
/* 269 */       this.liaison = clazz.newInstance();
/* 270 */     } else if (paramString.equals(""xslp"")) {
/* 271 */       log(""DEPRECATED - xslp processor is deprecated. Use trax or xalan instead."");
/* 272 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XslpLiaison"");
/*     */       
/* 274 */       this.liaison = clazz.newInstance();
/* 275 */     } else if (paramString.equals(""xalan"")) {
/* 276 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XalanLiaison"");
/*     */       
/* 278 */       this.liaison = clazz.newInstance();
/*     */     } else {
/* 280 */       this.liaison = loadClass(paramString).newInstance();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class loadClass(String paramString) throws Exception {
/* 289 */     if (this.classpath == null) {
/* 290 */       return Class.forName(paramString);
/*     */     }
/* 292 */     AntClassLoader antClassLoader = new AntClassLoader(this.project, this.classpath);
/* 293 */     Class clazz = antClassLoader.loadClass(paramString);
/* 294 */     AntClassLoader.initializeClass(clazz);
/* 295 */     return clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   public void setOut(File paramFile) { this.outFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 310 */   public void setIn(File paramFile) { this.inFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void process(File paramFile1, String paramString, File paramFile2, File paramFile3) throws BuildException {
/* 321 */     String str = this.targetExtension;
/* 322 */     File file1 = null;
/* 323 */     File file2 = null;
/*     */     
/*     */     try {
/* 326 */       long l = paramFile3.lastModified();
/* 327 */       file2 = new File(paramFile1, paramString);
/* 328 */       int i = paramString.lastIndexOf('.');
/* 329 */       if (i > 0) {
/* 330 */         file1 = new File(paramFile2, paramString.substring(0, paramString.lastIndexOf('.')) + str);
/*     */       } else {
/* 332 */         file1 = new File(paramFile2, paramString + str);
/*     */       } 
/* 334 */       if (this.force || file2.lastModified() > file1.lastModified() || l > file1.lastModified())
/*     */       {
/*     */         
/* 337 */         ensureDirectoryFor(file1);
/* 338 */         log(""Transforming into "" + paramFile2);
/*     */         
/* 340 */         configureLiaison(paramFile3);
/* 341 */         this.liaison.transform(file2, file1);
/*     */       }
/*     */     
/*     */     }
/*     */     catch (Exception exception) {
/*     */       
/* 347 */       log(""Failed to process "" + file2, 2);
/* 348 */       if (file1 != null) {
/* 349 */         file1.delete();
/*     */       }
/*     */       
/* 352 */       throw new BuildException(exception);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void process(File paramFile1, File paramFile2, File paramFile3) throws BuildException {
/*     */     try {
/* 359 */       long l = paramFile3.lastModified();
/* 360 */       log(""In file "" + paramFile1 + "" time: "" + paramFile1.lastModified(), 4);
/* 361 */       log(""Out file "" + paramFile2 + "" time: "" + paramFile2.lastModified(), 4);
/* 362 */       log(""Style file "" + this.xslFile + "" time: "" + l, 4);
/* 363 */       if (this.force || paramFile1.lastModified() > paramFile2.lastModified() || l > paramFile2.lastModified()) {
/*     */ 
/*     */         
/* 366 */         ensureDirectoryFor(paramFile2);
/* 367 */         log(""Processing "" + paramFile1 + "" to "" + paramFile2, 2);
/* 368 */         configureLiaison(paramFile3);
/* 369 */         this.liaison.transform(paramFile1, paramFile2);
/*     */       } 
/*     */     } catch (Exception exception) {
/* 372 */       log(""Failed to process "" + paramFile1, 2);
/* 373 */       if (paramFile2 != null) paramFile2.delete(); 
/* 374 */       throw new BuildException(exception);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void ensureDirectoryFor(File paramFile) throws BuildException {
/* 379 */     File file = new File(paramFile.getParent());
/* 380 */     if (!file.exists() && 
/* 381 */       !file.mkdirs()) {
/* 382 */       throw new BuildException(""Unable to create directory: "" + file.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected XSLTLiaison getLiaison() {
/* 391 */     if (this.liaison == null) {
/* 392 */       if (this.processor != null) {
/*     */         try {
/* 394 */           resolveProcessor(this.processor);
/*     */         } catch (Exception exception) {
/* 396 */           throw new BuildException(exception);
/*     */         } 
/*     */       } else {
/*     */         
/* 400 */         try { resolveProcessor(""trax""); }
/*     */         
/* 402 */         catch (Throwable throwable) { 
/* 403 */           try { resolveProcessor(""xslp""); }
/*     */           
/* 405 */           catch (Throwable throwable1) { try {
/* 406 */               resolveProcessor(""xalan"");
/*     */             } catch (Throwable throwable2) {
/* 408 */               throwable2.printStackTrace();
/* 409 */               throwable1.printStackTrace();
/* 410 */               throw new BuildException(throwable);
/*     */             }  }
/*     */            }
/*     */       
/*     */       } 
/*     */     }
/* 416 */     return this.liaison;
/*     */   }
/*     */   
/*     */   public Param createParam() {
/* 420 */     Param param = new Param(this);
/* 421 */     this.params.addElement(param);
/* 422 */     return param;
/*     */   } public class Param { private String name;
/*     */     public Param(XSLTProcess this$0) {
/* 425 */       this.this$0 = this$0;
/* 426 */       this.name = null;
/* 427 */       this.expression = null;
/*     */     }
/*     */     private String expression; private final XSLTProcess this$0;
/* 430 */     public void setName(String param1String) { this.name = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 434 */     public void setExpression(String param1String) { this.expression = param1String; }
/*     */ 
/*     */     
/*     */     public String getName() throws BuildException {
/* 438 */       if (this.name == null) throw new BuildException(""Name attribute is missing.""); 
/* 439 */       return this.name;
/*     */     }
/*     */     
/*     */     public String getExpression() throws BuildException {
/* 443 */       if (this.expression == null) throw new BuildException(""Expression attribute is missing.""); 
/* 444 */       return this.expression;
/*     */     } }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureLiaison(File paramFile) throws BuildException {
/* 452 */     if (this.stylesheetLoaded) {
/*     */       return;
/*     */     }
/* 455 */     this.stylesheetLoaded = true;
/*     */     
/*     */     try {
/* 458 */       log(""Loading stylesheet "" + paramFile, 2);
/* 459 */       this.liaison.setStylesheet(paramFile);
/* 460 */       for (Enumeration enumeration = this.params.elements(); enumeration.hasMoreElements(); ) {
/* 461 */         Param param = enumeration.nextElement();
/* 462 */         this.liaison.addParam(param.getName(), param.getExpression());
/*     */       } 
/*     */     } catch (Exception exception) {
/* 465 */       log(""Failed to read stylesheet "" + paramFile, 2);
/* 466 */       throw new BuildException(exception);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\XSLTProcess.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Zip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.ant.types.ZipScanner;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.zip.ZipEntry;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Zip
/*     */   extends MatchingTask
/*     */ {
/*     */   private File zipFile;
/*     */   private File baseDir;
/*     */   private boolean doCompress = true;
/*     */   private boolean doUpdate = false;
/*     */   private boolean doFilesonly = false;
/*  83 */   protected String archiveType = ""zip"";
/*     */   
/*  85 */   private static long emptyCrc = (new CRC32()).getValue();
/*  86 */   protected String emptyBehavior = ""skip"";
/*  87 */   private Vector filesets = new Vector();
/*  88 */   private Hashtable addedDirs = new Hashtable();
/*  89 */   private Vector addedFiles = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean addingNewFiles;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setZipfile(File paramFile) { this.zipFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setBasedir(File paramFile) { this.baseDir = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void setCompress(boolean paramBoolean) { this.doCompress = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setFilesonly(boolean paramBoolean) { this.doFilesonly = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setUpdate(boolean paramBoolean) { this.doUpdate = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void addFileset(FileSet paramFileSet) { this.filesets.addElement(paramFileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void addZipfileset(ZipFileSet paramZipFileSet) { this.filesets.addElement(paramZipFileSet); }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class WhenEmpty
/*     */     extends EnumeratedAttribute
/*     */   {
/* 159 */     public String[] getValues() { return new String[] { ""fail"", ""skip"", ""create"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setWhenempty(WhenEmpty paramWhenEmpty) { this.emptyBehavior = paramWhenEmpty.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setEncoding(String paramString) { this.encoding = paramString; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 188 */     if (this.baseDir == null && this.filesets.size() == 0 && ""zip"".equals(this.archiveType)) {
/* 189 */       throw new BuildException(""basedir attribute must be set, or at least one fileset must be given!"");
/*     */     }
/*     */ 
/*     */     
/* 193 */     if (this.zipFile == null) {
/* 194 */       throw new BuildException(""You must specify the "" + this.archiveType + "" file to create!"");
/*     */     }
/*     */ 
/*     */     
/* 198 */     File file = null;
/*     */ 
/*     */ 
/*     */     
/* 202 */     this.addingNewFiles = true;
/* 203 */     boolean bool1 = false;
/* 204 */     if (this.doUpdate && this.zipFile.exists()) {
/*     */       
/* 206 */       bool1 = true;
/*     */ 
/*     */       
/* 209 */       for (byte b1 = 0; b1 < 'Ϩ'; b1++) {
/*     */         
/* 211 */         file = new File(this.zipFile.getParent(), ""tmp."" + b1);
/*     */         
/* 213 */         if (!file.exists()) {
/*     */           break;
/*     */         }
/*     */       } 
/* 217 */       if (b1 == 'Ϩ') {
/* 218 */         throw new BuildException(""Can't find available temporary filename to which to rename old file."");
/*     */       }
/*     */ 
/*     */       
/*     */       try {
/* 223 */         if (!this.zipFile.renameTo(file)) {
/* 224 */           throw new BuildException(""Unable to rename old file to temporary file"");
/*     */         }
/*     */       }
/*     */       catch (SecurityException securityException) {
/*     */         
/* 229 */         throw new BuildException(""Not allowed to rename old file to temporary file"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 234 */     Vector vector = new Vector();
/* 235 */     if (this.baseDir != null) {
/* 236 */       vector.addElement(getDirectoryScanner(this.baseDir));
/*     */     }
/* 238 */     for (byte b = 0; b < this.filesets.size(); b++) {
/* 239 */       FileSet fileSet = this.filesets.elementAt(b);
/* 240 */       vector.addElement(fileSet.getDirectoryScanner(this.project));
/*     */     } 
/* 242 */     int i = vector.size();
/* 243 */     FileScanner[] arrayOfFileScanner = new FileScanner[i];
/* 244 */     vector.copyInto((Object[])arrayOfFileScanner);
/*     */ 
/*     */ 
/*     */     
/* 248 */     if (isUpToDate(arrayOfFileScanner, this.zipFile)) {
/*     */       return;
/*     */     }
/*     */     
/* 252 */     String str = bool1 ? ""Updating "" : ""Building "";
/*     */     
/* 254 */     log(str + this.archiveType + "": "" + this.zipFile.getAbsolutePath());
/*     */     
/* 256 */     boolean bool2 = false;
/*     */     try {
/* 258 */       ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(this.zipFile));
/*     */       
/* 260 */       zipOutputStream.setEncoding(this.encoding);
/*     */       try {
/* 262 */         if (this.doCompress) {
/* 263 */           zipOutputStream.setMethod(8);
/*     */         } else {
/* 265 */           zipOutputStream.setMethod(0);
/*     */         } 
/* 267 */         initZipOutputStream(zipOutputStream);
/*     */ 
/*     */         
/* 270 */         if (this.baseDir != null) {
/* 271 */           addFiles((FileScanner)getDirectoryScanner(this.baseDir), zipOutputStream, """", """");
/*     */         }
/*     */         
/* 274 */         addFiles(this.filesets, zipOutputStream);
/* 275 */         if (bool1) {
/* 276 */           this.addingNewFiles = false;
/* 277 */           ZipFileSet zipFileSet = new ZipFileSet();
/* 278 */           zipFileSet.setSrc(file);
/*     */           
/* 280 */           StringBuffer stringBuffer = new StringBuffer();
/* 281 */           for (byte b1 = 0; b1 < this.addedFiles.size(); b1++) {
/*     */             
/* 283 */             if (b1 != 0) {
/* 284 */               stringBuffer.append("","");
/*     */             }
/* 286 */             stringBuffer.append(this.addedFiles.elementAt(b1));
/*     */           } 
/* 288 */           zipFileSet.setExcludes(stringBuffer.toString());
/* 289 */           Vector vector1 = new Vector();
/* 290 */           vector1.addElement(zipFileSet);
/* 291 */           addFiles(vector1, zipOutputStream);
/*     */         } 
/* 293 */         finalizeZipOutputStream(zipOutputStream);
/* 294 */         bool2 = true;
/*     */       } finally {
/*     */         
/*     */         try {
/* 298 */           if (zipOutputStream != null) {
/* 299 */             zipOutputStream.close();
/*     */ 
/*     */           
/*     */           }
/*     */         
/*     */         }
/*     */         catch (IOException iOException) {
/*     */ 
/*     */           
/* 308 */           if (bool2)
/* 309 */             throw iOException; 
/*     */         } 
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 313 */       String str1 = ""Problem creating "" + this.archiveType + "": "" + iOException.getMessage();
/*     */ 
/*     */       
/* 316 */       if (!this.zipFile.delete()) {
/* 317 */         str1 = str1 + "" (and the archive is probably corrupt but I could not delete it)"";
/*     */       }
/*     */       
/* 320 */       if (bool1 && 
/* 321 */         !file.renameTo(this.zipFile)) {
/* 322 */         str1 = str1 + "" (and I couldn't rename the temporary file "" + file.getName() + "" back)"";
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 327 */       throw new BuildException(str1, iOException, this.location);
/*     */     } finally {
/* 329 */       cleanUp();
/*     */     } 
/*     */ 
/*     */     
/* 333 */     if (bool2 && bool1 && 
/* 334 */       !file.delete()) {
/* 335 */       log(""Warning: unable to delete temporary file "" + file.getName(), 1);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 346 */   protected boolean isAddingNewFiles() { return this.addingNewFiles; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addFiles(FileScanner paramFileScanner, ZipOutputStream paramZipOutputStream, String paramString1, String paramString2) throws IOException {
/* 357 */     if (paramString1.length() > 0 && paramString2.length() > 0) {
/* 358 */       throw new BuildException(""Both prefix and fullpath attributes may not be set on the same fileset."");
/*     */     }
/* 360 */     File file = paramFileScanner.getBasedir();
/*     */ 
/*     */     
/* 363 */     String[] arrayOfString1 = paramFileScanner.getIncludedDirectories();
/* 364 */     if (arrayOfString1.length > 0 && paramString2.length() > 0)
/* 365 */       throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file.""); 
/* 366 */     for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 367 */       if (!"""".equals(arrayOfString1[b1])) {
/*     */ 
/*     */         
/* 370 */         String str = arrayOfString1[b1].replace(File.separatorChar, '/');
/* 371 */         if (!str.endsWith(""/"")) {
/* 372 */           str = str + ""/"";
/*     */         }
/* 374 */         addParentDirs(file, str, paramZipOutputStream, paramString1);
/*     */       } 
/*     */     } 
/*     */     
/* 378 */     String[] arrayOfString2 = paramFileScanner.getIncludedFiles();
/* 379 */     if (arrayOfString2.length > 1 && paramString2.length() > 0)
/* 380 */       throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file.""); 
/* 381 */     for (byte b2 = 0; b2 < arrayOfString2.length; b2++) {
/* 382 */       File file1 = new File(file, arrayOfString2[b2]);
/* 383 */       if (paramString2.length() > 0) {
/*     */ 
/*     */         
/* 386 */         addParentDirs(null, paramString2, paramZipOutputStream, """");
/* 387 */         zipFile(file1, paramZipOutputStream, paramString2);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 392 */         String str = arrayOfString2[b2].replace(File.separatorChar, '/');
/* 393 */         addParentDirs(file, str, paramZipOutputStream, paramString1);
/* 394 */         zipFile(file1, paramZipOutputStream, paramString1 + str);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addZipEntries(ZipFileSet paramZipFileSet, DirectoryScanner paramDirectoryScanner, ZipOutputStream paramZipOutputStream, String paramString1, String paramString2) throws IOException {
/* 403 */     if (paramString1.length() > 0 && paramString2.length() > 0) {
/* 404 */       throw new BuildException(""Both prefix and fullpath attributes may not be set on the same fileset."");
/*     */     }
/* 406 */     ZipScanner zipScanner = (ZipScanner)paramDirectoryScanner;
/* 407 */     File file = paramZipFileSet.getSrc();
/*     */ 
/*     */ 
/*     */     
/* 411 */     ZipInputStream zipInputStream = null;
/*     */     try {
/* 413 */       zipInputStream = new ZipInputStream(new FileInputStream(file));
/*     */       ZipEntry zipEntry;
/* 415 */       while ((zipEntry = zipInputStream.getNextEntry()) != null) {
/* 416 */         ZipEntry zipEntry1 = new ZipEntry(zipEntry);
/* 417 */         String str = zipEntry1.getName();
/* 418 */         if (zipScanner.match(str)) {
/* 419 */           if (paramString2.length() > 0) {
/* 420 */             addParentDirs(null, paramString2, paramZipOutputStream, """");
/* 421 */             zipFile(zipInputStream, paramZipOutputStream, paramString2, zipEntry1.getTime()); continue;
/*     */           } 
/* 423 */           addParentDirs(null, str, paramZipOutputStream, paramString1);
/* 424 */           if (!zipEntry1.isDirectory()) {
/* 425 */             zipFile(zipInputStream, paramZipOutputStream, paramString1 + str, zipEntry1.getTime());
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } finally {
/*     */       
/* 431 */       if (zipInputStream != null) {
/* 432 */         zipInputStream.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream paramZipOutputStream) throws IOException, BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void finalizeZipOutputStream(ZipOutputStream paramZipOutputStream) throws IOException, BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean createEmptyZip(File paramFile) {
/* 456 */     log(""Note: creating empty "" + this.archiveType + "" archive "" + paramFile, 2);
/*     */     try {
/* 458 */       FileOutputStream fileOutputStream = new FileOutputStream(paramFile);
/*     */       
/*     */       try {
/* 461 */         byte[] arrayOfByte = new byte[22];
/* 462 */         arrayOfByte[0] = 80;
/* 463 */         arrayOfByte[1] = 75;
/* 464 */         arrayOfByte[2] = 5;
/* 465 */         arrayOfByte[3] = 6;
/*     */         
/* 467 */         fileOutputStream.write(arrayOfByte);
/*     */       } finally {
/* 469 */         fileOutputStream.close();
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 472 */       throw new BuildException(""Could not create empty ZIP archive"", iOException, this.location);
/*     */     } 
/* 474 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isUpToDate(FileScanner[] paramArrayOfFileScanner, File paramFile) throws BuildException {
/* 488 */     String[][] arrayOfString = grabFileNames(paramArrayOfFileScanner);
/* 489 */     File[] arrayOfFile = grabFiles(paramArrayOfFileScanner, arrayOfString);
/* 490 */     if (arrayOfFile.length == 0) {
/* 491 */       if (this.emptyBehavior.equals(""skip"")) {
/* 492 */         log(""Warning: skipping "" + this.archiveType + "" archive "" + paramFile + "" because no files were included."", 1);
/*     */         
/* 494 */         return true;
/* 495 */       }  if (this.emptyBehavior.equals(""fail"")) {
/* 496 */         throw new BuildException(""Cannot create "" + this.archiveType + "" archive "" + paramFile + "": no files were included."", this.location);
/*     */       }
/*     */ 
/*     */       
/* 500 */       return createEmptyZip(paramFile);
/*     */     } 
/*     */     
/* 503 */     for (byte b1 = 0; b1 < arrayOfFile.length; b1++) {
/* 504 */       if (arrayOfFile[b1].equals(paramFile)) {
/* 505 */         throw new BuildException(""A zip file cannot include itself"", this.location);
/*     */       }
/*     */     } 
/*     */     
/* 509 */     if (!paramFile.exists()) return false;
/*     */     
/* 511 */     SourceFileScanner sourceFileScanner = new SourceFileScanner(this);
/* 512 */     MergingMapper mergingMapper = new MergingMapper();
/* 513 */     mergingMapper.setTo(paramFile.getAbsolutePath());
/* 514 */     for (byte b2 = 0; b2 < paramArrayOfFileScanner.length; b2++) {
/* 515 */       if ((sourceFileScanner.restrict(arrayOfString[b2], paramArrayOfFileScanner[b2].getBasedir(), null, (FileNameMapper)mergingMapper)).length > 0)
/*     */       {
/* 517 */         return false;
/*     */       }
/*     */     } 
/* 520 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 525 */   protected static File[] grabFiles(FileScanner[] paramArrayOfFileScanner) { return grabFiles(paramArrayOfFileScanner, grabFileNames(paramArrayOfFileScanner)); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected static File[] grabFiles(FileScanner[] paramArrayOfFileScanner, String[][] paramArrayOfString) {
/* 530 */     Vector vector = new Vector();
/* 531 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 532 */       File file = paramArrayOfFileScanner[b].getBasedir();
/* 533 */       for (byte b1 = 0; b1 < (paramArrayOfString[b]).length; b1++)
/* 534 */         vector.addElement(new File(file, paramArrayOfString[b][b1])); 
/*     */     } 
/* 536 */     File[] arrayOfFile = new File[vector.size()];
/* 537 */     vector.copyInto((Object[])arrayOfFile);
/* 538 */     return arrayOfFile;
/*     */   }
/*     */   
/*     */   protected static String[][] grabFileNames(FileScanner[] paramArrayOfFileScanner) {
/* 542 */     String[][] arrayOfString = new String[paramArrayOfFileScanner.length][];
/* 543 */     for (byte b = 0; b < paramArrayOfFileScanner.length; b++) {
/* 544 */       String[] arrayOfString1 = paramArrayOfFileScanner[b].getIncludedFiles();
/* 545 */       String[] arrayOfString2 = paramArrayOfFileScanner[b].getIncludedDirectories();
/* 546 */       arrayOfString[b] = new String[arrayOfString1.length + arrayOfString2.length];
/* 547 */       System.arraycopy(arrayOfString1, 0, arrayOfString[b], 0, arrayOfString1.length);
/* 548 */       System.arraycopy(arrayOfString2, 0, arrayOfString[b], arrayOfString1.length, arrayOfString2.length);
/*     */     } 
/* 550 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipDir(File paramFile, ZipOutputStream paramZipOutputStream, String paramString) throws IOException {
/* 556 */     if (this.addedDirs.get(paramString) != null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 561 */     this.addedDirs.put(paramString, paramString);
/*     */     
/* 563 */     ZipEntry zipEntry = new ZipEntry(paramString);
/* 564 */     if (paramFile != null && paramFile.exists()) {
/* 565 */       zipEntry.setTime(paramFile.lastModified());
/*     */     } else {
/* 567 */       zipEntry.setTime(System.currentTimeMillis());
/*     */     } 
/* 569 */     zipEntry.setSize(0L);
/* 570 */     zipEntry.setMethod(0);
/*     */     
/* 572 */     zipEntry.setCrc(emptyCrc);
/*     */ 
/*     */     
/* 575 */     zipEntry.setExternalAttributes(1107099664L);
/*     */     
/* 577 */     paramZipOutputStream.putNextEntry(zipEntry);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(InputStream paramInputStream, ZipOutputStream paramZipOutputStream, String paramString, long paramLong) throws IOException {
/* 584 */     ZipEntry zipEntry = new ZipEntry(paramString);
/* 585 */     zipEntry.setTime(paramLong);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 597 */     if (!this.doCompress) {
/* 598 */       long l = 0L;
/* 599 */       CRC32 cRC32 = new CRC32();
/* 600 */       if (!paramInputStream.markSupported()) {
/*     */         
/* 602 */         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/*     */         
/* 604 */         byte[] arrayOfByte1 = new byte[8192];
/* 605 */         int j = 0;
/*     */         do {
/* 607 */           l += j;
/* 608 */           cRC32.update(arrayOfByte1, 0, j);
/* 609 */           byteArrayOutputStream.write(arrayOfByte1, 0, j);
/* 610 */           j = paramInputStream.read(arrayOfByte1, 0, arrayOfByte1.length);
/* 611 */         } while (j != -1);
/* 612 */         paramInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
/*     */       } else {
/*     */         
/* 615 */         paramInputStream.mark(2147483647);
/* 616 */         byte[] arrayOfByte1 = new byte[8192];
/* 617 */         int j = 0;
/*     */         do {
/* 619 */           l += j;
/* 620 */           cRC32.update(arrayOfByte1, 0, j);
/* 621 */           j = paramInputStream.read(arrayOfByte1, 0, arrayOfByte1.length);
/* 622 */         } while (j != -1);
/* 623 */         paramInputStream.reset();
/*     */       } 
/* 625 */       zipEntry.setSize(l);
/* 626 */       zipEntry.setCrc(cRC32.getValue());
/*     */     } 
/*     */     
/* 629 */     paramZipOutputStream.putNextEntry(zipEntry);
/*     */     
/* 631 */     byte[] arrayOfByte = new byte[8192];
/* 632 */     int i = 0;
/*     */     do {
/* 634 */       if (i) {
/* 635 */         paramZipOutputStream.write(arrayOfByte, 0, i);
/*     */       }
/* 637 */       i = paramInputStream.read(arrayOfByte, 0, arrayOfByte.length);
/* 638 */     } while (i != -1);
/* 639 */     this.addedFiles.addElement(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File paramFile, ZipOutputStream paramZipOutputStream, String paramString) throws IOException {
/* 645 */     if (paramFile.equals(this.zipFile)) {
/* 646 */       throw new BuildException(""A zip file cannot include itself"", this.location);
/*     */     }
/*     */     
/* 649 */     FileInputStream fileInputStream = new FileInputStream(paramFile);
/*     */     try {
/* 651 */       zipFile(fileInputStream, paramZipOutputStream, paramString, paramFile.lastModified());
/*     */     } finally {
/* 653 */       fileInputStream.close();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addParentDirs(File paramFile, String paramString1, ZipOutputStream paramZipOutputStream, String paramString2) throws IOException {
/* 663 */     if (!this.doFilesonly) {
/* 664 */       Stack stack = new Stack();
/* 665 */       int i = paramString1.length();
/*     */ 
/*     */       
/* 668 */       String str = paramString1.substring(0, i + 1);
/* 669 */       while ((i = paramString1.lastIndexOf('/', i - 1)) != -1 && this.addedDirs.get(paramString2 + str) == null)
/*     */       {
/*     */         
/* 672 */         stack.push(str);
/*     */       }
/*     */       
/* 675 */       while (!stack.isEmpty()) {
/* 676 */         str = stack.pop();
/* 677 */         File file = null;
/* 678 */         if (paramFile != null) {
/* 679 */           file = new File(paramFile, str);
/*     */         } else {
/* 681 */           file = new File(str);
/*     */         } 
/* 683 */         zipDir(file, paramZipOutputStream, paramString2 + str);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addFiles(Vector paramVector, ZipOutputStream paramZipOutputStream) throws IOException {
/* 696 */     for (byte b = 0; b < paramVector.size(); b++) {
/* 697 */       FileSet fileSet = paramVector.elementAt(b);
/* 698 */       DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/*     */       
/* 700 */       String str1 = """";
/* 701 */       String str2 = """";
/* 702 */       if (fileSet instanceof ZipFileSet) {
/* 703 */         ZipFileSet zipFileSet = (ZipFileSet)fileSet;
/* 704 */         str1 = zipFileSet.getPrefix();
/* 705 */         str2 = zipFileSet.getFullpath();
/*     */       } 
/*     */       
/* 708 */       if (str1.length() > 0 && !str1.endsWith(""/"") && !str1.endsWith(""\\""))
/*     */       {
/*     */         
/* 711 */         str1 = str1 + ""/"";
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 716 */       if (str1.length() > 0) {
/* 717 */         addParentDirs(null, str1, paramZipOutputStream, """");
/* 718 */         zipDir(null, paramZipOutputStream, str1);
/* 719 */       } else if (str2.length() > 0) {
/* 720 */         addParentDirs(null, str2, paramZipOutputStream, """");
/*     */       } 
/*     */       
/* 723 */       if (fileSet instanceof ZipFileSet && ((ZipFileSet)fileSet).getSrc() != null) {
/*     */         
/* 725 */         addZipEntries((ZipFileSet)fileSet, directoryScanner, paramZipOutputStream, str1, str2);
/*     */       } else {
/*     */         
/* 728 */         addFiles((FileScanner)directoryScanner, paramZipOutputStream, str1, str2);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 740 */     this.addedDirs = new Hashtable();
/* 741 */     this.addedFiles = new Vector();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\Zip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapter,"package org.apache.tools.ant.taskdefs.compilers;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Javac;
public interface CompilerAdapter {
  void setJavac(Javac paramJavac);
  boolean execute() throws BuildException;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CompilerAdapterFactory
/*     */ {
/*     */   public static CompilerAdapter getCompiler(String paramString, Task paramTask) throws BuildException {
/* 100 */     if (paramString.equalsIgnoreCase(""jikes"")) {
/* 101 */       return new Jikes();
/*     */     }
/* 103 */     if (paramString.equalsIgnoreCase(""extJavac"")) {
/* 104 */       return new JavacExternal();
/*     */     }
/* 106 */     if (paramString.equalsIgnoreCase(""classic"") || paramString.equalsIgnoreCase(""javac1.1"") || paramString.equalsIgnoreCase(""javac1.2""))
/*     */     {
/*     */       
/* 109 */       return new Javac12();
/*     */     }
/* 111 */     if (paramString.equalsIgnoreCase(""modern"") || paramString.equalsIgnoreCase(""javac1.3"") || paramString.equalsIgnoreCase(""javac1.4"")) {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 116 */         Class.forName(""com.sun.tools.javac.Main"");
/*     */       } catch (ClassNotFoundException classNotFoundException) {
/* 118 */         paramTask.log(""Modern compiler is not available - using classic compiler"", 1);
/*     */         
/* 120 */         return new Javac12();
/*     */       } 
/* 122 */       return new Javac13();
/*     */     } 
/* 124 */     if (paramString.equalsIgnoreCase(""jvc"") || paramString.equalsIgnoreCase(""microsoft""))
/*     */     {
/* 126 */       return new Jvc();
/*     */     }
/* 128 */     if (paramString.equalsIgnoreCase(""kjc"")) {
/* 129 */       return new Kjc();
/*     */     }
/* 131 */     if (paramString.equalsIgnoreCase(""gcj"")) {
/* 132 */       return new Gcj();
/*     */     }
/* 134 */     if (paramString.equalsIgnoreCase(""sj"") || paramString.equalsIgnoreCase(""symantec""))
/*     */     {
/* 136 */       return new Sj();
/*     */     }
/* 138 */     return resolveClassName(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static CompilerAdapter resolveClassName(String paramString) throws BuildException {
/*     */     try {
/* 152 */       Class clazz = Class.forName(paramString);
/* 153 */       Object object = clazz.newInstance();
/* 154 */       return (CompilerAdapter)object;
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 156 */       throw new BuildException(paramString + "" can't be found."", classNotFoundException);
/*     */     } catch (ClassCastException classCastException) {
/* 158 */       throw new BuildException(paramString + "" isn't the classname of "" + ""a compiler adapter."", classCastException);
/*     */     }
/*     */     catch (Throwable throwable) {
/*     */       
/* 162 */       throw new BuildException(paramString + "" caused an interesting "" + ""exception."", throwable);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Random;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Execute;
/*     */ import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
/*     */ import org.apache.tools.ant.taskdefs.Javac;
/*     */ import org.apache.tools.ant.taskdefs.LogStreamHandler;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultCompilerAdapter
/*     */   implements CompilerAdapter
/*     */ {
/*     */   protected Path src;
/*     */   protected File destDir;
/*     */   protected String encoding;
/*     */   protected boolean debug = false;
/*     */   protected boolean optimize = false;
/*     */   protected boolean deprecation = false;
/*     */   protected boolean depend = false;
/*     */   protected boolean verbose = false;
/*     */   protected String target;
/*     */   protected Path bootclasspath;
/*     */   protected Path extdirs;
/*     */   protected Path compileClasspath;
/*     */   protected Project project;
/*     */   protected Location location;
/*     */   protected boolean includeAntRuntime;
/*     */   protected boolean includeJavaRuntime;
/*     */   protected String memoryInitialSize;
/*     */   protected String memoryMaximumSize;
/*     */   protected File[] compileList;
/*  99 */   protected static String lSep = System.getProperty(""line.separator"");
/*     */   protected Javac attributes;
/*     */   
/*     */   public void setJavac(Javac paramJavac) {
/* 103 */     this.attributes = paramJavac;
/* 104 */     this.src = paramJavac.getSrcdir();
/* 105 */     this.destDir = paramJavac.getDestdir();
/* 106 */     this.encoding = paramJavac.getEncoding();
/* 107 */     this.debug = paramJavac.getDebug();
/* 108 */     this.optimize = paramJavac.getOptimize();
/* 109 */     this.deprecation = paramJavac.getDeprecation();
/* 110 */     this.depend = paramJavac.getDepend();
/* 111 */     this.verbose = paramJavac.getVerbose();
/* 112 */     this.target = paramJavac.getTarget();
/* 113 */     this.bootclasspath = paramJavac.getBootclasspath();
/* 114 */     this.extdirs = paramJavac.getExtdirs();
/* 115 */     this.compileList = paramJavac.getFileList();
/* 116 */     this.compileClasspath = paramJavac.getClasspath();
/* 117 */     this.project = paramJavac.getProject();
/* 118 */     this.location = paramJavac.getLocation();
/* 119 */     this.includeAntRuntime = paramJavac.getIncludeantruntime();
/* 120 */     this.includeJavaRuntime = paramJavac.getIncludejavaruntime();
/* 121 */     this.memoryInitialSize = paramJavac.getMemoryInitialSize();
/* 122 */     this.memoryMaximumSize = paramJavac.getMemoryMaximumSize();
/*     */   }
/*     */ 
/*     */   
/* 126 */   public Javac getJavac() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 134 */     Path path = new Path(this.project);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 139 */     if (this.destDir != null) {
/* 140 */       path.setLocation(this.destDir);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 146 */     if (this.compileClasspath == null) {
/* 147 */       if (this.includeAntRuntime) {
/* 148 */         path.addExisting(Path.systemClasspath);
/*     */       }
/*     */     }
/* 151 */     else if (this.includeAntRuntime) {
/* 152 */       path.addExisting(this.compileClasspath.concatSystemClasspath(""last""));
/*     */     } else {
/* 154 */       path.addExisting(this.compileClasspath.concatSystemClasspath(""ignore""));
/*     */     } 
/*     */ 
/*     */     
/* 158 */     if (this.includeJavaRuntime)
/*     */     {
/*     */ 
/*     */       
/* 162 */       if (System.getProperty(""java.vendor"").toLowerCase().indexOf(""microsoft"") >= 0) {
/*     */         
/* 164 */         FileSet fileSet = new FileSet();
/* 165 */         fileSet.setDir(new File(System.getProperty(""java.home"") + File.separator + ""Packages""));
/* 166 */         fileSet.setIncludes(""*.ZIP"");
/* 167 */         path.addFileset(fileSet);
/*     */       }
/* 169 */       else if (Project.getJavaVersion() == ""1.1"") {
/* 170 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""classes.zip""));
/*     */ 
/*     */       
/*     */       }
/*     */       else {
/*     */ 
/*     */         
/* 177 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 183 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""jre"" + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 190 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""classes.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 195 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""ui.jar""));
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 203 */     return path;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommandlineSwitches(Commandline paramCommandline) {
/* 211 */     Path path = getCompileClasspath();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 216 */     boolean bool = Project.getJavaVersion().equals(""1.1"");
/* 217 */     String str = bool ? ""-J-"" : ""-J-X"";
/* 218 */     if (this.memoryInitialSize != null) {
/* 219 */       if (!this.attributes.isForkedJavac()) {
/* 220 */         this.attributes.log(""Since fork is false, ignoring memoryInitialSize setting."", 1);
/*     */       } else {
/*     */         
/* 223 */         paramCommandline.createArgument().setValue(str + ""ms"" + this.memoryInitialSize);
/*     */       } 
/*     */     }
/*     */     
/* 227 */     if (this.memoryMaximumSize != null) {
/* 228 */       if (!this.attributes.isForkedJavac()) {
/* 229 */         this.attributes.log(""Since fork is false, ignoring memoryMaximumSize setting."", 1);
/*     */       } else {
/*     */         
/* 232 */         paramCommandline.createArgument().setValue(str + ""mx"" + this.memoryMaximumSize);
/*     */       } 
/*     */     }
/*     */     
/* 236 */     if (this.attributes.getNowarn()) {
/* 237 */       paramCommandline.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */     
/* 240 */     if (this.deprecation == true) {
/* 241 */       paramCommandline.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 244 */     if (this.destDir != null) {
/* 245 */       paramCommandline.createArgument().setValue(""-d"");
/* 246 */       paramCommandline.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 249 */     paramCommandline.createArgument().setValue(""-classpath"");
/*     */ 
/*     */ 
/*     */     
/* 253 */     if (Project.getJavaVersion().startsWith(""1.1"")) {
/* 254 */       Path path1 = new Path(this.project);
/*     */ 
/*     */ 
/*     */       
/* 258 */       if (this.bootclasspath != null) {
/* 259 */         path1.append(this.bootclasspath);
/*     */       }
/* 261 */       if (this.extdirs != null) {
/* 262 */         addExtdirsToClasspath(path1);
/*     */       }
/* 264 */       path1.append(path);
/* 265 */       path1.append(this.src);
/* 266 */       paramCommandline.createArgument().setPath(path1);
/*     */     } else {
/* 268 */       paramCommandline.createArgument().setPath(path);
/* 269 */       paramCommandline.createArgument().setValue(""-sourcepath"");
/* 270 */       paramCommandline.createArgument().setPath(this.src);
/* 271 */       if (this.target != null) {
/* 272 */         paramCommandline.createArgument().setValue(""-target"");
/* 273 */         paramCommandline.createArgument().setValue(this.target);
/*     */       } 
/* 275 */       if (this.bootclasspath != null) {
/* 276 */         paramCommandline.createArgument().setValue(""-bootclasspath"");
/* 277 */         paramCommandline.createArgument().setPath(this.bootclasspath);
/*     */       } 
/* 279 */       if (this.extdirs != null) {
/* 280 */         paramCommandline.createArgument().setValue(""-extdirs"");
/* 281 */         paramCommandline.createArgument().setPath(this.extdirs);
/*     */       } 
/*     */     } 
/*     */     
/* 285 */     if (this.encoding != null) {
/* 286 */       paramCommandline.createArgument().setValue(""-encoding"");
/* 287 */       paramCommandline.createArgument().setValue(this.encoding);
/*     */     } 
/* 289 */     if (this.debug) {
/* 290 */       paramCommandline.createArgument().setValue(""-g"");
/* 291 */     } else if (Project.getJavaVersion() != ""1.0"" && Project.getJavaVersion() != ""1.1"") {
/*     */       
/* 293 */       paramCommandline.createArgument().setValue(""-g:none"");
/*     */     } 
/* 295 */     if (this.optimize) {
/* 296 */       paramCommandline.createArgument().setValue(""-O"");
/*     */     }
/*     */     
/* 299 */     if (this.depend) {
/* 300 */       if (Project.getJavaVersion().startsWith(""1.1"")) {
/* 301 */         paramCommandline.createArgument().setValue(""-depend"");
/* 302 */       } else if (Project.getJavaVersion().startsWith(""1.2"")) {
/* 303 */         paramCommandline.createArgument().setValue(""-Xdepend"");
/*     */       } else {
/* 305 */         this.attributes.log(""depend attribute is not supported by the modern compiler"", 1);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 310 */     if (this.verbose) {
/* 311 */       paramCommandline.createArgument().setValue(""-verbose"");
/*     */     }
/* 313 */     return paramCommandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupModernJavacCommand() {
/* 321 */     Commandline commandline = new Commandline();
/* 322 */     setupJavacCommandlineSwitches(commandline);
/*     */     
/* 324 */     if (this.attributes.getSource() != null) {
/* 325 */       commandline.createArgument().setValue(""-source"");
/* 326 */       commandline.createArgument().setValue(this.attributes.getSource());
/*     */     } 
/*     */     
/* 329 */     logAndAddFilesToCompile(commandline);
/* 330 */     return commandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommand() {
/* 338 */     Commandline commandline = new Commandline();
/* 339 */     setupJavacCommandlineSwitches(commandline);
/* 340 */     logAndAddFilesToCompile(commandline);
/* 341 */     return commandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline paramCommandline) {
/* 349 */     this.attributes.log(""Compilation args: "" + paramCommandline.toString(), 3);
/*     */ 
/*     */     
/* 352 */     StringBuffer stringBuffer = new StringBuffer(""File"");
/* 353 */     if (this.compileList.length != 1) {
/* 354 */       stringBuffer.append(""s"");
/*     */     }
/* 356 */     stringBuffer.append("" to be compiled:"");
/*     */     
/* 358 */     stringBuffer.append(lSep);
/*     */     
/* 360 */     for (byte b = 0; b < this.compileList.length; b++) {
/* 361 */       String str = this.compileList[b].getAbsolutePath();
/* 362 */       paramCommandline.createArgument().setValue(str);
/* 363 */       stringBuffer.append(""    "" + str + lSep);
/*     */     } 
/*     */     
/* 366 */     this.attributes.log(stringBuffer.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int executeExternalCompile(String[] paramArrayOfString, int paramInt) {
/* 375 */     String[] arrayOfString = null;
/* 376 */     File file = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 386 */       if (Commandline.toString(paramArrayOfString).length() > 4096) {
/* 387 */         PrintWriter printWriter = null;
/*     */         try {
/* 389 */           file = new File(""jikes"" + (new Random(System.currentTimeMillis())).nextLong());
/* 390 */           printWriter = new PrintWriter(new FileWriter(file));
/* 391 */           for (int i = paramInt; i < paramArrayOfString.length; i++) {
/* 392 */             printWriter.println(paramArrayOfString[i]);
/*     */           }
/* 394 */           printWriter.flush();
/* 395 */           arrayOfString = new String[paramInt + 1];
/* 396 */           System.arraycopy(paramArrayOfString, 0, arrayOfString, 0, paramInt);
/* 397 */           arrayOfString[paramInt] = ""@"" + file.getAbsolutePath();
/*     */         } catch (IOException iOException) {
/* 399 */           throw new BuildException(""Error creating temporary file"", iOException, this.location);
/*     */         } finally {
/* 401 */           if (printWriter != null) {
/* 402 */             try { printWriter.close(); } catch (Throwable throwable) {}
/*     */           }
/*     */         } 
/*     */       } else {
/* 406 */         arrayOfString = paramArrayOfString;
/*     */       } 
/*     */       
/*     */       try {
/* 410 */         Execute execute = new Execute((ExecuteStreamHandler)new LogStreamHandler((Task)this.attributes, 2, 1));
/*     */ 
/*     */         
/* 413 */         execute.setAntRun(this.project);
/* 414 */         execute.setWorkingDirectory(this.project.getBaseDir());
/* 415 */         execute.setCommandline(arrayOfString);
/* 416 */         execute.execute();
/* 417 */         return execute.getExitValue();
/*     */       } catch (IOException iOException) {
/* 419 */         throw new BuildException(""Error running "" + paramArrayOfString[0] + "" compiler"", iOException, this.location);
/*     */       } 
/*     */     } finally {
/*     */       
/* 423 */       if (file != null) {
/* 424 */         file.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addExtdirsToClasspath(Path paramPath) {
/* 437 */     if (this.extdirs == null) {
/* 438 */       String str = System.getProperty(""java.ext.dirs"");
/* 439 */       if (str != null) {
/* 440 */         this.extdirs = new Path(this.project, str);
/*     */       } else {
/*     */         return;
/*     */       } 
/*     */     } 
/*     */     
/* 446 */     String[] arrayOfString = this.extdirs.list();
/* 447 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 448 */       if (!arrayOfString[b].endsWith(File.separator)) {
/* 449 */         arrayOfString[b] = arrayOfString[b] + File.separator;
/*     */       }
/* 451 */       File file = this.project.resolveFile(arrayOfString[b]);
/* 452 */       FileSet fileSet = new FileSet();
/* 453 */       fileSet.setDir(file);
/* 454 */       fileSet.setIncludes(""*"");
/* 455 */       paramPath.addFileset(fileSet);
/*     */     } 
/*     */   }
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\DefaultCompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Gcj,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Gcj
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  77 */     this.attributes.log(""Using gcj compiler"", 3);
/*  78 */     Commandline commandline = setupGCJCommand();
/*     */     
/*  80 */     int i = commandline.size();
/*  81 */     logAndAddFilesToCompile(commandline);
/*     */     
/*  83 */     return (executeExternalCompile(commandline.getCommandline(), i) == 0);
/*     */   }
/*     */   
/*     */   protected Commandline setupGCJCommand() {
/*  87 */     Commandline commandline = new Commandline();
/*  88 */     Path path = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  92 */     if (this.bootclasspath != null) {
/*  93 */       path.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  98 */     addExtdirsToClasspath(path);
/*     */     
/* 100 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 102 */       this.includeJavaRuntime = true;
/*     */     }
/* 104 */     path.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 108 */     path.append(this.src);
/*     */     
/* 110 */     commandline.setExecutable(""gcj"");
/*     */     
/* 112 */     if (this.destDir != null) {
/* 113 */       commandline.createArgument().setValue(""-d"");
/* 114 */       commandline.createArgument().setFile(this.destDir);
/*     */       
/* 116 */       if (this.destDir.mkdirs()) {
/* 117 */         throw new BuildException(""Can't make output directories. Maybe permission is wrong. "");
/*     */       }
/*     */     } 
/*     */     
/* 121 */     commandline.createArgument().setValue(""-classpath"");
/* 122 */     commandline.createArgument().setPath(path);
/*     */     
/* 124 */     if (this.encoding != null) {
/* 125 */       this.attributes.log(""gcj doesn't support -encoding option."", 1);
/*     */     }
/*     */     
/* 128 */     if (this.debug) {
/* 129 */       commandline.createArgument().setValue(""-g1"");
/*     */     }
/* 131 */     if (this.optimize) {
/* 132 */       commandline.createArgument().setValue(""-O"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 138 */     commandline.createArgument().setValue(""-C"");
/* 139 */     return commandline;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Gcj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac12,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac12
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  79 */     this.attributes.log(""Using classic compiler"", 3);
/*  80 */     Commandline commandline = setupJavacCommand();
/*     */     
/*  82 */     LogOutputStream logOutputStream = new LogOutputStream((Task)this.attributes, 1);
/*     */ 
/*     */     
/*     */     try {
/*  86 */       Class clazz = Class.forName(""sun.tools.javac.Main"");
/*  87 */       Constructor constructor = clazz.getConstructor(new Class[] { OutputStream.class, String.class });
/*  88 */       Object object = constructor.newInstance(new Object[] { logOutputStream, ""javac"" });
/*     */ 
/*     */       
/*  91 */       Method method = clazz.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*  92 */       Boolean bool = (Boolean)method.invoke(object, new Object[] { commandline.getArguments() });
/*  93 */       return bool.booleanValue();
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/*     */       
/*  96 */       throw new BuildException(""Cannot use classic compiler, as it is not available A common solution is to set the environment variable JAVA_HOME to your jdk directory."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception exception) {
/*     */       
/* 101 */       if (exception instanceof BuildException) {
/* 102 */         throw (BuildException)exception;
/*     */       }
/* 104 */       throw new BuildException(""Error starting classic compiler: "", exception, this.location);
/*     */     } finally {
/*     */       
/*     */       try {
/* 108 */         logOutputStream.close();
/*     */       } catch (IOException iOException) {
/*     */         
/* 111 */         throw new BuildException(iOException);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Javac12.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac13,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import java.lang.reflect.Method;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Javac13
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   private static final int MODERN_COMPILER_SUCCESS = 0;
/*    */   
/*    */   public boolean execute() throws BuildException {
/* 83 */     this.attributes.log(""Using modern compiler"", 3);
/* 84 */     Commandline commandline = setupModernJavacCommand();
/*    */ 
/*    */     
/*    */     try {
/* 88 */       Class clazz = Class.forName(""com.sun.tools.javac.Main"");
/* 89 */       Object object = clazz.newInstance();
/* 90 */       Method method = clazz.getMethod(""compile"", new Class[] { (new String[0]).getClass() });
/*    */       
/* 92 */       int i = ((Integer)method.invoke(object, new Object[] { commandline.getArguments() })).intValue();
/*    */       
/* 94 */       return (i == 0);
/*    */     } catch (Exception exception) {
/* 96 */       if (exception instanceof BuildException) {
/* 97 */         throw (BuildException)exception;
/*    */       }
/* 99 */       throw new BuildException(""Error starting modern compiler"", exception, this.location);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Javac13.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.JavacExternal,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JavacExternal
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 72 */     this.attributes.log(""Using external javac compiler"", 3);
/*    */     
/* 74 */     Commandline commandline = new Commandline();
/* 75 */     commandline.setExecutable(""javac"");
/* 76 */     setupJavacCommandlineSwitches(commandline);
/* 77 */     int i = commandline.size();
/* 78 */     logAndAddFilesToCompile(commandline);
/*    */     
/* 80 */     return (executeExternalCompile(commandline.getCommandline(), i) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\JavacExternal.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jikes,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  86 */     this.attributes.log(""Using jikes compiler"", 3);
/*     */     
/*  88 */     Path path = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  92 */     if (this.bootclasspath != null) {
/*  93 */       path.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  98 */     addExtdirsToClasspath(path);
/*     */     
/* 100 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 102 */       this.includeJavaRuntime = true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     path.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 113 */     path.append(this.src);
/*     */ 
/*     */     
/* 116 */     String str1 = System.getProperty(""jikes.class.path"");
/* 117 */     if (str1 != null) {
/* 118 */       path.append(new Path(this.project, str1));
/*     */     }
/*     */     
/* 121 */     Commandline commandline = new Commandline();
/* 122 */     commandline.setExecutable(""jikes"");
/*     */     
/* 124 */     if (this.deprecation == true) {
/* 125 */       commandline.createArgument().setValue(""-deprecation"");
/*     */     }
/* 127 */     if (this.destDir != null) {
/* 128 */       commandline.createArgument().setValue(""-d"");
/* 129 */       commandline.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 132 */     commandline.createArgument().setValue(""-classpath"");
/* 133 */     commandline.createArgument().setPath(path);
/*     */     
/* 135 */     if (this.encoding != null) {
/* 136 */       commandline.createArgument().setValue(""-encoding"");
/* 137 */       commandline.createArgument().setValue(this.encoding);
/*     */     } 
/* 139 */     if (this.debug) {
/* 140 */       commandline.createArgument().setValue(""-g"");
/*     */     }
/* 142 */     if (this.optimize) {
/* 143 */       commandline.createArgument().setValue(""-O"");
/*     */     }
/* 145 */     if (this.verbose) {
/* 146 */       commandline.createArgument().setValue(""-verbose"");
/*     */     }
/* 148 */     if (this.depend) {
/* 149 */       commandline.createArgument().setValue(""-depend"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 164 */     String str2 = this.project.getProperty(""build.compiler.emacs"");
/* 165 */     if (str2 != null && Project.toBoolean(str2)) {
/* 166 */       commandline.createArgument().setValue(""+E"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 175 */     String str3 = this.project.getProperty(""build.compiler.warnings"");
/* 176 */     if (str3 != null) {
/* 177 */       this.attributes.log(""!! the build.compiler.warnings property is deprecated. !!"", 1);
/*     */       
/* 179 */       this.attributes.log(""!! Use the nowarn attribute instead. !!"", 1);
/*     */       
/* 181 */       if (!Project.toBoolean(str3))
/* 182 */         commandline.createArgument().setValue(""-nowarn""); 
/*     */     } 
/* 184 */     if (this.attributes.getNowarn())
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 191 */       commandline.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 197 */     String str4 = this.project.getProperty(""build.compiler.pedantic"");
/* 198 */     if (str4 != null && Project.toBoolean(str4)) {
/* 199 */       commandline.createArgument().setValue(""+P"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 207 */     String str5 = this.project.getProperty(""build.compiler.fulldepend"");
/* 208 */     if (str5 != null && Project.toBoolean(str5)) {
/* 209 */       commandline.createArgument().setValue(""+F"");
/*     */     }
/*     */     
/* 212 */     int i = commandline.size();
/* 213 */     logAndAddFilesToCompile(commandline);
/*     */     
/* 215 */     return (executeExternalCompile(commandline.getCommandline(), i) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jvc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jvc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  74 */     this.attributes.log(""Using jvc compiler"", 3);
/*     */     
/*  76 */     Path path = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  80 */     if (this.bootclasspath != null) {
/*  81 */       path.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  86 */     addExtdirsToClasspath(path);
/*     */     
/*  88 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/*  90 */       this.includeJavaRuntime = true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  97 */     path.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 101 */     path.append(this.src);
/*     */     
/* 103 */     Commandline commandline = new Commandline();
/* 104 */     commandline.setExecutable(""jvc"");
/*     */     
/* 106 */     if (this.destDir != null) {
/* 107 */       commandline.createArgument().setValue(""/d"");
/* 108 */       commandline.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 112 */     commandline.createArgument().setValue(""/cp:p"");
/* 113 */     commandline.createArgument().setPath(path);
/*     */ 
/*     */     
/* 116 */     commandline.createArgument().setValue(""/x-"");
/*     */     
/* 118 */     commandline.createArgument().setValue(""/nomessage"");
/*     */     
/* 120 */     commandline.createArgument().setValue(""/nologo"");
/*     */     
/* 122 */     if (this.debug) {
/* 123 */       commandline.createArgument().setValue(""/g"");
/*     */     }
/* 125 */     if (this.optimize) {
/* 126 */       commandline.createArgument().setValue(""/O"");
/*     */     }
/* 128 */     if (this.verbose) {
/* 129 */       commandline.createArgument().setValue(""/verbose"");
/*     */     }
/*     */     
/* 132 */     int i = commandline.size();
/* 133 */     logAndAddFilesToCompile(commandline);
/*     */     
/* 135 */     return (executeExternalCompile(commandline.getCommandline(), i) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Jvc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Kjc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Kjc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   static Class class$(String paramString) { 
/*  73 */     try { return Class.forName(paramString); } catch (ClassNotFoundException classNotFoundException) { throw new NoClassDefFoundError(classNotFoundException.getMessage()); }
/*     */      }
/*     */   public boolean execute() throws BuildException {
/*  76 */     this.attributes.log(""Using kjc compiler"", 3);
/*  77 */     Commandline commandline = setupKjcCommand();
/*     */     
/*     */     try {
/*  80 */       Class clazz = Class.forName(""at.dms.kjc.Main"");
/*     */ 
/*     */       
/*  83 */       Method method = clazz.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  85 */       Boolean bool = (Boolean)method.invoke(null, new Object[] { commandline.getArguments() });
/*     */       
/*  87 */       return bool.booleanValue();
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/*     */       
/*  90 */       throw new BuildException(""Cannot use kjc compiler, as it is not available A common solution is to set the environment variable CLASSPATH to your kjc archive (kjc.jar)."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception exception) {
/*     */       
/*  95 */       if (exception instanceof BuildException) {
/*  96 */         throw (BuildException)exception;
/*     */       }
/*  98 */       throw new BuildException(""Error starting kjc compiler: "", exception, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupKjcCommand() {
/* 107 */     Commandline commandline = new Commandline();
/*     */ 
/*     */     
/* 110 */     Path path1 = getCompileClasspath();
/*     */     
/* 112 */     if (this.deprecation == true) {
/* 113 */       commandline.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 116 */     if (this.destDir != null) {
/* 117 */       commandline.createArgument().setValue(""-d"");
/* 118 */       commandline.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 122 */     commandline.createArgument().setValue(""-classpath"");
/*     */     
/* 124 */     Path path2 = new Path(this.project);
/*     */ 
/*     */     
/* 127 */     if (this.bootclasspath != null) {
/* 128 */       path2.append(this.bootclasspath);
/*     */     }
/*     */     
/* 131 */     if (this.extdirs != null) {
/* 132 */       addExtdirsToClasspath(path2);
/*     */     }
/*     */     
/* 135 */     path2.append(path1);
/* 136 */     path2.append(this.src);
/*     */     
/* 138 */     commandline.createArgument().setPath(path2);
/*     */ 
/*     */ 
/*     */     
/* 142 */     if (this.encoding != null) {
/* 143 */       commandline.createArgument().setValue(""-encoding"");
/* 144 */       commandline.createArgument().setValue(this.encoding);
/*     */     } 
/*     */     
/* 147 */     if (this.debug) {
/* 148 */       commandline.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 151 */     if (this.optimize) {
/* 152 */       commandline.createArgument().setValue(""-O2"");
/*     */     }
/*     */     
/* 155 */     if (this.verbose) {
/* 156 */       commandline.createArgument().setValue(""-verbose"");
/*     */     }
/*     */     
/* 159 */     logAndAddFilesToCompile(commandline);
/* 160 */     return commandline;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Kjc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Sj,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Sj
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 74 */     this.attributes.log(""Using symantec java compiler"", 3);
/*    */     
/* 76 */     Commandline commandline = setupJavacCommand();
/* 77 */     commandline.setExecutable(""sj"");
/*    */     
/* 79 */     int i = commandline.size() - this.compileList.length;
/*    */     
/* 81 */     return (executeExternalCompile(commandline.getCommandline(), i) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\compilers\Sj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.And,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class And
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 73 */     Enumeration enumeration = getConditions();
/* 74 */     while (enumeration.hasMoreElements()) {
/* 75 */       Condition condition = enumeration.nextElement();
/* 76 */       if (!condition.eval()) {
/* 77 */         return false;
/*    */       }
/*    */     } 
/* 80 */     return true;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\And.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Condition,"package org.apache.tools.ant.taskdefs.condition;
import org.apache.tools.ant.BuildException;
public interface Condition {
  boolean eval() throws BuildException;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\Condition.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.ConditionBase,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Available;
/*     */ import org.apache.tools.ant.taskdefs.UpToDate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ConditionBase
/*     */ {
/*  75 */   private Vector conditions = new Vector();
/*     */   
/*     */   private Project project;
/*     */   
/*  79 */   public void setProject(Project paramProject) { this.project = paramProject; }
/*     */   
/*  81 */   protected Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   protected int countConditions() { return this.conditions.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final Enumeration getConditions() {
/*  96 */     return new ConditionEnumeration();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void addAvailable(Available paramAvailable) { this.conditions.addElement(paramAvailable); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void addUptodate(UpToDate paramUpToDate) { this.conditions.addElement(paramUpToDate); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void addNot(Not paramNot) { this.conditions.addElement(paramNot); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void addAnd(And paramAnd) { this.conditions.addElement(paramAnd); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void addOr(Or paramOr) { this.conditions.addElement(paramOr); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void addEquals(Equals paramEquals) { this.conditions.addElement(paramEquals); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void addOs(Os paramOs) { this.conditions.addElement(paramOs); }
/*     */   
/*     */   private class ConditionEnumeration
/*     */     implements Enumeration {
/*     */     private int currentElement;
/*     */     private final ConditionBase this$0;
/*     */     
/*     */     private ConditionEnumeration(ConditionBase this$0) {
/* 154 */       ConditionBase.this = ConditionBase.this;
/* 155 */       this.currentElement = 0;
/*     */     }
/*     */     
/* 158 */     public boolean hasMoreElements() { return (ConditionBase.this.countConditions() > this.currentElement); }
/*     */ 
/*     */     
/*     */     public Object nextElement() throws NoSuchElementException {
/* 162 */       Task task = null;
/*     */       try {
/* 164 */         task = (Task)ConditionBase.this.conditions.elementAt(this.currentElement++);
/*     */       } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
/* 166 */         throw new NoSuchElementException();
/*     */       } 
/*     */       
/* 169 */       if (task instanceof Task) {
/* 170 */         ((Task)task).setProject(ConditionBase.this.getProject());
/* 171 */       } else if (task instanceof ConditionBase) {
/* 172 */         ((ConditionBase)task).setProject(ConditionBase.this.getProject());
/*     */       } 
/* 174 */       return task;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\ConditionBase.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Equals,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Equals
/*    */   implements Condition
/*    */ {
/*    */   private String arg1;
/*    */   private String arg2;
/*    */   
/* 69 */   public void setArg1(String paramString) { this.arg1 = paramString; }
/* 70 */   public void setArg2(String paramString) { this.arg2 = paramString; }
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 73 */     if (this.arg1 == null || this.arg2 == null) {
/* 74 */       throw new BuildException(""both arg1 and arg2 are required in equals"");
/*    */     }
/* 76 */     return this.arg1.equals(this.arg2);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\Equals.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Not,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Not
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 71 */     if (countConditions() > 1) {
/* 72 */       throw new BuildException(""You must not nest more than one condition into <not>"");
/*    */     }
/* 74 */     if (countConditions() < 1) {
/* 75 */       throw new BuildException(""You must nest a condition into <not>"");
/*    */     }
/* 77 */     return !((Condition)getConditions().nextElement()).eval();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\Not.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Or,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Or
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 73 */     Enumeration enumeration = getConditions();
/* 74 */     while (enumeration.hasMoreElements()) {
/* 75 */       Condition condition = enumeration.nextElement();
/* 76 */       if (condition.eval()) {
/* 77 */         return true;
/*    */       }
/*    */     } 
/* 80 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\Or.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Os,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Os
/*    */   implements Condition
/*    */ {
/*    */   private String family;
/*    */   
/* 68 */   public void setFamily(String paramString) { this.family = paramString.toLowerCase(); }
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 71 */     String str1 = System.getProperty(""os.name"").toLowerCase();
/* 72 */     String str2 = System.getProperty(""path.separator"");
/* 73 */     if (this.family != null) {
/* 74 */       if (this.family.equals(""windows""))
/* 75 */         return (str1.indexOf(""windows"") > -1); 
/* 76 */       if (this.family.equals(""dos""))
/* 77 */         return str2.equals("";""); 
/* 78 */       if (this.family.equals(""mac""))
/* 79 */         return (str1.indexOf(""mac"") > -1); 
/* 80 */       if (this.family.equals(""unix"")) {
/* 81 */         return (str2.equals("":"") && (!str1.startsWith(""mac"") || str1.endsWith(""x"")));
/*    */       }
/*    */       
/* 84 */       throw new BuildException(""Don't know how to detect os family \"""" + this.family + ""\"""");
/*    */     } 
/*    */     
/* 87 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\condition\Os.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.optional.TraXLiaison,"/*     */ package org.apache.tools.ant.taskdefs.optional;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import javax.xml.transform.Templates;
/*     */ import javax.xml.transform.Transformer;
/*     */ import javax.xml.transform.TransformerFactory;
/*     */ import javax.xml.transform.stream.StreamResult;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.tools.ant.taskdefs.XSLTLiaison;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TraXLiaison
/*     */   implements XSLTLiaison
/*     */ {
/*  81 */   private TransformerFactory tfactory = null;
/*     */ 
/*     */   
/*  84 */   private FileInputStream xslStream = null;
/*     */ 
/*     */   
/*  87 */   private Templates templates = null;
/*     */ 
/*     */   
/*  90 */   private Transformer transformer = null;
/*     */ 
/*     */   
/*  93 */   public TraXLiaison() throws Exception { this.tfactory = TransformerFactory.newInstance(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setStylesheet(File stylesheet) throws Exception {
/* 108 */     this.xslStream = new FileInputStream(stylesheet);
/* 109 */     StreamSource src = new StreamSource(this.xslStream);
/* 110 */     src.setSystemId(getSystemId(stylesheet));
/* 111 */     this.templates = this.tfactory.newTemplates(src);
/* 112 */     this.transformer = this.templates.newTransformer();
/*     */   }
/*     */   
/*     */   public void transform(File infile, File outfile) throws Exception {
/* 116 */     FileInputStream fis = null;
/* 117 */     FileOutputStream fos = null;
/*     */     try {
/* 119 */       fis = new FileInputStream(infile);
/* 120 */       fos = new FileOutputStream(outfile);
/* 121 */       StreamSource src = new StreamSource(fis);
/* 122 */       src.setSystemId(getSystemId(infile));
/* 123 */       StreamResult res = new StreamResult(fos);
/*     */       
/* 125 */       res.setSystemId(getSystemId(outfile));
/*     */       
/* 127 */       this.transformer.transform(src, res);
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 133 */         if (this.xslStream != null) {
/* 134 */           this.xslStream.close();
/*     */         }
/* 136 */       } catch (IOException ignored) {}
/*     */       try {
/* 138 */         if (fis != null) {
/* 139 */           fis.close();
/*     */         }
/* 141 */       } catch (IOException ignored) {}
/*     */       try {
/* 143 */         if (fos != null) {
/* 144 */           fos.close();
/*     */         }
/* 146 */       } catch (IOException ignored) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getSystemId(File file) {
/* 155 */     String path = file.getAbsolutePath();
/* 156 */     path = path.replace('\\', '/');
/* 157 */     return ""file:///"" + path;
/*     */   }
/*     */ 
/*     */   
/* 161 */   public void addParam(String name, String value) { this.transformer.setParameter(name, value); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\optional\TraXLiaison.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Random;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.Rmic;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultRmicAdapter
/*     */   implements RmicAdapter
/*     */ {
/*     */   private Rmic attributes;
/*     */   private FileNameMapper mapper;
/*     */   
/*     */   public void setRmic(Rmic paramRmic) {
/*  86 */     this.attributes = paramRmic;
/*  87 */     this.mapper = new RmicFileNameMapper(this);
/*     */   }
/*     */ 
/*     */   
/*  91 */   public Rmic getRmic() { return this.attributes; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   protected String getStubClassSuffix() { return ""_Stub""; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   protected String getSkelClassSuffix() { return ""_Skel""; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   protected String getTieClassSuffix() { return ""_Tie""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public FileNameMapper getMapper() { return this.mapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public Path getClasspath() { return getCompileClasspath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 127 */     Path path = new Path(this.attributes.getProject());
/* 128 */     path.setLocation(this.attributes.getBase());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 133 */     if (this.attributes.getClasspath() == null) {
/* 134 */       if (this.attributes.getIncludeantruntime()) {
/* 135 */         path.addExisting(Path.systemClasspath);
/*     */       }
/*     */     }
/* 138 */     else if (this.attributes.getIncludeantruntime()) {
/* 139 */       path.addExisting(this.attributes.getClasspath().concatSystemClasspath(""last""));
/*     */     } else {
/* 141 */       path.addExisting(this.attributes.getClasspath().concatSystemClasspath(""ignore""));
/*     */     } 
/*     */ 
/*     */     
/* 145 */     if (this.attributes.getIncludejavaruntime())
/*     */     {
/*     */ 
/*     */       
/* 149 */       if (System.getProperty(""java.vendor"").toLowerCase().indexOf(""microsoft"") >= 0) {
/*     */         
/* 151 */         FileSet fileSet = new FileSet();
/* 152 */         fileSet.setDir(new File(System.getProperty(""java.home"") + File.separator + ""Packages""));
/* 153 */         fileSet.setIncludes(""*.ZIP"");
/* 154 */         path.addFileset(fileSet);
/* 155 */       } else if (Project.getJavaVersion() == ""1.1"") {
/* 156 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""classes.zip""));
/*     */ 
/*     */ 
/*     */       
/*     */       }
/* 161 */       else if (System.getProperty(""java.vm.name"").equals(""Kaffe"")) {
/* 162 */         FileSet fileSet = new FileSet();
/* 163 */         fileSet.setDir(new File(System.getProperty(""java.home"") + File.separator + ""share"" + File.separator + ""kaffe""));
/*     */ 
/*     */ 
/*     */         
/* 167 */         fileSet.setIncludes(""*.jar"");
/* 168 */         path.addFileset(fileSet);
/*     */       } else {
/*     */         
/* 171 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 177 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""jre"" + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 184 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""classes.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 189 */         path.addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""ui.jar""));
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 196 */     return path;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   protected Commandline setupRmicCommand() { return setupRmicCommand(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupRmicCommand(String[] paramArrayOfString) {
/* 213 */     Commandline commandline = new Commandline();
/*     */     
/* 215 */     if (paramArrayOfString != null) {
/* 216 */       for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 217 */         commandline.createArgument().setValue(paramArrayOfString[b]);
/*     */       }
/*     */     }
/*     */     
/* 221 */     Path path = getCompileClasspath();
/*     */     
/* 223 */     commandline.createArgument().setValue(""-d"");
/* 224 */     commandline.createArgument().setFile(this.attributes.getBase());
/*     */     
/* 226 */     if (this.attributes.getExtdirs() != null) {
/* 227 */       if (Project.getJavaVersion().startsWith(""1.1"")) {
/*     */ 
/*     */ 
/*     */         
/* 231 */         addExtdirsToClasspath(path);
/*     */       } else {
/* 233 */         commandline.createArgument().setValue(""-extdirs"");
/* 234 */         commandline.createArgument().setPath(this.attributes.getExtdirs());
/*     */       } 
/*     */     }
/*     */     
/* 238 */     commandline.createArgument().setValue(""-classpath"");
/* 239 */     commandline.createArgument().setPath(path);
/*     */     
/* 241 */     String str = this.attributes.getStubVersion();
/* 242 */     if (null != str) {
/* 243 */       if (""1.1"".equals(str)) {
/* 244 */         commandline.createArgument().setValue(""-v1.1"");
/* 245 */       } else if (""1.2"".equals(str)) {
/* 246 */         commandline.createArgument().setValue(""-v1.2"");
/*     */       } else {
/* 248 */         commandline.createArgument().setValue(""-vcompat"");
/*     */       } 
/*     */     }
/* 251 */     if (null != this.attributes.getSourceBase()) {
/* 252 */       commandline.createArgument().setValue(""-keepgenerated"");
/*     */     }
/*     */     
/* 255 */     if (this.attributes.getIiop()) {
/* 256 */       this.attributes.log(""IIOP has been turned on."", 2);
/* 257 */       commandline.createArgument().setValue(""-iiop"");
/* 258 */       if (this.attributes.getIiopopts() != null) {
/* 259 */         this.attributes.log(""IIOP Options: "" + this.attributes.getIiopopts(), 2);
/*     */         
/* 261 */         commandline.createArgument().setValue(this.attributes.getIiopopts());
/*     */       } 
/*     */     } 
/*     */     
/* 265 */     if (this.attributes.getIdl()) {
/* 266 */       commandline.createArgument().setValue(""-idl"");
/* 267 */       this.attributes.log(""IDL has been turned on."", 2);
/* 268 */       if (this.attributes.getIdlopts() != null) {
/* 269 */         commandline.createArgument().setValue(this.attributes.getIdlopts());
/* 270 */         this.attributes.log(""IDL Options: "" + this.attributes.getIdlopts(), 2);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 275 */     if (this.attributes.getDebug()) {
/* 276 */       commandline.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 279 */     logAndAddFilesToCompile(commandline);
/* 280 */     return commandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline paramCommandline) {
/* 288 */     Vector vector = this.attributes.getCompileList();
/*     */     
/* 290 */     this.attributes.log(""Compilation args: "" + paramCommandline.toString(), 3);
/*     */ 
/*     */     
/* 293 */     StringBuffer stringBuffer = new StringBuffer(""File"");
/* 294 */     if (vector.size() != 1) {
/* 295 */       stringBuffer.append(""s"");
/*     */     }
/* 297 */     stringBuffer.append("" to be compiled:"");
/*     */     
/* 299 */     for (byte b = 0; b < vector.size(); b++) {
/* 300 */       String str = vector.elementAt(b);
/* 301 */       paramCommandline.createArgument().setValue(str);
/* 302 */       stringBuffer.append(""    "" + str);
/*     */     } 
/*     */     
/* 305 */     this.attributes.log(stringBuffer.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addExtdirsToClasspath(Path paramPath) {
/* 316 */     Path path = this.attributes.getExtdirs();
/* 317 */     if (path == null) {
/* 318 */       String str = System.getProperty(""java.ext.dirs"");
/* 319 */       if (str != null) {
/* 320 */         path = new Path(this.attributes.getProject(), str);
/*     */       } else {
/*     */         return;
/*     */       } 
/*     */     } 
/*     */     
/* 326 */     String[] arrayOfString = path.list();
/* 327 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 328 */       if (!arrayOfString[b].endsWith(File.separator)) {
/* 329 */         arrayOfString[b] = arrayOfString[b] + File.separator;
/*     */       }
/* 331 */       File file = this.attributes.getProject().resolveFile(arrayOfString[b]);
/* 332 */       FileSet fileSet = new FileSet();
/* 333 */       fileSet.setDir(file);
/* 334 */       fileSet.setIncludes(""*"");
/* 335 */       paramPath.addFileset(fileSet);
/*     */     } 
/*     */   }
/*     */   
/* 339 */   private static final Random rand = new Random();
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */   
/*     */   private class RmicFileNameMapper implements FileNameMapper {
/*     */     private final DefaultRmicAdapter this$0;
/*     */     
/* 346 */     RmicFileNameMapper(DefaultRmicAdapter this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/*     */     public void setFrom(String param1String) {}
/*     */ 
/*     */ 
/*     */     
/*     */     public void setTo(String param1String) {}
/*     */ 
/*     */     
/*     */     public String[] mapFileName(String param1String) {
/* 358 */       if (param1String == null || !param1String.endsWith("".class"") || param1String.endsWith(this.this$0.getStubClassSuffix() + "".class"") || param1String.endsWith(this.this$0.getSkelClassSuffix() + "".class"") || param1String.endsWith(this.this$0.getTieClassSuffix() + "".class""))
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 364 */         return null;
/*     */       }
/*     */       
/* 367 */       String str1 = param1String.substring(0, param1String.indexOf("".class""));
/* 368 */       String str2 = str1.replace(File.separatorChar, '.');
/* 369 */       if (this.this$0.attributes.getVerify() && !this.this$0.attributes.isValidRmiRemote(str2))
/*     */       {
/* 371 */         return null;
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 382 */       String[] arrayOfString = { param1String + "".tmp."" + rand.nextLong() };
/*     */       
/* 384 */       if (!this.this$0.attributes.getIiop() && !this.this$0.attributes.getIdl()) {
/*     */         
/* 386 */         if (""1.2"".equals(this.this$0.attributes.getStubVersion())) {
/* 387 */           arrayOfString = new String[] { str1 + this.this$0.getStubClassSuffix() + "".class"" };
/*     */         }
/*     */         else {
/*     */           
/* 391 */           arrayOfString = new String[] { str1 + this.this$0.getStubClassSuffix() + "".class"", str1 + this.this$0.getSkelClassSuffix() + "".class"" };
/*     */         
/*     */         }
/*     */       
/*     */       }
/* 396 */       else if (!this.this$0.attributes.getIdl()) {
/* 397 */         int i = str1.lastIndexOf(File.separatorChar);
/*     */         
/* 399 */         String str3 = """";
/*     */ 
/*     */ 
/*     */         
/* 403 */         int j = -1;
/* 404 */         if (i == -1) {
/*     */           
/* 406 */           j = 0;
/*     */         } else {
/* 408 */           j = i + 1;
/* 409 */           str3 = str1.substring(0, j);
/*     */         } 
/*     */         
/* 412 */         String str4 = str1.substring(j);
/*     */         
/*     */         try {
/* 415 */           Class clazz = this.this$0.attributes.getLoader().loadClass(str2);
/*     */           
/* 417 */           if (clazz.isInterface())
/*     */           {
/* 419 */             arrayOfString = new String[] { str3 + ""_"" + str4 + this.this$0.getStubClassSuffix() + "".class"" };
/*     */ 
/*     */ 
/*     */           
/*     */           }
/*     */           else
/*     */           {
/*     */ 
/*     */             
/* 428 */             Class clazz1 = this.this$0.attributes.getRemoteInterface(clazz);
/* 429 */             String str5 = clazz1.getName();
/* 430 */             String str6 = """";
/* 431 */             int k = -1;
/* 432 */             int m = str5.lastIndexOf(""."");
/* 433 */             if (m == -1) {
/*     */               
/* 435 */               k = 0;
/*     */             } else {
/* 437 */               k = m + 1;
/* 438 */               str6 = str5.substring(0, k);
/* 439 */               str6 = str6.replace('.', File.separatorChar);
/*     */             } 
/*     */             
/* 442 */             arrayOfString = new String[] { str3 + ""_"" + str4 + this.this$0.getTieClassSuffix() + "".class"", str6 + ""_"" + str5.substring(k) + this.this$0.getStubClassSuffix() + "".class"" };
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/*     */         catch (ClassNotFoundException classNotFoundException) {
/*     */           
/* 450 */           this.this$0.attributes.log(""Unable to verify class "" + str2 + "". It could not be found."", 1);
/*     */         }
/*     */         catch (NoClassDefFoundError noClassDefFoundError) {
/*     */           
/* 454 */           this.this$0.attributes.log(""Unable to verify class "" + str2 + "". It is not defined."", 1);
/*     */         } catch (Throwable throwable) {
/*     */           
/* 457 */           this.this$0.attributes.log(""Unable to verify class "" + str2 + "". Loading caused Exception: "" + throwable.getMessage(), 1);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 462 */       return arrayOfString;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\DefaultRmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.KaffeRmic,"/*    */ package org.apache.tools.ant.taskdefs.rmic;
/*    */ 
/*    */ import java.lang.reflect.Constructor;
/*    */ import java.lang.reflect.Method;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KaffeRmic
/*    */   extends DefaultRmicAdapter
/*    */ {
/*    */   static Class array$Ljava$lang$String;
/*    */   
/*    */   static Class class$(String paramString) { 
/* 71 */     try { return Class.forName(paramString); } catch (ClassNotFoundException classNotFoundException) { throw new NoClassDefFoundError(classNotFoundException.getMessage()); }
/*    */      }
/*    */   public boolean execute() throws BuildException {
/* 74 */     getRmic().log(""Using Kaffe rmic"", 3);
/* 75 */     Commandline commandline = setupRmicCommand();
/*    */ 
/*    */     
/*    */     try {
/* 79 */       Class clazz = Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 80 */       Constructor constructor = clazz.getConstructor(new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/* 81 */       Object object = constructor.newInstance(new Object[] { commandline.getArguments() });
/* 82 */       Method method = clazz.getMethod(""run"", null);
/* 83 */       String[] arrayOfString = commandline.getArguments();
/* 84 */       Boolean bool = (Boolean)method.invoke(object, null);
/*    */       
/* 86 */       return bool.booleanValue();
/*    */     } catch (ClassNotFoundException classNotFoundException) {
/* 88 */       throw new BuildException(""Cannot use Kaffe rmic, as it is not available A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*    */     
/*    */     }
/*    */     catch (Exception exception) {
/*    */       
/* 93 */       if (exception instanceof BuildException) {
/* 94 */         throw (BuildException)exception;
/*    */       }
/* 96 */       throw new BuildException(""Error starting Kaffe rmic: "", exception, getRmic().getLocation());
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\KaffeRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapter,"package org.apache.tools.ant.taskdefs.rmic;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Rmic;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileNameMapper;
public interface RmicAdapter {
  void setRmic(Rmic paramRmic);
  boolean execute() throws BuildException;
  FileNameMapper getMapper();
  Path getClasspath();
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RmicAdapterFactory
/*     */ {
/*     */   public static RmicAdapter getRmic(String paramString, Task paramTask) throws BuildException {
/*  92 */     if (paramString == null) {
/*     */ 
/*     */       
/*     */       try { 
/*     */ 
/*     */         
/*  98 */         Class.forName(""sun.rmi.rmic.Main"");
/*  99 */         paramString = ""sun""; }
/*     */       
/* 101 */       catch (ClassNotFoundException classNotFoundException) { try {
/* 102 */           Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 103 */           Class.forName(""kaffe.tools.compiler.Compiler"");
/* 104 */           paramString = ""kaffe"";
/*     */         } catch (ClassNotFoundException classNotFoundException1) {
/* 106 */           throw new BuildException(""Couldn't guess rmic implementation"");
/*     */         }  }
/*     */     
/*     */     }
/*     */     
/* 111 */     if (paramString.equalsIgnoreCase(""sun""))
/* 112 */       return new SunRmic(); 
/* 113 */     if (paramString.equalsIgnoreCase(""kaffe""))
/* 114 */       return new KaffeRmic(); 
/* 115 */     if (paramString.equalsIgnoreCase(""weblogic"")) {
/* 116 */       return new WLRmic();
/*     */     }
/* 118 */     return resolveClassName(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static RmicAdapter resolveClassName(String paramString) throws BuildException {
/*     */     try {
/* 132 */       Class clazz = Class.forName(paramString);
/* 133 */       Object object = clazz.newInstance();
/* 134 */       return (RmicAdapter)object;
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/* 136 */       throw new BuildException(paramString + "" can't be found."", classNotFoundException);
/*     */     } catch (ClassCastException classCastException) {
/* 138 */       throw new BuildException(paramString + "" isn't the classname of "" + ""a rmic adapter."", classCastException);
/*     */     }
/*     */     catch (Throwable throwable) {
/*     */       
/* 142 */       throw new BuildException(paramString + "" caused an interesting "" + ""exception."", throwable);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.SunRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SunRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  74 */     getRmic().log(""Using SUN rmic compiler"", 3);
/*  75 */     Commandline commandline = setupRmicCommand();
/*     */ 
/*     */ 
/*     */     
/*  79 */     LogOutputStream logOutputStream = new LogOutputStream((Task)getRmic(), 1);
/*     */     
/*     */     try {
/*  82 */       Class clazz = Class.forName(""sun.rmi.rmic.Main"");
/*  83 */       Constructor constructor = clazz.getConstructor(new Class[] { OutputStream.class, String.class });
/*     */       
/*  85 */       Object object = constructor.newInstance(new Object[] { logOutputStream, ""rmic"" });
/*     */       
/*  87 */       Method method = clazz.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  89 */       Boolean bool = (Boolean)method.invoke(object, new Object[] { commandline.getArguments() });
/*     */       
/*  91 */       return bool.booleanValue();
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/*  93 */       throw new BuildException(""Cannot use SUN rmic, as it is not available A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception exception) {
/*     */       
/*  98 */       if (exception instanceof BuildException) {
/*  99 */         throw (BuildException)exception;
/*     */       }
/* 101 */       throw new BuildException(""Error starting SUN rmic: "", exception, getRmic().getLocation());
/*     */     } finally {
/*     */       
/*     */       try {
/* 105 */         logOutputStream.close();
/*     */       } catch (IOException iOException) {
/* 107 */         throw new BuildException(iOException);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\SunRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.WLRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WLRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   static Class class$(String paramString) { 
/*  72 */     try { return Class.forName(paramString); } catch (ClassNotFoundException classNotFoundException) { throw new NoClassDefFoundError(classNotFoundException.getMessage()); }
/*     */      }
/*     */   public boolean execute() throws BuildException {
/*  75 */     getRmic().log(""Using WebLogic rmic"", 3);
/*  76 */     Commandline commandline = setupRmicCommand(new String[] { ""-noexit"" });
/*     */ 
/*     */     
/*     */     try {
/*  80 */       Class clazz = Class.forName(""weblogic.rmic"");
/*  81 */       Method method = clazz.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  83 */       method.invoke(null, new Object[] { commandline.getArguments() });
/*  84 */       return true;
/*     */     } catch (ClassNotFoundException classNotFoundException) {
/*  86 */       throw new BuildException(""Cannot use WebLogic rmic, as it is not available A common solution is to set the environment variable CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception exception) {
/*     */       
/*  91 */       if (exception instanceof BuildException) {
/*  92 */         throw (BuildException)exception;
/*     */       }
/*  94 */       throw new BuildException(""Error starting WebLogic rmic: "", exception, getRmic().getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public String getStubClassSuffix() { return ""_WLStub""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public String getSkelClassSuffix() { return ""_WLSkel""; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\taskdefs\rmic\WLRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Commandline,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Commandline
/*     */   implements Cloneable
/*     */ {
/*  87 */   private Vector arguments = new Vector();
/*  88 */   private String executable = null;
/*     */ 
/*     */   
/*     */   public Commandline(String paramString) {
/*  92 */     String[] arrayOfString = translateCommandline(paramString);
/*  93 */     if (arrayOfString != null && arrayOfString.length > 0) {
/*  94 */       setExecutable(arrayOfString[0]);
/*  95 */       for (byte b = 1; b < arrayOfString.length; b++) {
/*  96 */         createArgument().setValue(arrayOfString[b]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public class Argument
/*     */   {
/*     */     private String[] parts;
/*     */     
/*     */     private final Commandline this$0;
/*     */     
/* 108 */     public Argument(Commandline this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 118 */     public void setValue(String param1String) { this.parts = new String[] { param1String }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 127 */     public void setLine(String param1String) { this.parts = Commandline.translateCommandline(param1String); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 138 */     public void setPath(Path param1Path) { this.parts = new String[] { param1Path.toString() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 148 */     public void setFile(File param1File) { this.parts = new String[] { param1File.getAbsolutePath() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 155 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public class Marker
/*     */   {
/*     */     private int position;
/*     */     
/*     */     private int realPos;
/*     */     
/*     */     private final Commandline this$0;
/*     */ 
/*     */     
/*     */     Marker(Commandline this$0, int param1Int) {
/* 170 */       this.this$0 = this$0; this.realPos = -1;
/* 171 */       this.position = param1Int;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public int getPosition() {
/* 181 */       if (this.realPos == -1) {
/* 182 */         this.realPos = (this.this$0.executable == null) ? 0 : 1;
/* 183 */         for (byte b = 0; b < this.position; b++) {
/* 184 */           Commandline.Argument argument = this.this$0.arguments.elementAt(b);
/* 185 */           this.realPos += (argument.getParts()).length;
/*     */         } 
/*     */       } 
/* 188 */       return this.realPos;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Argument createArgument() {
/* 198 */     Argument argument = new Argument(this);
/* 199 */     this.arguments.addElement(argument);
/* 200 */     return argument;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExecutable(String paramString) {
/* 208 */     if (paramString == null || paramString.length() == 0)
/* 209 */       return;  this.executable = paramString.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   public String getExecutable() { return this.executable; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArguments(String[] paramArrayOfString) {
/* 220 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 221 */       createArgument().setValue(paramArrayOfString[b]);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 229 */     String[] arrayOfString1 = getArguments();
/* 230 */     if (this.executable == null) return arrayOfString1; 
/* 231 */     String[] arrayOfString2 = new String[arrayOfString1.length + 1];
/* 232 */     arrayOfString2[0] = this.executable;
/* 233 */     System.arraycopy(arrayOfString1, 0, arrayOfString2, 1, arrayOfString1.length);
/* 234 */     return arrayOfString2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getArguments() {
/* 243 */     Vector vector = new Vector(this.arguments.size() * 2);
/* 244 */     for (byte b = 0; b < this.arguments.size(); b++) {
/* 245 */       Argument argument = this.arguments.elementAt(b);
/* 246 */       String[] arrayOfString1 = argument.getParts();
/* 247 */       for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 248 */         vector.addElement(arrayOfString1[b1]);
/*     */       }
/*     */     } 
/*     */     
/* 252 */     String[] arrayOfString = new String[vector.size()];
/* 253 */     vector.copyInto((Object[])arrayOfString);
/* 254 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public String toString() { return toString(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String quoteArgument(String paramString) {
/* 273 */     if (paramString.indexOf(""\"""") > -1) {
/* 274 */       if (paramString.indexOf(""'"") > -1) {
/* 275 */         throw new BuildException(""Can't handle single and double quotes in same argument"");
/*     */       }
/* 277 */       return '\'' + paramString + '\'';
/*     */     } 
/* 279 */     if (paramString.indexOf(""'"") > -1 || paramString.indexOf("" "") > -1) {
/* 280 */       return '""' + paramString + '""';
/*     */     }
/* 282 */     return paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static String toString(String[] paramArrayOfString) {
/* 288 */     if (paramArrayOfString == null || paramArrayOfString.length == 0) return """";
/*     */ 
/*     */     
/* 291 */     StringBuffer stringBuffer = new StringBuffer();
/* 292 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/* 293 */       if (b > 0) {
/* 294 */         stringBuffer.append(' ');
/*     */       }
/* 296 */       stringBuffer.append(quoteArgument(paramArrayOfString[b]));
/*     */     } 
/* 298 */     return stringBuffer.toString();
/*     */   }
/*     */   
/*     */   public static String[] translateCommandline(String paramString) {
/* 302 */     if (paramString == null || paramString.length() == 0) {
/* 303 */       return new String[0];
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 311 */     byte b = 0;
/* 312 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, ""\""' "", true);
/* 313 */     Vector vector = new Vector();
/* 314 */     StringBuffer stringBuffer = new StringBuffer();
/*     */     
/* 316 */     while (stringTokenizer.hasMoreTokens()) {
/* 317 */       String str = stringTokenizer.nextToken();
/* 318 */       switch (b) {
/*     */         case true:
/* 320 */           if (""'"".equals(str)) {
/* 321 */             b = 0; continue;
/*     */           } 
/* 323 */           stringBuffer.append(str);
/*     */           continue;
/*     */         
/*     */         case true:
/* 327 */           if (""\"""".equals(str)) {
/* 328 */             b = 0; continue;
/*     */           } 
/* 330 */           stringBuffer.append(str);
/*     */           continue;
/*     */       } 
/*     */       
/* 334 */       if (""'"".equals(str)) {
/* 335 */         b = 1; continue;
/* 336 */       }  if (""\"""".equals(str)) {
/* 337 */         b = 2; continue;
/* 338 */       }  if ("" "".equals(str)) {
/* 339 */         if (stringBuffer.length() != 0) {
/* 340 */           vector.addElement(stringBuffer.toString());
/* 341 */           stringBuffer.setLength(0);
/*     */         }  continue;
/*     */       } 
/* 344 */       stringBuffer.append(str);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 350 */     if (stringBuffer.length() != 0) {
/* 351 */       vector.addElement(stringBuffer.toString());
/*     */     }
/*     */     
/* 354 */     if (b == 1 || b == 2) {
/* 355 */       throw new BuildException(""unbalanced quotes in "" + paramString);
/*     */     }
/*     */     
/* 358 */     String[] arrayOfString = new String[vector.size()];
/* 359 */     vector.copyInto((Object[])arrayOfString);
/* 360 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */   
/* 364 */   public int size() { return (getCommandline()).length; }
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 368 */     Commandline commandline = new Commandline();
/* 369 */     commandline.setExecutable(this.executable);
/* 370 */     commandline.addArguments(getArguments());
/* 371 */     return commandline;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void clear() {
/* 377 */     this.executable = null;
/* 378 */     this.arguments.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 385 */   public void clearArgs() { this.arguments.removeAllElements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 396 */   public Marker createMarker() { return new Marker(this, this.arguments.size()); }
/*     */   
/*     */   public Commandline() {}
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Commandline.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.CommandlineJava,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CommandlineJava
/*     */   implements Cloneable
/*     */ {
/*  72 */   private Commandline vmCommand = new Commandline();
/*  73 */   private Commandline javaCommand = new Commandline();
/*  74 */   private SysProperties sysProperties = new SysProperties();
/*  75 */   private Path classpath = null;
/*     */   private String vmVersion;
/*  77 */   private String maxMemory = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean executeJar = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static class SysProperties
/*     */     extends Environment
/*     */     implements Cloneable
/*     */   {
/*  89 */     Properties sys = null;
/*     */     
/*     */     public String[] getVariables() throws BuildException {
/*  92 */       String[] arrayOfString = super.getVariables();
/*     */       
/*  94 */       if (arrayOfString == null) return null;
/*     */       
/*  96 */       for (byte b = 0; b < arrayOfString.length; b++) {
/*  97 */         arrayOfString[b] = ""-D"" + arrayOfString[b];
/*     */       }
/*  99 */       return arrayOfString;
/*     */     }
/*     */ 
/*     */     
/* 103 */     public int size() { return this.variables.size(); }
/*     */ 
/*     */     
/*     */     public void setSystem() throws BuildException {
/*     */       try {
/* 108 */         Properties properties = new Properties(this.sys = System.getProperties());
/*     */         
/* 110 */         for (Enumeration enumeration = this.variables.elements(); enumeration.hasMoreElements(); ) {
/* 111 */           Environment.Variable variable = enumeration.nextElement();
/* 112 */           properties.put(variable.getKey(), variable.getValue());
/*     */         } 
/* 114 */         System.setProperties(properties);
/*     */       } catch (SecurityException securityException) {
/* 116 */         throw new BuildException(""Cannot modify system properties"", securityException);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void restoreSystem() throws BuildException {
/* 121 */       if (this.sys == null) {
/* 122 */         throw new BuildException(""Unbalanced nesting of SysProperties"");
/*     */       }
/*     */       try {
/* 125 */         System.setProperties(this.sys);
/* 126 */         this.sys = null;
/*     */       } catch (SecurityException securityException) {
/* 128 */         throw new BuildException(""Cannot modify system properties"", securityException);
/*     */       } 
/*     */     }
/*     */     
/*     */     public Object clone() {
/*     */       
/* 134 */       try { SysProperties sysProperties = (SysProperties)super.clone();
/* 135 */         sysProperties.variables = (Vector)this.variables.clone();
/* 136 */         return sysProperties; }
/* 137 */       catch (CloneNotSupportedException cloneNotSupportedException) { return null; }
/*     */     
/*     */     }
/*     */   }
/*     */   
/*     */   public CommandlineJava() {
/* 143 */     setVm(getJavaExecutableName());
/* 144 */     setVmversion(Project.getJavaVersion());
/*     */   }
/*     */ 
/*     */   
/* 148 */   public Commandline.Argument createArgument() { return this.javaCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */   
/* 152 */   public Commandline.Argument createVmArgument() { return this.vmCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void addSysproperty(Environment.Variable paramVariable) { this.sysProperties.addVariable(paramVariable); }
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setVm(String paramString) { this.vmCommand.setExecutable(paramString); }
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setVmversion(String paramString) { this.vmVersion = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(String paramString) {
/* 172 */     this.javaCommand.setExecutable(paramString);
/* 173 */     this.executeJar = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getJar() {
/* 182 */     if (this.executeJar) {
/* 183 */       return this.javaCommand.getExecutable();
/*     */     }
/* 185 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String paramString) {
/* 193 */     this.javaCommand.setExecutable(paramString);
/* 194 */     this.executeJar = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getClassname() {
/* 202 */     if (!this.executeJar) {
/* 203 */       return this.javaCommand.getExecutable();
/*     */     }
/* 205 */     return null;
/*     */   }
/*     */   
/*     */   public Path createClasspath(Project paramProject) {
/* 209 */     if (this.classpath == null) {
/* 210 */       this.classpath = new Path(paramProject);
/*     */     }
/* 212 */     return this.classpath;
/*     */   }
/*     */ 
/*     */   
/* 216 */   public String getVmversion() { return this.vmVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 224 */     String[] arrayOfString1 = new String[size()];
/* 225 */     int i = 0;
/* 226 */     String[] arrayOfString2 = getActualVMCommand().getCommandline();
/*     */     
/* 228 */     arrayOfString1[i++] = arrayOfString2[0];
/*     */ 
/*     */     
/* 231 */     if (this.executeJar) {
/* 232 */       arrayOfString1[i++] = ""-jar"";
/*     */     }
/*     */     
/* 235 */     System.arraycopy(arrayOfString2, 1, arrayOfString1, i, arrayOfString2.length - 1);
/* 236 */     i += arrayOfString2.length - 1;
/*     */     
/* 238 */     if (this.sysProperties.size() > 0) {
/* 239 */       System.arraycopy(this.sysProperties.getVariables(), 0, arrayOfString1, i, this.sysProperties.size());
/*     */       
/* 241 */       i += this.sysProperties.size();
/*     */     } 
/*     */     
/* 244 */     Path path = (this.classpath != null) ? this.classpath.concatSystemClasspath(""ignore"") : null;
/* 245 */     if (path != null && path.toString().trim().length() > 0) {
/* 246 */       arrayOfString1[i++] = ""-classpath"";
/* 247 */       arrayOfString1[i++] = path.toString();
/*     */     } 
/*     */ 
/*     */     
/* 251 */     System.arraycopy(this.javaCommand.getCommandline(), 0, arrayOfString1, i, this.javaCommand.size());
/*     */     
/* 253 */     return arrayOfString1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   public void setMaxmemory(String paramString) { this.maxMemory = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 265 */   public String toString() { return Commandline.toString(getCommandline()); }
/*     */ 
/*     */   
/*     */   private Commandline getActualVMCommand() {
/* 269 */     Commandline commandline = (Commandline)this.vmCommand.clone();
/* 270 */     if (this.maxMemory != null) {
/* 271 */       if (this.vmVersion.startsWith(""1.1"")) {
/* 272 */         commandline.createArgument().setValue(""-mx"" + this.maxMemory);
/*     */       } else {
/* 274 */         commandline.createArgument().setValue(""-Xmx"" + this.maxMemory);
/*     */       } 
/*     */     }
/* 277 */     return commandline;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int size() {
/* 286 */     int i = getActualVMCommand().size() + this.javaCommand.size() + this.sysProperties.size();
/*     */     
/* 288 */     Path path = (this.classpath != null) ? this.classpath.concatSystemClasspath(""ignore"") : null;
/* 289 */     if (path != null && path.toString().trim().length() > 0) {
/* 290 */       i += 2;
/*     */     }
/*     */     
/* 293 */     if (this.executeJar) {
/* 294 */       i++;
/*     */     }
/* 296 */     return i;
/*     */   }
/*     */ 
/*     */   
/* 300 */   public Commandline getJavaCommand() { return this.javaCommand; }
/*     */ 
/*     */ 
/*     */   
/* 304 */   public Commandline getVmCommand() { return getActualVMCommand(); }
/*     */ 
/*     */ 
/*     */   
/* 308 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */   
/* 312 */   public void setSystemProperties() throws BuildException { this.sysProperties.setSystem(); }
/*     */ 
/*     */ 
/*     */   
/* 316 */   public void restoreSystemProperties() throws BuildException { this.sysProperties.restoreSystem(); }
/*     */ 
/*     */ 
/*     */   
/* 320 */   public SysProperties getSystemProperties() { return this.sysProperties; }
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 324 */     CommandlineJava commandlineJava = new CommandlineJava();
/* 325 */     commandlineJava.vmCommand = (Commandline)this.vmCommand.clone();
/* 326 */     commandlineJava.javaCommand = (Commandline)this.javaCommand.clone();
/* 327 */     commandlineJava.sysProperties = (SysProperties)this.sysProperties.clone();
/* 328 */     commandlineJava.maxMemory = this.maxMemory;
/* 329 */     if (this.classpath != null) {
/* 330 */       commandlineJava.classpath = (Path)this.classpath.clone();
/*     */     }
/* 332 */     commandlineJava.vmVersion = this.vmVersion;
/* 333 */     commandlineJava.executeJar = this.executeJar;
/* 334 */     return commandlineJava;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public void clearJavaArgs() { this.javaCommand.clearArgs(); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getJavaExecutableName() {
/* 347 */     String str1 = System.getProperty(""os.name"").toLowerCase();
/* 348 */     boolean bool = (str1.indexOf(""windows"") >= 0 || str1.indexOf(""os/2"") >= 0) ? true : false;
/*     */     
/* 350 */     String str2 = bool ? "".exe"" : """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 356 */     File file = new File(System.getProperty(""java.home"") + ""/../bin/java"" + str2);
/*     */ 
/*     */ 
/*     */     
/* 360 */     if (file.exists()) {
/* 361 */       return file.getAbsolutePath();
/*     */     }
/* 363 */     return ""java"";
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\CommandlineJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DataType,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DataType
/*     */   extends ProjectComponent
/*     */ {
/*  79 */   protected String description = null;
/*     */ 
/*     */ 
/*     */   
/*  83 */   protected Reference ref = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean checked = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setDescription(String paramString) { this.description = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public boolean isReference() { return (this.ref != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) {
/* 125 */     this.ref = paramReference;
/* 126 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack paramStack, Project paramProject) throws BuildException {
/* 148 */     if (this.checked || !isReference()) {
/*     */       return;
/*     */     }
/* 151 */     Object object = this.ref.getReferencedObject(paramProject);
/*     */     
/* 153 */     if (object instanceof DataType) {
/* 154 */       if (paramStack.contains(object)) {
/* 155 */         throw circularReference();
/*     */       }
/* 157 */       paramStack.push(object);
/* 158 */       ((DataType)object).dieOnCircularReference(paramStack, paramProject);
/* 159 */       paramStack.pop();
/*     */     } 
/*     */     
/* 162 */     this.checked = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object getCheckedRef(Class paramClass, String paramString) {
/* 170 */     if (!this.checked) {
/* 171 */       Stack stack = new Stack();
/* 172 */       stack.push(this);
/* 173 */       dieOnCircularReference(stack, getProject());
/*     */     } 
/*     */     
/* 176 */     Object object = this.ref.getReferencedObject(getProject());
/* 177 */     if (!paramClass.isAssignableFrom(object.getClass())) {
/* 178 */       String str = this.ref.getRefId() + "" doesn't denote a "" + paramString;
/* 179 */       throw new BuildException(str);
/*     */     } 
/* 181 */     return object;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   protected BuildException tooManyAttributes() { return new BuildException(""You must not specify more than one attribute when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   protected BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested elements when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   protected BuildException circularReference() { return new BuildException(""This data type contains a circular reference.""); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\DataType.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Description,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Description
/*    */   extends DataType
/*    */ {
/*    */   public void addText(String paramString) {
/* 78 */     String str = this.project.getDescription();
/* 79 */     if (str == null) {
/* 80 */       this.project.setDescription(paramString);
/*    */     } else {
/* 82 */       this.project.setDescription(str + paramString);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Description.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.EnumeratedAttribute,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class EnumeratedAttribute
/*     */ {
/*     */   protected String value;
/*     */   
/*     */   public abstract String[] getValues();
/*     */   
/*     */   public final void setValue(String paramString) throws BuildException {
/*  85 */     if (!containsValue(paramString)) {
/*  86 */       throw new BuildException(paramString + "" is not a legal value for this attribute"");
/*     */     }
/*  88 */     this.value = paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final boolean containsValue(String paramString) {
/*  95 */     String[] arrayOfString = getValues();
/*  96 */     if (arrayOfString == null || paramString == null) {
/*  97 */       return false;
/*     */     }
/*     */     
/* 100 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 101 */       if (paramString.equals(arrayOfString[b])) {
/* 102 */         return true;
/*     */       }
/*     */     } 
/* 105 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public final String getValue() { return this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\EnumeratedAttribute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Environment,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Environment
/*     */ {
/*     */   protected Vector variables;
/*     */   
/*     */   public static class Variable
/*     */   {
/*     */     private String key;
/*     */     private String value;
/*     */     
/*  77 */     public void setKey(String param1String) { this.key = param1String; }
/*     */ 
/*     */ 
/*     */     
/*  81 */     public void setValue(String param1String) { this.value = param1String; }
/*     */ 
/*     */ 
/*     */     
/*  85 */     public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */     
/*  89 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */     
/*  93 */     public void setPath(Path param1Path) { this.value = param1Path.toString(); }
/*     */ 
/*     */ 
/*     */     
/*  97 */     public void setFile(File param1File) { this.value = param1File.getAbsolutePath(); }
/*     */ 
/*     */     
/*     */     public String getContent() throws BuildException {
/* 101 */       if (this.key == null || this.value == null) {
/* 102 */         throw new BuildException(""key and value must be specified for environment variables."");
/*     */       }
/* 104 */       StringBuffer stringBuffer = new StringBuffer(this.key.trim());
/* 105 */       stringBuffer.append(""="").append(this.value.trim());
/* 106 */       return stringBuffer.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 111 */   public Environment() { this.variables = new Vector(); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void addVariable(Variable paramVariable) { this.variables.addElement(paramVariable); }
/*     */ 
/*     */   
/*     */   public String[] getVariables() throws BuildException {
/* 119 */     if (this.variables.size() == 0) {
/* 120 */       return null;
/*     */     }
/* 122 */     String[] arrayOfString = new String[this.variables.size()];
/* 123 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 124 */       arrayOfString[b] = ((Variable)this.variables.elementAt(b)).getContent();
/*     */     }
/* 126 */     return arrayOfString;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Environment.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileList,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileList
/*     */   extends DataType
/*     */ {
/*  79 */   private Vector filenames = new Vector();
/*     */   
/*     */   private File dir;
/*     */ 
/*     */   
/*     */   public FileList() {}
/*     */   
/*     */   protected FileList(FileList paramFileList) {
/*  87 */     this.dir = paramFileList.dir;
/*  88 */     this.filenames = paramFileList.filenames;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) throws BuildException {
/*  99 */     if (this.dir != null || this.filenames.size() != 0) {
/* 100 */       throw tooManyAttributes();
/*     */     }
/* 102 */     super.setRefid(paramReference);
/*     */   }
/*     */   
/*     */   public void setDir(File paramFile) throws BuildException {
/* 106 */     if (isReference()) {
/* 107 */       throw tooManyAttributes();
/*     */     }
/* 109 */     this.dir = paramFile;
/*     */   }
/*     */   
/*     */   public File getDir(Project paramProject) {
/* 113 */     if (isReference()) {
/* 114 */       return getRef(paramProject).getDir(paramProject);
/*     */     }
/* 116 */     return this.dir;
/*     */   }
/*     */   
/*     */   public void setFiles(String paramString) {
/* 120 */     if (isReference()) {
/* 121 */       throw tooManyAttributes();
/*     */     }
/* 123 */     if (paramString != null && paramString.length() > 0) {
/* 124 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", \t\n\r\f"", false);
/* 125 */       while (stringTokenizer.hasMoreTokens()) {
/* 126 */         this.filenames.addElement(stringTokenizer.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getFiles(Project paramProject) {
/* 135 */     if (isReference()) {
/* 136 */       return getRef(paramProject).getFiles(paramProject);
/*     */     }
/*     */     
/* 139 */     if (this.dir == null) {
/* 140 */       throw new BuildException(""No directory specified for filelist."");
/*     */     }
/*     */     
/* 143 */     if (this.filenames.size() == 0) {
/* 144 */       throw new BuildException(""No files specified for filelist."");
/*     */     }
/*     */     
/* 147 */     String[] arrayOfString = new String[this.filenames.size()];
/* 148 */     this.filenames.copyInto((Object[])arrayOfString);
/* 149 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected FileList getRef(Project paramProject) {
/* 157 */     if (!this.checked) {
/* 158 */       Stack stack = new Stack();
/* 159 */       stack.push(this);
/* 160 */       dieOnCircularReference(stack, paramProject);
/*     */     } 
/*     */     
/* 163 */     Object object = this.ref.getReferencedObject(paramProject);
/* 164 */     if (!(object instanceof FileList)) {
/* 165 */       String str = this.ref.getRefId() + "" doesn't denote a filelist"";
/* 166 */       throw new BuildException(str);
/*     */     } 
/* 168 */     return (FileList)object;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\FileList.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileSet
/*     */   extends DataType
/*     */ {
/*  79 */   private PatternSet defaultPatterns = new PatternSet();
/*  80 */   private Vector additionalPatterns = new Vector();
/*     */   
/*     */   private File dir;
/*     */   
/*     */   private boolean useDefaultExcludes = true;
/*     */   
/*     */   private boolean isCaseSensitive = true;
/*     */   
/*     */   public FileSet() {}
/*     */   
/*     */   protected FileSet(FileSet paramFileSet) {
/*  91 */     this.dir = paramFileSet.dir;
/*  92 */     this.defaultPatterns = paramFileSet.defaultPatterns;
/*  93 */     this.additionalPatterns = paramFileSet.additionalPatterns;
/*  94 */     this.useDefaultExcludes = paramFileSet.useDefaultExcludes;
/*  95 */     this.isCaseSensitive = paramFileSet.isCaseSensitive;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) throws BuildException {
/* 108 */     if (this.dir != null || this.defaultPatterns.hasPatterns()) {
/* 109 */       throw tooManyAttributes();
/*     */     }
/* 111 */     if (!this.additionalPatterns.isEmpty()) {
/* 112 */       throw noChildrenAllowed();
/*     */     }
/* 114 */     super.setRefid(paramReference);
/*     */   }
/*     */   
/*     */   public void setDir(File paramFile) throws BuildException {
/* 118 */     if (isReference()) {
/* 119 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 122 */     this.dir = paramFile;
/*     */   }
/*     */   
/*     */   public File getDir(Project paramProject) {
/* 126 */     if (isReference()) {
/* 127 */       return getRef(paramProject).getDir(paramProject);
/*     */     }
/* 129 */     return this.dir;
/*     */   }
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 133 */     if (isReference()) {
/* 134 */       throw noChildrenAllowed();
/*     */     }
/* 136 */     PatternSet patternSet = new PatternSet();
/* 137 */     this.additionalPatterns.addElement(patternSet);
/* 138 */     return patternSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 145 */     if (isReference()) {
/* 146 */       throw noChildrenAllowed();
/*     */     }
/* 148 */     return this.defaultPatterns.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createIncludesFile() {
/* 155 */     if (isReference()) {
/* 156 */       throw noChildrenAllowed();
/*     */     }
/* 158 */     return this.defaultPatterns.createIncludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 165 */     if (isReference()) {
/* 166 */       throw noChildrenAllowed();
/*     */     }
/* 168 */     return this.defaultPatterns.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExcludesFile() {
/* 175 */     if (isReference()) {
/* 176 */       throw noChildrenAllowed();
/*     */     }
/* 178 */     return this.defaultPatterns.createExcludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String paramString) {
/* 188 */     if (isReference()) {
/* 189 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 192 */     this.defaultPatterns.setIncludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String paramString) {
/* 202 */     if (isReference()) {
/* 203 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 206 */     this.defaultPatterns.setExcludes(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File paramFile) throws BuildException {
/* 215 */     if (isReference()) {
/* 216 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 219 */     this.defaultPatterns.setIncludesfile(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File paramFile) throws BuildException {
/* 228 */     if (isReference()) {
/* 229 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 232 */     this.defaultPatterns.setExcludesfile(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean paramBoolean) {
/* 243 */     if (isReference()) {
/* 244 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 247 */     this.useDefaultExcludes = paramBoolean;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setCaseSensitive(boolean paramBoolean) { this.isCaseSensitive = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project paramProject) {
/* 264 */     if (isReference()) {
/* 265 */       return getRef(paramProject).getDirectoryScanner(paramProject);
/*     */     }
/*     */     
/* 268 */     if (this.dir == null) {
/* 269 */       throw new BuildException(""No directory specified for fileset."");
/*     */     }
/*     */     
/* 272 */     if (!this.dir.exists()) {
/* 273 */       throw new BuildException(this.dir.getAbsolutePath() + "" not found."");
/*     */     }
/* 275 */     if (!this.dir.isDirectory()) {
/* 276 */       throw new BuildException(this.dir.getAbsolutePath() + "" is not a directory."");
/*     */     }
/*     */     
/* 279 */     DirectoryScanner directoryScanner = new DirectoryScanner();
/* 280 */     setupDirectoryScanner((FileScanner)directoryScanner, paramProject);
/* 281 */     directoryScanner.scan();
/* 282 */     return directoryScanner;
/*     */   }
/*     */   
/*     */   public void setupDirectoryScanner(FileScanner paramFileScanner, Project paramProject) {
/* 286 */     if (paramFileScanner == null) {
/* 287 */       throw new IllegalArgumentException(""ds cannot be null"");
/*     */     }
/*     */     
/* 290 */     paramFileScanner.setBasedir(this.dir);
/*     */     
/* 292 */     for (byte b = 0; b < this.additionalPatterns.size(); b++) {
/* 293 */       PatternSet patternSet = (PatternSet)this.additionalPatterns.elementAt(b);
/* 294 */       this.defaultPatterns.append(patternSet, paramProject);
/*     */     } 
/*     */     
/* 297 */     paramProject.log(""FileSet: Setup file scanner in dir "" + this.dir + "" with "" + this.defaultPatterns, 4);
/*     */ 
/*     */     
/* 300 */     paramFileScanner.setIncludes(this.defaultPatterns.getIncludePatterns(paramProject));
/* 301 */     paramFileScanner.setExcludes(this.defaultPatterns.getExcludePatterns(paramProject));
/* 302 */     if (this.useDefaultExcludes) paramFileScanner.addDefaultExcludes(); 
/* 303 */     paramFileScanner.setCaseSensitive(this.isCaseSensitive);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected FileSet getRef(Project paramProject) {
/* 311 */     if (!this.checked) {
/* 312 */       Stack stack = new Stack();
/* 313 */       stack.push(this);
/* 314 */       dieOnCircularReference(stack, paramProject);
/*     */     } 
/*     */     
/* 317 */     Object object = this.ref.getReferencedObject(paramProject);
/* 318 */     if (!(object instanceof FileSet)) {
/* 319 */       String str = this.ref.getRefId() + "" doesn't denote a fileset"";
/* 320 */       throw new BuildException(str);
/*     */     } 
/* 322 */     return (FileSet)object;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\FileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSet
/*     */   extends DataType
/*     */ {
/*     */   public static final String DEFAULT_TOKEN_START = ""@"";
/*     */   public static final String DEFAULT_TOKEN_END = ""@"";
/*     */   
/*     */   public static class Filter
/*     */   {
/*     */     String token;
/*     */     String value;
/*     */     
/*     */     public Filter(String param1String1, String param1String2) {
/* 102 */       this.token = param1String1;
/* 103 */       this.value = param1String2;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Filter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 118 */     public void setToken(String param1String) { this.token = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 127 */     public void setValue(String param1String) { this.value = param1String; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 136 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 145 */     public String getValue() { return this.value; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public class FiltersFile
/*     */   {
/*     */     private final FilterSet this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 160 */     public FiltersFile(FilterSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 169 */     public void setFile(File param1File) { this.this$0.readFiltersFromFile(param1File); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   private String startOfToken = ""@"";
/* 180 */   private String endOfToken = ""@"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   private Vector filters = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   protected FilterSet(FilterSet paramFilterSet) { this.filters = (Vector)paramFilterSet.getFilters().clone(); }
/*     */ 
/*     */   
/*     */   protected Vector getFilters() {
/* 201 */     if (isReference()) {
/* 202 */       return getRef().getFilters();
/*     */     }
/* 204 */     return this.filters;
/*     */   }
/*     */ 
/*     */   
/* 208 */   protected FilterSet getRef() { return (FilterSet)getCheckedRef(FilterSet.class, ""filterset""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getFilterHash() {
/* 217 */     int i = getFilters().size();
/* 218 */     Hashtable hashtable = new Hashtable(i);
/* 219 */     for (Enumeration enumeration = getFilters().elements(); enumeration.hasMoreElements(); ) {
/* 220 */       Filter filter = enumeration.nextElement();
/* 221 */       hashtable.put(filter.getToken(), filter.getValue());
/*     */     } 
/* 223 */     return hashtable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiltersfile(File paramFile) throws BuildException {
/* 233 */     if (isReference()) {
/* 234 */       throw tooManyAttributes();
/*     */     }
/* 236 */     readFiltersFromFile(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBeginToken(String paramString) {
/* 245 */     if (isReference()) {
/* 246 */       throw tooManyAttributes();
/*     */     }
/* 248 */     this.startOfToken = paramString;
/*     */   }
/*     */   
/*     */   public String getBeginToken() {
/* 252 */     if (isReference()) {
/* 253 */       return getRef().getBeginToken();
/*     */     }
/* 255 */     return this.startOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEndToken(String paramString) {
/* 265 */     if (isReference()) {
/* 266 */       throw tooManyAttributes();
/*     */     }
/* 268 */     this.endOfToken = paramString;
/*     */   }
/*     */   
/*     */   public String getEndToken() {
/* 272 */     if (isReference()) {
/* 273 */       return getRef().getEndToken();
/*     */     }
/* 275 */     return this.endOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void readFiltersFromFile(File paramFile) throws BuildException {
/* 287 */     if (isReference()) {
/* 288 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 291 */     if (paramFile.isFile()) {
/* 292 */       log(""Reading filters from "" + paramFile, 3);
/* 293 */       FileInputStream fileInputStream = null;
/*     */       try {
/* 295 */         Properties properties = new Properties();
/* 296 */         fileInputStream = new FileInputStream(paramFile);
/* 297 */         properties.load(fileInputStream);
/*     */         
/* 299 */         Enumeration enumeration = properties.propertyNames();
/* 300 */         Vector vector = getFilters();
/* 301 */         while (enumeration.hasMoreElements()) {
/* 302 */           String str1 = (String)enumeration.nextElement();
/* 303 */           String str2 = properties.getProperty(str1);
/* 304 */           vector.addElement(new Filter(str1, str2));
/*     */         } 
/*     */       } catch (Exception exception) {
/*     */         
/* 308 */         throw new BuildException(""Could not read filters from file: "" + paramFile);
/*     */       } finally {
/*     */         
/* 311 */         if (fileInputStream != null) {
/*     */           try {
/* 313 */             fileInputStream.close();
/*     */           }
/* 315 */           catch (IOException iOException) {}
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 321 */       throw new BuildException(""Must specify a file not a directory in the filtersfile attribute:"" + paramFile);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String paramString) {
/* 333 */     String str1 = getBeginToken();
/* 334 */     String str2 = getEndToken();
/* 335 */     int i = paramString.indexOf(str1);
/*     */     
/* 337 */     if (i > -1) {
/* 338 */       Hashtable hashtable = getFilterHash();
/*     */       try {
/* 340 */         StringBuffer stringBuffer = new StringBuffer();
/* 341 */         int j = 0;
/* 342 */         String str3 = null;
/* 343 */         String str4 = null;
/*     */         
/*     */         do {
/* 346 */           int k = paramString.indexOf(str2, i + str1.length() + 1);
/* 347 */           if (k == -1) {
/*     */             break;
/*     */           }
/* 350 */           str3 = paramString.substring(i + str1.length(), k);
/* 351 */           stringBuffer.append(paramString.substring(j, i));
/* 352 */           if (hashtable.containsKey(str3)) {
/* 353 */             str4 = (String)hashtable.get(str3);
/* 354 */             log(""Replacing: "" + str1 + str3 + str2 + "" -> "" + str4, 3);
/* 355 */             stringBuffer.append(str4);
/* 356 */             j = i + str1.length() + str3.length() + str2.length();
/*     */           }
/*     */           else {
/*     */             
/* 360 */             stringBuffer.append(str1);
/* 361 */             j = i + str1.length();
/*     */           } 
/* 363 */         } while ((i = paramString.indexOf(str1, j)) > -1);
/*     */         
/* 365 */         stringBuffer.append(paramString.substring(j));
/* 366 */         return stringBuffer.toString();
/*     */       } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {
/*     */         
/* 369 */         return paramString;
/*     */       } 
/*     */     } 
/*     */     
/* 373 */     return paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(Filter paramFilter) {
/* 383 */     if (isReference()) {
/* 384 */       throw noChildrenAllowed();
/*     */     }
/* 386 */     this.filters.addElement(paramFilter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FiltersFile createFiltersfile() {
/* 395 */     if (isReference()) {
/* 396 */       throw noChildrenAllowed();
/*     */     }
/* 398 */     return new FiltersFile(this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(String paramString1, String paramString2) {
/* 408 */     if (isReference()) {
/* 409 */       throw noChildrenAllowed();
/*     */     }
/* 411 */     this.filters.addElement(new Filter(paramString1, paramString2));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilterSet(FilterSet paramFilterSet) {
/* 420 */     if (isReference()) {
/* 421 */       throw noChildrenAllowed();
/*     */     }
/* 423 */     for (Enumeration enumeration = paramFilterSet.getFilters().elements(); enumeration.hasMoreElements();) {
/* 424 */       this.filters.addElement(enumeration.nextElement());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 434 */   public boolean hasFilters() { return (getFilters().size() > 0); }
/*     */   
/*     */   public FilterSet() {}
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\FilterSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSetCollection,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSetCollection
/*     */ {
/*  80 */   private Vector filterSets = new Vector();
/*     */ 
/*     */   
/*     */   public FilterSetCollection() {}
/*     */ 
/*     */   
/*  86 */   public FilterSetCollection(FilterSet paramFilterSet) { addFilterSet(paramFilterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void addFilterSet(FilterSet paramFilterSet) { this.filterSets.addElement(paramFilterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String paramString) {
/* 102 */     String str = paramString;
/* 103 */     for (Enumeration enumeration = this.filterSets.elements(); enumeration.hasMoreElements(); ) {
/* 104 */       FilterSet filterSet = enumeration.nextElement();
/* 105 */       str = filterSet.replaceTokens(str);
/*     */     } 
/* 107 */     return str;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasFilters() {
/* 116 */     for (Enumeration enumeration = this.filterSets.elements(); enumeration.hasMoreElements(); ) {
/* 117 */       FilterSet filterSet = enumeration.nextElement();
/* 118 */       if (filterSet.hasFilters()) {
/* 119 */         return true;
/*     */       }
/*     */     } 
/* 122 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\FilterSetCollection.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Mapper,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Mapper
/*     */   extends DataType
/*     */ {
/*     */   protected Project p;
/*  74 */   protected MapperType type = null;
/*     */   
/*     */   protected String classname;
/*     */   
/*     */   protected Path classpath;
/*     */   
/*     */   protected String from;
/*     */   protected String to;
/*     */   
/*     */   public void setType(MapperType paramMapperType) {
/*  84 */     if (isReference()) {
/*  85 */       throw tooManyAttributes();
/*     */     }
/*  87 */     this.type = paramMapperType;
/*     */   } public void setClassname(String paramString) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*  90 */     this.classname = paramString; } public Mapper(Project paramProject) { this.classname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 102 */     this.classpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 142 */     this.from = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 154 */     this.to = null; this.p = paramProject; }
/*     */   public void setClasspath(Path paramPath) { if (isReference())
/*     */       throw tooManyAttributes();  if (this.classpath == null) {
/*     */       this.classpath = paramPath;
/*     */     } else {
/*     */       this.classpath.append(paramPath);
/* 160 */     }  } public void setTo(String paramString) { if (isReference()) {
/* 161 */       throw tooManyAttributes();
/*     */     }
/* 163 */     this.to = paramString; } public Path createClasspath() { if (isReference())
/*     */       throw noChildrenAllowed();  if (this.classpath == null)
/*     */       this.classpath = new Path(this.p); 
/*     */     return this.classpath.createPath(); }
/*     */   public void setClasspathRef(Reference paramReference) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     createClasspath().setRefid(paramReference); }
/*     */   public void setFrom(String paramString) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     this.from = paramString; }
/* 173 */   public void setRefid(Reference paramReference) throws BuildException { if (this.type != null || this.from != null || this.to != null) {
/* 174 */       throw tooManyAttributes();
/*     */     }
/* 176 */     super.setRefid(paramReference); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileNameMapper getImplementation() throws BuildException {
/* 183 */     if (isReference()) {
/* 184 */       return getRef().getImplementation();
/*     */     }
/*     */     
/* 187 */     if (this.type == null && this.classname == null) {
/* 188 */       throw new BuildException(""one of the attributes type or classname is required"");
/*     */     }
/*     */     
/* 191 */     if (this.type != null && this.classname != null) {
/* 192 */       throw new BuildException(""must not specify both type and classname attribute"");
/*     */     }
/*     */     
/*     */     try {
/* 196 */       if (this.type != null) {
/* 197 */         this.classname = this.type.getImplementation();
/*     */       }
/*     */       
/* 200 */       Class clazz = null;
/* 201 */       if (this.classpath == null) {
/* 202 */         clazz = Class.forName(this.classname);
/*     */       } else {
/* 204 */         AntClassLoader antClassLoader = new AntClassLoader(this.p, this.classpath);
/* 205 */         clazz = antClassLoader.loadClass(this.classname);
/* 206 */         AntClassLoader.initializeClass(clazz);
/*     */       } 
/*     */       
/* 209 */       FileNameMapper fileNameMapper = (FileNameMapper)clazz.newInstance();
/* 210 */       fileNameMapper.setFrom(this.from);
/* 211 */       fileNameMapper.setTo(this.to);
/* 212 */       return fileNameMapper;
/*     */     } catch (BuildException buildException) {
/* 214 */       throw buildException;
/*     */     } catch (Throwable throwable) {
/* 216 */       throw new BuildException(throwable);
/*     */     } finally {
/* 218 */       if (this.type != null) {
/* 219 */         this.classname = null;
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Mapper getRef() {
/* 229 */     if (!this.checked) {
/* 230 */       Stack stack = new Stack();
/* 231 */       stack.push(this);
/* 232 */       dieOnCircularReference(stack, this.p);
/*     */     } 
/*     */     
/* 235 */     Object object = this.ref.getReferencedObject(this.p);
/* 236 */     if (!(object instanceof Mapper)) {
/* 237 */       String str = this.ref.getRefId() + "" doesn't denote a mapper"";
/* 238 */       throw new BuildException(str);
/*     */     } 
/* 240 */     return (Mapper)object;
/*     */   }
/*     */ 
/*     */   
/*     */   public static class MapperType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private Properties implementations;
/*     */ 
/*     */     
/*     */     public MapperType() {
/* 251 */       this.implementations = new Properties();
/* 252 */       this.implementations.put(""identity"", ""org.apache.tools.ant.util.IdentityMapper"");
/*     */       
/* 254 */       this.implementations.put(""flatten"", ""org.apache.tools.ant.util.FlatFileNameMapper"");
/*     */       
/* 256 */       this.implementations.put(""glob"", ""org.apache.tools.ant.util.GlobPatternMapper"");
/*     */       
/* 258 */       this.implementations.put(""merge"", ""org.apache.tools.ant.util.MergingMapper"");
/*     */       
/* 260 */       this.implementations.put(""regexp"", ""org.apache.tools.ant.util.RegexpPatternMapper"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 265 */     public String[] getValues() { return new String[] { ""identity"", ""flatten"", ""glob"", ""merge"", ""regexp"" }; }
/*     */ 
/*     */ 
/*     */     
/* 269 */     public String getImplementation() { return this.implementations.getProperty(getValue()); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Mapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Path,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.PathTokenizer;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Path
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   private Vector elements;
/*     */   private Project project;
/* 104 */   public static Path systemClasspath = new Path(null, System.getProperty(""java.class.path""));
/*     */   
/*     */   public class PathElement
/*     */   {
/*     */     private String[] parts;
/*     */     private final Path this$0;
/*     */     
/* 111 */     public PathElement(Path this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/* 115 */     public void setLocation(File param1File) { this.parts = new String[] { Path.translateFile(param1File.getAbsolutePath()) }; }
/*     */ 
/*     */ 
/*     */     
/* 119 */     public void setPath(String param1String) { this.parts = Path.translatePath(this.this$0.project, param1String); }
/*     */ 
/*     */ 
/*     */     
/* 123 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path(Project paramProject, String paramString) {
/* 132 */     this(paramProject);
/* 133 */     createPathElement().setPath(paramString);
/*     */   }
/*     */   
/*     */   public Path(Project paramProject) {
/* 137 */     this.project = paramProject;
/* 138 */     this.elements = new Vector();
/*     */   }
/*     */ 
/*     */   
/* 142 */   public void setProject(Project paramProject) { this.project = paramProject; }
/*     */   
/* 144 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLocation(File paramFile) throws BuildException {
/* 152 */     if (isReference()) {
/* 153 */       throw tooManyAttributes();
/*     */     }
/* 155 */     createPathElement().setLocation(paramFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPath(String paramString) throws BuildException {
/* 164 */     if (isReference()) {
/* 165 */       throw tooManyAttributes();
/*     */     }
/* 167 */     createPathElement().setPath(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) throws BuildException {
/* 177 */     if (!this.elements.isEmpty()) {
/* 178 */       throw tooManyAttributes();
/*     */     }
/* 180 */     this.elements.addElement(paramReference);
/* 181 */     super.setRefid(paramReference);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PathElement createPathElement() throws BuildException {
/* 188 */     if (isReference()) {
/* 189 */       throw noChildrenAllowed();
/*     */     }
/* 191 */     PathElement pathElement = new PathElement(this);
/* 192 */     this.elements.addElement(pathElement);
/* 193 */     return pathElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFileset(FileSet paramFileSet) throws BuildException {
/* 200 */     if (isReference()) {
/* 201 */       throw noChildrenAllowed();
/*     */     }
/* 203 */     this.elements.addElement(paramFileSet);
/* 204 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() throws BuildException {
/* 211 */     if (isReference()) {
/* 212 */       throw noChildrenAllowed();
/*     */     }
/* 214 */     Path path = new Path(this.project);
/* 215 */     this.elements.addElement(path);
/* 216 */     this.checked = false;
/* 217 */     return path;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(Path paramPath) {
/* 224 */     if (paramPath == null)
/* 225 */       return;  String[] arrayOfString = paramPath.list();
/* 226 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 227 */       if (this.elements.indexOf(arrayOfString[b]) == -1) {
/* 228 */         this.elements.addElement(arrayOfString[b]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addExisting(Path paramPath) {
/* 240 */     String[] arrayOfString = paramPath.list();
/* 241 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 242 */       File file = null;
/* 243 */       if (this.project != null) {
/* 244 */         file = this.project.resolveFile(arrayOfString[b]);
/*     */       } else {
/*     */         
/* 247 */         file = new File(arrayOfString[b]);
/*     */       } 
/*     */       
/* 250 */       if (file.exists()) {
/* 251 */         setLocation(file);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] list() {
/* 261 */     if (!this.checked) {
/*     */       
/* 263 */       Stack stack = new Stack();
/* 264 */       stack.push(this);
/* 265 */       dieOnCircularReference(stack, this.project);
/*     */     } 
/*     */     
/* 268 */     Vector vector = new Vector(2 * this.elements.size());
/* 269 */     for (byte b = 0; b < this.elements.size(); b++) {
/* 270 */       Object object = this.elements.elementAt(b);
/* 271 */       if (object instanceof Reference) {
/* 272 */         Reference reference = (Reference)object;
/* 273 */         object = reference.getReferencedObject(this.project);
/*     */         
/* 275 */         if (!(object instanceof Path)) {
/* 276 */           String str = reference.getRefId() + "" doesn't denote a path"";
/* 277 */           throw new BuildException(str);
/*     */         } 
/*     */       } 
/*     */       
/* 281 */       if (object instanceof String) {
/*     */         
/* 283 */         addUnlessPresent(vector, (String)object);
/* 284 */       } else if (object instanceof PathElement) {
/* 285 */         String[] arrayOfString1 = ((PathElement)object).getParts();
/* 286 */         if (arrayOfString1 == null) {
/* 287 */           throw new BuildException(""You must either set location or path on <pathelement>"");
/*     */         }
/* 289 */         for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 290 */           addUnlessPresent(vector, arrayOfString1[b1]);
/*     */         }
/* 292 */       } else if (object instanceof Path) {
/* 293 */         Path path = (Path)object;
/* 294 */         if (path.getProject() == null) {
/* 295 */           path.setProject(this.project);
/*     */         }
/* 297 */         String[] arrayOfString1 = path.list();
/* 298 */         for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 299 */           addUnlessPresent(vector, arrayOfString1[b1]);
/*     */         }
/* 301 */       } else if (object instanceof FileSet) {
/* 302 */         FileSet fileSet = (FileSet)object;
/* 303 */         DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(this.project);
/* 304 */         String[] arrayOfString1 = directoryScanner.getIncludedFiles();
/* 305 */         File file = fileSet.getDir(this.project);
/* 306 */         for (byte b1 = 0; b1 < arrayOfString1.length; b1++) {
/* 307 */           File file1 = new File(file, arrayOfString1[b1]);
/* 308 */           String str = file1.getAbsolutePath();
/* 309 */           addUnlessPresent(vector, translateFile(str));
/*     */         } 
/*     */       } 
/*     */     } 
/* 313 */     String[] arrayOfString = new String[vector.size()];
/* 314 */     vector.copyInto((Object[])arrayOfString);
/* 315 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 325 */     String[] arrayOfString = list();
/*     */ 
/*     */     
/* 328 */     if (arrayOfString.length == 0) return """";
/*     */ 
/*     */     
/* 331 */     StringBuffer stringBuffer = new StringBuffer(arrayOfString[0].toString());
/* 332 */     for (byte b = 1; b < arrayOfString.length; b++) {
/* 333 */       stringBuffer.append(File.pathSeparatorChar);
/* 334 */       stringBuffer.append(arrayOfString[b]);
/*     */     } 
/*     */     
/* 337 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String[] translatePath(Project paramProject, String paramString) {
/* 344 */     Vector vector = new Vector();
/* 345 */     if (paramString == null) return new String[0];
/*     */     
/* 347 */     PathTokenizer pathTokenizer = new PathTokenizer(paramString);
/* 348 */     StringBuffer stringBuffer = new StringBuffer();
/* 349 */     while (pathTokenizer.hasMoreTokens()) {
/* 350 */       stringBuffer.setLength(0);
/* 351 */       String str = pathTokenizer.nextToken();
/*     */       try {
/* 353 */         stringBuffer.append(resolveFile(paramProject, str));
/*     */       } catch (BuildException buildException) {
/*     */         
/* 356 */         paramProject.log(""Dropping path element "" + str + "" as it is not valid relative to the project"", 3);
/*     */       } 
/*     */       
/* 359 */       for (byte b = 0; b < stringBuffer.length(); b++) {
/* 360 */         translateFileSep(stringBuffer, b);
/*     */       }
/* 362 */       vector.addElement(stringBuffer.toString());
/*     */     } 
/* 364 */     String[] arrayOfString = new String[vector.size()];
/* 365 */     vector.copyInto((Object[])arrayOfString);
/* 366 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String translateFile(String paramString) {
/* 374 */     if (paramString == null) return """";
/*     */     
/* 376 */     StringBuffer stringBuffer = new StringBuffer(paramString);
/* 377 */     for (byte b = 0; b < stringBuffer.length(); b++) {
/* 378 */       translateFileSep(stringBuffer, b);
/*     */     }
/*     */     
/* 381 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static boolean translateFileSep(StringBuffer paramStringBuffer, int paramInt) {
/* 390 */     if (paramStringBuffer.charAt(paramInt) == '/' || paramStringBuffer.charAt(paramInt) == '\\') {
/* 391 */       paramStringBuffer.setCharAt(paramInt, File.separatorChar);
/* 392 */       return true;
/*     */     } 
/* 394 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 401 */   public int size() { return (list()).length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 408 */     Path path = new Path(this.project);
/* 409 */     path.append(this);
/* 410 */     return path;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack paramStack, Project paramProject) throws BuildException {
/* 420 */     if (this.checked) {
/*     */       return;
/*     */     }
/*     */     
/* 424 */     Enumeration enumeration = this.elements.elements();
/* 425 */     while (enumeration.hasMoreElements()) {
/* 426 */       Object object = enumeration.nextElement();
/* 427 */       if (object instanceof Reference) {
/* 428 */         object = ((Reference)object).getReferencedObject(paramProject);
/*     */       }
/*     */       
/* 431 */       if (object instanceof DataType) {
/* 432 */         if (paramStack.contains(object)) {
/* 433 */           throw circularReference();
/*     */         }
/* 435 */         paramStack.push(object);
/* 436 */         ((DataType)object).dieOnCircularReference(paramStack, paramProject);
/* 437 */         paramStack.pop();
/*     */       } 
/*     */     } 
/*     */     
/* 441 */     this.checked = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String resolveFile(Project paramProject, String paramString) {
/* 450 */     if (paramProject != null) {
/* 451 */       File file = paramProject.resolveFile(paramString);
/* 452 */       return file.getAbsolutePath();
/*     */     } 
/* 454 */     return paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addUnlessPresent(Vector paramVector, String paramString) {
/* 461 */     if (paramVector.indexOf(paramString) == -1) {
/* 462 */       paramVector.addElement(paramString);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 472 */   public Path concatSystemClasspath() { return concatSystemClasspath(""last""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path concatSystemClasspath(String paramString) {
/* 482 */     Path path = new Path(this.project);
/*     */     
/* 484 */     String str = paramString;
/* 485 */     if (this.project != null) {
/* 486 */       String str1 = this.project.getProperty(""build.sysclasspath"");
/* 487 */       if (str1 != null) {
/* 488 */         str = str1;
/*     */       }
/*     */     } 
/*     */     
/* 492 */     if (str.equals(""only"")) {
/*     */       
/* 494 */       path.addExisting(systemClasspath);
/*     */     }
/* 496 */     else if (str.equals(""first"")) {
/*     */       
/* 498 */       path.addExisting(systemClasspath);
/* 499 */       path.addExisting(this);
/*     */     }
/* 501 */     else if (str.equals(""ignore"")) {
/*     */       
/* 503 */       path.addExisting(this);
/*     */     }
/*     */     else {
/*     */       
/* 507 */       if (!str.equals(""last"")) {
/* 508 */         this.project.log(""invalid value for build.sysclasspath: "" + str, 1);
/*     */       }
/*     */ 
/*     */       
/* 512 */       path.addExisting(this);
/* 513 */       path.addExisting(systemClasspath);
/*     */     } 
/*     */ 
/*     */     
/* 517 */     return path;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Path.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.PatternSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PatternSet
/*     */   extends DataType
/*     */ {
/*  80 */   private Vector includeList = new Vector();
/*  81 */   private Vector excludeList = new Vector();
/*  82 */   private Vector includesFileList = new Vector();
/*  83 */   private Vector excludesFileList = new Vector();
/*     */   
/*     */   public class NameEntry
/*     */   {
/*     */     private String name;
/*     */     private String ifCond;
/*     */     
/*  90 */     public NameEntry(PatternSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */     
/*     */     private String unlessCond;
/*     */     private final PatternSet this$0;
/*     */     
/*  96 */     public void setName(String param1String) { this.name = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 100 */     public void setIf(String param1String) { this.ifCond = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 104 */     public void setUnless(String param1String) { this.unlessCond = param1String; }
/*     */ 
/*     */ 
/*     */     
/* 108 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 112 */     public String evalName(Project param1Project) { return valid(param1Project) ? this.name : null; }
/*     */ 
/*     */     
/*     */     private boolean valid(Project param1Project) {
/* 116 */       if (this.ifCond != null && param1Project.getProperty(this.ifCond) == null)
/* 117 */         return false; 
/* 118 */       if (this.unlessCond != null && param1Project.getProperty(this.unlessCond) != null) {
/* 119 */         return false;
/*     */       }
/* 121 */       return true;
/*     */     }
/*     */     
/*     */     public String toString() {
/* 125 */       StringBuffer stringBuffer = new StringBuffer(this.name);
/* 126 */       if (this.ifCond != null || this.unlessCond != null) {
/* 127 */         stringBuffer.append("":"");
/* 128 */         String str = """";
/*     */         
/* 130 */         if (this.ifCond != null) {
/* 131 */           stringBuffer.append(""if->"");
/* 132 */           stringBuffer.append(this.ifCond);
/* 133 */           str = "";"";
/*     */         } 
/* 135 */         if (this.unlessCond != null) {
/* 136 */           stringBuffer.append(str);
/* 137 */           stringBuffer.append(""unless->"");
/* 138 */           stringBuffer.append(this.unlessCond);
/*     */         } 
/*     */       } 
/*     */       
/* 142 */       return stringBuffer.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference paramReference) throws BuildException {
/* 158 */     if (!this.includeList.isEmpty() || !this.excludeList.isEmpty()) {
/* 159 */       throw tooManyAttributes();
/*     */     }
/* 161 */     super.setRefid(paramReference);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createInclude() {
/* 168 */     if (isReference()) {
/* 169 */       throw noChildrenAllowed();
/*     */     }
/* 171 */     return addPatternToList(this.includeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createIncludesFile() {
/* 178 */     if (isReference()) {
/* 179 */       throw noChildrenAllowed();
/*     */     }
/* 181 */     return addPatternToList(this.includesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExclude() {
/* 188 */     if (isReference()) {
/* 189 */       throw noChildrenAllowed();
/*     */     }
/* 191 */     return addPatternToList(this.excludeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExcludesFile() {
/* 198 */     if (isReference()) {
/* 199 */       throw noChildrenAllowed();
/*     */     }
/* 201 */     return addPatternToList(this.excludesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String paramString) {
/* 211 */     if (isReference()) {
/* 212 */       throw tooManyAttributes();
/*     */     }
/* 214 */     if (paramString != null && paramString.length() > 0) {
/* 215 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", "", false);
/* 216 */       while (stringTokenizer.hasMoreTokens()) {
/* 217 */         createInclude().setName(stringTokenizer.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String paramString) {
/* 229 */     if (isReference()) {
/* 230 */       throw tooManyAttributes();
/*     */     }
/* 232 */     if (paramString != null && paramString.length() > 0) {
/* 233 */       StringTokenizer stringTokenizer = new StringTokenizer(paramString, "", "", false);
/* 234 */       while (stringTokenizer.hasMoreTokens()) {
/* 235 */         createExclude().setName(stringTokenizer.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private NameEntry addPatternToList(Vector paramVector) {
/* 244 */     NameEntry nameEntry = new NameEntry(this);
/* 245 */     paramVector.addElement(nameEntry);
/* 246 */     return nameEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File paramFile) throws BuildException {
/* 255 */     if (isReference()) {
/* 256 */       throw tooManyAttributes();
/*     */     }
/* 258 */     createIncludesFile().setName(paramFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File paramFile) throws BuildException {
/* 267 */     if (isReference()) {
/* 268 */       throw tooManyAttributes();
/*     */     }
/* 270 */     createExcludesFile().setName(paramFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readPatterns(File paramFile, Vector paramVector, Project paramProject) throws BuildException {
/*     */     try {
/* 282 */       BufferedReader bufferedReader = new BufferedReader(new FileReader(paramFile));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 287 */       String str = bufferedReader.readLine();
/* 288 */       while (str != null) {
/* 289 */         if (str.length() > 0) {
/* 290 */           str = ProjectHelper.replaceProperties(paramProject, str, paramProject.getProperties());
/*     */           
/* 292 */           addPatternToList(paramVector).setName(str);
/*     */         } 
/* 294 */         str = bufferedReader.readLine();
/*     */       } 
/*     */     } catch (IOException iOException) {
/* 297 */       String str = ""An error occured while reading from pattern file: "" + paramFile;
/*     */       
/* 299 */       throw new BuildException(str, iOException);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(PatternSet paramPatternSet, Project paramProject) {
/* 307 */     if (isReference()) {
/* 308 */       throw new BuildException(""Cannot append to a reference"");
/*     */     }
/*     */     
/* 311 */     String[] arrayOfString1 = paramPatternSet.getIncludePatterns(paramProject);
/* 312 */     if (arrayOfString1 != null) {
/* 313 */       for (byte b = 0; b < arrayOfString1.length; b++) {
/* 314 */         createInclude().setName(arrayOfString1[b]);
/*     */       }
/*     */     }
/*     */     
/* 318 */     String[] arrayOfString2 = paramPatternSet.getExcludePatterns(paramProject);
/* 319 */     if (arrayOfString2 != null) {
/* 320 */       for (byte b = 0; b < arrayOfString2.length; b++) {
/* 321 */         createExclude().setName(arrayOfString2[b]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludePatterns(Project paramProject) {
/* 330 */     if (isReference()) {
/* 331 */       return getRef(paramProject).getIncludePatterns(paramProject);
/*     */     }
/* 333 */     readFiles(paramProject);
/* 334 */     return makeArray(this.includeList, paramProject);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getExcludePatterns(Project paramProject) {
/* 342 */     if (isReference()) {
/* 343 */       return getRef(paramProject).getExcludePatterns(paramProject);
/*     */     }
/* 345 */     readFiles(paramProject);
/* 346 */     return makeArray(this.excludeList, paramProject);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 354 */   boolean hasPatterns() { return (this.includesFileList.size() > 0 || this.excludesFileList.size() > 0 || this.includeList.size() > 0 || this.excludeList.size() > 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private PatternSet getRef(Project paramProject) {
/* 363 */     if (!this.checked) {
/* 364 */       Stack stack = new Stack();
/* 365 */       stack.push(this);
/* 366 */       dieOnCircularReference(stack, paramProject);
/*     */     } 
/*     */     
/* 369 */     Object object = this.ref.getReferencedObject(paramProject);
/* 370 */     if (!(object instanceof PatternSet)) {
/* 371 */       String str = this.ref.getRefId() + "" doesn't denote a patternset"";
/* 372 */       throw new BuildException(str);
/*     */     } 
/* 374 */     return (PatternSet)object;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String[] makeArray(Vector paramVector, Project paramProject) {
/* 382 */     if (paramVector.size() == 0) return null;
/*     */     
/* 384 */     Vector vector = new Vector();
/* 385 */     for (Enumeration enumeration = paramVector.elements(); enumeration.hasMoreElements(); ) {
/* 386 */       NameEntry nameEntry = enumeration.nextElement();
/* 387 */       String str = nameEntry.evalName(paramProject);
/* 388 */       if (str != null && str.length() > 0) {
/* 389 */         vector.addElement(str);
/*     */       }
/*     */     } 
/*     */     
/* 393 */     String[] arrayOfString = new String[vector.size()];
/* 394 */     vector.copyInto((Object[])arrayOfString);
/* 395 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readFiles(Project paramProject) {
/* 402 */     if (this.includesFileList.size() > 0) {
/* 403 */       Enumeration enumeration = this.includesFileList.elements();
/* 404 */       while (enumeration.hasMoreElements()) {
/* 405 */         NameEntry nameEntry = enumeration.nextElement();
/* 406 */         String str = nameEntry.evalName(paramProject);
/* 407 */         if (str != null) {
/* 408 */           File file = paramProject.resolveFile(str);
/* 409 */           if (!file.exists()) {
/* 410 */             throw new BuildException(""Includesfile "" + file.getAbsolutePath() + "" not found."");
/*     */           }
/*     */           
/* 413 */           readPatterns(file, this.includeList, paramProject);
/*     */         } 
/*     */       } 
/* 416 */       this.includesFileList.removeAllElements();
/*     */     } 
/*     */     
/* 419 */     if (this.excludesFileList.size() > 0) {
/* 420 */       Enumeration enumeration = this.excludesFileList.elements();
/* 421 */       while (enumeration.hasMoreElements()) {
/* 422 */         NameEntry nameEntry = enumeration.nextElement();
/* 423 */         String str = nameEntry.evalName(paramProject);
/* 424 */         if (str != null) {
/* 425 */           File file = paramProject.resolveFile(str);
/* 426 */           if (!file.exists()) {
/* 427 */             throw new BuildException(""Excludesfile "" + file.getAbsolutePath() + "" not found."");
/*     */           }
/*     */           
/* 430 */           readPatterns(file, this.excludeList, paramProject);
/*     */         } 
/*     */       } 
/* 433 */       this.excludesFileList.removeAllElements();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 439 */   public String toString() { return ""patternSet{ includes: "" + this.includeList + "" excludes: "" + this.excludeList + "" }""; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\PatternSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Reference,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Project;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Reference
/*    */ {
/*    */   private String refid;
/*    */   
/*    */   public Reference() {}
/*    */   
/*    */   public Reference(String paramString) {
/* 74 */     this();
/* 75 */     setRefId(paramString);
/*    */   }
/*    */ 
/*    */   
/* 79 */   public void setRefId(String paramString) { this.refid = paramString; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public String getRefId() { return this.refid; }
/*    */ 
/*    */   
/*    */   public Object getReferencedObject(Project paramProject) throws BuildException {
/* 87 */     if (this.refid == null) {
/* 88 */       throw new BuildException(""No reference specified"");
/*    */     }
/*    */     
/* 91 */     Object object = paramProject.getReferences().get(this.refid);
/* 92 */     if (object == null) {
/* 93 */       throw new BuildException(""Reference "" + this.refid + "" not found."");
/*    */     }
/* 95 */     return object;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\Reference.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipFileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipFileSet
/*     */   extends FileSet
/*     */ {
/*  82 */   private File srcFile = null;
/*  83 */   private String prefix = """";
/*  84 */   private String fullpath = """";
/*     */ 
/*     */   
/*     */   private boolean hasDir = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDir(File paramFile) throws BuildException {
/*  92 */     if (this.srcFile != null) {
/*  93 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/*  95 */     super.setDir(paramFile);
/*  96 */     this.hasDir = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrc(File paramFile) {
/* 107 */     if (this.hasDir) {
/* 108 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/* 110 */     this.srcFile = paramFile;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public File getSrc() { return this.srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setPrefix(String paramString) { this.prefix = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setFullpath(String paramString) { this.fullpath = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public String getFullpath() { return this.fullpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project paramProject) {
/* 162 */     if (isReference()) {
/* 163 */       return getRef(paramProject).getDirectoryScanner(paramProject);
/*     */     }
/* 165 */     if (this.srcFile != null) {
/* 166 */       ZipScanner zipScanner = new ZipScanner();
/* 167 */       zipScanner.setSrc(this.srcFile);
/* 168 */       super.setDir(paramProject.getBaseDir());
/* 169 */       setupDirectoryScanner((FileScanner)zipScanner, paramProject);
/* 170 */       zipScanner.init();
/* 171 */       return zipScanner;
/*     */     } 
/* 173 */     return super.getDirectoryScanner(paramProject);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\ZipFileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipScanner,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipScanner
/*     */   extends DirectoryScanner
/*     */ {
/*     */   protected File srcFile;
/*     */   
/*  86 */   public void setSrc(File paramFile) { this.srcFile = paramFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedFiles() {
/*  97 */     String[] arrayOfString = new String[1];
/*  98 */     arrayOfString[0] = this.srcFile.getAbsolutePath();
/*  99 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public String[] getIncludedDirectories() { return new String[0]; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 113 */     if (this.includes == null) {
/*     */       
/* 115 */       this.includes = new String[1];
/* 116 */       this.includes[0] = ""**"";
/*     */     } 
/* 118 */     if (this.excludes == null) {
/* 119 */       this.excludes = new String[0];
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean match(String paramString) {
/* 133 */     String str = paramString.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     
/* 135 */     return (isIncluded(str) && !isExcluded(str));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\ant\types\ZipScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.DOMElementWriter,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Writer;
/*     */ import org.w3c.dom.Attr;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.NamedNodeMap;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.w3c.dom.Text;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DOMElementWriter
/*     */ {
/*  74 */   private static String lSep = System.getProperty(""line.separator"");
/*  75 */   private StringBuffer sb = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   protected String[] knownEntities = new String[] { ""gt"", ""amp"", ""lt"", ""apos"", ""quot"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(Element paramElement, Writer paramWriter, int paramInt, String paramString) throws IOException {
/*  97 */     for (byte b1 = 0; b1 < paramInt; b1++) {
/*  98 */       paramWriter.write(paramString);
/*     */     }
/*     */ 
/*     */     
/* 102 */     paramWriter.write(""<"");
/* 103 */     paramWriter.write(paramElement.getTagName());
/*     */ 
/*     */     
/* 106 */     NamedNodeMap namedNodeMap = paramElement.getAttributes();
/* 107 */     for (byte b2 = 0; b2 < namedNodeMap.getLength(); b2++) {
/* 108 */       Attr attr = (Attr)namedNodeMap.item(b2);
/* 109 */       paramWriter.write("" "");
/* 110 */       paramWriter.write(attr.getName());
/* 111 */       paramWriter.write(""=\"""");
/* 112 */       paramWriter.write(encode(attr.getValue()));
/* 113 */       paramWriter.write(""\"""");
/*     */     } 
/* 115 */     paramWriter.write("">"");
/*     */ 
/*     */     
/* 118 */     boolean bool = false;
/* 119 */     NodeList nodeList = paramElement.getChildNodes();
/* 120 */     for (byte b3 = 0; b3 < nodeList.getLength(); b3++) {
/* 121 */       String str; Node node = nodeList.item(b3);
/*     */       
/* 123 */       switch (node.getNodeType()) {
/*     */         
/*     */         case 1:
/* 126 */           if (!bool) {
/* 127 */             paramWriter.write(lSep);
/* 128 */             bool = true;
/*     */           } 
/* 130 */           write((Element)node, paramWriter, paramInt + 1, paramString);
/*     */           break;
/*     */         
/*     */         case 3:
/* 134 */           paramWriter.write(encode(node.getNodeValue()));
/*     */           break;
/*     */         
/*     */         case 4:
/* 138 */           paramWriter.write(""<![CDATA["");
/* 139 */           paramWriter.write(((Text)node).getData());
/* 140 */           paramWriter.write(""]]>"");
/*     */           break;
/*     */         
/*     */         case 5:
/* 144 */           paramWriter.write(38);
/* 145 */           paramWriter.write(node.getNodeName());
/* 146 */           paramWriter.write(59);
/*     */           break;
/*     */         
/*     */         case 7:
/* 150 */           paramWriter.write(""<?"");
/* 151 */           paramWriter.write(node.getNodeName());
/* 152 */           str = node.getNodeValue();
/* 153 */           if (str != null && str.length() > 0) {
/* 154 */             paramWriter.write(32);
/* 155 */             paramWriter.write(str);
/*     */           } 
/* 157 */           paramWriter.write(""?>"");
/*     */           break;
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     } 
/* 165 */     if (bool) {
/* 166 */       for (byte b = 0; b < paramInt; b++) {
/* 167 */         paramWriter.write(paramString);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 172 */     paramWriter.write(""</"");
/* 173 */     paramWriter.write(paramElement.getTagName());
/* 174 */     paramWriter.write("">"");
/* 175 */     paramWriter.write(lSep);
/* 176 */     paramWriter.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encode(String paramString) {
/* 183 */     this.sb.setLength(0);
/* 184 */     for (byte b = 0; b < paramString.length(); b++) {
/* 185 */       int i; char c = paramString.charAt(b);
/* 186 */       switch (c) {
/*     */         case '<':
/* 188 */           this.sb.append(""&lt;"");
/*     */           break;
/*     */         case '>':
/* 191 */           this.sb.append(""&gt;"");
/*     */           break;
/*     */         case '\'':
/* 194 */           this.sb.append(""&apos;"");
/*     */           break;
/*     */         case '""':
/* 197 */           this.sb.append(""&quot;"");
/*     */           break;
/*     */         case '&':
/* 200 */           i = paramString.indexOf("";"", b);
/* 201 */           if (i < 0 || !isReference(paramString.substring(b, i + 1))) {
/*     */             
/* 203 */             this.sb.append(""&amp;""); break;
/*     */           } 
/* 205 */           this.sb.append('&');
/*     */           break;
/*     */         
/*     */         default:
/* 209 */           this.sb.append(c);
/*     */           break;
/*     */       } 
/*     */     } 
/* 213 */     return this.sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isReference(String paramString) {
/* 220 */     if (paramString.charAt(0) != '&' || !paramString.endsWith("";"")) {
/* 221 */       return false;
/*     */     }
/*     */     
/* 224 */     if (paramString.charAt(1) == '#') {
/* 225 */       if (paramString.charAt(2) == 'x') {
/*     */         try {
/* 227 */           Integer.parseInt(paramString.substring(3, paramString.length() - 1), 16);
/* 228 */           return true;
/*     */         } catch (NumberFormatException numberFormatException) {
/* 230 */           return false;
/*     */         } 
/*     */       }
/*     */       try {
/* 234 */         Integer.parseInt(paramString.substring(2, paramString.length() - 1));
/* 235 */         return true;
/*     */       } catch (NumberFormatException numberFormatException) {
/* 237 */         return false;
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 242 */     String str = paramString.substring(1, paramString.length() - 1);
/* 243 */     for (byte b = 0; b < this.knownEntities.length; b++) {
/* 244 */       if (str.equals(this.knownEntities[b])) {
/* 245 */         return true;
/*     */       }
/*     */     } 
/* 248 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\DOMElementWriter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileNameMapper,"package org.apache.tools.ant.util;
public interface FileNameMapper {
  void setFrom(String paramString);
  void setTo(String paramString);
  String[] mapFileName(String paramString);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\FileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileUtils
/*     */ {
/*  78 */   private static Object lockReflection = new Object();
/*  79 */   private static Method setLastModified = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  85 */   public static FileUtils newFileUtils() { return new FileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void copyFile(String paramString1, String paramString2) throws IOException { copyFile(new File(paramString1), new File(paramString2), null, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void copyFile(String paramString1, String paramString2, FilterSetCollection paramFilterSetCollection) throws IOException { copyFile(new File(paramString1), new File(paramString2), paramFilterSetCollection, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void copyFile(String paramString1, String paramString2, FilterSetCollection paramFilterSetCollection, boolean paramBoolean) throws IOException { copyFile(new File(paramString1), new File(paramString2), paramFilterSetCollection, paramBoolean, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void copyFile(String paramString1, String paramString2, FilterSetCollection paramFilterSetCollection, boolean paramBoolean1, boolean paramBoolean2) throws IOException { copyFile(new File(paramString1), new File(paramString2), paramFilterSetCollection, paramBoolean1, paramBoolean2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void copyFile(File paramFile1, File paramFile2) throws IOException { copyFile(paramFile1, paramFile2, null, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void copyFile(File paramFile1, File paramFile2, FilterSetCollection paramFilterSetCollection) throws IOException { copyFile(paramFile1, paramFile2, paramFilterSetCollection, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void copyFile(File paramFile1, File paramFile2, FilterSetCollection paramFilterSetCollection, boolean paramBoolean) throws IOException { copyFile(paramFile1, paramFile2, paramFilterSetCollection, paramBoolean, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyFile(File paramFile1, File paramFile2, FilterSetCollection paramFilterSetCollection, boolean paramBoolean1, boolean paramBoolean2) throws IOException {
/* 190 */     if (paramBoolean1 || !paramFile2.exists() || paramFile2.lastModified() < paramFile1.lastModified()) {
/*     */ 
/*     */       
/* 193 */       if (paramFile2.exists() && paramFile2.isFile()) {
/* 194 */         paramFile2.delete();
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 199 */       File file = new File(paramFile2.getParent());
/* 200 */       if (!file.exists()) {
/* 201 */         file.mkdirs();
/*     */       }
/*     */       
/* 204 */       if (paramFilterSetCollection != null && paramFilterSetCollection.hasFilters()) {
/* 205 */         BufferedReader bufferedReader = new BufferedReader(new FileReader(paramFile1));
/* 206 */         BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(paramFile2));
/*     */ 
/*     */         
/* 209 */         String str1 = null;
/* 210 */         String str2 = bufferedReader.readLine();
/* 211 */         while (str2 != null) {
/* 212 */           if (str2.length() == 0) {
/* 213 */             bufferedWriter.newLine();
/*     */           } else {
/* 215 */             str1 = paramFilterSetCollection.replaceTokens(str2);
/* 216 */             bufferedWriter.write(str1);
/* 217 */             bufferedWriter.newLine();
/*     */           } 
/* 219 */           str2 = bufferedReader.readLine();
/*     */         } 
/*     */         
/* 222 */         bufferedWriter.close();
/* 223 */         bufferedReader.close();
/*     */       } else {
/* 225 */         FileInputStream fileInputStream = new FileInputStream(paramFile1);
/* 226 */         FileOutputStream fileOutputStream = new FileOutputStream(paramFile2);
/*     */         
/* 228 */         byte[] arrayOfByte = new byte[8192];
/* 229 */         int i = 0;
/*     */         do {
/* 231 */           fileOutputStream.write(arrayOfByte, 0, i);
/* 232 */           i = fileInputStream.read(arrayOfByte, 0, arrayOfByte.length);
/* 233 */         } while (i != -1);
/*     */         
/* 235 */         fileInputStream.close();
/* 236 */         fileOutputStream.close();
/*     */       } 
/*     */       
/* 239 */       if (paramBoolean2) {
/* 240 */         setFileLastModified(paramFile2, paramFile1.lastModified());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final Method getSetLastModified() {
/* 249 */     if (Project.getJavaVersion() == ""1.1"") {
/* 250 */       return null;
/*     */     }
/* 252 */     if (setLastModified == null) {
/* 253 */       synchronized (lockReflection) {
/* 254 */         if (setLastModified == null) {
/*     */           try {
/* 256 */             setLastModified = File.class.getMethod(""setLastModified"", new Class[] { long.class });
/*     */           }
/*     */           catch (NoSuchMethodException noSuchMethodException) {
/*     */             
/* 260 */             throw new BuildException(""File.setlastModified not in JDK > 1.1?"", noSuchMethodException);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 266 */     return setLastModified;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFileLastModified(File paramFile, long paramLong) throws BuildException {
/* 273 */     if (Project.getJavaVersion() == ""1.1"") {
/*     */       return;
/*     */     }
/* 276 */     Long[] arrayOfLong = new Long[1];
/* 277 */     if (paramLong < 0L) {
/* 278 */       arrayOfLong[0] = new Long(System.currentTimeMillis());
/*     */     } else {
/* 280 */       arrayOfLong[0] = new Long(paramLong);
/*     */     } 
/*     */     
/*     */     try {
/* 284 */       getSetLastModified().invoke(paramFile, (Object[])arrayOfLong);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 286 */       Throwable throwable = invocationTargetException.getTargetException();
/* 287 */       throw new BuildException(""Exception setting the modification time of "" + paramFile, throwable);
/*     */     } catch (Throwable throwable) {
/*     */       
/* 290 */       throw new BuildException(""Exception setting the modification time of "" + paramFile, throwable);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File resolveFile(File paramFile, String paramString) {
/* 310 */     paramString = paramString.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */ 
/*     */ 
/*     */     
/* 314 */     if (paramString.startsWith(File.separator) || (paramString.length() >= 2 && Character.isLetter(paramString.charAt(0)) && paramString.charAt(1) == ':'))
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 321 */       return normalize(paramString);
/*     */     }
/*     */     
/* 324 */     if (paramString.length() >= 2 && Character.isLetter(paramString.charAt(0)) && paramString.charAt(1) == ':')
/*     */     {
/*     */       
/* 327 */       return normalize(paramString);
/*     */     }
/*     */     
/* 330 */     File file = new File(paramFile.getAbsolutePath());
/* 331 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, File.separator);
/* 332 */     while (stringTokenizer.hasMoreTokens()) {
/* 333 */       String str = stringTokenizer.nextToken();
/* 334 */       if (str.equals("".."")) {
/* 335 */         String str1 = file.getParent();
/* 336 */         if (str1 == null) {
/* 337 */           String str2 = ""The file or path you specified ("" + paramString + "") is invalid relative to "" + paramFile.getPath();
/*     */ 
/*     */           
/* 340 */           throw new BuildException(str2);
/*     */         } 
/* 342 */         file = new File(str1); continue;
/* 343 */       }  if (str.equals(""."")) {
/*     */         continue;
/*     */       }
/* 346 */       file = new File(file, str);
/*     */     } 
/*     */ 
/*     */     
/* 350 */     return new File(file.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File normalize(String paramString) {
/* 366 */     String str1 = paramString;
/*     */     
/* 368 */     paramString = paramString.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */ 
/*     */ 
/*     */     
/* 372 */     if (!paramString.startsWith(File.separator) && (paramString.length() < 2 || !Character.isLetter(paramString.charAt(0)) || paramString.charAt(1) != ':')) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 377 */       String str = paramString + "" is not an absolute path"";
/* 378 */       throw new BuildException(str);
/*     */     } 
/*     */     
/* 381 */     boolean bool = false;
/* 382 */     String str2 = null;
/*     */     
/* 384 */     if (paramString.length() >= 2 && Character.isLetter(paramString.charAt(0)) && paramString.charAt(1) == ':') {
/*     */ 
/*     */ 
/*     */       
/* 388 */       bool = true;
/*     */       
/* 390 */       char[] arrayOfChar = paramString.replace('/', '\\').toCharArray();
/* 391 */       StringBuffer stringBuffer1 = new StringBuffer();
/* 392 */       stringBuffer1.append(Character.toUpperCase(arrayOfChar[0])).append(':');
/*     */       
/* 394 */       for (byte b1 = 2; b1 < arrayOfChar.length; b1++) {
/* 395 */         if (arrayOfChar[b1] != '\\' || (arrayOfChar[b1] == '\\' && arrayOfChar[b1 - 1] != '\\'))
/*     */         {
/*     */           
/* 398 */           stringBuffer1.append(arrayOfChar[b1]);
/*     */         }
/*     */       } 
/*     */       
/* 402 */       paramString = stringBuffer1.toString().replace('\\', File.separatorChar);
/* 403 */       if (paramString.length() == 2) {
/* 404 */         str2 = paramString;
/* 405 */         paramString = """";
/*     */       } else {
/* 407 */         str2 = paramString.substring(0, 3);
/* 408 */         paramString = paramString.substring(3);
/*     */       }
/*     */     
/*     */     }
/* 412 */     else if (paramString.length() == 1) {
/* 413 */       str2 = File.separator;
/* 414 */       paramString = """";
/* 415 */     } else if (paramString.charAt(1) == File.separatorChar) {
/*     */       
/* 417 */       str2 = File.separator + File.separator;
/* 418 */       paramString = paramString.substring(2);
/*     */     } else {
/* 420 */       str2 = File.separator;
/* 421 */       paramString = paramString.substring(1);
/*     */     } 
/*     */ 
/*     */     
/* 425 */     Stack stack = new Stack();
/* 426 */     stack.push(str2);
/* 427 */     StringTokenizer stringTokenizer = new StringTokenizer(paramString, File.separator);
/* 428 */     while (stringTokenizer.hasMoreTokens()) {
/* 429 */       String str = stringTokenizer.nextToken();
/* 430 */       if (""."".equals(str))
/*     */         continue; 
/* 432 */       if ("".."".equals(str)) {
/* 433 */         if (stack.size() < 2) {
/* 434 */           throw new BuildException(""Cannot resolve path "" + str1);
/*     */         }
/* 436 */         stack.pop();
/*     */         continue;
/*     */       } 
/* 439 */       stack.push(str);
/*     */     } 
/*     */ 
/*     */     
/* 443 */     StringBuffer stringBuffer = new StringBuffer();
/* 444 */     for (byte b = 0; b < stack.size(); b++) {
/* 445 */       if (b > 1)
/*     */       {
/*     */         
/* 448 */         stringBuffer.append(File.separatorChar);
/*     */       }
/* 450 */       stringBuffer.append(stack.elementAt(b));
/*     */     } 
/*     */ 
/*     */     
/* 454 */     paramString = stringBuffer.toString();
/* 455 */     if (bool) {
/* 456 */       paramString = paramString.replace('/', '\\');
/*     */     }
/* 458 */     return new File(paramString);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\FileUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FlatFileNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FlatFileNameMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String paramString) {}
/*    */   
/*    */   public void setTo(String paramString) {}
/*    */   
/* 83 */   public String[] mapFileName(String paramString) { return new String[] { (new File(paramString)).getName() }; }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\FlatFileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.GlobPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GlobPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  75 */   protected String fromPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   protected String fromPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int prefixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int postfixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   protected String toPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   protected String toPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String paramString) {
/* 106 */     int i = paramString.lastIndexOf(""*"");
/* 107 */     if (i == -1) {
/* 108 */       this.fromPrefix = paramString;
/* 109 */       this.fromPostfix = """";
/*     */     } else {
/* 111 */       this.fromPrefix = paramString.substring(0, i);
/* 112 */       this.fromPostfix = paramString.substring(i + 1);
/*     */     } 
/* 114 */     this.prefixLength = this.fromPrefix.length();
/* 115 */     this.postfixLength = this.fromPostfix.length();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTo(String paramString) {
/* 122 */     int i = paramString.lastIndexOf(""*"");
/* 123 */     if (i == -1) {
/* 124 */       this.toPrefix = paramString;
/* 125 */       this.toPostfix = """";
/*     */     } else {
/* 127 */       this.toPrefix = paramString.substring(0, i);
/* 128 */       this.toPostfix = paramString.substring(i + 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String paramString) {
/* 138 */     if (this.fromPrefix == null || !paramString.startsWith(this.fromPrefix) || !paramString.endsWith(this.fromPostfix))
/*     */     {
/*     */       
/* 141 */       return null;
/*     */     }
/* 143 */     return new String[] { this.toPrefix + extractVariablePart(paramString) + this.toPostfix };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   protected String extractVariablePart(String paramString) { return paramString.substring(this.prefixLength, paramString.length() - this.postfixLength); }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\GlobPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.IdentityMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IdentityMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String paramString) {}
/*    */   
/*    */   public void setTo(String paramString) {}
/*    */   
/* 81 */   public String[] mapFileName(String paramString) { return new String[] { paramString }; }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\IdentityMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.MergingMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MergingMapper
/*    */   implements FileNameMapper
/*    */ {
/* 67 */   protected String[] mergedFile = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void setFrom(String paramString) {}
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 78 */   public void setTo(String paramString) { this.mergedFile = new String[] { paramString }; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public String[] mapFileName(String paramString) { return this.mergedFile; }
/*    */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\MergingMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.RegexpPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcher;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcherFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  71 */   protected RegexpMatcher reg = null;
/*  72 */   protected char[] to = null;
/*  73 */   protected StringBuffer result = new StringBuffer();
/*     */ 
/*     */   
/*  76 */   public RegexpPatternMapper() throws BuildException { this.reg = (new RegexpMatcherFactory()).newRegexpMatcher(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String paramString) throws BuildException {
/*     */     try {
/*  84 */       this.reg.setPattern(paramString);
/*     */     }
/*     */     catch (NoClassDefFoundError noClassDefFoundError) {
/*     */       
/*  88 */       throw new BuildException(""Cannot load regular expression matcher"", noClassDefFoundError);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setTo(String paramString) { this.to = paramString.toCharArray(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String paramString) {
/* 106 */     if (this.reg == null || this.to == null || !this.reg.matches(paramString))
/*     */     {
/* 108 */       return null;
/*     */     }
/* 110 */     return new String[] { replaceReferences(paramString) };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String replaceReferences(String paramString) {
/* 118 */     Vector vector = this.reg.getGroups(paramString);
/*     */     
/* 120 */     this.result.setLength(0);
/* 121 */     for (byte b = 0; b < this.to.length; b++) {
/* 122 */       if (this.to[b] == '\\') {
/* 123 */         if (++b < this.to.length) {
/* 124 */           int i = Character.digit(this.to[b], 10);
/* 125 */           if (i > -1) {
/* 126 */             this.result.append(vector.elementAt(i));
/*     */           } else {
/* 128 */             this.result.append(this.to[b]);
/*     */           } 
/*     */         } else {
/*     */           
/* 132 */           this.result.append('\\');
/*     */         } 
/*     */       } else {
/* 135 */         this.result.append(this.to[b]);
/*     */       } 
/*     */     } 
/* 138 */     return this.result.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\RegexpPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.SourceFileScanner,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SourceFileScanner
/*     */ {
/*     */   protected Task task;
/*     */   private FileUtils fileUtils;
/*     */   
/*     */   public SourceFileScanner(Task paramTask) {
/*  83 */     this.task = paramTask;
/*  84 */     this.fileUtils = FileUtils.newFileUtils();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] restrict(String[] paramArrayOfString, File paramFile1, File paramFile2, FileNameMapper paramFileNameMapper) {
/* 101 */     long l = (new Date()).getTime();
/* 102 */     StringBuffer stringBuffer = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     String str = System.getProperty(""os.name"").toLowerCase();
/* 110 */     if (str.indexOf(""windows"") >= 0) {
/* 111 */       l += 2000L;
/*     */     }
/*     */     
/* 114 */     Vector vector = new Vector();
/* 115 */     for (byte b = 0; b < paramArrayOfString.length; b++) {
/*     */       
/* 117 */       String[] arrayOfString1 = paramFileNameMapper.mapFileName(paramArrayOfString[b]);
/* 118 */       if (arrayOfString1 == null || arrayOfString1.length == 0) {
/* 119 */         this.task.log(paramArrayOfString[b] + "" skipped - don't know how to handle it"", 3);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 124 */         File file = null;
/* 125 */         if (paramFile1 == null) {
/* 126 */           file = new File(paramArrayOfString[b]);
/*     */         } else {
/* 128 */           file = this.fileUtils.resolveFile(paramFile1, paramArrayOfString[b]);
/*     */         } 
/*     */         
/* 131 */         if (file.lastModified() > l) {
/* 132 */           this.task.log(""Warning: "" + paramArrayOfString[b] + "" modified in the future."", 1);
/*     */         }
/*     */ 
/*     */         
/* 136 */         boolean bool = false;
/* 137 */         stringBuffer.setLength(0);
/* 138 */         for (byte b1 = 0; !bool && b1 < arrayOfString1.length; b1++) {
/* 139 */           File file1 = null;
/* 140 */           if (paramFile2 == null) {
/* 141 */             file1 = new File(arrayOfString1[b1]);
/*     */           } else {
/* 143 */             file1 = this.fileUtils.resolveFile(paramFile2, arrayOfString1[b1]);
/*     */           } 
/*     */           
/* 146 */           if (!file1.exists()) {
/* 147 */             this.task.log(paramArrayOfString[b] + "" added as "" + file1.getAbsolutePath() + "" doesn't exist."", 3);
/*     */             
/* 149 */             vector.addElement(paramArrayOfString[b]);
/* 150 */             bool = true;
/* 151 */           } else if (file.lastModified() > file1.lastModified()) {
/* 152 */             this.task.log(paramArrayOfString[b] + "" added as "" + file1.getAbsolutePath() + "" is outdated."", 3);
/*     */             
/* 154 */             vector.addElement(paramArrayOfString[b]);
/* 155 */             bool = true;
/*     */           } else {
/* 157 */             if (stringBuffer.length() > 0) {
/* 158 */               stringBuffer.append("", "");
/*     */             }
/* 160 */             stringBuffer.append(file1.getAbsolutePath());
/*     */           } 
/*     */         } 
/*     */         
/* 164 */         if (!bool) {
/* 165 */           this.task.log(paramArrayOfString[b] + "" omitted as "" + stringBuffer.toString() + ((arrayOfString1.length == 1) ? "" is"" : "" are "") + "" up to date."", 3);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 171 */     String[] arrayOfString = new String[vector.size()];
/* 172 */     vector.copyInto((Object[])arrayOfString);
/* 173 */     return arrayOfString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File[] restrictAsFiles(String[] paramArrayOfString, File paramFile1, File paramFile2, FileNameMapper paramFileNameMapper) {
/* 183 */     String[] arrayOfString = restrict(paramArrayOfString, paramFile1, paramFile2, paramFileNameMapper);
/* 184 */     File[] arrayOfFile = new File[arrayOfString.length];
/* 185 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 186 */       arrayOfFile[b] = new File(paramFile1, arrayOfString[b]);
/*     */     }
/* 188 */     return arrayOfFile;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\SourceFileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.JakartaOroMatcher,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.oro.text.regex.MalformedPatternException;
/*     */ import org.apache.oro.text.regex.MatchResult;
/*     */ import org.apache.oro.text.regex.Pattern;
/*     */ import org.apache.oro.text.regex.Perl5Compiler;
/*     */ import org.apache.oro.text.regex.Perl5Matcher;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JakartaOroMatcher
/*     */   implements RegexpMatcher
/*     */ {
/*  69 */   protected Perl5Matcher reg = new Perl5Matcher();
/*  70 */   protected Perl5Compiler comp = new Perl5Compiler();
/*     */ 
/*     */   
/*     */   private Pattern pattern;
/*     */ 
/*     */   
/*     */   public void setPattern(String pattern) throws BuildException {
/*     */     try {
/*  78 */       this.pattern = this.comp.compile(pattern);
/*     */     } catch (MalformedPatternException e) {
/*  80 */       throw new BuildException((Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getPattern() { return this.pattern.getPattern(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public boolean matches(String argument) { return this.reg.contains(argument, this.pattern); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Vector getGroups(String argument) {
/* 105 */     if (!matches(argument)) {
/* 106 */       return null;
/*     */     }
/* 108 */     Vector v = new Vector();
/* 109 */     MatchResult mr = this.reg.getMatch();
/* 110 */     for (int i = 0; i < mr.groups(); i++) {
/* 111 */       v.addElement(mr.group(i));
/*     */     }
/* 113 */     return v;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\regexp\JakartaOroMatcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.JakartaRegexpMatcher,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.regexp.RE;
/*     */ import org.apache.regexp.RESyntaxException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JakartaRegexpMatcher
/*     */   implements RegexpMatcher
/*     */ {
/*  69 */   protected RE reg = null;
/*     */ 
/*     */   
/*     */   private String pattern;
/*     */ 
/*     */   
/*     */   public void setPattern(String pattern) throws BuildException {
/*     */     try {
/*  77 */       this.pattern = pattern;
/*  78 */       this.reg = new RE(pattern);
/*     */     } catch (RESyntaxException e) {
/*  80 */       throw new BuildException((Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getPattern() { return this.pattern; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public boolean matches(String argument) { return this.reg.match(argument); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Vector getGroups(String argument) {
/* 105 */     if (!matches(argument)) {
/* 106 */       return null;
/*     */     }
/* 108 */     Vector v = new Vector();
/* 109 */     for (int i = 0; i < this.reg.getParenCount(); i++) {
/* 110 */       v.addElement(this.reg.getParen(i));
/*     */     }
/* 112 */     return v;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\regexp\JakartaRegexpMatcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcher,"package org.apache.tools.ant.util.regexp;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
public interface RegexpMatcher {
  void setPattern(String paramString) throws BuildException;
  String getPattern();
  boolean matches(String paramString);
  Vector getGroups(String paramString);
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\regexp\RegexpMatcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcherFactory,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpMatcherFactory
/*     */ {
/*     */   public RegexpMatcher newRegexpMatcher() throws BuildException {
/*  75 */     String str = System.getProperty(""ant.regexp.matcherimpl"");
/*  76 */     if (str != null) {
/*  77 */       return createInstance(str);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/*  83 */       return createInstance(""org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher"");
/*  84 */     } catch (BuildException buildException) {
/*     */       
/*     */       try {
/*  87 */         return createInstance(""org.apache.tools.ant.util.regexp.JakartaOroMatcher"");
/*  88 */       } catch (BuildException buildException1) {
/*     */         
/*     */         try {
/*  91 */           return createInstance(""org.apache.tools.ant.util.regexp.JakartaRegexpMatcher"");
/*  92 */         } catch (BuildException buildException2) {
/*     */           
/*  94 */           throw new BuildException(""No supported regular expression matcher found"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   } protected RegexpMatcher createInstance(String paramString) throws BuildException {
/*     */     try {
/* 100 */       Class clazz = Class.forName(paramString);
/* 101 */       return (RegexpMatcher)clazz.newInstance();
/*     */     } catch (Throwable throwable) {
/* 103 */       throw new BuildException(throwable);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\an\\util\regexp\RegexpMatcherFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailMessage,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.net.InetAddress;
/*     */ import java.net.Socket;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MailMessage
/*     */ {
/*     */   String host;
/*     */   String from;
/*     */   Vector to;
/*     */   Vector cc;
/*     */   Hashtable headers;
/*     */   MailPrintStream out;
/*     */   SmtpResponseReader in;
/*     */   Socket socket;
/*     */   
/* 138 */   public MailMessage() throws IOException { this(""localhost""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MailMessage(String paramString) throws IOException {
/* 149 */     this.host = paramString;
/* 150 */     this.to = new Vector();
/* 151 */     this.cc = new Vector();
/* 152 */     this.headers = new Hashtable();
/* 153 */     setHeader(""X-Mailer"", ""org.apache.tools.mail.MailMessage (jakarta.apache.org)"");
/* 154 */     connect();
/* 155 */     sendHelo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void from(String paramString) throws IOException {
/* 165 */     sendFrom(paramString);
/* 166 */     this.from = paramString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void to(String paramString) throws IOException {
/* 176 */     sendRcpt(paramString);
/* 177 */     this.to.addElement(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void cc(String paramString) throws IOException {
/* 187 */     sendRcpt(paramString);
/* 188 */     this.cc.addElement(paramString);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void bcc(String paramString) throws IOException { sendRcpt(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setSubject(String paramString) { this.headers.put(""Subject"", paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setHeader(String paramString1, String paramString2) { this.headers.put(paramString1, paramString2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PrintStream getPrintStream() throws IOException {
/* 227 */     setFromHeader();
/* 228 */     setToHeader();
/* 229 */     setCcHeader();
/* 230 */     sendData();
/* 231 */     flushHeaders();
/* 232 */     return this.out;
/*     */   }
/*     */ 
/*     */   
/* 236 */   void setFromHeader() { setHeader(""From"", this.from); }
/*     */ 
/*     */ 
/*     */   
/* 240 */   void setToHeader() { setHeader(""To"", vectorToList(this.to)); }
/*     */ 
/*     */ 
/*     */   
/* 244 */   void setCcHeader() { setHeader(""Cc"", vectorToList(this.cc)); }
/*     */ 
/*     */   
/*     */   String vectorToList(Vector paramVector) {
/* 248 */     StringBuffer stringBuffer = new StringBuffer();
/* 249 */     Enumeration enumeration = paramVector.elements();
/* 250 */     while (enumeration.hasMoreElements()) {
/* 251 */       stringBuffer.append(enumeration.nextElement());
/* 252 */       if (enumeration.hasMoreElements()) {
/* 253 */         stringBuffer.append("", "");
/*     */       }
/*     */     } 
/* 256 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */   
/*     */   void flushHeaders() throws IOException {
/* 261 */     Enumeration enumeration = this.headers.keys();
/* 262 */     while (enumeration.hasMoreElements()) {
/* 263 */       String str1 = enumeration.nextElement();
/* 264 */       String str2 = (String)this.headers.get(str1);
/* 265 */       this.out.println(str1 + "": "" + str2);
/*     */     } 
/* 267 */     this.out.println();
/* 268 */     this.out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void sendAndClose() throws IOException {
/* 278 */     sendDot();
/* 279 */     sendQuit();
/* 280 */     disconnect();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   static String sanitizeAddress(String paramString) {
/* 286 */     byte b1 = 0;
/* 287 */     int i = 0;
/* 288 */     int j = 0;
/* 289 */     int k = paramString.length();
/*     */     
/* 291 */     for (byte b2 = 0; b2 < k; b2++) {
/* 292 */       char c = paramString.charAt(b2);
/* 293 */       if (c == '(') {
/* 294 */         b1++;
/* 295 */         if (!i) {
/* 296 */           j = b2;
/*     */         }
/*     */       }
/* 299 */       else if (c == ')') {
/* 300 */         b1--;
/* 301 */         if (j == 0) {
/* 302 */           i = b2 + 1;
/*     */         }
/*     */       }
/* 305 */       else if (b1 == 0 && c == '<') {
/* 306 */         i = b2 + 1;
/*     */       }
/* 308 */       else if (b1 == 0 && c == '>') {
/* 309 */         j = b2;
/*     */       } 
/*     */     } 
/*     */     
/* 313 */     if (j == 0) {
/* 314 */       j = k;
/*     */     }
/*     */     
/* 317 */     return paramString.substring(i, j);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   void connect() throws IOException {
/* 323 */     this.socket = new Socket(this.host, 25);
/* 324 */     this.out = new MailPrintStream(new BufferedOutputStream(this.socket.getOutputStream()));
/*     */ 
/*     */     
/* 327 */     this.in = new SmtpResponseReader(this.socket.getInputStream());
/* 328 */     getReady();
/*     */   }
/*     */   
/*     */   void getReady() throws IOException {
/* 332 */     String str = this.in.getResponse();
/* 333 */     int[] arrayOfInt = { 220 };
/* 334 */     if (!isResponseOK(str, arrayOfInt)) {
/* 335 */       throw new IOException(""Didn't get introduction from server: "" + str);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   void sendHelo() throws IOException {
/* 341 */     String str = InetAddress.getLocalHost().getHostName();
/* 342 */     int[] arrayOfInt = { 250 };
/* 343 */     send(""HELO "" + str, arrayOfInt);
/*     */   }
/*     */   
/*     */   void sendFrom(String paramString) throws IOException {
/* 347 */     int[] arrayOfInt = { 250 };
/* 348 */     send(""MAIL FROM: <"" + sanitizeAddress(paramString) + "">"", arrayOfInt);
/*     */   }
/*     */   
/*     */   void sendRcpt(String paramString) throws IOException {
/* 352 */     int[] arrayOfInt = { 250, 251 };
/* 353 */     send(""RCPT TO: <"" + sanitizeAddress(paramString) + "">"", arrayOfInt);
/*     */   }
/*     */   
/*     */   void sendData() throws IOException {
/* 357 */     int[] arrayOfInt = { 354 };
/* 358 */     send(""DATA"", arrayOfInt);
/*     */   }
/*     */   
/*     */   void sendDot() throws IOException {
/* 362 */     int[] arrayOfInt = { 250 };
/* 363 */     send(""\r\n."", arrayOfInt);
/*     */   }
/*     */   
/*     */   void sendQuit() throws IOException {
/* 367 */     int[] arrayOfInt = { 221 };
/* 368 */     send(""QUIT"", arrayOfInt);
/*     */   }
/*     */   
/*     */   void send(String paramString, int[] paramArrayOfint) throws IOException {
/* 372 */     this.out.rawPrint(paramString + ""\r\n"");
/*     */     
/* 374 */     String str = this.in.getResponse();
/*     */     
/* 376 */     if (!isResponseOK(str, paramArrayOfint)) {
/* 377 */       throw new IOException(""Unexpected reply to command: "" + paramString + "": "" + str);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   boolean isResponseOK(String paramString, int[] paramArrayOfint) {
/* 384 */     for (byte b = 0; b < paramArrayOfint.length; b++) {
/* 385 */       if (paramString.startsWith("""" + paramArrayOfint[b])) {
/* 386 */         return true;
/*     */       }
/*     */     } 
/* 389 */     return false;
/*     */   }
/*     */   
/*     */   void disconnect() throws IOException {
/* 393 */     if (this.out != null) this.out.close(); 
/* 394 */     if (this.in != null) this.in.close(); 
/* 395 */     if (this.socket != null) this.socket.close(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\mail\MailMessage.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailPrintStream,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class MailPrintStream
/*     */   extends PrintStream
/*     */ {
/*     */   int lastChar;
/*     */   
/* 407 */   public MailPrintStream(OutputStream paramOutputStream) { super(paramOutputStream, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) {
/* 413 */     if (paramInt == 10 && this.lastChar != 13) {
/* 414 */       rawWrite(13);
/* 415 */       rawWrite(paramInt);
/*     */     }
/* 417 */     else if (paramInt == 46 && this.lastChar == 10) {
/* 418 */       rawWrite(46);
/* 419 */       rawWrite(paramInt);
/*     */     } else {
/*     */       
/* 422 */       rawWrite(paramInt);
/*     */     } 
/* 424 */     this.lastChar = paramInt;
/*     */   }
/*     */   
/*     */   public void write(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 428 */     for (byte b = 0; b < paramInt2; b++) {
/* 429 */       write(paramArrayOfbyte[paramInt1 + b]);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 434 */   void rawWrite(int paramInt) { super.write(paramInt); }
/*     */ 
/*     */   
/*     */   void rawPrint(String paramString) {
/* 438 */     int i = paramString.length();
/* 439 */     for (byte b = 0; b < i; b++)
/* 440 */       rawWrite(paramString.charAt(b)); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\mail\MailPrintStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.SmtpResponseReader,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SmtpResponseReader
/*     */ {
/*  66 */   protected BufferedReader reader = null;
/*  67 */   private StringBuffer result = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   public SmtpResponseReader(InputStream paramInputStream) { this.reader = new BufferedReader(new InputStreamReader(paramInputStream)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getResponse() throws IOException {
/*  84 */     this.result.setLength(0);
/*  85 */     String str = this.reader.readLine();
/*  86 */     if (str != null) {
/*  87 */       this.result.append(str.substring(0, 3));
/*  88 */       this.result.append("" "");
/*     */     } 
/*     */     
/*  91 */     while (str != null) {
/*  92 */       append(str);
/*  93 */       if (!hasMoreLines(str)) {
/*     */         break;
/*     */       }
/*  96 */       str = this.reader.readLine();
/*     */     } 
/*  98 */     return this.result.toString().trim();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void close() throws IOException { this.reader.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   protected boolean hasMoreLines(String paramString) { return (paramString.charAt(3) == '-'); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void append(String paramString) {
/* 119 */     this.result.append(paramString.substring(4));
/* 120 */     this.result.append("" "");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\mail\SmtpResponseReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarBuffer,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarBuffer
/*     */ {
/*     */   public static final int DEFAULT_RCDSIZE = 512;
/*     */   public static final int DEFAULT_BLKSIZE = 10240;
/*     */   private InputStream inStream;
/*     */   private OutputStream outStream;
/*     */   private byte[] blockBuffer;
/*     */   private int currBlkIdx;
/*     */   private int currRecIdx;
/*     */   private int blockSize;
/*     */   private int recordSize;
/*     */   private int recsPerBlock;
/*     */   private boolean debug;
/*     */   
/*  94 */   public TarBuffer(InputStream paramInputStream) { this(paramInputStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public TarBuffer(InputStream paramInputStream, int paramInt) { this(paramInputStream, paramInt, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(InputStream paramInputStream, int paramInt1, int paramInt2) {
/* 102 */     this.inStream = paramInputStream;
/* 103 */     this.outStream = null;
/*     */     
/* 105 */     initialize(paramInt1, paramInt2);
/*     */   }
/*     */ 
/*     */   
/* 109 */   public TarBuffer(OutputStream paramOutputStream) { this(paramOutputStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/* 113 */   public TarBuffer(OutputStream paramOutputStream, int paramInt) { this(paramOutputStream, paramInt, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(OutputStream paramOutputStream, int paramInt1, int paramInt2) {
/* 117 */     this.inStream = null;
/* 118 */     this.outStream = paramOutputStream;
/*     */     
/* 120 */     initialize(paramInt1, paramInt2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize(int paramInt1, int paramInt2) {
/* 127 */     this.debug = false;
/* 128 */     this.blockSize = paramInt1;
/* 129 */     this.recordSize = paramInt2;
/* 130 */     this.recsPerBlock = this.blockSize / this.recordSize;
/* 131 */     this.blockBuffer = new byte[this.blockSize];
/*     */     
/* 133 */     if (this.inStream != null) {
/* 134 */       this.currBlkIdx = -1;
/* 135 */       this.currRecIdx = this.recsPerBlock;
/*     */     } else {
/* 137 */       this.currBlkIdx = 0;
/* 138 */       this.currRecIdx = 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public int getBlockSize() { return this.blockSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public int getRecordSize() { return this.recordSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setDebug(boolean paramBoolean) { this.debug = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isEOFRecord(byte[] paramArrayOfbyte) {
/*     */     byte b;
/*     */     int i;
/* 172 */     for (b = 0, i = getRecordSize(); b < i; b++) {
/* 173 */       if (paramArrayOfbyte[b] != 0) {
/* 174 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 178 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void skipRecord() throws IOException {
/* 185 */     if (this.debug) {
/* 186 */       System.err.println(""SkipRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 190 */     if (this.inStream == null) {
/* 191 */       throw new IOException(""reading (via skip) from an output buffer"");
/*     */     }
/*     */     
/* 194 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 195 */       !readBlock()) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 200 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] readRecord() throws IOException {
/* 209 */     if (this.debug) {
/* 210 */       System.err.println(""ReadRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 214 */     if (this.inStream == null) {
/* 215 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 218 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 219 */       !readBlock()) {
/* 220 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 224 */     byte[] arrayOfByte = new byte[this.recordSize];
/*     */     
/* 226 */     System.arraycopy(this.blockBuffer, this.currRecIdx * this.recordSize, arrayOfByte, 0, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 230 */     this.currRecIdx++;
/*     */     
/* 232 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean readBlock() throws IOException {
/* 239 */     if (this.debug) {
/* 240 */       System.err.println(""ReadBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 243 */     if (this.inStream == null) {
/* 244 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 247 */     this.currRecIdx = 0;
/*     */     
/* 249 */     int i = 0;
/* 250 */     int j = this.blockSize;
/*     */     
/* 252 */     while (j > 0) {
/* 253 */       long l = this.inStream.read(this.blockBuffer, i, j);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 269 */       if (l == -1L) {
/*     */         break;
/*     */       }
/*     */       
/* 273 */       i = (int)(i + l);
/* 274 */       j = (int)(j - l);
/*     */       
/* 276 */       if (l != this.blockSize && 
/* 277 */         this.debug) {
/* 278 */         System.err.println(""ReadBlock: INCOMPLETE READ "" + l + "" of "" + this.blockSize + "" bytes read."");
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 285 */     this.currBlkIdx++;
/*     */     
/* 287 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 296 */   public int getCurrentBlockNum() { return this.currBlkIdx; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public int getCurrentRecordNum() { return this.currRecIdx - 1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] paramArrayOfbyte) throws IOException {
/* 315 */     if (this.debug) {
/* 316 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 320 */     if (this.outStream == null) {
/* 321 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 324 */     if (paramArrayOfbyte.length != this.recordSize) {
/* 325 */       throw new IOException(""record to write has length '"" + paramArrayOfbyte.length + ""' which is not the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 331 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 332 */       writeBlock();
/*     */     }
/*     */     
/* 335 */     System.arraycopy(paramArrayOfbyte, 0, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 339 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] paramArrayOfbyte, int paramInt) throws IOException {
/* 351 */     if (this.debug) {
/* 352 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 356 */     if (this.outStream == null) {
/* 357 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 360 */     if (paramInt + this.recordSize > paramArrayOfbyte.length) {
/* 361 */       throw new IOException(""record has length '"" + paramArrayOfbyte.length + ""' with offset '"" + paramInt + ""' which is less than the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 367 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 368 */       writeBlock();
/*     */     }
/*     */     
/* 371 */     System.arraycopy(paramArrayOfbyte, paramInt, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 375 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeBlock() throws IOException {
/* 382 */     if (this.debug) {
/* 383 */       System.err.println(""WriteBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 386 */     if (this.outStream == null) {
/* 387 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 390 */     this.outStream.write(this.blockBuffer, 0, this.blockSize);
/* 391 */     this.outStream.flush();
/*     */     
/* 393 */     this.currRecIdx = 0;
/* 394 */     this.currBlkIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void flushBlock() throws IOException {
/* 401 */     if (this.debug) {
/* 402 */       System.err.println(""TarBuffer.flushBlock() called."");
/*     */     }
/*     */     
/* 405 */     if (this.outStream == null) {
/* 406 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 409 */     if (this.currRecIdx > 0) {
/* 410 */       writeBlock();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 419 */     if (this.debug) {
/* 420 */       System.err.println(""TarBuffer.closeBuffer()."");
/*     */     }
/*     */     
/* 423 */     if (this.outStream != null) {
/* 424 */       flushBlock();
/*     */       
/* 426 */       if (this.outStream != System.out && this.outStream != System.err) {
/*     */         
/* 428 */         this.outStream.close();
/*     */         
/* 430 */         this.outStream = null;
/*     */       } 
/* 432 */     } else if (this.inStream != null && 
/* 433 */       this.inStream != System.in) {
/* 434 */       this.inStream.close();
/*     */       
/* 436 */       this.inStream = null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarBuffer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarConstants,"package org.apache.tools.tar;
public interface TarConstants {
  public static final int NAMELEN = 100;
  public static final int MODELEN = 8;
  public static final int UIDLEN = 8;
  public static final int GIDLEN = 8;
  public static final int CHKSUMLEN = 8;
  public static final int SIZELEN = 12;
  public static final int MAGICLEN = 8;
  public static final int MODTIMELEN = 12;
  public static final int UNAMELEN = 32;
  public static final int GNAMELEN = 32;
  public static final int DEVLEN = 8;
  public static final byte LF_OLDNORM = 0;
  public static final byte LF_NORMAL = 48;
  public static final byte LF_LINK = 49;
  public static final byte LF_SYMLINK = 50;
  public static final byte LF_CHR = 51;
  public static final byte LF_BLK = 52;
  public static final byte LF_DIR = 53;
  public static final byte LF_FIFO = 54;
  public static final byte LF_CONTIG = 55;
  public static final String TMAGIC = ""ustar"";
  public static final String GNU_TMAGIC = ""ustar  "";
  public static final String GNU_LONGLINK = ""././@LongLink"";
  public static final byte LF_GNUTYPE_LONGNAME = 76;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarConstants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarEntry,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarEntry
/*     */   implements TarConstants
/*     */ {
/* 138 */   private StringBuffer magic = new StringBuffer(""ustar"");
/* 139 */   private StringBuffer name = new StringBuffer(); private int mode; private int userId; private int groupId;
/* 140 */   private StringBuffer linkName = new StringBuffer(); private long size; private long modTime; private int checkSum;
/*     */   private TarEntry() {
/* 142 */     String str = System.getProperty(""user.name"", """");
/*     */     
/* 144 */     if (str.length() > 31) {
/* 145 */       str = str.substring(0, 31);
/*     */     }
/*     */     
/* 148 */     this.userId = 0;
/* 149 */     this.groupId = 0;
/* 150 */     this.userName = new StringBuffer(str);
/* 151 */     this.groupName = new StringBuffer("""");
/* 152 */     this.file = null;
/*     */   }
/*     */   private byte linkFlag; private StringBuffer userName; private StringBuffer groupName;
/*     */   private int devMajor;
/*     */   private int devMinor;
/*     */   private File file;
/*     */   
/*     */   public TarEntry(String paramString) {
/* 160 */     this();
/*     */     
/* 162 */     boolean bool = paramString.endsWith(""/"");
/*     */     
/* 164 */     this.checkSum = 0;
/* 165 */     this.devMajor = 0;
/* 166 */     this.devMinor = 0;
/* 167 */     this.name = new StringBuffer(paramString);
/* 168 */     this.mode = bool ? 16877 : 33188;
/* 169 */     this.linkFlag = bool ? 53 : 48;
/* 170 */     this.userId = 0;
/* 171 */     this.groupId = 0;
/* 172 */     this.size = 0L;
/* 173 */     this.checkSum = 0;
/* 174 */     this.modTime = (new Date()).getTime() / 1000L;
/* 175 */     this.linkName = new StringBuffer("""");
/* 176 */     this.userName = new StringBuffer("""");
/* 177 */     this.groupName = new StringBuffer("""");
/* 178 */     this.devMajor = 0;
/* 179 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(String paramString, byte paramByte) {
/* 187 */     this(paramString);
/* 188 */     this.linkFlag = paramByte;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(File paramFile) {
/* 198 */     this();
/*     */     
/* 200 */     this.file = paramFile;
/*     */     
/* 202 */     String str1 = paramFile.getPath();
/* 203 */     String str2 = System.getProperty(""os.name"");
/*     */     
/* 205 */     if (str2 != null) {
/*     */ 
/*     */ 
/*     */       
/* 209 */       String str3 = ""Windows"";
/* 210 */       String str4 = str2.substring(0, str3.length());
/*     */       
/* 212 */       if (str4.equalsIgnoreCase(str3) && 
/* 213 */         str1.length() > 2) {
/* 214 */         char c1 = str1.charAt(0);
/* 215 */         char c2 = str1.charAt(1);
/*     */         
/* 217 */         if (c2 == ':' && ((c1 >= 'a' && c1 <= 'z') || (c1 >= 'A' && c1 <= 'Z')))
/*     */         {
/*     */           
/* 220 */           str1 = str1.substring(2);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 226 */     str1 = str1.replace(File.separatorChar, '/');
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 231 */     while (str1.startsWith(""/"")) {
/* 232 */       str1 = str1.substring(1);
/*     */     }
/*     */     
/* 235 */     this.linkName = new StringBuffer("""");
/* 236 */     this.name = new StringBuffer(str1);
/*     */     
/* 238 */     if (paramFile.isDirectory()) {
/* 239 */       this.mode = 16877;
/* 240 */       this.linkFlag = 53;
/*     */       
/* 242 */       if (this.name.charAt(this.name.length() - 1) != '/') {
/* 243 */         this.name.append(""/"");
/*     */       }
/*     */     } else {
/* 246 */       this.mode = 33188;
/* 247 */       this.linkFlag = 48;
/*     */     } 
/*     */     
/* 250 */     this.size = paramFile.length();
/* 251 */     this.modTime = paramFile.lastModified() / 1000L;
/* 252 */     this.checkSum = 0;
/* 253 */     this.devMajor = 0;
/* 254 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(byte[] paramArrayOfbyte) {
/* 264 */     this();
/* 265 */     parseTarHeader(paramArrayOfbyte);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public boolean equals(TarEntry paramTarEntry) { return getName().equals(paramTarEntry.getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public boolean isDescendent(TarEntry paramTarEntry) { return paramTarEntry.getName().startsWith(getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public String getName() { return this.name.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void setName(String paramString) { this.name = new StringBuffer(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void setMode(int paramInt) { this.mode = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 323 */   public int getUserId() { return this.userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 332 */   public void setUserId(int paramInt) { this.userId = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public int getGroupId() { return this.groupId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 350 */   public void setGroupId(int paramInt) { this.groupId = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 359 */   public String getUserName() { return this.userName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 368 */   public void setUserName(String paramString) { this.userName = new StringBuffer(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   public String getGroupName() { return this.groupName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 386 */   public void setGroupName(String paramString) { this.groupName = new StringBuffer(paramString); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIds(int paramInt1, int paramInt2) {
/* 396 */     setUserId(paramInt1);
/* 397 */     setGroupId(paramInt2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setNames(String paramString1, String paramString2) {
/* 407 */     setUserName(paramString1);
/* 408 */     setGroupName(paramString2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 418 */   public void setModTime(long paramLong) { this.modTime = paramLong / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 427 */   public void setModTime(Date paramDate) { this.modTime = paramDate.getTime() / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 436 */   public Date getModTime() { return new Date(this.modTime * 1000L); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 445 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 454 */   public long getSize() { return this.size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 463 */   public void setSize(long paramLong) { this.size = paramLong; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 473 */   public boolean isGNULongNameEntry() { return (this.linkFlag == 76 && this.name.toString().equals(""././@LongLink"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isDirectory() {
/* 483 */     if (this.file != null) {
/* 484 */       return this.file.isDirectory();
/*     */     }
/*     */     
/* 487 */     if (this.linkFlag == 53) {
/* 488 */       return true;
/*     */     }
/*     */     
/* 491 */     if (getName().endsWith(""/"")) {
/* 492 */       return true;
/*     */     }
/*     */     
/* 495 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry[] getDirectoryEntries() {
/* 505 */     if (this.file == null || !this.file.isDirectory()) {
/* 506 */       return new TarEntry[0];
/*     */     }
/*     */     
/* 509 */     String[] arrayOfString = this.file.list();
/* 510 */     TarEntry[] arrayOfTarEntry = new TarEntry[arrayOfString.length];
/*     */     
/* 512 */     for (byte b = 0; b < arrayOfString.length; b++) {
/* 513 */       arrayOfTarEntry[b] = new TarEntry(new File(this.file, arrayOfString[b]));
/*     */     }
/*     */     
/* 516 */     return arrayOfTarEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeEntryHeader(byte[] paramArrayOfbyte) {
/* 525 */     int i = 0;
/*     */     
/* 527 */     i = TarUtils.getNameBytes(this.name, paramArrayOfbyte, i, 100);
/* 528 */     i = TarUtils.getOctalBytes(this.mode, paramArrayOfbyte, i, 8);
/* 529 */     i = TarUtils.getOctalBytes(this.userId, paramArrayOfbyte, i, 8);
/* 530 */     i = TarUtils.getOctalBytes(this.groupId, paramArrayOfbyte, i, 8);
/* 531 */     i = TarUtils.getLongOctalBytes(this.size, paramArrayOfbyte, i, 12);
/* 532 */     i = TarUtils.getLongOctalBytes(this.modTime, paramArrayOfbyte, i, 12);
/*     */     
/* 534 */     int j = i;
/*     */     
/* 536 */     for (byte b = 0; b < 8; b++) {
/* 537 */       paramArrayOfbyte[i++] = 32;
/*     */     }
/*     */     
/* 540 */     paramArrayOfbyte[i++] = this.linkFlag;
/* 541 */     i = TarUtils.getNameBytes(this.linkName, paramArrayOfbyte, i, 100);
/* 542 */     i = TarUtils.getNameBytes(this.magic, paramArrayOfbyte, i, 8);
/* 543 */     i = TarUtils.getNameBytes(this.userName, paramArrayOfbyte, i, 32);
/* 544 */     i = TarUtils.getNameBytes(this.groupName, paramArrayOfbyte, i, 32);
/* 545 */     i = TarUtils.getOctalBytes(this.devMajor, paramArrayOfbyte, i, 8);
/* 546 */     i = TarUtils.getOctalBytes(this.devMinor, paramArrayOfbyte, i, 8);
/*     */     
/* 548 */     while (i < paramArrayOfbyte.length) {
/* 549 */       paramArrayOfbyte[i++] = 0;
/*     */     }
/*     */     
/* 552 */     long l = TarUtils.computeCheckSum(paramArrayOfbyte);
/*     */     
/* 554 */     TarUtils.getCheckSumOctalBytes(l, paramArrayOfbyte, j, 8);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseTarHeader(byte[] paramArrayOfbyte) {
/* 563 */     byte b = 0;
/*     */     
/* 565 */     this.name = TarUtils.parseName(paramArrayOfbyte, b, 100);
/* 566 */     b += true;
/* 567 */     this.mode = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/* 568 */     b += true;
/* 569 */     this.userId = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/* 570 */     b += true;
/* 571 */     this.groupId = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/* 572 */     b += true;
/* 573 */     this.size = TarUtils.parseOctal(paramArrayOfbyte, b, 12);
/* 574 */     b += true;
/* 575 */     this.modTime = TarUtils.parseOctal(paramArrayOfbyte, b, 12);
/* 576 */     b += true;
/* 577 */     this.checkSum = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/* 578 */     b += true;
/* 579 */     this.linkFlag = paramArrayOfbyte[b++];
/* 580 */     this.linkName = TarUtils.parseName(paramArrayOfbyte, b, 100);
/* 581 */     b += 100;
/* 582 */     this.magic = TarUtils.parseName(paramArrayOfbyte, b, 8);
/* 583 */     b += 8;
/* 584 */     this.userName = TarUtils.parseName(paramArrayOfbyte, b, 32);
/* 585 */     b += 32;
/* 586 */     this.groupName = TarUtils.parseName(paramArrayOfbyte, b, 32);
/* 587 */     b += 32;
/* 588 */     this.devMajor = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/* 589 */     b += 8;
/* 590 */     this.devMinor = (int)TarUtils.parseOctal(paramArrayOfbyte, b, 8);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarInputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarInputStream
/*     */   extends FilterInputStream
/*     */ {
/*     */   protected boolean debug;
/*     */   protected boolean hasHitEOF;
/*     */   protected int entrySize;
/*     */   protected int entryOffset;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] readBuf;
/*     */   protected TarBuffer buffer;
/*     */   protected TarEntry currEntry;
/*     */   
/*  85 */   public TarInputStream(InputStream paramInputStream) { this(paramInputStream, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public TarInputStream(InputStream paramInputStream, int paramInt) { this(paramInputStream, paramInt, 512); }
/*     */ 
/*     */   
/*     */   public TarInputStream(InputStream paramInputStream, int paramInt1, int paramInt2) {
/*  93 */     super(paramInputStream);
/*     */     
/*  95 */     this.buffer = new TarBuffer(paramInputStream, paramInt1, paramInt2);
/*  96 */     this.readBuf = null;
/*  97 */     this.oneBuf = new byte[1];
/*  98 */     this.debug = false;
/*  99 */     this.hasHitEOF = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDebug(boolean paramBoolean) {
/* 108 */     this.debug = paramBoolean;
/* 109 */     this.buffer.setDebug(paramBoolean);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void close() throws IOException { this.buffer.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public int available() throws IOException { return this.entrySize - this.entryOffset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void skip(int paramInt) throws IOException {
/* 156 */     byte[] arrayOfByte = new byte[8192];
/*     */     
/* 158 */     for (int i = paramInt; i > 0; ) {
/* 159 */       int j = read(arrayOfByte, 0, (i > arrayOfByte.length) ? arrayOfByte.length : i);
/*     */ 
/*     */ 
/*     */       
/* 163 */       if (j == -1) {
/*     */         break;
/*     */       }
/*     */       
/* 167 */       i -= j;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   public boolean markSupported() { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void mark(int paramInt) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry getNextEntry() throws IOException {
/* 205 */     if (this.hasHitEOF) {
/* 206 */       return null;
/*     */     }
/*     */     
/* 209 */     if (this.currEntry != null) {
/* 210 */       int i = this.entrySize - this.entryOffset;
/*     */       
/* 212 */       if (this.debug) {
/* 213 */         System.err.println(""TarInputStream: SKIP currENTRY '"" + this.currEntry.getName() + ""' SZ "" + this.entrySize + "" OFF "" + this.entryOffset + ""  skipping "" + i + "" bytes"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 220 */       if (i > 0) {
/* 221 */         skip(i);
/*     */       }
/*     */       
/* 224 */       this.readBuf = null;
/*     */     } 
/*     */     
/* 227 */     byte[] arrayOfByte = this.buffer.readRecord();
/*     */     
/* 229 */     if (arrayOfByte == null) {
/* 230 */       if (this.debug) {
/* 231 */         System.err.println(""READ NULL RECORD"");
/*     */       }
/* 233 */       this.hasHitEOF = true;
/* 234 */     } else if (this.buffer.isEOFRecord(arrayOfByte)) {
/* 235 */       if (this.debug) {
/* 236 */         System.err.println(""READ EOF RECORD"");
/*     */       }
/* 238 */       this.hasHitEOF = true;
/*     */     } 
/*     */     
/* 241 */     if (this.hasHitEOF) {
/* 242 */       this.currEntry = null;
/*     */     } else {
/* 244 */       this.currEntry = new TarEntry(arrayOfByte);
/*     */       
/* 246 */       if (arrayOfByte[257] != 117 || arrayOfByte[258] != 115 || arrayOfByte[259] != 116 || arrayOfByte[260] != 97 || arrayOfByte[261] != 114) {
/*     */ 
/*     */         
/* 249 */         this.entrySize = 0;
/* 250 */         this.entryOffset = 0;
/* 251 */         this.currEntry = null;
/*     */         
/* 253 */         throw new IOException(""bad header in block "" + this.buffer.getCurrentBlockNum() + "" record "" + this.buffer.getCurrentRecordNum() + "", "" + ""header magic is not 'ustar', but '"" + arrayOfByte[257] + arrayOfByte[258] + arrayOfByte[259] + arrayOfByte[260] + arrayOfByte[261] + ""', or (dec) "" + arrayOfByte[257] + "", "" + arrayOfByte[258] + "", "" + arrayOfByte[259] + "", "" + arrayOfByte[260] + "", "" + arrayOfByte[261]);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 276 */       if (this.debug) {
/* 277 */         System.err.println(""TarInputStream: SET CURRENTRY '"" + this.currEntry.getName() + ""' size = "" + this.currEntry.getSize());
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 283 */       this.entryOffset = 0;
/*     */ 
/*     */       
/* 286 */       this.entrySize = (int)this.currEntry.getSize();
/*     */     } 
/*     */     
/* 289 */     if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {
/*     */       
/* 291 */       StringBuffer stringBuffer = new StringBuffer();
/* 292 */       byte[] arrayOfByte1 = new byte[256];
/* 293 */       int i = 0;
/* 294 */       while ((i = read(arrayOfByte1)) >= 0) {
/* 295 */         stringBuffer.append(new String(arrayOfByte1, 0, i));
/*     */       }
/* 297 */       getNextEntry();
/* 298 */       this.currEntry.setName(stringBuffer.toString());
/*     */     } 
/*     */     
/* 301 */     return this.currEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/* 312 */     int i = read(this.oneBuf, 0, 1);
/*     */     
/* 314 */     if (i == -1) {
/* 315 */       return i;
/*     */     }
/* 317 */     return this.oneBuf[0];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public int read(byte[] paramArrayOfbyte) throws IOException { return read(paramArrayOfbyte, 0, paramArrayOfbyte.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws IOException {
/* 346 */     int i = 0;
/*     */     
/* 348 */     if (this.entryOffset >= this.entrySize) {
/* 349 */       return -1;
/*     */     }
/*     */     
/* 352 */     if (paramInt2 + this.entryOffset > this.entrySize) {
/* 353 */       paramInt2 = this.entrySize - this.entryOffset;
/*     */     }
/*     */     
/* 356 */     if (this.readBuf != null) {
/* 357 */       int j = (paramInt2 > this.readBuf.length) ? this.readBuf.length : paramInt2;
/*     */ 
/*     */       
/* 360 */       System.arraycopy(this.readBuf, 0, paramArrayOfbyte, paramInt1, j);
/*     */       
/* 362 */       if (j >= this.readBuf.length) {
/* 363 */         this.readBuf = null;
/*     */       } else {
/* 365 */         int k = this.readBuf.length - j;
/* 366 */         byte[] arrayOfByte = new byte[k];
/*     */         
/* 368 */         System.arraycopy(this.readBuf, j, arrayOfByte, 0, k);
/*     */         
/* 370 */         this.readBuf = arrayOfByte;
/*     */       } 
/*     */       
/* 373 */       i += j;
/* 374 */       paramInt2 -= j;
/* 375 */       paramInt1 += j;
/*     */     } 
/*     */     
/* 378 */     while (paramInt2 > 0) {
/* 379 */       byte[] arrayOfByte = this.buffer.readRecord();
/*     */       
/* 381 */       if (arrayOfByte == null)
/*     */       {
/* 383 */         throw new IOException(""unexpected EOF with "" + paramInt2 + "" bytes unread"");
/*     */       }
/*     */ 
/*     */       
/* 387 */       int j = paramInt2;
/* 388 */       int k = arrayOfByte.length;
/*     */       
/* 390 */       if (k > j) {
/* 391 */         System.arraycopy(arrayOfByte, 0, paramArrayOfbyte, paramInt1, j);
/*     */         
/* 393 */         this.readBuf = new byte[k - j];
/*     */         
/* 395 */         System.arraycopy(arrayOfByte, j, this.readBuf, 0, k - j);
/*     */       } else {
/* 397 */         j = k;
/*     */         
/* 399 */         System.arraycopy(arrayOfByte, 0, paramArrayOfbyte, paramInt1, k);
/*     */       } 
/*     */       
/* 402 */       i += j;
/* 403 */       paramInt2 -= j;
/* 404 */       paramInt1 += j;
/*     */     } 
/*     */     
/* 407 */     this.entryOffset += i;
/*     */     
/* 409 */     return i;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyEntryContents(OutputStream paramOutputStream) throws IOException {
/* 419 */     byte[] arrayOfByte = new byte[32768];
/*     */     
/*     */     while (true) {
/* 422 */       int i = read(arrayOfByte, 0, arrayOfByte.length);
/*     */       
/* 424 */       if (i == -1) {
/*     */         break;
/*     */       }
/*     */       
/* 428 */       paramOutputStream.write(arrayOfByte, 0, i);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarOutputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarOutputStream
/*     */   extends FilterOutputStream
/*     */ {
/*     */   public static final int LONGFILE_ERROR = 0;
/*     */   public static final int LONGFILE_TRUNCATE = 1;
/*     */   public static final int LONGFILE_GNU = 2;
/*     */   protected boolean debug;
/*     */   protected int currSize;
/*     */   protected int currBytes;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] recordBuf;
/*     */   protected int assemLen;
/*     */   protected byte[] assemBuf;
/*     */   protected TarBuffer buffer;
/*  84 */   protected int longFileMode = 0;
/*     */ 
/*     */   
/*  87 */   public TarOutputStream(OutputStream paramOutputStream) { this(paramOutputStream, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public TarOutputStream(OutputStream paramOutputStream, int paramInt) { this(paramOutputStream, paramInt, 512); }
/*     */ 
/*     */   
/*     */   public TarOutputStream(OutputStream paramOutputStream, int paramInt1, int paramInt2) {
/*  95 */     super(paramOutputStream);
/*     */     
/*  97 */     this.buffer = new TarBuffer(paramOutputStream, paramInt1, paramInt2);
/*  98 */     this.debug = false;
/*  99 */     this.assemLen = 0;
/* 100 */     this.assemBuf = new byte[paramInt2];
/* 101 */     this.recordBuf = new byte[paramInt2];
/* 102 */     this.oneBuf = new byte[1];
/*     */   }
/*     */ 
/*     */   
/* 106 */   public void setLongFileMode(int paramInt) { this.longFileMode = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setDebug(boolean paramBoolean) { this.debug = paramBoolean; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void setBufferDebug(boolean paramBoolean) { this.buffer.setDebug(paramBoolean); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void finish() throws IOException { writeEOFRecord(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 142 */     finish();
/* 143 */     this.buffer.close();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(TarEntry paramTarEntry) throws IOException {
/* 167 */     if (paramTarEntry.getName().length() >= 100)
/*     */     {
/* 169 */       if (this.longFileMode == 2) {
/*     */ 
/*     */         
/* 172 */         TarEntry tarEntry = new TarEntry(""././@LongLink"", (byte)76);
/*     */ 
/*     */         
/* 175 */         tarEntry.setSize((paramTarEntry.getName().length() + 1));
/* 176 */         putNextEntry(tarEntry);
/* 177 */         write(paramTarEntry.getName().getBytes());
/* 178 */         write(0);
/* 179 */         closeEntry();
/*     */       }
/* 181 */       else if (this.longFileMode != 1) {
/* 182 */         throw new RuntimeException(""file name '"" + paramTarEntry.getName() + ""' is too long ( > "" + 'd' + "" bytes)"");
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 188 */     paramTarEntry.writeEntryHeader(this.recordBuf);
/* 189 */     this.buffer.writeRecord(this.recordBuf);
/*     */     
/* 191 */     this.currBytes = 0;
/*     */     
/* 193 */     if (paramTarEntry.isDirectory()) {
/* 194 */       this.currSize = 0;
/*     */     } else {
/* 196 */       this.currSize = (int)paramTarEntry.getSize();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 210 */     if (this.assemLen > 0) {
/* 211 */       for (int i = this.assemLen; i < this.assemBuf.length; i++) {
/* 212 */         this.assemBuf[i] = 0;
/*     */       }
/*     */       
/* 215 */       this.buffer.writeRecord(this.assemBuf);
/*     */       
/* 217 */       this.currBytes += this.assemLen;
/* 218 */       this.assemLen = 0;
/*     */     } 
/*     */     
/* 221 */     if (this.currBytes < this.currSize) {
/* 222 */       throw new IOException(""entry closed at '"" + this.currBytes + ""' before the '"" + this.currSize + ""' bytes specified in the header were written"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int paramInt) throws IOException {
/* 236 */     this.oneBuf[0] = (byte)paramInt;
/*     */     
/* 238 */     write(this.oneBuf, 0, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void write(byte[] paramArrayOfbyte) throws IOException { write(paramArrayOfbyte, 0, paramArrayOfbyte.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws IOException {
/* 267 */     if (this.currBytes + paramInt2 > this.currSize) {
/* 268 */       throw new IOException(""request to write '"" + paramInt2 + ""' bytes exceeds size in header of '"" + this.currSize + ""' bytes"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 281 */     if (this.assemLen > 0) {
/* 282 */       if (this.assemLen + paramInt2 >= this.recordBuf.length) {
/* 283 */         int i = this.recordBuf.length - this.assemLen;
/*     */         
/* 285 */         System.arraycopy(this.assemBuf, 0, this.recordBuf, 0, this.assemLen);
/*     */         
/* 287 */         System.arraycopy(paramArrayOfbyte, paramInt1, this.recordBuf, this.assemLen, i);
/*     */         
/* 289 */         this.buffer.writeRecord(this.recordBuf);
/*     */         
/* 291 */         this.currBytes += this.recordBuf.length;
/* 292 */         paramInt1 += i;
/* 293 */         paramInt2 -= i;
/* 294 */         this.assemLen = 0;
/*     */       } else {
/* 296 */         System.arraycopy(paramArrayOfbyte, paramInt1, this.assemBuf, this.assemLen, paramInt2);
/*     */ 
/*     */         
/* 299 */         paramInt1 += paramInt2;
/* 300 */         this.assemLen += paramInt2;
/* 301 */         paramInt2 -= paramInt2;
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 310 */     while (paramInt2 > 0) {
/* 311 */       if (paramInt2 < this.recordBuf.length) {
/* 312 */         System.arraycopy(paramArrayOfbyte, paramInt1, this.assemBuf, this.assemLen, paramInt2);
/*     */ 
/*     */         
/* 315 */         this.assemLen += paramInt2;
/*     */         
/*     */         break;
/*     */       } 
/*     */       
/* 320 */       this.buffer.writeRecord(paramArrayOfbyte, paramInt1);
/*     */       
/* 322 */       int i = this.recordBuf.length;
/*     */       
/* 324 */       this.currBytes += i;
/* 325 */       paramInt2 -= i;
/* 326 */       paramInt1 += i;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeEOFRecord() throws IOException {
/* 335 */     for (byte b = 0; b < this.recordBuf.length; b++) {
/* 336 */       this.recordBuf[b] = 0;
/*     */     }
/*     */     
/* 339 */     this.buffer.writeRecord(this.recordBuf);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarUtils,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarUtils
/*     */ {
/*     */   public static long parseOctal(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/*  80 */     long l = 0L;
/*  81 */     boolean bool = true;
/*  82 */     int i = paramInt1 + paramInt2;
/*     */     
/*  84 */     for (int j = paramInt1; j < i && 
/*  85 */       paramArrayOfbyte[j] != 0; j++) {
/*     */ 
/*     */ 
/*     */       
/*  89 */       if (paramArrayOfbyte[j] == 32 || paramArrayOfbyte[j] == 48) {
/*  90 */         if (bool) {
/*     */           continue;
/*     */         }
/*     */         
/*  94 */         if (paramArrayOfbyte[j] == 32) {
/*     */           break;
/*     */         }
/*     */       } 
/*     */       
/*  99 */       bool = false;
/* 100 */       l = (l << 3L) + (paramArrayOfbyte[j] - 48);
/*     */       continue;
/*     */     } 
/* 103 */     return l;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static StringBuffer parseName(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 115 */     StringBuffer stringBuffer = new StringBuffer(paramInt2);
/* 116 */     int i = paramInt1 + paramInt2;
/*     */     
/* 118 */     for (int j = paramInt1; j < i && 
/* 119 */       paramArrayOfbyte[j] != 0; j++)
/*     */     {
/*     */ 
/*     */       
/* 123 */       stringBuffer.append((char)paramArrayOfbyte[j]);
/*     */     }
/*     */     
/* 126 */     return stringBuffer;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getNameBytes(StringBuffer paramStringBuffer, byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/*     */     byte b;
/* 140 */     for (b = 0; b < paramInt2 && b < paramStringBuffer.length(); b++) {
/* 141 */       paramArrayOfbyte[paramInt1 + b] = (byte)paramStringBuffer.charAt(b);
/*     */     }
/*     */     
/* 144 */     for (; b < paramInt2; b++) {
/* 145 */       paramArrayOfbyte[paramInt1 + b] = 0;
/*     */     }
/*     */     
/* 148 */     return paramInt1 + paramInt2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getOctalBytes(long paramLong, byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 160 */     byte[] arrayOfByte = new byte[paramInt2];
/* 161 */     int i = paramInt2 - 1;
/*     */     
/* 163 */     paramArrayOfbyte[paramInt1 + i] = 0;
/* 164 */     i--;
/* 165 */     paramArrayOfbyte[paramInt1 + i] = 32;
/* 166 */     i--;
/*     */     
/* 168 */     if (paramLong == 0L) {
/* 169 */       paramArrayOfbyte[paramInt1 + i] = 48;
/* 170 */       i--;
/*     */     } else {
/* 172 */       for (long l = paramLong; i >= 0 && l > 0L; i--) {
/* 173 */         paramArrayOfbyte[paramInt1 + i] = (byte)(48 + (byte)(int)(l & 0x7L));
/* 174 */         l >>= 3L;
/*     */       } 
/*     */     } 
/*     */     
/* 178 */     for (; i >= 0; i--) {
/* 179 */       paramArrayOfbyte[paramInt1 + i] = 32;
/*     */     }
/*     */     
/* 182 */     return paramInt1 + paramInt2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getLongOctalBytes(long paramLong, byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 194 */     byte[] arrayOfByte = new byte[paramInt2 + 1];
/*     */     
/* 196 */     getOctalBytes(paramLong, arrayOfByte, 0, paramInt2 + 1);
/* 197 */     System.arraycopy(arrayOfByte, 0, paramArrayOfbyte, paramInt1, paramInt2);
/*     */     
/* 199 */     return paramInt1 + paramInt2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getCheckSumOctalBytes(long paramLong, byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 211 */     getOctalBytes(paramLong, paramArrayOfbyte, paramInt1, paramInt2);
/*     */     
/* 213 */     paramArrayOfbyte[paramInt1 + paramInt2 - 1] = 32;
/* 214 */     paramArrayOfbyte[paramInt1 + paramInt2 - 2] = 0;
/*     */     
/* 216 */     return paramInt1 + paramInt2;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static long computeCheckSum(byte[] paramArrayOfbyte) {
/* 226 */     long l = 0L;
/*     */     
/* 228 */     for (byte b = 0; b < paramArrayOfbyte.length; b++) {
/* 229 */       l += (0xFF & paramArrayOfbyte[b]);
/*     */     }
/*     */     
/* 232 */     return l;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\tar\TarUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.AsiExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AsiExtraField
/*     */   implements ZipExtraField, UnixStat, Cloneable
/*     */ {
/*  89 */   private static final ZipShort HEADER_ID = new ZipShort(30062);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   private int mode = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int uid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private int gid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   private String link = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dirFlag = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public ZipShort getHeaderId() { return HEADER_ID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public ZipShort getLocalFileDataLength() { return new ZipShort(14 + (getLinkedFile().getBytes()).length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public ZipShort getCentralDirectoryLength() { return getLocalFileDataLength(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getLocalFileDataData() {
/* 175 */     byte[] arrayOfByte1 = new byte[getLocalFileDataLength().getValue() - 4];
/* 176 */     System.arraycopy((new ZipShort(getMode())).getBytes(), 0, arrayOfByte1, 0, 2);
/*     */     
/* 178 */     byte[] arrayOfByte2 = getLinkedFile().getBytes();
/* 179 */     System.arraycopy((new ZipLong(arrayOfByte2.length)).getBytes(), 0, arrayOfByte1, 2, 4);
/*     */ 
/*     */     
/* 182 */     System.arraycopy((new ZipShort(getUserId())).getBytes(), 0, arrayOfByte1, 6, 2);
/*     */     
/* 184 */     System.arraycopy((new ZipShort(getGroupId())).getBytes(), 0, arrayOfByte1, 8, 2);
/*     */ 
/*     */     
/* 187 */     System.arraycopy(arrayOfByte2, 0, arrayOfByte1, 10, arrayOfByte2.length);
/*     */     
/* 189 */     this.crc.reset();
/* 190 */     this.crc.update(arrayOfByte1);
/* 191 */     long l = this.crc.getValue();
/*     */     
/* 193 */     byte[] arrayOfByte3 = new byte[arrayOfByte1.length + 4];
/* 194 */     System.arraycopy((new ZipLong(l)).getBytes(), 0, arrayOfByte3, 0, 4);
/* 195 */     System.arraycopy(arrayOfByte1, 0, arrayOfByte3, 4, arrayOfByte1.length);
/* 196 */     return arrayOfByte3;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public byte[] getCentralDirectoryData() { return getLocalFileDataData(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setUserId(int paramInt) { this.uid = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public int getUserId() { return this.uid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setGroupId(int paramInt) { this.gid = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public int getGroupId() { return this.gid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLinkedFile(String paramString) {
/* 253 */     this.link = paramString;
/* 254 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public String getLinkedFile() { return this.link; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public boolean isLink() { return (getLinkedFile().length() != 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setMode(int paramInt) { this.mode = getMode(paramInt); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDirectory(boolean paramBoolean) {
/* 302 */     this.dirFlag = paramBoolean;
/* 303 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public boolean isDirectory() { return (this.dirFlag && !isLink()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseFromLocalFileData(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws ZipException {
/* 323 */     long l1 = (new ZipLong(paramArrayOfbyte, paramInt1)).getValue();
/* 324 */     byte[] arrayOfByte1 = new byte[paramInt2 - 4];
/* 325 */     System.arraycopy(paramArrayOfbyte, paramInt1 + 4, arrayOfByte1, 0, paramInt2 - 4);
/* 326 */     this.crc.reset();
/* 327 */     this.crc.update(arrayOfByte1);
/* 328 */     long l2 = this.crc.getValue();
/* 329 */     if (l1 != l2) {
/* 330 */       throw new ZipException(""bad CRC checksum "" + Long.toHexString(l1) + "" instead of "" + Long.toHexString(l2));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 336 */     int i = (new ZipShort(arrayOfByte1, 0)).getValue();
/* 337 */     byte[] arrayOfByte2 = new byte[(int)(new ZipLong(arrayOfByte1, 2)).getValue()];
/* 338 */     this.uid = (new ZipShort(arrayOfByte1, 6)).getValue();
/* 339 */     this.gid = (new ZipShort(arrayOfByte1, 8)).getValue();
/*     */     
/* 341 */     if (arrayOfByte2.length == 0) {
/* 342 */       this.link = """";
/*     */     } else {
/* 344 */       System.arraycopy(arrayOfByte1, 10, arrayOfByte2, 0, arrayOfByte2.length);
/* 345 */       this.link = new String(arrayOfByte2);
/*     */     } 
/* 347 */     setDirectory(((i & 0x4000) != 0));
/* 348 */     setMode(i);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int getMode(int paramInt) {
/* 357 */     char c = '耀';
/* 358 */     if (isLink()) {
/* 359 */       c = 'ꀀ';
/* 360 */     } else if (isDirectory()) {
/* 361 */       c = '䀀';
/*     */     } 
/* 363 */     return c | paramInt & 0xFFF;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\AsiExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ExtraFieldUtils,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExtraFieldUtils
/*     */ {
/*  77 */   private static Hashtable implementations = new Hashtable(); static  {
/*  78 */     register(AsiExtraField.class);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void register(Class paramClass) {
/*     */     try {
/*  91 */       ZipExtraField zipExtraField = paramClass.newInstance();
/*  92 */       implementations.put(zipExtraField.getHeaderId(), paramClass);
/*     */     } catch (ClassCastException classCastException) {
/*  94 */       throw new RuntimeException(paramClass + "" doesn't implement ZipExtraField"");
/*     */     } catch (InstantiationException instantiationException) {
/*     */       
/*  97 */       throw new RuntimeException(paramClass + "" is not a concrete class"");
/*     */     } catch (IllegalAccessException illegalAccessException) {
/*  99 */       throw new RuntimeException(paramClass + ""'s no-arg constructor is not public"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField createExtraField(ZipShort paramZipShort) throws InstantiationException, IllegalAccessException {
/* 112 */     Class clazz = (Class)implementations.get(paramZipShort);
/* 113 */     if (clazz != null) {
/* 114 */       return clazz.newInstance();
/*     */     }
/* 116 */     UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();
/* 117 */     unrecognizedExtraField.setHeaderId(paramZipShort);
/* 118 */     return unrecognizedExtraField;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField[] parse(byte[] paramArrayOfbyte) throws ZipException {
/* 128 */     Vector vector = new Vector();
/* 129 */     int i = 0;
/* 130 */     while (i <= paramArrayOfbyte.length - 4) {
/* 131 */       ZipShort zipShort = new ZipShort(paramArrayOfbyte, i);
/* 132 */       int j = (new ZipShort(paramArrayOfbyte, i + 2)).getValue();
/* 133 */       if (i + 4 + j > paramArrayOfbyte.length) {
/* 134 */         throw new ZipException(""data starting at "" + i + "" is in unknown format"");
/*     */       }
/*     */       try {
/* 137 */         ZipExtraField zipExtraField = createExtraField(zipShort);
/* 138 */         zipExtraField.parseFromLocalFileData(paramArrayOfbyte, i + 4, j);
/* 139 */         vector.addElement(zipExtraField);
/*     */       } catch (InstantiationException instantiationException) {
/* 141 */         throw new ZipException(instantiationException.getMessage());
/*     */       } catch (IllegalAccessException illegalAccessException) {
/* 143 */         throw new ZipException(illegalAccessException.getMessage());
/*     */       } 
/* 145 */       i += j + 4;
/*     */     } 
/* 147 */     if (i != paramArrayOfbyte.length) {
/* 148 */       throw new ZipException(""data starting at "" + i + "" is in unknown format"");
/*     */     }
/*     */     
/* 151 */     ZipExtraField[] arrayOfZipExtraField = new ZipExtraField[vector.size()];
/* 152 */     vector.copyInto((Object[])arrayOfZipExtraField);
/* 153 */     return arrayOfZipExtraField;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeLocalFileDataData(ZipExtraField[] paramArrayOfZipExtraField) {
/* 162 */     int i = 4 * paramArrayOfZipExtraField.length;
/* 163 */     for (byte b1 = 0; b1 < paramArrayOfZipExtraField.length; b1++) {
/* 164 */       i += paramArrayOfZipExtraField[b1].getLocalFileDataLength().getValue();
/*     */     }
/* 166 */     byte[] arrayOfByte = new byte[i];
/* 167 */     int j = 0;
/* 168 */     for (byte b2 = 0; b2 < paramArrayOfZipExtraField.length; b2++) {
/* 169 */       System.arraycopy(paramArrayOfZipExtraField[b2].getHeaderId().getBytes(), 0, arrayOfByte, j, 2);
/*     */       
/* 171 */       System.arraycopy(paramArrayOfZipExtraField[b2].getLocalFileDataLength().getBytes(), 0, arrayOfByte, j + 2, 2);
/*     */       
/* 173 */       byte[] arrayOfByte1 = paramArrayOfZipExtraField[b2].getLocalFileDataData();
/* 174 */       System.arraycopy(arrayOfByte1, 0, arrayOfByte, j + 4, arrayOfByte1.length);
/* 175 */       j += arrayOfByte1.length + 4;
/*     */     } 
/* 177 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeCentralDirectoryData(ZipExtraField[] paramArrayOfZipExtraField) {
/* 186 */     int i = 4 * paramArrayOfZipExtraField.length;
/* 187 */     for (byte b1 = 0; b1 < paramArrayOfZipExtraField.length; b1++) {
/* 188 */       i += paramArrayOfZipExtraField[b1].getCentralDirectoryLength().getValue();
/*     */     }
/* 190 */     byte[] arrayOfByte = new byte[i];
/* 191 */     int j = 0;
/* 192 */     for (byte b2 = 0; b2 < paramArrayOfZipExtraField.length; b2++) {
/* 193 */       System.arraycopy(paramArrayOfZipExtraField[b2].getHeaderId().getBytes(), 0, arrayOfByte, j, 2);
/*     */       
/* 195 */       System.arraycopy(paramArrayOfZipExtraField[b2].getCentralDirectoryLength().getBytes(), 0, arrayOfByte, j + 2, 2);
/*     */       
/* 197 */       byte[] arrayOfByte1 = paramArrayOfZipExtraField[b2].getCentralDirectoryData();
/* 198 */       System.arraycopy(arrayOfByte1, 0, arrayOfByte, j + 4, arrayOfByte1.length);
/* 199 */       j += arrayOfByte1.length + 4;
/*     */     } 
/* 201 */     return arrayOfByte;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ExtraFieldUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnixStat,"package org.apache.tools.zip;
public interface UnixStat {
  public static final int PERM_MASK = 4095;
  public static final int LINK_FLAG = 40960;
  public static final int FILE_FLAG = 32768;
  public static final int DIR_FLAG = 16384;
  public static final int DEFAULT_LINK_PERM = 511;
  public static final int DEFAULT_DIR_PERM = 493;
  public static final int DEFAULT_FILE_PERM = 420;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\UnixStat.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnrecognizedExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnrecognizedExtraField
/*     */   implements ZipExtraField
/*     */ {
/*     */   private ZipShort headerId;
/*     */   private byte[] localData;
/*     */   private byte[] centralData;
/*     */   
/*  77 */   public void setHeaderId(ZipShort paramZipShort) { this.headerId = paramZipShort; }
/*     */ 
/*     */   
/*  80 */   public ZipShort getHeaderId() { return this.headerId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setLocalFileDataData(byte[] paramArrayOfbyte) { this.localData = paramArrayOfbyte; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public ZipShort getLocalFileDataLength() { return new ZipShort(this.localData.length); }
/*     */ 
/*     */   
/*  98 */   public byte[] getLocalFileDataData() { return this.localData; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setCentralDirectoryData(byte[] paramArrayOfbyte) { this.centralData = paramArrayOfbyte; }
/*     */ 
/*     */   
/*     */   public ZipShort getCentralDirectoryLength() {
/* 113 */     if (this.centralData != null) {
/* 114 */       return new ZipShort(this.centralData.length);
/*     */     }
/* 116 */     return getLocalFileDataLength();
/*     */   }
/*     */   
/*     */   public byte[] getCentralDirectoryData() {
/* 120 */     if (this.centralData != null) {
/* 121 */       return this.centralData;
/*     */     }
/* 123 */     return getLocalFileDataData();
/*     */   }
/*     */   
/*     */   public void parseFromLocalFileData(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) {
/* 127 */     byte[] arrayOfByte = new byte[paramInt2];
/* 128 */     System.arraycopy(paramArrayOfbyte, paramInt1, arrayOfByte, 0, paramInt2);
/* 129 */     setLocalFileDataData(arrayOfByte);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\UnrecognizedExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipEntry,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipEntry
/*     */   extends ZipEntry
/*     */ {
/*  71 */   private int internalAttributes = 0;
/*  72 */   private long externalAttributes = 0L;
/*  73 */   private Vector extraFields = new Vector();
/*     */ 
/*     */   
/*     */   private Long compressedSize;
/*     */ 
/*     */   
/*     */   public ZipEntry(String paramString)
/*     */   {
/*  81 */     super(paramString);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 302 */     this.compressedSize = null; } public ZipEntry(ZipEntry paramZipEntry) throws ZipException { this(paramZipEntry); setInternalAttributes(paramZipEntry.getInternalAttributes()); setExternalAttributes(paramZipEntry.getExternalAttributes()); setExtraFields(paramZipEntry.getExtraFields()); } public Object clone() { ZipEntry zipEntry = null; try { zipEntry = new ZipEntry((ZipEntry)super.clone()); } catch (Exception exception) { exception.printStackTrace(); }  zipEntry.setInternalAttributes(getInternalAttributes()); zipEntry.setExternalAttributes(getExternalAttributes()); zipEntry.setExtraFields(getExtraFields()); return zipEntry; } public int getInternalAttributes() { return this.internalAttributes; } public void setInternalAttributes(int paramInt) { this.internalAttributes = paramInt; } public ZipEntry(ZipEntry paramZipEntry) throws ZipException { super(paramZipEntry.getName()); this.compressedSize = null; setComment(paramZipEntry.getComment()); setMethod(paramZipEntry.getMethod()); setTime(paramZipEntry.getTime()); long l1 = paramZipEntry.getSize(); if (l1 > 0L)
/*     */       setSize(l1);  long l2 = paramZipEntry.getCompressedSize(); if (l2 > 0L)
/*     */       setComprSize(l2);  long l3 = paramZipEntry.getCrc(); if (l3 > 0L)
/*     */       setCrc(l3);  byte[] arrayOfByte = paramZipEntry.getExtra(); if (arrayOfByte != null) {
/*     */       setExtraFields(ExtraFieldUtils.parse(arrayOfByte));
/*     */     } else {
/*     */       setExtra();
/*     */     }  }
/*     */   public long getExternalAttributes() { return this.externalAttributes; } public void setExternalAttributes(long paramLong) { this.externalAttributes = paramLong; } public void setExtraFields(ZipExtraField[] paramArrayOfZipExtraField) { this.extraFields.removeAllElements();
/*     */     for (byte b = 0; b < paramArrayOfZipExtraField.length; b++)
/*     */       this.extraFields.addElement(paramArrayOfZipExtraField[b]); 
/* 313 */     setExtra(); } public void setComprSize(long paramLong) { if (haveSetCompressedSize())
/* 314 */     { performSetCompressedSize(this, paramLong); }
/*     */     else
/* 316 */     { this.compressedSize = new Long(paramLong); }  } public ZipExtraField[] getExtraFields() { ZipExtraField[] arrayOfZipExtraField = new ZipExtraField[this.extraFields.size()]; this.extraFields.copyInto((Object[])arrayOfZipExtraField); return arrayOfZipExtraField; } public void addExtraField(ZipExtraField paramZipExtraField) { ZipShort zipShort = paramZipExtraField.getHeaderId(); boolean bool = false; for (byte b = 0; !bool && b < this.extraFields.size(); b++) { if (((ZipExtraField)this.extraFields.elementAt(b)).getHeaderId().equals(zipShort)) { this.extraFields.setElementAt(paramZipExtraField, b); bool = true; }  }  if (!bool)
/*     */       this.extraFields.addElement(paramZipExtraField);  setExtra(); } public void removeExtraField(ZipShort paramZipShort) { boolean bool = false; for (byte b = 0; !bool && b < this.extraFields.size(); b++) { if (((ZipExtraField)this.extraFields.elementAt(b)).getHeaderId().equals(paramZipShort)) { this.extraFields.removeElementAt(b); bool = true; }  }
/*     */      if (!bool)
/*     */       throw new NoSuchElementException();  setExtra(); }
/*     */   public void setExtra(byte[] paramArrayOfbyte) throws RuntimeException { try { setExtraFields(ExtraFieldUtils.parse(paramArrayOfbyte)); }
/*     */     catch (Exception exception) { throw new RuntimeException(exception.getMessage()); }
/*     */      }
/*     */   protected void setExtra() { super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields())); }
/*     */   public byte[] getLocalFileDataExtra() { byte[] arrayOfByte = getExtra(); return (arrayOfByte != null) ? arrayOfByte : new byte[0]; }
/*     */   public byte[] getCentralDirectoryExtra() { return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields()); }
/* 326 */   public long getCompressedSize() { if (this.compressedSize != null)
/*     */     {
/* 328 */       return this.compressedSize.longValue();
/*     */     }
/* 330 */     return super.getCompressedSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 338 */   private static Method setCompressedSizeMethod = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   private static Object lockReflection = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean triedToGetMethod = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean haveSetCompressedSize() {
/* 358 */     checkSCS();
/* 359 */     return (setCompressedSizeMethod != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void performSetCompressedSize(ZipEntry paramZipEntry, long paramLong) {
/* 368 */     Long[] arrayOfLong = { new Long(paramLong) };
/*     */     try {
/* 370 */       setCompressedSizeMethod.invoke(paramZipEntry, (Object[])arrayOfLong);
/*     */     } catch (InvocationTargetException invocationTargetException) {
/* 372 */       Throwable throwable = invocationTargetException.getTargetException();
/* 373 */       throw new RuntimeException(""Exception setting the compressed size of "" + paramZipEntry + "": "" + throwable.getMessage());
/*     */     }
/*     */     catch (Throwable throwable) {
/*     */       
/* 377 */       throw new RuntimeException(""Exception setting the compressed size of "" + paramZipEntry + "": "" + throwable.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void checkSCS() {
/* 389 */     if (!triedToGetMethod)
/* 390 */       synchronized (lockReflection) {
/* 391 */         triedToGetMethod = true;
/*     */         try {
/* 393 */           setCompressedSizeMethod = ZipEntry.class.getMethod(""setCompressedSize"", new Class[] { long.class });
/*     */         
/*     */         }
/* 396 */         catch (NoSuchMethodException noSuchMethodException) {}
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ZipEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipExtraField,"package org.apache.tools.zip;
import java.util.zip.ZipException;
public interface ZipExtraField {
  ZipShort getHeaderId();
  ZipShort getLocalFileDataLength();
  ZipShort getCentralDirectoryLength();
  byte[] getLocalFileDataData();
  byte[] getCentralDirectoryData();
  void parseFromLocalFileData(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws ZipException;
}
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ZipExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipLong,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipLong
/*     */   implements Cloneable
/*     */ {
/*     */   private long value;
/*     */   
/*  74 */   public ZipLong(long paramLong) { this.value = paramLong; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipLong(byte[] paramArrayOfbyte) { this(paramArrayOfbyte, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipLong(byte[] paramArrayOfbyte, int paramInt) {
/*  92 */     this.value = (paramArrayOfbyte[paramInt + 3] << 24) & 0xFF000000L;
/*  93 */     this.value += (paramArrayOfbyte[paramInt + 2] << 16 & 0xFF0000);
/*  94 */     this.value += (paramArrayOfbyte[paramInt + 1] << 8 & 0xFF00);
/*  95 */     this.value += (paramArrayOfbyte[paramInt] & 0xFF);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 104 */     byte[] arrayOfByte = new byte[4];
/* 105 */     arrayOfByte[0] = (byte)(int)(this.value & 0xFFL);
/* 106 */     arrayOfByte[1] = (byte)(int)((this.value & 0xFF00L) >> 8L);
/* 107 */     arrayOfByte[2] = (byte)(int)((this.value & 0xFF0000L) >> 16L);
/* 108 */     arrayOfByte[3] = (byte)(int)((this.value & 0xFF000000L) >> 24L);
/* 109 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public long getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object paramObject) {
/* 127 */     if (paramObject == null || !(paramObject instanceof ZipLong)) {
/* 128 */       return false;
/*     */     }
/* 130 */     return (this.value == ((ZipLong)paramObject).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public int hashCode() { return (int)this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ZipLong.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipOutputStream,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Date;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.Deflater;
/*     */ import java.util.zip.DeflaterOutputStream;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipOutputStream
/*     */   extends DeflaterOutputStream
/*     */ {
/*     */   private ZipEntry entry;
/*  97 */   private String comment = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   private int level = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   private int method = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   private Vector entries = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   private long written = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   private long dataStart = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   private ZipLong cdOffset = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   private ZipLong cdLength = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   private static final byte[] ZERO = new byte[] { 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   private static final byte[] LZERO = new byte[] { 0, 0, 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   private Hashtable offsets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int DEFLATED = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int STORED = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public ZipOutputStream(OutputStream paramOutputStream) { super(paramOutputStream, new Deflater(-1, true)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 220 */   public void setEncoding(String paramString) { this.encoding = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void finish() throws IOException {
/* 245 */     closeEntry();
/* 246 */     this.cdOffset = new ZipLong(this.written);
/* 247 */     for (byte b = 0; b < this.entries.size(); b++) {
/* 248 */       writeCentralFileHeader(this.entries.elementAt(b));
/*     */     }
/* 250 */     this.cdLength = new ZipLong(this.written - this.cdOffset.getValue());
/* 251 */     writeCentralDirectoryEnd();
/* 252 */     this.offsets.clear();
/* 253 */     this.entries.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 262 */     if (this.entry == null) {
/*     */       return;
/*     */     }
/*     */     
/* 266 */     long l = this.crc.getValue();
/* 267 */     this.crc.reset();
/*     */     
/* 269 */     if (this.entry.getMethod() == 8) {
/* 270 */       this.def.finish();
/* 271 */       while (!this.def.finished()) {
/* 272 */         deflate();
/*     */       }
/*     */       
/* 275 */       this.entry.setSize(this.def.getTotalIn());
/* 276 */       this.entry.setComprSize(this.def.getTotalOut());
/* 277 */       this.entry.setCrc(l);
/*     */       
/* 279 */       this.def.reset();
/*     */       
/* 281 */       this.written += this.entry.getCompressedSize();
/*     */     } else {
/* 283 */       if (this.entry.getCrc() != l) {
/* 284 */         throw new ZipException(""bad CRC checksum for entry "" + this.entry.getName() + "": "" + Long.toHexString(this.entry.getCrc()) + "" instead of "" + Long.toHexString(l));
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 291 */       if (this.entry.getSize() != this.written - this.dataStart) {
/* 292 */         throw new ZipException(""bad size for entry "" + this.entry.getName() + "": "" + this.entry.getSize() + "" instead of "" + (this.written - this.dataStart));
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 301 */     writeDataDescriptor(this.entry);
/* 302 */     this.entry = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(ZipEntry paramZipEntry) throws IOException {
/* 311 */     closeEntry();
/*     */     
/* 313 */     this.entry = paramZipEntry;
/* 314 */     this.entries.addElement(this.entry);
/*     */     
/* 316 */     if (this.entry.getMethod() == -1) {
/* 317 */       this.entry.setMethod(this.method);
/*     */     }
/*     */     
/* 320 */     if (this.entry.getTime() == -1L) {
/* 321 */       this.entry.setTime(System.currentTimeMillis());
/*     */     }
/*     */     
/* 324 */     if (this.entry.getMethod() == 0) {
/* 325 */       if (this.entry.getSize() == -1L) {
/* 326 */         throw new ZipException(""uncompressed size is required for STORED method"");
/*     */       }
/* 328 */       if (this.entry.getCrc() == -1L) {
/* 329 */         throw new ZipException(""crc checksum is required for STORED method"");
/*     */       }
/* 331 */       this.entry.setComprSize(this.entry.getSize());
/*     */     } else {
/* 333 */       this.def.setLevel(this.level);
/*     */     } 
/* 335 */     writeLocalFileHeader(this.entry);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   public void setComment(String paramString) { this.comment = paramString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public void setLevel(int paramInt) { this.level = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 366 */   public void setMethod(int paramInt) { this.method = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws IOException {
/* 376 */     if (this.entry.getMethod() == 8) {
/* 377 */       super.write(paramArrayOfbyte, paramInt1, paramInt2);
/*     */     } else {
/* 379 */       this.out.write(paramArrayOfbyte, paramInt1, paramInt2);
/* 380 */       this.written += paramInt2;
/*     */     } 
/* 382 */     this.crc.update(paramArrayOfbyte, paramInt1, paramInt2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 393 */   protected static final ZipLong LFH_SIG = new ZipLong(67324752L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 399 */   protected static final ZipLong DD_SIG = new ZipLong(134695760L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   protected static final ZipLong CFH_SIG = new ZipLong(33639248L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 411 */   protected static final ZipLong EOCD_SIG = new ZipLong(101010256L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeLocalFileHeader(ZipEntry paramZipEntry) throws IOException {
/* 419 */     this.offsets.put(paramZipEntry, new ZipLong(this.written));
/*     */     
/* 421 */     this.out.write(LFH_SIG.getBytes());
/* 422 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */     
/* 426 */     if (paramZipEntry.getMethod() == 8) {
/*     */ 
/*     */       
/* 429 */       this.out.write((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 432 */       this.out.write((new ZipShort(8)).getBytes());
/*     */     } else {
/* 434 */       this.out.write((new ZipShort(10)).getBytes());
/* 435 */       this.out.write(ZERO);
/*     */     } 
/* 437 */     this.written += 4L;
/*     */ 
/*     */     
/* 440 */     this.out.write((new ZipShort(paramZipEntry.getMethod())).getBytes());
/* 441 */     this.written += 2L;
/*     */ 
/*     */     
/* 444 */     this.out.write(toDosTime(new Date(paramZipEntry.getTime())).getBytes());
/* 445 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 450 */     if (paramZipEntry.getMethod() == 8) {
/* 451 */       this.out.write(LZERO);
/* 452 */       this.out.write(LZERO);
/* 453 */       this.out.write(LZERO);
/*     */     } else {
/* 455 */       this.out.write((new ZipLong(paramZipEntry.getCrc())).getBytes());
/* 456 */       this.out.write((new ZipLong(paramZipEntry.getSize())).getBytes());
/* 457 */       this.out.write((new ZipLong(paramZipEntry.getSize())).getBytes());
/*     */     } 
/* 459 */     this.written += 12L;
/*     */ 
/*     */     
/* 462 */     byte[] arrayOfByte1 = getBytes(paramZipEntry.getName());
/* 463 */     this.out.write((new ZipShort(arrayOfByte1.length)).getBytes());
/* 464 */     this.written += 2L;
/*     */ 
/*     */     
/* 467 */     byte[] arrayOfByte2 = paramZipEntry.getLocalFileDataExtra();
/* 468 */     this.out.write((new ZipShort(arrayOfByte2.length)).getBytes());
/* 469 */     this.written += 2L;
/*     */ 
/*     */     
/* 472 */     this.out.write(arrayOfByte1);
/* 473 */     this.written += arrayOfByte1.length;
/*     */ 
/*     */     
/* 476 */     this.out.write(arrayOfByte2);
/* 477 */     this.written += arrayOfByte2.length;
/*     */     
/* 479 */     this.dataStart = this.written;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeDataDescriptor(ZipEntry paramZipEntry) throws IOException {
/* 488 */     if (paramZipEntry.getMethod() != 8) {
/*     */       return;
/*     */     }
/* 491 */     this.out.write(DD_SIG.getBytes());
/* 492 */     this.out.write((new ZipLong(this.entry.getCrc())).getBytes());
/* 493 */     this.out.write((new ZipLong(this.entry.getCompressedSize())).getBytes());
/* 494 */     this.out.write((new ZipLong(this.entry.getSize())).getBytes());
/* 495 */     this.written += 16L;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralFileHeader(ZipEntry paramZipEntry) throws IOException {
/* 504 */     this.out.write(CFH_SIG.getBytes());
/* 505 */     this.written += 4L;
/*     */ 
/*     */     
/* 508 */     this.out.write((new ZipShort(20)).getBytes());
/* 509 */     this.written += 2L;
/*     */ 
/*     */ 
/*     */     
/* 513 */     if (paramZipEntry.getMethod() == 8) {
/*     */ 
/*     */       
/* 516 */       this.out.write((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 519 */       this.out.write((new ZipShort(8)).getBytes());
/*     */     } else {
/* 521 */       this.out.write((new ZipShort(10)).getBytes());
/* 522 */       this.out.write(ZERO);
/*     */     } 
/* 524 */     this.written += 4L;
/*     */ 
/*     */     
/* 527 */     this.out.write((new ZipShort(paramZipEntry.getMethod())).getBytes());
/* 528 */     this.written += 2L;
/*     */ 
/*     */     
/* 531 */     this.out.write(toDosTime(new Date(paramZipEntry.getTime())).getBytes());
/* 532 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 537 */     this.out.write((new ZipLong(paramZipEntry.getCrc())).getBytes());
/* 538 */     this.out.write((new ZipLong(paramZipEntry.getCompressedSize())).getBytes());
/* 539 */     this.out.write((new ZipLong(paramZipEntry.getSize())).getBytes());
/* 540 */     this.written += 12L;
/*     */ 
/*     */     
/* 543 */     byte[] arrayOfByte1 = getBytes(paramZipEntry.getName());
/* 544 */     this.out.write((new ZipShort(arrayOfByte1.length)).getBytes());
/* 545 */     this.written += 2L;
/*     */ 
/*     */     
/* 548 */     byte[] arrayOfByte2 = paramZipEntry.getCentralDirectoryExtra();
/* 549 */     this.out.write((new ZipShort(arrayOfByte2.length)).getBytes());
/* 550 */     this.written += 2L;
/*     */ 
/*     */     
/* 553 */     String str = paramZipEntry.getComment();
/* 554 */     if (str == null) {
/* 555 */       str = """";
/*     */     }
/* 557 */     byte[] arrayOfByte3 = getBytes(str);
/* 558 */     this.out.write((new ZipShort(arrayOfByte3.length)).getBytes());
/* 559 */     this.written += 2L;
/*     */ 
/*     */     
/* 562 */     this.out.write(ZERO);
/* 563 */     this.written += 2L;
/*     */ 
/*     */     
/* 566 */     this.out.write((new ZipShort(paramZipEntry.getInternalAttributes())).getBytes());
/* 567 */     this.written += 2L;
/*     */ 
/*     */     
/* 570 */     this.out.write((new ZipLong(paramZipEntry.getExternalAttributes())).getBytes());
/* 571 */     this.written += 4L;
/*     */ 
/*     */     
/* 574 */     this.out.write(((ZipLong)this.offsets.get(paramZipEntry)).getBytes());
/* 575 */     this.written += 4L;
/*     */ 
/*     */     
/* 578 */     this.out.write(arrayOfByte1);
/* 579 */     this.written += arrayOfByte1.length;
/*     */ 
/*     */     
/* 582 */     this.out.write(arrayOfByte2);
/* 583 */     this.written += arrayOfByte2.length;
/*     */ 
/*     */     
/* 586 */     this.out.write(arrayOfByte3);
/* 587 */     this.written += arrayOfByte3.length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralDirectoryEnd() throws IOException {
/* 596 */     this.out.write(EOCD_SIG.getBytes());
/*     */ 
/*     */     
/* 599 */     this.out.write(ZERO);
/* 600 */     this.out.write(ZERO);
/*     */ 
/*     */     
/* 603 */     byte[] arrayOfByte1 = (new ZipShort(this.entries.size())).getBytes();
/* 604 */     this.out.write(arrayOfByte1);
/* 605 */     this.out.write(arrayOfByte1);
/*     */ 
/*     */     
/* 608 */     this.out.write(this.cdLength.getBytes());
/* 609 */     this.out.write(this.cdOffset.getBytes());
/*     */ 
/*     */     
/* 612 */     byte[] arrayOfByte2 = getBytes(this.comment);
/* 613 */     this.out.write((new ZipShort(arrayOfByte2.length)).getBytes());
/* 614 */     this.out.write(arrayOfByte2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 622 */   private static final ZipLong DOS_TIME_MIN = new ZipLong(8448L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static ZipLong toDosTime(Date paramDate) {
/* 632 */     int i = paramDate.getYear() + 1900;
/* 633 */     int j = paramDate.getMonth() + 1;
/* 634 */     if (i < 1980) {
/* 635 */       return DOS_TIME_MIN;
/*     */     }
/* 637 */     long l = (i - 1980 << 25 | j << 21 | paramDate.getDate() << 16 | paramDate.getHours() << 11 | paramDate.getMinutes() << 5 | paramDate.getSeconds() >> 1);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 644 */     byte[] arrayOfByte = new byte[4];
/* 645 */     arrayOfByte[0] = (byte)(int)(l & 0xFFL);
/* 646 */     arrayOfByte[1] = (byte)(int)((l & 0xFF00L) >> 8L);
/* 647 */     arrayOfByte[2] = (byte)(int)((l & 0xFF0000L) >> 16L);
/* 648 */     arrayOfByte[3] = (byte)(int)((l & 0xFF000000L) >> 24L);
/* 649 */     return new ZipLong(arrayOfByte);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected byte[] getBytes(String paramString) throws ZipException {
/* 659 */     if (this.encoding == null) {
/* 660 */       return paramString.getBytes();
/*     */     }
/*     */     try {
/* 663 */       return paramString.getBytes(this.encoding);
/*     */     } catch (UnsupportedEncodingException unsupportedEncodingException) {
/* 665 */       throw new ZipException(unsupportedEncodingException.getMessage());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ZipOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipShort,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipShort
/*     */   implements Cloneable
/*     */ {
/*     */   private int value;
/*     */   
/*  74 */   public ZipShort(int paramInt) { this.value = paramInt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipShort(byte[] paramArrayOfbyte) { this(paramArrayOfbyte, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipShort(byte[] paramArrayOfbyte, int paramInt) {
/*  92 */     this.value = paramArrayOfbyte[paramInt + 1] << 8 & 0xFF00;
/*  93 */     this.value += paramArrayOfbyte[paramInt] & 0xFF;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 102 */     byte[] arrayOfByte = new byte[2];
/* 103 */     arrayOfByte[0] = (byte)(this.value & 0xFF);
/* 104 */     arrayOfByte[1] = (byte)((this.value & 0xFF00) >> 8);
/* 105 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public int getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object paramObject) {
/* 123 */     if (paramObject == null || !(paramObject instanceof ZipShort)) {
/* 124 */       return false;
/*     */     }
/* 126 */     return (this.value == ((ZipShort)paramObject).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public int hashCode() { return this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.4.1.jar!\org\apache\tools\zip\ZipShort.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
