metric_name,file
org.apache.synapse.Command,"package org.apache.synapse;
public interface Command {
  void execute();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\Command.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.FaultHandler,"/*     */ package org.apache.synapse;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.io.Writer;
/*     */ import java.util.Stack;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class FaultHandler
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(FaultHandler.class);
/*  40 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*     */   public void handleFault(MessageContext synCtx) {
/*  44 */     boolean traceOn = (synCtx.getTracingState() == 1);
/*  45 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  47 */     if (traceOrDebugOn) {
/*  48 */       traceOrDebugWarn(traceOn, ""FaultHandler executing impl: "" + getClass().getName());
/*     */     }
/*     */     
/*     */     try {
/*  52 */       synCtx.getServiceLog().info(""FaultHandler executing impl: "" + getClass().getName());
/*  53 */       onFault(synCtx);
/*     */     }
/*  55 */     catch (SynapseException e) {
/*     */       
/*  57 */       Stack<FaultHandler> faultStack = synCtx.getFaultStack();
/*  58 */       if (faultStack != null && !faultStack.isEmpty()) {
/*  59 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleFault(MessageContext synCtx, Exception e) {
/*  71 */     boolean traceOn = (synCtx.getTracingState() == 1);
/*  72 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  74 */     if (synCtx.getProperty(""ERROR_CODE"") == null) {
/*  75 */       synCtx.setProperty(""ERROR_CODE"", ""00000"");
/*     */     }
/*  77 */     if (synCtx.getProperty(""ERROR_MESSAGE"") == null)
/*     */     {
/*  79 */       synCtx.setProperty(""ERROR_MESSAGE"", e.getMessage().split(""\n"")[0]);
/*     */     }
/*  81 */     synCtx.setProperty(""ERROR_DETAIL"", getStackTrace(e));
/*     */     
/*  83 */     if (traceOrDebugOn) {
/*  84 */       traceOrDebugWarn(traceOn, ""Fault handler - setting ERROR_MESSAGE : "" + synCtx.getProperty(""ERROR_MESSAGE""));
/*     */       
/*  86 */       traceOrDebugWarn(traceOn, ""Fault handler - setting ERROR_DETAIL : "" + synCtx.getProperty(""ERROR_DETAIL""));
/*     */     } 
/*     */ 
/*     */     
/*  90 */     synCtx.getServiceLog().warn(""Fault handler - setting ERROR_MESSAGE : "" + synCtx.getProperty(""ERROR_MESSAGE""));
/*     */ 
/*     */     
/*     */     try {
/*  94 */       onFault(synCtx);
/*     */     }
/*  96 */     catch (SynapseException se) {
/*     */       
/*  98 */       Stack<FaultHandler> faultStack = synCtx.getFaultStack();
/*  99 */       if (faultStack != null && !faultStack.isEmpty()) {
/* 100 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx, se);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract void onFault(MessageContext paramMessageContext);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStackTrace(Throwable aThrowable) {
/* 118 */     Writer result = new StringWriter();
/* 119 */     PrintWriter printWriter = new PrintWriter(result);
/* 120 */     aThrowable.printStackTrace(printWriter);
/* 121 */     return result.toString();
/*     */   }
/*     */   
/*     */   private void traceOrDebugWarn(boolean traceOn, String msg) {
/* 125 */     if (traceOn) {
/* 126 */       trace.warn(msg);
/*     */     }
/* 128 */     log.warn(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\FaultHandler.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.ManagedLifecycle,"package org.apache.synapse;
import org.apache.synapse.core.SynapseEnvironment;
public interface ManagedLifecycle {
  void init(SynapseEnvironment paramSynapseEnvironment);
  void destroy();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\ManagedLifecycle.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.Mediator,"package org.apache.synapse;
public interface Mediator {
  boolean mediate(MessageContext paramMessageContext);
  String getType();
  int getTraceState();
  void setTraceState(int paramInt);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\Mediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.MessageContext,"package org.apache.synapse;
import java.util.Set;
import java.util.Stack;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axis2.AxisFault;
import org.apache.axis2.addressing.EndpointReference;
import org.apache.axis2.addressing.RelatesTo;
import org.apache.commons.logging.Log;
import org.apache.synapse.config.SynapseConfiguration;
import org.apache.synapse.core.SynapseEnvironment;
import org.apache.synapse.endpoints.Endpoint;
public interface MessageContext {
  SynapseConfiguration getConfiguration();
  void setConfiguration(SynapseConfiguration paramSynapseConfiguration);
  SynapseEnvironment getEnvironment();
  void setEnvironment(SynapseEnvironment paramSynapseEnvironment);
  Mediator getMainSequence();
  Mediator getFaultSequence();
  Mediator getSequence(String paramString);
  Endpoint getEndpoint(String paramString);
  Object getProperty(String paramString);
  Object getEntry(String paramString);
  void setProperty(String paramString, Object paramObject);
  Set getPropertyKeySet();
  SOAPEnvelope getEnvelope();
  void setEnvelope(SOAPEnvelope paramSOAPEnvelope) throws AxisFault;
  EndpointReference getFaultTo();
  void setFaultTo(EndpointReference paramEndpointReference);
  EndpointReference getFrom();
  void setFrom(EndpointReference paramEndpointReference);
  String getMessageID();
  void setMessageID(String paramString);
  RelatesTo getRelatesTo();
  void setRelatesTo(RelatesTo[] paramArrayOfRelatesTo);
  EndpointReference getReplyTo();
  void setReplyTo(EndpointReference paramEndpointReference);
  EndpointReference getTo();
  void setTo(EndpointReference paramEndpointReference);
  void setWSAAction(String paramString);
  String getWSAAction();
  String getSoapAction();
  void setSoapAction(String paramString);
  void setWSAMessageID(String paramString);
  String getWSAMessageID();
  boolean isDoingMTOM();
  boolean isDoingSWA();
  void setDoingMTOM(boolean paramBoolean);
  void setDoingSWA(boolean paramBoolean);
  boolean isDoingPOX();
  void setDoingPOX(boolean paramBoolean);
  boolean isSOAP11();
  void setResponse(boolean paramBoolean);
  boolean isResponse();
  void setFaultResponse(boolean paramBoolean);
  boolean isFaultResponse();
  int getTracingState();
  void setTracingState(int paramInt);
  Stack getFaultStack();
  void pushFaultHandler(FaultHandler paramFaultHandler);
  Log getServiceLog();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\MessageContext.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.ServerManager,"/*     */ package org.apache.synapse;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.net.ServerSocket;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.ConfigurationContextFactory;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.description.TransportInDescription;
/*     */ import org.apache.axis2.engine.ListenerManager;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ServerManager
/*     */ {
/*     */   private static ServerManager instance;
/*  44 */   private static final Log log = LogFactory.getLog(ServerManager.class);
/*     */   
/*     */   private String axis2Repolocation;
/*     */   
/*     */   private ListenerManager listenerManager;
/*     */   
/*     */   private ConfigurationContext configctx;
/*     */ 
/*     */   
/*     */   public static ServerManager getInstance() {
/*  54 */     if (instance == null) {
/*  55 */       instance = new ServerManager();
/*     */     }
/*  57 */     return instance;
/*     */   }
/*     */ 
/*     */   
/*  61 */   public void setAxis2Repolocation(String axis2Repolocation) { this.axis2Repolocation = axis2Repolocation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void start() {
/*  69 */     if (this.axis2Repolocation == null) {
/*  70 */       log.fatal(""The Axis2 Repository must be provided"");
/*     */       return;
/*     */     } 
/*  73 */     log.info(""Using the Axis2 Repository "" + (new File(this.axis2Repolocation)).getAbsolutePath());
/*     */     
/*     */     try {
/*  76 */       this.configctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(this.axis2Repolocation, null);
/*     */ 
/*     */       
/*  79 */       this.listenerManager = this.configctx.getListenerManager();
/*  80 */       if (this.listenerManager == null) {
/*  81 */         this.listenerManager = new ListenerManager();
/*  82 */         this.listenerManager.init(this.configctx);
/*     */       } 
/*     */       
/*  85 */       selectPort(this.configctx);
/*     */       
/*  87 */       Iterator<String> iter = this.configctx.getAxisConfiguration().getTransportsIn().keySet().iterator();
/*     */       
/*  89 */       while (iter.hasNext()) {
/*  90 */         String trp = iter.next();
/*  91 */         TransportInDescription trsIn = (TransportInDescription)this.configctx.getAxisConfiguration().getTransportsIn().get(trp);
/*     */         
/*  93 */         this.listenerManager.addListener(trsIn, false);
/*  94 */         String msg = ""Starting transport "" + trsIn.getName();
/*  95 */         if (trsIn.getParameter(""port"") != null) {
/*  96 */           msg = msg + "" on port "" + trsIn.getParameter(""port"").getValue();
/*     */         }
/*  98 */         log.info(msg);
/*     */       } 
/*     */ 
/*     */       
/* 102 */       Parameter synEnv = this.configctx.getAxisConfiguration().getParameter(""synapse.env"");
/*     */       
/* 104 */       Parameter synCfg = this.configctx.getAxisConfiguration().getParameter(""synapse.config"");
/*     */       
/* 106 */       String message = ""Unable to initialize the Synapse Configuration : Can not find the "";
/* 107 */       if (synCfg == null || synCfg.getValue() == null || !(synCfg.getValue() instanceof SynapseConfiguration)) {
/*     */         
/* 109 */         log.fatal(message + ""Synapse Configuration"");
/* 110 */         throw new SynapseException(message + ""Synapse Configuration"");
/*     */       } 
/*     */       
/* 113 */       if (synEnv == null || synEnv.getValue() == null || !(synEnv.getValue() instanceof SynapseEnvironment)) {
/*     */         
/* 115 */         log.fatal(message + ""Synapse Environment"");
/* 116 */         throw new SynapseException(message + ""Synapse Environment"");
/*     */       } 
/* 118 */       ((SynapseEnvironment)synEnv.getValue()).setInitialized(true);
/*     */       
/* 120 */       Collection startups = ((SynapseConfiguration)synCfg.getValue()).getStartups();
/* 121 */       for (Iterator it = startups.iterator(); it.hasNext(); ) {
/* 122 */         Object o = it.next();
/* 123 */         if (o instanceof ManagedLifecycle) {
/* 124 */           ManagedLifecycle m = (ManagedLifecycle)o;
/* 125 */           m.init((SynapseEnvironment)synEnv.getValue());
/*     */         } 
/*     */       } 
/*     */       
/* 129 */       log.info(""Ready for processing"");
/*     */     }
/* 131 */     catch (Throwable t) {
/* 132 */       t.printStackTrace();
/* 133 */       log.fatal(""Startup failed..."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stop() {
/*     */     try {
/* 142 */       if (this.listenerManager != null) {
/* 143 */         this.listenerManager.stop();
/* 144 */         this.listenerManager.destroy();
/*     */       } 
/*     */       
/* 147 */       if (this.configctx != null) {
/* 148 */         this.configctx.terminate();
/*     */       }
/* 150 */     } catch (Exception ignored) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void selectPort(ConfigurationContext configCtx) {
/* 160 */     TransportInDescription trsIn = (TransportInDescription)configCtx.getAxisConfiguration().getTransportsIn().get(""http"");
/*     */ 
/*     */     
/* 163 */     if (trsIn != null) {
/*     */       
/* 165 */       int port = 8080;
/*     */       
/* 167 */       String strPort = System.getProperty(""port"");
/* 168 */       if (strPort != null) {
/*     */         
/*     */         try {
/* 171 */           port = (new Integer(strPort)).intValue();
/* 172 */         } catch (NumberFormatException e) {
/*     */           
/* 174 */           log.error(""Given port is not a valid integer. Port specified in the configuration is used for the server."");
/* 175 */           port = Integer.parseInt(trsIn.getParameter(""port"").getValue().toString());
/*     */         } 
/*     */       } else {
/*     */         
/* 179 */         port = Integer.parseInt(trsIn.getParameter(""port"").getValue().toString());
/*     */       } 
/*     */       
/*     */       while (true) {
/* 183 */         ServerSocket sock = null;
/*     */         try {
/* 185 */           sock = new ServerSocket(port);
/* 186 */           trsIn.getParameter(""port"").setValue(Integer.toString(port));
/*     */           break;
/* 188 */         } catch (Exception e) {
/* 189 */           log.warn(""Port "" + port + "" already in use. Trying alternate"");
/* 190 */           if (port == 8080) {
/* 191 */             port = 8008;
/*     */           } else {
/* 193 */             port++;
/*     */           } 
/*     */         } finally {
/* 196 */           if (sock != null) {
/*     */             try {
/* 198 */               sock.close();
/* 199 */             } catch (Exception e) {}
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public ConfigurationContext getConfigurationContext() { return this.configctx; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\ServerManager.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.Startup,"package org.apache.synapse;
import javax.xml.namespace.QName;
public interface Startup extends ManagedLifecycle {
  QName getTagQName();
  String getName();
  void setName(String paramString);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\Startup.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.SynapseConstants,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class SynapseConstants
/*    */ {
/*    */   public static final String SYNAPSE_NAMESPACE = ""http://ws.apache.org/ns/synapse"";
/* 35 */   public static final OMNamespace SYNAPSE_OMNAMESPACE = OMAbstractFactory.getOMFactory().createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */ 
/*    */   
/*    */   public static final String MAIN_SEQUENCE_KEY = ""main"";
/*    */ 
/*    */   
/*    */   public static final String FAULT_SEQUENCE_KEY = ""fault"";
/*    */ 
/*    */   
/*    */   public static final String SYNAPSE_SERVICE_NAME = ""__SynapseService"";
/*    */   
/* 46 */   public static final QName SYNAPSE_OPERATION_NAME = new QName(""mediate"");
/*    */   public static final String SANDESHA2_MODULE_NAME = ""sandesha2"";
/*    */   public static final String ADDRESSING_MODULE_NAME = ""addressing"";
/*    */   public static final String RAMPART_MODULE_NAME = ""rampart"";
/*    */   public static final String HEADER_TO = ""To"";
/*    */   public static final String HEADER_FROM = ""From"";
/*    */   public static final String HEADER_FAULT = ""FaultTo"";
/*    */   public static final String HEADER_ACTION = ""Action"";
/*    */   public static final String HEADER_REPLY_TO = ""ReplyTo"";
/*    */   public static final String HEADER_MESSAGE_ID = ""MessageID"";
/*    */   public static final String PROPERTY_MESSAGE_FORMAT = ""MESSAGE_FORMAT"";
/*    */   public static final String RAMPART_POLICY = ""rampartPolicy"";
/*    */   public static final String SANDESHA_POLICY = ""sandeshaPolicy"";
/*    */   public static final String SYNAPSE_CONFIG = ""synapse.config"";
/*    */   public static final String SYNAPSE_ENV = ""synapse.env"";
/*    */   public static final String SYNAPSE_HOME = ""synapse.home"";
/*    */   public static final String DEFAULT_PROP_PATH = ""synapse.properties"";
/*    */   public static final String SYNAPSE_XML = ""synapse.xml"";
/*    */   public static final String SYNAPSE_PROPERTIES = ""synapse.properties"";
/*    */   public static final String PROXY_SERVICE = ""proxy.name"";
/*    */   public static final String RESPONSE = ""RESPONSE"";
/*    */   public static final String OUT_ONLY = ""OUT_ONLY"";
/*    */   public static final String ERROR_CODE = ""ERROR_CODE"";
/*    */   public static final String ERROR_MESSAGE = ""ERROR_MESSAGE"";
/*    */   public static final String ERROR_DETAIL = ""ERROR_DETAIL"";
/*    */   public static final String SANDESHA_LAST_MESSAGE = ""Sandesha2LastMessage"";
/*    */   public static final String SANDESHA_SEQUENCE_KEY = ""Sandesha2SequenceKey"";
/*    */   public static final String SANDESHA_SPEC_VERSION = ""Sandesha2RMSpecVersion"";
/*    */   public static final String RELATES_TO_FOR_POX = ""synapse.RelatesToForPox"";
/*    */   public static final String ISRESPONSE_PROPERTY = ""synapse.isresponse"";
/*    */   public static final String TRACE_LOGGER = ""TRACE_LOGGER"";
/*    */   public static final String SERVICE_LOGGER_PREFIX = ""SERVICE_LOGGER."";
/*    */   public static final int TRACING_OFF = 0;
/*    */   public static final int TRACING_ON = 1;
/*    */   public static final int TRACING_UNSET = 2;
/*    */   public static final int STATISTICS_OFF = 0;
/*    */   public static final int STATISTICS_ON = 1;
/*    */   public static final int STATISTICS_UNSET = 2;
/*    */   public static final String SEQUENCE_STATS = ""synapse.sequence.stats"";
/*    */   public static final String PROXY_STATS = ""synapse.proxy.stats"";
/*    */   public static final String SERVICE_STATS = ""synapse.service.stats"";
/*    */   public static final String ENDPOINT_STATS = ""synapse.endpoint.stats"";
/*    */   public static final int SEQUENCE_STATISTICS = 0;
/*    */   public static final int PROXYSERVICE_STATISTICS = 1;
/*    */   public static final int ENDPOINT_STATISTICS = 2;
/*    */   public static final String TIMEOUT_HANDLER_INTERVAL = ""synapse.timeout_handler_interval"";
/*    */   public static final long DEFAULT_TIMEOUT_HANDLER_INTERVAL = 15000L;
/*    */   public static final String GLOBAL_TIMEOUT_INTERVAL = ""synapse.global_timeout_interval"";
/*    */   public static final long DEFAULT_GLOBAL_TIMEOUT = 86400000L;
/*    */   public static final int NONE = 100;
/*    */   public static final int DISCARD = 101;
/*    */   public static final int DISCARD_AND_FAULT = 102;
/*    */   public static final String TIME_OUT = ""504"";
/*    */   public static final String SENDING_FAULT = ""503"";
/*    */   public static final String PROCESSED_ENDPOINT = ""processed_endpoint"";
/*    */   public static final String ANONYMOUS_ENDPOINT = ""AnonymousEndpoint"";
/*    */   public static final String ANONYMOUS_SEQUENCE = ""AnonymousSequence"";
/*    */   public static final String FORMAT_POX = ""pox"";
/*    */   public static final String FORMAT_SOAP11 = ""soap11"";
/*    */   public static final String FORMAT_SOAP12 = ""soap12"";
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\SynapseConstants.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.SynapseException,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseException
/*    */   extends RuntimeException
/*    */ {
/*    */   private static final long serialVersionUID = -7244032125641596311L;
/*    */   
/* 30 */   public SynapseException(String string) { super(string); }
/*    */ 
/*    */ 
/*    */   
/* 34 */   public SynapseException(String msg, Throwable e) { super(msg, e); }
/*    */ 
/*    */ 
/*    */   
/* 38 */   public SynapseException(Throwable t) { super(t); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\SynapseException.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.SynapseServer,"/*    */ package org.apache.synapse;
/*    */ 
/*    */ import java.io.File;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseServer
/*    */ {
/* 32 */   private static final Log log = LogFactory.getLog(SynapseServer.class);
/*    */   
/*    */   public static void printUsage() {
/* 35 */     System.out.println(""Usage: SynapseServer <repository>"");
/* 36 */     System.out.println("" Opts: -? this message"");
/* 37 */     System.exit(1);
/*    */   }
/*    */ 
/*    */ 
/*    */   
/*    */   public static void main(String[] args) throws Exception {
/* 43 */     if (args.length != 1 || !(new File(args[0])).exists()) {
/* 44 */       printUsage();
/*    */     }
/*    */     
/* 47 */     ServerManager serverManager = ServerManager.getInstance();
/* 48 */     serverManager.setAxis2Repolocation(args[0]);
/* 49 */     serverManager.start();
/* 50 */     addShutdownHook();
/*    */   }
/*    */ 
/*    */   
/*    */   private static void addShutdownHook() {
/* 55 */     Thread shutdownHook = new Thread() {
/*    */         public void run() {
/* 57 */           log.info(""Shutting down Apache Synapse ..."");
/*    */           try {
/* 59 */             ServerManager.getInstance().stop();
/* 60 */             log.info(""Shutdown complete"");
/* 61 */             log.info(""Halting JVM"");
/* 62 */           } catch (Exception e) {
/* 63 */             log.warn(""Error occurred while shutting down Apache Synapse : "" + e);
/*    */           } 
/*    */         }
/*    */       };
/* 67 */     Runtime.getRuntime().addShutdownHook(shutdownHook);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\SynapseServer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.Entry,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.net.URL;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Entry
/*     */ {
/*  35 */   private static final Log log = LogFactory.getLog(Entry.class);
/*     */   
/*     */   private String key;
/*     */   
/*     */   private int type;
/*     */   
/*     */   private URL src;
/*     */   
/*     */   private Object value;
/*     */   
/*     */   private XMLToObjectMapper mapper;
/*     */   private long version;
/*     */   private long expiryTime;
/*     */   public static final int INLINE_TEXT = 0;
/*     */   public static final int INLINE_XML = 1;
/*     */   public static final int URL_SRC = 2;
/*     */   public static final int REMOTE_ENTRY = 3;
/*     */   
/*     */   public Entry() {}
/*     */   
/*  55 */   public Entry(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public int getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public boolean isRemote() { return (this.type == 3); }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public boolean isURLSource() { return (this.type == 2); }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public boolean isInlineXML() { return (this.type == 1); }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public boolean isInlineText() { return (this.type == 0); }
/*     */ 
/*     */   
/*     */   public void setType(int type) {
/*  79 */     if (type <= 4 && type >= 0) {
/*  80 */       this.type = type;
/*     */     } else {
/*  82 */       handleException(""Invalid entry type for the static entry"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*  87 */   public URL getSrc() { return this.src; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setSrc(URL src) { this.src = src; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public Object getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setValue(Object value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public XMLToObjectMapper getMapper() { return this.mapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setMapper(XMLToObjectMapper mapper) { this.mapper = mapper; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public long getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setVersion(long version) { this.version = version; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public long getExpiryTime() { return this.expiryTime; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setExpiryTime(long expiryTime) { this.expiryTime = expiryTime; }
/*     */ 
/*     */   
/*     */   public boolean isExpired() {
/* 148 */     if (getType() == 3 && getExpiryTime() > 0L) {
/* 149 */       return (System.currentTimeMillis() > this.expiryTime);
/*     */     }
/* 151 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public boolean isCached() { return (this.value != null); }
/*     */ 
/*     */   
/*     */   public void clearCache() {
/* 160 */     if (isDynamic()) {
/* 161 */       this.value = null;
/* 162 */       this.expiryTime = System.currentTimeMillis();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 167 */   public boolean isDynamic() { return (this.type == 3); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 171 */     log.error(msg);
/* 172 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\Entry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.SynapseConfiguration,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.Collection;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Properties;
/*     */ import java.util.Timer;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.ManagedLifecycle;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.Startup;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.MediatorFactoryFinder;
/*     */ import org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseConfiguration
/*     */   implements ManagedLifecycle
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(SynapseConfiguration.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  51 */   Registry registry = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   private QName defaultQName = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  61 */   private Map proxyServices = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   private Map startups = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   private Map localRegistry = new HashMap<Object, Object>();
/*     */ 
/*     */   
/*  76 */   private Properties properties = new Properties();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   private Timer synapseTimer = new Timer(true);
/*     */ 
/*     */   
/*  84 */   private AxisConfiguration axisConfiguration = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   private String pathToConfigFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void addSequence(String key, Mediator mediator) { this.localRegistry.put(key, mediator); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void addSequence(String key, Entry entry) { this.localRegistry.put(key, entry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedSequences() {
/* 125 */     Map<Object, Object> definedSequences = new HashMap<Object, Object>();
/* 126 */     Iterator itr = this.localRegistry.values().iterator();
/* 127 */     while (itr.hasNext()) {
/* 128 */       Object o = itr.next();
/* 129 */       if (o instanceof SequenceMediator) {
/* 130 */         definedSequences.put(((SequenceMediator)o).getName(), o);
/*     */       }
/*     */     } 
/* 133 */     return definedSequences;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator getSequence(String key) {
/* 144 */     Object o = this.localRegistry.get(key);
/* 145 */     if (o != null && o instanceof Mediator) {
/* 146 */       return (Mediator)o;
/*     */     }
/*     */     
/* 149 */     Entry entry = null;
/* 150 */     if (o != null && o instanceof Entry) {
/* 151 */       entry = (Entry)o;
/*     */     } else {
/* 153 */       entry = new Entry(key);
/* 154 */       entry.setType(3);
/* 155 */       entry.setMapper((XMLToObjectMapper)MediatorFactoryFinder.getInstance());
/*     */     } 
/*     */     
/* 158 */     if (this.registry != null) {
/* 159 */       o = this.registry.getResource(entry);
/* 160 */       if (o != null && o instanceof Mediator) {
/* 161 */         this.localRegistry.put(key, entry);
/* 162 */         return (Mediator)o;
/*     */       } 
/*     */     } 
/*     */     
/* 166 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void removeSequence(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public Mediator getMainSequence() { return getSequence(""main""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public Mediator getFaultSequence() { return getSequence(""fault""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addEntry(String key, Entry entry) {
/* 214 */     if (entry.getType() == 2) {
/*     */       try {
/* 216 */         entry.setValue(SynapseConfigUtils.getOMElementFromURL(entry.getSrc().toString()));
/*     */         
/* 218 */         this.localRegistry.put(key, entry);
/* 219 */       } catch (IOException e) {
/* 220 */         handleException(""Can not read from source URL : "" + entry.getSrc());
/*     */       } 
/*     */     } else {
/*     */       
/* 224 */       this.localRegistry.put(key, entry);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getCachedEntries() {
/* 235 */     Map<Object, Object> cachedEntries = new HashMap<Object, Object>();
/* 236 */     for (Iterator itr = this.localRegistry.values().iterator(); itr.hasNext(); ) {
/* 237 */       Object o = itr.next();
/* 238 */       if (o != null && o instanceof Entry) {
/* 239 */         Entry entry = (Entry)o;
/* 240 */         if (entry.isDynamic() && entry.isCached()) {
/* 241 */           cachedEntries.put(entry.getKey(), entry);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 246 */     return cachedEntries;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedEntries() {
/* 256 */     Map<Object, Object> definedEntries = new HashMap<Object, Object>();
/* 257 */     Iterator itr = this.localRegistry.values().iterator();
/* 258 */     while (itr.hasNext()) {
/* 259 */       Object o = itr.next();
/* 260 */       if (o instanceof Entry && ((Entry)o).getType() != 3)
/*     */       {
/* 262 */         definedEntries.put(((Entry)o).getKey(), o);
/*     */       }
/*     */     } 
/* 265 */     return definedEntries;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getEntry(String key) {
/* 276 */     Object o = this.localRegistry.get(key);
/* 277 */     if (o != null && o instanceof Entry) {
/* 278 */       Entry entry = (Entry)o;
/* 279 */       if (entry.isDynamic()) {
/* 280 */         if (entry.isCached() && !entry.isExpired())
/* 281 */           return entry.getValue(); 
/* 282 */         if (this.registry != null) {
/* 283 */           o = this.registry.getResource(entry);
/*     */         } else {
/* 285 */           if (log.isDebugEnabled()) {
/* 286 */             log.debug(""Will not  evaluate the value of the remote entry with a key "" + key + "",  because the registry is not available"");
/*     */           }
/*     */           
/* 289 */           return null;
/*     */         } 
/*     */       } else {
/*     */         
/* 293 */         return entry.getValue();
/*     */       } 
/*     */     } 
/* 296 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Entry getEntryDefinition(String key) {
/* 307 */     Object o = this.localRegistry.get(key);
/* 308 */     if (o == null || o instanceof Entry) {
/* 309 */       if (o == null) {
/*     */         
/* 311 */         Entry entry = new Entry(key);
/* 312 */         entry.setType(3);
/* 313 */         addEntry(key, entry);
/* 314 */         return entry;
/*     */       } 
/* 316 */       return (Entry)o;
/*     */     } 
/* 318 */     handleException(""Invalid local registry entry : "" + key);
/* 319 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public void removeEntry(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void clearCachedEntry(String key) {
/* 339 */     Entry entry = getEntryDefinition(key);
/* 340 */     if (entry.isDynamic() && entry.isCached()) {
/* 341 */       entry.clearCache();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void clearCache() {
/* 350 */     for (Iterator itr = this.localRegistry.values().iterator(); itr.hasNext(); ) {
/* 351 */       Object o = itr.next();
/* 352 */       if (o != null && o instanceof Entry) {
/* 353 */         Entry entry = (Entry)o;
/* 354 */         if (entry.isDynamic() && entry.isCached()) {
/* 355 */           entry.clearCache();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 370 */   public void addEndpoint(String key, Endpoint endpoint) { this.localRegistry.put(key, endpoint); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 382 */   public void addEndpoint(String key, Entry entry) { this.localRegistry.put(key, entry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Map getDefinedEndpoints() {
/* 392 */     Map<Object, Object> definedEndpoints = new HashMap<Object, Object>();
/* 393 */     Iterator itr = this.localRegistry.values().iterator();
/* 394 */     while (itr.hasNext()) {
/* 395 */       Object o = itr.next();
/* 396 */       if (o instanceof Endpoint) {
/* 397 */         definedEndpoints.put(((Endpoint)o).getName(), o);
/*     */       }
/*     */     } 
/* 400 */     return definedEndpoints;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(String key) {
/* 411 */     Object o = this.localRegistry.get(key);
/* 412 */     if (o != null && o instanceof Endpoint) {
/* 413 */       return (Endpoint)o;
/*     */     }
/*     */     
/* 416 */     Entry entry = null;
/* 417 */     if (o != null && o instanceof Entry) {
/* 418 */       entry = (Entry)o;
/*     */     } else {
/* 420 */       entry = new Entry(key);
/* 421 */       entry.setType(3);
/* 422 */       entry.setMapper((XMLToObjectMapper)XMLToEndpointMapper.getInstance());
/*     */     } 
/*     */     
/* 425 */     if (this.registry != null) {
/* 426 */       o = this.registry.getResource(entry);
/* 427 */       if (o != null && o instanceof Endpoint) {
/* 428 */         this.localRegistry.put(key, entry);
/* 429 */         return (Endpoint)o;
/*     */       } 
/*     */     } 
/*     */     
/* 433 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 443 */   public void removeEndpoint(String key) { this.localRegistry.remove(key); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 455 */   public void addProxyService(String name, ProxyService proxy) { this.proxyServices.put(name, proxy); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 466 */   public ProxyService getProxyService(String name) { return (ProxyService)this.proxyServices.get(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void removeProxyService(String name) {
/* 476 */     Object o = this.proxyServices.get(name);
/* 477 */     if (o == null) {
/* 478 */       handleException(""Unknown proxy service for name : "" + name);
/*     */     } else {
/*     */       try {
/* 481 */         if (getAxisConfiguration().getServiceForActivation(name) != null) {
/* 482 */           if (getAxisConfiguration().getServiceForActivation(name).isActive())
/*     */           {
/* 484 */             getAxisConfiguration().getService(name).setActive(false);
/*     */           }
/*     */           
/* 487 */           getAxisConfiguration().removeService(name);
/*     */         } 
/* 489 */         this.proxyServices.remove(name);
/* 490 */       } catch (AxisFault axisFault) {
/* 491 */         handleException(axisFault.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 502 */   public Collection getProxyServices() { return this.proxyServices.values(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 511 */   public Map getLocalRegistry() { return Collections.unmodifiableMap(this.localRegistry); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 520 */   public Registry getRegistry() { return this.registry; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 530 */   public void setRegistry(Registry registry) { this.registry = registry; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 539 */   public void setAxisConfiguration(AxisConfiguration axisConfig) { this.axisConfiguration = axisConfig; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 548 */   public AxisConfiguration getAxisConfiguration() { return this.axisConfiguration; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 557 */   public String getPathToConfigFile() { return this.pathToConfigFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 567 */   public void setPathToConfigFile(String pathToConfigFile) { this.pathToConfigFile = pathToConfigFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   public void setDefaultQName(QName defaultQName) { this.defaultQName = defaultQName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 586 */   public QName getDefaultQName() { return this.defaultQName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 595 */   public Timer getSynapseTimer() { return this.synapseTimer; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 604 */   public Collection getStartups() { return this.startups.values(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 614 */   public Startup getStartup(String id) { return (Startup)this.startups.get(id); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 623 */   public void addStartup(Startup startup) { this.startups.put(startup.getName(), startup); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 632 */   public void removeStartup(String name) { this.startups.remove(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 641 */   public Properties getProperties() { return this.properties; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 650 */   public void setProperties(Properties properties) { this.properties = properties; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getProperty(String propKey, String def) {
/* 662 */     String val = System.getProperty(propKey);
/* 663 */     if (val == null) {
/* 664 */       val = this.properties.getProperty(propKey);
/*     */     }
/*     */     
/* 667 */     if (val != null) {
/* 668 */       if (log.isDebugEnabled()) {
/* 669 */         log.debug(""Using synapse tuning parameter : "" + propKey + "" = "" + val);
/*     */       }
/* 671 */       return val;
/*     */     } 
/* 673 */     return def;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getProperty(String propKey) {
/* 683 */     String val = System.getProperty(propKey);
/* 684 */     if (val == null) {
/* 685 */       val = this.properties.getProperty(propKey);
/*     */     }
/*     */     
/* 688 */     if (val != null) {
/* 689 */       if (log.isDebugEnabled()) {
/* 690 */         log.debug(""Using synapse tuning parameter : "" + propKey + "" = "" + val);
/*     */       }
/* 692 */       return val;
/*     */     } 
/* 694 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void destroy() {
/* 703 */     if (log.isDebugEnabled()) {
/* 704 */       log.debug(""Destroying the Synapse Configuration"");
/*     */     }
/*     */ 
/*     */     
/* 708 */     this.synapseTimer.cancel();
/* 709 */     this.synapseTimer = null;
/*     */ 
/*     */     
/* 712 */     for (Iterator it = getProxyServices().iterator(); it.hasNext(); ) {
/* 713 */       Object o = it.next();
/* 714 */       if (o instanceof ProxyService) {
/* 715 */         ProxyService p = (ProxyService)o;
/* 716 */         if (p.getTargetInLineInSequence() != null) {
/* 717 */           p.getTargetInLineInSequence().destroy();
/*     */         }
/* 719 */         if (p.getTargetInLineOutSequence() != null) {
/* 720 */           p.getTargetInLineOutSequence().destroy();
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 726 */     Map sequences = getDefinedSequences();
/* 727 */     for (Iterator it = sequences.entrySet().iterator(); it.hasNext(); ) {
/* 728 */       Object o = it.next();
/* 729 */       if (o instanceof ManagedLifecycle) {
/* 730 */         ManagedLifecycle m = (ManagedLifecycle)o;
/* 731 */         m.destroy();
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 736 */     if (this.startups != null) {
/* 737 */       for (Iterator it = this.startups.values().iterator(); it.hasNext(); ) {
/* 738 */         Object o = it.next();
/* 739 */         if (o instanceof ManagedLifecycle) {
/* 740 */           ManagedLifecycle m = (ManagedLifecycle)o;
/* 741 */           m.destroy();
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init(SynapseEnvironment se) {
/* 756 */     if (log.isDebugEnabled()) {
/* 757 */       log.debug(""Initializing the Synapse Configuration"");
/*     */     }
/*     */ 
/*     */     
/* 761 */     for (Iterator it = getProxyServices().iterator(); it.hasNext(); ) {
/* 762 */       Object o = it.next();
/* 763 */       if (o instanceof ProxyService) {
/* 764 */         ProxyService p = (ProxyService)o;
/* 765 */         if (p.getTargetInLineInSequence() != null) {
/* 766 */           p.getTargetInLineInSequence().init(se);
/*     */         }
/* 768 */         if (p.getTargetInLineOutSequence() != null) {
/* 769 */           p.getTargetInLineOutSequence().init(se);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 775 */     Map sequences = getDefinedSequences();
/* 776 */     for (Iterator it = sequences.values().iterator(); it.hasNext(); ) {
/* 777 */       Object o = it.next();
/* 778 */       if (o instanceof ManagedLifecycle) {
/* 779 */         ManagedLifecycle m = (ManagedLifecycle)o;
/* 780 */         m.init(se);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 786 */     log.error(msg);
/* 787 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\SynapseConfiguration.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.SynapseConfigurationBuilder,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.XMLConfigurationBuilder;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.mediators.builtin.DropMediator;
/*     */ import org.apache.synapse.mediators.builtin.LogMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseConfigurationBuilder
/*     */ {
/*  42 */   private static Log log = LogFactory.getLog(SynapseConfigurationBuilder.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SynapseConfiguration getDefaultConfiguration() {
/*  50 */     SynapseConfiguration config = new SynapseConfiguration();
/*  51 */     SequenceMediator mainmediator = new SequenceMediator();
/*  52 */     mainmediator.addChild((Mediator)new LogMediator());
/*  53 */     mainmediator.addChild((Mediator)new DropMediator());
/*  54 */     config.addSequence(""main"", (Mediator)mainmediator);
/*  55 */     SequenceMediator faultmediator = new SequenceMediator();
/*  56 */     LogMediator fault = new LogMediator();
/*  57 */     fault.setLogLevel(3);
/*  58 */     faultmediator.addChild((Mediator)fault);
/*  59 */     config.addSequence(""fault"", (Mediator)faultmediator);
/*  60 */     return config;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SynapseConfiguration getConfiguration(String configFile) {
/*     */     try {
/*  73 */       SynapseConfiguration synCfg = XMLConfigurationBuilder.getConfiguration(new FileInputStream(configFile));
/*     */       
/*  75 */       log.info(""Loaded Synapse configuration from : "" + configFile);
/*  76 */       synCfg.setPathToConfigFile((new File(configFile)).getAbsolutePath());
/*  77 */       loadSynapseProperties(synCfg);
/*  78 */       return synCfg;
/*     */     }
/*  80 */     catch (FileNotFoundException fnf) {
/*  81 */       handleException(""Cannot load Synapse configuration from : "" + configFile, fnf);
/*  82 */     } catch (Exception e) {
/*  83 */       handleException(""Could not initialize Synapse : "" + e.getMessage(), e);
/*     */     } 
/*  85 */     return null;
/*     */   }
/*     */   
/*     */   private static void loadSynapseProperties(SynapseConfiguration synCfg) {
/*  89 */     String props = System.getProperty(""synapse.properties"");
/*  90 */     if (props == null) {
/*  91 */       props = ""synapse.properties"";
/*     */     }
/*     */     try {
/*  94 */       synCfg.getProperties().load(Thread.currentThread().getContextClassLoader().getResourceAsStream(props));
/*  95 */     } catch (Exception e) {
/*  96 */       if (log.isDebugEnabled()) {
/*  97 */         log.debug(""Unable to load synapse properties : Using the default tunning parameters for Synapse"");
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 103 */     log.error(msg, e);
/* 104 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\SynapseConfigurationBuilder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.SynapseConfigUtils,"/*     */ package org.apache.synapse.config;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import javax.xml.stream.XMLInputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseConfigUtils
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(SynapseConfigUtils.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static StreamSource getStreamSource(Object o) {
/*  55 */     if (o == null) {
/*  56 */       handleException(""Cannot convert null to a StreamSource"");
/*     */     }
/*  58 */     else if (o instanceof OMNode) {
/*  59 */       OMNode omNode = (OMNode)o;
/*  60 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/*  62 */         omNode.serialize(baos);
/*  63 */         return new StreamSource(new ByteArrayInputStream(baos.toByteArray()));
/*  64 */       } catch (XMLStreamException e) {
/*  65 */         handleException(""Error converting to a StreamSource"", e);
/*     */       } 
/*     */     } else {
/*     */       
/*  69 */       handleException(""Cannot convert object to a StreamSource"");
/*     */     } 
/*  71 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public static InputStream getInputStream(Object o) {
/*  76 */     if (o == null) {
/*  77 */       handleException(""Cannot convert null to a StreamSource"");
/*     */     }
/*  79 */     else if (o instanceof OMElement) {
/*  80 */       OMElement omElement = (OMElement)o;
/*  81 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/*  83 */         omElement.serialize(baos);
/*  84 */         return new ByteArrayInputStream(baos.toByteArray());
/*  85 */       } catch (XMLStreamException e) {
/*  86 */         handleException(""Error converting to a StreamSource"", e);
/*     */       }
/*     */     
/*  89 */     } else if (o instanceof URI) {
/*     */       try {
/*  91 */         return ((URI)o).toURL().openStream();
/*  92 */       } catch (IOException e) {
/*  93 */         handleException(""Error opening stream form URI"", e);
/*     */       } 
/*     */     } else {
/*  96 */       handleException(""Cannot convert object to a StreamSource"");
/*     */     } 
/*  98 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Object getObject(URL url) {
/*     */     try {
/* 113 */       if (url != null && ""file"".equals(url.getProtocol())) {
/*     */         try {
/* 115 */           url.openStream();
/* 116 */         } catch (IOException ignored) {
/* 117 */           String path = url.getPath();
/* 118 */           if (log.isDebugEnabled()) {
/* 119 */             log.debug(""Can not open a connection to the URL with a path :"" + path);
/*     */           }
/*     */           
/* 122 */           String synapseHome = System.getProperty(""synapse.home"");
/* 123 */           if (synapseHome != null) {
/* 124 */             if (log.isDebugEnabled()) {
/* 125 */               log.debug(""Trying  to resolve an absolute path of the  URL using the synapse.home : "" + synapseHome);
/*     */             }
/*     */             
/* 128 */             if (synapseHome.endsWith(""/"")) {
/* 129 */               synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
/*     */             }
/* 131 */             url = new URL(url.getProtocol() + "":"" + synapseHome + ""/"" + path);
/*     */             try {
/* 133 */               url.openStream();
/* 134 */             } catch (IOException e) {
/* 135 */               if (log.isDebugEnabled()) {
/* 136 */                 log.debug(""Faild to resolve an absolute path of the  URL using the synapse.home : "" + synapseHome);
/*     */               }
/*     */               
/* 139 */               log.warn(""IO Error reading from URL "" + url.getPath() + e);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       }
/* 144 */       if (url == null) {
/* 145 */         return null;
/*     */       }
/* 147 */       URLConnection urlc = url.openConnection();
/* 148 */       XMLToObjectMapper xmlToObject = getXmlToObjectMapper(urlc.getContentType());
/*     */ 
/*     */       
/*     */       try {
/* 152 */         XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(urlc.getInputStream());
/*     */         
/* 154 */         StAXOMBuilder builder = new StAXOMBuilder(parser);
/* 155 */         OMElement omElem = builder.getDocumentElement();
/*     */ 
/*     */ 
/*     */         
/* 159 */         omElem.build();
/*     */         
/* 161 */         if (xmlToObject != null) {
/* 162 */           return xmlToObject.getObjectFromOMNode((OMNode)omElem);
/*     */         }
/* 164 */         return omElem;
/*     */       
/*     */       }
/* 167 */       catch (XMLStreamException e) {
/* 168 */         log.warn(""Content at URL : "" + url + "" is non XML.."");
/* 169 */         return urlc.getContent();
/*     */       }
/*     */     
/* 172 */     } catch (IOException e) {
/* 173 */       handleException(""Error connecting to URL : "" + url, e);
/*     */       
/* 175 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static OMElement getOMElementFromURL(String urlStr) throws IOException {
/* 186 */     URL url = getURLFromPath(urlStr);
/* 187 */     if (url == null) {
/* 188 */       return null;
/*     */     }
/* 190 */     URLConnection conn = url.openConnection();
/* 191 */     conn.setReadTimeout(10000);
/* 192 */     conn.setConnectTimeout(2000);
/* 193 */     conn.setRequestProperty(""Connection"", ""close"");
/* 194 */     InputStream urlInStream = conn.getInputStream();
/*     */     
/* 196 */     if (urlInStream != null) {
/*     */       try {
/* 198 */         StAXOMBuilder builder = new StAXOMBuilder(urlInStream);
/* 199 */         OMElement doc = builder.getDocumentElement();
/* 200 */         doc.build();
/* 201 */         return doc;
/* 202 */       } catch (Exception e) {
/* 203 */         handleException(""Error parsing resource at URL : "" + url + "" as XML"", e);
/*     */       } finally {
/*     */         
/*     */         try {
/* 207 */           urlInStream.close();
/* 208 */         } catch (IOException ignore) {}
/*     */       } 
/*     */     }
/*     */     
/* 212 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 216 */     log.warn(msg, e);
/* 217 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 221 */     log.warn(msg);
/* 222 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 233 */   public static XMLToObjectMapper getXmlToObjectMapper(String contentType) { return null; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static URL getURLFromPath(String path) {
/* 243 */     if (path == null || ""null"".equals(path)) {
/* 244 */       if (log.isDebugEnabled()) {
/* 245 */         log.debug(""Can not create a URL from 'null' "");
/*     */       }
/* 247 */       return null;
/*     */     } 
/* 249 */     URL url = null;
/*     */     try {
/* 251 */       url = new URL(path);
/* 252 */       if (""file"".equals(url.getProtocol())) {
/*     */         try {
/* 254 */           url.openStream();
/* 255 */         } catch (MalformedURLException e) {
/* 256 */           handleException(""Invalid URL reference : "" + path, e);
/* 257 */         } catch (IOException ignored) {
/* 258 */           if (log.isDebugEnabled()) {
/* 259 */             log.debug(""Can not open a connection to the URL with a path :"" + path);
/*     */           }
/*     */           
/* 262 */           String synapseHome = System.getProperty(""synapse.home"");
/* 263 */           if (synapseHome != null) {
/* 264 */             if (synapseHome.endsWith(""/"")) {
/* 265 */               synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
/*     */             }
/* 267 */             if (log.isDebugEnabled()) {
/* 268 */               log.debug(""Trying  to resolve an absolute path of the  URL using the synapse.home : "" + synapseHome);
/*     */             }
/*     */             
/*     */             try {
/* 272 */               url = new URL(url.getProtocol() + "":"" + synapseHome + ""/"" + url.getPath());
/*     */               
/* 274 */               url.openStream();
/* 275 */             } catch (MalformedURLException e) {
/* 276 */               handleException(""Invalid URL reference "" + url.getPath() + e);
/* 277 */             } catch (IOException e) {
/* 278 */               if (log.isDebugEnabled()) {
/* 279 */                 log.debug(""Faild to resolve an absolute path of the  URL using the synapse.home : "" + synapseHome);
/*     */               }
/*     */               
/* 282 */               log.warn(""IO Error reading from URL : "" + url.getPath() + e);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       }
/* 287 */     } catch (MalformedURLException e) {
/* 288 */       handleException(""Invalid URL reference :  "" + path, e);
/* 289 */     } catch (IOException e) {
/* 290 */       handleException(""IO Error reading from URL : "" + path, e);
/*     */     } 
/* 292 */     return url;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\SynapseConfigUtils.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.XMLToObjectMapper,"package org.apache.synapse.config;
import org.apache.axiom.om.OMNode;
public interface XMLToObjectMapper {
  Object getObjectFromOMNode(OMNode paramOMNode);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\XMLToObjectMapper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractDBMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import javax.naming.Context;
/*     */ import javax.naming.InitialContext;
/*     */ import javax.naming.NamingException;
/*     */ import javax.sql.DataSource;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.dbcp.BasicDataSource;
/*     */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*     */ import org.apache.synapse.mediators.db.Statement;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractDBMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  86 */   public static final QName URL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""url"");
/*  87 */   static final QName DRIVER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""driver"");
/*  88 */   static final QName USER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""user"");
/*  89 */   static final QName PASS_Q = new QName(""http://ws.apache.org/ns/synapse"", ""password"");
/*     */   
/*  91 */   static final QName DSNAME_Q = new QName(""http://ws.apache.org/ns/synapse"", ""dsName"");
/*  92 */   static final QName ICCLASS_Q = new QName(""http://ws.apache.org/ns/synapse"", ""icClass"");
/*     */   
/*  94 */   static final QName STMNT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""statement"");
/*  95 */   static final QName SQL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""sql"");
/*  96 */   static final QName PARAM_Q = new QName(""http://ws.apache.org/ns/synapse"", ""parameter"");
/*  97 */   static final QName RESULT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""result"");
/*     */   
/*  99 */   static final QName ATT_COLUMN = new QName(""column"");
/* 100 */   static final QName ATT_TYPE = new QName(""type"");
/*     */ 
/*     */   
/*     */   protected void buildDataSource(OMElement elem, AbstractDBMediator mediator) {
/* 104 */     OMElement pool = null;
/*     */ 
/*     */     
/*     */     try {
/* 108 */       AXIOMXPath xpath = new AXIOMXPath(""//syn:connection/syn:pool"");
/* 109 */       xpath.addNamespace(""syn"", ""http://ws.apache.org/ns/synapse"");
/* 110 */       pool = (OMElement)xpath.selectSingleNode(elem);
/*     */       
/* 112 */       if (pool.getFirstChildWithName(DRIVER_Q) != null) {
/* 113 */         mediator.setDataSource(createCustomDataSource(pool, mediator));
/*     */       }
/* 115 */       else if (pool.getFirstChildWithName(ICCLASS_Q) != null && pool.getFirstChildWithName(DSNAME_Q) != null) {
/*     */ 
/*     */         
/* 118 */         mediator.setDataSource(lookupDataSource(pool, mediator));
/*     */       } else {
/* 120 */         handleException(""The DataSource connection information must be specified for using a custom DataSource connection pool or for a JNDI lookup"");
/*     */       }
/*     */     
/*     */     }
/* 124 */     catch (JaxenException e) {
/* 125 */       handleException(""Error looking up DataSource connection information"", (Exception)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private DataSource lookupDataSource(OMElement pool, AbstractDBMediator mediator) {
/* 137 */     Hashtable<Object, Object> props = new Hashtable<Object, Object>();
/*     */     
/* 139 */     props.put(""java.naming.factory.initial"", getValue(pool, ICCLASS_Q));
/* 140 */     props.put(""java.naming.security.principal"", getValue(pool, USER_Q));
/* 141 */     props.put(""java.naming.security.credentials"", getValue(pool, PASS_Q));
/* 142 */     props.put(""java.naming.provider.url"", getValue(pool, URL_Q));
/* 143 */     String dsName = getValue(pool, DSNAME_Q);
/*     */ 
/*     */     
/* 146 */     mediator.addDataSourceProperty(ICCLASS_Q, getValue(pool, ICCLASS_Q));
/* 147 */     mediator.addDataSourceProperty(DSNAME_Q, getValue(pool, DSNAME_Q));
/* 148 */     mediator.addDataSourceProperty(URL_Q, getValue(pool, URL_Q));
/* 149 */     mediator.addDataSourceProperty(USER_Q, getValue(pool, USER_Q));
/* 150 */     mediator.addDataSourceProperty(PASS_Q, getValue(pool, PASS_Q));
/*     */     
/*     */     try {
/* 153 */       Context ctx = new InitialContext(props);
/* 154 */       if (ctx != null) {
/* 155 */         Object ds = ctx.lookup(dsName);
/* 156 */         if (ds != null && ds instanceof DataSource) {
/* 157 */           return (DataSource)ds;
/*     */         }
/* 159 */         handleException(""DataSource : "" + dsName + "" not found when looking up"" + "" using JNDI properties : "" + props);
/*     */       }
/*     */       else {
/*     */         
/* 163 */         handleException(""Error getting InitialContext using JNDI properties : "" + props);
/*     */       } 
/* 165 */     } catch (NamingException e) {
/* 166 */       handleException(""Error looking up DataSource : "" + dsName + "" using JNDI properties : "" + props, e);
/*     */     } 
/*     */     
/* 169 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private DataSource createCustomDataSource(OMElement pool, AbstractDBMediator mediator) {
/* 180 */     BasicDataSource ds = new BasicDataSource();
/*     */ 
/*     */     
/* 183 */     ds.setDriverClassName(getValue(pool, DRIVER_Q));
/* 184 */     ds.setUsername(getValue(pool, USER_Q));
/* 185 */     ds.setPassword(getValue(pool, PASS_Q));
/* 186 */     ds.setUrl(getValue(pool, URL_Q));
/*     */ 
/*     */     
/* 189 */     mediator.addDataSourceProperty(DRIVER_Q, getValue(pool, DRIVER_Q));
/* 190 */     mediator.addDataSourceProperty(URL_Q, getValue(pool, URL_Q));
/* 191 */     mediator.addDataSourceProperty(USER_Q, getValue(pool, USER_Q));
/* 192 */     mediator.addDataSourceProperty(PASS_Q, getValue(pool, PASS_Q));
/*     */     
/* 194 */     Iterator<OMElement> props = pool.getChildrenWithName(PROP_Q);
/* 195 */     while (props.hasNext()) {
/*     */       
/* 197 */       OMElement prop = props.next();
/* 198 */       String name = prop.getAttribute(ATT_NAME).getAttributeValue();
/* 199 */       String value = prop.getAttribute(ATT_VALUE).getAttributeValue();
/*     */       
/* 201 */       mediator.addDataSourceProperty(name, value);
/*     */       
/* 203 */       if (""autocommit"".equals(name)) {
/* 204 */         if (""true"".equals(value)) {
/* 205 */           ds.setDefaultAutoCommit(true); continue;
/* 206 */         }  if (""false"".equals(value))
/* 207 */           ds.setDefaultAutoCommit(false);  continue;
/*     */       } 
/* 209 */       if (""isolation"".equals(name))
/*     */         
/* 211 */         try { if (""Connection.TRANSACTION_NONE"".equals(value)) {
/* 212 */             ds.setDefaultTransactionIsolation(0); continue;
/* 213 */           }  if (""Connection.TRANSACTION_READ_COMMITTED"".equals(value)) {
/* 214 */             ds.setDefaultTransactionIsolation(2); continue;
/* 215 */           }  if (""Connection.TRANSACTION_READ_UNCOMMITTED"".equals(value)) {
/* 216 */             ds.setDefaultTransactionIsolation(1); continue;
/* 217 */           }  if (""Connection.TRANSACTION_REPEATABLE_READ"".equals(value)) {
/* 218 */             ds.setDefaultTransactionIsolation(4); continue;
/* 219 */           }  if (""Connection.TRANSACTION_SERIALIZABLE"".equals(value))
/* 220 */             ds.setDefaultTransactionIsolation(8); 
/*     */           continue; }
/* 222 */         catch (NumberFormatException ignore) { continue; }
/* 223 */           if (""initialsize"".equals(name))
/*     */         
/* 225 */         try { ds.setInitialSize(Integer.parseInt(value)); continue; }
/* 226 */         catch (NumberFormatException ignore) { continue; }
/* 227 */           if (""maxactive"".equals(name))
/*     */         
/* 229 */         try { ds.setMaxActive(Integer.parseInt(value)); continue; }
/* 230 */         catch (NumberFormatException ignore) { continue; }
/* 231 */           if (""maxidle"".equals(name))
/*     */         
/* 233 */         try { ds.setMaxIdle(Integer.parseInt(value)); continue; }
/* 234 */         catch (NumberFormatException ignore) { continue; }
/* 235 */           if (""maxopenstatements"".equals(name))
/*     */         
/* 237 */         try { ds.setMaxOpenPreparedStatements(Integer.parseInt(value)); continue; }
/* 238 */         catch (NumberFormatException ignore) { continue; }
/* 239 */           if (""maxwait"".equals(name))
/*     */         
/* 241 */         try { ds.setMaxWait(Long.parseLong(value)); continue; }
/* 242 */         catch (NumberFormatException ignore) { continue; }
/* 243 */           if (""minidle"".equals(name))
/*     */         
/* 245 */         try { ds.setMinIdle(Integer.parseInt(value)); continue; }
/* 246 */         catch (NumberFormatException ignore) { continue; }
/* 247 */           if (""poolstatements"".equals(name)) {
/* 248 */         if (""true"".equals(value)) {
/* 249 */           ds.setPoolPreparedStatements(true); continue;
/* 250 */         }  if (""false"".equals(value))
/* 251 */           ds.setPoolPreparedStatements(false);  continue;
/*     */       } 
/* 253 */       if (""testonborrow"".equals(name)) {
/* 254 */         if (""true"".equals(value)) {
/* 255 */           ds.setTestOnBorrow(true); continue;
/* 256 */         }  if (""false"".equals(value))
/* 257 */           ds.setTestOnBorrow(false);  continue;
/*     */       } 
/* 259 */       if (""testonreturn"".equals(name)) {
/* 260 */         if (""true"".equals(value)) {
/* 261 */           ds.setTestOnReturn(true); continue;
/* 262 */         }  if (""false"".equals(value))
/* 263 */           ds.setTestOnReturn(false);  continue;
/*     */       } 
/* 265 */       if (""testwhileidle"".equals(name)) {
/* 266 */         if (""true"".equals(value)) {
/* 267 */           ds.setTestWhileIdle(true); continue;
/* 268 */         }  if (""false"".equals(value))
/* 269 */           ds.setTestWhileIdle(false);  continue;
/*     */       } 
/* 271 */       if (""validationquery"".equals(name)) {
/* 272 */         ds.setValidationQuery(value);
/*     */       }
/*     */     } 
/* 275 */     return (DataSource)ds;
/*     */   }
/*     */ 
/*     */   
/*     */   protected void processStatements(OMElement elem, AbstractDBMediator mediator) {
/* 280 */     Iterator<OMElement> iter = elem.getChildrenWithName(STMNT_Q);
/* 281 */     while (iter.hasNext()) {
/*     */       
/* 283 */       OMElement stmntElt = iter.next();
/* 284 */       Statement statement = new Statement(getValue(stmntElt, SQL_Q));
/*     */       
/* 286 */       Iterator<OMElement> paramIter = stmntElt.getChildrenWithName(PARAM_Q);
/* 287 */       while (paramIter.hasNext()) {
/*     */         
/* 289 */         OMElement paramElt = paramIter.next();
/* 290 */         String xpath = getAttribute(paramElt, ATT_EXPRN);
/* 291 */         String value = getAttribute(paramElt, ATT_VALUE);
/*     */         
/* 293 */         if (xpath != null || value != null) {
/*     */           
/* 295 */           AXIOMXPath xp = null;
/* 296 */           if (xpath != null) {
/*     */             try {
/* 298 */               xp = new AXIOMXPath(xpath);
/* 299 */               OMElementUtils.addNameSpaces(xp, paramElt, log);
/*     */             }
/* 301 */             catch (JaxenException e) {
/* 302 */               handleException(""Invalid XPath specified for the source attribute : "" + xpath);
/*     */             } 
/*     */           }
/*     */           
/* 306 */           statement.addParameter(value, xp, getAttribute(paramElt, ATT_TYPE));
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 313 */       Iterator<OMElement> resultIter = stmntElt.getChildrenWithName(RESULT_Q);
/* 314 */       while (resultIter.hasNext()) {
/*     */         
/* 316 */         OMElement resultElt = resultIter.next();
/* 317 */         statement.addResult(getAttribute(resultElt, ATT_NAME), getAttribute(resultElt, ATT_COLUMN));
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 322 */       mediator.addStatement(statement);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected String getValue(OMElement elt, QName qName) {
/* 327 */     OMElement e = elt.getFirstChildWithName(qName);
/* 328 */     if (e != null) {
/* 329 */       return e.getText();
/*     */     }
/* 331 */     handleException(""Unable to read configuration value for : "" + qName);
/*     */     
/* 333 */     return null;
/*     */   }
/*     */   
/*     */   protected String getAttribute(OMElement elt, QName qName) {
/* 337 */     OMAttribute a = elt.getAttribute(qName);
/* 338 */     if (a != null) {
/* 339 */       return a.getAttributeValue();
/*     */     }
/* 341 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractDBMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractDBMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*     */ import org.apache.synapse.mediators.db.Statement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractDBMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*     */   protected void serializeDBInformation(AbstractDBMediator mediator, OMElement dbParent) {
/*  80 */     OMElement connElt = fac.createOMElement(""connection"", synNS);
/*  81 */     OMElement poolElt = fac.createOMElement(""pool"", synNS);
/*     */     
/*  83 */     Iterator iter = mediator.getDataSourceProps().keySet().iterator();
/*  84 */     while (iter.hasNext()) {
/*     */       
/*  86 */       Object o = iter.next();
/*  87 */       String value = (String)mediator.getDataSourceProps().get(o);
/*     */       
/*  89 */       if (o instanceof QName) {
/*  90 */         QName name = (QName)o;
/*  91 */         OMElement elt = fac.createOMElement(name.getLocalPart(), synNS);
/*  92 */         elt.setText(value);
/*  93 */         poolElt.addChild((OMNode)elt); continue;
/*     */       } 
/*  95 */       if (o instanceof String) {
/*  96 */         OMElement elt = fac.createOMElement(AbstractDBMediatorFactory.PROP_Q.getLocalPart(), synNS);
/*     */         
/*  98 */         elt.addAttribute(fac.createOMAttribute(""name"", nullNS, (String)o));
/*  99 */         elt.addAttribute(fac.createOMAttribute(""value"", nullNS, value));
/* 100 */         poolElt.addChild((OMNode)elt);
/*     */       } 
/*     */     } 
/*     */     
/* 104 */     connElt.addChild((OMNode)poolElt);
/* 105 */     dbParent.addChild((OMNode)connElt);
/*     */ 
/*     */     
/* 108 */     Iterator<Statement> statementIter = mediator.getStatementList().iterator();
/* 109 */     while (statementIter.hasNext()) {
/*     */       
/* 111 */       Statement statement = statementIter.next();
/* 112 */       OMElement stmntElt = fac.createOMElement(AbstractDBMediatorFactory.STMNT_Q.getLocalPart(), synNS);
/*     */ 
/*     */       
/* 115 */       OMElement sqlElt = fac.createOMElement(AbstractDBMediatorFactory.SQL_Q.getLocalPart(), synNS);
/*     */       
/* 117 */       sqlElt.setText(statement.getRawStatement());
/* 118 */       stmntElt.addChild((OMNode)sqlElt);
/*     */ 
/*     */       
/* 121 */       for (Iterator<Statement.Parameter> it = statement.getParameters().iterator(); it.hasNext(); ) {
/*     */         
/* 123 */         Statement.Parameter param = it.next();
/* 124 */         OMElement paramElt = fac.createOMElement(AbstractDBMediatorFactory.PARAM_Q.getLocalPart(), synNS);
/*     */ 
/*     */         
/* 127 */         if (param.getPropertyName() != null) {
/* 128 */           paramElt.addAttribute(fac.createOMAttribute(""value"", nullNS, param.getPropertyName()));
/*     */         }
/*     */         
/* 131 */         if (param.getXpath() != null) {
/* 132 */           paramElt.addAttribute(fac.createOMAttribute(""expression"", nullNS, param.getXpath().toString()));
/*     */           
/* 134 */           serializeNamespaces(paramElt, param.getXpath());
/*     */         } 
/*     */         
/* 137 */         switch (param.getType()) {
/*     */           case 1:
/* 139 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""CHAR""));
/*     */             break;
/*     */           
/*     */           case 12:
/* 143 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""VARCHAR""));
/*     */             break;
/*     */           
/*     */           case -1:
/* 147 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""LONGVARCHAR""));
/*     */             break;
/*     */           
/*     */           case 2:
/* 151 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""NUMERIC""));
/*     */             break;
/*     */           
/*     */           case 3:
/* 155 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DECIMAL""));
/*     */             break;
/*     */           
/*     */           case -7:
/* 159 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""BIT""));
/*     */             break;
/*     */           
/*     */           case -6:
/* 163 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TINYINT""));
/*     */             break;
/*     */           
/*     */           case 5:
/* 167 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""SMALLINT""));
/*     */             break;
/*     */           
/*     */           case 4:
/* 171 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""INTEGER""));
/*     */             break;
/*     */           
/*     */           case -5:
/* 175 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""BIGINT""));
/*     */             break;
/*     */           
/*     */           case 7:
/* 179 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""REAL""));
/*     */             break;
/*     */           
/*     */           case 6:
/* 183 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""FLOAT""));
/*     */             break;
/*     */           
/*     */           case 8:
/* 187 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DOUBLE""));
/*     */             break;
/*     */           
/*     */           case 91:
/* 191 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""DATE""));
/*     */             break;
/*     */           
/*     */           case 92:
/* 195 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TIME""));
/*     */             break;
/*     */           
/*     */           case 93:
/* 199 */             paramElt.addAttribute(fac.createOMAttribute(""type"", nullNS, ""TIMESTAMP""));
/*     */             break;
/*     */           
/*     */           default:
/* 203 */             throw new SynapseException(""Unknown or unsupported JDBC type : "" + param.getType());
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 208 */         stmntElt.addChild((OMNode)paramElt);
/*     */       } 
/*     */ 
/*     */       
/* 212 */       for (Iterator<String> it = statement.getResultsMap().keySet().iterator(); it.hasNext(); ) {
/*     */         
/* 214 */         String name = it.next();
/* 215 */         String columnStr = (String)statement.getResultsMap().get(name);
/*     */         
/* 217 */         OMElement resultElt = fac.createOMElement(AbstractDBMediatorFactory.RESULT_Q.getLocalPart(), synNS);
/*     */ 
/*     */         
/* 220 */         resultElt.addAttribute(fac.createOMAttribute(""name"", nullNS, name));
/*     */         
/* 222 */         resultElt.addAttribute(fac.createOMAttribute(""column"", nullNS, columnStr));
/*     */ 
/*     */         
/* 225 */         stmntElt.addChild((OMNode)resultElt);
/*     */       } 
/*     */       
/* 228 */       dbParent.addChild((OMNode)stmntElt);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractDBMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractListMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractListMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/*    */   protected static void addChildren(OMElement el, ListMediator m) {
/* 39 */     Iterator<OMElement> it = el.getChildElements();
/* 40 */     while (it.hasNext()) {
/* 41 */       OMElement child = it.next();
/* 42 */       Mediator med = MediatorFactoryFinder.getInstance().getMediator(child);
/* 43 */       if (med != null) {
/* 44 */         m.addChild(med); continue;
/*    */       } 
/* 46 */       String msg = ""Unknown mediator : "" + child.getLocalName();
/* 47 */       log.error(msg);
/* 48 */       throw new SynapseException(msg);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractListMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractListMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractListMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   protected void serializeChildren(OMElement parent, List list) {
/* 34 */     Iterator<Mediator> iter = list.iterator();
/* 35 */     while (iter.hasNext()) {
/* 36 */       Mediator child = iter.next();
/* 37 */       MediatorSerializer medSer = MediatorSerializerFinder.getInstance().getSerializer(child);
/* 38 */       if (medSer != null) {
/* 39 */         medSer.serializeMediator(parent, child); continue;
/*    */       } 
/* 41 */       handleException(""Unable to find a serializer for mediator : "" + child.getType());
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractListMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractMediatorFactory
/*    */   implements MediatorFactory
/*    */ {
/*    */   protected static Log log;
/* 35 */   protected static final QName ATT_NAME = new QName(""name"");
/* 36 */   protected static final QName ATT_VALUE = new QName(""value"");
/* 37 */   protected static final QName ATT_XPATH = new QName(""xpath"");
/* 38 */   protected static final QName ATT_REGEX = new QName(""regex"");
/* 39 */   protected static final QName ATT_EXPRN = new QName(""expression"");
/* 40 */   protected static final QName ATT_KEY = new QName(""key"");
/* 41 */   protected static final QName ATT_SOURCE = new QName(""source"");
/* 42 */   protected static final QName ATT_ONERROR = new QName(""onError"");
/* 43 */   protected static final QName ATT_STATS = new QName(""statistics"");
/*    */   
/* 45 */   protected static final QName PROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"");
/*    */   
/* 47 */   protected static final QName FEATURE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""feature"");
/*    */   
/* 49 */   protected static final QName TARGET_Q = new QName(""http://ws.apache.org/ns/synapse"", ""target"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 56 */   protected AbstractMediatorFactory() { log = LogFactory.getLog(getClass()); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   protected void processTraceState(Mediator mediator, OMElement mediatorOmElement) {
/* 67 */     OMAttribute trace = mediatorOmElement.getAttribute(new QName("""", ""trace""));
/*    */ 
/*    */     
/* 70 */     if (trace != null) {
/* 71 */       String traceValue = trace.getAttributeValue();
/* 72 */       if (traceValue != null) {
/* 73 */         if (traceValue.equals(""enable"")) {
/* 74 */           mediator.setTraceState(1);
/* 75 */         } else if (traceValue.equals(""disable"")) {
/* 76 */           mediator.setTraceState(0);
/*    */         } 
/*    */       }
/*    */     } 
/*    */   }
/*    */   
/*    */   protected void handleException(String message, Exception e) {
/* 83 */     LogFactory.getLog(getClass()).error(message, e);
/* 84 */     throw new SynapseException(message, e);
/*    */   }
/*    */   
/*    */   protected void handleException(String message) {
/* 88 */     LogFactory.getLog(getClass()).error(message);
/* 89 */     throw new SynapseException(message);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AbstractMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractMediatorSerializer
/*     */   implements MediatorSerializer
/*     */ {
/*     */   protected static Log log;
/*  42 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*  43 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*     */   
/*  45 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*     */   
/*  47 */   protected static final QName PROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"", ""syn"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  54 */   protected AbstractMediatorSerializer() { log = LogFactory.getLog(getClass()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static void saveTracingState(OMElement mediatorOmElement, Mediator mediator) {
/*  65 */     int traceState = mediator.getTraceState();
/*  66 */     String traceValue = null;
/*  67 */     if (traceState == 1) {
/*  68 */       traceValue = ""enable"";
/*  69 */     } else if (traceState == 0) {
/*  70 */       traceValue = ""disable"";
/*     */     } 
/*  72 */     if (traceValue != null) {
/*  73 */       mediatorOmElement.addAttribute(fac.createOMAttribute(""trace"", nullNS, traceValue));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void serializeMediatorProperties(OMElement parent, Collection props) {
/*  81 */     Iterator<MediatorProperty> iter = props.iterator();
/*  82 */     while (iter.hasNext()) {
/*  83 */       MediatorProperty mp = iter.next();
/*  84 */       OMElement prop = fac.createOMElement(""property"", synNS, (OMContainer)parent);
/*  85 */       if (mp.getName() != null) {
/*  86 */         prop.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
/*     */       } else {
/*  88 */         handleException(""Mediator property name missing"");
/*     */       } 
/*     */       
/*  91 */       if (mp.getValue() != null) {
/*  92 */         prop.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue())); continue;
/*     */       } 
/*  94 */       if (mp.getExpression() != null) {
/*  95 */         prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, mp.getExpression().toString()));
/*     */         
/*  97 */         serializeNamespaces(prop, mp.getExpression());
/*     */         continue;
/*     */       } 
/* 100 */       handleException(""Mediator property must have a literal value or be an expression"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 106 */   protected void serializeProperties(OMElement parent, Collection props) { serializeMediatorProperties(parent, props); }
/*     */ 
/*     */   
/*     */   protected void serializeNamespaces(OMElement elem, AXIOMXPath xpath) {
/* 110 */     Iterator<String> iter = xpath.getNamespaces().keySet().iterator();
/* 111 */     while (iter.hasNext()) {
/* 112 */       String prefix = iter.next();
/* 113 */       String uri = xpath.getNamespaceContext().translateNamespacePrefixToUri(prefix);
/* 114 */       if (!""http://ws.apache.org/ns/synapse"".equals(uri)) {
/* 115 */         elem.declareNamespace(uri, prefix);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void handleException(String msg) {
/* 121 */     LogFactory.getLog(getClass()).error(msg);
/* 122 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   protected void handleException(String msg, Exception e) {
/* 126 */     LogFactory.getLog(getClass()).error(msg, e);
/* 127 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AbstractMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AggregateMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.mediators.builtin.DropMediator;
/*     */ import org.apache.synapse.mediators.eip.aggregator.AggregateMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AggregateMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  52 */   private static final Log log = LogFactory.getLog(AggregateMediatorFactory.class);
/*     */   
/*  54 */   private static final QName AGGREGATE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""aggregate"");
/*  55 */   private static final QName CORELATE_ON_Q = new QName(""http://ws.apache.org/ns/synapse"", ""corelateOn"");
/*  56 */   private static final QName COMPLETE_CONDITION_Q = new QName(""http://ws.apache.org/ns/synapse"", ""completeCondition"");
/*     */   
/*  58 */   private static final QName MESSAGE_COUNT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""messageCount"");
/*     */   
/*  60 */   private static final QName ON_COMPLETE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""onComplete"");
/*  61 */   private static final QName INVALIDATE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""invalidate"");
/*     */   
/*  63 */   private static final QName TIME_TO_LIVE_Q = new QName("""", ""timeToLive"");
/*  64 */   private static final QName EXPRESSION_Q = new QName("""", ""expression"");
/*  65 */   private static final QName TIMEOUT_Q = new QName("""", ""timeout"");
/*  66 */   private static final QName MIN_Q = new QName("""", ""min"");
/*  67 */   private static final QName MAX_Q = new QName("""", ""max"");
/*  68 */   private static final QName TYPE_Q = new QName("""", ""type"");
/*  69 */   private static final QName SEQUENCE_Q = new QName("""", ""sequence"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  73 */     AggregateMediator mediator = new AggregateMediator();
/*  74 */     processTraceState((Mediator)mediator, elem);
/*     */     
/*  76 */     OMAttribute timeToLive = elem.getAttribute(TIME_TO_LIVE_Q);
/*  77 */     if (timeToLive != null) {
/*  78 */       mediator.setTimeToInvalidate(Long.parseLong(timeToLive.getAttributeValue()) * 1000L);
/*     */     }
/*     */     
/*  81 */     OMElement corelateOn = elem.getFirstChildWithName(CORELATE_ON_Q);
/*  82 */     if (corelateOn != null) {
/*  83 */       OMAttribute corelateExpr = corelateOn.getAttribute(EXPRESSION_Q);
/*  84 */       if (corelateExpr != null) {
/*     */         try {
/*  86 */           AXIOMXPath xp = new AXIOMXPath(corelateExpr.getAttributeValue());
/*  87 */           OMElementUtils.addNameSpaces(xp, corelateOn, log);
/*  88 */           mediator.setCorelateExpression(xp);
/*  89 */         } catch (JaxenException e) {
/*  90 */           handleException(""Unable to load the corelate XPATH expression"", (Exception)e);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/*  95 */     OMElement completeCond = elem.getFirstChildWithName(COMPLETE_CONDITION_Q);
/*  96 */     if (completeCond != null) {
/*  97 */       OMAttribute completeTimeout = completeCond.getAttribute(TIMEOUT_Q);
/*  98 */       if (completeTimeout != null) {
/*  99 */         mediator.setCompleteTimeout(Long.parseLong(completeTimeout.getAttributeValue()) * 1000L);
/*     */       }
/*     */ 
/*     */       
/* 103 */       OMElement messageCount = completeCond.getFirstChildWithName(MESSAGE_COUNT_Q);
/* 104 */       if (messageCount != null) {
/* 105 */         OMAttribute min = messageCount.getAttribute(MIN_Q);
/* 106 */         if (min != null) {
/* 107 */           mediator.setMinMessagesToComplete(Integer.parseInt(min.getAttributeValue()));
/*     */         }
/*     */         
/* 110 */         OMAttribute max = messageCount.getAttribute(MAX_Q);
/* 111 */         if (max != null) {
/* 112 */           mediator.setMaxMessagesToComplete(Integer.parseInt(max.getAttributeValue()));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 117 */     OMElement invalidate = elem.getFirstChildWithName(INVALIDATE_Q);
/* 118 */     if (invalidate != null) {
/* 119 */       OMAttribute sequenceRef = invalidate.getAttribute(SEQUENCE_Q);
/* 120 */       if (sequenceRef != null) {
/* 121 */         mediator.setInvalidMsgSequenceRef(sequenceRef.getAttributeValue());
/* 122 */       } else if (invalidate.getFirstElement() != null) {
/* 123 */         mediator.setInvalidMsgSequence((new SequenceMediatorFactory()).createAnonymousSequence(invalidate));
/*     */       } 
/*     */ 
/*     */       
/* 127 */       OMAttribute timeout = invalidate.getAttribute(TIMEOUT_Q);
/* 128 */       if (timeout != null) {
/* 129 */         mediator.setInvlidateToDestroyTime(Long.parseLong(timeout.getAttributeValue()));
/*     */       } else {
/* 131 */         mediator.setInvlidateToDestroyTime(300L);
/*     */       } 
/*     */     } 
/*     */     
/* 135 */     OMElement onComplete = elem.getFirstChildWithName(ON_COMPLETE_Q);
/* 136 */     if (onComplete != null) {
/*     */       
/* 138 */       OMAttribute aggregateExpr = onComplete.getAttribute(EXPRESSION_Q);
/* 139 */       if (aggregateExpr != null) {
/*     */         try {
/* 141 */           AXIOMXPath xp = new AXIOMXPath(aggregateExpr.getAttributeValue());
/* 142 */           OMElementUtils.addNameSpaces(xp, onComplete, log);
/* 143 */           mediator.setAggregationExpression(xp);
/* 144 */         } catch (JaxenException e) {
/* 145 */           handleException(""Unable to load the aggregating XPATH"", (Exception)e);
/*     */         } 
/*     */       }
/*     */       
/* 149 */       OMAttribute onCompleteSequence = onComplete.getAttribute(SEQUENCE_Q);
/* 150 */       if (onCompleteSequence != null) {
/* 151 */         mediator.setOnCompleteSequenceRef(onCompleteSequence.getAttributeValue());
/* 152 */       } else if (onComplete.getFirstElement() != null) {
/* 153 */         mediator.setOnCompleteSequence((new SequenceMediatorFactory()).createAnonymousSequence(onComplete));
/*     */       } else {
/*     */         
/* 156 */         SequenceMediator sequence = new SequenceMediator();
/* 157 */         sequence.addChild((Mediator)new DropMediator());
/* 158 */         mediator.setOnCompleteSequence(sequence);
/*     */       } 
/*     */     } 
/* 161 */     return (Mediator)mediator;
/*     */   }
/*     */ 
/*     */   
/* 165 */   public QName getTagQName() { return AGGREGATE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AggregateMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AggregateMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.eip.aggregator.AggregateMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AggregateMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/* 47 */   private static final Log log = LogFactory.getLog(AggregateMediatorSerializer.class);
/*    */ 
/*    */   
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 51 */     if (!(m instanceof AggregateMediator)) {
/* 52 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/* 54 */     AggregateMediator mediator = (AggregateMediator)m;
/* 55 */     OMElement aggregator = fac.createOMElement(""aggregate"", synNS);
/* 56 */     saveTracingState(aggregator, (Mediator)mediator);
/*    */     
/* 58 */     if (mediator.getCorelateExpression() != null) {
/* 59 */       OMElement corelateOn = fac.createOMElement(""corelateOn"", synNS);
/* 60 */       corelateOn.addAttribute(""expression"", mediator.getCorelateExpression().toString(), nullNS);
/* 61 */       serializeNamespaces(corelateOn, mediator.getCorelateExpression());
/* 62 */       aggregator.addChild((OMNode)corelateOn);
/*    */     } 
/*    */     
/* 65 */     OMElement completeCond = fac.createOMElement(""completeCondition"", synNS);
/* 66 */     if (mediator.getCompleteTimeout() != 0L) {
/* 67 */       completeCond.addAttribute(""timeout"", """" + mediator.getCompleteTimeout(), nullNS);
/*    */     }
/* 69 */     OMElement messageCount = fac.createOMElement(""messageCount"", synNS);
/* 70 */     if (mediator.getMinMessagesToComplete() != 0) {
/* 71 */       messageCount.addAttribute(""min"", """" + mediator.getMinMessagesToComplete(), nullNS);
/*    */     }
/* 73 */     if (mediator.getMaxMessagesToComplete() != 0) {
/* 74 */       messageCount.addAttribute(""max"", """" + mediator.getMaxMessagesToComplete(), nullNS);
/*    */     }
/* 76 */     completeCond.addChild((OMNode)messageCount);
/* 77 */     aggregator.addChild((OMNode)completeCond);
/*    */     
/* 79 */     OMElement aggregatorElem = fac.createOMElement(""aggregator"", synNS);
/*    */ 
/*    */ 
/*    */     
/* 83 */     return aggregator;
/*    */   }
/*    */ 
/*    */   
/* 87 */   public String getMediatorClassName() { return AggregateMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AggregateMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediator,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AnonymousListMediator
/*    */   extends AbstractListMediator
/*    */ {
/* 31 */   public boolean mediate(MessageContext synCtx) { return super.mediate(synCtx); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AnonymousListMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AnonymousListMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/*    */   public static AnonymousListMediator createAnonymousListMediator(OMElement el) {
/* 43 */     AnonymousListMediator mediator = new AnonymousListMediator();
/*    */     
/* 45 */     addChildren(el, (ListMediator)mediator);
/*    */     
/* 47 */     return mediator;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AnonymousListMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.AnonymousListMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AnonymousListMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 41 */     if (!(m instanceof AnonymousListMediator)) {
/* 42 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/* 44 */     AnonymousListMediator mediator = (AnonymousListMediator)m;
/* 45 */     serializeChildren(parent, mediator.getList());
/* 46 */     return parent;
/*    */   }
/*    */ 
/*    */   
/* 50 */   public String getMediatorClassName() { return AnonymousListMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\AnonymousListMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.CacheMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.builtin.CacheMediator;
/*     */ import org.wso2.caching.digest.DigestGenerator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CacheMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  44 */   private static final QName CACHE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""cache"");
/*  45 */   private static final QName ATT_ID = new QName(""id"");
/*  46 */   private static final QName ATT_HASH_GENERATOR = new QName(""hashGenerator"");
/*  47 */   private static final QName ATT_TIMEOUT = new QName(""timeout"");
/*  48 */   private static final QName ATT_SCOPE = new QName(""scope"");
/*  49 */   private static final QName ATT_SEQUENCE = new QName(""sequence"");
/*  50 */   private static final QName ATT_TYPE = new QName(""type"");
/*  51 */   private static final QName ATT_SIZE = new QName(""maxSize"");
/*  52 */   private static final QName ON_CACHE_HIT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""onCacheHit"");
/*     */   
/*  54 */   private static final QName IMPLEMENTATION_Q = new QName(""http://ws.apache.org/ns/synapse"", ""implementation"");
/*     */   
/*     */   private static final long DEFAULT_TIMEOUT = 5000L;
/*     */   
/*     */   private static final int DEFAULT_DISK_CACHE_SIZE = 200;
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  61 */     if (!CACHE_Q.equals(elem.getQName())) {
/*  62 */       handleException(""Unable to create the cache mediator. Unexpected element as the cache mediator configuration"");
/*     */     }
/*     */ 
/*     */     
/*  66 */     CacheMediator cache = new CacheMediator();
/*     */     
/*  68 */     OMAttribute idAttr = elem.getAttribute(ATT_ID);
/*  69 */     if (idAttr != null && idAttr.getAttributeValue() != null) {
/*  70 */       cache.setId(idAttr.getAttributeValue());
/*     */     }
/*     */     
/*  73 */     OMAttribute hashGeneratorAttr = elem.getAttribute(ATT_HASH_GENERATOR);
/*  74 */     if (hashGeneratorAttr != null && hashGeneratorAttr.getAttributeValue() != null) {
/*     */       try {
/*  76 */         Class<?> generator = Class.forName(hashGeneratorAttr.getAttributeValue());
/*  77 */         Object o = generator.newInstance();
/*  78 */         if (o instanceof DigestGenerator) {
/*  79 */           cache.setDigestGenerator((DigestGenerator)o);
/*     */         } else {
/*  81 */           handleException(""Specified class for the hashGenerator is not a DigestGenerator. It *must* implement org.wso2.caching.digest.DigestGenerator interface"");
/*     */         }
/*     */       
/*     */       }
/*  85 */       catch (ClassNotFoundException e) {
/*  86 */         handleException(""Unable to load the hash generator class"", e);
/*  87 */       } catch (IllegalAccessException e) {
/*  88 */         handleException(""Unable to access the hash generator class"", e);
/*  89 */       } catch (InstantiationException e) {
/*  90 */         handleException(""Unable to instantiate the hash generator class"", e);
/*     */       } 
/*     */     }
/*     */     
/*  94 */     OMAttribute timeoutAttr = elem.getAttribute(ATT_TIMEOUT);
/*  95 */     if (timeoutAttr != null && timeoutAttr.getAttributeValue() != null) {
/*  96 */       cache.setTimeout(Long.parseLong(timeoutAttr.getAttributeValue()));
/*     */     } else {
/*  98 */       cache.setTimeout(5000L);
/*     */     } 
/*     */     
/* 101 */     OMAttribute scopeAttr = elem.getAttribute(ATT_SCOPE);
/* 102 */     if (scopeAttr != null && scopeAttr.getAttributeValue() != null && isValidScope(scopeAttr.getAttributeValue())) {
/*     */       
/* 104 */       cache.setScope(scopeAttr.getAttributeValue());
/*     */     } else {
/* 106 */       cache.setScope(""per-host"");
/*     */     } 
/*     */     
/* 109 */     OMElement onCacheHitElem = elem.getFirstChildWithName(ON_CACHE_HIT_Q);
/* 110 */     if (onCacheHitElem != null) {
/* 111 */       OMAttribute sequenceAttr = onCacheHitElem.getAttribute(ATT_SEQUENCE);
/* 112 */       if (sequenceAttr != null && sequenceAttr.getAttributeValue() != null) {
/* 113 */         cache.setOnCacheHitRef(sequenceAttr.getAttributeValue());
/*     */       } else {
/* 115 */         cache.setOnCacheHitSequence((new SequenceMediatorFactory()).createAnonymousSequence(onCacheHitElem));
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 120 */     for (Iterator<OMElement> itr = elem.getChildrenWithName(IMPLEMENTATION_Q); itr.hasNext(); ) {
/* 121 */       OMElement implElem = itr.next();
/* 122 */       OMAttribute typeAttr = implElem.getAttribute(ATT_TYPE);
/* 123 */       OMAttribute sizeAttr = implElem.getAttribute(ATT_SIZE);
/* 124 */       if (typeAttr != null && typeAttr.getAttributeValue() != null) {
/* 125 */         String type = typeAttr.getAttributeValue();
/* 126 */         if (""memory"".equals(type) && sizeAttr != null && sizeAttr.getAttributeValue() != null) {
/*     */           
/* 128 */           cache.setInMemoryCacheSize(Integer.parseInt(sizeAttr.getAttributeValue())); continue;
/* 129 */         }  if (""disk"".equals(type)) {
/* 130 */           log.warn(""Disk based and hirearchycal caching is not implemented yet"");
/* 131 */           if (sizeAttr != null && sizeAttr.getAttributeValue() != null) {
/* 132 */             cache.setDiskCacheSize(Integer.parseInt(sizeAttr.getAttributeValue())); continue;
/*     */           } 
/* 134 */           cache.setDiskCacheSize(200);
/*     */           continue;
/*     */         } 
/* 137 */         handleException(""unknown implementation type for the Cache mediator"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 143 */     return (Mediator)cache;
/*     */   }
/*     */   
/*     */   private boolean isValidScope(String scope) {
/* 147 */     if (""per-host"".equals(scope))
/* 148 */       return true; 
/* 149 */     if (""per-mediator"".equals(scope))
/* 150 */       return true; 
/* 151 */     if (""distributed"".equals(scope)) {
/* 152 */       handleException(""Scope distributed is not supported yet by the Cache mediator"");
/* 153 */       return false;
/*     */     } 
/* 155 */     handleException(""Unknown scope "" + scope + "" for the Cache mediator"");
/* 156 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 161 */   public QName getTagQName() { return CACHE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\CacheMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.CacheMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.builtin.CacheMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CacheMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  40 */     if (!(m instanceof CacheMediator)) {
/*  41 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*  43 */     CacheMediator mediator = (CacheMediator)m;
/*  44 */     OMElement cache = fac.createOMElement(""cache"", synNS);
/*  45 */     saveTracingState(cache, (Mediator)mediator);
/*     */     
/*  47 */     if (mediator.getId() != null) {
/*  48 */       cache.addAttribute(fac.createOMAttribute(""id"", nullNS, mediator.getId()));
/*     */     }
/*     */     
/*  51 */     if (mediator.getDigestGenerator() != null) {
/*  52 */       cache.addAttribute(fac.createOMAttribute(""hashGenerator"", nullNS, mediator.getDigestGenerator().getClass().getName()));
/*     */     }
/*     */ 
/*     */     
/*  56 */     if (mediator.getScope() != null) {
/*  57 */       cache.addAttribute(fac.createOMAttribute(""scope"", nullNS, mediator.getScope()));
/*     */     }
/*     */     
/*  60 */     if (mediator.getTimeout() != 0L) {
/*  61 */       cache.addAttribute(fac.createOMAttribute(""timeout"", nullNS, Long.toString(mediator.getTimeout())));
/*     */     }
/*     */ 
/*     */     
/*  65 */     if (mediator.getOnCacheHitRef() != null) {
/*  66 */       OMElement onCacheHit = fac.createOMElement(""onCacheHit"", synNS);
/*  67 */       onCacheHit.addAttribute(fac.createOMAttribute(""sequence"", nullNS, mediator.getOnCacheHitRef()));
/*     */       
/*  69 */       cache.addChild((OMNode)onCacheHit);
/*  70 */     } else if (mediator.getOnCacheHitSequence() != null) {
/*  71 */       OMElement onCacheHit = fac.createOMElement(""onCacheHit"", synNS);
/*  72 */       (new SequenceMediatorSerializer()).serializeChildren(onCacheHit, mediator.getOnCacheHitSequence().getList());
/*     */       
/*  74 */       cache.addChild((OMNode)onCacheHit);
/*     */     } 
/*     */     
/*  77 */     if (mediator.getInMemoryCacheSize() != 0) {
/*  78 */       OMElement implElem = fac.createOMElement(""implementation"", synNS);
/*  79 */       implElem.addAttribute(fac.createOMAttribute(""type"", nullNS, ""memory""));
/*  80 */       implElem.addAttribute(fac.createOMAttribute(""maxSize"", nullNS, Integer.toString(mediator.getInMemoryCacheSize())));
/*     */       
/*  82 */       cache.addChild((OMNode)implElem);
/*     */     } 
/*     */     
/*  85 */     if (mediator.getDiskCacheSize() != 0) {
/*  86 */       OMElement implElem = fac.createOMElement(""implementation"", synNS);
/*  87 */       implElem.addAttribute(fac.createOMAttribute(""type"", nullNS, ""disk""));
/*  88 */       implElem.addAttribute(fac.createOMAttribute(""maxSize"", nullNS, Integer.toString(mediator.getDiskCacheSize())));
/*     */       
/*  90 */       cache.addChild((OMNode)implElem);
/*     */     } 
/*     */     
/*  93 */     if (parent != null) {
/*  94 */       parent.addChild((OMNode)cache);
/*     */     }
/*     */     
/*  97 */     return cache;
/*     */   }
/*     */ 
/*     */   
/* 101 */   public String getMediatorClassName() { return CacheMediator.class.getName(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\CacheMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ClassMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ext.ClassMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ClassMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  47 */   private static final QName CLASS_Q = new QName(""http://ws.apache.org/ns/synapse"", ""class"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  51 */     ClassMediator classMediator = new ClassMediator();
/*     */     
/*  53 */     OMAttribute name = elem.getAttribute(ATT_NAME);
/*  54 */     if (name == null) {
/*  55 */       String msg = ""The name of the actual mediator class is a required attribute"";
/*  56 */       log.error(msg);
/*  57 */       throw new SynapseException(msg);
/*     */     } 
/*  59 */     Class<?> clazz = null;
/*  60 */     Mediator m = null;
/*     */     try {
/*  62 */       clazz = getClass().getClassLoader().loadClass(name.getAttributeValue());
/*     */       
/*  64 */       m = (Mediator)clazz.newInstance();
/*  65 */     } catch (Exception e) {
/*  66 */       String msg = ""Error : "" + name.getAttributeValue();
/*  67 */       log.error(msg, e);
/*  68 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */     
/*  71 */     for (Iterator<OMElement> it = elem.getChildrenWithName(PROP_Q); it.hasNext(); ) {
/*  72 */       OMElement child = it.next();
/*     */       
/*  74 */       String propName = child.getAttribute(ATT_NAME).getAttributeValue();
/*  75 */       if (propName == null) {
/*  76 */         handleException(""A Class mediator property must specify the name attribute"");
/*     */         continue;
/*     */       } 
/*  79 */       if (child.getAttribute(ATT_VALUE) != null) {
/*  80 */         String value = child.getAttribute(ATT_VALUE).getAttributeValue();
/*  81 */         classMediator.addProperty(propName, value);
/*  82 */         PropertyHelper.setInstanceProperty(propName, value, m); continue;
/*     */       } 
/*  84 */       OMNode omNode = child.getFirstOMChild();
/*  85 */       if (omNode != null) {
/*  86 */         classMediator.addProperty(propName, omNode);
/*  87 */         PropertyHelper.setInstanceProperty(propName, omNode, m); continue;
/*     */       } 
/*  89 */       handleException(""A Class mediator property must specify name and value attributes, or a name and a child XML fragment"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  98 */     classMediator.setMediator(m);
/*  99 */     processTraceState((Mediator)classMediator, elem);
/*     */     
/* 101 */     return (Mediator)classMediator;
/*     */   }
/*     */ 
/*     */   
/* 105 */   public QName getTagQName() { return CLASS_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ClassMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ClassMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ext.ClassMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ClassMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 43 */     if (!(m instanceof ClassMediator)) {
/* 44 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/* 46 */     ClassMediator mediator = (ClassMediator)m;
/* 47 */     OMElement clazz = fac.createOMElement(""class"", synNS);
/* 48 */     saveTracingState(clazz, (Mediator)mediator);
/*    */     
/* 50 */     if (mediator.getMediator() != null && mediator.getMediator().getClass().getName() != null) {
/* 51 */       clazz.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getMediator().getClass().getName()));
/*    */     } else {
/*    */       
/* 54 */       handleException(""Invalid class mediator. The class name is required"");
/*    */     } 
/*    */     
/* 57 */     Iterator<String> itr = mediator.getProperties().keySet().iterator();
/* 58 */     while (itr.hasNext()) {
/* 59 */       String propName = itr.next();
/* 60 */       Object o = mediator.getProperties().get(propName);
/* 61 */       OMElement prop = fac.createOMElement(PROP_Q);
/* 62 */       prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
/*    */       
/* 64 */       if (o instanceof String) {
/* 65 */         prop.addAttribute(fac.createOMAttribute(""value"", nullNS, (String)o));
/*    */       } else {
/* 67 */         prop.addChild((OMNode)o);
/*    */       } 
/* 69 */       clazz.addChild((OMNode)prop);
/*    */     } 
/*    */     
/* 72 */     if (parent != null) {
/* 73 */       parent.addChild((OMNode)clazz);
/*    */     }
/* 75 */     return clazz;
/*    */   }
/*    */ 
/*    */   
/* 79 */   public String getMediatorClassName() { return ClassMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ClassMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.CloneMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.eip.splitter.CloneMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CloneMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 49 */   private static final QName CLONE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""clone"");
/* 50 */   private static final QName ATT_CONTPAR = new QName(""continueParent"");
/* 51 */   private static final QName TARGET_Q = new QName(""http://ws.apache.org/ns/synapse"", ""target"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 62 */     CloneMediator mediator = new CloneMediator();
/* 63 */     processTraceState((Mediator)mediator, elem);
/*    */     
/* 65 */     OMAttribute continueParent = elem.getAttribute(ATT_CONTPAR);
/* 66 */     if (continueParent != null) {
/* 67 */       mediator.setContinueParent(Boolean.valueOf(continueParent.getAttributeValue()).booleanValue());
/*    */     }
/*    */ 
/*    */     
/* 71 */     Iterator<OMElement> targetElements = elem.getChildrenWithName(TARGET_Q);
/* 72 */     while (targetElements.hasNext()) {
/* 73 */       mediator.addTarget(TargetFactory.createTarget(targetElements.next()));
/*    */     }
/*    */     
/* 76 */     return (Mediator)mediator;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public QName getTagQName() { return CLONE_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\CloneMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.CloneMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.eip.Target;
/*    */ import org.apache.synapse.mediators.eip.splitter.CloneMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class CloneMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 55 */     OMElement cloneElem = fac.createOMElement(""clone"", synNS);
/* 56 */     saveTracingState(cloneElem, m);
/*    */     
/* 58 */     CloneMediator clone = (CloneMediator)m;
/* 59 */     if (clone.isContinueParent()) {
/* 60 */       cloneElem.addAttribute(""continueParent"", Boolean.toString(true), nullNS);
/*    */     }
/*    */     
/* 63 */     for (Iterator itr = clone.getTargets().iterator(); itr.hasNext(); ) {
/* 64 */       Object o = itr.next();
/* 65 */       if (o instanceof Target) {
/* 66 */         cloneElem.addChild((OMNode)TargetSerializer.serializeTarget((Target)o));
/*    */       }
/*    */     } 
/*    */ 
/*    */     
/* 71 */     if (parent != null) {
/* 72 */       parent.addChild((OMNode)cloneElem);
/*    */     }
/*    */     
/* 75 */     return cloneElem;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public String getMediatorClassName() { return CloneMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\CloneMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ConfigurationFactory,"package org.apache.synapse.config.xml;
import javax.xml.namespace.QName;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.SynapseConfiguration;
public interface ConfigurationFactory {
  QName getTagQName();
  SynapseConfiguration getConfiguration(OMElement paramOMElement);
  Class getSerializerClass();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ConfigurationFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ConfigurationFactoryAndSerializerFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.XMLToObjectMapper;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ConfigurationFactoryAndSerializerFinder
/*     */   implements XMLToObjectMapper
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(ConfigurationFactoryAndSerializerFinder.class);
/*     */ 
/*     */   
/*  50 */   private static final Class[] configurationFactories = new Class[] { SynapseXMLConfigurationFactory.class };
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   private static ConfigurationFactoryAndSerializerFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  60 */   private static Map factoryMap = new HashMap<Object, Object>();
/*     */   
/*  62 */   private static Map serializerMap = new HashMap<Object, Object>();
/*     */   
/*     */   public static synchronized ConfigurationFactoryAndSerializerFinder getInstance() {
/*  65 */     if (instance == null) {
/*  66 */       instance = new ConfigurationFactoryAndSerializerFinder();
/*     */     }
/*  68 */     return instance;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void reset() {
/*  75 */     factoryMap.clear();
/*  76 */     instance = null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ConfigurationFactoryAndSerializerFinder() {
/*  81 */     factoryMap = new HashMap<Object, Object>();
/*     */     
/*  83 */     for (int i = 0; i < configurationFactories.length; i++) {
/*  84 */       Class<ConfigurationFactory> c = configurationFactories[i];
/*     */       try {
/*  86 */         ConfigurationFactory fac = c.newInstance();
/*  87 */         factoryMap.put(fac.getTagQName(), c);
/*  88 */         serializerMap.put(fac.getTagQName(), fac.getSerializerClass());
/*  89 */       } catch (Exception e) {
/*  90 */         throw new SynapseException(""Error instantiating "" + c.getName(), e);
/*     */       } 
/*     */     } 
/*     */     
/*  94 */     registerExtensions();
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/*  98 */     log.error(msg, e);
/*  99 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 103 */     log.error(msg);
/* 104 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 116 */     Iterator<ConfigurationFactory> it = Service.providers(ConfigurationFactory.class);
/* 117 */     while (it.hasNext()) {
/* 118 */       ConfigurationFactory cf = it.next();
/* 119 */       QName tag = cf.getTagQName();
/* 120 */       factoryMap.put(tag, cf.getClass());
/* 121 */       serializerMap.put(tag, cf.getSerializerClass());
/* 122 */       if (log.isDebugEnabled()) {
/* 123 */         log.debug(""Added MediatorFactory "" + cf.getClass() + "" to handle "" + tag);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public SynapseConfiguration getConfiguration(OMElement element) {
/* 138 */     String localName = element.getLocalName();
/* 139 */     QName qName = null;
/* 140 */     if (element.getNamespace() != null) {
/* 141 */       qName = new QName(element.getNamespace().getNamespaceURI(), localName);
/*     */     } else {
/* 143 */       qName = new QName(localName);
/*     */     } 
/* 145 */     if (log.isDebugEnabled()) {
/* 146 */       log.debug(""getConfiguration("" + qName + "")"");
/*     */     }
/* 148 */     Class<ConfigurationFactory> cls = (Class)factoryMap.get(qName);
/*     */ 
/*     */     
/* 151 */     if (cls == null) {
/* 152 */       String msg = ""Unknown Configuration type referenced by configuration element : "" + qName;
/*     */       
/* 154 */       log.error(msg);
/* 155 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 159 */       ConfigurationFactory cf = cls.newInstance();
/* 160 */       return cf.getConfiguration(element);
/*     */     }
/* 162 */     catch (InstantiationException e) {
/* 163 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 164 */       log.error(msg);
/* 165 */       throw new SynapseException(msg, e);
/*     */     }
/* 167 */     catch (IllegalAccessException e) {
/* 168 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 169 */       log.error(msg);
/* 170 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static OMElement serializeConfiguration(SynapseConfiguration synCfg) {
/* 179 */     if (synCfg.getDefaultQName() == null) {
/* 180 */       return serializeConfiguration(synCfg, XMLConfigConstants.DEFINITIONS_ELT);
/*     */     }
/* 182 */     return serializeConfiguration(synCfg, synCfg.getDefaultQName());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static OMElement serializeConfiguration(SynapseConfiguration synCfg, QName qName) {
/* 196 */     Class<ConfigurationSerializer> cls = (Class)serializerMap.get(qName);
/* 197 */     if (cls == null) {
/* 198 */       String msg = ""Unknown Configuration type referenced by configuration element : "" + qName;
/*     */       
/* 200 */       log.error(msg);
/* 201 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 205 */       ConfigurationSerializer cs = cls.newInstance();
/* 206 */       return cs.serializeConfiguration(synCfg);
/*     */     }
/* 208 */     catch (InstantiationException e) {
/* 209 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 210 */       log.error(msg);
/* 211 */       throw new SynapseException(msg, e);
/*     */     }
/* 213 */     catch (IllegalAccessException e) {
/* 214 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 215 */       log.error(msg);
/* 216 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 226 */   public Map getFactoryMap() { return factoryMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public static Map getSerializerMap() { return serializerMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 246 */     if (om instanceof OMElement) {
/* 247 */       return getConfiguration((OMElement)om);
/*     */     }
/* 249 */     handleException(""Invalid configuration XML : "" + om);
/*     */     
/* 251 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ConfigurationFactoryAndSerializerFinder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ConfigurationSerializer,"package org.apache.synapse.config.xml;
import javax.xml.namespace.QName;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.SynapseConfiguration;
public interface ConfigurationSerializer {
  OMElement serializeConfiguration(SynapseConfiguration paramSynapseConfiguration);
  QName getTagQName();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ConfigurationSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DBLookupMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*    */ import org.apache.synapse.mediators.db.DBLookupMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBLookupMediatorFactory
/*    */   extends AbstractDBMediatorFactory
/*    */ {
/* 57 */   private static final QName DBLOOKUP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""dblookup"");
/*    */ 
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 62 */     DBLookupMediator mediator = new DBLookupMediator();
/* 63 */     buildDataSource(elem, (AbstractDBMediator)mediator);
/* 64 */     processStatements(elem, (AbstractDBMediator)mediator);
/* 65 */     return (Mediator)mediator;
/*    */   }
/*    */ 
/*    */   
/* 69 */   public QName getTagQName() { return DBLOOKUP_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DBLookupMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DBLookupMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*    */ import org.apache.synapse.mediators.db.DBLookupMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBLookupMediatorSerializer
/*    */   extends AbstractDBMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 46 */     if (!(m instanceof DBLookupMediator)) {
/* 47 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 50 */     DBLookupMediator mediator = (DBLookupMediator)m;
/* 51 */     OMElement dbLookup = fac.createOMElement(""dblookup"", synNS);
/* 52 */     saveTracingState(dbLookup, (Mediator)mediator);
/* 53 */     serializeDBInformation((AbstractDBMediator)mediator, dbLookup);
/*    */     
/* 55 */     if (parent != null) {
/* 56 */       parent.addChild((OMNode)dbLookup);
/*    */     }
/* 58 */     return dbLookup;
/*    */   }
/*    */ 
/*    */   
/* 62 */   public String getMediatorClassName() { return DBLookupMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DBLookupMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DBReportMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*    */ import org.apache.synapse.mediators.db.DBReportMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBReportMediatorFactory
/*    */   extends AbstractDBMediatorFactory
/*    */ {
/* 56 */   private static final QName DBREPORT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""dbreport"");
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 60 */     DBReportMediator mediator = new DBReportMediator();
/* 61 */     buildDataSource(elem, (AbstractDBMediator)mediator);
/* 62 */     processStatements(elem, (AbstractDBMediator)mediator);
/* 63 */     return (Mediator)mediator;
/*    */   }
/*    */ 
/*    */   
/* 67 */   public QName getTagQName() { return DBREPORT_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DBReportMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DBReportMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.db.AbstractDBMediator;
/*    */ import org.apache.synapse.mediators.db.DBReportMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBReportMediatorSerializer
/*    */   extends AbstractDBMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 46 */     if (!(m instanceof DBReportMediator)) {
/* 47 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 50 */     DBReportMediator mediator = (DBReportMediator)m;
/* 51 */     OMElement dbReport = fac.createOMElement(""dbreport"", synNS);
/* 52 */     saveTracingState(dbReport, (Mediator)mediator);
/* 53 */     serializeDBInformation((AbstractDBMediator)mediator, dbReport);
/*    */     
/* 55 */     if (parent != null) {
/* 56 */       parent.addChild((OMNode)dbReport);
/*    */     }
/* 58 */     return dbReport;
/*    */   }
/*    */ 
/*    */   
/* 62 */   public String getMediatorClassName() { return DBReportMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DBReportMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DropMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.DropMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 37 */   private static final QName DROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""drop"");
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement el) {
/* 41 */     DropMediator dropMediator1 = new DropMediator();
/*    */ 
/*    */     
/* 44 */     processTraceState((Mediator)dropMediator1, el);
/*    */     
/* 46 */     return (Mediator)dropMediator1;
/*    */   }
/*    */ 
/*    */   
/* 50 */   public QName getTagQName() { return DROP_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DropMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.DropMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.DropMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 32 */     if (!(m instanceof DropMediator)) {
/* 33 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 36 */     DropMediator mediator = (DropMediator)m;
/* 37 */     OMElement drop = fac.createOMElement(""drop"", synNS);
/* 38 */     saveTracingState(drop, (Mediator)mediator);
/*    */     
/* 40 */     if (parent != null) {
/* 41 */       parent.addChild((OMNode)drop);
/*    */     }
/* 43 */     return drop;
/*    */   }
/*    */ 
/*    */   
/* 47 */   public String getMediatorClassName() { return DropMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\DropMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.EntryFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.net.MalformedURLException;
/*    */ import java.net.URL;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.axiom.om.OMText;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.Entry;
/*    */ import org.apache.synapse.config.SynapseConfigUtils;
/*    */ import org.apache.synapse.config.XMLToObjectMapper;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EntryFactory
/*    */   implements XMLToObjectMapper
/*    */ {
/* 38 */   private static Log log = LogFactory.getLog(EntryFactory.class);
/*    */ 
/*    */   
/*    */   public static Entry createEntry(OMElement elem) {
/* 42 */     OMAttribute key = elem.getAttribute(new QName("""", ""key""));
/* 43 */     if (key == null) {
/* 44 */       handleException(""The 'key' attribute is required for a local registry entry"");
/* 45 */       return null;
/*    */     } 
/*    */ 
/*    */     
/* 49 */     Entry entry = new Entry(key.getAttributeValue());
/* 50 */     String src = elem.getAttributeValue(new QName("""", ""src""));
/*    */ 
/*    */ 
/*    */ 
/*    */     
/* 55 */     if (src != null) {
/*    */       try {
/* 57 */         entry.setSrc(new URL(src.trim()));
/* 58 */         entry.setType(2);
/* 59 */         entry.setValue(SynapseConfigUtils.getObject(entry.getSrc()));
/*    */       }
/* 61 */       catch (MalformedURLException e) {
/* 62 */         handleException(""The entry with key : "" + key + "" refers to an invalid URL"");
/*    */       } 
/*    */     } else {
/*    */       
/* 66 */       OMNode nodeValue = elem.getFirstOMChild();
/* 67 */       OMElement elemValue = elem.getFirstElement();
/*    */       
/* 69 */       if (elemValue != null) {
/* 70 */         entry.setType(1);
/* 71 */         entry.setValue(elemValue);
/* 72 */       } else if (nodeValue != null && nodeValue instanceof OMText) {
/* 73 */         entry.setType(0);
/* 74 */         entry.setValue(((OMText)nodeValue).getText().trim());
/*    */       } 
/*    */     } 
/* 77 */     return entry;
/*    */   }
/*    */ 
/*    */   
/*    */   private static void handleException(String msg) {
/* 82 */     log.error(msg);
/* 83 */     throw new SynapseException(msg);
/*    */   }
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 87 */     if (om instanceof OMElement) {
/* 88 */       return createEntry((OMElement)om);
/*    */     }
/* 90 */     handleException(""Invalid XML configuration for an Entry. OMElement expected"");
/*    */     
/* 92 */     return null;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\EntryFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.EntrySerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.net.URL;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.axiom.om.impl.llom.OMTextImpl;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.Entry;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EntrySerializer
/*    */ {
/* 36 */   private static Log log = LogFactory.getLog(EntrySerializer.class);
/*    */   
/* 38 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/* 39 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */   
/* 41 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static OMElement serializeEntry(Entry entry, OMElement parent) {
/* 50 */     OMElement propertyElement = fac.createOMElement(""localEntry"", synNS);
/* 51 */     propertyElement.addAttribute(fac.createOMAttribute(""key"", nullNS, entry.getKey().trim()));
/*    */     
/* 53 */     int type = entry.getType();
/* 54 */     if (type == 2)
/* 55 */     { URL srcUrl = entry.getSrc();
/* 56 */       if (srcUrl != null) {
/* 57 */         propertyElement.addAttribute(fac.createOMAttribute(""src"", nullNS, srcUrl.toString().trim()));
/*    */       } }
/*    */     
/* 60 */     else if (type == 1)
/* 61 */     { Object value = entry.getValue();
/* 62 */       if (value != null && value instanceof OMElement) {
/* 63 */         propertyElement.addChild((OMNode)value);
/*    */       } }
/* 65 */     else if (type == 0)
/* 66 */     { Object value = entry.getValue();
/* 67 */       if (value != null && value instanceof String) {
/* 68 */         OMTextImpl textData = (OMTextImpl)fac.createOMText(((String)value).trim());
/* 69 */         textData.setType(12);
/* 70 */         propertyElement.addChild((OMNode)textData);
/*    */       }  }
/* 72 */     else { if (type == 3)
/*    */       {
/* 74 */         return null;
/*    */       }
/* 76 */       handleException(""Entry type undefined""); }
/*    */     
/* 78 */     if (parent != null) {
/* 79 */       parent.addChild((OMNode)propertyElement);
/*    */     }
/* 81 */     return propertyElement;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 85 */     log.error(msg);
/* 86 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\EntrySerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FaultMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.FaultMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  51 */   private static final QName FAULT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""makefault"");
/*     */   
/*  53 */   private static final QName ATT_VERSION_Q = new QName("""", ""version"");
/*  54 */   private static final QName CODE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""code"");
/*  55 */   private static final QName REASON_Q = new QName(""http://ws.apache.org/ns/synapse"", ""reason"");
/*  56 */   private static final QName NODE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""node"");
/*  57 */   private static final QName ROLE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""role"");
/*  58 */   private static final QName DETAIL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""detail"");
/*     */   
/*     */   private static final String SOAP11 = ""soap11"";
/*     */   
/*     */   private static final String SOAP12 = ""soap12"";
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  65 */     FaultMediator faultMediator = new FaultMediator();
/*     */     
/*  67 */     OMAttribute version = elem.getAttribute(ATT_VERSION_Q);
/*  68 */     if (version != null) {
/*  69 */       if (""soap11"".equals(version.getAttributeValue())) {
/*  70 */         faultMediator.setSoapVersion(1);
/*  71 */       } else if (""soap12"".equals(version.getAttributeValue())) {
/*  72 */         faultMediator.setSoapVersion(2);
/*     */       } else {
/*  74 */         String msg = ""Invalid SOAP version"";
/*  75 */         log.error(msg);
/*  76 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/*  80 */     OMElement code = elem.getFirstChildWithName(CODE_Q);
/*  81 */     if (code != null) {
/*  82 */       OMAttribute value = code.getAttribute(ATT_VALUE);
/*  83 */       OMAttribute expression = code.getAttribute(ATT_EXPRN);
/*     */       
/*  85 */       if (value != null) {
/*  86 */         String name, prefix, strValue = value.getAttributeValue();
/*     */         
/*  88 */         if (strValue.indexOf("":"") != -1) {
/*  89 */           prefix = strValue.substring(0, strValue.indexOf("":""));
/*  90 */           name = strValue.substring(strValue.indexOf("":"") + 1);
/*     */         } else {
/*  92 */           String msg = ""A QName is expected for fault code as prefix:name"";
/*  93 */           log.error(msg);
/*  94 */           throw new SynapseException(msg);
/*     */         } 
/*  96 */         faultMediator.setFaultCodeValue(new QName(OMElementUtils.getNameSpaceWithPrefix(prefix, code), name, prefix));
/*     */       
/*     */       }
/*  99 */       else if (expression != null) {
/*     */         try {
/* 101 */           AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/* 102 */           OMElementUtils.addNameSpaces(xp, code, log);
/* 103 */           faultMediator.setFaultCodeExpr(xp);
/* 104 */         } catch (JaxenException je) {
/* 105 */           String msg = ""Invalid fault code expression : "" + je.getMessage();
/* 106 */           log.error(msg);
/* 107 */           throw new SynapseException(msg, (Throwable)je);
/*     */         } 
/*     */       } else {
/* 110 */         String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
/* 111 */         log.error(msg);
/* 112 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } else {
/*     */       
/* 116 */       String msg = ""The fault code is a required attribute for the makefault mediator"";
/* 117 */       log.error(msg);
/* 118 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 121 */     OMElement reason = elem.getFirstChildWithName(REASON_Q);
/* 122 */     if (reason != null) {
/* 123 */       OMAttribute value = reason.getAttribute(ATT_VALUE);
/* 124 */       OMAttribute expression = reason.getAttribute(ATT_EXPRN);
/*     */       
/* 126 */       if (value != null) {
/* 127 */         faultMediator.setFaultReasonValue(value.getAttributeValue());
/* 128 */       } else if (expression != null) {
/*     */         try {
/* 130 */           AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/* 131 */           OMElementUtils.addNameSpaces(xp, reason, log);
/* 132 */           faultMediator.setFaultReasonExpr(xp);
/*     */         }
/* 134 */         catch (JaxenException je) {
/* 135 */           String msg = ""Invalid fault reason expression : "" + je.getMessage();
/* 136 */           log.error(msg);
/* 137 */           throw new SynapseException(msg, (Throwable)je);
/*     */         } 
/*     */       } else {
/* 140 */         String msg = ""A 'value' or 'expression' attribute must specify the fault code"";
/* 141 */         log.error(msg);
/* 142 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } else {
/*     */       
/* 146 */       String msg = ""The fault reason is a required attribute for the makefault mediator"";
/* 147 */       log.error(msg);
/* 148 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 153 */     processTraceState((Mediator)faultMediator, elem);
/*     */     
/* 155 */     OMElement node = elem.getFirstChildWithName(NODE_Q);
/* 156 */     if (node != null && node.getText() != null) {
/*     */       try {
/* 158 */         faultMediator.setFaultNode(new URI(node.getText()));
/* 159 */       } catch (URISyntaxException e) {
/* 160 */         String msg = ""Invalid URI specified for fault node : "" + node.getText();
/* 161 */         log.error(msg);
/* 162 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/* 166 */     OMElement role = elem.getFirstChildWithName(ROLE_Q);
/* 167 */     if (role != null && role.getText() != null) {
/*     */       try {
/* 169 */         faultMediator.setFaultRole(new URI(role.getText()));
/* 170 */       } catch (URISyntaxException e) {
/* 171 */         String msg = ""Invalid URI specified for fault role : "" + role.getText();
/* 172 */         log.error(msg);
/* 173 */         throw new SynapseException(msg);
/*     */       } 
/*     */     }
/*     */     
/* 177 */     OMElement detail = elem.getFirstChildWithName(DETAIL_Q);
/* 178 */     if (detail != null && detail.getText() != null) {
/* 179 */       faultMediator.setFaultDetail(detail.getText());
/*     */     }
/*     */     
/* 182 */     return (Mediator)faultMediator;
/*     */   }
/*     */ 
/*     */   
/* 186 */   public QName getTagQName() { return FAULT_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\FaultMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FaultMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.transform.FaultMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*     */   private static final String SOAP11 = ""soap11"";
/*     */   private static final String SOAP12 = ""soap12"";
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  47 */     if (!(m instanceof FaultMediator)) {
/*  48 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  51 */     FaultMediator mediator = (FaultMediator)m;
/*  52 */     OMElement fault = fac.createOMElement(""makefault"", synNS);
/*  53 */     saveTracingState(fault, (Mediator)mediator);
/*     */     
/*  55 */     if (mediator.getSoapVersion() == 1) {
/*  56 */       fault.addAttribute(fac.createOMAttribute(""version"", nullNS, ""soap11""));
/*     */     }
/*  58 */     else if (mediator.getSoapVersion() == 2) {
/*  59 */       fault.addAttribute(fac.createOMAttribute(""version"", nullNS, ""soap12""));
/*     */     } 
/*     */ 
/*     */     
/*  63 */     OMElement code = fac.createOMElement(""code"", synNS, (OMContainer)fault);
/*  64 */     if (mediator.getFaultCodeValue() != null) {
/*  65 */       code.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getFaultCodeValue().getPrefix() + "":"" + mediator.getFaultCodeValue().getLocalPart()));
/*     */ 
/*     */       
/*  68 */       code.declareNamespace(mediator.getFaultCodeValue().getNamespaceURI(), mediator.getFaultCodeValue().getPrefix());
/*     */     
/*     */     }
/*  71 */     else if (mediator.getFaultCodeExpr() != null) {
/*  72 */       code.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getFaultCodeExpr().toString()));
/*     */       
/*  74 */       serializeNamespaces(code, mediator.getFaultCodeExpr());
/*     */     } else {
/*     */       
/*  77 */       handleException(""Fault code is required for a fault mediator"");
/*     */     } 
/*     */     
/*  80 */     OMElement reason = fac.createOMElement(""reason"", synNS, (OMContainer)fault);
/*  81 */     if (mediator.getFaultReasonValue() != null) {
/*  82 */       reason.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getFaultReasonValue()));
/*     */     
/*     */     }
/*  85 */     else if (mediator.getFaultReasonExpr() != null) {
/*  86 */       reason.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getFaultReasonExpr().toString()));
/*     */       
/*  88 */       serializeNamespaces(code, mediator.getFaultReasonExpr());
/*     */     } else {
/*     */       
/*  91 */       handleException(""Fault reason is required for a fault mediator"");
/*     */     } 
/*     */ 
/*     */     
/*  95 */     if (mediator.getFaultNode() != null) {
/*  96 */       OMElement node = fac.createOMElement(""node"", synNS, (OMContainer)fault);
/*  97 */       node.setText(mediator.getFaultNode().toString());
/*     */     } 
/*     */     
/* 100 */     if (mediator.getFaultRole() != null) {
/* 101 */       OMElement role = fac.createOMElement(""role"", synNS, (OMContainer)fault);
/* 102 */       role.setText(mediator.getFaultRole().toString());
/*     */     } 
/*     */     
/* 105 */     if (mediator.getFaultDetail() != null) {
/* 106 */       OMElement detail = fac.createOMElement(""detail"", synNS, (OMContainer)fault);
/* 107 */       detail.setText(mediator.getFaultDetail());
/*     */     } 
/*     */     
/* 110 */     if (parent != null) {
/* 111 */       parent.addChild((OMNode)fault);
/*     */     }
/* 113 */     return fault;
/*     */   }
/*     */ 
/*     */   
/* 117 */   public String getMediatorClassName() { return FaultMediator.class.getName(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\FaultMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FilterMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.regex.Pattern;
/*     */ import java.util.regex.PatternSyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.filters.FilterMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  48 */   private static final QName FILTER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""filter"");
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  51 */     FilterMediator filter = new FilterMediator();
/*     */     
/*  53 */     OMAttribute attXpath = elem.getAttribute(ATT_XPATH);
/*  54 */     OMAttribute attSource = elem.getAttribute(ATT_SOURCE);
/*  55 */     OMAttribute attRegex = elem.getAttribute(ATT_REGEX);
/*     */     
/*  57 */     if (attXpath != null) {
/*  58 */       if (attXpath.getAttributeValue() != null && attXpath.getAttributeValue().trim().length() == 0) {
/*  59 */         String msg = ""Invalid attribute value specified for xpath"";
/*  60 */         log.error(msg);
/*  61 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  65 */         filter.setXpath(new AXIOMXPath(attXpath.getAttributeValue()));
/*  66 */       } catch (JaxenException e) {
/*  67 */         String msg = ""Invalid XPath expression for attribute xpath : "" + attXpath.getAttributeValue();
/*  68 */         log.error(msg);
/*  69 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*  72 */       OMElementUtils.addNameSpaces(filter.getXpath(), elem, log);
/*     */     }
/*  74 */     else if (attSource != null && attRegex != null) {
/*     */       
/*  76 */       if ((attSource.getAttributeValue() != null && attSource.getAttributeValue().trim().length() == 0) || (attRegex.getAttributeValue() != null && attRegex.getAttributeValue().trim().length() == 0)) {
/*     */ 
/*     */         
/*  79 */         String msg = ""Invalid attribute values for source and/or regex specified"";
/*  80 */         log.error(msg);
/*  81 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  85 */         filter.setSource(new AXIOMXPath(attSource.getAttributeValue()));
/*  86 */       } catch (JaxenException e) {
/*  87 */         String msg = ""Invalid XPath expression for attribute source : "" + attSource.getAttributeValue();
/*  88 */         log.error(msg);
/*  89 */         throw new SynapseException(msg);
/*     */       } 
/*     */       try {
/*  92 */         filter.setRegex(Pattern.compile(attRegex.getAttributeValue()));
/*  93 */       } catch (PatternSyntaxException pse) {
/*  94 */         String msg = ""Invalid Regular Expression for attribute regex : "" + attRegex.getAttributeValue();
/*  95 */         log.error(msg);
/*  96 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*  99 */       OMElementUtils.addNameSpaces(filter.getSource(), elem, log);
/*     */     } else {
/*     */       
/* 102 */       String msg = ""An xpath or (source, regex) attributes are required for a filter"";
/* 103 */       log.error(msg);
/* 104 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */     
/* 108 */     processTraceState((Mediator)filter, elem);
/* 109 */     addChildren(elem, (ListMediator)filter);
/* 110 */     return (Mediator)filter;
/*     */   }
/*     */ 
/*     */   
/* 114 */   public QName getTagQName() { return FILTER_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\FilterMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.FilterMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.filters.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FilterMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 39 */     if (!(m instanceof FilterMediator)) {
/* 40 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 43 */     FilterMediator mediator = (FilterMediator)m;
/* 44 */     OMElement filter = fac.createOMElement(""filter"", synNS);
/*    */     
/* 46 */     if (mediator.getSource() != null && mediator.getRegex() != null) {
/* 47 */       filter.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 49 */       serializeNamespaces(filter, mediator.getSource());
/*    */       
/* 51 */       filter.addAttribute(fac.createOMAttribute(""regex"", nullNS, mediator.getRegex().pattern()));
/*    */     
/*    */     }
/* 54 */     else if (mediator.getXpath() != null) {
/* 55 */       filter.addAttribute(fac.createOMAttribute(""xpath"", nullNS, mediator.getXpath().toString()));
/*    */       
/* 57 */       serializeNamespaces(filter, mediator.getXpath());
/*    */     } else {
/*    */       
/* 60 */       handleException(""Invalid filter mediator. Should have either a 'source' and a 'regex' OR an 'xpath' "");
/*    */     } 
/*    */ 
/*    */     
/* 64 */     saveTracingState(filter, (Mediator)mediator);
/* 65 */     serializeChildren(filter, mediator.getList());
/*    */     
/* 67 */     if (parent != null) {
/* 68 */       parent.addChild((OMNode)filter);
/*    */     }
/* 70 */     return filter;
/*    */   }
/*    */ 
/*    */   
/* 74 */   public String getMediatorClassName() { return FilterMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\FilterMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.HeaderMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.transform.HeaderMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HeaderMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  51 */   private static final QName HEADER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""header"");
/*  52 */   private static final QName ATT_ACTION = new QName(""action"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  56 */     HeaderMediator headerMediator = new HeaderMediator();
/*  57 */     OMAttribute name = elem.getAttribute(ATT_NAME);
/*  58 */     OMAttribute value = elem.getAttribute(ATT_VALUE);
/*  59 */     OMAttribute exprn = elem.getAttribute(ATT_EXPRN);
/*  60 */     OMAttribute action = elem.getAttribute(ATT_ACTION);
/*     */     
/*  62 */     if (name == null || name.getAttributeValue() == null) {
/*  63 */       String msg = ""A valid name attribute is required for the header mediator"";
/*  64 */       log.error(msg);
/*  65 */       throw new SynapseException(msg);
/*     */     } 
/*  67 */     String nameAtt = name.getAttributeValue();
/*  68 */     int colonPos = nameAtt.indexOf("":"");
/*  69 */     if (colonPos != -1) {
/*     */       
/*  71 */       String prefix = nameAtt.substring(0, colonPos);
/*  72 */       Iterator<OMNamespace> it = elem.getAllDeclaredNamespaces();
/*  73 */       while (it.hasNext()) {
/*  74 */         OMNamespace n = it.next();
/*  75 */         if (prefix.equals(n.getPrefix())) {
/*  76 */           headerMediator.setQName(new QName(n.getNamespaceURI(), nameAtt.substring(colonPos + 1), prefix));
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/*  82 */       headerMediator.setQName(new QName(nameAtt));
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  88 */     processTraceState((Mediator)headerMediator, elem);
/*     */ 
/*     */ 
/*     */     
/*  92 */     if (action != null && ""remove"".equals(action.getAttributeValue())) {
/*  93 */       headerMediator.setAction(1);
/*     */     }
/*     */     
/*  96 */     if (headerMediator.getAction() == 0 && value == null && exprn == null) {
/*     */       
/*  98 */       String msg = ""A 'value' or 'expression' attribute is required for a [set] header mediator"";
/*  99 */       log.error(msg);
/* 100 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 103 */     if (value != null && value.getAttributeValue() != null) {
/* 104 */       headerMediator.setValue(value.getAttributeValue());
/*     */     }
/* 106 */     else if (exprn != null && exprn.getAttributeValue() != null) {
/*     */       try {
/* 108 */         AXIOMXPath xp = new AXIOMXPath(exprn.getAttributeValue());
/* 109 */         OMElementUtils.addNameSpaces(xp, elem, log);
/* 110 */         headerMediator.setExpression(xp);
/* 111 */       } catch (JaxenException je) {
/* 112 */         String msg = ""Invalid XPath expression : "" + exprn.getAttributeValue();
/* 113 */         log.error(msg);
/* 114 */         throw new SynapseException(msg, (Throwable)je);
/*     */       } 
/*     */     } 
/*     */     
/* 118 */     return (Mediator)headerMediator;
/*     */   }
/*     */ 
/*     */   
/* 122 */   public QName getTagQName() { return HEADER_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\HeaderMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.HeaderMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.transform.HeaderMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class HeaderMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 45 */     if (!(m instanceof HeaderMediator)) {
/* 46 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 49 */     HeaderMediator mediator = (HeaderMediator)m;
/* 50 */     OMElement header = fac.createOMElement(""header"", synNS);
/* 51 */     saveTracingState(header, (Mediator)mediator);
/*    */     
/* 53 */     QName qName = mediator.getQName();
/* 54 */     if (qName != null) {
/* 55 */       if (qName.getNamespaceURI() != null) {
/* 56 */         header.addAttribute(fac.createOMAttribute(""name"", nullNS, ((qName.getPrefix() != null && !"""".equals(qName.getPrefix())) ? (qName.getPrefix() + "":"") : """") + qName.getLocalPart()));
/*    */ 
/*    */ 
/*    */ 
/*    */         
/* 61 */         header.declareNamespace(qName.getNamespaceURI(), qName.getPrefix());
/*    */       } else {
/* 63 */         header.addAttribute(fac.createOMAttribute(""name"", nullNS, qName.getLocalPart()));
/*    */       } 
/*    */     }
/*    */ 
/*    */     
/* 68 */     if (mediator.getAction() == 1) {
/* 69 */       header.addAttribute(fac.createOMAttribute(""action"", nullNS, ""remove""));
/*    */     
/*    */     }
/* 72 */     else if (mediator.getValue() != null) {
/* 73 */       header.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getValue()));
/*    */     
/*    */     }
/* 76 */     else if (mediator.getExpression() != null) {
/* 77 */       header.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getExpression().toString()));
/*    */       
/* 79 */       serializeNamespaces(header, mediator.getExpression());
/*    */     } else {
/*    */       
/* 82 */       handleException(""Value or expression required for a set header mediator"");
/*    */     } 
/*    */ 
/*    */     
/* 86 */     if (parent != null) {
/* 87 */       parent.addChild((OMNode)header);
/*    */     }
/* 89 */     return header;
/*    */   }
/*    */ 
/*    */   
/* 93 */   public String getMediatorClassName() { return HeaderMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\HeaderMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.InMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.filters.InMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 39 */   private static final QName IN_Q = new QName(""http://ws.apache.org/ns/synapse"", ""in"");
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 42 */     InMediator filter = new InMediator();
/*    */ 
/*    */     
/* 45 */     processTraceState((Mediator)filter, elem);
/* 46 */     addChildren(elem, (ListMediator)filter);
/* 47 */     return (Mediator)filter;
/*    */   }
/*    */ 
/*    */   
/* 51 */   public QName getTagQName() { return IN_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\InMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.InMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.filters.InMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 32 */     if (!(m instanceof InMediator)) {
/* 33 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 36 */     InMediator mediator = (InMediator)m;
/* 37 */     OMElement in = fac.createOMElement(""in"", synNS);
/* 38 */     saveTracingState(in, (Mediator)mediator);
/*    */     
/* 40 */     serializeChildren(in, mediator.getList());
/*    */     
/* 42 */     if (parent != null) {
/* 43 */       parent.addChild((OMNode)in);
/*    */     }
/* 45 */     return in;
/*    */   }
/*    */ 
/*    */   
/* 49 */   public String getMediatorClassName() { return InMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\InMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.IterateMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.eip.splitter.IterateMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IterateMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  51 */   private static final Log log = LogFactory.getLog(IterateMediatorFactory.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   private static final QName ITERATE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""iterate"");
/*  57 */   private static final QName ATT_CONTPAR = new QName(""continueParent"");
/*  58 */   private static final QName ATT_PREPLD = new QName(""preservePayload"");
/*  59 */   private static final QName ATT_ATTACHPATH = new QName(""attachPath"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  69 */     IterateMediator mediator = new IterateMediator();
/*  70 */     processTraceState((Mediator)mediator, elem);
/*     */     
/*  72 */     OMAttribute continueParent = elem.getAttribute(ATT_CONTPAR);
/*  73 */     if (continueParent != null) {
/*  74 */       mediator.setContinueParent(Boolean.valueOf(continueParent.getAttributeValue()).booleanValue());
/*     */     }
/*     */ 
/*     */     
/*  78 */     OMAttribute preservePayload = elem.getAttribute(ATT_PREPLD);
/*  79 */     if (preservePayload != null) {
/*  80 */       mediator.setPreservePayload(Boolean.valueOf(preservePayload.getAttributeValue()).booleanValue());
/*     */     }
/*     */ 
/*     */     
/*  84 */     OMAttribute expression = elem.getAttribute(ATT_EXPRN);
/*  85 */     if (expression != null) {
/*     */       try {
/*  87 */         AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/*  88 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  89 */         mediator.setExpression(xp);
/*  90 */       } catch (JaxenException e) {
/*  91 */         handleException(""Unable to build the IterateMediator. Invalid XPATH "" + expression.getAttributeValue(), (Exception)e);
/*     */       } 
/*     */     } else {
/*     */       
/*  95 */       handleException(""XPATH expression is required for an IterateMediator under the \""expression\"" attribute"");
/*     */     } 
/*     */ 
/*     */     
/*  99 */     OMAttribute attachPath = elem.getAttribute(ATT_ATTACHPATH);
/* 100 */     String attachPathValue = ""."";
/* 101 */     if (attachPath != null && !mediator.isPreservePayload()) {
/* 102 */       handleException(""Wrong configuration for the iterate mediator :: if the iterator should not preserve payload, then attachPath can not be present"");
/*     */     }
/* 104 */     else if (attachPath != null) {
/* 105 */       attachPathValue = attachPath.getAttributeValue();
/*     */     } 
/*     */     
/*     */     try {
/* 109 */       AXIOMXPath xp = new AXIOMXPath(attachPathValue);
/* 110 */       OMElementUtils.addNameSpaces(xp, elem, log);
/* 111 */       mediator.setAttachPath(xp);
/* 112 */     } catch (JaxenException e) {
/* 113 */       handleException(""Unable to build the IterateMediator. Invalid XPATH "" + attachPathValue, (Exception)e);
/*     */     } 
/*     */ 
/*     */     
/* 117 */     OMElement targetElement = elem.getFirstChildWithName(TARGET_Q);
/* 118 */     if (targetElement != null) {
/* 119 */       mediator.setTarget(TargetFactory.createTarget(targetElement));
/*     */     } else {
/* 121 */       handleException(""Target for an iterate mediator is required :: missing target"");
/*     */     } 
/*     */     
/* 124 */     return (Mediator)mediator;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public QName getTagQName() { return ITERATE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\IterateMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.IterateMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.eip.splitter.IterateMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IterateMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  57 */     if (!(m instanceof IterateMediator)) {
/*  58 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  61 */     OMElement itrElem = fac.createOMElement(""iterate"", synNS);
/*  62 */     saveTracingState(itrElem, m);
/*     */     
/*  64 */     IterateMediator itrMed = (IterateMediator)m;
/*  65 */     if (itrMed.isContinueParent()) {
/*  66 */       itrElem.addAttribute(""continueParent"", Boolean.toString(true), nullNS);
/*     */     }
/*     */     
/*  69 */     if (itrMed.isPreservePayload()) {
/*  70 */       itrElem.addAttribute(""preservePayload"", Boolean.toString(true), nullNS);
/*     */     }
/*     */     
/*  73 */     if (itrMed.getAttachPath() != null && !""."".equals(itrMed.getAttachPath().toString())) {
/*  74 */       itrElem.addAttribute(""attachPath"", itrMed.getAttachPath().toString(), nullNS);
/*  75 */       serializeNamespaces(itrElem, itrMed.getAttachPath());
/*     */     } 
/*     */     
/*  78 */     if (itrMed.getExpression() != null) {
/*  79 */       itrElem.addAttribute(""expression"", itrMed.getExpression().toString(), nullNS);
/*  80 */       serializeNamespaces(itrElem, itrMed.getExpression());
/*     */     } else {
/*  82 */       handleException(""Missing expression of the IterateMediator which is required."");
/*     */     } 
/*     */     
/*  85 */     itrElem.addChild((OMNode)TargetSerializer.serializeTarget(itrMed.getTarget()));
/*     */ 
/*     */     
/*  88 */     if (parent != null) {
/*  89 */       parent.addChild((OMNode)itrElem);
/*     */     }
/*     */     
/*  92 */     return itrElem;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public String getMediatorClassName() { return IterateMediator.class.getName(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\IterateMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.LogMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.LogMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogMediatorFactory
/*    */   extends AbstractMediatorFactory
/*    */ {
/* 42 */   private static final QName LOG_Q = new QName(""http://ws.apache.org/ns/synapse"", ""log"");
/*    */   private static final String SIMPLE = ""simple"";
/*    */   private static final String HEADERS = ""headers"";
/*    */   private static final String FULL = ""full"";
/*    */   private static final String CUSTOM = ""custom"";
/* 47 */   private static final QName ATT_LEVEL = new QName(""level"");
/* 48 */   private static final QName ATT_SEPERATOR = new QName(""separator"");
/*    */ 
/*    */   
/* 51 */   public QName getTagQName() { return LOG_Q; }
/*    */ 
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 56 */     LogMediator logMediator = new LogMediator();
/*    */ 
/*    */ 
/*    */     
/* 60 */     processTraceState((Mediator)logMediator, elem);
/*    */ 
/*    */     
/* 63 */     OMAttribute level = elem.getAttribute(ATT_LEVEL);
/* 64 */     if (level != null) {
/* 65 */       String levelstr = level.getAttributeValue();
/* 66 */       if (""simple"".equals(levelstr)) {
/* 67 */         logMediator.setLogLevel(1);
/* 68 */       } else if (""headers"".equals(levelstr)) {
/* 69 */         logMediator.setLogLevel(2);
/* 70 */       } else if (""full"".equals(levelstr)) {
/* 71 */         logMediator.setLogLevel(3);
/* 72 */       } else if (""custom"".equals(levelstr)) {
/* 73 */         logMediator.setLogLevel(0);
/*    */       } 
/*    */     } 
/*    */ 
/*    */     
/* 78 */     OMAttribute separator = elem.getAttribute(ATT_SEPERATOR);
/* 79 */     if (separator != null) {
/* 80 */       logMediator.setSeparator(separator.getAttributeValue());
/*    */     }
/*    */     
/* 83 */     logMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*    */     
/* 85 */     return (Mediator)logMediator;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\LogMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.LogMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.LogMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 39 */     if (!(m instanceof LogMediator)) {
/* 40 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 43 */     LogMediator mediator = (LogMediator)m;
/* 44 */     OMElement log = fac.createOMElement(""log"", synNS);
/* 45 */     saveTracingState(log, (Mediator)mediator);
/*    */     
/* 47 */     if (mediator.getLogLevel() != 1) {
/* 48 */       log.addAttribute(fac.createOMAttribute(""level"", nullNS, (mediator.getLogLevel() == 2) ? ""headers"" : ((mediator.getLogLevel() == 3) ? ""full"" : ((mediator.getLogLevel() == 0) ? ""custom"" : ""simple""))));
/*    */     }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */     
/* 56 */     if (mediator.getSeparator() != "", "") {
/* 57 */       log.addAttribute(fac.createOMAttribute(""separator"", nullNS, mediator.getSeparator()));
/*    */     }
/*    */ 
/*    */     
/* 61 */     serializeProperties(log, mediator.getProperties());
/*    */     
/* 63 */     if (parent != null) {
/* 64 */       parent.addChild((OMNode)log);
/*    */     }
/* 66 */     return log;
/*    */   }
/*    */ 
/*    */   
/* 70 */   public String getMediatorClassName() { return LogMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\LogMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorFactory,"package org.apache.synapse.config.xml;
import javax.xml.namespace.QName;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
public interface MediatorFactory {
  Mediator createMediator(OMElement paramOMElement);
  QName getTagQName();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\MediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorFactoryFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.XMLToObjectMapper;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorFactoryFinder
/*     */   implements XMLToObjectMapper
/*     */ {
/*  46 */   private static final Log log = LogFactory.getLog(MediatorFactoryFinder.class);
/*     */   
/*  48 */   private static final Class[] mediatorFactories = new Class[] { SequenceMediatorFactory.class, LogMediatorFactory.class, SendMediatorFactory.class, FilterMediatorFactory.class, SynapseMediatorFactory.class, DropMediatorFactory.class, HeaderMediatorFactory.class, FaultMediatorFactory.class, PropertyMediatorFactory.class, SwitchMediatorFactory.class, InMediatorFactory.class, OutMediatorFactory.class, RMSequenceMediatorFactory.class, ClassMediatorFactory.class, ValidateMediatorFactory.class, XSLTMediatorFactory.class, POJOCommandMediatorFactory.class, CloneMediatorFactory.class, IterateMediatorFactory.class, AggregateMediatorFactory.class, DBReportMediatorFactory.class, DBLookupMediatorFactory.class, CacheMediatorFactory.class };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   private static MediatorFactoryFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  79 */   private static Map factoryMap = new HashMap<Object, Object>();
/*     */   
/*     */   public static synchronized MediatorFactoryFinder getInstance() {
/*  82 */     if (instance == null) {
/*  83 */       instance = new MediatorFactoryFinder();
/*     */     }
/*  85 */     return instance;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void reset() {
/*  92 */     factoryMap.clear();
/*  93 */     instance = null;
/*     */   }
/*     */ 
/*     */   
/*     */   private MediatorFactoryFinder() {
/*  98 */     factoryMap = new HashMap<Object, Object>();
/*     */     
/* 100 */     for (int i = 0; i < mediatorFactories.length; i++) {
/* 101 */       Class<MediatorFactory> c = mediatorFactories[i];
/*     */       try {
/* 103 */         MediatorFactory fac = c.newInstance();
/* 104 */         factoryMap.put(fac.getTagQName(), c);
/* 105 */       } catch (Exception e) {
/* 106 */         throw new SynapseException(""Error instantiating "" + c.getName(), e);
/*     */       } 
/*     */     } 
/*     */     
/* 110 */     registerExtensions();
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 114 */     log.error(msg, e);
/* 115 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 119 */     log.error(msg);
/* 120 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 134 */     Iterator<MediatorFactory> it = Service.providers(MediatorFactory.class);
/* 135 */     while (it.hasNext()) {
/* 136 */       MediatorFactory mf = it.next();
/* 137 */       QName tag = mf.getTagQName();
/* 138 */       factoryMap.put(tag, mf.getClass());
/* 139 */       if (log.isDebugEnabled()) {
/* 140 */         log.debug(""Added MediatorFactory "" + mf.getClass() + "" to handle "" + tag);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator getMediator(OMElement element) {
/* 155 */     String localName = element.getLocalName();
/* 156 */     QName qName = null;
/* 157 */     if (element.getNamespace() != null) {
/* 158 */       qName = new QName(element.getNamespace().getNamespaceURI(), localName);
/*     */     } else {
/* 160 */       qName = new QName(localName);
/*     */     } 
/* 162 */     if (log.isDebugEnabled()) {
/* 163 */       log.debug(""getMediator("" + qName + "")"");
/*     */     }
/* 165 */     Class<MediatorFactory> cls = (Class)factoryMap.get(qName);
/*     */     
/* 167 */     if (cls == null && localName.indexOf('.') > -1) {
/* 168 */       String newLocalName = localName.substring(0, localName.indexOf('.'));
/* 169 */       qName = new QName(element.getNamespace().getNamespaceURI(), newLocalName);
/* 170 */       if (log.isDebugEnabled()) {
/* 171 */         log.debug(""getMediator.2("" + qName + "")"");
/*     */       }
/* 173 */       cls = (Class)factoryMap.get(qName);
/*     */     } 
/*     */     
/* 176 */     if (cls == null) {
/* 177 */       String msg = ""Unknown mediator referenced by configuration element : "" + qName;
/* 178 */       log.error(msg);
/* 179 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 183 */       MediatorFactory mf = cls.newInstance();
/* 184 */       return mf.createMediator(element);
/*     */     }
/* 186 */     catch (InstantiationException e) {
/* 187 */       String msg = ""Error initializing mediator factory : "" + cls;
/* 188 */       log.error(msg);
/* 189 */       throw new SynapseException(msg, e);
/*     */     }
/* 191 */     catch (IllegalAccessException e) {
/* 192 */       String msg = ""Error initializing mediator factory : "" + cls;
/* 193 */       log.error(msg);
/* 194 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public Map getFactoryMap() { return factoryMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 211 */     if (om instanceof OMElement) {
/* 212 */       return getMediator((OMElement)om);
/*     */     }
/* 214 */     handleException(""Invalid mediator configuration XML : "" + om);
/*     */     
/* 216 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\MediatorFactoryFinder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorPropertyFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorPropertyFactory
/*     */ {
/*  48 */   private static final Log log = LogFactory.getLog(MediatorPropertyFactory.class);
/*     */ 
/*     */   
/*     */   public static List getMediatorProperties(OMElement elem) {
/*  52 */     List<MediatorProperty> propertyList = new ArrayList();
/*     */     
/*  54 */     Iterator<OMElement> iter = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""property""));
/*  55 */     while (iter.hasNext()) {
/*     */       
/*  57 */       OMElement propEle = iter.next();
/*  58 */       OMAttribute attName = propEle.getAttribute(MediatorProperty.ATT_NAME_Q);
/*  59 */       OMAttribute attValue = propEle.getAttribute(MediatorProperty.ATT_VALUE_Q);
/*  60 */       OMAttribute attExpr = propEle.getAttribute(MediatorProperty.ATT_EXPR_Q);
/*     */       
/*  62 */       MediatorProperty prop = new MediatorProperty();
/*     */       
/*  64 */       if (attName == null || attName.getAttributeValue() == null || attName.getAttributeValue().trim().length() == 0) {
/*     */         
/*  66 */         String msg = ""Entry name is a required attribute for a Log property"";
/*  67 */         log.error(msg);
/*  68 */         throw new SynapseException(msg);
/*     */       } 
/*  70 */       prop.setName(attName.getAttributeValue());
/*     */ 
/*     */ 
/*     */       
/*  74 */       if (attValue != null) {
/*  75 */         if (attValue.getAttributeValue() == null || attValue.getAttributeValue().trim().length() == 0) {
/*  76 */           String msg = ""Entry attribute value (if specified) is required for a Log property"";
/*  77 */           log.error(msg);
/*  78 */           throw new SynapseException(msg);
/*     */         } 
/*  80 */         prop.setValue(attValue.getAttributeValue());
/*     */       
/*     */       }
/*  83 */       else if (attExpr != null) {
/*     */         
/*  85 */         if (attExpr.getAttributeValue() == null || attExpr.getAttributeValue().trim().length() == 0) {
/*  86 */           String msg = ""Entry attribute expression (if specified) is required for a mediator property"";
/*  87 */           log.error(msg);
/*  88 */           throw new SynapseException(msg);
/*     */         } 
/*     */         
/*     */         try {
/*  92 */           AXIOMXPath xp = new AXIOMXPath(attExpr.getAttributeValue());
/*  93 */           OMElementUtils.addNameSpaces(xp, propEle, log);
/*  94 */           prop.setExpression(xp);
/*     */         }
/*  96 */         catch (JaxenException e) {
/*  97 */           String msg = ""Invalid XPapth expression : "" + attExpr.getAttributeValue();
/*  98 */           log.error(msg);
/*  99 */           throw new SynapseException(msg, (Throwable)e);
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 104 */         String msg = ""Entry attribute value OR expression must be specified for a mediator property"";
/* 105 */         log.error(msg);
/* 106 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/* 109 */       propertyList.add(prop);
/*     */     } 
/*     */     
/* 112 */     return propertyList;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\MediatorPropertyFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorSerializer,"package org.apache.synapse.config.xml;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Mediator;
public interface MediatorSerializer {
  OMElement serializeMediator(OMElement paramOMElement, Mediator paramMediator);
  String getMediatorClassName();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\MediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.MediatorSerializerFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorSerializerFinder
/*     */ {
/*  34 */   private static final Log log = LogFactory.getLog(MediatorSerializerFinder.class);
/*     */   
/*  36 */   private static final Class[] mediatorSerializers = new Class[] { SequenceMediatorSerializer.class, LogMediatorSerializer.class, SendMediatorSerializer.class, FilterMediatorSerializer.class, SynapseMediatorSerializer.class, DropMediatorSerializer.class, HeaderMediatorSerializer.class, FaultMediatorSerializer.class, PropertyMediatorSerializer.class, SwitchMediatorSerializer.class, InMediatorSerializer.class, OutMediatorSerializer.class, RMSequenceMediatorSerializer.class, ClassMediatorSerializer.class, ValidateMediatorSerializer.class, XSLTMediatorSerializer.class, POJOCommandMediatorSerializer.class, CloneMediatorSerializer.class, IterateMediatorSerializer.class, AggregateMediatorSerializer.class, DBLookupMediatorSerializer.class, DBReportMediatorSerializer.class, CacheMediatorSerializer.class };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   private static MediatorSerializerFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private static Map serializerMap = new HashMap<Object, Object>();
/*     */   
/*     */   public static synchronized MediatorSerializerFinder getInstance() {
/*  70 */     if (instance == null) {
/*  71 */       instance = new MediatorSerializerFinder();
/*     */     }
/*  73 */     return instance;
/*     */   }
/*     */ 
/*     */   
/*  77 */   public MediatorSerializer getSerializer(Mediator mediator) { return (MediatorSerializer)serializerMap.get(mediator.getClass().getName()); }
/*     */ 
/*     */ 
/*     */   
/*     */   private MediatorSerializerFinder() {
/*  82 */     serializerMap = new HashMap<Object, Object>();
/*     */     
/*  84 */     for (int i = 0; i < mediatorSerializers.length; i++) {
/*  85 */       Class<MediatorSerializer> c = mediatorSerializers[i];
/*     */       try {
/*  87 */         MediatorSerializer ser = c.newInstance();
/*  88 */         serializerMap.put(ser.getMediatorClassName(), ser);
/*  89 */       } catch (Exception e) {
/*  90 */         throw new SynapseException(""Error instantiating "" + c.getName(), e);
/*     */       } 
/*     */     } 
/*     */     
/*  94 */     registerExtensions();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 104 */     if (log.isDebugEnabled()) {
/* 105 */       log.debug(""Registering mediator extensions found in the classpath : "" + System.getProperty(""java.class.path""));
/*     */     }
/*     */     
/* 108 */     Iterator<MediatorSerializer> it = Service.providers(MediatorSerializer.class);
/* 109 */     while (it.hasNext()) {
/* 110 */       MediatorSerializer ms = it.next();
/* 111 */       String name = ms.getMediatorClassName();
/*     */       try {
/* 113 */         serializerMap.put(name, ms.getClass().newInstance());
/* 114 */       } catch (InstantiationException e) {
/* 115 */         handleException(""Error instantiating mediator serializer : "" + ms);
/* 116 */       } catch (IllegalAccessException e) {
/* 117 */         handleException(""Error instantiating mediator serializer : "" + ms);
/*     */       } 
/* 119 */       if (log.isDebugEnabled()) {
/* 120 */         log.debug(""Added MediatorSerializer "" + ms.getClass().getName() + "" to handle "" + name);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public Map getSerializerMap() { return serializerMap; }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/* 135 */     log.error(msg);
/* 136 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\MediatorSerializerFinder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OMElementUtils,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class OMElementUtils
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(OMElementUtils.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getNameSpaceWithPrefix(String prefix, OMElement elem) {
/*  50 */     if (prefix == null || elem == null) {
/*  51 */       log.warn(""Searching for null NS prefix and/or using null OMElement"");
/*  52 */       return null;
/*     */     } 
/*     */     
/*  55 */     Iterator<OMNamespace> iter = elem.getAllDeclaredNamespaces();
/*  56 */     while (iter.hasNext()) {
/*  57 */       OMNamespace ns = iter.next();
/*  58 */       if (prefix.equals(ns.getPrefix())) {
/*  59 */         return ns.getNamespaceURI();
/*     */       }
/*     */     } 
/*  62 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void addNameSpaces(AXIOMXPath xpath, OMElement elem, Log log) {
/*  73 */     OMElement currentElem = elem;
/*     */     
/*  75 */     while (currentElem != null) {
/*  76 */       Iterator<OMNamespace> it = currentElem.getAllDeclaredNamespaces();
/*  77 */       while (it.hasNext()) {
/*     */         
/*  79 */         OMNamespace n = it.next();
/*  80 */         if (n != null) {
/*     */           
/*     */           try {
/*  83 */             xpath.addNamespace(n.getPrefix(), n.getNamespaceURI());
/*  84 */           } catch (JaxenException je) {
/*  85 */             String msg = ""Error adding declared name space with prefix : "" + n.getPrefix() + ""and uri : "" + n.getNamespaceURI() + "" to the XPath : "" + xpath;
/*     */ 
/*     */             
/*  88 */             log.error(msg);
/*  89 */             throw new SynapseException(msg, (Throwable)je);
/*     */           } 
/*     */         }
/*     */       } 
/*     */       
/*  94 */       OMContainer parent = currentElem.getParent();
/*     */       
/*  96 */       if (parent == null || parent instanceof org.apache.axiom.om.OMDocument) {
/*     */         return;
/*     */       }
/*  99 */       if (parent instanceof OMElement)
/* 100 */         currentElem = (OMElement)parent; 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\OMElementUtils.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OutMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.filters.OutMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 39 */   private static final QName OUT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""out"");
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 42 */     OutMediator filter = new OutMediator();
/*    */ 
/*    */ 
/*    */     
/* 46 */     processTraceState((Mediator)filter, elem);
/*    */     
/* 48 */     addChildren(elem, (ListMediator)filter);
/* 49 */     return (Mediator)filter;
/*    */   }
/*    */ 
/*    */   
/* 53 */   public QName getTagQName() { return OUT_Q; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\OutMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.OutMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.filters.OutMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 32 */     if (!(m instanceof OutMediator)) {
/* 33 */       handleException(""Unsupported mediator passed out for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 36 */     OutMediator mediator = (OutMediator)m;
/* 37 */     OMElement out = fac.createOMElement(""out"", synNS);
/* 38 */     saveTracingState(out, (Mediator)mediator);
/* 39 */     serializeChildren(out, mediator.getList());
/*    */     
/* 41 */     if (parent != null) {
/* 42 */       parent.addChild((OMNode)out);
/*    */     }
/* 44 */     return out;
/*    */   }
/*    */ 
/*    */   
/* 48 */   public String getMediatorClassName() { return OutMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\OutMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.POJOCommandMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ext.POJOCommandMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class POJOCommandMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  49 */   private static final QName POJO_COMMAND_Q = new QName(""http://ws.apache.org/ns/synapse"", ""pojoCommand"");
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  54 */     POJOCommandMediator pojoMediator = new POJOCommandMediator();
/*     */ 
/*     */     
/*  57 */     OMAttribute name = elem.getAttribute(ATT_NAME);
/*  58 */     if (name == null) {
/*  59 */       String msg = ""The name of the actual POJO command implementation class is a required attribute"";
/*     */       
/*  61 */       log.error(msg);
/*  62 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/*  67 */       pojoMediator.setCommand(getClass().getClassLoader().loadClass(name.getAttributeValue()));
/*     */     }
/*  69 */     catch (ClassNotFoundException e) {
/*  70 */       handleException(""Unable to load the class specified as the command "" + name.getAttributeValue(), e);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  76 */     for (Iterator<OMElement> it = elem.getChildElements(); it.hasNext(); ) {
/*  77 */       OMElement child = it.next();
/*  78 */       if (""property"".equals(child.getLocalName())) {
/*     */         
/*  80 */         String propName = child.getAttribute(ATT_NAME).getAttributeValue();
/*  81 */         if (propName == null) {
/*  82 */           handleException(""A POJO command mediator property must specify the name attribute"");
/*     */           continue;
/*     */         } 
/*  85 */         if (child.getAttribute(ATT_EXPRN) != null) {
/*  86 */           AXIOMXPath xpath = null;
/*     */           try {
/*  88 */             xpath = new AXIOMXPath(child.getAttribute(ATT_EXPRN).getAttributeValue());
/*     */             
/*  90 */             OMElementUtils.addNameSpaces(xpath, child, log);
/*  91 */             pojoMediator.addDynamicProperty(propName, xpath); continue;
/*  92 */           } catch (JaxenException e) {
/*  93 */             handleException(""Error instantiating XPath expression : "" + child.getAttribute(ATT_EXPRN), (Exception)e);
/*     */             continue;
/*     */           } 
/*     */         } 
/*  97 */         if (child.getAttribute(ATT_VALUE) != null) {
/*  98 */           pojoMediator.addStaticProperty(propName, child.getAttribute(ATT_VALUE).getAttributeValue());
/*     */           continue;
/*     */         } 
/* 101 */         handleException(""A POJO mediator property must specify either name and expression attributes, or name and value attributes"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     return (Mediator)pojoMediator;
/*     */   }
/*     */ 
/*     */   
/* 113 */   public QName getTagQName() { return POJO_COMMAND_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\POJOCommandMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.POJOCommandMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ext.POJOCommandMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class POJOCommandMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 48 */     if (!(m instanceof POJOCommandMediator)) {
/* 49 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 52 */     POJOCommandMediator mediator = (POJOCommandMediator)m;
/*    */     
/* 54 */     OMElement pojoCommand = fac.createOMElement(""pojoCommand"", synNS);
/* 55 */     saveTracingState(pojoCommand, (Mediator)mediator);
/*    */     
/* 57 */     if (mediator.getCommand() != null && mediator.getCommand().getClass().getName() != null) {
/* 58 */       pojoCommand.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getCommand().getName()));
/*    */     } else {
/*    */       
/* 61 */       handleException(""Invalid POJO Command mediator. The command class name is required"");
/*    */     } 
/*    */     
/* 64 */     for (Iterator<String> itr = mediator.getStaticProps().keySet().iterator(); itr.hasNext(); ) {
/* 65 */       String propName = itr.next();
/* 66 */       String value = (String)mediator.getStaticProps().get(propName);
/* 67 */       OMElement prop = fac.createOMElement(PROP_Q);
/* 68 */       prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
/* 69 */       prop.addAttribute(fac.createOMAttribute(""value"", nullNS, value));
/* 70 */       pojoCommand.addChild((OMNode)prop);
/*    */     } 
/*    */     
/* 73 */     for (Iterator<String> itr = mediator.getDynamicProps().keySet().iterator(); itr.hasNext(); ) {
/* 74 */       String propName = itr.next();
/* 75 */       AXIOMXPath exprn = (AXIOMXPath)mediator.getDynamicProps().get(propName);
/* 76 */       OMElement prop = fac.createOMElement(PROP_Q);
/* 77 */       prop.addAttribute(fac.createOMAttribute(""name"", nullNS, propName));
/* 78 */       prop.addAttribute(fac.createOMAttribute(""expression"", nullNS, exprn.toString()));
/*    */       
/* 80 */       serializeNamespaces(prop, exprn);
/* 81 */       pojoCommand.addChild((OMNode)prop);
/*    */     } 
/*    */     
/* 84 */     if (parent != null) {
/* 85 */       parent.addChild((OMNode)pojoCommand);
/*    */     }
/* 87 */     return pojoCommand;
/*    */   }
/*    */ 
/*    */   
/* 91 */   public String getMediatorClassName() { return POJOCommandMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\POJOCommandMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.PropertyHelper,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyHelper
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(PropertyHelper.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void setInstanceProperty(String name, Object val, Object obj) {
/*  55 */     String mName = ""set"" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
/*  56 */     Method method = null;
/*     */     
/*     */     try {
/*  59 */       Method[] methods = obj.getClass().getMethods();
/*  60 */       boolean invoked = false;
/*     */       
/*  62 */       for (int i = 0; i < methods.length; i++) {
/*  63 */         if (mName.equals(methods[i].getName())) {
/*  64 */           Class[] params = methods[i].getParameterTypes();
/*  65 */           if (params.length != 1) {
/*  66 */             handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"");
/*     */           
/*     */           }
/*  69 */           else if (val instanceof String) {
/*  70 */             String value = (String)val;
/*  71 */             if (params[0].equals(String.class)) {
/*  72 */               method = obj.getClass().getMethod(mName, new Class[] { String.class });
/*  73 */               method.invoke(obj, (Object[])new String[] { value });
/*  74 */             } else if (params[0].equals(int.class)) {
/*  75 */               method = obj.getClass().getMethod(mName, new Class[] { int.class });
/*  76 */               method.invoke(obj, (Object[])new Integer[] { new Integer(value) });
/*  77 */             } else if (params[0].equals(long.class)) {
/*  78 */               method = obj.getClass().getMethod(mName, new Class[] { long.class });
/*  79 */               method.invoke(obj, (Object[])new Long[] { new Long(value) });
/*  80 */             } else if (params[0].equals(float.class)) {
/*  81 */               method = obj.getClass().getMethod(mName, new Class[] { float.class });
/*  82 */               method.invoke(obj, (Object[])new Float[] { new Float(value) });
/*  83 */             } else if (params[0].equals(double.class)) {
/*  84 */               method = obj.getClass().getMethod(mName, new Class[] { double.class });
/*  85 */               method.invoke(obj, (Object[])new Double[] { new Double(value) });
/*  86 */             } else if (params[0].equals(boolean.class)) {
/*  87 */               method = obj.getClass().getMethod(mName, new Class[] { boolean.class });
/*  88 */               method.invoke(obj, (Object[])new Boolean[] { new Boolean(value) });
/*     */             } else {
/*  90 */               handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"");
/*     */             
/*     */             }
/*     */           
/*     */           }
/*  95 */           else if (params[0].equals(OMElement.class)) {
/*  96 */             method = obj.getClass().getMethod(mName, new Class[] { OMElement.class });
/*  97 */             method.invoke(obj, (Object[])new OMElement[] { (OMElement)val });
/*     */           } 
/*     */           
/* 100 */           invoked = true;
/*     */         } 
/*     */       } 
/*     */       
/* 104 */       if (!invoked) {
/* 105 */         handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"");
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 110 */     catch (Exception e) {
/* 111 */       handleException(""Error invoking setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void setStaticProperty(OMElement property, Object o) {
/* 126 */     if (property.getLocalName().toLowerCase().equals(""property"")) {
/*     */       
/* 128 */       String propertyName = property.getAttributeValue(new QName(""name""));
/* 129 */       String mName = ""set"" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 134 */       if (property.getAttributeValue(new QName(""value"")) != null) {
/* 135 */         String value = property.getAttributeValue(new QName(""value""));
/*     */         
/*     */         try {
/* 138 */           Method method = o.getClass().getMethod(mName, new Class[] { String.class });
/* 139 */           if (log.isDebugEnabled()) {
/* 140 */             log.debug(""Setting property :: invoking method "" + mName + ""("" + value + "")"");
/*     */           }
/*     */           
/* 143 */           method.invoke(o, new Object[] { value });
/*     */         }
/* 145 */         catch (Exception e) {
/* 146 */           handleException(""Error setting property : "" + propertyName + "" as a String property into class mediator : "" + o.getClass() + "" : "" + e.getMessage(), e);
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 153 */         OMElement value = property.getFirstElement();
/* 154 */         if (value != null) {
/*     */           
/*     */           try {
/* 157 */             Method method = o.getClass().getMethod(mName, new Class[] { OMElement.class });
/* 158 */             if (log.isDebugEnabled()) {
/* 159 */               log.debug(""Setting property :: invoking method "" + mName + ""("" + value + "")"");
/*     */             }
/*     */             
/* 162 */             method.invoke(o, new Object[] { value });
/*     */           }
/* 164 */           catch (Exception e) {
/* 165 */             handleException(""Error setting property : "" + propertyName + "" as an OMElement property into class mediator : "" + o.getClass() + "" : "" + e.getMessage(), e);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public static boolean isStaticProperty(OMElement property) { return (""property"".equals(property.getLocalName().toLowerCase()) && property.getAttributeValue(new QName(""expression"")) == null); }
/*     */ 
/*     */ 
/*     */   
/*     */   private static void handleException(String message, Throwable e) {
/* 188 */     log.error(message + e.getMessage());
/* 189 */     throw new SynapseException(message, e);
/*     */   }
/*     */   
/*     */   private static void handleException(String message) {
/* 193 */     log.error(message);
/* 194 */     throw new SynapseException(message);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\PropertyHelper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.PropertyMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.builtin.PropertyMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  42 */   private static final QName ATT_SCOPE = new QName(""scope"");
/*  43 */   private static final QName ATT_ACTION = new QName(""action"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  47 */     PropertyMediator propMediator = new PropertyMediator();
/*  48 */     OMAttribute name = elem.getAttribute(ATT_NAME);
/*  49 */     OMAttribute value = elem.getAttribute(ATT_VALUE);
/*  50 */     OMAttribute expression = elem.getAttribute(ATT_EXPRN);
/*  51 */     OMAttribute scope = elem.getAttribute(ATT_SCOPE);
/*  52 */     OMAttribute action = elem.getAttribute(ATT_ACTION);
/*     */     
/*  54 */     if (name == null) {
/*  55 */       String msg = ""The 'name' attribute is required for the configuration of a property mediator"";
/*  56 */       log.error(msg);
/*  57 */       throw new SynapseException(msg);
/*  58 */     }  if (value == null && expression == null && (action == null || !""remove"".equals(action.getAttributeValue()))) {
/*  59 */       String msg = ""Either an 'value' or 'expression' attribute is required for a property mediator when action is SET"";
/*  60 */       log.error(msg);
/*  61 */       throw new SynapseException(msg);
/*     */     } 
/*  63 */     propMediator.setName(name.getAttributeValue());
/*  64 */     if (value != null) {
/*  65 */       propMediator.setValue(value.getAttributeValue());
/*  66 */     } else if (expression != null) {
/*     */       try {
/*  68 */         AXIOMXPath xp = new AXIOMXPath(expression.getAttributeValue());
/*  69 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  70 */         propMediator.setExpression(xp);
/*     */       }
/*  72 */       catch (JaxenException e) {
/*  73 */         String msg = ""Invalid XPath expression for attribute 'expression' : "" + expression.getAttributeValue();
/*  74 */         log.error(msg);
/*  75 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } 
/*  78 */     if (scope != null) {
/*  79 */       String valueStr = scope.getAttributeValue();
/*  80 */       if (!""axis2"".equals(valueStr) && !""transport"".equals(valueStr) && !""default"".equals(valueStr) && !""axis2-client"".equals(valueStr)) {
/*     */         
/*  82 */         String msg = ""Only 'axis2' or 'transport' or 'axis2-client' values are allowed for attribute scope for a property mediator, Unsupported scope "" + valueStr;
/*     */ 
/*     */         
/*  85 */         log.error(msg);
/*  86 */         throw new SynapseException(msg);
/*     */       } 
/*  88 */       propMediator.setScope(valueStr);
/*     */     } 
/*     */ 
/*     */     
/*  92 */     processTraceState((Mediator)propMediator, elem);
/*     */ 
/*     */     
/*  95 */     if (action != null && ""remove"".equals(action.getAttributeValue())) {
/*  96 */       propMediator.setAction(1);
/*     */     }
/*  98 */     return (Mediator)propMediator;
/*     */   }
/*     */ 
/*     */   
/* 102 */   public QName getTagQName() { return PROP_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\PropertyMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.PropertyMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.PropertyMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PropertyMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 37 */     if (!(m instanceof PropertyMediator)) {
/* 38 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 41 */     PropertyMediator mediator = (PropertyMediator)m;
/* 42 */     OMElement property = fac.createOMElement(""property"", synNS);
/* 43 */     saveTracingState(property, (Mediator)mediator);
/*    */     
/* 45 */     if (mediator.getName() != null) {
/* 46 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*    */     } else {
/*    */       
/* 49 */       handleException(""Invalid property mediator. Name is required"");
/*    */     } 
/*    */     
/* 52 */     if (mediator.getValue() != null) {
/* 53 */       property.addAttribute(fac.createOMAttribute(""value"", nullNS, mediator.getValue()));
/*    */     
/*    */     }
/* 56 */     else if (mediator.getExpression() != null) {
/* 57 */       property.addAttribute(fac.createOMAttribute(""expression"", nullNS, mediator.getExpression().toString()));
/*    */       
/* 59 */       serializeNamespaces(property, mediator.getExpression());
/*    */     }
/* 61 */     else if (mediator.getAction() == 0) {
/* 62 */       handleException(""Invalid property mediator. Value or expression is required if action is SET"");
/*    */     } 
/* 64 */     if (mediator.getScope() != null)
/*    */     {
/* 66 */       property.addAttribute(fac.createOMAttribute(""scope"", nullNS, mediator.getScope()));
/*    */     }
/* 68 */     if (mediator.getAction() == 1) {
/* 69 */       property.addAttribute(fac.createOMAttribute(""action"", nullNS, ""remove""));
/*    */     }
/*    */     
/* 72 */     if (parent != null) {
/* 73 */       parent.addChild((OMNode)property);
/*    */     }
/* 75 */     return property;
/*    */   }
/*    */ 
/*    */   
/* 79 */   public String getMediatorClassName() { return PropertyMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\PropertyMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ProxyServiceFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.StringTokenizer;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointFactory;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceFactory
/*     */ {
/*  65 */   private static final Log log = LogFactory.getLog(ProxyServiceFactory.class);
/*     */ 
/*     */   
/*     */   public static ProxyService createProxy(OMElement elem) {
/*  69 */     ProxyService proxy = null;
/*     */     
/*  71 */     OMAttribute name = elem.getAttribute(new QName("""", ""name""));
/*  72 */     if (name == null) {
/*  73 */       handleException(""The 'name' attribute is required for a Proxy service definition"");
/*     */     } else {
/*  75 */       proxy = new ProxyService(name.getAttributeValue());
/*     */     } 
/*     */     
/*  78 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */     
/*  80 */     if (statistics != null) {
/*  81 */       String statisticsValue = statistics.getAttributeValue();
/*  82 */       if (statisticsValue != null) {
/*  83 */         if (""enable"".equals(statisticsValue)) {
/*  84 */           proxy.setStatisticsState(1);
/*  85 */         } else if (""disable"".equals(statisticsValue)) {
/*  86 */           proxy.setStatisticsState(0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/*  91 */     OMAttribute trans = elem.getAttribute(new QName("""", ""transports""));
/*  92 */     if (trans != null) {
/*  93 */       String transports = trans.getAttributeValue();
/*  94 */       if (transports != null && !""all"".equals(transports)) {
/*     */ 
/*     */         
/*  97 */         StringTokenizer st = new StringTokenizer(transports, "" ,"");
/*  98 */         ArrayList<String> transportList = new ArrayList();
/*  99 */         while (st.hasMoreTokens()) {
/* 100 */           String token = st.nextToken();
/* 101 */           if (token.length() != 0) {
/* 102 */             transportList.add(token);
/*     */           }
/*     */         } 
/* 105 */         proxy.setTransports(transportList);
/*     */       } 
/*     */     } 
/* 108 */     OMAttribute trace = elem.getAttribute(new QName("""", ""trace""));
/* 109 */     if (trace != null) {
/* 110 */       String traceValue = trace.getAttributeValue();
/* 111 */       if (traceValue != null) {
/* 112 */         if (traceValue.equals(""enable"")) {
/* 113 */           proxy.setTraceState(1);
/* 114 */         } else if (traceValue.equals(""disable"")) {
/* 115 */           proxy.setTraceState(0);
/*     */         } 
/*     */       }
/*     */     } 
/* 119 */     OMAttribute startOnLoad = elem.getAttribute(new QName("""", ""startOnLoad""));
/*     */     
/* 121 */     if (startOnLoad != null) {
/* 122 */       proxy.setStartOnLoad(Boolean.valueOf(startOnLoad.getAttributeValue()).booleanValue());
/*     */     } else {
/* 124 */       proxy.setStartOnLoad(true);
/*     */     } 
/*     */ 
/*     */     
/* 128 */     OMElement descriptionElement = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""description""));
/*     */     
/* 130 */     if (descriptionElement != null) {
/* 131 */       proxy.setDescription(descriptionElement.getText().trim());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 137 */     OMElement target = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""target""));
/*     */     
/* 139 */     if (target != null) {
/* 140 */       boolean isTargetOk = false;
/* 141 */       SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory();
/* 142 */       OMAttribute inSequence = target.getAttribute(new QName("""", ""inSequence""));
/* 143 */       if (inSequence != null) {
/* 144 */         proxy.setTargetInSequence(inSequence.getAttributeValue());
/* 145 */         isTargetOk = true;
/*     */       } else {
/* 147 */         OMElement inSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""inSequence""));
/* 148 */         if (inSequenceElement != null) {
/* 149 */           proxy.setTargetInLineInSequence(mediatorFactory.createAnonymousSequence(inSequenceElement));
/* 150 */           isTargetOk = true;
/*     */         } 
/*     */       } 
/* 153 */       OMAttribute outSequence = target.getAttribute(new QName("""", ""outSequence""));
/* 154 */       if (outSequence != null) {
/* 155 */         proxy.setTargetOutSequence(outSequence.getAttributeValue());
/*     */       } else {
/* 157 */         OMElement outSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""outSequence""));
/* 158 */         if (outSequenceElement != null) {
/* 159 */           proxy.setTargetInLineOutSequence(mediatorFactory.createAnonymousSequence(outSequenceElement));
/*     */         } else {
/* 161 */           handleException(""Target for the proxy service must declare an out sequence"");
/*     */         } 
/*     */       } 
/* 164 */       OMAttribute faultSequence = target.getAttribute(new QName("""", ""faultSequence""));
/* 165 */       if (faultSequence != null) {
/* 166 */         proxy.setTargetFaultSequence(faultSequence.getAttributeValue());
/*     */       } else {
/* 168 */         OMElement faultSequenceElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""faultSequence""));
/* 169 */         if (faultSequenceElement != null) {
/* 170 */           proxy.setTargetInLineFaultSequence(mediatorFactory.createAnonymousSequence(faultSequenceElement));
/*     */         }
/*     */       } 
/* 173 */       OMAttribute tgtEndpt = target.getAttribute(new QName("""", ""endpoint""));
/* 174 */       if (tgtEndpt != null) {
/* 175 */         proxy.setTargetEndpoint(tgtEndpt.getAttributeValue());
/* 176 */         isTargetOk = true;
/*     */       } else {
/* 178 */         OMElement endpointElement = target.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""endpoint""));
/* 179 */         if (endpointElement != null) {
/* 180 */           EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(endpointElement);
/* 181 */           proxy.setTargetInLineEndpoint(fac.createEndpoint(endpointElement, true));
/* 182 */           isTargetOk = true;
/*     */         } 
/*     */       } 
/* 185 */       if (!isTargetOk) {
/* 186 */         handleException(""Target of the proxy service must declare either an inSequence or endpoint or both"");
/*     */       }
/*     */     } else {
/* 189 */       handleException(""Target is required for a Proxy service definition"");
/*     */     } 
/*     */ 
/*     */     
/* 193 */     OMElement wsdl = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""publishWSDL""));
/* 194 */     if (wsdl != null) {
/* 195 */       OMAttribute wsdlkey = wsdl.getAttribute(new QName("""", ""key""));
/* 196 */       if (wsdlkey != null) {
/* 197 */         proxy.setWSDLKey(wsdlkey.getAttributeValue());
/*     */       } else {
/* 199 */         OMAttribute wsdlURI = wsdl.getAttribute(new QName("""", ""uri""));
/* 200 */         if (wsdlURI != null) {
/*     */           try {
/* 202 */             proxy.setWsdlURI(new URI(wsdlURI.getAttributeValue()));
/* 203 */           } catch (URISyntaxException e) {
/* 204 */             String msg = ""Error creating uri for proxy service wsdl"";
/* 205 */             log.error(msg);
/* 206 */             handleException(msg, e);
/*     */           } 
/*     */         } else {
/* 209 */           OMElement wsdl11 = wsdl.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""definitions""));
/* 210 */           if (wsdl11 != null) {
/* 211 */             proxy.setInLineWSDL(wsdl11);
/*     */           } else {
/* 213 */             OMElement wsdl20 = wsdl.getFirstChildWithName(new QName(""http://www.w3.org/2004/03/wsdl"", ""descriptions""));
/* 214 */             if (wsdl20 != null) {
/* 215 */               proxy.setInLineWSDL(wsdl20);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 224 */     Iterator policies = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""policy""));
/*     */     
/* 226 */     while (policies.hasNext()) {
/* 227 */       Object o = policies.next();
/* 228 */       if (o instanceof OMElement) {
/* 229 */         OMElement policy = (OMElement)o;
/* 230 */         OMAttribute key = policy.getAttribute(new QName("""", ""key""));
/* 231 */         if (key != null) {
/* 232 */           proxy.addServiceLevelPolicy(key.getAttributeValue()); continue;
/*     */         } 
/* 234 */         handleException(""Policy element does not specify the policy key"");
/*     */         continue;
/*     */       } 
/* 237 */       handleException(""Invalid 'policy' element found under element 'policies'"");
/*     */     } 
/*     */ 
/*     */     
/* 241 */     Iterator props = elem.getChildrenWithName(new QName(""http://ws.apache.org/ns/synapse"", ""parameter""));
/*     */     
/* 243 */     while (props.hasNext()) {
/* 244 */       Object o = props.next();
/* 245 */       if (o instanceof OMElement) {
/* 246 */         OMElement prop = (OMElement)o;
/* 247 */         OMAttribute pname = prop.getAttribute(new QName("""", ""name""));
/* 248 */         OMElement propertyValue = prop.getFirstElement();
/* 249 */         if (pname != null) {
/* 250 */           if (propertyValue != null) {
/* 251 */             proxy.addParameter(pname.getAttributeValue(), propertyValue); continue;
/*     */           } 
/* 253 */           proxy.addParameter(pname.getAttributeValue(), prop.getText().trim());
/*     */           continue;
/*     */         } 
/* 256 */         handleException(""Invalid property specified for proxy service : "" + name);
/*     */         continue;
/*     */       } 
/* 259 */       handleException(""Invalid property specified for proxy service : "" + name);
/*     */     } 
/*     */ 
/*     */     
/* 263 */     if (elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM"")) != null)
/*     */     {
/* 265 */       proxy.setWsRMEnabled(true);
/*     */     }
/*     */     
/* 268 */     if (elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec"")) != null)
/*     */     {
/* 270 */       proxy.setWsSecEnabled(true);
/*     */     }
/*     */     
/* 273 */     return proxy;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 277 */     log.error(msg);
/* 278 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 282 */     log.error(msg, e);
/* 283 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ProxyServiceFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ProxyServiceSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceSerializer
/*     */ {
/*  58 */   private static final Log log = LogFactory.getLog(PropertyMediatorSerializer.class);
/*     */   
/*  60 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*  61 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*  62 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*     */ 
/*     */   
/*     */   public static OMElement serializeProxy(OMElement parent, ProxyService service) {
/*  66 */     OMElement proxy = fac.createOMElement(""proxy"", synNS);
/*  67 */     if (service.getName() != null) {
/*  68 */       proxy.addAttribute(fac.createOMAttribute(""name"", nullNS, service.getName()));
/*     */     } else {
/*     */       
/*  71 */       handleException(""Invalid proxy service. Service name is required"");
/*     */     } 
/*  73 */     String descriptionStr = service.getDescription();
/*  74 */     if (descriptionStr != null) {
/*  75 */       OMElement description = fac.createOMElement(""description"", synNS);
/*  76 */       description.addChild((OMNode)fac.createOMText(descriptionStr));
/*  77 */       proxy.addChild((OMNode)description);
/*     */     } 
/*  79 */     ArrayList<String> transports = service.getTransports();
/*  80 */     if (transports != null && !transports.isEmpty()) {
/*  81 */       String transportStr = """" + transports.get(0);
/*  82 */       for (int i = 1; i < transports.size(); i++) {
/*  83 */         transportStr = transportStr + "" "" + transports.get(i);
/*     */       }
/*  85 */       proxy.addAttribute(fac.createOMAttribute(""transports"", nullNS, transportStr));
/*     */     } 
/*     */     
/*  88 */     if (service.isStartOnLoad()) {
/*  89 */       proxy.addAttribute(fac.createOMAttribute(""startOnLoad"", nullNS, ""true""));
/*     */     } else {
/*     */       
/*  92 */       proxy.addAttribute(fac.createOMAttribute(""startOnLoad"", nullNS, ""false""));
/*     */     } 
/*     */     
/*  95 */     String endpoint = service.getTargetEndpoint();
/*     */     
/*  97 */     OMElement target = fac.createOMElement(""target"", synNS);
/*  98 */     Endpoint inLineEndpoint = service.getTargetInLineEndpoint();
/*  99 */     if (endpoint != null) {
/* 100 */       target.addAttribute(fac.createOMAttribute(""endpoint"", nullNS, endpoint));
/*     */       
/* 102 */       proxy.addChild((OMNode)target);
/* 103 */     } else if (inLineEndpoint != null) {
/* 104 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(inLineEndpoint);
/*     */       
/* 106 */       OMElement epElement = serializer.serializeEndpoint(inLineEndpoint);
/* 107 */       target.addChild((OMNode)epElement);
/* 108 */       proxy.addChild((OMNode)target);
/*     */     } 
/* 110 */     String inSeq = service.getTargetInSequence();
/* 111 */     String outSeq = service.getTargetOutSequence();
/* 112 */     String faultSeq = service.getTargetFaultSequence();
/* 113 */     SequenceMediatorSerializer serializer = new SequenceMediatorSerializer();
/* 114 */     if (inSeq != null) {
/* 115 */       target.addAttribute(fac.createOMAttribute(""inSequence"", nullNS, inSeq));
/* 116 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 118 */       SequenceMediator inLineInSeq = service.getTargetInLineInSequence();
/* 119 */       if (inLineInSeq != null) {
/* 120 */         OMElement inSeqElement = serializer.serializeAnonymousSequence(null, inLineInSeq);
/* 121 */         inSeqElement.setLocalName(""inSequence"");
/* 122 */         target.addChild((OMNode)inSeqElement);
/* 123 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/* 126 */     if (outSeq != null) {
/* 127 */       target.addAttribute(fac.createOMAttribute(""outSequence"", nullNS, outSeq));
/* 128 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 130 */       SequenceMediator inLineOutSeq = service.getTargetInLineOutSequence();
/* 131 */       if (inLineOutSeq != null) {
/* 132 */         OMElement outSeqElement = serializer.serializeAnonymousSequence(null, inLineOutSeq);
/* 133 */         outSeqElement.setLocalName(""outSequence"");
/* 134 */         target.addChild((OMNode)outSeqElement);
/* 135 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/* 138 */     if (faultSeq != null) {
/* 139 */       target.addAttribute(fac.createOMAttribute(""faultSequence"", nullNS, faultSeq));
/* 140 */       proxy.addChild((OMNode)target);
/*     */     } else {
/* 142 */       SequenceMediator inLineFaultSeq = service.getTargetInLineFaultSequence();
/* 143 */       if (inLineFaultSeq != null) {
/* 144 */         OMElement faultSeqElement = serializer.serializeAnonymousSequence(null, inLineFaultSeq);
/* 145 */         faultSeqElement.setLocalName(""faultSequence"");
/* 146 */         target.addChild((OMNode)faultSeqElement);
/* 147 */         proxy.addChild((OMNode)target);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 153 */     String wsdlKey = service.getWSDLKey();
/* 154 */     URI wsdlUri = service.getWsdlURI();
/* 155 */     Object inLineWSDL = service.getInLineWSDL();
/* 156 */     OMElement wsdl = fac.createOMElement(""publishWSDL"", synNS);
/* 157 */     if (wsdlKey != null) {
/* 158 */       wsdl.addAttribute(fac.createOMAttribute(""key"", nullNS, wsdlKey));
/*     */       
/* 160 */       proxy.addChild((OMNode)wsdl);
/* 161 */     } else if (inLineWSDL != null) {
/* 162 */       wsdl.addChild((OMNode)inLineWSDL);
/* 163 */       proxy.addChild((OMNode)wsdl);
/* 164 */     } else if (wsdlUri != null) {
/* 165 */       wsdl.addAttribute(fac.createOMAttribute(""uri"", nullNS, wsdlUri.toString()));
/*     */       
/* 167 */       proxy.addChild((OMNode)wsdl);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 174 */     Iterator<String> iter = service.getServiceLevelPolicies().iterator();
/* 175 */     while (iter.hasNext()) {
/* 176 */       String policyKey = iter.next();
/* 177 */       OMElement policy = fac.createOMElement(""policy"", synNS);
/* 178 */       policy.addAttribute(fac.createOMAttribute(""key"", nullNS, policyKey));
/*     */       
/* 180 */       proxy.addChild((OMNode)policy);
/*     */     } 
/*     */     
/* 183 */     iter = service.getParameterMap().keySet().iterator();
/* 184 */     while (iter.hasNext()) {
/* 185 */       String propertyName = iter.next();
/* 186 */       OMElement property = fac.createOMElement(""parameter"", synNS);
/* 187 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, propertyName));
/*     */       
/* 189 */       Object value = service.getParameterMap().get(propertyName);
/* 190 */       if (value != null) {
/* 191 */         if (value instanceof String) {
/* 192 */           property.setText(((String)value).trim());
/* 193 */           proxy.addChild((OMNode)property); continue;
/* 194 */         }  if (value instanceof OMNode) {
/* 195 */           property.addChild((OMNode)value);
/* 196 */           proxy.addChild((OMNode)property);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 201 */     if (service.isWsRMEnabled()) {
/* 202 */       proxy.addChild((OMNode)fac.createOMElement(""enableRM"", synNS));
/*     */     }
/* 204 */     if (service.isWsSecEnabled()) {
/* 205 */       proxy.addChild((OMNode)fac.createOMElement(""enableSec"", synNS));
/*     */     }
/*     */     
/* 208 */     int isEnableStatistics = service.getStatisticsState();
/* 209 */     String statisticsValue = null;
/* 210 */     if (isEnableStatistics == 1) {
/* 211 */       statisticsValue = ""enable"";
/* 212 */     } else if (isEnableStatistics == 0) {
/* 213 */       statisticsValue = ""disable"";
/*     */     } 
/* 215 */     if (statisticsValue != null) {
/* 216 */       proxy.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */     }
/*     */ 
/*     */     
/* 220 */     int traceState = service.getTraceState();
/* 221 */     String traceValue = null;
/* 222 */     if (traceState == 1) {
/* 223 */       traceValue = ""enable"";
/* 224 */     } else if (traceState == 0) {
/* 225 */       traceValue = ""disable"";
/*     */     } 
/* 227 */     if (traceValue != null) {
/* 228 */       proxy.addAttribute(fac.createOMAttribute(""trace"", nullNS, traceValue));
/*     */     }
/*     */     
/* 231 */     if (parent != null) {
/* 232 */       parent.addChild((OMNode)proxy);
/*     */     }
/* 234 */     return proxy;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 238 */     log.error(msg);
/* 239 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ProxyServiceSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RegistryFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegistryFactory
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(RegistryFactory.class);
/*     */   
/*  43 */   public static final QName PROVIDER_Q = new QName("""", ""provider"");
/*  44 */   public static final QName PARAMETER_Q = new QName(""http://ws.apache.org/ns/synapse"", ""parameter"");
/*  45 */   public static final QName NAME_Q = new QName("""", ""name"");
/*     */ 
/*     */   
/*     */   public static Registry createRegistry(OMElement elem) {
/*  49 */     OMAttribute prov = elem.getAttribute(PROVIDER_Q);
/*  50 */     if (prov != null) {
/*     */       try {
/*  52 */         Class<?> provider = Class.forName(prov.getAttributeValue());
/*  53 */         Registry registry = (Registry)provider.newInstance();
/*  54 */         setProperties(registry, elem);
/*  55 */         return registry;
/*     */       }
/*  57 */       catch (ClassNotFoundException e) {
/*  58 */         handleException(""Cannot locate registry provider class : "" + prov.getAttributeValue(), e);
/*     */       }
/*  60 */       catch (IllegalAccessException e) {
/*  61 */         handleException(""Error instantiating registry provider : "" + prov.getAttributeValue(), e);
/*     */       }
/*  63 */       catch (InstantiationException e) {
/*  64 */         handleException(""Error instantiating registry provider : "" + prov.getAttributeValue(), e);
/*     */       } 
/*     */     } else {
/*     */       
/*  68 */       handleException(""The registry 'provider' attribute is required for a registry definition"");
/*     */     } 
/*     */     
/*  71 */     return null;
/*     */   }
/*     */   
/*     */   private static void setProperties(Registry reg, OMElement elem) {
/*  75 */     Iterator params = elem.getChildrenWithName(PARAMETER_Q);
/*  76 */     while (params.hasNext()) {
/*  77 */       Object o = params.next();
/*  78 */       if (o instanceof OMElement) {
/*  79 */         OMElement prop = (OMElement)o;
/*  80 */         OMAttribute pname = prop.getAttribute(NAME_Q);
/*  81 */         String propertyValue = prop.getText();
/*  82 */         if (pname != null) {
/*  83 */           if (propertyValue != null)
/*  84 */             reg.addConfigProperty(pname.getAttributeValue(), propertyValue.trim()); 
/*     */           continue;
/*     */         } 
/*  87 */         handleException(""Invalid registry property - property should have a name "");
/*     */         continue;
/*     */       } 
/*  90 */       handleException(""Invalid registry property"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/*  96 */     log.error(msg);
/*  97 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 101 */     log.error(msg, e);
/* 102 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\RegistryFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RegistrySerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.registry.Registry;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RegistrySerializer
/*    */ {
/* 40 */   private static final Log log = LogFactory.getLog(RegistrySerializer.class);
/*    */   
/* 42 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/* 43 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/* 44 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */ 
/*    */   
/*    */   public static OMElement serializeRegistry(OMElement parent, Registry registry) {
/* 48 */     OMElement reg = fac.createOMElement(""registry"", synNS);
/*    */     
/* 50 */     if (registry.getProviderClass() != null) {
/* 51 */       reg.addAttribute(fac.createOMAttribute(""provider"", nullNS, registry.getProviderClass()));
/*    */     } else {
/*    */       
/* 54 */       handleException(""Invalid registry. Provider is required"");
/*    */     } 
/*    */     
/* 57 */     Iterator<String> iter = registry.getConfigProperties().keySet().iterator();
/* 58 */     while (iter.hasNext()) {
/* 59 */       String name = iter.next();
/* 60 */       String value = (String)registry.getConfigProperties().get(name);
/* 61 */       OMElement property = fac.createOMElement(""parameter"", synNS);
/* 62 */       property.addAttribute(fac.createOMAttribute(""name"", nullNS, name));
/*    */       
/* 64 */       property.setText(value.trim());
/* 65 */       reg.addChild((OMNode)property);
/*    */     } 
/*    */     
/* 68 */     if (parent != null) {
/* 69 */       parent.addChild((OMNode)reg);
/*    */     }
/* 71 */     return reg;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 75 */     log.error(msg);
/* 76 */     throw new SynapseException(msg);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\RegistrySerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RMSequenceMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.builtin.RMSequenceMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RMSequenceMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  43 */   private static final QName SEQUENCE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""RMSequence"");
/*  44 */   private static final QName ATT_CORR = new QName(""correlation"");
/*  45 */   private static final QName ATT_LASTMSG = new QName(""last-message"");
/*  46 */   private static final QName ATT_VERSION = new QName(""version"");
/*  47 */   private static final QName ATT_SINGLE = new QName(""single"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  51 */     RMSequenceMediator sequenceMediator = new RMSequenceMediator();
/*  52 */     OMAttribute correlation = elem.getAttribute(ATT_CORR);
/*  53 */     OMAttribute lastMessage = elem.getAttribute(ATT_LASTMSG);
/*  54 */     OMAttribute single = elem.getAttribute(ATT_SINGLE);
/*  55 */     OMAttribute version = elem.getAttribute(ATT_VERSION);
/*     */     
/*  57 */     if (single == null && correlation == null) {
/*  58 */       String msg = ""The 'single' attribute value of true or a 'correlation' attribute is required for the configuration of a RMSequence mediator"";
/*     */       
/*  60 */       log.error(msg);
/*  61 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*  64 */     if (correlation != null) {
/*  65 */       if (correlation.getAttributeValue() != null && correlation.getAttributeValue().trim().length() == 0) {
/*     */         
/*  67 */         String msg = ""Invalid attribute value specified for correlation"";
/*  68 */         log.error(msg);
/*  69 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/*  73 */         sequenceMediator.setCorrelation(new AXIOMXPath(correlation.getAttributeValue()));
/*  74 */       } catch (JaxenException e) {
/*  75 */         String msg = ""Invalid XPath expression for attribute correlation : "" + correlation.getAttributeValue();
/*     */         
/*  77 */         log.error(msg);
/*  78 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*  81 */       OMElementUtils.addNameSpaces(sequenceMediator.getCorrelation(), elem, log);
/*     */     } 
/*     */     
/*  84 */     if (single != null) {
/*  85 */       sequenceMediator.setSingle(Boolean.valueOf(single.getAttributeValue()));
/*     */     }
/*     */     
/*  88 */     if (sequenceMediator.isSingle() && sequenceMediator.getCorrelation() != null) {
/*  89 */       String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a correlation attribute specified."";
/*     */       
/*  91 */       log.error(msg);
/*  92 */       throw new SynapseException(msg);
/*     */     } 
/*  94 */     if (!sequenceMediator.isSingle() && sequenceMediator.getCorrelation() == null) {
/*  95 */       String msg = ""Invalid RMSequence mediator. A RMSequence must have a single attribute value of true or a correlation attribute specified."";
/*     */       
/*  97 */       log.error(msg);
/*  98 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 101 */     if (lastMessage != null) {
/* 102 */       if (lastMessage.getAttributeValue() != null && lastMessage.getAttributeValue().trim().length() == 0) {
/*     */         
/* 104 */         String msg = ""Invalid attribute value specified for last-message"";
/* 105 */         log.error(msg);
/* 106 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/*     */       try {
/* 110 */         sequenceMediator.setLastMessage(new AXIOMXPath(lastMessage.getAttributeValue()));
/* 111 */       } catch (JaxenException e) {
/* 112 */         String msg = ""Invalid XPath expression for attribute last-message : "" + lastMessage.getAttributeValue();
/*     */         
/* 114 */         log.error(msg);
/* 115 */         throw new SynapseException(msg);
/*     */       } 
/*     */       
/* 118 */       OMElementUtils.addNameSpaces(sequenceMediator.getLastMessage(), elem, log);
/*     */     } 
/*     */     
/* 121 */     if (sequenceMediator.isSingle() && sequenceMediator.getLastMessage() != null) {
/* 122 */       String msg = ""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a last-message attribute specified."";
/*     */       
/* 124 */       log.error(msg);
/* 125 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/* 128 */     if (version != null) {
/* 129 */       if (!""1.0"".equals(version.getAttributeValue()) && !""1.1"".equals(version.getAttributeValue())) {
/*     */         
/* 131 */         String msg = ""Only '1.0' or '1.1' values are allowed for attribute version for a RMSequence mediator, Unsupported version "" + version.getAttributeValue();
/*     */ 
/*     */ 
/*     */         
/* 135 */         log.error(msg);
/* 136 */         throw new SynapseException(msg);
/*     */       } 
/* 138 */       sequenceMediator.setVersion(version.getAttributeValue());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 143 */     processTraceState((Mediator)sequenceMediator, elem);
/*     */     
/* 145 */     return (Mediator)sequenceMediator;
/*     */   }
/*     */ 
/*     */   
/* 149 */   public QName getTagQName() { return SEQUENCE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\RMSequenceMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.RMSequenceMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.builtin.RMSequenceMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RMSequenceMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 37 */     if (!(m instanceof RMSequenceMediator)) {
/* 38 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 41 */     RMSequenceMediator mediator = (RMSequenceMediator)m;
/* 42 */     OMElement sequence = fac.createOMElement(""RMSequence"", synNS);
/* 43 */     saveTracingState(sequence, (Mediator)mediator);
/*    */     
/* 45 */     if (mediator.isSingle() && mediator.getCorrelation() != null) {
/* 46 */       handleException(""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a correlation attribute specified."");
/*    */     }
/*    */     
/* 49 */     if (mediator.isSingle() && mediator.getLastMessage() != null) {
/* 50 */       handleException(""Invalid RMSequence mediator. A RMSequence can't have both a single attribute value of true and a last-message attribute specified."");
/*    */     }
/*    */ 
/*    */     
/* 54 */     if (mediator.isSingle()) {
/* 55 */       sequence.addAttribute(fac.createOMAttribute(""single"", nullNS, String.valueOf(mediator.isSingle())));
/* 56 */     } else if (mediator.getCorrelation() != null) {
/* 57 */       sequence.addAttribute(fac.createOMAttribute(""correlation"", nullNS, mediator.getCorrelation().toString()));
/*    */       
/* 59 */       serializeNamespaces(sequence, mediator.getCorrelation());
/*    */     } else {
/* 61 */       handleException(""Invalid RMSequence mediator. Specify a single message sequence or a correlation attribute."");
/*    */     } 
/*    */ 
/*    */     
/* 65 */     if (mediator.getLastMessage() != null) {
/* 66 */       sequence.addAttribute(fac.createOMAttribute(""last-message"", nullNS, mediator.getLastMessage().toString()));
/*    */       
/* 68 */       serializeNamespaces(sequence, mediator.getLastMessage());
/*    */     } 
/*    */     
/* 71 */     if (mediator.getVersion() != null) {
/* 72 */       sequence.addAttribute(fac.createOMAttribute(""version"", nullNS, mediator.getVersion()));
/*    */     }
/*    */     
/* 75 */     if (parent != null) {
/* 76 */       parent.addChild((OMNode)sequence);
/*    */     }
/* 78 */     return sequence;
/*    */   }
/*    */ 
/*    */   
/* 82 */   public String getMediatorClassName() { return RMSequenceMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\RMSequenceMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SendMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.builtin.SendMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  80 */   private static final QName SEND_Q = new QName(""http://ws.apache.org/ns/synapse"", ""send"");
/*  81 */   private static final QName ENDPOINT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""endpoint"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  85 */     SendMediator sm = new SendMediator();
/*     */ 
/*     */ 
/*     */     
/*  89 */     processTraceState((Mediator)sm, elem);
/*     */     
/*  91 */     OMElement epElement = elem.getFirstChildWithName(ENDPOINT_Q);
/*  92 */     if (epElement != null) {
/*     */ 
/*     */ 
/*     */       
/*  96 */       EndpointFactory fac = EndpointAbstractFactory.getEndpointFactroy(epElement);
/*  97 */       if (fac != null) {
/*  98 */         Endpoint endpoint = fac.createEndpoint(epElement, true);
/*  99 */         if (endpoint != null) {
/* 100 */           sm.setEndpoint(endpoint);
/*     */         }
/*     */       } else {
/* 103 */         throw new SynapseException(""Invalid endpoint fromat."");
/*     */       } 
/*     */     } 
/*     */     
/* 107 */     return (Mediator)sm;
/*     */   }
/*     */ 
/*     */   
/* 111 */   public QName getTagQName() { return SEND_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SendMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SendMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointSerializer;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.builtin.SendMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediatorSerializer
/*     */   extends AbstractMediatorSerializer
/*     */ {
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  78 */     if (!(m instanceof SendMediator)) {
/*  79 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  82 */     SendMediator mediator = (SendMediator)m;
/*  83 */     OMElement send = fac.createOMElement(""send"", synNS);
/*  84 */     saveTracingState(send, (Mediator)mediator);
/*     */     
/*  86 */     Endpoint activeEndpoint = mediator.getEndpoint();
/*  87 */     if (activeEndpoint != null) {
/*  88 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(activeEndpoint);
/*     */ 
/*     */       
/*  91 */       OMElement endpointElement = serializer.serializeEndpoint(activeEndpoint);
/*  92 */       send.addChild((OMNode)endpointElement);
/*     */     } 
/*     */     
/*  95 */     if (parent != null) {
/*  96 */       parent.addChild((OMNode)send);
/*     */     }
/*  98 */     return send;
/*     */   }
/*     */ 
/*     */   
/* 102 */   public String getMediatorClassName() { return SendMediator.class.getName(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SendMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SequenceMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  50 */   private static final QName SEQUENCE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""sequence"");
/*     */ 
/*     */ 
/*     */   
/*  54 */   public QName getTagQName() { return SEQUENCE_Q; }
/*     */ 
/*     */   
/*     */   public SequenceMediator createAnonymousSequence(OMElement elem) {
/*  58 */     SequenceMediator seqMediator = new SequenceMediator();
/*  59 */     OMAttribute e = elem.getAttribute(ATT_ONERROR);
/*  60 */     if (e != null) {
/*  61 */       seqMediator.setErrorHandler(e.getAttributeValue());
/*     */     }
/*  63 */     processTraceState((Mediator)seqMediator, elem);
/*  64 */     addChildren(elem, (ListMediator)seqMediator);
/*  65 */     OMAttribute statistics = elem.getAttribute(ATT_STATS);
/*  66 */     if (statistics != null) {
/*  67 */       String statisticsValue = statistics.getAttributeValue();
/*  68 */       if (statisticsValue != null) {
/*  69 */         if (""enable"".equals(statisticsValue)) {
/*  70 */           seqMediator.setStatisticsState(1);
/*     */         }
/*  72 */         else if (""disable"".equals(statisticsValue)) {
/*  73 */           seqMediator.setStatisticsState(0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/*  78 */     return seqMediator;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  83 */     SequenceMediator seqMediator = new SequenceMediator();
/*     */     
/*  85 */     OMAttribute n = elem.getAttribute(ATT_NAME);
/*  86 */     OMAttribute e = elem.getAttribute(ATT_ONERROR);
/*  87 */     if (n != null) {
/*  88 */       seqMediator.setName(n.getAttributeValue());
/*  89 */       if (e != null) {
/*  90 */         seqMediator.setErrorHandler(e.getAttributeValue());
/*     */       }
/*  92 */       processTraceState((Mediator)seqMediator, elem);
/*  93 */       addChildren(elem, (ListMediator)seqMediator);
/*     */     } else {
/*     */       
/*  96 */       n = elem.getAttribute(ATT_KEY);
/*  97 */       if (n != null) {
/*  98 */         seqMediator.setKey(n.getAttributeValue());
/*  99 */         if (e != null) {
/* 100 */           String msg = ""A sequence mediator with a reference to another sequence can not have 'ErrorHandler'"";
/*     */           
/* 102 */           log.error(msg);
/* 103 */           throw new SynapseException(msg);
/*     */         } 
/*     */       } else {
/* 106 */         String msg = ""A sequence mediator should be a named sequence or a reference to another sequence (i.e. a name attribute or key attribute is required)"";
/*     */         
/* 108 */         log.error(msg);
/* 109 */         throw new SynapseException(msg);
/*     */       } 
/*     */     } 
/*     */     
/* 113 */     OMAttribute statistics = elem.getAttribute(ATT_STATS);
/* 114 */     if (statistics != null) {
/* 115 */       String statisticsValue = statistics.getAttributeValue();
/* 116 */       if (statisticsValue != null) {
/* 117 */         if (""enable"".equals(statisticsValue)) {
/* 118 */           seqMediator.setStatisticsState(1);
/*     */         }
/* 120 */         else if (""disable"".equals(statisticsValue)) {
/* 121 */           seqMediator.setStatisticsState(0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 127 */     return (Mediator)seqMediator;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SequenceMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SequenceMediatorSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediatorSerializer
/*     */   extends AbstractListMediatorSerializer
/*     */ {
/*     */   public OMElement serializeAnonymousSequence(OMElement parent, SequenceMediator mediator) {
/*  44 */     OMElement sequence = fac.createOMElement(""sequence"", synNS);
/*  45 */     int isEnableStatistics = mediator.getStatisticsState();
/*  46 */     String statisticsValue = null;
/*  47 */     if (isEnableStatistics == 1) {
/*  48 */       statisticsValue = ""enable"";
/*  49 */     } else if (isEnableStatistics == 0) {
/*  50 */       statisticsValue = ""disable"";
/*     */     } 
/*  52 */     if (statisticsValue != null) {
/*  53 */       sequence.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */     }
/*     */     
/*  56 */     if (mediator.getErrorHandler() != null) {
/*  57 */       sequence.addAttribute(fac.createOMAttribute(""onError"", nullNS, mediator.getErrorHandler()));
/*     */     }
/*     */     
/*  60 */     saveTracingState(sequence, (Mediator)mediator);
/*  61 */     serializeChildren(sequence, mediator.getList());
/*  62 */     if (parent != null) {
/*  63 */       parent.addChild((OMNode)sequence);
/*     */     }
/*  65 */     return sequence;
/*     */   }
/*     */ 
/*     */   
/*     */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/*  70 */     if (!(m instanceof SequenceMediator)) {
/*  71 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*     */     }
/*     */     
/*  74 */     SequenceMediator mediator = (SequenceMediator)m;
/*  75 */     OMElement sequence = fac.createOMElement(""sequence"", synNS);
/*     */ 
/*     */ 
/*     */     
/*  79 */     if (mediator.isDynamic()) {
/*  80 */       sequence.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*     */       
/*  82 */       sequence.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getRegistryKey()));
/*     */     
/*     */     }
/*     */     else {
/*     */       
/*  87 */       int isEnableStatistics = mediator.getStatisticsState();
/*  88 */       String statisticsValue = null;
/*  89 */       if (isEnableStatistics == 1) {
/*  90 */         statisticsValue = ""enable"";
/*  91 */       } else if (isEnableStatistics == 0) {
/*  92 */         statisticsValue = ""disable"";
/*     */       } 
/*  94 */       if (statisticsValue != null) {
/*  95 */         sequence.addAttribute(fac.createOMAttribute(""statistics"", nullNS, statisticsValue));
/*     */       }
/*     */ 
/*     */       
/*  99 */       if (mediator.getKey() != null) {
/* 100 */         sequence.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getKey()));
/*     */       }
/* 102 */       else if (mediator.getName() != null) {
/* 103 */         sequence.addAttribute(fac.createOMAttribute(""name"", nullNS, mediator.getName()));
/*     */ 
/*     */         
/* 106 */         if (mediator.getErrorHandler() != null) {
/* 107 */           sequence.addAttribute(fac.createOMAttribute(""onError"", nullNS, mediator.getErrorHandler()));
/*     */         }
/*     */         
/* 110 */         saveTracingState(sequence, (Mediator)mediator);
/* 111 */         serializeChildren(sequence, mediator.getList());
/*     */       } 
/*     */     } 
/*     */     
/* 115 */     if (parent != null) {
/* 116 */       parent.addChild((OMNode)sequence);
/*     */     }
/* 118 */     return sequence;
/*     */   }
/*     */ 
/*     */   
/* 122 */   public String getMediatorClassName() { return SequenceMediator.class.getName(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SequenceMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.StartupFactory,"package org.apache.synapse.config.xml;
import javax.xml.namespace.QName;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Startup;
public interface StartupFactory {
  Startup createStartup(OMElement paramOMElement);
  QName getTagQName();
  Class getSerializerClass();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\StartupFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.StartupFinder,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Startup;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.startup.quartz.SimpleQuartzFactory;
/*     */ import sun.misc.Service;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StartupFinder
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(ConfigurationFactoryAndSerializerFinder.class);
/*     */ 
/*     */   
/*  42 */   private static StartupFinder instance = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  47 */   private static Map factoryMap = new HashMap<Object, Object>();
/*  48 */   private static Map serializerMap = new HashMap<Object, Object>();
/*     */   
/*     */   public static synchronized StartupFinder getInstance() {
/*  51 */     if (instance == null) {
/*  52 */       instance = new StartupFinder();
/*     */     }
/*  54 */     return instance;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void reset() {
/*  61 */     factoryMap.clear();
/*  62 */     instance = null;
/*     */   }
/*     */   
/*  65 */   private static final Class[] builtins = new Class[] { SimpleQuartzFactory.class };
/*     */ 
/*     */   
/*     */   private StartupFinder() {
/*  69 */     for (int i = 0; i < builtins.length; i++) {
/*  70 */       StartupFactory sf; Class<StartupFactory> b = builtins[i];
/*     */       
/*     */       try {
/*  73 */         sf = b.newInstance();
/*  74 */       } catch (Exception e) {
/*  75 */         throw new SynapseException(""cannot instantiate "" + b.getName(), e);
/*     */       } 
/*     */       
/*  78 */       factoryMap.put(sf.getTagQName(), b);
/*  79 */       serializerMap.put(sf.getTagQName(), sf.getSerializerClass());
/*     */     } 
/*     */ 
/*     */     
/*  83 */     registerExtensions();
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/*  87 */     log.error(msg);
/*  88 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void registerExtensions() {
/* 104 */     Iterator<StartupFactory> it = Service.providers(StartupFactory.class);
/* 105 */     while (it.hasNext()) {
/* 106 */       StartupFactory sf = it.next();
/* 107 */       QName tag = sf.getTagQName();
/* 108 */       factoryMap.put(tag, sf.getClass());
/* 109 */       serializerMap.put(tag, sf.getSerializerClass());
/* 110 */       if (log.isDebugEnabled()) {
/* 111 */         log.debug(""Added StartupFactory "" + sf.getClass() + "" to handle "" + tag);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Startup getStartup(OMElement element) {
/* 127 */     QName qName = element.getQName();
/* 128 */     if (log.isDebugEnabled()) {
/* 129 */       log.debug(""Creating the Startup for : "" + qName);
/*     */     }
/*     */     
/* 132 */     Class<StartupFactory> cls = (Class)factoryMap.get(qName);
/* 133 */     if (cls == null) {
/* 134 */       String msg = ""Unknown Startup type referenced by startup element : "" + qName;
/* 135 */       log.error(msg);
/* 136 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 140 */       StartupFactory sf = cls.newInstance();
/* 141 */       return sf.createStartup(element);
/*     */     }
/* 143 */     catch (InstantiationException e) {
/* 144 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 145 */       log.error(msg);
/* 146 */       throw new SynapseException(msg, e);
/*     */     }
/* 148 */     catch (IllegalAccessException e) {
/* 149 */       String msg = ""Error initializing configuration factory : "" + cls;
/* 150 */       log.error(msg);
/* 151 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public OMElement serializeStartup(OMElement parent, Startup startup) {
/* 168 */     Class<StartupSerializer> cls = (Class)serializerMap.get(startup.getTagQName());
/* 169 */     if (cls == null) {
/* 170 */       String msg = ""Unknown startup type referenced by startup element : "" + startup.getTagQName();
/*     */       
/* 172 */       log.error(msg);
/* 173 */       throw new SynapseException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 177 */       StartupSerializer ss = cls.newInstance();
/* 178 */       return ss.serializeStartup(parent, startup);
/*     */     }
/* 180 */     catch (InstantiationException e) {
/* 181 */       String msg = ""Error initializing startup serializer: "" + cls;
/* 182 */       log.error(msg);
/* 183 */       throw new SynapseException(msg, e);
/*     */     }
/* 185 */     catch (IllegalAccessException e) {
/* 186 */       String msg = ""Error initializing startup ser: "" + cls;
/* 187 */       log.error(msg);
/* 188 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public Map getFactoryMap() { return factoryMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public Map getSerializerMap() { return serializerMap; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Startup getObjectFromOMNode(OMNode om) {
/* 214 */     if (om instanceof OMElement) {
/* 215 */       return getStartup((OMElement)om);
/*     */     }
/* 217 */     handleException(""Invalid configuration XML : "" + om);
/*     */     
/* 219 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\StartupFinder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.StartupSerializer,"package org.apache.synapse.config.xml;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.Startup;
public interface StartupSerializer {
  OMElement serializeStartup(OMElement paramOMElement, Startup paramStartup);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\StartupSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchCase,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchCase
/*     */ {
/*  39 */   private Pattern regex = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private AnonymousListMediator caseMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  50 */     if (this.caseMediator != null) {
/*  51 */       return this.caseMediator.mediate(synCtx);
/*     */     }
/*  53 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   public AnonymousListMediator getCaseMediator() { return this.caseMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  71 */   public void setCaseMediator(AnonymousListMediator caseMediator) { this.caseMediator = caseMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   public Pattern getRegex() { return this.regex; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setRegex(Pattern regex) { this.regex = regex; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean matches(String value) {
/*  99 */     Matcher matcher = this.regex.matcher(value);
/* 100 */     if (matcher == null) {
/* 101 */       return false;
/*     */     }
/* 103 */     boolean retVal = matcher.matches();
/* 104 */     return retVal;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SwitchCase.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.regex.Pattern;
/*     */ import java.util.regex.PatternSyntaxException;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.filters.SwitchMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  53 */   private static final QName SWITCH_Q = new QName(""http://ws.apache.org/ns/synapse"", ""switch"");
/*  54 */   private static final QName CASE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""case"");
/*  55 */   private static final QName DEFAULT_Q = new QName(""http://ws.apache.org/ns/synapse"", ""default"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  59 */     SwitchMediator switchMediator = new SwitchMediator();
/*  60 */     OMAttribute source = elem.getAttribute(ATT_SOURCE);
/*  61 */     if (source == null) {
/*  62 */       String msg = ""A 'source' XPath attribute is required for a switch mediator"";
/*  63 */       log.error(msg);
/*  64 */       throw new SynapseException(msg);
/*     */     } 
/*     */     try {
/*  67 */       AXIOMXPath sourceXPath = new AXIOMXPath(source.getAttributeValue());
/*  68 */       OMElementUtils.addNameSpaces(sourceXPath, elem, log);
/*  69 */       switchMediator.setSource(sourceXPath);
/*     */     }
/*  71 */     catch (JaxenException e) {
/*  72 */       String msg = ""Invalid XPath for attribute 'source' : "" + source.getAttributeValue();
/*  73 */       log.error(msg);
/*  74 */       throw new SynapseException(msg);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*  79 */     processTraceState((Mediator)switchMediator, elem);
/*  80 */     Iterator<OMElement> iter = elem.getChildrenWithName(CASE_Q);
/*  81 */     while (iter.hasNext()) {
/*  82 */       OMElement caseElem = iter.next();
/*  83 */       SwitchCase aCase = new SwitchCase();
/*  84 */       OMAttribute regex = caseElem.getAttribute(ATT_REGEX);
/*  85 */       if (regex == null) {
/*  86 */         String msg = ""The 'regex' attribute is required for a switch case definition"";
/*  87 */         log.error(msg);
/*  88 */         throw new SynapseException(msg);
/*     */       } 
/*     */       try {
/*  91 */         aCase.setRegex(Pattern.compile(regex.getAttributeValue()));
/*  92 */       } catch (PatternSyntaxException pse) {
/*  93 */         String msg = ""Invalid Regular Expression for attribute 'regex' : "" + regex.getAttributeValue();
/*  94 */         log.error(msg);
/*  95 */         throw new SynapseException(msg);
/*     */       } 
/*  97 */       aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator(caseElem));
/*  98 */       switchMediator.addCase(aCase);
/*     */     } 
/* 100 */     iter = elem.getChildrenWithName(DEFAULT_Q);
/* 101 */     if (iter.hasNext()) {
/* 102 */       SwitchCase aCase = new SwitchCase();
/* 103 */       aCase.setCaseMediator(AnonymousListMediatorFactory.createAnonymousListMediator(iter.next()));
/* 104 */       switchMediator.setDefaultCase(aCase);
/*     */     } 
/*     */     
/* 107 */     return (Mediator)switchMediator;
/*     */   }
/*     */ 
/*     */   
/* 111 */   public QName getTagQName() { return SWITCH_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SwitchMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SwitchMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.filters.SwitchMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SwitchMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 47 */     if (!(m instanceof SwitchMediator)) {
/* 48 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 51 */     SwitchMediator mediator = (SwitchMediator)m;
/* 52 */     OMElement switchMed = fac.createOMElement(""switch"", synNS);
/* 53 */     saveTracingState(switchMed, (Mediator)mediator);
/*    */     
/* 55 */     if (mediator.getSource() != null) {
/* 56 */       switchMed.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 58 */       serializeNamespaces(switchMed, mediator.getSource());
/*    */     } else {
/*    */       
/* 61 */       handleException(""Invalid switch mediator. Source required"");
/*    */     } 
/*    */     
/* 64 */     Iterator<SwitchCase> iter = mediator.getCases().iterator();
/* 65 */     while (iter.hasNext()) {
/* 66 */       OMElement caseElem = fac.createOMElement(""case"", synNS);
/* 67 */       SwitchCase aCase = iter.next();
/* 68 */       if (aCase.getRegex() != null) {
/* 69 */         caseElem.addAttribute(fac.createOMAttribute(""regex"", nullNS, aCase.getRegex().pattern()));
/*    */       } else {
/*    */         
/* 72 */         handleException(""Invalid switch case. Regex required"");
/*    */       } 
/* 74 */       AnonymousListMediator caseMediator = aCase.getCaseMediator();
/* 75 */       if (caseMediator != null) {
/* 76 */         (new AnonymousListMediatorSerializer()).serializeMediator(caseElem, (Mediator)caseMediator);
/*    */         
/* 78 */         switchMed.addChild((OMNode)caseElem);
/*    */       } 
/*    */     } 
/* 81 */     SwitchCase defaultCase = mediator.getDefaultCase();
/* 82 */     if (defaultCase != null) {
/* 83 */       OMElement caseDefaultElem = fac.createOMElement(""default"", synNS);
/* 84 */       AnonymousListMediator caseDefaultMediator = defaultCase.getCaseMediator();
/* 85 */       if (caseDefaultMediator != null) {
/* 86 */         (new AnonymousListMediatorSerializer()).serializeMediator(caseDefaultElem, (Mediator)caseDefaultMediator);
/*    */         
/* 88 */         switchMed.addChild((OMNode)caseDefaultElem);
/*    */       } 
/*    */     } 
/* 91 */     if (parent != null) {
/* 92 */       parent.addChild((OMNode)switchMed);
/*    */     }
/* 94 */     return switchMed;
/*    */   }
/*    */ 
/*    */   
/* 98 */   public String getMediatorClassName() { return SwitchMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SwitchMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseMediatorFactory,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.ListMediator;
/*    */ import org.apache.synapse.mediators.base.SynapseMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediatorFactory
/*    */   extends AbstractListMediatorFactory
/*    */ {
/* 40 */   private static final QName RULES_Q = new QName(""http://ws.apache.org/ns/synapse"", ""rules"");
/*    */ 
/*    */   
/* 43 */   public QName getTagQName() { return RULES_Q; }
/*    */ 
/*    */   
/*    */   public Mediator createMediator(OMElement elem) {
/* 47 */     SynapseMediator sm = new SynapseMediator();
/*    */ 
/*    */ 
/*    */     
/* 51 */     processTraceState((Mediator)sm, elem);
/*    */     
/* 53 */     addChildren(elem, (ListMediator)sm);
/* 54 */     return (Mediator)sm;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SynapseMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.base.SynapseMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 39 */     if (!(m instanceof SynapseMediator)) {
/* 40 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 43 */     SynapseMediator mediator = (SynapseMediator)m;
/* 44 */     OMElement rules = fac.createOMElement(""rules"", synNS);
/* 45 */     saveTracingState(rules, (Mediator)mediator);
/*    */     
/* 47 */     serializeChildren(rules, mediator.getList());
/*    */     
/* 49 */     if (parent != null) {
/* 50 */       parent.addChild((OMNode)rules);
/*    */     }
/* 52 */     return rules;
/*    */   }
/*    */ 
/*    */   
/* 56 */   public String getMediatorClassName() { return SynapseMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SynapseMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseXMLConfigurationFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.Startup;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.mediators.builtin.DropMediator;
/*     */ import org.apache.synapse.mediators.builtin.LogMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseXMLConfigurationFactory
/*     */   implements ConfigurationFactory
/*     */ {
/*  46 */   private static Log log = LogFactory.getLog(SynapseXMLConfigurationFactory.class);
/*     */ 
/*     */   
/*     */   public SynapseConfiguration getConfiguration(OMElement definitions) {
/*  50 */     if (!definitions.getQName().equals(XMLConfigConstants.DEFINITIONS_ELT)) {
/*  51 */       throw new SynapseException(""Wrong QName for this config factory "" + definitions.getQName());
/*     */     }
/*     */ 
/*     */     
/*  55 */     SynapseConfiguration config = new SynapseConfiguration();
/*  56 */     config.setDefaultQName(definitions.getQName());
/*     */     
/*  58 */     SequenceMediator rootSequence = new SequenceMediator();
/*  59 */     rootSequence.setName(""main"");
/*     */     
/*  61 */     Iterator iter = definitions.getChildren();
/*     */     
/*  63 */     while (iter.hasNext()) {
/*  64 */       Object o = iter.next();
/*  65 */       if (o instanceof OMElement) {
/*  66 */         OMElement elt = (OMElement)o;
/*  67 */         if (XMLConfigConstants.SEQUENCE_ELT.equals(elt.getQName())) {
/*  68 */           String key = elt.getAttributeValue(new QName("""", ""key""));
/*     */ 
/*     */           
/*  71 */           if (key != null) {
/*  72 */             Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
/*  73 */             rootSequence.addChild(m); continue;
/*     */           } 
/*  75 */           defineSequence(config, elt); continue;
/*     */         } 
/*  77 */         if (XMLConfigConstants.ENDPOINT_ELT.equals(elt.getQName())) {
/*  78 */           defineEndpoint(config, elt); continue;
/*  79 */         }  if (XMLConfigConstants.ENTRY_ELT.equals(elt.getQName())) {
/*  80 */           defineEntry(config, elt); continue;
/*  81 */         }  if (XMLConfigConstants.PROXY_ELT.equals(elt.getQName())) {
/*  82 */           defineProxy(config, elt); continue;
/*  83 */         }  if (XMLConfigConstants.REGISTRY_ELT.equals(elt.getQName())) {
/*  84 */           defineRegistry(config, elt); continue;
/*  85 */         }  if (XMLConfigConstants.TASK_ELT.equals(elt.getQName())) {
/*  86 */           defineStartup(config, elt); continue;
/*     */         } 
/*  88 */         Mediator m = MediatorFactoryFinder.getInstance().getMediator(elt);
/*  89 */         rootSequence.addChild(m);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/*  94 */     if (config.getLocalRegistry().isEmpty() && config.getProxyServices().isEmpty() && rootSequence.getList().isEmpty() && config.getRegistry() != null) {
/*     */       
/*  96 */       OMNode remoteConfigNode = config.getRegistry().lookup(""synapse.xml"");
/*     */       try {
/*  98 */         config = XMLConfigurationBuilder.getConfiguration(SynapseConfigUtils.getStreamSource(remoteConfigNode).getInputStream());
/*     */       }
/* 100 */       catch (XMLStreamException xse) {
/* 101 */         throw new SynapseException(""Problem loading remote synapse.xml "", xse);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     if (!config.getLocalRegistry().containsKey(""main"")) {
/*     */ 
/*     */       
/* 112 */       if (rootSequence.getList().isEmpty() && config.getMainSequence() == null) {
/* 113 */         setDefaultMainSequence(config);
/*     */       } else {
/* 115 */         config.addSequence(rootSequence.getName(), (Mediator)rootSequence);
/*     */       } 
/* 117 */     } else if (!rootSequence.getList().isEmpty()) {
/* 118 */       handleException(""Invalid Synapse Configuration : Conflict in resolving the \""main\"" mediator\n\tSynapse Configuration cannot have sequence named \""main\"" and toplevel mediators simultaniously"");
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 123 */     if (config.getFaultSequence() == null) {
/* 124 */       setDefaultFaultSequence(config);
/*     */     }
/*     */     
/* 127 */     return config;
/*     */   }
/*     */   
/*     */   private static void defineRegistry(SynapseConfiguration config, OMElement elem) {
/* 131 */     if (config.getRegistry() != null) {
/* 132 */       handleException(""Only one remote registry can be defined within a configuration"");
/*     */     }
/* 134 */     config.setRegistry(RegistryFactory.createRegistry(elem));
/*     */   }
/*     */   
/*     */   private static void defineStartup(SynapseConfiguration config, OMElement elem) {
/* 138 */     Startup startup = StartupFinder.getInstance().getStartup(elem);
/* 139 */     if (config.getStartup(startup.getName()) != null) {
/* 140 */       handleException(""Duplicate startup with name : "" + startup.getName());
/*     */     }
/* 142 */     config.addStartup(startup);
/*     */   }
/*     */   
/*     */   private static void defineProxy(SynapseConfiguration config, OMElement elem) {
/* 146 */     ProxyService proxy = ProxyServiceFactory.createProxy(elem);
/* 147 */     if (config.getProxyService(proxy.getName()) != null) {
/* 148 */       handleException(""Duplicate proxy service with name : "" + proxy.getName());
/*     */     }
/* 150 */     config.addProxyService(proxy.getName(), proxy);
/*     */   }
/*     */   
/*     */   private static void defineEntry(SynapseConfiguration config, OMElement elem) {
/* 154 */     Entry entry = EntryFactory.createEntry(elem);
/* 155 */     if (config.getLocalRegistry().get(entry.getKey()) != null) {
/* 156 */       handleException(""Duplicate registry entry definition for key : "" + entry.getKey());
/*     */     }
/* 158 */     config.addEntry(entry.getKey(), entry);
/*     */   }
/*     */ 
/*     */   
/*     */   public static void defineSequence(SynapseConfiguration config, OMElement ele) {
/* 163 */     String name = ele.getAttributeValue(new QName("""", ""name""));
/* 164 */     if (name != null) {
/* 165 */       if (config.getLocalRegistry().get(name) != null) {
/* 166 */         handleException(""Duplicate sequence definition : "" + name);
/*     */       }
/* 168 */       config.addSequence(name, MediatorFactoryFinder.getInstance().getMediator(ele));
/*     */     } else {
/* 170 */       handleException(""Invalid sequence definition without a name"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void defineEndpoint(SynapseConfiguration config, OMElement ele) {
/* 176 */     String name = ele.getAttributeValue(new QName("""", ""name""));
/* 177 */     if (name != null) {
/* 178 */       if (config.getLocalRegistry().get(name.trim()) != null) {
/* 179 */         handleException(""Duplicate endpoint definition : "" + name);
/*     */       }
/* 181 */       Endpoint endpoint = EndpointAbstractFactory.getEndpointFactroy(ele).createEndpoint(ele, false);
/*     */       
/* 183 */       config.addEndpoint(name.trim(), endpoint);
/*     */     } else {
/* 185 */       handleException(""Invalid endpoint definition without a name"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void setDefaultMainSequence(SynapseConfiguration config) {
/* 196 */     SequenceMediator main = new SequenceMediator();
/* 197 */     main.setName(""main"");
/* 198 */     main.addChild((Mediator)new LogMediator());
/* 199 */     main.addChild((Mediator)new DropMediator());
/* 200 */     config.addSequence(""main"", (Mediator)main);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void setDefaultFaultSequence(SynapseConfiguration config) {
/* 210 */     SequenceMediator fault = new SequenceMediator();
/* 211 */     fault.setName(""fault"");
/* 212 */     LogMediator log = new LogMediator();
/* 213 */     log.setLogLevel(3);
/* 214 */     fault.addChild((Mediator)log);
/* 215 */     config.addSequence(""fault"", (Mediator)fault);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 219 */     log.error(msg);
/* 220 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 224 */     log.error(msg, e);
/* 225 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 231 */   public QName getTagQName() { return XMLConfigConstants.DEFINITIONS_ELT; }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public Class getSerializerClass() { return SynapseXMLConfigurationSerializer.class; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SynapseXMLConfigurationFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.SynapseXMLConfigurationSerializer,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.Startup;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*     */ import org.apache.synapse.core.axis2.ProxyService;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseXMLConfigurationSerializer
/*     */   implements ConfigurationSerializer
/*     */ {
/*  29 */   private static final Log log = LogFactory.getLog(XMLConfigurationSerializer.class);
/*     */ 
/*     */   
/*  32 */   private static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*     */   
/*  34 */   private static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*     */ 
/*     */   
/*  37 */   private static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public OMElement serializeConfiguration(SynapseConfiguration synCfg) {
/*  49 */     OMElement definitions = fac.createOMElement(""definitions"", synNS);
/*     */ 
/*     */     
/*  52 */     if (synCfg.getRegistry() != null) {
/*  53 */       RegistrySerializer.serializeRegistry(definitions, synCfg.getRegistry());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  58 */     Iterator<ProxyService> iter = synCfg.getProxyServices().iterator();
/*  59 */     while (iter.hasNext()) {
/*  60 */       ProxyService service = iter.next();
/*  61 */       ProxyServiceSerializer.serializeProxy(definitions, service);
/*     */     } 
/*     */     
/*  64 */     Map<Object, Object> entries = new HashMap<Object, Object>();
/*  65 */     Map<Object, Object> endpoints = new HashMap<Object, Object>();
/*  66 */     Map<Object, Object> sequences = new HashMap<Object, Object>();
/*     */     
/*  68 */     iter = synCfg.getLocalRegistry().keySet().iterator();
/*  69 */     while (iter.hasNext()) {
/*  70 */       Object key = iter.next();
/*  71 */       Object o = synCfg.getLocalRegistry().get(key);
/*  72 */       if (o instanceof Mediator) {
/*  73 */         sequences.put(key, o); continue;
/*  74 */       }  if (o instanceof Endpoint) {
/*  75 */         endpoints.put(key, o); continue;
/*  76 */       }  if (o instanceof Entry) {
/*  77 */         entries.put(key, o); continue;
/*     */       } 
/*  79 */       handleException(""Unknown object : "" + o.getClass() + "" for serialization into Synapse configuration"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  85 */     serializeEntries(definitions, entries);
/*     */ 
/*     */     
/*  88 */     serializeEndpoints(definitions, endpoints);
/*     */ 
/*     */     
/*  91 */     serializeSequences(definitions, sequences);
/*     */ 
/*     */     
/*  94 */     serializeStartups(definitions, synCfg.getStartups());
/*     */     
/*  96 */     return definitions;
/*     */   }
/*     */   
/*     */   private static void serializeEntries(OMElement definitions, Map entries) {
/* 100 */     Iterator<String> iter = entries.keySet().iterator();
/* 101 */     while (iter.hasNext()) {
/* 102 */       String key = iter.next();
/* 103 */       EntrySerializer.serializeEntry((Entry)entries.get(key), definitions);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void serializeStartups(OMElement definitions, Collection startups) {
/* 109 */     Iterator<Startup> it = startups.iterator();
/* 110 */     while (it.hasNext()) {
/* 111 */       Startup s = it.next();
/* 112 */       StartupFinder.getInstance().serializeStartup(definitions, s);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void serializeEndpoints(OMElement definitions, Map endpoints) {
/* 117 */     Iterator<String> iter = endpoints.keySet().iterator();
/* 118 */     while (iter.hasNext()) {
/* 119 */       String key = iter.next();
/* 120 */       Object o = endpoints.get(key);
/* 121 */       if (o instanceof Endpoint) {
/* 122 */         Endpoint endpoint = (Endpoint)o;
/* 123 */         OMElement epElement = EndpointAbstractSerializer.getEndpointSerializer(endpoint).serializeEndpoint(endpoint);
/*     */ 
/*     */         
/* 126 */         definitions.addChild((OMNode)epElement);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void serializeSequences(OMElement definitions, Map sequences) {
/* 133 */     Iterator<String> iter = sequences.keySet().iterator();
/* 134 */     while (iter.hasNext()) {
/* 135 */       String key = iter.next();
/* 136 */       Mediator mediator = (Mediator)sequences.get(key);
/* 137 */       MediatorSerializerFinder.getInstance().getSerializer(mediator).serializeMediator(definitions, mediator);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static void handleException(String msg) {
/* 143 */     log.error(msg);
/* 144 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */   
/* 148 */   public QName getTagQName() { return XMLConfigConstants.DEFINITIONS_ELT; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\SynapseXMLConfigurationSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.TargetFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory;
/*     */ import org.apache.synapse.mediators.eip.Target;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TargetFactory
/*     */ {
/*  45 */   private static final Log log = LogFactory.getLog(TargetFactory.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   private static final QName TARGET_Q = new QName(""http://ws.apache.org/ns/synapse"", ""target"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Target createTarget(OMElement elem) {
/*  60 */     if (!TARGET_Q.equals(elem.getQName())) {
/*  61 */       handleException(""Element does not match with the target QName"");
/*     */     }
/*     */     
/*  64 */     Target target = new Target();
/*  65 */     OMAttribute toAttr = elem.getAttribute(new QName("""", ""to""));
/*  66 */     if (toAttr != null && toAttr.getAttributeValue() != null) {
/*  67 */       target.setTo(toAttr.getAttributeValue());
/*     */     }
/*     */     
/*  70 */     OMAttribute soapAction = elem.getAttribute(new QName("""", ""soapAction""));
/*     */     
/*  72 */     if (soapAction != null && soapAction.getAttributeValue() != null) {
/*  73 */       target.setSoapAction(soapAction.getAttributeValue());
/*     */     }
/*     */     
/*  76 */     OMAttribute sequenceAttr = elem.getAttribute(new QName("""", ""sequence""));
/*     */     
/*  78 */     if (sequenceAttr != null && sequenceAttr.getAttributeValue() != null) {
/*  79 */       target.setSequenceRef(sequenceAttr.getAttributeValue());
/*     */     }
/*     */     
/*  82 */     OMAttribute endpointAttr = elem.getAttribute(new QName("""", ""endpoint""));
/*     */     
/*  84 */     if (endpointAttr != null && endpointAttr.getAttributeValue() != null) {
/*  85 */       target.setEndpointRef(endpointAttr.getAttributeValue());
/*     */     }
/*     */     
/*  88 */     OMElement sequence = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""sequence""));
/*     */     
/*  90 */     if (sequence != null) {
/*  91 */       SequenceMediatorFactory fac = new SequenceMediatorFactory();
/*  92 */       target.setSequence(fac.createAnonymousSequence(sequence));
/*     */     } 
/*     */     
/*  95 */     OMElement endpoint = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""endpoint""));
/*     */     
/*  97 */     if (endpoint != null) {
/*  98 */       target.setEndpoint(EndpointAbstractFactory.getEndpointFactroy(endpoint).createEndpoint(endpoint, true));
/*     */     }
/*     */ 
/*     */     
/* 102 */     return target;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void handleException(String message) {
/* 111 */     if (log.isDebugEnabled()) {
/* 112 */       log.debug(message);
/*     */     }
/* 114 */     throw new SynapseException(message);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\TargetFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.TargetSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer;
/*    */ import org.apache.synapse.mediators.eip.Target;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class TargetSerializer
/*    */ {
/* 42 */   private static final OMFactory fac = OMAbstractFactory.getOMFactory();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 47 */   private static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 53 */   private static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static OMElement serializeTarget(Target target) {
/* 63 */     OMElement targetElem = fac.createOMElement(""target"", synNS);
/* 64 */     if (target.getTo() != null) {
/* 65 */       targetElem.addAttribute(""to"", target.getTo(), nullNS);
/*    */     }
/*    */     
/* 68 */     if (target.getSoapAction() != null) {
/* 69 */       targetElem.addAttribute(""soapAction"", target.getSoapAction(), nullNS);
/*    */     }
/*    */     
/* 72 */     if (target.getSequenceRef() != null) {
/* 73 */       targetElem.addAttribute(""sequence"", target.getSequenceRef(), nullNS);
/*    */     }
/*    */     
/* 76 */     if (target.getEndpointRef() != null) {
/* 77 */       targetElem.addAttribute(""endpoint"", target.getEndpointRef(), nullNS);
/*    */     }
/*    */     
/* 80 */     if (target.getSequence() != null) {
/* 81 */       SequenceMediatorSerializer serializer = new SequenceMediatorSerializer();
/* 82 */       serializer.serializeAnonymousSequence(targetElem, target.getSequence());
/*    */     } 
/*    */     
/* 85 */     if (target.getEndpoint() != null) {
/* 86 */       targetElem.addChild((OMNode)EndpointAbstractSerializer.getEndpointSerializer(target.getEndpoint()).serializeEndpoint(target.getEndpoint()));
/*    */     }
/*    */ 
/*    */     
/* 90 */     return targetElem;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\TargetSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ValidateMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.ListMediator;
/*     */ import org.apache.synapse.mediators.builtin.ValidateMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ValidateMediatorFactory
/*     */   extends AbstractListMediatorFactory
/*     */ {
/*  48 */   private static final QName VALIDATE_Q = new QName(""http://ws.apache.org/ns/synapse"", ""validate"");
/*  49 */   private static final QName ON_FAIL_Q = new QName(""http://ws.apache.org/ns/synapse"", ""on-fail"");
/*  50 */   private static final QName SCHEMA_Q = new QName(""http://ws.apache.org/ns/synapse"", ""schema"");
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  54 */     ValidateMediator validateMediator = new ValidateMediator();
/*     */ 
/*     */     
/*  57 */     List<String> schemaKeys = new ArrayList();
/*  58 */     Iterator schemas = elem.getChildrenWithName(SCHEMA_Q);
/*     */     
/*  60 */     while (schemas.hasNext()) {
/*  61 */       Object o = schemas.next();
/*  62 */       if (o instanceof OMElement) {
/*  63 */         OMElement omElem = (OMElement)o;
/*  64 */         OMAttribute keyAtt = omElem.getAttribute(ATT_KEY);
/*  65 */         if (keyAtt != null) {
/*  66 */           schemaKeys.add(keyAtt.getAttributeValue()); continue;
/*     */         } 
/*  68 */         handleException(""A 'schema' definition must contain a local property 'key'"");
/*     */         continue;
/*     */       } 
/*  71 */       handleException(""Invalid 'schema' declaration for validate mediator"");
/*     */     } 
/*     */ 
/*     */     
/*  75 */     if (schemaKeys.size() == 0) {
/*  76 */       handleException(""No schemas specified for the validate mediator"");
/*     */     } else {
/*  78 */       validateMediator.setSchemaKeys(schemaKeys);
/*     */     } 
/*     */ 
/*     */     
/*  82 */     OMAttribute attSource = elem.getAttribute(ATT_SOURCE);
/*     */     
/*  84 */     if (attSource != null) {
/*     */       try {
/*  86 */         AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
/*  87 */         validateMediator.setSource(xp);
/*  88 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  89 */       } catch (JaxenException e) {
/*  90 */         handleException(""Invalid XPath expression specified for attribute 'source'"", (Exception)e);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*  95 */     OMElement onFail = null;
/*  96 */     Iterator<OMElement> iterator = elem.getChildrenWithName(ON_FAIL_Q);
/*  97 */     if (iterator.hasNext()) {
/*  98 */       onFail = iterator.next();
/*     */     }
/*     */     
/* 101 */     if (onFail != null && onFail.getChildElements().hasNext()) {
/* 102 */       addChildren(onFail, (ListMediator)validateMediator);
/*     */     } else {
/* 104 */       handleException(""A non-empty <on-fail> child element is required for the <validate> mediator"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 110 */     processTraceState((Mediator)validateMediator, elem);
/*     */     
/* 112 */     Iterator<OMElement> iter = elem.getChildrenWithName(FEATURE_Q);
/* 113 */     while (iter.hasNext()) {
/* 114 */       OMElement featureElem = iter.next();
/* 115 */       OMAttribute attName = featureElem.getAttribute(ATT_NAME);
/* 116 */       OMAttribute attValue = featureElem.getAttribute(ATT_VALUE);
/* 117 */       if (attName != null && attValue != null) {
/* 118 */         String name = attName.getAttributeValue();
/* 119 */         String value = attValue.getAttributeValue();
/* 120 */         if (name != null && value != null)
/*     */           try {
/* 122 */             if (""true"".equals(value.trim())) {
/* 123 */               validateMediator.addFeature(name.trim(), true); continue;
/* 124 */             }  if (""false"".equals(value.trim())) {
/* 125 */               validateMediator.addFeature(name.trim(), false); continue;
/*     */             } 
/* 127 */             handleException(""The feature must have value true or false"");
/*     */             continue;
/* 129 */           } catch (SAXException e) {
/* 130 */             handleException(""Error setting validation feature : "" + name + "" to : "" + value, e);
/*     */             continue;
/*     */           }  
/* 133 */         handleException(""The valid values for both of the name and value are need"");
/*     */         continue;
/*     */       } 
/* 136 */       handleException(""Both of the name and value attribute are required for a feature"");
/*     */     } 
/*     */     
/* 139 */     return (Mediator)validateMediator;
/*     */   }
/*     */ 
/*     */   
/* 143 */   public QName getTagQName() { return VALIDATE_Q; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ValidateMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.ValidateMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMContainer;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.MediatorProperty;
/*    */ import org.apache.synapse.mediators.builtin.ValidateMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ValidateMediatorSerializer
/*    */   extends AbstractListMediatorSerializer
/*    */   implements MediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 44 */     if (!(m instanceof ValidateMediator)) {
/* 45 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 48 */     ValidateMediator mediator = (ValidateMediator)m;
/* 49 */     OMElement validate = fac.createOMElement(""validate"", synNS);
/* 50 */     saveTracingState(validate, (Mediator)mediator);
/*    */     
/* 52 */     if (mediator.getSource() != null) {
/* 53 */       validate.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 55 */       serializeNamespaces(validate, mediator.getSource());
/*    */     } 
/*    */     
/* 58 */     Iterator<String> iterator = mediator.getSchemaKeys().iterator();
/* 59 */     while (iterator.hasNext()) {
/* 60 */       String key = iterator.next();
/* 61 */       OMElement schema = fac.createOMElement(""schema"", synNS, (OMContainer)validate);
/* 62 */       schema.addAttribute(fac.createOMAttribute(""key"", nullNS, key));
/*    */     } 
/*    */     
/* 65 */     List features = mediator.getFeatures();
/* 66 */     if (!features.isEmpty()) {
/* 67 */       for (Iterator<MediatorProperty> iter = features.iterator(); iter.hasNext(); ) {
/* 68 */         MediatorProperty mp = iter.next();
/* 69 */         OMElement feature = fac.createOMElement(""feature"", synNS, (OMContainer)validate);
/* 70 */         if (mp.getName() != null) {
/* 71 */           feature.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
/*    */         } else {
/* 73 */           handleException(""The Feature name is missing"");
/*    */         } 
/* 75 */         if (mp.getValue() != null) {
/* 76 */           feature.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue())); continue;
/*    */         } 
/* 78 */         handleException(""The Feature value is missing"");
/*    */       } 
/*    */     }
/*    */     
/* 82 */     OMElement onFail = fac.createOMElement(""on-fail"", synNS, (OMContainer)validate);
/* 83 */     serializeChildren(onFail, mediator.getList());
/*    */     
/* 85 */     if (parent != null) {
/* 86 */       parent.addChild((OMNode)validate);
/*    */     }
/* 88 */     return validate;
/*    */   }
/*    */ 
/*    */   
/* 92 */   public String getMediatorClassName() { return ValidateMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\ValidateMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XMLConfigConstants,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XMLConfigConstants
/*    */ {
/*    */   public static final String SYNAPSE_NAMESPACE = ""http://ws.apache.org/ns/synapse"";
/*    */   public static final String SCOPE_DEFAULT = ""default"";
/*    */   public static final String SCOPE_AXIS2 = ""axis2"";
/*    */   public static final String SCOPE_CLIENT = ""axis2-client"";
/*    */   public static final String SCOPE_TRANSPORT = ""transport"";
/*    */   public static final String SEQUENCE_VERSION_1_0 = ""1.0"";
/*    */   public static final String SEQUENCE_VERSION_1_1 = ""1.1"";
/* 51 */   public static final QName DEFINITIONS_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""definitions"");
/* 52 */   public static final QName SEQUENCE_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""sequence"");
/* 53 */   public static final QName ENDPOINT_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""endpoint"");
/* 54 */   public static final QName ENTRY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""localEntry"");
/* 55 */   public static final QName REGISTRY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""registry"");
/* 56 */   public static final QName TASK_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""task"");
/* 57 */   public static final QName PROXY_ELT = new QName(""http://ws.apache.org/ns/synapse"", ""proxy"");
/*    */   public static final String NULL_NAMESPACE = """";
/* 59 */   public static final Object QUARTZ_QNAME = new QName(""http://www.opensymphony.com/quartz/JobSchedulingData"", ""quartz"");
/*    */   public static final String TRACE_ATTRIB_NAME = ""trace"";
/*    */   public static final String TRACE_ENABLE = ""enable"";
/*    */   public static final String TRACE_DISABLE = ""disable"";
/*    */   public static final String STATISTICS_ATTRIB_NAME = ""statistics"";
/*    */   public static final String STATISTICS_ENABLE = ""enable"";
/*    */   public static final String STATISTICS_DISABLE = ""disable"";
/*    */   public static final String SUSPEND_DURATION_ON_FAILURE = ""suspendDurationOnFailure"";
/*    */   public static final String ALGORITHM_NAME = ""policy"";
/*    */   public static final String ONREJECT = ""onReject"";
/*    */   public static final String ONACCEPT = ""onAccept"";
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\XMLConfigConstants.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XMLConfigurationBuilder,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.io.InputStream;
/*    */ import javax.xml.stream.XMLStreamException;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.config.SynapseConfiguration;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XMLConfigurationBuilder
/*    */ {
/* 37 */   private static Log log = LogFactory.getLog(XMLConfigurationBuilder.class);
/*    */ 
/*    */   
/*    */   public static SynapseConfiguration getConfiguration(InputStream is) throws XMLStreamException {
/* 41 */     log.info(""Generating the Synapse configuration model by parsing the XML configuration"");
/*    */     
/* 43 */     OMElement definitions = (new StAXOMBuilder(is)).getDocumentElement();
/* 44 */     definitions.build();
/*    */     
/* 46 */     return ConfigurationFactoryAndSerializerFinder.getInstance().getConfiguration(definitions);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\XMLConfigurationBuilder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XMLConfigurationSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.io.OutputStream;
/*    */ import javax.xml.stream.XMLStreamException;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.config.SynapseConfiguration;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XMLConfigurationSerializer
/*    */ {
/* 47 */   private static final Log log = LogFactory.getLog(XMLConfigurationSerializer.class);
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public static void serializeConfiguration(SynapseConfiguration synCfg, OutputStream outputStream) throws XMLStreamException {
/* 58 */     log.info(""Serializing the XML Configuration to the output stream"");
/*    */     
/* 60 */     OMElement definitions = ConfigurationFactoryAndSerializerFinder.serializeConfiguration(synCfg);
/*    */     
/* 62 */     definitions.serialize(outputStream);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\XMLConfigurationSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XSLTMediatorFactory,"/*     */ package org.apache.synapse.config.xml;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.mediators.transform.XSLTMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTMediatorFactory
/*     */   extends AbstractMediatorFactory
/*     */ {
/*  47 */   private static final QName TAG_NAME = new QName(""http://ws.apache.org/ns/synapse"", ""xslt"");
/*     */ 
/*     */   
/*  50 */   public QName getTagQName() { return TAG_NAME; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Mediator createMediator(OMElement elem) {
/*  55 */     XSLTMediator transformMediator = new XSLTMediator();
/*     */     
/*  57 */     OMAttribute attXslt = elem.getAttribute(ATT_KEY);
/*  58 */     OMAttribute attSource = elem.getAttribute(ATT_SOURCE);
/*     */     
/*  60 */     if (attXslt != null) {
/*  61 */       transformMediator.setXsltKey(attXslt.getAttributeValue());
/*     */     } else {
/*  63 */       handleException(""The 'key' attribute is required for the XSLT mediator"");
/*     */     } 
/*     */     
/*  66 */     if (attSource != null) {
/*     */       try {
/*  68 */         transformMediator.setSourceXPathString(attSource.getAttributeValue());
/*  69 */         AXIOMXPath xp = new AXIOMXPath(attSource.getAttributeValue());
/*  70 */         OMElementUtils.addNameSpaces(xp, elem, log);
/*  71 */         transformMediator.setSource(xp);
/*     */       }
/*  73 */       catch (JaxenException e) {
/*  74 */         handleException(""Invalid XPath specified for the source attribute : "" + attSource.getAttributeValue());
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  80 */     processTraceState((Mediator)transformMediator, elem);
/*     */     
/*  82 */     Iterator<OMElement> iter = elem.getChildrenWithName(FEATURE_Q);
/*  83 */     while (iter.hasNext()) {
/*  84 */       OMElement featureElem = iter.next();
/*  85 */       OMAttribute attName = featureElem.getAttribute(ATT_NAME);
/*  86 */       OMAttribute attValue = featureElem.getAttribute(ATT_VALUE);
/*  87 */       if (attName != null && attValue != null) {
/*  88 */         String name = attName.getAttributeValue();
/*  89 */         String value = attValue.getAttributeValue();
/*  90 */         if (name != null && value != null) {
/*  91 */           if (""true"".equals(value.trim())) {
/*  92 */             transformMediator.addFeature(name.trim(), true); continue;
/*     */           } 
/*  94 */           if (""false"".equals(value.trim())) {
/*  95 */             transformMediator.addFeature(name.trim(), false);
/*     */             continue;
/*     */           } 
/*  98 */           handleException(""The feature must have value true or false"");
/*     */           continue;
/*     */         } 
/* 101 */         handleException(""The valid values for both of the name and value are need"");
/*     */         continue;
/*     */       } 
/* 104 */       handleException(""Both of the name and value attribute are required for a feature"");
/*     */     } 
/*     */     
/* 107 */     transformMediator.addAllProperties(MediatorPropertyFactory.getMediatorProperties(elem));
/*     */ 
/*     */     
/* 110 */     return (Mediator)transformMediator;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\XSLTMediatorFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.XSLTMediatorSerializer,"/*    */ package org.apache.synapse.config.xml;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMContainer;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Mediator;
/*    */ import org.apache.synapse.mediators.MediatorProperty;
/*    */ import org.apache.synapse.mediators.transform.XSLTMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XSLTMediatorSerializer
/*    */   extends AbstractMediatorSerializer
/*    */ {
/*    */   public OMElement serializeMediator(OMElement parent, Mediator m) {
/* 44 */     if (!(m instanceof XSLTMediator)) {
/* 45 */       handleException(""Unsupported mediator passed in for serialization : "" + m.getType());
/*    */     }
/*    */     
/* 48 */     XSLTMediator mediator = (XSLTMediator)m;
/* 49 */     OMElement xslt = fac.createOMElement(""xslt"", synNS);
/*    */     
/* 51 */     if (mediator.getXsltKey() != null) {
/* 52 */       xslt.addAttribute(fac.createOMAttribute(""key"", nullNS, mediator.getXsltKey()));
/*    */     } else {
/*    */       
/* 55 */       handleException(""Invalid XSLT mediator. XSLT registry key is required"");
/*    */     } 
/* 57 */     saveTracingState(xslt, (Mediator)mediator);
/*    */     
/* 59 */     if (mediator.getSource() != null && !""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"".toString().equals(mediator.getSource().toString())) {
/*    */       
/* 61 */       xslt.addAttribute(fac.createOMAttribute(""source"", nullNS, mediator.getSource().toString()));
/*    */       
/* 63 */       serializeNamespaces(xslt, mediator.getSource());
/*    */     } 
/* 65 */     serializeProperties(xslt, mediator.getProperties());
/* 66 */     List features = mediator.getFeatures();
/* 67 */     if (!features.isEmpty()) {
/* 68 */       for (Iterator<MediatorProperty> iter = features.iterator(); iter.hasNext(); ) {
/* 69 */         MediatorProperty mp = iter.next();
/* 70 */         OMElement prop = fac.createOMElement(""feature"", synNS, (OMContainer)xslt);
/* 71 */         if (mp.getName() != null) {
/* 72 */           prop.addAttribute(fac.createOMAttribute(""name"", nullNS, mp.getName()));
/*    */         } else {
/* 74 */           handleException(""The Feature name is missing"");
/*    */         } 
/* 76 */         if (mp.getValue() != null) {
/* 77 */           prop.addAttribute(fac.createOMAttribute(""value"", nullNS, mp.getValue())); continue;
/*    */         } 
/* 79 */         handleException(""The Feature value is missing"");
/*    */       } 
/*    */     }
/*    */     
/* 83 */     if (parent != null) {
/* 84 */       parent.addChild((OMNode)xslt);
/*    */     }
/* 86 */     return xslt;
/*    */   }
/*    */ 
/*    */   
/* 90 */   public String getMediatorClassName() { return XSLTMediator.class.getName(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\XSLTMediatorSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.AddressEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.AddressEndpoint;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  57 */   private static Log log = LogFactory.getLog(AddressEndpointFactory.class);
/*     */   
/*  59 */   private static AddressEndpointFactory instance = new AddressEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   private int statisticsState = 2;
/*     */ 
/*     */ 
/*     */   
/*  68 */   protected int traceState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   public static AddressEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  78 */     AddressEndpoint addressEndpoint = new AddressEndpoint();
/*     */     
/*  80 */     if (!anonymousEndpoint) {
/*  81 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  84 */       if (name != null) {
/*  85 */         addressEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/*  89 */     OMElement addressElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""address""));
/*     */ 
/*     */     
/*  92 */     if (addressElement != null) {
/*  93 */       EndpointDefinition endpoint = createEndpointDefinition(addressElement);
/*  94 */       addressEndpoint.setEndpoint(endpoint);
/*     */ 
/*     */       
/*  97 */       OMElement suspendElement = addressElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""suspendDurationOnFailure""));
/*     */ 
/*     */ 
/*     */       
/* 101 */       if (suspendElement != null) {
/* 102 */         String suspend = suspendElement.getText();
/*     */         
/*     */         try {
/* 105 */           if (suspend != null) {
/* 106 */             long suspendDuration = Long.parseLong(suspend.trim());
/* 107 */             addressEndpoint.setSuspendOnFailDuration(suspendDuration * 1000L);
/*     */           }
/*     */         
/* 110 */         } catch (NumberFormatException e) {
/* 111 */           handleException(""The suspend duration should be specified as a valid number :: "" + e.getMessage(), e);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 117 */     return (Endpoint)addressEndpoint;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 121 */     if (om instanceof OMElement) {
/* 122 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 124 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 126 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinition(OMElement elem) {
/* 139 */     OMAttribute address = elem.getAttribute(new QName("""", ""uri""));
/*     */     
/* 141 */     OMAttribute format = elem.getAttribute(new QName("""", ""format""));
/*     */     
/* 143 */     OMAttribute optimize = elem.getAttribute(new QName("""", ""optimize""));
/*     */ 
/*     */     
/* 146 */     EndpointDefinition endpoint = new EndpointDefinition();
/* 147 */     OMAttribute statistics = elem.getAttribute(new QName("""", ""statistics""));
/*     */ 
/*     */     
/* 150 */     if (statistics != null) {
/* 151 */       String statisticsValue = statistics.getAttributeValue();
/* 152 */       if (statisticsValue != null) {
/* 153 */         if (""enable"".equals(statisticsValue)) {
/*     */           
/* 155 */           endpoint.setStatisticsState(1);
/* 156 */         } else if (""disable"".equals(statisticsValue)) {
/*     */           
/* 158 */           endpoint.setStatisticsState(0);
/*     */         } 
/*     */       }
/*     */     } 
/* 162 */     if (address != null) {
/* 163 */       endpoint.setAddress(address.getAttributeValue());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 168 */     if (format != null) {
/*     */       
/* 170 */       String forceValue = format.getAttributeValue().trim().toLowerCase();
/* 171 */       if (forceValue.equals(""pox"")) {
/* 172 */         endpoint.setForcePOX(true);
/* 173 */         endpoint.setFormat(""pox"");
/*     */       }
/* 175 */       else if (forceValue.equals(""soap11"")) {
/* 176 */         endpoint.setForceSOAP11(true);
/* 177 */         endpoint.setFormat(""soap11"");
/*     */       }
/* 179 */       else if (forceValue.equals(""soap12"")) {
/* 180 */         endpoint.setForceSOAP12(true);
/* 181 */         endpoint.setFormat(""soap12"");
/*     */       } else {
/*     */         
/* 184 */         handleException(""unknown value -\"""" + forceValue + ""\"". Attribute 'format' accepts only 'pox','soap11','soap12'"");
/*     */       } 
/*     */     } 
/*     */     
/* 188 */     if (optimize != null && optimize.getAttributeValue().length() > 0) {
/* 189 */       String method = optimize.getAttributeValue().trim();
/* 190 */       if (""mtom"".equalsIgnoreCase(method)) {
/* 191 */         endpoint.setUseMTOM(true);
/* 192 */       } else if (""swa"".equalsIgnoreCase(method)) {
/* 193 */         endpoint.setUseSwa(true);
/*     */       } 
/*     */     } 
/*     */     
/* 197 */     OMElement wsAddr = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableAddressing""));
/*     */     
/* 199 */     if (wsAddr != null) {
/* 200 */       endpoint.setAddressingOn(true);
/* 201 */       String useSepList = wsAddr.getAttributeValue(new QName(""separateListener""));
/*     */       
/* 203 */       if (useSepList != null && (
/* 204 */         useSepList.trim().toLowerCase().startsWith(""tr"") || useSepList.trim().startsWith(""1"")))
/*     */       {
/* 206 */         endpoint.setUseSeparateListener(true);
/*     */       }
/*     */     } 
/*     */     
/* 210 */     OMElement wsSec = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec""));
/*     */     
/* 212 */     if (wsSec != null) {
/* 213 */       endpoint.setSecurityOn(true);
/* 214 */       OMAttribute policy = wsSec.getAttribute(new QName("""", ""policy""));
/*     */       
/* 216 */       if (policy != null) {
/* 217 */         endpoint.setWsSecPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/* 220 */     OMElement wsRm = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM""));
/*     */     
/* 222 */     if (wsRm != null) {
/* 223 */       endpoint.setReliableMessagingOn(true);
/* 224 */       OMAttribute policy = wsRm.getAttribute(new QName("""", ""policy""));
/*     */       
/* 226 */       if (policy != null) {
/* 227 */         endpoint.setWsRMPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/* 231 */     OMElement timeout = elem.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""timeout""));
/*     */     
/* 233 */     if (timeout != null) {
/* 234 */       OMElement duration = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""duration""));
/*     */       
/* 236 */       if (duration != null) {
/* 237 */         String d = duration.getText();
/* 238 */         if (d != null) {
/*     */           try {
/* 240 */             long timeoutSeconds = (new Long(d.trim())).longValue();
/* 241 */             endpoint.setTimeoutDuration(timeoutSeconds * 1000L);
/*     */           }
/* 243 */           catch (NumberFormatException e) {
/* 244 */             handleException(""The timeout seconds should be specified as a valid number :: "" + e.getMessage(), e);
/*     */           } 
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 251 */       OMElement action = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""action""));
/*     */       
/* 253 */       if (action != null) {
/* 254 */         String a = action.getText();
/* 255 */         if (a != null) {
/* 256 */           if (a.trim().equalsIgnoreCase(""discard"")) {
/* 257 */             endpoint.setTimeoutAction(101);
/*     */ 
/*     */             
/* 260 */             if (endpoint.getTimeoutDuration() == 0L) {
/* 261 */               endpoint.setTimeoutDuration(30000L);
/*     */             }
/* 263 */           } else if (a.trim().equalsIgnoreCase(""fault"")) {
/* 264 */             endpoint.setTimeoutAction(102);
/*     */ 
/*     */             
/* 267 */             if (endpoint.getTimeoutDuration() == 0L) {
/* 268 */               endpoint.setTimeoutDuration(30000L);
/*     */             }
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 275 */     return endpoint;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 279 */     log.error(msg);
/* 280 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 284 */     log.error(msg, e);
/* 285 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\AddressEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.AddressEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseConstants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.AddressEndpoint;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  67 */   private static Log log = LogFactory.getLog(AddressEndpointSerializer.class);
/*     */   
/*  69 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  73 */     if (!(endpoint instanceof AddressEndpoint)) {
/*  74 */       throw new SynapseException(""Invalid endpoint type."");
/*     */     }
/*     */     
/*  77 */     this.fac = OMAbstractFactory.getOMFactory();
/*  78 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  80 */     AddressEndpoint addressEndpoint = (AddressEndpoint)endpoint;
/*  81 */     String name = addressEndpoint.getName();
/*  82 */     if (name != null) {
/*  83 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  86 */     EndpointDefinition epAddress = addressEndpoint.getEndpoint();
/*  87 */     OMElement addressElement = serializeEndpointDefinition(epAddress);
/*  88 */     endpointElement.addChild((OMNode)addressElement);
/*     */     
/*  90 */     long suspendDuration = addressEndpoint.getSuspendOnFailDuration();
/*  91 */     if (suspendDuration != -1L) {
/*     */ 
/*     */       
/*  94 */       OMElement suspendElement = this.fac.createOMElement(""suspendDurationOnFailure"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */ 
/*     */ 
/*     */       
/*  98 */       suspendElement.setText(Long.toString(suspendDuration / 1000L));
/*  99 */       addressElement.addChild((OMNode)suspendElement);
/*     */     } 
/*     */     
/* 102 */     return endpointElement;
/*     */   }
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpointDefinition(EndpointDefinition endpt) {
/* 107 */     OMElement address = this.fac.createOMElement(""address"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */     
/* 109 */     if (""pox"".equals(endpt.getFormat())) {
/* 110 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/*     */     }
/* 112 */     else if (""soap11"".equals(endpt.getFormat())) {
/* 113 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap11""));
/*     */     }
/* 115 */     else if (""soap12"".equals(endpt.getFormat())) {
/* 116 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap12""));
/*     */     
/*     */     }
/* 119 */     else if (endpt.isForcePOX()) {
/* 120 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/*     */     }
/* 122 */     else if (endpt.isForceSOAP11()) {
/* 123 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap11""));
/* 124 */     } else if (endpt.isForceSOAP12()) {
/* 125 */       address.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap12""));
/*     */     } 
/*     */     
/* 128 */     if (endpt.isUseSwa()) {
/* 129 */       address.addAttribute(this.fac.createOMAttribute(""optimize"", null, ""swa""));
/* 130 */     } else if (endpt.isUseMTOM()) {
/* 131 */       address.addAttribute(this.fac.createOMAttribute(""optimize"", null, ""mtom""));
/*     */     } 
/* 133 */     if (endpt.getAddress() != null) {
/* 134 */       address.addAttribute(this.fac.createOMAttribute(""uri"", null, endpt.getAddress()));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 140 */     int isEnableStatistics = endpt.getStatisticsState();
/* 141 */     String statisticsValue = null;
/* 142 */     if (isEnableStatistics == 1) {
/* 143 */       statisticsValue = ""enable"";
/* 144 */     } else if (isEnableStatistics == 0) {
/* 145 */       statisticsValue = ""disable"";
/*     */     } 
/* 147 */     if (statisticsValue != null) {
/* 148 */       address.addAttribute(this.fac.createOMAttribute(""statistics"", null, statisticsValue));
/*     */     }
/*     */     
/* 151 */     if (endpt.isAddressingOn()) {
/* 152 */       OMElement addressing = this.fac.createOMElement(""enableAddressing"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 153 */       if (endpt.isUseSeparateListener()) {
/* 154 */         addressing.addAttribute(this.fac.createOMAttribute(""separateListener"", null, ""true""));
/*     */       }
/*     */       
/* 157 */       address.addChild((OMNode)addressing);
/*     */     } 
/*     */     
/* 160 */     if (endpt.isReliableMessagingOn()) {
/* 161 */       OMElement rm = this.fac.createOMElement(""enableRM"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 162 */       if (endpt.getWsRMPolicyKey() != null) {
/* 163 */         rm.addAttribute(this.fac.createOMAttribute(""policy"", null, endpt.getWsRMPolicyKey()));
/*     */       }
/*     */       
/* 166 */       address.addChild((OMNode)rm);
/*     */     } 
/*     */     
/* 169 */     if (endpt.isSecurityOn()) {
/* 170 */       OMElement sec = this.fac.createOMElement(""enableSec"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 171 */       if (endpt.getWsSecPolicyKey() != null) {
/* 172 */         sec.addAttribute(this.fac.createOMAttribute(""policy"", null, endpt.getWsSecPolicyKey()));
/*     */       }
/*     */       
/* 175 */       address.addChild((OMNode)sec);
/*     */     } 
/*     */     
/* 178 */     if (endpt.getTimeoutAction() != 100) {
/* 179 */       OMElement timeout = this.fac.createOMElement(""timeout"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 180 */       address.addChild((OMNode)timeout);
/*     */       
/* 182 */       OMElement duration = this.fac.createOMElement(""duration"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 183 */       duration.setText(Long.toString(endpt.getTimeoutDuration() / 1000L));
/* 184 */       timeout.addChild((OMNode)duration);
/*     */       
/* 186 */       OMElement action = this.fac.createOMElement(""action"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 187 */       if (endpt.getTimeoutAction() == 101) {
/* 188 */         action.setText(""discard"");
/* 189 */       } else if (endpt.getTimeoutAction() == 102) {
/* 190 */         action.setText(""fault"");
/*     */       } 
/* 192 */       timeout.addChild((OMNode)action);
/*     */     } 
/*     */     
/* 195 */     return address;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 199 */     log.error(msg);
/* 200 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\AddressEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointAbstractFactory,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndpointAbstractFactory
/*    */ {
/*    */   public static EndpointFactory getEndpointFactroy(OMElement configElement) {
/* 43 */     if (configElement.getAttribute(new QName(""key"")) != null) {
/* 44 */       IndirectEndpointFactory endpointFactory = IndirectEndpointFactory.getInstance();
/* 45 */       return endpointFactory;
/*    */     } 
/*    */     
/* 48 */     OMElement addressElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""address""));
/*    */     
/* 50 */     if (addressElement != null) {
/* 51 */       EndpointFactory endpointFactory = AddressEndpointFactory.getInstance();
/* 52 */       return endpointFactory;
/*    */     } 
/*    */     
/* 55 */     OMElement wsdlElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""wsdl""));
/*    */     
/* 57 */     if (wsdlElement != null) {
/* 58 */       EndpointFactory endpointFactory = WSDLEndpointFactory.getInstance();
/* 59 */       return endpointFactory;
/*    */     } 
/*    */     
/* 62 */     OMElement lbElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*    */     
/* 64 */     if (lbElement != null) {
/* 65 */       OMElement sessionElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""session""));
/*    */       
/* 67 */       if (sessionElement != null) {
/* 68 */         EndpointFactory endpointFactory = SALoadbalanceEndpointFactory.getInstance();
/* 69 */         return endpointFactory;
/*    */       } 
/* 71 */       EndpointFactory endpointFactory = LoadbalanceEndpointFactory.getInstance();
/* 72 */       return endpointFactory;
/*    */     } 
/*    */ 
/*    */     
/* 76 */     OMElement foElement = configElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""failover""));
/*    */     
/* 78 */     if (foElement != null) {
/* 79 */       EndpointFactory endpointFactory = FailoverEndpointFactory.getInstance();
/* 80 */       return endpointFactory;
/*    */     } 
/*    */     
/* 83 */     throw new SynapseException(""Invalid endpoint configuration."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\EndpointAbstractFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointAbstractSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EndpointAbstractSerializer
/*    */ {
/*    */   public static EndpointSerializer getEndpointSerializer(Endpoint endpoint) {
/* 40 */     if (endpoint instanceof org.apache.synapse.endpoints.AddressEndpoint)
/* 41 */       return new AddressEndpointSerializer(); 
/* 42 */     if (endpoint instanceof org.apache.synapse.endpoints.WSDLEndpoint)
/* 43 */       return new WSDLEndpointSerializer(); 
/* 44 */     if (endpoint instanceof org.apache.synapse.endpoints.IndirectEndpoint)
/* 45 */       return new IndirectEndpointSerializer(); 
/* 46 */     if (endpoint instanceof org.apache.synapse.endpoints.LoadbalanceEndpoint)
/* 47 */       return new LoadbalanceEndpointSerializer(); 
/* 48 */     if (endpoint instanceof org.apache.synapse.endpoints.SALoadbalanceEndpoint)
/* 49 */       return new SALoadbalanceEndpointSerializer(); 
/* 50 */     if (endpoint instanceof org.apache.synapse.endpoints.FailoverEndpoint) {
/* 51 */       return new FailoverEndpointSerializer();
/*    */     }
/*    */     
/* 54 */     throw new SynapseException(""Serializer for endpoint "" + endpoint.getClass().toString() + "" is not defined."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\EndpointAbstractSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointFactory,"package org.apache.synapse.config.xml.endpoints;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.config.XMLToObjectMapper;
import org.apache.synapse.endpoints.Endpoint;
public interface EndpointFactory extends XMLToObjectMapper {
  Endpoint createEndpoint(OMElement paramOMElement, boolean paramBoolean);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\EndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.EndpointSerializer,"package org.apache.synapse.config.xml.endpoints;
import org.apache.axiom.om.OMElement;
import org.apache.synapse.endpoints.Endpoint;
public interface EndpointSerializer {
  OMElement serializeEndpoint(Endpoint paramEndpoint);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\EndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.FailoverEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.XMLConfigConstants;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.FailoverEndpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FailoverEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  46 */   private static Log log = LogFactory.getLog(FailoverEndpointFactory.class);
/*     */   
/*  48 */   private static FailoverEndpointFactory instance = new FailoverEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   public static FailoverEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  58 */     OMElement failoverElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""failover""));
/*     */     
/*  60 */     if (failoverElement != null) {
/*     */       
/*  62 */       FailoverEndpoint failoverEndpoint = new FailoverEndpoint();
/*     */ 
/*     */       
/*  65 */       String name = epConfig.getAttributeValue(new QName(""name""));
/*  66 */       if (name != null) {
/*  67 */         failoverEndpoint.setName(name);
/*     */       }
/*     */ 
/*     */       
/*  71 */       ArrayList endpoints = getEndpoints(failoverElement, (Endpoint)failoverEndpoint);
/*  72 */       failoverEndpoint.setEndpoints(endpoints);
/*     */       
/*  74 */       return (Endpoint)failoverEndpoint;
/*     */     } 
/*     */     
/*  77 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/*  81 */     if (om instanceof OMElement) {
/*  82 */       return createEndpoint((OMElement)om, false);
/*     */     }
/*  84 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/*  86 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement failoverElement, Endpoint parent) {
/*  91 */     ArrayList<Endpoint> endpoints = new ArrayList();
/*  92 */     Iterator<OMElement> iter = failoverElement.getChildrenWithName(XMLConfigConstants.ENDPOINT_ELT);
/*     */     
/*  94 */     while (iter.hasNext()) {
/*     */       
/*  96 */       OMElement endptElem = iter.next();
/*     */       
/*  98 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/*  99 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 100 */       endpoint.setParentEndpoint(parent);
/* 101 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 104 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 108 */     log.error(msg);
/* 109 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 113 */     log.error(msg, e);
/* 114 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\FailoverEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.FailoverEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.SynapseConstants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.FailoverEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FailoverEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 43 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 47 */     if (!(endpoint instanceof FailoverEndpoint)) {
/* 48 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 51 */     FailoverEndpoint failoverEndpoint = (FailoverEndpoint)endpoint;
/*    */     
/* 53 */     this.fac = OMAbstractFactory.getOMFactory();
/* 54 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 56 */     OMElement failoverElement = this.fac.createOMElement(""failover"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 57 */     endpointElement.addChild((OMNode)failoverElement);
/*    */     
/* 59 */     String name = failoverEndpoint.getName();
/* 60 */     if (name != null) {
/* 61 */       endpointElement.addAttribute(""name"", name, null);
/*    */     }
/*    */     
/* 64 */     List<Endpoint> endpoints = failoverEndpoint.getEndpoints();
/* 65 */     for (int i = 0; i < endpoints.size(); i++) {
/* 66 */       Endpoint childEndpoint = endpoints.get(i);
/* 67 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*    */       
/* 69 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/* 70 */       failoverElement.addChild((OMNode)aeElement);
/*    */     } 
/*    */     
/* 73 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\FailoverEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.IndirectEndpointFactory,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.IndirectEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IndirectEndpointFactory
/*    */   implements EndpointFactory
/*    */ {
/* 41 */   private static Log log = LogFactory.getLog(IndirectEndpointFactory.class);
/*    */   
/* 43 */   private static IndirectEndpointFactory instance = new IndirectEndpointFactory();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 48 */   public static IndirectEndpointFactory getInstance() { return instance; }
/*    */ 
/*    */ 
/*    */   
/*    */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/* 53 */     IndirectEndpoint indirectEndpoint = new IndirectEndpoint();
/* 54 */     String ref = epConfig.getAttributeValue(new QName(""key""));
/* 55 */     indirectEndpoint.setKey(ref);
/* 56 */     return (Endpoint)indirectEndpoint;
/*    */   }
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 60 */     if (om instanceof OMElement) {
/* 61 */       return createEndpoint((OMElement)om, false);
/*    */     }
/* 63 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*    */     
/* 65 */     return null;
/*    */   }
/*    */   
/*    */   private static void handleException(String msg) {
/* 69 */     log.error(msg);
/* 70 */     throw new SynapseException(msg);
/*    */   }
/*    */   
/*    */   private static void handleException(String msg, Exception e) {
/* 74 */     log.error(msg, e);
/* 75 */     throw new SynapseException(msg, e);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\IndirectEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.IndirectEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.synapse.SynapseConstants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.IndirectEndpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IndirectEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 37 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 41 */     if (!(endpoint instanceof IndirectEndpoint)) {
/* 42 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 45 */     this.fac = OMAbstractFactory.getOMFactory();
/* 46 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 48 */     IndirectEndpoint indirectEndpoint = (IndirectEndpoint)endpoint;
/* 49 */     String ref = indirectEndpoint.getKey();
/* 50 */     if (ref != null) {
/* 51 */       endpointElement.addAttribute(""key"", ref, null);
/*    */     }
/*    */     
/* 54 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\IndirectEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.XMLConfigConstants;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.LoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoadbalanceEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  49 */   private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);
/*     */   
/*  51 */   private static LoadbalanceEndpointFactory instance = new LoadbalanceEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   public static LoadbalanceEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  63 */     OMElement loadbalanceElement = null;
/*  64 */     loadbalanceElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*     */ 
/*     */     
/*  67 */     if (loadbalanceElement != null) {
/*     */       
/*  69 */       LoadbalanceEndpoint loadbalanceEndpoint = new LoadbalanceEndpoint();
/*     */ 
/*     */       
/*  72 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  75 */       if (name != null) {
/*  76 */         loadbalanceEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */ 
/*     */       
/*  80 */       ArrayList endpoints = getEndpoints(loadbalanceElement, (Endpoint)loadbalanceEndpoint);
/*  81 */       loadbalanceEndpoint.setEndpoints(endpoints);
/*     */ 
/*     */       
/*  84 */       LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
/*     */       
/*  86 */       loadbalanceEndpoint.setAlgorithm(algorithm);
/*     */ 
/*     */       
/*  89 */       String failover = loadbalanceElement.getAttributeValue(new QName(""failover""));
/*  90 */       if (failover != null && failover.equalsIgnoreCase(""false"")) {
/*  91 */         loadbalanceEndpoint.setFailover(false);
/*     */       }
/*     */       
/*  94 */       return (Endpoint)loadbalanceEndpoint;
/*     */     } 
/*     */     
/*  97 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 101 */     if (om instanceof OMElement) {
/* 102 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 104 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 106 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {
/* 111 */     ArrayList<Endpoint> endpoints = new ArrayList();
/* 112 */     Iterator<OMElement> iter = loadbalanceElement.getChildrenWithName(XMLConfigConstants.ENDPOINT_ELT);
/*     */     
/* 114 */     while (iter.hasNext()) {
/*     */       
/* 116 */       OMElement endptElem = iter.next();
/*     */       
/* 118 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/* 119 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 120 */       endpoint.setParentEndpoint(parent);
/* 121 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 124 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 128 */     log.error(msg);
/* 129 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 133 */     log.error(msg, e);
/* 134 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\LoadbalanceEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.LoadbalanceEndpointSerializer,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import java.util.List;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.SynapseConstants;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ import org.apache.synapse.endpoints.LoadbalanceEndpoint;
/*    */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LoadbalanceEndpointSerializer
/*    */   implements EndpointSerializer
/*    */ {
/* 45 */   private OMFactory fac = null;
/*    */ 
/*    */   
/*    */   public OMElement serializeEndpoint(Endpoint endpoint) {
/* 49 */     if (!(endpoint instanceof LoadbalanceEndpoint)) {
/* 50 */       throw new SynapseException(""Invalid endpoint type."");
/*    */     }
/*    */     
/* 53 */     this.fac = OMAbstractFactory.getOMFactory();
/* 54 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*    */     
/* 56 */     LoadbalanceEndpoint loadbalanceEndpoint = (LoadbalanceEndpoint)endpoint;
/*    */     
/* 58 */     String name = loadbalanceEndpoint.getName();
/* 59 */     if (name != null) {
/* 60 */       endpointElement.addAttribute(""name"", name, null);
/*    */     }
/*    */     
/* 63 */     OMElement loadbalanceElement = this.fac.createOMElement(""loadbalance"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 64 */     endpointElement.addChild((OMNode)loadbalanceElement);
/*    */     
/* 66 */     LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
/* 67 */     String algorithmName = ""roundRobin"";
/* 68 */     if (algorithm instanceof org.apache.synapse.endpoints.algorithms.RoundRobin) {
/* 69 */       algorithmName = ""roundRobin"";
/*    */     }
/* 71 */     loadbalanceElement.addAttribute(""policy"", algorithmName, null);
/*    */ 
/*    */ 
/*    */     
/* 75 */     if (!loadbalanceEndpoint.isFailover()) {
/* 76 */       loadbalanceElement.addAttribute(""failover"", ""false"", null);
/*    */     }
/*    */     
/* 79 */     List<Endpoint> endpoints = loadbalanceEndpoint.getEndpoints();
/* 80 */     for (int i = 0; i < endpoints.size(); i++) {
/* 81 */       Endpoint childEndpoint = endpoints.get(i);
/* 82 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*    */       
/* 84 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/* 85 */       loadbalanceElement.addChild((OMNode)aeElement);
/*    */     } 
/*    */     
/* 88 */     return endpointElement;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\LoadbalanceEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.XMLConfigConstants;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher;
/*     */ import org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  54 */   private static Log log = LogFactory.getLog(LoadbalanceEndpointFactory.class);
/*     */   
/*  56 */   private static SALoadbalanceEndpointFactory instance = new SALoadbalanceEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  61 */   public static SALoadbalanceEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  67 */     SALoadbalanceEndpoint loadbalanceEndpoint = new SALoadbalanceEndpoint();
/*     */ 
/*     */     
/*  70 */     OMElement sessionElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""session""));
/*     */     
/*  72 */     if (sessionElement != null) {
/*     */       
/*  74 */       String type = sessionElement.getAttributeValue(new QName(""type""));
/*     */       
/*  76 */       if (type.equalsIgnoreCase(""soap"")) {
/*  77 */         SoapSessionDispatcher soapSessionDispatcher = new SoapSessionDispatcher();
/*  78 */         loadbalanceEndpoint.setDispatcher((Dispatcher)soapSessionDispatcher);
/*     */       }
/*  80 */       else if (type.equalsIgnoreCase(""http"")) {
/*  81 */         HttpSessionDispatcher httpSessionDispatcher = new HttpSessionDispatcher();
/*  82 */         loadbalanceEndpoint.setDispatcher((Dispatcher)httpSessionDispatcher);
/*     */       }
/*  84 */       else if (type.equalsIgnoreCase(""simpleClientSession"")) {
/*  85 */         SimpleClientSessionDispatcher simpleClientSessionDispatcher = new SimpleClientSessionDispatcher();
/*  86 */         loadbalanceEndpoint.setDispatcher((Dispatcher)simpleClientSessionDispatcher);
/*     */       } 
/*     */     } else {
/*  89 */       handleException(""Session affinity endpoints should have a session element in the configuration."");
/*     */     } 
/*     */ 
/*     */     
/*  93 */     OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */     
/*  96 */     if (name != null) {
/*  97 */       loadbalanceEndpoint.setName(name.getAttributeValue());
/*     */     }
/*     */     
/* 100 */     OMElement loadbalanceElement = null;
/* 101 */     loadbalanceElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""loadbalance""));
/*     */ 
/*     */     
/* 104 */     if (loadbalanceElement != null) {
/*     */ 
/*     */       
/* 107 */       ArrayList endpoints = getEndpoints(loadbalanceElement, (Endpoint)loadbalanceEndpoint);
/* 108 */       loadbalanceEndpoint.setEndpoints(endpoints);
/*     */ 
/*     */       
/* 111 */       LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory.createLoadbalanceAlgorithm(loadbalanceElement, endpoints);
/*     */       
/* 113 */       loadbalanceEndpoint.setAlgorithm(algorithm);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 143 */       return (Endpoint)loadbalanceEndpoint;
/*     */     } 
/*     */     
/* 146 */     return null;
/*     */   }
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/* 150 */     if (om instanceof OMElement) {
/* 151 */       return createEndpoint((OMElement)om, false);
/*     */     }
/* 153 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/* 155 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   private ArrayList getEndpoints(OMElement loadbalanceElement, Endpoint parent) {
/* 160 */     ArrayList<Endpoint> endpoints = new ArrayList();
/* 161 */     Iterator<OMElement> iter = loadbalanceElement.getChildrenWithName(XMLConfigConstants.ENDPOINT_ELT);
/*     */     
/* 163 */     while (iter.hasNext()) {
/*     */       
/* 165 */       OMElement endptElem = iter.next();
/*     */       
/* 167 */       EndpointFactory epFac = EndpointAbstractFactory.getEndpointFactroy(endptElem);
/* 168 */       Endpoint endpoint = epFac.createEndpoint(endptElem, true);
/* 169 */       endpoint.setParentEndpoint(parent);
/* 170 */       endpoints.add(endpoint);
/*     */     } 
/*     */     
/* 173 */     return endpoints;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 177 */     log.error(msg);
/* 178 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 182 */     log.error(msg, e);
/* 183 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\SALoadbalanceEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.SALoadbalanceEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseConstants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  42 */   private static final Log log = LogFactory.getLog(SALoadbalanceEndpointSerializer.class);
/*     */   
/*  44 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  48 */     if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/*  49 */       handleException(""Invalid endpoint type for serializing. Expected: SALoadbalanceEndpoint Found: "" + endpoint.getClass().getName());
/*     */     }
/*     */ 
/*     */     
/*  53 */     SALoadbalanceEndpoint loadbalanceEndpoint = (SALoadbalanceEndpoint)endpoint;
/*     */     
/*  55 */     this.fac = OMAbstractFactory.getOMFactory();
/*  56 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  58 */     String name = loadbalanceEndpoint.getName();
/*  59 */     if (name != null) {
/*  60 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  63 */     Dispatcher dispatcher = loadbalanceEndpoint.getDispatcher();
/*     */     
/*  65 */     if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher) {
/*  66 */       OMElement sessionElement = this.fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*  67 */       sessionElement.addAttribute(""type"", ""soap"", null);
/*  68 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     }
/*  70 */     else if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher) {
/*  71 */       OMElement sessionElement = this.fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*  72 */       sessionElement.addAttribute(""type"", ""http"", null);
/*  73 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     }
/*  75 */     else if (dispatcher instanceof org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher) {
/*  76 */       OMElement sessionElement = this.fac.createOMElement(""session"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*  77 */       sessionElement.addAttribute(""type"", ""simpleClientSession"", null);
/*  78 */       endpointElement.addChild((OMNode)sessionElement);
/*     */     } 
/*     */     
/*  81 */     OMElement loadbalanceElement = this.fac.createOMElement(""loadbalance"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*  82 */     endpointElement.addChild((OMNode)loadbalanceElement);
/*     */     
/*  84 */     LoadbalanceAlgorithm algorithm = loadbalanceEndpoint.getAlgorithm();
/*  85 */     String algorithmName = ""roundRobin"";
/*  86 */     if (algorithm instanceof org.apache.synapse.endpoints.algorithms.RoundRobin) {
/*  87 */       algorithmName = ""roundRobin"";
/*     */     }
/*  89 */     loadbalanceElement.addAttribute(""algorithm"", algorithmName, null);
/*     */     
/*  91 */     List<Endpoint> endpoints = loadbalanceEndpoint.getEndpoints();
/*  92 */     for (int i = 0; i < endpoints.size(); i++) {
/*  93 */       Endpoint childEndpoint = endpoints.get(i);
/*  94 */       EndpointSerializer serializer = EndpointAbstractSerializer.getEndpointSerializer(childEndpoint);
/*     */       
/*  96 */       OMElement aeElement = serializer.serializeEndpoint(childEndpoint);
/*  97 */       loadbalanceElement.addChild((OMNode)aeElement);
/*     */     } 
/*     */     
/* 100 */     return endpointElement;
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 104 */     log.error(msg);
/* 105 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\SALoadbalanceEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.WSDLEndpointFactory,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import java.net.URL;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.WSDLEndpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpointFactory
/*     */   implements EndpointFactory
/*     */ {
/*  58 */   private static Log log = LogFactory.getLog(WSDLEndpointFactory.class);
/*     */   
/*  60 */   private static WSDLEndpointFactory instance = new WSDLEndpointFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  65 */   public static WSDLEndpointFactory getInstance() { return instance; }
/*     */ 
/*     */   
/*     */   public Object getObjectFromOMNode(OMNode om) {
/*  69 */     if (om instanceof OMElement) {
/*  70 */       return createEndpoint((OMElement)om, false);
/*     */     }
/*  72 */     handleException(""Invalid XML configuration for an Endpoint. OMElement expected"");
/*     */     
/*  74 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public Endpoint createEndpoint(OMElement epConfig, boolean anonymousEndpoint) {
/*  79 */     WSDLEndpoint wsdlEndpoint = new WSDLEndpoint();
/*     */     
/*  81 */     if (!anonymousEndpoint) {
/*  82 */       OMAttribute name = epConfig.getAttribute(new QName("""", ""name""));
/*     */ 
/*     */       
/*  85 */       if (name != null) {
/*  86 */         wsdlEndpoint.setName(name.getAttributeValue());
/*     */       }
/*     */     } 
/*     */     
/*  90 */     OMElement wsdlElement = epConfig.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""wsdl""));
/*     */ 
/*     */     
/*  93 */     if (wsdlElement != null) {
/*     */ 
/*     */       
/*  96 */       OMElement suspendElement = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""suspendDurationOnFailure""));
/*     */ 
/*     */ 
/*     */       
/* 100 */       if (suspendElement != null) {
/* 101 */         String suspend = suspendElement.getText();
/*     */         
/*     */         try {
/* 104 */           if (suspend != null) {
/* 105 */             long suspendDuration = Long.parseLong(suspend.trim());
/* 106 */             wsdlEndpoint.setSuspendOnFailDuration(suspendDuration * 1000L);
/*     */           }
/*     */         
/* 109 */         } catch (NumberFormatException e) {
/* 110 */           handleException(""suspendDurationOnFailure should be valid number."");
/*     */         } 
/*     */       } 
/*     */       
/* 114 */       EndpointDefinition endpoint = null;
/*     */ 
/*     */ 
/*     */       
/* 118 */       String serviceName = wsdlElement.getAttributeValue(new QName("""", ""service""));
/*     */ 
/*     */       
/* 121 */       String portName = wsdlElement.getAttributeValue(new QName("""", ""port""));
/*     */ 
/*     */ 
/*     */       
/* 125 */       String wsdlURI = wsdlElement.getAttributeValue(new QName("""", ""uri""));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 130 */       wsdlEndpoint.setServiceName(serviceName);
/* 131 */       wsdlEndpoint.setPortName(portName);
/*     */       
/* 133 */       if (wsdlURI != null) {
/*     */         
/* 135 */         wsdlEndpoint.setWsdlURI(wsdlURI.trim());
/*     */         try {
/* 137 */           OMElement wsdlOM = SynapseConfigUtils.getOMElementFromURL((new URL(wsdlURI)).toString());
/*     */           
/* 139 */           if (wsdlOM != null) {
/* 140 */             OMNamespace ns = wsdlOM.getNamespace();
/* 141 */             if (ns != null) {
/* 142 */               String nsUri = wsdlOM.getNamespace().getNamespaceURI();
/* 143 */               if (""http://schemas.xmlsoap.org/wsdl/"".equals(nsUri)) {
/* 144 */                 endpoint = (new WSDL11EndpointBuilder()).createEndpointDefinitionFromWSDL(wsdlOM, serviceName, portName);
/*     */               
/*     */               }
/* 147 */               else if (""http://www.w3.org/ns/wsdl"".equals(nsUri)) {
/*     */ 
/*     */ 
/*     */                 
/* 151 */                 handleException(""WSDL 2.0 Endpoints are currently not supported"");
/*     */               } 
/*     */             } 
/*     */           } 
/* 155 */         } catch (Exception e) {
/* 156 */           handleException(""Couldn't create endpoint from the given WSDL URI : "" + e.getMessage(), e);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 162 */       OMElement definitionElement = wsdlElement.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""definitions""));
/*     */       
/* 164 */       if (endpoint == null && definitionElement != null) {
/* 165 */         wsdlEndpoint.setWsdlDoc(definitionElement);
/*     */         
/* 167 */         endpoint = (new WSDL11EndpointBuilder()).createEndpointDefinitionFromWSDL(definitionElement, serviceName, portName);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 172 */       OMElement descriptionElement = wsdlElement.getFirstChildWithName(new QName(""http://schemas.xmlsoap.org/wsdl/"", ""description""));
/*     */       
/* 174 */       if (endpoint == null && descriptionElement != null) {
/* 175 */         wsdlEndpoint.setWsdlDoc(descriptionElement);
/* 176 */         handleException(""WSDL 2.0 Endpoints are currently not supported."");
/*     */       } 
/* 178 */       if (endpoint != null) {
/*     */         
/* 180 */         extractQOSInformation(endpoint, wsdlElement);
/* 181 */         OMAttribute statistics = epConfig.getAttribute(new QName("""", ""statistics""));
/*     */ 
/*     */         
/* 184 */         if (statistics != null) {
/* 185 */           String statisticsValue = statistics.getAttributeValue();
/* 186 */           if (statisticsValue != null) {
/* 187 */             if (""enable"".equals(statisticsValue)) {
/*     */               
/* 189 */               endpoint.setStatisticsState(1);
/* 190 */             } else if (""disable"".equals(statisticsValue)) {
/*     */               
/* 192 */               endpoint.setStatisticsState(0);
/*     */             } 
/*     */           }
/*     */         } 
/* 196 */         wsdlEndpoint.setEndpoint(endpoint);
/*     */       } else {
/* 198 */         handleException(""WSDL is not specified for WSDL endpoint."");
/*     */       } 
/*     */     } 
/*     */     
/* 202 */     return (Endpoint)wsdlEndpoint;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 206 */     log.error(msg);
/* 207 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 211 */     log.error(msg, e);
/* 212 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */   
/*     */   private void extractQOSInformation(EndpointDefinition endpointDefinition, OMElement wsdlElement) {
/* 217 */     OMAttribute format = wsdlElement.getAttribute(new QName("""", ""format""));
/*     */     
/* 219 */     OMAttribute optimize = wsdlElement.getAttribute(new QName("""", ""optimize""));
/*     */ 
/*     */     
/* 222 */     if (format != null) {
/*     */       
/* 224 */       String forceValue = format.getAttributeValue().trim().toLowerCase();
/* 225 */       if (""pox"".equals(forceValue)) {
/* 226 */         endpointDefinition.setForcePOX(true);
/* 227 */         endpointDefinition.setFormat(""pox"");
/*     */       }
/* 229 */       else if (""soap11"".equals(forceValue)) {
/* 230 */         endpointDefinition.setForceSOAP11(true);
/* 231 */         endpointDefinition.setFormat(""soap11"");
/*     */       }
/* 233 */       else if (""soap12"".equals(forceValue)) {
/* 234 */         endpointDefinition.setForceSOAP12(true);
/* 235 */         endpointDefinition.setFormat(""soap12"");
/*     */       } else {
/*     */         
/* 238 */         handleException(""force value -\"""" + forceValue + ""\"" not yet implemented"");
/*     */       } 
/*     */     } 
/*     */     
/* 242 */     if (optimize != null && optimize.getAttributeValue().length() > 0) {
/* 243 */       String method = optimize.getAttributeValue().trim();
/* 244 */       if (""mtom"".equalsIgnoreCase(method)) {
/* 245 */         endpointDefinition.setUseMTOM(true);
/* 246 */       } else if (""swa"".equalsIgnoreCase(method)) {
/* 247 */         endpointDefinition.setUseSwa(true);
/*     */       } 
/*     */     } 
/*     */     
/* 251 */     OMElement wsAddr = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableAddressing""));
/*     */     
/* 253 */     if (wsAddr != null) {
/* 254 */       endpointDefinition.setAddressingOn(true);
/* 255 */       String useSepList = wsAddr.getAttributeValue(new QName(""separateListener""));
/*     */       
/* 257 */       if (useSepList != null && (
/* 258 */         useSepList.trim().toLowerCase().startsWith(""tr"") || useSepList.trim().startsWith(""1"")))
/*     */       {
/* 260 */         endpointDefinition.setUseSeparateListener(true);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 265 */     OMElement wsSec = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableSec""));
/*     */     
/* 267 */     if (wsSec != null) {
/* 268 */       endpointDefinition.setSecurityOn(true);
/* 269 */       OMAttribute policy = wsSec.getAttribute(new QName("""", ""policy""));
/*     */       
/* 271 */       if (policy != null) {
/* 272 */         endpointDefinition.setWsSecPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/* 275 */     OMElement wsRm = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""enableRM""));
/*     */     
/* 277 */     if (wsRm != null) {
/* 278 */       endpointDefinition.setReliableMessagingOn(true);
/* 279 */       OMAttribute policy = wsRm.getAttribute(new QName("""", ""policy""));
/*     */       
/* 281 */       if (policy != null) {
/* 282 */         endpointDefinition.setWsRMPolicyKey(policy.getAttributeValue());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 287 */     OMElement timeout = wsdlElement.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""timeout""));
/*     */     
/* 289 */     if (timeout != null) {
/* 290 */       OMElement duration = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""duration""));
/*     */       
/* 292 */       if (duration != null) {
/* 293 */         String d = duration.getText();
/* 294 */         if (d != null) {
/* 295 */           long timeoutSeconds = (new Long(d.trim())).longValue();
/* 296 */           endpointDefinition.setTimeoutDuration(timeoutSeconds * 1000L);
/*     */         } 
/*     */       } 
/*     */       
/* 300 */       OMElement action = timeout.getFirstChildWithName(new QName(""http://ws.apache.org/ns/synapse"", ""action""));
/*     */       
/* 302 */       if (action != null) {
/* 303 */         String a = action.getText();
/* 304 */         if (a != null)
/* 305 */           if (a.trim().equalsIgnoreCase(""discard"")) {
/* 306 */             endpointDefinition.setTimeoutAction(101);
/*     */ 
/*     */             
/* 309 */             if (endpointDefinition.getTimeoutDuration() == 0L) {
/* 310 */               endpointDefinition.setTimeoutDuration(30000L);
/*     */             }
/* 312 */           } else if (a.trim().equalsIgnoreCase(""fault"")) {
/* 313 */             endpointDefinition.setTimeoutAction(102);
/*     */ 
/*     */             
/* 316 */             if (endpointDefinition.getTimeoutDuration() == 0L)
/* 317 */               endpointDefinition.setTimeoutDuration(30000L); 
/*     */           }  
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\WSDLEndpointFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.WSDLEndpointSerializer,"/*     */ package org.apache.synapse.config.xml.endpoints;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseConstants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.WSDLEndpoint;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpointSerializer
/*     */   implements EndpointSerializer
/*     */ {
/*  45 */   private static Log log = LogFactory.getLog(WSDLEndpointSerializer.class);
/*     */   
/*  47 */   private OMFactory fac = null;
/*     */ 
/*     */   
/*     */   public OMElement serializeEndpoint(Endpoint endpoint) {
/*  51 */     if (!(endpoint instanceof WSDLEndpoint)) {
/*  52 */       throw new SynapseException(""Invalid endpoint type."");
/*     */     }
/*     */     
/*  55 */     this.fac = OMAbstractFactory.getOMFactory();
/*  56 */     OMElement endpointElement = this.fac.createOMElement(""endpoint"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */     
/*  58 */     WSDLEndpoint wsdlEndpoint = (WSDLEndpoint)endpoint;
/*  59 */     String name = wsdlEndpoint.getName();
/*  60 */     if (name != null) {
/*  61 */       endpointElement.addAttribute(""name"", name, null);
/*     */     }
/*     */     
/*  64 */     OMElement wsdlElement = this.fac.createOMElement(""wsdl"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*  65 */     String serviceName = wsdlEndpoint.getServiceName();
/*  66 */     if (serviceName != null) {
/*  67 */       wsdlElement.addAttribute(""service"", serviceName, null);
/*     */     }
/*     */     
/*  70 */     String portName = wsdlEndpoint.getPortName();
/*  71 */     if (portName != null) {
/*  72 */       wsdlElement.addAttribute(""port"", portName, null);
/*     */     }
/*     */     
/*  75 */     String uri = wsdlEndpoint.getWsdlURI();
/*  76 */     if (uri != null) {
/*  77 */       wsdlElement.addAttribute(""uri"", uri, null);
/*     */     }
/*     */     
/*  80 */     OMElement wsdlDoc = wsdlEndpoint.getWsdlDoc();
/*  81 */     if (wsdlDoc != null) {
/*  82 */       wsdlElement.addChild((OMNode)wsdlDoc);
/*     */     }
/*     */     
/*  85 */     long suspendDuration = wsdlEndpoint.getSuspendOnFailDuration();
/*  86 */     if (suspendDuration != -1L) {
/*     */ 
/*     */       
/*  89 */       OMElement suspendElement = this.fac.createOMElement(""suspendDurationOnFailure"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/*     */ 
/*     */ 
/*     */       
/*  93 */       suspendElement.setText(Long.toString(suspendDuration / 1000L));
/*  94 */       wsdlElement.addChild((OMNode)suspendElement);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 100 */     EndpointDefinition epAddress = wsdlEndpoint.getEndpoint();
/* 101 */     serializeQOSInformation(epAddress, wsdlElement);
/*     */     
/* 103 */     endpointElement.addChild((OMNode)wsdlElement);
/*     */     
/* 105 */     return endpointElement;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void serializeQOSInformation(EndpointDefinition endpointDefinition, OMElement wsdlElement) {
/* 111 */     if (""pox"".equals(endpointDefinition.getFormat())) {
/* 112 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/*     */     }
/* 114 */     else if (""soap11"".equals(endpointDefinition.getFormat())) {
/* 115 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap11""));
/*     */     }
/* 117 */     else if (""soap12"".equals(endpointDefinition.getFormat())) {
/* 118 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap12""));
/*     */     
/*     */     }
/* 121 */     else if (endpointDefinition.isForcePOX()) {
/* 122 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""pox""));
/*     */     }
/* 124 */     else if (endpointDefinition.isForceSOAP11()) {
/* 125 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap11""));
/* 126 */     } else if (endpointDefinition.isForceSOAP12()) {
/* 127 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""format"", null, ""soap12""));
/*     */     } 
/*     */     
/* 130 */     int isEnableStatistics = endpointDefinition.getStatisticsState();
/* 131 */     String statisticsValue = null;
/* 132 */     if (isEnableStatistics == 1) {
/* 133 */       statisticsValue = ""enable"";
/* 134 */     } else if (isEnableStatistics == 0) {
/* 135 */       statisticsValue = ""disable"";
/*     */     } 
/* 137 */     if (statisticsValue != null) {
/* 138 */       wsdlElement.addAttribute(this.fac.createOMAttribute(""statistics"", null, statisticsValue));
/*     */     }
/*     */     
/* 141 */     if (endpointDefinition.isAddressingOn()) {
/* 142 */       OMElement addressing = this.fac.createOMElement(""enableAddressing"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 143 */       if (endpointDefinition.isUseSeparateListener()) {
/* 144 */         addressing.addAttribute(this.fac.createOMAttribute(""separateListener"", null, ""true""));
/*     */       }
/*     */       
/* 147 */       wsdlElement.addChild((OMNode)addressing);
/*     */     } 
/*     */     
/* 150 */     if (endpointDefinition.isReliableMessagingOn()) {
/* 151 */       OMElement rm = this.fac.createOMElement(""enableRM"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 152 */       if (endpointDefinition.getWsRMPolicyKey() != null) {
/* 153 */         rm.addAttribute(this.fac.createOMAttribute(""policy"", null, endpointDefinition.getWsRMPolicyKey()));
/*     */       }
/*     */       
/* 156 */       wsdlElement.addChild((OMNode)rm);
/*     */     } 
/*     */     
/* 159 */     if (endpointDefinition.isSecurityOn()) {
/* 160 */       OMElement sec = this.fac.createOMElement(""enableSec"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 161 */       if (endpointDefinition.getWsSecPolicyKey() != null) {
/* 162 */         sec.addAttribute(this.fac.createOMAttribute(""policy"", null, endpointDefinition.getWsSecPolicyKey()));
/*     */       }
/*     */       
/* 165 */       wsdlElement.addChild((OMNode)sec);
/*     */     } 
/*     */     
/* 168 */     if (endpointDefinition.getTimeoutAction() != 100) {
/* 169 */       OMElement timeout = this.fac.createOMElement(""timeout"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 170 */       wsdlElement.addChild((OMNode)timeout);
/*     */       
/* 172 */       OMElement duration = this.fac.createOMElement(""duration"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 173 */       duration.setText(Long.toString(endpointDefinition.getTimeoutDuration() / 1000L));
/* 174 */       timeout.addChild((OMNode)duration);
/*     */       
/* 176 */       OMElement action = this.fac.createOMElement(""action"", SynapseConstants.SYNAPSE_OMNAMESPACE);
/* 177 */       if (endpointDefinition.getTimeoutAction() == 101) {
/* 178 */         action.setText(""discard"");
/* 179 */       } else if (endpointDefinition.getTimeoutAction() == 102) {
/* 180 */         action.setText(""fault"");
/*     */       } 
/* 182 */       timeout.addChild((OMNode)action);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 187 */     log.error(msg);
/* 188 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\WSDLEndpointSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.XMLToEndpointMapper,"/*    */ package org.apache.synapse.config.xml.endpoints;
/*    */ 
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.XMLToObjectMapper;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class XMLToEndpointMapper
/*    */   implements XMLToObjectMapper
/*    */ {
/* 34 */   private static XMLToEndpointMapper instance = new XMLToEndpointMapper();
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 39 */   public static XMLToEndpointMapper getInstance() { return instance; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object getObjectFromOMNode(OMNode om) {
/* 49 */     if (om instanceof OMElement) {
/* 50 */       OMElement epElement = (OMElement)om;
/* 51 */       return EndpointAbstractFactory.getEndpointFactroy(epElement).createEndpoint(epElement, false);
/*    */     } 
/*    */     
/* 54 */     throw new SynapseException(""Configuration is not in proper format."");
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoints\XMLToEndpointMapper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.LoadbalanceAlgorithmFactory,"/*    */ package org.apache.synapse.config.xml.endpoints.utils;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAttribute;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*    */ import org.apache.synapse.endpoints.algorithms.RoundRobin;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LoadbalanceAlgorithmFactory
/*    */ {
/*    */   public static LoadbalanceAlgorithm createLoadbalanceAlgorithm(OMElement loadbalanceElement, ArrayList endpoints) {
/* 39 */     Object object = null;
/*    */     
/* 41 */     String algorithmName = ""roundRobin"";
/* 42 */     OMAttribute algoAttribute = loadbalanceElement.getAttribute(new QName(null, ""policy""));
/* 43 */     if (algoAttribute != null) {
/* 44 */       algorithmName = algoAttribute.getAttributeValue();
/*    */     }
/*    */     
/* 47 */     if (algorithmName.equalsIgnoreCase(""roundRobin"")) {
/* 48 */       object = new RoundRobin(endpoints);
/*    */     }
/*    */     
/* 51 */     return (LoadbalanceAlgorithm)object;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoint\\utils\LoadbalanceAlgorithmFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.WSDL11EndpointBuilder,"/*     */ package org.apache.synapse.config.xml.endpoints.utils;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.InputStream;
/*     */ import java.util.List;
/*     */ import javax.wsdl.Definition;
/*     */ import javax.wsdl.Port;
/*     */ import javax.wsdl.Service;
/*     */ import javax.wsdl.WSDLException;
/*     */ import javax.wsdl.extensions.soap.SOAPAddress;
/*     */ import javax.wsdl.extensions.soap12.SOAP12Address;
/*     */ import javax.wsdl.factory.WSDLFactory;
/*     */ import javax.wsdl.xml.WSDLReader;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.xml.sax.InputSource;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDL11EndpointBuilder
/*     */ {
/*  50 */   private static Log log = LogFactory.getLog(WSDL11EndpointBuilder.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinitionFromWSDL(OMElement wsdl, String service, String port) {
/*  65 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */     try {
/*  67 */       wsdl.serialize(baos);
/*  68 */       InputStream in = new ByteArrayInputStream(baos.toByteArray());
/*  69 */       InputSource inputSource = new InputSource(in);
/*  70 */       WSDLFactory fac = WSDLFactory.newInstance();
/*  71 */       WSDLReader reader = fac.newWSDLReader();
/*  72 */       Definition definition = reader.readWSDL(null, inputSource);
/*     */       
/*  74 */       return createEndpointDefinitionFromWSDL(definition, service, port);
/*     */     }
/*  76 */     catch (XMLStreamException e) {
/*  77 */       handleException(""Error retrieving the WSDL definition from the inline WSDL."");
/*  78 */     } catch (WSDLException e) {
/*  79 */       handleException(""Error retrieving the WSDL definition from the inline WSDL."");
/*     */     } 
/*     */     
/*  82 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EndpointDefinition createEndpointDefinitionFromWSDL(String wsdlURI, String service, String port) {
/*     */     try {
/*  98 */       WSDLFactory fac = WSDLFactory.newInstance();
/*  99 */       WSDLReader reader = fac.newWSDLReader();
/* 100 */       Definition definition = reader.readWSDL(wsdlURI);
/*     */       
/* 102 */       return createEndpointDefinitionFromWSDL(definition, service, port);
/*     */     }
/* 104 */     catch (WSDLException e) {
/* 105 */       handleException(""Error retrieving the WSDL definition from the WSDL URI."");
/*     */ 
/*     */       
/* 108 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private EndpointDefinition createEndpointDefinitionFromWSDL(Definition definition, String serviceName, String portName) {
/* 114 */     if (definition == null) {
/* 115 */       handleException(""WSDL is not specified."");
/*     */     }
/*     */     
/* 118 */     if (serviceName == null) {
/* 119 */       handleException(""Service of the WSDL document is not specified."");
/*     */     }
/*     */     
/* 122 */     if (portName == null) {
/* 123 */       handleException(""Port of the WSDL document is not specified."");
/*     */     }
/*     */ 
/*     */     
/* 127 */     String serviceURL = null;
/*     */ 
/*     */     
/* 130 */     String format = null;
/* 131 */     String tns = definition.getTargetNamespace();
/* 132 */     Service service = definition.getService(new QName(tns, serviceName));
/* 133 */     if (service != null) {
/* 134 */       Port port = service.getPort(portName);
/* 135 */       if (port != null) {
/* 136 */         List ext = port.getExtensibilityElements();
/* 137 */         for (int i = 0; i < ext.size(); i++) {
/* 138 */           Object o = ext.get(i);
/* 139 */           if (o instanceof SOAPAddress) {
/* 140 */             SOAPAddress address = (SOAPAddress)o;
/* 141 */             serviceURL = address.getLocationURI();
/* 142 */             format = ""soap11""; break;
/*     */           } 
/* 144 */           if (o instanceof SOAP12Address) {
/* 145 */             SOAP12Address address = (SOAP12Address)o;
/* 146 */             serviceURL = address.getLocationURI();
/* 147 */             format = ""soap12"";
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/* 154 */     if (serviceURL != null) {
/* 155 */       EndpointDefinition endpointDefinition = new EndpointDefinition();
/* 156 */       endpointDefinition.setAddress(serviceURL);
/* 157 */       endpointDefinition.setFormat(format);
/*     */ 
/*     */ 
/*     */       
/* 161 */       return endpointDefinition;
/*     */     } 
/*     */     
/* 164 */     handleException(""Couldn't retrieve endpoint information from the WSDL."");
/*     */ 
/*     */     
/* 167 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 171 */     log.error(msg);
/* 172 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoint\\utils\WSDL11EndpointBuilder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.config.xml.endpoints.utils.WSDL20EndpointBuilder,"package org.apache.synapse.config.xml.endpoints.utils;
public class WSDL20EndpointBuilder {}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\config\xml\endpoint\\utils\WSDL20EndpointBuilder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.SynapseEnvironment,"package org.apache.synapse.core;
import java.util.concurrent.ExecutorService;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.utils.EndpointDefinition;
import org.apache.synapse.mediators.base.SequenceMediator;
import org.apache.synapse.statistics.StatisticsCollector;
public interface SynapseEnvironment {
  boolean injectMessage(MessageContext paramMessageContext);
  void injectAsync(MessageContext paramMessageContext, SequenceMediator paramSequenceMediator);
  void send(EndpointDefinition paramEndpointDefinition, MessageContext paramMessageContext);
  MessageContext createMessageContext();
  StatisticsCollector getStatisticsCollector();
  void setStatisticsCollector(StatisticsCollector paramStatisticsCollector);
  ExecutorService getExecutorService();
  boolean isInitialized();
  void setInitialized(boolean paramBoolean);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\SynapseEnvironment.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.AnonymousServiceFactory,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.description.AxisMessage;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.OutOnlyAxisOperation;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AnonymousServiceFactory
/*     */ {
/*  42 */   private static final Log log = LogFactory.getLog(AnonymousServiceFactory.class);
/*     */   
/*     */   private static final String NONE = ""__NONE__"";
/*     */   
/*     */   private static final String ADDR_ONLY = ""__ADDR_ONLY__"";
/*     */   
/*     */   private static final String RM_AND_ADDR = ""__RM_AND_ADDR__"";
/*     */   private static final String SEC_AND_ADDR = ""__SEC_AND_ADDR__"";
/*     */   private static final String RM_SEC_AND_ADDR = ""__RM_SEC_AND_ADDR__"";
/*     */   public static final String OUT_IN_OPERATION = ""__OUT_IN_OPERATION__"";
/*     */   public static final String OUT_ONLY_OPERATION = ""__OUT_ONLY_OPERATION__"";
/*  53 */   private static SynapseCallbackReceiver synapseCallbackReceiver = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static AxisService getAnonymousService(SynapseConfiguration synCfg, AxisConfiguration axisCfg, boolean wsAddrOn, boolean wsRMOn, boolean wsSecOn) {
/*  68 */     String servicekey = null;
/*  69 */     if (!wsAddrOn) {
/*  70 */       servicekey = ""__NONE__"";
/*     */     }
/*  72 */     else if (!wsSecOn && !wsRMOn) {
/*  73 */       servicekey = ""__ADDR_ONLY__"";
/*  74 */     } else if (wsRMOn && !wsSecOn) {
/*  75 */       servicekey = ""__RM_AND_ADDR__"";
/*  76 */     } else if (wsSecOn && !wsRMOn) {
/*  77 */       servicekey = ""__SEC_AND_ADDR__"";
/*     */     } else {
/*  79 */       servicekey = ""__RM_SEC_AND_ADDR__"";
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/*  84 */       AxisService service = axisCfg.getService(servicekey);
/*  85 */       if (service == null) {
/*  86 */         synchronized (AnonymousServiceFactory.class) {
/*     */ 
/*     */           
/*  89 */           service = axisCfg.getService(servicekey);
/*  90 */           if (service != null) {
/*  91 */             return service;
/*     */           }
/*     */           
/*  94 */           service = createAnonymousService(synCfg, axisCfg, servicekey);
/*     */           
/*  96 */           if (wsAddrOn) {
/*  97 */             service.engageModule(axisCfg.getModule(""addressing""), (AxisDescription)axisCfg);
/*     */ 
/*     */             
/* 100 */             if (wsRMOn) {
/* 101 */               service.engageModule(axisCfg.getModule(""sandesha2""), (AxisDescription)axisCfg);
/*     */             }
/*     */             
/* 104 */             if (wsSecOn) {
/* 105 */               service.engageModule(axisCfg.getModule(""rampart""), (AxisDescription)axisCfg);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 112 */       return service;
/* 113 */     } catch (AxisFault e) {
/* 114 */       handleException(""Error retrieving anonymous service for QoS : "" + servicekey, (Exception)e);
/*     */       
/* 116 */       return null;
/*     */     } 
/*     */   }
/*     */   private static void handleException(String msg, Exception e) {
/* 120 */     log.error(msg, e);
/* 121 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static AxisService createAnonymousService(SynapseConfiguration synCfg, AxisConfiguration axisCfg, String serviceKey) {
/*     */     try {
/* 133 */       DynamicAxisOperation dynamicOperation = new DynamicAxisOperation(new QName(""__OUT_IN_OPERATION__""));
/*     */       
/* 135 */       dynamicOperation.setMessageReceiver(getCallbackReceiver(synCfg));
/* 136 */       AxisMessage inMsg = new AxisMessage();
/* 137 */       inMsg.setName(""in-message"");
/* 138 */       inMsg.setParent((AxisDescription)dynamicOperation);
/* 139 */       AxisMessage outMsg = new AxisMessage();
/* 140 */       outMsg.setName(""out-message"");
/* 141 */       outMsg.setParent((AxisDescription)dynamicOperation);
/* 142 */       dynamicOperation.addMessage(inMsg, ""Out"");
/* 143 */       dynamicOperation.addMessage(outMsg, ""In"");
/*     */       
/* 145 */       OutOnlyAxisOperation asyncOperation = new OutOnlyAxisOperation(new QName(""__OUT_ONLY_OPERATION__""));
/*     */       
/* 147 */       asyncOperation.setMessageReceiver(getCallbackReceiver(synCfg));
/* 148 */       AxisMessage outOnlyMsg = new AxisMessage();
/* 149 */       outOnlyMsg.setName(""out-message"");
/* 150 */       outOnlyMsg.setParent((AxisDescription)asyncOperation);
/* 151 */       asyncOperation.addMessage(outMsg, ""Out"");
/*     */       
/* 153 */       AxisService axisAnonymousService = new AxisService(serviceKey);
/* 154 */       axisAnonymousService.addOperation((AxisOperation)dynamicOperation);
/* 155 */       axisAnonymousService.addOperation((AxisOperation)asyncOperation);
/* 156 */       axisCfg.addService(axisAnonymousService);
/* 157 */       axisCfg.getPhasesInfo().setOperationPhases((AxisOperation)dynamicOperation);
/* 158 */       return axisAnonymousService;
/*     */     }
/* 160 */     catch (AxisFault e) {
/* 161 */       handleException(""Error occured while creating an anonymous service for QoS : "" + serviceKey, (Exception)e);
/*     */ 
/*     */ 
/*     */       
/* 165 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static synchronized SynapseCallbackReceiver getCallbackReceiver(SynapseConfiguration synCfg) {
/* 176 */     if (synapseCallbackReceiver == null) {
/* 177 */       synapseCallbackReceiver = new SynapseCallbackReceiver(synCfg);
/*     */     }
/* 179 */     return synapseCallbackReceiver;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\AnonymousServiceFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.AsyncCallback,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import org.apache.axis2.client.async.AxisCallback;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class AsyncCallback
/*    */   implements AxisCallback
/*    */ {
/* 35 */   MessageContext synapseOutMsgCtx = null;
/*    */ 
/*    */   
/*    */   private long timeOutOn;
/*    */ 
/*    */   
/* 41 */   private int timeOutAction = 100;
/*    */ 
/*    */   
/* 44 */   public AsyncCallback(MessageContext synapseOutMsgCtx) { this.synapseOutMsgCtx = synapseOutMsgCtx; }
/*    */ 
/*    */   
/*    */   public void onMessage(MessageContext messageContext) {}
/*    */ 
/*    */   
/*    */   public void onFault(MessageContext messageContext) {}
/*    */   
/*    */   public void onError(Exception e) {}
/*    */   
/*    */   public void onComplete() {}
/*    */   
/* 56 */   public MessageContext getSynapseOutMsgCtx() { return this.synapseOutMsgCtx; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public long getTimeOutOn() { return this.timeOutOn; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public void setTimeOutOn(long timeOutOn) { this.timeOutOn = timeOutOn; }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public int getTimeOutAction() { return this.timeOutAction; }
/*    */ 
/*    */ 
/*    */   
/* 72 */   public void setTimeOutAction(int timeOutAction) { this.timeOutAction = timeOutAction; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\AsyncCallback.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2FlexibleMEPClient,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.client.OperationClient;
/*     */ import org.apache.axis2.client.Options;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.context.ServiceContext;
/*     */ import org.apache.axis2.context.ServiceGroupContext;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.AxisServiceGroup;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.neethi.PolicyEngine;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.util.MessageHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2FlexibleMEPClient
/*     */ {
/*  61 */   private static final Log log = LogFactory.getLog(Axis2FlexibleMEPClient.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void send(EndpointDefinition endpoint, MessageContext synapseOutMessageContext) throws AxisFault {
/*  79 */     boolean separateListener = false;
/*  80 */     boolean wsSecurityEnabled = false;
/*  81 */     String wsSecPolicyKey = null;
/*  82 */     boolean wsRMEnabled = false;
/*  83 */     String wsRMPolicyKey = null;
/*  84 */     boolean wsAddressingEnabled = false;
/*     */     
/*  86 */     if (endpoint != null) {
/*  87 */       separateListener = endpoint.isUseSeparateListener();
/*  88 */       wsSecurityEnabled = endpoint.isSecurityOn();
/*  89 */       wsSecPolicyKey = endpoint.getWsSecPolicyKey();
/*  90 */       wsRMEnabled = endpoint.isReliableMessagingOn();
/*  91 */       wsRMPolicyKey = endpoint.getWsRMPolicyKey();
/*  92 */       wsAddressingEnabled = (endpoint.isAddressingOn() || wsSecurityEnabled || wsRMEnabled);
/*     */     } 
/*     */     
/*  95 */     if (log.isDebugEnabled()) {
/*  96 */       log.debug(""Sending [add = "" + wsAddressingEnabled + ""] [sec = "" + wsSecurityEnabled + ""] [rm = "" + wsRMEnabled + ((endpoint != null) ? (""] [ mtom = "" + endpoint.isUseMTOM() + ""] [ swa = "" + endpoint.isUseSwa() + ""] [ format = "" + endpoint.getFormat() + ""] [ force soap11="" + endpoint.isForceSOAP11() + ""] [ force soap12="" + endpoint.isForceSOAP12() + ""; pox="" + endpoint.isForcePOX()) : """") + ""] [ to "" + synapseOutMessageContext.getTo() + ""]"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 111 */     MessageContext originalInMsgCtx = ((Axis2MessageContext)synapseOutMessageContext).getAxis2MessageContext();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 116 */     MessageContext axisOutMsgCtx = cloneForSend(originalInMsgCtx);
/*     */ 
/*     */ 
/*     */     
/* 120 */     if (endpoint != null) {
/*     */       
/* 122 */       if (""pox"".equals(endpoint.getFormat())) {
/* 123 */         axisOutMsgCtx.setDoingREST(true);
/*     */       }
/* 125 */       else if (""soap11"".equals(endpoint.getFormat())) {
/* 126 */         axisOutMsgCtx.setDoingREST(false);
/* 127 */         if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {
/* 128 */           axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());
/*     */         }
/* 130 */         if (!axisOutMsgCtx.isSOAP11()) {
/* 131 */           SOAPUtils.convertSOAP12toSOAP11(axisOutMsgCtx);
/*     */         }
/*     */       }
/* 134 */       else if (""soap12"".equals(endpoint.getFormat())) {
/* 135 */         axisOutMsgCtx.setDoingREST(false);
/* 136 */         if (axisOutMsgCtx.getSoapAction() == null && axisOutMsgCtx.getWSAAction() != null) {
/* 137 */           axisOutMsgCtx.setSoapAction(axisOutMsgCtx.getWSAAction());
/*     */         }
/* 139 */         if (axisOutMsgCtx.isSOAP11()) {
/* 140 */           SOAPUtils.convertSOAP11toSOAP12(axisOutMsgCtx);
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 145 */       if (endpoint.isUseMTOM()) {
/* 146 */         axisOutMsgCtx.setDoingMTOM(true);
/*     */         
/* 148 */         axisOutMsgCtx.setProperty(""enableMTOM"", ""true"");
/*     */ 
/*     */         
/* 151 */         axisOutMsgCtx.setDoingMTOM(true);
/*     */       }
/* 153 */       else if (endpoint.isUseSwa()) {
/* 154 */         axisOutMsgCtx.setDoingSwA(true);
/*     */         
/* 156 */         axisOutMsgCtx.setProperty(""enableSwA"", ""true"");
/*     */ 
/*     */         
/* 159 */         axisOutMsgCtx.setDoingSwA(true);
/*     */       } 
/*     */       
/* 162 */       if (endpoint.getAddress() != null) {
/* 163 */         axisOutMsgCtx.setTo(new EndpointReference(endpoint.getAddress()));
/*     */       }
/*     */       
/* 166 */       if (endpoint.isUseSeparateListener()) {
/* 167 */         axisOutMsgCtx.getOptions().setUseSeparateListener(true);
/*     */       }
/*     */     } 
/*     */     
/* 171 */     if (wsAddressingEnabled) {
/* 172 */       axisOutMsgCtx.setProperty(""disableAddressingForOutMessages"", Boolean.FALSE);
/*     */     }
/*     */     else {
/*     */       
/* 176 */       axisOutMsgCtx.setProperty(""disableAddressingForOutMessages"", Boolean.TRUE);
/*     */     } 
/*     */ 
/*     */     
/* 180 */     ConfigurationContext axisCfgCtx = axisOutMsgCtx.getConfigurationContext();
/* 181 */     AxisConfiguration axisCfg = axisCfgCtx.getAxisConfiguration();
/*     */     
/* 183 */     AxisService anoymousService = AnonymousServiceFactory.getAnonymousService(synapseOutMessageContext.getConfiguration(), axisCfg, wsAddressingEnabled, wsRMEnabled, wsSecurityEnabled);
/*     */ 
/*     */     
/* 186 */     ServiceGroupContext sgc = new ServiceGroupContext(axisCfgCtx, (AxisServiceGroup)anoymousService.getParent());
/*     */     
/* 188 */     ServiceContext serviceCtx = sgc.getServiceContext(anoymousService);
/*     */     
/* 190 */     boolean outOnlyMessage = ""true"".equals(synapseOutMessageContext.getProperty(""OUT_ONLY""));
/*     */ 
/*     */ 
/*     */     
/* 194 */     AxisOperation axisAnonymousOperation = anoymousService.getOperation(outOnlyMessage ? new QName(""__OUT_ONLY_OPERATION__"") : new QName(""__OUT_IN_OPERATION__""));
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 199 */     Options clientOptions = new Options();
/* 200 */     clientOptions.setUseSeparateListener(separateListener);
/*     */     
/* 202 */     if (wsRMEnabled) {
/*     */       
/* 204 */       if (wsRMPolicyKey != null) {
/* 205 */         clientOptions.setProperty(""sandeshaPolicy"", getPolicy(synapseOutMessageContext, wsRMPolicyKey));
/*     */       }
/*     */ 
/*     */       
/* 209 */       copyRMOptions(originalInMsgCtx, clientOptions);
/*     */     } 
/*     */ 
/*     */     
/* 213 */     if (wsSecurityEnabled) {
/*     */       
/* 215 */       if (wsSecPolicyKey != null) {
/* 216 */         clientOptions.setProperty(""rampartPolicy"", getPolicy(synapseOutMessageContext, wsSecPolicyKey));
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 221 */       if (axisOutMsgCtx.getEnvelope().getHeader() == null) {
/* 222 */         SOAPFactory fac = axisOutMsgCtx.isSOAP11() ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */         
/* 224 */         fac.createSOAPHeader(axisOutMsgCtx.getEnvelope());
/*     */       } 
/*     */     } 
/*     */     
/* 228 */     OperationClient mepClient = axisAnonymousOperation.createClient(serviceCtx, clientOptions);
/* 229 */     mepClient.addMessageContext(axisOutMsgCtx);
/* 230 */     axisOutMsgCtx.setAxisMessage(axisAnonymousOperation.getMessage(""Out""));
/*     */ 
/*     */     
/* 233 */     if (!outOnlyMessage) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 238 */       AsyncCallback callback = new AsyncCallback(synapseOutMessageContext);
/* 239 */       if (endpoint != null) {
/*     */ 
/*     */         
/* 242 */         callback.setTimeOutOn(System.currentTimeMillis() + endpoint.getTimeoutDuration());
/* 243 */         callback.setTimeOutAction(endpoint.getTimeoutAction());
/*     */       } else {
/* 245 */         callback.setTimeOutOn(System.currentTimeMillis());
/*     */       } 
/* 247 */       mepClient.setCallback(callback);
/*     */     } 
/*     */     
/* 250 */     mepClient.execute(true);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 255 */     originalInMsgCtx.getOperationContext().setProperty(""RESPONSE_WRITTEN"", ""SKIP"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static MessageContext cloneForSend(MessageContext ori) throws AxisFault {
/* 261 */     MessageContext newMC = MessageHelper.clonePartially(ori);
/*     */     
/* 263 */     newMC.setEnvelope(ori.getEnvelope());
/* 264 */     removeAddressingHeaders(newMC);
/*     */     
/* 266 */     newMC.setProperty(""TRANSPORT_HEADERS"", ori.getProperty(""TRANSPORT_HEADERS""));
/*     */ 
/*     */     
/* 269 */     return newMC;
/*     */   }
/*     */   
/*     */   private static void copyRMOptions(MessageContext oriContext, Options targetOptions) {
/* 273 */     Options oriOptions = oriContext.getOptions();
/* 274 */     if (oriOptions.getProperty(""Sandesha2LastMessage"") != null) {
/* 275 */       targetOptions.setProperty(""Sandesha2LastMessage"", oriOptions.getProperty(""Sandesha2LastMessage""));
/*     */     }
/*     */     
/* 278 */     if (oriOptions.getProperty(""Sandesha2RMSpecVersion"") != null) {
/* 279 */       targetOptions.setProperty(""Sandesha2RMSpecVersion"", oriOptions.getProperty(""Sandesha2RMSpecVersion""));
/*     */     }
/*     */     
/* 282 */     if (oriOptions.getProperty(""Sandesha2SequenceKey"") != null) {
/* 283 */       targetOptions.setProperty(""Sandesha2SequenceKey"", oriOptions.getProperty(""Sandesha2SequenceKey""));
/*     */     }
/*     */     
/* 286 */     if (oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID) != null) {
/* 287 */       targetOptions.setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, oriOptions.getProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static Policy getPolicy(MessageContext synCtx, String propertyKey) {
/* 299 */     Object property = synCtx.getEntry(propertyKey);
/* 300 */     if (property != null && property instanceof OMElement) {
/* 301 */       return PolicyEngine.getPolicy((OMElement)property);
/*     */     }
/* 303 */     handleException(""Cannot locate policy from the property : "" + propertyKey);
/*     */     
/* 305 */     return null;
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 309 */     log.error(msg);
/* 310 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SOAPEnvelope removeAddressingHeaders(MessageContext axisMsgCtx) {
/* 321 */     SOAPEnvelope env = axisMsgCtx.getEnvelope();
/* 322 */     SOAPHeader soapHeader = env.getHeader();
/*     */ 
/*     */     
/* 325 */     if (soapHeader != null) {
/* 326 */       ArrayList addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://schemas.xmlsoap.org/ws/2004/08/addressing"");
/*     */ 
/*     */       
/* 329 */       if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 330 */         detachAddressingInformation(addressingHeaders);
/*     */       } else {
/*     */         
/* 333 */         addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://www.w3.org/2005/08/addressing"");
/*     */         
/* 335 */         if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 336 */           detachAddressingInformation(addressingHeaders);
/*     */         }
/*     */       } 
/*     */     } 
/* 340 */     return env;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void detachAddressingInformation(ArrayList headerInformation) {
/* 348 */     for (Object o : headerInformation) {
/* 349 */       if (o instanceof SOAPHeaderBlock) {
/* 350 */         SOAPHeaderBlock headerBlock = (SOAPHeaderBlock)o;
/* 351 */         headerBlock.detach(); continue;
/* 352 */       }  if (o instanceof OMElement) {
/*     */         
/* 354 */         OMElement om = (OMElement)o;
/* 355 */         OMNamespace ns = om.getNamespace();
/* 356 */         if (ns != null && (""http://schemas.xmlsoap.org/ws/2004/08/addressing"".equals(ns.getNamespaceURI()) || ""http://www.w3.org/2005/08/addressing"".equals(ns.getNamespaceURI())))
/*     */         {
/*     */           
/* 359 */           om.detach();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\Axis2FlexibleMEPClient.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2MessageContext,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.Stack;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.impl.llom.OMElementImpl;
/*     */ import org.apache.axiom.om.impl.llom.OMTextImpl;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.addressing.RelatesTo;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.GetPropertyFunction;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.jaxen.Function;
/*     */ import org.jaxen.FunctionContext;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.jaxen.XPathFunctionContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2MessageContext
/*     */   implements MessageContext
/*     */ {
/*  53 */   private static final Log log = LogFactory.getLog(Axis2MessageContext.class);
/*     */ 
/*     */   
/*  56 */   private SynapseConfiguration synCfg = null;
/*     */ 
/*     */   
/*  59 */   private SynapseEnvironment synEnv = null;
/*     */ 
/*     */   
/*  62 */   private Map properties = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  68 */   private Map localEntries = new HashMap<Object, Object>();
/*     */ 
/*     */   
/*  71 */   private Stack faultStack = new Stack();
/*     */ 
/*     */   
/*  74 */   private MessageContext axis2MessageContext = null;
/*     */ 
/*     */   
/*     */   private boolean response = false;
/*     */ 
/*     */   
/*     */   private boolean faultResponse = false;
/*     */ 
/*     */   
/*  83 */   private int tracingState = 2;
/*     */ 
/*     */   
/*  86 */   private Log serviceLog = null;
/*     */ 
/*     */   
/*  89 */   public SynapseConfiguration getConfiguration() { return this.synCfg; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setConfiguration(SynapseConfiguration synCfg) { this.synCfg = synCfg; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public SynapseEnvironment getEnvironment() { return this.synEnv; }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setEnvironment(SynapseEnvironment synEnv) { this.synEnv = synEnv; }
/*     */ 
/*     */   
/*     */   public Mediator getMainSequence() {
/* 105 */     Object o = this.localEntries.get(""main"");
/* 106 */     if (o != null && o instanceof Mediator) {
/* 107 */       return (Mediator)o;
/*     */     }
/* 109 */     Mediator main = getConfiguration().getMainSequence();
/* 110 */     this.localEntries.put(""main"", main);
/* 111 */     return main;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator getFaultSequence() {
/* 116 */     Object o = this.localEntries.get(""fault"");
/* 117 */     if (o != null && o instanceof Mediator) {
/* 118 */       return (Mediator)o;
/*     */     }
/* 120 */     Mediator fault = getConfiguration().getFaultSequence();
/* 121 */     this.localEntries.put(""fault"", fault);
/* 122 */     return fault;
/*     */   }
/*     */ 
/*     */   
/*     */   public Mediator getSequence(String key) {
/* 127 */     Object o = this.localEntries.get(key);
/* 128 */     if (o != null && o instanceof Mediator) {
/* 129 */       return (Mediator)o;
/*     */     }
/* 131 */     Mediator m = getConfiguration().getSequence(key);
/* 132 */     this.localEntries.put(key, m);
/* 133 */     return m;
/*     */   }
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(String key) {
/* 138 */     Object o = this.localEntries.get(key);
/* 139 */     if (o != null && o instanceof Endpoint) {
/* 140 */       return (Endpoint)o;
/*     */     }
/* 142 */     Endpoint e = getConfiguration().getEndpoint(key);
/* 143 */     this.localEntries.put(key, e);
/* 144 */     return e;
/*     */   }
/*     */ 
/*     */   
/*     */   public Object getEntry(String key) {
/* 149 */     Object o = this.localEntries.get(key);
/* 150 */     if (o != null && o instanceof Entry) {
/* 151 */       return ((Entry)o).getValue();
/*     */     }
/* 153 */     Object e = getConfiguration().getEntry(key);
/* 154 */     if (e != null) {
/* 155 */       this.localEntries.put(key, e);
/* 156 */       return e;
/*     */     } 
/* 158 */     getConfiguration().getEntryDefinition(key);
/* 159 */     return getConfiguration().getEntry(key);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public Object getProperty(String key) { return this.properties.get(key); }
/*     */ 
/*     */   
/*     */   public void setProperty(String key, Object value) {
/* 169 */     this.properties.put(key, value);
/*     */ 
/*     */     
/* 172 */     if (""RESPONSE"".equals(key) && getAxis2MessageContext().getOperationContext() != null)
/*     */     {
/* 174 */       getAxis2MessageContext().getOperationContext().setProperty(""RESPONSE_WRITTEN"", ""SKIP"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 180 */   public Set getPropertyKeySet() { return this.properties.keySet(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Axis2MessageContext(MessageContext axisMsgCtx, SynapseConfiguration synCfg, SynapseEnvironment synEnv) {
/* 192 */     setAxis2MessageContext(axisMsgCtx);
/* 193 */     this.synCfg = synCfg;
/* 194 */     this.synEnv = synEnv;
/* 195 */     pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCfg.getFaultSequence()));
/*     */   }
/*     */ 
/*     */   
/* 199 */   public EndpointReference getFaultTo() { return this.axis2MessageContext.getFaultTo(); }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setFaultTo(EndpointReference reference) { this.axis2MessageContext.setFaultTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public EndpointReference getFrom() { return this.axis2MessageContext.getFrom(); }
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setFrom(EndpointReference reference) { this.axis2MessageContext.setFrom(reference); }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public SOAPEnvelope getEnvelope() { return this.axis2MessageContext.getEnvelope(); }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setEnvelope(SOAPEnvelope envelope) throws AxisFault { this.axis2MessageContext.setEnvelope(envelope); }
/*     */ 
/*     */ 
/*     */   
/* 223 */   public String getMessageID() { return this.axis2MessageContext.getMessageID(); }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public void setMessageID(String string) { this.axis2MessageContext.setMessageID(string); }
/*     */ 
/*     */ 
/*     */   
/* 231 */   public RelatesTo getRelatesTo() { return this.axis2MessageContext.getRelatesTo(); }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setRelatesTo(RelatesTo[] reference) { this.axis2MessageContext.setRelationships(reference); }
/*     */ 
/*     */ 
/*     */   
/* 239 */   public EndpointReference getReplyTo() { return this.axis2MessageContext.getReplyTo(); }
/*     */ 
/*     */ 
/*     */   
/* 243 */   public void setReplyTo(EndpointReference reference) { this.axis2MessageContext.setReplyTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 247 */   public EndpointReference getTo() { return this.axis2MessageContext.getTo(); }
/*     */ 
/*     */ 
/*     */   
/* 251 */   public void setTo(EndpointReference reference) { this.axis2MessageContext.setTo(reference); }
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setWSAAction(String actionURI) { this.axis2MessageContext.setWSAAction(actionURI); }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public String getWSAAction() { return this.axis2MessageContext.getWSAAction(); }
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setWSAMessageID(String messageID) { this.axis2MessageContext.setWSAMessageId(messageID); }
/*     */ 
/*     */ 
/*     */   
/* 267 */   public String getWSAMessageID() { return this.axis2MessageContext.getMessageID(); }
/*     */ 
/*     */ 
/*     */   
/* 271 */   public String getSoapAction() { return this.axis2MessageContext.getSoapAction(); }
/*     */ 
/*     */ 
/*     */   
/* 275 */   public void setSoapAction(String string) { this.axis2MessageContext.setSoapAction(string); }
/*     */ 
/*     */ 
/*     */   
/* 279 */   public boolean isDoingMTOM() { return this.axis2MessageContext.isDoingMTOM(); }
/*     */ 
/*     */ 
/*     */   
/* 283 */   public boolean isDoingSWA() { return this.axis2MessageContext.isDoingSwA(); }
/*     */ 
/*     */ 
/*     */   
/* 287 */   public void setDoingMTOM(boolean b) { this.axis2MessageContext.setDoingMTOM(b); }
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setDoingSWA(boolean b) { this.axis2MessageContext.setDoingSwA(b); }
/*     */ 
/*     */ 
/*     */   
/* 295 */   public boolean isDoingPOX() { return this.axis2MessageContext.isDoingREST(); }
/*     */ 
/*     */ 
/*     */   
/* 299 */   public void setDoingPOX(boolean b) { this.axis2MessageContext.setDoingREST(b); }
/*     */ 
/*     */ 
/*     */   
/* 303 */   public boolean isSOAP11() { return this.axis2MessageContext.isSOAP11(); }
/*     */ 
/*     */   
/*     */   public void setResponse(boolean b) {
/* 307 */     this.response = b;
/* 308 */     this.axis2MessageContext.setProperty(""synapse.isresponse"", Boolean.valueOf(b));
/*     */   }
/*     */   
/*     */   public boolean isResponse() {
/* 312 */     Object o = this.properties.get(""RESPONSE"");
/* 313 */     if (o != null && o instanceof String && ((String)o).equalsIgnoreCase(""true"")) {
/* 314 */       return true;
/*     */     }
/* 316 */     return this.response;
/*     */   }
/*     */ 
/*     */   
/* 320 */   public void setFaultResponse(boolean b) { this.faultResponse = b; }
/*     */ 
/*     */ 
/*     */   
/* 324 */   public boolean isFaultResponse() { return this.faultResponse; }
/*     */ 
/*     */ 
/*     */   
/* 328 */   public int getTracingState() { return this.tracingState; }
/*     */ 
/*     */ 
/*     */   
/* 332 */   public void setTracingState(int tracingState) { this.tracingState = tracingState; }
/*     */ 
/*     */ 
/*     */   
/* 336 */   public Stack getFaultStack() { return this.faultStack; }
/*     */ 
/*     */ 
/*     */   
/* 340 */   public void pushFaultHandler(FaultHandler fault) { this.faultStack.push(fault); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Log getServiceLog() {
/* 349 */     if (this.serviceLog != null) {
/* 350 */       return this.serviceLog;
/*     */     }
/* 352 */     String serviceName = (String)getProperty(""proxy.name"");
/* 353 */     if (serviceName != null && this.synCfg.getProxyService(serviceName) != null) {
/* 354 */       this.serviceLog = LogFactory.getLog(""SERVICE_LOGGER."" + serviceName);
/* 355 */       return this.serviceLog;
/*     */     } 
/* 357 */     this.serviceLog = LogFactory.getLog(""SERVICE_LOGGER."".substring(0, ""SERVICE_LOGGER."".length() - 1));
/*     */ 
/*     */     
/* 360 */     return this.serviceLog;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 370 */   public void setServiceLog(Log serviceLog) { this.serviceLog = serviceLog; }
/*     */ 
/*     */ 
/*     */   
/* 374 */   public MessageContext getAxis2MessageContext() { return this.axis2MessageContext; }
/*     */ 
/*     */   
/*     */   public void setAxis2MessageContext(MessageContext axisMsgCtx) {
/* 378 */     this.axis2MessageContext = axisMsgCtx;
/* 379 */     Boolean resp = (Boolean)axisMsgCtx.getProperty(""synapse.isresponse"");
/* 380 */     if (resp != null) {
/* 381 */       this.response = resp.booleanValue();
/*     */     }
/*     */   }
/*     */   
/* 385 */   public void setPaused(boolean value) { this.axis2MessageContext.setPaused(value); }
/*     */ 
/*     */ 
/*     */   
/* 389 */   public boolean isPaused() { return this.axis2MessageContext.isPaused(); }
/*     */ 
/*     */ 
/*     */   
/* 393 */   public boolean isServerSide() { return this.axis2MessageContext.isServerSide(); }
/*     */ 
/*     */ 
/*     */   
/* 397 */   public void setServerSide(boolean value) { this.axis2MessageContext.setServerSide(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStringValue(AXIOMXPath xpath, MessageContext synCtx) {
/* 409 */     synchronized (xpath) {
/*     */       
/* 411 */       if (xpath != null) {
/*     */         
/*     */         try {
/* 414 */           GetPropertyFunction getPropertyFunc = new GetPropertyFunction();
/* 415 */           getPropertyFunc.setSynCtx(synCtx);
/*     */ 
/*     */           
/* 418 */           XPathFunctionContext xPathFunctionContext = new XPathFunctionContext();
/* 419 */           xPathFunctionContext.registerFunction(""http://ws.apache.org/ns/synapse"", ""get-property"", (Function)getPropertyFunc);
/* 420 */           xPathFunctionContext.registerFunction(null, ""get-property"", (Function)getPropertyFunc);
/* 421 */           xpath.setFunctionContext((FunctionContext)xPathFunctionContext);
/*     */ 
/*     */           
/* 424 */           xpath.addNamespace(""synapse"", ""http://ws.apache.org/ns/synapse"");
/* 425 */           xpath.addNamespace(""syn"", ""http://ws.apache.org/ns/synapse"");
/*     */         }
/* 427 */         catch (JaxenException je) {
/* 428 */           handleException(""Error setting up the Synapse XPath extension function for XPath : "" + xpath, (Exception)je);
/*     */         } 
/*     */         
/*     */         try {
/* 432 */           Object result = xpath.evaluate(synCtx.getEnvelope());
/* 433 */           if (result == null) {
/* 434 */             return null;
/*     */           }
/* 436 */           StringBuffer textValue = new StringBuffer();
/* 437 */           if (result instanceof List) {
/* 438 */             List list = (List)result;
/* 439 */             Iterator iter = list.iterator();
/* 440 */             while (iter.hasNext()) {
/* 441 */               Object o = iter.next();
/* 442 */               if (o == null && list.size() == 1) {
/* 443 */                 return null;
/*     */               }
/* 445 */               if (o instanceof OMTextImpl) {
/* 446 */                 textValue.append(((OMTextImpl)o).getText()); continue;
/* 447 */               }  if (o instanceof OMElementImpl) {
/* 448 */                 String s = ((OMElementImpl)o).getText();
/* 449 */                 if (s.trim().length() == 0) {
/* 450 */                   s = o.toString();
/*     */                 }
/* 452 */                 textValue.append(s);
/*     */               } 
/*     */             } 
/*     */           } else {
/* 456 */             textValue.append(result.toString());
/*     */           } 
/* 458 */           return textValue.toString();
/*     */         }
/* 460 */         catch (JaxenException je) {
/* 461 */           handleException(""Evaluation of the XPath expression "" + xpath.toString() + "" resulted in an error"", (Exception)je);
/*     */         } 
/*     */       } else {
/*     */         
/* 465 */         handleException(""Invalid (null) XPath expression"");
/*     */       } 
/* 467 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 472 */     log.error(msg, e);
/* 473 */     throw new SynapseException(msg, e);
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 477 */     log.error(msg);
/* 478 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   public String toString() {
/* 482 */     StringBuffer sb = new StringBuffer();
/* 483 */     String separator = ""\n"";
/*     */     
/* 485 */     if (getTo() != null) {
/* 486 */       sb.append(""To: "" + getTo().getAddress());
/*     */     } else {
/* 488 */       sb.append(""To: "");
/* 489 */     }  if (getFrom() != null)
/* 490 */       sb.append(separator + ""From: "" + getFrom().getAddress()); 
/* 491 */     if (getWSAAction() != null)
/* 492 */       sb.append(separator + ""WSAction: "" + getWSAAction()); 
/* 493 */     if (getSoapAction() != null)
/* 494 */       sb.append(separator + ""SOAPAction: "" + getSoapAction()); 
/* 495 */     if (getReplyTo() != null)
/* 496 */       sb.append(separator + ""ReplyTo: "" + getReplyTo().getAddress()); 
/* 497 */     if (getMessageID() != null) {
/* 498 */       sb.append(separator + ""MessageID: "" + getMessageID());
/*     */     }
/* 500 */     SOAPHeader soapHeader = getEnvelope().getHeader();
/* 501 */     if (soapHeader != null) {
/* 502 */       sb.append(separator + ""Headers : "");
/* 503 */       for (Iterator iter = soapHeader.examineAllHeaderBlocks(); iter.hasNext(); ) {
/* 504 */         Object o = iter.next();
/* 505 */         if (o instanceof SOAPHeaderBlock) {
/* 506 */           SOAPHeaderBlock headerBlock = (SOAPHeaderBlock)o;
/* 507 */           sb.append(separator + headerBlock.getLocalName() + "" : "" + headerBlock.getText()); continue;
/* 508 */         }  if (o instanceof OMElement) {
/* 509 */           OMElement headerElem = (OMElement)o;
/* 510 */           sb.append(separator + headerElem.getLocalName() + "" : "" + headerElem.getText());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 515 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\Axis2MessageContext.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2Sender,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.engine.AxisEngine;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2Sender
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(Axis2Sender.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void sendOn(EndpointDefinition endpoint, MessageContext synapseInMessageContext) {
/*     */     try {
/*  55 */       Axis2FlexibleMEPClient.send(endpoint, synapseInMessageContext);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  61 */     catch (Exception e) {
/*  62 */       handleException(""Unexpected error during sending message out"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void sendBack(MessageContext smc) {
/*  72 */     MessageContext messageContext = ((Axis2MessageContext)smc).getAxis2MessageContext();
/*     */ 
/*     */ 
/*     */     
/*  76 */     if (messageContext.isPropertyTrue(""SC_ACCEPTED"") && messageContext.getTransportOut() != null && !messageContext.getTransportOut().getName().startsWith(""http"")) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  82 */     AxisEngine ae = new AxisEngine(messageContext.getConfigurationContext());
/*     */     
/*     */     try {
/*  85 */       messageContext.setProperty(""synapse.isresponse"", Boolean.TRUE);
/*     */ 
/*     */       
/*  88 */       if (smc.isResponse()) {
/*     */         
/*  90 */         StatisticsUtils.processEndPointStatistics(smc);
/*  91 */         StatisticsUtils.processProxyServiceStatistics(smc);
/*  92 */         StatisticsUtils.processAllSequenceStatistics(smc);
/*     */       } 
/*  94 */       Axis2FlexibleMEPClient.removeAddressingHeaders(messageContext);
/*  95 */       messageContext.setMessageID(UUIDGenerator.getUUID());
/*     */ 
/*     */       
/*  98 */       if (messageContext.isEngaged(""rampart"") && messageContext.getEnvelope().getHeader() == null) {
/*     */         
/* 100 */         SOAPFactory fac = messageContext.isSOAP11() ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */         
/* 102 */         fac.createSOAPHeader(messageContext.getEnvelope());
/*     */       } 
/* 104 */       AxisEngine.send(messageContext);
/*     */     }
/* 106 */     catch (AxisFault e) {
/* 107 */       handleException(""Unexpected error sending message back"", (Exception)e);
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg, Exception e) {
/* 112 */     log.error(msg, e);
/* 113 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\Axis2Sender.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.Axis2SynapseEnvironment,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.concurrent.ExecutorService;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.axis2.context.ServiceContext;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.InOutAxisOperation;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.mediators.MediatorWorker;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ import org.apache.synapse.util.concurrent.SynapseThreadPool;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Axis2SynapseEnvironment
/*     */   implements SynapseEnvironment
/*     */ {
/*  50 */   private static final Log log = LogFactory.getLog(Axis2SynapseEnvironment.class);
/*     */   
/*     */   private SynapseConfiguration synapseConfig;
/*     */   
/*     */   private ConfigurationContext configContext;
/*     */   
/*     */   private ExecutorService executorService;
/*     */   
/*     */   private boolean initialized = false;
/*     */   private StatisticsCollector statisticsCollector;
/*     */   
/*     */   public Axis2SynapseEnvironment(SynapseConfiguration synCfg) {
/*  62 */     int coreThreads = 20;
/*  63 */     int maxThreads = 100;
/*  64 */     long keepAlive = 5L;
/*  65 */     int qlength = 10;
/*     */     
/*     */     try {
/*  68 */       qlength = Integer.parseInt(synCfg.getProperty(""synapse.threads.qlen""));
/*  69 */     } catch (Exception ignore) {}
/*     */     
/*     */     try {
/*  72 */       coreThreads = Integer.parseInt(synCfg.getProperty(""synapse.threads.core""));
/*  73 */     } catch (Exception ignore) {}
/*     */     
/*     */     try {
/*  76 */       maxThreads = Integer.parseInt(synCfg.getProperty(""synapse.threads.max""));
/*  77 */     } catch (Exception ignore) {}
/*     */     
/*     */     try {
/*  80 */       keepAlive = Long.parseLong(synCfg.getProperty(""synapse.threads.keepalive""));
/*  81 */     } catch (Exception ignore) {}
/*     */     
/*  83 */     this.executorService = (ExecutorService)new SynapseThreadPool(coreThreads, maxThreads, keepAlive, qlength, synCfg.getProperty(""synapse.threads.group"", ""synapse-thread-group""), synCfg.getProperty(""synapse.threads.idprefix"", ""SynapseWorker""));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Axis2SynapseEnvironment(ConfigurationContext cfgCtx, SynapseConfiguration synapseConfig) {
/*  92 */     this(synapseConfig);
/*  93 */     this.configContext = cfgCtx;
/*  94 */     this.synapseConfig = synapseConfig;
/*     */   }
/*     */   
/*     */   public boolean injectMessage(MessageContext synCtx) {
/*  98 */     if (log.isDebugEnabled()) {
/*  99 */       log.debug(""Injecting MessageContext"");
/*     */     }
/* 101 */     synCtx.setEnvironment(this);
/* 102 */     if (synCtx.isResponse()) {
/*     */       
/* 104 */       StatisticsUtils.processEndPointStatistics(synCtx);
/* 105 */       StatisticsUtils.processProxyServiceStatistics(synCtx);
/* 106 */       StatisticsUtils.processSequenceStatistics(synCtx);
/*     */     } 
/*     */ 
/*     */     
/* 110 */     if (synCtx.getProperty(""proxy.name"") != null) {
/*     */       
/* 112 */       if (synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetOutSequence() != null) {
/*     */ 
/*     */         
/* 115 */         String sequenceName = synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetOutSequence();
/*     */         
/* 117 */         Mediator outSequence = synCtx.getSequence(sequenceName);
/*     */         
/* 119 */         if (outSequence != null) {
/* 120 */           if (log.isDebugEnabled()) {
/* 121 */             log.debug(""Using the sequence named "" + sequenceName + "" for the outgoing message mediation of the proxy service "" + synCtx.getProperty(""proxy.name""));
/*     */           }
/*     */ 
/*     */           
/* 125 */           outSequence.mediate(synCtx);
/*     */         } else {
/* 127 */           log.error(""Unable to find the out-sequence specified by the name "" + sequenceName);
/*     */           
/* 129 */           throw new SynapseException(""Unable to find the out-sequence specified by the name "" + sequenceName);
/*     */         }
/*     */       
/*     */       }
/* 133 */       else if (synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetInLineOutSequence() != null) {
/*     */         
/* 135 */         if (log.isDebugEnabled()) {
/* 136 */           log.debug(""Using the anonymous out-sequence specified in the proxy service "" + synCtx.getProperty(""proxy.name"") + "" for outgoing message mediation"");
/*     */         }
/*     */ 
/*     */         
/* 140 */         synCtx.getConfiguration().getProxyService((String)synCtx.getProperty(""proxy.name"")).getTargetInLineOutSequence().mediate(synCtx);
/*     */       } else {
/*     */         
/* 143 */         if (log.isDebugEnabled()) {
/* 144 */           log.debug(""Proxy service "" + synCtx.getProperty(""proxy.name"") + "" does not specifies an out-sequence - sending the response back"");
/*     */         }
/*     */         
/* 147 */         Axis2Sender.sendBack(synCtx);
/*     */       } 
/*     */     } else {
/*     */       
/* 151 */       if (log.isDebugEnabled()) {
/* 152 */         log.debug(""Using Main Sequence for injected message"");
/*     */       }
/* 154 */       return synCtx.getMainSequence().mediate(synCtx);
/*     */     } 
/* 156 */     return true;
/*     */   }
/*     */   
/*     */   public void injectAsync(MessageContext synCtx, SequenceMediator seq) {
/* 160 */     if (log.isDebugEnabled()) {
/* 161 */       log.debug(""Injecting MessageContext for asynchronous mediation using the : "" + ((seq.getName() == null) ? ""Anonymous"" : seq.getName()) + "" Sequence"");
/*     */     }
/*     */     
/* 164 */     synCtx.setEnvironment(this);
/*     */     
/* 166 */     if (synCtx.isResponse()) {
/*     */       
/* 168 */       StatisticsUtils.processEndPointStatistics(synCtx);
/* 169 */       StatisticsUtils.processProxyServiceStatistics(synCtx);
/* 170 */       StatisticsUtils.processSequenceStatistics(synCtx);
/*     */     } 
/*     */     
/* 173 */     this.executorService.execute((Runnable)new MediatorWorker((Mediator)seq, synCtx));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(EndpointDefinition endpoint, MessageContext synCtx) {
/* 186 */     if (synCtx.isResponse()) {
/*     */       
/* 188 */       if (endpoint != null) {
/*     */         
/* 190 */         StatisticsUtils.processEndPointStatistics(synCtx);
/* 191 */         StatisticsUtils.processProxyServiceStatistics(synCtx);
/* 192 */         StatisticsUtils.processAllSequenceStatistics(synCtx);
/*     */         
/* 194 */         Axis2Sender.sendOn(endpoint, synCtx);
/*     */       } else {
/*     */         
/* 197 */         Axis2Sender.sendBack(synCtx);
/*     */       } 
/*     */     } else {
/* 200 */       Axis2Sender.sendOn(endpoint, synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MessageContext createMessageContext() {
/* 216 */     if (log.isDebugEnabled()) {
/* 217 */       log.debug(""Creating Message Context"");
/*     */     }
/*     */     
/* 220 */     MessageContext axis2MC = new MessageContext();
/*     */     
/* 222 */     axis2MC.setConfigurationContext(this.configContext);
/*     */     
/* 224 */     ServiceContext svcCtx = new ServiceContext();
/* 225 */     OperationContext opCtx = new OperationContext((AxisOperation)new InOutAxisOperation(), svcCtx);
/* 226 */     axis2MC.setServiceContext(svcCtx);
/* 227 */     axis2MC.setOperationContext(opCtx);
/* 228 */     MessageContext mc = new Axis2MessageContext(axis2MC, this.synapseConfig, this);
/* 229 */     mc.setMessageID(UUIDGenerator.getUUID());
/*     */     try {
/* 231 */       mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/* 232 */       mc.getEnvelope().addChild((OMNode)OMAbstractFactory.getSOAP12Factory().createSOAPBody());
/* 233 */     } catch (Exception e) {
/* 234 */       e.printStackTrace();
/*     */     } 
/*     */     
/* 237 */     return mc;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   public StatisticsCollector getStatisticsCollector() { return this.statisticsCollector; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setStatisticsCollector(StatisticsCollector collector) { this.statisticsCollector = collector; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 265 */   public ExecutorService getExecutorService() { return this.executorService; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 273 */   public boolean isInitialized() { return this.initialized; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setInitialized(boolean state) { this.initialized = state; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\Axis2SynapseEnvironment.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.DynamicAxisOperation,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.client.OperationClient;
/*     */ import org.apache.axis2.client.Options;
/*     */ import org.apache.axis2.client.async.Callback;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.context.ServiceContext;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.ClientUtils;
/*     */ import org.apache.axis2.description.OutInAxisOperation;
/*     */ import org.apache.axis2.description.TransportOutDescription;
/*     */ import org.apache.axis2.engine.AxisEngine;
/*     */ import org.apache.axis2.i18n.Messages;
/*     */ import org.apache.axis2.transport.TransportUtils;
/*     */ import org.apache.axis2.util.TargetResolver;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DynamicAxisOperation
/*     */   extends OutInAxisOperation
/*     */ {
/*     */   public DynamicAxisOperation() {}
/*     */   
/*  51 */   public DynamicAxisOperation(QName name) { super(name); }
/*     */ 
/*     */ 
/*     */   
/*  55 */   public OperationClient createClient(ServiceContext sc, Options options) { return new DynamicOperationClient(this, sc, options); }
/*     */ 
/*     */   
/*     */   class DynamicOperationClient
/*     */     extends OperationClient
/*     */   {
/*  61 */     DynamicOperationClient(OutInAxisOperation axisOp, ServiceContext sc, Options options) { super((AxisOperation)axisOp, sc, options); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void addMessageContext(MessageContext mc) throws AxisFault {
/*  68 */       mc.setServiceContext(this.sc);
/*  69 */       if (mc.getMessageID() == null) {
/*  70 */         setMessageID(mc);
/*     */       }
/*  72 */       this.axisOp.registerOperationContext(mc, this.oc);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  79 */     public MessageContext getMessageContext(String messageLabel) throws AxisFault { return this.oc.getMessageContext(messageLabel); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  86 */     public void setCallback(Callback callback) { this.callback = callback; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void executeImpl(boolean block) throws AxisFault {
/*  92 */       if (this.completed) {
/*  93 */         throw new AxisFault(Messages.getMessage(""mepiscomplted""));
/*     */       }
/*     */ 
/*     */       
/*  97 */       MessageContext outMsgCtx = this.oc.getMessageContext(""Out"");
/*  98 */       if (outMsgCtx == null) {
/*  99 */         throw new AxisFault(Messages.getMessage(""outmsgctxnull""));
/*     */       }
/*     */       
/* 102 */       ConfigurationContext cfgCtx = this.sc.getConfigurationContext();
/*     */ 
/*     */       
/* 105 */       outMsgCtx.setOptions(this.options);
/*     */ 
/*     */       
/* 108 */       TargetResolver tr = cfgCtx.getAxisConfiguration().getTargetResolverChain();
/* 109 */       if (tr != null) {
/* 110 */         tr.resolveTarget(outMsgCtx);
/*     */       }
/*     */ 
/*     */       
/* 114 */       TransportOutDescription transportOut = this.options.getTransportOut();
/* 115 */       if (transportOut == null) {
/* 116 */         EndpointReference toEPR = (this.options.getTo() != null) ? this.options.getTo() : outMsgCtx.getTo();
/*     */         
/* 118 */         transportOut = ClientUtils.inferOutTransport(cfgCtx.getAxisConfiguration(), toEPR, outMsgCtx);
/*     */       } 
/*     */       
/* 121 */       outMsgCtx.setTransportOut(transportOut);
/*     */       
/* 123 */       if (this.options.getTransportIn() == null && outMsgCtx.getTransportIn() == null) {
/* 124 */         outMsgCtx.setTransportIn(ClientUtils.inferInTransport(cfgCtx.getAxisConfiguration(), this.options, outMsgCtx));
/*     */       }
/* 126 */       else if (outMsgCtx.getTransportIn() == null) {
/* 127 */         outMsgCtx.setTransportIn(this.options.getTransportIn());
/*     */       } 
/*     */ 
/*     */       
/* 131 */       addReferenceParameters(outMsgCtx);
/*     */       
/* 133 */       if (!this.options.isUseSeparateListener()) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 173 */         SynapseCallbackReceiver callbackReceiver = (SynapseCallbackReceiver)this.axisOp.getMessageReceiver();
/*     */         
/* 175 */         callbackReceiver.addCallback(outMsgCtx.getMessageID(), this.axisCallback);
/* 176 */         send(outMsgCtx);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void send(MessageContext msgctx) throws AxisFault {
/* 185 */       MessageContext responseMessageContext = new MessageContext();
/* 186 */       responseMessageContext.setMessageID(msgctx.getMessageID());
/* 187 */       responseMessageContext.setProperty(""synapse.RelatesToForPox"", msgctx.getMessageID());
/* 188 */       responseMessageContext.setOptions(this.options);
/* 189 */       addMessageContext(responseMessageContext);
/*     */       
/* 191 */       AxisEngine engine = new AxisEngine(msgctx.getConfigurationContext());
/* 192 */       AxisEngine.send(msgctx);
/*     */ 
/*     */ 
/*     */       
/* 196 */       if (msgctx.getProperty(""TRANSPORT_IN"") != null) {
/*     */         
/* 198 */         responseMessageContext.setOperationContext(msgctx.getOperationContext());
/* 199 */         responseMessageContext.setAxisMessage(msgctx.getOperationContext().getAxisOperation().getMessage(""In""));
/*     */ 
/*     */         
/* 202 */         responseMessageContext.setAxisService(msgctx.getAxisService());
/*     */ 
/*     */         
/* 205 */         responseMessageContext.setServerSide(true);
/* 206 */         responseMessageContext.setProperty(""TRANSPORT_OUT"", msgctx.getProperty(""TRANSPORT_OUT""));
/*     */         
/* 208 */         responseMessageContext.setProperty(""OutTransportInfo"", msgctx.getProperty(""OutTransportInfo""));
/*     */ 
/*     */         
/* 211 */         responseMessageContext.setProperty(""synapse.isresponse"", Boolean.TRUE);
/*     */         
/* 213 */         responseMessageContext.setTransportIn(msgctx.getTransportIn());
/* 214 */         responseMessageContext.setTransportOut(msgctx.getTransportOut());
/*     */ 
/*     */         
/* 217 */         responseMessageContext.setDoingREST(msgctx.isDoingREST());
/*     */         
/* 219 */         responseMessageContext.setProperty(""TRANSPORT_IN"", msgctx.getProperty(""TRANSPORT_IN""));
/*     */         
/* 221 */         responseMessageContext.setTransportIn(msgctx.getTransportIn());
/* 222 */         responseMessageContext.setTransportOut(msgctx.getTransportOut());
/*     */ 
/*     */ 
/*     */         
/* 226 */         responseMessageContext.setSoapAction("""");
/*     */         
/* 228 */         if (responseMessageContext.getEnvelope() == null) {
/*     */ 
/*     */ 
/*     */           
/* 232 */           SOAPEnvelope resenvelope = TransportUtils.createSOAPMessage(responseMessageContext);
/*     */ 
/*     */           
/* 235 */           if (resenvelope != null) {
/* 236 */             responseMessageContext.setEnvelope(resenvelope);
/* 237 */             engine = new AxisEngine(msgctx.getConfigurationContext());
/* 238 */             AxisEngine.receive(responseMessageContext);
/* 239 */             if (responseMessageContext.getReplyTo() != null) {
/* 240 */               this.sc.setTargetEPR(responseMessageContext.getReplyTo());
/*     */             }
/*     */           } else {
/* 243 */             throw new AxisFault(Messages.getMessage(""blockingInvocationExpectsResponse""));
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\DynamicAxisOperation.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.MediatorDeployer,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.net.URL;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.deployment.Deployer;
/*     */ import org.apache.axis2.deployment.DeploymentClassLoader;
/*     */ import org.apache.axis2.deployment.DeploymentException;
/*     */ import org.apache.axis2.deployment.repository.util.DeploymentFileData;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.config.xml.MediatorFactory;
/*     */ import org.apache.synapse.config.xml.MediatorFactoryFinder;
/*     */ import org.apache.synapse.config.xml.MediatorSerializer;
/*     */ import org.apache.synapse.config.xml.MediatorSerializerFinder;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorDeployer
/*     */   implements Deployer
/*     */ {
/*  48 */   private static final Log log = LogFactory.getLog(MediatorDeployer.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  53 */   private ConfigurationContext cfgCtx = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  62 */   public void init(ConfigurationContext configurationContext) { this.cfgCtx = configurationContext; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void deploy(DeploymentFileData deploymentFileData) throws DeploymentException {
/*  75 */     log.info(""Loading mediator from: "" + deploymentFileData.getAbsolutePath());
/*     */ 
/*     */     
/*  78 */     ClassLoader prevCl = Thread.currentThread().getContextClassLoader();
/*     */ 
/*     */     
/*     */     try {
/*  82 */       DeploymentClassLoader urlCl = new DeploymentClassLoader(new URL[] { deploymentFileData.getFile().toURL() }, null, prevCl);
/*     */       
/*  84 */       Thread.currentThread().setContextClassLoader((ClassLoader)urlCl);
/*     */ 
/*     */       
/*  87 */       URL facURL = urlCl.findResource(""META-INF/services/org.apache.synapse.config.xml.MediatorFactory"");
/*     */       
/*  89 */       if (facURL != null) {
/*  90 */         InputStream facStream = facURL.openStream();
/*  91 */         InputStreamReader facreader = new InputStreamReader(facStream);
/*     */         
/*  93 */         StringBuffer facSB = new StringBuffer();
/*     */         int c;
/*  95 */         while ((c = facreader.read()) != -1) {
/*  96 */           facSB.append((char)c);
/*     */         }
/*     */         
/*  99 */         String[] facClassName = facSB.toString().split(""\n"");
/* 100 */         for (int i = 0; i < facClassName.length; i++) {
/* 101 */           log.info(""Registering the Mediator factory: "" + facClassName[i]);
/* 102 */           Class<MediatorFactory> facClass = urlCl.loadClass(facClassName[i]);
/* 103 */           MediatorFactory facInst = facClass.newInstance();
/* 104 */           MediatorFactoryFinder.getInstance().getFactoryMap().put(facInst.getTagQName(), facClass);
/*     */           
/* 106 */           log.info(""Mediator loaded and registered for the tag name: "" + facInst.getTagQName());
/*     */         } 
/*     */       } else {
/*     */         
/* 110 */         handleException(""Unable to find the MediatorFactory implementation. Unable to register the MediatorFactory with the FactoryFinder"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 115 */       URL serURL = urlCl.findResource(""META-INF/services/org.apache.synapse.config.xml.MediatorSerializer"");
/*     */       
/* 117 */       if (serURL != null) {
/* 118 */         InputStream serStream = serURL.openStream();
/* 119 */         InputStreamReader serReader = new InputStreamReader(serStream);
/*     */         
/* 121 */         StringBuffer serSB = new StringBuffer();
/*     */         int c;
/* 123 */         while ((c = serReader.read()) != -1) {
/* 124 */           serSB.append((char)c);
/*     */         }
/*     */         
/* 127 */         String[] serClassName = serSB.toString().split(""\n"");
/* 128 */         for (int i = 0; i < serClassName.length; i++) {
/* 129 */           log.info(""Registering the Mediator serializer: "" + serClassName[i]);
/* 130 */           Class<MediatorSerializer> serClass = urlCl.loadClass(serClassName[i]);
/* 131 */           MediatorSerializer serInst = serClass.newInstance();
/* 132 */           MediatorSerializerFinder.getInstance().getSerializerMap().put(serInst.getMediatorClassName(), serInst);
/*     */           
/* 134 */           log.info(""Mediator loaded and registered for the serialization as: "" + serInst.getMediatorClassName());
/*     */         }
/*     */       
/*     */       }
/* 138 */       else if (log.isDebugEnabled()) {
/* 139 */         log.debug(""Unable to find the MediatorSerializer implementation. Unable to register the MediatorSerializer with the SerializerFinder"");
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 144 */     catch (IOException e) {
/* 145 */       handleException(""I/O error in reading the mediator jar file"", e);
/* 146 */     } catch (ClassNotFoundException e) {
/* 147 */       handleException(""Unable to find the specified class on the path or in the jar file"", e);
/* 148 */     } catch (IllegalAccessException e) {
/* 149 */       handleException(""Unable to load the class from the jar"", e);
/* 150 */     } catch (InstantiationException e) {
/* 151 */       handleException(""Unable to instantiate the class specified"", e);
/*     */     } finally {
/*     */       
/* 154 */       if (log.isDebugEnabled()) {
/* 155 */         log.debug(""Restoring the context class loader to the original"");
/*     */       }
/* 157 */       Thread.currentThread().setContextClassLoader(prevCl);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDirectory(String string) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtension(String string) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void unDeploy(String string) throws DeploymentException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void handleException(String message, Exception e) throws DeploymentException {
/* 190 */     if (log.isDebugEnabled()) {
/* 191 */       log.debug(message, e);
/*     */     }
/* 193 */     throw new DeploymentException(message, e);
/*     */   }
/*     */   
/*     */   private void handleException(String message) throws DeploymentException {
/* 197 */     if (log.isDebugEnabled()) {
/* 198 */       log.debug(message);
/*     */     }
/* 200 */     throw new DeploymentException(message);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\MediatorDeployer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.MessageContextCreatorForAxis2,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.SynapseConfiguration;
/*    */ import org.apache.synapse.core.SynapseEnvironment;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MessageContextCreatorForAxis2
/*    */ {
/* 37 */   private static final Log log = LogFactory.getLog(MessageContextCreatorForAxis2.class);
/*    */   
/* 39 */   private static SynapseConfiguration synCfg = null;
/* 40 */   private static SynapseEnvironment synEnv = null;
/*    */ 
/*    */ 
/*    */   
/*    */   public static MessageContext getSynapseMessageContext(MessageContext axisMsgCtx) throws AxisFault {
/* 45 */     if (synCfg == null || synEnv == null) {
/* 46 */       String msg = ""Synapse environment has not initialized properly.."";
/* 47 */       log.fatal(msg);
/* 48 */       throw new SynapseException(msg);
/*    */     } 
/*    */     
/* 51 */     return new Axis2MessageContext(axisMsgCtx, synCfg, synEnv);
/*    */   }
/*    */ 
/*    */   
/* 55 */   public static void setSynConfig(SynapseConfiguration synCfg) { MessageContextCreatorForAxis2.synCfg = synCfg; }
/*    */ 
/*    */ 
/*    */   
/* 59 */   public static void setSynEnv(SynapseEnvironment synEnv) { MessageContextCreatorForAxis2.synEnv = synEnv; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\MessageContextCreatorForAxis2.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.ProxyService,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.description.AxisBindingOperation;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.description.AxisEndpoint;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.InOutAxisOperation;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.description.PolicyInclude;
/*     */ import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;
/*     */ import org.apache.axis2.description.WSDL20ToAxisServiceBuilder;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.neethi.PolicyEngine;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyService
/*     */ {
/*  71 */   private static final Log log = LogFactory.getLog(ProxyService.class);
/*  72 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */   
/*     */   private final Log serviceLog;
/*     */ 
/*     */ 
/*     */   
/*     */   private String name;
/*     */ 
/*     */   
/*     */   private String description;
/*     */ 
/*     */   
/*     */   private ArrayList transports;
/*     */ 
/*     */   
/*  89 */   private String targetEndpoint = null;
/*     */ 
/*     */ 
/*     */   
/*  93 */   private String targetInSequence = null;
/*     */ 
/*     */ 
/*     */   
/*  97 */   private String targetOutSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 101 */   private String targetFaultSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 105 */   private Endpoint targetInLineEndpoint = null;
/*     */ 
/*     */ 
/*     */   
/* 109 */   private SequenceMediator targetInLineInSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 113 */   private SequenceMediator targetInLineOutSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 117 */   private SequenceMediator targetInLineFaultSequence = null;
/*     */ 
/*     */ 
/*     */   
/* 121 */   private Map parameters = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */   
/*     */   private String wsdlKey;
/*     */ 
/*     */ 
/*     */   
/*     */   private URI wsdlURI;
/*     */ 
/*     */ 
/*     */   
/*     */   private Object inLineWSDL;
/*     */ 
/*     */ 
/*     */   
/* 137 */   private List serviceLevelPolicies = new ArrayList();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean wsRMEnabled = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean wsSecEnabled = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean startOnLoad = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean running = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String ALL_TRANSPORTS = ""all"";
/*     */ 
/*     */   
/* 160 */   private int statisticsState = 2;
/*     */ 
/*     */ 
/*     */   
/* 164 */   protected int traceState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ProxyService(String name) {
/* 173 */     this.name = name;
/* 174 */     this.serviceLog = LogFactory.getLog(""SERVICE_LOGGER."" + name);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AxisService buildAxisService(SynapseConfiguration synCfg, AxisConfiguration axisCfg) {
/* 186 */     auditInfo(""Building Axis service for Proxy service : "" + this.name);
/* 187 */     AxisService proxyService = null;
/*     */ 
/*     */     
/* 190 */     if (trace()) {
/* 191 */       trace.info(""Loading the WSDL : "" + ((this.wsdlKey != null) ? ("" key = "" + this.wsdlKey) : ((this.wsdlURI != null) ? ("" URI = "" + this.wsdlURI) : "" <Inlined>"")));
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 196 */     InputStream wsdlInputStream = null;
/* 197 */     OMElement wsdlElement = null;
/*     */     
/* 199 */     if (this.wsdlKey != null) {
/* 200 */       synCfg.getEntryDefinition(this.wsdlKey);
/* 201 */       Object keyObject = synCfg.getEntry(this.wsdlKey);
/* 202 */       if (keyObject instanceof OMElement) {
/* 203 */         wsdlElement = (OMElement)keyObject;
/*     */       }
/* 205 */     } else if (this.inLineWSDL != null) {
/* 206 */       wsdlElement = (OMElement)this.inLineWSDL;
/* 207 */     } else if (this.wsdlURI != null) {
/*     */       try {
/* 209 */         URL url = this.wsdlURI.toURL();
/* 210 */         wsdlElement = SynapseConfigUtils.getOMElementFromURL(url.toString());
/* 211 */       } catch (MalformedURLException e) {
/* 212 */         handleException(""Malformed URI for wsdl"", e);
/* 213 */       } catch (IOException e) {
/* 214 */         handleException(""Error reading from wsdl URI"", e);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 219 */     if (wsdlElement != null) {
/* 220 */       OMNamespace wsdlNamespace = wsdlElement.getNamespace();
/*     */ 
/*     */       
/* 223 */       ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */       try {
/* 225 */         if (trace()) trace.info(""Serializing wsdlElement found to build an Axis2 service""); 
/* 226 */         wsdlElement.serialize(baos);
/* 227 */         wsdlInputStream = new ByteArrayInputStream(baos.toByteArray());
/* 228 */       } catch (XMLStreamException e) {
/* 229 */         handleException(""Error converting to a StreamSource"", e);
/*     */       } 
/*     */       
/* 232 */       if (wsdlInputStream != null) {
/*     */         
/*     */         try {
/*     */           
/* 236 */           if (trace()) trace.info(""WSDL Namespace is : "" + wsdlNamespace.getNamespaceURI());
/*     */           
/* 238 */           if (wsdlNamespace != null) {
/* 239 */             boolean isWSDL11 = false;
/* 240 */             Object object = null;
/*     */             
/* 242 */             if (""http://www.w3.org/ns/wsdl"".equals(wsdlNamespace.getNamespaceURI())) {
/*     */               
/* 244 */               WSDL20ToAxisServiceBuilder wSDL20ToAxisServiceBuilder = new WSDL20ToAxisServiceBuilder(wsdlInputStream, null, null);
/*     */               
/* 246 */               wSDL20ToAxisServiceBuilder.setBaseUri((this.wsdlURI != null) ? this.wsdlURI.toString() : """");
/*     */             }
/* 248 */             else if (""http://schemas.xmlsoap.org/wsdl/"".equals(wsdlNamespace.getNamespaceURI())) {
/*     */               
/* 250 */               object = new WSDL11ToAxisServiceBuilder(wsdlInputStream, null, null);
/*     */               
/* 252 */               isWSDL11 = true;
/*     */             } else {
/* 254 */               handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
/*     */             } 
/*     */             
/* 257 */             if (object == null) {
/* 258 */               throw new SynapseException(""Could not get the WSDL to Axis Service Builder"");
/*     */             }
/*     */ 
/*     */             
/* 262 */             if (trace()) {
/* 263 */               trace.info(""Populating Axis2 service using WSDL"");
/* 264 */               if (trace.isTraceEnabled()) {
/* 265 */                 trace.trace(""WSDL : "" + wsdlElement.toString());
/*     */               }
/*     */             } 
/* 268 */             proxyService = object.populateService();
/* 269 */             List schemaList = proxyService.getSchema();
/* 270 */             if (schemaList != null && schemaList.size() > 0)
/*     */             {
/*     */ 
/*     */               
/* 274 */               proxyService.setSchemaTargetNamespace(proxyService.getSchema(0).getTargetNamespace());
/*     */             }
/*     */             
/* 277 */             proxyService.setWsdlFound(true);
/*     */             
/* 279 */             if (isWSDL11) {
/*     */ 
/*     */               
/* 282 */               Collection endpoints = proxyService.getEndpoints().values();
/* 283 */               Iterator<AxisEndpoint> iter = endpoints.iterator();
/* 284 */               while (iter.hasNext()) {
/* 285 */                 AxisEndpoint endpoint = iter.next();
/* 286 */                 Iterator<AxisBindingOperation> children = endpoint.getBinding().getChildren();
/* 287 */                 while (children.hasNext()) {
/* 288 */                   AxisBindingOperation axisBindingOperation = children.next();
/*     */                   
/* 290 */                   axisBindingOperation.setProperty(""whttp:ignoreUncited"", new Boolean(false));
/*     */                 }
/*     */               
/*     */               } 
/*     */             } 
/*     */           } else {
/*     */             
/* 297 */             handleException(""Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0"");
/*     */           }
/*     */         
/* 300 */         } catch (AxisFault af) {
/* 301 */           handleException(""Error building service from WSDL"", (Exception)af);
/* 302 */         } catch (IOException ioe) {
/* 303 */           handleException(""Error reading WSDL"", ioe);
/*     */         }
/*     */       
/*     */       }
/*     */     } else {
/*     */       
/* 309 */       if (trace()) trace.info(""Did not find a WSDL. Assuming a POX or Legacy service""); 
/* 310 */       proxyService = new AxisService();
/* 311 */       InOutAxisOperation inOutAxisOperation = new InOutAxisOperation(new QName(""mediate""));
/* 312 */       proxyService.addOperation((AxisOperation)inOutAxisOperation);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 317 */     if (proxyService == null) {
/* 318 */       throw new SynapseException(""Could not create a proxy service"");
/*     */     }
/* 320 */     proxyService.setName(this.name);
/* 321 */     if (this.description != null) {
/* 322 */       proxyService.setDocumentation(this.description);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 328 */     if (this.transports != null && this.transports.size() != 0) {
/*     */ 
/*     */       
/* 331 */       if (trace()) trace.info(""Exposing transports : "" + this.transports); 
/* 332 */       proxyService.setExposedTransports(this.transports);
/*     */     } 
/*     */ 
/*     */     
/* 336 */     if (trace()) trace.info(""Setting service parameters : "" + this.parameters); 
/* 337 */     Iterator<String> iter = this.parameters.keySet().iterator();
/* 338 */     while (iter.hasNext()) {
/* 339 */       String name = iter.next();
/* 340 */       Object value = this.parameters.get(name);
/*     */       
/* 342 */       Parameter p = new Parameter();
/* 343 */       p.setName(name);
/* 344 */       p.setValue(value);
/*     */       
/*     */       try {
/* 347 */         proxyService.addParameter(p);
/* 348 */       } catch (AxisFault af) {
/* 349 */         handleException(""Error setting parameter : "" + name + """" + ""to proxy service as a Parameter"", (Exception)af);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 354 */     if (trace()) trace.info(""Setting service level policies : "" + this.serviceLevelPolicies);
/*     */ 
/*     */     
/* 357 */     if (!this.serviceLevelPolicies.isEmpty()) {
/* 358 */       Policy svcEffectivePolicy = null;
/* 359 */       iter = this.serviceLevelPolicies.iterator();
/*     */       
/* 361 */       while (iter.hasNext()) {
/* 362 */         String policyKey = iter.next();
/* 363 */         synCfg.getEntryDefinition(policyKey);
/* 364 */         Object policyProp = synCfg.getEntry(policyKey);
/* 365 */         if (policyProp != null) {
/* 366 */           if (svcEffectivePolicy == null) {
/* 367 */             svcEffectivePolicy = PolicyEngine.getPolicy(SynapseConfigUtils.getStreamSource(policyProp).getInputStream());
/*     */             continue;
/*     */           } 
/* 370 */           svcEffectivePolicy = svcEffectivePolicy.merge(PolicyEngine.getPolicy(SynapseConfigUtils.getStreamSource(policyProp).getInputStream()));
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 375 */       PolicyInclude pi = proxyService.getPolicyInclude();
/* 376 */       if (pi != null && svcEffectivePolicy != null) {
/* 377 */         if (trace() && 
/* 378 */           trace.isTraceEnabled()) {
/* 379 */           trace.trace(""Effective policy applied : "" + svcEffectivePolicy);
/*     */         }
/*     */         
/* 382 */         pi.addPolicyElement(3, svcEffectivePolicy);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 387 */     ProxyServiceMessageReceiver msgRcvr = new ProxyServiceMessageReceiver();
/* 388 */     msgRcvr.setName(this.name);
/* 389 */     msgRcvr.setProxy(this);
/*     */     
/* 391 */     iter = proxyService.getOperations();
/* 392 */     while (iter.hasNext()) {
/* 393 */       AxisOperation op = (AxisOperation)iter.next();
/* 394 */       op.setMessageReceiver(msgRcvr);
/*     */     } 
/*     */     
/*     */     try {
/* 398 */       auditInfo(""Adding service "" + this.name + "" to the Axis2 configuration"");
/* 399 */       axisCfg.addService(proxyService);
/* 400 */       setRunning(true);
/* 401 */     } catch (AxisFault axisFault) {
/*     */       try {
/* 403 */         if (axisCfg.getService(proxyService.getName()) != null) {
/* 404 */           if (trace()) trace.info(""Removing service "" + this.name + "" due to error : "" + axisFault.getMessage());
/*     */           
/* 406 */           axisCfg.removeService(proxyService.getName());
/*     */         } 
/* 408 */       } catch (AxisFault ignore) {}
/* 409 */       handleException(""Error adding Proxy service to the Axis2 engine"", (Exception)axisFault);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 414 */     if (this.wsRMEnabled) {
/* 415 */       auditInfo(""WS-Reliable messaging is enabled for service : "" + this.name);
/*     */       try {
/* 417 */         proxyService.engageModule(axisCfg.getModule(""sandesha2""), (AxisDescription)axisCfg);
/*     */       }
/* 419 */       catch (AxisFault axisFault) {
/* 420 */         handleException(""Error loading WS RM module on proxy service : "" + this.name, (Exception)axisFault);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 425 */     if (this.wsSecEnabled) {
/* 426 */       auditInfo(""WS-Security is enabled for service : "" + this.name);
/*     */       try {
/* 428 */         proxyService.engageModule(axisCfg.getModule(""rampart""), (AxisDescription)axisCfg);
/*     */       }
/* 430 */       catch (AxisFault axisFault) {
/* 431 */         handleException(""Error loading WS Sec module on proxy service : "" + this.name, (Exception)axisFault);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 436 */     auditInfo(""Successfully created the Axis2 service for Proxy service : "" + this.name);
/* 437 */     return proxyService;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void start(SynapseConfiguration synCfg) {
/* 445 */     AxisConfiguration axisConfig = synCfg.getAxisConfiguration();
/* 446 */     if (axisConfig != null) {
/* 447 */       axisConfig.getServiceForActivation(getName()).setActive(true);
/* 448 */       setRunning(true);
/* 449 */       auditInfo(""Started the proxy service : "" + this.name);
/*     */     } else {
/* 451 */       auditWarn(""Unable to start proxy service : "" + this.name + "". Couldn't access Axis configuration"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stop(SynapseConfiguration synCfg) {
/* 461 */     AxisConfiguration axisConfig = synCfg.getAxisConfiguration();
/* 462 */     if (axisConfig != null) {
/*     */       try {
/* 464 */         AxisService as = axisConfig.getService(getName());
/* 465 */         if (as != null) {
/* 466 */           as.setActive(false);
/*     */         }
/* 468 */         setRunning(false);
/* 469 */         auditInfo(""Started the proxy service : "" + this.name);
/* 470 */       } catch (AxisFault axisFault) {
/* 471 */         handleException(""Error stopping the proxy service : "" + this.name, (Exception)axisFault);
/*     */       } 
/*     */     } else {
/* 474 */       auditWarn(""Unable to stop proxy service : "" + this.name + "". Couldn't access Axis configuration"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 480 */     this.serviceLog.error(msg);
/* 481 */     log.error(msg);
/* 482 */     if (trace()) trace.error(msg); 
/* 483 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 487 */     this.serviceLog.error(msg);
/* 488 */     log.error(msg, e);
/* 489 */     if (trace()) trace.error(msg + "" :: "" + e.getMessage()); 
/* 490 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void auditInfo(String message) {
/* 498 */     log.info(message);
/* 499 */     this.serviceLog.info(message);
/* 500 */     if (trace()) {
/* 501 */       trace.info(message);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void auditWarn(String message) {
/* 510 */     log.warn(message);
/* 511 */     this.serviceLog.warn(message);
/* 512 */     if (trace()) {
/* 513 */       trace.warn(message);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 522 */   private boolean trace() { return (this.traceState == 1); }
/*     */ 
/*     */ 
/*     */   
/* 526 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 530 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/* 534 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */   
/* 538 */   public ArrayList getTransports() { return this.transports; }
/*     */ 
/*     */ 
/*     */   
/* 542 */   public void addParameter(String name, Object value) { this.parameters.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 546 */   public Map getParameterMap() { return this.parameters; }
/*     */ 
/*     */ 
/*     */   
/* 550 */   public void setTransports(ArrayList transports) { this.transports = transports; }
/*     */ 
/*     */ 
/*     */   
/* 554 */   public String getTargetEndpoint() { return this.targetEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 558 */   public void setTargetEndpoint(String targetEndpoint) { this.targetEndpoint = targetEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 562 */   public String getTargetInSequence() { return this.targetInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 566 */   public void setTargetInSequence(String targetInSequence) { this.targetInSequence = targetInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 570 */   public String getTargetOutSequence() { return this.targetOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 574 */   public void setTargetOutSequence(String targetOutSequence) { this.targetOutSequence = targetOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 578 */   public String getWSDLKey() { return this.wsdlKey; }
/*     */ 
/*     */ 
/*     */   
/* 582 */   public void setWSDLKey(String wsdlKey) { this.wsdlKey = wsdlKey; }
/*     */ 
/*     */ 
/*     */   
/* 586 */   public List getServiceLevelPolicies() { return this.serviceLevelPolicies; }
/*     */ 
/*     */ 
/*     */   
/* 590 */   public void addServiceLevelPolicy(String serviceLevelPolicy) { this.serviceLevelPolicies.add(serviceLevelPolicy); }
/*     */ 
/*     */ 
/*     */   
/* 594 */   public boolean isWsRMEnabled() { return this.wsRMEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 598 */   public void setWsRMEnabled(boolean wsRMEnabled) { this.wsRMEnabled = wsRMEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 602 */   public boolean isWsSecEnabled() { return this.wsSecEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 606 */   public void setWsSecEnabled(boolean wsSecEnabled) { this.wsSecEnabled = wsSecEnabled; }
/*     */ 
/*     */ 
/*     */   
/* 610 */   public boolean isStartOnLoad() { return this.startOnLoad; }
/*     */ 
/*     */ 
/*     */   
/* 614 */   public void setStartOnLoad(boolean startOnLoad) { this.startOnLoad = startOnLoad; }
/*     */ 
/*     */ 
/*     */   
/* 618 */   public boolean isRunning() { return this.running; }
/*     */ 
/*     */ 
/*     */   
/* 622 */   public void setRunning(boolean running) { this.running = running; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 631 */   public int getStatisticsState() { return this.statisticsState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 640 */   public void setStatisticsState(int statisticsState) { this.statisticsState = statisticsState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 649 */   public int getTraceState() { return this.traceState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 658 */   public void setTraceState(int traceState) { this.traceState = traceState; }
/*     */ 
/*     */ 
/*     */   
/* 662 */   public String getTargetFaultSequence() { return this.targetFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 666 */   public void setTargetFaultSequence(String targetFaultSequence) { this.targetFaultSequence = targetFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 670 */   public Object getInLineWSDL() { return this.inLineWSDL; }
/*     */ 
/*     */ 
/*     */   
/* 674 */   public void setInLineWSDL(Object inLineWSDL) { this.inLineWSDL = inLineWSDL; }
/*     */ 
/*     */ 
/*     */   
/* 678 */   public URI getWsdlURI() { return this.wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 682 */   public void setWsdlURI(URI wsdlURI) { this.wsdlURI = wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 686 */   public Endpoint getTargetInLineEndpoint() { return this.targetInLineEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 690 */   public void setTargetInLineEndpoint(Endpoint targetInLineEndpoint) { this.targetInLineEndpoint = targetInLineEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 694 */   public SequenceMediator getTargetInLineInSequence() { return this.targetInLineInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 698 */   public void setTargetInLineInSequence(SequenceMediator targetInLineInSequence) { this.targetInLineInSequence = targetInLineInSequence; }
/*     */ 
/*     */ 
/*     */   
/* 702 */   public SequenceMediator getTargetInLineOutSequence() { return this.targetInLineOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 706 */   public void setTargetInLineOutSequence(SequenceMediator targetInLineOutSequence) { this.targetInLineOutSequence = targetInLineOutSequence; }
/*     */ 
/*     */ 
/*     */   
/* 710 */   public SequenceMediator getTargetInLineFaultSequence() { return this.targetInLineFaultSequence; }
/*     */ 
/*     */ 
/*     */   
/* 714 */   public void setTargetInLineFaultSequence(SequenceMediator targetInLineFaultSequence) { this.targetInLineFaultSequence = targetInLineFaultSequence; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\ProxyService.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.ProxyServiceMessageReceiver,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceMessageReceiver
/*     */   extends SynapseMessageReceiver
/*     */ {
/*  35 */   private static final Log log = LogFactory.getLog(ProxyServiceMessageReceiver.class);
/*  36 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*  39 */   private String name = null;
/*     */   
/*  41 */   private ProxyService proxy = null;
/*     */ 
/*     */   
/*     */   public void receive(MessageContext mc) throws AxisFault {
/*  45 */     boolean traceOn = (this.proxy.getTraceState() == 1);
/*  46 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  48 */     String remoteAddr = (String)mc.getProperty(""REMOTE_ADDR"");
/*     */ 
/*     */     
/*  51 */     if (traceOrDebugOn) {
/*  52 */       traceOrDebug(traceOn, ""Proxy Service "" + this.name + "" received a new message"" + ((remoteAddr != null) ? ("" from : "" + remoteAddr) : ""...""));
/*     */       
/*  54 */       traceOrDebug(traceOn, ""Message To: "" + ((mc.getTo() != null) ? mc.getTo().getAddress() : ""null""));
/*     */       
/*  56 */       traceOrDebug(traceOn, ""SOAPAction: "" + ((mc.getSoapAction() != null) ? mc.getSoapAction() : ""null""));
/*     */       
/*  58 */       traceOrDebug(traceOn, ""WSA-Action: "" + ((mc.getWSAAction() != null) ? mc.getWSAAction() : ""null""));
/*     */ 
/*     */       
/*  61 */       if (traceOn && trace.isTraceEnabled()) {
/*  62 */         String[] cids = mc.getAttachmentMap().getAllContentIDs();
/*  63 */         if (cids != null && cids.length > 0) {
/*  64 */           for (int i = 0; i < cids.length; i++) {
/*  65 */             trace.trace(""With attachment content ID : "" + cids[i]);
/*     */           }
/*     */         }
/*  68 */         trace.trace(""Envelope : "" + mc.getEnvelope());
/*     */       } 
/*     */     } 
/*     */     
/*  72 */     MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);
/*     */ 
/*     */     
/*  75 */     Log serviceLog = LogFactory.getLog(""SERVICE_LOGGER."" + this.name);
/*  76 */     ((Axis2MessageContext)synCtx).setServiceLog(serviceLog);
/*     */     
/*  78 */     synCtx.setProperty(""proxy.name"", this.name);
/*  79 */     synCtx.setTracingState(this.proxy.getTraceState());
/*     */ 
/*     */     
/*     */     try {
/*  83 */       boolean statsOn = (1 == this.proxy.getStatisticsState());
/*  84 */       if (statsOn) {
/*  85 */         ProxyServiceStatisticsStack proxyServiceStatisticsStack = new ProxyServiceStatisticsStack();
/*     */         
/*  87 */         boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  88 */         proxyServiceStatisticsStack.put(this.name, System.currentTimeMillis(), !synCtx.isResponse(), statsOn, isFault);
/*     */         
/*  90 */         synCtx.setProperty(""synapse.proxy.stats"", proxyServiceStatisticsStack);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*  95 */       if (this.proxy.getTargetFaultSequence() != null) {
/*     */         
/*  97 */         Mediator faultSequence = synCtx.getSequence(this.proxy.getTargetFaultSequence());
/*  98 */         if (faultSequence != null) {
/*  99 */           if (traceOrDebugOn) {
/* 100 */             traceOrDebug(traceOn, ""Setting the fault-sequence to : "" + faultSequence);
/*     */           }
/*     */           
/* 103 */           synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCtx.getSequence(this.proxy.getTargetFaultSequence())));
/*     */ 
/*     */         
/*     */         }
/*     */         else {
/*     */ 
/*     */           
/* 110 */           traceOrDebug(traceOn, ""Unable to find fault-sequence : "" + this.proxy.getTargetFaultSequence() + ""; using default fault sequence"");
/*     */           
/* 112 */           synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCtx.getSequence(""fault"")));
/*     */         }
/*     */       
/*     */       }
/* 116 */       else if (this.proxy.getTargetInLineFaultSequence() != null) {
/* 117 */         if (traceOrDebugOn) {
/* 118 */           traceOrDebug(traceOn, ""Setting specified anonymous fault-sequence for proxy"");
/*     */         }
/* 120 */         synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler((Mediator)this.proxy.getTargetInLineFaultSequence()));
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 125 */       if (this.proxy.getTargetInSequence() != null) {
/*     */         
/* 127 */         Mediator inSequence = synCtx.getSequence(this.proxy.getTargetInSequence());
/* 128 */         if (inSequence != null) {
/* 129 */           traceOrDebug(traceOn, ""Using sequence named : "" + this.proxy.getTargetInSequence() + "" for incoming message mediation"");
/*     */           
/* 131 */           inSequence.mediate(synCtx);
/*     */         } else {
/*     */           
/* 134 */           handleException(""Unable to find in-sequence : "" + this.proxy.getTargetInSequence(), synCtx);
/*     */         }
/*     */       
/* 137 */       } else if (this.proxy.getTargetInLineInSequence() != null) {
/* 138 */         traceOrDebug(traceOn, ""Using the anonymous in-sequence of the proxy service for mediation"");
/*     */         
/* 140 */         this.proxy.getTargetInLineInSequence().mediate(synCtx);
/*     */       } 
/*     */       
/* 143 */       if (this.proxy.getTargetEndpoint() != null) {
/* 144 */         Endpoint endpoint = synCtx.getEndpoint(this.proxy.getTargetEndpoint());
/*     */         
/* 146 */         if (endpoint != null) {
/* 147 */           traceOrDebug(traceOn, ""Forwarding message to the endpoint : "" + this.proxy.getTargetEndpoint());
/*     */           
/* 149 */           endpoint.send(synCtx);
/*     */         } else {
/*     */           
/* 152 */           handleException(""Unable to find the endpoint specified : "" + this.proxy.getTargetEndpoint(), synCtx);
/*     */         }
/*     */       
/*     */       }
/* 156 */       else if (this.proxy.getTargetInLineEndpoint() != null) {
/* 157 */         traceOrDebug(traceOn, ""Forwarding the message to the anonymous endpoint of the proxy service"");
/*     */         
/* 159 */         this.proxy.getTargetInLineEndpoint().send(synCtx);
/*     */       }
/*     */     
/* 162 */     } catch (SynapseException syne) {
/*     */       
/* 164 */       if (!synCtx.getFaultStack().isEmpty()) {
/* 165 */         warn(traceOn, ""Executing fault handler due to exception encountered"", synCtx);
/* 166 */         ((FaultHandler)synCtx.getFaultStack().pop()).handleFault(synCtx, (Exception)syne);
/*     */       } else {
/*     */         
/* 169 */         warn(traceOn, ""Exception encountered but no fault handler found - message dropped"", synCtx);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setProxy(ProxyService proxy) { this.proxy = proxy; }
/*     */ 
/*     */   
/*     */   private void traceOrDebug(boolean traceOn, String msg) {
/* 193 */     if (traceOn) {
/* 194 */       trace.info(msg);
/*     */     }
/* 196 */     if (log.isDebugEnabled()) {
/* 197 */       log.debug(msg);
/*     */     }
/*     */   }
/*     */   
/*     */   private void warn(boolean traceOn, String msg, MessageContext msgContext) {
/* 202 */     if (traceOn) {
/* 203 */       trace.warn(msg);
/*     */     }
/* 205 */     if (log.isDebugEnabled()) {
/* 206 */       log.warn(msg);
/*     */     }
/* 208 */     if (msgContext.getServiceLog() != null) {
/* 209 */       msgContext.getServiceLog().warn(msg);
/*     */     }
/*     */   }
/*     */   
/*     */   private void handleException(String msg, MessageContext msgContext) {
/* 214 */     log.error(msg);
/* 215 */     if (msgContext.getServiceLog() != null) {
/* 216 */       msgContext.getServiceLog().error(msg);
/*     */     }
/* 218 */     if (this.proxy.getTraceState() == 1) {
/* 219 */       trace.error(msg);
/*     */     }
/* 221 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\ProxyServiceMessageReceiver.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SOAPUtils,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPFault;
/*     */ import org.apache.axiom.soap.SOAPFaultCode;
/*     */ import org.apache.axiom.soap.SOAPFaultReason;
/*     */ import org.apache.axiom.soap.SOAPFaultText;
/*     */ import org.apache.axiom.soap.SOAPFaultValue;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SOAPUtils
/*     */ {
/*  36 */   private static final Log log = LogFactory.getLog(SOAPUtils.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void convertSoapVersion(MessageContext axisOutMsgCtx, String soapVersionURI) throws AxisFault {
/*  51 */     if (""http://www.w3.org/2003/05/soap-envelope"".equals(soapVersionURI)) {
/*  52 */       convertSOAP11toSOAP12(axisOutMsgCtx);
/*  53 */     } else if (""http://schemas.xmlsoap.org/soap/envelope/"".equals(soapVersionURI)) {
/*  54 */       convertSOAP12toSOAP11(axisOutMsgCtx);
/*     */     } else {
/*  56 */       throw new SynapseException(""Invalid soapVersionURI:"" + soapVersionURI);
/*     */     } 
/*     */   }
/*     */   
/*  60 */   private static String SOAP_ATR_ACTOR = ""actor"";
/*  61 */   private static String SOAP_ATR_ROLE = ""role"";
/*  62 */   private static String SOAP_ATR_MUST_UNDERSTAND = ""mustUnderstand"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void convertSOAP11toSOAP12(MessageContext axisOutMsgCtx) throws AxisFault {
/*  88 */     if (log.isDebugEnabled()) {
/*  89 */       log.debug(""convert SOAP11 to SOAP12"");
/*     */     }
/*  91 */     SOAPEnvelope oldEnvelope = axisOutMsgCtx.getEnvelope();
/*     */     
/*  93 */     SOAPFactory soap12Factory = OMAbstractFactory.getSOAP12Factory();
/*  94 */     SOAPEnvelope newEnvelope = soap12Factory.getDefaultEnvelope();
/*     */     
/*  96 */     if (oldEnvelope.getHeader() != null) {
/*  97 */       Iterator<OMNode> itr = oldEnvelope.getHeader().getChildren();
/*  98 */       while (itr.hasNext()) {
/*  99 */         OMNode omNode = itr.next();
/*     */         
/* 101 */         if (omNode instanceof SOAPHeaderBlock) {
/* 102 */           SOAPHeaderBlock soapHeader = (SOAPHeaderBlock)omNode;
/* 103 */           SOAPHeaderBlock newSOAPHeader = soap12Factory.createSOAPHeaderBlock(soapHeader.getLocalName(), soapHeader.getNamespace());
/*     */           
/* 105 */           Iterator<OMAttribute> allAttributes = soapHeader.getAllAttributes();
/*     */           
/* 107 */           while (allAttributes.hasNext()) {
/* 108 */             OMAttribute attr = allAttributes.next();
/* 109 */             if (attr.getNamespace() != null && ""http://schemas.xmlsoap.org/soap/envelope/"".equals(attr.getNamespace().getNamespaceURI())) {
/*     */ 
/*     */               
/* 112 */               String attrName = attr.getLocalName();
/*     */               
/* 114 */               if (SOAP_ATR_ACTOR.equals(attrName)) {
/* 115 */                 OMAttribute newAtr = omNode.getOMFactory().createOMAttribute(SOAP_ATR_ROLE, newEnvelope.getNamespace(), attr.getAttributeValue());
/*     */ 
/*     */                 
/* 118 */                 newSOAPHeader.addAttribute(newAtr);
/*     */               }
/* 120 */               else if (SOAP_ATR_MUST_UNDERSTAND.equals(attrName)) {
/* 121 */                 boolean isMustUnderstand = soapHeader.getMustUnderstand();
/* 122 */                 newSOAPHeader.setMustUnderstand(isMustUnderstand);
/*     */               } else {
/*     */                 
/* 125 */                 log.warn(""removed unsupported attribute from SOAP 1.1 namespace when converting to SOAP 1.2:"" + attrName);
/*     */               }
/*     */             
/*     */             } else {
/*     */               
/* 130 */               newSOAPHeader.addAttribute(attr);
/*     */             } 
/*     */             
/* 133 */             Iterator<OMNode> itrChildren = soapHeader.getChildren();
/* 134 */             while (itrChildren.hasNext()) {
/* 135 */               newSOAPHeader.addChild(itrChildren.next());
/*     */             }
/*     */             
/* 138 */             newEnvelope.getHeader().addChild((OMNode)newSOAPHeader);
/*     */           } 
/*     */           continue;
/*     */         } 
/* 142 */         newEnvelope.getHeader().addChild(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 149 */     if (oldEnvelope.getBody() != null) {
/*     */       
/* 151 */       Iterator<OMNode> itrBodyChildren = oldEnvelope.getBody().getChildren();
/* 152 */       while (itrBodyChildren.hasNext()) {
/* 153 */         OMNode omNode = itrBodyChildren.next();
/*     */         
/* 155 */         if (omNode instanceof SOAPFault) {
/* 156 */           SOAPFault soapFault = (SOAPFault)omNode;
/* 157 */           if (soapFault != null) {
/* 158 */             SOAPFault newSOAPFault = soap12Factory.createSOAPFault();
/* 159 */             newEnvelope.getBody().addChild((OMNode)newSOAPFault);
/*     */             
/* 161 */             SOAPFaultCode code = soapFault.getCode();
/* 162 */             if (code != null) {
/* 163 */               SOAPFaultCode newSOAPFaultCode = soap12Factory.createSOAPFaultCode();
/* 164 */               newSOAPFault.setCode(newSOAPFaultCode);
/*     */               
/* 166 */               String value = code.getText();
/* 167 */               if (value != null) {
/* 168 */                 SOAPFaultValue newSOAPFaultValue = soap12Factory.createSOAPFaultValue(newSOAPFaultCode);
/*     */                 
/* 170 */                 newSOAPFaultValue.setText(value);
/*     */               } 
/*     */             } 
/*     */ 
/*     */             
/* 175 */             SOAPFaultReason reason = soapFault.getReason();
/* 176 */             if (reason != null) {
/* 177 */               SOAPFaultReason newSOAPFaultReason = soap12Factory.createSOAPFaultReason(newSOAPFault);
/*     */               
/* 179 */               String reasonText = reason.getText();
/* 180 */               if (reasonText != null) {
/* 181 */                 SOAPFaultText newSOAPFaultText = soap12Factory.createSOAPFaultText(newSOAPFaultReason);
/*     */                 
/* 183 */                 newSOAPFaultText.setLang(""en"");
/* 184 */                 newSOAPFaultText.setText(reasonText);
/*     */               } 
/* 186 */               newSOAPFault.setReason(newSOAPFaultReason);
/*     */             } 
/*     */           } 
/*     */           
/*     */           continue;
/*     */         } 
/* 192 */         newEnvelope.getBody().addChild(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 200 */     axisOutMsgCtx.setEnvelope(newEnvelope);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void convertSOAP12toSOAP11(MessageContext axisOutMsgCtx) throws AxisFault {
/* 225 */     if (log.isDebugEnabled()) {
/* 226 */       log.debug(""convert SOAP12 to SOAP11"");
/*     */     }
/* 228 */     SOAPEnvelope oldEnvelope = axisOutMsgCtx.getEnvelope();
/*     */     
/* 230 */     SOAPFactory soap11Factory = OMAbstractFactory.getSOAP11Factory();
/* 231 */     SOAPEnvelope newEnvelope = soap11Factory.getDefaultEnvelope();
/* 232 */     if (oldEnvelope.getHeader() != null) {
/* 233 */       Iterator<OMNode> itr = oldEnvelope.getHeader().getChildren();
/* 234 */       while (itr.hasNext()) {
/* 235 */         OMNode omNode = itr.next();
/*     */         
/* 237 */         if (omNode instanceof SOAPHeaderBlock) {
/* 238 */           SOAPHeaderBlock soapHeaderBlock = (SOAPHeaderBlock)omNode;
/* 239 */           SOAPHeaderBlock newSOAPHeader = soap11Factory.createSOAPHeaderBlock(soapHeaderBlock.getLocalName(), soapHeaderBlock.getNamespace());
/*     */ 
/*     */           
/* 242 */           Iterator<OMAttribute> allAttributes = soapHeaderBlock.getAllAttributes();
/*     */           
/* 244 */           while (allAttributes.hasNext()) {
/* 245 */             OMAttribute attr = allAttributes.next();
/* 246 */             if (attr.getNamespace() != null && ""http://www.w3.org/2003/05/soap-envelope"".equals(attr.getNamespace().getNamespaceURI())) {
/*     */ 
/*     */               
/* 249 */               String attrName = attr.getLocalName();
/*     */               
/* 251 */               if (SOAP_ATR_ROLE.equals(attrName)) {
/* 252 */                 OMAttribute newAtr = omNode.getOMFactory().createOMAttribute(SOAP_ATR_ACTOR, newEnvelope.getNamespace(), attr.getAttributeValue());
/*     */ 
/*     */                 
/* 255 */                 newSOAPHeader.addAttribute(newAtr);
/*     */               }
/* 257 */               else if (SOAP_ATR_MUST_UNDERSTAND.equals(attrName)) {
/* 258 */                 boolean isMustUnderstand = soapHeaderBlock.getMustUnderstand();
/* 259 */                 newSOAPHeader.setMustUnderstand(isMustUnderstand);
/*     */               } else {
/*     */                 
/* 262 */                 log.warn(""removed unsupported attribute from SOAP 1.2 namespace when converting to SOAP 1.1:"" + attrName);
/*     */               }
/*     */             
/*     */             } else {
/*     */               
/* 267 */               newSOAPHeader.addAttribute(attr);
/*     */             } 
/*     */             
/* 270 */             Iterator<OMNode> itrChildren = soapHeaderBlock.getChildren();
/* 271 */             while (itrChildren.hasNext()) {
/* 272 */               newSOAPHeader.addChild(itrChildren.next());
/*     */             }
/*     */             
/* 275 */             newEnvelope.getHeader().addChild((OMNode)newSOAPHeader);
/*     */           } 
/*     */           continue;
/*     */         } 
/* 279 */         newEnvelope.getHeader().addChild(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 286 */     if (oldEnvelope.getBody() != null) {
/* 287 */       Iterator<OMNode> itr = oldEnvelope.getBody().getChildren();
/* 288 */       while (itr.hasNext()) {
/* 289 */         OMNode omNode = itr.next();
/*     */         
/* 291 */         if (omNode instanceof SOAPFault) {
/*     */           
/* 293 */           SOAPFault soapFault = (SOAPFault)omNode;
/* 294 */           if (soapFault != null) {
/* 295 */             SOAPFault newSOAPFault = soap11Factory.createSOAPFault();
/* 296 */             newEnvelope.getBody().addChild((OMNode)newSOAPFault);
/*     */             
/* 298 */             SOAPFaultCode code = soapFault.getCode();
/* 299 */             if (code != null) {
/* 300 */               SOAPFaultCode newSOAPFaultCode = soap11Factory.createSOAPFaultCode(newSOAPFault);
/*     */ 
/*     */               
/* 303 */               SOAPFaultValue value = code.getValue();
/* 304 */               if (value != null) {
/* 305 */                 soap11Factory.createSOAPFaultValue(newSOAPFaultCode);
/* 306 */                 if (value.getText() != null) {
/* 307 */                   newSOAPFaultCode.setText(value.getText());
/*     */                 }
/*     */               } 
/*     */             } 
/*     */             
/* 312 */             SOAPFaultReason reason = soapFault.getReason();
/* 313 */             if (reason != null) {
/* 314 */               SOAPFaultReason newSOAPFaultReason = soap11Factory.createSOAPFaultReason(newSOAPFault);
/*     */ 
/*     */               
/* 317 */               List allSoapTexts = reason.getAllSoapTexts();
/* 318 */               Iterator<SOAPFaultText> iterAllSoapTexts = allSoapTexts.iterator();
/* 319 */               if (iterAllSoapTexts.hasNext()) {
/* 320 */                 SOAPFaultText soapFaultText = iterAllSoapTexts.next();
/*     */                 
/* 322 */                 SOAPFaultText newSOAPFaultText = soap11Factory.createSOAPFaultText(newSOAPFaultReason);
/*     */                 
/* 324 */                 newSOAPFaultReason.setText(soapFaultText.getText());
/*     */               } 
/*     */             } 
/*     */           } 
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 332 */         newEnvelope.getBody().addChild(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 338 */     axisOutMsgCtx.setEnvelope(newEnvelope);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SOAPUtils.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseAxisServlet,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import javax.servlet.ServletConfig;
/*    */ import javax.servlet.ServletContext;
/*    */ import javax.servlet.ServletException;
/*    */ import javax.servlet.http.HttpServletRequest;
/*    */ import org.apache.axis2.transport.http.AxisServlet;
/*    */ import org.apache.synapse.ServerManager;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseAxisServlet
/*    */   extends AxisServlet
/*    */ {
/*    */   public void init(ServletConfig config) throws ServletException {
/* 44 */     ServletContext servletContext = config.getServletContext();
/* 45 */     this.configContext = ServerManager.getInstance().getConfigurationContext();
/* 46 */     this.axisConfiguration = this.configContext.getAxisConfiguration();
/* 47 */     servletContext.setAttribute(getClass().getName(), this);
/* 48 */     this.servletConfig = config;
/* 49 */     initParams();
/*    */   }
/*    */ 
/*    */   
/* 53 */   public void initContextRoot(HttpServletRequest req) { this.configContext.setContextRoot(""/""); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseAxisServlet.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseCallbackReceiver,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.Timer;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFault;
/*     */ import org.apache.axiom.soap.SOAPFaultReason;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.addressing.RelatesTo;
/*     */ import org.apache.axis2.client.Options;
/*     */ import org.apache.axis2.client.async.AxisCallback;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.engine.MessageReceiver;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseCallbackReceiver
/*     */   implements MessageReceiver
/*     */ {
/*  55 */   private static final Log log = LogFactory.getLog(SynapseCallbackReceiver.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private Map callbackStore = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */   
/*     */   public SynapseCallbackReceiver(SynapseConfiguration synCfg) {
/*  70 */     TimeoutHandler timeoutHandler = new TimeoutHandler(this.callbackStore);
/*     */     
/*  72 */     Timer timeOutTimer = synCfg.getSynapseTimer();
/*  73 */     long timeoutHandlerInterval = 15000L;
/*     */     try {
/*  75 */       timeoutHandlerInterval = Long.parseLong(System.getProperty(""synapse.timeout_handler_interval""));
/*     */     }
/*  77 */     catch (Exception ignore) {}
/*     */ 
/*     */     
/*  80 */     timeOutTimer.schedule(timeoutHandler, 0L, timeoutHandlerInterval);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void addCallback(String MsgID, AxisCallback callback) { this.callbackStore.put(MsgID, callback); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void receive(MessageContext messageCtx) throws AxisFault {
/*  98 */     String messageID = null;
/*     */     
/* 100 */     if (messageCtx.getOptions() != null && messageCtx.getOptions().getRelatesTo() != null) {
/*     */       
/* 102 */       Options options = messageCtx.getOptions();
/* 103 */       if (options != null) {
/* 104 */         RelatesTo relatesTo = options.getRelatesTo();
/* 105 */         if (relatesTo != null) {
/* 106 */           messageID = relatesTo.getValue();
/*     */         }
/*     */       } 
/* 109 */     } else if (messageCtx.getProperty(SandeshaClientConstants.SEQUENCE_KEY) == null) {
/* 110 */       messageID = (String)messageCtx.getProperty(""synapse.RelatesToForPox"");
/*     */     } 
/*     */     
/* 113 */     if (messageID != null) {
/* 114 */       AxisCallback callback = (AxisCallback)this.callbackStore.remove(messageID);
/*     */       
/* 116 */       RelatesTo[] relates = messageCtx.getRelationships();
/* 117 */       if (relates != null && relates.length > 1)
/*     */       {
/*     */ 
/*     */         
/* 121 */         removeDuplicateRelatesTo(messageCtx, relates);
/*     */       }
/*     */       
/* 124 */       if (callback != null) {
/* 125 */         handleMessage(messageCtx, ((AsyncCallback)callback).getSynapseOutMsgCtx());
/*     */       }
/*     */       else {
/*     */         
/* 129 */         log.warn(""Synapse received a response for the request with message Id : "" + messageID + "" But a callback has not been registered to process this response"");
/*     */       }
/*     */     
/*     */     }
/* 133 */     else if (!messageCtx.isPropertyTrue(""SC_ACCEPTED"")) {
/*     */       
/* 135 */       log.warn(""Synapse received a response message without a message Id"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void handleMessage(MessageContext response, MessageContext synapseOutMsgCtx) throws AxisFault {
/* 151 */     Object o = response.getProperty(""sending_fault"");
/* 152 */     if (o != null && Boolean.TRUE.equals(o)) {
/*     */ 
/*     */ 
/*     */       
/* 156 */       Stack<FaultHandler> faultStack = synapseOutMsgCtx.getFaultStack();
/* 157 */       if (faultStack != null && !faultStack.isEmpty()) {
/* 158 */         SOAPEnvelope envelope = response.getEnvelope();
/* 159 */         if (envelope != null) {
/* 160 */           SOAPFault fault = envelope.getBody().getFault();
/* 161 */           if (fault != null) {
/* 162 */             Exception e = fault.getException();
/* 163 */             if (e == null) {
/* 164 */               e = new Exception(fault.toString());
/*     */             }
/*     */ 
/*     */             
/* 168 */             synapseOutMsgCtx.setProperty(""ERROR_CODE"", ""503"");
/*     */             
/* 170 */             SOAPFaultReason faultReason = fault.getReason();
/* 171 */             if (faultReason != null) {
/* 172 */               synapseOutMsgCtx.setProperty(""ERROR_MESSAGE"", faultReason.getText());
/*     */             }
/*     */             
/* 175 */             ((FaultHandler)faultStack.pop()).handleFault(synapseOutMsgCtx, e);
/*     */           }
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 184 */       Stack faultStack = synapseOutMsgCtx.getFaultStack();
/* 185 */       if (faultStack != null && !faultStack.isEmpty() && faultStack.peek() instanceof org.apache.synapse.endpoints.Endpoint)
/*     */       {
/* 187 */         faultStack.pop();
/*     */       }
/* 189 */       if (log.isDebugEnabled()) {
/* 190 */         log.debug(""Synapse received an asynchronous response message"");
/* 191 */         log.debug(""Received To: "" + ((response.getTo() != null) ? response.getTo().getAddress() : ""null""));
/*     */         
/* 193 */         log.debug(""SOAPAction: "" + ((response.getSoapAction() != null) ? response.getSoapAction() : ""null""));
/*     */         
/* 195 */         log.debug(""WSA-Action: "" + ((response.getWSAAction() != null) ? response.getWSAAction() : ""null""));
/*     */         
/* 197 */         String[] cids = response.getAttachmentMap().getAllContentIDs();
/* 198 */         if (cids != null && cids.length > 0) {
/* 199 */           for (int i = 0; i < cids.length; i++) {
/* 200 */             log.debug(""Attachment : "" + cids[i]);
/*     */           }
/*     */         }
/* 203 */         log.debug(""Body : \n"" + response.getEnvelope());
/*     */       } 
/* 205 */       MessageContext axisOutMsgCtx = ((Axis2MessageContext)synapseOutMsgCtx).getAxis2MessageContext();
/*     */ 
/*     */       
/* 208 */       response.setServiceContext(null);
/* 209 */       response.setOperationContext(axisOutMsgCtx.getOperationContext());
/* 210 */       response.getAxisMessage().setParent((AxisDescription)axisOutMsgCtx.getOperationContext().getAxisOperation());
/*     */       
/* 212 */       response.setAxisService(axisOutMsgCtx.getAxisService());
/*     */ 
/*     */       
/* 215 */       response.setServerSide(true);
/* 216 */       response.setProperty(""synapse.isresponse"", Boolean.TRUE);
/* 217 */       response.setProperty(""TRANSPORT_OUT"", axisOutMsgCtx.getProperty(""TRANSPORT_OUT""));
/*     */       
/* 219 */       response.setProperty(""OutTransportInfo"", axisOutMsgCtx.getProperty(""OutTransportInfo""));
/*     */       
/* 221 */       response.setTransportIn(axisOutMsgCtx.getTransportIn());
/* 222 */       response.setTransportOut(axisOutMsgCtx.getTransportOut());
/*     */ 
/*     */       
/* 225 */       response.setDoingREST(axisOutMsgCtx.isDoingREST());
/* 226 */       if (axisOutMsgCtx.isDoingMTOM()) {
/* 227 */         response.setDoingMTOM(true);
/* 228 */         response.setProperty(""enableMTOM"", ""true"");
/*     */       } 
/*     */ 
/*     */       
/* 232 */       if (axisOutMsgCtx.isDoingSwA()) {
/* 233 */         response.setDoingSwA(true);
/* 234 */         response.setProperty(""enableSwA"", ""true"");
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 241 */       response.removeProperty(""messageType"");
/*     */ 
/*     */ 
/*     */       
/* 245 */       if (axisOutMsgCtx.isSOAP11() != response.isSOAP11()) {
/* 246 */         if (axisOutMsgCtx.isSOAP11()) {
/* 247 */           SOAPUtils.convertSOAP12toSOAP11(response);
/*     */         } else {
/* 249 */           SOAPUtils.convertSOAP11toSOAP12(response);
/*     */         } 
/*     */       }
/*     */       
/* 253 */       if (axisOutMsgCtx.getMessageID() != null) {
/* 254 */         response.setRelationships(new RelatesTo[] { new RelatesTo(axisOutMsgCtx.getMessageID()) });
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 259 */       Axis2MessageContext synapseInMessageContext = new Axis2MessageContext(response, synapseOutMsgCtx.getConfiguration(), synapseOutMsgCtx.getEnvironment());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 265 */       synapseInMessageContext.setResponse(true);
/* 266 */       synapseInMessageContext.setTo(new EndpointReference(""http://www.w3.org/2005/08/addressing/anonymous""));
/*     */       
/* 268 */       synapseInMessageContext.setTracingState(synapseOutMsgCtx.getTracingState());
/*     */ 
/*     */       
/* 271 */       Iterator iter = synapseOutMsgCtx.getPropertyKeySet().iterator();
/*     */       
/* 273 */       while (iter.hasNext()) {
/* 274 */         Object key = iter.next();
/* 275 */         synapseInMessageContext.setProperty((String)key, synapseOutMsgCtx.getProperty((String)key));
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 281 */         synapseOutMsgCtx.getEnvironment().injectMessage(synapseInMessageContext);
/* 282 */       } catch (SynapseException syne) {
/* 283 */         Stack<FaultHandler> stack = synapseInMessageContext.getFaultStack();
/* 284 */         if (stack != null && !stack.isEmpty()) {
/*     */           
/* 286 */           ((FaultHandler)stack.pop()).handleFault(synapseInMessageContext, (Exception)syne);
/*     */         } else {
/* 288 */           log.error(""Synapse encountered an exception, No error handlers found - [Message Dropped]\n"" + syne.getMessage());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeDuplicateRelatesTo(MessageContext mc, RelatesTo[] relates) {
/* 305 */     int insertPos = 0;
/* 306 */     RelatesTo[] newRelates = new RelatesTo[relates.length];
/*     */     
/* 308 */     for (int i = 0; i < relates.length; i++) {
/* 309 */       RelatesTo current = relates[i];
/* 310 */       boolean found = false;
/* 311 */       for (int j = 0; j < newRelates.length && j < insertPos; j++) {
/* 312 */         if (newRelates[j].equals(current) || newRelates[j].getValue().equals(current.getValue())) {
/*     */           
/* 314 */           found = true;
/*     */           break;
/*     */         } 
/*     */       } 
/* 318 */       if (!found) {
/* 319 */         newRelates[insertPos++] = current;
/*     */       }
/*     */     } 
/*     */     
/* 323 */     RelatesTo[] trimmedRelates = new RelatesTo[insertPos];
/* 324 */     System.arraycopy(newRelates, 0, trimmedRelates, 0, insertPos);
/* 325 */     mc.setRelationships(trimmedRelates);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseCallbackReceiver.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseDispatcher,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.description.AxisOperation;
/*    */ import org.apache.axis2.description.AxisService;
/*    */ import org.apache.axis2.description.HandlerDescription;
/*    */ import org.apache.axis2.engine.AbstractDispatcher;
/*    */ import org.apache.axis2.engine.AxisConfiguration;
/*    */ import org.apache.synapse.SynapseConstants;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseDispatcher
/*    */   extends AbstractDispatcher
/*    */ {
/*    */   public void initDispatcher() {
/* 40 */     QName qn = new QName(""http://synapse.apache.org"", ""SynapseDispatcher"");
/* 41 */     HandlerDescription hd = new HandlerDescription(qn.getLocalPart());
/* 42 */     init(hd);
/*    */   }
/*    */   
/*    */   public AxisService findService(MessageContext mc) throws AxisFault {
/* 46 */     AxisConfiguration ac = mc.getConfigurationContext().getAxisConfiguration();
/* 47 */     AxisService as = ac.getService(""__SynapseService"");
/* 48 */     return as;
/*    */   }
/*    */   
/*    */   public AxisOperation findOperation(AxisService svc, MessageContext mc) throws AxisFault {
/* 52 */     AxisOperation ao = svc.getOperation(SynapseConstants.SYNAPSE_OPERATION_NAME);
/* 53 */     return ao;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseDispatcher.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseInitializationModule,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.net.InetAddress;
/*     */ import java.net.UnknownHostException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Date;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.ConfigurationContext;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.axis2.description.AxisModule;
/*     */ import org.apache.axis2.description.AxisOperation;
/*     */ import org.apache.axis2.description.AxisService;
/*     */ import org.apache.axis2.description.InOutAxisOperation;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.axis2.modules.Module;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.log4j.MDC;
/*     */ import org.apache.neethi.Assertion;
/*     */ import org.apache.neethi.Policy;
/*     */ import org.apache.synapse.SynapseConstants;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfiguration;
/*     */ import org.apache.synapse.config.SynapseConfigurationBuilder;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseInitializationModule
/*     */   implements Module
/*     */ {
/*  51 */   private static final Log log = LogFactory.getLog(SynapseInitializationModule.class);
/*     */   
/*     */   private SynapseConfiguration synCfg;
/*     */ 
/*     */   
/*     */   public void init(ConfigurationContext configurationContext, AxisModule axisModule) throws AxisFault {
/*  57 */     log.info(""Initializing Synapse at : "" + new Date());
/*     */     try {
/*  59 */       InetAddress addr = InetAddress.getLocalHost();
/*  60 */       if (addr != null) {
/*     */         
/*  62 */         String ipAddr = addr.getHostAddress();
/*  63 */         if (ipAddr != null) {
/*  64 */           MDC.put(""ip"", ipAddr);
/*     */         }
/*     */ 
/*     */         
/*  68 */         String hostname = addr.getHostName();
/*  69 */         if (hostname == null) {
/*  70 */           hostname = ipAddr;
/*     */         }
/*  72 */         MDC.put(""host"", hostname);
/*     */       } 
/*  74 */     } catch (UnknownHostException e) {
/*  75 */       log.warn(""Unable to determine hostname or IP address of the server for logging"", e);
/*     */     } 
/*     */ 
/*     */     
/*  79 */     log.info(""Loading mediator extensions..."");
/*  80 */     configurationContext.getAxisConfiguration().getConfigurator().loadServices();
/*     */ 
/*     */     
/*  83 */     log.info(""Initializing the Synapse configuration ..."");
/*  84 */     this.synCfg = getConfiguration(configurationContext);
/*     */     
/*  86 */     log.info(""Deploying the Synapse service.."");
/*     */     
/*  88 */     AxisConfiguration axisCfg = configurationContext.getAxisConfiguration();
/*  89 */     AxisService synapseService = new AxisService(""__SynapseService"");
/*  90 */     InOutAxisOperation inOutAxisOperation = new InOutAxisOperation(SynapseConstants.SYNAPSE_OPERATION_NAME);
/*  91 */     inOutAxisOperation.setMessageReceiver(new SynapseMessageReceiver());
/*  92 */     synapseService.addOperation((AxisOperation)inOutAxisOperation);
/*  93 */     List<String> transports = new ArrayList();
/*  94 */     transports.add(""http"");
/*  95 */     transports.add(""https"");
/*  96 */     synapseService.setExposedTransports(transports);
/*  97 */     axisCfg.addService(synapseService);
/*     */     
/*  99 */     log.info(""Initializing Sandesha 2..."");
/* 100 */     AxisModule sandeshaAxisModule = configurationContext.getAxisConfiguration().getModule(""sandesha2"");
/*     */     
/* 102 */     if (sandeshaAxisModule != null) {
/* 103 */       Module sandesha2 = sandeshaAxisModule.getModule();
/* 104 */       sandesha2.init(configurationContext, sandeshaAxisModule);
/*     */     } 
/*     */     
/* 107 */     log.info(""Deploying Proxy services..."");
/* 108 */     Iterator<ProxyService> iter = this.synCfg.getProxyServices().iterator();
/* 109 */     while (iter.hasNext()) {
/* 110 */       ProxyService proxy = iter.next();
/* 111 */       proxy.buildAxisService(this.synCfg, axisCfg);
/* 112 */       log.info(""Deployed Proxy service : "" + proxy.getName());
/* 113 */       if (!proxy.isStartOnLoad()) {
/* 114 */         proxy.stop(this.synCfg);
/*     */       }
/*     */     } 
/*     */     
/* 118 */     log.info(""Synapse initialized successfully...!"");
/*     */   }
/*     */   
/*     */   private static SynapseConfiguration getConfiguration(ConfigurationContext cfgCtx) {
/*     */     SynapseConfiguration synapseConfiguration;
/* 123 */     cfgCtx.setProperty(""addressing.validateAction"", Boolean.FALSE);
/* 124 */     AxisConfiguration axisConfiguration = cfgCtx.getAxisConfiguration();
/*     */ 
/*     */     
/* 127 */     String config = System.getProperty(""synapse.xml"");
/*     */     
/* 129 */     if (config != null) {
/* 130 */       if (log.isDebugEnabled()) {
/* 131 */         log.debug(""System property 'synapse.xml' specifies Synapse configuration as "" + config);
/*     */       }
/*     */       
/* 134 */       synapseConfiguration = SynapseConfigurationBuilder.getConfiguration(config);
/*     */     } else {
/* 136 */       log.warn(""System property 'synapse.xml' is not specified. Using default configuration.."");
/*     */       
/* 138 */       synapseConfiguration = SynapseConfigurationBuilder.getDefaultConfiguration();
/*     */     } 
/*     */ 
/*     */     
/* 142 */     synapseConfiguration.setAxisConfiguration(cfgCtx.getAxisConfiguration());
/*     */ 
/*     */     
/* 145 */     Parameter synapseCtxParam = new Parameter(""synapse.config"", null);
/* 146 */     synapseCtxParam.setValue(synapseConfiguration);
/* 147 */     MessageContextCreatorForAxis2.setSynConfig(synapseConfiguration);
/*     */     
/* 149 */     Parameter synapseEnvParam = new Parameter(""synapse.env"", null);
/* 150 */     Axis2SynapseEnvironment synEnv = new Axis2SynapseEnvironment(cfgCtx, synapseConfiguration);
/* 151 */     synapseEnvParam.setValue(synEnv);
/* 152 */     MessageContextCreatorForAxis2.setSynEnv(synEnv);
/*     */     
/*     */     try {
/* 155 */       axisConfiguration.addParameter(synapseCtxParam);
/* 156 */       axisConfiguration.addParameter(synapseEnvParam);
/*     */     }
/* 158 */     catch (AxisFault e) {
/* 159 */       String msg = ""Could not set parameters 'synapse.config' and/or 'synapse.env'to the Axis2 configuration : "" + e.getMessage();
/*     */ 
/*     */ 
/*     */       
/* 163 */       log.fatal(msg, (Throwable)e);
/* 164 */       throw new SynapseException(msg, (Throwable)e);
/*     */     } 
/* 166 */     synapseConfiguration.init(synEnv);
/*     */     
/* 168 */     return synapseConfiguration;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void engageNotify(AxisDescription axisDescription) throws AxisFault {}
/*     */ 
/*     */   
/* 176 */   public boolean canSupportAssertion(Assertion assertion) { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {}
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void shutdown(ConfigurationContext configurationContext) throws AxisFault { this.synCfg.destroy(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseInitializationModule.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseMessageReceiver,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.engine.MessageReceiver;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseMessageReceiver
/*     */   implements MessageReceiver
/*     */ {
/*  41 */   private static final Log log = LogFactory.getLog(SynapseMessageReceiver.class);
/*  42 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*     */   public void receive(MessageContext mc) throws AxisFault {
/*  46 */     MessageContext synCtx = MessageContextCreatorForAxis2.getSynapseMessageContext(mc);
/*     */     
/*  48 */     boolean traceOn = (synCtx.getMainSequence().getTraceState() == 1);
/*  49 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  51 */     if (traceOrDebugOn) {
/*  52 */       traceOrDebug(traceOn, ""Synapse received a new message for message mediation..."");
/*  53 */       traceOrDebug(traceOn, ""Received To: "" + ((mc.getTo() != null) ? mc.getTo().getAddress() : ""null""));
/*     */       
/*  55 */       traceOrDebug(traceOn, ""SOAPAction: "" + ((mc.getSoapAction() != null) ? mc.getSoapAction() : ""null""));
/*     */       
/*  57 */       traceOrDebug(traceOn, ""WSA-Action: "" + ((mc.getWSAAction() != null) ? mc.getWSAAction() : ""null""));
/*     */ 
/*     */       
/*  60 */       if (traceOn && trace.isTraceEnabled()) {
/*  61 */         String[] cids = mc.getAttachmentMap().getAllContentIDs();
/*  62 */         if (cids != null && cids.length > 0) {
/*  63 */           for (int i = 0; i < cids.length; i++) {
/*  64 */             trace.trace(""Attachment : "" + cids[i]);
/*     */           }
/*     */         }
/*  67 */         trace.trace(""Envelope : "" + mc.getEnvelope());
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/*  72 */     Log serviceLog = LogFactory.getLog(""SERVICE_LOGGER.__SynapseService"");
/*     */     
/*  74 */     ((Axis2MessageContext)synCtx).setServiceLog(serviceLog);
/*     */ 
/*     */     
/*     */     try {
/*  78 */       ProxyServiceStatisticsStack proxyServiceStatisticsStack = new ProxyServiceStatisticsStack();
/*  79 */       boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  80 */       proxyServiceStatisticsStack.put(""__SynapseService"", System.currentTimeMillis(), !synCtx.isResponse(), true, isFault);
/*     */       
/*  82 */       synCtx.setProperty(""synapse.service.stats"", proxyServiceStatisticsStack);
/*     */ 
/*     */       
/*  85 */       synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(synCtx.getSequence(""fault"")));
/*     */ 
/*     */ 
/*     */       
/*  89 */       synCtx.getEnvironment().injectMessage(synCtx);
/*     */     }
/*  91 */     catch (SynapseException syne) {
/*     */       
/*  93 */       if (!synCtx.getFaultStack().isEmpty()) {
/*  94 */         warn(traceOn, ""Executing fault handler due to exception encountered"", synCtx);
/*  95 */         ((FaultHandler)synCtx.getFaultStack().pop()).handleFault(synCtx, (Exception)syne);
/*     */       } else {
/*     */         
/*  98 */         warn(traceOn, ""Exception encountered but no fault handler found - message dropped"", synCtx);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void traceOrDebug(boolean traceOn, String msg) {
/* 105 */     if (traceOn) {
/* 106 */       trace.info(msg);
/*     */     }
/* 108 */     if (log.isDebugEnabled()) {
/* 109 */       log.debug(msg);
/*     */     }
/*     */   }
/*     */   
/*     */   private void warn(boolean traceOn, String msg, MessageContext msgContext) {
/* 114 */     if (traceOn) {
/* 115 */       trace.warn(msg);
/*     */     }
/* 117 */     if (log.isDebugEnabled()) {
/* 118 */       log.warn(msg);
/*     */     }
/* 120 */     if (msgContext.getServiceLog() != null)
/* 121 */       msgContext.getServiceLog().warn(msg); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseMessageReceiver.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseMustUnderstandHandler,"/*    */ package org.apache.synapse.core.axis2;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import java.util.Iterator;
/*    */ import org.apache.axiom.soap.SOAPEnvelope;
/*    */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.engine.Handler;
/*    */ import org.apache.axis2.handlers.AbstractHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMustUnderstandHandler
/*    */   extends AbstractHandler
/*    */ {
/*    */   public Handler.InvocationResponse invoke(MessageContext messageContext) throws AxisFault {
/* 40 */     SOAPEnvelope envelope = messageContext.getEnvelope();
/*    */     
/* 42 */     if (envelope.getHeader() != null) {
/* 43 */       Iterator<SOAPHeaderBlock> headerBlocks = envelope.getHeader().getHeadersToProcess(null);
/* 44 */       ArrayList<SOAPHeaderBlock> markedHeaderBlocks = new ArrayList();
/*    */       
/* 46 */       while (headerBlocks.hasNext()) {
/* 47 */         SOAPHeaderBlock headerBlock = headerBlocks.next();
/*    */ 
/*    */ 
/*    */         
/* 51 */         if (!headerBlock.isProcessed() && headerBlock.getMustUnderstand()) {
/* 52 */           markedHeaderBlocks.add(headerBlock);
/* 53 */           headerBlock.setProcessed();
/*    */         } 
/*    */       } 
/*    */ 
/*    */       
/* 58 */       messageContext.setProperty(""headersMarkedAsProcessedBySynapse"", markedHeaderBlocks);
/*    */     } 
/*    */     
/* 61 */     return Handler.InvocationResponse.CONTINUE;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseMustUnderstandHandler.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.SynapseStartUpServlet,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import javax.servlet.ServletConfig;
/*     */ import javax.servlet.ServletContext;
/*     */ import javax.servlet.ServletException;
/*     */ import javax.servlet.http.HttpServlet;
/*     */ import javax.servlet.http.HttpServletRequest;
/*     */ import javax.servlet.http.HttpServletResponse;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.ServerManager;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SynapseStartUpServlet
/*     */   extends HttpServlet
/*     */ {
/*  41 */   private static Log log = LogFactory.getLog(SynapseStartUpServlet.class);
/*     */ 
/*     */   
/*  44 */   public void init() throws ServletException { super.init(); }
/*     */ 
/*     */   
/*     */   public void init(ServletConfig servletConfig) throws ServletException {
/*  48 */     ServerManager serverManager = ServerManager.getInstance();
/*  49 */     ServletContext servletContext = servletConfig.getServletContext();
/*  50 */     if (""true"".equals(servletContext.getAttribute(""hasAlreadyInit""))) {
/*     */       return;
/*     */     }
/*  53 */     String synapseHome = resolveSynapseHome(servletConfig);
/*     */     
/*  55 */     if (synapseHome != null) {
/*  56 */       if (synapseHome.endsWith(""/"")) {
/*  57 */         synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
/*     */       }
/*  59 */       System.setProperty(""synapse.home"", synapseHome);
/*     */       
/*  61 */       String axis2Repo = System.getProperty(""axis2.repo"");
/*  62 */       if (axis2Repo == null) {
/*  63 */         ServerManager.getInstance().setAxis2Repolocation(synapseHome + ""/WEB-INF"" + File.separator + ""repository"");
/*     */         
/*  65 */         System.setProperty(""axis2.repo"", synapseHome + ""/WEB-INF"" + File.separator + ""repository"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*  70 */       String axis2Xml = System.getProperty(""axis2.xml"");
/*  71 */       if (axis2Xml == null) {
/*  72 */         System.setProperty(""axis2.xml"", synapseHome + File.separator + ""WEB-INF/conf"" + File.separator + ""axis2.xml"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  78 */       String synapseXml = System.getProperty(""synapse.xml"");
/*  79 */       if (synapseXml == null) {
/*  80 */         System.setProperty(""synapse.xml"", synapseHome + File.separator + ""WEB-INF/conf"" + File.separator + ""synapse.xml"");
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/*  87 */       log.fatal(""Can not resolve synapse home  : startup failed"");
/*     */       return;
/*     */     } 
/*  90 */     serverManager.start();
/*  91 */     servletContext.setAttribute(""hasAlreadyInit"", ""true"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {}
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {}
/*     */ 
/*     */ 
/*     */   
/*     */   public void destroy() {
/*     */     try {
/* 107 */       ServerManager serverManager = ServerManager.getInstance();
/* 108 */       serverManager.stop();
/* 109 */     } catch (Exception ignored) {}
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private String resolveSynapseHome(ServletConfig servletConfig) {
/* 115 */     String synapseHomeAsParam = servletConfig.getInitParameter(""synapse.home"");
/* 116 */     if (synapseHomeAsParam != null && 
/* 117 */       synapseHomeAsParam.endsWith(""/"")) {
/* 118 */       return synapseHomeAsParam.substring(0, synapseHomeAsParam.lastIndexOf(""/""));
/*     */     }
/*     */ 
/*     */     
/* 122 */     String synapseHome = System.getProperty(""synapse.home"");
/*     */     
/* 124 */     if (synapseHome == null || """".equals(synapseHome)) {
/* 125 */       ServletContext servletContext = servletConfig.getServletContext();
/*     */       
/* 127 */       String webinfPath = servletContext.getRealPath(""WEB-INF"");
/* 128 */       if (webinfPath != null) {
/* 129 */         synapseHome = webinfPath.substring(0, webinfPath.lastIndexOf(""WEB-INF""));
/* 130 */         if (synapseHome != null && 
/* 131 */           synapseHome.endsWith(""/"")) {
/* 132 */           synapseHome = synapseHome.substring(0, synapseHome.lastIndexOf(""/""));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 137 */     return synapseHome;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\SynapseStartUpServlet.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.core.axis2.TimeoutHandler,"/*     */ package org.apache.synapse.core.axis2;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Stack;
/*     */ import java.util.TimerTask;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TimeoutHandler
/*     */   extends TimerTask
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(TimeoutHandler.class);
/*     */ 
/*     */   
/*  50 */   private Map callbackStore = null;
/*     */   
/*  52 */   private Object lock = new Object();
/*     */ 
/*     */   
/*     */   private boolean alreadyExecuting = false;
/*     */ 
/*     */   
/*  58 */   private long globalTimeout = 86400000L;
/*     */   
/*     */   public TimeoutHandler(Map callbacks) {
/*  61 */     this.callbackStore = callbacks;
/*     */     try {
/*  63 */       this.globalTimeout = Long.parseLong(System.getProperty(""synapse.global_timeout_interval""));
/*     */     }
/*  65 */     catch (Exception ignore) {}
/*  66 */     log.info(""This engine will expire all callbacks after : "" + (this.globalTimeout / 1000L) + "" seconds, irrespective of the timeout action, after the specified or optional timeout"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/*  75 */     if (this.alreadyExecuting)
/*     */       return; 
/*  77 */     synchronized (this.lock) {
/*  78 */       this.alreadyExecuting = true;
/*     */       try {
/*  80 */         processCallbacks();
/*  81 */       } catch (Exception ignore) {}
/*  82 */       this.alreadyExecuting = false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processCallbacks() {
/*  93 */     synchronized (this.callbackStore) {
/*     */       
/*  95 */       if (this.callbackStore.size() > 0) {
/*     */         
/*  97 */         long currentTime = currentTime();
/*  98 */         Iterator i = this.callbackStore.keySet().iterator();
/*     */         
/* 100 */         while (i.hasNext()) {
/*     */           
/* 102 */           Object key = i.next();
/* 103 */           AsyncCallback callback = (AsyncCallback)this.callbackStore.get(key);
/*     */           
/* 105 */           if (callback.getTimeOutAction() != 100) {
/*     */             
/* 107 */             if (callback.getTimeOutOn() <= currentTime) {
/* 108 */               this.callbackStore.remove(key);
/*     */               
/* 110 */               if (callback.getTimeOutAction() == 102) {
/*     */ 
/*     */                 
/* 113 */                 MessageContext msgContext = callback.getSynapseOutMsgCtx();
/*     */ 
/*     */ 
/*     */                 
/* 117 */                 msgContext.setProperty(""ERROR_CODE"", ""504"");
/*     */                 
/* 119 */                 Stack faultStack = msgContext.getFaultStack();
/*     */                 
/* 121 */                 for (int j = 0; j < faultStack.size(); j++) {
/* 122 */                   Object o = faultStack.pop();
/* 123 */                   if (o instanceof FaultHandler) {
/* 124 */                     ((FaultHandler)o).handleFault(msgContext);
/*     */                   }
/*     */                 } 
/*     */               } 
/*     */             } 
/*     */             continue;
/*     */           } 
/* 131 */           if (currentTime > this.globalTimeout + callback.getTimeOutOn()) {
/* 132 */             log.warn(""Expiring message ID : "" + key + ""; dropping message after "" + ""global timeout of : "" + (this.globalTimeout / 1000L) + "" seconds"");
/*     */             
/* 134 */             this.callbackStore.remove(key);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   private long currentTime() { return System.currentTimeMillis(); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\core\axis2\TimeoutHandler.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.AddressEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AddressEndpoint
/*     */   extends FaultHandler
/*     */   implements Endpoint
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(AddressEndpoint.class);
/*  40 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  46 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  58 */   private EndpointDefinition endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private long suspendOnFailDuration = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   private long recoverOn = Long.MAX_VALUE;
/*     */ 
/*     */   
/*  79 */   public EndpointDefinition getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setEndpoint(EndpointDefinition endpoint) { this.endpoint = endpoint; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 103 */     if (!this.active && 
/* 104 */       System.currentTimeMillis() > this.recoverOn) {
/* 105 */       this.active = true;
/* 106 */       this.recoverOn = 0L;
/*     */     } 
/*     */ 
/*     */     
/* 110 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void setActive(boolean active, MessageContext synMessageContext) {
/* 125 */     if (!active) {
/* 126 */       if (this.suspendOnFailDuration != -1L) {
/* 127 */         this.recoverOn = System.currentTimeMillis() + this.suspendOnFailDuration;
/*     */       } else {
/* 129 */         this.recoverOn = Long.MAX_VALUE;
/*     */       } 
/*     */     }
/*     */     
/* 133 */     this.active = active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synCtx) {
/* 147 */     boolean traceOn = isTraceOn(synCtx);
/* 148 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 150 */     if (traceOrDebugOn) {
/* 151 */       traceOrDebug(traceOn, ""Start : Address Endpoint"");
/*     */       
/* 153 */       if (traceOn && trace.isTraceEnabled()) {
/* 154 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/* 158 */     String endPointName = getName();
/* 159 */     if (endPointName == null) {
/* 160 */       endPointName = ""AnonymousEndpoint"";
/*     */     }
/*     */ 
/*     */     
/* 164 */     boolean statisticsEnable = (1 == this.endpoint.getStatisticsState());
/* 165 */     if (statisticsEnable) {
/* 166 */       EndPointStatisticsStack endPointStatisticsStack = null;
/* 167 */       Object statisticsStackObj = synCtx.getProperty(""synapse.endpoint.stats"");
/*     */       
/* 169 */       if (statisticsStackObj == null) {
/* 170 */         endPointStatisticsStack = new EndPointStatisticsStack();
/* 171 */         synCtx.setProperty(""synapse.endpoint.stats"", endPointStatisticsStack);
/*     */       }
/* 173 */       else if (statisticsStackObj instanceof EndPointStatisticsStack) {
/* 174 */         endPointStatisticsStack = (EndPointStatisticsStack)statisticsStackObj;
/*     */       } 
/* 176 */       if (endPointStatisticsStack != null) {
/* 177 */         boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 178 */         endPointStatisticsStack.put(endPointName, System.currentTimeMillis(), !synCtx.isResponse(), statisticsEnable, isFault);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 183 */     if (this.endpoint.getAddress() != null && 
/* 184 */       traceOrDebugOn) {
/* 185 */       traceOrDebug(traceOn, ""Sending message to endpoint : "" + endPointName + "" resolves to address = "" + this.endpoint.getAddress());
/*     */       
/* 187 */       traceOrDebug(traceOn, ""SOAPAction: "" + ((synCtx.getSoapAction() != null) ? synCtx.getSoapAction() : ""null""));
/*     */       
/* 189 */       traceOrDebug(traceOn, ""WSA-Action: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */ 
/*     */       
/* 192 */       if (traceOn && trace.isTraceEnabled()) {
/* 193 */         trace.trace(""Envelope : \n"" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 199 */     synCtx.pushFaultHandler(this);
/*     */ 
/*     */     
/* 202 */     synCtx.setProperty(""processed_endpoint"", this);
/*     */     
/* 204 */     synCtx.getEnvironment().send(this.endpoint, synCtx);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {}
/*     */ 
/*     */   
/* 212 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 216 */   public long getSuspendOnFailDuration() { return this.suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 220 */   public void setSuspendOnFailDuration(long suspendOnFailDuration) { this.suspendOnFailDuration = suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onFault(MessageContext synCtx) {
/* 227 */     setActive(false, synCtx);
/*     */     
/* 229 */     if (this.parentEndpoint != null) {
/* 230 */       this.parentEndpoint.onChildEndpointFail(this, synCtx);
/*     */     } else {
/* 232 */       Stack<FaultHandler> faultStack = synCtx.getFaultStack();
/* 233 */       if (!faultStack.isEmpty()) {
/* 234 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   protected boolean isTraceOn(MessageContext msgCtx) { return (this.endpoint.getTraceState() == 1 || (this.endpoint.getTraceState() == 2 && msgCtx.getTracingState() == 1)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   protected boolean isTraceOrDebugOn(boolean isTraceOn) { return (isTraceOn || log.isDebugEnabled()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void traceOrDebug(boolean traceOn, String msg) {
/* 267 */     if (traceOn) {
/* 268 */       trace.info(msg);
/*     */     }
/* 270 */     if (log.isDebugEnabled())
/* 271 */       log.debug(msg); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\AddressEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.Endpoint,"package org.apache.synapse.endpoints;
import org.apache.synapse.MessageContext;
public interface Endpoint {
  void send(MessageContext paramMessageContext);
  void onChildEndpointFail(Endpoint paramEndpoint, MessageContext paramMessageContext);
  void setParentEndpoint(Endpoint paramEndpoint);
  String getName();
  void setName(String paramString);
  boolean isActive(MessageContext paramMessageContext);
  void setActive(boolean paramBoolean, MessageContext paramMessageContext);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\Endpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.FailoverEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FailoverEndpoint
/*     */   implements Endpoint
/*     */ {
/*  41 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  54 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   private Endpoint currentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  73 */     synMessageContext.getEnvelope().build();
/*     */     
/*  75 */     if (this.currentEndpoint.isActive(synMessageContext)) {
/*  76 */       this.currentEndpoint.send(synMessageContext);
/*     */     } else {
/*     */       
/*  79 */       Endpoint liveEndpoint = null;
/*  80 */       boolean foundEndpoint = false;
/*  81 */       for (int i = 0; i < this.endpoints.size(); i++) {
/*  82 */         liveEndpoint = this.endpoints.get(i);
/*  83 */         if (liveEndpoint.isActive(synMessageContext)) {
/*  84 */           foundEndpoint = true;
/*  85 */           this.currentEndpoint = liveEndpoint;
/*  86 */           this.currentEndpoint.send(synMessageContext);
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/*  91 */       if (!foundEndpoint) {
/*     */         
/*  93 */         setActive(false, synMessageContext);
/*     */         
/*  95 */         if (this.parentEndpoint != null) {
/*  96 */           this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */         } else {
/*  98 */           Object o = synMessageContext.getFaultStack().pop();
/*  99 */           if (o != null) {
/* 100 */             ((FaultHandler)o).handleFault(synMessageContext);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 108 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 126 */     if (!this.active) {
/* 127 */       for (int i = 0; i < this.endpoints.size(); i++) {
/* 128 */         Endpoint endpoint = this.endpoints.get(i);
/* 129 */         if (endpoint.isActive(synMessageContext)) {
/* 130 */           this.active = true;
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 139 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */   
/*     */   public void setEndpoints(List<Endpoint> endpoints) {
/* 152 */     this.endpoints = endpoints;
/* 153 */     if (endpoints.size() > 0) {
/* 154 */       this.currentEndpoint = endpoints.get(0);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 159 */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) { send(synMessageContext); }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\FailoverEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.IndirectEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IndirectEndpoint
/*     */   implements Endpoint
/*     */ {
/*  39 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*  40 */   private static final Log log = LogFactory.getLog(IndirectEndpoint.class);
/*     */   
/*  42 */   private String name = null;
/*  43 */   private String key = null;
/*     */   private boolean active = true;
/*  45 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  51 */   private MessageContext currentMsgCtx = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  55 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/*  56 */     if (endpoint == null) {
/*  57 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/*  60 */     if (endpoint.isActive(synMessageContext)) {
/*  61 */       endpoint.send(synMessageContext);
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  66 */     else if (this.parentEndpoint != null) {
/*  67 */       auditWarn(""Endpoint : "" + endpoint.getName() + "" is currently inactive"" + "" - invoking parent endpoint"", synMessageContext);
/*     */       
/*  69 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     } else {
/*     */       
/*  72 */       auditWarn(""Endpoint : "" + endpoint.getName() + "" is currently inactive"" + "" - invoking fault handler / assuming failure"", synMessageContext);
/*     */ 
/*     */       
/*  75 */       Object o = synMessageContext.getFaultStack().pop();
/*  76 */       if (o != null) {
/*  77 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 108 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/* 109 */     if (endpoint == null) {
/* 110 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/* 113 */     return endpoint.isActive(synMessageContext);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setActive(boolean active, MessageContext synMessageContext) {
/* 125 */     Endpoint endpoint = synMessageContext.getEndpoint(this.key);
/* 126 */     if (endpoint == null) {
/* 127 */       handleException(""Reference to non-existent endpoint for key : "" + this.key);
/*     */     }
/*     */     
/* 130 */     endpoint.setActive(active, synMessageContext);
/*     */   }
/*     */ 
/*     */   
/* 134 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 141 */     if (this.parentEndpoint != null) {
/* 142 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     } else {
/* 144 */       Object o = synMessageContext.getFaultStack().pop();
/* 145 */       if (o != null) {
/* 146 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg) {
/* 152 */     log.error(msg);
/* 153 */     throw new SynapseException(msg);
/*     */   }
/*     */   
/*     */   protected void auditWarn(String msg, MessageContext msgContext) {
/* 157 */     log.warn(msg);
/* 158 */     if (msgContext.getServiceLog() != null) {
/* 159 */       msgContext.getServiceLog().warn(msg);
/*     */     }
/* 161 */     if (shouldTrace(msgContext)) {
/* 162 */       trace.warn(msg);
/*     */     }
/*     */   }
/*     */   
/*     */   public boolean shouldTrace(MessageContext synCtx) {
/* 167 */     Endpoint endpoint = synCtx.getEndpoint(this.key);
/* 168 */     EndpointDefinition endptDefn = null;
/* 169 */     if (endpoint instanceof AddressEndpoint) {
/* 170 */       AddressEndpoint addEndpt = (AddressEndpoint)endpoint;
/* 171 */       endptDefn = addEndpt.getEndpoint();
/* 172 */     } else if (endpoint instanceof WSDLEndpoint) {
/* 173 */       WSDLEndpoint wsdlEndpt = (WSDLEndpoint)endpoint;
/* 174 */       endptDefn = wsdlEndpt.getEndpoint();
/*     */     } 
/*     */     
/* 177 */     if (endptDefn != null) {
/* 178 */       return (endptDefn.getTraceState() == 1 || (endptDefn.getTraceState() == 2 && synCtx.getTracingState() == 1));
/*     */     }
/*     */ 
/*     */     
/* 182 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\IndirectEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.LoadbalanceEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoadbalanceEndpoint
/*     */   implements Endpoint
/*     */ {
/*  44 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   private LoadbalanceAlgorithm algorithm = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failover = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  78 */     Endpoint endpoint = this.algorithm.getNextEndpoint(synMessageContext);
/*  79 */     if (endpoint != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  84 */       if (this.failover) {
/*  85 */         synMessageContext.getEnvelope().build();
/*     */       }
/*     */       
/*  88 */       endpoint.send(synMessageContext);
/*     */     }
/*     */     else {
/*     */       
/*  92 */       setActive(false, synMessageContext);
/*     */       
/*  94 */       if (this.parentEndpoint != null) {
/*  95 */         this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */       } else {
/*  97 */         Object o = synMessageContext.getFaultStack().pop();
/*  98 */         if (o != null) {
/*  99 */           ((FaultHandler)o).handleFault(synMessageContext);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 106 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 114 */   public LoadbalanceAlgorithm getAlgorithm() { return this.algorithm; }
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setAlgorithm(LoadbalanceAlgorithm algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 133 */     if (!this.active) {
/* 134 */       for (int i = 0; i < this.endpoints.size(); i++) {
/* 135 */         Endpoint endpoint = this.endpoints.get(i);
/* 136 */         if (endpoint.isActive(synMessageContext)) {
/* 137 */           this.active = true;
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 146 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public boolean isFailover() { return this.failover; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setFailover(boolean failover) { this.failover = failover; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setEndpoints(List endpoints) { this.endpoints = endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 177 */     if (this.failover) {
/* 178 */       send(synMessageContext);
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/* 184 */       Object o = synMessageContext.getFaultStack().pop();
/* 185 */       if (o != null)
/* 186 */         ((FaultHandler)o).handleFault(synMessageContext); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\LoadbalanceEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.SALoadbalanceEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm;
/*     */ import org.apache.synapse.endpoints.dispatch.Dispatcher;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SALoadbalanceEndpoint
/*     */   implements Endpoint
/*     */ {
/*  56 */   private static final Log log = LogFactory.getLog(SALoadbalanceEndpoint.class);
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String FIRST_MESSAGE_IN_SESSION = ""first_message_in_session"";
/*     */ 
/*     */ 
/*     */   
/*  64 */   private String name = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private List endpoints = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   private LoadbalanceAlgorithm algorithm = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean active = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private Endpoint parentEndpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private Dispatcher dispatcher = null;
/*     */ 
/*     */   
/*     */   public void send(MessageContext synMessageContext) {
/*  98 */     Endpoint endpoint = null;
/*     */ 
/*     */ 
/*     */     
/* 102 */     endpoint = this.dispatcher.getEndpoint(synMessageContext);
/* 103 */     if (endpoint == null) {
/*     */ 
/*     */ 
/*     */       
/* 107 */       endpoint = this.algorithm.getNextEndpoint(synMessageContext);
/*     */ 
/*     */       
/* 110 */       if (this.dispatcher.isServerInitiatedSession()) {
/*     */ 
/*     */         
/* 113 */         Axis2MessageContext axis2MsgCtx = (Axis2MessageContext)synMessageContext;
/* 114 */         OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
/* 115 */         Object o = opCtx.getProperty(""endpointList"");
/*     */         
/* 117 */         if (o != null) {
/* 118 */           List<SALoadbalanceEndpoint> endpointList = (List)o;
/* 119 */           endpointList.add(this);
/*     */ 
/*     */ 
/*     */           
/* 123 */           if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/* 124 */             endpointList.add(endpoint);
/*     */           
/*     */           }
/*     */         
/*     */         }
/*     */         else {
/*     */           
/* 131 */           List<SALoadbalanceEndpoint> endpointList = new ArrayList();
/* 132 */           endpointList.add(this);
/*     */ 
/*     */ 
/*     */           
/* 136 */           if (!(endpoint instanceof SALoadbalanceEndpoint)) {
/* 137 */             endpointList.add(endpoint);
/*     */           }
/*     */           
/* 140 */           opCtx.setProperty(""endpointList"", endpointList);
/*     */         } 
/*     */       } else {
/*     */         
/* 144 */         this.dispatcher.updateSession(synMessageContext, endpoint);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 150 */       synMessageContext.getEnvelope().build();
/*     */ 
/*     */ 
/*     */       
/* 154 */       synMessageContext.setProperty(""first_message_in_session"", Boolean.TRUE);
/*     */     } 
/*     */     
/* 157 */     if (endpoint != null) {
/*     */ 
/*     */ 
/*     */       
/* 161 */       if (endpoint.isActive(synMessageContext)) {
/* 162 */         endpoint.send(synMessageContext);
/*     */       } else {
/* 164 */         informFailure(synMessageContext);
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 170 */       setActive(false, synMessageContext);
/* 171 */       informFailure(synMessageContext);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext responseMsgCtx, List<Endpoint> endpointList) {
/* 183 */     Endpoint endpoint = endpointList.remove(0);
/* 184 */     this.dispatcher.updateSession(responseMsgCtx, endpoint);
/* 185 */     if (endpoint instanceof SALoadbalanceEndpoint) {
/* 186 */       ((SALoadbalanceEndpoint)endpoint).updateSession(responseMsgCtx, endpointList);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 191 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public LoadbalanceAlgorithm getAlgorithm() { return this.algorithm; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setAlgorithm(LoadbalanceAlgorithm algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public boolean isActive(MessageContext synMessageContext) { return this.active; }
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setActive(boolean active, MessageContext synMessageContext) { this.active = active; }
/*     */ 
/*     */ 
/*     */   
/* 229 */   public List getEndpoints() { return this.endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void setEndpoints(List endpoints) { this.endpoints = endpoints; }
/*     */ 
/*     */ 
/*     */   
/* 237 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 241 */   public Dispatcher getDispatcher() { return this.dispatcher; }
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void setDispatcher(Dispatcher dispatcher) { this.dispatcher = dispatcher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {
/* 262 */     Object o = synMessageContext.getProperty(""first_message_in_session"");
/*     */     
/* 264 */     if (o != null && Boolean.TRUE.equals(o)) {
/*     */ 
/*     */ 
/*     */       
/* 268 */       this.dispatcher.unbind(synMessageContext);
/* 269 */       send(synMessageContext);
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 274 */       informFailure(synMessageContext);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void informFailure(MessageContext synMessageContext) {
/* 280 */     if (this.parentEndpoint != null) {
/* 281 */       this.parentEndpoint.onChildEndpointFail(this, synMessageContext);
/*     */     }
/*     */     else {
/*     */       
/* 285 */       Object o = synMessageContext.getFaultStack().pop();
/* 286 */       if (o != null) {
/* 287 */         ((FaultHandler)o).handleFault(synMessageContext);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private static void handleException(String msg) {
/* 293 */     log.error(msg);
/* 294 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\SALoadbalanceEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.WSDLEndpoint,"/*     */ package org.apache.synapse.endpoints;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.utils.EndpointDefinition;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WSDLEndpoint
/*     */   extends FaultHandler
/*     */   implements Endpoint
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(AddressEndpoint.class);
/*  45 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */   
/*  47 */   private String name = null;
/*     */   
/*     */   private String wsdlURI;
/*     */   
/*     */   private OMElement wsdlDoc;
/*     */   
/*     */   private String serviceName;
/*     */   
/*     */   private String portName;
/*     */   
/*  57 */   private long suspendOnFailDuration = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  63 */   private long recoverOn = Long.MAX_VALUE;
/*     */   
/*     */   private boolean active = true;
/*  66 */   private Endpoint parentEndpoint = null;
/*  67 */   private EndpointDefinition endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void send(MessageContext synCtx) {
/*  80 */     boolean traceOn = isTraceOn(synCtx);
/*  81 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  83 */     if (traceOrDebugOn) {
/*  84 */       traceOrDebug(traceOn, ""Start : Address Endpoint"");
/*     */       
/*  86 */       if (traceOn && trace.isTraceEnabled()) {
/*  87 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  91 */     String eprAddress = null;
/*  92 */     if (this.endpoint.getAddress() != null) {
/*     */       
/*  94 */       eprAddress = this.endpoint.getAddress();
/*  95 */       String endPointName = getName();
/*  96 */       if (endPointName == null) {
/*  97 */         endPointName = ""AnonymousEndpoint"";
/*     */       }
/*     */ 
/*     */       
/* 101 */       boolean statisticsEnable = (1 == this.endpoint.getStatisticsState());
/*     */ 
/*     */       
/* 104 */       if (statisticsEnable) {
/* 105 */         EndPointStatisticsStack endPointStatisticsStack = null;
/* 106 */         Object statisticsStackObj = synCtx.getProperty(""synapse.endpoint.stats"");
/*     */         
/* 108 */         if (statisticsStackObj == null) {
/* 109 */           endPointStatisticsStack = new EndPointStatisticsStack();
/* 110 */           synCtx.setProperty(""synapse.endpoint.stats"", endPointStatisticsStack);
/*     */         }
/* 112 */         else if (statisticsStackObj instanceof EndPointStatisticsStack) {
/* 113 */           endPointStatisticsStack = (EndPointStatisticsStack)statisticsStackObj;
/*     */         } 
/* 115 */         if (endPointStatisticsStack != null) {
/* 116 */           boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 117 */           endPointStatisticsStack.put(endPointName, System.currentTimeMillis(), !synCtx.isResponse(), statisticsEnable, isFault);
/*     */         } 
/*     */       } 
/*     */       
/* 121 */       if (traceOrDebugOn) {
/* 122 */         traceOrDebug(traceOn, ""Sending message to WSDL endpoint : "" + endPointName + "" resolves to address = "" + eprAddress);
/*     */         
/* 124 */         traceOrDebug(traceOn, ""SOAPAction: "" + ((synCtx.getSoapAction() != null) ? synCtx.getSoapAction() : ""null""));
/*     */         
/* 126 */         traceOrDebug(traceOn, ""WSA-Action: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */ 
/*     */         
/* 129 */         if (traceOn && trace.isTraceEnabled()) {
/* 130 */           trace.trace(""Envelope : \n"" + synCtx.getEnvelope());
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 135 */       synCtx.pushFaultHandler(this);
/*     */ 
/*     */       
/* 138 */       synCtx.setProperty(""processed_endpoint"", this);
/*     */       
/* 140 */       synCtx.getEnvironment().send(this.endpoint, synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onFault(MessageContext synCtx) {
/* 148 */     if (this.parentEndpoint != null) {
/* 149 */       this.parentEndpoint.onChildEndpointFail(this, synCtx);
/*     */     } else {
/* 151 */       Stack<FaultHandler> faultStack = synCtx.getFaultStack();
/* 152 */       if (!faultStack.isEmpty()) {
/* 153 */         ((FaultHandler)faultStack.pop()).handleFault(synCtx);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void onChildEndpointFail(Endpoint endpoint, MessageContext synMessageContext) {}
/*     */ 
/*     */   
/* 163 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setName(String name) { this.name = name.trim(); }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public long getSuspendOnFailDuration() { return this.suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setSuspendOnFailDuration(long suspendOnFailDuration) { this.suspendOnFailDuration = suspendOnFailDuration; }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public String getWsdlURI() { return this.wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setWsdlURI(String wsdlURI) { this.wsdlURI = wsdlURI; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public OMElement getWsdlDoc() { return this.wsdlDoc; }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setWsdlDoc(OMElement wsdlDoc) { this.wsdlDoc = wsdlDoc; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public String getServiceName() { return this.serviceName; }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setServiceName(String serviceName) { this.serviceName = serviceName; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public String getPortName() { return this.portName; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setPortName(String portName) { this.portName = portName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isActive(MessageContext synMessageContext) {
/* 219 */     if (!this.active && 
/* 220 */       System.currentTimeMillis() > this.recoverOn) {
/* 221 */       this.active = true;
/*     */     }
/*     */ 
/*     */     
/* 225 */     return this.active;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setActive(boolean active, MessageContext synMessageContext) {
/* 237 */     if (!active) {
/* 238 */       if (this.suspendOnFailDuration != -1L) {
/* 239 */         this.recoverOn = System.currentTimeMillis() + this.suspendOnFailDuration;
/*     */       } else {
/* 241 */         this.recoverOn = Long.MAX_VALUE;
/*     */       } 
/*     */     }
/*     */     
/* 245 */     this.active = active;
/*     */   }
/*     */ 
/*     */   
/* 249 */   public void setParentEndpoint(Endpoint parentEndpoint) { this.parentEndpoint = parentEndpoint; }
/*     */ 
/*     */ 
/*     */   
/* 253 */   public EndpointDefinition getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setEndpoint(EndpointDefinition endpoint) { this.endpoint = endpoint; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   protected boolean isTraceOn(MessageContext msgCtx) { return (this.endpoint.getTraceState() == 1 || (this.endpoint.getTraceState() == 2 && msgCtx.getTracingState() == 1)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   protected boolean isTraceOrDebugOn(boolean isTraceOn) { return (isTraceOn || log.isDebugEnabled()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void traceOrDebug(boolean traceOn, String msg) {
/* 288 */     if (traceOn) {
/* 289 */       trace.info(msg);
/*     */     }
/* 291 */     if (log.isDebugEnabled())
/* 292 */       log.debug(msg); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\WSDLEndpoint.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.algorithms.LoadbalanceAlgorithm,"package org.apache.synapse.endpoints.algorithms;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
public interface LoadbalanceAlgorithm {
  Endpoint getNextEndpoint(MessageContext paramMessageContext);
  void reset();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\algorithms\LoadbalanceAlgorithm.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.algorithms.RoundRobin,"/*    */ package org.apache.synapse.endpoints.algorithms;
/*    */ 
/*    */ import java.util.ArrayList;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RoundRobin
/*    */   implements LoadbalanceAlgorithm
/*    */ {
/* 33 */   private ArrayList endpoints = null;
/* 34 */   private int currentEPR = 0;
/*    */ 
/*    */   
/* 37 */   public RoundRobin(ArrayList endpoints) { this.endpoints = endpoints; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Endpoint getNextEndpoint(MessageContext synapseMessageContext) {
/* 49 */     Endpoint nextEndpoint = null;
/* 50 */     int attempts = 0;
/*    */ 
/*    */     
/*    */     do {
/* 54 */       synchronized (this) {
/* 55 */         nextEndpoint = this.endpoints.get(this.currentEPR);
/*    */         
/* 57 */         if (this.currentEPR == this.endpoints.size() - 1) {
/* 58 */           this.currentEPR = 0;
/*    */         } else {
/* 60 */           this.currentEPR++;
/*    */         } 
/*    */       } 
/*    */       
/* 64 */       attempts++;
/* 65 */       if (attempts > this.endpoints.size()) {
/* 66 */         return null;
/*    */       }
/*    */     }
/* 69 */     while (!nextEndpoint.isActive(synapseMessageContext));
/*    */     
/* 71 */     return nextEndpoint;
/*    */   }
/*    */ 
/*    */   
/* 75 */   public void reset() { this.currentEPR = 0; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\algorithms\RoundRobin.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.Dispatcher,"package org.apache.synapse.endpoints.dispatch;
import org.apache.synapse.MessageContext;
import org.apache.synapse.endpoints.Endpoint;
public interface Dispatcher {
  Endpoint getEndpoint(MessageContext paramMessageContext);
  void updateSession(MessageContext paramMessageContext, Endpoint paramEndpoint);
  void unbind(MessageContext paramMessageContext);
  boolean isServerInitiatedSession();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\dispatch\Dispatcher.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.HttpSessionDispatcher,"/*     */ package org.apache.synapse.endpoints.dispatch;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HttpSessionDispatcher
/*     */   implements Dispatcher
/*     */ {
/*  41 */   Map sessionMap = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(MessageContext synCtx) {
/*  54 */     Endpoint endpoint = null;
/*     */     
/*  56 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/*  59 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*  60 */     if (o != null && o instanceof Map) {
/*  61 */       Map headerMap = (Map)o;
/*  62 */       Object cookie = headerMap.get(""Cookie"");
/*     */       
/*  64 */       if (cookie != null) {
/*  65 */         Object e = this.sessionMap.get(cookie);
/*  66 */         if (e != null) {
/*  67 */           endpoint = (Endpoint)e;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/*  72 */     return endpoint;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/*  85 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/*  88 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*  89 */     if (o != null && o instanceof Map) {
/*  90 */       Map headerMap = (Map)o;
/*  91 */       Object cookie = headerMap.get(""Set-Cookie"");
/*     */       
/*  93 */       if (cookie != null)
/*     */       {
/*  95 */         synchronized (this.sessionMap) {
/*  96 */           if (!this.sessionMap.containsKey(cookie)) {
/*  97 */             this.sessionMap.put(cookie, endpoint);
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void unbind(MessageContext synCtx) {
/* 106 */     MessageContext axis2MessageContext = ((Axis2MessageContext)synCtx).getAxis2MessageContext();
/*     */ 
/*     */     
/* 109 */     Object o = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/* 110 */     if (o != null && o instanceof Map) {
/* 111 */       Map headerMap = (Map)o;
/* 112 */       Object cookie = headerMap.get(""Cookie"");
/*     */       
/* 114 */       if (cookie != null) {
/* 115 */         this.sessionMap.remove(cookie);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public boolean isServerInitiatedSession() { return true; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\dispatch\HttpSessionDispatcher.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.SimpleClientSessionDispatcher,"/*    */ package org.apache.synapse.endpoints.dispatch;
/*    */ 
/*    */ import java.util.Collections;
/*    */ import java.util.HashMap;
/*    */ import java.util.Map;
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.soap.SOAPHeader;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.endpoints.Endpoint;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SimpleClientSessionDispatcher
/*    */   implements Dispatcher
/*    */ {
/* 44 */   private Map sessionMap = Collections.synchronizedMap(new HashMap<Object, Object>());
/*    */ 
/*    */   
/*    */   public Endpoint getEndpoint(MessageContext synCtx) {
/* 48 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 50 */     if (header != null) {
/* 51 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 53 */       if (csID != null && csID.getText() != null) {
/* 54 */         Object o = this.sessionMap.get(csID.getText());
/* 55 */         if (o != null) {
/* 56 */           return (Endpoint)o;
/*    */         }
/*    */       } 
/*    */     } 
/*    */     
/* 61 */     return null;
/*    */   }
/*    */ 
/*    */   
/*    */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/* 66 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 68 */     if (header != null) {
/* 69 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 71 */       if (csID != null && csID.getText() != null)
/*    */       {
/* 73 */         synchronized (this.sessionMap) {
/* 74 */           if (!this.sessionMap.containsKey(csID.getText())) {
/* 75 */             this.sessionMap.put(csID.getText(), endpoint);
/*    */           }
/*    */         } 
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public void unbind(MessageContext synCtx) {
/* 84 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*    */     
/* 86 */     if (header != null) {
/* 87 */       OMElement csID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/synapse"", ""ClientID"", ""syn""));
/*    */       
/* 89 */       if (csID != null && csID.getText() != null) {
/* 90 */         this.sessionMap.remove(csID.getText());
/*    */       }
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/* 96 */   public boolean isServerInitiatedSession() { return false; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\dispatch\SimpleClientSessionDispatcher.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.dispatch.SoapSessionDispatcher,"/*     */ package org.apache.synapse.endpoints.dispatch;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SoapSessionDispatcher
/*     */   implements Dispatcher
/*     */ {
/*  38 */   private Map sessionMap = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Endpoint getEndpoint(MessageContext synCtx) {
/*  50 */     Endpoint endpoint = null;
/*     */     
/*  52 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/*  54 */     if (header != null) {
/*  55 */       OMElement sgcID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */ 
/*     */       
/*  58 */       if (sgcID != null && sgcID.getText() != null) {
/*     */         
/*  60 */         Object e = this.sessionMap.get(sgcID.getText());
/*     */         
/*  62 */         if (e != null) {
/*  63 */           endpoint = (Endpoint)e;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/*  68 */     return endpoint;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void updateSession(MessageContext synCtx, Endpoint endpoint) {
/*  85 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/*  87 */     if (header != null) {
/*  88 */       OMElement replyTo = header.getFirstChildWithName(new QName(""http://www.w3.org/2005/08/addressing"", ""ReplyTo"", ""wsa""));
/*     */ 
/*     */       
/*  91 */       if (replyTo != null) {
/*  92 */         OMElement referenceParameters = replyTo.getFirstChildWithName(new QName(""http://www.w3.org/2005/08/addressing"", ""ReferenceParameters"", ""wsa""));
/*     */ 
/*     */         
/*  95 */         if (referenceParameters != null) {
/*  96 */           OMElement sgcID = referenceParameters.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */ 
/*     */ 
/*     */           
/* 100 */           synchronized (this.sessionMap) {
/* 101 */             if (!this.sessionMap.containsKey(sgcID.getText())) {
/* 102 */               this.sessionMap.put(sgcID.getText(), endpoint);
/*     */             }
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void unbind(MessageContext synCtx) {
/* 112 */     SOAPHeader header = synCtx.getEnvelope().getHeader();
/*     */     
/* 114 */     if (header != null) {
/* 115 */       OMElement sgcID = header.getFirstChildWithName(new QName(""http://ws.apache.org/namespaces/axis2"", ""ServiceGroupId"", ""axis2""));
/*     */       
/* 117 */       if (sgcID != null && sgcID.getText() != null) {
/* 118 */         this.sessionMap.remove(sgcID.getText());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public boolean isServerInitiatedSession() { return true; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoints\dispatch\SoapSessionDispatcher.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.endpoints.utils.EndpointDefinition,"/*     */ package org.apache.synapse.endpoints.utils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EndpointDefinition
/*     */ {
/*  33 */   private String address = null;
/*     */   
/*     */   private boolean reliableMessagingOn = false;
/*     */   
/*     */   private boolean addressingOn = false;
/*     */   
/*     */   private boolean securityOn = false;
/*     */   
/*  41 */   private String wsRMPolicyKey = null;
/*     */   
/*  43 */   private String wsSecPolicyKey = null;
/*     */   
/*     */   private boolean useSeparateListener = false;
/*     */   
/*     */   private boolean forcePOX = false;
/*     */   
/*     */   private boolean forceSOAP11 = false;
/*     */   
/*     */   private boolean forceSOAP12 = false;
/*     */   
/*     */   private boolean useMTOM = false;
/*     */   
/*     */   private boolean useSwa = false;
/*     */   
/*  57 */   private String format = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  65 */   private long timeoutDuration = 0L;
/*     */ 
/*     */   
/*  68 */   private int timeoutAction = 100;
/*     */ 
/*     */   
/*  71 */   private int statisticsState = 2;
/*     */ 
/*     */   
/*  74 */   private int traceState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   public String getAddress() { return this.address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setAddress(String address) { this.address = address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public boolean isReliableMessagingOn() { return this.reliableMessagingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setReliableMessagingOn(boolean reliableMessagingOn) { this.reliableMessagingOn = reliableMessagingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public boolean isAddressingOn() { return this.addressingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setAddressingOn(boolean addressingOn) { this.addressingOn = addressingOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public boolean isSecurityOn() { return this.securityOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setSecurityOn(boolean securityOn) { this.securityOn = securityOn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public String getWsSecPolicyKey() { return this.wsSecPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setWsSecPolicyKey(String wsSecPolicyKey) { this.wsSecPolicyKey = wsSecPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public String getWsRMPolicyKey() { return this.wsRMPolicyKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setWsRMPolicyKey(String wsRMPolicyKey) { this.wsRMPolicyKey = wsRMPolicyKey; }
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setUseSeparateListener(boolean b) { this.useSeparateListener = b; }
/*     */ 
/*     */   
/* 176 */   public boolean isUseSeparateListener() { return this.useSeparateListener; }
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setForcePOX(boolean forcePOX) { this.forcePOX = forcePOX; }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public boolean isForcePOX() { return this.forcePOX; }
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setForceSOAP11(boolean forceSOAP11) { this.forceSOAP11 = forceSOAP11; }
/*     */ 
/*     */ 
/*     */   
/* 192 */   public boolean isForceSOAP11() { return this.forceSOAP11; }
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setForceSOAP12(boolean forceSOAP12) { this.forceSOAP12 = forceSOAP12; }
/*     */ 
/*     */ 
/*     */   
/* 200 */   public boolean isForceSOAP12() { return this.forceSOAP12; }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public boolean isUseMTOM() { return this.useMTOM; }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setUseMTOM(boolean useMTOM) { this.useMTOM = useMTOM; }
/*     */ 
/*     */ 
/*     */   
/* 212 */   public boolean isUseSwa() { return this.useSwa; }
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setUseSwa(boolean useSwa) { this.useSwa = useSwa; }
/*     */ 
/*     */ 
/*     */   
/* 220 */   public long getTimeoutDuration() { return this.timeoutDuration; }
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setTimeoutDuration(long timeoutDuration) { this.timeoutDuration = timeoutDuration; }
/*     */ 
/*     */ 
/*     */   
/* 228 */   public int getTimeoutAction() { return this.timeoutAction; }
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setTimeoutAction(int timeoutAction) { this.timeoutAction = timeoutAction; }
/*     */ 
/*     */ 
/*     */   
/* 236 */   public String getFormat() { return this.format; }
/*     */ 
/*     */ 
/*     */   
/* 240 */   public void setFormat(String format) { this.format = format; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public int getStatisticsState() { return this.statisticsState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setStatisticsState(int statisticsState) { this.statisticsState = statisticsState; }
/*     */ 
/*     */ 
/*     */   
/* 262 */   public int getTraceState() { return this.traceState; }
/*     */ 
/*     */ 
/*     */   
/* 266 */   public void setTraceState(int traceState) { this.traceState = traceState; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\endpoint\\utils\EndpointDefinition.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.AbstractListMediator,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.synapse.ManagedLifecycle;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractListMediator
/*     */   extends AbstractMediator
/*     */   implements ListMediator, ManagedLifecycle
/*     */ {
/*  40 */   protected List mediators = new ArrayList();
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  44 */     int parentsEffectiveTraceState = synCtx.getTracingState();
/*     */ 
/*     */     
/*  47 */     setEffectiveTraceState(synCtx);
/*  48 */     int myEffectiveTraceState = synCtx.getTracingState();
/*     */     
/*     */     try {
/*  51 */       if (isTraceOrDebugOn(isTraceOn(synCtx))) {
/*  52 */         traceOrDebug(isTraceOn(synCtx), ""Sequence <"" + getType() + ""> :: mediate()"");
/*     */       }
/*     */       
/*  55 */       for (Iterator<Mediator> it = this.mediators.iterator(); it.hasNext(); ) {
/*  56 */         Mediator m = it.next();
/*     */ 
/*     */         
/*  59 */         synCtx.setTracingState(myEffectiveTraceState);
/*  60 */         if (!m.mediate(synCtx)) {
/*  61 */           return false;
/*     */         }
/*     */       } 
/*     */     } finally {
/*  65 */       synCtx.setTracingState(parentsEffectiveTraceState);
/*     */     } 
/*  67 */     return true;
/*     */   }
/*     */ 
/*     */   
/*  71 */   public List getList() { return this.mediators; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public boolean addChild(Mediator m) { return this.mediators.add(m); }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public boolean addAll(List c) { return this.mediators.addAll(c); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public Mediator getChild(int pos) { return this.mediators.get(pos); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public boolean removeChild(Mediator m) { return this.mediators.remove(m); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public Mediator removeChild(int pos) { return this.mediators.remove(pos); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init(SynapseEnvironment se) {
/*  99 */     if (this.log.isDebugEnabled()) {
/* 100 */       this.log.debug(""Initializing child mediators"");
/*     */     }
/*     */     
/* 103 */     for (Iterator<Mediator> it = this.mediators.iterator(); it.hasNext(); ) {
/* 104 */       Mediator m = it.next();
/*     */       
/* 106 */       if (m instanceof ManagedLifecycle) {
/* 107 */         ((ManagedLifecycle)m).init(se);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void destroy() {
/* 116 */     if (this.log.isDebugEnabled()) {
/* 117 */       this.log.debug(""Destroying child mediators"");
/*     */     }
/*     */     
/* 120 */     for (Iterator<Mediator> it = this.mediators.iterator(); it.hasNext(); ) {
/* 121 */       Mediator m = it.next();
/*     */       
/* 123 */       if (m instanceof ManagedLifecycle)
/* 124 */         ((ManagedLifecycle)m).destroy(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\AbstractListMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.AbstractMediator,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractMediator
/*     */   implements Mediator
/*     */ {
/*     */   protected Log log;
/*  39 */   protected static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*  42 */   protected int traceState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  48 */   protected AbstractMediator() { this.log = LogFactory.getLog(getClass()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getType() {
/*  56 */     String cls = getClass().getName();
/*  57 */     int p = cls.lastIndexOf(""."");
/*  58 */     if (p == -1) {
/*  59 */       return cls;
/*     */     }
/*  61 */     return cls.substring(p + 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  69 */   public int getTraceState() { return this.traceState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void setTraceState(int traceState) { this.traceState = traceState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEffectiveTraceState(MessageContext synCtx) {
/*  89 */     if (this.traceState != 2) {
/*  90 */       synCtx.setTracingState(this.traceState);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public boolean shouldTrace(int parentTraceState) { return (this.traceState == 1 || (this.traceState == 2 && parentTraceState == 1)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   protected boolean isTraceOn(MessageContext msgCtx) { return (this.traceState == 1 || (this.traceState == 2 && msgCtx.getTracingState() == 1)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   protected boolean isTraceOrDebugOn(boolean isTraceOn) { return (isTraceOn || this.log.isDebugEnabled()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void traceOrDebug(boolean traceOn, String msg) {
/* 135 */     if (traceOn) {
/* 136 */       trace.info(msg);
/*     */     }
/* 138 */     if (this.log.isDebugEnabled()) {
/* 139 */       this.log.debug(msg);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void traceOrDebugWarn(boolean traceOn, String msg) {
/* 149 */     if (traceOn) {
/* 150 */       trace.warn(msg);
/*     */     }
/* 152 */     if (this.log.isDebugEnabled()) {
/* 153 */       this.log.warn(msg);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void auditLog(String msg, MessageContext msgContext) {
/* 164 */     this.log.info(msg);
/* 165 */     if (msgContext.getServiceLog() != null) {
/* 166 */       msgContext.getServiceLog().info(msg);
/*     */     }
/* 168 */     if (shouldTrace(msgContext.getTracingState())) {
/* 169 */       trace.info(msg);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleException(String msg, MessageContext msgContext) {
/* 180 */     this.log.error(msg);
/* 181 */     if (msgContext.getServiceLog() != null) {
/* 182 */       msgContext.getServiceLog().error(msg);
/*     */     }
/* 184 */     if (shouldTrace(msgContext.getTracingState())) {
/* 185 */       trace.error(msg);
/*     */     }
/* 187 */     throw new SynapseException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void auditWarn(String msg, MessageContext msgContext) {
/* 196 */     this.log.warn(msg);
/* 197 */     if (msgContext.getServiceLog() != null) {
/* 198 */       msgContext.getServiceLog().warn(msg);
/*     */     }
/* 200 */     if (shouldTrace(msgContext.getTracingState())) {
/* 201 */       trace.warn(msg);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleException(String msg, Exception e, MessageContext msgContext) {
/* 213 */     this.log.error(msg, e);
/* 214 */     if (msgContext.getServiceLog() != null) {
/* 215 */       msgContext.getServiceLog().error(msg, e);
/*     */     }
/* 217 */     if (shouldTrace(msgContext.getTracingState())) {
/* 218 */       trace.error(msg, e);
/*     */     }
/* 220 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\AbstractMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.FilterMediator,"package org.apache.synapse.mediators;
import org.apache.synapse.MessageContext;
public interface FilterMediator extends ListMediator {
  boolean test(MessageContext paramMessageContext);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\FilterMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.GetPropertyFunction,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.jaxen.Context;
/*     */ import org.jaxen.Function;
/*     */ import org.jaxen.FunctionCallException;
/*     */ import org.jaxen.Navigator;
/*     */ import org.jaxen.function.StringFunction;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GetPropertyFunction
/*     */   implements Function
/*     */ {
/*  44 */   private static final Log log = LogFactory.getLog(GetPropertyFunction.class);
/*  45 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*     */   public static final String NULL_STRING = """";
/*     */   
/*  50 */   private MessageContext synCtx = null;
/*     */ 
/*     */   
/*  53 */   public MessageContext getSynCtx() { return this.synCtx; }
/*     */ 
/*     */ 
/*     */   
/*  57 */   public void setSynCtx(MessageContext synCtx) { this.synCtx = synCtx; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object call(Context context, List args) throws FunctionCallException {
/*  71 */     boolean traceOn = (this.synCtx.getTracingState() == 1);
/*  72 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  74 */     if (args == null || args.size() == 0) {
/*  75 */       if (traceOrDebugOn) {
/*  76 */         traceOrDebug(traceOn, ""Property key value for lookup is not specified"");
/*     */       }
/*  78 */       return null;
/*     */     } 
/*     */     
/*  81 */     int size = args.size();
/*  82 */     if (size == 1) {
/*  83 */       return evaluate(""default"", args.get(0), context.getNavigator());
/*     */     }
/*     */     
/*  86 */     if (size == 2) {
/*  87 */       return evaluate(args.get(0), args.get(1), context.getNavigator());
/*     */     }
/*     */ 
/*     */     
/*  91 */     String msg = ""Invalid arguments for synapse:get-property(prop-name) 0r  synapse:get-property(scope, prop-name) XPath function "";
/*     */     
/*  93 */     if (traceOn) {
/*  94 */       trace.error(msg);
/*     */     }
/*  96 */     log.error(msg);
/*  97 */     throw new FunctionCallException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object evaluate(Object scopeObject, Object keyObject, Navigator navigator) {
/* 113 */     boolean traceOn = (this.synCtx.getTracingState() == 1);
/* 114 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/* 116 */     if (this.synCtx == null) {
/* 117 */       if (traceOrDebugOn) {
/* 118 */         traceOrDebug(traceOn, ""Synapse message context has not been set for the XPath extension function 'synapse:get-property(prop-name)'"");
/*     */       }
/*     */       
/* 121 */       return null;
/*     */     } 
/*     */     
/* 124 */     String scope = StringFunction.evaluate(scopeObject, navigator);
/* 125 */     String key = StringFunction.evaluate(keyObject, navigator);
/*     */     
/* 127 */     if (key == null || """".equals(key)) {
/* 128 */       if (traceOrDebugOn) {
/* 129 */         traceOrDebug(traceOn, ""property-name should be provided when executing synapse:get-property(scope,prop-name) or synapse:get-property(prop-name) Xpath function"");
/*     */       }
/*     */ 
/*     */       
/* 133 */       return null;
/*     */     } 
/*     */     
/* 136 */     if (""default"".equals(scope)) {
/*     */       
/* 138 */       if (""To"".equals(key)) {
/* 139 */         EndpointReference toEPR = this.synCtx.getTo();
/* 140 */         if (toEPR != null) {
/* 141 */           return toEPR.getAddress();
/*     */         }
/* 143 */         return """";
/*     */       } 
/* 145 */       if (""From"".equals(key)) {
/* 146 */         EndpointReference fromEPR = this.synCtx.getFrom();
/* 147 */         if (fromEPR != null) {
/* 148 */           return fromEPR.getAddress();
/*     */         }
/* 150 */         return """";
/*     */       } 
/* 152 */       if (""Action"".equals(key)) {
/* 153 */         String wsaAction = this.synCtx.getWSAAction();
/* 154 */         if (wsaAction != null) {
/* 155 */           return wsaAction;
/*     */         }
/* 157 */         return """";
/*     */       } 
/* 159 */       if (""FaultTo"".equals(key)) {
/* 160 */         EndpointReference faultEPR = this.synCtx.getFaultTo();
/* 161 */         if (faultEPR != null) {
/* 162 */           return faultEPR.getAddress();
/*     */         }
/* 164 */         return """";
/*     */       } 
/* 166 */       if (""ReplyTo"".equals(key)) {
/* 167 */         EndpointReference replyToEPR = this.synCtx.getReplyTo();
/* 168 */         if (replyToEPR != null) {
/* 169 */           return replyToEPR.getAddress();
/*     */         }
/* 171 */         return """";
/*     */       } 
/* 173 */       if (""MessageID"".equals(key)) {
/* 174 */         String messageID = this.synCtx.getMessageID();
/* 175 */         if (messageID != null) {
/* 176 */           return messageID;
/*     */         }
/* 178 */         return """";
/*     */       } 
/* 180 */       if (""MESSAGE_FORMAT"".equals(key)) {
/* 181 */         if (this.synCtx.isDoingPOX())
/* 182 */           return ""pox""; 
/* 183 */         if (this.synCtx.isSOAP11()) {
/* 184 */           return ""soap11"";
/*     */         }
/* 186 */         return ""soap12"";
/*     */       } 
/* 188 */       Object result = this.synCtx.getProperty(key);
/* 189 */       if (result != null) {
/* 190 */         return result;
/*     */       }
/* 192 */       return this.synCtx.getEntry(key);
/*     */     } 
/*     */ 
/*     */     
/* 196 */     if (""axis2"".equals(scope) && this.synCtx instanceof Axis2MessageContext) {
/*     */ 
/*     */       
/* 199 */       MessageContext axis2MessageContext = ((Axis2MessageContext)this.synCtx).getAxis2MessageContext();
/*     */       
/* 201 */       return axis2MessageContext.getProperty(key);
/*     */     } 
/* 203 */     if (""transport"".equals(scope) && this.synCtx instanceof Axis2MessageContext) {
/*     */ 
/*     */       
/* 206 */       MessageContext axis2MessageContext = ((Axis2MessageContext)this.synCtx).getAxis2MessageContext();
/*     */       
/* 208 */       Object headers = axis2MessageContext.getProperty(""TRANSPORT_HEADERS"");
/*     */ 
/*     */       
/* 211 */       if (headers != null && headers instanceof Map) {
/* 212 */         Map headersMap = (HashMap)headers;
/* 213 */         return headersMap.get(key);
/*     */       }
/*     */     
/*     */     }
/* 217 */     else if (traceOrDebugOn) {
/* 218 */       traceOrDebug(traceOn, ""Invalid scope : '"" + scope + ""' has been set for the "" + ""synapse:get-property(scope,prop-name) XPath function"");
/*     */     } 
/*     */ 
/*     */     
/* 222 */     return """";
/*     */   }
/*     */   
/*     */   private void traceOrDebug(boolean traceOn, String msg) {
/* 226 */     if (traceOn) {
/* 227 */       trace.info(msg);
/*     */     }
/* 229 */     if (log.isDebugEnabled())
/* 230 */       log.debug(msg); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\GetPropertyFunction.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.ListMediator,"package org.apache.synapse.mediators;
import java.util.List;
import org.apache.synapse.Mediator;
public interface ListMediator extends Mediator {
  boolean addChild(Mediator paramMediator);
  boolean addAll(List paramList);
  Mediator getChild(int paramInt);
  boolean removeChild(Mediator paramMediator);
  Mediator removeChild(int paramInt);
  List getList();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\ListMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.MediatorFaultHandler,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorFaultHandler
/*     */   extends FaultHandler
/*     */ {
/*  36 */   private static final Log log = LogFactory.getLog(MediatorFaultHandler.class);
/*  37 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  42 */   private Mediator faultMediator = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  51 */   public MediatorFaultHandler(Mediator faultMediator) { this.faultMediator = faultMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onFault(MessageContext synCtx) throws SynapseException {
/*  63 */     boolean traceOn = (synCtx.getTracingState() == 1);
/*  64 */     boolean traceOrDebugOn = (traceOn || log.isDebugEnabled());
/*     */     
/*  66 */     String name = null;
/*  67 */     if (this.faultMediator instanceof SequenceMediator) {
/*  68 */       name = ((SequenceMediator)this.faultMediator).getName();
/*     */     }
/*  70 */     if (name == null) {
/*  71 */       name = this.faultMediator.getClass().getName();
/*     */     }
/*     */     
/*  74 */     if (traceOrDebugOn) {
/*  75 */       traceOrDebugWarn(traceOn, ""Executing fault handler mediator : "" + name);
/*     */     }
/*     */     
/*  78 */     synCtx.getServiceLog().warn(""Executing fault sequence mediator : "" + name);
/*  79 */     this.faultMediator.mediate(synCtx);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public Mediator getFaultMediator() { return this.faultMediator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setFaultMediator(Mediator faultMediator) { this.faultMediator = faultMediator; }
/*     */ 
/*     */   
/*     */   private void traceOrDebugWarn(boolean traceOn, String msg) {
/* 101 */     if (traceOn) {
/* 102 */       trace.warn(msg);
/*     */     }
/* 104 */     log.warn(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\MediatorFaultHandler.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.MediatorProperty,"/*    */ package org.apache.synapse.mediators;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MediatorProperty
/*    */ {
/* 36 */   public static final QName PROPERTY_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"");
/* 37 */   public static final QName ATT_NAME_Q = new QName("""", ""name"");
/* 38 */   public static final QName ATT_VALUE_Q = new QName("""", ""value"");
/* 39 */   public static final QName ATT_EXPR_Q = new QName("""", ""expression"");
/*    */   
/*    */   private String name;
/*    */   
/*    */   private String value;
/*    */   
/*    */   private AXIOMXPath expression;
/*    */ 
/*    */   
/* 48 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 52 */   public void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 56 */   public String getValue() { return this.value; }
/*    */ 
/*    */ 
/*    */   
/* 60 */   public void setValue(String value) { this.value = value; }
/*    */ 
/*    */ 
/*    */   
/* 64 */   public AXIOMXPath getExpression() { return this.expression; }
/*    */ 
/*    */ 
/*    */   
/* 68 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*    */ 
/*    */ 
/*    */   
/* 72 */   public String getEvaluatedExpression(MessageContext synCtx) { return Axis2MessageContext.getStringValue(this.expression, synCtx); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\MediatorProperty.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.MediatorWorker,"/*     */ package org.apache.synapse.mediators;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MediatorWorker
/*     */   implements Runnable
/*     */ {
/*  33 */   private static final Log log = LogFactory.getLog(MediatorWorker.class);
/*  34 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */   
/*  37 */   private Mediator seq = null;
/*     */ 
/*     */   
/*  40 */   private MessageContext synCtx = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MediatorWorker(Mediator seq, MessageContext synCtx) {
/*  49 */     this.seq = seq;
/*  50 */     this.synCtx = synCtx;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MediatorWorker(MessageContext synCtx) {
/*  60 */     this.synCtx = synCtx;
/*  61 */     this.seq = synCtx.getMainSequence();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/*     */     try {
/*  70 */       this.seq.mediate(this.synCtx);
/*  71 */       ((Axis2MessageContext)this.synCtx).getAxis2MessageContext().getEnvelope().discard();
/*     */     }
/*  73 */     catch (SynapseException syne) {
/*  74 */       if (!this.synCtx.getFaultStack().isEmpty()) {
/*  75 */         warn(false, ""Executing fault handler due to exception encountered"", this.synCtx);
/*  76 */         ((FaultHandler)this.synCtx.getFaultStack().pop()).handleFault(this.synCtx, (Exception)syne);
/*     */       } else {
/*     */         
/*  79 */         warn(false, ""Exception encountered but no fault handler found - message dropped"", this.synCtx);
/*     */       }
/*     */     
/*     */     }
/*  83 */     catch (Exception e) {
/*  84 */       String msg = ""Unexpected error executing task"";
/*  85 */       log.error(msg, e);
/*  86 */       if (this.synCtx.getServiceLog() != null) {
/*  87 */         this.synCtx.getServiceLog().error(msg, e);
/*     */       }
/*  89 */       if (!this.synCtx.getFaultStack().isEmpty()) {
/*  90 */         warn(false, ""Executing fault handler due to exception encountered"", this.synCtx);
/*  91 */         ((FaultHandler)this.synCtx.getFaultStack().pop()).handleFault(this.synCtx, e);
/*     */       } else {
/*     */         
/*  94 */         warn(false, ""Exception encountered but no fault handler found - message dropped"", this.synCtx);
/*     */       } 
/*     */     } 
/*     */     
/*  98 */     this.synCtx = null;
/*  99 */     this.seq = null;
/*     */   }
/*     */   
/*     */   private void warn(boolean traceOn, String msg, MessageContext msgContext) {
/* 103 */     if (traceOn) {
/* 104 */       trace.warn(msg);
/*     */     }
/* 106 */     if (log.isDebugEnabled()) {
/* 107 */       log.warn(msg);
/*     */     }
/* 109 */     if (msgContext.getServiceLog() != null)
/* 110 */       msgContext.getServiceLog().warn(msg); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\MediatorWorker.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.base.SequenceMediator,"/*     */ package org.apache.synapse.mediators.base;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.MediatorFaultHandler;
/*     */ import org.apache.synapse.statistics.StatisticsUtils;
/*     */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceMediator
/*     */   extends AbstractListMediator
/*     */ {
/*  45 */   private String name = null;
/*     */   
/*  47 */   private String key = null;
/*     */   
/*  49 */   private String errorHandler = null;
/*     */   
/*     */   private boolean dynamic = false;
/*     */   
/*  53 */   private String registryKey = null;
/*     */ 
/*     */   
/*  56 */   private int statisticsState = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  71 */     boolean statsOn = (1 == this.statisticsState);
/*  72 */     boolean traceOn = isTraceOn(synCtx);
/*  73 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  75 */     if (traceOrDebugOn) {
/*  76 */       traceOrDebug(traceOn, ""Start : Sequence <"" + ((this.name == null) ? ((this.key == null) ? ""anonymous"" : this.key) : this.name) + "">"");
/*     */ 
/*     */       
/*  79 */       if (traceOn && trace.isTraceEnabled()) {
/*  80 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  84 */     if (this.key == null) {
/*     */ 
/*     */ 
/*     */       
/*  88 */       Mediator errorHandlerMediator = null;
/*     */ 
/*     */       
/*  91 */       if (statsOn) {
/*  92 */         Object object = synCtx.getProperty(""synapse.sequence.stats"");
/*     */         
/*  94 */         if (object == null) {
/*  95 */           object = new SequenceStatisticsStack();
/*  96 */           synCtx.setProperty(""synapse.sequence.stats"", object);
/*     */         } 
/*  98 */         String seqName = (this.name == null) ? ""AnonymousSequence"" : this.name;
/*  99 */         boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 100 */         object.put(seqName, System.currentTimeMillis(), !synCtx.isResponse(), statsOn, isFault);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 106 */         if (this.errorHandler != null) {
/* 107 */           errorHandlerMediator = synCtx.getSequence(this.errorHandler);
/*     */           
/* 109 */           if (errorHandlerMediator != null) {
/* 110 */             if (traceOrDebugOn) {
/* 111 */               traceOrDebug(traceOn, ""Setting the onError handler : "" + this.errorHandler + "" for the sequence : "" + this.name);
/*     */             }
/*     */             
/* 114 */             synCtx.pushFaultHandler((FaultHandler)new MediatorFaultHandler(errorHandlerMediator));
/*     */           } else {
/*     */             
/* 117 */             auditWarn(""onError handler : "" + this.errorHandler + "" for sequence : "" + this.name + "" cannot be found"", synCtx);
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 122 */         boolean result = super.mediate(synCtx);
/*     */ 
/*     */ 
/*     */         
/* 126 */         if (errorHandlerMediator != null) {
/* 127 */           Stack faultStack = synCtx.getFaultStack();
/* 128 */           if (faultStack != null && !faultStack.isEmpty()) {
/* 129 */             Object o = faultStack.peek();
/*     */             
/* 131 */             if (o instanceof MediatorFaultHandler && errorHandlerMediator.equals(((MediatorFaultHandler)o).getFaultMediator()))
/*     */             {
/*     */               
/* 134 */               faultStack.pop();
/*     */             }
/*     */           } 
/*     */         } 
/*     */         
/* 139 */         if (traceOrDebugOn) {
/* 140 */           if (traceOn && trace.isTraceEnabled()) {
/* 141 */             trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */           }
/*     */           
/* 144 */           traceOrDebug(traceOn, ""End : Sequence <"" + ((this.name == null) ? ""anonymous"" : this.name) + "">"");
/*     */         } 
/*     */ 
/*     */         
/* 148 */         return result;
/*     */       
/*     */       }
/*     */       finally {
/*     */         
/* 153 */         if (statsOn) {
/* 154 */           StatisticsUtils.processSequenceStatistics(synCtx);
/*     */         }
/*     */         
/* 157 */         StatisticsUtils.processProxyServiceStatistics(synCtx);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 162 */     Mediator m = synCtx.getSequence(this.key);
/* 163 */     if (m == null) {
/* 164 */       handleException(""Sequence named "" + this.key + "" cannot be found"", synCtx);
/*     */     } else {
/*     */       
/* 167 */       if (traceOrDebugOn) {
/* 168 */         traceOrDebug(traceOn, ""Executing sequence named "" + this.key);
/*     */       }
/*     */       
/* 171 */       boolean result = m.mediate(synCtx);
/*     */       
/* 173 */       if (traceOrDebugOn) {
/* 174 */         traceOrDebug(traceOn, ""End : Sequence <"" + this.key + "">"");
/*     */       }
/* 176 */       return result;
/*     */     } 
/*     */ 
/*     */     
/* 180 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 220 */   public String getErrorHandler() { return this.errorHandler; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public void setErrorHandler(String errorHandler) { this.errorHandler = errorHandler; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public int getStatisticsState() { return this.statisticsState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setStatisticsState(int statisticsState) { this.statisticsState = statisticsState; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public boolean isDynamic() { return this.dynamic; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setDynamic(boolean dynamic) { this.dynamic = dynamic; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public String getRegistryKey() { return this.registryKey; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   public void setRegistryKey(String registryKey) { this.registryKey = registryKey; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\base\SequenceMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.base.SynapseMediator,"/*    */ package org.apache.synapse.mediators.base;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.statistics.StatisticsUtils;
/*    */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseMediator
/*    */   extends AbstractListMediator
/*    */ {
/*    */   public boolean mediate(MessageContext synCtx) {
/* 48 */     boolean traceOn = isTraceOn(synCtx);
/* 49 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */     
/* 51 */     if (traceOrDebugOn) {
/* 52 */       traceOrDebug(traceOn, ""Start : Mediation using 'main' sequence Message is a : "" + (synCtx.isResponse() ? ""response"" : ""request""));
/*    */ 
/*    */       
/* 55 */       if (traceOn && trace.isTraceEnabled()) {
/* 56 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*    */       }
/*    */     } 
/*    */ 
/*    */     
/* 61 */     if (synCtx.isResponse()) {
/* 62 */       StatisticsUtils.processAllSequenceStatistics(synCtx);
/*    */     }
/*    */ 
/*    */     
/* 66 */     Object object = synCtx.getProperty(""synapse.sequence.stats"");
/*    */     
/* 68 */     if (object == null) {
/* 69 */       object = new SequenceStatisticsStack();
/* 70 */       synCtx.setProperty(""synapse.sequence.stats"", object);
/*    */     } 
/* 72 */     String seqName = ""MainSequence"";
/* 73 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 74 */     object.put(seqName, System.currentTimeMillis(), !synCtx.isResponse(), true, isFault);
/*    */     
/* 76 */     boolean result = super.mediate(synCtx);
/*    */     
/* 78 */     if (traceOrDebugOn) {
/* 79 */       if (traceOn && trace.isTraceEnabled()) {
/* 80 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*    */       }
/* 82 */       traceOrDebug(traceOn, ""End : Mediation using 'main' sequence"");
/*    */     } 
/*    */     
/* 85 */     return result;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\base\SynapseMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.CacheMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.description.Parameter;
/*     */ import org.apache.axis2.engine.AxisConfiguration;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2Sender;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.util.MessageHelper;
/*     */ import org.wso2.caching.Cache;
/*     */ import org.wso2.caching.CachedObject;
/*     */ import org.wso2.caching.CachingConstants;
/*     */ import org.wso2.caching.digest.DigestGenerator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CacheMediator
/*     */   extends AbstractMediator
/*     */ {
/*  41 */   private String id = null;
/*  42 */   private String scope = ""per-host"";
/*  43 */   private DigestGenerator digestGenerator = CachingConstants.DEFAULT_XML_IDENTIFIER;
/*  44 */   private int inMemoryCacheSize = 1000;
/*     */ 
/*     */   
/*  47 */   private int diskCacheSize = 0;
/*  48 */   private long timeout = 0L;
/*  49 */   private SequenceMediator onCacheHitSequence = null;
/*  50 */   private String onCacheHitRef = null;
/*  51 */   private String cacheObjKey = ""cacheObject"";
/*     */   
/*     */   private static final String CACHE_OBJ_PREFIX = ""synapse.cache_obj_"";
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  57 */     boolean traceOn = isTraceOn(synCtx);
/*  58 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  60 */     if (traceOrDebugOn) {
/*  61 */       traceOrDebug(traceOn, ""Start : Cache mediator"");
/*     */       
/*  63 */       if (traceOn && trace.isTraceEnabled()) {
/*  64 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  68 */     AxisConfiguration axisCfg = synCtx.getConfiguration().getAxisConfiguration();
/*  69 */     if (axisCfg == null) {
/*  70 */       handleException(""Unable to perform caching,  AxisConfiguration cannot be found"", synCtx);
/*     */       
/*  72 */       return false;
/*     */     } 
/*     */     
/*  75 */     if (traceOrDebugOn) {
/*  76 */       traceOrDebug(traceOn, ""Looking up cache at scope : "" + this.scope + "" with ID : "" + this.cacheObjKey);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  81 */     Parameter param = axisCfg.getParameter(this.cacheObjKey);
/*  82 */     Cache cache = null;
/*  83 */     if (param != null && param.getValue() instanceof Cache) {
/*  84 */       cache = (Cache)param.getValue();
/*     */     } else {
/*     */       
/*  87 */       synchronized (axisCfg) {
/*     */         
/*  89 */         param = axisCfg.getParameter(this.cacheObjKey);
/*  90 */         if (param != null && param.getValue() instanceof Cache) {
/*  91 */           cache = (Cache)param.getValue();
/*     */         } else {
/*     */           
/*  94 */           if (traceOrDebugOn) {
/*  95 */             traceOrDebug(traceOn, ""Creating/recreating the cache object"");
/*     */           }
/*  97 */           cache = new Cache();
/*     */           try {
/*  99 */             axisCfg.addParameter(this.cacheObjKey, cache);
/* 100 */           } catch (AxisFault af) {
/* 101 */             auditWarn(""Unable to create a cache with ID : "" + this.cacheObjKey, synCtx);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 107 */     boolean result = true;
/* 108 */     if (synCtx.isResponse()) {
/* 109 */       processResponseMessage(traceOrDebugOn, traceOn, synCtx, cache);
/*     */     } else {
/*     */       
/* 112 */       result = processRequestMessage(synCtx, traceOrDebugOn, traceOn, cache);
/*     */     } 
/*     */     
/* 115 */     if (traceOrDebugOn) {
/* 116 */       traceOrDebug(traceOn, ""End : Cache mediator"");
/*     */     }
/* 118 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processResponseMessage(boolean traceOrDebugOn, boolean traceOn, MessageContext synCtx, Cache cache) {
/* 132 */     Object requestHash = synCtx.getProperty(""requestHash"");
/*     */     
/* 134 */     if (requestHash != null) {
/* 135 */       if (traceOrDebugOn) {
/* 136 */         traceOrDebug(traceOn, ""Storing the response message into the cache at scope : "" + this.scope + "" with ID : "" + this.cacheObjKey + "" for request hash : "" + requestHash);
/*     */       }
/*     */ 
/*     */       
/* 140 */       Object obj = cache.getResponseForKey(requestHash);
/*     */       
/* 142 */       if (obj != null && obj instanceof CachedObject)
/*     */       {
/* 144 */         CachedObject cachedObj = (CachedObject)obj;
/* 145 */         if (traceOrDebugOn) {
/* 146 */           traceOrDebug(traceOn, ""Storing the response for the message with ID : "" + synCtx.getMessageID() + "" with request hash ID : "" + cachedObj.getRequestHash() + "" in the cache : "" + this.cacheObjKey);
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 151 */         cachedObj.setResponseEnvelope(MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope()));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 158 */         cachedObj.setResponseHash(this.digestGenerator.getDigest(((Axis2MessageContext)synCtx).getAxis2MessageContext()));
/*     */ 
/*     */         
/* 161 */         cachedObj.setExpireTime(System.currentTimeMillis() + cachedObj.getTimeout());
/*     */       }
/*     */       else
/*     */       {
/* 165 */         auditWarn(""A response message without a valid mapping to the request hash found. Unable to store the response in cache"", synCtx);
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 170 */       auditWarn(""A response message without a mapping to the request hash found. Unable to store the response in cache"", synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean processRequestMessage(MessageContext synCtx, boolean traceOrDebugOn, boolean traceOn, Cache cache) {
/* 187 */     Object requestHash = this.digestGenerator.getDigest(((Axis2MessageContext)synCtx).getAxis2MessageContext());
/*     */     
/* 189 */     synCtx.setProperty(""requestHash"", requestHash);
/*     */     
/* 191 */     if (traceOrDebugOn) {
/* 192 */       traceOrDebug(traceOn, ""Generated request hash : "" + requestHash);
/*     */     }
/*     */     
/* 195 */     if (cache.containsKey(requestHash) && cache.getResponseForKey(requestHash) instanceof CachedObject) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 200 */       CachedObject cachedObj = (CachedObject)cache.getResponseForKey(requestHash);
/*     */       
/* 202 */       if (!cachedObj.isExpired() && cachedObj.getResponseEnvelope() != null) {
/*     */         
/* 204 */         if (traceOrDebugOn) {
/* 205 */           traceOrDebug(traceOn, ""Cache-hit for message ID : "" + synCtx.getMessageID());
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 210 */         synCtx.setResponse(true);
/*     */         try {
/* 212 */           synCtx.setEnvelope(cachedObj.getResponseEnvelope());
/* 213 */         } catch (AxisFault axisFault) {
/* 214 */           handleException(""Error setting response envelope from cache : "" + this.cacheObjKey, synCtx);
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 219 */         if (this.onCacheHitSequence != null) {
/*     */           
/* 221 */           if (traceOrDebugOn) {
/* 222 */             traceOrDebug(traceOn, ""Delegating message to the onCachingHit Anonymous sequence"");
/*     */           }
/*     */           
/* 225 */           this.onCacheHitSequence.mediate(synCtx);
/*     */         }
/* 227 */         else if (this.onCacheHitRef != null) {
/*     */           
/* 229 */           if (traceOrDebugOn) {
/* 230 */             traceOrDebug(traceOn, ""Delegating message to the onCachingHit sequence : "" + this.onCacheHitRef);
/*     */           }
/*     */           
/* 233 */           synCtx.getSequence(this.onCacheHitRef).mediate(synCtx);
/*     */         }
/*     */         else {
/*     */           
/* 237 */           if (traceOrDebugOn) {
/* 238 */             traceOrDebug(traceOn, ""Request message "" + synCtx.getMessageID() + "" has served from the cache : "" + this.cacheObjKey);
/*     */           }
/*     */ 
/*     */           
/* 242 */           synCtx.setTo(null);
/* 243 */           Axis2Sender.sendBack(synCtx);
/*     */         } 
/*     */         
/* 246 */         return false;
/*     */       } 
/*     */ 
/*     */       
/* 250 */       cachedObj.clearCache();
/* 251 */       if (traceOrDebugOn) {
/* 252 */         traceOrDebug(traceOn, ""Existing cached response has expired. Reset cache element"");
/*     */ 
/*     */       
/*     */       }
/*     */ 
/*     */     
/*     */     }
/* 259 */     else if (cache.getCache().size() == this.inMemoryCacheSize) {
/* 260 */       cache.removeExpiredResponses();
/* 261 */       if (cache.getCache().size() == this.inMemoryCacheSize) {
/* 262 */         if (traceOrDebugOn) {
/* 263 */           traceOrDebug(traceOn, ""In-memory cache is full. Unable to cache"");
/*     */         }
/*     */       } else {
/* 266 */         storeRequestToCache(synCtx, requestHash, cache);
/*     */       } 
/*     */     } else {
/* 269 */       storeRequestToCache(synCtx, requestHash, cache);
/*     */     } 
/*     */     
/* 272 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void storeRequestToCache(MessageContext synCtx, Object requestHash, Cache cache) {
/* 282 */     CachedObject cachedObj = new CachedObject();
/* 283 */     cachedObj.setRequestEnvelope(MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope()));
/* 284 */     cachedObj.setRequestHash(requestHash);
/* 285 */     cachedObj.setTimeout(this.timeout);
/* 286 */     cache.addResponseWithKey(requestHash, cachedObj);
/*     */   }
/*     */ 
/*     */   
/* 290 */   public String getId() { return this.id; }
/*     */ 
/*     */   
/*     */   public void setId(String id) {
/* 294 */     this.id = id;
/* 295 */     this.cacheObjKey = ""synapse.cache_obj_"" + id;
/*     */   }
/*     */ 
/*     */   
/* 299 */   public String getScope() { return this.scope; }
/*     */ 
/*     */ 
/*     */   
/* 303 */   public void setScope(String scope) { this.scope = scope; }
/*     */ 
/*     */ 
/*     */   
/* 307 */   public DigestGenerator getDigestGenerator() { return this.digestGenerator; }
/*     */ 
/*     */ 
/*     */   
/* 311 */   public void setDigestGenerator(DigestGenerator digestGenerator) { this.digestGenerator = digestGenerator; }
/*     */ 
/*     */ 
/*     */   
/* 315 */   public int getInMemoryCacheSize() { return this.inMemoryCacheSize; }
/*     */ 
/*     */ 
/*     */   
/* 319 */   public void setInMemoryCacheSize(int inMemoryCacheSize) { this.inMemoryCacheSize = inMemoryCacheSize; }
/*     */ 
/*     */ 
/*     */   
/* 323 */   public int getDiskCacheSize() { return this.diskCacheSize; }
/*     */ 
/*     */ 
/*     */   
/* 327 */   public void setDiskCacheSize(int diskCacheSize) { this.diskCacheSize = diskCacheSize; }
/*     */ 
/*     */ 
/*     */   
/* 331 */   public long getTimeout() { return this.timeout; }
/*     */ 
/*     */ 
/*     */   
/* 335 */   public void setTimeout(long timeout) { this.timeout = timeout; }
/*     */ 
/*     */ 
/*     */   
/* 339 */   public SequenceMediator getOnCacheHitSequence() { return this.onCacheHitSequence; }
/*     */ 
/*     */ 
/*     */   
/* 343 */   public void setOnCacheHitSequence(SequenceMediator onCacheHitSequence) { this.onCacheHitSequence = onCacheHitSequence; }
/*     */ 
/*     */ 
/*     */   
/* 347 */   public String getOnCacheHitRef() { return this.onCacheHitRef; }
/*     */ 
/*     */ 
/*     */   
/* 351 */   public void setOnCacheHitRef(String onCacheHitRef) { this.onCacheHitRef = onCacheHitRef; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\CacheMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.DropMediator,"/*    */ package org.apache.synapse.mediators.builtin;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractMediator;
/*    */ import org.apache.synapse.statistics.StatisticsUtils;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DropMediator
/*    */   extends AbstractMediator
/*    */ {
/*    */   public boolean mediate(MessageContext synCtx) {
/* 42 */     boolean traceOn = isTraceOn(synCtx);
/* 43 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */     
/* 45 */     if (traceOrDebugOn) {
/* 46 */       traceOrDebug(traceOn, ""Start : Drop mediator"");
/*    */       
/* 48 */       if (traceOn && trace.isTraceEnabled()) {
/* 49 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*    */       }
/*    */     } 
/*    */ 
/*    */ 
/*    */     
/* 55 */     StatisticsUtils.processProxyServiceStatistics(synCtx);
/*    */     
/* 57 */     StatisticsUtils.processAllSequenceStatistics(synCtx);
/*    */     
/* 59 */     if (traceOrDebugOn) {
/* 60 */       traceOrDebug(traceOn, ""End : Drop mediator"");
/*    */     }
/* 62 */     synCtx.setTo(null);
/* 63 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\DropMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.LogMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   public static final int CUSTOM = 0;
/*     */   public static final int SIMPLE = 1;
/*     */   public static final int HEADERS = 2;
/*     */   public static final int FULL = 3;
/*     */   public static final String DEFAULT_SEP = "", "";
/*  58 */   private int logLevel = 1;
/*     */   
/*  60 */   private String separator = "", "";
/*     */   
/*  62 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  72 */     boolean traceOn = isTraceOn(synCtx);
/*  73 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  75 */     if (traceOrDebugOn) {
/*  76 */       traceOrDebug(traceOn, ""Start : Log mediator"");
/*     */       
/*  78 */       if (traceOn && trace.isTraceEnabled()) {
/*  79 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  83 */     String logMessage = getLogMessage(synCtx);
/*  84 */     synCtx.getServiceLog().info(logMessage);
/*     */     
/*  86 */     if (this.log.isInfoEnabled()) {
/*  87 */       this.log.info(logMessage);
/*     */     }
/*  89 */     if (traceOn) {
/*  90 */       trace.info(""Log message : "" + logMessage);
/*     */     }
/*     */     
/*  93 */     if (traceOrDebugOn) {
/*  94 */       traceOrDebug(traceOn, ""End : Log mediator"");
/*     */     }
/*  96 */     return true;
/*     */   }
/*     */   
/*     */   private String getLogMessage(MessageContext synCtx) {
/* 100 */     switch (this.logLevel) {
/*     */       case 0:
/* 102 */         return getCustomLogMessage(synCtx);
/*     */       case 1:
/* 104 */         return getSimpleLogMessage(synCtx);
/*     */       case 2:
/* 106 */         return getHeadersLogMessage(synCtx);
/*     */       case 3:
/* 108 */         return getFullLogMessage(synCtx);
/*     */     } 
/* 110 */     return ""Invalid log level specified"";
/*     */   }
/*     */ 
/*     */   
/*     */   private String getCustomLogMessage(MessageContext synCtx) {
/* 115 */     StringBuffer sb = new StringBuffer();
/* 116 */     setCustomProperties(sb, synCtx);
/* 117 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getSimpleLogMessage(MessageContext synCtx) {
/* 121 */     StringBuffer sb = new StringBuffer();
/* 122 */     if (synCtx.getTo() != null) {
/* 123 */       sb.append(""To: "" + synCtx.getTo().getAddress());
/*     */     } else {
/* 125 */       sb.append(""To: "");
/* 126 */     }  if (synCtx.getFrom() != null)
/* 127 */       sb.append(this.separator + ""From: "" + synCtx.getFrom().getAddress()); 
/* 128 */     if (synCtx.getWSAAction() != null)
/* 129 */       sb.append(this.separator + ""WSAction: "" + synCtx.getWSAAction()); 
/* 130 */     if (synCtx.getSoapAction() != null)
/* 131 */       sb.append(this.separator + ""SOAPAction: "" + synCtx.getSoapAction()); 
/* 132 */     if (synCtx.getReplyTo() != null)
/* 133 */       sb.append(this.separator + ""ReplyTo: "" + synCtx.getReplyTo().getAddress()); 
/* 134 */     if (synCtx.getMessageID() != null)
/* 135 */       sb.append(this.separator + ""MessageID: "" + synCtx.getMessageID()); 
/* 136 */     sb.append(this.separator + ""Direction: "" + (synCtx.isResponse() ? ""response"" : ""request""));
/* 137 */     setCustomProperties(sb, synCtx);
/* 138 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getHeadersLogMessage(MessageContext synCtx) {
/* 142 */     StringBuffer sb = new StringBuffer();
/* 143 */     if (synCtx.getEnvelope() != null) {
/* 144 */       SOAPHeader header = synCtx.getEnvelope().getHeader();
/* 145 */       if (header != null) {
/* 146 */         for (Iterator iter = header.examineAllHeaderBlocks(); iter.hasNext(); ) {
/* 147 */           Object o = iter.next();
/* 148 */           if (o instanceof SOAPHeaderBlock) {
/* 149 */             SOAPHeaderBlock headerBlk = (SOAPHeaderBlock)o;
/* 150 */             sb.append(this.separator + headerBlk.getLocalName() + "" : "" + headerBlk.getText()); continue;
/*     */           } 
/* 152 */           if (o instanceof OMElement) {
/* 153 */             OMElement headerElem = (OMElement)o;
/* 154 */             sb.append(this.separator + headerElem.getLocalName() + "" : "" + headerElem.getText());
/*     */           } 
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 160 */     setCustomProperties(sb, synCtx);
/* 161 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private String getFullLogMessage(MessageContext synCtx) {
/* 165 */     StringBuffer sb = new StringBuffer();
/* 166 */     sb.append(getSimpleLogMessage(synCtx));
/* 167 */     if (synCtx.getEnvelope() != null)
/* 168 */       sb.append(this.separator + ""Envelope: "" + synCtx.getEnvelope()); 
/* 169 */     return trimLeadingSeparator(sb);
/*     */   }
/*     */   
/*     */   private void setCustomProperties(StringBuffer sb, MessageContext synCtx) {
/* 173 */     if (this.properties != null && !this.properties.isEmpty()) {
/* 174 */       for (Iterator<MediatorProperty> iter = this.properties.iterator(); iter.hasNext(); ) {
/* 175 */         MediatorProperty prop = iter.next();
/* 176 */         sb.append(this.separator + prop.getName() + "" = "" + ((prop.getValue() != null) ? prop.getValue() : prop.getEvaluatedExpression(synCtx)));
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public int getLogLevel() { return this.logLevel; }
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setLogLevel(int logLevel) { this.logLevel = logLevel; }
/*     */ 
/*     */ 
/*     */   
/* 192 */   public String getSeparator() { return this.separator; }
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setSeparator(String separator) { this.separator = separator; }
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void addProperty(MediatorProperty p) { this.properties.add(p); }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void addAllProperties(List list) { this.properties.addAll(list); }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public List getProperties() { return this.properties; }
/*     */ 
/*     */   
/*     */   private String trimLeadingSeparator(StringBuffer sb) {
/* 212 */     String retStr = sb.toString();
/* 213 */     if (retStr.startsWith(this.separator)) {
/* 214 */       return retStr.substring(this.separator.length());
/*     */     }
/* 216 */     return retStr;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\LogMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.PropertyMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyMediator
/*     */   extends AbstractMediator
/*     */ {
/*  47 */   private String name = null;
/*     */   
/*  49 */   private String value = null;
/*     */   
/*  51 */   private AXIOMXPath expression = null;
/*     */   
/*  53 */   private String scope = null;
/*     */   
/*     */   public static final int ACTION_SET = 0;
/*     */   
/*     */   public static final int ACTION_REMOVE = 1;
/*  58 */   private int action = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  70 */     boolean traceOn = isTraceOn(synCtx);
/*  71 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  73 */     if (traceOrDebugOn) {
/*  74 */       traceOrDebug(traceOn, ""Start : Property mediator"");
/*     */       
/*  76 */       if (traceOn && trace.isTraceEnabled()) {
/*  77 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  81 */     if (this.action == 0) {
/*     */       
/*  83 */       String resultValue = (this.value != null) ? this.value : Axis2MessageContext.getStringValue(this.expression, synCtx);
/*     */ 
/*     */       
/*  86 */       if (traceOrDebugOn) {
/*  87 */         traceOrDebug(traceOn, ""Setting property : "" + this.name + "" at scope : "" + ((this.scope == null) ? ""default"" : this.scope) + "" to : "" + resultValue + "" (i.e. "" + ((this.value != null) ? (""constant : "" + this.value) : (""result of expression : "" + this.expression)) + "")"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  93 */       if (this.scope == null || ""default"".equals(this.scope))
/*     */       {
/*  95 */         synCtx.setProperty(this.name, resultValue);
/*     */       }
/*  97 */       else if (""axis2"".equals(this.scope) && synCtx instanceof Axis2MessageContext)
/*     */       {
/*     */         
/* 100 */         Axis2MessageContext axis2smc = (Axis2MessageContext)synCtx;
/* 101 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 103 */         axis2MessageCtx.setProperty(this.name, resultValue);
/*     */       }
/* 105 */       else if (""axis2-client"".equals(this.scope) && synCtx instanceof Axis2MessageContext)
/*     */       {
/*     */         
/* 108 */         Axis2MessageContext axis2smc = (Axis2MessageContext)synCtx;
/* 109 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 111 */         axis2MessageCtx.getOptions().setProperty(this.name, resultValue);
/*     */       }
/* 113 */       else if (""transport"".equals(this.scope) && synCtx instanceof Axis2MessageContext)
/*     */       {
/*     */         
/* 116 */         Axis2MessageContext axis2smc = (Axis2MessageContext)synCtx;
/* 117 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 119 */         Object headers = axis2MessageCtx.getProperty(""TRANSPORT_HEADERS"");
/*     */ 
/*     */         
/* 122 */         if (headers != null && headers instanceof Map) {
/* 123 */           Map<String, String> headersMap = (HashMap)headers;
/* 124 */           headersMap.put(this.name, resultValue);
/*     */         } 
/* 126 */         if (headers == null) {
/* 127 */           Map<Object, Object> headersMap = new HashMap<Object, Object>();
/* 128 */           headersMap.put(this.name, resultValue);
/* 129 */           axis2MessageCtx.setProperty(""TRANSPORT_HEADERS"", headersMap);
/*     */         }
/*     */       
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 136 */       if (traceOrDebugOn) {
/* 137 */         traceOrDebug(traceOn, ""Removing property : "" + this.name + "" (scope:"" + ((this.scope == null) ? ""default"" : this.scope) + "")"");
/*     */       }
/*     */ 
/*     */       
/* 141 */       if (this.scope == null || ""default"".equals(this.scope)) {
/*     */         
/* 143 */         Set pros = synCtx.getPropertyKeySet();
/* 144 */         if (pros != null) {
/* 145 */           pros.remove(this.name);
/*     */         }
/*     */       }
/* 148 */       else if ((""axis2"".equals(this.scope) || ""axis2-client"".equals(this.scope)) && synCtx instanceof Axis2MessageContext) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 153 */         Axis2MessageContext axis2smc = (Axis2MessageContext)synCtx;
/* 154 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 156 */         axis2MessageCtx.removeProperty(this.name);
/*     */       }
/* 158 */       else if (""transport"".equals(this.scope) && synCtx instanceof Axis2MessageContext) {
/*     */ 
/*     */         
/* 161 */         Axis2MessageContext axis2smc = (Axis2MessageContext)synCtx;
/* 162 */         MessageContext axis2MessageCtx = axis2smc.getAxis2MessageContext();
/*     */         
/* 164 */         Object headers = axis2MessageCtx.getProperty(""TRANSPORT_HEADERS"");
/*     */         
/* 166 */         if (headers != null && headers instanceof Map) {
/* 167 */           Map headersMap = (HashMap)headers;
/* 168 */           headersMap.remove(this.name);
/*     */         }
/* 170 */         else if (traceOrDebugOn) {
/* 171 */           traceOrDebug(traceOn, ""No transport headers found for the message"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 176 */     if (traceOrDebugOn) {
/* 177 */       traceOrDebug(traceOn, ""End : Property mediator"");
/*     */     }
/* 179 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 183 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/* 199 */   public AXIOMXPath getExpression() { return this.expression; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public String getScope() { return this.scope; }
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setScope(String scope) { this.scope = scope; }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public int getAction() { return this.action; }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setAction(int action) { this.action = action; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\PropertyMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.RMSequenceMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.sandesha2.client.SandeshaClientConstants;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.util.UUIDGenerator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RMSequenceMediator
/*     */   extends AbstractMediator
/*     */ {
/*  44 */   private AXIOMXPath correlation = null;
/*  45 */   private AXIOMXPath lastMessage = null;
/*  46 */   private Boolean single = null;
/*  47 */   private String version = null;
/*     */   
/*     */   private static final String WSRM_SpecVersion_1_0 = ""Spec_2005_02"";
/*     */   
/*     */   private static final String WSRM_SpecVersion_1_1 = ""Spec_2007_02"";
/*     */   private static final long SEQUENCE_EXPIRY_TIME = 300000L;
/*  53 */   private static Map sequenceMap = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  57 */     boolean traceOn = isTraceOn(synCtx);
/*  58 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  60 */     if (traceOrDebugOn) {
/*  61 */       traceOrDebug(traceOn, ""Start : RMSequence mediator"");
/*     */       
/*  63 */       if (traceOn && trace.isTraceEnabled()) {
/*  64 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  68 */     if (!(synCtx instanceof Axis2MessageContext)) {
/*  69 */       if (traceOrDebugOn) {
/*  70 */         traceOrDebug(traceOn, ""Only axis2 message contexts are supported"");
/*     */       }
/*     */     } else {
/*     */       
/*  74 */       Axis2MessageContext axis2MessageCtx = (Axis2MessageContext)synCtx;
/*  75 */       MessageContext orgMessageCtx = axis2MessageCtx.getAxis2MessageContext();
/*     */ 
/*     */       
/*  78 */       cleanupSequenceMap();
/*     */       
/*  80 */       String version = getVersionValue();
/*  81 */       orgMessageCtx.getOptions().setProperty(""Sandesha2RMSpecVersion"", version);
/*     */ 
/*     */       
/*  84 */       if (isSingle()) {
/*  85 */         String sequenceID = UUIDGenerator.getUUID();
/*  86 */         String offeredSeqID = UUIDGenerator.getUUID();
/*     */         
/*  88 */         orgMessageCtx.getOptions().setProperty(""Sandesha2SequenceKey"", sequenceID);
/*     */         
/*  90 */         orgMessageCtx.getOptions().setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, offeredSeqID);
/*     */         
/*  92 */         orgMessageCtx.getOptions().setProperty(""Sandesha2LastMessage"", ""true"");
/*     */ 
/*     */         
/*  95 */         if (traceOrDebugOn) {
/*  96 */           traceOrDebug(traceOn, ""Using WS-RM version "" + version + "" and a single message sequence : "" + sequenceID + "" and offering sequence : "" + offeredSeqID);
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 103 */         String correlationValue = getCorrelationValue(synCtx);
/* 104 */         boolean lastMessage = isLastMessage(synCtx);
/* 105 */         String offeredSeqID = null;
/*     */         
/* 107 */         if (!sequenceMap.containsKey(correlationValue)) {
/* 108 */           offeredSeqID = UUIDGenerator.getUUID();
/* 109 */           orgMessageCtx.getOptions().setProperty(SandeshaClientConstants.OFFERED_SEQUENCE_ID, offeredSeqID);
/*     */         } 
/*     */ 
/*     */         
/* 113 */         String sequenceID = retrieveSequenceID(correlationValue);
/* 114 */         orgMessageCtx.getOptions().setProperty(""Sandesha2SequenceKey"", sequenceID);
/*     */ 
/*     */         
/* 117 */         if (lastMessage) {
/* 118 */           orgMessageCtx.getOptions().setProperty(""Sandesha2LastMessage"", ""true"");
/*     */           
/* 120 */           sequenceMap.remove(correlationValue);
/*     */         } 
/*     */         
/* 123 */         if (traceOrDebugOn) {
/* 124 */           traceOrDebug(traceOn, ""Correlation value : "" + correlationValue + "" last message = "" + lastMessage + "" using sequence : "" + sequenceID + ((offeredSeqID != null) ? ("" offering sequence : "" + offeredSeqID) : """"));
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 131 */     if (traceOrDebugOn) {
/* 132 */       traceOrDebug(traceOn, ""End : RMSequence mediator"");
/*     */     }
/* 134 */     return true;
/*     */   }
/*     */   
/*     */   private String retrieveSequenceID(String correlationValue) {
/* 138 */     String sequenceID = null;
/* 139 */     if (!sequenceMap.containsKey(correlationValue)) {
/* 140 */       sequenceID = UUIDGenerator.getUUID();
/* 141 */       if (this.log.isDebugEnabled()) {
/* 142 */         this.log.debug(""setting sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
/*     */       }
/* 144 */       Entry sequenceEntry = new Entry();
/* 145 */       sequenceEntry.setValue(sequenceID);
/* 146 */       sequenceEntry.setExpiryTime(System.currentTimeMillis() + 300000L);
/* 147 */       sequenceMap.put(correlationValue, sequenceEntry);
/*     */     } else {
/* 149 */       sequenceID = (String)((Entry)sequenceMap.get(correlationValue)).getValue();
/* 150 */       if (this.log.isDebugEnabled()) {
/* 151 */         this.log.debug(""got sequenceID "" + sequenceID + "" for correlation "" + correlationValue);
/*     */       }
/*     */     } 
/* 154 */     return sequenceID;
/*     */   }
/*     */   
/*     */   private String getCorrelationValue(MessageContext smc) {
/* 158 */     OMElement node = null;
/*     */     try {
/* 160 */       node = (OMElement)getCorrelation().selectSingleNode(smc.getEnvelope());
/*     */       
/* 162 */       if (node != null) {
/* 163 */         return node.getText();
/*     */       }
/* 165 */       handleException(""XPath expression : "" + getCorrelation() + "" did not return any node"", smc);
/*     */ 
/*     */     
/*     */     }
/* 169 */     catch (JaxenException e) {
/* 170 */       handleException(""Error evaluating XPath expression to determine correlation : "" + getCorrelation(), (Exception)e, smc);
/*     */     } 
/*     */     
/* 173 */     return null;
/*     */   }
/*     */   
/*     */   private String getVersionValue() {
/* 177 */     if (""1.1"".equals(getVersion())) {
/* 178 */       return ""Spec_2007_02"";
/*     */     }
/* 180 */     return ""Spec_2005_02"";
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean isLastMessage(MessageContext smc) {
/* 185 */     if (getLastMessage() == null) {
/* 186 */       return false;
/*     */     }
/*     */     try {
/* 189 */       return getLastMessage().booleanValueOf(smc.getEnvelope());
/* 190 */     } catch (JaxenException e) {
/* 191 */       handleException(""Error evaluating XPath expression to determine if last message : "" + getLastMessage(), (Exception)e, smc);
/*     */ 
/*     */       
/* 194 */       return false;
/*     */     } 
/*     */   }
/*     */   
/*     */   private synchronized void cleanupSequenceMap() {
/* 199 */     Iterator itKey = sequenceMap.keySet().iterator();
/* 200 */     while (itKey.hasNext()) {
/* 201 */       Object key = itKey.next();
/* 202 */       Entry sequenceEntry = (Entry)sequenceMap.get(key);
/* 203 */       if (sequenceEntry.isExpired()) {
/* 204 */         sequenceMap.remove(key);
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   public boolean isSingle() {
/* 210 */     if (getSingle() != null && getSingle().booleanValue()) {
/* 211 */       return true;
/*     */     }
/*     */     
/* 214 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public AXIOMXPath getCorrelation() { return this.correlation; }
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setCorrelation(AXIOMXPath correlation) { this.correlation = correlation; }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public AXIOMXPath getLastMessage() { return this.lastMessage; }
/*     */ 
/*     */ 
/*     */   
/* 231 */   public void setLastMessage(AXIOMXPath lastMessage) { this.lastMessage = lastMessage; }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public Boolean getSingle() { return this.single; }
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setSingle(Boolean single) { this.single = single; }
/*     */ 
/*     */ 
/*     */   
/* 243 */   public String getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setVersion(String version) { this.version = version; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\RMSequenceMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.SendMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.util.List;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.endpoints.SALoadbalanceEndpoint;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SendMediator
/*     */   extends AbstractMediator
/*     */ {
/*  42 */   private Endpoint endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  53 */     boolean traceOn = isTraceOn(synCtx);
/*  54 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  56 */     if (traceOrDebugOn) {
/*  57 */       traceOrDebug(traceOn, ""Start : Send mediator"");
/*     */       
/*  59 */       if (traceOn && trace.isTraceEnabled()) {
/*  60 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/*  65 */     if (this.endpoint == null) {
/*     */       
/*  67 */       if (traceOrDebugOn) {
/*  68 */         StringBuffer sb = new StringBuffer();
/*  69 */         sb.append(""Sending "" + (synCtx.isResponse() ? ""response"" : ""request"") + "" message using implicit message properties.."");
/*     */         
/*  71 */         sb.append(""\nSending To: "" + ((synCtx.getTo() != null) ? synCtx.getTo().getAddress() : ""null""));
/*     */         
/*  73 */         sb.append(""\nSOAPAction: "" + ((synCtx.getWSAAction() != null) ? synCtx.getWSAAction() : ""null""));
/*     */         
/*  75 */         traceOrDebug(traceOn, sb.toString());
/*     */       } 
/*     */       
/*  78 */       if (traceOn && trace.isTraceEnabled()) {
/*  79 */         trace.trace(""Envelope : "" + synCtx.getEnvelope());
/*     */       }
/*     */       
/*  82 */       if (synCtx.isResponse()) {
/*  83 */         Axis2MessageContext axis2MsgCtx = (Axis2MessageContext)synCtx;
/*  84 */         OperationContext opCtx = axis2MsgCtx.getAxis2MessageContext().getOperationContext();
/*  85 */         Object o = opCtx.getProperty(""endpointList"");
/*  86 */         if (o != null && o instanceof List) {
/*     */ 
/*     */           
/*  89 */           List endpointList = (List)o;
/*  90 */           Object e = endpointList.remove(0);
/*  91 */           if (e != null && e instanceof SALoadbalanceEndpoint) {
/*  92 */             SALoadbalanceEndpoint saLoadbalanceEndpoint = (SALoadbalanceEndpoint)e;
/*  93 */             saLoadbalanceEndpoint.updateSession(synCtx, endpointList);
/*     */           } 
/*     */         } 
/*     */       } 
/*  97 */       synCtx.getEnvironment().send(null, synCtx);
/*     */     } else {
/*     */       
/* 100 */       this.endpoint.send(synCtx);
/*     */     } 
/*     */     
/* 103 */     if (traceOrDebugOn) {
/* 104 */       traceOrDebug(traceOn, ""End : Send mediator"");
/*     */     }
/* 106 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 110 */   public Endpoint getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setEndpoint(Endpoint endpoint) { this.endpoint = endpoint; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\SendMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.builtin.ValidateMediator,"/*     */ package org.apache.synapse.mediators.builtin;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.stream.XMLOutputFactory;
/*     */ import javax.xml.stream.XMLStreamWriter;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.sax.SAXSource;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import javax.xml.validation.Schema;
/*     */ import javax.xml.validation.SchemaFactory;
/*     */ import javax.xml.validation.Validator;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.FaultHandler;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.SAXParseException;
/*     */ import org.xml.sax.XMLReader;
/*     */ import org.xml.sax.helpers.DefaultHandler;
/*     */ import org.xml.sax.helpers.XMLReaderFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ValidateMediator
/*     */   extends AbstractListMediator
/*     */ {
/*  66 */   private List schemaKeys = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  73 */   private AXIOMXPath source = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   private List explicityFeatures = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Schema cachedSchema;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private final Object validatorLock = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String DEFAULT_XPATH = ""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ValidateMediator() {
/*     */     try {
/* 105 */       this.source = new AXIOMXPath(""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"");
/* 106 */       this.source.addNamespace(""s11"", ""http://schemas.xmlsoap.org/soap/envelope/"");
/* 107 */       this.source.addNamespace(""s12"", ""http://www.w3.org/2003/05/soap-envelope"");
/* 108 */     } catch (JaxenException e) {
/* 109 */       String msg = ""Error creating default source XPath expression : s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"";
/* 110 */       this.log.error(msg, (Throwable)e);
/* 111 */       throw new SynapseException(msg, (Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/* 117 */     boolean traceOn = isTraceOn(synCtx);
/* 118 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 120 */     if (traceOrDebugOn) {
/* 121 */       traceOrDebug(traceOn, ""Start : Validate mediator"");
/*     */       
/* 123 */       if (traceOn && trace.isTraceEnabled()) {
/* 124 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 129 */     Source validateSrc = getValidationSource(synCtx, traceOrDebugOn, traceOn);
/*     */ 
/*     */     
/* 132 */     boolean reCreate = false;
/*     */     
/* 134 */     for (Iterator<String> iter = this.schemaKeys.iterator(); iter.hasNext(); ) {
/* 135 */       String propKey = iter.next();
/* 136 */       Entry dp = synCtx.getConfiguration().getEntryDefinition(propKey);
/* 137 */       if (dp != null && dp.isDynamic() && (
/* 138 */         !dp.isCached() || dp.isExpired())) {
/* 139 */         reCreate = true;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 145 */     MyErrorHandler errorHandler = new MyErrorHandler();
/*     */ 
/*     */     
/* 148 */     synchronized (this.validatorLock) {
/* 149 */       if (reCreate || this.cachedSchema == null) {
/*     */         
/* 151 */         this.factory.setErrorHandler(errorHandler);
/* 152 */         StreamSource[] sources = new StreamSource[this.schemaKeys.size()];
/* 153 */         int i = 0;
/* 154 */         for (Iterator<String> iterator = this.schemaKeys.iterator(); iterator.hasNext(); ) {
/* 155 */           String propName = iterator.next();
/* 156 */           sources[i++] = SynapseConfigUtils.getStreamSource(synCtx.getEntry(propName));
/*     */         } 
/*     */         
/*     */         try {
/* 160 */           this.cachedSchema = this.factory.newSchema((Source[])sources);
/* 161 */         } catch (SAXException e) {
/* 162 */           handleException(""Error creating a new schema objects for schemas : "" + this.schemaKeys.toString(), e, synCtx);
/*     */         } 
/*     */ 
/*     */         
/* 166 */         if (errorHandler.isValidationError()) {
/*     */           
/* 168 */           errorHandler.setValidationError(false);
/*     */           
/* 170 */           if (traceOrDebugOn) {
/* 171 */             traceOrDebug(traceOn, ""Error creating a new schema objects for schemas : "" + this.schemaKeys.toString());
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 180 */       Validator validator = this.cachedSchema.newValidator();
/* 181 */       validator.setErrorHandler(errorHandler);
/*     */ 
/*     */       
/* 184 */       validator.validate(validateSrc);
/*     */       
/* 186 */       if (errorHandler.isValidationError()) {
/*     */         
/* 188 */         if (traceOrDebugOn) {
/* 189 */           String msg = ""Validation of element returned by XPath : "" + this.source + "" failed against the given schema(s) "" + this.schemaKeys + ""with error : "" + errorHandler.getSaxParseException().getMessage() + "" Executing 'on-fail' sequence"";
/*     */ 
/*     */ 
/*     */           
/* 193 */           traceOrDebug(traceOn, msg);
/*     */ 
/*     */           
/* 196 */           synCtx.getServiceLog().warn(msg);
/*     */           
/* 198 */           if (traceOn && trace.isTraceEnabled()) {
/* 199 */             this.log.debug(""Failed message envelope : "" + synCtx.getEnvelope());
/*     */           }
/*     */         } 
/*     */ 
/*     */         
/* 204 */         synCtx.setProperty(""ERROR_MESSAGE"", errorHandler.getSaxParseException().getMessage());
/*     */         
/* 206 */         synCtx.setProperty(""ERROR_DETAIL"", FaultHandler.getStackTrace(errorHandler.getSaxParseException()));
/*     */ 
/*     */ 
/*     */         
/* 210 */         return super.mediate(synCtx);
/*     */       } 
/* 212 */     } catch (SAXException e) {
/* 213 */       handleException(""Error validating "" + this.source + "" element"", e, synCtx);
/* 214 */     } catch (IOException e) {
/* 215 */       handleException(""Error validating "" + this.source + "" element"", e, synCtx);
/*     */     } 
/*     */     
/* 218 */     if (traceOrDebugOn) {
/* 219 */       traceOrDebug(traceOn, ""Validation of element returned by the XPath expression : "" + this.source + "" succeeded against the given schemas and the current message"");
/*     */     }
/*     */ 
/*     */     
/* 223 */     if (traceOrDebugOn) {
/* 224 */       traceOrDebug(traceOn, ""End : Validate mediator"");
/*     */     }
/*     */     
/* 227 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Source getValidationSource(MessageContext synCtx, boolean traceOrDebugOn, boolean traceOn) {
/*     */     try {
/* 243 */       ByteArrayOutputStream baosForSource = new ByteArrayOutputStream();
/* 244 */       XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().createXMLStreamWriter(baosForSource);
/*     */ 
/*     */ 
/*     */       
/* 248 */       OMNode validateSource = getValidateSource(synCtx);
/* 249 */       if (traceOrDebugOn) {
/* 250 */         traceOrDebug(traceOn, ""Validation source : "" + validateSource.toString());
/*     */       }
/* 252 */       validateSource.serialize(xsWriterForSource);
/*     */       
/* 254 */       ByteArrayInputStream baisFromSource = new ByteArrayInputStream(baosForSource.toByteArray());
/*     */       
/* 256 */       XMLReader reader = XMLReaderFactory.createXMLReader();
/* 257 */       return new SAXSource(reader, new InputSource(baisFromSource));
/*     */     }
/* 259 */     catch (Exception e) {
/* 260 */       handleException(""Error accessing source element : "" + this.source, e, synCtx);
/*     */       
/* 262 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private class MyErrorHandler
/*     */     extends DefaultHandler
/*     */   {
/*     */     private boolean validationError = false;
/* 271 */     private SAXParseException saxParseException = null;
/*     */     
/*     */     public void error(SAXParseException exception) throws SAXException {
/* 274 */       this.validationError = true;
/* 275 */       this.saxParseException = exception;
/*     */     }
/*     */     
/*     */     public void fatalError(SAXParseException exception) throws SAXException {
/* 279 */       this.validationError = true;
/* 280 */       this.saxParseException = exception;
/*     */     }
/*     */ 
/*     */     
/*     */     public void warning(SAXParseException exception) throws SAXException {}
/*     */ 
/*     */     
/* 287 */     public boolean isValidationError() { return this.validationError; }
/*     */ 
/*     */ 
/*     */     
/* 291 */     public SAXParseException getSaxParseException() { return this.saxParseException; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 299 */     public void setValidationError(boolean validationError) { this.validationError = validationError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private MyErrorHandler() {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMNode getValidateSource(MessageContext synCtx) {
/*     */     try {
/* 313 */       Object o = this.source.evaluate(synCtx.getEnvelope());
/* 314 */       if (o instanceof OMNode)
/* 315 */         return (OMNode)o; 
/* 316 */       if (o instanceof List && !((List)o).isEmpty()) {
/* 317 */         return ((List<OMNode>)o).get(0);
/*     */       }
/* 319 */       handleException(""The evaluation of the XPath expression "" + this.source + "" did not result in an OMNode : "" + o, synCtx);
/*     */     
/*     */     }
/* 322 */     catch (JaxenException e) {
/* 323 */       handleException(""Error evaluating XPath expression : "" + this.source, (Exception)e, synCtx);
/*     */     } 
/* 325 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getFeature(String key) {
/* 338 */     for (Iterator<MediatorProperty> iter = this.explicityFeatures.iterator(); iter.hasNext(); ) {
/* 339 */       MediatorProperty prop = iter.next();
/* 340 */       if (key.equals(prop.getName())) {
/* 341 */         return prop.getValue();
/*     */       }
/*     */     } 
/* 344 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFeature(String featureName, boolean isFeatureEnable) throws SAXException {
/* 356 */     MediatorProperty mp = new MediatorProperty();
/* 357 */     mp.setName(featureName);
/* 358 */     if (isFeatureEnable) {
/* 359 */       mp.setValue(""true"");
/*     */     } else {
/* 361 */       mp.setValue(""false"");
/*     */     } 
/* 363 */     this.explicityFeatures.add(mp);
/* 364 */     this.factory.setFeature(featureName, isFeatureEnable);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 374 */   public void setSchemaKeys(List schemaKeys) { this.schemaKeys = schemaKeys; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 382 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 390 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 398 */   public List getSchemaKeys() { return this.schemaKeys; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 406 */   public List getFeatures() { return this.explicityFeatures; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\builtin\ValidateMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.db.AbstractDBMediator,"/*     */ package org.apache.synapse.mediators.db;
/*     */ 
/*     */ import java.math.BigDecimal;
/*     */ import java.sql.Connection;
/*     */ import java.sql.Date;
/*     */ import java.sql.PreparedStatement;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.Time;
/*     */ import java.sql.Timestamp;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import javax.sql.DataSource;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.commons.dbcp.BasicDataSource;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.synapse.ManagedLifecycle;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.config.xml.AbstractDBMediatorFactory;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractDBMediator
/*     */   extends AbstractMediator
/*     */   implements ManagedLifecycle
/*     */ {
/*  44 */   protected Map dataSourceProps = new HashMap<Object, Object>();
/*     */   
/*  46 */   private DataSource dataSource = null;
/*     */   
/*  48 */   List statementList = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init(SynapseEnvironment se) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void destroy() {
/*  63 */     if (getDataSource() instanceof BasicDataSource) {
/*     */       try {
/*  65 */         ((BasicDataSource)getDataSource()).close();
/*  66 */         this.log.info(""Successfully shut down DB connection pool for URL : "" + getDSName());
/*  67 */       } catch (SQLException e) {
/*  68 */         this.log.warn(""Error shutting down DB connection pool for URL : "" + getDSName());
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  80 */     String name = (this instanceof DBLookupMediator) ? ""DBLookup"" : ""DBReport"";
/*  81 */     boolean traceOn = isTraceOn(synCtx);
/*  82 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  84 */     if (traceOrDebugOn) {
/*  85 */       traceOrDebug(traceOn, ""Start : "" + name + "" mediator"");
/*     */       
/*  87 */       if (traceOn && trace.isTraceEnabled()) {
/*  88 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  92 */     for (Iterator<Statement> iter = this.statementList.iterator(); iter.hasNext();) {
/*  93 */       processStatement(iter.next(), synCtx);
/*     */     }
/*     */     
/*  96 */     if (traceOrDebugOn) {
/*  97 */       traceOrDebug(traceOn, ""End : "" + name + "" mediator"");
/*     */     }
/*  99 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected abstract void processStatement(Statement paramStatement, MessageContext paramMessageContext);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   protected String getDSName() { return (String)this.dataSourceProps.get(AbstractDBMediatorFactory.URL_Q); }
/*     */ 
/*     */ 
/*     */   
/* 119 */   public DataSource getDataSource() { return this.dataSource; }
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setDataSource(DataSource dataSource) { this.dataSource = dataSource; }
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void addDataSourceProperty(QName name, String value) { this.dataSourceProps.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void addDataSourceProperty(String name, String value) { this.dataSourceProps.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public Map getDataSourceProps() { return this.dataSourceProps; }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void addStatement(Statement stmnt) { this.statementList.add(stmnt); }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public List getStatementList() { return this.statementList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected PreparedStatement getPreparedStatement(Statement stmnt, MessageContext msgCtx) throws SQLException {
/* 155 */     boolean traceOn = isTraceOn(msgCtx);
/* 156 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 158 */     Log serviceLog = msgCtx.getServiceLog();
/*     */     
/* 160 */     if (traceOrDebugOn) {
/* 161 */       traceOrDebug(traceOn, ""Getting a connection from DataSource "" + getDSName() + "" and preparing statement : "" + stmnt.getRawStatement());
/*     */     }
/*     */     
/* 164 */     Connection con = getDataSource().getConnection();
/* 165 */     PreparedStatement ps = con.prepareStatement(stmnt.getRawStatement());
/*     */ 
/*     */     
/* 168 */     List params = stmnt.getParameters();
/* 169 */     int column = 1;
/*     */     
/* 171 */     for (Iterator<Statement.Parameter> pi = params.iterator(); pi.hasNext(); ) {
/*     */       
/* 173 */       Statement.Parameter param = pi.next();
/* 174 */       String value = (param.getPropertyName() != null) ? param.getPropertyName() : Axis2MessageContext.getStringValue(param.getXpath(), msgCtx);
/*     */ 
/*     */ 
/*     */       
/* 178 */       if (traceOrDebugOn) {
/* 179 */         traceOrDebug(traceOn, ""Setting as parameter : "" + column + "" value : "" + value + "" as JDBC Type : "" + param.getType() + ""(see java.sql.Types for valid types)"");
/*     */       }
/*     */ 
/*     */       
/* 183 */       switch (param.getType()) {
/*     */         
/*     */         case -1:
/*     */         case 1:
/*     */         case 12:
/* 188 */           ps.setString(column++, value);
/*     */           continue;
/*     */         
/*     */         case 2:
/*     */         case 3:
/* 193 */           ps.setBigDecimal(column++, new BigDecimal(value));
/*     */           continue;
/*     */         
/*     */         case -7:
/* 197 */           ps.setBoolean(column++, Boolean.parseBoolean(value));
/*     */           continue;
/*     */         
/*     */         case -6:
/* 201 */           ps.setByte(column++, Byte.parseByte(value));
/*     */           continue;
/*     */         
/*     */         case 5:
/* 205 */           ps.setShort(column++, Short.parseShort(value));
/*     */           continue;
/*     */         
/*     */         case 4:
/* 209 */           ps.setInt(column++, Integer.parseInt(value));
/*     */           continue;
/*     */         
/*     */         case -5:
/* 213 */           ps.setLong(column++, Long.parseLong(value));
/*     */           continue;
/*     */         
/*     */         case 7:
/* 217 */           ps.setFloat(column++, Float.parseFloat(value));
/*     */           continue;
/*     */         
/*     */         case 6:
/* 221 */           ps.setDouble(column++, Double.parseDouble(value));
/*     */           continue;
/*     */         
/*     */         case 8:
/* 225 */           ps.setDouble(column++, Double.parseDouble(value));
/*     */           continue;
/*     */ 
/*     */         
/*     */         case 91:
/* 230 */           ps.setDate(column++, Date.valueOf(value));
/*     */           continue;
/*     */         
/*     */         case 92:
/* 234 */           ps.setTime(column++, Time.valueOf(value));
/*     */           continue;
/*     */         
/*     */         case 93:
/* 238 */           ps.setTimestamp(column++, Timestamp.valueOf(value));
/*     */           continue;
/*     */       } 
/*     */ 
/*     */       
/* 243 */       String msg = ""Trying to set an un-supported JDBC Type : "" + param.getType() + "" against column : "" + column + "" and statement : "" + stmnt.getRawStatement() + "" used by a DB mediator against DataSource : "" + getDSName() + "" (see java.sql.Types for valid type values)"";
/*     */ 
/*     */ 
/*     */       
/* 247 */       handleException(msg, msgCtx);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 252 */     if (traceOrDebugOn) {
/* 253 */       traceOrDebug(traceOn, ""Successfully prepared statement : "" + stmnt.getRawStatement() + "" against DataSource : "" + getDSName());
/*     */     }
/*     */     
/* 256 */     return ps;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\db\AbstractDBMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.db.DBLookupMediator,"/*    */ package org.apache.synapse.mediators.db;
/*    */ 
/*    */ import java.sql.PreparedStatement;
/*    */ import java.sql.ResultSet;
/*    */ import java.sql.SQLException;
/*    */ import java.util.Iterator;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBLookupMediator
/*    */   extends AbstractDBMediator
/*    */ {
/*    */   protected void processStatement(Statement stmnt, MessageContext msgCtx) {
/* 36 */     boolean traceOn = isTraceOn(msgCtx);
/* 37 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */ 
/*    */ 
/*    */     
/*    */     try {
/* 42 */       PreparedStatement ps = getPreparedStatement(stmnt, msgCtx);
/* 43 */       ResultSet rs = ps.executeQuery();
/*    */       
/* 45 */       if (rs.next()) {
/* 46 */         if (traceOrDebugOn) {
/* 47 */           traceOrDebug(traceOn, ""Processing the first row returned : "" + stmnt.getRawStatement());
/*    */         }
/*    */ 
/*    */         
/* 51 */         Iterator<String> propNameIter = stmnt.getResultsMap().keySet().iterator();
/* 52 */         while (propNameIter.hasNext())
/*    */         {
/* 54 */           String propName = propNameIter.next();
/* 55 */           String columnStr = (String)stmnt.getResultsMap().get(propName);
/*    */           
/* 57 */           Object obj = null;
/*    */           try {
/* 59 */             int colNum = Integer.parseInt(columnStr);
/* 60 */             obj = rs.getObject(colNum);
/* 61 */           } catch (NumberFormatException ignore) {
/* 62 */             obj = rs.getObject(columnStr);
/*    */           } 
/*    */           
/* 65 */           if (obj != null) {
/* 66 */             if (traceOrDebugOn) {
/* 67 */               traceOrDebug(traceOn, ""Column : "" + columnStr + "" returned value : "" + obj + "" Setting this as the message property : "" + propName);
/*    */             }
/*    */ 
/*    */             
/* 71 */             msgCtx.setProperty(propName, obj.toString()); continue;
/*    */           } 
/* 73 */           if (traceOrDebugOn) {
/* 74 */             traceOrDebugWarn(traceOn, ""Column : "" + columnStr + "" returned null Skip setting message property : "" + propName);
/*    */           
/*    */           }
/*    */         }
/*    */       
/*    */       }
/* 80 */       else if (traceOrDebugOn) {
/* 81 */         traceOrDebug(traceOn, ""Statement : "" + stmnt.getRawStatement() + "" returned 0 rows"");
/*    */       
/*    */       }
/*    */     
/*    */     }
/* 86 */     catch (SQLException e) {
/* 87 */       handleException(""Error executing statement : "" + stmnt.getRawStatement() + "" against DataSource : "" + getDSName(), e, msgCtx);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\db\DBLookupMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.db.DBReportMediator,"/*    */ package org.apache.synapse.mediators.db;
/*    */ 
/*    */ import java.sql.PreparedStatement;
/*    */ import java.sql.SQLException;
/*    */ import org.apache.synapse.MessageContext;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DBReportMediator
/*    */   extends AbstractDBMediator
/*    */ {
/*    */   protected void processStatement(Statement stmnt, MessageContext msgCtx) {
/* 34 */     boolean traceOn = isTraceOn(msgCtx);
/* 35 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */     
/*    */     try {
/* 38 */       PreparedStatement ps = getPreparedStatement(stmnt, msgCtx);
/* 39 */       int count = ps.executeUpdate();
/*    */       
/* 41 */       if (count > 0) {
/* 42 */         if (traceOrDebugOn) {
/* 43 */           traceOrDebug(traceOn, ""Inserted "" + count + "" row/s using statement : "" + stmnt.getRawStatement());
/*    */         
/*    */         }
/*    */       }
/* 47 */       else if (traceOrDebugOn) {
/* 48 */         traceOrDebug(traceOn, ""No rows were inserted for statement : "" + stmnt.getRawStatement());
/*    */       }
/*    */     
/*    */     }
/* 52 */     catch (SQLException e) {
/* 53 */       handleException(""Error execuring insert statement : "" + stmnt.getRawStatement() + "" against DataSource : "" + getDSName(), e, msgCtx);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\db\DBReportMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.db.Statement,"/*     */ package org.apache.synapse.mediators.db;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Statement
/*     */ {
/*  37 */   String rawStatement = null;
/*  38 */   List parameters = new ArrayList();
/*  39 */   Map resultsMap = new HashMap<Object, Object>();
/*     */ 
/*     */   
/*  42 */   public Statement(String rawStatement) { this.rawStatement = rawStatement; }
/*     */ 
/*     */ 
/*     */   
/*  46 */   public String getRawStatement() { return this.rawStatement; }
/*     */ 
/*     */ 
/*     */   
/*  50 */   public void addParameter(String propertyName, AXIOMXPath xpath, String type) { this.parameters.add(new Parameter(propertyName, xpath, type)); }
/*     */ 
/*     */ 
/*     */   
/*  54 */   public void addResult(String propertyName, String column) { this.resultsMap.put(propertyName, column); }
/*     */ 
/*     */ 
/*     */   
/*  58 */   public List getParameters() { return this.parameters; }
/*     */ 
/*     */ 
/*     */   
/*  62 */   public Map getResultsMap() { return this.resultsMap; }
/*     */   
/*     */   public class Parameter
/*     */   {
/*  66 */     String propertyName = null;
/*  67 */     AXIOMXPath xpath = null;
/*  68 */     int type = 0;
/*     */ 
/*     */     
/*     */     Parameter(String value, AXIOMXPath xpath, String type) {
/*  72 */       this.propertyName = value;
/*  73 */       this.xpath = xpath;
/*  74 */       if (""CHAR"".equals(type)) {
/*  75 */         this.type = 1;
/*  76 */       } else if (""VARCHAR"".equals(type)) {
/*  77 */         this.type = 12;
/*  78 */       } else if (""LONGVARCHAR"".equals(type)) {
/*  79 */         this.type = -1;
/*  80 */       } else if (""NUMERIC"".equals(type)) {
/*  81 */         this.type = 2;
/*  82 */       } else if (""DECIMAL"".equals(type)) {
/*  83 */         this.type = 3;
/*  84 */       } else if (""BIT"".equals(type)) {
/*  85 */         this.type = -7;
/*  86 */       } else if (""TINYINT"".equals(type)) {
/*  87 */         this.type = -6;
/*  88 */       } else if (""SMALLINT"".equals(type)) {
/*  89 */         this.type = 5;
/*  90 */       } else if (""INTEGER"".equals(type)) {
/*  91 */         this.type = 4;
/*  92 */       } else if (""BIGINT"".equals(type)) {
/*  93 */         this.type = -5;
/*  94 */       } else if (""REAL"".equals(type)) {
/*  95 */         this.type = 7;
/*  96 */       } else if (""FLOAT"".equals(type)) {
/*  97 */         this.type = 6;
/*  98 */       } else if (""DOUBLE"".equals(type)) {
/*  99 */         this.type = 8;
/* 100 */       } else if (""DATE"".equals(type)) {
/* 101 */         this.type = 91;
/* 102 */       } else if (""TIME"".equals(type)) {
/* 103 */         this.type = 92;
/* 104 */       } else if (""TIMESTAMP"".equals(type)) {
/* 105 */         this.type = 93;
/*     */       } else {
/* 107 */         throw new SynapseException(""Unknown or unsupported JDBC type : "" + type);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 112 */     public String getPropertyName() { return this.propertyName; }
/*     */ 
/*     */ 
/*     */     
/* 116 */     public AXIOMXPath getXpath() { return this.xpath; }
/*     */ 
/*     */ 
/*     */     
/* 120 */     public int getType() { return this.type; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\db\Statement.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.EIPConstants,"package org.apache.synapse.mediators.eip;
public final class EIPConstants {
  public static final String AGGREGATE_CORELATION = ""aggregateCorelation"";
  public static final String MESSAGE_SEQUENCE = ""messageSequence"";
  public static final String MESSAGE_SEQUENCE_DELEMITER = ""/"";
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\EIPConstants.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.EIPUtils,"/*     */ package org.apache.synapse.mediators.eip;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EIPUtils
/*     */ {
/*  42 */   private static final Log log = LogFactory.getLog(EIPUtils.class);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static List getMatchingElements(SOAPEnvelope envelope, AXIOMXPath expression) throws JaxenException {
/*  56 */     Object o = expression.evaluate(envelope);
/*  57 */     if (o instanceof OMNode) {
/*  58 */       List<Object> list = new ArrayList();
/*  59 */       list.add(o);
/*  60 */       return list;
/*  61 */     }  if (o instanceof List) {
/*  62 */       return (List)o;
/*     */     }
/*  64 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static List getDetachedMatchingElements(SOAPEnvelope envelope, AXIOMXPath expression) throws JaxenException {
/*  77 */     List<OMNode> elementList = new ArrayList();
/*  78 */     Object o = expression.evaluate(envelope);
/*  79 */     if (o instanceof OMNode) {
/*  80 */       elementList.add(((OMNode)o).detach());
/*  81 */     } else if (o instanceof List) {
/*  82 */       for (Iterator itr = ((List)o).iterator(); itr.hasNext(); ) {
/*  83 */         Object elem = itr.next();
/*  84 */         if (elem instanceof OMNode) {
/*  85 */           elementList.add(((OMNode)elem).detach());
/*     */         }
/*     */       } 
/*     */     } 
/*  89 */     return elementList;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void enrichEnvelope(SOAPEnvelope envelope, SOAPEnvelope enricher, AXIOMXPath expression) throws JaxenException {
/* 103 */     Object object, o = getMatchingElements(envelope, expression).get(0);
/* 104 */     if (o instanceof OMElement && ((OMElement)o).getParent() instanceof OMElement) {
/* 105 */       object = ((OMElement)o).getParent();
/*     */     } else {
/* 107 */       object = envelope.getBody();
/*     */     } 
/*     */     
/* 110 */     Iterator itr = getMatchingElements(enricher, expression).iterator();
/* 111 */     while (itr.hasNext()) {
/* 112 */       o = itr.next();
/* 113 */       if (o != null && o instanceof OMElement)
/* 114 */         object.addChild((OMNode)o); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\EIPUtils.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.Target,"/*     */ package org.apache.synapse.mediators.eip;
/*     */ 
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Target
/*     */ {
/*  36 */   private String to = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  41 */   private String soapAction = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  46 */   private SequenceMediator sequence = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  51 */   private String sequenceRef = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   private Endpoint endpoint = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  61 */   private String endpointRef = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void mediate(MessageContext synCtx) {
/*  71 */     if (this.soapAction != null) {
/*  72 */       synCtx.setSoapAction(this.soapAction);
/*     */     }
/*     */     
/*  75 */     if (this.to != null) {
/*  76 */       if (synCtx.getTo() != null) {
/*  77 */         synCtx.getTo().setAddress(this.to);
/*     */       } else {
/*  79 */         synCtx.setTo(new EndpointReference(this.to));
/*     */       } 
/*     */     }
/*     */     
/*  83 */     if (this.sequence != null) {
/*  84 */       synCtx.getEnvironment().injectAsync(synCtx, this.sequence);
/*  85 */     } else if (this.sequenceRef != null) {
/*  86 */       SequenceMediator refSequence = (SequenceMediator)synCtx.getConfiguration().getSequence(this.sequenceRef);
/*  87 */       if (refSequence != null) {
/*  88 */         synCtx.getEnvironment().injectAsync(synCtx, refSequence);
/*     */       }
/*     */     } 
/*     */     
/*  92 */     if (this.endpoint != null) {
/*  93 */       this.endpoint.send(synCtx);
/*  94 */     } else if (this.endpointRef != null) {
/*  95 */       Endpoint epr = synCtx.getConfiguration().getEndpoint(this.endpointRef);
/*  96 */       if (epr != null) {
/*  97 */         epr.send(synCtx);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public String getTo() { return this.to; }
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setTo(String to) { this.to = to; }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public String getSoapAction() { return this.soapAction; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setSoapAction(String soapAction) { this.soapAction = soapAction; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public SequenceMediator getSequence() { return this.sequence; }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setSequence(SequenceMediator sequence) { this.sequence = sequence; }
/*     */ 
/*     */ 
/*     */   
/* 132 */   public String getSequenceRef() { return this.sequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setSequenceRef(String sequenceRef) { this.sequenceRef = sequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 140 */   public Endpoint getEndpoint() { return this.endpoint; }
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setEndpoint(Endpoint endpoint) { this.endpoint = endpoint; }
/*     */ 
/*     */ 
/*     */   
/* 148 */   public String getEndpointRef() { return this.endpointRef; }
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void setEndpointRef(String endpointRef) { this.endpointRef = endpointRef; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\Target.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.aggregator.Aggregate,"/*     */ package org.apache.synapse.mediators.eip.aggregator;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Aggregate
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(Aggregate.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  44 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  49 */   private long timeout = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  54 */   private long expireTime = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  59 */   private int minCount = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  64 */   private int maxCount = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  69 */   private String corelation = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   private List messages = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Aggregate(String corelation, long timeout, int min, int max) {
/*  86 */     this.corelation = corelation;
/*  87 */     if (timeout > 0L) {
/*  88 */       this.timeout = System.currentTimeMillis() + this.expireTime;
/*     */     }
/*  90 */     if (min > 0) {
/*  91 */       this.minCount = min;
/*     */     }
/*  93 */     if (max > 0) {
/*  94 */       this.maxCount = max;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean addMessage(MessageContext synCtx) {
/* 103 */     if ((this.maxCount > 0 && this.messages.size() < this.maxCount) || this.maxCount <= 0) {
/* 104 */       this.messages.add(synCtx);
/* 105 */       return true;
/*     */     } 
/* 107 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isComplete() {
/* 116 */     boolean completed = false;
/* 117 */     if (!this.messages.isEmpty()) {
/*     */       
/* 119 */       Object o = this.messages.get(0);
/* 120 */       if (o instanceof MessageContext) {
/*     */         
/* 122 */         Object prop = ((MessageContext)o).getProperty(""messageSequence"");
/* 123 */         if (prop instanceof String) {
/*     */           
/* 125 */           String[] msgSequence = prop.toString().split(""/"");
/*     */           
/* 127 */           if (this.messages.size() >= Integer.parseInt(msgSequence[1])) {
/* 128 */             completed = true;
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 134 */     if (!completed && this.minCount > 0) {
/* 135 */       completed = (this.messages.size() >= this.minCount || this.timeout < System.currentTimeMillis());
/*     */     }
/*     */ 
/*     */     
/* 139 */     return completed;
/*     */   }
/*     */ 
/*     */   
/* 143 */   public long getTimeout() { return this.timeout; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setTimeout(long timeout) { this.timeout = timeout; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public int getMinCount() { return this.minCount; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setMinCount(int minCount) { this.minCount = minCount; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public int getMaxCount() { return this.maxCount; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setMaxCount(int maxCount) { this.maxCount = maxCount; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public String getCorelation() { return this.corelation; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setCorelation(String corelation) { this.corelation = corelation; }
/*     */ 
/*     */ 
/*     */   
/* 175 */   public List getMessages() { return this.messages; }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setMessages(List messages) { this.messages = messages; }
/*     */ 
/*     */ 
/*     */   
/* 183 */   public long getExpireTime() { return this.expireTime; }
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void setExpireTime(long expireTime) { this.expireTime = expireTime; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\aggregator\Aggregate.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.aggregator.AggregateMediator,"/*     */ package org.apache.synapse.mediators.eip.aggregator;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ import org.apache.synapse.mediators.eip.EIPUtils;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AggregateMediator
/*     */   extends AbstractMediator
/*     */ {
/*  46 */   private static final Log log = LogFactory.getLog(AggregateMediator.class);
/*     */   
/*  48 */   private static final Log trace = LogFactory.getLog(""TRACE_LOGGER"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  56 */   private long timeToInvalidate = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  63 */   private AXIOMXPath corelateExpression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  70 */   private long completeTimeout = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  76 */   private int minMessagesToComplete = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   private int maxMessagesToComplete = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   private AXIOMXPath aggregationExpression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private String invalidMsgSequenceRef = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private SequenceMediator invalidMsgSequence = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   private long invlidateToDestroyTime = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   private String onCompleteSequenceRef = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   private SequenceMediator onCompleteSequence = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   private Map activeAggregates = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   private Map expiredAggregates = new HashMap<Object, Object>();
/*     */   
/*     */   private boolean isTimerSet = false;
/*     */   
/*     */   public AggregateMediator() {
/*     */     try {
/* 131 */       this.aggregationExpression = new AXIOMXPath(""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"");
/*     */       
/* 133 */       this.aggregationExpression.addNamespace(""s11"", ""http://schemas.xmlsoap.org/soap/envelope/"");
/* 134 */       this.aggregationExpression.addNamespace(""s12"", ""http://www.w3.org/2003/05/soap-envelope"");
/* 135 */     } catch (JaxenException e) {
/* 136 */       if (log.isDebugEnabled()) {
/* 137 */         handleException(""Unable to set the default aggregationExpression for the aggregation"", (Exception)e, null);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/* 154 */     boolean traceOn = isTraceOn(synCtx);
/* 155 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 157 */     if (traceOrDebugOn) {
/* 158 */       traceOrDebug(traceOn, ""Start : Aggregate mediator"");
/*     */       
/* 160 */       if (traceOn && trace.isTraceEnabled()) {
/* 161 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 172 */       Aggregate aggregate = null;
/*     */ 
/*     */ 
/*     */       
/* 176 */       if (this.corelateExpression != null && this.corelateExpression.evaluate(synCtx.getEnvelope()) != null) {
/*     */ 
/*     */         
/* 179 */         if (this.activeAggregates.containsKey(this.corelateExpression.toString())) {
/* 180 */           Object o = this.activeAggregates.get(this.corelateExpression.toString());
/* 181 */           if (o instanceof Aggregate) {
/* 182 */             aggregate = (Aggregate)o;
/*     */           } else {
/* 184 */             handleException(""Undefined aggregate type."", synCtx);
/*     */           } 
/*     */         } else {
/* 187 */           aggregate = new Aggregate(this.corelateExpression.toString(), this.completeTimeout, this.minMessagesToComplete, this.maxMessagesToComplete);
/*     */ 
/*     */           
/* 190 */           this.activeAggregates.put(this.corelateExpression.toString(), aggregate);
/*     */         
/*     */         }
/*     */ 
/*     */       
/*     */       }
/* 196 */       else if (synCtx.getProperty(""aggregateCorelation"") != null) {
/*     */         
/* 198 */         String corelation = (synCtx.getProperty(""aggregateCorelation"") instanceof String) ? synCtx.getProperty(""aggregateCorelation"").toString() : null;
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 203 */         if (this.expiredAggregates.containsKey(corelation)) {
/*     */           
/* 205 */           if (traceOrDebugOn) {
/* 206 */             traceOrDebug(traceOn, ""Message with the corelation "" + corelation + "" expired. Invalidating the message."");
/*     */           }
/*     */ 
/*     */           
/* 210 */           invalidate(synCtx, traceOrDebugOn, traceOn);
/* 211 */           return false;
/*     */         } 
/*     */         
/* 214 */         if (corelation != null) {
/*     */           
/* 216 */           if (this.activeAggregates.containsKey(corelation)) {
/*     */             
/* 218 */             Object o = this.activeAggregates.get(corelation);
/* 219 */             if (o instanceof Aggregate) {
/* 220 */               aggregate = (Aggregate)o;
/*     */             } else {
/* 222 */               handleException(""Undefined aggregate type."", synCtx);
/*     */             } 
/*     */           } else {
/*     */             
/* 226 */             aggregate = new Aggregate(corelation, this.completeTimeout, this.minMessagesToComplete, this.maxMessagesToComplete);
/*     */             
/* 228 */             this.activeAggregates.put(corelation, aggregate);
/*     */           } 
/*     */         } else {
/*     */           
/* 232 */           if (traceOrDebugOn) {
/* 233 */             traceOrDebug(traceOn, ""Error in getting corelation details. Skip the aggregator."");
/*     */           }
/*     */           
/* 236 */           return true;
/*     */         } 
/*     */       } else {
/* 239 */         if (traceOrDebugOn) {
/* 240 */           traceOrDebug(traceOn, ""Unable to find the aggregation corelation. Skip the aggregation"");
/*     */         }
/*     */         
/* 243 */         return true;
/*     */       } 
/*     */ 
/*     */       
/* 247 */       if (aggregate != null)
/*     */       {
/*     */ 
/*     */         
/* 251 */         if (!aggregate.addMessage(synCtx)) {
/* 252 */           if (traceOrDebugOn) {
/* 253 */             traceOrDebug(traceOn, ""Can not exceed aggregate max message count. Invalidating message"");
/*     */           }
/*     */           
/* 256 */           invalidate(synCtx, traceOrDebugOn, traceOn);
/* 257 */           return false;
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 262 */         if (aggregate.isComplete()) {
/* 263 */           return completeAggregate(aggregate);
/*     */         
/*     */         }
/*     */       }
/*     */       else
/*     */       {
/* 269 */         if (traceOrDebugOn) {
/* 270 */           traceOrDebug(traceOn, ""Unable to find the aggregate. Skip the aggregation"");
/*     */         }
/* 272 */         return true;
/*     */       }
/*     */     
/* 275 */     } catch (JaxenException e) {
/* 276 */       handleException(""Unable to execute the XPATH over the message"", (Exception)e, synCtx);
/*     */     } 
/*     */ 
/*     */     
/* 280 */     if (traceOrDebugOn) {
/* 281 */       traceOrDebug(traceOn, ""End : Aggregate mediator"");
/*     */     }
/*     */     
/* 284 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   private void invalidate(MessageContext synCtx, boolean traceOrDebugOn, boolean traceOn) {
/* 289 */     if (this.invalidMsgSequenceRef != null && synCtx.getConfiguration().getSequence(this.invalidMsgSequenceRef) != null) {
/*     */ 
/*     */ 
/*     */       
/* 293 */       synCtx.getConfiguration().getSequence(this.invalidMsgSequenceRef).mediate(synCtx);
/*     */     }
/* 295 */     else if (this.invalidMsgSequence != null) {
/*     */ 
/*     */       
/* 298 */       this.invalidMsgSequence.mediate(synCtx);
/*     */     
/*     */     }
/* 301 */     else if (traceOrDebugOn) {
/* 302 */       traceOrDebug(traceOn, ""No invalid message sequence defined. Dropping the message"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean completeAggregate(Aggregate aggregate) {
/* 309 */     MessageContext newSynCtx = getAggregatedMessage(aggregate);
/* 310 */     this.activeAggregates.remove(aggregate.getCorelation());
/*     */     
/* 312 */     if ((this.corelateExpression != null && !this.corelateExpression.toString().equals(aggregate.getCorelation())) || this.corelateExpression == null) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 318 */       this.expiredAggregates.put(aggregate.getCorelation(), new Long(System.currentTimeMillis() + this.invlidateToDestroyTime));
/*     */ 
/*     */       
/* 321 */       if (this.onCompleteSequence != null) {
/* 322 */         this.onCompleteSequence.mediate(newSynCtx);
/* 323 */       } else if (this.onCompleteSequenceRef != null && newSynCtx.getSequence(this.onCompleteSequenceRef) != null) {
/*     */         
/* 325 */         newSynCtx.getSequence(this.onCompleteSequenceRef).mediate(newSynCtx);
/*     */       } else {
/* 327 */         handleException(""Unable to find the sequence for the mediation of the aggregated message"", newSynCtx);
/*     */       } 
/*     */       
/* 330 */       return false;
/*     */     } 
/* 332 */     return true;
/*     */   }
/*     */ 
/*     */   
/*     */   public MessageContext getAggregatedMessage(Aggregate aggregate) {
/* 337 */     MessageContext newCtx = null;
/* 338 */     Iterator itr = aggregate.getMessages().iterator();
/* 339 */     while (itr.hasNext()) {
/* 340 */       Object o = itr.next();
/* 341 */       if (o instanceof MessageContext) {
/* 342 */         MessageContext synCtx = (MessageContext)o;
/* 343 */         if (newCtx == null) {
/* 344 */           newCtx = synCtx; continue;
/*     */         } 
/*     */         try {
/* 347 */           EIPUtils.enrichEnvelope(newCtx.getEnvelope(), synCtx.getEnvelope(), this.aggregationExpression);
/*     */         }
/* 349 */         catch (JaxenException e) {
/* 350 */           handleException(""Unable to get the aggreagated message"", (Exception)e, synCtx);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 355 */     return newCtx;
/*     */   }
/*     */ 
/*     */   
/* 359 */   public AXIOMXPath getCorelateExpression() { return this.corelateExpression; }
/*     */ 
/*     */ 
/*     */   
/* 363 */   public void setCorelateExpression(AXIOMXPath corelateExpression) { this.corelateExpression = corelateExpression; }
/*     */ 
/*     */ 
/*     */   
/* 367 */   public String getInvalidMsgSequenceRef() { return this.invalidMsgSequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 371 */   public void setInvalidMsgSequenceRef(String invalidMsgSequenceRef) { this.invalidMsgSequenceRef = invalidMsgSequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 375 */   public SequenceMediator getInvalidMsgSequence() { return this.invalidMsgSequence; }
/*     */ 
/*     */ 
/*     */   
/* 379 */   public void setInvalidMsgSequence(SequenceMediator invalidMsgSequence) { this.invalidMsgSequence = invalidMsgSequence; }
/*     */ 
/*     */ 
/*     */   
/* 383 */   public long getTimeToInvalidate() { return this.timeToInvalidate; }
/*     */ 
/*     */ 
/*     */   
/* 387 */   public void setTimeToInvalidate(long timeToInvalidate) { this.timeToInvalidate = timeToInvalidate; }
/*     */ 
/*     */ 
/*     */   
/* 391 */   public long getCompleteTimeout() { return this.completeTimeout; }
/*     */ 
/*     */ 
/*     */   
/* 395 */   public void setCompleteTimeout(long completeTimeout) { this.completeTimeout = completeTimeout; }
/*     */ 
/*     */ 
/*     */   
/* 399 */   public int getMinMessagesToComplete() { return this.minMessagesToComplete; }
/*     */ 
/*     */ 
/*     */   
/* 403 */   public void setMinMessagesToComplete(int minMessagesToComplete) { this.minMessagesToComplete = minMessagesToComplete; }
/*     */ 
/*     */ 
/*     */   
/* 407 */   public int getMaxMessagesToComplete() { return this.maxMessagesToComplete; }
/*     */ 
/*     */ 
/*     */   
/* 411 */   public void setMaxMessagesToComplete(int maxMessagesToComplete) { this.maxMessagesToComplete = maxMessagesToComplete; }
/*     */ 
/*     */ 
/*     */   
/* 415 */   public AXIOMXPath getAggregationExpression() { return this.aggregationExpression; }
/*     */ 
/*     */ 
/*     */   
/* 419 */   public void setAggregationExpression(AXIOMXPath aggregationExpression) { this.aggregationExpression = aggregationExpression; }
/*     */ 
/*     */ 
/*     */   
/* 423 */   public long getInvlidateToDestroyTime() { return this.invlidateToDestroyTime; }
/*     */ 
/*     */ 
/*     */   
/* 427 */   public void setInvlidateToDestroyTime(long invlidateToDestroyTime) { this.invlidateToDestroyTime = invlidateToDestroyTime; }
/*     */ 
/*     */ 
/*     */   
/* 431 */   public String getOnCompleteSequenceRef() { return this.onCompleteSequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 435 */   public void setOnCompleteSequenceRef(String onCompleteSequenceRef) { this.onCompleteSequenceRef = onCompleteSequenceRef; }
/*     */ 
/*     */ 
/*     */   
/* 439 */   public SequenceMediator getOnCompleteSequence() { return this.onCompleteSequence; }
/*     */ 
/*     */ 
/*     */   
/* 443 */   public void setOnCompleteSequence(SequenceMediator onCompleteSequence) { this.onCompleteSequence = onCompleteSequence; }
/*     */ 
/*     */ 
/*     */   
/* 447 */   public Map getExpiredAggregates() { return this.expiredAggregates; }
/*     */ 
/*     */ 
/*     */   
/* 451 */   public Map getActiveAggregates() { return this.activeAggregates; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\aggregator\AggregateMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.splitter.CloneMediator,"/*     */ package org.apache.synapse.mediators.eip.splitter;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.eip.Target;
/*     */ import org.apache.synapse.util.MessageHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CloneMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   private boolean continueParent = false;
/*  50 */   private List targets = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  63 */     boolean traceOn = isTraceOn(synCtx);
/*  64 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  66 */     if (traceOrDebugOn) {
/*  67 */       traceOrDebug(traceOn, ""Start : Clone mediator"");
/*     */       
/*  69 */       if (traceOn && trace.isTraceEnabled()) {
/*  70 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*  76 */     if (this.targets.size() != 0)
/*     */     {
/*  78 */       for (int i = 0; i < this.targets.size(); i++) {
/*     */         
/*  80 */         MessageContext newContext = getClonedMessageContext(synCtx, i, this.targets.size());
/*  81 */         Object o = this.targets.get(i);
/*     */         
/*  83 */         if (o instanceof Target) {
/*  84 */           Target target = (Target)o;
/*  85 */           target.mediate(newContext);
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/*  91 */     if (traceOrDebugOn) {
/*  92 */       traceOrDebug(traceOn, ""End : Clone mediator"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  97 */     OperationContext opCtx = ((Axis2MessageContext)synCtx).getAxis2MessageContext().getOperationContext();
/*     */     
/*  99 */     if (!this.continueParent && opCtx != null) {
/* 100 */       opCtx.setProperty(""RESPONSE_WRITTEN"", ""SKIP"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 105 */     return this.continueParent;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private MessageContext getClonedMessageContext(MessageContext synCtx, int messageSequence, int messageCount) {
/* 119 */     MessageContext newCtx = null;
/*     */     
/*     */     try {
/* 122 */       newCtx = MessageHelper.cloneMessageContext(synCtx);
/* 123 */     } catch (AxisFault axisFault) {
/* 124 */       handleException(""Error creating a new message context"", (Exception)axisFault, synCtx);
/*     */     } 
/*     */ 
/*     */     
/* 128 */     newCtx.setProperty(""messageSequence"", String.valueOf(messageSequence) + ""/"" + messageCount);
/*     */ 
/*     */     
/* 131 */     return newCtx;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public boolean isContinueParent() { return this.continueParent; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setContinueParent(boolean continueParent) { this.continueParent = continueParent; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public List getTargets() { return this.targets; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setTargets(List targets) { this.targets = targets; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void addTarget(Target target) { this.targets.add(target); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\splitter\CloneMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.eip.splitter.IterateMediator,"/*     */ package org.apache.synapse.mediators.eip.splitter;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.OperationContext;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.eip.EIPUtils;
/*     */ import org.apache.synapse.mediators.eip.Target;
/*     */ import org.apache.synapse.util.MessageHelper;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IterateMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   private boolean continueParent = false;
/*     */   private boolean preservePayload = false;
/*  61 */   private AXIOMXPath expression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  67 */   private AXIOMXPath attachPath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  72 */   private Target target = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  85 */     boolean traceOn = isTraceOn(synCtx);
/*  86 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  88 */     if (traceOrDebugOn) {
/*  89 */       traceOrDebug(traceOn, ""Start : Iterate mediator"");
/*     */       
/*  91 */       if (traceOn && trace.isTraceEnabled()) {
/*  92 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 100 */       SOAPEnvelope envelope = MessageHelper.cloneSOAPEnvelope(synCtx.getEnvelope());
/*     */ 
/*     */ 
/*     */       
/* 104 */       List splitElements = EIPUtils.getDetachedMatchingElements(envelope, this.expression);
/* 105 */       if (splitElements != null) {
/*     */         
/* 107 */         int msgCount = splitElements.size();
/* 108 */         int msgNumber = 0;
/*     */ 
/*     */         
/* 111 */         if (!this.preservePayload && envelope.getBody() != null) {
/* 112 */           for (Iterator<OMNode> itr = envelope.getBody().getChildren(); itr.hasNext();) {
/* 113 */             ((OMNode)itr.next()).detach();
/*     */           }
/*     */         }
/*     */ 
/*     */         
/* 118 */         for (Object o : splitElements)
/*     */         {
/*     */           
/* 121 */           MessageContext newCtx = MessageHelper.cloneMessageContext(synCtx);
/*     */           
/* 123 */           newCtx.setProperty(""messageSequence"", msgNumber + ""/"" + msgCount);
/*     */ 
/*     */           
/* 126 */           SOAPEnvelope newEnvelope = MessageHelper.cloneSOAPEnvelope(envelope);
/*     */ 
/*     */           
/* 129 */           if (!(o instanceof OMNode)) {
/* 130 */             handleException(""Error in splitting the message with expression : "" + this.expression, synCtx);
/*     */           }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 137 */           if (this.preservePayload) {
/*     */             
/* 139 */             Object attachElem = this.attachPath.evaluate(newEnvelope);
/* 140 */             if (attachElem instanceof List) {
/* 141 */               attachElem = ((List)attachElem).get(0);
/*     */             }
/*     */ 
/*     */             
/* 145 */             if (attachElem instanceof OMElement) {
/* 146 */               ((OMElement)attachElem).addChild((OMNode)o);
/*     */             } else {
/* 148 */               handleException(""Error in attaching the splitted elements :: Unable to get the attach path specified by the expression "" + this.attachPath, synCtx);
/*     */             
/*     */             }
/*     */           
/*     */           }
/* 153 */           else if (o instanceof OMNode && newEnvelope.getBody() != null) {
/* 154 */             newEnvelope.getBody().addChild((OMNode)o);
/*     */           } 
/*     */ 
/*     */           
/* 158 */           newCtx.setEnvelope(newEnvelope);
/* 159 */           this.target.mediate(newCtx);
/* 160 */           msgNumber++;
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 165 */         handleException(""Splitting by expression : "" + this.expression + "" did not yeild in an OMElement"", synCtx);
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 170 */     catch (JaxenException e) {
/* 171 */       handleException(""Error evaluating XPath expression : "" + this.expression, (Exception)e, synCtx);
/* 172 */     } catch (AxisFault axisFault) {
/* 173 */       handleException(""Unable to split the message using the expression : "" + this.expression, (Exception)axisFault, synCtx);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 178 */     if (traceOrDebugOn) {
/* 179 */       traceOrDebug(traceOn, ""End : Iterate mediator"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 184 */     OperationContext opCtx = ((Axis2MessageContext)synCtx).getAxis2MessageContext().getOperationContext();
/*     */     
/* 186 */     if (!this.continueParent && opCtx != null) {
/* 187 */       opCtx.setProperty(""RESPONSE_WRITTEN"", ""SKIP"");
/*     */     }
/*     */ 
/*     */     
/* 191 */     return this.continueParent;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public boolean isContinueParent() { return this.continueParent; }
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setContinueParent(boolean continueParent) { this.continueParent = continueParent; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public boolean isPreservePayload() { return this.preservePayload; }
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setPreservePayload(boolean preservePayload) { this.preservePayload = preservePayload; }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public AXIOMXPath getExpression() { return this.expression; }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */   
/* 223 */   public AXIOMXPath getAttachPath() { return this.attachPath; }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public void setAttachPath(AXIOMXPath attachPath) { this.attachPath = attachPath; }
/*     */ 
/*     */ 
/*     */   
/* 231 */   public Target getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setTarget(Target target) { this.target = target; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\eip\splitter\IterateMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.ext.ClassMediator,"/*     */ package org.apache.synapse.mediators.ext;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.synapse.ManagedLifecycle;
/*     */ import org.apache.synapse.Mediator;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ClassMediator
/*     */   extends AbstractMediator
/*     */   implements ManagedLifecycle
/*     */ {
/*  48 */   private Mediator mediator = null;
/*     */   
/*  50 */   private Map properties = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  62 */     boolean traceOn = isTraceOn(synCtx);
/*  63 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  65 */     if (traceOrDebugOn) {
/*  66 */       traceOrDebug(traceOn, ""Start : Class mediator"");
/*     */       
/*  68 */       if (traceOn && trace.isTraceEnabled()) {
/*  69 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  73 */     if (traceOrDebugOn) {
/*  74 */       traceOrDebug(traceOn, ""invoking : "" + this.mediator.getClass() + "".mediate()"");
/*     */     }
/*     */     
/*  77 */     boolean result = true;
/*     */     try {
/*  79 */       result = this.mediator.mediate(synCtx);
/*  80 */     } catch (Exception e) {
/*     */ 
/*     */       
/*  83 */       throw new SynapseException(""Error occured in the mediation of the class mediator"", e);
/*     */     } 
/*     */     
/*  86 */     if (traceOrDebugOn) {
/*  87 */       traceOrDebug(traceOn, ""End : Class mediator"");
/*     */     }
/*  89 */     return result;
/*     */   }
/*     */   
/*     */   public void destroy() {
/*  93 */     if (this.log.isDebugEnabled()) {
/*  94 */       this.log.debug(""Destroying class mediator instance for : "" + this.mediator.getClass());
/*     */     }
/*  96 */     if (this.mediator instanceof ManagedLifecycle) {
/*  97 */       ((ManagedLifecycle)this.mediator).destroy();
/*     */     }
/*     */   }
/*     */   
/*     */   public void init(SynapseEnvironment se) {
/* 102 */     if (this.log.isDebugEnabled()) {
/* 103 */       this.log.debug(""Initializing class mediator instance for : "" + this.mediator.getClass());
/*     */     }
/* 105 */     if (this.mediator == null) {
/* 106 */       this.log.warn(""init() called before mediator reference set"");
/*     */       
/*     */       return;
/*     */     } 
/* 110 */     if (this.mediator instanceof ManagedLifecycle) {
/* 111 */       ((ManagedLifecycle)this.mediator).init(se);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 116 */   public void setMediator(Mediator mediator) { this.mediator = mediator; }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public Mediator getMediator() { return this.mediator; }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void addProperty(String name, Object value) { this.properties.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 128 */   public Map getProperties() { return this.properties; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\ext\ClassMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.ext.POJOCommandMediator,"/*     */ package org.apache.synapse.mediators.ext;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.Command;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class POJOCommandMediator
/*     */   extends AbstractMediator
/*     */ {
/*  44 */   private Class command = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   private Map staticProps = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  55 */   private Map dynamicProps = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  67 */     boolean traceOn = isTraceOn(synCtx);
/*  68 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  70 */     if (traceOrDebugOn) {
/*  71 */       traceOrDebug(traceOn, ""Start : POJOCommand mediator"");
/*     */       
/*  73 */       if (traceOn && trace.isTraceEnabled()) {
/*  74 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  78 */     if (traceOrDebugOn) {
/*  79 */       traceOrDebug(traceOn, ""Creating a new instance of POJO class : "" + this.command.getClass());
/*     */     }
/*     */     
/*  82 */     Object commandObject = null;
/*     */     
/*     */     try {
/*  85 */       commandObject = this.command.newInstance();
/*  86 */     } catch (Exception e) {
/*  87 */       handleException(""Error creating an instance of the POJO command class : "" + this.command.getClass(), e, synCtx);
/*     */     } 
/*     */ 
/*     */     
/*  91 */     if (traceOrDebugOn) {
/*  92 */       traceOrDebug(traceOn, ""Instance created, setting static and dynamic properties"");
/*     */     }
/*     */ 
/*     */     
/*  96 */     for (Iterator<String> iter = this.staticProps.keySet().iterator(); iter.hasNext(); ) {
/*  97 */       String name = iter.next();
/*  98 */       setInstanceProperty(name, (String)this.staticProps.get(name), commandObject, synCtx);
/*     */     } 
/*     */ 
/*     */     
/* 102 */     for (Iterator<String> iter = this.dynamicProps.keySet().iterator(); iter.hasNext(); ) {
/*     */       
/* 104 */       String name = iter.next();
/* 105 */       AXIOMXPath xpath = (AXIOMXPath)this.dynamicProps.get(name);
/* 106 */       String value = Axis2MessageContext.getStringValue(xpath, synCtx);
/*     */       
/* 108 */       setInstanceProperty(name, value, commandObject, synCtx);
/*     */     } 
/*     */     
/* 111 */     if (traceOrDebugOn) {
/* 112 */       traceOrDebug(traceOn, ""POJO initialized successfully, invoking the execute() method"");
/*     */     }
/*     */ 
/*     */     
/* 116 */     if (commandObject instanceof Command) {
/*     */       try {
/* 118 */         ((Command)commandObject).execute();
/* 119 */       } catch (Exception e) {
/* 120 */         handleException(""Error invoking POJO command class : "" + this.command.getClass(), e, synCtx);
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 126 */       Method exeMethod = null;
/*     */       try {
/* 128 */         exeMethod = this.command.getMethod(""execute"", new Class[0]);
/* 129 */         exeMethod.invoke(commandObject, new Object[0]);
/* 130 */       } catch (NoSuchMethodException e) {
/* 131 */         handleException(""Cannot locate an execute() method on POJO class : "" + this.command.getClass(), e, synCtx);
/*     */       }
/* 133 */       catch (Exception e) {
/* 134 */         handleException(""Error invoking the execute() method on POJO class : "" + this.command.getClass(), e, synCtx);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 139 */     if (traceOrDebugOn) {
/* 140 */       traceOrDebug(traceOn, ""End : POJOCommand mediator"");
/*     */     }
/* 142 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setInstanceProperty(String name, String value, Object obj, MessageContext synCtx) {
/* 155 */     String mName = ""set"" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
/* 156 */     Method method = null;
/*     */     
/*     */     try {
/* 159 */       Method[] methods = obj.getClass().getMethods();
/* 160 */       boolean invoked = false;
/*     */       
/* 162 */       for (int i = 0; i < methods.length; i++) {
/* 163 */         if (mName.equals(methods[i].getName())) {
/* 164 */           Class[] params = methods[i].getParameterTypes();
/* 165 */           if (params.length != 1) {
/* 166 */             handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"", synCtx);
/*     */ 
/*     */           
/*     */           }
/* 170 */           else if (params[0].equals(String.class)) {
/* 171 */             method = obj.getClass().getMethod(mName, new Class[] { String.class });
/* 172 */             method.invoke(obj, (Object[])new String[] { value });
/* 173 */           } else if (params[0].equals(int.class)) {
/* 174 */             method = obj.getClass().getMethod(mName, new Class[] { int.class });
/* 175 */             method.invoke(obj, (Object[])new Integer[] { new Integer(value) });
/* 176 */           } else if (params[0].equals(long.class)) {
/* 177 */             method = obj.getClass().getMethod(mName, new Class[] { long.class });
/* 178 */             method.invoke(obj, (Object[])new Long[] { new Long(value) });
/* 179 */           } else if (params[0].equals(float.class)) {
/* 180 */             method = obj.getClass().getMethod(mName, new Class[] { float.class });
/* 181 */             method.invoke(obj, (Object[])new Float[] { new Float(value) });
/* 182 */           } else if (params[0].equals(double.class)) {
/* 183 */             method = obj.getClass().getMethod(mName, new Class[] { double.class });
/* 184 */             method.invoke(obj, (Object[])new Double[] { new Double(value) });
/* 185 */           } else if (params[0].equals(boolean.class)) {
/* 186 */             method = obj.getClass().getMethod(mName, new Class[] { boolean.class });
/* 187 */             method.invoke(obj, (Object[])new Boolean[] { new Boolean(value) });
/*     */           } else {
/* 189 */             handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"", synCtx);
/*     */           } 
/*     */ 
/*     */ 
/*     */           
/* 194 */           invoked = true;
/*     */         } 
/*     */       } 
/*     */       
/* 198 */       if (!invoked) {
/* 199 */         handleException(""Did not find a setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"", synCtx);
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 204 */     catch (Exception e) {
/* 205 */       handleException(""Error invoking setter method named : "" + mName + ""() that takes a single String, int, long, float, double "" + ""or boolean parameter"", e, synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public Class getCommand() { return this.command; }
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setCommand(Class command) { this.command = command; }
/*     */ 
/*     */ 
/*     */   
/* 220 */   public void addStaticProperty(String name, String value) { this.staticProps.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void addDynamicProperty(String name, Object value) { this.dynamicProps.put(name, value); }
/*     */ 
/*     */ 
/*     */   
/* 228 */   public Map getStaticProps() { return this.staticProps; }
/*     */ 
/*     */ 
/*     */   
/* 232 */   public Map getDynamicProps() { return this.dynamicProps; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\ext\POJOCommandMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.FilterMediator,"/*     */ package org.apache.synapse.mediators.filters;
/*     */ 
/*     */ import java.util.regex.Matcher;
/*     */ import java.util.regex.Pattern;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractListMediator;
/*     */ import org.apache.synapse.mediators.FilterMediator;
/*     */ import org.jaxen.JaxenException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterMediator
/*     */   extends AbstractListMediator
/*     */   implements FilterMediator
/*     */ {
/*  40 */   private AXIOMXPath source = null;
/*  41 */   private Pattern regex = null;
/*  42 */   private AXIOMXPath xpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  52 */     boolean traceOn = isTraceOn(synCtx);
/*  53 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  55 */     if (traceOrDebugOn) {
/*  56 */       traceOrDebug(traceOn, ""Start : Filter mediator"");
/*     */       
/*  58 */       if (traceOn && trace.isTraceEnabled()) {
/*  59 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  63 */     boolean result = false;
/*  64 */     if (test(synCtx)) {
/*  65 */       if (traceOrDebugOn) {
/*  66 */         traceOrDebug(traceOn, ((this.xpath == null) ? (""Source : "" + this.source + "" against : "" + this.regex.pattern() + "" matches"") : (""XPath expression : "" + this.xpath + "" evaluates to true"")) + "" - executing child mediators"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*  71 */       result = super.mediate(synCtx);
/*     */     }
/*     */     else {
/*     */       
/*  75 */       if (traceOrDebugOn) {
/*  76 */         traceOrDebug(traceOn, ((this.xpath == null) ? (""Source : "" + this.source + "" against : "" + this.regex.pattern() + "" does not match"") : (""XPath expression : "" + this.xpath + "" evaluates to false"")) + "" - skipping child mediators"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/*  81 */       result = true;
/*     */     } 
/*     */     
/*  84 */     if (traceOrDebugOn) {
/*  85 */       trace.trace(""End : Filter mediator "");
/*     */     }
/*  87 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean test(MessageContext synCtx) {
/* 101 */     boolean traceOn = isTraceOn(synCtx);
/* 102 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 104 */     if (this.xpath != null) {
/*     */       try {
/* 106 */         return this.xpath.booleanValueOf(synCtx.getEnvelope());
/* 107 */       } catch (JaxenException e) {
/* 108 */         handleException(""Error evaluating XPath expression : "" + this.xpath, (Exception)e, synCtx);
/*     */       }
/*     */     
/* 111 */     } else if (this.source != null && this.regex != null) {
/* 112 */       String sourceString = Axis2MessageContext.getStringValue(this.source, synCtx);
/* 113 */       if (sourceString == null) {
/* 114 */         if (traceOrDebugOn) {
/* 115 */           traceOrDebug(traceOn, ""Source String : "" + this.source + "" evaluates to null"");
/*     */         }
/* 117 */         return false;
/*     */       } 
/* 119 */       Matcher matcher = this.regex.matcher(sourceString);
/* 120 */       if (matcher == null) {
/* 121 */         if (traceOrDebugOn) {
/* 122 */           traceOrDebug(traceOn, ""Regex pattren matcher for : "" + this.regex.pattern() + ""against source : "" + sourceString + "" is null"");
/*     */         }
/*     */         
/* 125 */         return false;
/*     */       } 
/* 127 */       return matcher.matches();
/*     */     } 
/*     */     
/* 130 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 135 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public Pattern getRegex() { return this.regex; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setRegex(Pattern regex) { this.regex = regex; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public AXIOMXPath getXpath() { return this.xpath; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setXpath(AXIOMXPath xpath) { this.xpath = xpath; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\filters\FilterMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.InMediator,"/*    */ package org.apache.synapse.mediators.filters;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.mediators.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class InMediator
/*    */   extends AbstractListMediator
/*    */   implements FilterMediator
/*    */ {
/*    */   public boolean mediate(MessageContext synCtx) {
/* 44 */     boolean traceOn = isTraceOn(synCtx);
/* 45 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */     
/* 47 */     if (traceOrDebugOn) {
/* 48 */       traceOrDebug(traceOn, ""Start : In mediator"");
/*    */       
/* 50 */       if (traceOn && trace.isTraceEnabled()) {
/* 51 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*    */       }
/*    */     } 
/*    */     
/* 55 */     boolean result = true;
/* 56 */     if (test(synCtx)) {
/* 57 */       if (traceOrDebugOn) {
/* 58 */         traceOrDebug(traceOn, ""Current message is incoming - executing child mediators"");
/*    */       }
/* 60 */       result = super.mediate(synCtx);
/*    */     
/*    */     }
/* 63 */     else if (traceOrDebugOn) {
/* 64 */       traceOrDebug(traceOn, ""Current message is a response - skipping child mediators"");
/*    */     } 
/*    */ 
/*    */     
/* 68 */     if (traceOrDebugOn) {
/* 69 */       traceOrDebug(traceOn, ""End : In mediator"");
/*    */     }
/*    */     
/* 72 */     return result;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 82 */   public boolean test(MessageContext synCtx) { return !synCtx.isResponse(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\filters\InMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.OutMediator,"/*    */ package org.apache.synapse.mediators.filters;
/*    */ 
/*    */ import org.apache.synapse.MessageContext;
/*    */ import org.apache.synapse.mediators.AbstractListMediator;
/*    */ import org.apache.synapse.mediators.FilterMediator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class OutMediator
/*    */   extends AbstractListMediator
/*    */   implements FilterMediator
/*    */ {
/*    */   public boolean mediate(MessageContext synCtx) {
/* 44 */     boolean traceOn = isTraceOn(synCtx);
/* 45 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*    */     
/* 47 */     if (traceOrDebugOn) {
/* 48 */       traceOrDebug(traceOn, ""Start : Out mediator"");
/*    */       
/* 50 */       if (traceOn && trace.isTraceEnabled()) {
/* 51 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*    */       }
/*    */     } 
/*    */     
/* 55 */     boolean result = true;
/* 56 */     if (test(synCtx)) {
/* 57 */       if (traceOrDebugOn) {
/* 58 */         traceOrDebug(traceOn, ""Current message is outgoing - executing child mediators"");
/*    */       }
/* 60 */       result = super.mediate(synCtx);
/*    */     
/*    */     }
/* 63 */     else if (traceOrDebugOn) {
/* 64 */       traceOrDebug(traceOn, ""Current message is a request - skipping child mediators"");
/*    */     } 
/*    */ 
/*    */     
/* 68 */     if (traceOrDebugOn) {
/* 69 */       traceOrDebug(traceOn, ""End : Out mediator"");
/*    */     }
/*    */     
/* 72 */     return result;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 82 */   public boolean test(MessageContext synCtx) { return synCtx.isResponse(); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\filters\OutMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.filters.SwitchMediator,"/*     */ package org.apache.synapse.mediators.filters;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.config.xml.SwitchCase;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SwitchMediator
/*     */   extends AbstractMediator
/*     */ {
/*  41 */   private AXIOMXPath source = null;
/*     */   
/*  43 */   private List cases = new ArrayList();
/*     */   
/*  45 */   private SwitchCase defaultCase = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  55 */     boolean traceOn = isTraceOn(synCtx);
/*  56 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  58 */     if (traceOrDebugOn) {
/*  59 */       traceOrDebug(traceOn, ""Start : Switch mediator"");
/*     */       
/*  61 */       if (traceOn && trace.isTraceEnabled()) {
/*  62 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  66 */     int parentsEffectiveTraceState = synCtx.getTracingState();
/*     */ 
/*     */     
/*  69 */     setEffectiveTraceState(synCtx);
/*  70 */     int myEffectiveTraceState = synCtx.getTracingState();
/*     */     
/*  72 */     String sourceText = Axis2MessageContext.getStringValue(this.source, synCtx);
/*  73 */     if (traceOrDebugOn) {
/*  74 */       traceOrDebug(traceOn, ""XPath : "" + this.source + "" evaluates to : "" + sourceText);
/*     */     }
/*     */     
/*     */     try {
/*  78 */       if ((sourceText == null || this.cases.isEmpty()) && this.defaultCase != null) {
/*  79 */         if (traceOrDebugOn) {
/*  80 */           traceOrDebug(traceOn, ""Source XPath evaluated to : null or no switch cases found. Executing the default case"");
/*     */         }
/*     */ 
/*     */         
/*  84 */         return this.defaultCase.mediate(synCtx);
/*     */       } 
/*     */       
/*  87 */       for (Iterator<SwitchCase> iter = this.cases.iterator(); iter.hasNext(); ) {
/*  88 */         SwitchCase swCase = iter.next();
/*     */         
/*  90 */         if (swCase != null && 
/*  91 */           swCase.matches(sourceText)) {
/*  92 */           if (traceOrDebugOn) {
/*  93 */             traceOrDebug(traceOn, ""Matching case found : "" + swCase.getRegex());
/*     */           }
/*  95 */           return swCase.mediate(synCtx);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 100 */       if (this.defaultCase != null) {
/*     */         
/* 102 */         if (traceOrDebugOn) {
/* 103 */           traceOrDebug(traceOn, ""None of the switch cases matched - executing default"");
/*     */         }
/* 105 */         return this.defaultCase.mediate(synCtx);
/*     */       } 
/* 107 */       if (traceOrDebugOn) {
/* 108 */         traceOrDebug(traceOn, ""None of the switch cases matched - no default case"");
/*     */       
/*     */       }
/*     */     }
/*     */     finally {
/*     */       
/* 114 */       synCtx.setTracingState(parentsEffectiveTraceState);
/*     */     } 
/*     */     
/* 117 */     if (traceOrDebugOn) {
/* 118 */       traceOrDebug(traceOn, ""End : Switch mediator"");
/*     */     }
/* 120 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void addCase(SwitchCase m) { this.cases.add(m); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public List getCases() { return this.cases; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public SwitchCase getDefaultCase() { return this.defaultCase; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void setDefaultCase(SwitchCase defaultCase) { this.defaultCase = defaultCase; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\filters\SwitchMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.FaultMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMDocument;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPFault;
/*     */ import org.apache.axiom.soap.SOAPFaultCode;
/*     */ import org.apache.axiom.soap.SOAPFaultDetail;
/*     */ import org.apache.axiom.soap.SOAPFaultNode;
/*     */ import org.apache.axiom.soap.SOAPFaultReason;
/*     */ import org.apache.axiom.soap.SOAPFaultRole;
/*     */ import org.apache.axiom.soap.SOAPFaultText;
/*     */ import org.apache.axiom.soap.SOAPFaultValue;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FaultMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   public static final String WSA_ACTION = ""Action"";
/*     */   public static final int SOAP11 = 1;
/*     */   public static final int SOAP12 = 2;
/*     */   private int soapVersion;
/*  63 */   private QName faultCodeValue = null;
/*     */   
/*  65 */   private AXIOMXPath faultCodeExpr = null;
/*     */   
/*  67 */   private String faultReasonValue = null;
/*     */   
/*  69 */   private AXIOMXPath faultReasonExpr = null;
/*     */   
/*  71 */   private URI faultNode = null;
/*     */   
/*  73 */   private URI faultRole = null;
/*     */   
/*  75 */   private String faultDetail = null;
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  79 */     boolean traceOn = isTraceOn(synCtx);
/*  80 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  82 */     if (traceOrDebugOn) {
/*  83 */       traceOrDebug(traceOn, ""Start : Fault mediator"");
/*     */       
/*  85 */       if (traceOn && trace.isTraceEnabled()) {
/*  86 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  90 */     switch (this.soapVersion) {
/*     */       case 1:
/*  92 */         return makeSOAPFault(synCtx, 1, traceOrDebugOn, traceOn);
/*     */       case 2:
/*  94 */         return makeSOAPFault(synCtx, 2, traceOrDebugOn, traceOn);
/*     */     } 
/*     */ 
/*     */     
/*  98 */     SOAPEnvelope envelop = synCtx.getEnvelope();
/*  99 */     if (envelop != null) {
/* 100 */       if (""http://www.w3.org/2003/05/soap-envelope"".equals(envelop.getNamespace().getNamespaceURI())) {
/*     */         
/* 102 */         this.soapVersion = 2;
/* 103 */         return makeSOAPFault(synCtx, 2, traceOrDebugOn, traceOn);
/*     */       } 
/* 105 */       this.soapVersion = 1;
/* 106 */       return makeSOAPFault(synCtx, 1, traceOrDebugOn, traceOn);
/*     */     } 
/*     */ 
/*     */     
/* 110 */     return makeSOAPFault(synCtx, 1, traceOrDebugOn, traceOn);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean makeSOAPFault(MessageContext synCtx, int soapVersion, boolean traceOrDebugOn, boolean traceOn) {
/* 127 */     if (traceOrDebugOn) {
/* 128 */       traceOrDebug(traceOn, ""Creating a SOAP "" + ((soapVersion == 1) ? ""1.1"" : ""1.2"") + "" fault"");
/*     */     }
/*     */ 
/*     */     
/* 132 */     SOAPFactory factory = (soapVersion == 1) ? OMAbstractFactory.getSOAP11Factory() : OMAbstractFactory.getSOAP12Factory();
/*     */ 
/*     */ 
/*     */     
/* 136 */     OMDocument soapFaultDocument = factory.createOMDocument();
/* 137 */     SOAPEnvelope faultEnvelope = factory.getDefaultFaultEnvelope();
/* 138 */     soapFaultDocument.addChild((OMNode)faultEnvelope);
/*     */ 
/*     */     
/* 141 */     SOAPFault fault = faultEnvelope.getBody().getFault();
/* 142 */     if (fault == null) {
/* 143 */       fault = factory.createSOAPFault();
/*     */     }
/*     */ 
/*     */     
/* 147 */     setFaultCode(synCtx, factory, fault);
/* 148 */     setFaultResaon(synCtx, factory, fault);
/* 149 */     setFaultNode(factory, fault);
/* 150 */     setFaultRole(factory, fault);
/* 151 */     setFaultDetail(factory, fault);
/*     */ 
/*     */     
/* 154 */     if (synCtx.getEnvelope() != null) {
/* 155 */       SOAPHeader soapHeader = synCtx.getEnvelope().getHeader();
/* 156 */       if (soapHeader != null) {
/* 157 */         for (Iterator iter = soapHeader.examineAllHeaderBlocks(); iter.hasNext(); ) {
/* 158 */           Object o = iter.next();
/* 159 */           if (o instanceof SOAPHeaderBlock) {
/* 160 */             SOAPHeaderBlock header = (SOAPHeaderBlock)o;
/* 161 */             faultEnvelope.getHeader().addChild((OMNode)header); continue;
/* 162 */           }  if (o instanceof org.apache.axiom.om.OMElement) {
/* 163 */             faultEnvelope.getHeader().addChild((OMNode)o);
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 169 */     if (traceOrDebugOn) {
/* 170 */       String msg = ""Original SOAP Message : "" + synCtx.getEnvelope().toString() + ""Fault Message created : "" + faultEnvelope.toString();
/*     */ 
/*     */       
/* 173 */       if (traceOn && trace.isTraceEnabled()) {
/* 174 */         trace.trace(msg);
/*     */       }
/* 176 */       if (this.log.isTraceEnabled()) {
/* 177 */         this.log.trace(msg);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 183 */       synCtx.setEnvelope(faultEnvelope);
/* 184 */     } catch (AxisFault af) {
/* 185 */       handleException(""Error replacing current SOAP envelope with the fault envelope"", (Exception)af, synCtx);
/*     */     } 
/*     */     
/* 188 */     if (synCtx.getFaultTo() != null) {
/* 189 */       synCtx.setTo(synCtx.getFaultTo());
/* 190 */     } else if (synCtx.getReplyTo() != null) {
/* 191 */       synCtx.setTo(synCtx.getReplyTo());
/*     */     } else {
/* 193 */       synCtx.setTo(null);
/*     */     } 
/*     */     
/* 196 */     if (traceOrDebugOn) {
/* 197 */       traceOrDebug(traceOn, ""End : Fault mediator"");
/*     */     }
/*     */     
/* 200 */     return true;
/*     */   }
/*     */   
/*     */   private void setFaultCode(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {
/*     */     SOAPFaultValue value;
/* 205 */     QName fault_code = null;
/*     */     
/* 207 */     if (this.faultCodeValue == null && this.faultCodeExpr == null) {
/* 208 */       handleException(""A valid fault code QName value or expression is required"", synCtx);
/* 209 */     } else if (this.faultCodeValue != null) {
/* 210 */       fault_code = this.faultCodeValue;
/*     */     } else {
/* 212 */       fault_code = QName.valueOf(Axis2MessageContext.getStringValue(this.faultCodeExpr, synCtx));
/*     */     } 
/*     */     
/* 215 */     SOAPFaultCode code = factory.createSOAPFaultCode();
/* 216 */     switch (this.soapVersion) {
/*     */       case 1:
/* 218 */         code.setText(fault_code);
/*     */         break;
/*     */       case 2:
/* 221 */         value = factory.createSOAPFaultValue(code);
/* 222 */         value.setText(fault_code);
/*     */         break;
/*     */     } 
/* 225 */     fault.setCode(code);
/*     */   }
/*     */   private void setFaultResaon(MessageContext synCtx, SOAPFactory factory, SOAPFault fault) {
/*     */     SOAPFaultText text;
/* 229 */     String reasonString = null;
/*     */     
/* 231 */     if (this.faultReasonValue == null && this.faultReasonExpr == null) {
/* 232 */       handleException(""A valid fault reason value or expression is required"", synCtx);
/* 233 */     } else if (this.faultReasonValue != null) {
/* 234 */       reasonString = this.faultReasonValue;
/*     */     } else {
/* 236 */       reasonString = Axis2MessageContext.getStringValue(this.faultReasonExpr, synCtx);
/*     */     } 
/*     */     
/* 239 */     SOAPFaultReason reason = factory.createSOAPFaultReason();
/* 240 */     switch (this.soapVersion) {
/*     */       case 1:
/* 242 */         reason.setText(reasonString);
/*     */         break;
/*     */       case 2:
/* 245 */         text = factory.createSOAPFaultText();
/* 246 */         text.setText(reasonString);
/* 247 */         reason.addSOAPText(text);
/*     */         break;
/*     */     } 
/* 250 */     fault.setReason(reason);
/*     */   }
/*     */   
/*     */   private void setFaultNode(SOAPFactory factory, SOAPFault fault) {
/* 254 */     if (this.faultNode != null) {
/* 255 */       SOAPFaultNode soapfaultNode = factory.createSOAPFaultNode();
/* 256 */       soapfaultNode.setNodeValue(this.faultNode.toString());
/* 257 */       fault.setNode(soapfaultNode);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setFaultRole(SOAPFactory factory, SOAPFault fault) {
/* 262 */     if (this.faultRole != null) {
/* 263 */       SOAPFaultRole soapFaultRole = factory.createSOAPFaultRole();
/* 264 */       soapFaultRole.setRoleValue(this.faultRole.toString());
/* 265 */       fault.setRole(soapFaultRole);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setFaultDetail(SOAPFactory factory, SOAPFault fault) {
/* 270 */     if (this.faultDetail != null) {
/* 271 */       SOAPFaultDetail soapFaultDetail = factory.createSOAPFaultDetail();
/* 272 */       soapFaultDetail.setText(this.faultDetail);
/* 273 */       fault.setDetail(soapFaultDetail);
/* 274 */     } else if (fault.getDetail() != null) {
/*     */ 
/*     */       
/* 277 */       fault.getDetail().detach();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 282 */   public int getSoapVersion() { return this.soapVersion; }
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setSoapVersion(int soapVersion) { this.soapVersion = soapVersion; }
/*     */ 
/*     */ 
/*     */   
/* 290 */   public QName getFaultCodeValue() { return this.faultCodeValue; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFaultCodeValue(QName faultCodeValue) {
/* 295 */     if (this.soapVersion == 1) {
/* 296 */       this.faultCodeValue = faultCodeValue;
/*     */     
/*     */     }
/* 299 */     else if (""http://www.w3.org/2003/05/soap-envelope"".equals(faultCodeValue.getNamespaceURI()) && (""DataEncodingUnknown"".equals(faultCodeValue.getLocalPart()) || ""MustUnderstand"".equals(faultCodeValue.getLocalPart()) || ""Receiver"".equals(faultCodeValue.getLocalPart()) || ""Sender"".equals(faultCodeValue.getLocalPart()) || ""VersionMismatch"".equals(faultCodeValue.getLocalPart()))) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 308 */       this.faultCodeValue = faultCodeValue;
/*     */     } else {
/*     */       
/* 311 */       String msg = ""Invalid Fault code value for a SOAP 1.2 fault : "" + faultCodeValue;
/* 312 */       this.log.error(msg);
/* 313 */       throw new SynapseException(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 319 */   public AXIOMXPath getFaultCodeExpr() { return this.faultCodeExpr; }
/*     */ 
/*     */ 
/*     */   
/* 323 */   public void setFaultCodeExpr(AXIOMXPath faultCodeExpr) { this.faultCodeExpr = faultCodeExpr; }
/*     */ 
/*     */ 
/*     */   
/* 327 */   public String getFaultReasonValue() { return this.faultReasonValue; }
/*     */ 
/*     */ 
/*     */   
/* 331 */   public void setFaultReasonValue(String faultReasonValue) { this.faultReasonValue = faultReasonValue; }
/*     */ 
/*     */ 
/*     */   
/* 335 */   public AXIOMXPath getFaultReasonExpr() { return this.faultReasonExpr; }
/*     */ 
/*     */ 
/*     */   
/* 339 */   public void setFaultReasonExpr(AXIOMXPath faultReasonExpr) { this.faultReasonExpr = faultReasonExpr; }
/*     */ 
/*     */ 
/*     */   
/* 343 */   public URI getFaultNode() { return this.faultNode; }
/*     */ 
/*     */   
/*     */   public void setFaultNode(URI faultNode) {
/* 347 */     if (this.soapVersion == 1) {
/* 348 */       String msg = ""A fault node does not apply to a SOAP 1.1 fault"";
/* 349 */       this.log.error(msg);
/* 350 */       throw new SynapseException(msg);
/*     */     } 
/* 352 */     this.faultNode = faultNode;
/*     */   }
/*     */ 
/*     */   
/* 356 */   public URI getFaultRole() { return this.faultRole; }
/*     */ 
/*     */ 
/*     */   
/* 360 */   public void setFaultRole(URI faultRole) { this.faultRole = faultRole; }
/*     */ 
/*     */ 
/*     */   
/* 364 */   public String getFaultDetail() { return this.faultDetail; }
/*     */ 
/*     */ 
/*     */   
/* 368 */   public void setFaultDetail(String faultDetail) { this.faultDetail = faultDetail; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\transform\FaultMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.HeaderMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPFactory;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HeaderMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   public static final int ACTION_SET = 0;
/*     */   public static final int ACTION_REMOVE = 1;
/*  53 */   private QName qName = null;
/*     */   
/*  55 */   private String value = null;
/*     */   
/*  57 */   private int action = 0;
/*     */   
/*  59 */   private AXIOMXPath expression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/*  69 */     boolean traceOn = isTraceOn(synCtx);
/*  70 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/*  72 */     if (traceOrDebugOn) {
/*  73 */       traceOrDebug(traceOn, ""Start : Header mediator"");
/*     */       
/*  75 */       if (traceOn && trace.isTraceEnabled()) {
/*  76 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*  80 */     if (this.action == 0) {
/*     */       
/*  82 */       String value = (getValue() != null) ? getValue() : Axis2MessageContext.getStringValue(this.expression, synCtx);
/*     */ 
/*     */       
/*  85 */       if (traceOrDebugOn) {
/*  86 */         traceOrDebug(traceOn, ""Set SOAP header : "" + this.qName + "" to : "" + value);
/*     */       }
/*     */       
/*  89 */       if (this.qName.getNamespaceURI() == null || """".equals(this.qName.getNamespaceURI())) {
/*     */ 
/*     */         
/*  92 */         if (""To"".equals(this.qName.getLocalPart())) {
/*  93 */           synCtx.setTo(new EndpointReference(value));
/*  94 */         } else if (""From"".equals(this.qName.getLocalPart())) {
/*  95 */           synCtx.setFrom(new EndpointReference(value));
/*  96 */         } else if (""Action"".equals(this.qName.getLocalPart())) {
/*  97 */           synCtx.setWSAAction(value);
/*  98 */         } else if (""FaultTo"".equals(this.qName.getLocalPart())) {
/*  99 */           synCtx.setFaultTo(new EndpointReference(value));
/* 100 */         } else if (""ReplyTo"".equals(this.qName.getLocalPart())) {
/* 101 */           synCtx.setReplyTo(new EndpointReference(value));
/*     */         } else {
/* 103 */           addCustomHeader(synCtx);
/*     */         } 
/*     */       } else {
/* 106 */         addCustomHeader(synCtx);
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 111 */       if (traceOrDebugOn) {
/* 112 */         traceOrDebug(traceOn, ""Removing SOAP Header : "" + this.qName);
/*     */       }
/*     */       
/* 115 */       if (this.qName.getNamespaceURI() == null || """".equals(this.qName.getNamespaceURI())) {
/*     */ 
/*     */         
/* 118 */         if (""To"".equals(this.qName.getLocalPart())) {
/* 119 */           synCtx.setTo(null);
/* 120 */         } else if (""From"".equals(this.qName.getLocalPart())) {
/* 121 */           synCtx.setFrom(null);
/* 122 */         } else if (""Action"".equals(this.qName.getLocalPart())) {
/* 123 */           synCtx.setWSAAction(null);
/* 124 */         } else if (""FaultTo"".equals(this.qName.getLocalPart())) {
/* 125 */           synCtx.setFaultTo(null);
/* 126 */         } else if (""ReplyTo"".equals(this.qName.getLocalPart())) {
/* 127 */           synCtx.setReplyTo(null);
/*     */         } else {
/* 129 */           SOAPEnvelope envelope = synCtx.getEnvelope();
/* 130 */           if (envelope != null) {
/* 131 */             SOAPHeader header = envelope.getHeader();
/* 132 */             if (header != null) {
/* 133 */               removeFromHeaderList(header.getHeaderBlocksWithNSURI(""""));
/*     */             }
/*     */           }
/*     */         
/*     */         } 
/*     */       } else {
/*     */         
/* 140 */         SOAPEnvelope envelope = synCtx.getEnvelope();
/* 141 */         if (envelope != null) {
/* 142 */           SOAPHeader header = envelope.getHeader();
/* 143 */           if (header != null) {
/* 144 */             removeFromHeaderList(header.getHeaderBlocksWithNSURI(this.qName.getNamespaceURI()));
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 151 */     if (traceOrDebugOn) {
/* 152 */       traceOrDebug(traceOn, ""End : Header mediator"");
/*     */     }
/* 154 */     return true;
/*     */   }
/*     */   
/*     */   private void addCustomHeader(MessageContext synCtx) {
/* 158 */     SOAPEnvelope env = synCtx.getEnvelope();
/* 159 */     if (env == null) {
/*     */       return;
/*     */     }
/* 162 */     SOAPFactory fac = (SOAPFactory)env.getOMFactory();
/* 163 */     SOAPHeader header = env.getHeader();
/* 164 */     if (header == null) {
/* 165 */       header = fac.createSOAPHeader(env);
/*     */     }
/* 167 */     SOAPHeaderBlock hb = header.addHeaderBlock(this.qName.getLocalPart(), fac.createOMNamespace(this.qName.getNamespaceURI(), this.qName.getPrefix()));
/*     */     
/* 169 */     hb.setText(this.value);
/*     */   }
/*     */   
/*     */   private void removeFromHeaderList(List headersList) {
/* 173 */     if (headersList == null || headersList.isEmpty()) {
/*     */       return;
/*     */     }
/* 176 */     for (Iterator iter = headersList.iterator(); iter.hasNext(); ) {
/* 177 */       Object o = iter.next();
/* 178 */       if (o instanceof SOAPHeaderBlock) {
/* 179 */         SOAPHeaderBlock header = (SOAPHeaderBlock)o;
/* 180 */         if (header.getLocalName().equals(this.qName.getLocalPart()))
/* 181 */           header.detach();  continue;
/*     */       } 
/* 183 */       if (o instanceof OMElement) {
/* 184 */         OMElement omElem = (OMElement)o;
/* 185 */         if (omElem.getLocalName().equals(this.qName.getLocalPart())) {
/* 186 */           omElem.detach();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 193 */   public int getAction() { return this.action; }
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void setAction(int action) { this.action = action; }
/*     */ 
/*     */ 
/*     */   
/* 201 */   public QName getQName() { return this.qName; }
/*     */ 
/*     */ 
/*     */   
/* 205 */   public void setQName(QName qName) { this.qName = qName; }
/*     */ 
/*     */ 
/*     */   
/* 209 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/* 217 */   public AXIOMXPath getExpression() { return this.expression; }
/*     */ 
/*     */ 
/*     */   
/* 221 */   public void setExpression(AXIOMXPath expression) { this.expression = expression; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\transform\HeaderMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.mediators.transform.XSLTMediator,"/*     */ package org.apache.synapse.mediators.transform;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.List;
/*     */ import javax.activation.FileDataSource;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.stream.XMLOutputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamWriter;
/*     */ import javax.xml.transform.Result;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.Templates;
/*     */ import javax.xml.transform.Transformer;
/*     */ import javax.xml.transform.TransformerConfigurationException;
/*     */ import javax.xml.transform.TransformerException;
/*     */ import javax.xml.transform.TransformerFactory;
/*     */ import javax.xml.transform.dom.DOMResult;
/*     */ import javax.xml.transform.dom.DOMSource;
/*     */ import javax.xml.transform.stream.StreamResult;
/*     */ import javax.xml.transform.stream.StreamSource;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMDataSource;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.axiom.om.impl.dom.DOOMAbstractFactory;
/*     */ import org.apache.axiom.om.impl.dom.jaxp.DocumentBuilderFactoryImpl;
/*     */ import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
/*     */ import org.apache.axiom.om.impl.llom.OMTextImpl;
/*     */ import org.apache.axiom.om.util.ElementHelper;
/*     */ import org.apache.axiom.om.xpath.AXIOMXPath;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ import org.apache.synapse.mediators.AbstractMediator;
/*     */ import org.apache.synapse.mediators.MediatorProperty;
/*     */ import org.apache.synapse.transport.base.BaseConstants;
/*     */ import org.apache.synapse.util.FixedByteArrayOutputStream;
/*     */ import org.apache.synapse.util.TextFileDataSource;
/*     */ import org.jaxen.JaxenException;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.Node;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTMediator
/*     */   extends AbstractMediator
/*     */ {
/*     */   private static final int BYTE_ARRAY_SIZE = 8192;
/*     */   public static final String USE_DOM_SOURCE_AND_RESULTS = ""http://ws.apache.org/ns/synapse/transform/feature/dom"";
/*  95 */   private String xsltKey = null;
/*     */ 
/*     */   
/*  98 */   private String sourceXPathString = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   private AXIOMXPath source = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private List properties = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   private List explicitFeatures = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   private Templates cachedTemplates = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   private final TransformerFactory transFact = TransformerFactory.newInstance();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private final Object transformerLock = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean useDOMSourceAndResults = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String DEFAULT_XPATH = ""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public XSLTMediator() {
/*     */     try {
/* 147 */       this.source = new AXIOMXPath(""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"");
/* 148 */       this.source.addNamespace(""s11"", ""http://schemas.xmlsoap.org/soap/envelope/"");
/* 149 */       this.source.addNamespace(""s12"", ""http://www.w3.org/2003/05/soap-envelope"");
/* 150 */     } catch (JaxenException e) {
/* 151 */       String msg = ""Error creating default source XPath expression : s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"";
/* 152 */       this.log.error(msg, (Throwable)e);
/* 153 */       throw new SynapseException(msg, (Throwable)e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean mediate(MessageContext synCtx) {
/* 166 */     boolean traceOn = isTraceOn(synCtx);
/* 167 */     boolean traceOrDebugOn = isTraceOrDebugOn(traceOn);
/*     */     
/* 169 */     if (traceOrDebugOn) {
/* 170 */       traceOrDebug(traceOn, ""Start : XSLT mediator"");
/*     */       
/* 172 */       if (traceOn && trace.isTraceEnabled()) {
/* 173 */         trace.trace(""Message : "" + synCtx.getEnvelope());
/*     */       }
/*     */     } 
/*     */     
/*     */     try {
/* 178 */       performXLST(synCtx, traceOrDebugOn, traceOn);
/*     */     }
/* 180 */     catch (Exception e) {
/* 181 */       handleException(""Unable to perform XSLT transformation using : "" + this.xsltKey + "" against source XPath : "" + ((this.sourceXPathString == null) ? ""s11:Body/child::*[position()=1] | s12:Body/child::*[position()=1]"" : ("" source XPath : "" + this.sourceXPathString)), e, synCtx);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 188 */     if (traceOrDebugOn) {
/* 189 */       traceOrDebug(traceOn, ""End : XSLT mediator"");
/*     */     }
/*     */     
/* 192 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void performXLST(MessageContext synCtx, boolean traceOrDebugOn, boolean traceOn) {
/* 203 */     boolean reCreate = false;
/* 204 */     OMNode sourceNode = getTransformSource(synCtx);
/* 205 */     OutputStream osForTarget = null;
/* 206 */     InputStream isForSource = null;
/* 207 */     FixedByteArrayOutputStream fixedByteArrayOutputStream = new FixedByteArrayOutputStream(8192);
/* 208 */     File tempTargetFile = null;
/* 209 */     File tempSourceFile = null;
/*     */     
/* 211 */     if (traceOrDebugOn) {
/* 212 */       trace.trace(""Transformation source : "" + sourceNode.toString());
/*     */     }
/*     */     
/* 215 */     Source transformSrc = null;
/* 216 */     Result transformTgt = null;
/*     */     
/* 218 */     if (this.useDOMSourceAndResults) {
/* 219 */       if (traceOrDebugOn) {
/* 220 */         traceOrDebug(traceOn, ""Using a DOMSource for transformation"");
/*     */       }
/*     */ 
/*     */       
/* 224 */       transformSrc = new DOMSource(((Element)ElementHelper.importOMElement((OMElement)sourceNode, DOOMAbstractFactory.getOMFactory())).getOwnerDocument());
/*     */ 
/*     */       
/* 227 */       DocumentBuilderFactoryImpl.setDOOMRequired(true);
/*     */       
/*     */       try {
/* 230 */         transformTgt = new DOMResult(DocumentBuilderFactoryImpl.newInstance().newDocumentBuilder().newDocument());
/*     */       }
/* 232 */       catch (ParserConfigurationException e) {
/* 233 */         handleException(""Error creating a DOMResult for the transformation, Consider setting optimization feature : http://ws.apache.org/ns/synapse/transform/feature/dom off"", e, synCtx);
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 239 */       if (traceOrDebugOn) {
/* 240 */         traceOrDebug(traceOn, ""Using byte array serialization for transformation"");
/*     */       }
/*     */ 
/*     */       
/*     */       try {
/* 245 */         FixedByteArrayOutputStream fixedByteArrayOutputStream1 = new FixedByteArrayOutputStream(8192);
/* 246 */         XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().createXMLStreamWriter((OutputStream)fixedByteArrayOutputStream1);
/*     */ 
/*     */         
/* 249 */         sourceNode.serialize(xsWriterForSource);
/* 250 */         isForSource = new ByteArrayInputStream(fixedByteArrayOutputStream1.toByteArray());
/* 251 */         transformSrc = new StreamSource(isForSource);
/* 252 */         transformTgt = new StreamResult((OutputStream)fixedByteArrayOutputStream);
/*     */       }
/* 254 */       catch (XMLStreamException e) {
/* 255 */         handleException(""Error creating a StreamResult for the transformation"", e, synCtx);
/*     */       }
/* 257 */       catch (SynapseException x) {
/*     */         
/* 259 */         if (traceOrDebugOn) {
/* 260 */           traceOrDebug(traceOn, ""Error creating a StreamResult using a byte array - attempting using temporary files for serialization"");
/*     */         }
/*     */ 
/*     */         
/* 264 */         OutputStream osForSource = null;
/*     */ 
/*     */         
/*     */         try {
/* 268 */           tempSourceFile = File.createTempFile(""xs_"", "".xml"");
/* 269 */           tempTargetFile = File.createTempFile(""xt_"", "".xml"");
/*     */           
/* 271 */           osForSource = new FileOutputStream(tempSourceFile);
/* 272 */           osForTarget = new FileOutputStream(tempTargetFile);
/*     */           
/* 274 */           XMLStreamWriter xsWriterForSource = XMLOutputFactory.newInstance().createXMLStreamWriter(osForSource);
/*     */ 
/*     */           
/* 277 */           sourceNode.serialize(xsWriterForSource);
/* 278 */           transformSrc = new StreamSource(tempSourceFile);
/* 279 */           transformTgt = new StreamResult(osForTarget);
/*     */         }
/* 281 */         catch (XMLStreamException e) {
/* 282 */           handleException(""Error creating a StreamResult for the transformation"", e, synCtx);
/* 283 */         } catch (IOException e) {
/* 284 */           handleException(""Error using a temporary file/s for the transformation"", e, synCtx);
/*     */         } finally {
/*     */           try {
/* 287 */             osForSource.close();
/* 288 */           } catch (IOException ignore) {}
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 293 */     if (transformTgt == null) {
/* 294 */       if (traceOrDebugOn) {
/* 295 */         traceOrDebug(traceOn, ""Was unable to get a javax.xml.transform.Result created"");
/*     */       }
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 301 */     Entry dp = synCtx.getConfiguration().getEntryDefinition(this.xsltKey);
/*     */ 
/*     */     
/* 304 */     if (dp != null && dp.isDynamic() && (
/* 305 */       !dp.isCached() || dp.isExpired())) {
/* 306 */       reCreate = true;
/*     */     }
/*     */ 
/*     */     
/* 310 */     synchronized (this.transformerLock) {
/* 311 */       if (reCreate || this.cachedTemplates == null) {
/*     */         try {
/* 313 */           this.cachedTemplates = this.transFact.newTemplates(SynapseConfigUtils.getStreamSource(synCtx.getEntry(this.xsltKey)));
/*     */         
/*     */         }
/* 316 */         catch (TransformerConfigurationException e) {
/* 317 */           handleException(""Error creating XSLT transformer using : "" + this.xsltKey, e, synCtx);
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 324 */       Transformer transformer = this.cachedTemplates.newTransformer();
/* 325 */       if (!this.properties.isEmpty())
/*     */       {
/* 327 */         for (int i = 0; i < this.properties.size(); i++) {
/* 328 */           MediatorProperty prop = this.properties.get(i);
/* 329 */           if (prop != null) {
/* 330 */             if (prop.getValue() != null) {
/* 331 */               transformer.setParameter(prop.getName(), prop.getValue());
/*     */             } else {
/* 333 */               transformer.setParameter(prop.getName(), Axis2MessageContext.getStringValue(prop.getExpression(), synCtx));
/*     */             } 
/*     */           }
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/*     */       try {
/* 341 */         transformer.transform(transformSrc, transformTgt);
/*     */       }
/* 343 */       catch (TransformerException x) {
/*     */         
/*     */         try {
/* 346 */           tempTargetFile = File.createTempFile(""xt_"", "".xml"");
/* 347 */           osForTarget = new FileOutputStream(tempTargetFile);
/* 348 */           transformTgt = new StreamResult(osForTarget);
/*     */ 
/*     */           
/* 351 */           isForSource.reset();
/* 352 */           transformer.reset();
/* 353 */           transformer.transform(transformSrc, transformTgt);
/*     */         }
/* 355 */         catch (IOException e) {
/* 356 */           handleException(""Error using a temporary file/s for the transformation"", e, synCtx);
/*     */         } 
/*     */       } 
/*     */       
/* 360 */       if (traceOrDebugOn) {
/* 361 */         traceOrDebug(traceOn, ""Transformation completed - processing result"");
/*     */       }
/*     */       
/* 364 */       if (tempSourceFile != null) {
/* 365 */         boolean deleted = tempSourceFile.delete();
/* 366 */         if (!deleted) {
/* 367 */           tempSourceFile.deleteOnExit();
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 372 */       OMElement result = null;
/* 373 */       if (transformTgt instanceof DOMResult) {
/* 374 */         Node node = ((DOMResult)transformTgt).getNode();
/* 375 */         if (node == null) {
/* 376 */           if (traceOrDebugOn) {
/* 377 */             traceOrDebug(traceOn, ""Transformation result (DOMResult) was null"");
/*     */           }
/*     */           return;
/*     */         } 
/* 381 */         Node resultNode = node.getFirstChild();
/* 382 */         if (resultNode == null) {
/* 383 */           if (traceOrDebugOn) {
/* 384 */             traceOrDebug(traceOn, ""Transformation result (DOMResult) was empty"");
/*     */           }
/*     */           
/*     */           return;
/*     */         } 
/* 389 */         result = ElementHelper.importOMElement((OMElement)resultNode, OMAbstractFactory.getOMFactory());
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/* 395 */       else if (tempTargetFile != null) {
/*     */         try {
/* 397 */           StAXOMBuilder builder = new StAXOMBuilder(new FileInputStream(tempTargetFile));
/* 398 */           result = builder.getDocumentElement();
/*     */         }
/* 400 */         catch (XMLStreamException e) {
/* 401 */           handleException(""Error building result element from XSLT transformation"", e, synCtx);
/*     */         
/*     */         }
/* 404 */         catch (Exception e) {
/* 405 */           result = handleNonXMLResult(tempTargetFile, traceOrDebugOn, traceOn);
/*     */         } finally {
/*     */           
/* 408 */           boolean deleted = tempTargetFile.delete();
/* 409 */           if (!deleted) {
/* 410 */             tempTargetFile.deleteOnExit();
/*     */           }
/*     */         } 
/*     */       } else {
/*     */ 
/*     */         
/*     */         try {
/* 417 */           StAXOMBuilder builder = new StAXOMBuilder(new ByteArrayInputStream(fixedByteArrayOutputStream.toByteArray()));
/*     */           
/* 419 */           result = builder.getDocumentElement();
/*     */         }
/* 421 */         catch (XMLStreamException e) {
/* 422 */           handleException(""Error building result element from XSLT transformation"", e, synCtx);
/*     */         
/*     */         }
/* 425 */         catch (Exception e) {
/* 426 */           result = handleNonXMLResult(fixedByteArrayOutputStream.toString(), traceOrDebugOn, traceOn);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 431 */       if (result == null) {
/* 432 */         if (traceOrDebugOn) {
/* 433 */           traceOrDebug(traceOn, ""Transformation result was null"");
/*     */         }
/*     */         return;
/*     */       } 
/* 437 */       if (traceOn && trace.isTraceEnabled()) {
/* 438 */         trace.trace(""Transformation result : "" + result.toString());
/*     */       }
/*     */ 
/*     */       
/* 442 */       if (traceOrDebugOn) {
/* 443 */         traceOrDebug(traceOn, ""Replace source node with result"");
/*     */       }
/*     */ 
/*     */       
/* 447 */       sourceNode.insertSiblingAfter((OMNode)result);
/* 448 */       sourceNode.detach();
/*     */     }
/* 450 */     catch (TransformerException e) {
/* 451 */       handleException(""Error performing XSLT transformation using : "" + this.xsltKey, e, synCtx);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMNode getTransformSource(MessageContext synCtx) {
/*     */     try {
/* 465 */       Object o = this.source.evaluate(synCtx.getEnvelope());
/* 466 */       if (o instanceof OMNode)
/* 467 */         return (OMNode)o; 
/* 468 */       if (o instanceof List && !((List)o).isEmpty()) {
/* 469 */         return ((List<OMNode>)o).get(0);
/*     */       }
/* 471 */       handleException(""The evaluation of the XPath expression "" + this.source + "" did not result in an OMNode"", synCtx);
/*     */     
/*     */     }
/* 474 */     catch (JaxenException e) {
/* 475 */       handleException(""Error evaluating XPath expression : "" + this.source, (Exception)e, synCtx);
/*     */     } 
/* 477 */     return null;
/*     */   }
/*     */ 
/*     */   
/* 481 */   public AXIOMXPath getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */   
/* 485 */   public void setSource(AXIOMXPath source) { this.source = source; }
/*     */ 
/*     */ 
/*     */   
/* 489 */   public String getXsltKey() { return this.xsltKey; }
/*     */ 
/*     */ 
/*     */   
/* 493 */   public void setXsltKey(String xsltKey) { this.xsltKey = xsltKey; }
/*     */ 
/*     */ 
/*     */   
/* 497 */   public void addProperty(MediatorProperty p) { this.properties.add(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFeature(String featureName, boolean isFeatureEnable) {
/*     */     try {
/* 508 */       MediatorProperty mp = new MediatorProperty();
/* 509 */       mp.setName(featureName);
/* 510 */       if (isFeatureEnable) {
/* 511 */         mp.setValue(""true"");
/*     */       } else {
/* 513 */         mp.setValue(""false"");
/*     */       } 
/* 515 */       this.explicitFeatures.add(mp);
/* 516 */       if (""http://ws.apache.org/ns/synapse/transform/feature/dom"".equals(featureName)) {
/* 517 */         this.useDOMSourceAndResults = isFeatureEnable;
/*     */       } else {
/* 519 */         this.transFact.setFeature(featureName, isFeatureEnable);
/*     */       } 
/* 521 */     } catch (TransformerConfigurationException e) {
/* 522 */       String msg = ""Error occured when setting features to the TransformerFactory"";
/* 523 */       this.log.error(msg, e);
/* 524 */       throw new SynapseException(msg, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMElement handleNonXMLResult(File file, boolean traceOrDebugOn, boolean traceOn) {
/* 538 */     OMFactory fac = OMAbstractFactory.getOMFactory();
/* 539 */     Object object = null;
/*     */     
/* 541 */     if (traceOrDebugOn) {
/* 542 */       traceOrDebug(traceOn, ""Processing non SOAP/XML (text) transformation result"");
/*     */     }
/* 544 */     if (traceOn && trace.isTraceEnabled()) {
/* 545 */       trace.trace(""Wrapping text transformation result from : "" + file);
/*     */     }
/*     */     
/* 548 */     if (file != null) {
/* 549 */       TextFileDataSource txtFileDS = new TextFileDataSource(new FileDataSource(file));
/* 550 */       object = new OMSourcedElementImpl(BaseConstants.DEFAULT_TEXT_WRAPPER, fac, (OMDataSource)txtFileDS);
/*     */     } 
/*     */     
/* 553 */     return (OMElement)object;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OMElement handleNonXMLResult(String textPayload, boolean traceOrDebugOn, boolean traceOn) {
/* 566 */     OMFactory fac = OMAbstractFactory.getOMFactory();
/* 567 */     OMElement wrapper = null;
/*     */     
/* 569 */     if (traceOrDebugOn) {
/* 570 */       traceOrDebug(traceOn, ""Processing non SOAP/XML (text) transformation result"");
/*     */     }
/* 572 */     if (traceOn && trace.isTraceEnabled()) {
/* 573 */       trace.trace(""Wrapping text transformation result : "" + textPayload);
/*     */     }
/*     */     
/* 576 */     if (textPayload != null) {
/* 577 */       OMTextImpl textData = (OMTextImpl)fac.createOMText(textPayload);
/* 578 */       wrapper = fac.createOMElement(BaseConstants.DEFAULT_TEXT_WRAPPER, null);
/* 579 */       wrapper.addChild((OMNode)textData);
/*     */     } 
/*     */     
/* 582 */     return wrapper;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 590 */   public List getFeatures() { return this.explicitFeatures; }
/*     */ 
/*     */ 
/*     */   
/* 594 */   public void addAllProperties(List list) { this.properties.addAll(list); }
/*     */ 
/*     */ 
/*     */   
/* 598 */   public List getProperties() { return this.properties; }
/*     */ 
/*     */ 
/*     */   
/* 602 */   public void setSourceXPathString(String sourceXPathString) { this.sourceXPathString = sourceXPathString; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\mediators\transform\XSLTMediator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.Counter,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Counter
/*    */ {
/* 28 */   private long count = 0L;
/*    */ 
/*    */   
/* 31 */   public synchronized void increment() { this.count++; }
/*    */ 
/*    */ 
/*    */   
/* 35 */   public long getCount() { return this.count; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\metrics\Counter.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.GlobalRequestCountHandler,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.MessageContext;
/*    */ import org.apache.axis2.engine.Handler;
/*    */ import org.apache.axis2.handlers.AbstractHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class GlobalRequestCountHandler
/*    */   extends AbstractHandler
/*    */ {
/*    */   public Handler.InvocationResponse invoke(MessageContext msgContext) throws AxisFault {
/* 34 */     msgContext.setProperty(MetricsConstants.REQUEST_RECEIVED_TIME, new Long(System.currentTimeMillis()));
/*    */ 
/*    */     
/* 37 */     ((Counter)msgContext.getParameter(MetricsConstants.GLOBAL_REQUEST_COUNTER).getValue()).increment();
/*    */     
/* 39 */     return Handler.InvocationResponse.CONTINUE;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\metrics\GlobalRequestCountHandler.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.MetricsAggregatorModule,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ import org.apache.axis2.AxisFault;
/*    */ import org.apache.axis2.context.ConfigurationContext;
/*    */ import org.apache.axis2.description.AxisDescription;
/*    */ import org.apache.axis2.description.AxisModule;
/*    */ import org.apache.axis2.description.Parameter;
/*    */ import org.apache.axis2.engine.AxisConfiguration;
/*    */ import org.apache.axis2.modules.Module;
/*    */ import org.apache.neethi.Assertion;
/*    */ import org.apache.neethi.Policy;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MetricsAggregatorModule
/*    */   implements Module
/*    */ {
/*    */   public void init(ConfigurationContext configContext, AxisModule module) throws AxisFault {
/* 38 */     AxisConfiguration axiConfiguration = configContext.getAxisConfiguration();
/*    */     
/* 40 */     Counter globalRequestCounter = new Counter();
/* 41 */     Parameter globalRequestCounterParameter = new Parameter();
/* 42 */     globalRequestCounterParameter.setName(MetricsConstants.GLOBAL_REQUEST_COUNTER);
/* 43 */     globalRequestCounterParameter.setValue(globalRequestCounter);
/* 44 */     axiConfiguration.addParameter(globalRequestCounterParameter);
/*    */   }
/*    */ 
/*    */   
/*    */   public void engageNotify(AxisDescription axisDescription) throws AxisFault {}
/*    */ 
/*    */   
/* 51 */   public boolean canSupportAssertion(Assertion assertion) { return false; }
/*    */   
/*    */   public void applyPolicy(Policy policy, AxisDescription axisDescription) throws AxisFault {}
/*    */   
/*    */   public void shutdown(ConfigurationContext configurationContext) throws AxisFault {}
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\metrics\MetricsAggregatorModule.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.metrics.MetricsConstants,"/*    */ package org.apache.synapse.metrics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class MetricsConstants
/*    */ {
/* 26 */   public static String GLOBAL_REQUEST_COUNTER = ""__GLOBAL_REQUEST_COUNTER__"";
/* 27 */   public static String REQUEST_RECEIVED_TIME = ""__REQUEST_RECEIVED_TIME__"";
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\metrics\MetricsConstants.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.AbstractRegistry,"/*     */ package org.apache.synapse.registry;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.config.Entry;
/*     */ import org.apache.synapse.config.XMLToObjectMapper;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.mediators.base.SequenceMediator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractRegistry
/*     */   implements Registry
/*     */ {
/*  39 */   private static final Log log = LogFactory.getLog(AbstractRegistry.class);
/*     */ 
/*     */   
/*  42 */   protected Map properties = new HashMap<Object, Object>();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getResource(Entry entry) {
/*  51 */     OMNode omNode = null;
/*  52 */     RegistryEntry re = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  58 */     if (entry.isCached() && !entry.isExpired()) {
/*  59 */       return entry.getValue();
/*     */     }
/*     */     
/*  62 */     if (!entry.isCached()) {
/*  63 */       omNode = lookup(entry.getKey());
/*  64 */       if (omNode == null) {
/*  65 */         return null;
/*     */       }
/*  67 */       re = getRegistryEntry(entry.getKey());
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*  72 */     else if (entry.isExpired()) {
/*  73 */       if (log.isDebugEnabled()) {
/*  74 */         log.debug(""Cached object has expired for key : "" + entry.getKey());
/*     */       }
/*  76 */       re = getRegistryEntry(entry.getKey());
/*     */       
/*  78 */       if (re.getVersion() != Long.MIN_VALUE && re.getVersion() == entry.getVersion()) {
/*     */         
/*  80 */         if (log.isDebugEnabled()) {
/*  81 */           log.debug(""Expired version number is same as current version in registry"");
/*     */         }
/*     */ 
/*     */ 
/*     */         
/*  86 */         if (re.getCachableDuration() > 0L) {
/*  87 */           entry.setExpiryTime(System.currentTimeMillis() + re.getCachableDuration());
/*     */         } else {
/*     */           
/*  90 */           entry.setExpiryTime(-1L);
/*     */         } 
/*  92 */         if (log.isDebugEnabled()) {
/*  93 */           log.debug(""Renew cache lease for another "" + (re.getCachableDuration() / 1000L) + ""s"");
/*     */         }
/*     */ 
/*     */         
/*  97 */         return entry.getValue();
/*     */       } 
/*     */       
/* 100 */       omNode = lookup(entry.getKey());
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 109 */     if (entry.getMapper() != null) {
/* 110 */       entry.setValue(entry.getMapper().getObjectFromOMNode(omNode));
/*     */       
/* 112 */       if (entry.getValue() instanceof SequenceMediator) {
/* 113 */         SequenceMediator seq = (SequenceMediator)entry.getValue();
/* 114 */         seq.setDynamic(true);
/* 115 */         seq.setRegistryKey(entry.getKey());
/* 116 */       } else if (entry.getValue() instanceof Endpoint) {
/* 117 */         Endpoint ep = (Endpoint)entry.getValue();
/*     */ 
/*     */       
/*     */       }
/*     */ 
/*     */     
/*     */     }
/* 124 */     else if (re != null && re.getType() != null) {
/*     */       
/* 126 */       XMLToObjectMapper mapper = getMapper(re.getType());
/* 127 */       if (mapper != null) {
/* 128 */         entry.setMapper(mapper);
/* 129 */         entry.setValue(mapper.getObjectFromOMNode(omNode));
/*     */       } else {
/*     */         
/* 132 */         entry.setValue(omNode);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 138 */     if (re != null) {
/* 139 */       if (re.getCachableDuration() > 0L) {
/* 140 */         entry.setExpiryTime(System.currentTimeMillis() + re.getCachableDuration());
/*     */       } else {
/* 142 */         entry.setExpiryTime(-1L);
/*     */       } 
/* 144 */       entry.setVersion(re.getVersion());
/*     */     } 
/*     */     
/* 147 */     return entry.getValue();
/*     */   }
/*     */ 
/*     */   
/* 151 */   private XMLToObjectMapper getMapper(URI type) { return null; }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public String getProviderClass() { return getClass().getName(); }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public Map getConfigProperties() { return this.properties; }
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void addConfigProperty(String name, String value) { this.properties.put(name, value); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\registry\AbstractRegistry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.Registry,"package org.apache.synapse.registry;
import java.util.Map;
import org.apache.axiom.om.OMNode;
import org.apache.synapse.config.Entry;
public interface Registry {
  OMNode lookup(String paramString);
  Object getResource(Entry paramEntry);
  RegistryEntry getRegistryEntry(String paramString);
  void addConfigProperty(String paramString1, String paramString2);
  RegistryEntry[] getChildren(RegistryEntry paramRegistryEntry);
  RegistryEntry[] getDescendants(RegistryEntry paramRegistryEntry);
  String getProviderClass();
  Map getConfigProperties();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\registry\Registry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.RegistryEntry,"package org.apache.synapse.registry;
import java.net.URI;
public interface RegistryEntry {
  String getKey();
  String getName();
  long getVersion();
  URI getType();
  String getDescription();
  long getCreated();
  long getLastModified();
  long getCachableDuration();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\registry\RegistryEntry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.url.SimpleURLRegistry,"/*     */ package org.apache.synapse.registry.url;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URI;
/*     */ import java.net.URISyntaxException;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.util.ArrayList;
/*     */ import javax.xml.stream.XMLInputFactory;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.SynapseConfigUtils;
/*     */ import org.apache.synapse.registry.AbstractRegistry;
/*     */ import org.apache.synapse.registry.Registry;
/*     */ import org.apache.synapse.registry.RegistryEntry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SimpleURLRegistry
/*     */   extends AbstractRegistry
/*     */   implements Registry
/*     */ {
/*  47 */   private static final Log log = LogFactory.getLog(SimpleURLRegistry.class);
/*     */   
/*     */   private static final int MAX_KEYS = 200;
/*     */ 
/*     */   
/*     */   public OMNode lookup(String key) {
/*  53 */     log.info(""==> Repository fetch of resource with key : "" + key);
/*  54 */     URLConnection urlc = null;
/*     */     try {
/*  56 */       URL url = SynapseConfigUtils.getURLFromPath(getRoot() + key);
/*  57 */       if (url == null) {
/*  58 */         return null;
/*     */       }
/*  60 */       urlc = url.openConnection();
/*  61 */       urlc.connect();
/*  62 */     } catch (IOException e) {
/*  63 */       return null;
/*     */     } 
/*     */     
/*     */     try {
/*  67 */       XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(urlc.getInputStream());
/*     */       
/*  69 */       StAXOMBuilder builder = new StAXOMBuilder(parser);
/*  70 */       return (OMNode)builder.getDocumentElement();
/*     */     }
/*  72 */     catch (MalformedURLException e) {
/*  73 */       handleException(""Invalid URL reference "" + getRoot() + key, e);
/*  74 */     } catch (FileNotFoundException fnf) {
/*  75 */       return null;
/*  76 */     } catch (IOException e) {
/*  77 */       handleException(""IO Error reading from URL "" + getRoot() + key, e);
/*  78 */     } catch (XMLStreamException e) {
/*  79 */       handleException(""XML Error reading from URL "" + getRoot() + key, e);
/*     */     } 
/*  81 */     return null;
/*     */   }
/*     */   
/*     */   public RegistryEntry getRegistryEntry(String key) {
/*  85 */     if (log.isDebugEnabled()) {
/*  86 */       log.debug(""Perform RegistryEntry lookup for key : "" + key);
/*     */     }
/*     */     try {
/*  89 */       URL url = SynapseConfigUtils.getURLFromPath(getRoot() + key);
/*  90 */       if (url == null) {
/*  91 */         return null;
/*     */       }
/*  93 */       URLConnection urlc = url.openConnection();
/*  94 */       urlc.setReadTimeout(30000);
/*  95 */       urlc.setRequestProperty(""Connection"", ""Close"");
/*     */       
/*  97 */       URLRegistryEntry wre = new URLRegistryEntry();
/*  98 */       wre.setKey(key);
/*  99 */       wre.setName(url.getFile());
/* 100 */       wre.setType(new URI(urlc.getContentType()));
/* 101 */       wre.setDescription(""Resource at : "" + url.toString());
/* 102 */       wre.setLastModified(urlc.getLastModified());
/* 103 */       wre.setVersion(urlc.getLastModified());
/* 104 */       if (urlc.getExpiration() > 0L) {
/* 105 */         wre.setCachableDuration(urlc.getExpiration() - System.currentTimeMillis());
/*     */       } else {
/*     */         
/* 108 */         wre.setCachableDuration(getCachableDuration());
/*     */       } 
/* 110 */       return wre;
/*     */     }
/* 112 */     catch (MalformedURLException e) {
/* 113 */       handleException(""Invalid URL reference "" + getRoot() + key, e);
/* 114 */     } catch (IOException e) {
/* 115 */       handleException(""IO Error reading from URL "" + getRoot() + key, e);
/* 116 */     } catch (URISyntaxException e) {
/* 117 */       handleException(""URI Syntax error reading from URL "" + getRoot() + key, e);
/*     */     } 
/* 119 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public void addConfigProperty(String name, String value) {
/* 124 */     if (name.equals(""root"")) {
/*     */       
/*     */       try {
/*     */ 
/*     */         
/* 129 */         URL url = new URL(value);
/* 130 */         if (url.getProtocol().equals(""file"") && 
/* 131 */           !value.endsWith(""/"")) {
/* 132 */           value = value + ""/"";
/*     */         }
/*     */       }
/* 135 */       catch (MalformedURLException e) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 140 */     super.addConfigProperty(name, value);
/*     */   }
/*     */   
/*     */   public String getRoot() {
/* 144 */     String root = (String)this.properties.get(""root"");
/* 145 */     if (root == null) {
/* 146 */       return """";
/*     */     }
/* 148 */     return root;
/*     */   }
/*     */ 
/*     */   
/*     */   public long getCachableDuration() {
/* 153 */     String cachableDuration = (String)this.properties.get(""cachableDuration"");
/* 154 */     return (cachableDuration == null) ? 1500L : Long.parseLong(cachableDuration);
/*     */   }
/*     */ 
/*     */   
/*     */   public RegistryEntry[] getChildren(RegistryEntry entry) {
/* 159 */     if (entry == null) {
/* 160 */       URLRegistryEntry urlEntry = new URLRegistryEntry();
/* 161 */       urlEntry.setKey("""");
/* 162 */       entry = urlEntry;
/*     */     } 
/* 164 */     URL url = SynapseConfigUtils.getURLFromPath(getRoot() + entry.getKey());
/* 165 */     if (url == null) {
/* 166 */       return null;
/*     */     }
/* 168 */     if (url.getProtocol().equals(""file"")) {
/*     */       
/* 170 */       File file = new File(url.getFile());
/* 171 */       if (!file.isDirectory()) {
/* 172 */         return null;
/*     */       }
/* 174 */       InputStream inStream = null;
/*     */       try {
/* 176 */         inStream = (InputStream)url.getContent();
/*     */         
/* 178 */         BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));
/* 179 */         ArrayList<URLRegistryEntry> entryList = new ArrayList();
/* 180 */         String key = """";
/* 181 */         while ((key = reader.readLine()) != null) {
/* 182 */           URLRegistryEntry registryEntry = new URLRegistryEntry();
/* 183 */           if (entry.getKey().equals("""")) {
/* 184 */             registryEntry.setKey(key);
/*     */           }
/* 186 */           else if (entry.getKey().endsWith(""/"")) {
/* 187 */             registryEntry.setKey(entry.getKey() + key);
/*     */           } else {
/* 189 */             registryEntry.setKey(entry.getKey() + ""/"" + key);
/*     */           } 
/*     */ 
/*     */           
/* 193 */           entryList.add(registryEntry);
/*     */         } 
/*     */         
/* 196 */         RegistryEntry[] entries = new RegistryEntry[entryList.size()];
/* 197 */         for (int i = 0; i < entryList.size(); i++) {
/* 198 */           entries[i] = entryList.get(i);
/*     */         }
/* 200 */         return entries;
/*     */       }
/* 202 */       catch (Exception e) {
/* 203 */         throw new SynapseException(""Error in reading the URL."");
/*     */       } 
/*     */     } 
/*     */     
/* 207 */     throw new SynapseException(""Invalid protocol."");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public RegistryEntry[] getDescendants(RegistryEntry entry) {
/* 213 */     ArrayList<RegistryEntry> list = new ArrayList();
/* 214 */     RegistryEntry[] entries = getChildren(entry);
/* 215 */     if (entries != null) {
/* 216 */       for (int i = 0; i < entries.length; i++) {
/*     */         
/* 218 */         if (list.size() > 200) {
/*     */           break;
/*     */         }
/*     */         
/* 222 */         fillDescendants(entries[i], list);
/*     */       } 
/*     */     }
/*     */     
/* 226 */     RegistryEntry[] descendants = new RegistryEntry[list.size()];
/* 227 */     for (int i = 0; i < list.size(); i++) {
/* 228 */       descendants[i] = list.get(i);
/*     */     }
/*     */     
/* 231 */     return descendants;
/*     */   }
/*     */ 
/*     */   
/*     */   private void fillDescendants(RegistryEntry parent, ArrayList<RegistryEntry> list) {
/* 236 */     RegistryEntry[] entries = getChildren(parent);
/* 237 */     if (entries != null) {
/* 238 */       for (int i = 0; i < entries.length; i++) {
/*     */         
/* 240 */         if (list.size() > 200) {
/*     */           break;
/*     */         }
/*     */         
/* 244 */         fillDescendants(entries[i], list);
/*     */       } 
/*     */     } else {
/* 247 */       list.add(parent);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void handleException(String msg, Exception e) {
/* 252 */     log.error(msg, e);
/* 253 */     throw new SynapseException(msg, e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\registr\\url\SimpleURLRegistry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.registry.url.URLRegistryEntry,"/*     */ package org.apache.synapse.registry.url;
/*     */ 
/*     */ import java.net.URI;
/*     */ import java.util.Date;
/*     */ import org.apache.synapse.registry.RegistryEntry;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class URLRegistryEntry
/*     */   implements RegistryEntry
/*     */ {
/*  29 */   private String key = null;
/*  30 */   private String name = null;
/*  31 */   private long version = Long.MIN_VALUE;
/*  32 */   private URI type = null;
/*     */   
/*     */   private String description;
/*     */   private long created;
/*     */   private long lastModified;
/*     */   private long cachableDuration;
/*     */   
/*  39 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */   
/*  43 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */   
/*  47 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */   
/*  51 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/*  55 */   public long getVersion() { return this.version; }
/*     */ 
/*     */ 
/*     */   
/*  59 */   public void setVersion(long version) { this.version = version; }
/*     */ 
/*     */ 
/*     */   
/*  63 */   public URI getType() { return this.type; }
/*     */ 
/*     */ 
/*     */   
/*  67 */   public void setType(URI type) { this.type = type; }
/*     */ 
/*     */ 
/*     */   
/*  71 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */   
/*  75 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */   
/*  79 */   public long getCreated() { return this.created; }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setCreated(long created) { this.created = created; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public long getLastModified() { return this.lastModified; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setLastModified(long lastModified) { this.lastModified = lastModified; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public long getCachableDuration() { return this.cachableDuration; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setCachableDuration(long cachableDuration) { this.cachableDuration = cachableDuration; }
/*     */ 
/*     */   
/*     */   public String toString() {
/* 103 */     StringBuffer sb = new StringBuffer();
/* 104 */     sb.append(""RegistryEntry {"").append("" Key : "" + this.key).append("" Name : "" + this.name).append("" Ver : "" + this.version).append("" Type : "" + this.type).append("" Desc : "" + this.description).append("" Created : "" + new Date(this.created)).append("" Modified : "" + new Date(this.lastModified)).append("" Cacheable for : "" + (this.cachableDuration / 1000L) + ""sec"").append(""}"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 114 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\registr\\url\URLRegistryEntry.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.AbstractStartup,"/*    */ package org.apache.synapse.startup;
/*    */ 
/*    */ import org.apache.synapse.Startup;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public abstract class AbstractStartup
/*    */   implements Startup
/*    */ {
/* 32 */   protected String name = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 40 */   public String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 50 */   public void setName(String name) { this.name = name; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\AbstractStartup.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.Task,"package org.apache.synapse.startup;
public interface Task {
  void execute();
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\Task.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.quartz.SimpleQuartz,"/*     */ package org.apache.synapse.startup.quartz;
/*     */ 
/*     */ import java.util.HashSet;
/*     */ import java.util.Random;
/*     */ import java.util.Set;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.startup.AbstractStartup;
/*     */ import org.quartz.CronTrigger;
/*     */ import org.quartz.JobDataMap;
/*     */ import org.quartz.JobDetail;
/*     */ import org.quartz.Scheduler;
/*     */ import org.quartz.SchedulerException;
/*     */ import org.quartz.Trigger;
/*     */ import org.quartz.TriggerUtils;
/*     */ import org.quartz.impl.DirectSchedulerFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SimpleQuartz
/*     */   extends AbstractStartup
/*     */ {
/*  52 */   private static final Log log = LogFactory.getLog(SimpleQuartz.class);
/*     */   
/*     */   private static final int THREADPOOLSIZE = 5;
/*     */   private String cron;
/*  56 */   private int repeatCount = -1;
/*     */   private long repeatInterval;
/*     */   private String className;
/*     */   private Scheduler sch;
/*  60 */   Set xmlProperties = new HashSet();
/*     */ 
/*     */   
/*  63 */   public QName getTagQName() { return SimpleQuartzFactory.TASK; }
/*     */ 
/*     */   
/*     */   public void destroy() {
/*  67 */     if (this.sch != null) {
/*     */       try {
/*  69 */         this.sch.shutdown();
/*  70 */       } catch (SchedulerException e) {
/*  71 */         log.warn(""Error shutting down scheduler"", (Throwable)e);
/*  72 */         throw new SynapseException(""Error shutting down scheduler"", (Throwable)e);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void init(SynapseEnvironment synapseEnvironment) {
/*     */     try {
/*  80 */       DirectSchedulerFactory.getInstance().createVolatileScheduler(5);
/*  81 */       this.sch = DirectSchedulerFactory.getInstance().getScheduler();
/*     */       
/*  83 */       Object object = null;
/*  84 */       if (this.cron == null) {
/*  85 */         if (this.repeatCount >= 0) {
/*  86 */           object = TriggerUtils.makeImmediateTrigger(this.repeatCount - 1, this.repeatInterval);
/*     */         } else {
/*  88 */           object = TriggerUtils.makeImmediateTrigger(-1, this.repeatInterval);
/*     */         } 
/*     */       } else {
/*     */         
/*  92 */         CronTrigger cronTrig = new CronTrigger();
/*  93 */         cronTrig.setCronExpression(this.cron);
/*  94 */         object = cronTrig;
/*     */       } 
/*     */ 
/*     */       
/*  98 */       object.setName(""Trigger"" + String.valueOf((new Random()).nextLong()));
/*  99 */       object.setGroup(""synapse.simple.quartz"");
/* 100 */       object.setVolatility(true);
/* 101 */       JobDetail jobDetail = new JobDetail();
/*     */ 
/*     */       
/* 104 */       jobDetail.setName(this.name);
/* 105 */       jobDetail.setGroup(""synapse.simple.quartz"");
/* 106 */       jobDetail.setJobClass(SimpleQuartzJob.class);
/* 107 */       JobDataMap jdm = new JobDataMap();
/* 108 */       jdm.put(""SynapseEnvironment"", synapseEnvironment);
/* 109 */       jdm.put(""ClassName"", this.className);
/* 110 */       jdm.put(""Properties"", this.xmlProperties);
/* 111 */       jobDetail.setJobDataMap(jdm);
/*     */       
/* 113 */       this.sch.scheduleJob(jobDetail, (Trigger)object);
/* 114 */       this.sch.start();
/* 115 */       log.info(""Scheduled job "" + jobDetail.getFullName() + "" for class "" + this.className);
/*     */     }
/* 117 */     catch (Exception e) {
/* 118 */       log.fatal(""Error starting up Scheduler"", e);
/* 119 */       throw new SynapseException(""Error starting up Scheduler"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 125 */   public String getJobClass() { return this.className; }
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setJobClass(String attributeValue) { this.className = attributeValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setInterval(long l) { this.repeatInterval = l; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public long getInterval() { return this.repeatInterval; }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setCount(int i) { this.repeatCount = i; }
/*     */ 
/*     */ 
/*     */   
/* 147 */   public int getCount() { return this.repeatCount; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void addProperty(OMElement prop) { this.xmlProperties.add(prop); }
/*     */ 
/*     */ 
/*     */   
/* 155 */   public Set getProperties() { return this.xmlProperties; }
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setCron(String attributeValue) { this.cron = attributeValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public String getCron() { return this.cron; }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\quartz\SimpleQuartz.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.quartz.SimpleQuartzFactory,"/*     */ package org.apache.synapse.startup.quartz;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.om.OMAttribute;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.Startup;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.config.xml.PropertyHelper;
/*     */ import org.apache.synapse.config.xml.StartupFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SimpleQuartzFactory
/*     */   implements StartupFactory
/*     */ {
/*  47 */   public static final QName TASK = new QName(""http://ws.apache.org/ns/synapse"", ""task"");
/*     */ 
/*     */   
/*  50 */   private static final QName TRIGGER = new QName(""http://ws.apache.org/ns/synapse"", ""trigger"");
/*     */ 
/*     */   
/*  53 */   private static final QName PROPERTY = new QName(""http://ws.apache.org/ns/synapse"", ""property"");
/*     */ 
/*     */   
/*  56 */   private static final Log log = LogFactory.getLog(SimpleQuartzFactory.class);
/*     */ 
/*     */   
/*     */   public Startup createStartup(OMElement el) {
/*  60 */     if (log.isDebugEnabled()) {
/*  61 */       log.debug(""Creating SimpleQuartz Task"");
/*     */     }
/*     */     
/*  64 */     if (el.getQName().equals(TASK)) {
/*     */       
/*  66 */       SimpleQuartz q = new SimpleQuartz();
/*     */       
/*  68 */       String name = el.getAttributeValue(new QName("""", ""name""));
/*     */       
/*  70 */       if (name != null) {
/*  71 */         q.setName(name);
/*     */       } else {
/*  73 */         handleException(""Name for a task is required, missing name in the task"");
/*     */       } 
/*     */ 
/*     */       
/*  77 */       OMAttribute classAttr = el.getAttribute(new QName(""class""));
/*  78 */       if (classAttr != null && classAttr.getAttributeValue() != null) {
/*  79 */         String classname = classAttr.getAttributeValue();
/*     */         try {
/*  81 */           Class.forName(classname).newInstance();
/*  82 */         } catch (Exception e) {
/*  83 */           handleException(""Failed to load task class "" + classname, e);
/*     */         } 
/*  85 */         q.setJobClass(classname);
/*     */       } else {
/*  87 */         handleException(""Syntax error in the Task : no task class specified"");
/*     */       } 
/*     */ 
/*     */       
/*  91 */       Iterator<OMElement> it = el.getChildrenWithName(PROPERTY);
/*  92 */       while (it.hasNext()) {
/*  93 */         OMElement prop = it.next();
/*  94 */         if (PropertyHelper.isStaticProperty(prop)) {
/*  95 */           q.addProperty(prop); continue;
/*     */         } 
/*  97 */         handleException(""Tasks does not support dynamic properties"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 102 */       OMElement trigger = el.getFirstChildWithName(TRIGGER);
/* 103 */       if (trigger != null) {
/*     */         
/* 105 */         OMAttribute count = trigger.getAttribute(new QName(""count""));
/* 106 */         if (count != null) {
/*     */           try {
/* 108 */             q.setCount(Integer.parseInt(count.getAttributeValue()));
/* 109 */           } catch (Exception e) {
/* 110 */             handleException(""Failed to parse trigger count as an integer"", e);
/*     */           } 
/*     */         }
/*     */         
/* 114 */         OMAttribute once = trigger.getAttribute(new QName(""once""));
/* 115 */         if (once != null && Boolean.TRUE.toString().equals(once.getAttributeValue())) {
/* 116 */           q.setCount(1);
/* 117 */           q.setInterval(1L);
/*     */         } 
/*     */         
/* 120 */         OMAttribute repeatInterval = trigger.getAttribute(new QName(""interval""));
/* 121 */         if (repeatInterval == null && q.getCount() > 1) {
/* 122 */           handleException(""Trigger seems to be a simple trigger, but no interval specified"");
/*     */         }
/* 124 */         else if (repeatInterval != null && repeatInterval.getAttributeValue() != null) {
/*     */           try {
/* 126 */             q.setInterval(Long.parseLong(repeatInterval.getAttributeValue()));
/* 127 */           } catch (Exception e) {
/* 128 */             handleException(""Failed to parse trigger interval as a long value"", e);
/*     */           } 
/*     */         } 
/*     */         
/* 132 */         OMAttribute expr = trigger.getAttribute(new QName(""cron""));
/* 133 */         if (expr == null && q.getInterval() == 0L) {
/* 134 */           q.setCount(1);
/* 135 */           q.setInterval(1L);
/* 136 */         } else if (expr != null && q.getInterval() > 0L) {
/* 137 */           handleException(""Trigger syntax error : both cron and simple trigger attributes are present"");
/*     */         }
/* 139 */         else if (expr != null && expr.getAttributeValue() != null) {
/* 140 */           q.setCron(expr.getAttributeValue());
/*     */         } 
/*     */       } else {
/*     */         
/* 144 */         q.setCount(1);
/* 145 */         q.setInterval(1L);
/*     */       } 
/*     */       
/* 148 */       return (Startup)q;
/*     */     } 
/* 150 */     handleException(""Syntax error in the task : wrong QName for the task"");
/* 151 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public Class getSerializerClass() { return SimpleQuartzSerializer.class; }
/*     */ 
/*     */ 
/*     */   
/* 160 */   public QName getTagQName() { return TASK; }
/*     */ 
/*     */   
/*     */   private void handleException(String message, Exception e) {
/* 164 */     log.error(message);
/* 165 */     throw new SynapseException(message, e);
/*     */   }
/*     */   
/*     */   private void handleException(String message) {
/* 169 */     log.error(message);
/* 170 */     throw new SynapseException(message);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\quartz\SimpleQuartzFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.quartz.SimpleQuartzJob,"/*    */ package org.apache.synapse.startup.quartz;
/*    */ 
/*    */ import java.util.Iterator;
/*    */ import java.util.Set;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.commons.logging.Log;
/*    */ import org.apache.commons.logging.LogFactory;
/*    */ import org.apache.synapse.ManagedLifecycle;
/*    */ import org.apache.synapse.config.xml.PropertyHelper;
/*    */ import org.apache.synapse.core.SynapseEnvironment;
/*    */ import org.apache.synapse.startup.Task;
/*    */ import org.quartz.Job;
/*    */ import org.quartz.JobDataMap;
/*    */ import org.quartz.JobExecutionContext;
/*    */ import org.quartz.JobExecutionException;
/*    */ 
/*    */ public class SimpleQuartzJob
/*    */   implements Job
/*    */ {
/*    */   public static final String SYNAPSE_ENVIRONMENT = ""SynapseEnvironment"";
/*    */   public static final String CLASSNAME = ""ClassName"";
/*    */   public static final String PROPERTIES = ""Properties"";
/* 23 */   private static final Log log = LogFactory.getLog(SimpleQuartzJob.class);
/*    */ 
/*    */   
/*    */   public void execute(JobExecutionContext ctx) throws JobExecutionException {
/* 27 */     log.debug(""Executing task : "" + ctx.getJobDetail().getFullName());
/* 28 */     JobDataMap jdm = ctx.getMergedJobDataMap();
/* 29 */     String jobClassName = (String)jdm.get(""ClassName"");
/* 30 */     if (jobClassName == null) {
/* 31 */       handleException(""No ClassName in JobDetails"");
/*    */     }
/*    */     
/* 34 */     Task task = null;
/*    */     try {
/* 36 */       task = (Task)getClass().getClassLoader().loadClass(jobClassName).newInstance();
/* 37 */     } catch (Exception e) {
/* 38 */       handleException(""Cannot instantiate task : "" + jobClassName, e);
/*    */     } 
/*    */     
/* 41 */     Set properties = (Set)jdm.get(""Properties"");
/* 42 */     Iterator<OMElement> it = properties.iterator();
/* 43 */     while (it.hasNext()) {
/* 44 */       OMElement prop = it.next();
/* 45 */       log.debug(""Found Property : "" + prop.toString());
/* 46 */       PropertyHelper.setStaticProperty(prop, task);
/*    */     } 
/*    */     
/* 49 */     SynapseEnvironment se = (SynapseEnvironment)jdm.get(""SynapseEnvironment"");
/* 50 */     if (task instanceof ManagedLifecycle && 
/* 51 */       se != null) {
/* 52 */       ((ManagedLifecycle)task).init(se);
/*    */     }
/*    */ 
/*    */     
/* 56 */     if (se.isInitialized()) {
/* 57 */       task.execute();
/*    */     }
/*    */   }
/*    */   
/*    */   private void handleException(String msg) throws JobExecutionException {
/* 62 */     log.error(msg);
/* 63 */     throw new JobExecutionException(msg);
/*    */   }
/*    */   
/*    */   private void handleException(String msg, Exception e) throws JobExecutionException {
/* 67 */     log.error(msg, e);
/* 68 */     throw new JobExecutionException(msg, e);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\quartz\SimpleQuartzJob.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.quartz.SimpleQuartzSerializer,"/*    */ package org.apache.synapse.startup.quartz;
/*    */ 
/*    */ import javax.xml.namespace.QName;
/*    */ import org.apache.axiom.om.OMAbstractFactory;
/*    */ import org.apache.axiom.om.OMContainer;
/*    */ import org.apache.axiom.om.OMElement;
/*    */ import org.apache.axiom.om.OMFactory;
/*    */ import org.apache.axiom.om.OMNamespace;
/*    */ import org.apache.axiom.om.OMNode;
/*    */ import org.apache.synapse.Startup;
/*    */ import org.apache.synapse.SynapseException;
/*    */ import org.apache.synapse.config.xml.StartupSerializer;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SimpleQuartzSerializer
/*    */   implements StartupSerializer
/*    */ {
/* 35 */   protected static final OMFactory fac = OMAbstractFactory.getOMFactory();
/* 36 */   protected static final OMNamespace synNS = fac.createOMNamespace(""http://ws.apache.org/ns/synapse"", ""syn"");
/*    */   
/* 38 */   protected static final OMNamespace nullNS = fac.createOMNamespace("""", """");
/*    */   
/* 40 */   protected static final QName PROP_Q = new QName(""http://ws.apache.org/ns/synapse"", ""property"", ""syn"");
/*    */ 
/*    */ 
/*    */   
/*    */   public OMElement serializeStartup(OMElement parent, Startup s) {
/* 45 */     if (!(s instanceof SimpleQuartz)) {
/* 46 */       throw new SynapseException(""called TaskSerializer on some other kind of startup"" + s.getClass().getName());
/*    */     }
/*    */ 
/*    */     
/* 50 */     SimpleQuartz sq = (SimpleQuartz)s;
/*    */     
/* 52 */     OMElement task = fac.createOMElement(""task"", synNS, (OMContainer)parent);
/* 53 */     task.addAttribute(""name"", sq.getName(), nullNS);
/* 54 */     task.addAttribute(""class"", sq.getJobClass(), nullNS);
/*    */     
/* 56 */     OMElement el = fac.createOMElement(""trigger"", synNS, (OMContainer)task);
/* 57 */     if (sq.getInterval() == 1L && sq.getCount() == 1) {
/* 58 */       el.addAttribute(""once"", ""true"", nullNS);
/* 59 */     } else if (sq.getCron() != null) {
/* 60 */       el.addAttribute(""cron"", sq.getCron(), nullNS);
/*    */     } else {
/* 62 */       if (sq.getCount() != -1) {
/* 63 */         el.addAttribute(""count"", Integer.toString(sq.getCount()), nullNS);
/*    */       }
/*    */       
/* 66 */       if (sq.getInterval() != 0L) {
/* 67 */         el.addAttribute(""interval"", Long.toString(sq.getInterval()), nullNS);
/*    */       }
/*    */     } 
/*    */     
/* 71 */     for (Object o : sq.getProperties()) {
/* 72 */       OMElement prop = (OMElement)o;
/* 73 */       task.addChild((OMNode)prop.cloneOMElement());
/*    */     } 
/*    */     
/* 76 */     return task;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\quartz\SimpleQuartzSerializer.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.startup.tasks.MessageInjector,"/*     */ package org.apache.synapse.startup.tasks;
/*     */ 
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axis2.addressing.EndpointReference;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.ManagedLifecycle;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.startup.Task;
/*     */ import org.apache.synapse.util.PayloadHelper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MessageInjector
/*     */   implements Task, ManagedLifecycle
/*     */ {
/*  40 */   private Log log = LogFactory.getLog(MessageInjector.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  45 */   private OMElement message = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  50 */   private String to = null;
/*     */   
/*  52 */   private String soapAction = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private SynapseEnvironment synapseEnvironment;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   public void init(SynapseEnvironment se) { this.synapseEnvironment = se; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessage(OMElement elem) {
/*  76 */     this.log.debug(""set message "" + elem.toString());
/*  77 */     this.message = elem;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setTo(String url) { this.to = url; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setSoapAction(String soapAction) { this.soapAction = soapAction; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/*  99 */     this.log.debug(""execute"");
/* 100 */     if (this.synapseEnvironment == null) {
/* 101 */       this.log.error(""Synapse Environment not set"");
/*     */       return;
/*     */     } 
/* 104 */     if (this.message == null) {
/* 105 */       this.log.error(""message not set"");
/*     */       
/*     */       return;
/*     */     } 
/* 109 */     if (this.to == null) {
/* 110 */       this.log.error(""to address not set"");
/*     */       
/*     */       return;
/*     */     } 
/* 114 */     MessageContext mc = this.synapseEnvironment.createMessageContext();
/* 115 */     mc.setTo(new EndpointReference(this.to));
/* 116 */     PayloadHelper.setXMLPayload(mc, this.message.cloneOMElement());
/* 117 */     if (this.soapAction != null) {
/* 118 */       mc.setSoapAction(this.soapAction);
/*     */     }
/* 120 */     this.synapseEnvironment.injectMessage(mc);
/*     */   }
/*     */   
/*     */   public void destroy() {}
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\startup\tasks\MessageInjector.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.Statistics,"/*    */ package org.apache.synapse.statistics;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Statistics
/*    */ {
/* 28 */   private long maxProcessingTime = 0L;
/*    */   
/* 30 */   private long minProcessingTime = -1L;
/*    */   
/* 32 */   private double avgProcessingTime = 0.0D;
/*    */   
/*    */   private double totalProcessingTime;
/*    */   
/* 36 */   private int count = 0;
/*    */   
/* 38 */   private int faultCount = 0;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void update(long inTime, long outTime, boolean isFault) {
/* 48 */     this.count++;
/* 49 */     if (isFault) {
/* 50 */       this.faultCount++;
/*    */     }
/* 52 */     long responseTime = outTime - inTime;
/* 53 */     if (this.maxProcessingTime < responseTime) {
/* 54 */       this.maxProcessingTime = responseTime;
/*    */     }
/* 56 */     if (this.minProcessingTime > responseTime) {
/* 57 */       this.minProcessingTime = responseTime;
/*    */     }
/* 59 */     if (this.minProcessingTime == -1L) {
/* 60 */       this.minProcessingTime = responseTime;
/*    */     }
/* 62 */     this.totalProcessingTime += responseTime;
/* 63 */     this.avgProcessingTime = this.totalProcessingTime / this.count;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 70 */   public long getMaxProcessingTime() { return this.maxProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 77 */   public double getAvgProcessingTime() { return this.avgProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 84 */   public long getMinProcessingTime() { return this.minProcessingTime; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 91 */   public int getFaultCount() { return this.faultCount; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 98 */   public int getCount() { return this.count; }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\Statistics.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsCollector,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsCollector
/*     */ {
/*  32 */   private Map sequenceStatistics = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */   
/*  35 */   private Map endpointStatistics = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */   
/*  38 */   private Map proxyServicesStatistics = Collections.synchronizedMap(new HashMap<Object, Object>());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForEndPoint(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  51 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.endpointStatistics.get(keyOfStatistic);
/*     */     
/*  53 */     if (statisticsHolder == null) {
/*  54 */       statisticsHolder = new StatisticsHolder();
/*  55 */       statisticsHolder.setKey(keyOfStatistic);
/*  56 */       statisticsHolder.setStatisticsCategory(2);
/*  57 */       this.endpointStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/*  59 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForProxyService(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  74 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.proxyServicesStatistics.get(keyOfStatistic);
/*     */     
/*  76 */     if (statisticsHolder == null) {
/*  77 */       statisticsHolder = new StatisticsHolder();
/*  78 */       statisticsHolder.setKey(keyOfStatistic);
/*  79 */       statisticsHolder.setStatisticsCategory(1);
/*  80 */       this.proxyServicesStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/*  82 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportForSequence(String keyOfStatistic, boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  96 */     StatisticsHolder statisticsHolder = (StatisticsHolder)this.sequenceStatistics.get(keyOfStatistic);
/*     */     
/*  98 */     if (statisticsHolder == null) {
/*  99 */       statisticsHolder = new StatisticsHolder();
/* 100 */       statisticsHolder.setKey(keyOfStatistic);
/* 101 */       statisticsHolder.setStatisticsCategory(0);
/* 102 */       this.sequenceStatistics.put(keyOfStatistic, statisticsHolder);
/*     */     } 
/* 104 */     statisticsHolder.update(isResponse, inTime, outTime, isFault);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public Map getSequenceStatistics() { return this.sequenceStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public Map getProxyServiceStatistics() { return this.proxyServicesStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public Map getEndPointStatistics() { return this.endpointStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void resetSequenceStatistics() { this.sequenceStatistics = Collections.synchronizedMap(new HashMap<Object, Object>()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void resetProxyServiceStatistics() { this.proxyServicesStatistics = Collections.synchronizedMap(new HashMap<Object, Object>()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void resetEndPointStatistics() { this.endpointStatistics = Collections.synchronizedMap(new HashMap<Object, Object>()); }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\StatisticsCollector.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsHolder,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsHolder
/*     */ {
/*     */   private int statisticsCategory;
/*     */   private String key;
/*     */   private Statistics inFlowStatistics;
/*     */   private Statistics outFlowStatistics;
/*     */   
/*     */   public synchronized void update(boolean isResponse, long inTime, long outTime, boolean isFault) {
/*  47 */     if (isResponse) {
/*  48 */       if (this.outFlowStatistics == null) {
/*  49 */         this.outFlowStatistics = new Statistics();
/*     */       }
/*  51 */       this.outFlowStatistics.update(inTime, outTime, isFault);
/*     */     } else {
/*  53 */       if (this.inFlowStatistics == null) {
/*  54 */         this.inFlowStatistics = new Statistics();
/*     */       }
/*  56 */       this.inFlowStatistics.update(inTime, outTime, isFault);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  66 */   public synchronized Statistics getInFlowStatistics() { return this.inFlowStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  74 */   public synchronized Statistics getOutFlowStatistics() { return this.outFlowStatistics; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  82 */   public int getStatisticsCategory() { return this.statisticsCategory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setStatisticsCategory(int statisticsCategory) { this.statisticsCategory = statisticsCategory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void clearStatistics() {
/* 113 */     this.inFlowStatistics = null;
/* 114 */     this.outFlowStatistics = null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\StatisticsHolder.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsStack,"package org.apache.synapse.statistics;
public interface StatisticsStack {
  void put(String paramString, long paramLong, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3);
  void reportToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean);
  void reportToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean, String paramString);
  void reportAllToStatisticsCollector(StatisticsCollector paramStatisticsCollector, boolean paramBoolean);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\StatisticsStack.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.StatisticsUtils,"/*     */ package org.apache.synapse.statistics;
/*     */ 
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.SynapseEnvironment;
/*     */ import org.apache.synapse.endpoints.Endpoint;
/*     */ import org.apache.synapse.statistics.impl.EndPointStatisticsStack;
/*     */ import org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack;
/*     */ import org.apache.synapse.statistics.impl.SequenceStatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatisticsUtils
/*     */ {
/*     */   public static void processProxyServiceStatistics(MessageContext synCtx) {
/*  43 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  44 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  45 */     ProxyServiceStatisticsStack proxyServiceStatisticsStack = (ProxyServiceStatisticsStack)synCtx.getProperty(""synapse.proxy.stats"");
/*     */     
/*  47 */     if (proxyServiceStatisticsStack != null) {
/*  48 */       proxyServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*  50 */     ProxyServiceStatisticsStack synapseServiceStatisticsStack = (ProxyServiceStatisticsStack)synCtx.getProperty(""synapse.service.stats"");
/*     */     
/*  52 */     if (synapseServiceStatisticsStack != null) {
/*  53 */       synapseServiceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processEndPointStatistics(MessageContext synCtx) {
/*  63 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  64 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  65 */     EndPointStatisticsStack endPointStatisticsStack = (EndPointStatisticsStack)synCtx.getProperty(""synapse.endpoint.stats"");
/*     */     
/*  67 */     if (endPointStatisticsStack != null) {
/*  68 */       Object endpointObj = synCtx.getProperty(""processed_endpoint"");
/*  69 */       if (endpointObj instanceof Endpoint) {
/*  70 */         Endpoint endpoint = (Endpoint)endpointObj;
/*  71 */         String name = endpoint.getName();
/*  72 */         if (name == null) {
/*  73 */           endPointStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */         } else {
/*     */           
/*  76 */           endPointStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault, name);
/*     */         } 
/*     */         
/*  79 */         endPointStatisticsStack.reportAllToStatisticsCollector(statisticsCollector, true);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processSequenceStatistics(MessageContext synCtx) {
/*  90 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/*  91 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/*  92 */     SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)synCtx.getProperty(""synapse.sequence.stats"");
/*     */     
/*  94 */     if (sequenceStatisticsStack != null) {
/*  95 */       sequenceStatisticsStack.reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void processAllSequenceStatistics(MessageContext synCtx) {
/* 105 */     StatisticsCollector statisticsCollector = getStatisticsCollector(synCtx);
/* 106 */     boolean isFault = synCtx.getEnvelope().getBody().hasFault();
/* 107 */     SequenceStatisticsStack sequenceStatisticsStack = (SequenceStatisticsStack)synCtx.getProperty(""synapse.sequence.stats"");
/*     */     
/* 109 */     if (sequenceStatisticsStack != null) {
/* 110 */       sequenceStatisticsStack.reportAllToStatisticsCollector(statisticsCollector, isFault);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static StatisticsCollector getStatisticsCollector(MessageContext synCtx) {
/* 120 */     SynapseEnvironment synEnv = synCtx.getEnvironment();
/* 121 */     StatisticsCollector statisticsCollector = null;
/* 122 */     if (synEnv != null) {
/* 123 */       statisticsCollector = synEnv.getStatisticsCollector();
/* 124 */       if (statisticsCollector == null) {
/* 125 */         statisticsCollector = new StatisticsCollector();
/* 126 */         synEnv.setStatisticsCollector(statisticsCollector);
/*     */       } 
/*     */     } 
/* 129 */     return statisticsCollector;
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\StatisticsUtils.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.EndPointStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EndPointStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*     */   private List endpointStatistics;
/*     */   private boolean isCompleteInFlowStatisicsReport = false;
/*     */   
/*     */   public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) {
/*  49 */     if (this.endpointStatistics == null) {
/*  50 */       this.endpointStatistics = new ArrayList();
/*     */     }
/*  52 */     this.endpointStatistics.add(new EndPointStatistics(key, initTime, isInFlow, isStatisticsEnable, isFault));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  64 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/*  65 */       EndPointStatistics statistics = this.endpointStatistics.get(this.endpointStatistics.size() - 1);
/*     */ 
/*     */       
/*  68 */       if (statistics != null && statistics.isStatisticsEnable && statistics.endPointName != null)
/*     */       {
/*  70 */         if (statistics.inTimeForInFlow != -1L) {
/*  71 */           long initTimeForOutFlow = System.currentTimeMillis();
/*  72 */           statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */           
/*  75 */           statistics.inTimeForInFlow = -1L;
/*  76 */           statistics.inTimeForOutFlow = initTimeForOutFlow;
/*  77 */         } else if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */           
/*  79 */           statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */           
/*  82 */           this.endpointStatistics.remove(statistics);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  96 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/*  97 */       List<EndPointStatistics> tobeRemoved = new ArrayList();
/*  98 */       Iterator epIterator = this.endpointStatistics.iterator();
/*  99 */       while (epIterator.hasNext()) {
/* 100 */         Object statisticsObj = epIterator.next();
/* 101 */         if (statisticsObj instanceof EndPointStatistics) {
/* 102 */           EndPointStatistics statistics = (EndPointStatistics)statisticsObj;
/* 103 */           if (statistics.isStatisticsEnable && statistics.endPointName != null && statistics.endPointName.equals(name)) {
/*     */             
/* 105 */             if (statistics.inTimeForInFlow != -1L) {
/* 106 */               long initTimeForOutFlow = System.currentTimeMillis();
/* 107 */               statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */               
/* 110 */               statistics.inTimeForInFlow = -1L;
/* 111 */               statistics.inTimeForOutFlow = initTimeForOutFlow; continue;
/* 112 */             }  if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */               
/* 114 */               statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */               
/* 117 */               tobeRemoved.add(statistics);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 122 */       this.endpointStatistics.removeAll(tobeRemoved);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/* 132 */     if (this.endpointStatistics != null && !this.endpointStatistics.isEmpty()) {
/* 133 */       List<EndPointStatistics> tobeRemoved = new ArrayList();
/* 134 */       Iterator epIterator = this.endpointStatistics.iterator();
/* 135 */       while (epIterator.hasNext()) {
/* 136 */         Object statisticsObj = epIterator.next();
/* 137 */         if (statisticsObj instanceof EndPointStatistics) {
/* 138 */           EndPointStatistics statistics = (EndPointStatistics)statisticsObj;
/* 139 */           if (statistics.isStatisticsEnable && statistics.endPointName != null) {
/* 140 */             if (statistics.inTimeForInFlow != -1L) {
/* 141 */               long initTimeForOutFlow = System.currentTimeMillis();
/* 142 */               statisticsCollector.reportForEndPoint(statistics.endPointName, false, statistics.inTimeForInFlow, initTimeForOutFlow, isFault);
/*     */ 
/*     */               
/* 145 */               statistics.inTimeForInFlow = -1L;
/* 146 */               statistics.inTimeForOutFlow = initTimeForOutFlow; continue;
/* 147 */             }  if (statistics.inTimeForOutFlow != -1L && this.isCompleteInFlowStatisicsReport) {
/*     */               
/* 149 */               statisticsCollector.reportForEndPoint(statistics.endPointName, true, statistics.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */ 
/*     */               
/* 152 */               tobeRemoved.add(statistics);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 157 */       this.endpointStatistics.removeAll(tobeRemoved);
/*     */     } 
/* 159 */     this.isCompleteInFlowStatisicsReport = true;
/*     */   }
/*     */ 
/*     */   
/*     */   class EndPointStatistics
/*     */   {
/*     */     private String endPointName;
/*     */     
/*     */     private boolean isStatisticsEnable;
/*     */     
/*     */     private boolean isFault;
/*     */     
/* 171 */     private long inTimeForInFlow = -1L;
/*     */     
/* 173 */     private long inTimeForOutFlow = -1L;
/*     */ 
/*     */     
/*     */     public EndPointStatistics(String endPointName, long initTime, boolean inFlow, boolean statisticsEnable, boolean fault) {
/* 177 */       if (inFlow) {
/* 178 */         this.endPointName = endPointName;
/* 179 */         this.inTimeForInFlow = initTime;
/* 180 */         this.isStatisticsEnable = statisticsEnable;
/* 181 */         this.isFault = fault;
/*     */       } 
/*     */     }
/*     */     
/*     */     public boolean equals(Object o) {
/* 186 */       if (this == o) return true; 
/* 187 */       if (o == null || getClass() != o.getClass()) return false;
/*     */       
/* 189 */       EndPointStatistics that = (EndPointStatistics)o;
/*     */       
/* 191 */       if ((this.endPointName != null) ? !this.endPointName.equals(that.endPointName) : (that.endPointName != null)) {
/* 192 */         return false;
/*     */       }
/* 194 */       return true;
/*     */     }
/*     */ 
/*     */     
/* 198 */     public int hashCode() { return (this.endPointName != null) ? this.endPointName.hashCode() : 0; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\impl\EndPointStatisticsStack.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.ProxyServiceStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProxyServiceStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*  34 */   private static final Log log = LogFactory.getLog(ProxyServiceStatisticsStack.class);
/*     */   
/*     */   private String proxyServiceName;
/*     */   
/*     */   private boolean isStatisticsEnable = false;
/*     */   
/*  40 */   private long inTimeForInFlow = -1L;
/*     */   
/*  42 */   private long inTimeForOutFlow = -1L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isINFault;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isOUTFault;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(String key, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) {
/*  57 */     if (isInFlow) {
/*  58 */       this.proxyServiceName = key;
/*  59 */       this.isStatisticsEnable = isStatisticsEnable;
/*  60 */       this.inTimeForInFlow = initTime;
/*  61 */       this.isINFault = isFault;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  71 */     if (this.proxyServiceName != null && this.isStatisticsEnable && this.inTimeForInFlow != -1L) {
/*  72 */       this.inTimeForOutFlow = System.currentTimeMillis();
/*  73 */       this.isOUTFault = isFault;
/*  74 */       statisticsCollector.reportForProxyService(this.proxyServiceName, false, this.inTimeForInFlow, this.inTimeForOutFlow, this.isINFault);
/*     */       
/*  76 */       this.inTimeForInFlow = -1L;
/*  77 */     } else if (this.inTimeForOutFlow != -1L) {
/*  78 */       statisticsCollector.reportForProxyService(this.proxyServiceName, true, this.inTimeForOutFlow, System.currentTimeMillis(), isFault);
/*     */       
/*  80 */       this.inTimeForOutFlow = -1L;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  93 */     if (name != null && this.proxyServiceName != null && this.proxyServiceName.equals(name)) {
/*  94 */       reportToStatisticsCollector(statisticsCollector, isFault);
/*     */     } else {
/*  96 */       handleException(""Invalid ProxyService Name "" + name + "" expected "" + this.proxyServiceName);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) { reportToStatisticsCollector(statisticsCollector, isFault); }
/*     */ 
/*     */   
/*     */   private void handleException(String msg) {
/* 111 */     log.error(msg);
/* 112 */     throw new SynapseException(msg);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\impl\ProxyServiceStatisticsStack.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.statistics.impl.SequenceStatisticsStack,"/*     */ package org.apache.synapse.statistics.impl;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.synapse.statistics.StatisticsCollector;
/*     */ import org.apache.synapse.statistics.StatisticsStack;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SequenceStatisticsStack
/*     */   implements StatisticsStack
/*     */ {
/*  36 */   private List sequenceStatisticsList = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  49 */   public void put(String sequenceName, long initTime, boolean isInFlow, boolean isStatisticsEnable, boolean isFault) { this.sequenceStatisticsList.add(new SequenceStatistics(sequenceName, initTime, isInFlow, isStatisticsEnable, isFault)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  61 */     int top = this.sequenceStatisticsList.size();
/*  62 */     if (top > 0) {
/*  63 */       popSequenceStatistics(this.sequenceStatisticsList.size() - 1, statisticsCollector);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void reportToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault, String name) {
/*  69 */     if (!this.sequenceStatisticsList.isEmpty()) {
/*  70 */       List<SequenceStatistics> tobeRemoved = new ArrayList();
/*  71 */       Iterator<SequenceStatistics> seqIterator = this.sequenceStatisticsList.iterator();
/*  72 */       while (seqIterator.hasNext()) {
/*  73 */         SequenceStatistics sequenceStatistics = seqIterator.next();
/*     */         
/*  75 */         if (sequenceStatistics != null) {
/*  76 */           if (sequenceStatistics.isStatisticsEnable && sequenceStatistics.sequenceName != null && sequenceStatistics.sequenceName.equals(name))
/*     */           {
/*     */ 
/*     */             
/*  80 */             statisticsCollector.reportForSequence(sequenceStatistics.sequenceName, !sequenceStatistics.isInFlow, sequenceStatistics.initTime, System.currentTimeMillis(), sequenceStatistics.isFault);
/*     */           }
/*     */ 
/*     */           
/*  84 */           tobeRemoved.add(sequenceStatistics);
/*     */         } 
/*     */       } 
/*  87 */       this.sequenceStatisticsList.removeAll(tobeRemoved);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reportAllToStatisticsCollector(StatisticsCollector statisticsCollector, boolean isFault) {
/*  99 */     int i = this.sequenceStatisticsList.size() - 1;
/* 100 */     for (; i >= 0; i--) {
/* 101 */       popSequenceStatistics(i, statisticsCollector);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void popSequenceStatistics(int index, StatisticsCollector statisticsCollector) {
/* 111 */     if (index >= 0) {
/* 112 */       SequenceStatistics sequenceStatistics = this.sequenceStatisticsList.get(index);
/*     */       
/* 114 */       if (sequenceStatistics != null) {
/* 115 */         if (sequenceStatistics.isStatisticsEnable && sequenceStatistics.sequenceName != null)
/*     */         {
/* 117 */           statisticsCollector.reportForSequence(sequenceStatistics.sequenceName, !sequenceStatistics.isInFlow, sequenceStatistics.initTime, System.currentTimeMillis(), sequenceStatistics.isFault);
/*     */         }
/*     */ 
/*     */         
/* 121 */         this.sequenceStatisticsList.remove(index);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   class SequenceStatistics
/*     */   {
/*     */     String sequenceName;
/*     */ 
/*     */     
/*     */     long initTime;
/*     */ 
/*     */     
/*     */     boolean isInFlow;
/*     */     
/*     */     boolean isStatisticsEnable;
/*     */     
/*     */     private boolean isFault;
/*     */ 
/*     */     
/*     */     public SequenceStatistics(String sequenceName, long initTime, boolean inFlow, boolean statisticsEnable, boolean isFault) {
/* 144 */       this.sequenceName = sequenceName;
/* 145 */       this.initTime = initTime;
/* 146 */       this.isInFlow = inFlow;
/* 147 */       this.isStatisticsEnable = statisticsEnable;
/* 148 */       this.isFault = isFault;
/*     */     }
/*     */     
/*     */     public boolean equals(Object o) {
/* 152 */       if (this == o) return true; 
/* 153 */       if (o == null || getClass() != o.getClass()) return false;
/*     */       
/* 155 */       SequenceStatistics that = (SequenceStatistics)o;
/*     */       
/* 157 */       if (!this.sequenceName.equals(that.sequenceName)) return false;
/*     */       
/* 159 */       return true;
/*     */     }
/*     */ 
/*     */     
/* 163 */     public int hashCode() { return this.sequenceName.hashCode(); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synapse\statistics\impl\SequenceStatisticsStack.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.FixedByteArrayOutputStream,"/*    */ package org.apache.synapse.util;
/*    */ 
/*    */ import java.io.ByteArrayOutputStream;
/*    */ import org.apache.synapse.SynapseException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FixedByteArrayOutputStream
/*    */   extends ByteArrayOutputStream
/*    */ {
/* 28 */   public FixedByteArrayOutputStream(int size) { super(size); }
/*    */ 
/*    */   
/*    */   public synchronized void write(int b) {
/* 32 */     if (this.count + 1 > this.buf.length) {
/* 33 */       throw new SynapseException(""Fixed size of internal byte array exceeded"");
/*    */     }
/* 35 */     super.write(b);
/*    */   }
/*    */   
/*    */   public synchronized void write(byte[] b, int off, int len) {
/* 39 */     if (this.count + len > this.buf.length) {
/* 40 */       throw new SynapseException(""Fixed size of internal byte array exceeded"");
/*    */     }
/* 42 */     super.write(b, off, len);
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\FixedByteArrayOutputStream.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.MessageHelper,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.axiom.attachments.Attachments;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPHeader;
/*     */ import org.apache.axiom.soap.SOAPHeaderBlock;
/*     */ import org.apache.axis2.AxisFault;
/*     */ import org.apache.axis2.context.MessageContext;
/*     */ import org.apache.axis2.description.AxisDescription;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.core.axis2.Axis2MessageContext;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MessageHelper
/*     */ {
/*     */   public static MessageContext cloneMessageContext(MessageContext synCtx) throws AxisFault {
/*  46 */     MessageContext newCtx = synCtx.getEnvironment().createMessageContext();
/*  47 */     Axis2MessageContext axis2MC = (Axis2MessageContext)newCtx;
/*  48 */     axis2MC.setAxis2MessageContext(cloneAxis2MessageContext(((Axis2MessageContext)synCtx).getAxis2MessageContext()));
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  53 */     newCtx.setProperty(""aggregateCorelation"", synCtx.getMessageID());
/*     */ 
/*     */     
/*  56 */     newCtx.setTo(synCtx.getTo());
/*  57 */     newCtx.setReplyTo(synCtx.getReplyTo());
/*  58 */     newCtx.setSoapAction(synCtx.getSoapAction());
/*  59 */     newCtx.setWSAAction(synCtx.getWSAAction());
/*     */ 
/*     */     
/*  62 */     for (Object o : synCtx.getPropertyKeySet()) {
/*     */       
/*  64 */       if (o instanceof String) {
/*  65 */         newCtx.setProperty((String)o, synCtx.getProperty((String)o));
/*     */       }
/*     */     } 
/*     */     
/*  69 */     return newCtx;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static MessageContext cloneAxis2MessageContext(MessageContext mc) throws AxisFault {
/*  90 */     MessageContext newMC = clonePartially(mc);
/*  91 */     newMC.setEnvelope(cloneSOAPEnvelope(cloneSOAPEnvelope(mc.getEnvelope())));
/*     */     
/*  93 */     newMC.setServiceContext(mc.getServiceContext());
/*  94 */     newMC.setOperationContext(mc.getOperationContext());
/*  95 */     newMC.setAxisMessage(mc.getAxisMessage());
/*  96 */     if (newMC.getAxisMessage() != null) {
/*  97 */       newMC.getAxisMessage().setParent((AxisDescription)mc.getAxisOperation());
/*     */     }
/*  99 */     newMC.setAxisService(mc.getAxisService());
/*     */ 
/*     */     
/* 102 */     newMC.setTransportIn(mc.getTransportIn());
/* 103 */     newMC.setTransportOut(mc.getTransportOut());
/* 104 */     newMC.setProperty(""OutTransportInfo"", mc.getProperty(""OutTransportInfo""));
/*     */ 
/*     */     
/* 107 */     newMC.setProperty(""TRANSPORT_HEADERS"", getClonedTransportHeaders(mc));
/*     */ 
/*     */     
/* 110 */     return newMC;
/*     */   }
/*     */ 
/*     */   
/*     */   public static Map getClonedTransportHeaders(MessageContext msgCtx) {
/* 115 */     Map headers = (Map)msgCtx.getProperty(""TRANSPORT_HEADERS"");
/*     */     
/* 117 */     Map<Object, Object> clonedHeaders = new HashMap<Object, Object>();
/*     */     
/* 119 */     if (headers != null && headers.isEmpty()) {
/* 120 */       for (Object o : headers.keySet()) {
/* 121 */         String headerName = (String)o;
/* 122 */         clonedHeaders.put(headerName, headers.get(headerName));
/*     */       } 
/*     */     }
/*     */     
/* 126 */     return clonedHeaders;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static MessageContext clonePartially(MessageContext ori) throws AxisFault {
/* 132 */     MessageContext newMC = new MessageContext();
/*     */ 
/*     */ 
/*     */     
/* 136 */     newMC.setConfigurationContext(ori.getConfigurationContext());
/* 137 */     newMC.setMessageID(UUIDGenerator.getUUID());
/* 138 */     newMC.setTo(ori.getTo());
/* 139 */     newMC.setSoapAction(ori.getSoapAction());
/*     */     
/* 141 */     newMC.setProperty(""CHARACTER_SET_ENCODING"", ori.getProperty(""CHARACTER_SET_ENCODING""));
/*     */     
/* 143 */     newMC.setProperty(""enableMTOM"", ori.getProperty(""enableMTOM""));
/*     */     
/* 145 */     newMC.setProperty(""enableSwA"", ori.getProperty(""enableSwA""));
/*     */ 
/*     */     
/* 148 */     newMC.setDoingREST(ori.isDoingREST());
/* 149 */     newMC.setDoingMTOM(ori.isDoingMTOM());
/* 150 */     newMC.setDoingSwA(ori.isDoingSwA());
/*     */ 
/*     */ 
/*     */     
/* 154 */     Attachments attachments = ori.getAttachmentMap();
/* 155 */     if (attachments != null && (attachments.getAllContentIDs()).length > 0) {
/* 156 */       String[] cIDs = attachments.getAllContentIDs();
/* 157 */       String soapPart = attachments.getSOAPPartContentID();
/* 158 */       for (String cID : cIDs) {
/* 159 */         if (!cID.equals(soapPart)) {
/* 160 */           newMC.addAttachment(cID, attachments.getDataHandler(cID));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 165 */     for (Object o : ori.getOptions().getProperties().keySet()) {
/* 166 */       String key = (String)o;
/* 167 */       newMC.getOptions().setProperty(key, ori.getOptions().getProperty(key));
/*     */     } 
/*     */     
/* 170 */     for (Object o1 : ori.getProperties().keySet()) {
/* 171 */       String key = (String)o1;
/* 172 */       newMC.setProperty(key, ori.getProperty(key));
/*     */     } 
/*     */     
/* 175 */     newMC.setServerSide(false);
/*     */     
/* 177 */     return newMC;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SOAPEnvelope cloneSOAPEnvelope(SOAPEnvelope envelope) {
/*     */     SOAPEnvelope newEnvelope;
/* 189 */     if (""http://schemas.xmlsoap.org/soap/envelope/"".equals(envelope.getBody().getNamespace().getNamespaceURI())) {
/*     */       
/* 191 */       newEnvelope = OMAbstractFactory.getSOAP11Factory().getDefaultEnvelope();
/*     */     } else {
/* 193 */       newEnvelope = OMAbstractFactory.getSOAP12Factory().getDefaultEnvelope();
/*     */     } 
/*     */     
/* 196 */     if (envelope.getHeader() != null) {
/* 197 */       Iterator<OMNode> itr = envelope.getHeader().cloneOMElement().getChildren();
/* 198 */       while (itr.hasNext()) {
/* 199 */         newEnvelope.getHeader().addChild(itr.next());
/*     */       }
/*     */     } 
/*     */     
/* 203 */     if (envelope.getBody() != null) {
/* 204 */       Iterator<OMNode> itr = envelope.getBody().cloneOMElement().getChildren();
/* 205 */       while (itr.hasNext()) {
/* 206 */         newEnvelope.getBody().addChild(itr.next());
/*     */       }
/*     */     } 
/*     */     
/* 210 */     return newEnvelope;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SOAPEnvelope removeAddressingHeaders(MessageContext axisMsgCtx) {
/* 223 */     SOAPEnvelope env = axisMsgCtx.getEnvelope();
/* 224 */     SOAPHeader soapHeader = env.getHeader();
/*     */ 
/*     */     
/* 227 */     if (soapHeader != null) {
/* 228 */       ArrayList addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://schemas.xmlsoap.org/ws/2004/08/addressing"");
/*     */ 
/*     */       
/* 231 */       if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 232 */         detachAddressingInformation(addressingHeaders);
/*     */       } else {
/*     */         
/* 235 */         addressingHeaders = soapHeader.getHeaderBlocksWithNSURI(""http://www.w3.org/2005/08/addressing"");
/*     */         
/* 237 */         if (addressingHeaders != null && addressingHeaders.size() != 0) {
/* 238 */           detachAddressingInformation(addressingHeaders);
/*     */         }
/*     */       } 
/*     */     } 
/* 242 */     return env;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void detachAddressingInformation(ArrayList headerInformation) {
/* 251 */     for (Object o : headerInformation) {
/* 252 */       if (o instanceof SOAPHeaderBlock) {
/* 253 */         SOAPHeaderBlock headerBlock = (SOAPHeaderBlock)o;
/* 254 */         headerBlock.detach(); continue;
/* 255 */       }  if (o instanceof OMElement) {
/*     */         
/* 257 */         OMElement om = (OMElement)o;
/* 258 */         OMNamespace ns = om.getNamespace();
/* 259 */         if (ns != null && (""http://schemas.xmlsoap.org/ws/2004/08/addressing"".equals(ns.getNamespaceURI()) || ""http://www.w3.org/2005/08/addressing"".equals(ns.getNamespaceURI())))
/*     */         {
/*     */           
/* 262 */           om.detach();
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\MessageHelper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.PayloadHelper,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.util.Iterator;
/*     */ import javax.activation.DataHandler;
/*     */ import javax.xml.namespace.QName;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.OMText;
/*     */ import org.apache.axiom.om.impl.builder.StAXOMBuilder;
/*     */ import org.apache.axiom.soap.SOAPBody;
/*     */ import org.apache.axiom.soap.SOAPEnvelope;
/*     */ import org.apache.axiom.soap.SOAPVersion;
/*     */ import org.apache.commons.logging.Log;
/*     */ import org.apache.commons.logging.LogFactory;
/*     */ import org.apache.synapse.MessageContext;
/*     */ import org.apache.synapse.SynapseException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PayloadHelper
/*     */ {
/*     */   public static final String AXIOMPAYLOADNS = ""http://ws.apache.org/commons/ns/payload"";
/*  32 */   public static final QName BINARYELT = new QName(""http://ws.apache.org/commons/ns/payload"", ""binary"", ""ax"");
/*     */ 
/*     */   
/*  35 */   public static final QName TEXTELT = new QName(""http://ws.apache.org/commons/ns/payload"", ""text"", ""ax"");
/*     */   
/*  37 */   public static final QName MAPELT = new QName(""http://ws.apache.org/commons/ns/payload"", ""map"", ""ax"");
/*     */   public static final int XMLPAYLOADTYPE = 0;
/*     */   public static final int BINARYPAYLOADTYPE = 1;
/*     */   public static final int TEXTPAYLOADTYPE = 2;
/*     */   public static final int MAPPAYLOADTYPE = 3;
/*  42 */   public static final Log log = LogFactory.getLog(PayloadHelper.class);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getPayloadType(SOAPEnvelope envelope) {
/*  48 */     OMElement el = getXMLPayload(envelope);
/*  49 */     if (el.getQName().equals(BINARYELT))
/*  50 */       return 1; 
/*  51 */     if (el.getQName().equals(TEXTELT))
/*  52 */       return 2; 
/*  53 */     if (el.getQName().equals(MAPELT)) {
/*  54 */       return 3;
/*     */     }
/*  56 */     return 0;
/*     */   }
/*     */   
/*     */   public static int getPayloadType(MessageContext mc) {
/*  60 */     if (mc.getEnvelope() == null)
/*  61 */       return 0; 
/*  62 */     return getPayloadType(mc.getEnvelope());
/*     */   }
/*     */ 
/*     */   
/*     */   public static OMElement getXMLPayload(SOAPEnvelope envelope) {
/*  67 */     SOAPBody body = envelope.getBody();
/*  68 */     if (body == null) {
/*  69 */       log.error(""No body found"");
/*  70 */       return null;
/*     */     } 
/*  72 */     OMElement bodyEl = body.getFirstElement();
/*  73 */     if (bodyEl == null) {
/*  74 */       log.error(""No body child found"");
/*  75 */       return null;
/*     */     } 
/*  77 */     return bodyEl;
/*     */   }
/*     */   
/*     */   public static void setXMLPayload(SOAPEnvelope envelope, OMElement element) {
/*  81 */     SOAPBody body = envelope.getBody();
/*  82 */     if (body == null) {
/*     */       
/*  84 */       SOAPVersion version = envelope.getVersion();
/*  85 */       if (version.getEnvelopeURI().equals(""http://schemas.xmlsoap.org/soap/envelope/"")) {
/*     */         
/*  87 */         body = OMAbstractFactory.getSOAP11Factory().createSOAPBody();
/*     */       } else {
/*  89 */         body = OMAbstractFactory.getSOAP12Factory().createSOAPBody();
/*     */       } 
/*  91 */       if (envelope.getHeader() != null) {
/*  92 */         envelope.getHeader().insertSiblingAfter((OMNode)body);
/*     */       } else {
/*  94 */         envelope.addChild((OMNode)body);
/*     */       } 
/*     */     } else {
/*  97 */       for (Iterator<OMNode> it = body.getChildren(); it.hasNext(); ) {
/*  98 */         OMNode node = it.next();
/*  99 */         node.discard();
/*     */       } 
/*     */     } 
/* 102 */     body.addChild((OMNode)element);
/*     */   }
/*     */   
/*     */   public static void setXMLPayload(MessageContext mc, OMElement element) {
/* 106 */     if (mc.getEnvelope() == null) {
/*     */       try {
/* 108 */         mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/*     */       }
/* 110 */       catch (Exception e) {
/* 111 */         throw new SynapseException(e);
/*     */       } 
/*     */     }
/* 114 */     setXMLPayload(mc.getEnvelope(), element);
/*     */   }
/*     */ 
/*     */   
/*     */   public static DataHandler getBinaryPayload(SOAPEnvelope envelope) {
/* 119 */     OMElement el = getXMLPayload(envelope);
/* 120 */     if (el == null)
/* 121 */       return null; 
/* 122 */     if (!el.getQName().equals(BINARYELT)) {
/* 123 */       log.error(""Wrong QName"" + el.getQName());
/* 124 */       return null;
/*     */     } 
/* 126 */     OMNode textNode = el.getFirstOMChild();
/* 127 */     if (textNode.getType() != 4) {
/* 128 */       log.error(""Text Node not found"");
/* 129 */       return null;
/*     */     } 
/* 131 */     OMText text = (OMText)textNode;
/* 132 */     DataHandler dh = null;
/*     */     try {
/* 134 */       dh = (DataHandler)text.getDataHandler();
/* 135 */     } catch (ClassCastException ce) {
/* 136 */       log.error(""cannot get DataHandler"" + ce.getMessage());
/* 137 */       return null;
/*     */     } 
/* 139 */     return dh;
/*     */   }
/*     */ 
/*     */   
/*     */   public static DataHandler getBinaryPayload(MessageContext mc) {
/* 144 */     if (mc.getEnvelope() == null) {
/* 145 */       log.error(""null envelope"");
/* 146 */       return null;
/*     */     } 
/* 148 */     return getBinaryPayload(mc.getEnvelope());
/*     */   }
/*     */   
/*     */   public static void setBinaryPayload(SOAPEnvelope envelope, DataHandler dh) {
/* 152 */     OMFactory fac = envelope.getOMFactory();
/* 153 */     OMElement binaryElt = envelope.getOMFactory().createOMElement(BINARYELT);
/*     */     
/* 155 */     OMText text = fac.createOMText(dh, true);
/* 156 */     binaryElt.addChild((OMNode)text);
/* 157 */     setXMLPayload(envelope, binaryElt);
/*     */   }
/*     */   
/*     */   public static void setBinaryPayload(MessageContext mc, DataHandler dh) {
/* 161 */     if (mc.getEnvelope() == null) {
/*     */       try {
/* 163 */         mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/*     */       }
/* 165 */       catch (Exception e) {
/* 166 */         throw new SynapseException(e);
/*     */       } 
/*     */     }
/* 169 */     setBinaryPayload(mc.getEnvelope(), dh);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getTextPayload(SOAPEnvelope envelope) {
/* 175 */     OMElement el = getXMLPayload(envelope);
/* 176 */     if (el == null)
/* 177 */       return null; 
/* 178 */     if (!el.getQName().equals(TEXTELT)) {
/* 179 */       log.error(""Wrong QName"" + el.getQName());
/* 180 */       return null;
/*     */     } 
/* 182 */     OMNode textNode = el.getFirstOMChild();
/* 183 */     if (textNode.getType() != 4) {
/* 184 */       log.error(""Text Node not found"");
/* 185 */       return null;
/*     */     } 
/* 187 */     OMText text = (OMText)textNode;
/* 188 */     return text.getText();
/*     */   }
/*     */   
/*     */   public static String getTextPayload(MessageContext mc) {
/* 192 */     if (mc.getEnvelope() == null) {
/* 193 */       log.error(""null envelope"");
/* 194 */       return null;
/*     */     } 
/* 196 */     return getTextPayload(mc.getEnvelope());
/*     */   }
/*     */   
/*     */   public static void setTextPayload(SOAPEnvelope envelope, String text) {
/* 200 */     OMFactory fac = envelope.getOMFactory();
/* 201 */     OMElement textElt = envelope.getOMFactory().createOMElement(TEXTELT);
/* 202 */     OMText textNode = fac.createOMText(text);
/* 203 */     textElt.addChild((OMNode)textNode);
/* 204 */     setXMLPayload(envelope, textElt);
/*     */   }
/*     */   
/*     */   public static void setTextPayload(MessageContext mc, String text) {
/* 208 */     if (mc.getEnvelope() == null) {
/*     */       try {
/* 210 */         mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/*     */       }
/* 212 */       catch (Exception e) {
/* 213 */         throw new SynapseException(e);
/*     */       } 
/*     */     }
/* 216 */     setTextPayload(mc.getEnvelope(), text);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static SimpleMap getMapPayload(SOAPEnvelope envelope) {
/* 222 */     OMElement el = getXMLPayload(envelope);
/* 223 */     if (el == null)
/* 224 */       return null; 
/* 225 */     if (!el.getQName().equals(MAPELT)) {
/* 226 */       log.error(""Wrong QName"" + el.getQName());
/* 227 */       return null;
/*     */     } 
/* 229 */     SimpleMap map = new SimpleMapImpl(el);
/* 230 */     return map;
/*     */   }
/*     */   
/*     */   public static SimpleMap getMapPayload(MessageContext mc) {
/* 234 */     if (mc.getEnvelope() == null) {
/* 235 */       log.error(""null envelope"");
/* 236 */       return null;
/*     */     } 
/* 238 */     return getMapPayload(mc.getEnvelope());
/*     */   }
/*     */ 
/*     */   
/*     */   public static void setMapPayload(SOAPEnvelope envelope, SimpleMap map) {
/* 243 */     if (map instanceof SimpleMapImpl) {
/* 244 */       SimpleMapImpl impl = (SimpleMapImpl)map;
/* 245 */       OMElement mapElt = impl.getOMElement(envelope.getOMFactory());
/* 246 */       if (mapElt == null) {
/* 247 */         log.debug(""null map element returned"");
/*     */         return;
/*     */       } 
/* 250 */       setXMLPayload(envelope, mapElt);
/*     */     } else {
/* 252 */       throw new SynapseException(""cannot handle any other instance of SimpleMap at this point TODO"");
/*     */     } 
/*     */   }
/*     */   
/*     */   public static void setMapPayload(MessageContext mc, SimpleMap map) {
/* 257 */     if (mc.getEnvelope() == null) {
/*     */       try {
/* 259 */         mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/*     */       }
/* 261 */       catch (Exception e) {
/* 262 */         throw new SynapseException(e);
/*     */       } 
/*     */     }
/* 265 */     setMapPayload(mc.getEnvelope(), map);
/*     */   }
/*     */ 
/*     */   
/*     */   public static XMLStreamReader getStAXPayload(SOAPEnvelope envelope) {
/* 270 */     OMElement el = getXMLPayload(envelope);
/* 271 */     if (el == null) {
/* 272 */       return null;
/*     */     }
/* 274 */     return el.getXMLStreamReader();
/*     */   }
/*     */   public static XMLStreamReader getStAXPayload(MessageContext mc) {
/* 277 */     if (mc.getEnvelope() == null) {
/* 278 */       log.error(""null envelope"");
/* 279 */       return null;
/*     */     } 
/* 281 */     return getStAXPayload(mc.getEnvelope());
/*     */   }
/*     */   public static void setStAXPayload(SOAPEnvelope envelope, XMLStreamReader streamReader) {
/* 284 */     StAXOMBuilder builder = new StAXOMBuilder(envelope.getOMFactory(), streamReader);
/* 285 */     OMElement el = builder.getDocumentElement();
/* 286 */     setXMLPayload(envelope, el);
/*     */   }
/*     */   public static void setStAXPayload(MessageContext mc, XMLStreamReader streamReader) {
/* 289 */     if (mc.getEnvelope() == null) {
/*     */       try {
/* 291 */         mc.setEnvelope(OMAbstractFactory.getSOAP12Factory().createSOAPEnvelope());
/*     */       }
/* 293 */       catch (Exception e) {
/* 294 */         throw new SynapseException(e);
/*     */       } 
/* 296 */       setStAXPayload(mc.getEnvelope(), streamReader);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\PayloadHelper.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.SimpleMap,"package org.apache.synapse.util;
import java.util.Map;
public interface SimpleMap extends Map {
  Object get(String paramString);
  void put(String paramString, Object paramObject);
  boolean getBoolean(String paramString);
  void putBoolean(String paramString, boolean paramBoolean);
  String getString(String paramString);
  void putString(String paramString1, String paramString2);
  char getChar(String paramString);
  void putChar(String paramString, char paramChar);
  int getInt(String paramString);
  void putInt(String paramString, int paramInt);
  short getShort(String paramString);
  void putShort(String paramString, short paramShort);
  float getFloat(String paramString);
  void putFloat(String paramString, float paramFloat);
  double getDouble(String paramString);
  void putDouble(String paramString, double paramDouble);
  long getLong(String paramString);
  void putLong(String paramString, long paramLong);
  byte getByte(String paramString);
  void putByte(String paramString, byte paramByte);
  byte[] getBytes(String paramString);
  void putBytes(String paramString, byte[] paramArrayOfbyte);
}
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\SimpleMap.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.SimpleMapImpl,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import javax.activation.DataHandler;
/*     */ import javax.activation.DataSource;
/*     */ import javax.xml.namespace.QName;
/*     */ import org.apache.axiom.attachments.ByteArrayDataSource;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMContainer;
/*     */ import org.apache.axiom.om.OMElement;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMNamespace;
/*     */ import org.apache.axiom.om.OMNode;
/*     */ import org.apache.axiom.om.OMText;
/*     */ 
/*     */ public class SimpleMapImpl
/*     */   extends HashMap
/*     */   implements SimpleMap {
/*  21 */   private static final OMNamespace attrNS = OMAbstractFactory.getOMFactory().createOMNamespace("""", """");
/*     */   
/*     */   private static final String TYPE = ""type"";
/*     */   
/*     */   private static final String NAME = ""name"";
/*     */   
/*     */   private static final String ENTRY = ""entry"";
/*     */   
/*     */   private static final String SHORT = ""short"";
/*     */   
/*     */   private static final String LONG = ""long"";
/*     */   
/*     */   private static final String DOUBLE = ""double"";
/*     */   
/*     */   private static final String INTEGER = ""int"";
/*     */   
/*     */   private static final String FLOAT = ""float"";
/*     */   
/*     */   private static final String BYTEARRAY = ""byte[]"";
/*     */   
/*     */   private static final String BYTE = ""byte"";
/*     */   
/*     */   private static final String STRING = ""string"";
/*     */   
/*     */   private static final String BOOLEAN = ""boolean"";
/*     */   
/*     */   private static final String CHAR = ""char"";
/*     */   
/*     */   private static final long serialVersionUID = 1L;
/*     */   
/*     */   public SimpleMapImpl() {}
/*     */   
/*  53 */   public Object get(String name) { return get(name); }
/*     */ 
/*     */   
/*     */   public boolean getBoolean(String name) {
/*  57 */     Object o = get(name);
/*  58 */     if (o instanceof Boolean) {
/*  59 */       return ((Boolean)o).booleanValue();
/*     */     }
/*  61 */     throw new RuntimeException(""getBoolean("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Boolean"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public byte getByte(String name) {
/*  67 */     Object o = get(name);
/*  68 */     if (o instanceof Byte) {
/*  69 */       return ((Byte)o).byteValue();
/*     */     }
/*  71 */     throw new RuntimeException(""getByte("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Byte"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes(String name) {
/*  77 */     Object o = get(name);
/*  78 */     if (o instanceof byte[]) {
/*  79 */       return (byte[])o;
/*     */     }
/*  81 */     throw new RuntimeException(""getByteArray("" + name + ""): "" + o.getClass().getName() + "" is not an instance of byte[]"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public char getChar(String name) {
/*  87 */     Object o = get(name);
/*  88 */     if (o instanceof Character) {
/*  89 */       return ((Character)o).charValue();
/*     */     }
/*  91 */     throw new RuntimeException(""getChar("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Character"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public double getDouble(String name) {
/*  98 */     Object o = get(name);
/*  99 */     if (o instanceof Double) {
/* 100 */       return ((Double)o).doubleValue();
/*     */     }
/* 102 */     throw new RuntimeException(""getDouble("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Double"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public float getFloat(String name) {
/* 108 */     Object o = get(name);
/* 109 */     if (o instanceof Float) {
/* 110 */       return ((Float)o).floatValue();
/*     */     }
/* 112 */     throw new RuntimeException(""getFloat("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Float"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public int getInt(String name) {
/* 118 */     Object o = get(name);
/* 119 */     if (o instanceof Integer) {
/* 120 */       return ((Integer)o).intValue();
/*     */     }
/* 122 */     throw new RuntimeException(""getInt("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Integer"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public long getLong(String name) {
/* 128 */     Object o = get(name);
/* 129 */     if (o instanceof Long) {
/* 130 */       return ((Long)o).longValue();
/*     */     }
/* 132 */     throw new RuntimeException(""getLong("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Long"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public short getShort(String name) {
/* 138 */     Object o = get(name);
/* 139 */     if (o instanceof Short) {
/* 140 */       return ((Short)o).shortValue();
/*     */     }
/* 142 */     throw new RuntimeException(""getShort("" + name + ""): "" + o.getClass().getName() + "" is not an instance of Short"");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public String getString(String name) {
/* 148 */     Object o = get(name);
/* 149 */     if (o instanceof String) {
/* 150 */       return (String)o;
/*     */     }
/* 152 */     throw new RuntimeException(""getString("" + name + ""): "" + o.getClass().getName() + "" is not an instance of String"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void put(String name, Object value) { put((K)name, (V)value); }
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void putBoolean(String name, boolean b) { put((K)name, (V)new Boolean(b)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void putByte(String name, byte b) { put((K)name, (V)new Byte(b)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void putBytes(String name, byte[] bytes) { put((K)name, (V)bytes); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   public void putChar(String name, char c) { put((K)name, (V)new Character(c)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void putDouble(String name, double d) { put((K)name, (V)new Double(d)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void putFloat(String name, float fl) { put((K)name, (V)new Float(fl)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void putInt(String name, int i) { put((K)name, (V)new Integer(i)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void putLong(String name, long l) { put((K)name, (V)new Long(l)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void putShort(String name, short s) { put((K)name, (V)new Short(s)); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void putString(String name, String value) { put((K)name, (V)value); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public OMElement getOMElement() { return getOMElement(OMAbstractFactory.getOMFactory()); }
/*     */ 
/*     */   
/*     */   public OMElement getOMElement(OMFactory fac) {
/* 216 */     OMElement mapElement = fac.createOMElement(PayloadHelper.MAPELT);
/*     */     
/* 218 */     for (Iterator<K> it = keySet().iterator(); it.hasNext(); ) {
/* 219 */       OMElement entry = fac.createOMElement(new QName(""http://ws.apache.org/commons/ns/payload"", ""entry""), (OMContainer)mapElement);
/*     */ 
/*     */ 
/*     */       
/* 223 */       Object key = it.next();
/* 224 */       System.out.println(""key "" + key);
/* 225 */       if (key instanceof String) {
/* 226 */         Object o = get(key);
/* 227 */         System.out.println(""key "" + key);
/* 228 */         entry.addAttribute(""name"", (String)key, attrNS);
/* 229 */         if (o instanceof Character) {
/* 230 */           entry.addAttribute(""type"", ""char"", attrNS);
/* 231 */           entry.setText(o.toString()); continue;
/* 232 */         }  if (o instanceof Boolean) {
/* 233 */           entry.addAttribute(""type"", ""boolean"", attrNS);
/* 234 */           entry.setText(o.toString()); continue;
/* 235 */         }  if (o instanceof String) {
/* 236 */           entry.addAttribute(""type"", ""string"", attrNS);
/* 237 */           entry.setText(o.toString()); continue;
/* 238 */         }  if (o instanceof Byte) {
/* 239 */           entry.addAttribute(""type"", ""byte"", attrNS);
/* 240 */           entry.setText(((Byte)o).toString()); continue;
/* 241 */         }  if (o instanceof byte[]) {
/* 242 */           entry.addAttribute(""type"", ""byte[]"", attrNS);
/* 243 */           OMText text = fac.createOMText(new DataHandler((DataSource)new ByteArrayDataSource((byte[])o)), true);
/*     */           
/* 245 */           entry.addChild((OMNode)text); continue;
/* 246 */         }  if (o instanceof Float) {
/* 247 */           entry.addAttribute(""type"", ""float"", attrNS);
/* 248 */           entry.setText(o.toString()); continue;
/* 249 */         }  if (o instanceof Double) {
/* 250 */           entry.addAttribute(""type"", ""double"", attrNS);
/* 251 */           entry.setText(o.toString()); continue;
/* 252 */         }  if (o instanceof Long) {
/* 253 */           entry.addAttribute(""type"", ""long"", attrNS);
/* 254 */           entry.setText(o.toString()); continue;
/* 255 */         }  if (o instanceof Short) {
/* 256 */           entry.addAttribute(""type"", ""short"", attrNS);
/* 257 */           entry.setText(o.toString()); continue;
/* 258 */         }  if (o instanceof Integer) {
/* 259 */           entry.addAttribute(""type"", ""int"", attrNS);
/* 260 */           entry.setText(o.toString());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 268 */     return mapElement;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public SimpleMapImpl(OMElement el) {
/* 274 */     if (el.getQName().equals(PayloadHelper.MAPELT))
/* 275 */       for (Iterator<OMElement> it = el.getChildElements(); it.hasNext(); ) {
/* 276 */         OMElement child = it.next();
/* 277 */         if (child.getLocalName().equals(""entry"")) {
/* 278 */           String name = child.getAttributeValue(new QName("""", ""name""));
/* 279 */           String type = child.getAttributeValue(new QName("""", ""type""));
/*     */           try {
/* 281 */             if (type == null || name == null) {
/*     */               continue;
/*     */             }
/*     */             
/* 285 */             OMNode data = child.getFirstOMChild();
/* 286 */             if (data.getType() != 4) {
/*     */               continue;
/*     */             }
/* 289 */             OMText text = (OMText)data;
/* 290 */             if (type.equals(""int"")) {
/* 291 */               put((K)name, (V)new Integer(text.getText())); continue;
/* 292 */             }  if (type.equals(""char"")) {
/* 293 */               put((K)name, (V)new Character(text.getText().charAt(0))); continue;
/* 294 */             }  if (type.equals(""double"")) {
/* 295 */               put((K)name, (V)new Double(text.getText())); continue;
/* 296 */             }  if (type.equals(""float"")) {
/* 297 */               put((K)name, (V)new Float(text.getText())); continue;
/* 298 */             }  if (type.equals(""byte"")) {
/* 299 */               put((K)name, (V)new Byte(text.getText().getBytes()[0])); continue;
/* 300 */             }  if (type.equals(""short"")) {
/* 301 */               put((K)name, (V)new Short(text.getText())); continue;
/* 302 */             }  if (type.equals(""long"")) {
/* 303 */               put((K)name, (V)new Long(text.getText())); continue;
/* 304 */             }  if (type.equals(""string"")) {
/* 305 */               put((K)name, (V)text.getText()); continue;
/* 306 */             }  if (type.equals(""byte[]"")) {
/* 307 */               DataHandler dh = (DataHandler)text.getDataHandler();
/* 308 */               ByteArrayOutputStream baos = new ByteArrayOutputStream();
/* 309 */               dh.writeTo(baos);
/* 310 */               put((K)name, (V)baos.toByteArray());
/*     */             } 
/* 312 */           } catch (Exception e) {
/* 313 */             e.printStackTrace();
/*     */           } 
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\SimpleMapImpl.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.TextFileDataSource,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.io.Writer;
/*     */ import javax.activation.DataSource;
/*     */ import javax.activation.FileDataSource;
/*     */ import javax.xml.stream.XMLStreamException;
/*     */ import javax.xml.stream.XMLStreamReader;
/*     */ import javax.xml.stream.XMLStreamWriter;
/*     */ import org.apache.axiom.om.OMAbstractFactory;
/*     */ import org.apache.axiom.om.OMDataSource;
/*     */ import org.apache.axiom.om.OMFactory;
/*     */ import org.apache.axiom.om.OMOutputFormat;
/*     */ import org.apache.axiom.om.impl.llom.OMSourcedElementImpl;
/*     */ import org.apache.axiom.om.impl.serialize.StreamingOMSerializer;
/*     */ import org.apache.axiom.om.util.StAXUtils;
/*     */ import org.apache.synapse.SynapseException;
/*     */ import org.apache.synapse.transport.base.BaseConstants;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TextFileDataSource
/*     */   implements OMDataSource
/*     */ {
/*  41 */   private static final byte[] prefix = ""<text xmlns=\""http://ws.apache.org/commons/ns/payload\"">"".getBytes();
/*     */   
/*  43 */   private static final byte[] suffix = ""</text>"".getBytes();
/*  44 */   private static final byte[] empty = ""<text xmlns=\""http://ws.apache.org/commons/ns/payload\""/>"".getBytes();
/*     */   
/*  46 */   private InputStream is = null;
/*  47 */   private int i = 0, j = 0;
/*     */   
/*     */   public TextFileDataSource(DataSource ds) {
/*     */     try {
/*  51 */       this.is = ds.getInputStream();
/*  52 */     } catch (IOException e) {
/*  53 */       throw new SynapseException(""Unable to get an InputStream for DataSource : "" + ds.getName(), e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void serialize(OutputStream out, OMOutputFormat format) throws XMLStreamException {
/*     */     try {
/*  62 */       byte[] buf = new byte[4096];
/*     */       int len;
/*  64 */       while ((len = this.is.read(buf)) > 0) {
/*  65 */         out.write(buf, 0, len);
/*     */       }
/*     */     }
/*  68 */     catch (IOException e) {
/*  69 */       throw new SynapseException(""Error serializing TextFileDataSource to an OutputStream"", e);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void serialize(Writer writer, OMOutputFormat format) throws XMLStreamException {
/*     */     try {
/*  75 */       writer.write(new String(empty));
/*  76 */     } catch (IOException e) {
/*  77 */       throw new XMLStreamException(e);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void serialize(XMLStreamWriter xmlWriter) throws XMLStreamException {
/*  82 */     StreamingOMSerializer serializer = new StreamingOMSerializer();
/*  83 */     serializer.serialize(getReader(), xmlWriter);
/*     */   }
/*     */ 
/*     */   
/*  87 */   public XMLStreamReader getReader() throws XMLStreamException { return StAXUtils.createXMLStreamReader(getInputStream()); }
/*     */ 
/*     */ 
/*     */   
/*     */   private InputStream getInputStream() {
/*  92 */     return new InputStream()
/*     */       {
/*     */         public int read(byte[] b) throws IOException {
/*  95 */           return read(b, 0, b.length);
/*     */         }
/*     */         
/*     */         public int read(byte[] b, int off, int len) throws IOException {
/*  99 */           int pos = off;
/* 100 */           if (TextFileDataSource.this.i < prefix.length) {
/* 101 */             while (TextFileDataSource.this.i < prefix.length && pos - off < len) {
/* 102 */               b[pos++] = prefix[TextFileDataSource.this.i++];
/*     */             }
/* 104 */             return pos - off;
/*     */           } 
/*     */           
/* 107 */           int ret = TextFileDataSource.this.is.read(b, pos, len - pos);
/*     */           
/* 109 */           if (ret == -1 && TextFileDataSource.this.j < suffix.length) {
/* 110 */             while (TextFileDataSource.this.j < suffix.length && pos - off < len) {
/* 111 */               b[pos++] = suffix[TextFileDataSource.this.j++];
/*     */             }
/* 113 */             return pos - off;
/*     */           } 
/*     */           
/* 116 */           return ret;
/*     */         }
/*     */         
/*     */         public int read() throws IOException {
/* 120 */           if (TextFileDataSource.this.i < prefix.length && 
/* 121 */             TextFileDataSource.this.i < prefix.length) {
/* 122 */             return prefix[TextFileDataSource.this.i++];
/*     */           }
/*     */           
/* 125 */           int ret = TextFileDataSource.this.is.read();
/*     */           
/* 127 */           if (ret == -1 && TextFileDataSource.this.j < suffix.length && 
/* 128 */             TextFileDataSource.this.j < suffix.length) {
/* 129 */             return suffix[TextFileDataSource.this.j++];
/*     */           }
/*     */           
/* 132 */           return ret;
/*     */         }
/*     */       };
/*     */   }
/*     */   
/*     */   public static void main(String[] args) throws Exception {
/* 138 */     TextFileDataSource textFileDataSource = new TextFileDataSource(new FileDataSource(""/home/asankha/code/synapse/repository/conf/sample/resources/transform/message.xml""));
/*     */ 
/*     */ 
/*     */     
/* 142 */     OMFactory fac = OMAbstractFactory.getOMFactory();
/* 143 */     OMSourcedElementImpl element = new OMSourcedElementImpl(BaseConstants.DEFAULT_TEXT_WRAPPER, fac, textFileDataSource);
/*     */ 
/*     */     
/* 146 */     element.serializeAndConsume(new FileOutputStream(""/tmp/out.txt""));
/* 147 */     element.serialize(System.out);
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\TextFileDataSource.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.UUIDGenerator,"/*     */ package org.apache.synapse.util;
/*     */ 
/*     */ import java.net.InetAddress;
/*     */ import java.net.UnknownHostException;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UUIDGenerator
/*     */ {
/*  34 */   private static String baseUUID = null;
/*  35 */   private static long incrementingValue = 0L;
/*     */   
/*  37 */   private static Random myRand = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean useNano = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getUUID() {
/*  47 */     if (baseUUID == null) {
/*  48 */       baseUUID = getInitialUUID();
/*  49 */       baseUUID = ""urn:uuid:"" + baseUUID;
/*     */     } 
/*  51 */     if (++incrementingValue >= Long.MAX_VALUE) {
/*  52 */       incrementingValue = 0L;
/*     */     }
/*     */     
/*  55 */     if (useNano) {
/*  56 */       return baseUUID + (System.nanoTime() + incrementingValue) + Integer.toString(myRand.nextInt());
/*     */     }
/*     */ 
/*     */     
/*  60 */     return baseUUID + (System.currentTimeMillis() + incrementingValue) + Integer.toString(myRand.nextInt());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static String getInitialUUID() {
/*     */     String str;
/*     */     try {
/*  69 */       if (System.class.getMethod(""nanoTime"", new Class[0]) != null) {
/*  70 */         useNano = true;
/*     */       }
/*  72 */     } catch (NoSuchMethodException ignore) {}
/*     */     
/*  74 */     if (myRand == null) {
/*  75 */       myRand = new Random();
/*     */     }
/*  77 */     long rand = myRand.nextLong();
/*     */     
/*     */     try {
/*  80 */       str = InetAddress.getLocalHost().toString();
/*  81 */     } catch (UnknownHostException e) {
/*  82 */       str = Thread.currentThread().getName();
/*     */     } 
/*  84 */     StringBuffer sb = new StringBuffer();
/*  85 */     sb.append(str);
/*  86 */     sb.append("":"");
/*  87 */     sb.append(Long.toString(rand));
/*  88 */     MessageDigest md5 = null;
/*     */     try {
/*  90 */       md5 = MessageDigest.getInstance(""MD5"");
/*  91 */     } catch (NoSuchAlgorithmException e) {}
/*     */ 
/*     */ 
/*     */     
/*  95 */     md5.update(sb.toString().getBytes());
/*  96 */     byte[] array = md5.digest();
/*  97 */     StringBuffer sb2 = new StringBuffer();
/*  98 */     for (int j = 0; j < array.length; j++) {
/*  99 */       int b = array[j] & 0xFF;
/* 100 */       sb2.append(Integer.toHexString(b));
/*     */     } 
/* 102 */     int begin = myRand.nextInt();
/* 103 */     if (begin < 0) begin *= -1; 
/* 104 */     begin %= 8;
/* 105 */     return sb2.toString().substring(begin, begin + 18).toUpperCase();
/*     */   }
/*     */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\UUIDGenerator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.concurrent.SynapseThreadFactory,"/*    */ package org.apache.synapse.util.concurrent;
/*    */ 
/*    */ import java.util.concurrent.ThreadFactory;
/*    */ import java.util.concurrent.atomic.AtomicInteger;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseThreadFactory
/*    */   implements ThreadFactory
/*    */ {
/*    */   final ThreadGroup group;
/*    */   final AtomicInteger count;
/*    */   final String namePrefix;
/*    */   
/*    */   public SynapseThreadFactory(ThreadGroup group, String namePrefix) {
/* 48 */     this.count = new AtomicInteger(1);
/* 49 */     this.group = group;
/* 50 */     this.namePrefix = namePrefix;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Thread newThread(Runnable runnable) {
/* 62 */     StringBuffer buffer = new StringBuffer();
/* 63 */     buffer.append(this.namePrefix);
/* 64 */     buffer.append('-');
/* 65 */     buffer.append(this.count.getAndIncrement());
/* 66 */     Thread t = new Thread(this.group, runnable, buffer.toString(), 0L);
/* 67 */     t.setDaemon(false);
/* 68 */     t.setPriority(5);
/* 69 */     return t;
/*    */   }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\concurrent\SynapseThreadFactory.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
org.apache.synapse.util.concurrent.SynapseThreadPool,"/*    */ package org.apache.synapse.util.concurrent;
/*    */ 
/*    */ import java.util.concurrent.BlockingQueue;
/*    */ import java.util.concurrent.LinkedBlockingQueue;
/*    */ import java.util.concurrent.ThreadPoolExecutor;
/*    */ import java.util.concurrent.TimeUnit;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SynapseThreadPool
/*    */   extends ThreadPoolExecutor
/*    */ {
/*    */   public static final int SYNAPSE_CORE_THREADS = 20;
/*    */   public static final int SYNAPSE_MAX_THREADS = 100;
/*    */   public static final int SYNAPSE_KEEP_ALIVE = 5;
/*    */   public static final int SYNAPSE_THREAD_QLEN = 10;
/*    */   public static final String SYNAPSE_THREAD_GROUP = ""synapse-thread-group"";
/*    */   public static final String SYNAPSE_THREAD_ID_PREFIX = ""SynapseWorker"";
/*    */   public static final String SYN_THREAD_CORE = ""synapse.threads.core"";
/*    */   public static final String SYN_THREAD_MAX = ""synapse.threads.max"";
/*    */   public static final String SYN_THREAD_ALIVE = ""synapse.threads.keepalive"";
/*    */   public static final String SYN_THREAD_QLEN = ""synapse.threads.qlen"";
/*    */   public static final String SYN_THREAD_GROUP = ""synapse.threads.group"";
/*    */   public static final String SYN_THREAD_IDPREFIX = ""synapse.threads.idprefix"";
/*    */   
/* 59 */   public SynapseThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) { super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new SynapseThreadFactory(new ThreadGroup(""synapse-thread-group""), ""SynapseWorker"")); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 68 */   public SynapseThreadPool() { this(20, 100, 5L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>()); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public SynapseThreadPool(int corePoolSize, int maxPoolSize, long keepAliveTime, int qlen, String threadGroup, String threadIdPrefix) { super(corePoolSize, maxPoolSize, keepAliveTime, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(qlen), new SynapseThreadFactory(new ThreadGroup(threadGroup), threadIdPrefix)); }
/*    */ }
/* Location:              D:\资源包\synapse-core-1.1.jar!\org\apache\synaps\\util\concurrent\SynapseThreadPool.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.2
 */"
