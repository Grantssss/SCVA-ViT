metric_name,file
org.apache.tools.ant.AntClassLoader,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.ByteArrayOutputStream;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Constructor;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Method;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Vector;
/*      */ import java.util.zip.ZipEntry;
/*      */ import java.util.zip.ZipFile;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ import org.apache.tools.ant.util.LoaderUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class AntClassLoader
/*      */   extends ClassLoader
/*      */   implements BuildListener
/*      */ {
/*      */   private static final int BUFFER_SIZE = 8192;
/*      */   private static final int NUMBER_OF_STRINGS = 256;
/*      */   
/*      */   private class ResourceEnumeration
/*      */     implements Enumeration
/*      */   {
/*      */     private String resourceName;
/*      */     private int pathElementsIndex;
/*      */     private URL nextResource;
/*      */     private final AntClassLoader this$0;
/*      */     
/*      */     ResourceEnumeration(AntClassLoader this$0, String name) {
/*  122 */       this.this$0 = this$0;
/*  123 */       this.resourceName = name;
/*  124 */       this.pathElementsIndex = 0;
/*  125 */       findNextResource();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  136 */     public boolean hasMoreElements() { return (this.nextResource != null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object nextElement() {
/*  145 */       URL ret = this.nextResource;
/*  146 */       findNextResource();
/*  147 */       return ret;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void findNextResource() {
/*  157 */       URL url = null;
/*      */       
/*  159 */       while (this.pathElementsIndex < this.this$0.pathComponents.size() && url == null) {
/*      */         try {
/*  161 */           File pathComponent = this.this$0.pathComponents.elementAt(this.pathElementsIndex);
/*      */           
/*  163 */           url = this.this$0.getResourceURL(pathComponent, this.resourceName);
/*  164 */           this.pathElementsIndex++;
/*  165 */         } catch (BuildException e) {}
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  170 */       this.nextResource = url;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  187 */   private Vector pathComponents = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Project project;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean parentFirst = true;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  205 */   private Vector systemPackages = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  212 */   private Vector loaderPackages = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean ignoreBase = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  225 */   private ClassLoader parent = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  230 */   private Hashtable zipFiles = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  236 */   private ClassLoader savedContextLoader = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isContextLoaderSaved = false;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  246 */   private static Method getProtectionDomain = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  252 */   private static Method defineClassProtectionDomain = null;
/*      */   
/*      */   static Class array$B;
/*      */   
/*      */   static  {
/*      */     try {
/*  258 */       getProtectionDomain = Class.class.getMethod(""getProtectionDomain"", new Class[0]);
/*      */       
/*  260 */       Class protectionDomain = Class.forName(""java.security.ProtectionDomain"");
/*      */       
/*  262 */       Class[] args = { String.class, (array$B == null) ? (array$B = class$(""[B"")) : array$B, int.class, int.class, protectionDomain };
/*      */       
/*  264 */       defineClassProtectionDomain = ClassLoader.class.getDeclaredMethod(""defineClass"", args);
/*      */     }
/*  266 */     catch (Exception e) {}
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  276 */   public AntClassLoader() { setParent(null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(Project project, Path classpath) {
/*  291 */     setParent(null);
/*  292 */     setProject(project);
/*  293 */     setClassPath(classpath);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(ClassLoader parent, Project project, Path classpath, boolean parentFirst) {
/*  314 */     this(project, classpath);
/*  315 */     if (parent != null) {
/*  316 */       setParent(parent);
/*      */     }
/*  318 */     setParentFirst(parentFirst);
/*  319 */     addJavaLibraries();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  337 */   public AntClassLoader(Project project, Path classpath, boolean parentFirst) { this(null, project, classpath, parentFirst); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(ClassLoader parent, boolean parentFirst) {
/*  354 */     setParent(parent);
/*  355 */     this.project = null;
/*  356 */     this.parentFirst = parentFirst;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setProject(Project project) {
/*  365 */     this.project = project;
/*  366 */     if (project != null) {
/*  367 */       project.addBuildListener(this);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setClassPath(Path classpath) {
/*  379 */     this.pathComponents.removeAllElements();
/*  380 */     if (classpath != null) {
/*  381 */       Path actualClasspath = classpath.concatSystemClasspath(""ignore"");
/*  382 */       String[] pathElements = actualClasspath.list();
/*  383 */       for (int i = 0; i < pathElements.length; i++) {
/*      */         try {
/*  385 */           addPathElement(pathElements[i]);
/*  386 */         } catch (BuildException e) {}
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setParent(ClassLoader parent) {
/*  401 */     if (parent == null) {
/*  402 */       this.parent = AntClassLoader.class.getClassLoader();
/*      */     } else {
/*  404 */       this.parent = parent;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  417 */   public void setParentFirst(boolean parentFirst) { this.parentFirst = parentFirst; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void log(String message, int priority) {
/*  430 */     if (this.project != null) {
/*  431 */       this.project.log(message, priority);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setThreadContextLoader() {
/*  443 */     if (this.isContextLoaderSaved) {
/*  444 */       throw new BuildException(""Context loader has not been reset"");
/*      */     }
/*  446 */     if (LoaderUtils.isContextLoaderAvailable()) {
/*  447 */       this.savedContextLoader = LoaderUtils.getContextClassLoader();
/*  448 */       ClassLoader loader = this;
/*  449 */       if (this.project != null && ""only"".equals(this.project.getProperty(""build.sysclasspath"")))
/*      */       {
/*  451 */         loader = getClass().getClassLoader();
/*      */       }
/*  453 */       LoaderUtils.setContextClassLoader(loader);
/*  454 */       this.isContextLoaderSaved = true;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void resetThreadContextLoader() {
/*  462 */     if (LoaderUtils.isContextLoaderAvailable() && this.isContextLoaderSaved) {
/*      */       
/*  464 */       LoaderUtils.setContextClassLoader(this.savedContextLoader);
/*  465 */       this.savedContextLoader = null;
/*  466 */       this.isContextLoaderSaved = false;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addPathElement(String pathElement) throws BuildException {
/*  481 */     File pathComponent = (this.project != null) ? this.project.resolveFile(pathElement) : new File(pathElement);
/*      */ 
/*      */     
/*      */     try {
/*  485 */       addPathFile(pathComponent);
/*      */     } catch (IOException e) {
/*  487 */       throw new BuildException(e);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  500 */   protected void addPathFile(File pathComponent) throws IOException { this.pathComponents.addElement(pathComponent); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getClasspath() {
/*  510 */     StringBuffer sb = new StringBuffer();
/*  511 */     boolean firstPass = true;
/*  512 */     Enumeration componentEnum = this.pathComponents.elements();
/*  513 */     while (componentEnum.hasMoreElements()) {
/*  514 */       if (!firstPass) {
/*  515 */         sb.append(System.getProperty(""path.separator""));
/*      */       } else {
/*  517 */         firstPass = false;
/*      */       } 
/*  519 */       sb.append(((File)componentEnum.nextElement()).getAbsolutePath());
/*      */     } 
/*  521 */     return sb.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  534 */   public synchronized void setIsolated(boolean isolated) { this.ignoreBase = isolated; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void initializeClass(Class theClass) {
/*  552 */     Constructor[] cons = (Constructor[])theClass.getDeclaredConstructors();
/*      */     
/*  554 */     if (cons != null && 
/*  555 */       cons.length > 0 && cons[0] != null) {
/*  556 */       String[] strs = new String[256];
/*      */       try {
/*  558 */         cons[0].newInstance((Object[])strs);
/*      */       
/*      */       }
/*  561 */       catch (Throwable t) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  589 */   public void addSystemPackageRoot(String packageRoot) { this.systemPackages.addElement(packageRoot + (packageRoot.endsWith(""."") ? """" : ""."")); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  603 */   public void addLoaderPackageRoot(String packageRoot) { this.loaderPackages.addElement(packageRoot + (packageRoot.endsWith(""."") ? """" : ""."")); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class forceLoadClass(String classname) throws ClassNotFoundException {
/*  624 */     log(""force loading "" + classname, 4);
/*      */     
/*  626 */     Class theClass = findLoadedClass(classname);
/*      */     
/*  628 */     if (theClass == null) {
/*  629 */       theClass = findClass(classname);
/*      */     }
/*      */     
/*  632 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class forceLoadSystemClass(String classname) throws ClassNotFoundException {
/*  653 */     log(""force system loading "" + classname, 4);
/*      */     
/*  655 */     Class theClass = findLoadedClass(classname);
/*      */     
/*  657 */     if (theClass == null) {
/*  658 */       theClass = findBaseClass(classname);
/*      */     }
/*      */     
/*  661 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public InputStream getResourceAsStream(String name) {
/*  675 */     InputStream resourceStream = null;
/*  676 */     if (isParentFirst(name)) {
/*  677 */       resourceStream = loadBaseResource(name);
/*  678 */       if (resourceStream != null) {
/*  679 */         log(""ResourceStream for "" + name + "" loaded from parent loader"", 4);
/*      */       }
/*      */       else {
/*      */         
/*  683 */         resourceStream = loadResource(name);
/*  684 */         if (resourceStream != null) {
/*  685 */           log(""ResourceStream for "" + name + "" loaded from ant loader"", 4);
/*      */         }
/*      */       } 
/*      */     } else {
/*      */       
/*  690 */       resourceStream = loadResource(name);
/*  691 */       if (resourceStream != null) {
/*  692 */         log(""ResourceStream for "" + name + "" loaded from ant loader"", 4);
/*      */       }
/*      */       else {
/*      */         
/*  696 */         resourceStream = loadBaseResource(name);
/*  697 */         if (resourceStream != null) {
/*  698 */           log(""ResourceStream for "" + name + "" loaded from parent loader"", 4);
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  704 */     if (resourceStream == null) {
/*  705 */       log(""Couldn't load ResourceStream for "" + name, 4);
/*      */     }
/*      */ 
/*      */     
/*  709 */     return resourceStream;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream loadResource(String name) {
/*  724 */     InputStream stream = null;
/*      */     
/*  726 */     Enumeration e = this.pathComponents.elements();
/*  727 */     while (e.hasMoreElements() && stream == null) {
/*  728 */       File pathComponent = e.nextElement();
/*  729 */       stream = getResourceStream(pathComponent, name);
/*      */     } 
/*  731 */     return stream;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream loadBaseResource(String name) {
/*  745 */     if (this.parent == null) {
/*  746 */       return ClassLoader.getSystemResourceAsStream(name);
/*      */     }
/*  748 */     return this.parent.getResourceAsStream(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream getResourceStream(File file, String resourceName) {
/*      */     try {
/*  766 */       if (!file.exists()) {
/*  767 */         return null;
/*      */       }
/*      */       
/*  770 */       if (file.isDirectory()) {
/*  771 */         File resource = new File(file, resourceName);
/*      */         
/*  773 */         if (resource.exists()) {
/*  774 */           return new FileInputStream(resource);
/*      */         }
/*      */       } else {
/*      */         
/*  778 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(file);
/*  779 */         if (zipFile == null) {
/*  780 */           zipFile = new ZipFile(file);
/*  781 */           this.zipFiles.put(file, zipFile);
/*      */         } 
/*  783 */         ZipEntry entry = zipFile.getEntry(resourceName);
/*  784 */         if (entry != null) {
/*  785 */           return zipFile.getInputStream(entry);
/*      */         }
/*      */       } 
/*      */     } catch (Exception e) {
/*  789 */       log(""Ignoring Exception "" + e.getClass().getName() + "": "" + e.getMessage() + "" reading resource "" + resourceName + "" from "" + file, 3);
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  794 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isParentFirst(String resourceName) {
/*  817 */     boolean useParentFirst = this.parentFirst;
/*      */     
/*  819 */     for (Enumeration e = this.systemPackages.elements(); e.hasMoreElements(); ) {
/*  820 */       String packageName = e.nextElement();
/*  821 */       if (resourceName.startsWith(packageName)) {
/*  822 */         useParentFirst = true;
/*      */         
/*      */         break;
/*      */       } 
/*      */     } 
/*  827 */     for (Enumeration e = this.loaderPackages.elements(); e.hasMoreElements(); ) {
/*  828 */       String packageName = e.nextElement();
/*  829 */       if (resourceName.startsWith(packageName)) {
/*  830 */         useParentFirst = false;
/*      */         
/*      */         break;
/*      */       } 
/*      */     } 
/*  835 */     return useParentFirst;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public URL getResource(String name) {
/*  853 */     URL url = null;
/*  854 */     if (isParentFirst(name)) {
/*  855 */       url = (this.parent == null) ? super.getResource(name) : this.parent.getResource(name);
/*      */     }
/*      */ 
/*      */     
/*  859 */     if (url != null) {
/*  860 */       log(""Resource "" + name + "" loaded from parent loader"", 4);
/*      */     
/*      */     }
/*      */     else {
/*      */ 
/*      */       
/*  866 */       Enumeration e = this.pathComponents.elements();
/*  867 */       while (e.hasMoreElements() && url == null) {
/*  868 */         File pathComponent = e.nextElement();
/*  869 */         url = getResourceURL(pathComponent, name);
/*  870 */         if (url != null) {
/*  871 */           log(""Resource "" + name + "" loaded from ant loader"", 4);
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  878 */     if (url == null && !isParentFirst(name)) {
/*      */ 
/*      */       
/*  881 */       url = (this.parent == null) ? super.getResource(name) : this.parent.getResource(name);
/*      */       
/*  883 */       if (url != null) {
/*  884 */         log(""Resource "" + name + "" loaded from parent loader"", 4);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  889 */     if (url == null) {
/*  890 */       log(""Couldn't load Resource "" + name, 4);
/*      */     }
/*      */     
/*  893 */     return url;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  906 */   protected Enumeration findResources(String name) throws IOException { return new ResourceEnumeration(this, name); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected URL getResourceURL(File file, String resourceName) {
/*      */     try {
/*  923 */       if (!file.exists()) {
/*  924 */         return null;
/*      */       }
/*      */       
/*  927 */       if (file.isDirectory()) {
/*  928 */         File resource = new File(file, resourceName);
/*      */         
/*  930 */         if (resource.exists()) {
/*      */           try {
/*  932 */             return new URL(""file:"" + resource.toString());
/*      */           } catch (MalformedURLException ex) {
/*  934 */             return null;
/*      */           } 
/*      */         }
/*      */       } else {
/*  938 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(file);
/*  939 */         if (zipFile == null) {
/*  940 */           zipFile = new ZipFile(file);
/*  941 */           this.zipFiles.put(file, zipFile);
/*      */         } 
/*      */         
/*  944 */         ZipEntry entry = zipFile.getEntry(resourceName);
/*  945 */         if (entry != null) {
/*      */           try {
/*  947 */             return new URL(""jar:file:"" + file.toString() + ""!/"" + entry);
/*      */           } catch (MalformedURLException ex) {
/*      */             
/*  950 */             return null;
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } catch (Exception e) {
/*  955 */       e.printStackTrace();
/*      */     } 
/*      */     
/*  958 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected synchronized Class loadClass(String classname, boolean resolve) throws ClassNotFoundException {
/*  987 */     Class theClass = findLoadedClass(classname);
/*  988 */     if (theClass != null) {
/*  989 */       return theClass;
/*      */     }
/*      */     
/*  992 */     if (isParentFirst(classname)) {
/*      */       try {
/*  994 */         theClass = findBaseClass(classname);
/*  995 */         log(""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"", 4);
/*      */       } catch (ClassNotFoundException cnfe) {
/*      */         
/*  998 */         theClass = findClass(classname);
/*  999 */         log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", 4);
/*      */       } 
/*      */     } else {
/*      */       
/*      */       try {
/* 1004 */         theClass = findClass(classname);
/* 1005 */         log(""Class "" + classname + "" loaded from ant loader"", 4);
/*      */       } catch (ClassNotFoundException cnfe) {
/*      */         
/* 1008 */         if (this.ignoreBase) {
/* 1009 */           throw cnfe;
/*      */         }
/* 1011 */         theClass = findBaseClass(classname);
/* 1012 */         log(""Class "" + classname + "" loaded from parent loader"", 4);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1017 */     if (resolve) {
/* 1018 */       resolveClass(theClass);
/*      */     }
/*      */     
/* 1021 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1034 */   private String getClassFilename(String classname) { return classname.replace('.', '/') + "".class""; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Class defineClassFromData(File container, byte[] classData, String classname) throws IOException {
/* 1056 */     if (defineClassProtectionDomain != null) {
/*      */       try {
/* 1058 */         Object domain = getProtectionDomain.invoke(Project.class, new Object[0]);
/*      */         
/* 1060 */         Object[] args = { classname, classData, new Integer(0), new Integer(classData.length), domain };
/*      */ 
/*      */         
/* 1063 */         return (Class)defineClassProtectionDomain.invoke(this, args);
/*      */       } catch (InvocationTargetException ite) {
/* 1065 */         Throwable t = ite.getTargetException();
/* 1066 */         if (t instanceof ClassFormatError)
/* 1067 */           throw (ClassFormatError)t; 
/* 1068 */         if (t instanceof NoClassDefFoundError)
/* 1069 */           throw (NoClassDefFoundError)t; 
/* 1070 */         if (t instanceof SecurityException) {
/* 1071 */           throw (SecurityException)t;
/*      */         }
/* 1073 */         throw new IOException(t.toString());
/*      */       } catch (Exception e) {
/*      */         
/* 1076 */         throw new IOException(e.toString());
/*      */       } 
/*      */     }
/* 1079 */     return defineClass(classname, classData, 0, classData.length);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class getClassFromStream(InputStream stream, String classname, File container) throws IOException, SecurityException {
/* 1102 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/* 1103 */     int bytesRead = -1;
/* 1104 */     byte[] buffer = new byte[8192];
/*      */     
/* 1106 */     while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
/* 1107 */       baos.write(buffer, 0, bytesRead);
/*      */     }
/*      */     
/* 1110 */     byte[] classData = baos.toByteArray();
/* 1111 */     return defineClassFromData(container, classData, classname);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class findClass(String name) throws ClassNotFoundException {
/* 1126 */     log(""Finding class "" + name, 4);
/*      */     
/* 1128 */     return findClassInComponents(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isInPath(File component) {
/* 1139 */     for (Enumeration e = this.pathComponents.elements(); e.hasMoreElements(); ) {
/* 1140 */       File pathComponent = e.nextElement();
/* 1141 */       if (pathComponent.equals(component)) {
/* 1142 */         return true;
/*      */       }
/*      */     } 
/* 1145 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class findClassInComponents(String name) throws ClassNotFoundException {
/* 1164 */     InputStream stream = null;
/* 1165 */     String classFilename = getClassFilename(name);
/*      */     try {
/* 1167 */       Enumeration e = this.pathComponents.elements();
/* 1168 */       while (e.hasMoreElements()) {
/* 1169 */         File pathComponent = e.nextElement();
/*      */         try {
/* 1171 */           stream = getResourceStream(pathComponent, classFilename);
/* 1172 */           if (stream != null) {
/* 1173 */             log(""Loaded from "" + pathComponent + "" "" + classFilename, 4);
/*      */             
/* 1175 */             return getClassFromStream(stream, name, pathComponent);
/*      */           } 
/*      */         } catch (SecurityException se) {
/* 1178 */           throw se;
/*      */         } catch (IOException ioe) {
/*      */           
/* 1181 */           log(""Exception reading component "" + pathComponent + "" (reason: "" + ioe.getMessage() + "")"", 3);
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1187 */       throw new ClassNotFoundException(name);
/*      */     } finally {
/*      */       try {
/* 1190 */         if (stream != null) {
/* 1191 */           stream.close();
/*      */         }
/* 1193 */       } catch (IOException e) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class findBaseClass(String name) throws ClassNotFoundException {
/* 1215 */     if (this.parent == null) {
/* 1216 */       return findSystemClass(name);
/*      */     }
/* 1218 */     return this.parent.loadClass(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void cleanup() {
/* 1227 */     for (Enumeration e = this.zipFiles.elements(); e.hasMoreElements(); ) {
/* 1228 */       ZipFile zipFile = e.nextElement();
/*      */       try {
/* 1230 */         zipFile.close();
/* 1231 */       } catch (IOException ioe) {}
/*      */     } 
/*      */ 
/*      */     
/* 1235 */     this.zipFiles = new Hashtable();
/* 1236 */     if (this.project != null) {
/* 1237 */       this.project.removeBuildListener(this);
/*      */     }
/* 1239 */     this.project = null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void buildStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1257 */   public void buildFinished(BuildEvent event) { cleanup(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void messageLogged(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addJavaLibraries() {
/* 1305 */     Vector packages = JavaEnvUtils.getJrePackages();
/* 1306 */     Enumeration e = packages.elements();
/* 1307 */     while (e.hasMoreElements()) {
/* 1308 */       String packageName = e.nextElement();
/* 1309 */       addSystemPackageRoot(packageName);
/*      */     } 
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\AntClassLoader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.AntTypeDefinition,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntTypeDefinition
/*     */ {
/*     */   private String name;
/*     */   private Class clazz;
/*     */   private Class adapterClass;
/*     */   private Class adaptToClass;
/*     */   private String className;
/*     */   private ClassLoader classLoader;
/*     */   
/*  81 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClass(Class clazz) {
/*  98 */     this.clazz = clazz;
/*  99 */     if (clazz == null) {
/*     */       return;
/*     */     }
/* 102 */     if (this.classLoader == null) {
/* 103 */       this.classLoader = clazz.getClassLoader();
/*     */     }
/* 105 */     if (this.className == null) {
/* 106 */       this.className = clazz.getName();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setClassName(String className) { this.className = className; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public String getClassName() { return this.className; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setAdapterClass(Class adapterClass) { this.adapterClass = adapterClass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public void setAdaptToClass(Class adaptToClass) { this.adaptToClass = adaptToClass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setClassLoader(ClassLoader classLoader) { this.classLoader = classLoader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public ClassLoader getClassLoader() { return this.classLoader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getExposedClass(Project project) {
/* 172 */     if (this.adaptToClass != null) {
/* 173 */       Class z = getTypeClass(project);
/* 174 */       if (z == null) {
/* 175 */         return null;
/*     */       }
/* 177 */       if (this.adaptToClass.isAssignableFrom(z)) {
/* 178 */         return z;
/*     */       }
/*     */     } 
/* 181 */     if (this.adapterClass != null) {
/* 182 */       return this.adapterClass;
/*     */     }
/* 184 */     return getTypeClass(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getTypeClass(Project project) {
/* 193 */     if (this.clazz != null) {
/* 194 */       return this.clazz;
/*     */     }
/*     */     
/*     */     try {
/* 198 */       if (this.classLoader == null) {
/* 199 */         this.clazz = Class.forName(this.className);
/*     */       } else {
/* 201 */         this.clazz = this.classLoader.loadClass(this.className);
/*     */       } 
/*     */     } catch (NoClassDefFoundError ncdfe) {
/* 204 */       project.log(""Could not load a dependent class ("" + ncdfe.getMessage() + "") for type "" + this.name, 4);
/*     */     }
/*     */     catch (ClassNotFoundException cnfe) {
/*     */       
/* 208 */       project.log(""Could not load class ("" + this.className + "") for type "" + this.name, 4);
/*     */     } 
/*     */     
/* 211 */     return this.clazz;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public Object create(Project project) { return icreate(project); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Object icreate(Project project) {
/* 229 */     Class c = getTypeClass(project);
/* 230 */     if (c == null) {
/* 231 */       return null;
/*     */     }
/*     */     
/* 234 */     Object o = createAndSet(project, c);
/* 235 */     if (o == null || this.adapterClass == null) {
/* 236 */       return o;
/*     */     }
/*     */     
/* 239 */     if (this.adaptToClass != null && 
/* 240 */       this.adaptToClass.isAssignableFrom(o.getClass())) {
/* 241 */       return o;
/*     */     }
/*     */ 
/*     */     
/* 245 */     TypeAdapter adapterObject = (TypeAdapter)createAndSet(project, this.adapterClass);
/*     */     
/* 247 */     if (adapterObject == null) {
/* 248 */       return null;
/*     */     }
/*     */     
/* 251 */     adapterObject.setProxy(o);
/* 252 */     return adapterObject;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkClass(Project project) {
/* 266 */     if (this.clazz == null) {
/* 267 */       this.clazz = getTypeClass(project);
/* 268 */       if (this.clazz == null) {
/* 269 */         throw new BuildException(""Unable to create class for "" + getName());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 274 */     if (this.adapterClass != null) {
/* 275 */       boolean needToCheck = true;
/* 276 */       if (this.adaptToClass != null && this.adaptToClass.isAssignableFrom(this.clazz))
/*     */       {
/* 278 */         needToCheck = false;
/*     */       }
/* 280 */       if (needToCheck) {
/* 281 */         TypeAdapter adapter = (TypeAdapter)createAndSet(project, this.adapterClass);
/*     */         
/* 283 */         if (adapter == null) {
/* 284 */           throw new BuildException(""Unable to create adapter object"");
/*     */         }
/* 286 */         adapter.checkProxyClass(this.clazz);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Object createAndSet(Project project, Class c) {
/*     */     try {
/* 297 */       Constructor ctor = null;
/* 298 */       boolean noArg = false;
/*     */ 
/*     */       
/*     */       try {
/* 302 */         ctor = c.getConstructor(new Class[0]);
/* 303 */         noArg = true;
/*     */       } catch (NoSuchMethodException nse) {
/* 305 */         ctor = c.getConstructor(new Class[] { Project.class });
/* 306 */         noArg = false;
/*     */       } 
/*     */       
/* 309 */       Object o = null;
/* 310 */       if (noArg) {
/* 311 */         o = ctor.newInstance(new Object[0]);
/*     */       } else {
/* 313 */         o = ctor.newInstance(new Object[] { project });
/*     */       } 
/* 315 */       project.setProjectReference(o);
/* 316 */       return o;
/*     */     } catch (InvocationTargetException ex) {
/* 318 */       Throwable t = ex.getTargetException();
/* 319 */       throw new BuildException(""Could not create type "" + this.name + "" due to "" + t, t);
/*     */     } catch (NoClassDefFoundError ncdfe) {
/*     */       
/* 322 */       String msg = ""Type "" + this.name + "": A class needed by class "" + c + "" cannot be found: "" + ncdfe.getMessage();
/*     */       
/* 324 */       throw new BuildException(msg, ncdfe);
/*     */     } catch (Throwable t) {
/* 326 */       throw new BuildException(""Could not create type "" + this.name + "" due to "" + t, t);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean sameDefinition(AntTypeDefinition other, Project project) {
/* 339 */     if (other == null) {
/* 340 */       return false;
/*     */     }
/* 342 */     if (other.getClass() != getClass()) {
/* 343 */       return false;
/*     */     }
/* 345 */     if (!other.getTypeClass(project).equals(getTypeClass(project))) {
/* 346 */       return false;
/*     */     }
/* 348 */     if (!other.getExposedClass(project).equals(getExposedClass(project))) {
/* 349 */       return false;
/*     */     }
/* 351 */     if (other.adapterClass != this.adapterClass) {
/* 352 */       return false;
/*     */     }
/* 354 */     if (other.adaptToClass != this.adaptToClass) {
/* 355 */       return false;
/*     */     }
/* 357 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean similarDefinition(AntTypeDefinition other, Project project) {
/* 372 */     if (other == null) {
/* 373 */       return false;
/*     */     }
/* 375 */     if (getClass() != other.getClass()) {
/* 376 */       return false;
/*     */     }
/* 378 */     if (!getClassName().equals(other.getClassName())) {
/* 379 */       return false;
/*     */     }
/* 381 */     if (!extractClassname(this.adapterClass).equals(extractClassname(other.adapterClass)))
/*     */     {
/* 383 */       return false;
/*     */     }
/* 385 */     if (!extractClassname(this.adaptToClass).equals(extractClassname(other.adaptToClass)))
/*     */     {
/* 387 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 391 */     ClassLoader oldLoader = other.getClassLoader();
/* 392 */     ClassLoader newLoader = getClassLoader();
/* 393 */     if (oldLoader != null && newLoader != null && oldLoader instanceof AntClassLoader && newLoader instanceof AntClassLoader && ((AntClassLoader)oldLoader).getClasspath().equals(((AntClassLoader)newLoader).getClasspath()))
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 400 */       return true;
/*     */     }
/* 402 */     return false;
/*     */   }
/*     */ 
/*     */   
/*     */   private String extractClassname(Class c) {
/* 407 */     if (c == null) {
/* 408 */       return ""<null>"";
/*     */     }
/* 410 */     return c.getClass().getName();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\AntTypeDefinition.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildEvent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.EventObject;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildEvent
/*     */   extends EventObject
/*     */ {
/*     */   private Project project;
/*     */   private Target target;
/*     */   private Task task;
/*     */   private String message;
/*  83 */   private int priority = 3;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Throwable exception;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Project project) {
/*  98 */     super(project);
/*  99 */     this.project = project;
/* 100 */     this.target = null;
/* 101 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Target target) {
/* 113 */     super(target);
/* 114 */     this.project = target.getProject();
/* 115 */     this.target = target;
/* 116 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Task task) {
/* 128 */     super(task);
/* 129 */     this.project = task.getProject();
/* 130 */     this.target = task.getOwningTarget();
/* 131 */     this.task = task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessage(String message, int priority) {
/* 146 */     this.message = message;
/* 147 */     this.priority = priority;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setException(Throwable exception) { this.exception = exception; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public Target getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public Task getTask() { return this.task; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public String getMessage() { return this.message; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public int getPriority() { return this.priority; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public Throwable getException() { return this.exception; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\BuildEvent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildException,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildException
/*     */   extends RuntimeException
/*     */ {
/*     */   private Throwable cause;
/*  70 */   private Location location = Location.UNKNOWN_LOCATION;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  86 */   public BuildException(String message) { super(message); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String message, Throwable cause) {
/*  99 */     super(message);
/* 100 */     this.cause = cause;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String msg, Throwable cause, Location location) {
/* 115 */     this(msg, cause);
/* 116 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable cause) {
/* 126 */     super(cause.toString());
/* 127 */     this.cause = cause;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String message, Location location) {
/* 140 */     super(message);
/* 141 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable cause, Location location) {
/* 154 */     this(cause);
/* 155 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public Throwable getException() { return this.cause; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public Throwable getCause() { return getException(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public String toString() { return this.location.toString() + getMessage(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   public void setLocation(Location location) { this.location = location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void printStackTrace() { printStackTrace(System.err); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printStackTrace(PrintStream ps) {
/* 222 */     synchronized (ps) {
/* 223 */       super.printStackTrace(ps);
/* 224 */       if (this.cause != null) {
/* 225 */         ps.println(""--- Nested Exception ---"");
/* 226 */         this.cause.printStackTrace(ps);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printStackTrace(PrintWriter pw) {
/* 239 */     synchronized (pw) {
/* 240 */       super.printStackTrace(pw);
/* 241 */       if (this.cause != null) {
/* 242 */         pw.println(""--- Nested Exception ---"");
/* 243 */         this.cause.printStackTrace(pw);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\BuildException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildListener,"package org.apache.tools.ant;
import java.util.EventListener;
public interface BuildListener extends EventListener {
  void buildStarted(BuildEvent paramBuildEvent);
  void buildFinished(BuildEvent paramBuildEvent);
  void targetStarted(BuildEvent paramBuildEvent);
  void targetFinished(BuildEvent paramBuildEvent);
  void taskStarted(BuildEvent paramBuildEvent);
  void taskFinished(BuildEvent paramBuildEvent);
  void messageLogged(BuildEvent paramBuildEvent);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\BuildListener.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildLogger,"package org.apache.tools.ant;
import java.io.PrintStream;
public interface BuildLogger extends BuildListener {
  void setMessageOutputLevel(int paramInt);
  void setOutputPrintStream(PrintStream paramPrintStream);
  void setEmacsMode(boolean paramBoolean);
  void setErrorPrintStream(PrintStream paramPrintStream);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\BuildLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ComponentHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.lang.ref.WeakReference;
/*     */ import java.lang.reflect.Modifier;
/*     */ import java.util.Enumeration;
/*     */ import java.util.HashSet;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import java.util.Properties;
/*     */ import java.util.Set;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.taskdefs.Definer;
/*     */ import org.apache.tools.ant.taskdefs.Property;
/*     */ import org.apache.tools.ant.taskdefs.Typedef;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ComponentHelper
/*     */ {
/*     */   private AntTypeTable antTypeTable;
/*  97 */   private Hashtable taskClassDefinitions = new Hashtable();
/*     */ 
/*     */   
/*     */   private boolean rebuildTaskClassDefinitions = true;
/*     */   
/* 102 */   private Hashtable typeClassDefinitions = new Hashtable();
/*     */ 
/*     */   
/*     */   private boolean rebuildTypeClassDefinitions = true;
/*     */   
/* 107 */   private Set checkedNamespaces = new HashSet();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   private Stack antLibStack = new Stack();
/*     */   
/* 115 */   private String antLibCurrentUri = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   private Hashtable createdTasks = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private ComponentHelper next;
/*     */ 
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */ 
/*     */   
/*     */   public static ComponentHelper getComponentHelper(Project project) {
/* 135 */     ComponentHelper ph = (ComponentHelper)project.getReference(""ant.ComponentHelper"");
/*     */     
/* 137 */     if (ph != null) {
/* 138 */       return ph;
/*     */     }
/* 140 */     ph = new ComponentHelper();
/* 141 */     ph.setProject(project);
/*     */     
/* 143 */     project.addReference(""ant.ComponentHelper"", ph);
/* 144 */     return ph;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setNext(ComponentHelper next) { this.next = next; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public ComponentHelper getNext() { return this.next; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/* 177 */     this.project = project;
/* 178 */     this.antTypeTable = new AntTypeTable(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void initSubProject(ComponentHelper helper) {
/* 189 */     AntTypeTable typeTable = helper.antTypeTable;
/* 190 */     for (Iterator i = typeTable.values().iterator(); i.hasNext(); ) {
/* 191 */       AntTypeDefinition def = i.next();
/* 192 */       this.antTypeTable.put(def.getName(), def);
/*     */     } 
/*     */     
/* 195 */     this.checkedNamespaces.add(helper.checkedNamespaces);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object createComponent(UnknownElement ue, String ns, String componentType) throws BuildException {
/* 213 */     Object component = createComponent(componentType);
/* 214 */     if (component == null) {
/* 215 */       return null;
/*     */     }
/*     */     
/* 218 */     if (component instanceof Task) {
/* 219 */       Task task = (Task)component;
/* 220 */       task.setLocation(ue.getLocation());
/* 221 */       task.setTaskType(componentType);
/* 222 */       task.setTaskName(ue.getTaskName());
/* 223 */       task.setOwningTarget(ue.getOwningTarget());
/* 224 */       task.init();
/* 225 */       addCreatedTask(componentType, task);
/*     */     } 
/*     */     
/* 228 */     return component;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object createComponent(String componentName) {
/* 240 */     AntTypeDefinition def = getDefinition(componentName);
/* 241 */     if (def == null) {
/* 242 */       return null;
/*     */     }
/* 244 */     return def.create(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getComponentClass(String componentName) {
/* 256 */     AntTypeDefinition def = getDefinition(componentName);
/* 257 */     if (def == null) {
/* 258 */       return null;
/*     */     }
/* 260 */     return def.getExposedClass(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AntTypeDefinition getDefinition(String componentName) {
/* 269 */     checkNamespace(componentName);
/* 270 */     AntTypeDefinition ret = null;
/* 271 */     ret = this.antTypeTable.getDefinition(componentName);
/* 272 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void initDefaultDefinitions() {
/* 281 */     initTasks();
/* 282 */     initTypes();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addTaskDefinition(String taskName, Class taskClass) {
/* 306 */     checkTaskClass(taskClass);
/* 307 */     AntTypeDefinition def = new AntTypeDefinition();
/* 308 */     def.setName(taskName);
/* 309 */     def.setClassLoader(taskClass.getClassLoader());
/* 310 */     def.setClass(taskClass);
/* 311 */     def.setAdapterClass(TaskAdapter.class);
/* 312 */     def.setClassName(taskClass.getName());
/* 313 */     def.setAdaptToClass(Task.class);
/* 314 */     updateDataTypeDefinition(def);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkTaskClass(Class taskClass) throws BuildException {
/* 330 */     if (!Modifier.isPublic(taskClass.getModifiers())) {
/* 331 */       String message = taskClass + "" is not public"";
/* 332 */       this.project.log(message, 0);
/* 333 */       throw new BuildException(message);
/*     */     } 
/* 335 */     if (Modifier.isAbstract(taskClass.getModifiers())) {
/* 336 */       String message = taskClass + "" is abstract"";
/* 337 */       this.project.log(message, 0);
/* 338 */       throw new BuildException(message);
/*     */     } 
/*     */     try {
/* 341 */       taskClass.getConstructor(null);
/*     */     }
/*     */     catch (NoSuchMethodException e) {
/*     */       
/* 345 */       String message = ""No public no-arg constructor in "" + taskClass;
/*     */       
/* 347 */       this.project.log(message, 0);
/* 348 */       throw new BuildException(message);
/*     */     } 
/* 350 */     if (!Task.class.isAssignableFrom(taskClass)) {
/* 351 */       TaskAdapter.checkTaskClass(taskClass, this.project);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getTaskDefinitions() {
/* 363 */     synchronized (this.taskClassDefinitions) {
/* 364 */       synchronized (this.antTypeTable) {
/* 365 */         if (this.rebuildTaskClassDefinitions) {
/* 366 */           this.taskClassDefinitions.clear();
/* 367 */           Iterator i = this.antTypeTable.keySet().iterator();
/* 368 */           while (i.hasNext()) {
/* 369 */             String name = i.next();
/* 370 */             Class clazz = this.antTypeTable.getExposedClass(name);
/*     */             
/* 372 */             if (clazz == null) {
/*     */               continue;
/*     */             }
/* 375 */             if (Task.class.isAssignableFrom(clazz)) {
/* 376 */               this.taskClassDefinitions.put(name, this.antTypeTable.getTypeClass(name));
/*     */             }
/*     */           } 
/*     */           
/* 380 */           this.rebuildTaskClassDefinitions = false;
/*     */         } 
/*     */       } 
/*     */     } 
/* 384 */     return this.taskClassDefinitions;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getDataTypeDefinitions() {
/* 396 */     synchronized (this.typeClassDefinitions) {
/* 397 */       synchronized (this.antTypeTable) {
/* 398 */         if (this.rebuildTypeClassDefinitions) {
/* 399 */           this.typeClassDefinitions.clear();
/* 400 */           Iterator i = this.antTypeTable.keySet().iterator();
/* 401 */           while (i.hasNext()) {
/* 402 */             String name = i.next();
/* 403 */             Class clazz = this.antTypeTable.getExposedClass(name);
/*     */             
/* 405 */             if (clazz == null) {
/*     */               continue;
/*     */             }
/* 408 */             if (!Task.class.isAssignableFrom(clazz)) {
/* 409 */               this.typeClassDefinitions.put(name, this.antTypeTable.getTypeClass(name));
/*     */             }
/*     */           } 
/*     */           
/* 413 */           this.rebuildTypeClassDefinitions = false;
/*     */         } 
/*     */       } 
/*     */     } 
/* 417 */     return this.typeClassDefinitions;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDataTypeDefinition(String typeName, Class typeClass) {
/* 434 */     AntTypeDefinition def = new AntTypeDefinition();
/* 435 */     def.setName(typeName);
/* 436 */     def.setClass(typeClass);
/* 437 */     updateDataTypeDefinition(def);
/* 438 */     String msg = "" +User datatype: "" + typeName + ""     "" + typeClass.getName();
/*     */     
/* 440 */     this.project.log(msg, 4);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 449 */   public void addDataTypeDefinition(AntTypeDefinition def) { updateDataTypeDefinition(def); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 460 */   public Hashtable getAntTypeTable() { return this.antTypeTable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task createTask(String taskType) throws BuildException {
/* 481 */     Task task = createNewTask(taskType);
/* 482 */     if (task == null && taskType.equals(""property"")) {
/*     */ 
/*     */       
/* 485 */       addTaskDefinition(""property"", Property.class);
/*     */       
/* 487 */       task = createNewTask(taskType);
/*     */     } 
/*     */     
/* 490 */     if (task != null) {
/* 491 */       addCreatedTask(taskType, task);
/*     */     }
/* 493 */     return task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Task createNewTask(String taskType) throws BuildException {
/* 510 */     Class c = getComponentClass(taskType);
/* 511 */     if (c == null) {
/* 512 */       return null;
/*     */     }
/*     */     
/* 515 */     if (!Task.class.isAssignableFrom(c)) {
/* 516 */       return null;
/*     */     }
/* 518 */     Task task = (Task)createComponent(taskType);
/* 519 */     if (task == null) {
/* 520 */       return null;
/*     */     }
/* 522 */     task.setTaskType(taskType);
/*     */ 
/*     */     
/* 525 */     task.setTaskName(taskType);
/*     */     
/* 527 */     String msg = ""   +Task: "" + taskType;
/* 528 */     this.project.log(msg, 4);
/* 529 */     return task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addCreatedTask(String type, Task task) {
/* 543 */     synchronized (this.createdTasks) {
/* 544 */       Vector v = (Vector)this.createdTasks.get(type);
/* 545 */       if (v == null) {
/* 546 */         v = new Vector();
/* 547 */         this.createdTasks.put(type, v);
/*     */       } 
/* 549 */       v.addElement(new WeakReference(task));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void invalidateCreatedTasks(String type) {
/* 561 */     synchronized (this.createdTasks) {
/* 562 */       Vector v = (Vector)this.createdTasks.get(type);
/* 563 */       if (v != null) {
/* 564 */         Enumeration taskEnum = v.elements();
/* 565 */         while (taskEnum.hasMoreElements()) {
/* 566 */           WeakReference ref = taskEnum.nextElement();
/*     */           
/* 568 */           Task t = ref.get();
/*     */           
/* 570 */           if (t != null) {
/* 571 */             t.markInvalid();
/*     */           }
/*     */         } 
/* 574 */         v.removeAllElements();
/* 575 */         this.createdTasks.remove(type);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 593 */   public Object createDataType(String typeName) throws BuildException { return createComponent(typeName); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getElementName(Object element) {
/* 612 */     Class elementClass = element.getClass();
/* 613 */     for (Iterator i = this.antTypeTable.values().iterator(); i.hasNext(); ) {
/* 614 */       AntTypeDefinition def = i.next();
/* 615 */       if (elementClass == def.getExposedClass(this.project)) {
/* 616 */         return ""The <"" + def.getName() + ""> type"";
/*     */       }
/*     */     } 
/* 619 */     return ""Class "" + elementClass.getName();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validDefinition(AntTypeDefinition def) {
/* 631 */     if (def.getTypeClass(this.project) == null || def.getExposedClass(this.project) == null)
/*     */     {
/* 633 */       return false;
/*     */     }
/* 635 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean sameDefinition(AntTypeDefinition def, AntTypeDefinition old) {
/* 646 */     if (!validDefinition(def) || !validDefinition(old)) {
/* 647 */       return (validDefinition(def) == validDefinition(old));
/*     */     }
/* 649 */     return def.sameDefinition(old, this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void updateDataTypeDefinition(AntTypeDefinition def) {
/* 659 */     String name = def.getName();
/* 660 */     synchronized (this.antTypeTable) {
/* 661 */       this.rebuildTaskClassDefinitions = true;
/* 662 */       this.rebuildTypeClassDefinitions = true;
/* 663 */       AntTypeDefinition old = this.antTypeTable.getDefinition(name);
/* 664 */       if (old != null) {
/* 665 */         if (sameDefinition(def, old)) {
/*     */           return;
/*     */         }
/* 668 */         int logLevel = 1;
/* 669 */         if (def.similarDefinition(old, this.project)) {
/* 670 */           logLevel = 3;
/*     */         }
/* 672 */         Class oldClass = this.antTypeTable.getExposedClass(name);
/* 673 */         boolean isTask = (oldClass != null && Task.class.isAssignableFrom(oldClass));
/*     */         
/* 675 */         this.project.log(""Trying to override old definition of "" + (isTask ? ""task"" : ""datatype"") + "" "" + name, logLevel);
/*     */ 
/*     */ 
/*     */         
/* 679 */         if (isTask) {
/* 680 */           invalidateCreatedTasks(name);
/*     */         }
/*     */       } 
/* 683 */       this.project.log("" +Datatype "" + name + "" "" + def.getClassName(), 4);
/*     */       
/* 685 */       this.antTypeTable.put(name, def);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void enterAntLib(String uri) {
/* 694 */     this.antLibCurrentUri = uri;
/* 695 */     this.antLibStack.push(uri);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 702 */   public String getCurrentAntlibUri() { return this.antLibCurrentUri; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void exitAntLib() {
/* 709 */     this.antLibStack.pop();
/* 710 */     if (this.antLibStack.size() != 0) {
/* 711 */       this.antLibCurrentUri = this.antLibStack.peek();
/*     */     } else {
/* 713 */       this.antLibCurrentUri = null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initTasks() {
/* 721 */     ClassLoader classLoader = null;
/* 722 */     if (this.project.getCoreLoader() != null && !""only"".equals(this.project.getProperty(""build.sysclasspath"")))
/*     */     {
/* 724 */       classLoader = this.project.getCoreLoader();
/*     */     }
/* 726 */     String dataDefs = ""/org/apache/tools/ant/taskdefs/defaults.properties"";
/*     */     
/* 728 */     InputStream in = null;
/*     */     try {
/* 730 */       Properties props = new Properties();
/* 731 */       in = getClass().getResourceAsStream(dataDefs);
/* 732 */       if (in == null) {
/* 733 */         throw new BuildException(""Can't load default task list"");
/*     */       }
/* 735 */       props.load(in);
/*     */       
/* 737 */       Enumeration e = props.propertyNames();
/* 738 */       while (e.hasMoreElements()) {
/* 739 */         String name = (String)e.nextElement();
/* 740 */         String className = props.getProperty(name);
/* 741 */         AntTypeDefinition def = new AntTypeDefinition();
/* 742 */         def.setName(name);
/* 743 */         def.setClassName(className);
/* 744 */         def.setClassLoader(classLoader);
/* 745 */         def.setAdaptToClass(Task.class);
/* 746 */         def.setAdapterClass(TaskAdapter.class);
/* 747 */         this.antTypeTable.put(name, def);
/*     */       } 
/*     */     } catch (IOException ex) {
/* 750 */       throw new BuildException(""Can't load default type list"");
/*     */     } finally {
/* 752 */       if (in != null) {
/*     */         try {
/* 754 */           in.close();
/* 755 */         } catch (Exception ignore) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initTypes() {
/* 766 */     ClassLoader classLoader = null;
/* 767 */     if (this.project.getCoreLoader() != null && !""only"".equals(this.project.getProperty(""build.sysclasspath"")))
/*     */     {
/* 769 */       classLoader = this.project.getCoreLoader();
/*     */     }
/* 771 */     String dataDefs = ""/org/apache/tools/ant/types/defaults.properties"";
/*     */     
/* 773 */     InputStream in = null;
/*     */     try {
/* 775 */       Properties props = new Properties();
/* 776 */       in = getClass().getResourceAsStream(dataDefs);
/* 777 */       if (in == null) {
/* 778 */         throw new BuildException(""Can't load default datatype list"");
/*     */       }
/* 780 */       props.load(in);
/*     */       
/* 782 */       Enumeration e = props.propertyNames();
/* 783 */       while (e.hasMoreElements()) {
/* 784 */         String name = (String)e.nextElement();
/* 785 */         String className = props.getProperty(name);
/* 786 */         AntTypeDefinition def = new AntTypeDefinition();
/* 787 */         def.setName(name);
/* 788 */         def.setClassName(className);
/* 789 */         def.setClassLoader(classLoader);
/* 790 */         this.antTypeTable.put(name, def);
/*     */       } 
/*     */     } catch (IOException ex) {
/* 793 */       throw new BuildException(""Can't load default type list"");
/*     */     } finally {
/* 795 */       if (in != null) {
/*     */         try {
/* 797 */           in.close();
/* 798 */         } catch (Exception ignore) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private synchronized void checkNamespace(String componentName) {
/* 810 */     if (componentName.indexOf(':') == -1) {
/*     */       return;
/*     */     }
/*     */     
/* 814 */     String uri = ProjectHelper.extractUriFromComponentName(componentName);
/* 815 */     if (!uri.startsWith(""antlib:"")) {
/*     */       return;
/*     */     }
/* 818 */     if (this.checkedNamespaces.contains(uri)) {
/*     */       return;
/*     */     }
/* 821 */     this.checkedNamespaces.add(uri);
/* 822 */     Typedef definer = new Typedef();
/* 823 */     definer.setProject(this.project);
/* 824 */     definer.setURI(uri);
/* 825 */     definer.setResource(uri.substring(""antlib:"".length()).replace('.', '/') + ""/antlib.xml"");
/*     */ 
/*     */ 
/*     */     
/* 829 */     definer.setOnError(new Definer.OnError(""ignore""));
/* 830 */     definer.init();
/* 831 */     definer.execute();
/*     */   }
/*     */ 
/*     */   
/*     */   private static class AntTypeTable
/*     */     extends Hashtable
/*     */   {
/*     */     private Project project;
/*     */ 
/*     */     
/* 841 */     public AntTypeTable(Project project) { this.project = project; }
/*     */ 
/*     */     
/*     */     public AntTypeDefinition getDefinition(String key) {
/* 845 */       AntTypeDefinition ret = super.get(key);
/* 846 */       return ret;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 851 */     public Object get(Object key) { return getTypeClass((String)key); }
/*     */ 
/*     */     
/*     */     public Object create(String name) {
/* 855 */       AntTypeDefinition def = getDefinition(name);
/* 856 */       if (def == null) {
/* 857 */         return null;
/*     */       }
/* 859 */       return def.create(this.project);
/*     */     }
/*     */     
/*     */     public Class getTypeClass(String name) {
/* 863 */       AntTypeDefinition def = getDefinition(name);
/* 864 */       if (def == null) {
/* 865 */         return null;
/*     */       }
/* 867 */       return def.getTypeClass(this.project);
/*     */     }
/*     */     
/*     */     public Class getExposedClass(String name) {
/* 871 */       AntTypeDefinition def = getDefinition(name);
/* 872 */       if (def == null) {
/* 873 */         return null;
/*     */       }
/* 875 */       return def.getExposedClass(this.project);
/*     */     }
/*     */     
/*     */     public boolean contains(Object clazz) {
/* 879 */       for (Iterator i = values().iterator(); i.hasNext(); ) {
/* 880 */         AntTypeDefinition def = (AntTypeDefinition)i.next();
/* 881 */         Class c = def.getExposedClass(this.project);
/* 882 */         if (c == clazz) {
/* 883 */           return true;
/*     */         }
/*     */       } 
/* 886 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 890 */     public boolean containsValue(Object value) { return contains(value); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\ComponentHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DefaultLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.util.DateUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultLogger
/*     */   implements BuildLogger
/*     */ {
/*     */   public static final int LEFT_COLUMN_SIZE = 12;
/*     */   protected PrintStream out;
/*     */   protected PrintStream err;
/*  85 */   protected int msgOutputLevel = 0;
/*     */ 
/*     */   
/*  88 */   private long startTime = System.currentTimeMillis();
/*     */ 
/*     */   
/*  91 */   protected static final String lSep = StringUtils.LINE_SEP;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setMessageOutputLevel(int level) { this.msgOutputLevel = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setOutputPrintStream(PrintStream output) { this.out = new PrintStream(output, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setErrorPrintStream(PrintStream err) { this.err = new PrintStream(err, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void buildStarted(BuildEvent event) { this.startTime = System.currentTimeMillis(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 170 */     Throwable error = event.getException();
/* 171 */     StringBuffer message = new StringBuffer();
/*     */     
/* 173 */     if (error == null) {
/* 174 */       message.append(StringUtils.LINE_SEP);
/* 175 */       message.append(""BUILD SUCCESSFUL"");
/*     */     } else {
/* 177 */       message.append(StringUtils.LINE_SEP);
/* 178 */       message.append(""BUILD FAILED"");
/* 179 */       message.append(StringUtils.LINE_SEP);
/*     */       
/* 181 */       if (3 <= this.msgOutputLevel || !(error instanceof BuildException)) {
/*     */         
/* 183 */         message.append(StringUtils.getStackTrace(error));
/*     */       }
/* 185 */       else if (error instanceof BuildException) {
/* 186 */         message.append(error.toString()).append(lSep);
/*     */       } else {
/* 188 */         message.append(error.getMessage()).append(lSep);
/*     */       } 
/*     */     } 
/*     */     
/* 192 */     message.append(StringUtils.LINE_SEP);
/* 193 */     message.append(""Total time: "");
/* 194 */     message.append(formatTime(System.currentTimeMillis() - this.startTime));
/*     */     
/* 196 */     String msg = message.toString();
/* 197 */     if (error == null) {
/* 198 */       printMessage(msg, this.out, 3);
/*     */     } else {
/* 200 */       printMessage(msg, this.err, 0);
/*     */     } 
/* 202 */     log(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 213 */     if (2 <= this.msgOutputLevel && !event.getTarget().getName().equals("""")) {
/*     */       
/* 215 */       String msg = StringUtils.LINE_SEP + event.getTarget().getName() + "":"";
/*     */       
/* 217 */       printMessage(msg, this.out, event.getPriority());
/* 218 */       log(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskStarted(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 255 */     int priority = event.getPriority();
/*     */     
/* 257 */     if (priority <= this.msgOutputLevel) {
/*     */       
/* 259 */       StringBuffer message = new StringBuffer();
/* 260 */       if (event.getTask() != null && !this.emacsMode) {
/*     */         
/* 262 */         String name = event.getTask().getTaskName();
/* 263 */         String label = ""["" + name + ""] "";
/* 264 */         int size = 12 - label.length();
/* 265 */         StringBuffer tmp = new StringBuffer();
/* 266 */         for (int i = 0; i < size; i++) {
/* 267 */           tmp.append("" "");
/*     */         }
/* 269 */         tmp.append(label);
/* 270 */         label = tmp.toString();
/*     */         
/*     */         try {
/* 273 */           BufferedReader r = new BufferedReader(new StringReader(event.getMessage()));
/*     */ 
/*     */           
/* 276 */           String line = r.readLine();
/* 277 */           boolean first = true;
/* 278 */           while (line != null) {
/* 279 */             if (!first) {
/* 280 */               message.append(StringUtils.LINE_SEP);
/*     */             }
/* 282 */             first = false;
/* 283 */             message.append(label).append(line);
/* 284 */             line = r.readLine();
/*     */           } 
/*     */         } catch (IOException e) {
/*     */           
/* 288 */           message.append(label).append(event.getMessage());
/*     */         } 
/*     */       } else {
/* 291 */         message.append(event.getMessage());
/*     */       } 
/*     */       
/* 294 */       String msg = message.toString();
/* 295 */       if (priority != 0) {
/* 296 */         printMessage(msg, this.out, priority);
/*     */       } else {
/* 298 */         printMessage(msg, this.err, priority);
/*     */       } 
/* 300 */       log(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 314 */   protected static String formatTime(long millis) { return DateUtils.formatElapsedTime(millis); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   protected void printMessage(String message, PrintStream stream, int priority) { stream.println(message); }
/*     */   
/*     */   protected void log(String message) {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\DefaultLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DemuxInputStream,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DemuxInputStream
/*     */   extends InputStream
/*     */ {
/*     */   private Project project;
/*     */   
/*  81 */   public DemuxInputStream(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/*  88 */     byte[] buffer = new byte[1];
/*  89 */     if (this.project.demuxInput(buffer, 0, 1) == -1) {
/*  90 */       return -1;
/*     */     }
/*  92 */     return buffer[0];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public int read(byte[] buffer, int offset, int length) throws IOException { return this.project.demuxInput(buffer, offset, length); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\DemuxInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DemuxOutputStream,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Hashtable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DemuxOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private static final int MAX_SIZE = 1024;
/*     */   private static final int INTIAL_SIZE = 132;
/*     */   private static final int CR = 13;
/*     */   private static final int LF = 10;
/*     */   
/*     */   private static class BufferInfo
/*     */   {
/*     */     private ByteArrayOutputStream buffer;
/*     */     
/*     */     private BufferInfo() {}
/*     */     
/*     */     private boolean crSeen = false;
/*     */   }
/* 102 */   private Hashtable buffers = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isErrorStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DemuxOutputStream(Project project, boolean isErrorStream) {
/* 125 */     this.project = project;
/* 126 */     this.isErrorStream = isErrorStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private BufferInfo getBufferInfo() {
/* 135 */     Thread current = Thread.currentThread();
/* 136 */     BufferInfo bufferInfo = (BufferInfo)this.buffers.get(current);
/* 137 */     if (bufferInfo == null) {
/* 138 */       bufferInfo = new BufferInfo();
/* 139 */       bufferInfo.buffer = new ByteArrayOutputStream(132);
/* 140 */       bufferInfo.crSeen = false;
/* 141 */       this.buffers.put(current, bufferInfo);
/*     */     } 
/* 143 */     return bufferInfo;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resetBufferInfo() {
/* 150 */     Thread current = Thread.currentThread();
/* 151 */     BufferInfo bufferInfo = (BufferInfo)this.buffers.get(current);
/*     */     try {
/* 153 */       bufferInfo.buffer.close();
/* 154 */     } catch (IOException e) {}
/*     */ 
/*     */     
/* 157 */     bufferInfo.buffer = new ByteArrayOutputStream();
/* 158 */     bufferInfo.crSeen = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeBuffer() {
/* 165 */     Thread current = Thread.currentThread();
/* 166 */     this.buffers.remove(current);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int cc) throws IOException {
/* 177 */     byte c = (byte)cc;
/*     */     
/* 179 */     BufferInfo bufferInfo = getBufferInfo();
/*     */     
/* 181 */     if (c == 10) {
/*     */       
/* 183 */       bufferInfo.buffer.write(cc);
/* 184 */       processBuffer(bufferInfo.buffer);
/*     */     } else {
/* 186 */       if (bufferInfo.crSeen)
/*     */       {
/* 188 */         processBuffer(bufferInfo.buffer);
/*     */       }
/*     */       
/* 191 */       bufferInfo.buffer.write(cc);
/*     */     } 
/* 193 */     bufferInfo.crSeen = (c == 13);
/* 194 */     if (!bufferInfo.crSeen && bufferInfo.buffer.size() > 1024) {
/* 195 */       processBuffer(bufferInfo.buffer);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer(ByteArrayOutputStream buffer) {
/* 208 */     String output = buffer.toString();
/* 209 */     this.project.demuxOutput(output, this.isErrorStream);
/* 210 */     resetBufferInfo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processFlush(ByteArrayOutputStream buffer) {
/* 222 */     String output = buffer.toString();
/* 223 */     this.project.demuxFlush(output, this.isErrorStream);
/* 224 */     resetBufferInfo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 235 */     flush();
/* 236 */     removeBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void flush() throws IOException {
/* 246 */     BufferInfo bufferInfo = getBufferInfo();
/* 247 */     if (bufferInfo.buffer.size() > 0) {
/* 248 */       processFlush(bufferInfo.buffer);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] b, int off, int len) throws IOException {
/* 263 */     int offset = off;
/* 264 */     int blockStartOffset = offset;
/* 265 */     int remaining = len;
/* 266 */     BufferInfo bufferInfo = getBufferInfo();
/* 267 */     while (remaining > 0) {
/* 268 */       while (remaining > 0 && b[offset] != 10 && b[offset] != 13) {
/* 269 */         offset++;
/* 270 */         remaining--;
/*     */       } 
/*     */       
/* 273 */       int blockLength = offset - blockStartOffset;
/* 274 */       if (blockLength > 0) {
/* 275 */         bufferInfo.buffer.write(b, blockStartOffset, blockLength);
/*     */       }
/* 277 */       while (remaining > 0 && (b[offset] == 10 || b[offset] == 13)) {
/* 278 */         write(b[offset]);
/* 279 */         offset++;
/* 280 */         remaining--;
/*     */       } 
/* 282 */       blockStartOffset = offset;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\DemuxOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Diagnostics,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.tools.ant.util.LoaderUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class Diagnostics
/*     */ {
/*     */   private static final String TEST_CLASS = ""org.apache.tools.ant.taskdefs.optional.Test"";
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public static boolean isOptionalAvailable() {
/*     */     try {
/*  94 */       Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/*     */     } catch (ClassNotFoundException e) {
/*  96 */       return false;
/*     */     } 
/*  98 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void validateVersion() throws BuildException {
/*     */     try {
/* 108 */       Class optional = Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/*     */       
/* 110 */       String coreVersion = getImplementationVersion(Main.class);
/* 111 */       String optionalVersion = getImplementationVersion(optional);
/*     */       
/* 113 */       if (coreVersion != null && !coreVersion.equals(optionalVersion)) {
/* 114 */         throw new BuildException(""Invalid implementation version between Ant core and Ant optional tasks.\n core    : "" + coreVersion + ""\n"" + "" optional: "" + optionalVersion);
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 119 */     catch (ClassNotFoundException e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static File[] listLibraries() {
/* 131 */     String home = System.getProperty(""ant.home"");
/* 132 */     if (home == null) {
/* 133 */       return null;
/*     */     }
/* 135 */     File libDir = new File(home, ""lib"");
/* 136 */     FilenameFilter filter = new FilenameFilter() {
/*     */         public boolean accept(File dir, String name) {
/* 138 */           return name.endsWith("".jar"");
/*     */         }
/*     */       };
/*     */     
/* 142 */     String[] filenames = libDir.list(filter);
/* 143 */     if (filenames == null) {
/* 144 */       return null;
/*     */     }
/* 146 */     File[] files = new File[filenames.length];
/* 147 */     for (int i = 0; i < filenames.length; i++) {
/* 148 */       files[i] = new File(libDir, filenames[i]);
/*     */     }
/* 150 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public static void main(String[] args) { doReport(System.out); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getImplementationVersion(Class clazz) {
/*     */     try {
/* 171 */       Method method = Class.class.getMethod(""getPackage"", new Class[0]);
/* 172 */       Object pkg = method.invoke(clazz, null);
/* 173 */       if (pkg != null) {
/*     */         
/* 175 */         method = pkg.getClass().getMethod(""getImplementationVersion"", new Class[0]);
/* 176 */         Object version = method.invoke(pkg, null);
/* 177 */         return (String)version;
/*     */       } 
/*     */     } catch (Exception e) {
/*     */       
/* 181 */       return ""?.?"";
/*     */     } 
/* 183 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getXmlParserName() {
/* 191 */     SAXParser saxParser = getSAXParser();
/* 192 */     if (saxParser == null) {
/* 193 */       return ""Could not create an XML Parser"";
/*     */     }
/*     */ 
/*     */     
/* 197 */     String saxParserName = saxParser.getClass().getName();
/* 198 */     return saxParserName;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static SAXParser getSAXParser() {
/* 206 */     SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
/* 207 */     if (saxParserFactory == null) {
/* 208 */       return null;
/*     */     }
/* 210 */     SAXParser saxParser = null;
/*     */     try {
/* 212 */       saxParser = saxParserFactory.newSAXParser();
/* 213 */     } catch (Exception e) {}
/*     */ 
/*     */     
/* 216 */     return saxParser;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getXMLParserLocation() {
/* 225 */     SAXParser saxParser = getSAXParser();
/* 226 */     if (saxParser == null) {
/* 227 */       return null;
/*     */     }
/* 229 */     String location = getClassLocation(saxParser.getClass());
/* 230 */     return location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getClassLocation(Class clazz) {
/* 240 */     File f = LoaderUtils.getClassSource(clazz);
/* 241 */     return (f == null) ? null : f.getAbsolutePath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void doReport(PrintStream out) {
/* 250 */     out.println(""------- Ant diagnostics report -------"");
/* 251 */     out.println(Main.getAntVersion());
/* 252 */     out.println();
/* 253 */     out.println(""-------------------------------------------"");
/* 254 */     out.println("" Implementation Version (JDK1.2+ only)"");
/* 255 */     out.println(""-------------------------------------------"");
/* 256 */     out.println(""core tasks     : "" + getImplementationVersion(Main.class));
/*     */     
/* 258 */     Class optional = null;
/*     */     try {
/* 260 */       optional = Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/*     */       
/* 262 */       out.println(""optional tasks : "" + getImplementationVersion(optional));
/*     */     } catch (ClassNotFoundException e) {
/*     */       
/* 265 */       out.println(""optional tasks : not available"");
/*     */     } 
/*     */     
/* 268 */     out.println();
/* 269 */     out.println(""-------------------------------------------"");
/* 270 */     out.println("" ANT_HOME/lib jar listing"");
/* 271 */     out.println(""-------------------------------------------"");
/* 272 */     doReportLibraries(out);
/*     */     
/* 274 */     out.println();
/* 275 */     out.println(""-------------------------------------------"");
/* 276 */     out.println("" Tasks availability"");
/* 277 */     out.println(""-------------------------------------------"");
/* 278 */     doReportTasksAvailability(out);
/*     */     
/* 280 */     out.println();
/* 281 */     out.println(""-------------------------------------------"");
/* 282 */     out.println("" org.apache.env.Which diagnostics"");
/* 283 */     out.println(""-------------------------------------------"");
/* 284 */     doReportWhich(out);
/*     */ 
/*     */     
/* 287 */     out.println();
/* 288 */     out.println(""-------------------------------------------"");
/* 289 */     out.println("" XML Parser information"");
/* 290 */     out.println(""-------------------------------------------"");
/* 291 */     doReportParserInfo(out);
/*     */     
/* 293 */     out.println();
/* 294 */     out.println(""-------------------------------------------"");
/* 295 */     out.println("" System properties"");
/* 296 */     out.println(""-------------------------------------------"");
/* 297 */     doReportSystemProperties(out);
/*     */     
/* 299 */     out.println();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportSystemProperties(PrintStream out) {
/* 307 */     Enumeration keys = System.getProperties().keys();
/* 308 */     while (keys.hasMoreElements()) {
/* 309 */       String key = keys.nextElement();
/* 310 */       out.println(key + "" : "" + System.getProperty(key));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportLibraries(PrintStream out) {
/* 320 */     out.println(""ant.home: "" + System.getProperty(""ant.home""));
/* 321 */     File[] libs = listLibraries();
/* 322 */     if (libs == null) {
/* 323 */       out.println(""Unable to list libraries."");
/*     */       return;
/*     */     } 
/* 326 */     for (int i = 0; i < libs.length; i++) {
/* 327 */       out.println(libs[i].getName() + "" ("" + libs[i].length() + "" bytes)"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportWhich(PrintStream out) {
/* 338 */     Throwable error = null;
/*     */     try {
/* 340 */       Class which = Class.forName(""org.apache.env.Which"");
/* 341 */       Method method = which.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/* 343 */       method.invoke(null, new Object[] { new String[0] });
/*     */     } catch (ClassNotFoundException e) {
/* 345 */       out.println(""Not available."");
/* 346 */       out.println(""Download it at http://xml.apache.org/commons/"");
/*     */     } catch (InvocationTargetException e) {
/* 348 */       error = (e.getTargetException() == null) ? e : e.getTargetException();
/*     */     } catch (Throwable e) {
/* 350 */       error = e = null;
/*     */     } 
/*     */     
/* 353 */     if (error != null) {
/* 354 */       out.println(""Error while running org.apache.env.Which"");
/* 355 */       error.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportTasksAvailability(PrintStream out) {
/* 368 */     InputStream is = Main.class.getResourceAsStream(""/org/apache/tools/ant/taskdefs/defaults.properties"");
/*     */     
/* 370 */     if (is == null) {
/* 371 */       out.println(""None available"");
/*     */     } else {
/* 373 */       Properties props = new Properties();
/*     */       try {
/* 375 */         props.load(is);
/* 376 */         for (Enumeration keys = props.keys(); keys.hasMoreElements(); ) {
/* 377 */           String key = keys.nextElement();
/* 378 */           String classname = props.getProperty(key);
/*     */           try {
/* 380 */             Class.forName(classname);
/* 381 */             props.remove(key);
/*     */           } catch (ClassNotFoundException e) {
/* 383 */             out.println(key + "" : Not Available"");
/*     */           } catch (NoClassDefFoundError e) {
/* 385 */             String pkg = e.getMessage().replace('/', '.');
/* 386 */             out.println(key + "" : Missing dependency "" + pkg);
/*     */           } catch (Error e) {
/* 388 */             out.println(key + "" : Initialization error"");
/*     */           } 
/*     */         } 
/* 391 */         if (props.size() == 0) {
/* 392 */           out.println(""All defined tasks are available"");
/*     */         }
/*     */       } catch (IOException e) {
/* 395 */         out.println(e.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportParserInfo(PrintStream out) {
/* 405 */     String parserName = getXmlParserName();
/* 406 */     String parserLocation = getXMLParserLocation();
/* 407 */     if (parserName == null) {
/* 408 */       parserName = ""unknown"";
/*     */     }
/* 410 */     if (parserLocation == null) {
/* 411 */       parserLocation = ""unknown"";
/*     */     }
/* 413 */     out.println(""XML Parser : "" + parserName);
/* 414 */     out.println(""XML Parser Location: "" + parserLocation);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Diagnostics.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DirectoryScanner,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.util.Arrays;
/*      */ import java.util.Enumeration;
/*      */ import java.util.HashMap;
/*      */ import java.util.HashSet;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Map;
/*      */ import java.util.Set;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.taskdefs.condition.Os;
/*      */ import org.apache.tools.ant.types.Resource;
/*      */ import org.apache.tools.ant.types.ResourceFactory;
/*      */ import org.apache.tools.ant.types.selectors.FileSelector;
/*      */ import org.apache.tools.ant.types.selectors.SelectorScanner;
/*      */ import org.apache.tools.ant.types.selectors.SelectorUtils;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class DirectoryScanner
/*      */   implements FileScanner, SelectorScanner, ResourceFactory
/*      */ {
/*  168 */   private static final boolean ON_VMS = Os.isFamily(""openvms"");
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  181 */   protected static final String[] DEFAULTEXCLUDES = new String[] { ""**/*~"", ""**/#*#"", ""**/.#*"", ""**/%*%"", ""**/._*"", ""**/CVS"", ""**/CVS/**"", ""**/.cvsignore"", ""**/SCCS"", ""**/SCCS/**"", ""**/vssver.scc"", ""**/.svn"", ""**/.svn/**"", ""**/.DS_Store"" };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  214 */   private static Vector defaultExcludes = new Vector(); protected File basedir; protected String[] includes; protected String[] excludes;
/*      */   static  {
/*  216 */     resetDefaultExcludes();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  286 */     fileUtils = FileUtils.newFileUtils();
/*      */   }
/*      */ 
/*      */   
/*      */   protected FileSelector[] selectors = null;
/*      */   
/*      */   protected Vector filesIncluded;
/*      */   
/*      */   protected Vector filesNotIncluded;
/*      */   
/*      */   protected Vector filesExcluded;
/*      */   
/*      */   protected Vector dirsIncluded;
/*      */   
/*      */   protected Vector dirsNotIncluded;
/*      */   
/*      */   protected Vector dirsExcluded;
/*      */   
/*      */   protected Vector filesDeselected;
/*      */   protected Vector dirsDeselected;
/*      */   protected boolean haveSlowResults = false;
/*      */   protected boolean isCaseSensitive = true;
/*      */   private boolean followSymlinks = true;
/*      */   private static final FileUtils fileUtils;
/*      */   protected boolean everythingIncluded = true;
/*      */   private Map fileListMap;
/*      */   private Set scannedDirs;
/*      */   
/*  314 */   protected static boolean matchPatternStart(String pattern, String str) { return SelectorUtils.matchPatternStart(pattern, str); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  336 */   protected static boolean matchPatternStart(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.matchPatternStart(pattern, str, isCaseSensitive); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  351 */   protected static boolean matchPath(String pattern, String str) { return SelectorUtils.matchPath(pattern, str); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  369 */   protected static boolean matchPath(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.matchPath(pattern, str, isCaseSensitive); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  387 */   public static boolean match(String pattern, String str) { return SelectorUtils.match(pattern, str); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  409 */   protected static boolean match(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.match(pattern, str, isCaseSensitive); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  423 */   public static String[] getDefaultExcludes() { return (String[])defaultExcludes.toArray((Object[])new String[defaultExcludes.size()]); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static boolean addDefaultExclude(String s) {
/*  439 */     if (defaultExcludes.indexOf(s) == -1) {
/*  440 */       defaultExcludes.add(s);
/*  441 */       return true;
/*      */     } 
/*  443 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  458 */   public static boolean removeDefaultExclude(String s) { return defaultExcludes.remove(s); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void resetDefaultExcludes() {
/*  467 */     defaultExcludes = new Vector();
/*      */     
/*  469 */     for (int i = 0; i < DEFAULTEXCLUDES.length; i++) {
/*  470 */       defaultExcludes.add(DEFAULTEXCLUDES[i]);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  484 */   public void setBasedir(String basedir) { setBasedir(new File(basedir.replace('/', File.separatorChar).replace('\\', File.separatorChar))); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  496 */   public void setBasedir(File basedir) { this.basedir = basedir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  506 */   public File getBasedir() { return this.basedir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  516 */   public boolean isCaseSensitive() { return this.isCaseSensitive; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  526 */   public void setCaseSensitive(boolean isCaseSensitive) { this.isCaseSensitive = isCaseSensitive; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  537 */   public boolean isFollowSymlinks() { return this.followSymlinks; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  546 */   public void setFollowSymlinks(boolean followSymlinks) { this.followSymlinks = followSymlinks; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setIncludes(String[] includes) {
/*  563 */     if (includes == null) {
/*  564 */       this.includes = null;
/*      */     } else {
/*  566 */       this.includes = new String[includes.length];
/*  567 */       for (int i = 0; i < includes.length; i++) {
/*      */         
/*  569 */         String pattern = includes[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */         
/*  571 */         if (pattern.endsWith(File.separator)) {
/*  572 */           pattern = pattern + ""**"";
/*      */         }
/*  574 */         this.includes[i] = pattern;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExcludes(String[] excludes) {
/*  593 */     if (excludes == null) {
/*  594 */       this.excludes = null;
/*      */     } else {
/*  596 */       this.excludes = new String[excludes.length];
/*  597 */       for (int i = 0; i < excludes.length; i++) {
/*      */         
/*  599 */         String pattern = excludes[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */         
/*  601 */         if (pattern.endsWith(File.separator)) {
/*  602 */           pattern = pattern + ""**"";
/*      */         }
/*  604 */         this.excludes[i] = pattern;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  616 */   public void setSelectors(FileSelector[] selectors) { this.selectors = selectors; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  628 */   public boolean isEverythingIncluded() { return this.everythingIncluded; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void scan() throws IllegalStateException {
/*  641 */     if (this.basedir == null) {
/*  642 */       throw new IllegalStateException(""No basedir set"");
/*      */     }
/*  644 */     if (!this.basedir.exists()) {
/*  645 */       throw new IllegalStateException(""basedir "" + this.basedir + "" does not exist"");
/*      */     }
/*      */     
/*  648 */     if (!this.basedir.isDirectory()) {
/*  649 */       throw new IllegalStateException(""basedir "" + this.basedir + "" is not a directory"");
/*      */     }
/*      */ 
/*      */     
/*  653 */     if (this.includes == null) {
/*      */       
/*  655 */       this.includes = new String[1];
/*  656 */       this.includes[0] = ""**"";
/*      */     } 
/*  658 */     if (this.excludes == null) {
/*  659 */       this.excludes = new String[0];
/*      */     }
/*      */     
/*  662 */     this.filesIncluded = new Vector();
/*  663 */     this.filesNotIncluded = new Vector();
/*  664 */     this.filesExcluded = new Vector();
/*  665 */     this.filesDeselected = new Vector();
/*  666 */     this.dirsIncluded = new Vector();
/*  667 */     this.dirsNotIncluded = new Vector();
/*  668 */     this.dirsExcluded = new Vector();
/*  669 */     this.dirsDeselected = new Vector();
/*      */     
/*  671 */     if (isIncluded("""")) {
/*  672 */       if (!isExcluded("""")) {
/*  673 */         if (isSelected("""", this.basedir)) {
/*  674 */           this.dirsIncluded.addElement("""");
/*      */         } else {
/*  676 */           this.dirsDeselected.addElement("""");
/*      */         } 
/*      */       } else {
/*  679 */         this.dirsExcluded.addElement("""");
/*      */       } 
/*      */     } else {
/*  682 */       this.dirsNotIncluded.addElement("""");
/*      */     } 
/*  684 */     checkIncludePatterns();
/*  685 */     clearCaches();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void checkIncludePatterns() {
/*  694 */     Hashtable newroots = new Hashtable();
/*      */ 
/*      */     
/*  697 */     for (int icounter = 0; icounter < this.includes.length; icounter++) {
/*  698 */       String newpattern = SelectorUtils.rtrimWildcardTokens(this.includes[icounter]);
/*      */       
/*  700 */       newroots.put(newpattern, this.includes[icounter]);
/*      */     } 
/*      */     
/*  703 */     if (newroots.containsKey("""")) {
/*      */       
/*  705 */       scandir(this.basedir, """", true);
/*      */     }
/*      */     else {
/*      */       
/*  709 */       Enumeration enum2 = newroots.keys();
/*      */       
/*  711 */       File canonBase = null;
/*      */       try {
/*  713 */         canonBase = this.basedir.getCanonicalFile();
/*      */       } catch (IOException ex) {
/*  715 */         throw new BuildException(ex);
/*      */       } 
/*      */       
/*  718 */       while (enum2.hasMoreElements()) {
/*  719 */         String currentelement = enum2.nextElement();
/*  720 */         String originalpattern = (String)newroots.get(currentelement);
/*  721 */         File myfile = new File(this.basedir, currentelement);
/*      */         
/*  723 */         if (myfile.exists()) {
/*      */           
/*      */           try {
/*      */ 
/*      */             
/*  728 */             File canonFile = myfile.getCanonicalFile();
/*  729 */             String path = fileUtils.removeLeadingPath(canonBase, canonFile);
/*      */             
/*  731 */             if (!path.equals(currentelement) || ON_VMS) {
/*  732 */               myfile = findFile(this.basedir, currentelement);
/*  733 */               if (myfile != null) {
/*  734 */                 currentelement = fileUtils.removeLeadingPath(this.basedir, myfile);
/*      */               }
/*      */             }
/*      */           
/*      */           } catch (IOException ex) {
/*      */             
/*  740 */             throw new BuildException(ex);
/*      */           } 
/*      */         }
/*      */         
/*  744 */         if ((myfile == null || !myfile.exists()) && !this.isCaseSensitive) {
/*  745 */           File f = findFileCaseInsensitive(this.basedir, currentelement);
/*  746 */           if (f.exists()) {
/*      */ 
/*      */             
/*  749 */             currentelement = fileUtils.removeLeadingPath(this.basedir, f);
/*      */             
/*  751 */             myfile = f;
/*      */           } 
/*      */         } 
/*      */         
/*  755 */         if (myfile == null || !myfile.exists() || (
/*  756 */           !this.followSymlinks && isSymlink(this.basedir, currentelement))) {
/*      */           continue;
/*      */         }
/*      */ 
/*      */         
/*  761 */         if (myfile.isDirectory()) {
/*  762 */           if (isIncluded(currentelement) && currentelement.length() > 0) {
/*      */             
/*  764 */             accountForIncludedDir(currentelement, myfile, true); continue;
/*      */           } 
/*  766 */           if (currentelement.length() > 0 && 
/*  767 */             currentelement.charAt(currentelement.length() - 1) != File.separatorChar)
/*      */           {
/*      */             
/*  770 */             currentelement = currentelement + File.separatorChar;
/*      */           }
/*      */ 
/*      */           
/*  774 */           scandir(myfile, currentelement, true);
/*      */           continue;
/*      */         } 
/*  777 */         if (this.isCaseSensitive && originalpattern.equals(currentelement)) {
/*      */           
/*  779 */           accountForIncludedFile(currentelement, myfile); continue;
/*  780 */         }  if (!this.isCaseSensitive && originalpattern.equalsIgnoreCase(currentelement))
/*      */         {
/*      */           
/*  783 */           accountForIncludedFile(currentelement, myfile);
/*      */         }
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void slowScan() {
/*  800 */     if (this.haveSlowResults) {
/*      */       return;
/*      */     }
/*      */     
/*  804 */     String[] excl = new String[this.dirsExcluded.size()];
/*  805 */     this.dirsExcluded.copyInto((Object[])excl);
/*      */     
/*  807 */     String[] notIncl = new String[this.dirsNotIncluded.size()];
/*  808 */     this.dirsNotIncluded.copyInto((Object[])notIncl);
/*      */     
/*  810 */     for (int i = 0; i < excl.length; i++) {
/*  811 */       if (!couldHoldIncluded(excl[i])) {
/*  812 */         scandir(new File(this.basedir, excl[i]), excl[i] + File.separator, false);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  817 */     for (int i = 0; i < notIncl.length; i++) {
/*  818 */       if (!couldHoldIncluded(notIncl[i])) {
/*  819 */         scandir(new File(this.basedir, notIncl[i]), notIncl[i] + File.separator, false);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  824 */     this.haveSlowResults = true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void scandir(File dir, String vpath, boolean fast) {
/*  849 */     if (fast && hasBeenScanned(vpath)) {
/*      */       return;
/*      */     }
/*  852 */     String[] newfiles = dir.list();
/*      */     
/*  854 */     if (newfiles == null)
/*      */     {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  862 */       throw new BuildException(""IO error scanning directory "" + dir.getAbsolutePath());
/*      */     }
/*      */ 
/*      */     
/*  866 */     if (!this.followSymlinks) {
/*  867 */       Vector noLinks = new Vector();
/*  868 */       for (int i = 0; i < newfiles.length; i++) {
/*      */         try {
/*  870 */           if (fileUtils.isSymbolicLink(dir, newfiles[i])) {
/*  871 */             String name = vpath + newfiles[i];
/*  872 */             File file = new File(dir, newfiles[i]);
/*  873 */             if (file.isDirectory()) {
/*  874 */               this.dirsExcluded.addElement(name);
/*      */             } else {
/*  876 */               this.filesExcluded.addElement(name);
/*      */             } 
/*      */           } else {
/*  879 */             noLinks.addElement(newfiles[i]);
/*      */           } 
/*      */         } catch (IOException ioe) {
/*  882 */           String msg = ""IOException caught while checking for links, couldn't get canonical path!"";
/*      */ 
/*      */           
/*  885 */           System.err.println(msg);
/*  886 */           noLinks.addElement(newfiles[i]);
/*      */         } 
/*      */       } 
/*  889 */       newfiles = new String[noLinks.size()];
/*  890 */       noLinks.copyInto((Object[])newfiles);
/*      */     } 
/*      */     
/*  893 */     for (int i = 0; i < newfiles.length; i++) {
/*  894 */       String name = vpath + newfiles[i];
/*  895 */       File file = new File(dir, newfiles[i]);
/*  896 */       if (file.isDirectory()) {
/*  897 */         if (isIncluded(name)) {
/*  898 */           accountForIncludedDir(name, file, fast);
/*      */         } else {
/*  900 */           this.everythingIncluded = false;
/*  901 */           this.dirsNotIncluded.addElement(name);
/*  902 */           if (fast && couldHoldIncluded(name)) {
/*  903 */             scandir(file, name + File.separator, fast);
/*      */           }
/*      */         } 
/*  906 */         if (!fast) {
/*  907 */           scandir(file, name + File.separator, fast);
/*      */         }
/*  909 */       } else if (file.isFile()) {
/*  910 */         if (isIncluded(name)) {
/*  911 */           accountForIncludedFile(name, file);
/*      */         } else {
/*  913 */           this.everythingIncluded = false;
/*  914 */           this.filesNotIncluded.addElement(name);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void accountForIncludedFile(String name, File file) {
/*  925 */     if (!this.filesIncluded.contains(name) && !this.filesExcluded.contains(name) && !this.filesDeselected.contains(name))
/*      */     {
/*      */ 
/*      */       
/*  929 */       if (!isExcluded(name)) {
/*  930 */         if (isSelected(name, file)) {
/*  931 */           this.filesIncluded.addElement(name);
/*      */         } else {
/*  933 */           this.everythingIncluded = false;
/*  934 */           this.filesDeselected.addElement(name);
/*      */         } 
/*      */       } else {
/*  937 */         this.everythingIncluded = false;
/*  938 */         this.filesExcluded.addElement(name);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void accountForIncludedDir(String name, File file, boolean fast) {
/*  951 */     if (!this.dirsIncluded.contains(name) && !this.dirsExcluded.contains(name) && !this.dirsDeselected.contains(name))
/*      */     {
/*      */ 
/*      */       
/*  955 */       if (!isExcluded(name)) {
/*  956 */         if (isSelected(name, file)) {
/*  957 */           this.dirsIncluded.addElement(name);
/*  958 */           if (fast) {
/*  959 */             scandir(file, name + File.separator, fast);
/*      */           }
/*      */         } else {
/*  962 */           this.everythingIncluded = false;
/*  963 */           this.dirsDeselected.addElement(name);
/*  964 */           if (fast && couldHoldIncluded(name)) {
/*  965 */             scandir(file, name + File.separator, fast);
/*      */           }
/*      */         } 
/*      */       } else {
/*      */         
/*  970 */         this.everythingIncluded = false;
/*  971 */         this.dirsExcluded.addElement(name);
/*  972 */         if (fast && couldHoldIncluded(name)) {
/*  973 */           scandir(file, name + File.separator, fast);
/*      */         }
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isIncluded(String name) {
/*  987 */     for (int i = 0; i < this.includes.length; i++) {
/*  988 */       if (matchPath(this.includes[i], name, this.isCaseSensitive)) {
/*  989 */         return true;
/*      */       }
/*      */     } 
/*  992 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean couldHoldIncluded(String name) {
/* 1004 */     for (int i = 0; i < this.includes.length; i++) {
/* 1005 */       if (matchPatternStart(this.includes[i], name, this.isCaseSensitive) && 
/* 1006 */         isMorePowerfulThanExcludes(name, this.includes[i])) {
/* 1007 */         return true;
/*      */       }
/*      */     } 
/*      */     
/* 1011 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isMorePowerfulThanExcludes(String name, String includepattern) {
/* 1031 */     String soughtexclude = name + File.separator + ""**"";
/* 1032 */     for (int counter = 0; counter < this.excludes.length; counter++) {
/* 1033 */       if (this.excludes[counter].equals(soughtexclude)) {
/* 1034 */         return false;
/*      */       }
/*      */     } 
/* 1037 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isExcluded(String name) {
/* 1048 */     for (int i = 0; i < this.excludes.length; i++) {
/* 1049 */       if (matchPath(this.excludes[i], name, this.isCaseSensitive)) {
/* 1050 */         return true;
/*      */       }
/*      */     } 
/* 1053 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean isSelected(String name, File file) {
/* 1065 */     if (this.selectors != null) {
/* 1066 */       for (int i = 0; i < this.selectors.length; i++) {
/* 1067 */         if (!this.selectors[i].isSelected(this.basedir, name, file)) {
/* 1068 */           return false;
/*      */         }
/*      */       } 
/*      */     }
/* 1072 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getIncludedFiles() {
/* 1084 */     String[] files = new String[this.filesIncluded.size()];
/* 1085 */     this.filesIncluded.copyInto((Object[])files);
/* 1086 */     Arrays.sort((Object[])files);
/* 1087 */     return files;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getNotIncludedFiles() {
/* 1101 */     slowScan();
/* 1102 */     String[] files = new String[this.filesNotIncluded.size()];
/* 1103 */     this.filesNotIncluded.copyInto((Object[])files);
/* 1104 */     return files;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getExcludedFiles() {
/* 1119 */     slowScan();
/* 1120 */     String[] files = new String[this.filesExcluded.size()];
/* 1121 */     this.filesExcluded.copyInto((Object[])files);
/* 1122 */     return files;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getDeselectedFiles() {
/* 1137 */     slowScan();
/* 1138 */     String[] files = new String[this.filesDeselected.size()];
/* 1139 */     this.filesDeselected.copyInto((Object[])files);
/* 1140 */     return files;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getIncludedDirectories() {
/* 1152 */     String[] directories = new String[this.dirsIncluded.size()];
/* 1153 */     this.dirsIncluded.copyInto((Object[])directories);
/* 1154 */     Arrays.sort((Object[])directories);
/* 1155 */     return directories;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getNotIncludedDirectories() {
/* 1169 */     slowScan();
/* 1170 */     String[] directories = new String[this.dirsNotIncluded.size()];
/* 1171 */     this.dirsNotIncluded.copyInto((Object[])directories);
/* 1172 */     return directories;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getExcludedDirectories() {
/* 1187 */     slowScan();
/* 1188 */     String[] directories = new String[this.dirsExcluded.size()];
/* 1189 */     this.dirsExcluded.copyInto((Object[])directories);
/* 1190 */     return directories;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getDeselectedDirectories() {
/* 1205 */     slowScan();
/* 1206 */     String[] directories = new String[this.dirsDeselected.size()];
/* 1207 */     this.dirsDeselected.copyInto((Object[])directories);
/* 1208 */     return directories;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDefaultExcludes() {
/* 1215 */     int excludesLength = (this.excludes == null) ? 0 : this.excludes.length;
/*      */     
/* 1217 */     String[] newExcludes = new String[excludesLength + defaultExcludes.size()];
/* 1218 */     if (excludesLength > 0) {
/* 1219 */       System.arraycopy(this.excludes, 0, newExcludes, 0, excludesLength);
/*      */     }
/* 1221 */     String[] defaultExcludesTemp = getDefaultExcludes();
/* 1222 */     for (int i = 0; i < defaultExcludesTemp.length; i++) {
/* 1223 */       newExcludes[i + excludesLength] = defaultExcludesTemp[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */     }
/*      */ 
/*      */     
/* 1227 */     this.excludes = newExcludes;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Resource getResource(String name) {
/* 1238 */     File f = fileUtils.resolveFile(this.basedir, name);
/* 1239 */     return new Resource(name, f.exists(), f.lastModified(), f.isDirectory());
/*      */   }
/*      */   private String[] list(File file) { String[] files = (String[])this.fileListMap.get(file); if (files == null) { files = file.list(); if (files != null)
/*      */         this.fileListMap.put(file, files);  }  return files; }
/*      */   private File findFileCaseInsensitive(File base, String path) { File f = findFileCaseInsensitive(base, SelectorUtils.tokenizePath(path)); return (f == null) ? new File(base, path) : f; } private File findFileCaseInsensitive(File base, Vector pathElements) { if (pathElements.size() == 0)
/*      */       return base;  if (!base.isDirectory())
/*      */       return null;  String[] files = list(base); if (files == null)
/*      */       throw new BuildException(""IO error scanning directory "" + base.getAbsolutePath());  String current = pathElements.remove(0); for (int i = 0; i < files.length; i++) { if (files[i].equals(current)) { base = new File(base, files[i]); return findFileCaseInsensitive(base, pathElements); }  }  for (int i = 0; i < files.length; i++) { if (files[i].equalsIgnoreCase(current)) { base = new File(base, files[i]); return findFileCaseInsensitive(base, pathElements); }
/*      */        }
/* 1248 */      return null; } public DirectoryScanner() { this.fileListMap = new HashMap();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1405 */     this.scannedDirs = new HashSet(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1416 */   private boolean hasBeenScanned(String vpath) { return !this.scannedDirs.add(vpath); } private File findFile(File base, String path) { return findFile(base, SelectorUtils.tokenizePath(path)); } private File findFile(File base, Vector pathElements) { if (pathElements.size() == 0)
/*      */       return base;  if (!base.isDirectory())
/*      */       return null;  String[] files = list(base); if (files == null)
/*      */       throw new BuildException(""IO error scanning directory "" + base.getAbsolutePath());  String current = pathElements.remove(0); for (int i = 0; i < files.length; i++) {
/*      */       if (files[i].equals(current)) {
/*      */         base = new File(base, files[i]); return findFile(base, pathElements);
/*      */       } 
/*      */     } 
/*      */     return null; }
/* 1425 */   private void clearCaches() { this.fileListMap.clear();
/* 1426 */     this.scannedDirs.clear(); }
/*      */ 
/*      */   
/*      */   private boolean isSymlink(File base, String path) { return isSymlink(base, SelectorUtils.tokenizePath(path)); }
/*      */   
/*      */   private boolean isSymlink(File base, Vector pathElements) {
/*      */     if (pathElements.size() > 0) {
/*      */       String current = pathElements.remove(0);
/*      */       try {
/*      */         if (fileUtils.isSymbolicLink(base, current))
/*      */           return true; 
/*      */         base = new File(base, current);
/*      */         return isSymlink(base, pathElements);
/*      */       } catch (IOException ioe) {
/*      */         String msg = ""IOException caught while checking for links, couldn't get canonical path!"";
/*      */         System.err.println(msg);
/*      */         return false;
/*      */       } 
/*      */     } 
/*      */     return false;
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\DirectoryScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DynamicConfigurator,"package org.apache.tools.ant;
public interface DynamicConfigurator {
  void setDynamicAttribute(String paramString1, String paramString2) throws BuildException;
  Object createDynamicElement(String paramString) throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\DynamicConfigurator.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ExitException,"/*    */ package org.apache.tools.ant;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ExitException
/*    */   extends SecurityException
/*    */ {
/*    */   private int status;
/*    */   
/*    */   public ExitException(int status) {
/* 75 */     super(""ExitException: status "" + status);
/* 76 */     this.status = status;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public ExitException(String msg, int status) {
/* 85 */     super(msg);
/* 86 */     this.status = status;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 95 */   public int getStatus() { return this.status; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\ExitException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.FileScanner,"package org.apache.tools.ant;
import java.io.File;
public interface FileScanner {
  void addDefaultExcludes();
  File getBasedir();
  String[] getExcludedDirectories();
  String[] getExcludedFiles();
  String[] getIncludedDirectories();
  String[] getIncludedFiles();
  String[] getNotIncludedDirectories();
  String[] getNotIncludedFiles();
  void scan() throws IllegalStateException;
  void setBasedir(String paramString);
  void setBasedir(File paramFile);
  void setExcludes(String[] paramArrayOfString);
  void setIncludes(String[] paramArrayOfString);
  void setCaseSensitive(boolean paramBoolean);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\FileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.IntrospectionHelper,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.lang.reflect.Constructor;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Method;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.List;
/*      */ import java.util.Locale;
/*      */ import org.apache.tools.ant.taskdefs.PreSetDef;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public final class IntrospectionHelper
/*      */   implements BuildListener
/*      */ {
/*      */   private Hashtable attributeTypes;
/*      */   private Hashtable attributeSetters;
/*      */   private Hashtable nestedTypes;
/*      */   private Hashtable nestedCreators;
/*      */   private List addTypeMethods;
/*  113 */   private Method addText = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class bean;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  123 */   private static Hashtable helpers = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  131 */   private static final Hashtable PRIMITIVE_TYPE_MAP = new Hashtable(8);
/*      */ 
/*      */   
/*      */   static  {
/*  135 */     Class[] primitives = { boolean.class, byte.class, char.class, short.class, int.class, long.class, float.class, double.class };
/*      */ 
/*      */     
/*  138 */     Class[] wrappers = { Boolean.class, Byte.class, Character.class, Short.class, Integer.class, Long.class, Float.class, Double.class };
/*      */ 
/*      */     
/*  141 */     for (int i = 0; i < primitives.length; i++) {
/*  142 */       PRIMITIVE_TYPE_MAP.put(primitives[i], wrappers[i]);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private IntrospectionHelper(Class bean) {
/*  201 */     this.attributeTypes = new Hashtable();
/*  202 */     this.attributeSetters = new Hashtable();
/*  203 */     this.nestedTypes = new Hashtable();
/*  204 */     this.nestedCreators = new Hashtable();
/*  205 */     this.addTypeMethods = new ArrayList();
/*      */     
/*  207 */     this.bean = bean;
/*      */     
/*  209 */     Method[] methods = bean.getMethods();
/*  210 */     for (int i = 0; i < methods.length; i++) {
/*  211 */       Method m = methods[i];
/*  212 */       String name = m.getName();
/*  213 */       Class returnType = m.getReturnType();
/*  214 */       Class[] args = m.getParameterTypes();
/*      */ 
/*      */       
/*  217 */       if (args.length == 1 && void.class.equals(returnType) && (name.equals(""add"") || name.equals(""addConfigured""))) {
/*      */ 
/*      */         
/*  220 */         insertAddTypeMethod(m);
/*      */ 
/*      */ 
/*      */       
/*      */       }
/*  225 */       else if (!Task.class.isAssignableFrom(bean) || args.length != 1 || !isHiddenSetMethod(name, args[0])) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  231 */         if (!TaskContainer.class.isAssignableFrom(bean) || args.length != 1 || !""addTask"".equals(name) || !Task.class.equals(args[0]))
/*      */         {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  238 */           if (""addText"".equals(name) && void.class.equals(returnType) && args.length == 1 && String.class.equals(args[0])) {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  243 */             this.addText = methods[i];
/*      */           }
/*  245 */           else if (name.startsWith(""set"") && void.class.equals(returnType) && args.length == 1 && !args[0].isArray()) {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  250 */             String propName = getPropertyName(name, ""set"");
/*  251 */             if (this.attributeSetters.get(propName) == null || 
/*  252 */               !String.class.equals(args[0])) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*  272 */               AttributeSetter as = createAttributeSetter(m, args[0], propName);
/*      */               
/*  274 */               if (as != null) {
/*  275 */                 this.attributeTypes.put(propName, args[0]);
/*  276 */                 this.attributeSetters.put(propName, as);
/*      */               } 
/*      */             } 
/*  279 */           } else if (name.startsWith(""create"") && !returnType.isArray() && !returnType.isPrimitive() && args.length == 0) {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  284 */             String propName = getPropertyName(name, ""create"");
/*      */ 
/*      */             
/*  287 */             if (this.nestedCreators.get(propName) == null) {
/*  288 */               this.nestedTypes.put(propName, returnType);
/*  289 */               this.nestedCreators.put(propName, new NestedCreator(this, m) { private final Method val$m;
/*      */                     
/*  291 */                     public boolean isPolyMorphic() { return false; }
/*      */                     
/*      */                     private final IntrospectionHelper this$0;
/*      */                     
/*  295 */                     public Object getRealObject() { return null; }
/*      */ 
/*      */ 
/*      */                     
/*  299 */                     public Class getElementClass() { return null; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                     
/*  306 */                     public Object create(Project project, Object parent, Object ignore) throws InvocationTargetException, IllegalAccessException { return this.val$m.invoke(parent, new Object[0]); }
/*      */ 
/*      */ 
/*      */                     
/*      */                     public void store(Object parent, Object child) {} }
/*      */                 );
/*      */             } 
/*  313 */           } else if (name.startsWith(""addConfigured"") && void.class.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
/*      */ 
/*      */             
/*      */             try {
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*  321 */               Constructor constructor = null;
/*      */               try {
/*  323 */                 constructor = args[0].getConstructor(new Class[0]);
/*      */               } catch (NoSuchMethodException ex) {
/*      */                 
/*  326 */                 constructor = args[0].getConstructor(new Class[] { Project.class });
/*      */               } 
/*      */ 
/*      */               
/*  330 */               Constructor c = constructor;
/*  331 */               String propName = getPropertyName(name, ""addConfigured"");
/*  332 */               this.nestedTypes.put(propName, args[0]);
/*  333 */               this.nestedCreators.put(propName, new NestedCreator(this, c, m) {
/*      */                     private final Constructor val$c;
/*      */                     
/*  336 */                     public boolean isPolyMorphic() { return true; }
/*      */                     private final Method val$m;
/*      */                     private final IntrospectionHelper this$0;
/*      */                     
/*  340 */                     public Object getRealObject() { return null; }
/*      */ 
/*      */ 
/*      */                     
/*  344 */                     public Class getElementClass() { return this.val$c.getDeclaringClass(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                     
/*      */                     public Object create(Project project, Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/*  351 */                       if (child != null)
/*  352 */                         return child; 
/*  353 */                       if ((this.val$c.getParameterTypes()).length == 0) {
/*  354 */                         return this.val$c.newInstance(new Object[0]);
/*      */                       }
/*  356 */                       return this.val$c.newInstance(new Object[] { project });
/*      */                     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                     
/*      */                     public void store(Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/*  365 */                       this.val$m.invoke(parent, new Object[] { child });
/*      */                     }
/*      */                   });
/*      */             }
/*  369 */             catch (NoSuchMethodException nse) {}
/*      */           
/*      */           }
/*  372 */           else if (name.startsWith(""add"") && void.class.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
/*      */ 
/*      */             
/*      */             try {
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*  380 */               Constructor constructor = null;
/*      */               try {
/*  382 */                 constructor = args[0].getConstructor(new Class[0]);
/*      */               } catch (NoSuchMethodException ex) {
/*      */                 
/*  385 */                 constructor = args[0].getConstructor(new Class[] { Project.class });
/*      */               } 
/*      */ 
/*      */               
/*  389 */               Constructor c = constructor;
/*  390 */               String propName = getPropertyName(name, ""add"");
/*  391 */               this.nestedTypes.put(propName, args[0]);
/*  392 */               this.nestedCreators.put(propName, new NestedCreator(this, c, m) {
/*      */                     private final Constructor val$c;
/*      */                     
/*  395 */                     public boolean isPolyMorphic() { return true; }
/*      */                     private final Method val$m;
/*      */                     private final IntrospectionHelper this$0;
/*      */                     
/*  399 */                     public Object getRealObject() { return null; }
/*      */ 
/*      */ 
/*      */                     
/*  403 */                     public Class getElementClass() { return this.val$c.getDeclaringClass(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                     
/*      */                     public Object create(Project project, Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/*  410 */                       if (child == null)
/*      */                       {
/*  412 */                         if ((this.val$c.getParameterTypes()).length == 0) {
/*  413 */                           child = this.val$c.newInstance(new Object[0]);
/*      */                         } else {
/*  415 */                           child = this.val$c.newInstance(new Object[] { project });
/*      */                         } 
/*      */                       }
/*  418 */                       this.val$m.invoke(parent, new Object[] { child });
/*  419 */                       return child;
/*      */                     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */                     
/*      */                     public void store(Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {}
/*      */                   });
/*  428 */             } catch (NoSuchMethodException nse) {}
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isHiddenSetMethod(String name, Class type) {
/*  444 */     if (""setLocation"".equals(name) && Location.class.equals(type))
/*      */     {
/*  446 */       return true;
/*      */     }
/*      */     
/*  449 */     if (""setTaskType"".equals(name) && String.class.equals(type))
/*      */     {
/*  451 */       return true;
/*      */     }
/*      */     
/*  454 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static synchronized IntrospectionHelper getHelper(Class c) {
/*  467 */     IntrospectionHelper ih = (IntrospectionHelper)helpers.get(c);
/*  468 */     if (ih == null) {
/*  469 */       ih = new IntrospectionHelper(c);
/*  470 */       helpers.put(c, ih);
/*      */     } 
/*  472 */     return ih;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static synchronized IntrospectionHelper getHelper(Project p, Class c) {
/*  489 */     IntrospectionHelper ih = (IntrospectionHelper)helpers.get(c);
/*  490 */     if (ih == null) {
/*  491 */       ih = new IntrospectionHelper(c);
/*  492 */       helpers.put(c, ih);
/*      */       
/*  494 */       p.addBuildListener(ih);
/*      */     } 
/*  496 */     return ih;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setAttribute(Project p, Object element, String attributeName, String value) throws BuildException {
/*  519 */     AttributeSetter as = (AttributeSetter)this.attributeSetters.get(attributeName);
/*      */     
/*  521 */     if (as == null) {
/*  522 */       if (element instanceof DynamicConfigurator) {
/*  523 */         DynamicConfigurator dc = (DynamicConfigurator)element;
/*  524 */         dc.setDynamicAttribute(attributeName, value);
/*      */         return;
/*      */       } 
/*  527 */       String msg = getElementName(p, element) + "" doesn't support the \"""" + attributeName + ""\"" attribute."";
/*      */ 
/*      */       
/*  530 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/*      */     try {
/*  534 */       as.set(p, element, value);
/*      */     } catch (IllegalAccessException ie) {
/*      */       
/*  537 */       throw new BuildException(ie);
/*      */     } catch (InvocationTargetException ite) {
/*  539 */       Throwable t = ite.getTargetException();
/*  540 */       if (t instanceof BuildException) {
/*  541 */         throw (BuildException)t;
/*      */       }
/*  543 */       throw new BuildException(t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addText(Project project, Object element, String text) throws BuildException {
/*  566 */     if (this.addText == null) {
/*      */       
/*  568 */       if (text.trim().length() == 0) {
/*      */         return;
/*      */       }
/*      */ 
/*      */       
/*  573 */       String msg = project.getElementName(element) + "" doesn't support nested text data."";
/*      */       
/*  575 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/*      */     try {
/*  579 */       this.addText.invoke(element, (Object[])new String[] { text });
/*      */     } catch (IllegalAccessException ie) {
/*      */       
/*  582 */       throw new BuildException(ie);
/*      */     } catch (InvocationTargetException ite) {
/*  584 */       Throwable t = ite.getTargetException();
/*  585 */       if (t instanceof BuildException) {
/*  586 */         throw (BuildException)t;
/*      */       }
/*  588 */       throw new BuildException(t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void throwNotSupported(Project project, Object parent, String elementName) {
/*  601 */     String msg = project.getElementName(parent) + "" doesn't support the nested \"""" + elementName + ""\"" element."";
/*      */     
/*  603 */     throw new BuildException(msg);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private NestedCreator getNestedCreator(Project project, String parentUri, Object parent, String elementName) throws BuildException {
/*  610 */     String uri = ProjectHelper.extractUriFromComponentName(elementName);
/*  611 */     String name = ProjectHelper.extractNameFromComponentName(elementName);
/*      */     
/*  613 */     NestedCreator nc = null;
/*  614 */     if (uri.equals(parentUri)) {
/*  615 */       nc = (NestedCreator)this.nestedCreators.get(name.toLowerCase(Locale.US));
/*      */     }
/*      */     
/*  618 */     if (nc == null) {
/*  619 */       nc = createAddTypeCreator(project, parent, elementName);
/*      */     }
/*  621 */     if (nc == null && parent instanceof DynamicConfigurator) {
/*  622 */       DynamicConfigurator dc = (DynamicConfigurator)parent;
/*  623 */       Object nestedElement = dc.createDynamicElement(name.toLowerCase(Locale.US));
/*      */       
/*  625 */       if (nestedElement != null) {
/*  626 */         nc = new NestedCreator(this, nestedElement) { private final Object val$nestedElement;
/*      */             
/*  628 */             public boolean isPolyMorphic() { return false; }
/*      */             private final IntrospectionHelper this$0;
/*      */             
/*  631 */             public Class getElementClass() { return null; }
/*      */ 
/*      */ 
/*      */             
/*  635 */             public Object getRealObject() { return null; }
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  640 */             public Object create(Project project, Object parent, Object ignore) { return this.val$nestedElement; }
/*      */ 
/*      */             
/*      */             public void store(Object parent, Object child) {} }
/*      */           ;
/*      */       }
/*      */     } 
/*  647 */     if (nc == null) {
/*  648 */       throwNotSupported(project, parent, elementName);
/*      */     }
/*  650 */     return nc;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Object createElement(Project project, Object parent, String elementName) throws BuildException {
/*  677 */     NestedCreator nc = getNestedCreator(project, """", parent, elementName);
/*      */     try {
/*  679 */       Object nestedElement = nc.create(project, parent, null);
/*  680 */       if (project != null) {
/*  681 */         project.setProjectReference(nestedElement);
/*      */       }
/*  683 */       return nestedElement;
/*      */     } catch (IllegalAccessException ie) {
/*      */       
/*  686 */       throw new BuildException(ie);
/*      */     } catch (InstantiationException ine) {
/*      */       
/*  689 */       throw new BuildException(ine);
/*      */     } catch (InvocationTargetException ite) {
/*  691 */       Throwable t = ite.getTargetException();
/*  692 */       if (t instanceof BuildException) {
/*  693 */         throw (BuildException)t;
/*      */       }
/*  695 */       throw new BuildException(t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Creator getElementCreator(Project project, String parentUri, Object parent, String elementName, UnknownElement ue) {
/*  715 */     NestedCreator nc = getNestedCreator(project, parentUri, parent, elementName);
/*      */     
/*  717 */     return new Creator(project, parent, nc);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  729 */   public boolean supportsNestedElement(String elementName) { return (this.nestedCreators.containsKey(elementName.toLowerCase(Locale.US)) || DynamicConfigurator.class.isAssignableFrom(this.bean) || this.addTypeMethods.size() != 0); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean supportsNestedElement(String parentUri, String elementName) {
/*  744 */     String uri = ProjectHelper.extractUriFromComponentName(elementName);
/*  745 */     String name = ProjectHelper.extractNameFromComponentName(elementName);
/*      */     
/*  747 */     return ((this.nestedCreators.containsKey(name.toLowerCase(Locale.US)) && uri.equals(parentUri)) || DynamicConfigurator.class.isAssignableFrom(this.bean) || this.addTypeMethods.size() != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void storeElement(Project project, Object parent, Object child, String elementName) throws BuildException {
/*  776 */     if (elementName == null) {
/*      */       return;
/*      */     }
/*  779 */     NestedCreator ns = (NestedCreator)this.nestedCreators.get(elementName.toLowerCase(Locale.US));
/*      */     
/*  781 */     if (ns == null) {
/*      */       return;
/*      */     }
/*      */     try {
/*  785 */       ns.store(parent, child);
/*      */     } catch (IllegalAccessException ie) {
/*      */       
/*  788 */       throw new BuildException(ie);
/*      */     } catch (InstantiationException ine) {
/*      */       
/*  791 */       throw new BuildException(ine);
/*      */     } catch (InvocationTargetException ite) {
/*  793 */       Throwable t = ite.getTargetException();
/*  794 */       if (t instanceof BuildException) {
/*  795 */         throw (BuildException)t;
/*      */       }
/*  797 */       throw new BuildException(t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class getElementType(String elementName) throws BuildException {
/*  815 */     Class nt = (Class)this.nestedTypes.get(elementName);
/*  816 */     if (nt == null) {
/*  817 */       String msg = ""Class "" + this.bean.getName() + "" doesn't support the nested \"""" + elementName + ""\"" element."";
/*      */ 
/*      */       
/*  820 */       throw new BuildException(msg);
/*      */     } 
/*  822 */     return nt;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class getAttributeType(String attributeName) throws BuildException {
/*  839 */     Class at = (Class)this.attributeTypes.get(attributeName);
/*  840 */     if (at == null) {
/*  841 */       String msg = ""Class "" + this.bean.getName() + "" doesn't support the \"""" + attributeName + ""\"" attribute."";
/*      */       
/*  843 */       throw new BuildException(msg);
/*      */     } 
/*  845 */     return at;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  854 */   public boolean supportsCharacters() { return (this.addText != null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  865 */   public Enumeration getAttributes() { return this.attributeSetters.keys(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  876 */   public Enumeration getNestedElements() { return this.nestedTypes.keys(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private AttributeSetter createAttributeSetter(Method m, Class arg, String attrName) {
/*  915 */     Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class)PRIMITIVE_TYPE_MAP.get(arg) : arg;
/*      */ 
/*      */ 
/*      */     
/*  919 */     if (String.class.equals(reflectedArg)) {
/*  920 */       return new AttributeSetter(this, m) { private final Method val$m;
/*      */           private final IntrospectionHelper this$0;
/*      */           
/*  923 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new String[] { value }); }
/*      */            }
/*      */         ;
/*      */     }
/*      */     
/*  928 */     if (Character.class.equals(reflectedArg))
/*  929 */       return new AttributeSetter(this, attrName, m) { private final String val$attrName;
/*      */           
/*      */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException {
/*  932 */             if (value.length() == 0) {
/*  933 */               throw new BuildException(""The value \""\"" is not a legal value for attribute \"""" + this.val$attrName + ""\"""");
/*      */             }
/*      */ 
/*      */             
/*  937 */             this.val$m.invoke(parent, (Object[])new Character[] { new Character(value.charAt(0)) });
/*      */           }
/*      */           
/*      */           private final Method val$m;
/*      */           private final IntrospectionHelper this$0; }
/*      */         ; 
/*  943 */     if (Boolean.class.equals(reflectedArg)) {
/*  944 */       return new AttributeSetter(this, m) { private final Method val$m;
/*      */           private final IntrospectionHelper this$0;
/*      */           
/*  947 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new Boolean[] { new Boolean(Project.toBoolean(value)) }); }
/*      */            }
/*      */         ;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  955 */     if (Class.class.equals(reflectedArg)) {
/*  956 */       return new AttributeSetter(this, m) { private final Method val$m; private final IntrospectionHelper this$0;
/*      */           
/*      */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*      */             try {
/*  960 */               this.val$m.invoke(parent, (Object[])new Class[] { Class.forName(value) });
/*      */             } catch (ClassNotFoundException ce) {
/*  962 */               throw new BuildException(ce);
/*      */             } 
/*      */           } }
/*      */         ;
/*      */     }
/*      */     
/*  968 */     if (File.class.equals(reflectedArg)) {
/*  969 */       return new AttributeSetter(this, m) { private final Method val$m;
/*      */           private final IntrospectionHelper this$0;
/*      */           
/*  972 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new File[] { p.resolveFile(value) }); }
/*      */            }
/*      */         ;
/*      */     }
/*      */ 
/*      */     
/*  978 */     if (Path.class.equals(reflectedArg)) {
/*  979 */       return new AttributeSetter(this, m) { private final Method val$m;
/*      */           private final IntrospectionHelper this$0;
/*      */           
/*  982 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new Path[] { new Path(p, value) }); }
/*      */            }
/*      */         ;
/*      */     }
/*      */ 
/*      */     
/*  988 */     if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)) {
/*  989 */       return new AttributeSetter(this, reflectedArg, m) { private final Class val$reflectedArg;
/*      */           
/*      */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*      */             try {
/*  993 */               EnumeratedAttribute ea = this.val$reflectedArg.newInstance();
/*      */               
/*  995 */               ea.setValue(value);
/*  996 */               this.val$m.invoke(parent, (Object[])new EnumeratedAttribute[] { ea });
/*      */             } catch (InstantiationException ie) {
/*  998 */               throw new BuildException(ie);
/*      */             } 
/*      */           }
/*      */ 
/*      */           
/*      */           private final Method val$m;
/*      */           
/*      */           private final IntrospectionHelper this$0; }
/*      */         ;
/*      */     }
/*      */     try {
/* 1009 */       Constructor c = reflectedArg.getConstructor(new Class[] { String.class });
/*      */ 
/*      */       
/* 1012 */       return new AttributeSetter(this, c, m) { private final Constructor val$c;
/*      */           private final Method val$m;
/*      */           private final IntrospectionHelper this$0;
/*      */           
/*      */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*      */             try {
/* 1018 */               Object attribute = this.val$c.newInstance((Object[])new String[] { value });
/* 1019 */               if (p != null) {
/* 1020 */                 p.setProjectReference(attribute);
/*      */               }
/* 1022 */               this.val$m.invoke(parent, new Object[] { attribute });
/*      */             } catch (InstantiationException ie) {
/* 1024 */               throw new BuildException(ie);
/*      */             }
/*      */           
/*      */           } }
/*      */         ;
/* 1029 */     } catch (NoSuchMethodException nme) {
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1034 */       return null;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1052 */   protected String getElementName(Project project, Object element) { return project.getElementName(element); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String getPropertyName(String methodName, String prefix) {
/* 1069 */     int start = prefix.length();
/* 1070 */     return methodName.substring(start).toLowerCase(Locale.US);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static final class Creator
/*      */   {
/*      */     private IntrospectionHelper.NestedCreator nestedCreator;
/*      */ 
/*      */ 
/*      */     
/*      */     private Object parent;
/*      */ 
/*      */ 
/*      */     
/*      */     private Project project;
/*      */ 
/*      */ 
/*      */     
/*      */     private Object nestedObject;
/*      */ 
/*      */ 
/*      */     
/*      */     private String polyType;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Creator(Project project, Object parent, IntrospectionHelper.NestedCreator nestedCreator) {
/* 1101 */       this.project = project;
/* 1102 */       this.parent = parent;
/* 1103 */       this.nestedCreator = nestedCreator;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1112 */     public void setPolyType(String polyType) { this.polyType = polyType; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object create() {
/* 1122 */       if (this.polyType != null) {
/* 1123 */         if (!this.nestedCreator.isPolyMorphic()) {
/* 1124 */           throw new BuildException(""Not allowed to use the polymorphic form for this element"");
/*      */         }
/*      */ 
/*      */         
/* 1128 */         Class elementClass = this.nestedCreator.getElementClass();
/* 1129 */         ComponentHelper helper = ComponentHelper.getComponentHelper(this.project);
/*      */         
/* 1131 */         this.nestedObject = ComponentHelper.getComponentHelper(this.project).createComponent(this.polyType);
/*      */         
/* 1133 */         if (this.nestedObject == null) {
/* 1134 */           throw new BuildException(""Unable to create object of type "" + this.polyType);
/*      */         }
/*      */       } 
/*      */       
/*      */       try {
/* 1139 */         this.nestedObject = this.nestedCreator.create(this.project, this.parent, this.nestedObject);
/*      */         
/* 1141 */         if (this.project != null) {
/* 1142 */           this.project.setProjectReference(this.nestedObject);
/*      */         }
/* 1144 */         return this.nestedObject;
/*      */       } catch (IllegalAccessException ex) {
/* 1146 */         throw new BuildException(ex);
/*      */       } catch (InstantiationException ex) {
/* 1148 */         throw new BuildException(ex);
/*      */       } catch (IllegalArgumentException ex) {
/* 1150 */         if (this.polyType != null) {
/* 1151 */           throw new BuildException(""Invalid type used "" + this.polyType);
/*      */         }
/*      */         
/* 1154 */         throw ex;
/*      */       } catch (InvocationTargetException ex) {
/* 1156 */         Throwable t = ex.getTargetException();
/* 1157 */         if (t instanceof BuildException) {
/* 1158 */           throw (BuildException)t;
/*      */         }
/* 1160 */         throw new BuildException(t);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1169 */     public Object getRealObject() { return this.nestedCreator.getRealObject(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void store() {
/*      */       try {
/* 1179 */         this.nestedCreator.store(this.parent, this.nestedObject);
/*      */       } catch (IllegalAccessException ex) {
/* 1181 */         throw new BuildException(ex);
/*      */       } catch (InstantiationException ex) {
/* 1183 */         throw new BuildException(ex);
/*      */       } catch (IllegalArgumentException ex) {
/* 1185 */         if (this.polyType != null) {
/* 1186 */           throw new BuildException(""Invalid type used "" + this.polyType);
/*      */         }
/*      */         
/* 1189 */         throw ex;
/*      */       } catch (InvocationTargetException ex) {
/* 1191 */         Throwable t = ex.getTargetException();
/* 1192 */         if (t instanceof BuildException) {
/* 1193 */           throw (BuildException)t;
/*      */         }
/* 1195 */         throw new BuildException(t);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void buildFinished(BuildEvent event) {
/* 1232 */     this.attributeTypes.clear();
/* 1233 */     this.attributeSetters.clear();
/* 1234 */     this.nestedTypes.clear();
/* 1235 */     this.nestedCreators.clear();
/* 1236 */     this.addText = null;
/* 1237 */     helpers.clear();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void buildStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void messageLogged(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private NestedCreator createAddTypeCreator(Project project, Object parent, String elementName) throws BuildException {
/* 1294 */     if (this.addTypeMethods.size() == 0) {
/* 1295 */       return null;
/*      */     }
/* 1297 */     ComponentHelper helper = ComponentHelper.getComponentHelper(project);
/*      */     
/* 1299 */     Object addedObject = null;
/* 1300 */     Method addMethod = null;
/* 1301 */     Class clazz = helper.getComponentClass(elementName);
/* 1302 */     if (clazz == null) {
/* 1303 */       return null;
/*      */     }
/* 1305 */     addMethod = findMatchingMethod(clazz, this.addTypeMethods);
/* 1306 */     if (addMethod == null) {
/* 1307 */       return null;
/*      */     }
/* 1309 */     addedObject = helper.createComponent(elementName);
/* 1310 */     if (addedObject == null) {
/* 1311 */       return null;
/*      */     }
/* 1313 */     Object rObject = addedObject;
/* 1314 */     if (addedObject instanceof PreSetDef.PreSetDefinition) {
/* 1315 */       rObject = ((PreSetDef.PreSetDefinition)addedObject).createObject(project);
/*      */     }
/*      */     
/* 1318 */     Method method = addMethod;
/* 1319 */     Object nestedObject = addedObject;
/* 1320 */     Object realObject = rObject;
/*      */     
/* 1322 */     return new NestedCreator(this, method, realObject, nestedObject) { private final Method val$method; private final Object val$realObject;
/*      */         
/* 1324 */         public boolean isPolyMorphic() { return false; }
/*      */         private final Object val$nestedObject;
/*      */         private final IntrospectionHelper this$0;
/*      */         
/* 1328 */         public Class getElementClass() { return null; }
/*      */ 
/*      */         
/*      */         public Object create(Project project, Object parent, Object ignore) throws InvocationTargetException, IllegalAccessException {
/* 1332 */           if (!this.val$method.getName().endsWith(""Configured"")) {
/* 1333 */             this.val$method.invoke(parent, new Object[] { this.val$realObject });
/*      */           }
/* 1335 */           return this.val$nestedObject;
/*      */         }
/*      */ 
/*      */         
/* 1339 */         public Object getRealObject() { return this.val$realObject; }
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*      */         public void store(Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 1345 */           if (this.val$method.getName().endsWith(""Configured"")) {
/* 1346 */             this.val$method.invoke(parent, new Object[] { this.val$realObject });
/*      */           }
/*      */         } }
/*      */       ;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void insertAddTypeMethod(Method method) {
/* 1360 */     Class argClass = method.getParameterTypes()[0];
/* 1361 */     for (int c = 0; c < this.addTypeMethods.size(); c++) {
/* 1362 */       Method current = this.addTypeMethods.get(c);
/* 1363 */       if (current.getParameterTypes()[0].equals(argClass)) {
/*      */         return;
/*      */       }
/* 1366 */       if (current.getParameterTypes()[0].isAssignableFrom(argClass)) {
/*      */         
/* 1368 */         this.addTypeMethods.add(c, method);
/*      */         return;
/*      */       } 
/*      */     } 
/* 1372 */     this.addTypeMethods.add(method);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Method findMatchingMethod(Class paramClass, List methods) {
/* 1381 */     Class matchedClass = null;
/* 1382 */     Method matchedMethod = null;
/*      */     
/* 1384 */     for (int i = 0; i < methods.size(); i++) {
/* 1385 */       Method method = methods.get(i);
/* 1386 */       Class methodClass = method.getParameterTypes()[0];
/* 1387 */       if (methodClass.isAssignableFrom(paramClass)) {
/* 1388 */         if (matchedClass == null) {
/* 1389 */           matchedClass = methodClass;
/* 1390 */           matchedMethod = method;
/*      */         }
/* 1392 */         else if (!methodClass.isAssignableFrom(matchedClass)) {
/* 1393 */           throw new BuildException(""ambiguous: types "" + matchedClass.getName() + "" and "" + methodClass.getName() + "" match "" + paramClass.getName());
/*      */         } 
/*      */       }
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1401 */     return matchedMethod;
/*      */   }
/*      */   
/*      */   private static interface AttributeSetter {
/*      */     void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException;
/*      */   }
/*      */   
/*      */   private static interface NestedCreator {
/*      */     boolean isPolyMorphic();
/*      */     
/*      */     Class getElementClass();
/*      */     
/*      */     Object getRealObject();
/*      */     
/*      */     Object create(Project param1Project, Object param1Object1, Object param1Object2) throws InvocationTargetException, IllegalAccessException, InstantiationException;
/*      */     
/*      */     void store(Object param1Object1, Object param1Object2) throws InvocationTargetException, IllegalAccessException, InstantiationException;
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\IntrospectionHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Location,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.Serializable;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.xml.sax.Locator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Location
/*     */   implements Serializable
/*     */ {
/*     */   private String fileName;
/*     */   private int lineNumber;
/*     */   private int columnNumber;
/*  78 */   public static final Location UNKNOWN_LOCATION = new Location();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   private Location() { this(null, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public Location(String fileName) { this(fileName, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public Location(Locator loc) { this(loc.getSystemId(), loc.getLineNumber(), loc.getColumnNumber()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Location(String fileName, int lineNumber, int columnNumber) {
/* 124 */     if (fileName != null && fileName.startsWith(""file:"")) {
/* 125 */       this.fileName = FileUtils.newFileUtils().fromURI(fileName);
/*     */     } else {
/* 127 */       this.fileName = fileName;
/*     */     } 
/* 129 */     this.lineNumber = lineNumber;
/* 130 */     this.columnNumber = columnNumber;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public String getFileName() { return this.fileName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public int getLineNumber() { return this.lineNumber; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 160 */     StringBuffer buf = new StringBuffer();
/*     */     
/* 162 */     if (this.fileName != null) {
/* 163 */       buf.append(this.fileName);
/*     */       
/* 165 */       if (this.lineNumber != 0) {
/* 166 */         buf.append("":"");
/* 167 */         buf.append(this.lineNumber);
/*     */       } 
/*     */       
/* 170 */       buf.append("": "");
/*     */     } 
/*     */     
/* 173 */     return buf.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Location.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.MagicNames,"package org.apache.tools.ant;
public class MagicNames {
  public static final String SCRIPT_REPOSITORY = ""org.apache.ant.scriptrepo"";
  public static final String SYSTEM_LOADER_REF = ""ant.coreLoader"";
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\MagicNames.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Main,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.PrintStream;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Properties;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.input.DefaultInputHandler;
/*      */ import org.apache.tools.ant.input.InputHandler;
/*      */ import org.apache.tools.ant.launch.AntMain;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Main
/*      */   implements AntMain
/*      */ {
/*      */   public static final String DEFAULT_BUILD_FILENAME = ""build.xml"";
/*   90 */   private int msgOutputLevel = 2;
/*      */ 
/*      */   
/*      */   private File buildFile;
/*      */ 
/*      */   
/*   96 */   private static PrintStream out = System.out;
/*      */ 
/*      */   
/*   99 */   private static PrintStream err = System.err;
/*      */ 
/*      */   
/*  102 */   private Vector targets = new Vector();
/*      */ 
/*      */   
/*  105 */   private Properties definedProps = new Properties();
/*      */ 
/*      */   
/*  108 */   private Vector listeners = new Vector(1);
/*      */ 
/*      */   
/*  111 */   private Vector propertyFiles = new Vector(1);
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean allowInput = true;
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean keepGoingMode = false;
/*      */ 
/*      */ 
/*      */   
/*  124 */   private String loggerClassname = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  130 */   private String inputHandlerClassname = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean emacsMode = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean readyToRun = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean projectHelp = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static boolean isLogFileUsed = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void printMessage(Throwable t) {
/*  163 */     String message = t.getMessage();
/*  164 */     if (message != null) {
/*  165 */       System.err.println(message);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void start(String[] args, Properties additionalUserProperties, ClassLoader coreLoader) {
/*  183 */     Main m = new Main();
/*  184 */     m.startAnt(args, additionalUserProperties, coreLoader);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void startAnt(String[] args, Properties additionalUserProperties, ClassLoader coreLoader) {
/*      */     try {
/*  200 */       Diagnostics.validateVersion();
/*  201 */       processArgs(args);
/*      */     } catch (Throwable exc) {
/*  203 */       handleLogfile();
/*  204 */       printMessage(exc);
/*  205 */       System.exit(1);
/*      */     } 
/*      */     
/*  208 */     if (additionalUserProperties != null) {
/*  209 */       Enumeration e = additionalUserProperties.keys();
/*  210 */       while (e.hasMoreElements()) {
/*  211 */         String key = e.nextElement();
/*  212 */         String property = additionalUserProperties.getProperty(key);
/*  213 */         this.definedProps.put(key, property);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  218 */     int exitCode = 1;
/*      */     try {
/*  220 */       runBuild(coreLoader);
/*  221 */       exitCode = 0;
/*      */     } catch (BuildException be) {
/*  223 */       if (err != System.err) {
/*  224 */         printMessage(be);
/*      */       }
/*      */     } catch (Throwable exc) {
/*  227 */       exc.printStackTrace();
/*  228 */       printMessage(exc);
/*      */     } finally {
/*  230 */       handleLogfile();
/*      */     } 
/*  232 */     System.exit(exitCode);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void handleLogfile() {
/*  241 */     if (isLogFileUsed) {
/*  242 */       if (out != null) {
/*      */         try {
/*  244 */           out.close();
/*  245 */         } catch (Exception e) {}
/*      */       }
/*      */ 
/*      */       
/*  249 */       if (err != null) {
/*      */         try {
/*  251 */           err.close();
/*  252 */         } catch (Exception e) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  267 */   public static void main(String[] args) { start(args, null, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  289 */   protected Main(String[] args) throws BuildException { processArgs(args); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void processArgs(String[] args) {
/*  302 */     String searchForThis = null;
/*  303 */     PrintStream logTo = null;
/*      */ 
/*      */ 
/*      */     
/*  307 */     for (int i = 0; i < args.length; i++) {
/*  308 */       String arg = args[i];
/*      */       
/*  310 */       if (arg.equals(""-help"") || arg.equals(""-h"")) {
/*  311 */         printUsage(); return;
/*      */       } 
/*  313 */       if (arg.equals(""-version"")) {
/*  314 */         printVersion(); return;
/*      */       } 
/*  316 */       if (arg.equals(""-diagnostics"")) {
/*  317 */         Diagnostics.doReport(System.out); return;
/*      */       } 
/*  319 */       if (arg.equals(""-quiet"") || arg.equals(""-q""))
/*  320 */       { this.msgOutputLevel = 1; }
/*  321 */       else if (arg.equals(""-verbose"") || arg.equals(""-v""))
/*  322 */       { printVersion();
/*  323 */         this.msgOutputLevel = 3; }
/*  324 */       else if (arg.equals(""-debug"") || arg.equals(""-d""))
/*  325 */       { printVersion();
/*  326 */         this.msgOutputLevel = 4; }
/*  327 */       else if (arg.equals(""-noinput""))
/*  328 */       { this.allowInput = false; }
/*  329 */       else if (arg.equals(""-logfile"") || arg.equals(""-l""))
/*      */       { try {
/*  331 */           File logFile = new File(args[i + 1]);
/*  332 */           i++;
/*  333 */           logTo = new PrintStream(new FileOutputStream(logFile));
/*  334 */           isLogFileUsed = true;
/*      */         } catch (IOException ioe) {
/*  336 */           String msg = ""Cannot write on the specified log file. Make sure the path exists and you have write permissions."";
/*      */ 
/*      */           
/*  339 */           throw new BuildException(msg);
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  341 */           String msg = ""You must specify a log file when using the -log argument"";
/*      */           
/*  343 */           throw new BuildException(msg);
/*      */         }  }
/*  345 */       else if (arg.equals(""-buildfile"") || arg.equals(""-file"") || arg.equals(""-f""))
/*      */       
/*      */       { try {
/*  348 */           this.buildFile = new File(args[i + 1].replace('/', File.separatorChar));
/*  349 */           i++;
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  351 */           String msg = ""You must specify a buildfile when using the -buildfile argument"";
/*      */           
/*  353 */           throw new BuildException(msg);
/*      */         }  }
/*  355 */       else if (arg.equals(""-listener""))
/*      */       { try {
/*  357 */           this.listeners.addElement(args[i + 1]);
/*  358 */           i++;
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  360 */           String msg = ""You must specify a classname when using the -listener argument"";
/*      */           
/*  362 */           throw new BuildException(msg);
/*      */         }  }
/*  364 */       else if (arg.startsWith(""-D""))
/*      */       
/*      */       { 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  377 */         String name = arg.substring(2, arg.length());
/*  378 */         String value = null;
/*  379 */         int posEq = name.indexOf(""="");
/*  380 */         if (posEq > 0) {
/*  381 */           value = name.substring(posEq + 1);
/*  382 */           name = name.substring(0, posEq);
/*  383 */         } else if (i < args.length - 1) {
/*  384 */           value = args[++i];
/*      */         } else {
/*  386 */           throw new BuildException(""Missing value for property "" + name);
/*      */         } 
/*      */ 
/*      */         
/*  390 */         this.definedProps.put(name, value); }
/*  391 */       else if (arg.equals(""-logger""))
/*  392 */       { if (this.loggerClassname != null) {
/*  393 */           throw new BuildException(""Only one logger class may  be specified."");
/*      */         }
/*      */         
/*      */         try {
/*  397 */           this.loggerClassname = args[++i];
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  399 */           throw new BuildException(""You must specify a classname when using the -logger argument"");
/*      */         }
/*      */          }
/*  402 */       else if (arg.equals(""-inputhandler""))
/*  403 */       { if (this.inputHandlerClassname != null) {
/*  404 */           throw new BuildException(""Only one input handler class may be specified."");
/*      */         }
/*      */         
/*      */         try {
/*  408 */           this.inputHandlerClassname = args[++i];
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  410 */           throw new BuildException(""You must specify a classname when using the -inputhandler argument"");
/*      */         }
/*      */          }
/*      */       
/*  414 */       else if (arg.equals(""-emacs"") || arg.equals(""-e""))
/*  415 */       { this.emacsMode = true; }
/*  416 */       else if (arg.equals(""-projecthelp"") || arg.equals(""-p""))
/*      */       
/*  418 */       { this.projectHelp = true; }
/*  419 */       else if (arg.equals(""-find"") || arg.equals(""-s""))
/*      */       
/*  421 */       { if (i < args.length - 1) {
/*  422 */           searchForThis = args[++i];
/*      */         } else {
/*  424 */           searchForThis = ""build.xml"";
/*      */         }  }
/*  426 */       else if (arg.startsWith(""-propertyfile""))
/*      */       { try {
/*  428 */           this.propertyFiles.addElement(args[i + 1]);
/*  429 */           i++;
/*      */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/*  431 */           String msg = ""You must specify a property filename when using the -propertyfile argument"";
/*      */           
/*  433 */           throw new BuildException(msg);
/*      */         }  }
/*  435 */       else if (arg.equals(""-k"") || arg.equals(""-keep-going""))
/*  436 */       { this.keepGoingMode = true; }
/*  437 */       else { if (arg.startsWith(""-"")) {
/*      */           
/*  439 */           String msg = ""Unknown argument: "" + arg;
/*  440 */           System.out.println(msg);
/*  441 */           printUsage();
/*  442 */           throw new BuildException("""");
/*      */         } 
/*      */         
/*  445 */         this.targets.addElement(arg); }
/*      */     
/*      */     } 
/*      */ 
/*      */     
/*  450 */     if (this.buildFile == null)
/*      */     {
/*  452 */       if (searchForThis != null) {
/*  453 */         this.buildFile = findBuildFile(System.getProperty(""user.dir""), searchForThis);
/*      */       } else {
/*      */         
/*  456 */         this.buildFile = new File(""build.xml"");
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  461 */     if (!this.buildFile.exists()) {
/*  462 */       System.out.println(""Buildfile: "" + this.buildFile + "" does not exist!"");
/*  463 */       throw new BuildException(""Build failed"");
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  469 */     if (this.buildFile.isDirectory()) {
/*  470 */       System.out.println(""What? Buildfile: "" + this.buildFile + "" is a dir!"");
/*  471 */       throw new BuildException(""Build failed"");
/*      */     } 
/*      */ 
/*      */     
/*  475 */     int propertyFileIndex = 0;
/*  476 */     for (; propertyFileIndex < this.propertyFiles.size(); 
/*  477 */       propertyFileIndex++) {
/*  478 */       String filename = this.propertyFiles.elementAt(propertyFileIndex);
/*      */       
/*  480 */       Properties props = new Properties();
/*  481 */       FileInputStream fis = null;
/*      */       try {
/*  483 */         fis = new FileInputStream(filename);
/*  484 */         props.load(fis);
/*      */       } catch (IOException e) {
/*  486 */         System.out.println(""Could not load property file "" + filename + "": "" + e.getMessage());
/*      */       } finally {
/*      */         
/*  489 */         if (fis != null) {
/*      */           try {
/*  491 */             fis.close();
/*  492 */           } catch (IOException e) {}
/*      */         }
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  499 */       Enumeration propertyNames = props.propertyNames();
/*  500 */       while (propertyNames.hasMoreElements()) {
/*  501 */         String name = (String)propertyNames.nextElement();
/*  502 */         if (this.definedProps.getProperty(name) == null) {
/*  503 */           this.definedProps.put(name, props.getProperty(name));
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/*  508 */     if (this.msgOutputLevel >= 2) {
/*  509 */       System.out.println(""Buildfile: "" + this.buildFile);
/*      */     }
/*      */     
/*  512 */     if (logTo != null) {
/*  513 */       out = logTo;
/*  514 */       err = logTo;
/*  515 */       System.setOut(out);
/*  516 */       System.setErr(err);
/*      */     } 
/*  518 */     this.readyToRun = true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private File getParentFile(File file) {
/*  530 */     String filename = file.getAbsolutePath();
/*  531 */     file = new File(filename);
/*  532 */     filename = file.getParent();
/*      */     
/*  534 */     if (filename != null && this.msgOutputLevel >= 3) {
/*  535 */       System.out.println(""Searching in "" + filename);
/*      */     }
/*      */     
/*  538 */     return (filename == null) ? null : new File(filename);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private File findBuildFile(String start, String suffix) throws BuildException {
/*  560 */     if (this.msgOutputLevel >= 2) {
/*  561 */       System.out.println(""Searching for "" + suffix + "" ..."");
/*      */     }
/*      */     
/*  564 */     File parent = new File((new File(start)).getAbsolutePath());
/*  565 */     File file = new File(parent, suffix);
/*      */ 
/*      */     
/*  568 */     while (!file.exists()) {
/*      */       
/*  570 */       parent = getParentFile(parent);
/*      */ 
/*      */ 
/*      */       
/*  574 */       if (parent == null) {
/*  575 */         throw new BuildException(""Could not locate a build file!"");
/*      */       }
/*      */ 
/*      */       
/*  579 */       file = new File(parent, suffix);
/*      */     } 
/*      */     
/*  582 */     return file;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void runBuild(ClassLoader coreLoader) throws BuildException {
/*  598 */     if (!this.readyToRun) {
/*      */       return;
/*      */     }
/*      */     
/*  602 */     Project project = new Project();
/*  603 */     project.setCoreLoader(coreLoader);
/*      */     
/*  605 */     Throwable error = null;
/*      */     
/*      */     try {
/*  608 */       addBuildListeners(project);
/*  609 */       addInputHandler(project);
/*      */       
/*  611 */       PrintStream err = System.err;
/*  612 */       PrintStream out = System.out;
/*  613 */       InputStream in = System.in;
/*      */ 
/*      */ 
/*      */       
/*  617 */       SecurityManager oldsm = null;
/*  618 */       if (!JavaEnvUtils.isJavaVersion(""1.0"") && !JavaEnvUtils.isJavaVersion(""1.1""))
/*      */       {
/*  620 */         oldsm = System.getSecurityManager();
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       try {
/*  628 */         if (this.allowInput) {
/*  629 */           project.setDefaultInputStream(System.in);
/*      */         }
/*  631 */         System.setIn(new DemuxInputStream(project));
/*  632 */         System.setOut(new PrintStream(new DemuxOutputStream(project, false)));
/*  633 */         System.setErr(new PrintStream(new DemuxOutputStream(project, true)));
/*      */         
/*  635 */         if (!this.projectHelp) {
/*  636 */           project.fireBuildStarted();
/*      */         }
/*  638 */         project.init();
/*  639 */         project.setUserProperty(""ant.version"", getAntVersion());
/*      */ 
/*      */         
/*  642 */         Enumeration e = this.definedProps.keys();
/*  643 */         while (e.hasMoreElements()) {
/*  644 */           String arg = e.nextElement();
/*  645 */           String value = (String)this.definedProps.get(arg);
/*  646 */           project.setUserProperty(arg, value);
/*      */         } 
/*      */         
/*  649 */         project.setUserProperty(""ant.file"", this.buildFile.getAbsolutePath());
/*      */ 
/*      */         
/*  652 */         project.setKeepGoingMode(this.keepGoingMode);
/*      */         
/*  654 */         ProjectHelper.configureProject(project, this.buildFile);
/*      */         
/*  656 */         if (this.projectHelp) {
/*  657 */           printDescription(project);
/*  658 */           printTargets(project, (this.msgOutputLevel > 2));
/*      */           
/*      */           return;
/*      */         } 
/*      */         
/*  663 */         if (this.targets.size() == 0 && 
/*  664 */           project.getDefaultTarget() != null) {
/*  665 */           this.targets.addElement(project.getDefaultTarget());
/*      */         }
/*      */ 
/*      */         
/*  669 */         project.executeTargets(this.targets);
/*      */       }
/*      */       finally {
/*      */         
/*  673 */         if (oldsm != null) {
/*  674 */           System.setSecurityManager(oldsm);
/*      */         }
/*      */         
/*  677 */         System.setOut(out);
/*  678 */         System.setErr(err);
/*  679 */         System.setIn(in);
/*      */       } 
/*      */     } catch (RuntimeException exc) {
/*  682 */       error = exc = null;
/*  683 */       throw exc;
/*      */     } catch (Error err) {
/*  685 */       error = err = null;
/*  686 */       throw err;
/*      */     } finally {
/*  688 */       if (!this.projectHelp) {
/*  689 */         project.fireBuildFinished(error);
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void addBuildListeners(Project project) {
/*  704 */     project.addBuildListener(createLogger());
/*      */     
/*  706 */     for (int i = 0; i < this.listeners.size(); i++) {
/*  707 */       String className = this.listeners.elementAt(i);
/*      */       try {
/*  709 */         BuildListener listener = (BuildListener)Class.forName(className).newInstance();
/*      */         
/*  711 */         if (project != null) {
/*  712 */           project.setProjectReference(listener);
/*      */         }
/*  714 */         project.addBuildListener(listener);
/*      */       } catch (Throwable exc) {
/*  716 */         throw new BuildException(""Unable to instantiate listener "" + className, exc);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addInputHandler(Project project) throws BuildException {
/*  731 */     InputHandler handler = null;
/*  732 */     if (this.inputHandlerClassname == null) {
/*  733 */       DefaultInputHandler defaultInputHandler = new DefaultInputHandler();
/*      */     } else {
/*      */       try {
/*  736 */         handler = (InputHandler)Class.forName(this.inputHandlerClassname).newInstance();
/*      */         
/*  738 */         if (project != null) {
/*  739 */           project.setProjectReference(handler);
/*      */         }
/*      */       } catch (ClassCastException e) {
/*  742 */         String msg = ""The specified input handler class "" + this.inputHandlerClassname + "" does not implement the InputHandler interface"";
/*      */ 
/*      */         
/*  745 */         throw new BuildException(msg);
/*      */       } catch (Exception e) {
/*  747 */         String msg = ""Unable to instantiate specified input handler class "" + this.inputHandlerClassname + "" : "" + e.getClass().getName();
/*      */ 
/*      */         
/*  750 */         throw new BuildException(msg);
/*      */       } 
/*      */     } 
/*  753 */     project.setInputHandler(handler);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private BuildLogger createLogger() {
/*  767 */     BuildLogger logger = null;
/*  768 */     if (this.loggerClassname != null) {
/*      */       try {
/*  770 */         Class loggerClass = Class.forName(this.loggerClassname);
/*  771 */         logger = (BuildLogger)loggerClass.newInstance();
/*      */       } catch (ClassCastException e) {
/*  773 */         System.err.println(""The specified logger class "" + this.loggerClassname + "" does not implement the BuildLogger interface"");
/*      */ 
/*      */         
/*  776 */         throw new RuntimeException();
/*      */       } catch (Exception e) {
/*  778 */         System.err.println(""Unable to instantiate specified logger class "" + this.loggerClassname + "" : "" + e.getClass().getName());
/*      */ 
/*      */         
/*  781 */         throw new RuntimeException();
/*      */       } 
/*      */     } else {
/*  784 */       logger = new DefaultLogger();
/*      */     } 
/*      */     
/*  787 */     logger.setMessageOutputLevel(this.msgOutputLevel);
/*  788 */     logger.setOutputPrintStream(out);
/*  789 */     logger.setErrorPrintStream(err);
/*  790 */     logger.setEmacsMode(this.emacsMode);
/*      */     
/*  792 */     return logger;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void printUsage() {
/*  799 */     String lSep = System.getProperty(""line.separator"");
/*  800 */     StringBuffer msg = new StringBuffer();
/*  801 */     msg.append(""ant [options] [target [target2 [target3] ...]]"" + lSep);
/*  802 */     msg.append(""Options: "" + lSep);
/*  803 */     msg.append(""  -help, -h              print this message"" + lSep);
/*  804 */     msg.append(""  -projecthelp, -p       print project help information"" + lSep);
/*  805 */     msg.append(""  -version               print the version information and exit"" + lSep);
/*  806 */     msg.append(""  -diagnostics           print information that might be helpful to"" + lSep);
/*  807 */     msg.append(""                         diagnose or report problems."" + lSep);
/*  808 */     msg.append(""  -quiet, -q             be extra quiet"" + lSep);
/*  809 */     msg.append(""  -verbose, -v           be extra verbose"" + lSep);
/*  810 */     msg.append(""  -debug, -d             print debugging information"" + lSep);
/*  811 */     msg.append(""  -emacs, -e             produce logging information without adornments"" + lSep);
/*  812 */     msg.append(""  -lib <path>            specifies a path to search for jars and classes"" + lSep);
/*  813 */     msg.append(""  -logfile <file>        use given file for log"" + lSep);
/*  814 */     msg.append(""    -l     <file>                ''"" + lSep);
/*  815 */     msg.append(""  -logger <classname>    the class which is to perform logging"" + lSep);
/*  816 */     msg.append(""  -listener <classname>  add an instance of class as a project listener"" + lSep);
/*  817 */     msg.append(""  -noinput               do not allow interactive input"" + lSep);
/*  818 */     msg.append(""  -buildfile <file>      use given buildfile"" + lSep);
/*  819 */     msg.append(""    -file    <file>              ''"" + lSep);
/*  820 */     msg.append(""    -f       <file>              ''"" + lSep);
/*  821 */     msg.append(""  -D<property>=<value>   use value for given property"" + lSep);
/*  822 */     msg.append(""  -keep-going, -k        execute all targets that do not depend"" + lSep);
/*  823 */     msg.append(""                         on failed target(s)"" + lSep);
/*  824 */     msg.append(""  -propertyfile <name>   load all properties from file with -D"" + lSep);
/*  825 */     msg.append(""                         properties taking precedence"" + lSep);
/*  826 */     msg.append(""  -inputhandler <class>  the class which will handle input requests"" + lSep);
/*  827 */     msg.append(""  -find <file>           (s)earch for buildfile towards the root of"" + lSep);
/*  828 */     msg.append(""    -s  <file>           the filesystem and use it"" + lSep);
/*  829 */     System.out.println(msg.toString());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  838 */   private static void printVersion() throws BuildException { System.out.println(getAntVersion()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  844 */   private static String antVersion = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static synchronized String getAntVersion() throws BuildException {
/*  857 */     if (antVersion == null) {
/*      */       try {
/*  859 */         Properties props = new Properties();
/*  860 */         InputStream in = Main.class.getResourceAsStream(""/org/apache/tools/ant/version.txt"");
/*      */         
/*  862 */         props.load(in);
/*  863 */         in.close();
/*      */         
/*  865 */         StringBuffer msg = new StringBuffer();
/*  866 */         msg.append(""Apache Ant version "");
/*  867 */         msg.append(props.getProperty(""VERSION""));
/*  868 */         msg.append("" compiled on "");
/*  869 */         msg.append(props.getProperty(""DATE""));
/*  870 */         antVersion = msg.toString();
/*      */       } catch (IOException ioe) {
/*  872 */         throw new BuildException(""Could not load the version information:"" + ioe.getMessage());
/*      */       } catch (NullPointerException npe) {
/*      */         
/*  875 */         throw new BuildException(""Could not load the version information."");
/*      */       } 
/*      */     }
/*  878 */     return antVersion;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void printDescription(Project project) {
/*  889 */     if (project.getDescription() != null) {
/*  890 */       project.log(project.getDescription());
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void printTargets(Project project, boolean printSubTargets) {
/*  905 */     int maxLength = 0;
/*  906 */     Enumeration ptargets = project.getTargets().elements();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  912 */     Vector topNames = new Vector();
/*  913 */     Vector topDescriptions = new Vector();
/*  914 */     Vector subNames = new Vector();
/*      */     
/*  916 */     while (ptargets.hasMoreElements()) {
/*  917 */       Target currentTarget = ptargets.nextElement();
/*  918 */       String targetName = currentTarget.getName();
/*  919 */       if (targetName.equals("""")) {
/*      */         continue;
/*      */       }
/*  922 */       String targetDescription = currentTarget.getDescription();
/*      */       
/*  924 */       if (targetDescription == null) {
/*  925 */         int pos = findTargetPosition(subNames, targetName);
/*  926 */         subNames.insertElementAt(targetName, pos); continue;
/*      */       } 
/*  928 */       int pos = findTargetPosition(topNames, targetName);
/*  929 */       topNames.insertElementAt(targetName, pos);
/*  930 */       topDescriptions.insertElementAt(targetDescription, pos);
/*  931 */       if (targetName.length() > maxLength) {
/*  932 */         maxLength = targetName.length();
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  937 */     printTargets(project, topNames, topDescriptions, ""Main targets:"", maxLength);
/*      */ 
/*      */ 
/*      */     
/*  941 */     if (topNames.size() == 0) {
/*  942 */       printSubTargets = true;
/*      */     }
/*  944 */     if (printSubTargets) {
/*  945 */       printTargets(project, subNames, null, ""Other targets:"", 0);
/*      */     }
/*      */     
/*  948 */     String defaultTarget = project.getDefaultTarget();
/*  949 */     if (defaultTarget != null && !"""".equals(defaultTarget))
/*      */     {
/*  951 */       project.log(""Default target: "" + defaultTarget);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static int findTargetPosition(Vector names, String name) {
/*  966 */     int res = names.size();
/*  967 */     for (int i = 0; i < names.size() && res == names.size(); i++) {
/*  968 */       if (name.compareTo(names.elementAt(i)) < 0) {
/*  969 */         res = i;
/*      */       }
/*      */     } 
/*  972 */     return res;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void printTargets(Project project, Vector names, Vector descriptions, String heading, int maxlen) {
/*  999 */     String lSep = System.getProperty(""line.separator"");
/*      */     
/* 1001 */     String spaces = ""    "";
/* 1002 */     while (spaces.length() <= maxlen) {
/* 1003 */       spaces = spaces + spaces;
/*      */     }
/* 1005 */     StringBuffer msg = new StringBuffer();
/* 1006 */     msg.append(heading + lSep + lSep);
/* 1007 */     for (int i = 0; i < names.size(); i++) {
/* 1008 */       msg.append("" "");
/* 1009 */       msg.append(names.elementAt(i));
/* 1010 */       if (descriptions != null) {
/* 1011 */         msg.append(spaces.substring(0, maxlen - ((String)names.elementAt(i)).length() + 2));
/* 1012 */         msg.append(descriptions.elementAt(i));
/*      */       } 
/* 1014 */       msg.append(lSep);
/*      */     } 
/* 1016 */     project.log(msg.toString());
/*      */   }
/*      */   
/*      */   public Main() {}
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Main.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.NoBannerLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class NoBannerLogger
/*     */   extends DefaultLogger
/*     */ {
/*     */   protected String targetName;
/*     */   
/*  87 */   public void targetStarted(BuildEvent event) { this.targetName = event.getTarget().getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void targetFinished(BuildEvent event) { this.targetName = null; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 110 */     if (event.getPriority() > this.msgOutputLevel || null == event.getMessage() || """".equals(event.getMessage().trim())) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 116 */     if (null != this.targetName) {
/* 117 */       this.out.println(StringUtils.LINE_SEP + this.targetName + "":"");
/* 118 */       this.targetName = null;
/*     */     } 
/*     */     
/* 121 */     super.messageLogged(event);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\NoBannerLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.PathTokenizer,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathTokenizer
/*     */ {
/*     */   private StringTokenizer tokenizer;
/*  81 */   private String lookahead = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   private boolean onNetWare = Os.isFamily(""netware"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dosStyleFilesystem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PathTokenizer(String path) {
/* 102 */     if (this.onNetWare) {
/*     */ 
/*     */       
/* 105 */       this.tokenizer = new StringTokenizer(path, "":;"", true);
/*     */     }
/*     */     else {
/*     */       
/* 109 */       this.tokenizer = new StringTokenizer(path, "":;"", false);
/*     */     } 
/* 111 */     this.dosStyleFilesystem = (File.pathSeparatorChar == ';');
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasMoreTokens() {
/* 123 */     if (this.lookahead != null) {
/* 124 */       return true;
/*     */     }
/*     */     
/* 127 */     return this.tokenizer.hasMoreTokens();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String nextToken() throws NoSuchElementException {
/* 139 */     String token = null;
/* 140 */     if (this.lookahead != null) {
/* 141 */       token = this.lookahead;
/* 142 */       this.lookahead = null;
/*     */     } else {
/* 144 */       token = this.tokenizer.nextToken().trim();
/*     */     } 
/*     */     
/* 147 */     if (!this.onNetWare) {
/* 148 */       if (token.length() == 1 && Character.isLetter(token.charAt(0)) && this.dosStyleFilesystem && this.tokenizer.hasMoreTokens()) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 153 */         String nextToken = this.tokenizer.nextToken().trim();
/* 154 */         if (nextToken.startsWith(""\\"") || nextToken.startsWith(""/"")) {
/*     */ 
/*     */ 
/*     */           
/* 158 */           token = token + "":"" + nextToken;
/*     */         } else {
/*     */           
/* 161 */           this.lookahead = nextToken;
/*     */         }
/*     */       
/*     */       } 
/*     */     } else {
/*     */       
/* 167 */       if (token.equals(File.pathSeparator) || token.equals("":""))
/*     */       {
/* 169 */         token = this.tokenizer.nextToken().trim();
/*     */       }
/*     */       
/* 172 */       if (this.tokenizer.hasMoreTokens()) {
/*     */         
/* 174 */         String nextToken = this.tokenizer.nextToken().trim();
/*     */ 
/*     */         
/* 177 */         if (!nextToken.equals(File.pathSeparator)) {
/* 178 */           if (nextToken.equals("":"")) {
/* 179 */             if (!token.startsWith(""/"") && !token.startsWith(""\\"") && !token.startsWith(""."") && !token.startsWith(""..""))
/*     */             {
/*     */ 
/*     */               
/* 183 */               String oneMore = this.tokenizer.nextToken().trim();
/* 184 */               if (!oneMore.equals(File.pathSeparator)) {
/* 185 */                 token = token + "":"" + oneMore;
/*     */               } else {
/* 187 */                 token = token + "":"";
/* 188 */                 this.lookahead = oneMore;
/*     */               }
/*     */             
/*     */             }
/*     */           
/*     */           } else {
/*     */             
/* 195 */             this.lookahead = nextToken;
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/* 200 */     return token;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\PathTokenizer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Project,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.EOFException;
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Method;
/*      */ import java.lang.reflect.Modifier;
/*      */ import java.util.Enumeration;
/*      */ import java.util.HashSet;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Iterator;
/*      */ import java.util.Properties;
/*      */ import java.util.Set;
/*      */ import java.util.Stack;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.input.DefaultInputHandler;
/*      */ import org.apache.tools.ant.input.InputHandler;
/*      */ import org.apache.tools.ant.types.Description;
/*      */ import org.apache.tools.ant.types.FilterSet;
/*      */ import org.apache.tools.ant.types.FilterSetCollection;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ import org.apache.tools.ant.util.StringUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Project
/*      */ {
/*      */   public static final int MSG_ERR = 0;
/*      */   public static final int MSG_WARN = 1;
/*      */   public static final int MSG_INFO = 2;
/*      */   public static final int MSG_VERBOSE = 3;
/*      */   public static final int MSG_DEBUG = 4;
/*      */   private static final String VISITING = ""VISITING"";
/*      */   private static final String VISITED = ""VISITED"";
/*      */   private static final String ANTCLASSLOADER_JDK12 = ""org.apache.tools.ant.loader.AntClassLoader2"";
/*      */   public static final String JAVA_1_0 = ""1.0"";
/*      */   public static final String JAVA_1_1 = ""1.1"";
/*      */   public static final String JAVA_1_2 = ""1.2"";
/*      */   public static final String JAVA_1_3 = ""1.3"";
/*      */   public static final String JAVA_1_4 = ""1.4"";
/*      */   public static final String TOKEN_START = ""@"";
/*      */   public static final String TOKEN_END = ""@"";
/*      */   private String name;
/*      */   private String description;
/*  170 */   private Hashtable references = new AntRefTable(this);
/*      */ 
/*      */   
/*      */   private String defaultTarget;
/*      */ 
/*      */   
/*  176 */   private Hashtable targets = new Hashtable();
/*      */   
/*  178 */   private FilterSet globalFilterSet = new FilterSet();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  184 */   private FilterSetCollection globalFilters = new FilterSetCollection(this.globalFilterSet);
/*      */ 
/*      */ 
/*      */   
/*      */   private File baseDir;
/*      */ 
/*      */   
/*  191 */   private Vector listeners = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  197 */   private ClassLoader coreLoader = null;
/*      */ 
/*      */   
/*  200 */   private Hashtable threadTasks = new Hashtable();
/*      */ 
/*      */   
/*  203 */   private Hashtable threadGroupTasks = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  208 */   private InputHandler inputHandler = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  213 */   private InputStream defaultInputStream = null;
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean keepGoingMode = false;
/*      */ 
/*      */ 
/*      */   
/*      */   private FileUtils fileUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  226 */   public void setInputHandler(InputHandler handler) { this.inputHandler = handler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  239 */   public void setDefaultInputStream(InputStream defaultInputStream) { this.defaultInputStream = defaultInputStream; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  249 */   public InputStream getDefaultInputStream() { return this.defaultInputStream; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  259 */   public InputHandler getInputHandler() { return this.inputHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean loggingMessage = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Project() {
/*  274 */     this.fileUtils = FileUtils.newFileUtils();
/*  275 */     this.inputHandler = (InputHandler)new DefaultInputHandler();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void initSubProject(Project subProject) {
/*  283 */     ComponentHelper.getComponentHelper(subProject).initSubProject(ComponentHelper.getComponentHelper(this));
/*      */     
/*  285 */     subProject.setKeepGoingMode(isKeepGoingMode());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void init() throws BuildException {
/*  297 */     setJavaVersionProperty();
/*      */     
/*  299 */     ComponentHelper.getComponentHelper(this).initDefaultDefinitions();
/*      */     
/*  301 */     setSystemProperties();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private AntClassLoader createClassLoader() {
/*  310 */     AntClassLoader loader = null;
/*  311 */     if (!JavaEnvUtils.isJavaVersion(""1.1"")) {
/*      */       
/*      */       try {
/*  314 */         Class loaderClass = Class.forName(""org.apache.tools.ant.loader.AntClassLoader2"");
/*      */         
/*  316 */         loader = (AntClassLoader)loaderClass.newInstance();
/*      */       } catch (Exception e) {
/*  318 */         log(""Unable to create Class Loader: "" + e.getMessage(), 4);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  323 */     if (loader == null) {
/*  324 */       loader = new AntClassLoader();
/*      */     }
/*      */     
/*  327 */     loader.setProject(this);
/*  328 */     return loader;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader createClassLoader(Path path) {
/*  340 */     AntClassLoader loader = createClassLoader();
/*  341 */     loader.setClassPath(path);
/*  342 */     return loader;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  353 */   public void setCoreLoader(ClassLoader coreLoader) { this.coreLoader = coreLoader; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  365 */   public ClassLoader getCoreLoader() { return this.coreLoader; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void addBuildListener(BuildListener listener) {
/*  378 */     Vector newListeners = getBuildListeners();
/*  379 */     newListeners.addElement(listener);
/*  380 */     this.listeners = newListeners;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void removeBuildListener(BuildListener listener) {
/*  393 */     Vector newListeners = getBuildListeners();
/*  394 */     newListeners.removeElement(listener);
/*  395 */     this.listeners = newListeners;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  404 */   public Vector getBuildListeners() { return (Vector)this.listeners.clone(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  414 */   public void log(String message) { log(message, 2); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  423 */   public void log(String message, int msgLevel) { fireMessageLogged(this, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  433 */   public void log(Task task, String message, int msgLevel) { fireMessageLogged(task, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  444 */   public void log(Target target, String message, int msgLevel) { fireMessageLogged(target, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  453 */   public FilterSet getGlobalFilterSet() { return this.globalFilterSet; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  465 */   public void setProperty(String name, String value) { PropertyHelper.getPropertyHelper(this).setProperty(null, name, value, true); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  481 */   public void setNewProperty(String name, String value) { PropertyHelper.getPropertyHelper(this).setNewProperty(null, name, value); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  495 */   public void setUserProperty(String name, String value) { PropertyHelper.getPropertyHelper(this).setUserProperty(null, name, value); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setInheritedProperty(String name, String value) {
/*  512 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  513 */     ph.setInheritedProperty(null, name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void setPropertyInternal(String name, String value) {
/*  525 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  526 */     ph.setProperty(null, name, value, false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getProperty(String name) {
/*  539 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  540 */     return (String)ph.getProperty(null, name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String replaceProperties(String value) throws BuildException {
/*  559 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  560 */     return ph.replaceProperties(null, value, null);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getUserProperty(String name) {
/*  573 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  574 */     return (String)ph.getUserProperty(null, name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Hashtable getProperties() {
/*  583 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  584 */     return ph.getProperties();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Hashtable getUserProperties() {
/*  592 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  593 */     return ph.getUserProperties();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void copyUserProperties(Project other) {
/*  609 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  610 */     ph.copyUserProperties(other);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void copyInheritedProperties(Project other) {
/*  626 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(this);
/*  627 */     ph.copyInheritedProperties(other);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  641 */   public void setDefaultTarget(String defaultTarget) { this.defaultTarget = defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  650 */   public String getDefaultTarget() { return this.defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  661 */   public void setDefault(String defaultTarget) { this.defaultTarget = defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setName(String name) {
/*  672 */     setUserProperty(""ant.project.name"", name);
/*  673 */     this.name = name;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  682 */   public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  692 */   public void setDescription(String description) { this.description = description; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getDescription() {
/*  702 */     if (this.description == null) {
/*  703 */       this.description = Description.getDescription(this);
/*      */     }
/*      */     
/*  706 */     return this.description;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addFilter(String token, String value) {
/*  722 */     if (token == null) {
/*      */       return;
/*      */     }
/*      */     
/*  726 */     this.globalFilterSet.addFilter(new FilterSet.Filter(token, value));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  742 */   public Hashtable getFilters() { return this.globalFilterSet.getFilterHash(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  755 */   public void setBasedir(String baseD) throws BuildException { setBaseDir(new File(baseD)); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBaseDir(File baseDir) throws BuildException {
/*  768 */     baseDir = this.fileUtils.normalize(baseDir.getAbsolutePath());
/*  769 */     if (!baseDir.exists()) {
/*  770 */       throw new BuildException(""Basedir "" + baseDir.getAbsolutePath() + "" does not exist"");
/*      */     }
/*      */     
/*  773 */     if (!baseDir.isDirectory()) {
/*  774 */       throw new BuildException(""Basedir "" + baseDir.getAbsolutePath() + "" is not a directory"");
/*      */     }
/*      */     
/*  777 */     this.baseDir = baseDir;
/*  778 */     setPropertyInternal(""basedir"", this.baseDir.getPath());
/*  779 */     String msg = ""Project base dir set to: "" + this.baseDir;
/*  780 */     log(msg, 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File getBaseDir() {
/*  790 */     if (this.baseDir == null) {
/*      */       try {
/*  792 */         setBasedir(""."");
/*      */       } catch (BuildException ex) {
/*  794 */         ex.printStackTrace();
/*      */       } 
/*      */     }
/*  797 */     return this.baseDir;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  808 */   public void setKeepGoingMode(boolean keepGoingMode) { this.keepGoingMode = keepGoingMode; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  817 */   public boolean isKeepGoingMode() { return this.keepGoingMode; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  827 */   public static String getJavaVersion() { return JavaEnvUtils.getJavaVersion(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setJavaVersionProperty() throws BuildException {
/*  841 */     String javaVersion = JavaEnvUtils.getJavaVersion();
/*  842 */     setPropertyInternal(""ant.java.version"", javaVersion);
/*      */ 
/*      */     
/*  845 */     if (JavaEnvUtils.isJavaVersion(""1.0"")) {
/*  846 */       throw new BuildException(""Ant cannot work on Java 1.0"");
/*      */     }
/*      */     
/*  849 */     log(""Detected Java version: "" + javaVersion + "" in: "" + System.getProperty(""java.home""), 3);
/*      */ 
/*      */     
/*  852 */     log(""Detected OS: "" + System.getProperty(""os.name""), 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSystemProperties() {
/*  860 */     Properties systemP = System.getProperties();
/*  861 */     Enumeration e = systemP.keys();
/*  862 */     while (e.hasMoreElements()) {
/*  863 */       Object name = e.nextElement();
/*  864 */       String value = systemP.get(name).toString();
/*  865 */       setPropertyInternal(name.toString(), value);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  891 */   public void addTaskDefinition(String taskName, Class taskClass) throws BuildException { ComponentHelper.getComponentHelper(this).addTaskDefinition(taskName, taskClass); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void checkTaskClass(Class taskClass) throws BuildException {
/*  908 */     ComponentHelper.getComponentHelper(this).checkTaskClass(taskClass);
/*      */     
/*  910 */     if (!Modifier.isPublic(taskClass.getModifiers())) {
/*  911 */       String message = taskClass + "" is not public"";
/*  912 */       log(message, 0);
/*  913 */       throw new BuildException(message);
/*      */     } 
/*  915 */     if (Modifier.isAbstract(taskClass.getModifiers())) {
/*  916 */       String message = taskClass + "" is abstract"";
/*  917 */       log(message, 0);
/*  918 */       throw new BuildException(message);
/*      */     } 
/*      */     try {
/*  921 */       taskClass.getConstructor(null);
/*      */     }
/*      */     catch (NoSuchMethodException e) {
/*      */       
/*  925 */       String message = ""No public no-arg constructor in "" + taskClass;
/*      */       
/*  927 */       log(message, 0);
/*  928 */       throw new BuildException(message);
/*      */     } 
/*  930 */     if (!Task.class.isAssignableFrom(taskClass)) {
/*  931 */       TaskAdapter.checkTaskClass(taskClass, this);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  943 */   public Hashtable getTaskDefinitions() { return ComponentHelper.getComponentHelper(this).getTaskDefinitions(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  960 */   public void addDataTypeDefinition(String typeName, Class typeClass) { ComponentHelper.getComponentHelper(this).addDataTypeDefinition(typeName, typeClass); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  972 */   public Hashtable getDataTypeDefinitions() { return ComponentHelper.getComponentHelper(this).getDataTypeDefinitions(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addTarget(Target target) throws BuildException {
/*  986 */     String name = target.getName();
/*  987 */     if (this.targets.get(name) != null) {
/*  988 */       throw new BuildException(""Duplicate target: `"" + name + ""'"");
/*      */     }
/*  990 */     addOrReplaceTarget(name, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addTarget(String targetName, Target target) throws BuildException {
/* 1007 */     if (this.targets.get(targetName) != null) {
/* 1008 */       throw new BuildException(""Duplicate target: `"" + targetName + ""'"");
/*      */     }
/* 1010 */     addOrReplaceTarget(targetName, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1021 */   public void addOrReplaceTarget(Target target) { addOrReplaceTarget(target.getName(), target); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addOrReplaceTarget(String targetName, Target target) {
/* 1034 */     String msg = "" +Target: "" + targetName;
/* 1035 */     log(msg, 4);
/* 1036 */     target.setProject(this);
/* 1037 */     this.targets.put(targetName, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1046 */   public Hashtable getTargets() { return this.targets; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1063 */   public Task createTask(String taskType) throws BuildException { return ComponentHelper.getComponentHelper(this).createTask(taskType); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1079 */   public Object createDataType(String typeName) throws BuildException { return ComponentHelper.getComponentHelper(this).createDataType(typeName); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void executeTargets(Vector targetNames) throws BuildException {
/* 1093 */     for (int i = 0; i < targetNames.size(); i++) {
/* 1094 */       executeTarget(targetNames.elementAt(i));
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void demuxOutput(String output, boolean isWarning) {
/* 1108 */     Task task = getThreadTask(Thread.currentThread());
/* 1109 */     if (task == null) {
/* 1110 */       log(output, isWarning ? 1 : 2);
/*      */     }
/* 1112 */     else if (isWarning) {
/* 1113 */       task.handleErrorOutput(output);
/*      */     } else {
/* 1115 */       task.handleOutput(output);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int defaultInput(byte[] buffer, int offset, int length) throws IOException {
/* 1135 */     if (this.defaultInputStream != null) {
/* 1136 */       System.out.flush();
/* 1137 */       return this.defaultInputStream.read(buffer, offset, length);
/*      */     } 
/* 1139 */     throw new EOFException(""No input provided for project"");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int demuxInput(byte[] buffer, int offset, int length) throws IOException {
/* 1157 */     Task task = getThreadTask(Thread.currentThread());
/* 1158 */     if (task == null) {
/* 1159 */       return defaultInput(buffer, offset, length);
/*      */     }
/* 1161 */     return task.handleInput(buffer, offset, length);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void demuxFlush(String output, boolean isError) {
/* 1177 */     Task task = getThreadTask(Thread.currentThread());
/* 1178 */     if (task == null) {
/* 1179 */       fireMessageLogged(this, output, isError ? 0 : 2);
/*      */     }
/* 1181 */     else if (isError) {
/* 1182 */       task.handleErrorFlush(output);
/*      */     } else {
/* 1184 */       task.handleFlush(output);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void executeTarget(String targetName) throws BuildException {
/* 1204 */     if (targetName == null) {
/* 1205 */       String msg = ""No target specified"";
/* 1206 */       throw new BuildException(msg);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1214 */     Vector sortedTargets = topoSort(targetName, this.targets);
/*      */     
/* 1216 */     Set succeededTargets = new HashSet();
/* 1217 */     BuildException buildException = null;
/* 1218 */     Enumeration iter = sortedTargets.elements();
/* 1219 */     while (iter.hasMoreElements()) {
/* 1220 */       Target curtarget = iter.nextElement();
/* 1221 */       boolean canExecute = true;
/* 1222 */       Enumeration depIter = curtarget.getDependencies();
/* 1223 */       while (depIter.hasMoreElements()) {
/* 1224 */         String dependencyName = depIter.nextElement();
/* 1225 */         if (!succeededTargets.contains(dependencyName)) {
/* 1226 */           canExecute = false;
/* 1227 */           log(curtarget, ""Cannot execute '"" + curtarget.getName() + ""' - '"" + dependencyName + ""' failed or was not executed."", 0);
/*      */ 
/*      */           
/*      */           break;
/*      */         } 
/*      */       } 
/*      */       
/* 1234 */       if (canExecute) {
/* 1235 */         Throwable thrownException = null;
/*      */         try {
/* 1237 */           curtarget.performTasks();
/* 1238 */           succeededTargets.add(curtarget.getName());
/*      */         } catch (RuntimeException ex) {
/* 1240 */           if (!this.keepGoingMode) {
/* 1241 */             throw ex;
/*      */           }
/* 1243 */           thrownException = ex;
/*      */         } catch (Throwable ex) {
/* 1245 */           if (!this.keepGoingMode) {
/* 1246 */             throw new BuildException(ex);
/*      */           }
/* 1248 */           thrownException = ex;
/*      */         } 
/* 1250 */         if (thrownException != null) {
/* 1251 */           if (thrownException instanceof BuildException) {
/* 1252 */             log(curtarget, ""Target '"" + curtarget.getName() + ""' failed with message '"" + thrownException.getMessage() + ""'."", 0);
/*      */ 
/*      */ 
/*      */ 
/*      */             
/* 1257 */             if (buildException == null) {
/* 1258 */               buildException = (BuildException)thrownException;
/*      */             }
/*      */           } else {
/* 1261 */             log(curtarget, ""Target '"" + curtarget.getName() + ""' failed with message '"" + thrownException.getMessage() + ""'."", 0);
/*      */ 
/*      */ 
/*      */             
/* 1265 */             thrownException.printStackTrace(System.err);
/* 1266 */             if (buildException == null) {
/* 1267 */               buildException = new BuildException(thrownException);
/*      */             }
/*      */           } 
/*      */         }
/*      */       } 
/*      */       
/* 1273 */       if (curtarget.getName().equals(targetName)) {
/*      */         break;
/*      */       }
/*      */     } 
/* 1277 */     if (buildException != null) {
/* 1278 */       throw buildException;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1300 */   public File resolveFile(String fileName, File rootDir) { return this.fileUtils.resolveFile(rootDir, fileName); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1316 */   public File resolveFile(String fileName) { return this.fileUtils.resolveFile(this.baseDir, fileName); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static String translatePath(String toProcess) {
/* 1336 */     if (toProcess == null || toProcess.length() == 0) {
/* 1337 */       return """";
/*      */     }
/*      */     
/* 1340 */     StringBuffer path = new StringBuffer(toProcess.length() + 50);
/* 1341 */     PathTokenizer tokenizer = new PathTokenizer(toProcess);
/* 1342 */     while (tokenizer.hasMoreTokens()) {
/* 1343 */       String pathComponent = tokenizer.nextToken();
/* 1344 */       pathComponent = pathComponent.replace('/', File.separatorChar);
/* 1345 */       pathComponent = pathComponent.replace('\\', File.separatorChar);
/* 1346 */       if (path.length() != 0) {
/* 1347 */         path.append(File.pathSeparatorChar);
/*      */       }
/* 1349 */       path.append(pathComponent);
/*      */     } 
/*      */     
/* 1352 */     return path.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1370 */   public void copyFile(String sourceFile, String destFile) throws IOException { this.fileUtils.copyFile(sourceFile, destFile); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1390 */   public void copyFile(String sourceFile, String destFile, boolean filtering) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1414 */   public void copyFile(String sourceFile, String destFile, boolean filtering, boolean overwrite) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1444 */   public void copyFile(String sourceFile, String destFile, boolean filtering, boolean overwrite, boolean preserveLastModified) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite, preserveLastModified); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1462 */   public void copyFile(File sourceFile, File destFile) throws IOException { this.fileUtils.copyFile(sourceFile, destFile); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1482 */   public void copyFile(File sourceFile, File destFile, boolean filtering) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1506 */   public void copyFile(File sourceFile, File destFile, boolean filtering, boolean overwrite) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1536 */   public void copyFile(File sourceFile, File destFile, boolean filtering, boolean overwrite, boolean preserveLastModified) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite, preserveLastModified); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setFileLastModified(File file, long time) throws BuildException {
/* 1557 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 1558 */       log(""Cannot change the modification time of "" + file + "" in JDK 1.1"", 1);
/*      */       
/*      */       return;
/*      */     } 
/* 1562 */     this.fileUtils.setFileLastModified(file, time);
/* 1563 */     log(""Setting modification time for "" + file, 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1578 */   public static boolean toBoolean(String s) { return (""on"".equalsIgnoreCase(s) || ""true"".equalsIgnoreCase(s) || ""yes"".equalsIgnoreCase(s)); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final Vector topoSort(String root, Hashtable targets) throws BuildException {
/* 1598 */     Vector ret = new Vector();
/* 1599 */     Hashtable state = new Hashtable();
/* 1600 */     Stack visiting = new Stack();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1610 */     tsort(root, targets, state, visiting, ret);
/* 1611 */     log(""Build sequence for target `"" + root + ""' is "" + ret, 3);
/* 1612 */     for (Enumeration en = targets.keys(); en.hasMoreElements(); ) {
/* 1613 */       String curTarget = en.nextElement();
/* 1614 */       String st = (String)state.get(curTarget);
/* 1615 */       if (st == null) {
/* 1616 */         tsort(curTarget, targets, state, visiting, ret); continue;
/* 1617 */       }  if (st == ""VISITING"") {
/* 1618 */         throw new RuntimeException(""Unexpected node in visiting state: "" + curTarget);
/*      */       }
/*      */     } 
/*      */     
/* 1622 */     log(""Complete build sequence is "" + ret, 3);
/* 1623 */     return ret;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private final void tsort(String root, Hashtable targets, Hashtable state, Stack visiting, Vector ret) throws BuildException {
/* 1670 */     state.put(root, ""VISITING"");
/* 1671 */     visiting.push(root);
/*      */     
/* 1673 */     Target target = (Target)targets.get(root);
/*      */ 
/*      */     
/* 1676 */     if (target == null) {
/* 1677 */       StringBuffer sb = new StringBuffer(""Target `"");
/* 1678 */       sb.append(root);
/* 1679 */       sb.append(""' does not exist in this project. "");
/* 1680 */       visiting.pop();
/* 1681 */       if (!visiting.empty()) {
/* 1682 */         String parent = visiting.peek();
/* 1683 */         sb.append(""It is used from target `"");
/* 1684 */         sb.append(parent);
/* 1685 */         sb.append(""'."");
/*      */       } 
/*      */       
/* 1688 */       throw new BuildException(new String(sb));
/*      */     } 
/*      */     
/* 1691 */     for (Enumeration en = target.getDependencies(); en.hasMoreElements(); ) {
/* 1692 */       String cur = en.nextElement();
/* 1693 */       String m = state.get(cur);
/* 1694 */       if (m == null) {
/*      */         
/* 1696 */         tsort(cur, targets, state, visiting, ret); continue;
/* 1697 */       }  if (m == ""VISITING"")
/*      */       {
/* 1699 */         throw makeCircularException(cur, visiting);
/*      */       }
/*      */     } 
/*      */     
/* 1703 */     String p = visiting.pop();
/* 1704 */     if (root != p) {
/* 1705 */       throw new RuntimeException(""Unexpected internal error: expected to pop "" + root + "" but got "" + p);
/*      */     }
/*      */     
/* 1708 */     state.put(root, ""VISITED"");
/* 1709 */     ret.addElement(target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static BuildException makeCircularException(String end, Stack stk) {
/*      */     String c;
/* 1722 */     StringBuffer sb = new StringBuffer(""Circular dependency: "");
/* 1723 */     sb.append(end);
/*      */     
/*      */     do {
/* 1726 */       c = stk.pop();
/* 1727 */       sb.append("" <- "");
/* 1728 */       sb.append(c);
/* 1729 */     } while (!c.equals(end));
/* 1730 */     return new BuildException(new String(sb));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addReference(String name, Object value) {
/* 1740 */     synchronized (this.references) {
/* 1741 */       Object old = ((AntRefTable)this.references).getReal(name);
/* 1742 */       if (old == value) {
/*      */         return;
/*      */       }
/*      */       
/* 1746 */       if (old != null && !(old instanceof UnknownElement)) {
/* 1747 */         log(""Overriding previous definition of reference to "" + name, 1);
/*      */       }
/*      */       
/* 1750 */       log(""Adding reference: "" + name, 4);
/* 1751 */       this.references.put(name, value);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1762 */   public Hashtable getReferences() { return this.references; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1775 */   public Object getReference(String key) { return this.references.get(key); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1792 */   public String getElementName(Object element) { return ComponentHelper.getComponentHelper(this).getElementName(element); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void fireBuildStarted() {
/* 1799 */     BuildEvent event = new BuildEvent(this);
/* 1800 */     Iterator iter = this.listeners.iterator();
/* 1801 */     while (iter.hasNext()) {
/* 1802 */       BuildListener listener = iter.next();
/* 1803 */       listener.buildStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void fireBuildFinished(Throwable exception) {
/* 1814 */     BuildEvent event = new BuildEvent(this);
/* 1815 */     event.setException(exception);
/* 1816 */     Iterator iter = this.listeners.iterator();
/* 1817 */     while (iter.hasNext()) {
/* 1818 */       BuildListener listener = iter.next();
/* 1819 */       listener.buildFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTargetStarted(Target target) {
/* 1831 */     BuildEvent event = new BuildEvent(target);
/* 1832 */     Iterator iter = this.listeners.iterator();
/* 1833 */     while (iter.hasNext()) {
/* 1834 */       BuildListener listener = iter.next();
/* 1835 */       listener.targetStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTargetFinished(Target target, Throwable exception) {
/* 1850 */     BuildEvent event = new BuildEvent(target);
/* 1851 */     event.setException(exception);
/* 1852 */     Iterator iter = this.listeners.iterator();
/* 1853 */     while (iter.hasNext()) {
/* 1854 */       BuildListener listener = iter.next();
/* 1855 */       listener.targetFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTaskStarted(Task task) {
/* 1867 */     registerThreadTask(Thread.currentThread(), task);
/* 1868 */     BuildEvent event = new BuildEvent(task);
/* 1869 */     Iterator iter = this.listeners.iterator();
/* 1870 */     while (iter.hasNext()) {
/* 1871 */       BuildListener listener = iter.next();
/* 1872 */       listener.taskStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTaskFinished(Task task, Throwable exception) {
/* 1887 */     registerThreadTask(Thread.currentThread(), null);
/* 1888 */     System.out.flush();
/* 1889 */     System.err.flush();
/* 1890 */     BuildEvent event = new BuildEvent(task);
/* 1891 */     event.setException(exception);
/* 1892 */     Iterator iter = this.listeners.iterator();
/* 1893 */     while (iter.hasNext()) {
/* 1894 */       BuildListener listener = iter.next();
/* 1895 */       listener.taskFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void fireMessageLoggedEvent(BuildEvent event, String message, int priority) {
/* 1912 */     if (message.endsWith(StringUtils.LINE_SEP)) {
/* 1913 */       int endIndex = message.length() - StringUtils.LINE_SEP.length();
/* 1914 */       event.setMessage(message.substring(0, endIndex), priority);
/*      */     } else {
/* 1916 */       event.setMessage(message, priority);
/*      */     } 
/* 1918 */     synchronized (this) {
/* 1919 */       if (this.loggingMessage) {
/* 1920 */         throw new BuildException(""Listener attempted to access "" + ((priority == 0) ? ""System.err"" : ""System.out"") + "" - infinite loop terminated"");
/*      */       }
/*      */ 
/*      */       
/*      */       try {
/* 1925 */         this.loggingMessage = true;
/* 1926 */         Iterator iter = this.listeners.iterator();
/* 1927 */         while (iter.hasNext()) {
/* 1928 */           BuildListener listener = iter.next();
/* 1929 */           listener.messageLogged(event);
/*      */         } 
/*      */       } finally {
/* 1932 */         this.loggingMessage = false;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Project project, String message, int priority) {
/* 1948 */     BuildEvent event = new BuildEvent(project);
/* 1949 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Target target, String message, int priority) {
/* 1963 */     BuildEvent event = new BuildEvent(target);
/* 1964 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Task task, String message, int priority) {
/* 1977 */     BuildEvent event = new BuildEvent(task);
/* 1978 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void registerThreadTask(Thread thread, Task task) {
/* 1990 */     if (task != null) {
/* 1991 */       this.threadTasks.put(thread, task);
/* 1992 */       this.threadGroupTasks.put(thread.getThreadGroup(), task);
/*      */     } else {
/* 1994 */       this.threadTasks.remove(thread);
/* 1995 */       this.threadGroupTasks.remove(thread.getThreadGroup());
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Task getThreadTask(Thread thread) {
/* 2007 */     Task task = (Task)this.threadTasks.get(thread);
/* 2008 */     if (task == null) {
/* 2009 */       ThreadGroup group = thread.getThreadGroup();
/* 2010 */       while (task == null && group != null) {
/* 2011 */         task = (Task)this.threadGroupTasks.get(group);
/* 2012 */         group = group.getParent();
/*      */       } 
/*      */     } 
/* 2015 */     return task;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static class AntRefTable
/*      */     extends Hashtable
/*      */   {
/*      */     private Project project;
/*      */ 
/*      */     
/* 2026 */     public AntRefTable(Project project) { this.project = project; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2037 */     public Object getReal(Object key) { return super.get(key); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object get(Object key) {
/* 2053 */       Object o = super.get(key);
/* 2054 */       if (o instanceof UnknownElement) {
/*      */         
/* 2056 */         UnknownElement ue = (UnknownElement)o;
/* 2057 */         ue.maybeConfigure();
/* 2058 */         o = ue.getRealThing();
/*      */       } 
/* 2060 */       return o;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final void setProjectReference(Object obj) {
/* 2071 */     if (obj instanceof ProjectComponent) {
/* 2072 */       ((ProjectComponent)obj).setProject(this);
/*      */       return;
/*      */     } 
/*      */     try {
/* 2076 */       Method method = obj.getClass().getMethod(""setProject"", new Class[] { Project.class });
/*      */ 
/*      */       
/* 2079 */       if (method != null) {
/* 2080 */         method.invoke(obj, new Object[] { this });
/*      */       }
/* 2082 */     } catch (Throwable e) {}
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Project.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectComponent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ProjectComponent
/*     */ {
/*     */   protected Project project;
/*     */   
/*  87 */   public void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void log(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void log(String msg, int msgLevel) {
/* 116 */     if (this.project != null) {
/* 117 */       this.project.log(msg, msgLevel);
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 122 */     else if (msgLevel >= 2) {
/* 123 */       System.err.println(msg);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\ProjectComponent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.helper.ProjectHelper2;
/*     */ import org.apache.tools.ant.util.LoaderUtils;
/*     */ import org.xml.sax.AttributeList;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProjectHelper
/*     */ {
/*     */   public static final String ANT_CORE_URI = ""antlib:org.apache.tools.ant"";
/*     */   public static final String ANT_CURRENT_URI = ""ant:current"";
/*     */   public static final String ANTLIB_URI = ""antlib:"";
/*     */   public static final String HELPER_PROPERTY = ""org.apache.tools.ant.ProjectHelper"";
/*     */   public static final String SERVICE_ID = ""META-INF/services/org.apache.tools.ant.ProjectHelper"";
/*     */   private Vector importStack;
/*     */   
/*     */   public static void configureProject(Project project, File buildFile) throws BuildException {
/* 124 */     ProjectHelper helper = getProjectHelper();
/* 125 */     project.addReference(""ant.projectHelper"", helper);
/* 126 */     helper.parse(project, buildFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public ProjectHelper() { this.importStack = new Vector(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public Vector getImportStack() { return this.importStack; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void parse(Project project, Object source) throws BuildException { throw new BuildException(""ProjectHelper.parse() must be implemented in a helper plugin "" + getClass().getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ProjectHelper getProjectHelper() throws BuildException {
/* 202 */     ProjectHelper helper = null;
/*     */ 
/*     */     
/* 205 */     String helperClass = System.getProperty(""org.apache.tools.ant.ProjectHelper"");
/*     */     try {
/* 207 */       if (helperClass != null) {
/* 208 */         helper = newHelper(helperClass);
/*     */       }
/*     */     } catch (SecurityException e) {
/* 211 */       System.out.println(""Unable to load ProjectHelper class \"""" + helperClass + "" specified in system property "" + ""org.apache.tools.ant.ProjectHelper"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 218 */     if (helper == null) {
/*     */       try {
/* 220 */         ClassLoader classLoader = LoaderUtils.getContextClassLoader();
/* 221 */         InputStream is = null;
/* 222 */         if (classLoader != null) {
/* 223 */           is = classLoader.getResourceAsStream(""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */         }
/* 225 */         if (is == null) {
/* 226 */           is = ClassLoader.getSystemResourceAsStream(""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */         }
/*     */         
/* 229 */         if (is != null) {
/*     */           InputStreamReader inputStreamReader;
/*     */ 
/*     */           
/*     */           try {
/* 234 */             inputStreamReader = new InputStreamReader(is, ""UTF-8"");
/*     */           } catch (UnsupportedEncodingException e) {
/* 236 */             inputStreamReader = new InputStreamReader(is);
/*     */           } 
/* 238 */           BufferedReader rd = new BufferedReader(inputStreamReader);
/*     */           
/* 240 */           String helperClassName = rd.readLine();
/* 241 */           rd.close();
/*     */           
/* 243 */           if (helperClassName != null && !"""".equals(helperClassName))
/*     */           {
/*     */             
/* 246 */             helper = newHelper(helperClassName);
/*     */           }
/*     */         } 
/*     */       } catch (Exception ex) {
/* 250 */         System.out.println(""Unable to load ProjectHelper from service \""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 255 */     if (helper != null) {
/* 256 */       return helper;
/*     */     }
/*     */ 
/*     */     
/*     */     try {
/* 261 */       return (ProjectHelper)new ProjectHelper2();
/*     */     } catch (Throwable e) {
/* 263 */       String message = ""Unable to load default ProjectHelper due to "" + e.getClass().getName() + "": "" + e.getMessage();
/*     */       
/* 265 */       throw new BuildException(message, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static ProjectHelper newHelper(String helperClass) throws BuildException {
/* 285 */     ClassLoader classLoader = LoaderUtils.getContextClassLoader();
/*     */     try {
/* 287 */       Class clazz = null;
/* 288 */       if (classLoader != null) {
/*     */         try {
/* 290 */           clazz = classLoader.loadClass(helperClass);
/* 291 */         } catch (ClassNotFoundException ex) {}
/*     */       }
/*     */ 
/*     */       
/* 295 */       if (clazz == null) {
/* 296 */         clazz = Class.forName(helperClass);
/*     */       }
/* 298 */       return (ProjectHelper)clazz.newInstance();
/*     */     } catch (Exception e) {
/* 300 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getContextClassLoader() {
/* 313 */     if (!LoaderUtils.isContextLoaderAvailable()) {
/* 314 */       return null;
/*     */     }
/*     */     
/* 317 */     return LoaderUtils.getContextClassLoader();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void configure(Object target, AttributeList attrs, Project project) throws BuildException {
/* 338 */     if (target instanceof TypeAdapter) {
/* 339 */       target = ((TypeAdapter)target).getProxy();
/*     */     }
/*     */     
/* 342 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(target.getClass());
/*     */ 
/*     */     
/* 345 */     project.addBuildListener(ih);
/*     */     
/* 347 */     for (int i = 0; i < attrs.getLength(); i++) {
/*     */       
/* 349 */       String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
/*     */       
/*     */       try {
/* 352 */         ih.setAttribute(project, target, attrs.getName(i).toLowerCase(Locale.US), value);
/*     */       
/*     */       }
/*     */       catch (BuildException be) {
/*     */         
/* 357 */         if (!attrs.getName(i).equals(""id"")) {
/* 358 */           throw be;
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 380 */   public static void addText(Project project, Object target, char[] buf, int start, int count) throws BuildException { addText(project, target, new String(buf, start, count)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void addText(Project project, Object target, String text) throws BuildException {
/* 399 */     if (text == null) {
/*     */       return;
/*     */     }
/*     */     
/* 403 */     if (target instanceof TypeAdapter) {
/* 404 */       target = ((TypeAdapter)target).getProxy();
/*     */     }
/*     */     
/* 407 */     IntrospectionHelper.getHelper(target.getClass()).addText(project, target, text);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void storeChild(Project project, Object parent, Object child, String tag) {
/* 426 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(parent.getClass());
/*     */     
/* 428 */     ih.storeElement(project, parent, child, tag);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 453 */   public static String replaceProperties(Project project, String value) throws BuildException { return project.replaceProperties(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replaceProperties(Project project, String value, Hashtable keys) throws BuildException {
/* 477 */     PropertyHelper ph = PropertyHelper.getPropertyHelper(project);
/* 478 */     return ph.replaceProperties(null, value, keys);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 502 */   public static void parsePropertyString(String value, Vector fragments, Vector propertyRefs) throws BuildException { PropertyHelper.parsePropertyStringDefault(value, fragments, propertyRefs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String genComponentName(String uri, String name) {
/* 515 */     if (uri == null || uri.equals("""") || uri.equals(""antlib:org.apache.tools.ant"")) {
/* 516 */       return name;
/*     */     }
/* 518 */     return uri + "":"" + name;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String extractUriFromComponentName(String componentName) {
/* 528 */     if (componentName == null) {
/* 529 */       return """";
/*     */     }
/* 531 */     int index = componentName.lastIndexOf(':');
/* 532 */     if (index == -1) {
/* 533 */       return """";
/*     */     }
/* 535 */     return componentName.substring(0, index);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String extractNameFromComponentName(String componentName) {
/* 545 */     int index = componentName.lastIndexOf(':');
/* 546 */     if (index == -1) {
/* 547 */       return componentName;
/*     */     }
/* 549 */     return componentName.substring(index + 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static BuildException addLocationToBuildException(BuildException ex, Location newLocation) {
/* 563 */     if (ex.getLocation() == null || ex.getMessage() == null) {
/* 564 */       return ex;
/*     */     }
/* 566 */     String errorMessage = ""Following error occured while executing this line"" + System.getProperty(""line.separator"") + ex.getLocation().toString() + ex.getMessage();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 571 */     if (newLocation == null) {
/* 572 */       return new BuildException(errorMessage);
/*     */     }
/* 574 */     return new BuildException(errorMessage, newLocation);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\ProjectHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.PropertyHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyHelper
/*     */ {
/*     */   private Project project;
/*     */   private PropertyHelper next;
/*  91 */   private Hashtable properties = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private Hashtable userProperties = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   private Hashtable inheritedProperties = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setProject(Project p) { this.project = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setNext(PropertyHelper next) { this.next = next; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public PropertyHelper getNext() { return this.next; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized PropertyHelper getPropertyHelper(Project project) {
/* 161 */     PropertyHelper helper = (PropertyHelper)project.getReference(""ant.PropertyHelper"");
/*     */     
/* 163 */     if (helper != null) {
/* 164 */       return helper;
/*     */     }
/* 166 */     helper = new PropertyHelper();
/* 167 */     helper.setProject(project);
/*     */     
/* 169 */     project.addReference(""ant.PropertyHelper"", helper);
/* 170 */     return helper;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean setPropertyHook(String ns, String name, Object value, boolean inherited, boolean user, boolean isNew) {
/* 195 */     if (getNext() != null) {
/* 196 */       boolean subst = getNext().setPropertyHook(ns, name, value, inherited, user, isNew);
/*     */ 
/*     */       
/* 199 */       if (subst) {
/* 200 */         return true;
/*     */       }
/*     */     } 
/*     */     
/* 204 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object getPropertyHook(String ns, String name, boolean user) {
/* 215 */     if (getNext() != null) {
/* 216 */       Object o = getNext().getPropertyHook(ns, name, user);
/* 217 */       if (o != null) {
/* 218 */         return o;
/*     */       }
/*     */     } 
/*     */     
/* 222 */     if (name.startsWith(""toString:"")) {
/* 223 */       name = name.substring(""toString:"".length());
/* 224 */       Object v = this.project.getReference(name);
/* 225 */       if (v == null) {
/* 226 */         return null;
/*     */       }
/* 228 */       return v.toString();
/*     */     } 
/*     */ 
/*     */     
/* 232 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void parsePropertyString(String value, Vector fragments, Vector propertyRefs) throws BuildException { parsePropertyStringDefault(value, fragments, propertyRefs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceProperties(String ns, String value, Hashtable keys) throws BuildException {
/* 286 */     if (value == null) {
/* 287 */       return null;
/*     */     }
/*     */     
/* 290 */     Vector fragments = new Vector();
/* 291 */     Vector propertyRefs = new Vector();
/* 292 */     parsePropertyString(value, fragments, propertyRefs);
/*     */     
/* 294 */     StringBuffer sb = new StringBuffer();
/* 295 */     Enumeration i = fragments.elements();
/* 296 */     Enumeration j = propertyRefs.elements();
/*     */     
/* 298 */     while (i.hasMoreElements()) {
/* 299 */       String fragment = i.nextElement();
/* 300 */       if (fragment == null) {
/* 301 */         String propertyName = j.nextElement();
/* 302 */         Object replacement = null;
/*     */ 
/*     */ 
/*     */         
/* 306 */         if (keys != null) {
/* 307 */           replacement = keys.get(propertyName);
/*     */         }
/* 309 */         if (replacement == null) {
/* 310 */           replacement = getProperty(ns, propertyName);
/*     */         }
/*     */         
/* 313 */         if (replacement == null) {
/* 314 */           this.project.log(""Property ${"" + propertyName + ""} has not been set"", 3);
/*     */         }
/*     */         
/* 317 */         fragment = (replacement != null) ? replacement.toString() : (""${"" + propertyName + ""}"");
/*     */       } 
/*     */ 
/*     */       
/* 321 */       sb.append(fragment);
/*     */     } 
/*     */     
/* 324 */     return sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized boolean setProperty(String ns, String name, Object value, boolean verbose) {
/* 339 */     if (null != this.userProperties.get(name)) {
/* 340 */       if (verbose) {
/* 341 */         this.project.log(""Override ignored for user property "" + name, 3);
/*     */       }
/*     */       
/* 344 */       return false;
/*     */     } 
/*     */     
/* 347 */     boolean done = setPropertyHook(ns, name, value, false, false, false);
/* 348 */     if (done) {
/* 349 */       return true;
/*     */     }
/*     */     
/* 352 */     if (null != this.properties.get(name) && verbose) {
/* 353 */       this.project.log(""Overriding previous definition of property "" + name, 3);
/*     */     }
/*     */ 
/*     */     
/* 357 */     if (verbose) {
/* 358 */       this.project.log(""Setting project property: "" + name + "" -> "" + value, 4);
/*     */     }
/*     */     
/* 361 */     this.properties.put(name, value);
/* 362 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void setNewProperty(String ns, String name, Object value) {
/* 378 */     if (null != this.properties.get(name)) {
/* 379 */       this.project.log(""Override ignored for property "" + name, 3);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 384 */     boolean done = setPropertyHook(ns, name, value, false, false, true);
/* 385 */     if (done) {
/*     */       return;
/*     */     }
/*     */     
/* 389 */     this.project.log(""Setting project property: "" + name + "" -> "" + value, 4);
/*     */     
/* 391 */     if (name != null && value != null) {
/* 392 */       this.properties.put(name, value);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void setUserProperty(String ns, String name, Object value) {
/* 406 */     this.project.log(""Setting ro project property: "" + name + "" -> "" + value, 4);
/*     */     
/* 408 */     this.userProperties.put(name, value);
/*     */     
/* 410 */     boolean done = setPropertyHook(ns, name, value, false, true, false);
/* 411 */     if (done) {
/*     */       return;
/*     */     }
/* 414 */     this.properties.put(name, value);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void setInheritedProperty(String ns, String name, Object value) {
/* 430 */     this.inheritedProperties.put(name, value);
/*     */     
/* 432 */     this.project.log(""Setting ro project property: "" + name + "" -> "" + value, 4);
/*     */     
/* 434 */     this.userProperties.put(name, value);
/*     */     
/* 436 */     boolean done = setPropertyHook(ns, name, value, true, false, false);
/* 437 */     if (done) {
/*     */       return;
/*     */     }
/* 440 */     this.properties.put(name, value);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized Object getProperty(String ns, String name) {
/* 456 */     if (name == null) {
/* 457 */       return null;
/*     */     }
/*     */     
/* 460 */     Object o = getPropertyHook(ns, name, false);
/* 461 */     if (o != null) {
/* 462 */       return o;
/*     */     }
/*     */     
/* 465 */     return this.properties.get(name);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized Object getUserProperty(String ns, String name) {
/* 477 */     if (name == null) {
/* 478 */       return null;
/*     */     }
/* 480 */     Object o = getPropertyHook(ns, name, true);
/* 481 */     if (o != null) {
/* 482 */       return o;
/*     */     }
/* 484 */     return this.userProperties.get(name);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getProperties() {
/* 501 */     Hashtable propertiesCopy = new Hashtable();
/*     */     
/* 503 */     Enumeration e = this.properties.keys();
/* 504 */     while (e.hasMoreElements()) {
/* 505 */       Object name = e.nextElement();
/* 506 */       Object value = this.properties.get(name);
/* 507 */       propertiesCopy.put(name, value);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 513 */     return propertiesCopy;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getUserProperties() {
/* 521 */     Hashtable propertiesCopy = new Hashtable();
/*     */     
/* 523 */     Enumeration e = this.userProperties.keys();
/* 524 */     while (e.hasMoreElements()) {
/* 525 */       Object name = e.nextElement();
/* 526 */       Object value = this.properties.get(name);
/* 527 */       propertiesCopy.put(name, value);
/*     */     } 
/*     */     
/* 530 */     return propertiesCopy;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyInheritedProperties(Project other) {
/* 546 */     Enumeration e = this.inheritedProperties.keys();
/* 547 */     while (e.hasMoreElements()) {
/* 548 */       String arg = e.nextElement().toString();
/* 549 */       if (other.getUserProperty(arg) != null) {
/*     */         continue;
/*     */       }
/* 552 */       Object value = this.inheritedProperties.get(arg);
/* 553 */       other.setInheritedProperty(arg, value.toString());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyUserProperties(Project other) {
/* 570 */     Enumeration e = this.userProperties.keys();
/* 571 */     while (e.hasMoreElements()) {
/* 572 */       Object arg = e.nextElement();
/* 573 */       if (this.inheritedProperties.containsKey(arg)) {
/*     */         continue;
/*     */       }
/* 576 */       Object value = this.userProperties.get(arg);
/* 577 */       other.setUserProperty(arg.toString(), value.toString());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static void parsePropertyStringDefault(String value, Vector fragments, Vector propertyRefs) throws BuildException {
/* 592 */     int prev = 0;
/*     */     
/*     */     int pos;
/* 595 */     while ((pos = value.indexOf(""$"", prev)) >= 0) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 601 */       if (pos > 0) {
/* 602 */         fragments.addElement(value.substring(prev, pos));
/*     */       }
/*     */ 
/*     */       
/* 606 */       if (pos == value.length() - 1) {
/* 607 */         fragments.addElement(""$"");
/* 608 */         prev = pos + 1; continue;
/* 609 */       }  if (value.charAt(pos + 1) != '{') {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 616 */         if (value.charAt(pos + 1) == '$') {
/*     */           
/* 618 */           fragments.addElement(""$"");
/* 619 */           prev = pos + 2;
/*     */           continue;
/*     */         } 
/* 622 */         fragments.addElement(value.substring(pos, pos + 2));
/* 623 */         prev = pos + 2;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 628 */       int endName = value.indexOf('}', pos);
/* 629 */       if (endName < 0) {
/* 630 */         throw new BuildException(""Syntax error in property: "" + value);
/*     */       }
/*     */       
/* 633 */       String propertyName = value.substring(pos + 2, endName);
/* 634 */       fragments.addElement(null);
/* 635 */       propertyRefs.addElement(propertyName);
/* 636 */       prev = endName + 1;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 641 */     if (prev < value.length())
/* 642 */       fragments.addElement(value.substring(prev)); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\PropertyHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.RuntimeConfigurable,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.Serializable;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.Enumeration;
/*     */ import java.util.HashMap;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Locale;
/*     */ import java.util.Map;
/*     */ import org.apache.tools.ant.util.CollectionUtils;
/*     */ import org.xml.sax.AttributeList;
/*     */ import org.xml.sax.helpers.AttributeListImpl;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RuntimeConfigurable
/*     */   implements Serializable
/*     */ {
/*     */   private static final String ANT_TYPE = ""ant-type"";
/*  85 */   private String elementTag = null;
/*     */ 
/*     */   
/*  88 */   private List children = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   private transient Object wrappedObject = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private transient IntrospectionHelper.Creator creator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private transient AttributeList attributes;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   private List attributeNames = null;
/*     */ 
/*     */   
/* 114 */   private Map attributeMap = null;
/*     */ 
/*     */   
/* 117 */   private StringBuffer characters = null;
/*     */ 
/*     */   
/*     */   private boolean proxyConfigured = false;
/*     */ 
/*     */   
/* 123 */   private String polyType = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable(Object proxy, String elementTag) {
/* 133 */     this.wrappedObject = proxy;
/* 134 */     this.elementTag = elementTag;
/* 135 */     this.proxyConfigured = false;
/*     */     
/* 137 */     if (proxy instanceof Task) {
/* 138 */       ((Task)proxy).setRuntimeConfigurableWrapper(this);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProxy(Object proxy) {
/* 148 */     this.wrappedObject = proxy;
/* 149 */     this.proxyConfigured = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   void setCreator(IntrospectionHelper.Creator creator) { this.creator = creator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public Object getProxy() { return this.wrappedObject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   public String getPolyType() { return this.polyType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void setPolyType(String polyType) { this.polyType = polyType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAttributes(AttributeList attributes) {
/* 196 */     this.attributes = new AttributeListImpl(attributes);
/* 197 */     for (int i = 0; i < attributes.getLength(); i++) {
/* 198 */       setAttribute(attributes.getName(i), attributes.getValue(i));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAttribute(String name, String value) {
/* 209 */     if (name.equalsIgnoreCase(""ant-type"")) {
/* 210 */       this.polyType = value;
/*     */     } else {
/* 212 */       if (this.attributeNames == null) {
/* 213 */         this.attributeNames = new ArrayList();
/* 214 */         this.attributeMap = new HashMap();
/*     */       } 
/* 216 */       this.attributeNames.add(name);
/* 217 */       this.attributeMap.put(name, value);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getAttributeMap() {
/* 226 */     if (this.attributeMap != null) {
/* 227 */       return new Hashtable(this.attributeMap);
/*     */     }
/* 229 */     return new Hashtable(1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public AttributeList getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addChild(RuntimeConfigurable child) {
/* 251 */     if (this.children == null) {
/* 252 */       this.children = new ArrayList();
/*     */     }
/* 254 */     this.children.add(child);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   RuntimeConfigurable getChild(int index) { return this.children.get(index); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration getChildren() {
/* 275 */     if (this.children != null) {
/* 276 */       return Collections.enumeration(this.children);
/*     */     }
/* 278 */     return (Enumeration)new CollectionUtils.EmptyEnumeration();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(String data) {
/* 289 */     if (data.length() == 0) {
/*     */       return;
/*     */     }
/* 292 */     if (this.characters != null) {
/* 293 */       this.characters.append(data);
/*     */     } else {
/* 295 */       this.characters = new StringBuffer(data);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(char[] buf, int start, int count) {
/* 309 */     if (count == 0) {
/*     */       return;
/*     */     }
/* 312 */     if (this.characters == null) {
/* 313 */       this.characters = new StringBuffer(count);
/*     */     }
/* 315 */     this.characters.append(buf, start, count);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StringBuffer getText() {
/* 325 */     if (this.characters != null) {
/* 326 */       return this.characters;
/*     */     }
/* 328 */     return new StringBuffer(0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 339 */   public String getElementTag() { return this.elementTag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 360 */   public void maybeConfigure(Project p) throws BuildException { maybeConfigure(p, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure(Project p, boolean configureChildren) throws BuildException {
/* 384 */     String id = null;
/*     */     
/* 386 */     if (this.proxyConfigured) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 391 */     Object target = (this.wrappedObject instanceof TypeAdapter) ? ((TypeAdapter)this.wrappedObject).getProxy() : this.wrappedObject;
/*     */ 
/*     */ 
/*     */     
/* 395 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(p, target.getClass());
/*     */ 
/*     */     
/* 398 */     if (this.attributeNames != null) {
/* 399 */       for (int i = 0; i < this.attributeNames.size(); i++) {
/* 400 */         String name = this.attributeNames.get(i);
/* 401 */         String value = (String)this.attributeMap.get(name);
/*     */ 
/*     */         
/* 404 */         value = p.replaceProperties(value);
/*     */         try {
/* 406 */           ih.setAttribute(p, target, name.toLowerCase(Locale.US), value);
/*     */         }
/*     */         catch (BuildException be) {
/*     */           
/* 410 */           if (!name.equals(""id"")) {
/* 411 */             throw be;
/*     */           }
/*     */         } 
/*     */       } 
/* 415 */       id = (String)this.attributeMap.get(""id"");
/*     */     } 
/*     */     
/* 418 */     if (this.characters != null) {
/* 419 */       ProjectHelper.addText(p, this.wrappedObject, this.characters.substring(0));
/*     */     }
/*     */     
/* 422 */     Enumeration e = getChildren();
/* 423 */     while (e.hasMoreElements()) {
/* 424 */       RuntimeConfigurable child = e.nextElement();
/*     */       
/* 426 */       if (child.wrappedObject instanceof Task) {
/* 427 */         Task childTask = (Task)child.wrappedObject;
/* 428 */         childTask.setRuntimeConfigurableWrapper(child);
/*     */       } 
/*     */       
/* 431 */       if (child.creator != null && configureChildren) {
/* 432 */         child.maybeConfigure(p);
/* 433 */         child.creator.store();
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         continue;
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 443 */       String tag = child.getElementTag().toLowerCase(Locale.US);
/* 444 */       if (configureChildren && ih.supportsNestedElement(tag)) {
/*     */         
/* 446 */         child.maybeConfigure(p);
/* 447 */         ProjectHelper.storeChild(p, target, child.wrappedObject, tag);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 452 */     if (id != null) {
/* 453 */       p.addReference(id, this.wrappedObject);
/*     */     }
/* 455 */     this.proxyConfigured = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reconfigure(Project p) {
/* 464 */     this.proxyConfigured = false;
/* 465 */     maybeConfigure(p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void applyPreSet(RuntimeConfigurable r) {
/* 477 */     if (r.attributeMap != null) {
/* 478 */       for (Iterator i = r.attributeMap.keySet().iterator(); i.hasNext(); ) {
/* 479 */         String name = i.next();
/* 480 */         if (this.attributeMap == null || this.attributeMap.get(name) == null) {
/* 481 */           setAttribute(name, (String)r.attributeMap.get(name));
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 486 */     if (r.polyType != null && this.polyType == null) {
/* 487 */       this.polyType = r.polyType;
/*     */     }
/*     */ 
/*     */     
/* 491 */     if (r.children != null) {
/* 492 */       List newChildren = new ArrayList();
/* 493 */       newChildren.addAll(r.children);
/* 494 */       if (this.children != null) {
/* 495 */         newChildren.addAll(this.children);
/*     */       }
/* 497 */       this.children = newChildren;
/*     */     } 
/*     */ 
/*     */     
/* 501 */     if (r.characters != null && (
/* 502 */       this.characters == null || this.characters.toString().trim().length() == 0))
/*     */     {
/* 504 */       this.characters = new StringBuffer(r.characters.toString());
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\RuntimeConfigurable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Target,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.util.CollectionUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Target
/*     */   implements TaskContainer
/*     */ {
/*     */   private String name;
/*  76 */   private String ifCondition = """";
/*     */   
/*  78 */   private String unlessCondition = """";
/*     */   
/*  80 */   private List dependencies = null;
/*     */   
/*  82 */   private List children = new ArrayList();
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */   
/*  88 */   private String description = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDepends(String depS) {
/* 122 */     if (depS.length() > 0) {
/* 123 */       StringTokenizer tok = new StringTokenizer(depS, "","", true);
/*     */       
/* 125 */       while (tok.hasMoreTokens()) {
/* 126 */         String token = tok.nextToken().trim();
/*     */ 
/*     */         
/* 129 */         if (token.equals("""") || token.equals("","")) {
/* 130 */           throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" has an empty string for dependency."");
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 135 */         addDependency(token);
/*     */ 
/*     */ 
/*     */         
/* 139 */         if (tok.hasMoreTokens()) {
/* 140 */           token = tok.nextToken();
/* 141 */           if (!tok.hasMoreTokens() || !token.equals("","")) {
/* 142 */             throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" ends with a , character"");
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void addTask(Task task) { this.children.add(task); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void addDataType(RuntimeConfigurable r) { this.children.add(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task[] getTasks() {
/* 195 */     List tasks = new ArrayList(this.children.size());
/* 196 */     Iterator it = this.children.iterator();
/* 197 */     while (it.hasNext()) {
/* 198 */       Object o = it.next();
/* 199 */       if (o instanceof Task) {
/* 200 */         tasks.add(o);
/*     */       }
/*     */     } 
/*     */     
/* 204 */     return tasks.toArray(new Task[tasks.size()]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDependency(String dependency) {
/* 214 */     if (this.dependencies == null) {
/* 215 */       this.dependencies = new ArrayList(2);
/*     */     }
/* 217 */     this.dependencies.add(dependency);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration getDependencies() {
/* 226 */     if (this.dependencies != null) {
/* 227 */       return Collections.enumeration(this.dependencies);
/*     */     }
/* 229 */     return (Enumeration)new CollectionUtils.EmptyEnumeration();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean dependsOn(String other) {
/* 239 */     if (getProject() != null) {
/* 240 */       List l = getProject().topoSort(getName(), getProject().getTargets());
/*     */       
/* 242 */       int myIdx = l.indexOf(this);
/* 243 */       int otherIdx = l.indexOf(getProject().getTargets().get(other));
/* 244 */       return (myIdx >= otherIdx);
/*     */     } 
/* 246 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setIf(String property) { this.ifCondition = (property == null) ? """" : property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 280 */   public void setUnless(String property) { this.unlessCondition = (property == null) ? """" : property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 301 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public String toString() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 331 */     if (testIfCondition() && testUnlessCondition()) {
/* 332 */       int taskPosition = 0;
/* 333 */       for (; taskPosition < this.children.size(); 
/* 334 */         taskPosition++) {
/* 335 */         Object o = this.children.get(taskPosition);
/* 336 */         if (o instanceof Task) {
/* 337 */           Task task = (Task)o;
/* 338 */           task.perform();
/*     */         } else {
/* 340 */           RuntimeConfigurable r = (RuntimeConfigurable)o;
/* 341 */           r.maybeConfigure(this.project);
/*     */         } 
/*     */       } 
/* 344 */     } else if (!testIfCondition()) {
/* 345 */       this.project.log(this, ""Skipped because property '"" + this.project.replaceProperties(this.ifCondition) + ""' not set."", 3);
/*     */     }
/*     */     else {
/*     */       
/* 349 */       this.project.log(this, ""Skipped because property '"" + this.project.replaceProperties(this.unlessCondition) + ""' set."", 3);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void performTasks() {
/*     */     try {
/* 364 */       this.project.fireTargetStarted(this);
/* 365 */       execute();
/* 366 */       this.project.fireTargetFinished(this, null);
/*     */     } catch (RuntimeException exc) {
/* 368 */       this.project.fireTargetFinished(this, exc);
/* 369 */       throw exc;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void replaceChild(Task el, RuntimeConfigurable o) {
/*     */     int index;
/* 383 */     while ((index = this.children.indexOf(el)) >= 0) {
/* 384 */       this.children.set(index, o);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void replaceChild(Task el, Task o) {
/*     */     int index;
/* 398 */     while ((index = this.children.indexOf(el)) >= 0) {
/* 399 */       this.children.set(index, o);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testIfCondition() {
/* 413 */     if ("""".equals(this.ifCondition)) {
/* 414 */       return true;
/*     */     }
/*     */     
/* 417 */     String test = this.project.replaceProperties(this.ifCondition);
/* 418 */     return (this.project.getProperty(test) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testUnlessCondition() {
/* 431 */     if ("""".equals(this.unlessCondition)) {
/* 432 */       return true;
/*     */     }
/* 434 */     String test = this.project.replaceProperties(this.unlessCondition);
/* 435 */     return (this.project.getProperty(test) == null);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Target.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Task,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Task
/*     */   extends ProjectComponent
/*     */ {
/*     */   protected Target target;
/*     */   protected String description;
/*  88 */   protected Location location = Location.UNKNOWN_LOCATION;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String taskName;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String taskType;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RuntimeConfigurable wrapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean invalid;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private UnknownElement replacement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setOwningTarget(Target target) { this.target = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public Target getOwningTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setTaskName(String name) { this.taskName = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public String getTaskName() { return this.taskName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setTaskType(String type) { this.taskType = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setDescription(String desc) { this.description = desc; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void setLocation(Location location) { this.location = location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable getRuntimeConfigurableWrapper() {
/* 256 */     if (this.wrapper == null) {
/* 257 */       this.wrapper = new RuntimeConfigurable(this, getTaskName());
/*     */     }
/* 259 */     return this.wrapper;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public void setRuntimeConfigurableWrapper(RuntimeConfigurable wrapper) { this.wrapper = wrapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/* 290 */     if (!this.invalid) {
/* 291 */       if (this.wrapper != null) {
/* 292 */         this.wrapper.maybeConfigure(getProject());
/*     */       }
/*     */     } else {
/* 295 */       getReplacement();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reconfigure() {
/* 304 */     if (this.wrapper != null) {
/* 305 */       this.wrapper.reconfigure(getProject());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   protected void handleOutput(String output) { log(output, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 326 */   protected void handleFlush(String output) { handleOutput(output); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   protected int handleInput(byte[] buffer, int offset, int length) throws IOException { return getProject().defaultInput(buffer, offset, length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 352 */   protected void handleErrorOutput(String output) { log(output, 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 363 */   protected void handleErrorFlush(String output) { handleErrorOutput(output); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 372 */   public void log(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 384 */   public void log(String msg, int msgLevel) { getProject().log(this, msg, msgLevel); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void perform() {
/* 397 */     if (!this.invalid) {
/*     */       try {
/* 399 */         getProject().fireTaskStarted(this);
/* 400 */         maybeConfigure();
/* 401 */         execute();
/* 402 */         getProject().fireTaskFinished(this, null);
/*     */       } catch (RuntimeException exc) {
/* 404 */         if (exc instanceof BuildException) {
/* 405 */           BuildException be = (BuildException)exc;
/* 406 */           if (be.getLocation() == Location.UNKNOWN_LOCATION) {
/* 407 */             be.setLocation(getLocation());
/*     */           }
/*     */         } 
/* 410 */         getProject().fireTaskFinished(this, exc);
/* 411 */         throw exc;
/*     */       } 
/*     */     } else {
/* 414 */       UnknownElement ue = getReplacement();
/* 415 */       Task task = ue.getTask();
/* 416 */       task.perform();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   final void markInvalid() { this.invalid = true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 437 */   protected final boolean isInvalid() { return this.invalid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private UnknownElement getReplacement() {
/* 453 */     if (this.replacement == null) {
/* 454 */       this.replacement = new UnknownElement(this.taskType);
/* 455 */       this.replacement.setProject(getProject());
/* 456 */       this.replacement.setTaskType(this.taskType);
/* 457 */       this.replacement.setTaskName(this.taskName);
/* 458 */       this.replacement.setLocation(this.location);
/* 459 */       this.replacement.setOwningTarget(this.target);
/* 460 */       this.replacement.setRuntimeConfigurableWrapper(this.wrapper);
/* 461 */       this.wrapper.setProxy(this.replacement);
/* 462 */       replaceChildren(this.wrapper, this.replacement);
/* 463 */       this.target.replaceChild(this, this.replacement);
/* 464 */       this.replacement.maybeConfigure();
/*     */     } 
/* 466 */     return this.replacement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void replaceChildren(RuntimeConfigurable wrapper, UnknownElement parentElement) {
/* 477 */     Enumeration e = wrapper.getChildren();
/* 478 */     while (e.hasMoreElements()) {
/* 479 */       RuntimeConfigurable childWrapper = e.nextElement();
/*     */       
/* 481 */       UnknownElement childElement = new UnknownElement(childWrapper.getElementTag());
/*     */       
/* 483 */       parentElement.addChild(childElement);
/* 484 */       childElement.setProject(getProject());
/* 485 */       childElement.setRuntimeConfigurableWrapper(childWrapper);
/* 486 */       childWrapper.setProxy(childElement);
/* 487 */       replaceChildren(childWrapper, childElement);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 497 */   public String getTaskType() { return this.taskType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 506 */   protected RuntimeConfigurable getWrapper() { return this.wrapper; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\Task.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskAdapter,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskAdapter
/*     */   extends Task
/*     */   implements TypeAdapter
/*     */ {
/*     */   private Object proxy;
/*     */   
/*     */   public static void checkTaskClass(Class taskClass, Project project) {
/*     */     try {
/*  94 */       Method executeM = taskClass.getMethod(""execute"", null);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  99 */       if (!void.class.equals(executeM.getReturnType())) {
/* 100 */         String message = ""return type of execute() should be void but was \"""" + executeM.getReturnType() + ""\"" in "" + taskClass;
/*     */ 
/*     */         
/* 103 */         project.log(message, 1);
/*     */       } 
/*     */     } catch (NoSuchMethodException e) {
/* 106 */       String message = ""No public execute() in "" + taskClass;
/* 107 */       project.log(message, 0);
/* 108 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void checkProxyClass(Class proxyClass) { checkTaskClass(proxyClass, getProject()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 129 */     Method setProjectM = null;
/*     */     try {
/* 131 */       Class c = this.proxy.getClass();
/* 132 */       setProjectM = c.getMethod(""setProject"", new Class[] { Project.class });
/*     */       
/* 134 */       if (setProjectM != null) {
/* 135 */         setProjectM.invoke(this.proxy, new Object[] { getProject() });
/*     */       }
/* 137 */     } catch (NoSuchMethodException e) {
/*     */ 
/*     */     
/*     */     } catch (Exception ex) {
/* 141 */       log(""Error setting project in "" + this.proxy.getClass(), 0);
/*     */       
/* 143 */       throw new BuildException(ex);
/*     */     } 
/*     */ 
/*     */     
/* 147 */     Method executeM = null;
/*     */     try {
/* 149 */       Class c = this.proxy.getClass();
/* 150 */       executeM = c.getMethod(""execute"", new Class[0]);
/* 151 */       if (executeM == null) {
/* 152 */         log(""No public execute() in "" + this.proxy.getClass(), 0);
/*     */         
/* 154 */         throw new BuildException(""No public execute() in "" + this.proxy.getClass());
/*     */       } 
/*     */       
/* 157 */       executeM.invoke(this.proxy, null);
/*     */       return;
/*     */     } catch (InvocationTargetException ie) {
/* 160 */       log(""Error in "" + this.proxy.getClass(), 3);
/* 161 */       Throwable t = ie.getTargetException();
/* 162 */       if (t instanceof BuildException) {
/* 163 */         throw (BuildException)t;
/*     */       }
/* 165 */       throw new BuildException(t);
/*     */     } catch (Exception ex) {
/*     */       
/* 168 */       log(""Error in "" + this.proxy.getClass(), 3);
/* 169 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setProxy(Object o) { this.proxy = o; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public Object getProxy() { return this.proxy; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\TaskAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskContainer,"package org.apache.tools.ant;
public interface TaskContainer {
  void addTask(Task paramTask);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\TaskContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TypeAdapter,"package org.apache.tools.ant;
public interface TypeAdapter {
  void setProject(Project paramProject);
  Project getProject();
  void setProxy(Object paramObject);
  Object getProxy();
  void checkProxyClass(Class paramClass);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\TypeAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.UnknownElement,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.tools.ant.taskdefs.PreSetDef;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnknownElement
/*     */   extends Task
/*     */ {
/*     */   private String elementName;
/*     */   private String namespace;
/*     */   private String qname;
/*     */   private Object realThing;
/*  97 */   private List children = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean presetDefed = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public UnknownElement(String elementName) { this.elementName = elementName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public String getTag() { return this.elementName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public String getNamespace() { return this.namespace; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setNamespace(String namespace) {
/* 140 */     if (namespace.equals(""ant:current"")) {
/* 141 */       ComponentHelper helper = ComponentHelper.getComponentHelper(getProject());
/*     */       
/* 143 */       namespace = helper.getCurrentAntlibUri();
/*     */     } 
/* 145 */     this.namespace = namespace;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public String getQName() { return this.qname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setQName(String qname) { this.qname = qname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public RuntimeConfigurable getWrapper() { return super.getWrapper(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void maybeConfigure() throws BuildException { configure(makeObject(this, getWrapper())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void configure(Object realObject) {
/* 199 */     this.realThing = realObject;
/*     */     
/* 201 */     getWrapper().setProxy(this.realThing);
/* 202 */     Task task = null;
/* 203 */     if (this.realThing instanceof Task) {
/* 204 */       task = (Task)this.realThing;
/*     */       
/* 206 */       task.setRuntimeConfigurableWrapper(getWrapper());
/*     */ 
/*     */ 
/*     */       
/* 210 */       getOwningTarget().replaceChild(this, (Task)this.realThing);
/*     */     } 
/*     */     
/* 213 */     handleChildren(this.realThing, getWrapper());
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 219 */     if (task != null) {
/* 220 */       task.maybeConfigure();
/*     */     } else {
/* 222 */       getWrapper().maybeConfigure(getProject());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String output) {
/* 232 */     if (this.realThing instanceof Task) {
/* 233 */       ((Task)this.realThing).handleOutput(output);
/*     */     } else {
/* 235 */       super.handleOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int handleInput(byte[] buffer, int offset, int length) throws IOException {
/* 246 */     if (this.realThing instanceof Task) {
/* 247 */       return ((Task)this.realThing).handleInput(buffer, offset, length);
/*     */     }
/* 249 */     return super.handleInput(buffer, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleFlush(String output) {
/* 259 */     if (this.realThing instanceof Task) {
/* 260 */       ((Task)this.realThing).handleFlush(output);
/*     */     } else {
/* 262 */       super.handleFlush(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String output) {
/* 272 */     if (this.realThing instanceof Task) {
/* 273 */       ((Task)this.realThing).handleErrorOutput(output);
/*     */     } else {
/* 275 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorFlush(String output) {
/* 286 */     if (this.realThing instanceof Task) {
/* 287 */       ((Task)this.realThing).handleErrorOutput(output);
/*     */     } else {
/* 289 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 298 */     if (this.realThing == null)
/*     */     {
/*     */       
/* 301 */       throw new BuildException(""Could not create task of type: "" + this.elementName, getLocation());
/*     */     }
/*     */ 
/*     */     
/* 305 */     if (this.realThing instanceof Task) {
/* 306 */       ((Task)this.realThing).execute();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 311 */     this.realThing = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addChild(UnknownElement child) {
/* 320 */     if (this.children == null) {
/* 321 */       this.children = new ArrayList();
/*     */     }
/* 323 */     this.children.add(child);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleChildren(Object parent, RuntimeConfigurable parentWrapper) throws BuildException {
/* 343 */     if (parent instanceof TypeAdapter) {
/* 344 */       parent = ((TypeAdapter)parent).getProxy();
/*     */     }
/*     */     
/* 347 */     String parentUri = getNamespace();
/* 348 */     Class parentClass = parent.getClass();
/* 349 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(parentClass);
/*     */ 
/*     */     
/* 352 */     if (this.children != null) {
/* 353 */       Iterator it = this.children.iterator();
/* 354 */       for (int i = 0; it.hasNext(); i++) {
/* 355 */         RuntimeConfigurable childWrapper = parentWrapper.getChild(i);
/* 356 */         UnknownElement child = it.next();
/* 357 */         if (!handleChild(parentUri, ih, parent, child, childWrapper))
/*     */         {
/* 359 */           if (!(parent instanceof TaskContainer)) {
/* 360 */             ih.throwNotSupported(getProject(), parent, child.getTag());
/*     */           
/*     */           }
/*     */           else {
/*     */             
/* 365 */             TaskContainer container = (TaskContainer)parent;
/* 366 */             container.addTask(child);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   protected String getComponentName() { return ProjectHelper.genComponentName(getNamespace(), getTag()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void applyPreSet(UnknownElement u) {
/* 389 */     if (this.presetDefed) {
/*     */       return;
/*     */     }
/*     */     
/* 393 */     getWrapper().applyPreSet(u.getWrapper());
/* 394 */     if (u.children != null) {
/* 395 */       List newChildren = new ArrayList();
/* 396 */       newChildren.addAll(u.children);
/* 397 */       if (this.children != null) {
/* 398 */         newChildren.addAll(this.children);
/*     */       }
/* 400 */       this.children = newChildren;
/*     */     } 
/* 402 */     this.presetDefed = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object makeObject(UnknownElement ue, RuntimeConfigurable w) {
/* 416 */     ComponentHelper helper = ComponentHelper.getComponentHelper(getProject());
/*     */     
/* 418 */     String name = ue.getComponentName();
/* 419 */     Object o = helper.createComponent(ue, ue.getNamespace(), name);
/*     */     
/* 421 */     if (o == null) {
/* 422 */       throw getNotFoundException(""task or type"", name);
/*     */     }
/*     */     
/* 425 */     if (o instanceof PreSetDef.PreSetDefinition) {
/* 426 */       PreSetDef.PreSetDefinition def = (PreSetDef.PreSetDefinition)o;
/* 427 */       o = def.createObject(ue.getProject());
/* 428 */       ue.applyPreSet(def.getPreSets());
/* 429 */       if (o instanceof Task) {
/* 430 */         Task task = (Task)o;
/* 431 */         task.setTaskType(ue.getTaskType());
/* 432 */         task.setTaskName(ue.getTaskName());
/*     */       } 
/*     */     } 
/*     */     
/* 436 */     if (o instanceof Task) {
/* 437 */       Task task = (Task)o;
/* 438 */       task.setOwningTarget(getOwningTarget());
/* 439 */       task.init();
/*     */     } 
/* 441 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Task makeTask(UnknownElement ue, RuntimeConfigurable w) {
/* 455 */     Task task = getProject().createTask(ue.getTag());
/*     */     
/* 457 */     if (task != null) {
/* 458 */       task.setLocation(getLocation());
/*     */       
/* 460 */       task.setOwningTarget(getOwningTarget());
/* 461 */       task.init();
/*     */     } 
/* 463 */     return task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected BuildException getNotFoundException(String what, String elementName) {
/* 480 */     String lSep = System.getProperty(""line.separator"");
/* 481 */     String msg = ""Could not create "" + what + "" of type: "" + elementName + ""."" + lSep + lSep + ""Ant could not find the task or a class this "" + ""task relies upon."" + lSep + lSep + ""This is common and has a number of causes; the usual "" + lSep + ""solutions are to read the manual pages then download and"" + lSep + ""install needed JAR files, or fix the build file: "" + lSep + "" - You have misspelt '"" + elementName + ""'."" + lSep + ""   Fix: check your spelling."" + lSep + "" - The task needs an external JAR file to execute"" + lSep + ""   and this is not found at the right place in the classpath."" + lSep + ""   Fix: check the documentation for dependencies."" + lSep + ""   Fix: declare the task."" + lSep + "" - The task is an Ant optional task and optional.jar is absent"" + lSep + ""   Fix: look for optional.jar in ANT_HOME/lib, download if needed"" + lSep + "" - The task was not built into optional.jar as dependent"" + lSep + ""   libraries were not found at build time."" + lSep + ""   Fix: look in the JAR to verify, then rebuild with the needed"" + lSep + ""   libraries, or download a release version from apache.org"" + lSep + "" - The build file was written for a later version of Ant"" + lSep + ""   Fix: upgrade to at least the latest release version of Ant"" + lSep + "" - The task is not an Ant core or optional task "" + lSep + ""   and needs to be declared using <taskdef>."" + lSep + lSep + ""Remember that for JAR files to be visible to Ant tasks implemented"" + lSep + ""in ANT_HOME/lib, the files must be in the same directory or on the"" + lSep + ""classpath"" + lSep + lSep + ""Please neither file bug reports on this problem, nor email the"" + lSep + ""Ant mailing lists, until all of these causes have been explored,"" + lSep + ""as this is not an Ant bug."";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 514 */     return new BuildException(msg, getLocation());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 524 */   public String getTaskName() { return (this.realThing == null || !(this.realThing instanceof Task)) ? super.getTaskName() : ((Task)this.realThing).getTaskName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task getTask() {
/* 536 */     if (this.realThing instanceof Task) {
/* 537 */       return (Task)this.realThing;
/*     */     }
/* 539 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 550 */   public Object getRealThing() { return this.realThing; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean handleChild(String parentUri, IntrospectionHelper ih, Object parent, UnknownElement child, RuntimeConfigurable childWrapper) {
/* 563 */     String childName = ProjectHelper.genComponentName(child.getNamespace(), child.getTag());
/*     */     
/* 565 */     if (ih.supportsNestedElement(parentUri, childName)) {
/* 566 */       IntrospectionHelper.Creator creator = ih.getElementCreator(getProject(), parentUri, parent, childName, child);
/*     */ 
/*     */       
/* 569 */       creator.setPolyType(childWrapper.getPolyType());
/* 570 */       Object realChild = creator.create();
/* 571 */       if (realChild instanceof PreSetDef.PreSetDefinition) {
/* 572 */         PreSetDef.PreSetDefinition def = (PreSetDef.PreSetDefinition)realChild;
/*     */         
/* 574 */         realChild = creator.getRealObject();
/* 575 */         child.applyPreSet(def.getPreSets());
/*     */       } 
/* 577 */       childWrapper.setCreator(creator);
/* 578 */       childWrapper.setProxy(realChild);
/* 579 */       if (realChild instanceof Task) {
/* 580 */         Task childTask = (Task)realChild;
/* 581 */         childTask.setRuntimeConfigurableWrapper(childWrapper);
/* 582 */         childTask.setTaskName(childName);
/* 583 */         childTask.setTaskType(childName);
/* 584 */         childTask.setLocation(child.getLocation());
/*     */       } 
/* 586 */       child.handleChildren(realChild, childWrapper);
/* 587 */       return true;
/*     */     } 
/* 589 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean similar(Object obj) {
/* 598 */     if (obj == null) {
/* 599 */       return false;
/*     */     }
/* 601 */     if (!getClass().getName().equals(obj.getClass().getName())) {
/* 602 */       return false;
/*     */     }
/* 604 */     UnknownElement other = (UnknownElement)obj;
/*     */     
/* 606 */     if (!equalsString(this.elementName, other.elementName)) {
/* 607 */       return false;
/*     */     }
/* 609 */     if (!this.namespace.equals(other.namespace)) {
/* 610 */       return false;
/*     */     }
/* 612 */     if (!this.qname.equals(other.qname)) {
/* 613 */       return false;
/*     */     }
/*     */     
/* 616 */     if (!getWrapper().getAttributeMap().equals(other.getWrapper().getAttributeMap()))
/*     */     {
/* 618 */       return false;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 624 */     if (!getWrapper().getText().toString().equals(other.getWrapper().getText().toString()))
/*     */     {
/* 626 */       return false;
/*     */     }
/*     */     
/* 629 */     if (this.children == null || this.children.size() == 0) {
/* 630 */       return (other.children == null || other.children.size() == 0);
/*     */     }
/* 632 */     if (other.children == null) {
/* 633 */       return false;
/*     */     }
/* 635 */     if (this.children.size() != other.children.size()) {
/* 636 */       return false;
/*     */     }
/* 638 */     for (int i = 0; i < this.children.size(); i++) {
/* 639 */       UnknownElement child = this.children.get(i);
/* 640 */       if (!child.similar(other.children.get(i))) {
/* 641 */         return false;
/*     */       }
/*     */     } 
/* 644 */     return true;
/*     */   }
/*     */   
/*     */   private boolean equalsString(String a, String b) {
/* 648 */     if (a == null) {
/* 649 */       return (b == null);
/*     */     }
/* 651 */     return a.equals(b);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\UnknownElement.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.XmlLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintStream;
/*     */ import java.io.Writer;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import org.apache.tools.ant.util.DOMElementWriter;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.Text;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlLogger
/*     */   implements BuildLogger
/*     */ {
/*  91 */   private int msgOutputLevel = 4;
/*     */   
/*     */   private PrintStream outStream;
/*     */   
/*  95 */   private static DocumentBuilder builder = getDocumentBuilder();
/*     */   
/*     */   private static final String BUILD_TAG = ""build"";
/*     */   private static final String TARGET_TAG = ""target"";
/*     */   private static final String TASK_TAG = ""task"";
/*     */   private static final String MESSAGE_TAG = ""message"";
/*     */   private static final String NAME_ATTR = ""name"";
/*     */   
/*     */   private static DocumentBuilder getDocumentBuilder() {
/*     */     try {
/* 105 */       return DocumentBuilderFactory.newInstance().newDocumentBuilder();
/*     */     } catch (Exception exc) {
/* 107 */       throw new ExceptionInInitializerError(exc);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String TIME_ATTR = ""time"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String PRIORITY_ATTR = ""priority"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String LOCATION_ATTR = ""location"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String ERROR_ATTR = ""error"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String STACKTRACE_TAG = ""stacktrace"";
/*     */ 
/*     */   
/* 133 */   private Document doc = builder.newDocument();
/*     */   
/* 135 */   private Hashtable tasks = new Hashtable();
/*     */   
/* 137 */   private Hashtable targets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   private Hashtable threadStacks = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/* 146 */   private TimedElement buildElement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class TimedElement
/*     */   {
/*     */     private long startTime;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private Element element;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private TimedElement() {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildStarted(BuildEvent event) {
/* 172 */     this.buildElement = new TimedElement();
/* 173 */     this.buildElement.startTime = System.currentTimeMillis();
/* 174 */     this.buildElement.element = this.doc.createElement(""build"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 185 */     long totalTime = System.currentTimeMillis() - this.buildElement.startTime;
/* 186 */     this.buildElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */ 
/*     */     
/* 189 */     if (event.getException() != null) {
/* 190 */       this.buildElement.element.setAttribute(""error"", event.getException().toString());
/*     */ 
/*     */ 
/*     */       
/* 194 */       Throwable t = event.getException();
/* 195 */       Text errText = this.doc.createCDATASection(StringUtils.getStackTrace(t));
/* 196 */       Element stacktrace = this.doc.createElement(""stacktrace"");
/* 197 */       stacktrace.appendChild(errText);
/* 198 */       this.buildElement.element.appendChild(stacktrace);
/*     */     } 
/*     */     
/* 201 */     String outFilename = event.getProject().getProperty(""XmlLogger.file"");
/* 202 */     if (outFilename == null) {
/* 203 */       outFilename = ""log.xml"";
/*     */     }
/* 205 */     String xslUri = event.getProject().getProperty(""ant.XmlLogger.stylesheet.uri"");
/*     */     
/* 207 */     if (xslUri == null) {
/* 208 */       xslUri = ""log.xsl"";
/*     */     }
/* 210 */     Writer out = null;
/*     */ 
/*     */     
/*     */     try {
/* 214 */       OutputStream stream = this.outStream;
/* 215 */       if (stream == null) {
/* 216 */         stream = new FileOutputStream(outFilename);
/*     */       }
/* 218 */       out = new OutputStreamWriter(stream, ""UTF8"");
/* 219 */       out.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>\n"");
/* 220 */       if (xslUri.length() > 0) {
/* 221 */         out.write(""<?xml-stylesheet type=\""text/xsl\"" href=\"""" + xslUri + ""\""?>\n\n"");
/*     */       }
/*     */       
/* 224 */       (new DOMElementWriter()).write(this.buildElement.element, out, 0, ""\t"");
/* 225 */       out.flush();
/*     */     } catch (IOException exc) {
/* 227 */       throw new BuildException(""Unable to write log file"", exc);
/*     */     } finally {
/* 229 */       if (out != null) {
/*     */         try {
/* 231 */           out.close();
/* 232 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 237 */     this.buildElement = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Stack getStack() {
/* 245 */     Stack threadStack = (Stack)this.threadStacks.get(Thread.currentThread());
/* 246 */     if (threadStack == null) {
/* 247 */       threadStack = new Stack();
/* 248 */       this.threadStacks.put(Thread.currentThread(), threadStack);
/*     */     } 
/* 250 */     return threadStack;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 262 */     Target target = event.getTarget();
/* 263 */     TimedElement targetElement = new TimedElement();
/* 264 */     targetElement.startTime = System.currentTimeMillis();
/* 265 */     targetElement.element = this.doc.createElement(""target"");
/* 266 */     targetElement.element.setAttribute(""name"", target.getName());
/* 267 */     this.targets.put(target, targetElement);
/* 268 */     getStack().push(targetElement);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {
/* 279 */     Target target = event.getTarget();
/* 280 */     TimedElement targetElement = (TimedElement)this.targets.get(target);
/* 281 */     if (targetElement != null) {
/* 282 */       long totalTime = System.currentTimeMillis() - targetElement.startTime;
/*     */       
/* 284 */       targetElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */ 
/*     */       
/* 287 */       TimedElement parentElement = null;
/* 288 */       Stack threadStack = getStack();
/* 289 */       if (!threadStack.empty()) {
/* 290 */         TimedElement poppedStack = threadStack.pop();
/* 291 */         if (poppedStack != targetElement) {
/* 292 */           throw new RuntimeException(""Mismatch - popped element = "" + poppedStack.element + "" finished target element = "" + targetElement.element);
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 297 */         if (!threadStack.empty()) {
/* 298 */           parentElement = threadStack.peek();
/*     */         }
/*     */       } 
/* 301 */       if (parentElement == null) {
/* 302 */         this.buildElement.element.appendChild(targetElement.element);
/*     */       } else {
/* 304 */         parentElement.element.appendChild(targetElement.element);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskStarted(BuildEvent event) {
/* 318 */     TimedElement taskElement = new TimedElement();
/* 319 */     taskElement.startTime = System.currentTimeMillis();
/* 320 */     taskElement.element = this.doc.createElement(""task"");
/*     */     
/* 322 */     Task task = event.getTask();
/* 323 */     String name = event.getTask().getTaskName();
/* 324 */     taskElement.element.setAttribute(""name"", name);
/* 325 */     taskElement.element.setAttribute(""location"", event.getTask().getLocation().toString());
/*     */     
/* 327 */     this.tasks.put(task, taskElement);
/* 328 */     getStack().push(taskElement);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {
/* 339 */     Task task = event.getTask();
/* 340 */     TimedElement taskElement = (TimedElement)this.tasks.get(task);
/* 341 */     if (taskElement != null) {
/* 342 */       long totalTime = System.currentTimeMillis() - taskElement.startTime;
/* 343 */       taskElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */       
/* 345 */       Target target = task.getOwningTarget();
/* 346 */       TimedElement targetElement = null;
/* 347 */       if (target != null) {
/* 348 */         targetElement = (TimedElement)this.targets.get(target);
/*     */       }
/* 350 */       if (targetElement == null) {
/* 351 */         this.buildElement.element.appendChild(taskElement.element);
/*     */       } else {
/* 353 */         targetElement.element.appendChild(taskElement.element);
/*     */       } 
/* 355 */       Stack threadStack = getStack();
/* 356 */       if (!threadStack.empty()) {
/* 357 */         TimedElement poppedStack = threadStack.pop();
/* 358 */         if (poppedStack != taskElement) {
/* 359 */           throw new RuntimeException(""Mismatch - popped element = "" + poppedStack.element + "" finished task element = "" + taskElement.element);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private TimedElement getTaskElement(Task task) {
/* 375 */     TimedElement element = (TimedElement)this.tasks.get(task);
/* 376 */     if (element != null) {
/* 377 */       return element;
/*     */     }
/*     */     
/* 380 */     for (Enumeration e = this.tasks.keys(); e.hasMoreElements(); ) {
/* 381 */       Task key = e.nextElement();
/* 382 */       if (key instanceof UnknownElement && (
/* 383 */         (UnknownElement)key).getTask() == task) {
/* 384 */         return (TimedElement)this.tasks.get(key);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 389 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 401 */     int priority = event.getPriority();
/* 402 */     if (priority > this.msgOutputLevel) {
/*     */       return;
/*     */     }
/* 405 */     Element messageElement = this.doc.createElement(""message"");
/*     */     
/* 407 */     String name = ""debug"";
/* 408 */     switch (event.getPriority()) {
/*     */       case 0:
/* 410 */         name = ""error"";
/*     */         break;
/*     */       case 1:
/* 413 */         name = ""warn"";
/*     */         break;
/*     */       case 2:
/* 416 */         name = ""info"";
/*     */         break;
/*     */       default:
/* 419 */         name = ""debug"";
/*     */         break;
/*     */     } 
/* 422 */     messageElement.setAttribute(""priority"", name);
/*     */     
/* 424 */     Text messageText = this.doc.createCDATASection(event.getMessage());
/* 425 */     messageElement.appendChild(messageText);
/*     */     
/* 427 */     TimedElement parentElement = null;
/*     */     
/* 429 */     Task task = event.getTask();
/*     */     
/* 431 */     Target target = event.getTarget();
/* 432 */     if (task != null) {
/* 433 */       parentElement = getTaskElement(task);
/*     */     }
/* 435 */     if (parentElement == null && target != null) {
/* 436 */       parentElement = (TimedElement)this.targets.get(target);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 451 */     if (parentElement != null) {
/* 452 */       parentElement.element.appendChild(messageElement);
/*     */     } else {
/* 454 */       this.buildElement.element.appendChild(messageElement);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 468 */   public void setMessageOutputLevel(int level) { this.msgOutputLevel = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 478 */   public void setOutputPrintStream(PrintStream output) { this.outStream = new PrintStream(output, true); }
/*     */   
/*     */   public void setEmacsMode(boolean emacsMode) {}
/*     */   
/*     */   public void setErrorPrintStream(PrintStream err) {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\XmlLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.BaseFilterReader,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.FilterReader;
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseFilterReader
/*     */   extends FilterReader
/*     */ {
/*     */   private static final int BUFFER_SIZE = 8192;
/*     */   private boolean initialized = false;
/*  76 */   private Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BaseFilterReader() {
/*  87 */     super(new StringReader(new String()));
/*     */     try {
/*  89 */       close();
/*  90 */     } catch (IOException ioe) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public BaseFilterReader(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read(char[] cbuf, int off, int len) throws IOException {
/* 123 */     for (int i = 0; i < len; i++) {
/* 124 */       int ch = read();
/* 125 */       if (ch == -1) {
/* 126 */         if (i == 0) {
/* 127 */           return -1;
/*     */         }
/* 129 */         return i;
/*     */       } 
/*     */       
/* 132 */       cbuf[off + i] = (char)ch;
/*     */     } 
/* 134 */     return len;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final long skip(long n) throws IOException, IllegalArgumentException {
/* 150 */     if (n < 0L) {
/* 151 */       throw new IllegalArgumentException(""skip value is negative"");
/*     */     }
/*     */     
/* 154 */     for (long i = 0L; i < n; i++) {
/* 155 */       if (read() == -1) {
/* 156 */         return i;
/*     */       }
/*     */     } 
/* 159 */     return n;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   protected final void setInitialized(boolean initialized) { this.initialized = initialized; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   protected final boolean getInitialized() { return this.initialized; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public final void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   protected final Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final String readLine() throws IOException {
/* 210 */     int ch = this.in.read();
/*     */     
/* 212 */     if (ch == -1) {
/* 213 */       return null;
/*     */     }
/*     */     
/* 216 */     StringBuffer line = new StringBuffer();
/*     */     
/* 218 */     while (ch != -1) {
/* 219 */       line.append((char)ch);
/* 220 */       if (ch == 10) {
/*     */         break;
/*     */       }
/* 223 */       ch = this.in.read();
/*     */     } 
/* 225 */     return line.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 237 */   protected final String readFully() throws IOException { return FileUtils.readFully(this.in, 8192); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\BaseFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.BaseParamFilterReader,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Parameterizable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseParamFilterReader
/*     */   extends BaseFilterReader
/*     */   implements Parameterizable
/*     */ {
/*     */   private Parameter[] parameters;
/*     */   
/*     */   public BaseParamFilterReader() {}
/*     */   
/*  87 */   public BaseParamFilterReader(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setParameters(Parameter[] parameters) {
/*  98 */     this.parameters = parameters;
/*  99 */     setInitialized(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   protected final Parameter[] getParameters() { return this.parameters; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\BaseParamFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ChainableReader,"package org.apache.tools.ant.filters;
import java.io.Reader;
public interface ChainableReader {
  Reader chain(Reader paramReader);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\ChainableReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ClassConstants,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ClassConstants
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  87 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String JAVA_CLASS_HELPER = ""org.apache.tools.ant.filters.util.JavaClassHelper"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static Class array$B;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public ClassConstants(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 126 */     int ch = -1;
/*     */     
/* 128 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 129 */       this.queuedData = null;
/*     */     }
/*     */     
/* 132 */     if (this.queuedData != null) {
/* 133 */       ch = this.queuedData.charAt(0);
/* 134 */       this.queuedData = this.queuedData.substring(1);
/* 135 */       if (this.queuedData.length() == 0) {
/* 136 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 139 */       String clazz = readFully();
/* 140 */       if (clazz == null) {
/* 141 */         ch = -1;
/*     */       } else {
/* 143 */         byte[] bytes = clazz.getBytes();
/*     */         try {
/* 145 */           Class javaClassHelper = Class.forName(""org.apache.tools.ant.filters.util.JavaClassHelper"");
/*     */           
/* 147 */           if (javaClassHelper != null) {
/* 148 */             Class[] params = { (array$B == null) ? (array$B = class$(""[B"")) : array$B };
/*     */ 
/*     */             
/* 151 */             Method getConstants = javaClassHelper.getMethod(""getConstants"", params);
/*     */             
/* 153 */             Object[] args = { bytes };
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 158 */             StringBuffer sb = (StringBuffer)getConstants.invoke(null, args);
/*     */             
/* 160 */             if (sb.length() > 0) {
/* 161 */               this.queuedData = sb.toString();
/* 162 */               return read();
/*     */             } 
/*     */           } 
/*     */         } catch (ClassNotFoundException cnfe) {
/* 166 */           throw new IOException(cnfe.getMessage());
/*     */         } catch (NoSuchMethodException nsme) {
/* 168 */           throw new IOException(nsme.getMessage());
/*     */         } catch (IllegalAccessException iae) {
/* 170 */           throw new IOException(iae.getMessage());
/*     */         } catch (IllegalArgumentException iarge) {
/* 172 */           throw new IOException(iarge.getMessage());
/*     */         } catch (InvocationTargetException ite) {
/* 174 */           throw new IOException(ite.getMessage());
/*     */         } 
/*     */       } 
/*     */     } 
/* 178 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   static Class class$(String x0) { try {
/*     */       return Class.forName(x0);
/*     */     } catch (ClassNotFoundException x1) {
/*     */       throw new NoClassDefFoundError(x1.getMessage());
/*     */     }  }
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 192 */     ClassConstants newFilter = new ClassConstants(rdr);
/* 193 */     return newFilter;
/*     */   }
/*     */   
/*     */   public ClassConstants() {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\ClassConstants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ConcatFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ConcatFilter
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private File prepend;
/*     */   private File append;
/*  92 */   private Reader prependReader = null;
/*     */ 
/*     */   
/*  95 */   private Reader appendReader = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ConcatFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public ConcatFilter(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/* 130 */     if (!getInitialized()) {
/* 131 */       initialize();
/* 132 */       setInitialized(true);
/*     */     } 
/*     */     
/* 135 */     int ch = -1;
/*     */ 
/*     */ 
/*     */     
/* 139 */     if (this.prependReader != null) {
/* 140 */       ch = this.prependReader.read();
/* 141 */       if (ch == -1) {
/*     */         
/* 143 */         this.prependReader.close();
/* 144 */         this.prependReader = null;
/*     */       } 
/*     */     } 
/* 147 */     if (ch == -1) {
/* 148 */       ch = super.read();
/*     */     }
/* 150 */     if (ch == -1)
/*     */     {
/*     */       
/* 153 */       if (this.appendReader != null) {
/* 154 */         ch = this.appendReader.read();
/* 155 */         if (ch == -1) {
/*     */           
/* 157 */           this.appendReader.close();
/* 158 */           this.appendReader = null;
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/* 163 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setPrepend(File prepend) { this.prepend = prepend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public File getPrepend() { return this.prepend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void setAppend(File append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   public File getAppend() { return this.append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Reader chain(Reader rdr) {
/* 209 */     ConcatFilter newFilter = new ConcatFilter(rdr);
/* 210 */     newFilter.setPrepend(getPrepend());
/* 211 */     newFilter.setAppend(getAppend());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 216 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize() throws IOException {
/* 226 */     Parameter[] params = getParameters();
/* 227 */     if (params != null) {
/* 228 */       for (int i = 0; i < params.length; i++) {
/* 229 */         if (""prepend"".equals(params[i].getName())) {
/* 230 */           setPrepend(new File(params[i].getValue()));
/*     */         
/*     */         }
/* 233 */         else if (""append"".equals(params[i].getName())) {
/* 234 */           setAppend(new File(params[i].getValue()));
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/* 239 */     if (this.prepend != null) {
/* 240 */       if (!this.prepend.isAbsolute()) {
/* 241 */         this.prepend = new File(getProject().getBaseDir(), this.prepend.getPath());
/*     */       }
/* 243 */       this.prependReader = new BufferedReader(new FileReader(this.prepend));
/*     */     } 
/* 245 */     if (this.append != null) {
/* 246 */       if (!this.append.isAbsolute()) {
/* 247 */         this.append = new File(getProject().getBaseDir(), this.append.getPath());
/*     */       }
/* 249 */       this.appendReader = new BufferedReader(new FileReader(this.append));
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\ConcatFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.EscapeUnicode,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EscapeUnicode
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private StringBuffer unicodeBuf;
/*     */   
/*  89 */   public EscapeUnicode() { this.unicodeBuf = new StringBuffer(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public EscapeUnicode(Reader in) {
/*  99 */     super(in);
/* 100 */     this.unicodeBuf = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 114 */     if (!getInitialized()) {
/* 115 */       initialize();
/* 116 */       setInitialized(true);
/*     */     } 
/*     */     
/* 119 */     int ch = -1;
/* 120 */     if (this.unicodeBuf.length() == 0) {
/* 121 */       ch = this.in.read();
/* 122 */       if (ch != -1) {
/* 123 */         char achar = (char)ch;
/* 124 */         if (achar >= '') {
/* 125 */           this.unicodeBuf = new StringBuffer(""u0000"");
/* 126 */           String s = Integer.toHexString(ch);
/*     */           
/* 128 */           for (int i = 0; i < s.length(); i++) {
/* 129 */             this.unicodeBuf.setCharAt(this.unicodeBuf.length() - s.length() + i, s.charAt(i));
/*     */           }
/*     */ 
/*     */           
/* 133 */           ch = 92;
/*     */         } 
/*     */       } 
/*     */     } else {
/* 137 */       ch = this.unicodeBuf.charAt(0);
/* 138 */       this.unicodeBuf.deleteCharAt(0);
/*     */     } 
/* 140 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 154 */     EscapeUnicode newFilter = new EscapeUnicode(rdr);
/* 155 */     newFilter.setInitialized(true);
/* 156 */     return newFilter;
/*     */   }
/*     */   
/*     */   private final void initialize() {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\EscapeUnicode.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ExpandProperties,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ExpandProperties
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  75 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExpandProperties() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public ExpandProperties(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 110 */     int ch = -1;
/*     */     
/* 112 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 113 */       this.queuedData = null;
/*     */     }
/*     */     
/* 116 */     if (this.queuedData != null) {
/* 117 */       ch = this.queuedData.charAt(0);
/* 118 */       this.queuedData = this.queuedData.substring(1);
/* 119 */       if (this.queuedData.length() == 0) {
/* 120 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 123 */       this.queuedData = readFully();
/* 124 */       if (this.queuedData == null) {
/* 125 */         ch = -1;
/*     */       } else {
/* 127 */         Project project = getProject();
/* 128 */         this.queuedData = project.replaceProperties(this.queuedData);
/* 129 */         return read();
/*     */       } 
/*     */     } 
/* 132 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 146 */     ExpandProperties newFilter = new ExpandProperties(rdr);
/* 147 */     newFilter.setProject(getProject());
/* 148 */     return newFilter;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\ExpandProperties.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.HeadFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.util.LineTokenizer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class HeadFilter
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String LINES_KEY = ""lines"";
/*     */   private static final String SKIP_KEY = ""skip"";
/*  83 */   private long linesRead = 0L;
/*     */ 
/*     */   
/*     */   private static final int DEFAULT_NUM_LINES = 10;
/*     */ 
/*     */   
/*  89 */   private long lines = 10L;
/*     */ 
/*     */   
/*  92 */   private long skip = 0L;
/*     */ 
/*     */   
/*  95 */   private LineTokenizer lineTokenizer = null;
/*     */ 
/*     */   
/*  98 */   private String line = null;
/*     */   
/* 100 */   private int linePos = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public HeadFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public HeadFilter(Reader in) {
/* 118 */     super(in);
/* 119 */     this.lineTokenizer = new LineTokenizer();
/* 120 */     this.lineTokenizer.setIncludeDelims(true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 136 */     if (!getInitialized()) {
/* 137 */       initialize();
/* 138 */       setInitialized(true);
/*     */     } 
/*     */     
/* 141 */     while (this.line == null || this.line.length() == 0) {
/* 142 */       this.line = this.lineTokenizer.getToken(this.in);
/* 143 */       if (this.line == null) {
/* 144 */         return -1;
/*     */       }
/* 146 */       this.line = headFilter(this.line);
/* 147 */       this.linePos = 0;
/*     */     } 
/*     */     
/* 150 */     int ch = this.line.charAt(this.linePos);
/* 151 */     this.linePos++;
/* 152 */     if (this.linePos == this.line.length()) {
/* 153 */       this.line = null;
/*     */     }
/* 155 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public final void setLines(long lines) { this.lines = lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   private final long getLines() { return this.lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public final void setSkip(long skip) { this.skip = skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   private final long getSkip() { return this.skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 205 */     HeadFilter newFilter = new HeadFilter(rdr);
/* 206 */     newFilter.setLines(getLines());
/* 207 */     newFilter.setSkip(getSkip());
/* 208 */     newFilter.setInitialized(true);
/* 209 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 218 */     Parameter[] params = getParameters();
/* 219 */     if (params != null) {
/* 220 */       for (int i = 0; i < params.length; i++) {
/* 221 */         if (""lines"".equals(params[i].getName())) {
/* 222 */           this.lines = (new Long(params[i].getValue())).longValue();
/*     */         
/*     */         }
/* 225 */         else if (""skip"".equals(params[i].getName())) {
/* 226 */           this.skip = (new Long(params[i].getValue())).longValue();
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String headFilter(String line) {
/* 237 */     this.linesRead++;
/* 238 */     if (this.skip > 0L && 
/* 239 */       this.linesRead - 1L < this.skip) {
/* 240 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 244 */     if (this.lines > 0L && 
/* 245 */       this.linesRead > this.lines + this.skip) {
/* 246 */       return null;
/*     */     }
/*     */     
/* 249 */     return line;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\HeadFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.LineContains,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LineContains
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String CONTAINS_KEY = ""contains"";
/*  91 */   private Vector contains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LineContains() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public LineContains(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 130 */     if (!getInitialized()) {
/* 131 */       initialize();
/* 132 */       setInitialized(true);
/*     */     } 
/*     */     
/* 135 */     int ch = -1;
/*     */     
/* 137 */     if (this.line != null) {
/* 138 */       ch = this.line.charAt(0);
/* 139 */       if (this.line.length() == 1) {
/* 140 */         this.line = null;
/*     */       } else {
/* 142 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 145 */       this.line = readLine();
/* 146 */       int containsSize = this.contains.size();
/*     */       
/* 148 */       while (this.line != null) {
/* 149 */         for (int i = 0; i < containsSize; i++) {
/* 150 */           String containsStr = this.contains.elementAt(i);
/* 151 */           if (this.line.indexOf(containsStr) == -1) {
/* 152 */             this.line = null;
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/* 157 */         if (this.line == null) {
/*     */           
/* 159 */           this.line = readLine();
/*     */           
/*     */           continue;
/*     */         } 
/*     */         break;
/*     */       } 
/* 165 */       if (this.line != null) {
/* 166 */         return read();
/*     */       }
/*     */     } 
/*     */     
/* 170 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public final void addConfiguredContains(Contains contains) { this.contains.addElement(contains.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   private void setContains(Vector contains) { this.contains = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   private final Vector getContains() { return this.contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 218 */     LineContains newFilter = new LineContains(rdr);
/* 219 */     newFilter.setContains(getContains());
/* 220 */     newFilter.setInitialized(true);
/* 221 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 228 */     Parameter[] params = getParameters();
/* 229 */     if (params != null) {
/* 230 */       for (int i = 0; i < params.length; i++) {
/* 231 */         if (""contains"".equals(params[i].getType())) {
/* 232 */           this.contains.addElement(params[i].getValue());
/*     */         }
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Contains
/*     */   {
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 253 */     public final void setValue(String contains) { this.value = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 262 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\LineContains.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.LineContainsRegExp,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.RegularExpression;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LineContainsRegExp
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String REGEXP_KEY = ""regexp"";
/*  89 */   private Vector regexps = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LineContainsRegExp() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public LineContainsRegExp(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 129 */     if (!getInitialized()) {
/* 130 */       initialize();
/* 131 */       setInitialized(true);
/*     */     } 
/*     */     
/* 134 */     int ch = -1;
/*     */     
/* 136 */     if (this.line != null) {
/* 137 */       ch = this.line.charAt(0);
/* 138 */       if (this.line.length() == 1) {
/* 139 */         this.line = null;
/*     */       } else {
/* 141 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 144 */       this.line = readLine();
/* 145 */       int regexpsSize = this.regexps.size();
/*     */       
/* 147 */       while (this.line != null) {
/* 148 */         for (int i = 0; i < regexpsSize; i++) {
/* 149 */           RegularExpression regexp = this.regexps.elementAt(i);
/*     */           
/* 151 */           Regexp re = regexp.getRegexp(getProject());
/* 152 */           boolean matches = re.matches(this.line);
/* 153 */           if (!matches) {
/* 154 */             this.line = null;
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/* 159 */         if (this.line == null) {
/*     */           
/* 161 */           this.line = readLine();
/*     */           
/*     */           continue;
/*     */         } 
/*     */         break;
/*     */       } 
/* 167 */       if (this.line != null) {
/* 168 */         return read();
/*     */       }
/*     */     } 
/*     */     
/* 172 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public final void addConfiguredRegexp(RegularExpression regExp) { this.regexps.addElement(regExp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   private void setRegexps(Vector regexps) { this.regexps = regexps; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   private final Vector getRegexps() { return this.regexps; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 223 */     LineContainsRegExp newFilter = new LineContainsRegExp(rdr);
/* 224 */     newFilter.setRegexps(getRegexps());
/* 225 */     newFilter.setInitialized(true);
/* 226 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 233 */     Parameter[] params = getParameters();
/* 234 */     if (params != null)
/* 235 */       for (int i = 0; i < params.length; i++) {
/* 236 */         if (""regexp"".equals(params[i].getType())) {
/* 237 */           String pattern = params[i].getValue();
/* 238 */           RegularExpression regexp = new RegularExpression();
/* 239 */           regexp.setPattern(pattern);
/* 240 */           this.regexps.addElement(regexp);
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\LineContainsRegExp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.PrefixLines,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class PrefixLines
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String PREFIX_KEY = ""prefix"";
/*  81 */   private String prefix = null;
/*     */ 
/*     */   
/*  84 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PrefixLines() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public PrefixLines(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 118 */     if (!getInitialized()) {
/* 119 */       initialize();
/* 120 */       setInitialized(true);
/*     */     } 
/*     */     
/* 123 */     int ch = -1;
/*     */     
/* 125 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 126 */       this.queuedData = null;
/*     */     }
/*     */     
/* 129 */     if (this.queuedData != null) {
/* 130 */       ch = this.queuedData.charAt(0);
/* 131 */       this.queuedData = this.queuedData.substring(1);
/* 132 */       if (this.queuedData.length() == 0) {
/* 133 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 136 */       this.queuedData = readLine();
/* 137 */       if (this.queuedData == null) {
/* 138 */         ch = -1;
/*     */       } else {
/* 140 */         if (this.prefix != null) {
/* 141 */           this.queuedData = this.prefix + this.queuedData;
/*     */         }
/* 143 */         return read();
/*     */       } 
/*     */     } 
/* 146 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public final void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   private final String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 180 */     PrefixLines newFilter = new PrefixLines(rdr);
/* 181 */     newFilter.setPrefix(getPrefix());
/* 182 */     newFilter.setInitialized(true);
/* 183 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 190 */     Parameter[] params = getParameters();
/* 191 */     if (params != null)
/* 192 */       for (int i = 0; i < params.length; i++) {
/* 193 */         if (""prefix"".equals(params[i].getName())) {
/* 194 */           this.prefix = params[i].getValue();
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\PrefixLines.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ReplaceTokens,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ReplaceTokens
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final char DEFAULT_BEGIN_TOKEN = '@';
/*     */   private static final char DEFAULT_END_TOKEN = '@';
/*  91 */   private String queuedData = null;
/*     */ 
/*     */   
/*  94 */   private String replaceData = null;
/*     */ 
/*     */   
/*  97 */   private int replaceIndex = -1;
/*     */ 
/*     */   
/* 100 */   private int queueIndex = -1;
/*     */ 
/*     */   
/* 103 */   private Hashtable hash = new Hashtable();
/*     */ 
/*     */   
/* 106 */   private char beginToken = '@';
/*     */ 
/*     */   
/* 109 */   private char endToken = '@';
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ReplaceTokens() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public ReplaceTokens(Reader in) { super(in); }
/*     */ 
/*     */   
/*     */   private int getNextChar() throws IOException {
/* 131 */     if (this.queueIndex != -1) {
/* 132 */       int ch = this.queuedData.charAt(this.queueIndex++);
/* 133 */       if (this.queueIndex >= this.queuedData.length()) {
/* 134 */         this.queueIndex = -1;
/*     */       }
/* 136 */       return ch;
/*     */     } 
/*     */     
/* 139 */     return this.in.read();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 153 */     if (!getInitialized()) {
/* 154 */       initialize();
/* 155 */       setInitialized(true);
/*     */     } 
/*     */     
/* 158 */     if (this.replaceIndex != -1) {
/* 159 */       int ch = this.replaceData.charAt(this.replaceIndex++);
/* 160 */       if (this.replaceIndex >= this.replaceData.length()) {
/* 161 */         this.replaceIndex = -1;
/*     */       }
/* 163 */       return ch;
/*     */     } 
/*     */     
/* 166 */     int ch = getNextChar();
/*     */     
/* 168 */     if (ch == this.beginToken) {
/* 169 */       StringBuffer key = new StringBuffer("""");
/*     */       while (true) {
/* 171 */         ch = getNextChar();
/* 172 */         if (ch != -1)
/* 173 */         { key.append((char)ch);
/*     */ 
/*     */ 
/*     */           
/* 177 */           if (ch == this.endToken)
/*     */             break;  continue; }  break;
/* 179 */       }  if (ch == -1) {
/* 180 */         if (this.queuedData == null || this.queueIndex == -1) {
/* 181 */           this.queuedData = key.toString();
/*     */         } else {
/* 183 */           this.queuedData = key.toString() + this.queuedData.substring(this.queueIndex);
/*     */         } 
/*     */         
/* 186 */         this.queueIndex = 0;
/* 187 */         return this.beginToken;
/*     */       } 
/* 189 */       key.setLength(key.length() - 1);
/*     */       
/* 191 */       String replaceWith = (String)this.hash.get(key.toString());
/* 192 */       if (replaceWith != null) {
/* 193 */         if (replaceWith.length() > 0) {
/* 194 */           this.replaceData = replaceWith;
/* 195 */           this.replaceIndex = 0;
/*     */         } 
/* 197 */         return read();
/*     */       } 
/* 199 */       String newData = key.toString() + this.endToken;
/* 200 */       if (this.queuedData == null || this.queueIndex == -1) {
/* 201 */         this.queuedData = newData;
/*     */       } else {
/* 203 */         this.queuedData = newData + this.queuedData.substring(this.queueIndex);
/*     */       } 
/* 205 */       this.queueIndex = 0;
/* 206 */       return this.beginToken;
/*     */     } 
/*     */ 
/*     */     
/* 210 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public final void setBeginToken(char beginToken) { this.beginToken = beginToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 228 */   private final char getBeginToken() { return this.beginToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 237 */   public final void setEndToken(char endToken) { this.endToken = endToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   private final char getEndToken() { return this.endToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 256 */   public final void addConfiguredToken(Token token) { this.hash.put(token.getKey(), token.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   private void setTokens(Hashtable hash) { this.hash = hash; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   private final Hashtable getTokens() { return this.hash; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 290 */     ReplaceTokens newFilter = new ReplaceTokens(rdr);
/* 291 */     newFilter.setBeginToken(getBeginToken());
/* 292 */     newFilter.setEndToken(getEndToken());
/* 293 */     newFilter.setTokens(getTokens());
/* 294 */     newFilter.setInitialized(true);
/* 295 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 302 */     Parameter[] params = getParameters();
/* 303 */     if (params != null) {
/* 304 */       for (int i = 0; i < params.length; i++) {
/* 305 */         if (params[i] != null) {
/* 306 */           String type = params[i].getType();
/* 307 */           if (""tokenchar"".equals(type)) {
/* 308 */             String name = params[i].getName();
/* 309 */             String value = params[i].getValue();
/* 310 */             if (""begintoken"".equals(name)) {
/* 311 */               if (value.length() == 0) {
/* 312 */                 throw new BuildException(""Begin token cannot be empty"");
/*     */               }
/*     */               
/* 315 */               this.beginToken = params[i].getValue().charAt(0);
/* 316 */             } else if (""endtoken"".equals(name)) {
/* 317 */               if (value.length() == 0) {
/* 318 */                 throw new BuildException(""End token cannot be empty"");
/*     */               }
/*     */               
/* 321 */               this.endToken = params[i].getValue().charAt(0);
/*     */             } 
/* 323 */           } else if (""token"".equals(type)) {
/* 324 */             String name = params[i].getName();
/* 325 */             String value = params[i].getValue();
/* 326 */             this.hash.put(name, value);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Token
/*     */   {
/*     */     private String key;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 350 */     public final void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 359 */     public final void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 368 */     public final String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 377 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\ReplaceTokens.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StringInputStream,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.StringReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StringInputStream
/*     */   extends InputStream
/*     */ {
/*     */   private StringReader in;
/*     */   private String encoding;
/*     */   private byte[] slack;
/*     */   private int begin;
/*     */   
/*  83 */   public StringInputStream(String source) { this.in = new StringReader(source); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StringInputStream(String source, String encoding) {
/*  93 */     this.in = new StringReader(source);
/*  94 */     this.encoding = encoding;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized int read() throws IOException {
/*     */     byte b;
/* 105 */     if (this.in == null) {
/* 106 */       throw new IOException(""Stream Closed"");
/*     */     }
/*     */ 
/*     */     
/* 110 */     if (this.slack != null && this.begin < this.slack.length) {
/* 111 */       b = this.slack[this.begin];
/* 112 */       if (++this.begin == this.slack.length) {
/* 113 */         this.slack = null;
/*     */       }
/*     */     } else {
/* 116 */       byte[] buf = new byte[1];
/* 117 */       if (read(buf, 0, 1) <= 0) {
/* 118 */         return -1;
/*     */       }
/* 120 */       b = buf[0];
/*     */     } 
/* 122 */     if (b < 0) {
/* 123 */       return 256 + b;
/*     */     }
/* 125 */     return b;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized int read(byte[] b, int off, int len) throws IOException {
/* 142 */     if (this.in == null) {
/* 143 */       throw new IOException(""Stream Closed"");
/*     */     }
/*     */     
/* 146 */     while (this.slack == null) {
/* 147 */       char[] buf = new char[len];
/* 148 */       int n = this.in.read(buf);
/* 149 */       if (n == -1) {
/* 150 */         return -1;
/*     */       }
/* 152 */       if (n > 0) {
/* 153 */         String s = new String(buf, 0, n);
/* 154 */         if (this.encoding == null) {
/* 155 */           this.slack = s.getBytes();
/*     */         } else {
/* 157 */           this.slack = s.getBytes(this.encoding);
/*     */         } 
/* 159 */         this.begin = 0;
/*     */       } 
/*     */     } 
/*     */     
/* 163 */     if (len > this.slack.length - this.begin) {
/* 164 */       len = this.slack.length - this.begin;
/*     */     }
/*     */     
/* 167 */     System.arraycopy(this.slack, this.begin, b, off, len);
/*     */     
/* 169 */     if ((this.begin += len) >= this.slack.length) {
/* 170 */       this.slack = null;
/*     */     }
/* 172 */     return len;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void mark(int limit) {
/*     */     try {
/* 183 */       this.in.mark(limit);
/*     */     } catch (IOException ioe) {
/* 185 */       throw new RuntimeException(ioe.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized int available() throws IOException {
/* 195 */     if (this.in == null) {
/* 196 */       throw new IOException(""Stream Closed"");
/*     */     }
/* 198 */     if (this.slack != null) {
/* 199 */       return this.slack.length - this.begin;
/*     */     }
/* 201 */     if (this.in.ready()) {
/* 202 */       return 1;
/*     */     }
/* 204 */     return 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public boolean markSupported() { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void reset() throws IOException {
/* 221 */     if (this.in == null) {
/* 222 */       throw new IOException(""Stream Closed"");
/*     */     }
/* 224 */     this.slack = null;
/* 225 */     this.in.reset();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void close() throws IOException {
/* 234 */     this.in.close();
/* 235 */     this.slack = null;
/* 236 */     this.in = null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\StringInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripJavaComments,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripJavaComments
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  77 */   private int readAheadCh = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean inString = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean quoted = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripJavaComments() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public StripJavaComments(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 120 */     int ch = -1;
/* 121 */     if (this.readAheadCh != -1) {
/* 122 */       ch = this.readAheadCh;
/* 123 */       this.readAheadCh = -1;
/*     */     } else {
/* 125 */       ch = this.in.read();
/* 126 */       if (ch == 34 && !this.quoted) {
/* 127 */         this.inString = !this.inString;
/* 128 */         this.quoted = false;
/* 129 */       } else if (ch == 92) {
/* 130 */         this.quoted = !this.quoted;
/*     */       } else {
/* 132 */         this.quoted = false;
/* 133 */         if (!this.inString && 
/* 134 */           ch == 47) {
/* 135 */           ch = this.in.read();
/* 136 */           if (ch == 47) {
/* 137 */             while (ch != 10 && ch != -1 && ch != 13) {
/* 138 */               ch = this.in.read();
/*     */             }
/* 140 */           } else if (ch == 42) {
/* 141 */             while (ch != -1) {
/* 142 */               ch = this.in.read();
/* 143 */               if (ch == 42) {
/* 144 */                 ch = this.in.read();
/* 145 */                 while (ch == 42 && ch != -1) {
/* 146 */                   ch = this.in.read();
/*     */                 }
/*     */                 
/* 149 */                 if (ch == 47) {
/* 150 */                   ch = read();
/*     */                   break;
/*     */                 } 
/*     */               } 
/*     */             } 
/*     */           } else {
/* 156 */             this.readAheadCh = ch;
/* 157 */             ch = 47;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 164 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 179 */     StripJavaComments newFilter = new StripJavaComments(rdr);
/* 180 */     return newFilter;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\StripJavaComments.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripLineBreaks,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripLineBreaks
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String DEFAULT_LINE_BREAKS = ""\r\n"";
/*     */   private static final String LINE_BREAKS_KEY = ""linebreaks"";
/*  88 */   private String lineBreaks = ""\r\n"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripLineBreaks() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public StripLineBreaks(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 120 */     if (!getInitialized()) {
/* 121 */       initialize();
/* 122 */       setInitialized(true);
/*     */     } 
/*     */     
/* 125 */     int ch = this.in.read();
/* 126 */     while (ch != -1 && 
/* 127 */       this.lineBreaks.indexOf(ch) != -1)
/*     */     {
/*     */       
/* 130 */       ch = this.in.read();
/*     */     }
/*     */     
/* 133 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public final void setLineBreaks(String lineBreaks) { this.lineBreaks = lineBreaks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   private final String getLineBreaks() { return this.lineBreaks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 167 */     StripLineBreaks newFilter = new StripLineBreaks(rdr);
/* 168 */     newFilter.setLineBreaks(getLineBreaks());
/* 169 */     newFilter.setInitialized(true);
/* 170 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 177 */     String userDefinedLineBreaks = null;
/* 178 */     Parameter[] params = getParameters();
/* 179 */     if (params != null) {
/* 180 */       for (int i = 0; i < params.length; i++) {
/* 181 */         if (""linebreaks"".equals(params[i].getName())) {
/* 182 */           userDefinedLineBreaks = params[i].getValue();
/*     */           break;
/*     */         } 
/*     */       } 
/*     */     }
/* 187 */     if (userDefinedLineBreaks != null)
/* 188 */       this.lineBreaks = userDefinedLineBreaks; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\StripLineBreaks.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripLineComments,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripLineComments
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String COMMENTS_KEY = ""comment"";
/*  94 */   private Vector comments = new Vector();
/*     */ 
/*     */   
/*  97 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripLineComments() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public StripLineComments(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 130 */     if (!getInitialized()) {
/* 131 */       initialize();
/* 132 */       setInitialized(true);
/*     */     } 
/*     */     
/* 135 */     int ch = -1;
/*     */     
/* 137 */     if (this.line != null) {
/* 138 */       ch = this.line.charAt(0);
/* 139 */       if (this.line.length() == 1) {
/* 140 */         this.line = null;
/*     */       } else {
/* 142 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 145 */       this.line = readLine();
/* 146 */       int commentsSize = this.comments.size();
/*     */       
/* 148 */       while (this.line != null) {
/* 149 */         for (int i = 0; i < commentsSize; i++) {
/* 150 */           String comment = this.comments.elementAt(i);
/* 151 */           if (this.line.startsWith(comment)) {
/* 152 */             this.line = null;
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/* 157 */         if (this.line == null) {
/*     */           
/* 159 */           this.line = readLine();
/*     */           
/*     */           continue;
/*     */         } 
/*     */         break;
/*     */       } 
/* 165 */       if (this.line != null) {
/* 166 */         return read();
/*     */       }
/*     */     } 
/*     */     
/* 170 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public final void addConfiguredComment(Comment comment) { this.comments.addElement(comment.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   private void setComments(Vector comments) { this.comments = comments; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   private final Vector getComments() { return this.comments; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 213 */     StripLineComments newFilter = new StripLineComments(rdr);
/* 214 */     newFilter.setComments(getComments());
/* 215 */     newFilter.setInitialized(true);
/* 216 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 223 */     Parameter[] params = getParameters();
/* 224 */     if (params != null) {
/* 225 */       for (int i = 0; i < params.length; i++) {
/* 226 */         if (""comment"".equals(params[i].getType())) {
/* 227 */           this.comments.addElement(params[i].getValue());
/*     */         }
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Comment
/*     */   {
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 248 */     public final void setValue(String comment) { this.value = comment; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 257 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\StripLineComments.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.TabsToSpaces,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class TabsToSpaces
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final int DEFAULT_TAB_LENGTH = 8;
/*     */   private static final String TAB_LENGTH_KEY = ""tablength"";
/*  85 */   private int tabLength = 8;
/*     */ 
/*     */   
/*  88 */   private int spacesRemaining = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TabsToSpaces() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public TabsToSpaces(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 120 */     if (!getInitialized()) {
/* 121 */       initialize();
/* 122 */       setInitialized(true);
/*     */     } 
/*     */     
/* 125 */     int ch = -1;
/*     */     
/* 127 */     if (this.spacesRemaining > 0) {
/* 128 */       this.spacesRemaining--;
/* 129 */       ch = 32;
/*     */     } else {
/* 131 */       ch = this.in.read();
/* 132 */       if (ch == 9) {
/* 133 */         this.spacesRemaining = this.tabLength - 1;
/* 134 */         ch = 32;
/*     */       } 
/*     */     } 
/* 137 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public final void setTablength(int tabLength) { this.tabLength = tabLength; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   private final int getTablength() { return this.tabLength; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 169 */     TabsToSpaces newFilter = new TabsToSpaces(rdr);
/* 170 */     newFilter.setTablength(getTablength());
/* 171 */     newFilter.setInitialized(true);
/* 172 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 179 */     Parameter[] params = getParameters();
/* 180 */     if (params != null)
/* 181 */       for (int i = 0; i < params.length; i++) {
/* 182 */         if (params[i] != null && 
/* 183 */           ""tablength"".equals(params[i].getName())) {
/* 184 */           this.tabLength = (new Integer(params[i].getValue())).intValue();
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\TabsToSpaces.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.TailFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.LinkedList;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.util.LineTokenizer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class TailFilter
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String LINES_KEY = ""lines"";
/*     */   private static final String SKIP_KEY = ""skip"";
/*     */   private static final int DEFAULT_NUM_LINES = 10;
/*  89 */   private long lines = 10L;
/*     */ 
/*     */   
/*  92 */   private long skip = 0L;
/*     */ 
/*     */   
/*     */   private boolean completedReadAhead = false;
/*     */ 
/*     */   
/*  98 */   private LineTokenizer lineTokenizer = null;
/*     */ 
/*     */   
/* 101 */   private String line = null;
/*     */   
/* 103 */   private int linePos = 0;
/*     */   
/* 105 */   private LinkedList lineList = new LinkedList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TailFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TailFilter(Reader in) {
/* 123 */     super(in);
/* 124 */     this.lineTokenizer = new LineTokenizer();
/* 125 */     this.lineTokenizer.setIncludeDelims(true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 142 */     if (!getInitialized()) {
/* 143 */       initialize();
/* 144 */       setInitialized(true);
/*     */     } 
/*     */     
/* 147 */     while (this.line == null || this.line.length() == 0) {
/* 148 */       this.line = this.lineTokenizer.getToken(this.in);
/* 149 */       this.line = tailFilter(this.line);
/* 150 */       if (this.line == null) {
/* 151 */         return -1;
/*     */       }
/* 153 */       this.linePos = 0;
/*     */     } 
/*     */     
/* 156 */     int ch = this.line.charAt(this.linePos);
/* 157 */     this.linePos++;
/* 158 */     if (this.linePos == this.line.length()) {
/* 159 */       this.line = null;
/*     */     }
/* 161 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public final void setLines(long lines) { this.lines = lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   private final long getLines() { return this.lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public final void setSkip(long skip) { this.skip = skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   private final long getSkip() { return this.skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 211 */     TailFilter newFilter = new TailFilter(rdr);
/* 212 */     newFilter.setLines(getLines());
/* 213 */     newFilter.setSkip(getSkip());
/* 214 */     newFilter.setInitialized(true);
/* 215 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 224 */     Parameter[] params = getParameters();
/* 225 */     if (params != null) {
/* 226 */       for (int i = 0; i < params.length; i++) {
/* 227 */         if (""lines"".equals(params[i].getName())) {
/* 228 */           setLines((new Long(params[i].getValue())).longValue());
/*     */         
/*     */         }
/* 231 */         else if (""skip"".equals(params[i].getName())) {
/* 232 */           this.skip = (new Long(params[i].getValue())).longValue();
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String tailFilter(String line) {
/* 247 */     if (!this.completedReadAhead) {
/* 248 */       if (line != null) {
/* 249 */         this.lineList.add(line);
/* 250 */         if (this.lines == -1L) {
/* 251 */           if (this.lineList.size() > this.skip) {
/* 252 */             return this.lineList.removeFirst();
/*     */           }
/*     */         } else {
/* 255 */           long linesToKeep = this.lines + ((this.skip > 0L) ? this.skip : 0L);
/* 256 */           if (linesToKeep < this.lineList.size()) {
/* 257 */             this.lineList.removeFirst();
/*     */           }
/*     */         } 
/* 260 */         return """";
/*     */       } 
/* 262 */       this.completedReadAhead = true;
/* 263 */       if (this.skip > 0L) {
/* 264 */         for (int i = 0; i < this.skip; i++) {
/* 265 */           this.lineList.removeLast();
/*     */         }
/*     */       }
/* 268 */       if (this.lines > -1L) {
/* 269 */         while (this.lineList.size() > this.lines) {
/* 270 */           this.lineList.removeFirst();
/*     */         }
/*     */       }
/*     */     } 
/* 274 */     if (this.lineList.size() > 0) {
/* 275 */       return this.lineList.removeFirst();
/*     */     }
/* 277 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\TailFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.TokenFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.types.RegularExpression;
/*     */ import org.apache.tools.ant.types.Substitution;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.LineTokenizer;
/*     */ import org.apache.tools.ant.util.Tokenizer;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TokenFilter
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  98 */   private Vector filters = new Vector();
/*     */   
/* 100 */   private Tokenizer tokenizer = null;
/*     */   
/* 102 */   private String delimOutput = null;
/*     */   
/* 104 */   private String line = null;
/*     */   
/* 106 */   private int linePos = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TokenFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public TokenFilter(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/* 141 */     if (this.tokenizer == null) {
/* 142 */       this.tokenizer = (Tokenizer)new LineTokenizer();
/*     */     }
/* 144 */     while (this.line == null || this.line.length() == 0) {
/* 145 */       this.line = this.tokenizer.getToken(this.in);
/* 146 */       if (this.line == null) {
/* 147 */         return -1;
/*     */       }
/* 149 */       for (Enumeration e = this.filters.elements(); e.hasMoreElements(); ) {
/* 150 */         Filter filter = e.nextElement();
/* 151 */         this.line = filter.filter(this.line);
/* 152 */         if (this.line == null) {
/*     */           break;
/*     */         }
/*     */       } 
/* 156 */       this.linePos = 0;
/* 157 */       if (this.line != null && 
/* 158 */         this.tokenizer.getPostToken().length() != 0) {
/* 159 */         if (this.delimOutput != null) {
/* 160 */           this.line += this.delimOutput; continue;
/*     */         } 
/* 162 */         this.line += this.tokenizer.getPostToken();
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 167 */     int ch = this.line.charAt(this.linePos);
/* 168 */     this.linePos++;
/* 169 */     if (this.linePos == this.line.length()) {
/* 170 */       this.line = null;
/*     */     }
/* 172 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader reader) {
/* 185 */     TokenFilter newFilter = new TokenFilter(reader);
/* 186 */     newFilter.filters = this.filters;
/* 187 */     newFilter.tokenizer = this.tokenizer;
/* 188 */     newFilter.delimOutput = this.delimOutput;
/* 189 */     newFilter.setProject(getProject());
/* 190 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void setDelimOutput(String delimOutput) { this.delimOutput = resolveBackSlash(delimOutput); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void addLineTokenizer(LineTokenizer tokenizer) { add((Tokenizer)tokenizer); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void addStringTokenizer(StringTokenizer tokenizer) { add(tokenizer); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void addFileTokenizer(FileTokenizer tokenizer) { add(tokenizer); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void add(Tokenizer tokenizer) {
/* 239 */     if (this.tokenizer != null) {
/* 240 */       throw new BuildException(""Only one tokenizer allowed"");
/*     */     }
/* 242 */     this.tokenizer = tokenizer;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public void addReplaceString(ReplaceString filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 262 */   public void addContainsString(ContainsString filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void addReplaceRegex(ReplaceRegex filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void addContainsRegex(ContainsRegex filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void addTrim(Trim filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public void addIgnoreBlank(IgnoreBlank filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   public void addDeleteCharacters(DeleteCharacters filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 310 */   public void add(Filter filter) { this.filters.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static interface Filter
/*     */   {
/*     */     String filter(String param1String);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileTokenizer
/*     */     extends ProjectComponent
/*     */     implements Tokenizer
/*     */   {
/* 332 */     public String getToken(Reader in) throws IOException { return FileUtils.readFully(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 340 */     public String getPostToken() { return """"; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class StringTokenizer
/*     */     extends ProjectComponent
/*     */     implements Tokenizer
/*     */   {
/* 354 */     private String intraString = """";
/* 355 */     private int pushed = -2;
/* 356 */     private char[] delims = null;
/*     */ 
/*     */     
/*     */     private boolean delimsAreTokens = false;
/*     */     
/*     */     private boolean suppressDelims = false;
/*     */     
/*     */     private boolean includeDelims = false;
/*     */ 
/*     */     
/* 366 */     public void setDelims(String delims) { this.delims = TokenFilter.resolveBackSlash(delims).toCharArray(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 376 */     public void setDelimsAreTokens(boolean delimsAreTokens) { this.delimsAreTokens = delimsAreTokens; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 384 */     public void setSuppressDelims(boolean suppressDelims) { this.suppressDelims = suppressDelims; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 394 */     public void setIncludeDelims(boolean includeDelims) { this.includeDelims = includeDelims; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getToken(Reader in) throws IOException {
/* 405 */       int ch = -1;
/* 406 */       if (this.pushed != -2) {
/* 407 */         ch = this.pushed;
/* 408 */         this.pushed = -2;
/*     */       } else {
/* 410 */         ch = in.read();
/*     */       } 
/* 412 */       if (ch == -1) {
/* 413 */         return null;
/*     */       }
/* 415 */       boolean inToken = true;
/* 416 */       this.intraString = """";
/* 417 */       StringBuffer word = new StringBuffer();
/* 418 */       StringBuffer padding = new StringBuffer();
/* 419 */       while (ch != -1) {
/* 420 */         char c = (char)ch;
/* 421 */         boolean isDelim = isDelim(c);
/* 422 */         if (inToken) {
/* 423 */           if (isDelim) {
/* 424 */             if (this.delimsAreTokens) {
/* 425 */               if (word.length() == 0) {
/* 426 */                 word.append(c); break;
/*     */               } 
/* 428 */               this.pushed = ch;
/*     */               
/*     */               break;
/*     */             } 
/* 432 */             padding.append(c);
/* 433 */             inToken = false;
/*     */           } else {
/* 435 */             word.append(c);
/*     */           }
/*     */         
/* 438 */         } else if (isDelim) {
/* 439 */           padding.append(c);
/*     */         } else {
/* 441 */           this.pushed = ch;
/*     */           
/*     */           break;
/*     */         } 
/* 445 */         ch = in.read();
/*     */       } 
/* 447 */       this.intraString = padding.toString();
/* 448 */       if (this.includeDelims) {
/* 449 */         word.append(this.intraString);
/*     */       }
/* 451 */       return word.toString();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getPostToken() {
/* 458 */       if (this.suppressDelims || this.includeDelims) {
/* 459 */         return """";
/*     */       }
/* 461 */       return this.intraString;
/*     */     }
/*     */     
/*     */     private boolean isDelim(char ch) {
/* 465 */       if (this.delims == null) {
/* 466 */         return Character.isWhitespace(ch);
/*     */       }
/* 468 */       for (int i = 0; i < this.delims.length; i++) {
/* 469 */         if (this.delims[i] == ch) {
/* 470 */           return true;
/*     */         }
/*     */       } 
/* 473 */       return false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static abstract class ChainableReaderFilter
/*     */     extends ProjectComponent
/*     */     implements ChainableReader, Filter
/*     */   {
/*     */     private boolean byLine = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 497 */     public void setByLine(boolean byLine) { this.byLine = byLine; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Reader chain(Reader reader) {
/* 507 */       TokenFilter tokenFilter = new TokenFilter(reader);
/* 508 */       if (!this.byLine) {
/* 509 */         tokenFilter.add(new TokenFilter.FileTokenizer());
/*     */       }
/* 511 */       tokenFilter.add(this);
/* 512 */       return tokenFilter;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public abstract String filter(String param1String);
/*     */   }
/*     */ 
/*     */   
/*     */   public static class ReplaceString
/*     */     extends ChainableReaderFilter
/*     */   {
/*     */     private String from;
/*     */     
/*     */     private String to;
/*     */ 
/*     */     
/* 529 */     public void setFrom(String from) { this.from = from; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 538 */     public void setTo(String to) { this.to = to; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String filter(String line) {
/* 548 */       if (this.from == null) {
/* 549 */         throw new BuildException(""Missing from in stringreplace"");
/*     */       }
/* 551 */       StringBuffer ret = new StringBuffer();
/* 552 */       int start = 0;
/* 553 */       int found = line.indexOf(this.from);
/* 554 */       while (found >= 0) {
/*     */         
/* 556 */         if (found > start) {
/* 557 */           ret.append(line.substring(start, found));
/*     */         }
/*     */ 
/*     */         
/* 561 */         if (this.to != null) {
/* 562 */           ret.append(this.to);
/*     */         }
/*     */ 
/*     */         
/* 566 */         start = found + this.from.length();
/* 567 */         found = line.indexOf(line, start);
/*     */       } 
/*     */ 
/*     */       
/* 571 */       if (line.length() > start) {
/* 572 */         ret.append(line.substring(start, line.length()));
/*     */       }
/*     */       
/* 575 */       return ret.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ContainsString
/*     */     extends ProjectComponent
/*     */     implements Filter
/*     */   {
/*     */     private String contains;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 591 */     public void setContains(String contains) { this.contains = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String filter(String string) {
/* 602 */       if (this.contains == null) {
/* 603 */         throw new BuildException(""Missing contains in containsstring"");
/*     */       }
/* 605 */       if (string.indexOf(this.contains) > -1) {
/* 606 */         return string;
/*     */       }
/* 608 */       return null;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class ReplaceRegex
/*     */     extends ChainableReaderFilter
/*     */   {
/*     */     private String from;
/*     */     private String to;
/*     */     private RegularExpression regularExpression;
/*     */     private Substitution substitution;
/*     */     private boolean initialized = false;
/* 621 */     private String flags = """";
/*     */ 
/*     */     
/*     */     private int options;
/*     */ 
/*     */     
/*     */     private Regexp regexp;
/*     */ 
/*     */     
/* 630 */     public void setPattern(String from) { this.from = from; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 637 */     public void setReplace(String to) { this.to = to; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 644 */     public void setFlags(String flags) { this.flags = flags; }
/*     */ 
/*     */     
/*     */     private void initialize() {
/* 648 */       if (this.initialized) {
/*     */         return;
/*     */       }
/* 651 */       this.options = TokenFilter.convertRegexOptions(this.flags);
/* 652 */       if (this.from == null) {
/* 653 */         throw new BuildException(""Missing pattern in replaceregex"");
/*     */       }
/* 655 */       this.regularExpression = new RegularExpression();
/* 656 */       this.regularExpression.setPattern(this.from);
/* 657 */       this.regexp = this.regularExpression.getRegexp(getProject());
/* 658 */       if (this.to == null) {
/* 659 */         this.to = """";
/*     */       }
/* 661 */       this.substitution = new Substitution();
/* 662 */       this.substitution.setExpression(this.to);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String filter(String line) {
/* 670 */       initialize();
/*     */       
/* 672 */       if (!this.regexp.matches(line, this.options)) {
/* 673 */         return line;
/*     */       }
/* 675 */       return this.regexp.substitute(line, this.substitution.getExpression(getProject()), this.options);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class ContainsRegex
/*     */     extends ChainableReaderFilter
/*     */   {
/*     */     private String from;
/*     */     
/*     */     private String to;
/*     */     private Project project;
/*     */     private RegularExpression regularExpression;
/*     */     private Substitution substitution;
/*     */     private boolean initialized = false;
/* 690 */     private String flags = """";
/*     */ 
/*     */     
/*     */     private int options;
/*     */ 
/*     */     
/*     */     private Regexp regexp;
/*     */ 
/*     */     
/* 699 */     public void setPattern(String from) { this.from = from; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 706 */     public void setReplace(String to) { this.to = to; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 713 */     public void setFlags(String flags) { this.flags = flags; }
/*     */ 
/*     */     
/*     */     private void initialize() {
/* 717 */       if (this.initialized) {
/*     */         return;
/*     */       }
/* 720 */       this.options = TokenFilter.convertRegexOptions(this.flags);
/* 721 */       if (this.from == null) {
/* 722 */         throw new BuildException(""Missing from in containsregex"");
/*     */       }
/* 724 */       this.regularExpression = new RegularExpression();
/* 725 */       this.regularExpression.setPattern(this.from);
/* 726 */       this.regexp = this.regularExpression.getRegexp(this.project);
/* 727 */       if (this.to == null) {
/*     */         return;
/*     */       }
/* 730 */       this.substitution = new Substitution();
/* 731 */       this.substitution.setExpression(this.to);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String filter(String string) {
/* 740 */       initialize();
/* 741 */       if (!this.regexp.matches(string, this.options)) {
/* 742 */         return null;
/*     */       }
/* 744 */       if (this.substitution == null) {
/* 745 */         return string;
/*     */       }
/* 747 */       return this.regexp.substitute(string, this.substitution.getExpression(getProject()), this.options);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Trim
/*     */     extends ChainableReaderFilter
/*     */   {
/* 759 */     public String filter(String line) { return line.trim(); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class IgnoreBlank
/*     */     extends ChainableReaderFilter
/*     */   {
/*     */     public String filter(String line) {
/* 772 */       if (line.trim().length() == 0) {
/* 773 */         return null;
/*     */       }
/* 775 */       return line;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class DeleteCharacters
/*     */     extends ProjectComponent
/*     */     implements Filter, ChainableReader
/*     */   {
/* 786 */     private String deleteChars = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 793 */     public void setChars(String deleteChars) { this.deleteChars = TokenFilter.resolveBackSlash(deleteChars); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String filter(String string) {
/* 802 */       StringBuffer output = new StringBuffer(string.length());
/* 803 */       for (int i = 0; i < string.length(); i++) {
/* 804 */         char ch = string.charAt(i);
/* 805 */         if (!isDeleteCharacter(ch)) {
/* 806 */           output.append(ch);
/*     */         }
/*     */       } 
/* 809 */       return output.toString();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 820 */     public Reader chain(Reader reader) { return (Reader)new Object(this, reader); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private boolean isDeleteCharacter(char c) {
/* 841 */       for (int d = 0; d < this.deleteChars.length(); d++) {
/* 842 */         if (this.deleteChars.charAt(d) == c) {
/* 843 */           return true;
/*     */         }
/*     */       } 
/* 846 */       return false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String resolveBackSlash(String input) {
/* 865 */     StringBuffer b = new StringBuffer();
/* 866 */     boolean backSlashSeen = false;
/* 867 */     for (int i = 0; i < input.length(); i++) {
/* 868 */       char c = input.charAt(i);
/* 869 */       if (!backSlashSeen) {
/* 870 */         if (c == '\\') {
/* 871 */           backSlashSeen = true;
/*     */         } else {
/* 873 */           b.append(c);
/*     */         } 
/*     */       } else {
/* 876 */         switch (c) {
/*     */           case '\\':
/* 878 */             b.append('\\');
/*     */             break;
/*     */           case 'n':
/* 881 */             b.append('\n');
/*     */             break;
/*     */           case 'r':
/* 884 */             b.append('\r');
/*     */             break;
/*     */           case 't':
/* 887 */             b.append('\t');
/*     */             break;
/*     */           case 'f':
/* 890 */             b.append('\f');
/*     */             break;
/*     */           case 's':
/* 893 */             b.append("" \t\n\r\f"");
/*     */             break;
/*     */           default:
/* 896 */             b.append(c); break;
/*     */         } 
/* 898 */         backSlashSeen = false;
/*     */       } 
/*     */     } 
/* 901 */     return b.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int convertRegexOptions(String flags) {
/* 916 */     if (flags == null) {
/* 917 */       return 0;
/*     */     }
/* 919 */     int options = 0;
/* 920 */     if (flags.indexOf('g') != -1) {
/* 921 */       options |= 0x10;
/*     */     }
/* 923 */     if (flags.indexOf('i') != -1) {
/* 924 */       options |= 0x100;
/*     */     }
/* 926 */     if (flags.indexOf('m') != -1) {
/* 927 */       options |= 0x1000;
/*     */     }
/* 929 */     if (flags.indexOf('s') != -1) {
/* 930 */       options |= 0x10000;
/*     */     }
/* 932 */     return options;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filters\TokenFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.util.ChainReaderHelper,"/*     */ package org.apache.tools.ant.filters.util;
/*     */ 
/*     */ import java.io.FilterReader;
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.filters.BaseFilterReader;
/*     */ import org.apache.tools.ant.filters.ChainableReader;
/*     */ import org.apache.tools.ant.types.AntFilterReader;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Parameterizable;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ChainReaderHelper
/*     */ {
/*     */   private static final int DEFAULT_BUFFER_SIZE = 8192;
/*     */   public Reader primaryReader;
/*  91 */   public int bufferSize = 8192;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public Vector filterChains = new Vector();
/*     */ 
/*     */   
/*  99 */   private Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public final void setPrimaryReader(Reader rdr) { this.primaryReader = rdr; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public final void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public final Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public final void setBufferSize(int size) { this.bufferSize = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public final void setFilterChains(Vector fchain) { this.filterChains = fchain; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader getAssembledReader() throws BuildException {
/* 150 */     if (this.primaryReader == null) {
/* 151 */       throw new BuildException(""primaryReader must not be null."");
/*     */     }
/*     */     
/* 154 */     Reader instream = this.primaryReader;
/* 155 */     int filterReadersCount = this.filterChains.size();
/* 156 */     Vector finalFilters = new Vector();
/*     */     
/* 158 */     for (int i = 0; i < filterReadersCount; i++) {
/* 159 */       FilterChain filterchain = this.filterChains.elementAt(i);
/*     */       
/* 161 */       Vector filterReaders = filterchain.getFilterReaders();
/* 162 */       int readerCount = filterReaders.size();
/* 163 */       for (int j = 0; j < readerCount; j++) {
/* 164 */         finalFilters.addElement(filterReaders.elementAt(j));
/*     */       }
/*     */     } 
/*     */     
/* 168 */     int filtersCount = finalFilters.size();
/*     */     
/* 170 */     if (filtersCount > 0) {
/* 171 */       for (int i = 0; i < filtersCount; i++) {
/* 172 */         Object o = finalFilters.elementAt(i);
/*     */         
/* 174 */         if (o instanceof AntFilterReader) {
/* 175 */           AntFilterReader filter = finalFilters.elementAt(i);
/*     */           
/* 177 */           String className = filter.getClassName();
/* 178 */           Path classpath = filter.getClasspath();
/* 179 */           Project project = filter.getProject();
/* 180 */           if (className != null) {
/*     */             try {
/* 182 */               Class clazz = null;
/* 183 */               if (classpath == null) {
/* 184 */                 clazz = Class.forName(className);
/*     */               } else {
/* 186 */                 AntClassLoader al = project.createClassLoader(classpath);
/*     */                 
/* 188 */                 clazz = Class.forName(className, true, (ClassLoader)al);
/*     */               } 
/* 190 */               if (clazz != null) {
/* 191 */                 if (!FilterReader.class.isAssignableFrom(clazz)) {
/* 192 */                   throw new BuildException(className + "" does not extend java.io.FilterReader"");
/*     */                 }
/*     */                 
/* 195 */                 Constructor[] constructors = (Constructor[])clazz.getConstructors();
/*     */                 
/* 197 */                 int j = 0;
/* 198 */                 boolean consPresent = false;
/* 199 */                 for (; j < constructors.length; j++) {
/* 200 */                   Class[] types = constructors[j].getParameterTypes();
/*     */                   
/* 202 */                   if (types.length == 1 && types[0].isAssignableFrom(Reader.class)) {
/*     */                     
/* 204 */                     consPresent = true;
/*     */                     break;
/*     */                   } 
/*     */                 } 
/* 208 */                 if (!consPresent) {
/* 209 */                   throw new BuildException(className + "" does not define a public constructor"" + "" that takes in a Reader as its "" + ""single argument."");
/*     */                 }
/*     */ 
/*     */ 
/*     */                 
/* 214 */                 Reader[] rdr = { instream };
/* 215 */                 instream = constructors[j].newInstance((Object[])rdr);
/*     */                 
/* 217 */                 setProjectOnObject(instream);
/* 218 */                 if (Parameterizable.class.isAssignableFrom(clazz)) {
/* 219 */                   Parameter[] params = filter.getParams();
/* 220 */                   ((Parameterizable)instream).setParameters(params);
/*     */                 } 
/*     */               } 
/*     */             } catch (ClassNotFoundException cnfe) {
/*     */               
/* 225 */               throw new BuildException(cnfe);
/*     */             } catch (InstantiationException ie) {
/* 227 */               throw new BuildException(ie);
/*     */             } catch (IllegalAccessException iae) {
/* 229 */               throw new BuildException(iae);
/*     */             } catch (InvocationTargetException ite) {
/* 231 */               throw new BuildException(ite);
/*     */             } 
/*     */           }
/* 234 */         } else if (o instanceof ChainableReader) {
/* 235 */           setProjectOnObject(o);
/* 236 */           instream = ((ChainableReader)o).chain(instream);
/* 237 */           setProjectOnObject(instream);
/*     */         } 
/*     */       } 
/*     */     }
/* 241 */     return instream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setProjectOnObject(Object obj) {
/* 250 */     if (this.project == null) {
/*     */       return;
/*     */     }
/* 253 */     if (obj instanceof BaseFilterReader) {
/* 254 */       ((BaseFilterReader)obj).setProject(this.project);
/*     */       return;
/*     */     } 
/* 257 */     this.project.setProjectReference(obj);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public final String readFully(Reader rdr) throws IOException { return FileUtils.readFully(rdr, this.bufferSize); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filter\\util\ChainReaderHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.util.JavaClassHelper,"/*     */ package org.apache.tools.ant.filters.util;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.IOException;
/*     */ import org.apache.bcel.classfile.ClassParser;
/*     */ import org.apache.bcel.classfile.ConstantValue;
/*     */ import org.apache.bcel.classfile.Field;
/*     */ import org.apache.bcel.classfile.JavaClass;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class JavaClassHelper
/*     */ {
/*  71 */   private static final String LS = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final StringBuffer getConstants(byte[] bytes) throws IOException {
/*  82 */     StringBuffer sb = new StringBuffer();
/*  83 */     ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
/*  84 */     ClassParser parser = new ClassParser(bis, """");
/*  85 */     JavaClass javaClass = parser.parse();
/*  86 */     Field[] fields = javaClass.getFields();
/*  87 */     for (int i = 0; i < fields.length; i++) {
/*  88 */       Field field = fields[i];
/*  89 */       if (field != null) {
/*  90 */         ConstantValue cv = field.getConstantValue();
/*  91 */         if (cv != null) {
/*  92 */           String cvs = cv.toString();
/*     */           
/*  94 */           if (cvs.startsWith(""\"""") && cvs.endsWith(""\"""")) {
/*  95 */             cvs = cvs.substring(1, cvs.length() - 1);
/*     */           }
/*  97 */           sb.append(field.getName());
/*  98 */           sb.append('=');
/*  99 */           sb.append(cvs);
/* 100 */           sb.append(LS);
/*     */         } 
/*     */       } 
/*     */     } 
/* 104 */     return sb;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\filter\\util\JavaClassHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.helper.AntXMLContext,"/*     */ package org.apache.tools.ant.helper;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.RuntimeConfigurable;
/*     */ import org.apache.tools.ant.Target;
/*     */ import org.xml.sax.Attributes;
/*     */ import org.xml.sax.Locator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntXMLContext
/*     */ {
/*     */   private Project project;
/*     */   private File buildFile;
/*  88 */   private Vector targetVector = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File buildFileParent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String currentProjectName;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Locator locator;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   private Target implicitTarget = new Target();
/*     */ 
/*     */ 
/*     */   
/* 115 */   private Target currentTarget = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   private Vector wStack = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean ignoreProjectTag = false;
/*     */ 
/*     */ 
/*     */   
/* 129 */   private Map prefixMapping = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public AntXMLContext(Project project) {
/* 137 */     this.project = project;
/* 138 */     this.implicitTarget.setProject(project);
/* 139 */     this.implicitTarget.setName("""");
/* 140 */     this.targetVector.addElement(this.implicitTarget);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBuildFile(File buildFile) {
/* 148 */     this.buildFile = buildFile;
/* 149 */     this.buildFileParent = new File(buildFile.getParent());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public File getBuildFile() { return this.buildFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public File getBuildFileParent() { return this.buildFileParent; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public String getCurrentProjectName() { return this.currentProjectName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setCurrentProjectName(String name) { this.currentProjectName = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable currentWrapper() {
/* 198 */     if (this.wStack.size() < 1) {
/* 199 */       return null;
/*     */     }
/* 201 */     return this.wStack.elementAt(this.wStack.size() - 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable parentWrapper() {
/* 210 */     if (this.wStack.size() < 2) {
/* 211 */       return null;
/*     */     }
/* 213 */     return this.wStack.elementAt(this.wStack.size() - 2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public void pushWrapper(RuntimeConfigurable wrapper) { this.wStack.addElement(wrapper); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void popWrapper() {
/* 228 */     if (this.wStack.size() > 0) {
/* 229 */       this.wStack.removeElementAt(this.wStack.size() - 1);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public Vector getWrapperStack() { return this.wStack; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addTarget(Target target) {
/* 246 */     this.targetVector.addElement(target);
/* 247 */     this.currentTarget = target;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public Target getCurrentTarget() { return this.currentTarget; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public Target getImplicitTarget() { return this.implicitTarget; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void setCurrentTarget(Target target) { this.currentTarget = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   public void setImplicitTarget(Target target) { this.implicitTarget = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public Vector getTargets() { return this.targetVector; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void configureId(Object element, Attributes attr) {
/* 301 */     String id = attr.getValue(""id"");
/* 302 */     if (id != null) {
/* 303 */       this.project.addReference(id, element);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public Locator getLocator() { return this.locator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 320 */   public void setLocator(Locator locator) { this.locator = locator; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 328 */   public boolean isIgnoringProjectTag() { return this.ignoreProjectTag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 336 */   public void setIgnoreProjectTag(boolean flag) { this.ignoreProjectTag = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void startPrefixMapping(String prefix, String uri) {
/* 346 */     List list = (List)this.prefixMapping.get(prefix);
/* 347 */     if (list == null) {
/* 348 */       list = new ArrayList();
/* 349 */       this.prefixMapping.put(prefix, list);
/*     */     } 
/* 351 */     list.add(uri);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void endPrefixMapping(String prefix) {
/* 360 */     List list = (List)this.prefixMapping.get(prefix);
/* 361 */     if (list == null || list.size() == 0) {
/*     */       return;
/*     */     }
/* 364 */     list.remove(list.size() - 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getPrefixMapping(String prefix) {
/* 374 */     List list = (List)this.prefixMapping.get(prefix);
/* 375 */     if (list == null || list.size() == 0) {
/* 376 */       return null;
/*     */     }
/* 378 */     return list.get(list.size() - 1);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\helper\AntXMLContext.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.helper.ProjectHelper2,"/*      */ package org.apache.tools.ant.helper;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileNotFoundException;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.net.URL;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Stack;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.Location;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.ProjectHelper;
/*      */ import org.apache.tools.ant.RuntimeConfigurable;
/*      */ import org.apache.tools.ant.Target;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.UnknownElement;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JAXPUtils;
/*      */ import org.xml.sax.Attributes;
/*      */ import org.xml.sax.InputSource;
/*      */ import org.xml.sax.Locator;
/*      */ import org.xml.sax.SAXException;
/*      */ import org.xml.sax.SAXParseException;
/*      */ import org.xml.sax.XMLReader;
/*      */ import org.xml.sax.helpers.DefaultHandler;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ProjectHelper2
/*      */   extends ProjectHelper
/*      */ {
/*   98 */   private static AntHandler elementHandler = new ElementHandler();
/*   99 */   private static AntHandler targetHandler = new TargetHandler();
/*  100 */   private static AntHandler mainHandler = new MainHandler();
/*  101 */   private static AntHandler projectHandler = new ProjectHandler();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  106 */   private static FileUtils fu = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public UnknownElement parseUnknownElement(Project project, URL source) throws BuildException {
/*  118 */     Target dummyTarget = new Target();
/*  119 */     dummyTarget.setProject(project);
/*      */     
/*  121 */     AntXMLContext context = new AntXMLContext(project);
/*  122 */     context.addTarget(dummyTarget);
/*  123 */     context.setImplicitTarget(dummyTarget);
/*      */     
/*  125 */     parse(context.getProject(), source, new RootHandler(context, elementHandler));
/*      */     
/*  127 */     Task[] tasks = dummyTarget.getTasks();
/*  128 */     if (tasks.length != 1) {
/*  129 */       throw new BuildException(""No tasks defined"");
/*      */     }
/*  131 */     return (UnknownElement)tasks[0];
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void parse(Project project, Object source) throws BuildException {
/*  142 */     getImportStack().addElement(source);
/*      */     
/*  144 */     AntXMLContext context = null;
/*  145 */     context = (AntXMLContext)project.getReference(""ant.parsing.context"");
/*      */ 
/*      */     
/*  148 */     if (context == null) {
/*  149 */       context = new AntXMLContext(project);
/*  150 */       project.addReference(""ant.parsing.context"", context);
/*  151 */       project.addReference(""ant.targets"", context.getTargets());
/*      */     } 
/*      */     
/*  154 */     if (getImportStack().size() > 1) {
/*      */       
/*  156 */       context.setIgnoreProjectTag(true);
/*  157 */       Target currentTarget = context.getCurrentTarget();
/*      */       try {
/*  159 */         Target newCurrent = new Target();
/*  160 */         newCurrent.setProject(project);
/*  161 */         newCurrent.setName("""");
/*  162 */         context.setCurrentTarget(newCurrent);
/*  163 */         parse(project, source, new RootHandler(context, mainHandler));
/*  164 */         newCurrent.execute();
/*      */       } finally {
/*  166 */         context.setCurrentTarget(currentTarget);
/*      */       } 
/*      */     } else {
/*      */       
/*  170 */       parse(project, source, new RootHandler(context, mainHandler));
/*      */       
/*  172 */       context.getImplicitTarget().execute();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void parse(Project project, Object source, RootHandler handler) throws BuildException {
/*  188 */     AntXMLContext context = handler.context;
/*      */     
/*  190 */     File buildFile = null;
/*  191 */     URL url = null;
/*  192 */     String buildFileName = null;
/*      */     
/*  194 */     if (source instanceof File) {
/*  195 */       buildFile = (File)source;
/*  196 */       buildFile = new File(buildFile.getAbsolutePath());
/*  197 */       context.setBuildFile(buildFile);
/*  198 */       buildFileName = buildFile.toString();
/*      */     }
/*  200 */     else if (source instanceof URL) {
/*  201 */       if (handler.getCurrentAntHandler() != elementHandler) {
/*  202 */         throw new BuildException(""Source "" + source.getClass().getName() + "" not supported by this plugin for "" + "" non task xml"");
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  207 */       url = (URL)source;
/*  208 */       buildFileName = url.toString();
/*      */     } else {
/*      */       
/*  211 */       throw new BuildException(""Source "" + source.getClass().getName() + "" not supported by this plugin"");
/*      */     } 
/*      */ 
/*      */     
/*  215 */     InputStream inputStream = null;
/*  216 */     InputSource inputSource = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/*  223 */       XMLReader parser = JAXPUtils.getNamespaceXMLReader();
/*      */       
/*  225 */       String uri = null;
/*  226 */       if (buildFile != null) {
/*  227 */         uri = fu.toURI(buildFile.getAbsolutePath());
/*  228 */         inputStream = new FileInputStream(buildFile);
/*      */       } else {
/*  230 */         inputStream = url.openStream();
/*  231 */         uri = url.toString();
/*      */       } 
/*      */       
/*  234 */       inputSource = new InputSource(inputStream);
/*  235 */       if (uri != null) {
/*  236 */         inputSource.setSystemId(uri);
/*      */       }
/*  238 */       project.log(""parsing buildfile "" + buildFileName + "" with URI = "" + uri, 3);
/*      */ 
/*      */       
/*  241 */       DefaultHandler hb = handler;
/*      */       
/*  243 */       parser.setContentHandler(hb);
/*  244 */       parser.setEntityResolver(hb);
/*  245 */       parser.setErrorHandler(hb);
/*  246 */       parser.setDTDHandler(hb);
/*  247 */       parser.parse(inputSource);
/*      */     } catch (SAXParseException exc) {
/*  249 */       Location location = new Location(exc.getSystemId(), exc.getLineNumber(), exc.getColumnNumber());
/*      */ 
/*      */       
/*  252 */       Throwable t = exc.getException();
/*  253 */       if (t instanceof BuildException) {
/*  254 */         BuildException be = (BuildException)t;
/*  255 */         if (be.getLocation() == Location.UNKNOWN_LOCATION) {
/*  256 */           be.setLocation(location);
/*      */         }
/*  258 */         throw be;
/*      */       } 
/*      */       
/*  261 */       throw new BuildException(exc.getMessage(), t, location);
/*      */     } catch (SAXException exc) {
/*  263 */       Throwable t = exc.getException();
/*  264 */       if (t instanceof BuildException) {
/*  265 */         throw (BuildException)t;
/*      */       }
/*  267 */       throw new BuildException(exc.getMessage(), t);
/*      */     } catch (FileNotFoundException exc) {
/*  269 */       throw new BuildException(exc);
/*      */     } catch (UnsupportedEncodingException exc) {
/*  271 */       throw new BuildException(""Encoding of project file "" + buildFileName + "" is invalid."", exc);
/*      */     }
/*      */     catch (IOException exc) {
/*      */       
/*  275 */       throw new BuildException(""Error reading project file "" + buildFileName + "": "" + exc.getMessage(), exc);
/*      */     }
/*      */     finally {
/*      */       
/*  279 */       if (inputStream != null) {
/*      */         try {
/*  281 */           inputStream.close();
/*  282 */         } catch (IOException ioe) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class AntHandler
/*      */   {
/*      */     public void onStartElement(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  340 */     public AntHandler onStartChild(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException { throw new SAXParseException(""Unexpected element \"""" + qname + "" \"""", context.getLocator()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void onEndChild(String uri, String tag, String qname, AntXMLContext context) throws SAXParseException {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void onEndElement(String uri, String tag, AntXMLContext context) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count, AntXMLContext context) throws SAXParseException {
/*  384 */       String s = (new String(buf, start, count)).trim();
/*      */       
/*  386 */       if (s.length() > 0) {
/*  387 */         throw new SAXParseException(""Unexpected text \"""" + s + ""\"""", context.getLocator());
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     protected void checkNamespace(String uri) {}
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class RootHandler
/*      */     extends DefaultHandler
/*      */   {
/*  409 */     private Stack antHandlers = new Stack();
/*  410 */     private ProjectHelper2.AntHandler currentHandler = null;
/*      */ 
/*      */ 
/*      */     
/*      */     private AntXMLContext context;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public RootHandler(AntXMLContext context, ProjectHelper2.AntHandler rootHandler) {
/*  420 */       this.currentHandler = rootHandler;
/*  421 */       this.antHandlers.push(this.currentHandler);
/*  422 */       this.context = context;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  430 */     public ProjectHelper2.AntHandler getCurrentAntHandler() { return this.currentHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public InputSource resolveEntity(String publicId, String systemId) {
/*  446 */       this.context.getProject().log(""resolving systemId: "" + systemId, 3);
/*      */ 
/*      */       
/*  449 */       if (systemId.startsWith(""file:"")) {
/*  450 */         String path = fu.fromURI(systemId);
/*      */         
/*  452 */         File file = new File(path);
/*  453 */         if (!file.isAbsolute()) {
/*  454 */           file = fu.resolveFile(this.context.getBuildFileParent(), path);
/*      */         }
/*      */         try {
/*  457 */           InputSource inputSource = new InputSource(new FileInputStream(file));
/*      */           
/*  459 */           inputSource.setSystemId(fu.toURI(file.getAbsolutePath()));
/*  460 */           return inputSource;
/*      */         } catch (FileNotFoundException fne) {
/*  462 */           this.context.getProject().log(file.getAbsolutePath() + "" could not be found"", 1);
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  468 */       return null;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String uri, String tag, String qname, Attributes attrs) throws SAXParseException {
/*  487 */       ProjectHelper2.AntHandler next = this.currentHandler.onStartChild(uri, tag, qname, attrs, this.context);
/*      */       
/*  489 */       this.antHandlers.push(this.currentHandler);
/*  490 */       this.currentHandler = next;
/*  491 */       this.currentHandler.onStartElement(uri, tag, qname, attrs, this.context);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  501 */     public void setDocumentLocator(Locator locator) { this.context.setLocator(locator); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void endElement(String uri, String name, String qName) throws SAXException {
/*  519 */       this.currentHandler.onEndElement(uri, name, this.context);
/*  520 */       ProjectHelper2.AntHandler prev = this.antHandlers.pop();
/*  521 */       this.currentHandler = prev;
/*  522 */       if (this.currentHandler != null) {
/*  523 */         this.currentHandler.onEndChild(uri, name, qName, this.context);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  537 */     public void characters(char[] buf, int start, int count) throws SAXParseException { this.currentHandler.characters(buf, start, count, this.context); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  547 */     public void startPrefixMapping(String prefix, String uri) { this.context.startPrefixMapping(prefix, uri); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  556 */     public void endPrefixMapping(String prefix) { this.context.endPrefixMapping(prefix); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class MainHandler
/*      */     extends AntHandler
/*      */   {
/*      */     public ProjectHelper2.AntHandler onStartChild(String uri, String name, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {
/*  582 */       if (name.equals(""project"") && (uri.equals("""") || uri.equals(""antlib:org.apache.tools.ant"")))
/*      */       {
/*  584 */         return projectHandler;
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  591 */       throw new SAXParseException(""Unexpected element \"""" + qname + ""\"" "" + name, context.getLocator());
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class ProjectHandler
/*      */     extends AntHandler
/*      */   {
/*      */     public void onStartElement(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {
/*  625 */       String id = null;
/*  626 */       String baseDir = null;
/*  627 */       boolean nameAttributeSet = false;
/*      */       
/*  629 */       Project project = context.getProject();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  642 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  643 */         String attrUri = attrs.getURI(i);
/*  644 */         if (attrUri == null || attrUri.equals("""") || attrUri.equals(uri)) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  649 */           String key = attrs.getLocalName(i);
/*  650 */           String value = attrs.getValue(i);
/*      */           
/*  652 */           if (key.equals(""default"")) {
/*  653 */             if (value != null && !value.equals("""") && 
/*  654 */               !context.isIgnoringProjectTag()) {
/*  655 */               project.setDefault(value);
/*      */             }
/*      */           }
/*  658 */           else if (key.equals(""name"")) {
/*  659 */             if (value != null) {
/*  660 */               context.setCurrentProjectName(value);
/*  661 */               nameAttributeSet = true;
/*  662 */               if (!context.isIgnoringProjectTag()) {
/*  663 */                 project.setName(value);
/*  664 */                 project.addReference(value, project);
/*      */               } 
/*      */             } 
/*  667 */           } else if (key.equals(""id"")) {
/*  668 */             if (value != null)
/*      */             {
/*  670 */               if (!context.isIgnoringProjectTag()) {
/*  671 */                 project.addReference(value, project);
/*      */               }
/*      */             }
/*  674 */           } else if (key.equals(""basedir"")) {
/*  675 */             if (!context.isIgnoringProjectTag()) {
/*  676 */               baseDir = value;
/*      */             }
/*      */           } else {
/*      */             
/*  680 */             throw new SAXParseException(""Unexpected attribute \"""" + attrs.getQName(i) + ""\"""", context.getLocator());
/*      */           } 
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  686 */       String antFileProp = ""ant.file."" + context.getCurrentProjectName();
/*  687 */       String dup = project.getProperty(antFileProp);
/*  688 */       if (dup != null && nameAttributeSet) {
/*  689 */         File dupFile = new File(dup);
/*  690 */         if (context.isIgnoringProjectTag() && !dupFile.equals(context.getBuildFile()))
/*      */         {
/*  692 */           project.log(""Duplicated project name in import. Project "" + context.getCurrentProjectName() + "" defined first in "" + dup + "" and again in "" + context.getBuildFile(), 1);
/*      */         }
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  699 */       if (context.getBuildFile() != null) {
/*  700 */         project.setUserProperty(""ant.file."" + context.getCurrentProjectName(), context.getBuildFile().toString());
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  705 */       if (context.isIgnoringProjectTag()) {
/*      */         return;
/*      */       }
/*      */ 
/*      */       
/*  710 */       if (project.getProperty(""basedir"") != null) {
/*  711 */         project.setBasedir(project.getProperty(""basedir""));
/*      */       
/*      */       }
/*  714 */       else if (baseDir == null) {
/*  715 */         project.setBasedir(context.getBuildFileParent().getAbsolutePath());
/*      */       
/*      */       }
/*  718 */       else if ((new File(baseDir)).isAbsolute()) {
/*  719 */         project.setBasedir(baseDir);
/*      */       } else {
/*  721 */         project.setBaseDir(fu.resolveFile(context.getBuildFileParent(), baseDir));
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  727 */       project.addTarget("""", context.getImplicitTarget());
/*  728 */       context.setCurrentTarget(context.getImplicitTarget());
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public ProjectHelper2.AntHandler onStartChild(String uri, String name, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {
/*  754 */       if (name.equals(""target"") && (uri.equals("""") || uri.equals(""antlib:org.apache.tools.ant"")))
/*      */       {
/*  756 */         return targetHandler;
/*      */       }
/*  758 */       return elementHandler;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class TargetHandler
/*      */     extends AntHandler
/*      */   {
/*      */     public void onStartElement(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {
/*  793 */       String name = null;
/*  794 */       String depends = """";
/*      */       
/*  796 */       Project project = context.getProject();
/*  797 */       Target target = new Target();
/*  798 */       target.setProject(project);
/*  799 */       context.addTarget(target);
/*      */       
/*  801 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  802 */         String attrUri = attrs.getURI(i);
/*  803 */         if (attrUri == null || attrUri.equals("""") || attrUri.equals(uri)) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  808 */           String key = attrs.getLocalName(i);
/*  809 */           String value = attrs.getValue(i);
/*      */           
/*  811 */           if (key.equals(""name"")) {
/*  812 */             name = value;
/*  813 */             if ("""".equals(name)) {
/*  814 */               throw new BuildException(""name attribute must not be empty"");
/*      */             }
/*      */           }
/*  817 */           else if (key.equals(""depends"")) {
/*  818 */             depends = value;
/*  819 */           } else if (key.equals(""if"")) {
/*  820 */             target.setIf(value);
/*  821 */           } else if (key.equals(""unless"")) {
/*  822 */             target.setUnless(value);
/*  823 */           } else if (key.equals(""id"")) {
/*  824 */             if (value != null && !value.equals("""")) {
/*  825 */               context.getProject().addReference(value, target);
/*      */             }
/*  827 */           } else if (key.equals(""description"")) {
/*  828 */             target.setDescription(value);
/*      */           } else {
/*  830 */             throw new SAXParseException(""Unexpected attribute \"""" + key + ""\"""", context.getLocator());
/*      */           } 
/*      */         } 
/*      */       } 
/*      */       
/*  835 */       if (name == null) {
/*  836 */         throw new SAXParseException(""target element appears without a name attribute"", context.getLocator());
/*      */       }
/*      */ 
/*      */       
/*  840 */       Hashtable currentTargets = project.getTargets();
/*      */ 
/*      */       
/*  843 */       if (currentTargets.containsKey(name))
/*      */       {
/*  845 */         if (context.getCurrentProjectName() != null) {
/*  846 */           String newName = context.getCurrentProjectName() + ""."" + name;
/*      */           
/*  848 */           project.log(""Already defined in main or a previous import, define "" + name + "" as "" + newName, 3);
/*      */ 
/*      */           
/*  851 */           name = newName;
/*      */         } else {
/*  853 */           project.log(""Already defined in main or a previous import, ignore "" + name, 3);
/*      */           
/*  855 */           name = null;
/*      */         } 
/*      */       }
/*      */       
/*  859 */       if (name != null) {
/*  860 */         target.setName(name);
/*  861 */         project.addOrReplaceTarget(name, target);
/*      */       } 
/*      */ 
/*      */       
/*  865 */       if (depends.length() > 0) {
/*  866 */         target.setDepends(depends);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  889 */     public ProjectHelper2.AntHandler onStartChild(String uri, String name, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException { return elementHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  901 */     public void onEndElement(String uri, String tag, AntXMLContext context) { context.setCurrentTarget(context.getImplicitTarget()); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class ElementHandler
/*      */     extends AntHandler
/*      */   {
/*      */     public void onStartElement(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException {
/*  938 */       RuntimeConfigurable parentWrapper = context.currentWrapper();
/*  939 */       Object parent = null;
/*      */       
/*  941 */       if (parentWrapper != null) {
/*  942 */         parent = parentWrapper.getProxy();
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  947 */       UnknownElement task = new UnknownElement(tag);
/*  948 */       task.setProject(context.getProject());
/*  949 */       task.setNamespace(uri);
/*  950 */       task.setQName(qname);
/*  951 */       task.setTaskType(ProjectHelper.genComponentName(task.getNamespace(), tag));
/*      */       
/*  953 */       task.setTaskName(qname);
/*      */       
/*  955 */       Location location = new Location(context.getLocator().getSystemId(), context.getLocator().getLineNumber(), context.getLocator().getColumnNumber());
/*      */ 
/*      */       
/*  958 */       task.setLocation(location);
/*  959 */       task.setOwningTarget(context.getCurrentTarget());
/*      */       
/*  961 */       context.configureId(task, attrs);
/*      */       
/*  963 */       if (parent != null) {
/*      */         
/*  965 */         ((UnknownElement)parent).addChild(task);
/*      */       } else {
/*      */         
/*  968 */         context.getCurrentTarget().addTask((Task)task);
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  974 */       RuntimeConfigurable wrapper = new RuntimeConfigurable(task, task.getTaskName());
/*      */ 
/*      */       
/*  977 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  978 */         String attrUri = attrs.getURI(i);
/*  979 */         if (attrUri == null || attrUri.equals("""") || attrUri.equals(uri)) {
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  984 */           String name = attrs.getLocalName(i);
/*  985 */           String value = attrs.getValue(i);
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  990 */           if (name.equals(""ant-type"")) {
/*  991 */             int index = value.indexOf("":"");
/*  992 */             if (index != -1) {
/*  993 */               String prefix = value.substring(0, index);
/*  994 */               String mappedUri = context.getPrefixMapping(prefix);
/*  995 */               if (mappedUri == null) {
/*  996 */                 throw new BuildException(""Unable to find XML NS prefix "" + prefix);
/*      */               }
/*      */               
/*  999 */               value = ProjectHelper.genComponentName(mappedUri, value.substring(index + 1));
/*      */             } 
/*      */           } 
/*      */           
/* 1003 */           wrapper.setAttribute(name, value);
/*      */         } 
/*      */       } 
/* 1006 */       if (parentWrapper != null) {
/* 1007 */         parentWrapper.addChild(wrapper);
/*      */       }
/*      */       
/* 1010 */       context.pushWrapper(wrapper);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count, AntXMLContext context) throws SAXParseException {
/* 1029 */       RuntimeConfigurable wrapper = context.currentWrapper();
/* 1030 */       wrapper.addText(buf, start, count);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1054 */     public ProjectHelper2.AntHandler onStartChild(String uri, String tag, String qname, Attributes attrs, AntXMLContext context) throws SAXParseException { return elementHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1066 */     public void onEndElement(String uri, String tag, AntXMLContext context) { context.popWrapper(); }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\helper\ProjectHelper2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.helper.ProjectHelperImpl,"/*      */ package org.apache.tools.ant.helper;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileNotFoundException;
/*      */ import java.io.IOException;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.util.Locale;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.IntrospectionHelper;
/*      */ import org.apache.tools.ant.Location;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.ProjectHelper;
/*      */ import org.apache.tools.ant.RuntimeConfigurable;
/*      */ import org.apache.tools.ant.Target;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.TaskContainer;
/*      */ import org.apache.tools.ant.TypeAdapter;
/*      */ import org.apache.tools.ant.UnknownElement;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JAXPUtils;
/*      */ import org.xml.sax.AttributeList;
/*      */ import org.xml.sax.DocumentHandler;
/*      */ import org.xml.sax.HandlerBase;
/*      */ import org.xml.sax.InputSource;
/*      */ import org.xml.sax.Locator;
/*      */ import org.xml.sax.Parser;
/*      */ import org.xml.sax.SAXException;
/*      */ import org.xml.sax.SAXParseException;
/*      */ import org.xml.sax.helpers.XMLReaderAdapter;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ProjectHelperImpl
/*      */   extends ProjectHelper
/*      */ {
/*      */   private Parser parser;
/*      */   private Project project;
/*      */   private File buildFile;
/*      */   private File buildFileParent;
/*      */   private Locator locator;
/*  118 */   private Target implicitTarget = new Target();
/*      */ 
/*      */ 
/*      */   
/*  122 */   private static FileUtils fu = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  128 */   public ProjectHelperImpl() { this.implicitTarget.setName(""""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void parse(Project project, Object source) throws BuildException {
/*  140 */     if (!(source instanceof File)) {
/*  141 */       throw new BuildException(""Only File source supported by default plugin"");
/*      */     }
/*      */     
/*  144 */     File buildFile = (File)source;
/*  145 */     FileInputStream inputStream = null;
/*  146 */     InputSource inputSource = null;
/*      */     
/*  148 */     this.project = project;
/*  149 */     this.buildFile = new File(buildFile.getAbsolutePath());
/*  150 */     this.buildFileParent = new File(this.buildFile.getParent());
/*      */     
/*      */     try {
/*      */       try {
/*  154 */         this.parser = JAXPUtils.getParser();
/*      */       } catch (BuildException e) {
/*  156 */         this.parser = new XMLReaderAdapter(JAXPUtils.getXMLReader());
/*      */       } 
/*      */ 
/*      */       
/*  160 */       String uri = fu.toURI(buildFile.getAbsolutePath());
/*  161 */       inputStream = new FileInputStream(buildFile);
/*  162 */       inputSource = new InputSource(inputStream);
/*  163 */       inputSource.setSystemId(uri);
/*  164 */       project.log(""parsing buildfile "" + buildFile + "" with URI = "" + uri, 3);
/*      */       
/*  166 */       HandlerBase hb = new RootHandler(this);
/*  167 */       this.parser.setDocumentHandler(hb);
/*  168 */       this.parser.setEntityResolver(hb);
/*  169 */       this.parser.setErrorHandler(hb);
/*  170 */       this.parser.setDTDHandler(hb);
/*  171 */       this.parser.parse(inputSource);
/*      */     } catch (SAXParseException exc) {
/*  173 */       Location location = new Location(exc.getSystemId(), exc.getLineNumber(), exc.getColumnNumber());
/*      */ 
/*      */ 
/*      */       
/*  177 */       Throwable t = exc.getException();
/*  178 */       if (t instanceof BuildException) {
/*  179 */         BuildException be = (BuildException)t;
/*  180 */         if (be.getLocation() == Location.UNKNOWN_LOCATION) {
/*  181 */           be.setLocation(location);
/*      */         }
/*  183 */         throw be;
/*      */       } 
/*      */       
/*  186 */       throw new BuildException(exc.getMessage(), t, location);
/*      */     } catch (SAXException exc) {
/*  188 */       Throwable t = exc.getException();
/*  189 */       if (t instanceof BuildException) {
/*  190 */         throw (BuildException)t;
/*      */       }
/*  192 */       throw new BuildException(exc.getMessage(), t);
/*      */     } catch (FileNotFoundException exc) {
/*  194 */       throw new BuildException(exc);
/*      */     } catch (UnsupportedEncodingException exc) {
/*  196 */       throw new BuildException(""Encoding of project file is invalid."", exc);
/*      */     } catch (IOException exc) {
/*      */       
/*  199 */       throw new BuildException(""Error reading project file: "" + exc.getMessage(), exc);
/*      */     } finally {
/*      */       
/*  202 */       if (inputStream != null) {
/*      */         try {
/*  204 */           inputStream.close();
/*  205 */         } catch (IOException ioe) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class AbstractHandler
/*      */     extends HandlerBase
/*      */   {
/*      */     protected DocumentHandler parentHandler;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     ProjectHelperImpl helperImpl;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public AbstractHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) {
/*  252 */       this.parentHandler = parentHandler;
/*  253 */       this.helperImpl = helperImpl;
/*      */ 
/*      */       
/*  256 */       helperImpl.parser.setDocumentHandler(this);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  272 */     public void startElement(String tag, AttributeList attrs) throws SAXParseException { throw new SAXParseException(""Unexpected element \"""" + tag + ""\"""", this.helperImpl.locator); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) throws SAXParseException {
/*  288 */       String s = (new String(buf, start, count)).trim();
/*      */       
/*  290 */       if (s.length() > 0) {
/*  291 */         throw new SAXParseException(""Unexpected text \"""" + s + ""\"""", this.helperImpl.locator);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  308 */     public void endElement(String name) throws SAXException { this.helperImpl.parser.setDocumentHandler(this.parentHandler); }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   static class RootHandler
/*      */     extends HandlerBase
/*      */   {
/*      */     ProjectHelperImpl helperImpl;
/*      */ 
/*      */     
/*  319 */     public RootHandler(ProjectHelperImpl helperImpl) { this.helperImpl = helperImpl; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public InputSource resolveEntity(String publicId, String systemId) {
/*  334 */       this.helperImpl.project.log(""resolving systemId: "" + systemId, 3);
/*      */       
/*  336 */       if (systemId.startsWith(""file:"")) {
/*  337 */         String path = fu.fromURI(systemId);
/*      */         
/*  339 */         File file = new File(path);
/*  340 */         if (!file.isAbsolute()) {
/*  341 */           file = fu.resolveFile(this.helperImpl.buildFileParent, path);
/*      */         }
/*      */         try {
/*  344 */           InputSource inputSource = new InputSource(new FileInputStream(file));
/*  345 */           inputSource.setSystemId(fu.toURI(file.getAbsolutePath()));
/*  346 */           return inputSource;
/*      */         } catch (FileNotFoundException fne) {
/*  348 */           this.helperImpl.project.log(file.getAbsolutePath() + "" could not be found"", 1);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  353 */       return null;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String tag, AttributeList attrs) throws SAXParseException {
/*  369 */       if (tag.equals(""project"")) {
/*  370 */         (new ProjectHelperImpl.ProjectHandler(this.helperImpl, this)).init(tag, attrs);
/*      */       } else {
/*  372 */         throw new SAXParseException(""Config file is not of expected XML type"", this.helperImpl.locator);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  384 */     public void setDocumentLocator(Locator locator) { this.helperImpl.locator = locator; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class ProjectHandler
/*      */     extends AbstractHandler
/*      */   {
/*  401 */     public ProjectHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { super(helperImpl, parentHandler); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*  421 */       String def = null;
/*  422 */       String name = null;
/*  423 */       String id = null;
/*  424 */       String baseDir = null;
/*      */       
/*  426 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  427 */         String key = attrs.getName(i);
/*  428 */         String value = attrs.getValue(i);
/*      */         
/*  430 */         if (key.equals(""default"")) {
/*  431 */           def = value;
/*  432 */         } else if (key.equals(""name"")) {
/*  433 */           name = value;
/*  434 */         } else if (key.equals(""id"")) {
/*  435 */           id = value;
/*  436 */         } else if (key.equals(""basedir"")) {
/*  437 */           baseDir = value;
/*      */         } else {
/*  439 */           throw new SAXParseException(""Unexpected attribute \"""" + attrs.getName(i) + ""\"""", this.helperImpl.locator);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  444 */       if (def != null && !def.equals("""")) {
/*  445 */         this.helperImpl.project.setDefaultTarget(def);
/*      */       } else {
/*  447 */         throw new BuildException(""The default attribute is required"");
/*      */       } 
/*      */       
/*  450 */       if (name != null) {
/*  451 */         this.helperImpl.project.setName(name);
/*  452 */         this.helperImpl.project.addReference(name, this.helperImpl.project);
/*      */       } 
/*      */       
/*  455 */       if (id != null) {
/*  456 */         this.helperImpl.project.addReference(id, this.helperImpl.project);
/*      */       }
/*      */       
/*  459 */       if (this.helperImpl.project.getProperty(""basedir"") != null) {
/*  460 */         this.helperImpl.project.setBasedir(this.helperImpl.project.getProperty(""basedir""));
/*      */       }
/*  462 */       else if (baseDir == null) {
/*  463 */         this.helperImpl.project.setBasedir(this.helperImpl.buildFileParent.getAbsolutePath());
/*      */       
/*      */       }
/*  466 */       else if ((new File(baseDir)).isAbsolute()) {
/*  467 */         this.helperImpl.project.setBasedir(baseDir);
/*      */       } else {
/*  469 */         File resolvedBaseDir = this.helperImpl.project.resolveFile(baseDir, this.helperImpl.buildFileParent);
/*      */         
/*  471 */         this.helperImpl.project.setBaseDir(resolvedBaseDir);
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  476 */       this.helperImpl.project.addTarget("""", this.helperImpl.implicitTarget);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  495 */       if (name.equals(""target"")) {
/*  496 */         handleTarget(name, attrs);
/*      */       } else {
/*  498 */         ProjectHelperImpl.handleElement(this.helperImpl, this, this.helperImpl.implicitTarget, name, attrs);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  516 */     private void handleTarget(String tag, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.TargetHandler(this.helperImpl, this)).init(tag, attrs); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class TargetHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  535 */     public TargetHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { super(helperImpl, parentHandler); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*  556 */       String name = null;
/*  557 */       String depends = """";
/*  558 */       String ifCond = null;
/*  559 */       String unlessCond = null;
/*  560 */       String id = null;
/*  561 */       String description = null;
/*      */       
/*  563 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  564 */         String key = attrs.getName(i);
/*  565 */         String value = attrs.getValue(i);
/*      */         
/*  567 */         if (key.equals(""name"")) {
/*  568 */           name = value;
/*  569 */           if (name.equals("""")) {
/*  570 */             throw new BuildException(""name attribute must not be empty"", new Location(this.helperImpl.locator));
/*      */           
/*      */           }
/*      */         }
/*  574 */         else if (key.equals(""depends"")) {
/*  575 */           depends = value;
/*  576 */         } else if (key.equals(""if"")) {
/*  577 */           ifCond = value;
/*  578 */         } else if (key.equals(""unless"")) {
/*  579 */           unlessCond = value;
/*  580 */         } else if (key.equals(""id"")) {
/*  581 */           id = value;
/*  582 */         } else if (key.equals(""description"")) {
/*  583 */           description = value;
/*      */         } else {
/*  585 */           throw new SAXParseException(""Unexpected attribute \"""" + key + ""\"""", this.helperImpl.locator);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  590 */       if (name == null) {
/*  591 */         throw new SAXParseException(""target element appears without a name attribute"", this.helperImpl.locator);
/*      */       }
/*      */ 
/*      */       
/*  595 */       this.target = new Target();
/*      */ 
/*      */       
/*  598 */       this.target.addDependency("""");
/*      */       
/*  600 */       this.target.setName(name);
/*  601 */       this.target.setIf(ifCond);
/*  602 */       this.target.setUnless(unlessCond);
/*  603 */       this.target.setDescription(description);
/*  604 */       this.helperImpl.project.addTarget(name, this.target);
/*      */       
/*  606 */       if (id != null && !id.equals("""")) {
/*  607 */         this.helperImpl.project.addReference(id, this.target);
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  612 */       if (depends.length() > 0) {
/*  613 */         this.target.setDepends(depends);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  629 */     public void startElement(String name, AttributeList attrs) throws SAXParseException { ProjectHelperImpl.handleElement(this.helperImpl, this, this.target, name, attrs); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static void handleElement(ProjectHelperImpl helperImpl, DocumentHandler parent, Target target, String elementName, AttributeList attrs) throws SAXParseException {
/*  646 */     if (elementName.equals(""description"")) {
/*  647 */       new DescriptionHandler(helperImpl, parent);
/*  648 */     } else if (helperImpl.project.getDataTypeDefinitions().get(elementName) != null) {
/*      */       
/*  650 */       (new DataTypeHandler(helperImpl, parent, target)).init(elementName, attrs);
/*      */     } else {
/*      */       
/*  653 */       (new TaskHandler(helperImpl, parent, (TaskContainer)target, null, target)).init(elementName, attrs);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class DescriptionHandler
/*      */     extends AbstractHandler
/*      */   {
/*  672 */     public DescriptionHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { super(helperImpl, parentHandler); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) {
/*  684 */       String text = new String(buf, start, count);
/*  685 */       String currentDescription = this.helperImpl.project.getDescription();
/*  686 */       if (currentDescription == null) {
/*  687 */         this.helperImpl.project.setDescription(text);
/*      */       } else {
/*  689 */         this.helperImpl.project.setDescription(currentDescription + text);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class TaskHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private TaskContainer container;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Task task;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private RuntimeConfigurable parentWrapper;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  721 */     private RuntimeConfigurable wrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public TaskHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, TaskContainer container, RuntimeConfigurable parentWrapper, Target target) {
/*  742 */       super(helperImpl, parentHandler);
/*  743 */       this.container = container;
/*  744 */       this.parentWrapper = parentWrapper;
/*  745 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*      */       try {
/*  766 */         this.task = this.helperImpl.project.createTask(tag);
/*  767 */       } catch (BuildException e) {}
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  772 */       if (this.task == null) {
/*  773 */         this.task = (Task)new UnknownElement(tag);
/*  774 */         this.task.setProject(this.helperImpl.project);
/*      */         
/*  776 */         this.task.setTaskName(tag);
/*      */       } 
/*      */       
/*  779 */       this.task.setLocation(new Location(this.helperImpl.locator));
/*  780 */       this.helperImpl.configureId(this.task, attrs);
/*      */       
/*  782 */       this.task.setOwningTarget(this.target);
/*  783 */       this.container.addTask(this.task);
/*  784 */       this.task.init();
/*  785 */       this.wrapper = this.task.getRuntimeConfigurableWrapper();
/*  786 */       this.wrapper.setAttributes(attrs);
/*  787 */       if (this.parentWrapper != null) {
/*  788 */         this.parentWrapper.addChild(this.wrapper);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  801 */     public void characters(char[] buf, int start, int count) { this.wrapper.addText(buf, start, count); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  818 */       if (this.task instanceof TaskContainer) {
/*      */         
/*  820 */         (new TaskHandler(this.helperImpl, this, (TaskContainer)this.task, this.wrapper, this.target)).init(name, attrs);
/*      */       } else {
/*      */         
/*  823 */         (new ProjectHelperImpl.NestedElementHandler(this.helperImpl, this, this.task, this.wrapper, this.target)).init(name, attrs);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class NestedElementHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Object parent;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Object child;
/*      */ 
/*      */ 
/*      */     
/*      */     private RuntimeConfigurable parentWrapper;
/*      */ 
/*      */ 
/*      */     
/*  848 */     private RuntimeConfigurable childWrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public NestedElementHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, Object parent, RuntimeConfigurable parentWrapper, Target target) {
/*  873 */       super(helperImpl, parentHandler);
/*      */       
/*  875 */       if (parent instanceof TypeAdapter) {
/*  876 */         this.parent = ((TypeAdapter)parent).getProxy();
/*      */       } else {
/*  878 */         this.parent = parent;
/*      */       } 
/*  880 */       this.parentWrapper = parentWrapper;
/*  881 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String propType, AttributeList attrs) throws SAXParseException {
/*  901 */       Class parentClass = this.parent.getClass();
/*  902 */       IntrospectionHelper ih = IntrospectionHelper.getHelper(parentClass);
/*      */ 
/*      */       
/*      */       try {
/*  906 */         String elementName = propType.toLowerCase(Locale.US);
/*  907 */         if (this.parent instanceof UnknownElement) {
/*  908 */           UnknownElement uc = new UnknownElement(elementName);
/*  909 */           uc.setProject(this.helperImpl.project);
/*  910 */           ((UnknownElement)this.parent).addChild(uc);
/*  911 */           this.child = uc;
/*      */         } else {
/*  913 */           this.child = ih.createElement(this.helperImpl.project, this.parent, elementName);
/*      */         } 
/*      */         
/*  916 */         this.helperImpl.configureId(this.child, attrs);
/*      */         
/*  918 */         this.childWrapper = new RuntimeConfigurable(this.child, propType);
/*  919 */         this.childWrapper.setAttributes(attrs);
/*  920 */         this.parentWrapper.addChild(this.childWrapper);
/*      */       } catch (BuildException exc) {
/*  922 */         throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  935 */     public void characters(char[] buf, int start, int count) { this.childWrapper.addText(buf, start, count); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  952 */       if (this.child instanceof TaskContainer) {
/*      */ 
/*      */         
/*  955 */         (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, (TaskContainer)this.child, this.childWrapper, this.target)).init(name, attrs);
/*      */       } else {
/*      */         
/*  958 */         (new NestedElementHandler(this.helperImpl, this, this.child, this.childWrapper, this.target)).init(name, attrs);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   static class DataTypeHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */     
/*      */     private Object element;
/*      */     
/*  973 */     private RuntimeConfigurable wrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public DataTypeHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, Target target) {
/*  987 */       super(helperImpl, parentHandler);
/*  988 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String propType, AttributeList attrs) throws SAXParseException {
/*      */       try {
/* 1009 */         this.element = this.helperImpl.project.createDataType(propType);
/* 1010 */         if (this.element == null) {
/* 1011 */           throw new BuildException(""Unknown data type "" + propType);
/*      */         }
/*      */         
/* 1014 */         this.wrapper = new RuntimeConfigurable(this.element, propType);
/* 1015 */         this.wrapper.setAttributes(attrs);
/* 1016 */         this.target.addDataType(this.wrapper);
/*      */       } catch (BuildException exc) {
/* 1018 */         throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1033 */     public void characters(char[] buf, int start, int count) { this.wrapper.addText(buf, start, count); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1049 */     public void startElement(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.NestedElementHandler(this.helperImpl, this, this.element, this.wrapper, this.target)).init(name, attrs); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void configureId(Object target, AttributeList attr) {
/* 1064 */     String id = attr.getValue(""id"");
/* 1065 */     if (id != null)
/* 1066 */       this.project.addReference(id, target); 
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\helper\ProjectHelperImpl.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.DefaultInputHandler,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ import java.io.DataInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.KeepAliveInputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultInputHandler
/*     */   implements InputHandler
/*     */ {
/*     */   public void handleInput(InputRequest request) throws BuildException {
/*  86 */     String prompt = getPrompt(request);
/*  87 */     DataInputStream in = null;
/*     */     try {
/*  89 */       in = new DataInputStream((InputStream)new KeepAliveInputStream(getInputStream()));
/*     */       
/*     */       do {
/*  92 */         System.err.println(prompt);
/*     */         try {
/*  94 */           String input = in.readLine();
/*  95 */           request.setInput(input);
/*     */         } catch (IOException e) {
/*  97 */           throw new BuildException(""Failed to read input from Console."", e);
/*     */         }
/*     */       
/* 100 */       } while (!request.isInputValid());
/*     */     } finally {
/* 102 */       if (in != null) {
/*     */         try {
/* 104 */           in.close();
/*     */         } catch (IOException e) {
/* 106 */           throw new BuildException(""Failed to close input."", e);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getPrompt(InputRequest request) {
/* 123 */     String prompt = request.getPrompt();
/* 124 */     if (request instanceof MultipleChoiceInputRequest) {
/* 125 */       StringBuffer sb = new StringBuffer(prompt);
/* 126 */       sb.append(""("");
/* 127 */       Enumeration e = ((MultipleChoiceInputRequest)request).getChoices().elements();
/*     */       
/* 129 */       boolean first = true;
/* 130 */       while (e.hasMoreElements()) {
/* 131 */         if (!first) {
/* 132 */           sb.append("","");
/*     */         }
/* 134 */         sb.append(e.nextElement());
/* 135 */         first = false;
/*     */       } 
/* 137 */       sb.append("")"");
/* 138 */       prompt = sb.toString();
/*     */     } 
/* 140 */     return prompt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   protected InputStream getInputStream() { return System.in; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\input\DefaultInputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.InputHandler,"package org.apache.tools.ant.input;
import org.apache.tools.ant.BuildException;
public interface InputHandler {
  void handleInput(InputRequest paramInputRequest) throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\input\InputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.InputRequest,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class InputRequest
/*     */ {
/*     */   private String prompt;
/*     */   private String input;
/*     */   
/*     */   public InputRequest(String prompt) {
/*  72 */     if (prompt == null) {
/*  73 */       throw new IllegalArgumentException(""prompt must not be null"");
/*     */     }
/*     */     
/*  76 */     this.prompt = prompt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public String getPrompt() { return this.prompt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setInput(String input) { this.input = input; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public boolean isInputValid() { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public String getInput() { return this.input; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\input\InputRequest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.MultipleChoiceInputRequest,"/*    */ package org.apache.tools.ant.input;
/*    */ 
/*    */ import java.util.Vector;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MultipleChoiceInputRequest
/*    */   extends InputRequest
/*    */ {
/* 67 */   private Vector choices = new Vector();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public MultipleChoiceInputRequest(String prompt, Vector choices) {
/* 75 */     super(prompt);
/* 76 */     if (choices == null) {
/* 77 */       throw new IllegalArgumentException(""choices must not be null"");
/*    */     }
/* 79 */     this.choices = choices;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public Vector getChoices() { return this.choices; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 93 */   public boolean isInputValid() { return this.choices.contains(getInput()); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\input\MultipleChoiceInputRequest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.PropertyFileInputHandler,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyFileInputHandler
/*     */   implements InputHandler
/*     */ {
/*  71 */   private Properties props = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String FILE_NAME_KEY = ""ant.input.properties"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleInput(InputRequest request) throws BuildException {
/*  91 */     readProps();
/*     */     
/*  93 */     Object o = this.props.get(request.getPrompt());
/*  94 */     if (o == null) {
/*  95 */       throw new BuildException(""Unable to find input for '"" + request.getPrompt() + ""'"");
/*     */     }
/*     */     
/*  98 */     request.setInput(o.toString());
/*  99 */     if (!request.isInputValid()) {
/* 100 */       throw new BuildException(""Found invalid input "" + o + "" for '"" + request.getPrompt() + ""'"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private synchronized void readProps() throws BuildException {
/* 109 */     if (this.props == null) {
/* 110 */       String propsFile = System.getProperty(""ant.input.properties"");
/* 111 */       if (propsFile == null) {
/* 112 */         throw new BuildException(""System property ant.input.properties for PropertyFileInputHandler not set"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 118 */       this.props = new Properties();
/*     */       
/*     */       try {
/* 121 */         this.props.load(new FileInputStream(propsFile));
/*     */       } catch (IOException e) {
/* 123 */         throw new BuildException(""Couldn't load "" + propsFile, e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\input\PropertyFileInputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.listener.AnsiColorLogger,"/*     */ package org.apache.tools.ant.listener;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class AnsiColorLogger
/*     */   extends DefaultLogger
/*     */ {
/*     */   private static final int ATTR_DIM = 2;
/*     */   private static final int FG_RED = 31;
/*     */   private static final int FG_GREEN = 32;
/*     */   private static final int FG_BLUE = 34;
/*     */   private static final int FG_MAGENTA = 35;
/*     */   private static final int FG_CYAN = 36;
/*     */   private static final String PREFIX = ""\033["";
/*     */   private static final String SUFFIX = ""m"";
/*     */   private static final char SEPARATOR = ';';
/*     */   private static final String END_COLOR = ""\033[m"";
/* 168 */   private String errColor = ""\033[2;31m"";
/*     */   
/* 170 */   private String warnColor = ""\033[2;35m"";
/*     */   
/* 172 */   private String infoColor = ""\033[2;36m"";
/*     */   
/* 174 */   private String verboseColor = ""\033[2;32m"";
/*     */   
/* 176 */   private String debugColor = ""\033[2;34m"";
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean colorsSet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void setColors() {
/* 186 */     String userColorFile = System.getProperty(""ant.logger.defaults"");
/* 187 */     String systemColorFile = ""/org/apache/tools/ant/listener/defaults.properties"";
/*     */ 
/*     */     
/* 190 */     InputStream in = null;
/*     */     
/*     */     try {
/* 193 */       Properties prop = new Properties();
/*     */       
/* 195 */       if (userColorFile != null) {
/* 196 */         in = new FileInputStream(userColorFile);
/*     */       } else {
/* 198 */         in = getClass().getResourceAsStream(systemColorFile);
/*     */       } 
/*     */       
/* 201 */       if (in != null) {
/* 202 */         prop.load(in);
/*     */       }
/*     */       
/* 205 */       String err = prop.getProperty(""AnsiColorLogger.ERROR_COLOR"");
/* 206 */       String warn = prop.getProperty(""AnsiColorLogger.WARNING_COLOR"");
/* 207 */       String info = prop.getProperty(""AnsiColorLogger.INFO_COLOR"");
/* 208 */       String verbose = prop.getProperty(""AnsiColorLogger.VERBOSE_COLOR"");
/* 209 */       String debug = prop.getProperty(""AnsiColorLogger.DEBUG_COLOR"");
/* 210 */       if (err != null) {
/* 211 */         this.errColor = ""\033["" + err + ""m"";
/*     */       }
/* 213 */       if (warn != null) {
/* 214 */         this.warnColor = ""\033["" + warn + ""m"";
/*     */       }
/* 216 */       if (info != null) {
/* 217 */         this.infoColor = ""\033["" + info + ""m"";
/*     */       }
/* 219 */       if (verbose != null) {
/* 220 */         this.verboseColor = ""\033["" + verbose + ""m"";
/*     */       }
/* 222 */       if (debug != null) {
/* 223 */         this.debugColor = ""\033["" + debug + ""m"";
/*     */       }
/* 225 */     } catch (IOException ioe) {
/*     */     
/*     */     } finally {
/* 228 */       if (in != null) {
/*     */         try {
/* 230 */           in.close();
/* 231 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void printMessage(String message, PrintStream stream, int priority) {
/* 244 */     if (message != null && stream != null) {
/* 245 */       if (!this.colorsSet) {
/* 246 */         setColors();
/* 247 */         this.colorsSet = true;
/*     */       } 
/*     */       
/* 250 */       StringBuffer msg = new StringBuffer(message);
/* 251 */       switch (priority) {
/*     */         case 0:
/* 253 */           msg.insert(0, this.errColor);
/* 254 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 1:
/* 257 */           msg.insert(0, this.warnColor);
/* 258 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 2:
/* 261 */           msg.insert(0, this.infoColor);
/* 262 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 3:
/* 265 */           msg.insert(0, this.verboseColor);
/* 266 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 4:
/* 269 */           msg.insert(0, this.debugColor);
/* 270 */           msg.append(""\033[m"");
/*     */           break;
/*     */       } 
/* 273 */       String strmessage = msg.toString();
/* 274 */       stream.println(strmessage);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\listener\AnsiColorLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.listener.MailLogger,"/*     */ package org.apache.tools.ant.listener;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.email.EmailAddress;
/*     */ import org.apache.tools.ant.taskdefs.email.Mailer;
/*     */ import org.apache.tools.ant.taskdefs.email.Message;
/*     */ import org.apache.tools.ant.util.DateUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ import org.apache.tools.mail.MailMessage;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MailLogger
/*     */   extends DefaultLogger
/*     */ {
/* 109 */   private StringBuffer buffer = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 117 */     super.buildFinished(event);
/*     */     
/* 119 */     Project project = event.getProject();
/* 120 */     Hashtable properties = project.getProperties();
/*     */ 
/*     */ 
/*     */     
/* 124 */     Properties fileProperties = new Properties();
/* 125 */     String filename = (String)properties.get(""MailLogger.properties.file"");
/* 126 */     if (filename != null) {
/* 127 */       InputStream is = null;
/*     */       try {
/* 129 */         is = new FileInputStream(filename);
/* 130 */         fileProperties.load(is);
/* 131 */       } catch (IOException ioe) {
/*     */       
/*     */       } finally {
/* 134 */         if (is != null) {
/*     */           try {
/* 136 */             is.close();
/* 137 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 144 */     for (Enumeration e = fileProperties.keys(); e.hasMoreElements(); ) {
/* 145 */       String key = e.nextElement();
/* 146 */       String value = fileProperties.getProperty(key);
/* 147 */       properties.put(key, project.replaceProperties(value));
/*     */     } 
/*     */     
/* 150 */     boolean success = (event.getException() == null);
/* 151 */     String prefix = success ? ""success"" : ""failure"";
/*     */     
/*     */     try {
/* 154 */       boolean notify = Project.toBoolean(getValue(properties, prefix + "".notify"", ""on""));
/*     */ 
/*     */       
/* 157 */       if (!notify) {
/*     */         return;
/*     */       }
/*     */       
/* 161 */       String mailhost = getValue(properties, ""mailhost"", ""localhost"");
/* 162 */       int port = Integer.parseInt(getValue(properties, ""port"", String.valueOf(25)));
/*     */       
/* 164 */       String user = getValue(properties, ""user"", """");
/* 165 */       String password = getValue(properties, ""password"", """");
/* 166 */       boolean ssl = Project.toBoolean(getValue(properties, ""ssl"", ""off""));
/*     */       
/* 168 */       String from = getValue(properties, ""from"", null);
/* 169 */       String replytoList = getValue(properties, ""replyto"", """");
/* 170 */       String toList = getValue(properties, prefix + "".to"", null);
/* 171 */       String subject = getValue(properties, prefix + "".subject"", success ? ""Build Success"" : ""Build Failure"");
/*     */       
/* 173 */       if (user.equals("""") && password.equals("""") && !ssl) {
/* 174 */         sendMail(mailhost, port, from, replytoList, toList, subject, this.buffer.substring(0));
/*     */       } else {
/*     */         
/* 177 */         sendMimeMail(event.getProject(), mailhost, port, user, password, ssl, from, replytoList, toList, subject, this.buffer.substring(0));
/*     */       }
/*     */     
/*     */     } catch (Exception e) {
/*     */       
/* 182 */       System.out.println(""MailLogger failed to send e-mail!"");
/* 183 */       e.printStackTrace(System.err);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   protected void log(String message) { this.buffer.append(message).append(StringUtils.LINE_SEP); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getValue(Hashtable properties, String name, String defaultValue) throws Exception {
/* 212 */     String propertyName = ""MailLogger."" + name;
/* 213 */     String value = (String)properties.get(propertyName);
/*     */     
/* 215 */     if (value == null) {
/* 216 */       value = defaultValue;
/*     */     }
/*     */     
/* 219 */     if (value == null) {
/* 220 */       throw new Exception(""Missing required parameter: "" + propertyName);
/*     */     }
/*     */     
/* 223 */     return value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sendMail(String mailhost, int port, String from, String replyToList, String toList, String subject, String message) throws IOException {
/* 240 */     MailMessage mailMessage = new MailMessage(mailhost, port);
/* 241 */     mailMessage.setHeader(""Date"", DateUtils.getDateForHeader());
/*     */     
/* 243 */     mailMessage.from(from);
/* 244 */     if (!replyToList.equals("""")) {
/* 245 */       StringTokenizer t = new StringTokenizer(replyToList, "", "", false);
/* 246 */       while (t.hasMoreTokens()) {
/* 247 */         mailMessage.replyto(t.nextToken());
/*     */       }
/*     */     } 
/* 250 */     StringTokenizer t = new StringTokenizer(toList, "", "", false);
/* 251 */     while (t.hasMoreTokens()) {
/* 252 */       mailMessage.to(t.nextToken());
/*     */     }
/*     */     
/* 255 */     mailMessage.setSubject(subject);
/*     */     
/* 257 */     PrintStream ps = mailMessage.getPrintStream();
/* 258 */     ps.println(message);
/*     */     
/* 260 */     mailMessage.sendAndClose();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sendMimeMail(Project project, String host, int port, String user, String password, boolean ssl, String from, String replyToString, String toString, String subject, String message) {
/* 282 */     Mailer mailer = null;
/*     */     try {
/* 284 */       mailer = (Mailer)Class.forName(""org.apache.tools.ant.taskdefs.email.MimeMailer"").newInstance();
/*     */     }
/*     */     catch (Throwable e) {
/*     */       
/* 288 */       log(""Failed to initialise MIME mail: "" + e.getMessage());
/*     */       return;
/*     */     } 
/* 291 */     Vector replyToList = vectorizeEmailAddresses(replyToString);
/* 292 */     mailer.setHost(host);
/* 293 */     mailer.setPort(port);
/* 294 */     mailer.setUser(user);
/* 295 */     mailer.setPassword(password);
/* 296 */     mailer.setSSL(ssl);
/* 297 */     Message mymessage = new Message(message);
/* 298 */     mymessage.setProject(project);
/* 299 */     mailer.setMessage(mymessage);
/* 300 */     mailer.setFrom(new EmailAddress(from));
/* 301 */     mailer.setReplyToList(replyToList);
/* 302 */     Vector toList = vectorizeEmailAddresses(toString);
/* 303 */     mailer.setToList(toList);
/* 304 */     mailer.setCcList(new Vector());
/* 305 */     mailer.setBccList(new Vector());
/* 306 */     mailer.setFiles(new Vector());
/* 307 */     mailer.setSubject(subject);
/* 308 */     mailer.send();
/*     */   }
/*     */   private Vector vectorizeEmailAddresses(String listString) {
/* 311 */     Vector emailList = new Vector();
/* 312 */     StringTokenizer tokens = new StringTokenizer(listString, "","");
/* 313 */     while (tokens.hasMoreTokens()) {
/* 314 */       emailList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/* 316 */     return emailList;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\listener\MailLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.loader.AntClassLoader2,"/*     */ package org.apache.tools.ant.loader;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.jar.Attributes;
/*     */ import java.util.jar.JarFile;
/*     */ import java.util.jar.Manifest;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.Manifest;
/*     */ import org.apache.tools.ant.taskdefs.ManifestException;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntClassLoader2
/*     */   extends AntClassLoader
/*     */ {
/*  88 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Class defineClassFromData(File container, byte[] classData, String className) throws IOException {
/* 107 */     definePackage(container, className);
/* 108 */     return defineClass(className, classData, 0, classData.length, Project.class.getProtectionDomain());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Manifest getJarManifest(File container) throws IOException {
/* 125 */     if (container.isDirectory()) {
/* 126 */       return null;
/*     */     }
/* 128 */     JarFile jarFile = null;
/*     */     try {
/* 130 */       jarFile = new JarFile(container);
/* 131 */       return jarFile.getManifest();
/*     */     } finally {
/* 133 */       if (jarFile != null) {
/* 134 */         jarFile.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void definePackage(File container, String className) throws IOException {
/* 151 */     int classIndex = className.lastIndexOf('.');
/* 152 */     if (classIndex == -1) {
/*     */       return;
/*     */     }
/*     */     
/* 156 */     String packageName = className.substring(0, classIndex);
/* 157 */     if (getPackage(packageName) != null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 163 */     Manifest manifest = getJarManifest(container);
/*     */     
/* 165 */     if (manifest == null) {
/* 166 */       definePackage(packageName, null, null, null, null, null, null, null);
/*     */     } else {
/*     */       
/* 169 */       definePackage(container, packageName, manifest);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void definePackage(File container, String packageName, Manifest manifest) {
/* 183 */     String sectionName = packageName.replace('.', '/') + ""/"";
/*     */     
/* 185 */     String specificationTitle = null;
/* 186 */     String specificationVendor = null;
/* 187 */     String specificationVersion = null;
/* 188 */     String implementationTitle = null;
/* 189 */     String implementationVendor = null;
/* 190 */     String implementationVersion = null;
/* 191 */     String sealedString = null;
/* 192 */     URL sealBase = null;
/*     */     
/* 194 */     Attributes sectionAttributes = manifest.getAttributes(sectionName);
/* 195 */     if (sectionAttributes != null) {
/* 196 */       specificationTitle = sectionAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);
/*     */       
/* 198 */       specificationVendor = sectionAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);
/*     */       
/* 200 */       specificationVersion = sectionAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);
/*     */       
/* 202 */       implementationTitle = sectionAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);
/*     */       
/* 204 */       implementationVendor = sectionAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);
/*     */       
/* 206 */       implementationVersion = sectionAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);
/*     */       
/* 208 */       sealedString = sectionAttributes.getValue(Attributes.Name.SEALED);
/*     */     } 
/*     */ 
/*     */     
/* 212 */     Attributes mainAttributes = manifest.getMainAttributes();
/* 213 */     if (mainAttributes != null) {
/* 214 */       if (specificationTitle == null) {
/* 215 */         specificationTitle = mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);
/*     */       }
/*     */       
/* 218 */       if (specificationVendor == null) {
/* 219 */         specificationVendor = mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);
/*     */       }
/*     */       
/* 222 */       if (specificationVersion == null) {
/* 223 */         specificationVersion = mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);
/*     */       }
/*     */       
/* 226 */       if (implementationTitle == null) {
/* 227 */         implementationTitle = mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);
/*     */       }
/*     */       
/* 230 */       if (implementationVendor == null) {
/* 231 */         implementationVendor = mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);
/*     */       }
/*     */       
/* 234 */       if (implementationVersion == null) {
/* 235 */         implementationVersion = mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);
/*     */       }
/*     */       
/* 238 */       if (sealedString == null) {
/* 239 */         sealedString = mainAttributes.getValue(Attributes.Name.SEALED);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 244 */     if (sealedString != null && sealedString.equalsIgnoreCase(""true"")) {
/*     */       try {
/* 246 */         sealBase = new URL(""file:"" + container.getPath());
/* 247 */       } catch (MalformedURLException e) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 252 */     definePackage(packageName, specificationTitle, specificationVersion, specificationVendor, implementationTitle, implementationVersion, implementationVendor, sealBase);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addPathFile(File pathComponent) throws IOException {
/* 269 */     super.addPathFile(pathComponent);
/*     */     
/* 271 */     if (pathComponent.isDirectory()) {
/*     */       return;
/*     */     }
/*     */     
/* 275 */     String classpath = null;
/* 276 */     ZipFile jarFile = null;
/* 277 */     InputStream manifestStream = null;
/*     */     try {
/* 279 */       jarFile = new ZipFile(pathComponent);
/* 280 */       manifestStream = jarFile.getInputStream(new ZipEntry(""META-INF/MANIFEST.MF""));
/*     */ 
/*     */       
/* 283 */       if (manifestStream == null) {
/*     */         return;
/*     */       }
/* 286 */       Reader manifestReader = new InputStreamReader(manifestStream, ""UTF-8"");
/*     */       
/* 288 */       Manifest manifest = new Manifest(manifestReader);
/*     */       
/* 290 */       classpath = manifest.getMainSection().getAttributeValue(""Class-Path"");
/*     */     
/*     */     }
/* 293 */     catch (ManifestException e) {
/*     */     
/*     */     } finally {
/* 296 */       if (manifestStream != null) {
/* 297 */         manifestStream.close();
/*     */       }
/* 299 */       if (jarFile != null) {
/* 300 */         jarFile.close();
/*     */       }
/*     */     } 
/*     */     
/* 304 */     if (classpath != null) {
/* 305 */       URL baseURL = this.fileUtils.getFileURL(pathComponent);
/* 306 */       StringTokenizer st = new StringTokenizer(classpath);
/* 307 */       while (st.hasMoreTokens()) {
/* 308 */         String classpathElement = st.nextToken();
/* 309 */         URL libraryURL = new URL(baseURL, classpathElement);
/* 310 */         if (!libraryURL.getProtocol().equals(""file"")) {
/* 311 */           log(""Skipping jar library "" + classpathElement + "" since only relative URLs are supported by this"" + "" loader"", 3);
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 316 */         File libraryFile = new File(libraryURL.getFile());
/* 317 */         if (libraryFile.exists() && !isInPath(libraryFile))
/* 318 */           addPathFile(libraryFile); 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\loader\AntClassLoader2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AbstractCvsTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractCvsTask
/*     */   extends Task
/*     */ {
/*     */   public static final int DEFAULT_COMPRESSION_LEVEL = 3;
/*     */   private static final int MAXIMUM_COMRESSION_LEVEL = 9;
/*  95 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */   
/*  98 */   private Vector vecCommandlines = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsRoot;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsRsh;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsPackage;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String DEFAULT_COMMAND = ""checkout"";
/*     */ 
/*     */ 
/*     */   
/* 122 */   private String command = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean reallyquiet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   private int compression = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean noexec = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   private int port = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   private File passFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File dest;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File error;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failOnError = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ExecuteStreamHandler executeStreamHandler;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private OutputStream outputStream;
/*     */ 
/*     */ 
/*     */   
/*     */   private OutputStream errorStream;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setExecuteStreamHandler(ExecuteStreamHandler handler) { this.executeStreamHandler = handler; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteStreamHandler getExecuteStreamHandler() {
/* 205 */     if (this.executeStreamHandler == null) {
/* 206 */       setExecuteStreamHandler(new PumpStreamHandler(getOutputStream(), getErrorStream()));
/*     */     }
/*     */ 
/*     */     
/* 210 */     return this.executeStreamHandler;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   protected void setOutputStream(OutputStream outputStream) { this.outputStream = outputStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected OutputStream getOutputStream() {
/* 232 */     if (this.outputStream == null)
/*     */     {
/* 234 */       if (this.output != null) {
/*     */         try {
/* 236 */           setOutputStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output.getPath(), this.append))));
/*     */         
/*     */         }
/*     */         catch (IOException e) {
/*     */ 
/*     */           
/* 242 */           throw new BuildException(e, getLocation());
/*     */         } 
/*     */       } else {
/* 245 */         setOutputStream(new LogOutputStream(this, 2));
/*     */       } 
/*     */     }
/*     */     
/* 249 */     return this.outputStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   protected void setErrorStream(OutputStream errorStream) { this.errorStream = errorStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected OutputStream getErrorStream() {
/* 271 */     if (this.errorStream == null)
/*     */     {
/* 273 */       if (this.error != null) {
/*     */         
/*     */         try {
/* 276 */           setErrorStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(this.error.getPath(), this.append))));
/*     */         
/*     */         }
/*     */         catch (IOException e) {
/*     */           
/* 281 */           throw new BuildException(e, getLocation());
/*     */         } 
/*     */       } else {
/* 284 */         setErrorStream(new LogOutputStream(this, 1));
/*     */       } 
/*     */     }
/*     */     
/* 288 */     return this.errorStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runCommand(Commandline toExecute) throws BuildException {
/* 304 */     Environment env = new Environment();
/*     */     
/* 306 */     if (this.port > 0) {
/* 307 */       Environment.Variable var = new Environment.Variable();
/* 308 */       var.setKey(""CVS_CLIENT_PORT"");
/* 309 */       var.setValue(String.valueOf(this.port));
/* 310 */       env.addVariable(var);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 317 */     if (this.passFile == null) {
/*     */       
/* 319 */       File defaultPassFile = new File(System.getProperty(""cygwin.user.home"", System.getProperty(""user.home"")) + File.separatorChar + "".cvspass"");
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 324 */       if (defaultPassFile.exists()) {
/* 325 */         setPassfile(defaultPassFile);
/*     */       }
/*     */     } 
/*     */     
/* 329 */     if (this.passFile != null) {
/* 330 */       if (this.passFile.isFile() && this.passFile.canRead()) {
/* 331 */         Environment.Variable var = new Environment.Variable();
/* 332 */         var.setKey(""CVS_PASSFILE"");
/* 333 */         var.setValue(String.valueOf(this.passFile));
/* 334 */         env.addVariable(var);
/* 335 */         log(""Using cvs passfile: "" + String.valueOf(this.passFile), 2);
/*     */       }
/* 337 */       else if (!this.passFile.canRead()) {
/* 338 */         log(""cvs passfile: "" + String.valueOf(this.passFile) + "" ignored as it is not readable"", 1);
/*     */       }
/*     */       else {
/*     */         
/* 342 */         log(""cvs passfile: "" + String.valueOf(this.passFile) + "" ignored as it is not a file"", 1);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 348 */     if (this.cvsRsh != null) {
/* 349 */       Environment.Variable var = new Environment.Variable();
/* 350 */       var.setKey(""CVS_RSH"");
/* 351 */       var.setValue(String.valueOf(this.cvsRsh));
/* 352 */       env.addVariable(var);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 359 */     Execute exe = new Execute(getExecuteStreamHandler(), null);
/*     */     
/* 361 */     exe.setAntRun(getProject());
/* 362 */     if (this.dest == null) {
/* 363 */       this.dest = getProject().getBaseDir();
/*     */     }
/*     */     
/* 366 */     if (!this.dest.exists()) {
/* 367 */       this.dest.mkdirs();
/*     */     }
/*     */     
/* 370 */     exe.setWorkingDirectory(this.dest);
/* 371 */     exe.setCommandline(toExecute.getCommandline());
/* 372 */     exe.setEnvironment(env.getVariables());
/*     */     
/*     */     try {
/* 375 */       String actualCommandLine = executeToString(exe);
/* 376 */       log(actualCommandLine, 3);
/* 377 */       int retCode = exe.execute();
/* 378 */       log(""retCode="" + retCode, 4);
/*     */       
/* 380 */       if (this.failOnError && Execute.isFailure(retCode)) {
/* 381 */         throw new BuildException(""cvs exited with error code "" + retCode + StringUtils.LINE_SEP + ""Command line was ["" + actualCommandLine + ""]"", getLocation());
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     catch (IOException e) {
/*     */       
/* 388 */       if (this.failOnError) {
/* 389 */         throw new BuildException(e, getLocation());
/*     */       }
/* 391 */       log(""Caught exception: "" + e.getMessage(), 1);
/*     */     } catch (BuildException e) {
/*     */       
/* 394 */       if (this.failOnError) {
/* 395 */         throw e;
/*     */       }
/* 397 */       Object object = e.getException();
/* 398 */       if (object == null) {
/* 399 */         object = e;
/*     */       }
/* 401 */       log(""Caught exception: "" + object.getMessage(), 1);
/*     */     } catch (Exception e) {
/*     */       
/* 404 */       if (this.failOnError) {
/* 405 */         throw new BuildException(e, getLocation());
/*     */       }
/* 407 */       log(""Caught exception: "" + e.getMessage(), 1);
/*     */     } finally {
/*     */       
/* 410 */       if (this.outputStream != null) {
/*     */         try {
/* 412 */           this.outputStream.close();
/* 413 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 417 */       if (this.errorStream != null) {
/*     */         try {
/* 419 */           this.errorStream.close();
/* 420 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 433 */     String savedCommand = getCommand();
/*     */     
/* 435 */     if (getCommand() == null && this.vecCommandlines.size() == 0)
/*     */     {
/* 437 */       setCommand(""checkout"");
/*     */     }
/*     */     
/* 440 */     String c = getCommand();
/* 441 */     Commandline cloned = null;
/* 442 */     if (c != null) {
/* 443 */       cloned = (Commandline)this.cmd.clone();
/* 444 */       cloned.createArgument(true).setLine(c);
/* 445 */       addConfiguredCommandline(cloned, true);
/*     */     } 
/*     */     
/*     */     try {
/* 449 */       for (int i = 0; i < this.vecCommandlines.size(); i++) {
/* 450 */         runCommand(this.vecCommandlines.elementAt(i));
/*     */       }
/*     */     } finally {
/* 453 */       if (cloned != null) {
/* 454 */         removeCommandline(cloned);
/*     */       }
/* 456 */       setCommand(savedCommand);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private String executeToString(Execute execute) {
/* 462 */     StringBuffer stringBuffer = new StringBuffer(Commandline.describeCommand(execute.getCommandline()));
/*     */ 
/*     */ 
/*     */     
/* 466 */     String newLine = StringUtils.LINE_SEP;
/* 467 */     String[] variableArray = execute.getEnvironment();
/*     */     
/* 469 */     if (variableArray != null) {
/* 470 */       stringBuffer.append(newLine);
/* 471 */       stringBuffer.append(newLine);
/* 472 */       stringBuffer.append(""environment:"");
/* 473 */       stringBuffer.append(newLine);
/* 474 */       for (int z = 0; z < variableArray.length; z++) {
/* 475 */         stringBuffer.append(newLine);
/* 476 */         stringBuffer.append(""\t"");
/* 477 */         stringBuffer.append(variableArray[z]);
/*     */       } 
/*     */     } 
/*     */     
/* 481 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCvsRoot(String root) {
/* 492 */     if (root != null && 
/* 493 */       root.trim().equals("""")) {
/* 494 */       root = null;
/*     */     }
/*     */ 
/*     */     
/* 498 */     this.cvsRoot = root;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 507 */   public String getCvsRoot() { return this.cvsRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCvsRsh(String rsh) {
/* 517 */     if (rsh != null && 
/* 518 */       rsh.trim().equals("""")) {
/* 519 */       rsh = null;
/*     */     }
/*     */ 
/*     */     
/* 523 */     this.cvsRsh = rsh;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 532 */   public String getCvsRsh() { return this.cvsRsh; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 541 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 550 */   public int getPort() { return this.port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 559 */   public void setPassfile(File passFile) { this.passFile = passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 568 */   public File getPassFile() { return this.passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 581 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 591 */   public File getDest() { return this.dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 600 */   public void setPackage(String p) { this.cvsPackage = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 610 */   public String getPackage() { return this.cvsPackage; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTag(String p) {
/* 619 */     if (p != null && p.trim().length() > 0) {
/* 620 */       addCommandArgument(""-r"");
/* 621 */       addCommandArgument(p);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 631 */   public void addCommandArgument(String arg) { addCommandArgument(this.cmd, arg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 645 */   public void addCommandArgument(Commandline c, String arg) { c.createArgument().setValue(arg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDate(String p) {
/* 655 */     if (p != null && p.trim().length() > 0) {
/* 656 */       addCommandArgument(""-D"");
/* 657 */       addCommandArgument(p);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 670 */   public void setCommand(String c) { this.command = c; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 681 */   public String getCommand() { return this.command; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 689 */   public void setQuiet(boolean q) { this.quiet = q; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 698 */   public void setReallyquiet(boolean q) { this.reallyquiet = q; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 708 */   public void setNoexec(boolean ne) { this.noexec = ne; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 716 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 725 */   public void setError(File error) { this.error = error; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 733 */   public void setAppend(boolean value) { this.append = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 744 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureCommandline(Commandline c) {
/* 767 */     if (c == null) {
/*     */       return;
/*     */     }
/* 770 */     c.setExecutable(""cvs"");
/* 771 */     if (this.cvsPackage != null) {
/* 772 */       c.createArgument().setLine(this.cvsPackage);
/*     */     }
/* 774 */     if (this.compression > 0 && this.compression <= 9) {
/* 775 */       c.createArgument(true).setValue(""-z"" + this.compression);
/*     */     }
/* 777 */     if (this.quiet && !this.reallyquiet) {
/* 778 */       c.createArgument(true).setValue(""-q"");
/*     */     }
/* 780 */     if (this.reallyquiet) {
/* 781 */       c.createArgument(true).setValue(""-Q"");
/*     */     }
/* 783 */     if (this.noexec) {
/* 784 */       c.createArgument(true).setValue(""-n"");
/*     */     }
/* 786 */     if (this.cvsRoot != null) {
/* 787 */       c.createArgument(true).setLine(""-d"" + this.cvsRoot);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 796 */   protected void removeCommandline(Commandline c) { this.vecCommandlines.removeElement(c); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 804 */   public void addConfiguredCommandline(Commandline c) { addConfiguredCommandline(c, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredCommandline(Commandline c, boolean insertAtStart) {
/* 815 */     if (c == null) {
/*     */       return;
/*     */     }
/* 818 */     configureCommandline(c);
/* 819 */     if (insertAtStart) {
/* 820 */       this.vecCommandlines.insertElementAt(c, 0);
/*     */     } else {
/* 822 */       this.vecCommandlines.addElement(c);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 832 */   public void setCompressionLevel(int level) { this.compression = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 842 */   public void setCompression(boolean usecomp) { setCompressionLevel(usecomp ? 3 : 0); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\AbstractCvsTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ant,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.HashSet;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Set;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Target;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.PropertySet;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ant
/*     */   extends Task
/*     */ {
/* 104 */   private File dir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   private String antFile = null;
/*     */ 
/*     */   
/* 113 */   private String target = null;
/*     */ 
/*     */   
/* 116 */   private String output = null;
/*     */ 
/*     */   
/*     */   private boolean inheritAll = true;
/*     */ 
/*     */   
/*     */   private boolean inheritRefs = false;
/*     */ 
/*     */   
/* 125 */   private Vector properties = new Vector();
/*     */ 
/*     */   
/* 128 */   private Vector references = new Vector();
/*     */ 
/*     */   
/*     */   private Project newProject;
/*     */ 
/*     */   
/* 134 */   private PrintStream out = null;
/*     */ 
/*     */   
/* 137 */   private Vector propertySets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setInheritAll(boolean value) { this.inheritAll = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void setInheritRefs(boolean value) { this.inheritRefs = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 161 */     this.newProject = new Project();
/* 162 */     this.newProject.setDefaultInputStream(getProject().getDefaultInputStream());
/* 163 */     this.newProject.setJavaVersionProperty();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   private void reinit() { init(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initializeProject() {
/* 187 */     this.newProject.setInputHandler(getProject().getInputHandler());
/*     */     
/* 189 */     Vector listeners = getProject().getBuildListeners();
/* 190 */     int count = listeners.size();
/* 191 */     for (int i = 0; i < count; i++) {
/* 192 */       this.newProject.addBuildListener(listeners.elementAt(i));
/*     */     }
/*     */     
/* 195 */     if (this.output != null) {
/* 196 */       File outfile = null;
/* 197 */       if (this.dir != null) {
/* 198 */         outfile = FileUtils.newFileUtils().resolveFile(this.dir, this.output);
/*     */       } else {
/* 200 */         outfile = getProject().resolveFile(this.output);
/*     */       } 
/*     */       try {
/* 203 */         this.out = new PrintStream(new FileOutputStream(outfile));
/* 204 */         DefaultLogger logger = new DefaultLogger();
/* 205 */         logger.setMessageOutputLevel(2);
/* 206 */         logger.setOutputPrintStream(this.out);
/* 207 */         logger.setErrorPrintStream(this.out);
/* 208 */         this.newProject.addBuildListener((BuildListener)logger);
/*     */       } catch (IOException ex) {
/* 210 */         log(""Ant: Can't set output to "" + this.output);
/*     */       } 
/*     */     } 
/*     */     
/* 214 */     getProject().initSubProject(this.newProject);
/*     */ 
/*     */     
/* 217 */     getProject().copyUserProperties(this.newProject);
/*     */     
/* 219 */     if (!this.inheritAll) {
/*     */ 
/*     */       
/* 222 */       this.newProject.setSystemProperties();
/*     */     }
/*     */     else {
/*     */       
/* 226 */       addAlmostAll(getProject().getProperties());
/*     */     } 
/*     */     
/* 229 */     Enumeration e = this.propertySets.elements();
/* 230 */     while (e.hasMoreElements()) {
/* 231 */       PropertySet ps = e.nextElement();
/* 232 */       addAlmostAll(ps.getProperties());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleOutput(String output) {
/* 243 */     if (this.newProject != null) {
/* 244 */       this.newProject.demuxOutput(output, false);
/*     */     } else {
/* 246 */       super.handleOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int handleInput(byte[] buffer, int offset, int length) throws IOException {
/* 267 */     if (this.newProject != null) {
/* 268 */       return this.newProject.demuxInput(buffer, offset, length);
/*     */     }
/* 270 */     return super.handleInput(buffer, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleFlush(String output) {
/* 282 */     if (this.newProject != null) {
/* 283 */       this.newProject.demuxFlush(output, false);
/*     */     } else {
/* 285 */       super.handleFlush(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleErrorOutput(String output) {
/* 297 */     if (this.newProject != null) {
/* 298 */       this.newProject.demuxOutput(output, true);
/*     */     } else {
/* 300 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleErrorFlush(String output) {
/* 312 */     if (this.newProject != null) {
/* 313 */       this.newProject.demuxFlush(output, true);
/*     */     } else {
/* 315 */       super.handleErrorFlush(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 325 */     File savedDir = this.dir;
/* 326 */     String savedAntFile = this.antFile;
/* 327 */     String savedTarget = this.target;
/*     */     try {
/* 329 */       if (this.newProject == null) {
/* 330 */         reinit();
/*     */       }
/*     */       
/* 333 */       if (this.dir == null && this.inheritAll) {
/* 334 */         this.dir = getProject().getBaseDir();
/*     */       }
/*     */       
/* 337 */       initializeProject();
/*     */       
/* 339 */       if (this.dir != null) {
/* 340 */         this.newProject.setBaseDir(this.dir);
/* 341 */         if (savedDir != null)
/*     */         {
/* 343 */           this.newProject.setInheritedProperty(""basedir"", this.dir.getAbsolutePath());
/*     */         }
/*     */       } else {
/*     */         
/* 347 */         this.dir = getProject().getBaseDir();
/*     */       } 
/*     */       
/* 350 */       overrideProperties();
/*     */       
/* 352 */       if (this.antFile == null) {
/* 353 */         this.antFile = ""build.xml"";
/*     */       }
/*     */       
/* 356 */       File file = FileUtils.newFileUtils().resolveFile(this.dir, this.antFile);
/* 357 */       this.antFile = file.getAbsolutePath();
/*     */       
/* 359 */       log(""calling target "" + ((this.target != null) ? this.target : ""[default]"") + "" in build file "" + this.antFile, 3);
/*     */       
/* 361 */       this.newProject.setUserProperty(""ant.file"", this.antFile);
/*     */ 
/*     */ 
/*     */       
/* 365 */       if (this.newProject.getProperty(""ant.file"").equals(getProject().getProperty(""ant.file"")) && getOwningTarget() != null)
/*     */       {
/*     */ 
/*     */         
/* 369 */         if (getOwningTarget().getName().equals("""")) {
/* 370 */           if (getTaskName().equals(""antcall"")) {
/* 371 */             throw new BuildException(""antcall must not be used at the top level."");
/*     */           }
/*     */           
/* 374 */           throw new BuildException(getTaskName() + "" task at the"" + "" top level must not invoke"" + "" its own build file."");
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 382 */         ProjectHelper.configureProject(this.newProject, new File(this.antFile));
/*     */       } catch (BuildException ex) {
/* 384 */         throw ProjectHelper.addLocationToBuildException(ex, getLocation());
/*     */       } 
/*     */ 
/*     */       
/* 388 */       if (this.target == null) {
/* 389 */         this.target = this.newProject.getDefaultTarget();
/*     */       }
/*     */       
/* 392 */       if (this.newProject.getProperty(""ant.file"").equals(getProject().getProperty(""ant.file"")) && getOwningTarget() != null) {
/*     */ 
/*     */ 
/*     */         
/* 396 */         String owningTargetName = getOwningTarget().getName();
/*     */         
/* 398 */         if (owningTargetName.equals(this.target)) {
/* 399 */           throw new BuildException(getTaskName() + "" task calling "" + ""its own parent target."");
/*     */         }
/*     */         
/* 402 */         Target other = (Target)getProject().getTargets().get(this.target);
/*     */         
/* 404 */         if (other != null && other.dependsOn(owningTargetName)) {
/* 405 */           throw new BuildException(getTaskName() + "" task calling a target"" + "" that depends on"" + "" its parent target '"" + owningTargetName + ""'."");
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 415 */       addReferences();
/*     */       
/* 417 */       if (this.target != null && !"""".equals(this.target)) {
/*     */         try {
/* 419 */           log(""Entering "" + this.antFile + ""..."", 3);
/* 420 */           this.newProject.executeTarget(this.target);
/*     */         } catch (BuildException ex) {
/* 422 */           throw ProjectHelper.addLocationToBuildException(ex, getLocation());
/*     */         } finally {
/*     */           
/* 425 */           log(""Exiting "" + this.antFile + ""."", 3);
/*     */         } 
/*     */       }
/*     */     } finally {
/*     */       
/* 430 */       this.newProject = null;
/* 431 */       Enumeration e = this.properties.elements();
/* 432 */       while (e.hasMoreElements()) {
/* 433 */         Property p = e.nextElement();
/* 434 */         p.setProject(null);
/*     */       } 
/*     */       
/* 437 */       if (this.output != null && this.out != null) {
/*     */         try {
/* 439 */           this.out.close();
/* 440 */         } catch (Exception ex) {}
/*     */       }
/*     */ 
/*     */       
/* 444 */       this.dir = savedDir;
/* 445 */       this.antFile = savedAntFile;
/* 446 */       this.target = savedTarget;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void overrideProperties() throws BuildException {
/* 458 */     Set set = new HashSet();
/* 459 */     for (int i = this.properties.size() - 1; i >= 0; i--) {
/* 460 */       Property p = this.properties.get(i);
/* 461 */       if (p.getName() != null && !p.getName().equals("""")) {
/* 462 */         if (set.contains(p.getName())) {
/* 463 */           this.properties.remove(i);
/*     */         } else {
/* 465 */           set.add(p.getName());
/*     */         } 
/*     */       }
/*     */     } 
/* 469 */     Enumeration e = this.properties.elements();
/* 470 */     while (e.hasMoreElements()) {
/* 471 */       Property p = e.nextElement();
/* 472 */       p.setProject(this.newProject);
/* 473 */       p.execute();
/*     */     } 
/* 475 */     getProject().copyInheritedProperties(this.newProject);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addReferences() throws BuildException {
/* 486 */     Hashtable thisReferences = (Hashtable)getProject().getReferences().clone();
/*     */     
/* 488 */     Hashtable newReferences = this.newProject.getReferences();
/*     */     
/* 490 */     if (this.references.size() > 0) {
/* 491 */       for (Enumeration e = this.references.elements(); e.hasMoreElements(); ) {
/* 492 */         Reference ref = e.nextElement();
/* 493 */         String refid = ref.getRefId();
/* 494 */         if (refid == null) {
/* 495 */           throw new BuildException(""the refid attribute is required for reference elements"");
/*     */         }
/*     */         
/* 498 */         if (!thisReferences.containsKey(refid)) {
/* 499 */           log(""Parent project doesn't contain any reference '"" + refid + ""'"", 1);
/*     */ 
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 505 */         thisReferences.remove(refid);
/* 506 */         String toRefid = ref.getToRefid();
/* 507 */         if (toRefid == null) {
/* 508 */           toRefid = refid;
/*     */         }
/* 510 */         copyReference(refid, toRefid);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 516 */     if (this.inheritRefs) {
/* 517 */       for (Enumeration enumeration = thisReferences.keys(); enumeration.hasMoreElements(); ) {
/* 518 */         String key = enumeration.nextElement();
/* 519 */         if (newReferences.containsKey(key)) {
/*     */           continue;
/*     */         }
/* 522 */         copyReference(key, key);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void copyReference(String oldKey, String newKey) {
/* 536 */     Object orig = getProject().getReference(oldKey);
/* 537 */     if (orig == null) {
/* 538 */       log(""No object referenced by "" + oldKey + "". Can't copy to "" + newKey, 1);
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 544 */     Class c = orig.getClass();
/* 545 */     Object copy = orig;
/*     */     try {
/* 547 */       Method cloneM = c.getMethod(""clone"", new Class[0]);
/* 548 */       if (cloneM != null) {
/* 549 */         copy = cloneM.invoke(orig, new Object[0]);
/* 550 */         log(""Adding clone of reference "" + oldKey, 4);
/*     */       } 
/* 552 */     } catch (Exception e) {}
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 557 */     if (copy instanceof ProjectComponent) {
/* 558 */       ((ProjectComponent)copy).setProject(this.newProject);
/*     */     } else {
/*     */       try {
/* 561 */         Method setProjectM = c.getMethod(""setProject"", new Class[] { Project.class });
/*     */         
/* 563 */         if (setProjectM != null) {
/* 564 */           setProjectM.invoke(copy, new Object[] { this.newProject });
/*     */         }
/* 566 */       } catch (NoSuchMethodException e) {
/*     */ 
/*     */       
/*     */       } catch (Exception e2) {
/* 570 */         String msg = ""Error setting new project instance for reference with id "" + oldKey;
/*     */         
/* 572 */         throw new BuildException(msg, e2, getLocation());
/*     */       } 
/*     */     } 
/* 575 */     this.newProject.addReference(newKey, copy);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addAlmostAll(Hashtable props) {
/* 586 */     Enumeration e = props.keys();
/* 587 */     while (e.hasMoreElements()) {
/* 588 */       String key = e.nextElement().toString();
/* 589 */       if (""basedir"".equals(key) || ""ant.file"".equals(key)) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */       
/* 594 */       String value = props.get(key).toString();
/*     */       
/* 596 */       if (this.newProject.getProperty(key) == null)
/*     */       {
/* 598 */         this.newProject.setNewProperty(key, value);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 611 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 624 */   public void setAntfile(String s) { this.antFile = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTarget(String s) {
/* 633 */     if (s.equals("""")) {
/* 634 */       throw new BuildException(""target attribute must not be empty"");
/*     */     }
/*     */     
/* 637 */     this.target = s;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 648 */   public void setOutput(String s) { this.output = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Property createProperty() {
/* 657 */     if (this.newProject == null) {
/* 658 */       reinit();
/*     */     }
/* 660 */     Property p = new Property(true, getProject());
/* 661 */     p.setProject(this.newProject);
/* 662 */     p.setTaskName(""property"");
/* 663 */     this.properties.addElement(p);
/* 664 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 673 */   public void addReference(Reference r) { this.references.addElement(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 683 */   public void addPropertyset(PropertySet ps) { this.propertySets.addElement(ps); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Reference
/*     */     extends Reference
/*     */   {
/* 698 */     private String targetid = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 707 */     public void setToRefid(String targetid) { this.targetid = targetid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 717 */     public String getToRefid() { return this.targetid; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Ant.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Antlib,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ComponentHelper;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.UnknownElement;
/*     */ import org.apache.tools.ant.helper.ProjectHelper2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Antlib
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*     */   public static final String TAG = ""antlib"";
/*     */   private ClassLoader classLoader;
/*     */   
/*     */   public static Antlib createAntlib(Project project, URL antlibUrl, String uri) {
/*     */     try {
/* 102 */       antlibUrl.openConnection().connect();
/*     */     } catch (IOException ex) {
/* 104 */       throw new BuildException(""Unable to find "" + antlibUrl, ex);
/*     */     } 
/*     */     
/* 107 */     ComponentHelper helper = ComponentHelper.getComponentHelper(project);
/*     */     
/* 109 */     helper.enterAntLib(uri);
/*     */     
/*     */     try {
/* 112 */       ProjectHelper2 parser = new ProjectHelper2();
/* 113 */       UnknownElement ue = parser.parseUnknownElement(project, antlibUrl);
/*     */ 
/*     */       
/* 116 */       if (!ue.getTag().equals(""antlib"")) {
/* 117 */         throw new BuildException(""Unexpected tag "" + ue.getTag() + "" expecting "" + ""antlib"", ue.getLocation());
/*     */       }
/*     */ 
/*     */       
/* 121 */       Antlib antlib = new Antlib();
/* 122 */       antlib.setProject(project);
/* 123 */       antlib.setLocation(ue.getLocation());
/* 124 */       antlib.init();
/* 125 */       ue.configure(antlib);
/* 126 */       return antlib;
/*     */     } finally {
/* 128 */       helper.exitAntLib();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   private String uri = """";
/* 138 */   private List tasks = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   protected void setClassLoader(ClassLoader classLoader) { this.classLoader = classLoader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   protected void setURI(String uri) { this.uri = uri; }
/*     */ 
/*     */   
/*     */   private ClassLoader getClassLoader() {
/* 160 */     if (this.classLoader == null) {
/* 161 */       this.classLoader = Antlib.class.getClassLoader();
/*     */     }
/* 163 */     return this.classLoader;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void addTask(Task nestedTask) { this.tasks.add(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 180 */     for (Iterator i = this.tasks.iterator(); i.hasNext(); ) {
/* 181 */       UnknownElement ue = i.next();
/* 182 */       setLocation(ue.getLocation());
/* 183 */       ue.maybeConfigure();
/* 184 */       Object configuredObject = ue.getRealThing();
/* 185 */       if (configuredObject == null) {
/*     */         continue;
/*     */       }
/* 188 */       if (!(configuredObject instanceof AntlibDefinition)) {
/* 189 */         throw new BuildException(""Invalid task in antlib "" + ue.getTag() + "" "" + configuredObject.getClass() + "" does not "" + ""extend org.apache.tools.ant.taskdefs.AntlibDefinition"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 194 */       AntlibDefinition def = (AntlibDefinition)configuredObject;
/* 195 */       def.setURI(this.uri);
/* 196 */       def.setAntlibClassLoader(getClassLoader());
/* 197 */       def.init();
/* 198 */       def.execute();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Antlib.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AntlibDefinition,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntlibDefinition
/*     */   extends Task
/*     */ {
/*  71 */   private String uri = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ClassLoader antlibClassLoader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setURI(String uri) throws BuildException {
/*  85 */     if (uri.equals(""antlib:org.apache.tools.ant"")) {
/*  86 */       uri = """";
/*     */     }
/*  88 */     if (uri.startsWith(""ant:"")) {
/*  89 */       throw new BuildException(""Attempt to use a reserved URI "" + uri);
/*     */     }
/*  91 */     this.uri = uri;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public String getURI() { return this.uri; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setAntlibClassLoader(ClassLoader classLoader) { this.antlibClassLoader = classLoader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public ClassLoader getAntlibClassLoader() { return this.antlibClassLoader; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\AntlibDefinition.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AntStructure,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.IntrospectionHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntStructure
/*     */   extends Task
/*     */ {
/*  87 */   private final String lSep = System.getProperty(""line.separator"");
/*     */   
/*     */   private static final String BOOLEAN = ""%boolean;"";
/*     */   
/*     */   private static final String TASKS = ""%tasks;"";
/*     */   private static final String TYPES = ""%types;"";
/*  93 */   private Hashtable visited = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 112 */     if (this.output == null) {
/* 113 */       throw new BuildException(""output attribute is required"", getLocation());
/*     */     }
/*     */     
/* 116 */     PrintWriter out = null;
/*     */     try {
/*     */       try {
/* 119 */         out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.output), ""UTF8""));
/*     */ 
/*     */       
/*     */       }
/*     */       catch (UnsupportedEncodingException ue) {
/*     */ 
/*     */ 
/*     */         
/* 127 */         out = new PrintWriter(new FileWriter(this.output));
/*     */       } 
/*     */       
/* 130 */       printHead(out, getProject().getTaskDefinitions().keys(), getProject().getDataTypeDefinitions().keys());
/*     */ 
/*     */       
/* 133 */       printTargetDecl(out);
/*     */       
/* 135 */       Enumeration dataTypes = getProject().getDataTypeDefinitions().keys();
/* 136 */       while (dataTypes.hasMoreElements()) {
/* 137 */         String typeName = dataTypes.nextElement();
/* 138 */         printElementDecl(out, typeName, (Class)getProject().getDataTypeDefinitions().get(typeName));
/*     */       } 
/*     */ 
/*     */       
/* 142 */       Enumeration tasks = getProject().getTaskDefinitions().keys();
/* 143 */       while (tasks.hasMoreElements()) {
/* 144 */         String taskName = tasks.nextElement();
/* 145 */         printElementDecl(out, taskName, (Class)getProject().getTaskDefinitions().get(taskName));
/*     */       }
/*     */     
/*     */     } catch (IOException ioe) {
/*     */       
/* 150 */       throw new BuildException(""Error writing "" + this.output.getAbsolutePath(), ioe, getLocation());
/*     */     } finally {
/*     */       
/* 153 */       if (out != null) {
/* 154 */         out.close();
/*     */       }
/* 156 */       this.visited.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printHead(PrintWriter out, Enumeration tasks, Enumeration types) {
/* 168 */     out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>"");
/* 169 */     out.println(""<!ENTITY % boolean \""(true|false|on|off|yes|no)\"">"");
/* 170 */     out.print(""<!ENTITY % tasks \"""");
/* 171 */     boolean first = true;
/* 172 */     while (tasks.hasMoreElements()) {
/* 173 */       String taskName = tasks.nextElement();
/* 174 */       if (!first) {
/* 175 */         out.print("" | "");
/*     */       } else {
/* 177 */         first = false;
/*     */       } 
/* 179 */       out.print(taskName);
/*     */     } 
/* 181 */     out.println(""\"">"");
/* 182 */     out.print(""<!ENTITY % types \"""");
/* 183 */     first = true;
/* 184 */     while (types.hasMoreElements()) {
/* 185 */       String typeName = types.nextElement();
/* 186 */       if (!first) {
/* 187 */         out.print("" | "");
/*     */       } else {
/* 189 */         first = false;
/*     */       } 
/* 191 */       out.print(typeName);
/*     */     } 
/* 193 */     out.println(""\"">"");
/*     */     
/* 195 */     out.println("""");
/*     */     
/* 197 */     out.print(""<!ELEMENT project (target | "");
/* 198 */     out.print(""%tasks;"");
/* 199 */     out.print("" | "");
/* 200 */     out.print(""%types;"");
/* 201 */     out.println("")*>"");
/* 202 */     out.println(""<!ATTLIST project"");
/* 203 */     out.println(""          name    CDATA #IMPLIED"");
/* 204 */     out.println(""          default CDATA #IMPLIED"");
/* 205 */     out.println(""          basedir CDATA #IMPLIED>"");
/* 206 */     out.println("""");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printTargetDecl(PrintWriter out) {
/* 213 */     out.print(""<!ELEMENT target ("");
/* 214 */     out.print(""%tasks;"");
/* 215 */     out.print("" | "");
/* 216 */     out.print(""%types;"");
/* 217 */     out.println("")*>"");
/* 218 */     out.println("""");
/*     */     
/* 220 */     out.println(""<!ATTLIST target"");
/* 221 */     out.println(""          id          ID    #IMPLIED"");
/* 222 */     out.println(""          name        CDATA #REQUIRED"");
/* 223 */     out.println(""          if          CDATA #IMPLIED"");
/* 224 */     out.println(""          unless      CDATA #IMPLIED"");
/* 225 */     out.println(""          depends     CDATA #IMPLIED"");
/* 226 */     out.println(""          description CDATA #IMPLIED>"");
/* 227 */     out.println("""");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printElementDecl(PrintWriter out, String name, Class element) throws BuildException {
/* 236 */     if (this.visited.containsKey(name)) {
/*     */       return;
/*     */     }
/* 239 */     this.visited.put(name, """");
/*     */     
/* 241 */     IntrospectionHelper ih = null;
/*     */     try {
/* 243 */       ih = IntrospectionHelper.getHelper(element);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 250 */     catch (Throwable t) {
/*     */       return;
/*     */     } 
/* 253 */     StringBuffer sb = new StringBuffer(""<!ELEMENT "");
/* 254 */     sb.append(name).append("" "");
/*     */     
/* 256 */     if (Reference.class.equals(element)) {
/* 257 */       sb.append(""EMPTY>"").append(this.lSep);
/* 258 */       sb.append(""<!ATTLIST "").append(name);
/* 259 */       sb.append(this.lSep).append(""          id ID #IMPLIED"");
/* 260 */       sb.append(this.lSep).append(""          refid IDREF #IMPLIED"");
/* 261 */       sb.append("">"").append(this.lSep);
/* 262 */       out.println(sb);
/*     */       
/*     */       return;
/*     */     } 
/* 266 */     Vector v = new Vector();
/* 267 */     if (ih.supportsCharacters()) {
/* 268 */       v.addElement(""#PCDATA"");
/*     */     }
/*     */     
/* 271 */     if (TaskContainer.class.isAssignableFrom(element)) {
/* 272 */       v.addElement(""%tasks;"");
/*     */     }
/*     */     
/* 275 */     Enumeration e = ih.getNestedElements();
/* 276 */     while (e.hasMoreElements()) {
/* 277 */       v.addElement(e.nextElement());
/*     */     }
/*     */     
/* 280 */     if (v.isEmpty()) {
/* 281 */       sb.append(""EMPTY"");
/*     */     } else {
/* 283 */       sb.append(""("");
/* 284 */       int count = v.size();
/* 285 */       for (int i = 0; i < count; i++) {
/* 286 */         if (i != 0) {
/* 287 */           sb.append("" | "");
/*     */         }
/* 289 */         sb.append(v.elementAt(i));
/*     */       } 
/* 291 */       sb.append("")"");
/* 292 */       if (count > 1 || !v.elementAt(0).equals(""#PCDATA"")) {
/* 293 */         sb.append(""*"");
/*     */       }
/*     */     } 
/* 296 */     sb.append("">"");
/* 297 */     out.println(sb);
/*     */     
/* 299 */     sb = new StringBuffer(""<!ATTLIST "");
/* 300 */     sb.append(name);
/* 301 */     sb.append(this.lSep).append(""          id ID #IMPLIED"");
/*     */     
/* 303 */     e = ih.getAttributes();
/* 304 */     while (e.hasMoreElements()) {
/* 305 */       String attrName = e.nextElement();
/* 306 */       if (""id"".equals(attrName)) {
/*     */         continue;
/*     */       }
/*     */       
/* 310 */       sb.append(this.lSep).append(""          "").append(attrName).append("" "");
/* 311 */       Class type = ih.getAttributeType(attrName);
/* 312 */       if (type.equals(Boolean.class) || type.equals(boolean.class)) {
/*     */         
/* 314 */         sb.append(""%boolean;"").append("" "");
/* 315 */       } else if (Reference.class.isAssignableFrom(type)) {
/* 316 */         sb.append(""IDREF "");
/* 317 */       } else if (EnumeratedAttribute.class.isAssignableFrom(type)) {
/*     */         try {
/* 319 */           EnumeratedAttribute ea = (EnumeratedAttribute)type.newInstance();
/*     */           
/* 321 */           String[] values = ea.getValues();
/* 322 */           if (values == null || values.length == 0 || !areNmtokens(values)) {
/*     */ 
/*     */             
/* 325 */             sb.append(""CDATA "");
/*     */           } else {
/* 327 */             sb.append(""("");
/* 328 */             for (int i = 0; i < values.length; i++) {
/* 329 */               if (i != 0) {
/* 330 */                 sb.append("" | "");
/*     */               }
/* 332 */               sb.append(values[i]);
/*     */             } 
/* 334 */             sb.append("") "");
/*     */           } 
/*     */         } catch (InstantiationException ie) {
/* 337 */           sb.append(""CDATA "");
/*     */         } catch (IllegalAccessException ie) {
/* 339 */           sb.append(""CDATA "");
/*     */         } 
/*     */       } else {
/* 342 */         sb.append(""CDATA "");
/*     */       } 
/* 344 */       sb.append(""#IMPLIED"");
/*     */     } 
/* 346 */     sb.append("">"").append(this.lSep);
/* 347 */     out.println(sb);
/*     */     
/* 349 */     int count = v.size();
/* 350 */     for (int i = 0; i < count; i++) {
/* 351 */       String nestedName = v.elementAt(i);
/* 352 */       if (!""#PCDATA"".equals(nestedName) && !""%tasks;"".equals(nestedName) && !""%types;"".equals(nestedName))
/*     */       {
/*     */         
/* 355 */         printElementDecl(out, nestedName, ih.getElementType(nestedName));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isNmtoken(String s) {
/* 366 */     int length = s.length();
/* 367 */     for (int i = 0; i < length; i++) {
/* 368 */       char c = s.charAt(i);
/*     */       
/* 370 */       if (!Character.isLetterOrDigit(c) && c != '.' && c != '-' && c != '_' && c != ':')
/*     */       {
/* 372 */         return false;
/*     */       }
/*     */     } 
/* 375 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean areNmtokens(String[] s) {
/* 387 */     for (int i = 0; i < s.length; i++) {
/* 388 */       if (!isNmtoken(s[i])) {
/* 389 */         return false;
/*     */       }
/*     */     } 
/* 392 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\AntStructure.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Available,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Available
/*     */   extends Task
/*     */   implements Condition
/*     */ {
/*     */   private String property;
/*     */   private String classname;
/*     */   private String file;
/*     */   private Path filepath;
/*     */   private String resource;
/*     */   private FileDir type;
/*     */   private Path classpath;
/*     */   private AntClassLoader loader;
/*  91 */   private String value = ""true"";
/*     */ 
/*     */   
/*     */   private boolean isTask = false;
/*     */ 
/*     */   
/*     */   private boolean ignoreSystemclasses = false;
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setClasspath(Path classpath) { createClasspath().append(classpath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 110 */     if (this.classpath == null) {
/* 111 */       this.classpath = new Path(getProject());
/*     */     }
/* 113 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setFilepath(Path filepath) { createFilepath().append(filepath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createFilepath() {
/* 142 */     if (this.filepath == null) {
/* 143 */       this.filepath = new Path(getProject());
/*     */     }
/* 145 */     return this.filepath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String classname) {
/* 175 */     if (!"""".equals(classname)) {
/* 176 */       this.classname = classname;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void setFile(File file) { this.file = FileUtils.newFileUtils().removeLeadingPath(getProject().getBaseDir(), file); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void setResource(String resource) { this.resource = resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setType(String type) {
/* 208 */     log(""DEPRECATED - The setType(String) method has been deprecated. Use setType(Available.FileDir) instead."");
/*     */     
/* 210 */     this.type = new FileDir();
/* 211 */     this.type.setValue(type);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setType(FileDir type) { this.type = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setIgnoresystemclasses(boolean ignore) { this.ignoreSystemclasses = ignore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 241 */     if (this.property == null) {
/* 242 */       throw new BuildException(""property attribute is required"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 246 */     this.isTask = true;
/*     */     try {
/* 248 */       if (eval()) {
/* 249 */         String oldvalue = getProject().getProperty(this.property);
/* 250 */         if (null != oldvalue && !oldvalue.equals(this.value)) {
/* 251 */           log(""DEPRECATED - <available> used to override an existing property."" + StringUtils.LINE_SEP + ""  Build file should not reuse the same property"" + "" name for different values."");
/*     */         }
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 257 */         getProject().setProperty(this.property, this.value);
/*     */       } 
/*     */     } finally {
/* 260 */       this.isTask = false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 271 */     if (this.classname == null && this.file == null && this.resource == null) {
/* 272 */       throw new BuildException(""At least one of (classname|file|resource) is required"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 276 */     if (this.type != null && 
/* 277 */       this.file == null) {
/* 278 */       throw new BuildException(""The type attribute is only valid when specifying the file attribute."", getLocation());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 284 */     if (this.classpath != null) {
/* 285 */       this.classpath.setProject(getProject());
/* 286 */       this.loader = getProject().createClassLoader(this.classpath);
/*     */     } 
/*     */     
/* 289 */     String appendix = """";
/* 290 */     if (this.isTask) {
/* 291 */       appendix = "" to set property "" + this.property;
/*     */     } else {
/* 293 */       setTaskName(""available"");
/*     */     } 
/*     */     
/* 296 */     if (this.classname != null && !checkClass(this.classname)) {
/* 297 */       log(""Unable to load class "" + this.classname + appendix, 3);
/*     */       
/* 299 */       return false;
/*     */     } 
/*     */     
/* 302 */     if (this.file != null && !checkFile()) {
/* 303 */       if (this.type != null) {
/* 304 */         log(""Unable to find "" + this.type + "" "" + this.file + appendix, 3);
/*     */       } else {
/*     */         
/* 307 */         log(""Unable to find "" + this.file + appendix, 3);
/*     */       } 
/* 309 */       return false;
/*     */     } 
/*     */     
/* 312 */     if (this.resource != null && !checkResource(this.resource)) {
/* 313 */       log(""Unable to load resource "" + this.resource + appendix, 3);
/*     */       
/* 315 */       return false;
/*     */     } 
/*     */     
/* 318 */     if (this.loader != null) {
/* 319 */       this.loader.cleanup();
/* 320 */       this.loader = null;
/*     */     } 
/*     */     
/* 323 */     if (!this.isTask) {
/* 324 */       setTaskName(null);
/*     */     }
/*     */     
/* 327 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkFile() {
/* 347 */     if (this.filepath == null) {
/* 348 */       return checkFile(getProject().resolveFile(this.file), this.file);
/*     */     }
/* 350 */     String[] paths = this.filepath.list();
/* 351 */     for (int i = 0; i < paths.length; i++) {
/* 352 */       log(""Searching "" + paths[i], 4);
/* 353 */       File path = new File(paths[i]);
/*     */ 
/*     */ 
/*     */       
/* 357 */       if (path.exists() && this.file.equals(paths[i])) {
/* 358 */         if (this.type == null) {
/* 359 */           log(""Found: "" + path, 3);
/* 360 */           return true;
/* 361 */         }  if (this.type.isDir() && path.isDirectory()) {
/*     */           
/* 363 */           log(""Found directory: "" + path, 3);
/* 364 */           return true;
/* 365 */         }  if (this.type.isFile() && path.isFile()) {
/*     */           
/* 367 */           log(""Found file: "" + path, 3);
/* 368 */           return true;
/*     */         } 
/*     */         
/* 371 */         return false;
/*     */       } 
/*     */       
/* 374 */       FileUtils fileUtils = FileUtils.newFileUtils();
/* 375 */       File parent = fileUtils.getParentFile(path);
/*     */       
/* 377 */       if (parent != null && parent.exists() && this.file.equals(parent.getAbsolutePath())) {
/*     */         
/* 379 */         if (this.type == null) {
/* 380 */           log(""Found: "" + parent, 3);
/* 381 */           return true;
/* 382 */         }  if (this.type.isDir()) {
/* 383 */           log(""Found directory: "" + parent, 3);
/* 384 */           return true;
/*     */         } 
/*     */         
/* 387 */         return false;
/*     */       } 
/*     */ 
/*     */       
/* 391 */       if (path.exists() && path.isDirectory() && 
/* 392 */         checkFile(new File(path, this.file), this.file + "" in "" + path))
/*     */       {
/* 394 */         return true;
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 399 */       if (parent != null && parent.exists() && 
/* 400 */         checkFile(new File(parent, this.file), this.file + "" in "" + parent))
/*     */       {
/* 402 */         return true;
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 407 */       if (parent != null) {
/* 408 */         File grandParent = fileUtils.getParentFile(parent);
/* 409 */         if (grandParent != null && grandParent.exists() && 
/* 410 */           checkFile(new File(grandParent, this.file), this.file + "" in "" + grandParent))
/*     */         {
/* 412 */           return true;
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 418 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkFile(File f, String text) {
/* 425 */     if (this.type != null) {
/* 426 */       if (this.type.isDir()) {
/* 427 */         if (f.isDirectory()) {
/* 428 */           log(""Found directory: "" + text, 3);
/*     */         }
/* 430 */         return f.isDirectory();
/* 431 */       }  if (this.type.isFile()) {
/* 432 */         if (f.isFile()) {
/* 433 */           log(""Found file: "" + text, 3);
/*     */         }
/* 435 */         return f.isFile();
/*     */       } 
/*     */     } 
/* 438 */     if (f.exists()) {
/* 439 */       log(""Found: "" + text, 3);
/*     */     }
/* 441 */     return f.exists();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkResource(String resource) {
/* 448 */     if (this.loader != null) {
/* 449 */       return (this.loader.getResourceAsStream(resource) != null);
/*     */     }
/* 451 */     ClassLoader cL = getClass().getClassLoader();
/* 452 */     if (cL != null) {
/* 453 */       return (cL.getResourceAsStream(resource) != null);
/*     */     }
/* 455 */     return (ClassLoader.getSystemResourceAsStream(resource) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkClass(String classname) {
/*     */     try {
/* 466 */       Class requiredClass = null;
/* 467 */       if (this.ignoreSystemclasses) {
/* 468 */         this.loader = getProject().createClassLoader(this.classpath);
/* 469 */         this.loader.setParentFirst(false);
/* 470 */         this.loader.addJavaLibraries();
/* 471 */         if (this.loader != null) {
/*     */           try {
/* 473 */             requiredClass = this.loader.findClass(classname);
/*     */           
/*     */           }
/*     */           catch (SecurityException se) {
/*     */             
/* 478 */             return true;
/*     */           } 
/*     */         } else {
/* 481 */           return false;
/*     */         } 
/* 483 */       } else if (this.loader != null) {
/* 484 */         requiredClass = this.loader.loadClass(classname);
/*     */       } else {
/* 486 */         ClassLoader l = getClass().getClassLoader();
/*     */ 
/*     */         
/* 489 */         if (l != null) {
/* 490 */           requiredClass = Class.forName(classname, true, l);
/*     */         } else {
/* 492 */           requiredClass = Class.forName(classname);
/*     */         } 
/*     */       } 
/* 495 */       return true;
/*     */     } catch (ClassNotFoundException e) {
/* 497 */       log(""class \"""" + classname + ""\"" was not found"", 4);
/*     */       
/* 499 */       return false;
/*     */     } catch (NoClassDefFoundError e) {
/* 501 */       log(""Could not load dependent class \"""" + e.getMessage() + ""\"" for class \"""" + classname + ""\"""", 4);
/*     */ 
/*     */       
/* 504 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileDir
/*     */     extends EnumeratedAttribute
/*     */   {
/* 514 */     private static final String[] VALUES = new String[] { ""file"", ""dir"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 520 */     public String[] getValues() { return VALUES; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 529 */     public boolean isDir() { return ""dir"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 538 */     public boolean isFile() { return ""file"".equalsIgnoreCase(getValue()); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Available.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Basename,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Basename
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*     */   private String property;
/*     */   private String suffix;
/*     */   
/* 102 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setSuffix(String suffix) { this.suffix = suffix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 127 */     if (this.property == null) {
/* 128 */       throw new BuildException(""property attribute required"", getLocation());
/*     */     }
/* 130 */     if (this.file == null) {
/* 131 */       throw new BuildException(""file attribute required"", getLocation());
/*     */     }
/* 133 */     String value = this.file.getName();
/* 134 */     if (this.suffix != null && value.endsWith(this.suffix)) {
/*     */ 
/*     */ 
/*     */       
/* 138 */       int pos = value.length() - this.suffix.length();
/* 139 */       if (pos > 0 && this.suffix.charAt(0) != '.' && value.charAt(pos - 1) == '.')
/*     */       {
/* 141 */         pos--;
/*     */       }
/* 143 */       value = value.substring(0, pos);
/*     */     } 
/* 145 */     getProject().setNewProperty(this.property, value);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Basename.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BuildNumber,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildNumber
/*     */   extends Task
/*     */ {
/*     */   private static final String DEFAULT_PROPERTY_NAME = ""build.number"";
/*     */   private static final String DEFAULT_FILENAME = ""build.number"";
/*     */   private File myFile;
/*     */   
/* 100 */   public void setFile(File file) { this.myFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 111 */     File savedFile = this.myFile;
/*     */     
/* 113 */     validate();
/*     */     
/* 115 */     Properties properties = loadProperties();
/* 116 */     int buildNumber = getBuildNumber(properties);
/*     */     
/* 118 */     properties.put(""build.number"", String.valueOf(buildNumber + 1));
/*     */ 
/*     */ 
/*     */     
/* 122 */     FileOutputStream output = null;
/*     */     
/*     */     try {
/* 125 */       output = new FileOutputStream(this.myFile);
/*     */       
/* 127 */       String header = ""Build Number for ANT. Do not edit!"";
/*     */       
/* 129 */       properties.store(output, ""Build Number for ANT. Do not edit!"");
/*     */     } catch (IOException ioe) {
/* 131 */       String message = ""Error while writing "" + this.myFile;
/*     */       
/* 133 */       throw new BuildException(message, ioe);
/*     */     } finally {
/* 135 */       if (null != output) {
/*     */         try {
/* 137 */           output.close();
/*     */         } catch (IOException ioe) {
/* 139 */           getProject().log(""error closing output stream "" + ioe, 0);
/*     */         } 
/*     */       }
/* 142 */       this.myFile = savedFile;
/*     */     } 
/*     */ 
/*     */     
/* 146 */     getProject().setNewProperty(""build.number"", String.valueOf(buildNumber));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int getBuildNumber(Properties properties) throws BuildException {
/* 160 */     String buildNumber = properties.getProperty(""build.number"", ""0"").trim();
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 165 */       return Integer.parseInt(buildNumber);
/*     */     } catch (NumberFormatException nfe) {
/* 167 */       String message = this.myFile + "" contains a non integer build number: "" + buildNumber;
/*     */ 
/*     */       
/* 170 */       throw new BuildException(message, nfe);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Properties loadProperties() throws BuildException {
/* 183 */     FileInputStream input = null;
/*     */     
/*     */     try {
/* 186 */       Properties properties = new Properties();
/*     */       
/* 188 */       input = new FileInputStream(this.myFile);
/* 189 */       properties.load(input);
/* 190 */       return properties;
/*     */     } catch (IOException ioe) {
/* 192 */       throw new BuildException(ioe);
/*     */     } finally {
/* 194 */       if (null != input) {
/*     */         try {
/* 196 */           input.close();
/*     */         } catch (IOException ioe) {
/* 198 */           getProject().log(""error closing input stream "" + ioe, 0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 212 */     if (null == this.myFile) {
/* 213 */       this.myFile = getProject().resolveFile(""build.number"");
/*     */     }
/*     */     
/* 216 */     if (!this.myFile.exists()) {
/*     */       try {
/* 218 */         FileUtils.newFileUtils().createNewFile(this.myFile);
/*     */       } catch (IOException ioe) {
/* 220 */         String message = this.myFile + "" doesn't exist and new file can't be created."";
/*     */ 
/*     */         
/* 223 */         throw new BuildException(message, ioe);
/*     */       } 
/*     */     }
/*     */     
/* 227 */     if (!this.myFile.canRead()) {
/* 228 */       String message = ""Unable to read from "" + this.myFile + ""."";
/*     */       
/* 230 */       throw new BuildException(message);
/*     */     } 
/*     */     
/* 233 */     if (!this.myFile.canWrite()) {
/* 234 */       String message = ""Unable to write to "" + this.myFile + ""."";
/*     */       
/* 236 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\BuildNumber.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BUnzip2,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.bzip2.CBZip2InputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BUnzip2
/*     */   extends Unpack
/*     */ {
/*     */   private static final String DEFAULT_EXTENSION = "".bz2"";
/*     */   
/*  82 */   protected String getDefaultExtension() { return "".bz2""; }
/*     */ 
/*     */   
/*     */   protected void extract() {
/*  86 */     if (this.source.lastModified() > this.dest.lastModified()) {
/*  87 */       log(""Expanding "" + this.source.getAbsolutePath() + "" to "" + this.dest.getAbsolutePath());
/*     */ 
/*     */       
/*  90 */       FileOutputStream out = null;
/*  91 */       CBZip2InputStream zIn = null;
/*  92 */       FileInputStream fis = null;
/*  93 */       BufferedInputStream bis = null;
/*     */       try {
/*  95 */         out = new FileOutputStream(this.dest);
/*  96 */         fis = new FileInputStream(this.source);
/*  97 */         bis = new BufferedInputStream(fis);
/*  98 */         int b = bis.read();
/*  99 */         if (b != 66) {
/* 100 */           throw new BuildException(""Invalid bz2 file."", getLocation());
/*     */         }
/* 102 */         b = bis.read();
/* 103 */         if (b != 90) {
/* 104 */           throw new BuildException(""Invalid bz2 file."", getLocation());
/*     */         }
/* 106 */         zIn = new CBZip2InputStream(bis);
/* 107 */         byte[] buffer = new byte[8192];
/* 108 */         int count = 0;
/*     */         do {
/* 110 */           out.write(buffer, 0, count);
/* 111 */           count = zIn.read(buffer, 0, buffer.length);
/* 112 */         } while (count != -1);
/*     */       } catch (IOException ioe) {
/* 114 */         String msg = ""Problem expanding bzip2 "" + ioe.getMessage();
/* 115 */         throw new BuildException(msg, ioe, getLocation());
/*     */       } finally {
/* 117 */         if (bis != null) {
/*     */           try {
/* 119 */             bis.close();
/* 120 */           } catch (IOException ioex) {}
/*     */         }
/*     */ 
/*     */         
/* 124 */         if (fis != null) {
/*     */           try {
/* 126 */             fis.close();
/* 127 */           } catch (IOException ioex) {}
/*     */         }
/*     */ 
/*     */         
/* 131 */         if (out != null) {
/*     */           try {
/* 133 */             out.close();
/* 134 */           } catch (IOException ioex) {}
/*     */         }
/*     */ 
/*     */         
/* 138 */         if (zIn != null)
/*     */           try {
/* 140 */             zIn.close();
/* 141 */           } catch (IOException ioex) {} 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\BUnzip2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BZip2,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.BufferedOutputStream;
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.bzip2.CBZip2OutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class BZip2
/*    */   extends Pack
/*    */ {
/*    */   protected void pack() {
/* 77 */     CBZip2OutputStream zOut = null;
/*    */     try {
/* 79 */       BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(this.zipFile));
/*    */       
/* 81 */       bos.write(66);
/* 82 */       bos.write(90);
/* 83 */       zOut = new CBZip2OutputStream(bos);
/* 84 */       zipFile(this.source, (OutputStream)zOut);
/*    */     } catch (IOException ioe) {
/* 86 */       String msg = ""Problem creating bzip2 "" + ioe.getMessage();
/* 87 */       throw new BuildException(msg, ioe, getLocation());
/*    */     } finally {
/* 89 */       if (zOut != null)
/*    */         
/*    */         try {
/* 92 */           zOut.close();
/* 93 */         } catch (IOException e) {} 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\BZip2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CallTarget,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.PropertySet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CallTarget
/*     */   extends Task
/*     */ {
/*     */   private Ant callee;
/*     */   private String subTarget;
/*     */   private boolean inheritAll = true;
/*     */   private boolean inheritRefs = false;
/*     */   
/* 101 */   public void setInheritAll(boolean inherit) { this.inheritAll = inherit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setInheritRefs(boolean inheritRefs) { this.inheritRefs = inheritRefs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 118 */     this.callee = (Ant)getProject().createTask(""ant"");
/* 119 */     this.callee.setOwningTarget(getOwningTarget());
/* 120 */     this.callee.setTaskName(getTaskName());
/* 121 */     this.callee.setLocation(getLocation());
/* 122 */     this.callee.init();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 131 */     if (this.callee == null) {
/* 132 */       init();
/*     */     }
/*     */     
/* 135 */     if (this.subTarget == null) {
/* 136 */       throw new BuildException(""Attribute target is required."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 140 */     this.callee.setAntfile(getProject().getProperty(""ant.file""));
/* 141 */     this.callee.setTarget(this.subTarget);
/* 142 */     this.callee.setInheritAll(this.inheritAll);
/* 143 */     this.callee.setInheritRefs(this.inheritRefs);
/* 144 */     this.callee.execute();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Property createParam() {
/* 151 */     if (this.callee == null) {
/* 152 */       init();
/*     */     }
/* 154 */     return this.callee.createProperty();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addReference(Ant.Reference r) {
/* 163 */     if (this.callee == null) {
/* 164 */       init();
/*     */     }
/* 166 */     this.callee.addReference(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addPropertyset(PropertySet ps) {
/* 175 */     if (this.callee == null) {
/* 176 */       init();
/*     */     }
/* 178 */     this.callee.addPropertyset(ps);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void setTarget(String target) { this.subTarget = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleOutput(String output) {
/* 194 */     if (this.callee != null) {
/* 195 */       this.callee.handleOutput(output);
/*     */     } else {
/* 197 */       super.handleOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int handleInput(byte[] buffer, int offset, int length) throws IOException {
/* 208 */     if (this.callee != null) {
/* 209 */       return this.callee.handleInput(buffer, offset, length);
/*     */     }
/* 211 */     return super.handleInput(buffer, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleFlush(String output) {
/* 221 */     if (this.callee != null) {
/* 222 */       this.callee.handleFlush(output);
/*     */     } else {
/* 224 */       super.handleFlush(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleErrorOutput(String output) {
/* 234 */     if (this.callee != null) {
/* 235 */       this.callee.handleErrorOutput(output);
/*     */     } else {
/* 237 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleErrorFlush(String output) {
/* 247 */     if (this.callee != null) {
/* 248 */       this.callee.handleErrorFlush(output);
/*     */     } else {
/* 250 */       super.handleErrorFlush(output);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\CallTarget.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Checksum,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.security.DigestInputStream;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.security.NoSuchProviderException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Enumeration;
/*     */ import java.util.HashMap;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Checksum
/*     */   extends MatchingTask
/*     */   implements Condition
/*     */ {
/*  96 */   private File file = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File todir;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private String algorithm = ""MD5"";
/*     */ 
/*     */ 
/*     */   
/* 112 */   private String provider = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String fileext;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String property;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   private Map allDigests = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   private Map relativeFilePaths = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String totalproperty;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean forceOverwrite;
/*     */ 
/*     */ 
/*     */   
/*     */   private String verifyProperty;
/*     */ 
/*     */ 
/*     */   
/* 151 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */   
/* 155 */   private Hashtable includeFileMap = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private MessageDigest messageDigest;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isCondition;
/*     */ 
/*     */ 
/*     */   
/* 167 */   private int readBufferSize = 8192;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setTodir(File todir) { this.todir = todir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setAlgorithm(String algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setProvider(String provider) { this.provider = provider; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setFileext(String fileext) { this.fileext = fileext; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setTotalproperty(String totalproperty) { this.totalproperty = totalproperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setVerifyproperty(String verifyProperty) { this.verifyProperty = verifyProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setForceOverwrite(boolean forceOverwrite) { this.forceOverwrite = forceOverwrite; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 248 */   public void setReadBufferSize(int size) { this.readBufferSize = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 262 */     this.isCondition = false;
/* 263 */     boolean value = validateAndExecute();
/* 264 */     if (this.verifyProperty != null) {
/* 265 */       getProject().setNewProperty(this.verifyProperty, (new Boolean(value)).toString());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 277 */     this.isCondition = true;
/* 278 */     return validateAndExecute();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validateAndExecute() throws BuildException {
/* 285 */     String savedFileExt = this.fileext;
/*     */     
/* 287 */     if (this.file == null && this.filesets.size() == 0) {
/* 288 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */     
/* 292 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 293 */       throw new BuildException(""Checksum cannot be generated for directories"");
/*     */     }
/*     */ 
/*     */     
/* 297 */     if (this.file != null && this.totalproperty != null) {
/* 298 */       throw new BuildException(""File and Totalproperty cannot co-exist."");
/*     */     }
/*     */ 
/*     */     
/* 302 */     if (this.property != null && this.fileext != null) {
/* 303 */       throw new BuildException(""Property and FileExt cannot co-exist."");
/*     */     }
/*     */ 
/*     */     
/* 307 */     if (this.property != null) {
/* 308 */       if (this.forceOverwrite) {
/* 309 */         throw new BuildException(""ForceOverwrite cannot be used when Property is specified"");
/*     */       }
/*     */ 
/*     */       
/* 313 */       if (this.file != null) {
/* 314 */         if (this.filesets.size() > 0) {
/* 315 */           throw new BuildException(""Multiple files cannot be used when Property is specified"");
/*     */         
/*     */         }
/*     */       }
/* 319 */       else if (this.filesets.size() > 1) {
/* 320 */         throw new BuildException(""Multiple files cannot be used when Property is specified"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 326 */     if (this.verifyProperty != null) {
/* 327 */       this.isCondition = true;
/*     */     }
/*     */     
/* 330 */     if (this.verifyProperty != null && this.forceOverwrite) {
/* 331 */       throw new BuildException(""VerifyProperty and ForceOverwrite cannot co-exist."");
/*     */     }
/*     */ 
/*     */     
/* 335 */     if (this.isCondition && this.forceOverwrite) {
/* 336 */       throw new BuildException(""ForceOverwrite cannot be used when conditions are being used."");
/*     */     }
/*     */ 
/*     */     
/* 340 */     this.messageDigest = null;
/* 341 */     if (this.provider != null) {
/*     */       try {
/* 343 */         this.messageDigest = MessageDigest.getInstance(this.algorithm, this.provider);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 345 */         throw new BuildException(noalgo, getLocation());
/*     */       } catch (NoSuchProviderException noprovider) {
/* 347 */         throw new BuildException(noprovider, getLocation());
/*     */       } 
/*     */     } else {
/*     */       try {
/* 351 */         this.messageDigest = MessageDigest.getInstance(this.algorithm);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 353 */         throw new BuildException(noalgo, getLocation());
/*     */       } 
/*     */     } 
/*     */     
/* 357 */     if (this.messageDigest == null) {
/* 358 */       throw new BuildException(""Unable to create Message Digest"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 362 */     if (this.fileext == null) {
/* 363 */       this.fileext = ""."" + this.algorithm;
/* 364 */     } else if (this.fileext.trim().length() == 0) {
/* 365 */       throw new BuildException(""File extension when specified must not be an empty string"");
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 370 */       int sizeofFileSet = this.filesets.size();
/* 371 */       for (int i = 0; i < sizeofFileSet; i++) {
/* 372 */         FileSet fs = this.filesets.elementAt(i);
/* 373 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 374 */         String[] srcFiles = ds.getIncludedFiles();
/* 375 */         for (int j = 0; j < srcFiles.length; j++) {
/* 376 */           File src = new File(fs.getDir(getProject()), srcFiles[j]);
/* 377 */           if (this.totalproperty != null || this.todir != null) {
/*     */ 
/*     */ 
/*     */             
/* 381 */             String relativePath = srcFiles[j].replace(File.separatorChar, '/');
/* 382 */             this.relativeFilePaths.put(src, relativePath);
/*     */           } 
/* 384 */           addToIncludeFileMap(src);
/*     */         } 
/*     */       } 
/*     */       
/* 388 */       addToIncludeFileMap(this.file);
/*     */       
/* 390 */       return generateChecksums();
/*     */     } finally {
/* 392 */       this.fileext = savedFileExt;
/* 393 */       this.includeFileMap.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addToIncludeFileMap(File file) throws BuildException {
/* 402 */     if (file != null) {
/* 403 */       if (file.exists()) {
/* 404 */         if (this.property == null) {
/* 405 */           File checksumFile = getChecksumFile(file);
/* 406 */           if (this.forceOverwrite || this.isCondition || file.lastModified() > checksumFile.lastModified()) {
/*     */             
/* 408 */             this.includeFileMap.put(file, checksumFile);
/*     */           } else {
/* 410 */             log(file + "" omitted as "" + checksumFile + "" is up to date."", 3);
/*     */             
/* 412 */             if (this.totalproperty != null) {
/*     */               
/* 414 */               String checksum = null;
/*     */               try {
/* 416 */                 BufferedReader diskChecksumReader = new BufferedReader(new FileReader(checksumFile));
/*     */                 
/* 418 */                 checksum = diskChecksumReader.readLine();
/*     */               } catch (IOException e) {
/* 420 */                 throw new BuildException(""Couldn't read checksum file "" + checksumFile, e);
/*     */               } 
/*     */               
/* 423 */               byte[] digest = decodeHex(checksum.toCharArray());
/* 424 */               this.allDigests.put(file, digest);
/*     */             } 
/*     */           } 
/*     */         } else {
/* 428 */           this.includeFileMap.put(file, this.property);
/*     */         } 
/*     */       } else {
/* 431 */         String message = ""Could not find file "" + file.getAbsolutePath() + "" to generate checksum for."";
/*     */ 
/*     */         
/* 434 */         log(message);
/* 435 */         throw new BuildException(message, getLocation());
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   private File getChecksumFile(File file) {
/*     */     File file1;
/* 442 */     if (this.todir != null) {
/*     */       
/* 444 */       String path = (String)this.relativeFilePaths.get(file);
/* 445 */       file1 = (new File(this.todir, path)).getParentFile();
/*     */       
/* 447 */       file1.mkdirs();
/*     */     }
/*     */     else {
/*     */       
/* 451 */       file1 = file.getParentFile();
/*     */     } 
/* 453 */     File checksumFile = new File(file1, file.getName() + this.fileext);
/* 454 */     return checksumFile;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean generateChecksums() throws BuildException {
/* 461 */     boolean checksumMatches = true;
/* 462 */     FileInputStream fis = null;
/* 463 */     FileOutputStream fos = null;
/* 464 */     byte[] buf = new byte[this.readBufferSize];
/*     */     try {
/* 466 */       for (Enumeration e = this.includeFileMap.keys(); e.hasMoreElements(); ) {
/* 467 */         this.messageDigest.reset();
/* 468 */         File src = e.nextElement();
/* 469 */         if (!this.isCondition) {
/* 470 */           log(""Calculating "" + this.algorithm + "" checksum for "" + src, 3);
/*     */         }
/* 472 */         fis = new FileInputStream(src);
/* 473 */         DigestInputStream dis = new DigestInputStream(fis, this.messageDigest); do {
/*     */         
/* 475 */         } while (dis.read(buf, 0, this.readBufferSize) != -1);
/*     */ 
/*     */         
/* 478 */         dis.close();
/* 479 */         fis.close();
/* 480 */         fis = null;
/* 481 */         byte[] fileDigest = this.messageDigest.digest();
/* 482 */         if (this.totalproperty != null) {
/* 483 */           this.allDigests.put(src, fileDigest);
/*     */         }
/* 485 */         String checksum = createDigestString(fileDigest);
/*     */         
/* 487 */         Object destination = this.includeFileMap.get(src);
/* 488 */         if (destination instanceof String) {
/* 489 */           String prop = (String)destination;
/* 490 */           if (this.isCondition) {
/* 491 */             checksumMatches = (checksumMatches && checksum.equals(this.property));
/*     */             continue;
/*     */           } 
/* 494 */           getProject().setNewProperty(prop, checksum); continue;
/*     */         } 
/* 496 */         if (destination instanceof File) {
/* 497 */           if (this.isCondition) {
/* 498 */             File existingFile = (File)destination;
/* 499 */             if (existingFile.exists()) {
/* 500 */               fis = new FileInputStream(existingFile);
/* 501 */               InputStreamReader isr = new InputStreamReader(fis);
/* 502 */               BufferedReader br = new BufferedReader(isr);
/* 503 */               String suppliedChecksum = br.readLine();
/* 504 */               fis.close();
/* 505 */               fis = null;
/* 506 */               br.close();
/* 507 */               isr.close();
/* 508 */               checksumMatches = (checksumMatches && checksum.equals(suppliedChecksum));
/*     */               continue;
/*     */             } 
/* 511 */             checksumMatches = false;
/*     */             continue;
/*     */           } 
/* 514 */           File dest = (File)destination;
/* 515 */           fos = new FileOutputStream(dest);
/* 516 */           fos.write(checksum.getBytes());
/* 517 */           fos.close();
/* 518 */           fos = null;
/*     */         } 
/*     */       } 
/*     */       
/* 522 */       if (this.totalproperty != null) {
/*     */ 
/*     */         
/* 525 */         Set keys = this.allDigests.keySet();
/* 526 */         Object[] keyArray = keys.toArray();
/*     */         
/* 528 */         Arrays.sort(keyArray);
/*     */         
/* 530 */         this.messageDigest.reset();
/* 531 */         for (int i = 0; i < keyArray.length; i++) {
/* 532 */           File src = (File)keyArray[i];
/*     */ 
/*     */           
/* 535 */           byte[] digest = (byte[])this.allDigests.get(src);
/* 536 */           this.messageDigest.update(digest);
/*     */ 
/*     */           
/* 539 */           String fileName = (String)this.relativeFilePaths.get(src);
/* 540 */           this.messageDigest.update(fileName.getBytes());
/*     */         } 
/* 542 */         String totalChecksum = createDigestString(this.messageDigest.digest());
/* 543 */         getProject().setNewProperty(this.totalproperty, totalChecksum);
/*     */       } 
/*     */     } catch (Exception e) {
/* 546 */       throw new BuildException(e, getLocation());
/*     */     } finally {
/* 548 */       if (fis != null) {
/*     */         try {
/* 550 */           fis.close();
/* 551 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 555 */       if (fos != null) {
/*     */         try {
/* 557 */           fos.close();
/* 558 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 563 */     return checksumMatches;
/*     */   }
/*     */   
/*     */   private String createDigestString(byte[] fileDigest) {
/* 567 */     StringBuffer checksumSb = new StringBuffer();
/* 568 */     for (int i = 0; i < fileDigest.length; i++) {
/* 569 */       String hexStr = Integer.toHexString(0xFF & fileDigest[i]);
/* 570 */       if (hexStr.length() < 2) {
/* 571 */         checksumSb.append(""0"");
/*     */       }
/* 573 */       checksumSb.append(hexStr);
/*     */     } 
/* 575 */     return checksumSb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] decodeHex(char[] data) throws BuildException {
/* 588 */     int l = data.length;
/*     */     
/* 590 */     if ((l & 0x1) != 0) {
/* 591 */       throw new BuildException(""odd number of characters."");
/*     */     }
/*     */     
/* 594 */     byte[] out = new byte[l >> 1];
/*     */ 
/*     */     
/* 597 */     for (int i = 0, j = 0; j < l; i++) {
/* 598 */       int f = Character.digit(data[j++], 16) << 4;
/* 599 */       f |= Character.digit(data[j++], 16);
/* 600 */       out[i] = (byte)(f & 0xFF);
/*     */     } 
/*     */     
/* 603 */     return out;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Checksum.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Chmod,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Chmod
/*     */   extends ExecuteOn
/*     */ {
/*  83 */   private FileSet defaultSet = new FileSet();
/*     */   
/*     */   private boolean defaultSetDefined = false;
/*     */   
/*     */   private boolean havePerm = false;
/*     */ 
/*     */   
/*     */   public Chmod() {
/*  91 */     super.setExecutable(""chmod"");
/*  92 */     setParallel(true);
/*  93 */     super.setSkipEmptyFilesets(true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/* 100 */     super.setProject(project);
/* 101 */     this.defaultSet.setProject(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFile(File src) {
/* 109 */     FileSet fs = new FileSet();
/* 110 */     fs.setFile(src);
/* 111 */     addFileset(fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setDir(File src) { this.defaultSet.setDir(src); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPerm(String perm) {
/* 127 */     createArg().setValue(perm);
/* 128 */     this.havePerm = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 135 */     this.defaultSetDefined = true;
/* 136 */     return this.defaultSet.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 143 */     this.defaultSetDefined = true;
/* 144 */     return this.defaultSet.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 151 */     this.defaultSetDefined = true;
/* 152 */     return this.defaultSet.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 162 */     this.defaultSetDefined = true;
/* 163 */     this.defaultSet.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 173 */     this.defaultSetDefined = true;
/* 174 */     this.defaultSet.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 185 */     this.defaultSetDefined = true;
/* 186 */     this.defaultSet.setDefaultexcludes(useDefaultExcludes);
/*     */   }
/*     */   
/*     */   protected void checkConfiguration() {
/* 190 */     if (!this.havePerm) {
/* 191 */       throw new BuildException(""Required attribute perm not set in chmod"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 195 */     if (this.defaultSetDefined && this.defaultSet.getDir(getProject()) != null) {
/* 196 */       addFileset(this.defaultSet);
/*     */     }
/* 198 */     super.checkConfiguration();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 208 */     if (this.defaultSetDefined || this.defaultSet.getDir(getProject()) == null) {
/*     */       try {
/* 210 */         super.execute();
/*     */       } finally {
/* 212 */         if (this.defaultSetDefined && this.defaultSet.getDir(getProject()) != null) {
/* 213 */           this.filesets.removeElement(this.defaultSet);
/*     */         }
/*     */       } 
/* 216 */     } else if (isValidOs()) {
/*     */       
/* 218 */       Execute execute = prepareExec();
/* 219 */       Commandline cloned = (Commandline)this.cmdl.clone();
/* 220 */       cloned.createArgument().setValue(this.defaultSet.getDir(getProject()).getPath());
/*     */       
/*     */       try {
/* 223 */         execute.setCommandline(cloned.getCommandline());
/* 224 */         runExecute(execute);
/*     */       } catch (IOException e) {
/* 226 */         throw new BuildException(""Execute failed: "" + e, e, getLocation());
/*     */       } finally {
/*     */         
/* 229 */         logFlush();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public void setExecutable(String e) { throw new BuildException(getTaskType() + "" doesn't support the executable attribute"", getLocation()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   public void setCommand(Commandline cmdl) { throw new BuildException(getTaskType() + "" doesn't support the command attribute"", getLocation()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public void setSkipEmptyFilesets(boolean skip) { throw new BuildException(getTaskType() + "" doesn't support the skipemptyfileset attribute"", getLocation()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 262 */   public void setAddsourcefile(boolean b) { throw new BuildException(getTaskType() + "" doesn't support the addsourcefile attribute"", getLocation()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   protected boolean isValidOs() { return (Os.isFamily(""unix"") && super.isValidOs()); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Chmod.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Concat,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import java.io.Writer;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Concat
/*     */   extends Task
/*     */ {
/*     */   private static final int BUFFER_SIZE = 8192;
/* 115 */   private File destinationFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   private String encoding = null;
/*     */ 
/*     */   
/* 130 */   private String outputEncoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private StringBuffer textBuffer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   private Vector sources = new Vector();
/*     */ 
/*     */   
/* 146 */   private Vector filterChains = null;
/*     */   
/*     */   private boolean forceOverwrite = true;
/*     */   
/*     */   private TextElement footer;
/*     */   
/*     */   private TextElement header;
/*     */   
/*     */   private boolean fixLastLine = false;
/*     */   
/* 156 */   private String eolString = System.getProperty(""line.separator"");
/*     */   
/* 158 */   private Writer outputWriter = null;
/*     */ 
/*     */   
/* 161 */   private Vector sourceFiles = new Vector();
/*     */ 
/*     */   
/* 164 */   private static FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setDestfile(File destinationFile) { this.destinationFile = destinationFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEncoding(String encoding) {
/* 193 */     this.encoding = encoding;
/* 194 */     if (this.outputEncoding == null) {
/* 195 */       this.outputEncoding = encoding;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public void setOutputEncoding(String outputEncoding) { this.outputEncoding = outputEncoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   public void setForce(boolean force) { this.forceOverwrite = force; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() {
/* 226 */     Path path = new Path(getProject());
/* 227 */     this.sources.addElement(path);
/* 228 */     return path;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 236 */   public void addFileset(FileSet set) { this.sources.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 244 */   public void addFilelist(FileList list) { this.sources.addElement(list); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilterChain(FilterChain filterChain) {
/* 253 */     if (this.filterChains == null) {
/* 254 */       this.filterChains = new Vector();
/*     */     }
/* 256 */     this.filterChains.addElement(filterChain);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(String text) {
/* 264 */     if (this.textBuffer == null)
/*     */     {
/*     */       
/* 267 */       this.textBuffer = new StringBuffer(text.length());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 272 */     this.textBuffer.append(text);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void addHeader(TextElement header) { this.header = header; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 290 */   public void addFooter(TextElement footer) { this.footer = footer; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 301 */   public void setFixLastLine(boolean fixLastLine) { this.fixLastLine = fixLastLine; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEol(FixCRLF.CrLf crlf) {
/* 313 */     String s = crlf.getValue();
/* 314 */     if (s.equals(""cr"") || s.equals(""mac"")) {
/* 315 */       this.eolString = ""\r"";
/* 316 */     } else if (s.equals(""lf"") || s.equals(""unix"")) {
/* 317 */       this.eolString = ""\n"";
/* 318 */     } else if (s.equals(""crlf"") || s.equals(""dos"")) {
/* 319 */       this.eolString = ""\r\n"";
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public void setWriter(Writer outputWriter) { this.outputWriter = outputWriter; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 339 */     sanitizeText();
/*     */     
/* 341 */     if (this.destinationFile != null && this.outputWriter != null) {
/* 342 */       throw new BuildException(""Cannot specify both a destination file and an output writer"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 347 */     if (this.sources.size() == 0 && this.textBuffer == null)
/*     */     {
/* 349 */       throw new BuildException(""At least one file must be provided, or some text."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 356 */     if (this.sources.size() > 0 && this.textBuffer != null) {
/* 357 */       throw new BuildException(""Cannot include inline text when using filesets."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 362 */     for (Enumeration e = this.sources.elements(); e.hasMoreElements(); ) {
/* 363 */       Object o = e.nextElement();
/* 364 */       if (o instanceof Path) {
/* 365 */         Path path = (Path)o;
/* 366 */         checkAddFiles(null, path.list()); continue;
/*     */       } 
/* 368 */       if (o instanceof FileSet) {
/* 369 */         FileSet fileSet = (FileSet)o;
/* 370 */         DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
/*     */         
/* 372 */         checkAddFiles(fileSet.getDir(getProject()), scanner.getIncludedFiles());
/*     */         continue;
/*     */       } 
/* 375 */       if (o instanceof FileList) {
/* 376 */         FileList fileList = (FileList)o;
/* 377 */         checkAddFiles(fileList.getDir(getProject()), fileList.getFiles(getProject()));
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 383 */     if (this.destinationFile != null && !this.forceOverwrite && this.sourceFiles.size() > 0 && this.destinationFile.exists()) {
/*     */       
/* 385 */       boolean outofdate = false;
/* 386 */       for (int i = 0; i < this.sourceFiles.size(); i++) {
/* 387 */         File file = this.sourceFiles.elementAt(i);
/* 388 */         if (file.lastModified() > this.destinationFile.lastModified()) {
/* 389 */           outofdate = true;
/*     */           break;
/*     */         } 
/*     */       } 
/* 393 */       if (!outofdate) {
/* 394 */         log(this.destinationFile + "" is up-to-date."", 3);
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */     } 
/*     */     
/* 401 */     if (this.textBuffer == null && this.sourceFiles.size() == 0 && this.header == null && this.footer == null) {
/*     */       
/* 403 */       log(""No existing files and no nested text, doing nothing"", 2);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 408 */     cat();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {
/* 415 */     this.append = false;
/* 416 */     this.forceOverwrite = true;
/* 417 */     this.destinationFile = null;
/* 418 */     this.encoding = null;
/* 419 */     this.outputEncoding = null;
/* 420 */     this.fixLastLine = false;
/* 421 */     this.sources.removeAllElements();
/* 422 */     this.sourceFiles.removeAllElements();
/* 423 */     this.filterChains = null;
/* 424 */     this.footer = null;
/* 425 */     this.header = null;
/*     */   }
/*     */   
/*     */   private void checkAddFiles(File base, String[] filenames) {
/* 429 */     for (int i = 0; i < filenames.length; i++) {
/* 430 */       File file = new File(base, filenames[i]);
/* 431 */       if (!file.exists()) {
/* 432 */         log(""File "" + file + "" does not exist."", 0);
/*     */       } else {
/*     */         
/* 435 */         if (this.destinationFile != null && fileUtils.fileNameEquals(this.destinationFile, file))
/*     */         {
/* 437 */           throw new BuildException(""Input file \"""" + file + ""\"" "" + ""is the same as the output file."");
/*     */         }
/*     */ 
/*     */         
/* 441 */         this.sourceFiles.addElement(file);
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void cat() {
/* 447 */     OutputStream os = null;
/* 448 */     Reader reader = null;
/* 449 */     char[] buffer = new char[8192];
/*     */ 
/*     */     
/*     */     try {
/* 453 */       PrintWriter writer = null;
/*     */       
/* 455 */       if (this.outputWriter != null) {
/* 456 */         writer = new PrintWriter(this.outputWriter);
/*     */       } else {
/* 458 */         if (this.destinationFile == null) {
/*     */           
/* 460 */           os = new LogOutputStream(this, 1);
/*     */         } else {
/*     */           
/* 463 */           File parent = fileUtils.getParentFile(this.destinationFile);
/* 464 */           if (!parent.exists()) {
/* 465 */             parent.mkdirs();
/*     */           }
/*     */           
/* 468 */           os = new FileOutputStream(this.destinationFile.getAbsolutePath(), this.append);
/*     */         } 
/*     */ 
/*     */         
/* 472 */         if (this.outputEncoding == null) {
/* 473 */           writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os)));
/*     */         }
/*     */         else {
/*     */           
/* 477 */           writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(os, this.outputEncoding)));
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 483 */       if (this.header != null) {
/* 484 */         if (this.header.getFiltering()) {
/* 485 */           concatenate(buffer, writer, new StringReader(this.header.getValue()));
/*     */         } else {
/*     */           
/* 488 */           writer.print(this.header.getValue());
/*     */         } 
/*     */       }
/*     */       
/* 492 */       if (this.textBuffer != null) {
/* 493 */         reader = new StringReader(getProject().replaceProperties(this.textBuffer.substring(0)));
/*     */       } else {
/*     */         
/* 496 */         reader = new MultiReader();
/*     */       } 
/*     */       
/* 499 */       concatenate(buffer, writer, reader);
/*     */       
/* 501 */       if (this.footer != null) {
/* 502 */         if (this.footer.getFiltering()) {
/* 503 */           concatenate(buffer, writer, new StringReader(this.footer.getValue()));
/*     */         } else {
/*     */           
/* 506 */           writer.print(this.footer.getValue());
/*     */         } 
/*     */       }
/*     */       
/* 510 */       writer.flush();
/* 511 */       if (os != null) {
/* 512 */         os.flush();
/*     */       }
/*     */     } catch (IOException ioex) {
/*     */       
/* 516 */       throw new BuildException(""Error while concatenating: "" + ioex.getMessage(), ioex);
/*     */     } finally {
/*     */       
/* 519 */       if (reader != null) {
/*     */         try {
/* 521 */           reader.close();
/* 522 */         } catch (IOException ignore) {}
/*     */       }
/*     */ 
/*     */       
/* 526 */       if (os != null) {
/*     */         try {
/* 528 */           os.close();
/* 529 */         } catch (IOException ignore) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void concatenate(char[] buffer, Writer writer, Reader in) throws IOException {
/* 540 */     if (this.filterChains != null) {
/* 541 */       ChainReaderHelper helper = new ChainReaderHelper();
/* 542 */       helper.setBufferSize(8192);
/* 543 */       helper.setPrimaryReader(in);
/* 544 */       helper.setFilterChains(this.filterChains);
/* 545 */       helper.setProject(getProject());
/* 546 */       in = new BufferedReader(helper.getAssembledReader());
/*     */     } 
/*     */     
/*     */     while (true) {
/* 550 */       int nRead = in.read(buffer, 0, buffer.length);
/* 551 */       if (nRead == -1) {
/*     */         break;
/*     */       }
/* 554 */       writer.write(buffer, 0, nRead);
/*     */     } 
/*     */     
/* 557 */     writer.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sanitizeText() {
/* 567 */     if (this.textBuffer != null && 
/* 568 */       this.textBuffer.substring(0).trim().length() == 0) {
/* 569 */       this.textBuffer = null;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TextElement
/*     */     extends ProjectComponent
/*     */   {
/* 578 */     private String value = """";
/*     */     private boolean trimLeading = false;
/*     */     private boolean trim = false;
/*     */     private boolean filtering = true;
/* 582 */     private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 592 */     public void setFiltering(boolean filtering) { this.filtering = filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 597 */     private boolean getFiltering() { return this.filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 606 */     public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setFile(File file) {
/* 617 */       if (!file.exists()) {
/* 618 */         throw new BuildException(""File "" + file + "" does not exist."");
/*     */       }
/*     */       
/* 621 */       BufferedReader reader = null;
/*     */       try {
/* 623 */         if (this.encoding == null) {
/* 624 */           reader = new BufferedReader(new FileReader(file));
/*     */         } else {
/* 626 */           reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), this.encoding));
/*     */         } 
/*     */ 
/*     */         
/* 630 */         fileUtils; this.value = FileUtils.readFully(reader);
/*     */       } catch (IOException ex) {
/* 632 */         throw new BuildException(ex);
/*     */       } finally {
/* 634 */         if (reader != null) {
/*     */           try {
/* 636 */             reader.close();
/* 637 */           } catch (Throwable t) {}
/*     */         }
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 649 */     public void addText(String value) { this.value += getProject().replaceProperties(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 657 */     public void setTrimLeading(boolean strip) { this.trimLeading = strip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 665 */     public void setTrim(boolean trim) { this.trim = trim; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getValue() {
/* 672 */       if (this.value == null) {
/* 673 */         this.value = """";
/*     */       }
/* 675 */       if (this.value.trim().length() == 0) {
/* 676 */         this.value = """";
/*     */       }
/* 678 */       if (this.trimLeading) {
/* 679 */         char[] current = this.value.toCharArray();
/* 680 */         StringBuffer b = new StringBuffer(current.length);
/* 681 */         boolean startOfLine = true;
/* 682 */         int pos = 0;
/* 683 */         while (pos < current.length) {
/* 684 */           char ch = current[pos++];
/* 685 */           if (startOfLine) {
/* 686 */             if (ch == ' ' || ch == '\t') {
/*     */               continue;
/*     */             }
/* 689 */             startOfLine = false;
/*     */           } 
/* 691 */           b.append(ch);
/* 692 */           if (ch == '\n' || ch == '\r') {
/* 693 */             startOfLine = true;
/*     */           }
/*     */         } 
/* 696 */         this.value = b.toString();
/*     */       } 
/* 698 */       if (this.trim) {
/* 699 */         this.value = this.value.trim();
/*     */       }
/* 701 */       return this.value;
/*     */     } }
/*     */   
/*     */   private class MultiReader extends Reader {
/*     */     private int pos;
/*     */     private Reader reader;
/*     */     private int lastPos;
/*     */     
/*     */     private MultiReader(Concat this$0) {
/* 710 */       Concat.this = Concat.this;
/* 711 */       this.pos = 0;
/* 712 */       this.reader = null;
/* 713 */       this.lastPos = 0;
/* 714 */       this.lastChars = new char[Concat.this.eolString.length()];
/* 715 */       this.needAddSeparator = false;
/*     */     }
/*     */     private Reader getReader() throws IOException {
/* 718 */       if (this.reader == null) {
/* 719 */         if (Concat.this.encoding == null) {
/* 720 */           this.reader = new BufferedReader(new FileReader(Concat.this.sourceFiles.elementAt(this.pos)));
/*     */         }
/*     */         else {
/*     */           
/* 724 */           this.reader = new BufferedReader(new InputStreamReader(new FileInputStream(Concat.this.sourceFiles.elementAt(this.pos)), Concat.this.encoding));
/*     */         } 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 730 */         for (int i = 0; i < this.lastChars.length; i++) {
/* 731 */           this.lastChars[i] = Character.MIN_VALUE;
/*     */         }
/*     */       } 
/* 734 */       return this.reader;
/*     */     }
/*     */ 
/*     */     
/*     */     private char[] lastChars;
/*     */     
/*     */     private boolean needAddSeparator;
/*     */     
/*     */     private final Concat this$0;
/*     */     
/*     */     public int read() throws IOException {
/* 745 */       if (this.needAddSeparator) {
/* 746 */         int ret = Concat.this.eolString.charAt(this.lastPos++);
/* 747 */         if (this.lastPos >= Concat.this.eolString.length()) {
/* 748 */           this.lastPos = 0;
/* 749 */           this.needAddSeparator = false;
/*     */         } 
/* 751 */         return ret;
/*     */       } 
/*     */       
/* 754 */       while (this.pos < Concat.this.sourceFiles.size()) {
/* 755 */         int ch = getReader().read();
/* 756 */         if (ch == -1) {
/* 757 */           this.reader.close();
/* 758 */           this.reader = null;
/* 759 */           if (Concat.this.fixLastLine && isMissingEndOfLine()) {
/* 760 */             this.needAddSeparator = true;
/* 761 */             this.lastPos = 0;
/*     */           } 
/*     */         } else {
/* 764 */           addLastChar((char)ch);
/* 765 */           return ch;
/*     */         } 
/* 767 */         this.pos++;
/*     */       } 
/* 769 */       return -1;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public int read(char[] cbuf, int off, int len) throws IOException {
/* 783 */       int amountRead = 0;
/* 784 */       while (this.pos < Concat.this.sourceFiles.size() || this.needAddSeparator) {
/* 785 */         if (this.needAddSeparator) {
/* 786 */           cbuf[off] = Concat.this.eolString.charAt(this.lastPos++);
/* 787 */           if (this.lastPos >= Concat.this.eolString.length()) {
/* 788 */             this.lastPos = 0;
/* 789 */             this.needAddSeparator = false;
/* 790 */             this.pos++;
/*     */           } 
/* 792 */           len--;
/* 793 */           off++;
/* 794 */           amountRead++;
/* 795 */           if (len == 0) {
/* 796 */             return amountRead;
/*     */           }
/*     */           continue;
/*     */         } 
/* 800 */         int nRead = getReader().read(cbuf, off, len);
/* 801 */         if (nRead == -1 || nRead == 0) {
/* 802 */           this.reader.close();
/* 803 */           this.reader = null;
/* 804 */           if (Concat.this.fixLastLine && isMissingEndOfLine()) {
/* 805 */             this.needAddSeparator = true;
/* 806 */             this.lastPos = 0; continue;
/*     */           } 
/* 808 */           this.pos++;
/*     */           continue;
/*     */         } 
/* 811 */         if (Concat.this.fixLastLine) {
/* 812 */           int i = nRead;
/* 813 */           for (; i > nRead - this.lastChars.length; 
/* 814 */             i--) {
/* 815 */             if (i < 0) {
/*     */               break;
/*     */             }
/* 818 */             addLastChar(cbuf[off + i - 1]);
/*     */           } 
/*     */         } 
/* 821 */         len -= nRead;
/* 822 */         off += nRead;
/* 823 */         amountRead += nRead;
/* 824 */         if (len == 0) {
/* 825 */           return amountRead;
/*     */         }
/*     */       } 
/*     */       
/* 829 */       if (amountRead == 0) {
/* 830 */         return -1;
/*     */       }
/* 832 */       return amountRead;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void close() throws IOException {
/* 840 */       if (this.reader != null) {
/* 841 */         this.reader.close();
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void addLastChar(char ch) {
/* 849 */       for (int i = this.lastChars.length - 2; i >= 0; i--) {
/* 850 */         this.lastChars[i] = this.lastChars[i + 1];
/*     */       }
/* 852 */       this.lastChars[this.lastChars.length - 1] = ch;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private boolean isMissingEndOfLine() {
/* 860 */       for (int i = 0; i < this.lastChars.length; i++) {
/* 861 */         if (this.lastChars[i] != Concat.this.eolString.charAt(i)) {
/* 862 */           return true;
/*     */         }
/*     */       } 
/* 865 */       return false;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Concat.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ConditionTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.taskdefs.condition.ConditionBase;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ConditionTask
/*     */   extends ConditionBase
/*     */ {
/*  81 */   private String property = null;
/*  82 */   private String value = ""true"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setProperty(String p) { this.property = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setValue(String v) { this.value = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 110 */     if (countConditions() > 1) {
/* 111 */       throw new BuildException(""You must not nest more than one condition into <condition>"");
/*     */     }
/*     */     
/* 114 */     if (countConditions() < 1) {
/* 115 */       throw new BuildException(""You must nest a condition into <condition>"");
/*     */     }
/*     */     
/* 118 */     if (this.property == null) {
/* 119 */       throw new BuildException(""The property attribute is required."");
/*     */     }
/*     */     
/* 122 */     Condition c = getConditions().nextElement();
/* 123 */     if (c.eval()) {
/* 124 */       log(""Condition true; setting "" + this.property + "" to "" + this.value, 4);
/*     */       
/* 126 */       getProject().setNewProperty(this.property, this.value);
/*     */     } else {
/* 128 */       log(""Condition false; not setting "" + this.property, 4);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ConditionTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copy,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.FlatFileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copy
/*     */   extends Task
/*     */ {
/* 100 */   protected File file = null;
/* 101 */   protected File destFile = null;
/* 102 */   protected File destDir = null;
/* 103 */   protected Vector filesets = new Vector();
/*     */   
/*     */   private boolean enableMultipleMappings = false;
/*     */   protected boolean filtering = false;
/*     */   protected boolean preserveLastModified = false;
/*     */   protected boolean forceOverwrite = false;
/*     */   protected boolean flatten = false;
/* 110 */   protected int verbosity = 3;
/*     */   
/*     */   protected boolean includeEmpty = true;
/*     */   private boolean failonerror = true;
/* 114 */   protected Hashtable fileCopyMap = new Hashtable();
/* 115 */   protected Hashtable dirCopyMap = new Hashtable();
/* 116 */   protected Hashtable completeDirMap = new Hashtable();
/*     */   
/* 118 */   protected Mapper mapperElement = null;
/* 119 */   private Vector filterChains = new Vector();
/* 120 */   private Vector filterSets = new Vector();
/*     */   private FileUtils fileUtils;
/* 122 */   private String inputEncoding = null;
/* 123 */   private String outputEncoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public Copy() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   protected FileUtils getFileUtils() { return this.fileUtils; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void setTofile(File destFile) { this.destFile = destFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setTodir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FilterChain createFilterChain() {
/* 168 */     FilterChain filterChain = new FilterChain();
/* 169 */     this.filterChains.addElement(filterChain);
/* 170 */     return filterChain;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FilterSet createFilterSet() {
/* 178 */     FilterSet filterSet = new FilterSet();
/* 179 */     this.filterSets.addElement(filterSet);
/* 180 */     return filterSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   public void setPreserveLastModified(String preserve) { setPreserveLastModified(Project.toBoolean(preserve)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setPreserveLastModified(boolean preserve) { this.preserveLastModified = preserve; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public boolean getPreserveLastModified() { return this.preserveLastModified; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 218 */   protected Vector getFilterSets() { return this.filterSets; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 227 */   protected Vector getFilterChains() { return this.filterChains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setFiltering(boolean filtering) { this.filtering = filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void setOverwrite(boolean overwrite) { this.forceOverwrite = overwrite; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setFlatten(boolean flatten) { this.flatten = flatten; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean verbose) {
/* 266 */     if (verbose) {
/* 267 */       this.verbosity = 2;
/*     */     } else {
/* 269 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void setIncludeEmptyDirs(boolean includeEmpty) { this.includeEmpty = includeEmpty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void setEnableMultipleMappings(boolean enableMultipleMappings) { this.enableMultipleMappings = enableMultipleMappings; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public boolean isEnableMultipleMapping() { return this.enableMultipleMappings; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   public void setFailOnError(boolean failonerror) { this.failonerror = failonerror; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 316 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 325 */     if (this.mapperElement != null) {
/* 326 */       throw new BuildException(""Cannot define more than one mapper"", getLocation());
/*     */     }
/*     */     
/* 329 */     this.mapperElement = new Mapper(getProject());
/* 330 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEncoding(String encoding) {
/* 339 */     this.inputEncoding = encoding;
/* 340 */     if (this.outputEncoding == null) {
/* 341 */       this.outputEncoding = encoding;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 351 */   public String getEncoding() { return this.inputEncoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 360 */   public void setOutputEncoding(String encoding) { this.outputEncoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 370 */   public String getOutputEncoding() { return this.outputEncoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 378 */     File savedFile = this.file;
/* 379 */     File savedDestFile = this.destFile;
/* 380 */     File savedDestDir = this.destDir;
/* 381 */     FileSet savedFileSet = null;
/* 382 */     if (this.file == null && this.destFile != null && this.filesets.size() == 1)
/*     */     {
/* 384 */       savedFileSet = this.filesets.elementAt(0);
/*     */     }
/*     */ 
/*     */     
/* 388 */     validateAttributes();
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 393 */       if (this.file != null) {
/* 394 */         if (this.file.exists()) {
/* 395 */           if (this.destFile == null) {
/* 396 */             this.destFile = new File(this.destDir, this.file.getName());
/*     */           }
/*     */           
/* 399 */           if (this.forceOverwrite || !this.destFile.exists() || this.file.lastModified() > this.destFile.lastModified()) {
/*     */             
/* 401 */             this.fileCopyMap.put(this.file.getAbsolutePath(), new String[] { this.destFile.getAbsolutePath() });
/*     */           } else {
/*     */             
/* 404 */             log(this.file + "" omitted as "" + this.destFile + "" is up to date."", 3);
/*     */           } 
/*     */         } else {
/*     */           
/* 408 */           String message = ""Warning: Could not find file "" + this.file.getAbsolutePath() + "" to copy."";
/*     */           
/* 410 */           if (!this.failonerror) {
/* 411 */             log(message);
/*     */           } else {
/* 413 */             throw new BuildException(message);
/*     */           } 
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 419 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 420 */         FileSet fs = this.filesets.elementAt(i);
/* 421 */         DirectoryScanner ds = null;
/*     */         try {
/* 423 */           ds = fs.getDirectoryScanner(getProject());
/*     */         } catch (BuildException e) {
/* 425 */           if (this.failonerror || !e.getMessage().endsWith("" not found.""))
/*     */           {
/* 427 */             throw e;
/*     */           }
/* 429 */           log(""Warning: "" + e.getMessage());
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 434 */         File fromDir = fs.getDir(getProject());
/*     */         
/* 436 */         String[] srcFiles = ds.getIncludedFiles();
/* 437 */         String[] srcDirs = ds.getIncludedDirectories();
/* 438 */         boolean isEverythingIncluded = (ds.isEverythingIncluded() && !fs.hasSelectors() && !fs.hasPatterns());
/*     */         
/* 440 */         if (isEverythingIncluded && !this.flatten && this.mapperElement == null)
/*     */         {
/* 442 */           this.completeDirMap.put(fromDir, this.destDir);
/*     */         }
/* 444 */         scan(fromDir, this.destDir, srcFiles, srcDirs);
/*     */       } 
/*     */ 
/*     */       
/*     */       try {
/* 449 */         doFileOperations();
/*     */       } catch (BuildException e) {
/* 451 */         if (!this.failonerror) {
/* 452 */           log(""Warning: "" + e.getMessage(), 0);
/*     */         } else {
/* 454 */           throw e;
/*     */         }
/*     */       
/*     */       } 
/*     */     } finally {
/*     */       
/* 460 */       this.file = savedFile;
/* 461 */       this.destFile = savedDestFile;
/* 462 */       this.destDir = savedDestDir;
/* 463 */       if (savedFileSet != null) {
/* 464 */         this.filesets.insertElementAt(savedFileSet, 0);
/*     */       }
/*     */       
/* 467 */       this.fileCopyMap.clear();
/* 468 */       this.dirCopyMap.clear();
/* 469 */       this.completeDirMap.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void validateAttributes() throws BuildException {
/* 484 */     if (this.file == null && this.filesets.size() == 0) {
/* 485 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */     
/* 489 */     if (this.destFile != null && this.destDir != null) {
/* 490 */       throw new BuildException(""Only one of tofile and todir may be set."");
/*     */     }
/*     */ 
/*     */     
/* 494 */     if (this.destFile == null && this.destDir == null) {
/* 495 */       throw new BuildException(""One of tofile or todir must be set."");
/*     */     }
/*     */     
/* 498 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 499 */       throw new BuildException(""Use a fileset to copy directories."");
/*     */     }
/*     */     
/* 502 */     if (this.destFile != null && this.filesets.size() > 0) {
/* 503 */       if (this.filesets.size() > 1) {
/* 504 */         throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */       }
/*     */       
/* 507 */       FileSet fs = this.filesets.elementAt(0);
/* 508 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 509 */       String[] srcFiles = ds.getIncludedFiles();
/*     */       
/* 511 */       if (srcFiles.length == 0) {
/* 512 */         throw new BuildException(""Cannot perform operation from directory to file."");
/*     */       }
/* 514 */       if (srcFiles.length == 1) {
/* 515 */         if (this.file == null) {
/* 516 */           this.file = new File(ds.getBasedir(), srcFiles[0]);
/* 517 */           this.filesets.removeElementAt(0);
/*     */         } else {
/* 519 */           throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */         } 
/*     */       } else {
/*     */         
/* 523 */         throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 529 */     if (this.destFile != null) {
/* 530 */       this.destDir = this.fileUtils.getParentFile(this.destFile);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scan(File fromDir, File toDir, String[] files, String[] dirs) {
/* 546 */     Object object = null;
/* 547 */     if (this.mapperElement != null) {
/* 548 */       object = this.mapperElement.getImplementation();
/* 549 */     } else if (this.flatten) {
/* 550 */       FlatFileNameMapper flatFileNameMapper = new FlatFileNameMapper();
/*     */     } else {
/* 552 */       object = new IdentityMapper();
/*     */     } 
/*     */     
/* 555 */     buildMap(fromDir, toDir, files, (FileNameMapper)object, this.fileCopyMap);
/*     */     
/* 557 */     if (this.includeEmpty) {
/* 558 */       buildMap(fromDir, toDir, dirs, (FileNameMapper)object, this.dirCopyMap);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void buildMap(File fromDir, File toDir, String[] names, FileNameMapper mapper, Hashtable map) {
/* 574 */     String[] toCopy = null;
/* 575 */     if (this.forceOverwrite) {
/* 576 */       Vector v = new Vector();
/* 577 */       for (int i = 0; i < names.length; i++) {
/* 578 */         if (mapper.mapFileName(names[i]) != null) {
/* 579 */           v.addElement(names[i]);
/*     */         }
/*     */       } 
/* 582 */       toCopy = new String[v.size()];
/* 583 */       v.copyInto((Object[])toCopy);
/*     */     } else {
/* 585 */       SourceFileScanner ds = new SourceFileScanner(this);
/* 586 */       toCopy = ds.restrict(names, fromDir, toDir, mapper);
/*     */     } 
/*     */     
/* 589 */     for (int i = 0; i < toCopy.length; i++) {
/* 590 */       File src = new File(fromDir, toCopy[i]);
/*     */       
/* 592 */       String[] mappedFiles = mapper.mapFileName(toCopy[i]);
/*     */       
/* 594 */       if (!this.enableMultipleMappings) {
/* 595 */         map.put(src.getAbsolutePath(), new String[] { (new File(toDir, mappedFiles[0])).getAbsolutePath() });
/*     */       }
/*     */       else {
/*     */         
/* 599 */         for (int k = 0; k < mappedFiles.length; k++) {
/* 600 */           mappedFiles[k] = (new File(toDir, mappedFiles[k])).getAbsolutePath();
/*     */         }
/*     */         
/* 603 */         map.put(src.getAbsolutePath(), mappedFiles);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/* 613 */     if (this.fileCopyMap.size() > 0) {
/* 614 */       log(""Copying "" + this.fileCopyMap.size() + "" file"" + ((this.fileCopyMap.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */ 
/*     */       
/* 618 */       Enumeration e = this.fileCopyMap.keys();
/* 619 */       while (e.hasMoreElements()) {
/* 620 */         String fromFile = e.nextElement();
/* 621 */         String[] toFiles = (String[])this.fileCopyMap.get(fromFile);
/*     */         
/* 623 */         for (int i = 0; i < toFiles.length; i++) {
/* 624 */           String toFile = toFiles[i];
/*     */           
/* 626 */           if (fromFile.equals(toFile)) {
/* 627 */             log(""Skipping self-copy of "" + fromFile, this.verbosity);
/*     */           } else {
/*     */ 
/*     */             
/*     */             try {
/* 632 */               log(""Copying "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */               
/* 634 */               FilterSetCollection executionFilters = new FilterSetCollection();
/*     */               
/* 636 */               if (this.filtering) {
/* 637 */                 executionFilters.addFilterSet(getProject().getGlobalFilterSet());
/*     */               }
/*     */               
/* 640 */               Enumeration filterEnum = this.filterSets.elements();
/* 641 */               while (filterEnum.hasMoreElements()) {
/* 642 */                 executionFilters.addFilterSet(filterEnum.nextElement());
/*     */               }
/*     */               
/* 645 */               this.fileUtils.copyFile(fromFile, toFile, executionFilters, this.filterChains, this.forceOverwrite, this.preserveLastModified, this.inputEncoding, this.outputEncoding, getProject());
/*     */             
/*     */             }
/*     */             catch (IOException ioe) {
/*     */               
/* 650 */               String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */               
/* 652 */               File targetFile = new File(toFile);
/* 653 */               if (targetFile.exists() && !targetFile.delete()) {
/* 654 */                 msg = msg + "" and I couldn't delete the corrupt "" + toFile;
/*     */               }
/* 656 */               throw new BuildException(msg, ioe, getLocation());
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/* 662 */     if (this.includeEmpty) {
/* 663 */       Enumeration e = this.dirCopyMap.elements();
/* 664 */       int createCount = 0;
/* 665 */       while (e.hasMoreElements()) {
/* 666 */         String[] dirs = e.nextElement();
/* 667 */         for (int i = 0; i < dirs.length; i++) {
/* 668 */           File d = new File(dirs[i]);
/* 669 */           if (!d.exists()) {
/* 670 */             if (!d.mkdirs()) {
/* 671 */               log(""Unable to create directory "" + d.getAbsolutePath(), 0);
/*     */             } else {
/*     */               
/* 674 */               createCount++;
/*     */             } 
/*     */           }
/*     */         } 
/*     */       } 
/* 679 */       if (createCount > 0)
/* 680 */         log(""Copied "" + this.dirCopyMap.size() + "" empty director"" + ((this.dirCopyMap.size() == 1) ? ""y"" : ""ies"") + "" to "" + createCount + "" empty director"" + ((createCount == 1) ? ""y"" : ""ies"") + "" under "" + this.destDir.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Copy.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copydir,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copydir
/*     */   extends MatchingTask
/*     */ {
/*     */   private File srcDir;
/*     */   private File destDir;
/*     */   private boolean filtering = false;
/*     */   private boolean flatten = false;
/*     */   private boolean forceOverwrite = false;
/*  82 */   private Hashtable filecopyList = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setSrc(File src) { this.srcDir = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setDest(File dest) { this.destDir = dest; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setFiltering(boolean filter) { this.filtering = filter; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setFlatten(boolean flatten) { this.flatten = flatten; }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void setForceoverwrite(boolean force) { this.forceOverwrite = force; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 115 */     log(""DEPRECATED - The copydir task is deprecated.  Use copy instead."");
/*     */     
/* 117 */     if (this.srcDir == null) {
/* 118 */       throw new BuildException(""src attribute must be set!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 122 */     if (!this.srcDir.exists()) {
/* 123 */       throw new BuildException(""srcdir "" + this.srcDir.toString() + "" does not exist!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 127 */     if (this.destDir == null) {
/* 128 */       throw new BuildException(""The dest attribute must be set."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 132 */     if (this.srcDir.equals(this.destDir)) {
/* 133 */       log(""Warning: src == dest"", 1);
/*     */     }
/*     */     
/* 136 */     DirectoryScanner ds = getDirectoryScanner(this.srcDir);
/*     */     
/*     */     try {
/* 139 */       String[] files = ds.getIncludedFiles();
/* 140 */       scanDir(this.srcDir, this.destDir, files);
/* 141 */       if (this.filecopyList.size() > 0) {
/* 142 */         log(""Copying "" + this.filecopyList.size() + "" file"" + ((this.filecopyList.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */         
/* 145 */         Enumeration e = this.filecopyList.keys();
/* 146 */         while (e.hasMoreElements()) {
/* 147 */           String fromFile = e.nextElement();
/* 148 */           String toFile = (String)this.filecopyList.get(fromFile);
/*     */           try {
/* 150 */             getProject().copyFile(fromFile, toFile, this.filtering, this.forceOverwrite);
/*     */           } catch (IOException ioe) {
/*     */             
/* 153 */             String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */             
/* 155 */             throw new BuildException(msg, ioe, getLocation());
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } finally {
/* 160 */       this.filecopyList.clear();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void scanDir(File from, File to, String[] files) {
/* 165 */     for (int i = 0; i < files.length; i++) {
/* 166 */       File file; String filename = files[i];
/* 167 */       File srcFile = new File(from, filename);
/*     */       
/* 169 */       if (this.flatten) {
/* 170 */         file = new File(to, (new File(filename)).getName());
/*     */       } else {
/* 172 */         file = new File(to, filename);
/*     */       } 
/* 174 */       if (this.forceOverwrite || srcFile.lastModified() > file.lastModified())
/*     */       {
/* 176 */         this.filecopyList.put(srcFile.getAbsolutePath(), file.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Copydir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copyfile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copyfile
/*     */   extends Task
/*     */ {
/*     */   private File srcFile;
/*     */   private File destFile;
/*     */   private boolean filtering = false;
/*     */   private boolean forceOverwrite = false;
/*     */   
/*  82 */   public void setSrc(File src) { this.srcFile = src; }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public void setForceoverwrite(boolean force) { this.forceOverwrite = force; }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setDest(File dest) { this.destFile = dest; }
/*     */ 
/*     */ 
/*     */   
/*  94 */   public void setFiltering(String filter) { this.filtering = Project.toBoolean(filter); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  98 */     log(""DEPRECATED - The copyfile task is deprecated.  Use copy instead."");
/*     */     
/* 100 */     if (this.srcFile == null) {
/* 101 */       throw new BuildException(""The src attribute must be present."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 105 */     if (!this.srcFile.exists()) {
/* 106 */       throw new BuildException(""src "" + this.srcFile.toString() + "" does not exist."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 110 */     if (this.destFile == null) {
/* 111 */       throw new BuildException(""The dest attribute must be present."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 115 */     if (this.srcFile.equals(this.destFile)) {
/* 116 */       log(""Warning: src == dest"", 1);
/*     */     }
/*     */     
/* 119 */     if (this.forceOverwrite || this.srcFile.lastModified() > this.destFile.lastModified())
/*     */       
/*     */       try {
/* 122 */         getProject().copyFile(this.srcFile, this.destFile, this.filtering, this.forceOverwrite);
/*     */       } catch (IOException ioe) {
/* 124 */         String msg = ""Error copying file: "" + this.srcFile.getAbsolutePath() + "" due to "" + ioe.getMessage();
/*     */         
/* 126 */         throw new BuildException(msg);
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Copyfile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Cvs,"package org.apache.tools.ant.taskdefs;
public class Cvs extends AbstractCvsTask {}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Cvs.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CVSPass,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CVSPass
/*     */   extends Task
/*     */ {
/*  80 */   private String cvsRoot = null;
/*     */   
/*  82 */   private File passFile = null;
/*     */   
/*  84 */   private String password = null;
/*     */ 
/*     */   
/*  87 */   private final char[] shifts = new char[] { Character.MIN_VALUE, '\001', '\002', '\003', '\004', '\005', '\006', '\007', '\b', '\t', '\n', '\013', '\f', '\r', '\016', '\017', '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027', '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037', 'r', 'x', '5', 'O', '`', 'm', 'H', 'l', 'F', '@', 'L', 'C', 't', 'J', 'D', 'W', 'o', '4', 'K', 'w', '1', '""', 'R', 'Q', '_', 'A', 'p', 'V', 'v', 'n', 'z', 'i', ')', '9', 'S', '+', '.', 'f', '(', 'Y', '&', 'g', '-', '2', '*', '{', '[', '#', '}', '7', '6', 'B', '|', '~', ';', '/', '\\', 'G', 's', 'N', 'X', 'k', 'j', '8', '$', 'y', 'u', 'h', 'e', 'd', 'E', 'I', 'c', '?', '^', ']', '\'', '%', '=', '0', ':', 'q', ' ', 'Z', ',', 'b', '<', '3', '!', 'a', '>', 'M', 'T', 'P', 'U', 'ß', 'á', 'Ø', '»', '¦', 'å', '½', 'Þ', '¼', '', 'ù', '', 'È', '¸', '', 'ø', '¾', 'Ç', 'ª', 'µ', 'Ì', '', 'è', 'Ú', '·', 'ÿ', 'ê', 'Ü', '÷', 'Õ', 'Ë', 'â', 'Á', '®', '¬', 'ä', 'ü', 'Ù', 'É', '', 'æ', 'Å', 'Ó', '', 'î', '¡', '³', ' ', 'Ô', 'Ï', 'Ý', 'þ', '­', 'Ê', '', 'à', '', '', 'Ä', 'Í', '', '', '', '', 'ö', 'À', '', 'ô', 'ï', '¹', '¨', '×', '', '', '¥', '´', '', '', 'º', 'Ö', '°', 'ã', 'ç', 'Û', '©', '¯', '', 'Î', 'Æ', '', '¤', '', 'Ò', '', '±', '', '', '¶', '', '', 'Ð', '¢', '', '§', 'Ñ', '', 'ñ', '', 'û', 'í', 'ì', '«', 'Ã', 'ó', 'é', 'ý', 'ð', 'Â', 'ú', '¿', '', '', '', 'õ', 'ë', '£', 'ò', '²', '' };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public CVSPass() { this.passFile = new File(System.getProperty(""cygwin.user.home"", System.getProperty(""user.home"")) + File.separatorChar + "".cvspass""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 122 */     if (this.cvsRoot == null) {
/* 123 */       throw new BuildException(""cvsroot is required"");
/*     */     }
/* 125 */     if (this.password == null) {
/* 126 */       throw new BuildException(""password is required"");
/*     */     }
/*     */     
/* 129 */     log(""cvsRoot: "" + this.cvsRoot, 4);
/* 130 */     log(""password: "" + this.password, 4);
/* 131 */     log(""passFile: "" + this.passFile, 4);
/*     */     
/* 133 */     BufferedReader reader = null;
/* 134 */     PrintWriter writer = null;
/*     */     try {
/* 136 */       StringBuffer buf = new StringBuffer();
/*     */       
/* 138 */       if (this.passFile.exists()) {
/* 139 */         reader = new BufferedReader(new FileReader(this.passFile));
/*     */         
/* 141 */         String line = null;
/*     */         
/* 143 */         while ((line = reader.readLine()) != null) {
/* 144 */           if (!line.startsWith(this.cvsRoot)) {
/* 145 */             buf.append(line).append(StringUtils.LINE_SEP);
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 150 */       String pwdfile = buf.toString() + this.cvsRoot + "" A"" + mangle(this.password);
/*     */ 
/*     */       
/* 153 */       log(""Writing -> "" + pwdfile, 4);
/*     */       
/* 155 */       writer = new PrintWriter(new FileWriter(this.passFile));
/*     */       
/* 157 */       writer.println(pwdfile);
/*     */     } catch (IOException e) {
/* 159 */       throw new BuildException(e);
/*     */     } finally {
/* 161 */       if (reader != null) {
/*     */         try {
/* 163 */           reader.close();
/* 164 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 168 */       if (writer != null) {
/* 169 */         writer.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private final String mangle(String password) {
/* 175 */     StringBuffer buf = new StringBuffer();
/* 176 */     for (int i = 0; i < password.length(); i++) {
/* 177 */       buf.append(this.shifts[password.charAt(i)]);
/*     */     }
/* 179 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setCvsroot(String cvsRoot) { this.cvsRoot = cvsRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void setPassfile(File passFile) { this.passFile = passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setPassword(String password) { this.password = password; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\CVSPass.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.DefaultExcludes,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultExcludes
/*     */   extends Task
/*     */ {
/*  72 */   private String add = """";
/*  73 */   private String remove = """";
/*     */   
/*     */   private boolean defaultrequested = false;
/*     */   
/*     */   private boolean echo = false;
/*  78 */   private int logLevel = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  86 */     if (!this.defaultrequested && this.add.equals("""") && this.remove.equals("""") && !this.echo) {
/*  87 */       throw new BuildException(""<defaultexcludes> task must set at least one attribute (echo=\""false\"" doesn't count since that is the default"");
/*     */     }
/*     */ 
/*     */     
/*  91 */     if (this.defaultrequested) {
/*  92 */       DirectoryScanner.resetDefaultExcludes();
/*     */     }
/*  94 */     if (!this.add.equals("""")) {
/*  95 */       DirectoryScanner.addDefaultExclude(this.add);
/*     */     }
/*  97 */     if (!this.remove.equals("""")) {
/*  98 */       DirectoryScanner.removeDefaultExclude(this.remove);
/*     */     }
/* 100 */     if (this.echo) {
/* 101 */       StringBuffer message = new StringBuffer(""Current Default Excludes:\n"");
/*     */       
/* 103 */       String[] excludes = DirectoryScanner.getDefaultExcludes();
/* 104 */       for (int i = 0; i < excludes.length; i++) {
/* 105 */         message.append(""  "" + excludes[i] + ""\n"");
/*     */       }
/* 107 */       log(message.toString(), this.logLevel);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void setDefault(boolean def) { this.defaultrequested = def; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void setAdd(String add) { this.add = add; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void setRemove(String remove) { this.remove = remove; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setEcho(boolean echo) { this.echo = echo; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\DefaultExcludes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.DefBase,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.ClasspathUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefBase
/*     */   extends AntlibDefinition
/*     */ {
/*     */   private ClassLoader createdLoader;
/*     */   private ClasspathUtils.Delegate cpDelegate;
/*     */   
/*     */   public void setReverseLoader(boolean reverseLoader) {
/*  86 */     this.cpDelegate.setReverseLoader(reverseLoader);
/*  87 */     log(""The reverseloader attribute is DEPRECATED. It will be removed"", 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public Path getClasspath() { return this.cpDelegate.getClasspath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public boolean isReverseLoader() { return this.cpDelegate.isReverseLoader(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public String getLoaderId() { return this.cpDelegate.getClassLoadId(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public String getClasspathId() { return this.cpDelegate.getClassLoadId(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setClasspath(Path classpath) { this.cpDelegate.setClasspath(classpath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public Path createClasspath() { return this.cpDelegate.createClasspath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setClasspathRef(Reference r) { this.cpDelegate.setClasspathref(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void setLoaderRef(Reference r) { this.cpDelegate.setLoaderRef(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ClassLoader createLoader() {
/* 169 */     if (getAntlibClassLoader() != null) {
/* 170 */       return getAntlibClassLoader();
/*     */     }
/* 172 */     if (this.createdLoader == null) {
/* 173 */       this.createdLoader = this.cpDelegate.getClassLoader();
/*     */ 
/*     */ 
/*     */       
/* 177 */       ((AntClassLoader)this.createdLoader).addSystemPackageRoot(""org.apache.tools.ant"");
/*     */     } 
/*     */     
/* 180 */     return this.createdLoader;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {
/* 188 */     this.cpDelegate = ClasspathUtils.getDelegate((ProjectComponent)this);
/* 189 */     super.init();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\DefBase.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Definer,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Locale;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.AntTypeDefinition;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ComponentHelper;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Definer
/*     */   extends DefBase
/*     */ {
/*     */   private String name;
/*     */   private String classname;
/*     */   private File file;
/*     */   private String resource;
/*  91 */   private int format = 0;
/*     */   private boolean definerSet = false;
/*  93 */   private int onError = 0;
/*     */ 
/*     */   
/*     */   private String adapter;
/*     */ 
/*     */   
/*     */   private String adaptTo;
/*     */ 
/*     */   
/*     */   private Class adapterClass;
/*     */   
/*     */   private Class adaptToClass;
/*     */ 
/*     */   
/*     */   public static class OnError
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final int FAIL = 0;
/*     */     
/*     */     public static final int REPORT = 1;
/*     */     
/*     */     public static final int IGNORE = 2;
/*     */ 
/*     */     
/*     */     public OnError() {}
/*     */ 
/*     */     
/* 120 */     public OnError(String value) { setValue(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 128 */     public String[] getValues() { return new String[] { ""fail"", ""report"", ""ignore"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Format
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final int PROPERTIES = 0;
/*     */ 
/*     */ 
/*     */     
/*     */     public static final int XML = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 146 */     public String[] getValues() { return new String[] { ""properties"", ""xml"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void setOnError(OnError onError) { this.onError = onError.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setFormat(Format format) { this.format = format.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public String getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 200 */     ClassLoader al = createLoader();
/*     */     
/* 202 */     if (!this.definerSet) {
/* 203 */       throw new BuildException(""name, file or resource attribute of "" + getTaskName() + "" is undefined"", getLocation());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 208 */     if (this.name != null) {
/* 209 */       if (this.classname == null) {
/* 210 */         throw new BuildException(""classname attribute of "" + getTaskName() + "" element "" + ""is undefined"", getLocation());
/*     */       }
/*     */ 
/*     */       
/* 214 */       addDefinition(al, this.name, this.classname);
/*     */     } else {
/* 216 */       if (this.classname != null) {
/* 217 */         String msg = ""You must not specify classname together with file or resource."";
/*     */         
/* 219 */         throw new BuildException(msg, getLocation());
/*     */       } 
/* 221 */       Enumeration urls = null;
/* 222 */       if (this.file != null) {
/* 223 */         URL url = fileToURL();
/* 224 */         urls = new Enumeration(this, url) {
/*     */             private boolean more;
/*     */             
/* 227 */             public boolean hasMoreElements() { return this.more; }
/*     */             private final URL val$url; private final Definer this$0;
/*     */             public Object nextElement() throws NoSuchElementException {
/* 230 */               if (this.more) {
/* 231 */                 this.more = false;
/* 232 */                 return this.val$url;
/*     */               } 
/* 234 */               throw new NoSuchElementException();
/*     */             }
/*     */           };
/*     */       } else {
/*     */         
/* 239 */         urls = resourceToURLs(al);
/*     */       } 
/*     */       
/* 242 */       while (urls.hasMoreElements()) {
/* 243 */         URL url = urls.nextElement();
/*     */         
/* 245 */         int format = this.format;
/* 246 */         if (url.toString().toLowerCase(Locale.US).endsWith("".xml"")) {
/* 247 */           format = 1;
/*     */         }
/*     */         
/* 250 */         if (format == 0) {
/* 251 */           loadProperties(al, url);
/*     */           break;
/*     */         } 
/* 254 */         loadAntlib(al, url);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private URL fileToURL() {
/* 261 */     if (!this.file.exists()) {
/* 262 */       log(""File "" + this.file + "" does not exist"", 1);
/* 263 */       return null;
/*     */     } 
/* 265 */     if (!this.file.isFile()) {
/* 266 */       log(""File "" + this.file + "" is not a file"", 1);
/* 267 */       return null;
/*     */     } 
/*     */     try {
/* 270 */       return this.file.toURL();
/*     */     } catch (Exception ex) {
/* 272 */       log(""File "" + this.file + "" cannot use as URL: "" + ex.toString(), 1);
/*     */       
/* 274 */       return null;
/*     */     } 
/*     */   }
/*     */   
/*     */   private Enumeration resourceToURLs(ClassLoader classLoader) {
/*     */     Enumeration ret;
/*     */     try {
/* 281 */       ret = classLoader.getResources(this.resource);
/*     */     } catch (IOException e) {
/* 283 */       throw new BuildException(""Could not fetch resources named "" + this.resource, e, getLocation());
/*     */     } 
/*     */ 
/*     */     
/* 287 */     if (!ret.hasMoreElements() && 
/* 288 */       this.onError != 2) {
/* 289 */       log(""Could not load definitions from resource "" + this.resource + "". It could not be found."", 1);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 294 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadProperties(ClassLoader al, URL url) {
/* 304 */     InputStream is = null;
/*     */     try {
/* 306 */       is = url.openStream();
/* 307 */       if (is == null) {
/* 308 */         log(""Could not load definitions from "" + url, 1);
/*     */         
/*     */         return;
/*     */       } 
/* 312 */       Properties props = new Properties();
/* 313 */       props.load(is);
/* 314 */       Enumeration keys = props.keys();
/* 315 */       while (keys.hasMoreElements()) {
/* 316 */         this.name = keys.nextElement();
/* 317 */         this.classname = props.getProperty(this.name);
/* 318 */         addDefinition(al, this.name, this.classname);
/*     */       } 
/*     */     } catch (IOException ex) {
/* 321 */       throw new BuildException(ex, getLocation());
/*     */     } finally {
/* 323 */       if (is != null) {
/*     */         try {
/* 325 */           is.close();
/* 326 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void loadAntlib(ClassLoader classLoader, URL url) {
/*     */     try {
/* 341 */       Antlib antlib = Antlib.createAntlib(getProject(), url, getURI());
/* 342 */       antlib.setClassLoader(classLoader);
/* 343 */       antlib.setURI(getURI());
/* 344 */       antlib.perform();
/*     */     } catch (BuildException ex) {
/* 346 */       throw ProjectHelper.addLocationToBuildException(ex, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFile(File file) {
/* 357 */     if (this.definerSet) {
/* 358 */       tooManyDefinitions();
/*     */     }
/* 360 */     this.definerSet = true;
/* 361 */     this.file = file;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setResource(String res) {
/* 370 */     if (this.definerSet) {
/* 371 */       tooManyDefinitions();
/*     */     }
/* 373 */     this.definerSet = true;
/* 374 */     this.resource = res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setName(String name) {
/* 382 */     if (this.definerSet) {
/* 383 */       tooManyDefinitions();
/*     */     }
/* 385 */     this.definerSet = true;
/* 386 */     this.name = name;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 395 */   public String getClassname() { return this.classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public void setClassname(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 420 */   public void setAdapter(String adapter) { this.adapter = adapter; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 429 */   protected void setAdapterClass(Class adapterClass) { this.adapterClass = adapterClass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 440 */   public void setAdaptTo(String adaptTo) { this.adaptTo = adaptTo; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 451 */   protected void setAdaptToClass(Class adaptToClass) { this.adaptToClass = adaptToClass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addDefinition(ClassLoader al, String name, String classname) throws BuildException {
/* 465 */     Class cl = null;
/*     */     try {
/*     */       try {
/* 468 */         name = ProjectHelper.genComponentName(getURI(), name);
/*     */         
/* 470 */         if (this.onError != 2) {
/* 471 */           cl = Class.forName(classname, true, al);
/*     */         }
/*     */         
/* 474 */         if (this.adapter != null) {
/* 475 */           this.adapterClass = Class.forName(this.adapter, true, al);
/*     */         }
/*     */         
/* 478 */         if (this.adaptTo != null) {
/* 479 */           this.adaptToClass = Class.forName(this.adaptTo, true, al);
/*     */         }
/*     */         
/* 482 */         AntTypeDefinition def = new AntTypeDefinition();
/* 483 */         def.setName(name);
/* 484 */         def.setClassName(classname);
/* 485 */         def.setClass(cl);
/* 486 */         def.setAdapterClass(this.adapterClass);
/* 487 */         def.setAdaptToClass(this.adaptToClass);
/* 488 */         def.setClassLoader(al);
/* 489 */         if (cl != null) {
/* 490 */           def.checkClass(getProject());
/*     */         }
/* 492 */         ComponentHelper.getComponentHelper(getProject()).addDataTypeDefinition(def);
/*     */       } catch (ClassNotFoundException cnfe) {
/*     */         
/* 495 */         String msg = getTaskName() + "" class "" + classname + "" cannot be found"";
/*     */         
/* 497 */         throw new BuildException(msg, cnfe, getLocation());
/*     */       } catch (NoClassDefFoundError ncdfe) {
/* 499 */         String msg = getTaskName() + "" A class needed by class "" + classname + "" cannot be found: "" + ncdfe.getMessage();
/*     */         
/* 501 */         throw new BuildException(msg, ncdfe, getLocation());
/*     */       } 
/*     */     } catch (BuildException ex) {
/* 504 */       switch (this.onError) {
/*     */         case 0:
/* 506 */           throw ex;
/*     */         case 1:
/* 508 */           log(ex.getLocation() + ""Warning: "" + ex.getMessage(), 1);
/*     */           return;
/*     */       } 
/*     */       
/* 512 */       log(ex.getLocation() + ex.getMessage(), 4);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 519 */   private void tooManyDefinitions() { throw new BuildException(""Only one of the attributes name,file,resource can be set"", getLocation()); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Definer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Delete,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.types.selectors.AndSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsSelector;
/*     */ import org.apache.tools.ant.types.selectors.DateSelector;
/*     */ import org.apache.tools.ant.types.selectors.DependSelector;
/*     */ import org.apache.tools.ant.types.selectors.DepthSelector;
/*     */ import org.apache.tools.ant.types.selectors.ExtendSelector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.FilenameSelector;
/*     */ import org.apache.tools.ant.types.selectors.MajoritySelector;
/*     */ import org.apache.tools.ant.types.selectors.NoneSelector;
/*     */ import org.apache.tools.ant.types.selectors.NotSelector;
/*     */ import org.apache.tools.ant.types.selectors.OrSelector;
/*     */ import org.apache.tools.ant.types.selectors.PresentSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectSelector;
/*     */ import org.apache.tools.ant.types.selectors.SizeSelector;
/*     */ import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Delete
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final int DELETE_RETRY_SLEEP_MILLIS = 10;
/* 105 */   protected File file = null;
/* 106 */   protected File dir = null;
/* 107 */   protected Vector filesets = new Vector();
/*     */   
/*     */   protected boolean usedMatchingTask = false;
/*     */   
/*     */   protected boolean includeEmpty = false;
/* 112 */   private int verbosity = 3;
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */   
/*     */   private boolean failonerror = true;
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean verbose) {
/* 140 */     if (verbose) {
/* 141 */       this.verbosity = 2;
/*     */     } else {
/* 143 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean quiet) {
/* 157 */     this.quiet = quiet;
/* 158 */     if (quiet) {
/* 159 */       this.failonerror = false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setFailOnError(boolean failonerror) { this.failonerror = failonerror; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setIncludeEmptyDirs(boolean includeEmpty) { this.includeEmpty = includeEmpty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 195 */     this.usedMatchingTask = true;
/* 196 */     return super.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createIncludesFile() {
/* 204 */     this.usedMatchingTask = true;
/* 205 */     return super.createIncludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 213 */     this.usedMatchingTask = true;
/* 214 */     return super.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExcludesFile() {
/* 222 */     this.usedMatchingTask = true;
/* 223 */     return super.createExcludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 231 */     this.usedMatchingTask = true;
/* 232 */     return super.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 242 */     this.usedMatchingTask = true;
/* 243 */     super.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 253 */     this.usedMatchingTask = true;
/* 254 */     super.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 265 */     this.usedMatchingTask = true;
/* 266 */     super.setDefaultexcludes(useDefaultExcludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File includesfile) {
/* 276 */     this.usedMatchingTask = true;
/* 277 */     super.setIncludesfile(includesfile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excludesfile) {
/* 287 */     this.usedMatchingTask = true;
/* 288 */     super.setExcludesfile(excludesfile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCaseSensitive(boolean isCaseSensitive) {
/* 298 */     this.usedMatchingTask = true;
/* 299 */     super.setCaseSensitive(isCaseSensitive);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFollowSymlinks(boolean followSymlinks) {
/* 308 */     this.usedMatchingTask = true;
/* 309 */     super.setFollowSymlinks(followSymlinks);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addSelector(SelectSelector selector) {
/* 317 */     this.usedMatchingTask = true;
/* 318 */     super.addSelector(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addAnd(AndSelector selector) {
/* 326 */     this.usedMatchingTask = true;
/* 327 */     super.addAnd(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addOr(OrSelector selector) {
/* 335 */     this.usedMatchingTask = true;
/* 336 */     super.addOr(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addNot(NotSelector selector) {
/* 344 */     this.usedMatchingTask = true;
/* 345 */     super.addNot(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addNone(NoneSelector selector) {
/* 353 */     this.usedMatchingTask = true;
/* 354 */     super.addNone(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMajority(MajoritySelector selector) {
/* 362 */     this.usedMatchingTask = true;
/* 363 */     super.addMajority(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDate(DateSelector selector) {
/* 371 */     this.usedMatchingTask = true;
/* 372 */     super.addDate(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addSize(SizeSelector selector) {
/* 380 */     this.usedMatchingTask = true;
/* 381 */     super.addSize(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilename(FilenameSelector selector) {
/* 389 */     this.usedMatchingTask = true;
/* 390 */     super.addFilename(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addCustom(ExtendSelector selector) {
/* 398 */     this.usedMatchingTask = true;
/* 399 */     super.addCustom(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addContains(ContainsSelector selector) {
/* 407 */     this.usedMatchingTask = true;
/* 408 */     super.addContains(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addPresent(PresentSelector selector) {
/* 416 */     this.usedMatchingTask = true;
/* 417 */     super.addPresent(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDepth(DepthSelector selector) {
/* 425 */     this.usedMatchingTask = true;
/* 426 */     super.addDepth(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDepend(DependSelector selector) {
/* 434 */     this.usedMatchingTask = true;
/* 435 */     super.addDepend(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addContainsRegexp(ContainsRegexpSelector selector) {
/* 443 */     this.usedMatchingTask = true;
/* 444 */     super.addContainsRegexp(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addModified(ModifiedSelector selector) {
/* 453 */     this.usedMatchingTask = true;
/* 454 */     super.addModified(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void add(FileSelector selector) {
/* 463 */     this.usedMatchingTask = true;
/* 464 */     super.add(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 472 */     if (this.usedMatchingTask) {
/* 473 */       log(""DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element instead."");
/*     */     }
/*     */ 
/*     */     
/* 477 */     if (this.file == null && this.dir == null && this.filesets.size() == 0) {
/* 478 */       throw new BuildException(""At least one of the file or dir attributes, or a fileset element, must be set."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 483 */     if (this.quiet && this.failonerror) {
/* 484 */       throw new BuildException(""quiet and failonerror cannot both be set to true"", getLocation());
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 490 */     if (this.file != null) {
/* 491 */       if (this.file.exists()) {
/* 492 */         if (this.file.isDirectory()) {
/* 493 */           log(""Directory "" + this.file.getAbsolutePath() + "" cannot be removed using the file attribute.  "" + ""Use dir instead."");
/*     */         }
/*     */         else {
/*     */           
/* 497 */           log(""Deleting: "" + this.file.getAbsolutePath());
/*     */           
/* 499 */           if (!delete(this.file)) {
/* 500 */             String message = ""Unable to delete file "" + this.file.getAbsolutePath();
/*     */             
/* 502 */             if (this.failonerror) {
/* 503 */               throw new BuildException(message);
/*     */             }
/* 505 */             log(message, this.quiet ? 3 : 1);
/*     */           }
/*     */         
/*     */         } 
/*     */       } else {
/*     */         
/* 511 */         log(""Could not find file "" + this.file.getAbsolutePath() + "" to delete."", 3);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 518 */     if (this.dir != null && this.dir.exists() && this.dir.isDirectory() && !this.usedMatchingTask) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 527 */       if (this.verbosity == 3) {
/* 528 */         log(""Deleting directory "" + this.dir.getAbsolutePath());
/*     */       }
/* 530 */       removeDir(this.dir);
/*     */     } 
/*     */ 
/*     */     
/* 534 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 535 */       FileSet fs = this.filesets.elementAt(i);
/*     */       try {
/* 537 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 538 */         String[] files = ds.getIncludedFiles();
/* 539 */         String[] dirs = ds.getIncludedDirectories();
/* 540 */         removeFiles(fs.getDir(getProject()), files, dirs);
/*     */       } catch (BuildException be) {
/*     */         
/* 543 */         if (this.failonerror) {
/* 544 */           throw be;
/*     */         }
/* 546 */         log(be.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 553 */     if (this.usedMatchingTask && this.dir != null) {
/*     */       try {
/* 555 */         DirectoryScanner ds = getDirectoryScanner(this.dir);
/* 556 */         String[] files = ds.getIncludedFiles();
/* 557 */         String[] dirs = ds.getIncludedDirectories();
/* 558 */         removeFiles(this.dir, files, dirs);
/*     */       } catch (BuildException be) {
/*     */         
/* 561 */         if (this.failonerror) {
/* 562 */           throw be;
/*     */         }
/* 564 */         log(be.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean delete(File f) {
/* 580 */     if (!f.delete()) {
/*     */       try {
/* 582 */         Thread.sleep(10L);
/* 583 */         return f.delete();
/*     */       } catch (InterruptedException ex) {
/* 585 */         return f.delete();
/*     */       } 
/*     */     }
/* 588 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeDir(File d) {
/* 597 */     String[] list = d.list();
/* 598 */     if (list == null) {
/* 599 */       list = new String[0];
/*     */     }
/* 601 */     for (int i = 0; i < list.length; i++) {
/* 602 */       String s = list[i];
/* 603 */       File f = new File(d, s);
/* 604 */       if (f.isDirectory()) {
/* 605 */         removeDir(f);
/*     */       } else {
/* 607 */         log(""Deleting "" + f.getAbsolutePath(), this.verbosity);
/* 608 */         if (!delete(f)) {
/* 609 */           String message = ""Unable to delete file "" + f.getAbsolutePath();
/*     */           
/* 611 */           if (this.failonerror) {
/* 612 */             throw new BuildException(message);
/*     */           }
/* 614 */           log(message, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 620 */     log(""Deleting directory "" + d.getAbsolutePath(), this.verbosity);
/* 621 */     if (!delete(d)) {
/* 622 */       String message = ""Unable to delete directory "" + this.dir.getAbsolutePath();
/*     */       
/* 624 */       if (this.failonerror) {
/* 625 */         throw new BuildException(message);
/*     */       }
/* 627 */       log(message, this.quiet ? 3 : 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeFiles(File d, String[] files, String[] dirs) {
/* 641 */     if (files.length > 0) {
/* 642 */       log(""Deleting "" + files.length + "" files from "" + d.getAbsolutePath());
/*     */       
/* 644 */       for (int j = 0; j < files.length; j++) {
/* 645 */         File f = new File(d, files[j]);
/* 646 */         log(""Deleting "" + f.getAbsolutePath(), this.verbosity);
/* 647 */         if (!delete(f)) {
/* 648 */           String message = ""Unable to delete file "" + f.getAbsolutePath();
/*     */           
/* 650 */           if (this.failonerror) {
/* 651 */             throw new BuildException(message);
/*     */           }
/* 653 */           log(message, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 660 */     if (dirs.length > 0 && this.includeEmpty) {
/* 661 */       int dirCount = 0;
/* 662 */       for (int j = dirs.length - 1; j >= 0; j--) {
/* 663 */         File dir = new File(d, dirs[j]);
/* 664 */         String[] dirFiles = dir.list();
/* 665 */         if (dirFiles == null || dirFiles.length == 0) {
/* 666 */           log(""Deleting "" + dir.getAbsolutePath(), this.verbosity);
/* 667 */           if (!delete(dir)) {
/* 668 */             String message = ""Unable to delete directory "" + dir.getAbsolutePath();
/*     */             
/* 670 */             if (this.failonerror) {
/* 671 */               throw new BuildException(message);
/*     */             }
/* 673 */             log(message, this.quiet ? 3 : 1);
/*     */           }
/*     */           else {
/*     */             
/* 677 */             dirCount++;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 682 */       if (dirCount > 0)
/* 683 */         log(""Deleted "" + dirCount + "" director"" + ((dirCount == 1) ? ""y"" : ""ies"") + "" from "" + d.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Delete.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Deltree,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Deltree
/*     */   extends Task
/*     */ {
/*     */   private File dir;
/*     */   
/*  83 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  93 */     log(""DEPRECATED - The deltree task is deprecated.  Use delete instead."");
/*     */ 
/*     */     
/*  96 */     if (this.dir == null) {
/*  97 */       throw new BuildException(""dir attribute must be set!"", getLocation());
/*     */     }
/*     */     
/* 100 */     if (this.dir.exists()) {
/* 101 */       if (!this.dir.isDirectory()) {
/* 102 */         if (!this.dir.delete()) {
/* 103 */           throw new BuildException(""Unable to delete directory "" + this.dir.getAbsolutePath(), getLocation());
/*     */         }
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 110 */       log(""Deleting: "" + this.dir.getAbsolutePath());
/*     */       
/*     */       try {
/* 113 */         removeDir(this.dir);
/*     */       } catch (IOException ioe) {
/* 115 */         String msg = ""Unable to delete "" + this.dir.getAbsolutePath();
/* 116 */         throw new BuildException(msg, getLocation());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeDir(File dir) throws IOException {
/* 130 */     String[] list = dir.list();
/* 131 */     for (int i = 0; i < list.length; i++) {
/* 132 */       String s = list[i];
/* 133 */       File f = new File(dir, s);
/* 134 */       if (f.isDirectory()) {
/* 135 */         removeDir(f);
/*     */       }
/* 137 */       else if (!f.delete()) {
/* 138 */         throw new BuildException(""Unable to delete file "" + f.getAbsolutePath());
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 143 */     if (!dir.delete())
/* 144 */       throw new BuildException(""Unable to delete directory "" + dir.getAbsolutePath()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Deltree.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.DependSet,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DependSet
/*     */   extends MatchingTask
/*     */ {
/* 118 */   private Vector sourceFileSets = new Vector();
/* 119 */   private Vector sourceFileLists = new Vector();
/* 120 */   private Vector targetFileSets = new Vector();
/* 121 */   private Vector targetFileLists = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void addSrcfileset(FileSet fs) { this.sourceFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void addSrcfilelist(FileList fl) { this.sourceFileLists.addElement(fl); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void addTargetfileset(FileSet fs) { this.targetFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void addTargetfilelist(FileList fl) { this.targetFileLists.addElement(fl); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 163 */     if (this.sourceFileSets.size() == 0 && this.sourceFileLists.size() == 0) {
/* 164 */       throw new BuildException(""At least one <srcfileset> or <srcfilelist> element must be set"");
/*     */     }
/*     */ 
/*     */     
/* 168 */     if (this.targetFileSets.size() == 0 && this.targetFileLists.size() == 0) {
/* 169 */       throw new BuildException(""At least one <targetfileset> or <targetfilelist> element must be set"");
/*     */     }
/*     */ 
/*     */     
/* 173 */     long now = (new Date()).getTime();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 179 */     if (Os.isFamily(""windows"")) {
/* 180 */       now += 2000L;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 186 */     Vector allTargets = new Vector();
/* 187 */     long oldestTargetTime = 0L;
/* 188 */     File oldestTarget = null;
/* 189 */     Enumeration enumTargetSets = this.targetFileSets.elements();
/* 190 */     while (enumTargetSets.hasMoreElements()) {
/*     */       
/* 192 */       FileSet targetFS = enumTargetSets.nextElement();
/* 193 */       if (!targetFS.getDir(getProject()).exists()) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */       
/* 198 */       DirectoryScanner targetDS = targetFS.getDirectoryScanner(getProject());
/* 199 */       String[] targetFiles = targetDS.getIncludedFiles();
/*     */       
/* 201 */       for (int i = 0; i < targetFiles.length; i++) {
/*     */         
/* 203 */         File dest = new File(targetFS.getDir(getProject()), targetFiles[i]);
/* 204 */         allTargets.addElement(dest);
/*     */         
/* 206 */         if (dest.lastModified() > now) {
/* 207 */           log(""Warning: "" + targetFiles[i] + "" modified in the future."", 1);
/*     */         }
/*     */ 
/*     */         
/* 211 */         if (oldestTarget == null || dest.lastModified() < oldestTargetTime) {
/*     */           
/* 213 */           oldestTargetTime = dest.lastModified();
/* 214 */           oldestTarget = dest;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 222 */     boolean upToDate = true;
/* 223 */     Enumeration enumTargetLists = this.targetFileLists.elements();
/* 224 */     while (enumTargetLists.hasMoreElements()) {
/*     */       
/* 226 */       FileList targetFL = enumTargetLists.nextElement();
/* 227 */       String[] targetFiles = targetFL.getFiles(getProject());
/*     */       
/* 229 */       for (int i = 0; i < targetFiles.length; i++) {
/*     */         
/* 231 */         File dest = new File(targetFL.getDir(getProject()), targetFiles[i]);
/* 232 */         if (!dest.exists()) {
/* 233 */           log(targetFiles[i] + "" does not exist."", 3);
/* 234 */           upToDate = false;
/*     */         } else {
/*     */           
/* 237 */           allTargets.addElement(dest);
/*     */           
/* 239 */           if (dest.lastModified() > now) {
/* 240 */             log(""Warning: "" + targetFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 244 */           if (oldestTarget == null || dest.lastModified() < oldestTargetTime) {
/*     */             
/* 246 */             oldestTargetTime = dest.lastModified();
/* 247 */             oldestTarget = dest;
/*     */           } 
/*     */         } 
/*     */       } 
/* 251 */     }  if (oldestTarget != null) {
/* 252 */       log(oldestTarget + "" is oldest target file"", 3);
/*     */     }
/*     */     else {
/*     */       
/* 256 */       upToDate = false;
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 262 */     if (upToDate) {
/* 263 */       Enumeration enumSourceLists = this.sourceFileLists.elements();
/* 264 */       while (upToDate && enumSourceLists.hasMoreElements()) {
/*     */         
/* 266 */         FileList sourceFL = enumSourceLists.nextElement();
/* 267 */         String[] sourceFiles = sourceFL.getFiles(getProject());
/*     */         
/* 269 */         for (int i = 0; upToDate && i < sourceFiles.length; i++) {
/* 270 */           File src = new File(sourceFL.getDir(getProject()), sourceFiles[i]);
/*     */           
/* 272 */           if (src.lastModified() > now) {
/* 273 */             log(""Warning: "" + sourceFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 277 */           if (!src.exists()) {
/* 278 */             log(sourceFiles[i] + "" does not exist."", 3);
/*     */             
/* 280 */             upToDate = false;
/*     */             
/*     */             break;
/*     */           } 
/* 284 */           if (src.lastModified() > oldestTargetTime) {
/* 285 */             upToDate = false;
/* 286 */             log(oldestTarget + "" is out of date with respect to "" + sourceFiles[i], 3);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 296 */     if (upToDate) {
/* 297 */       Enumeration enumSourceSets = this.sourceFileSets.elements();
/* 298 */       while (upToDate && enumSourceSets.hasMoreElements()) {
/*     */         
/* 300 */         FileSet sourceFS = enumSourceSets.nextElement();
/* 301 */         DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(getProject());
/* 302 */         String[] sourceFiles = sourceDS.getIncludedFiles();
/*     */         
/* 304 */         for (int i = 0; upToDate && i < sourceFiles.length; i++) {
/* 305 */           File src = new File(sourceFS.getDir(getProject()), sourceFiles[i]);
/*     */           
/* 307 */           if (src.lastModified() > now) {
/* 308 */             log(""Warning: "" + sourceFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 312 */           if (src.lastModified() > oldestTargetTime) {
/* 313 */             upToDate = false;
/* 314 */             log(oldestTarget + "" is out of date with respect to "" + sourceFiles[i], 3);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 321 */     if (!upToDate) {
/* 322 */       log(""Deleting all target files. "", 3);
/* 323 */       for (Enumeration e = allTargets.elements(); e.hasMoreElements(); ) {
/* 324 */         File fileToRemove = e.nextElement();
/* 325 */         log(""Deleting file "" + fileToRemove.getAbsolutePath(), 3);
/*     */         
/* 327 */         fileToRemove.delete();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\DependSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Dirname,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Dirname
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*     */   private String property;
/*     */   
/*  94 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 108 */     if (this.property == null) {
/* 109 */       throw new BuildException(""property attribute required"", getLocation());
/*     */     }
/* 111 */     if (this.file == null) {
/* 112 */       throw new BuildException(""file attribute required"", getLocation());
/*     */     }
/* 114 */     String value = this.file.getParent();
/* 115 */     getProject().setNewProperty(this.property, value);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Dirname.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ear,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ear
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*  78 */   private static final FileUtils fu = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Ear() {
/*  85 */     this.archiveType = ""ear"";
/*  86 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setEarfile(File earFile) { setDestFile(earFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAppxml(File descr) {
/* 100 */     this.deploymentDescriptor = descr;
/* 101 */     if (!this.deploymentDescriptor.exists()) {
/* 102 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 108 */     ZipFileSet fs = new ZipFileSet();
/* 109 */     fs.setFile(this.deploymentDescriptor);
/* 110 */     fs.setFullpath(""META-INF/application.xml"");
/* 111 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArchives(ZipFileSet fs) {
/* 123 */     fs.setPrefix(""/"");
/* 124 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 131 */     if (this.deploymentDescriptor == null && !isInUpdateMode()) {
/* 132 */       throw new BuildException(""appxml attribute is required"", getLocation());
/*     */     }
/*     */     
/* 135 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath, int mode) throws IOException {
/* 149 */     if (vPath.equalsIgnoreCase(""META-INF/application.xml"")) {
/* 150 */       if (this.deploymentDescriptor == null || !fu.fileNameEquals(this.deploymentDescriptor, file) || this.descriptorAdded) {
/*     */ 
/*     */         
/* 153 */         log(""Warning: selected "" + this.archiveType + "" files include a META-INF/application.xml which will"" + "" be ignored (please use appxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 158 */         super.zipFile(file, zOut, vPath, mode);
/* 159 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 162 */       super.zipFile(file, zOut, vPath, mode);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 171 */     this.descriptorAdded = false;
/* 172 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Ear.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Echo,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Echo
/*     */   extends Task
/*     */ {
/*  74 */   protected String message = """";
/*  75 */   protected File file = null;
/*     */   
/*     */   protected boolean append = false;
/*     */   
/*  79 */   protected int logLevel = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  87 */     if (this.file == null) {
/*  88 */       log(this.message, this.logLevel);
/*     */     } else {
/*  90 */       FileWriter out = null;
/*     */       try {
/*  92 */         out = new FileWriter(this.file.getAbsolutePath(), this.append);
/*  93 */         out.write(this.message, 0, this.message.length());
/*     */       } catch (IOException ioe) {
/*  95 */         throw new BuildException(ioe, getLocation());
/*     */       } finally {
/*  97 */         if (out != null) {
/*     */           try {
/*  99 */             out.close();
/* 100 */           } catch (IOException ioex) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setMessage(String msg) { this.message = msg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void addText(String msg) { this.message += getProject().replaceProperties(msg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLevel(EchoLevel echoLevel) {
/* 157 */     String option = echoLevel.getValue();
/* 158 */     if (option.equals(""error"")) {
/* 159 */       this.logLevel = 0;
/* 160 */     } else if (option.equals(""warning"")) {
/* 161 */       this.logLevel = 1;
/* 162 */     } else if (option.equals(""info"")) {
/* 163 */       this.logLevel = 2;
/* 164 */     } else if (option.equals(""verbose"")) {
/* 165 */       this.logLevel = 3;
/*     */     } else {
/*     */       
/* 168 */       this.logLevel = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class EchoLevel
/*     */     extends EnumeratedAttribute
/*     */   {
/* 181 */     public String[] getValues() { return new String[] { ""error"", ""warning"", ""info"", ""verbose"", ""debug"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Echo.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Exec
/*     */   extends Task
/*     */ {
/*     */   private String os;
/*     */   private String out;
/*     */   private File dir;
/*     */   private String command;
/*  87 */   protected PrintWriter fos = null;
/*     */   private boolean failOnError = false;
/*     */   
/*     */   public Exec() {
/*  91 */     System.err.println(""As of Ant 1.2 released in October 2000, the Exec class"");
/*     */     
/*  93 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/*  95 */     System.err.println(""Don't use it!"");
/*     */   }
/*     */ 
/*     */   
/*  99 */   public void execute() throws BuildException { run(this.command); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected int run(String command) throws BuildException {
/* 104 */     int err = -1;
/*     */ 
/*     */     
/* 107 */     String myos = System.getProperty(""os.name"");
/* 108 */     log(""Myos = "" + myos, 3);
/* 109 */     if (this.os != null && this.os.indexOf(myos) < 0) {
/*     */       
/* 111 */       log(""Not found in "" + this.os, 3);
/* 112 */       return 0;
/*     */     } 
/*     */ 
/*     */     
/* 116 */     if (this.dir == null) {
/* 117 */       this.dir = getProject().getBaseDir();
/*     */     }
/*     */     
/* 120 */     if (myos.toLowerCase().indexOf(""windows"") >= 0) {
/* 121 */       if (!this.dir.equals(getProject().resolveFile("".""))) {
/* 122 */         if (myos.toLowerCase().indexOf(""nt"") >= 0) {
/* 123 */           command = ""cmd /c cd "" + this.dir + "" && "" + command;
/*     */         } else {
/* 125 */           String ant = getProject().getProperty(""ant.home"");
/* 126 */           if (ant == null) {
/* 127 */             throw new BuildException(""Property 'ant.home' not found"", getLocation());
/*     */           }
/*     */ 
/*     */           
/* 131 */           String antRun = getProject().resolveFile(ant + ""/bin/antRun.bat"").toString();
/* 132 */           command = antRun + "" "" + this.dir + "" "" + command;
/*     */         } 
/*     */       }
/*     */     } else {
/* 136 */       String ant = getProject().getProperty(""ant.home"");
/* 137 */       if (ant == null) {
/* 138 */         throw new BuildException(""Property 'ant.home' not found"", getLocation());
/*     */       }
/*     */       
/* 141 */       String antRun = getProject().resolveFile(ant + ""/bin/antRun"").toString();
/*     */       
/* 143 */       command = antRun + "" "" + this.dir + "" "" + command;
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 148 */       log(command, 3);
/*     */ 
/*     */       
/* 151 */       Process proc = Runtime.getRuntime().exec(command);
/*     */       
/* 153 */       if (this.out != null) {
/* 154 */         this.fos = new PrintWriter(new FileWriter(this.out));
/* 155 */         log(""Output redirected to "" + this.out, 3);
/*     */       } 
/*     */ 
/*     */       
/* 159 */       StreamPumper inputPumper = new StreamPumper(this, proc.getInputStream(), 2);
/*     */       
/* 161 */       StreamPumper errorPumper = new StreamPumper(this, proc.getErrorStream(), 1);
/*     */ 
/*     */ 
/*     */       
/* 165 */       inputPumper.start();
/* 166 */       errorPumper.start();
/*     */ 
/*     */       
/* 169 */       proc.waitFor();
/* 170 */       inputPumper.join();
/* 171 */       errorPumper.join();
/* 172 */       proc.destroy();
/*     */ 
/*     */       
/* 175 */       logFlush();
/*     */ 
/*     */       
/* 178 */       err = proc.exitValue();
/* 179 */       if (err != 0) {
/* 180 */         if (this.failOnError) {
/* 181 */           throw new BuildException(""Exec returned: "" + err, getLocation());
/*     */         }
/* 183 */         log(""Result: "" + err, 0);
/*     */       } 
/*     */     } catch (IOException ioe) {
/*     */       
/* 187 */       throw new BuildException(""Error exec: "" + command, ioe, getLocation());
/* 188 */     } catch (InterruptedException ex) {}
/*     */ 
/*     */ 
/*     */     
/* 192 */     return err;
/*     */   }
/*     */ 
/*     */   
/* 196 */   public void setDir(String d) { this.dir = getProject().resolveFile(d); }
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void setOs(String os) { this.os = os; }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void setCommand(String command) { this.command = command; }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setOutput(String out) { this.out = out; }
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */   
/*     */   protected void outputLog(String line, int messageLevel) {
/* 216 */     if (this.fos == null) {
/* 217 */       log(line, messageLevel);
/*     */     } else {
/* 219 */       this.fos.println(line);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void logFlush() {
/* 224 */     if (this.fos != null)
/* 225 */       this.fos.close(); 
/*     */   }
/*     */   
/*     */   class StreamPumper
/*     */     extends Thread {
/*     */     private BufferedReader din;
/*     */     private int messageLevel;
/*     */     private boolean endOfStream;
/*     */     private int SLEEP_TIME;
/*     */     private final Exec this$0;
/*     */     
/*     */     public StreamPumper(Exec this$0, InputStream is, int messageLevel) {
/* 237 */       this.this$0 = this$0; this.endOfStream = false; this.SLEEP_TIME = 5;
/* 238 */       this.din = new BufferedReader(new InputStreamReader(is));
/* 239 */       this.messageLevel = messageLevel;
/*     */     }
/*     */     
/*     */     public void pumpStream() throws IOException {
/* 243 */       if (!this.endOfStream) {
/* 244 */         String line = this.din.readLine();
/*     */         
/* 246 */         if (line != null) {
/* 247 */           this.this$0.outputLog(line, this.messageLevel);
/*     */         } else {
/* 249 */           this.endOfStream = true;
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/*     */     public void run() {
/*     */       try {
/*     */         try {
/* 257 */           while (!this.endOfStream) {
/* 258 */             pumpStream();
/* 259 */             Thread.sleep(this.SLEEP_TIME);
/*     */           } 
/* 261 */         } catch (InterruptedException ie) {}
/*     */ 
/*     */         
/* 264 */         this.din.close();
/* 265 */       } catch (IOException ioe) {}
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Exec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecTask
/*     */   extends Task
/*     */ {
/*     */   private String os;
/*     */   private File dir;
/*     */   protected boolean failOnError = false;
/*     */   protected boolean newEnvironment = false;
/*  90 */   private Long timeout = null;
/*  91 */   private Environment env = new Environment();
/*  92 */   protected Commandline cmdl = new Commandline();
/*     */   
/*     */   private String resultProperty;
/*     */   private boolean failIfExecFails = true;
/*     */   private String executable;
/*     */   private boolean resolveExecutable = false;
/*     */   private boolean spawn = false;
/*     */   private boolean incompatibleWithSpawn = false;
/* 100 */   private Redirector redirector = new Redirector(this);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean vmLauncher = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setSpawn(boolean spawn) { this.spawn = spawn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTimeout(Long value) {
/* 126 */     this.timeout = value;
/* 127 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTimeout(Integer value) {
/* 136 */     if (value == null) {
/* 137 */       this.timeout = null;
/*     */     } else {
/* 139 */       setTimeout(new Long(value.intValue()));
/*     */     } 
/* 141 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExecutable(String value) {
/* 149 */     this.executable = value;
/* 150 */     this.cmdl.setExecutable(value);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setOs(String os) { this.os = os; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCommand(Commandline cmdl) {
/* 175 */     log(""The command attribute is deprecated. Please use the executable attribute and nested arg elements."", 1);
/*     */ 
/*     */     
/* 178 */     this.cmdl = cmdl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutput(File out) {
/* 188 */     this.redirector.setOutput(out);
/* 189 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setInput(File input) {
/* 198 */     this.redirector.setInput(input);
/* 199 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setInputString(String inputString) {
/* 208 */     this.redirector.setInputString(inputString);
/* 209 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLogError(boolean logError) {
/* 220 */     this.redirector.setLogError(logError);
/* 221 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setError(File error) {
/* 232 */     this.redirector.setError(error);
/* 233 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutputproperty(String outputProp) {
/* 243 */     this.redirector.setOutputProperty(outputProp);
/* 244 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setErrorProperty(String errorProperty) {
/* 256 */     this.redirector.setErrorProperty(errorProperty);
/* 257 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFailonerror(boolean fail) {
/* 266 */     this.failOnError = fail;
/* 267 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 277 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public void setResolveExecutable(boolean resolveExecutable) { this.resolveExecutable = resolveExecutable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 298 */   public boolean getResolveExecutable() { return this.resolveExecutable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   public void addEnv(Environment.Variable var) { this.env.addVariable(var); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 316 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setResultProperty(String resultProperty) {
/* 328 */     this.resultProperty = resultProperty;
/* 329 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void maybeSetResultPropertyValue(int result) {
/* 339 */     String res = Integer.toString(result);
/* 340 */     if (this.resultProperty != null) {
/* 341 */       getProject().setNewProperty(this.resultProperty, res);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFailIfExecutionFails(boolean flag) {
/* 354 */     this.failIfExecFails = flag;
/* 355 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAppend(boolean append) {
/* 367 */     this.redirector.setAppend(append);
/* 368 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String resolveExecutable(String exec, boolean searchPath) {
/* 387 */     if (!this.resolveExecutable) {
/* 388 */       return exec;
/*     */     }
/*     */ 
/*     */     
/* 392 */     File executableFile = getProject().resolveFile(exec);
/* 393 */     if (executableFile.exists()) {
/* 394 */       return executableFile.getAbsolutePath();
/*     */     }
/*     */     
/* 397 */     FileUtils fileUtils = FileUtils.newFileUtils();
/*     */     
/* 399 */     if (this.dir != null) {
/* 400 */       executableFile = fileUtils.resolveFile(this.dir, exec);
/* 401 */       if (executableFile.exists()) {
/* 402 */         return executableFile.getAbsolutePath();
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 407 */     if (searchPath) {
/* 408 */       Vector env = Execute.getProcEnvironment();
/* 409 */       Enumeration e = env.elements();
/* 410 */       Path p = null;
/* 411 */       while (e.hasMoreElements()) {
/* 412 */         String line = e.nextElement();
/* 413 */         if (line.startsWith(""PATH="") || line.startsWith(""Path="")) {
/* 414 */           p = new Path(getProject(), line.substring(5));
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/* 419 */       if (p != null) {
/* 420 */         String[] dirs = p.list();
/* 421 */         for (int i = 0; i < dirs.length; i++) {
/* 422 */           executableFile = fileUtils.resolveFile(new File(dirs[i]), exec);
/*     */           
/* 424 */           if (executableFile.exists()) {
/* 425 */             return executableFile.getAbsolutePath();
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 433 */     return exec;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 447 */     File savedDir = this.dir;
/* 448 */     this.cmdl.setExecutable(resolveExecutable(this.executable, false));
/* 449 */     checkConfiguration();
/* 450 */     if (isValidOs()) {
/*     */       try {
/* 452 */         runExec(prepareExec());
/*     */       } finally {
/* 454 */         this.dir = savedDir;
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkConfiguration() throws BuildException {
/* 464 */     if (this.cmdl.getExecutable() == null) {
/* 465 */       throw new BuildException(""no executable specified"", getLocation());
/*     */     }
/* 467 */     if (this.dir != null && !this.dir.exists()) {
/* 468 */       throw new BuildException(""The directory you specified does not exist"");
/*     */     }
/*     */     
/* 471 */     if (this.dir != null && !this.dir.isDirectory()) {
/* 472 */       throw new BuildException(""The directory you specified is not a directory"");
/*     */     }
/*     */     
/* 475 */     if (this.spawn && this.incompatibleWithSpawn) {
/* 476 */       getProject().log(""spawn does not allow attributes related to input, output, error, result"", 0);
/*     */       
/* 478 */       getProject().log(""spawn does not also not allow timeout"", 0);
/* 479 */       throw new BuildException(""You have used an attribute which is not compatible with spawn"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidOs() {
/* 497 */     String myos = System.getProperty(""os.name"");
/* 498 */     log(""Current OS is "" + myos, 3);
/* 499 */     if (this.os != null && this.os.indexOf(myos) < 0) {
/*     */       
/* 501 */       log(""This OS, "" + myos + "" was not found in the specified list of valid OSes: "" + this.os, 3);
/*     */ 
/*     */       
/* 504 */       return false;
/*     */     } 
/* 506 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 517 */   public void setVMLauncher(boolean vmLauncher) { this.vmLauncher = vmLauncher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Execute prepareExec() throws BuildException {
/* 529 */     if (this.dir == null) {
/* 530 */       this.dir = getProject().getBaseDir();
/*     */     }
/* 532 */     Execute exe = new Execute(createHandler(), createWatchdog());
/* 533 */     exe.setAntRun(getProject());
/* 534 */     exe.setWorkingDirectory(this.dir);
/* 535 */     exe.setVMLauncher(this.vmLauncher);
/* 536 */     exe.setSpawn(this.spawn);
/* 537 */     String[] environment = this.env.getVariables();
/* 538 */     if (environment != null) {
/* 539 */       for (int i = 0; i < environment.length; i++) {
/* 540 */         log(""Setting environment variable: "" + environment[i], 3);
/*     */       }
/*     */     }
/*     */     
/* 544 */     exe.setNewenvironment(this.newEnvironment);
/* 545 */     exe.setEnvironment(environment);
/* 546 */     return exe;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void runExecute(Execute exe) throws IOException {
/* 559 */     int returnCode = -1;
/*     */     
/* 561 */     if (!this.spawn) {
/* 562 */       returnCode = exe.execute();
/*     */ 
/*     */       
/* 565 */       if (exe.killedProcess()) {
/* 566 */         String msg = ""Timeout: killed the sub-process"";
/* 567 */         if (this.failOnError) {
/* 568 */           throw new BuildException(msg);
/*     */         }
/* 570 */         log(msg, 1);
/*     */       } 
/*     */       
/* 573 */       maybeSetResultPropertyValue(returnCode);
/* 574 */       if (Execute.isFailure(returnCode)) {
/* 575 */         if (this.failOnError) {
/* 576 */           throw new BuildException(getTaskType() + "" returned: "" + returnCode, getLocation());
/*     */         }
/*     */         
/* 579 */         log(""Result: "" + returnCode, 0);
/*     */       } 
/*     */       
/* 582 */       this.redirector.complete();
/*     */     } else {
/* 584 */       exe.spawn();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runExec(Execute exe) throws BuildException {
/* 599 */     log(this.cmdl.describeCommand(), 3);
/*     */     
/* 601 */     exe.setCommandline(this.cmdl.getCommandline());
/*     */     try {
/* 603 */       runExecute(exe);
/*     */     } catch (IOException e) {
/* 605 */       if (this.failIfExecFails) {
/* 606 */         throw new BuildException(""Execute failed: "" + e.toString(), e, getLocation());
/*     */       }
/*     */       
/* 609 */       log(""Execute failed: "" + e.toString(), 0);
/*     */     }
/*     */     finally {
/*     */       
/* 613 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 625 */   protected ExecuteStreamHandler createHandler() throws BuildException { return this.redirector.createHandler(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteWatchdog createWatchdog() throws BuildException {
/* 636 */     if (this.timeout == null) {
/* 637 */       return null;
/*     */     }
/* 639 */     return new ExecuteWatchdog(this.timeout.longValue());
/*     */   }
/*     */   
/*     */   protected void logFlush() {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ExecTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Execute,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.ByteArrayOutputStream;
/*      */ import java.io.File;
/*      */ import java.io.FileWriter;
/*      */ import java.io.IOException;
/*      */ import java.io.PrintWriter;
/*      */ import java.io.StringReader;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Method;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.taskdefs.condition.Os;
/*      */ import org.apache.tools.ant.types.Commandline;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Execute
/*      */ {
/*      */   public static final int INVALID = 2147483647;
/*   91 */   private String[] cmdl = null;
/*   92 */   private String[] env = null;
/*   93 */   private int exitValue = Integer.MAX_VALUE;
/*      */   private ExecuteStreamHandler streamHandler;
/*      */   private ExecuteWatchdog watchdog;
/*   96 */   private File workingDirectory = null;
/*   97 */   private Project project = null;
/*      */   
/*      */   private boolean newEnvironment = false;
/*      */   
/*      */   private boolean useVMLauncher = true;
/*      */   
/*  103 */   private static String antWorkingDirectory = System.getProperty(""user.dir"");
/*  104 */   private static CommandLauncher vmLauncher = null;
/*  105 */   private static CommandLauncher shellLauncher = null;
/*  106 */   private static Vector procEnvironment = null;
/*      */   
/*      */   private boolean spawn = false;
/*      */   
/*  110 */   private static ProcessDestroyer processDestroyer = new ProcessDestroyer();
/*      */   
/*      */   static Class array$Ljava$lang$String;
/*      */   static Class class$java$io$File;
/*      */   static Class class$java$lang$Runtime;
/*      */   
/*      */   static  {
/*      */     try {
/*  118 */       if (Os.isFamily(""openvms"")) {
/*  119 */         vmLauncher = new VmsCommandLauncher();
/*  120 */       } else if (!Os.isFamily(""os/2"")) {
/*  121 */         vmLauncher = new Java13CommandLauncher();
/*      */       } 
/*  123 */     } catch (NoSuchMethodException exc) {}
/*      */ 
/*      */ 
/*      */     
/*  127 */     if (Os.isFamily(""mac"") && !Os.isFamily(""unix"")) {
/*      */       
/*  129 */       shellLauncher = new MacCommandLauncher(new CommandLauncher());
/*  130 */     } else if (Os.isFamily(""os/2"")) {
/*      */       
/*  132 */       shellLauncher = new OS2CommandLauncher(new CommandLauncher());
/*  133 */     } else if (Os.isFamily(""windows"")) {
/*      */       CommandLauncher commandLauncher;
/*      */ 
/*      */       
/*  137 */       if (System.getProperty(""java.version"").startsWith(""1.1"")) {
/*      */         
/*  139 */         commandLauncher = new Java11CommandLauncher();
/*      */       } else {
/*      */         
/*  142 */         commandLauncher = new CommandLauncher();
/*      */       } 
/*      */       
/*  145 */       if (!Os.isFamily(""win9x"")) {
/*      */         
/*  147 */         shellLauncher = new WinNTCommandLauncher(commandLauncher);
/*      */       } else {
/*      */         
/*  150 */         shellLauncher = new ScriptCommandLauncher(""bin/antRun.bat"", commandLauncher);
/*      */       }
/*      */     
/*  153 */     } else if (Os.isFamily(""netware"")) {
/*      */       CommandLauncher commandLauncher;
/*      */       
/*  156 */       if (System.getProperty(""java.version"").startsWith(""1.1"")) {
/*      */         
/*  158 */         commandLauncher = new Java11CommandLauncher();
/*      */       } else {
/*      */         
/*  161 */         commandLauncher = new CommandLauncher();
/*      */       } 
/*      */       
/*  164 */       shellLauncher = new PerlScriptCommandLauncher(""bin/antRun.pl"", commandLauncher);
/*      */     }
/*  166 */     else if (Os.isFamily(""openvms"")) {
/*      */       
/*  168 */       shellLauncher = vmLauncher;
/*      */     } else {
/*      */       
/*  171 */       shellLauncher = new ScriptCommandLauncher(""bin/antRun"", new CommandLauncher());
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  185 */   public void setSpawn(boolean spawn) { this.spawn = spawn; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static synchronized Vector getProcEnvironment() {
/*  195 */     if (procEnvironment != null) {
/*  196 */       return procEnvironment;
/*      */     }
/*      */     
/*  199 */     procEnvironment = new Vector();
/*      */     try {
/*  201 */       ByteArrayOutputStream out = new ByteArrayOutputStream();
/*  202 */       Execute exe = new Execute(new PumpStreamHandler(out));
/*  203 */       exe.setCommandline(getProcEnvCommand());
/*      */       
/*  205 */       exe.setNewenvironment(true);
/*  206 */       int retval = exe.execute();
/*  207 */       if (retval != 0);
/*      */ 
/*      */ 
/*      */       
/*  211 */       BufferedReader in = new BufferedReader(new StringReader(toString(out)));
/*      */ 
/*      */       
/*  214 */       if (Os.isFamily(""openvms"")) {
/*  215 */         procEnvironment = addVMSLogicals(procEnvironment, in);
/*  216 */         return procEnvironment;
/*      */       } 
/*      */       
/*  219 */       String var = null;
/*  220 */       String lineSep = System.getProperty(""line.separator""); String line;
/*  221 */       while ((line = in.readLine()) != null) {
/*  222 */         if (line.indexOf('=') == -1) {
/*      */ 
/*      */           
/*  225 */           if (var == null) {
/*  226 */             var = lineSep + line; continue;
/*      */           } 
/*  228 */           var = var + lineSep + line;
/*      */           
/*      */           continue;
/*      */         } 
/*  232 */         if (var != null) {
/*  233 */           procEnvironment.addElement(var);
/*      */         }
/*  235 */         var = line;
/*      */       } 
/*      */ 
/*      */       
/*  239 */       if (var != null) {
/*  240 */         procEnvironment.addElement(var);
/*      */       }
/*      */     } catch (IOException exc) {
/*  243 */       exc.printStackTrace();
/*      */     } 
/*      */     
/*  246 */     return procEnvironment;
/*      */   }
/*      */   
/*      */   private static String[] getProcEnvCommand() {
/*  250 */     if (Os.isFamily(""os/2"")) {
/*      */       
/*  252 */       String[] cmd = { ""cmd"", ""/c"", ""set"" };
/*  253 */       return cmd;
/*  254 */     }  if (Os.isFamily(""windows"")) {
/*      */       
/*  256 */       if (!Os.isFamily(""win9x"")) {
/*      */         
/*  258 */         String[] cmd = { ""cmd"", ""/c"", ""set"" };
/*  259 */         return cmd;
/*      */       } 
/*      */       
/*  262 */       String[] cmd = { ""command.com"", ""/c"", ""set"" };
/*  263 */       return cmd;
/*      */     } 
/*  265 */     if (Os.isFamily(""z/os"") || Os.isFamily(""unix"")) {
/*      */ 
/*      */ 
/*      */       
/*  269 */       String[] cmd = new String[1];
/*  270 */       if ((new File(""/bin/env"")).canRead()) {
/*  271 */         cmd[0] = ""/bin/env"";
/*  272 */       } else if ((new File(""/usr/bin/env"")).canRead()) {
/*  273 */         cmd[0] = ""/usr/bin/env"";
/*      */       } else {
/*      */         
/*  276 */         cmd[0] = ""env"";
/*      */       } 
/*  278 */       return cmd;
/*  279 */     }  if (Os.isFamily(""netware"") || Os.isFamily(""os/400"")) {
/*      */       
/*  281 */       String[] cmd = { ""env"" };
/*  282 */       return cmd;
/*  283 */     }  if (Os.isFamily(""openvms"")) {
/*  284 */       String[] cmd = { ""show"", ""logical"" };
/*  285 */       return cmd;
/*      */     } 
/*      */ 
/*      */     
/*  289 */     String[] cmd = null;
/*  290 */     return cmd;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static String toString(ByteArrayOutputStream bos) {
/*  306 */     if (Os.isFamily(""z/os"")) {
/*      */       try {
/*  308 */         return bos.toString(""Cp1047"");
/*  309 */       } catch (UnsupportedEncodingException e) {}
/*      */     
/*      */     }
/*  312 */     else if (Os.isFamily(""os/400"")) {
/*      */       try {
/*  314 */         return bos.toString(""Cp500"");
/*  315 */       } catch (UnsupportedEncodingException e) {}
/*      */     } 
/*      */ 
/*      */     
/*  319 */     return bos.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  327 */   public Execute() { this(new PumpStreamHandler(), null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  338 */   public Execute(ExecuteStreamHandler streamHandler) { this(streamHandler, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Execute(ExecuteStreamHandler streamHandler, ExecuteWatchdog watchdog) {
/*  351 */     setStreamHandler(streamHandler);
/*  352 */     this.watchdog = watchdog;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  359 */   public void setStreamHandler(ExecuteStreamHandler streamHandler) { this.streamHandler = streamHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  368 */   public String[] getCommandline() { return this.cmdl; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  378 */   public void setCommandline(String[] commandline) { this.cmdl = commandline; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  387 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getEnvironment() {
/*  396 */     if (this.env == null || this.newEnvironment) {
/*  397 */       return this.env;
/*      */     }
/*  399 */     return patchEnvironment();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  410 */   public void setEnvironment(String[] env) { this.env = env; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setWorkingDirectory(File wd) {
/*  424 */     if (wd == null || wd.getAbsolutePath().equals(antWorkingDirectory)) {
/*  425 */       this.workingDirectory = null;
/*      */     } else {
/*  427 */       this.workingDirectory = wd;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  440 */   public void setAntRun(Project project) throws BuildException { this.project = project; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  454 */   public void setVMLauncher(boolean useVMLauncher) { this.useVMLauncher = useVMLauncher; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static Process launch(Project project, String[] command, String[] env, File dir, boolean useVM) throws IOException {
/*  473 */     CommandLauncher launcher = (vmLauncher != null) ? vmLauncher : shellLauncher;
/*      */     
/*  475 */     if (!useVM) {
/*  476 */       launcher = shellLauncher;
/*      */     }
/*      */     
/*  479 */     return launcher.exec(project, command, env, dir);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int execute() throws IOException {
/*  490 */     Process process = launch(this.project, getCommandline(), getEnvironment(), this.workingDirectory, this.useVMLauncher);
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/*  495 */       this.streamHandler.setProcessInputStream(process.getOutputStream());
/*  496 */       this.streamHandler.setProcessOutputStream(process.getInputStream());
/*  497 */       this.streamHandler.setProcessErrorStream(process.getErrorStream());
/*      */     } catch (IOException e) {
/*  499 */       process.destroy();
/*  500 */       throw e;
/*      */     } 
/*  502 */     this.streamHandler.start();
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/*  507 */       processDestroyer.add(process);
/*      */       
/*  509 */       if (this.watchdog != null) {
/*  510 */         this.watchdog.start(process);
/*      */       }
/*  512 */       waitFor(process);
/*      */       
/*  514 */       if (this.watchdog != null) {
/*  515 */         this.watchdog.stop();
/*      */       }
/*  517 */       this.streamHandler.stop();
/*      */       
/*  519 */       if (this.watchdog != null) {
/*  520 */         this.watchdog.checkException();
/*      */       }
/*  522 */       return getExitValue();
/*      */     }
/*      */     finally {
/*      */       
/*  526 */       processDestroyer.remove(process);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void spawn() throws IOException {
/*  539 */     Process process = launch(this.project, getCommandline(), getEnvironment(), this.workingDirectory, this.useVMLauncher);
/*      */ 
/*      */     
/*  542 */     if (Os.isFamily(""windows"")) {
/*      */       try {
/*  544 */         Thread.sleep(1000L);
/*      */       } catch (InterruptedException e) {
/*  546 */         this.project.log(""interruption in the sleep after having spawned a process"", 3);
/*      */       } 
/*      */     }
/*      */     
/*  550 */     this.project.log(""spawned process "" + process.toString(), 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void waitFor(Process process) {
/*      */     try {
/*  560 */       process.waitFor();
/*  561 */       setExitValue(process.exitValue());
/*      */     } catch (InterruptedException e) {
/*  563 */       process.destroy();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  573 */   protected void setExitValue(int value) { this.exitValue = value; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  582 */   public int getExitValue() { return this.exitValue; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static boolean isFailure(int exitValue) {
/*  601 */     if (Os.isFamily(""openvms""))
/*      */     {
/*  603 */       return (exitValue % 2 == 0);
/*      */     }
/*      */     
/*  606 */     return (exitValue != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  616 */   public boolean killedProcess() { return (this.watchdog != null && this.watchdog.killedProcess()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String[] patchEnvironment() {
/*  627 */     if (Os.isFamily(""openvms"")) {
/*  628 */       return this.env;
/*      */     }
/*      */     
/*  631 */     Vector osEnv = (Vector)getProcEnvironment().clone();
/*  632 */     for (int i = 0; i < this.env.length; i++) {
/*  633 */       int pos = this.env[i].indexOf('=');
/*      */       
/*  635 */       String key = this.env[i].substring(0, pos + 1);
/*  636 */       int size = osEnv.size();
/*  637 */       for (int j = 0; j < size; j++) {
/*  638 */         if (((String)osEnv.elementAt(j)).startsWith(key)) {
/*  639 */           osEnv.removeElementAt(j);
/*      */           break;
/*      */         } 
/*      */       } 
/*  643 */       osEnv.addElement(this.env[i]);
/*      */     } 
/*  645 */     String[] result = new String[osEnv.size()];
/*  646 */     osEnv.copyInto((Object[])result);
/*  647 */     return result;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void runCommand(Task task, String[] cmdline) throws BuildException {
/*      */     try {
/*  662 */       task.log(Commandline.describeCommand(cmdline), 3);
/*      */       
/*  664 */       Execute exe = new Execute(new LogStreamHandler(task, 2, 0));
/*      */ 
/*      */       
/*  667 */       exe.setAntRun(task.getProject());
/*  668 */       exe.setCommandline(cmdline);
/*  669 */       int retval = exe.execute();
/*  670 */       if (isFailure(retval)) {
/*  671 */         throw new BuildException(cmdline[0] + "" failed with return code "" + retval, task.getLocation());
/*      */       }
/*      */     } catch (IOException exc) {
/*      */       
/*  675 */       throw new BuildException(""Could not launch "" + cmdline[0] + "": "" + exc, task.getLocation());
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static Vector addVMSLogicals(Vector environment, BufferedReader in) throws IOException {
/*  693 */     HashMap logicals = new HashMap();
/*  694 */     String logName = null, logValue = null;
/*  695 */     String line = null;
/*  696 */     while ((line = in.readLine()) != null) {
/*      */       
/*  698 */       if (line.startsWith(""\t="")) {
/*      */         
/*  700 */         if (logName != null)
/*  701 */           logValue = logValue + "","" + line.substring(4, line.length() - 1);  continue;
/*      */       } 
/*  703 */       if (line.startsWith(""  \"""")) {
/*      */         
/*  705 */         if (logName != null) {
/*  706 */           logicals.put(logName, logValue);
/*      */         }
/*  708 */         int eqIndex = line.indexOf('=');
/*  709 */         String newLogName = line.substring(3, eqIndex - 2);
/*  710 */         if (logicals.containsKey(newLogName)) {
/*      */           
/*  712 */           logName = null; continue;
/*      */         } 
/*  714 */         logName = newLogName;
/*  715 */         logValue = line.substring(eqIndex + 3, line.length() - 1);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  720 */     if (logName != null) {
/*  721 */       logicals.put(logName, logValue);
/*      */     }
/*      */     
/*  724 */     for (Iterator i = logicals.keySet().iterator(); i.hasNext(); ) {
/*  725 */       String logical = i.next();
/*  726 */       environment.add(logical + ""="" + logicals.get(logical));
/*      */     } 
/*  728 */     return environment;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class CommandLauncher
/*      */   {
/*      */     private CommandLauncher() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env) throws IOException {
/*  748 */       if (project != null) {
/*  749 */         project.log(""Execute:CommandLauncher: "" + Commandline.describeCommand(cmd), 4);
/*      */       }
/*      */       
/*  752 */       return Runtime.getRuntime().exec(cmd, env);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/*  769 */       if (workingDir == null) {
/*  770 */         return exec(project, cmd, env);
/*      */       }
/*  772 */       throw new IOException(""Cannot execute a process in different directory under this JVM"");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class Java11CommandLauncher
/*      */     extends CommandLauncher
/*      */   {
/*      */     private Java11CommandLauncher() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env) throws IOException {
/*  795 */       String[] newcmd = new String[cmd.length];
/*  796 */       for (int i = 0; i < cmd.length; i++) {
/*  797 */         newcmd[i] = Commandline.quoteArgument(cmd[i]);
/*      */       }
/*  799 */       if (project != null) {
/*  800 */         project.log(""Execute:Java11CommandLauncher: "" + Commandline.describeCommand(newcmd), 4);
/*      */       }
/*      */       
/*  803 */       return Runtime.getRuntime().exec(newcmd, env);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static class Java13CommandLauncher
/*      */     extends CommandLauncher
/*      */   {
/*      */     private Method myExecWithCWD;
/*      */ 
/*      */     
/*  815 */     public Java13CommandLauncher() throws NoSuchMethodException { this.myExecWithCWD = ((Execute.class$java$lang$Runtime == null) ? (Execute.class$java$lang$Runtime = Execute.class$(""java.lang.Runtime"")) : Execute.class$java$lang$Runtime).getMethod(""exec"", new Class[] { (Execute.array$Ljava$lang$String == null) ? (Execute.array$Ljava$lang$String = Execute.class$(""[Ljava.lang.String;"")) : Execute.array$Ljava$lang$String, (Execute.array$Ljava$lang$String == null) ? (Execute.array$Ljava$lang$String = Execute.class$(""[Ljava.lang.String;"")) : Execute.array$Ljava$lang$String, (Execute.class$java$io$File == null) ? (Execute.class$java$io$File = Execute.class$(""java.io.File"")) : Execute.class$java$io$File }); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/*      */       try {
/*  831 */         if (project != null) {
/*  832 */           project.log(""Execute:Java13CommandLauncher: "" + Commandline.describeCommand(cmd), 4);
/*      */         }
/*      */         
/*  835 */         Object[] arguments = { cmd, env, workingDir };
/*  836 */         return (Process)this.myExecWithCWD.invoke(Runtime.getRuntime(), arguments);
/*      */       } catch (InvocationTargetException exc) {
/*      */         
/*  839 */         Throwable realexc = exc.getTargetException();
/*  840 */         if (realexc instanceof ThreadDeath)
/*  841 */           throw (ThreadDeath)realexc; 
/*  842 */         if (realexc instanceof IOException) {
/*  843 */           throw (IOException)realexc;
/*      */         }
/*  845 */         throw new BuildException(""Unable to execute command"", realexc);
/*      */       
/*      */       }
/*      */       catch (Exception exc) {
/*      */         
/*  850 */         throw new BuildException(""Unable to execute command"", exc);
/*      */       } 
/*      */     }
/*      */   }
/*      */   
/*      */   static Class class$(String x0) { try {
/*      */       return Class.forName(x0);
/*      */     } catch (ClassNotFoundException x1) {
/*      */       throw new NoClassDefFoundError(x1.getMessage());
/*      */     }  }
/*      */   
/*      */   private static class CommandLauncherProxy extends CommandLauncher {
/*      */     private Execute.CommandLauncher myLauncher;
/*      */     
/*  864 */     CommandLauncherProxy(Execute.CommandLauncher launcher) { this.myLauncher = launcher; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  877 */     public Process exec(Project project, String[] cmd, String[] env) throws IOException { return this.myLauncher.exec(project, cmd, env); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class OS2CommandLauncher
/*      */     extends CommandLauncherProxy
/*      */   {
/*  893 */     OS2CommandLauncher(Execute.CommandLauncher launcher) { super(launcher); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/*  907 */       File commandDir = workingDir;
/*  908 */       if (workingDir == null) {
/*  909 */         if (project != null) {
/*  910 */           commandDir = project.getBaseDir();
/*      */         } else {
/*  912 */           return exec(project, cmd, env);
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  918 */       int preCmdLength = 7;
/*  919 */       String cmdDir = commandDir.getAbsolutePath();
/*  920 */       String[] newcmd = new String[cmd.length + 7];
/*  921 */       newcmd[0] = ""cmd"";
/*  922 */       newcmd[1] = ""/c"";
/*  923 */       newcmd[2] = cmdDir.substring(0, 2);
/*  924 */       newcmd[3] = ""&&"";
/*  925 */       newcmd[4] = ""cd"";
/*  926 */       newcmd[5] = cmdDir.substring(2);
/*  927 */       newcmd[6] = ""&&"";
/*  928 */       System.arraycopy(cmd, 0, newcmd, 7, cmd.length);
/*      */       
/*  930 */       return exec(project, newcmd, env);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class WinNTCommandLauncher
/*      */     extends CommandLauncherProxy
/*      */   {
/*  941 */     WinNTCommandLauncher(Execute.CommandLauncher launcher) { super(launcher); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/*  955 */       File commandDir = workingDir;
/*  956 */       if (workingDir == null) {
/*  957 */         if (project != null) {
/*  958 */           commandDir = project.getBaseDir();
/*      */         } else {
/*  960 */           return exec(project, cmd, env);
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  966 */       int preCmdLength = 6;
/*  967 */       String[] newcmd = new String[cmd.length + 6];
/*  968 */       newcmd[0] = ""cmd"";
/*  969 */       newcmd[1] = ""/c"";
/*  970 */       newcmd[2] = ""cd"";
/*  971 */       newcmd[3] = ""/d"";
/*  972 */       newcmd[4] = commandDir.getAbsolutePath();
/*  973 */       newcmd[5] = ""&&"";
/*  974 */       System.arraycopy(cmd, 0, newcmd, 6, cmd.length);
/*      */       
/*  976 */       return exec(project, newcmd, env);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class MacCommandLauncher
/*      */     extends CommandLauncherProxy
/*      */   {
/*  986 */     MacCommandLauncher(Execute.CommandLauncher launcher) { super(launcher); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 1000 */       if (workingDir == null) {
/* 1001 */         return exec(project, cmd, env);
/*      */       }
/*      */       
/* 1004 */       System.getProperties().put(""user.dir"", workingDir.getAbsolutePath());
/*      */       try {
/* 1006 */         return exec(project, cmd, env);
/*      */       } finally {
/* 1008 */         System.getProperties().put(""user.dir"", antWorkingDirectory);
/*      */       } 
/*      */     }
/*      */   }
/*      */   
/*      */   private static class ScriptCommandLauncher
/*      */     extends CommandLauncherProxy
/*      */   {
/*      */     private String myScript;
/*      */     
/*      */     ScriptCommandLauncher(String script, Execute.CommandLauncher launcher) {
/* 1019 */       super(launcher);
/* 1020 */       this.myScript = script;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 1029 */       if (project == null) {
/* 1030 */         if (workingDir == null) {
/* 1031 */           return exec(project, cmd, env);
/*      */         }
/* 1033 */         throw new IOException(""Cannot locate antRun script: No project provided"");
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1038 */       String antHome = project.getProperty(""ant.home"");
/* 1039 */       if (antHome == null) {
/* 1040 */         throw new IOException(""Cannot locate antRun script: Property 'ant.home' not found"");
/*      */       }
/*      */       
/* 1043 */       String antRun = project.resolveFile(antHome + File.separator + this.myScript).toString();
/*      */ 
/*      */       
/* 1046 */       File commandDir = workingDir;
/* 1047 */       if (workingDir == null && project != null) {
/* 1048 */         commandDir = project.getBaseDir();
/*      */       }
/*      */       
/* 1051 */       String[] newcmd = new String[cmd.length + 2];
/* 1052 */       newcmd[0] = antRun;
/* 1053 */       newcmd[1] = commandDir.getAbsolutePath();
/* 1054 */       System.arraycopy(cmd, 0, newcmd, 2, cmd.length);
/*      */       
/* 1056 */       return exec(project, newcmd, env);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static class PerlScriptCommandLauncher
/*      */     extends CommandLauncherProxy
/*      */   {
/*      */     private String myScript;
/*      */ 
/*      */     
/*      */     PerlScriptCommandLauncher(String script, Execute.CommandLauncher launcher) {
/* 1069 */       super(launcher);
/* 1070 */       this.myScript = script;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 1079 */       if (project == null) {
/* 1080 */         if (workingDir == null) {
/* 1081 */           return exec(project, cmd, env);
/*      */         }
/* 1083 */         throw new IOException(""Cannot locate antRun script: No project provided"");
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1088 */       String antHome = project.getProperty(""ant.home"");
/* 1089 */       if (antHome == null) {
/* 1090 */         throw new IOException(""Cannot locate antRun script: Property 'ant.home' not found"");
/*      */       }
/*      */       
/* 1093 */       String antRun = project.resolveFile(antHome + File.separator + this.myScript).toString();
/*      */ 
/*      */       
/* 1096 */       File commandDir = workingDir;
/* 1097 */       if (workingDir == null && project != null) {
/* 1098 */         commandDir = project.getBaseDir();
/*      */       }
/*      */       
/* 1101 */       String[] newcmd = new String[cmd.length + 3];
/* 1102 */       newcmd[0] = ""perl"";
/* 1103 */       newcmd[1] = antRun;
/* 1104 */       newcmd[2] = commandDir.getAbsolutePath();
/* 1105 */       System.arraycopy(cmd, 0, newcmd, 3, cmd.length);
/*      */       
/* 1107 */       return exec(project, newcmd, env);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static class VmsCommandLauncher
/*      */     extends Java13CommandLauncher
/*      */   {
/*      */     public Process exec(Project project, String[] cmd, String[] env) throws IOException {
/* 1129 */       String[] vmsCmd = { createCommandFile(cmd, env).getPath() };
/* 1130 */       return super.exec(project, vmsCmd, env);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 1141 */       String[] vmsCmd = { createCommandFile(cmd, env).getPath() };
/* 1142 */       return super.exec(project, vmsCmd, env, workingDir);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private File createCommandFile(String[] cmd, String[] env) throws IOException {
/* 1151 */       File script = File.createTempFile(""ANT"", "".COM"");
/* 1152 */       script.deleteOnExit();
/* 1153 */       PrintWriter out = null;
/*      */       try {
/* 1155 */         out = new PrintWriter(new FileWriter(script));
/*      */ 
/*      */         
/* 1158 */         if (env != null)
/*      */         {
/* 1160 */           for (int i = 1; i < env.length; i++) {
/* 1161 */             int eqIndex = env[i].indexOf('=');
/* 1162 */             if (eqIndex != -1) {
/* 1163 */               out.print(""$ DEFINE/NOLOG "");
/* 1164 */               out.print(env[i].substring(0, eqIndex));
/* 1165 */               out.print("" \"""");
/* 1166 */               out.print(env[i].substring(eqIndex + 1));
/* 1167 */               out.println('""');
/*      */             } 
/*      */           } 
/*      */         }
/*      */         
/* 1172 */         out.print(""$ "" + cmd[0]);
/* 1173 */         for (int i = 1; i < cmd.length; i++) {
/* 1174 */           out.println("" -"");
/* 1175 */           out.print(cmd[i]);
/*      */         } 
/*      */       } finally {
/* 1178 */         if (out != null) {
/* 1179 */           out.close();
/*      */         }
/*      */       } 
/* 1182 */       return script;
/*      */     }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Execute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteJava,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Permissions;
/*     */ import org.apache.tools.ant.util.TimeoutObserver;
/*     */ import org.apache.tools.ant.util.Watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteJava
/*     */   implements Runnable, TimeoutObserver
/*     */ {
/*  82 */   private Commandline javaCommand = null;
/*  83 */   private Path classpath = null;
/*  84 */   private CommandlineJava.SysProperties sysProperties = null;
/*  85 */   private Permissions perm = null;
/*  86 */   private Method main = null;
/*  87 */   private Long timeout = null;
/*  88 */   private Throwable caught = null;
/*     */   private boolean timedOut = false;
/*  90 */   private Thread thread = null;
/*     */ 
/*     */   
/*  93 */   public void setJavaCommand(Commandline javaCommand) { this.javaCommand = javaCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setClasspath(Path p) { this.classpath = p; }
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setSystemProperties(CommandlineJava.SysProperties s) { this.sysProperties = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setPermissions(Permissions permissions) { this.perm = permissions; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutput(PrintStream out) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setTimeout(Long timeout) { this.timeout = timeout; }
/*     */ 
/*     */   
/*     */   public void execute(Project project) throws BuildException {
/* 135 */     String classname = this.javaCommand.getExecutable();
/*     */     
/* 137 */     AntClassLoader loader = null;
/*     */     try {
/* 139 */       if (this.sysProperties != null) {
/* 140 */         this.sysProperties.setSystem();
/*     */       }
/*     */       
/* 143 */       Class[] param = { Class.forName(""[Ljava.lang.String;"") };
/* 144 */       Class target = null;
/* 145 */       if (this.classpath == null) {
/* 146 */         target = Class.forName(classname);
/*     */       } else {
/* 148 */         loader = project.createClassLoader(this.classpath);
/* 149 */         loader.setParent(project.getCoreLoader());
/* 150 */         loader.setParentFirst(false);
/* 151 */         loader.addJavaLibraries();
/* 152 */         loader.setIsolated(true);
/* 153 */         loader.setThreadContextLoader();
/* 154 */         loader.forceLoadClass(classname);
/* 155 */         target = Class.forName(classname, true, (ClassLoader)loader);
/*     */       } 
/* 157 */       this.main = target.getMethod(""main"", param);
/* 158 */       if (this.main == null) {
/* 159 */         throw new BuildException(""Could not find main() method in "" + classname);
/*     */       }
/*     */ 
/*     */       
/* 163 */       if ((this.main.getModifiers() & 0x8) == 0) {
/* 164 */         throw new BuildException(""main() method in "" + classname + "" is not declared static"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 169 */       if (this.timeout == null) {
/* 170 */         run();
/*     */       } else {
/* 172 */         this.thread = new Thread(this, ""ExecuteJava"");
/* 173 */         Task currentThreadTask = project.getThreadTask(Thread.currentThread());
/*     */         
/* 175 */         project.registerThreadTask(this.thread, currentThreadTask);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 180 */         this.thread.setDaemon(true);
/* 181 */         Watchdog w = new Watchdog(this.timeout.longValue());
/* 182 */         w.addTimeoutObserver(this);
/* 183 */         synchronized (this) {
/* 184 */           this.thread.start();
/* 185 */           w.start();
/*     */           try {
/* 187 */             wait();
/* 188 */           } catch (InterruptedException e) {}
/*     */ 
/*     */           
/* 191 */           if (this.timedOut) {
/* 192 */             project.log(""Timeout: sub-process interrupted"", 1);
/*     */           } else {
/*     */             
/* 195 */             this.thread = null;
/* 196 */             w.stop();
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 201 */       if (this.caught != null) {
/* 202 */         throw this.caught;
/*     */       }
/*     */     } catch (ClassNotFoundException e) {
/*     */       
/* 206 */       throw new BuildException(""Could not find "" + classname + ""."" + "" Make sure you have it in your"" + "" classpath"");
/*     */     }
/*     */     catch (SecurityException e) {
/*     */       
/* 210 */       throw e;
/*     */     } catch (Throwable e) {
/* 212 */       throw new BuildException(e);
/*     */     } finally {
/* 214 */       if (loader != null) {
/* 215 */         loader.resetThreadContextLoader();
/* 216 */         loader.cleanup();
/*     */       } 
/* 218 */       if (this.sysProperties != null) {
/* 219 */         this.sysProperties.restoreSystem();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/* 228 */     Object[] argument = { this.javaCommand.getArguments() };
/*     */     try {
/* 230 */       if (this.perm != null) {
/* 231 */         this.perm.setSecurityManager();
/*     */       }
/* 233 */       this.main.invoke(null, argument);
/*     */     } catch (InvocationTargetException e) {
/* 235 */       Throwable t = e.getTargetException();
/* 236 */       if (!(t instanceof InterruptedException)) {
/* 237 */         this.caught = t;
/*     */       }
/*     */     } catch (Throwable t) {
/* 240 */       this.caught = t = null;
/*     */     } finally {
/* 242 */       if (this.perm != null) {
/* 243 */         this.perm.restoreSecurityManager();
/*     */       }
/* 245 */       synchronized (this) {
/* 246 */         notifyAll();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void timeoutOccured(Watchdog w) {
/* 255 */     if (this.thread != null) {
/* 256 */       this.timedOut = true;
/* 257 */       this.thread.interrupt();
/*     */     } 
/* 259 */     notifyAll();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public synchronized boolean killedProcess() { return this.timedOut; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ExecuteJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteOn,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.AbstractFileSet;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.DirSet;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteOn
/*     */   extends ExecTask
/*     */ {
/*  86 */   protected Vector filesets = new Vector();
/*     */   
/*  88 */   private Vector filelists = new Vector();
/*     */   private boolean relative = false;
/*     */   private boolean parallel = false;
/*     */   private boolean forwardSlash = false;
/*  92 */   protected String type = ""file"";
/*  93 */   protected Commandline.Marker srcFilePos = null;
/*     */   private boolean skipEmpty = false;
/*  95 */   protected Commandline.Marker targetFilePos = null;
/*  96 */   protected Mapper mapperElement = null;
/*  97 */   protected FileNameMapper mapper = null;
/*  98 */   protected File destDir = null;
/*  99 */   private int maxParallel = -1;
/*     */ 
/*     */   
/*     */   private boolean addSourceFile = true;
/*     */ 
/*     */   
/*     */   private boolean verbose = false;
/*     */ 
/*     */   
/*     */   protected boolean srcIsFirst = true;
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void addDirset(DirSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void addFilelist(FileList list) { this.filelists.addElement(list); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setRelative(boolean relative) { this.relative = relative; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setParallel(boolean parallel) { this.parallel = parallel; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setType(FileDirBoth type) { this.type = type.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setSkipEmptyFilesets(boolean skip) { this.skipEmpty = skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setDest(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setForwardslash(boolean forwardSlash) { this.forwardSlash = forwardSlash; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setMaxParallel(int max) { this.maxParallel = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void setAddsourcefile(boolean b) { this.addSourceFile = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   public void setVerbose(boolean b) { this.verbose = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createSrcfile() {
/* 218 */     if (this.srcFilePos != null) {
/* 219 */       throw new BuildException(getTaskType() + "" doesn't support multiple "" + ""srcfile elements."", getLocation());
/*     */     }
/*     */     
/* 222 */     this.srcFilePos = this.cmdl.createMarker();
/* 223 */     return this.srcFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createTargetfile() {
/* 231 */     if (this.targetFilePos != null) {
/* 232 */       throw new BuildException(getTaskType() + "" doesn't support multiple "" + ""targetfile elements."", getLocation());
/*     */     }
/*     */     
/* 235 */     this.targetFilePos = this.cmdl.createMarker();
/* 236 */     this.srcIsFirst = (this.srcFilePos != null);
/* 237 */     return this.targetFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 244 */     if (this.mapperElement != null) {
/* 245 */       throw new BuildException(""Cannot define more than one mapper"", getLocation());
/*     */     }
/*     */     
/* 248 */     this.mapperElement = new Mapper(getProject());
/* 249 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkConfiguration() {
/* 257 */     if (""execon"".equals(getTaskName())) {
/* 258 */       log(""!! execon is deprecated. Use apply instead. !!"");
/*     */     }
/*     */     
/* 261 */     super.checkConfiguration();
/* 262 */     if (this.filesets.size() == 0 && this.filelists.size() == 0) {
/* 263 */       throw new BuildException(""no filesets and no filelists specified"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 267 */     if (this.targetFilePos != null || this.mapperElement != null || this.destDir != null) {
/*     */ 
/*     */       
/* 270 */       if (this.mapperElement == null) {
/* 271 */         throw new BuildException(""no mapper specified"", getLocation());
/*     */       }
/* 273 */       if (this.destDir == null) {
/* 274 */         throw new BuildException(""no dest attribute specified"", getLocation());
/*     */       }
/*     */       
/* 277 */       this.mapper = this.mapperElement.getImplementation();
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void runExec(Execute exe) throws BuildException {
/* 282 */     int totalFiles = 0;
/* 283 */     int totalDirs = 0;
/* 284 */     boolean haveExecuted = false;
/*     */     
/*     */     try {
/* 287 */       Vector fileNames = new Vector();
/* 288 */       Vector baseDirs = new Vector();
/* 289 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 290 */         String currentType = this.type;
/* 291 */         AbstractFileSet fs = this.filesets.elementAt(i);
/* 292 */         if (fs instanceof DirSet && 
/* 293 */           !""dir"".equals(this.type)) {
/* 294 */           log(""Found a nested dirset but type is "" + this.type + "". "" + ""Temporarily switching to type=\""dir\"" on the"" + "" assumption that you really did mean"" + "" <dirset> not <fileset>."", 4);
/*     */ 
/*     */ 
/*     */           
/* 298 */           currentType = ""dir"";
/*     */         } 
/*     */         
/* 301 */         File base = fs.getDir(getProject());
/* 302 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/*     */         
/* 304 */         if (!""dir"".equals(currentType)) {
/* 305 */           String[] s = getFiles(base, ds);
/* 306 */           for (int j = 0; j < s.length; j++) {
/* 307 */             totalFiles++;
/* 308 */             fileNames.addElement(s[j]);
/* 309 */             baseDirs.addElement(base);
/*     */           } 
/*     */         } 
/*     */         
/* 313 */         if (!""file"".equals(currentType)) {
/* 314 */           String[] s = getDirs(base, ds);
/* 315 */           for (int j = 0; j < s.length; j++) {
/* 316 */             totalDirs++;
/* 317 */             fileNames.addElement(s[j]);
/* 318 */             baseDirs.addElement(base);
/*     */           } 
/*     */         } 
/*     */         
/* 322 */         if (fileNames.size() == 0 && this.skipEmpty) {
/* 323 */           log(""Skipping fileset for directory "" + base + "". It is empty."", 2);
/*     */ 
/*     */ 
/*     */         
/*     */         }
/* 328 */         else if (!this.parallel) {
/* 329 */           String[] s = new String[fileNames.size()];
/* 330 */           fileNames.copyInto((Object[])s);
/* 331 */           for (int j = 0; j < s.length; j++) {
/* 332 */             String[] command = getCommandline(s[j], base);
/* 333 */             log(Commandline.describeCommand(command), 3);
/*     */             
/* 335 */             exe.setCommandline(command);
/* 336 */             if (haveExecuted)
/*     */             {
/*     */               
/* 339 */               exe.setStreamHandler(createHandler());
/*     */             }
/* 341 */             runExecute(exe);
/* 342 */             haveExecuted = true;
/*     */           } 
/* 344 */           fileNames.removeAllElements();
/* 345 */           baseDirs.removeAllElements();
/*     */         } 
/*     */       } 
/*     */       
/* 349 */       for (int i = 0; i < this.filelists.size(); i++) {
/* 350 */         FileList list = this.filelists.elementAt(i);
/* 351 */         File base = list.getDir(getProject());
/* 352 */         String[] names = list.getFiles(getProject());
/*     */         
/* 354 */         for (int j = 0; j < names.length; j++) {
/* 355 */           File f = new File(base, names[j]);
/* 356 */           if ((f.isFile() && !""dir"".equals(this.type)) || (f.isDirectory() && !""file"".equals(this.type))) {
/*     */ 
/*     */             
/* 359 */             if (f.isFile()) {
/* 360 */               totalFiles++;
/*     */             } else {
/* 362 */               totalDirs++;
/*     */             } 
/*     */             
/* 365 */             fileNames.addElement(names[j]);
/* 366 */             baseDirs.addElement(base);
/*     */           } 
/*     */         } 
/*     */         
/* 370 */         if (fileNames.size() == 0 && this.skipEmpty) {
/* 371 */           log(""Skipping filelist for directory "" + base + "". It is empty."", 2);
/*     */ 
/*     */ 
/*     */         
/*     */         }
/* 376 */         else if (!this.parallel) {
/* 377 */           String[] s = new String[fileNames.size()];
/* 378 */           fileNames.copyInto((Object[])s);
/* 379 */           for (int j = 0; j < s.length; j++) {
/* 380 */             String[] command = getCommandline(s[j], base);
/* 381 */             log(Commandline.describeCommand(command), 3);
/*     */             
/* 383 */             exe.setCommandline(command);
/* 384 */             if (haveExecuted)
/*     */             {
/*     */               
/* 387 */               exe.setStreamHandler(createHandler());
/*     */             }
/* 389 */             runExecute(exe);
/* 390 */             haveExecuted = true;
/*     */           } 
/* 392 */           fileNames.removeAllElements();
/* 393 */           baseDirs.removeAllElements();
/*     */         } 
/*     */       } 
/*     */       
/* 397 */       if (this.parallel && (fileNames.size() > 0 || !this.skipEmpty)) {
/* 398 */         runParallel(exe, fileNames, baseDirs);
/* 399 */         haveExecuted = true;
/*     */       } 
/*     */       
/* 402 */       if (haveExecuted) {
/* 403 */         log(""Applied "" + this.cmdl.getExecutable() + "" to "" + totalFiles + "" file"" + ((totalFiles != 1) ? ""s"" : """") + "" and "" + totalDirs + "" director"" + ((totalDirs != 1) ? ""ies"" : ""y"") + ""."", this.verbose ? 2 : 3);
/*     */ 
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     catch (IOException e) {
/*     */ 
/*     */       
/* 412 */       throw new BuildException(""Execute failed: "" + e, e, getLocation());
/*     */     } finally {
/*     */       
/* 415 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {
/* 426 */     char fileSeparator = File.separatorChar;
/* 427 */     Vector targets = new Vector();
/* 428 */     if (this.targetFilePos != null) {
/* 429 */       Hashtable addedFiles = new Hashtable();
/* 430 */       for (int i = 0; i < srcFiles.length; i++) {
/* 431 */         String[] subTargets = this.mapper.mapFileName(srcFiles[i]);
/* 432 */         if (subTargets != null) {
/* 433 */           for (int j = 0; j < subTargets.length; j++) {
/* 434 */             String name = null;
/* 435 */             if (!this.relative) {
/* 436 */               name = (new File(this.destDir, subTargets[j])).getAbsolutePath();
/*     */             } else {
/* 438 */               name = subTargets[j];
/*     */             } 
/* 440 */             if (this.forwardSlash && fileSeparator != '/') {
/* 441 */               name = name.replace(fileSeparator, '/');
/*     */             }
/* 443 */             if (!addedFiles.contains(name)) {
/* 444 */               targets.addElement(name);
/* 445 */               addedFiles.put(name, name);
/*     */             } 
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/* 451 */     String[] targetFiles = new String[targets.size()];
/* 452 */     targets.copyInto((Object[])targetFiles);
/*     */     
/* 454 */     if (!this.addSourceFile) {
/* 455 */       srcFiles = new String[0];
/*     */     }
/*     */     
/* 458 */     String[] orig = this.cmdl.getCommandline();
/* 459 */     String[] result = new String[orig.length + srcFiles.length + targetFiles.length];
/*     */ 
/*     */     
/* 462 */     int srcIndex = orig.length;
/* 463 */     if (this.srcFilePos != null) {
/* 464 */       srcIndex = this.srcFilePos.getPosition();
/*     */     }
/*     */     
/* 467 */     if (this.targetFilePos != null) {
/* 468 */       int targetIndex = this.targetFilePos.getPosition();
/*     */       
/* 470 */       if (srcIndex < targetIndex || (srcIndex == targetIndex && this.srcIsFirst))
/*     */       {
/*     */ 
/*     */         
/* 474 */         System.arraycopy(orig, 0, result, 0, srcIndex);
/*     */ 
/*     */         
/* 477 */         System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length, targetIndex - srcIndex);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 482 */         System.arraycopy(targetFiles, 0, result, targetIndex + srcFiles.length, targetFiles.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 487 */         System.arraycopy(orig, targetIndex, result, targetIndex + srcFiles.length + targetFiles.length, orig.length - targetIndex);
/*     */       
/*     */       }
/*     */       else
/*     */       {
/* 492 */         System.arraycopy(orig, 0, result, 0, targetIndex);
/*     */ 
/*     */         
/* 495 */         System.arraycopy(targetFiles, 0, result, targetIndex, targetFiles.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 500 */         System.arraycopy(orig, targetIndex, result, targetIndex + targetFiles.length, srcIndex - targetIndex);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 505 */         System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length + targetFiles.length, orig.length - srcIndex);
/*     */ 
/*     */         
/* 508 */         srcIndex += targetFiles.length;
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 514 */       System.arraycopy(orig, 0, result, 0, srcIndex);
/*     */       
/* 516 */       System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length, orig.length - srcIndex);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 523 */     for (int i = 0; i < srcFiles.length; i++) {
/* 524 */       if (!this.relative) {
/* 525 */         result[srcIndex + i] = (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();
/*     */       } else {
/*     */         
/* 528 */         result[srcIndex + i] = srcFiles[i];
/*     */       } 
/* 530 */       if (this.forwardSlash && fileSeparator != '/') {
/* 531 */         result[srcIndex + i] = result[srcIndex + i].replace(fileSeparator, '/');
/*     */       }
/*     */     } 
/*     */     
/* 535 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 545 */   protected String[] getCommandline(String srcFile, File baseDir) { return getCommandline(new String[] { srcFile }, new File[] { baseDir }); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getFiles(File baseDir, DirectoryScanner ds) {
/* 553 */     if (this.mapper != null) {
/* 554 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 555 */       return sfs.restrict(ds.getIncludedFiles(), baseDir, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 558 */     return ds.getIncludedFiles();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getDirs(File baseDir, DirectoryScanner ds) {
/* 567 */     if (this.mapper != null) {
/* 568 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 569 */       return sfs.restrict(ds.getIncludedDirectories(), baseDir, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 572 */     return ds.getIncludedDirectories();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runParallel(Execute exe, Vector fileNames, Vector baseDirs) throws IOException, BuildException {
/* 585 */     String[] s = new String[fileNames.size()];
/* 586 */     fileNames.copyInto((Object[])s);
/* 587 */     File[] b = new File[baseDirs.size()];
/* 588 */     baseDirs.copyInto((Object[])b);
/*     */     
/* 590 */     if (this.maxParallel <= 0 || s.length == 0) {
/*     */       
/* 592 */       String[] command = getCommandline(s, b);
/* 593 */       log(Commandline.describeCommand(command), 3);
/* 594 */       exe.setCommandline(command);
/* 595 */       runExecute(exe);
/*     */     } else {
/* 597 */       int stillToDo = fileNames.size();
/* 598 */       int currentOffset = 0;
/* 599 */       while (stillToDo > 0) {
/* 600 */         int currentAmount = Math.min(stillToDo, this.maxParallel);
/* 601 */         String[] cs = new String[currentAmount];
/* 602 */         System.arraycopy(s, currentOffset, cs, 0, currentAmount);
/* 603 */         File[] cb = new File[currentAmount];
/* 604 */         System.arraycopy(b, currentOffset, cb, 0, currentAmount);
/* 605 */         String[] command = getCommandline(cs, cb);
/* 606 */         log(Commandline.describeCommand(command), 3);
/* 607 */         exe.setCommandline(command);
/* 608 */         if (currentOffset > 0)
/*     */         {
/*     */           
/* 611 */           exe.setStreamHandler(createHandler());
/*     */         }
/* 613 */         runExecute(exe);
/*     */         
/* 615 */         stillToDo -= currentAmount;
/* 616 */         currentOffset += currentAmount;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileDirBoth
/*     */     extends EnumeratedAttribute
/*     */   {
/* 630 */     public String[] getValues() { return new String[] { ""file"", ""dir"", ""both"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ExecuteOn.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteStreamHandler,"package org.apache.tools.ant.taskdefs;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
public interface ExecuteStreamHandler {
  void setProcessInputStream(OutputStream paramOutputStream) throws IOException;
  void setProcessErrorStream(InputStream paramInputStream) throws IOException;
  void setProcessOutputStream(InputStream paramInputStream) throws IOException;
  void start() throws IOException;
  void stop();
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ExecuteStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteWatchdog,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.TimeoutObserver;
/*     */ import org.apache.tools.ant.util.Watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteWatchdog
/*     */   implements TimeoutObserver
/*     */ {
/*     */   private Process process;
/*     */   private boolean watch = false;
/*  89 */   private Exception caught = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean killedProcess = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private Watchdog watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExecuteWatchdog(long timeout) {
/* 104 */     this.watchdog = new Watchdog(timeout);
/* 105 */     this.watchdog.addTimeoutObserver(this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public ExecuteWatchdog(int timeout) { this(timeout); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void start(Process process) {
/* 124 */     if (process == null) {
/* 125 */       throw new NullPointerException(""process is null."");
/*     */     }
/* 127 */     if (this.process != null) {
/* 128 */       throw new IllegalStateException(""Already running."");
/*     */     }
/* 130 */     this.caught = null;
/* 131 */     this.killedProcess = false;
/* 132 */     this.watch = true;
/* 133 */     this.process = process;
/* 134 */     this.watchdog.start();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void stop() {
/* 142 */     this.watchdog.stop();
/* 143 */     this.watch = false;
/* 144 */     this.process = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void timeoutOccured(Watchdog w) {
/*     */     try {
/*     */       try {
/* 155 */         this.process.exitValue();
/*     */       }
/*     */       catch (IllegalThreadStateException itse) {
/*     */         
/* 159 */         if (this.watch) {
/* 160 */           this.killedProcess = true;
/* 161 */           this.process.destroy();
/*     */         } 
/*     */       } 
/*     */     } catch (Exception e) {
/* 165 */       this.caught = e = null;
/*     */     } finally {
/* 167 */       cleanUp();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 175 */     this.watch = false;
/* 176 */     this.process = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkException() throws BuildException {
/* 188 */     if (this.caught != null) {
/* 189 */       throw new BuildException(""Exception in ExecuteWatchdog.run: "" + this.caught.getMessage(), this.caught);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public boolean isWatching() { return this.watch; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public boolean killedProcess() { return this.killedProcess; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ExecuteWatchdog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exit,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Exit
/*     */   extends Task
/*     */ {
/*     */   private String message;
/*     */   private String ifCondition;
/*     */   private String unlessCondition;
/*     */   
/*  90 */   public void setMessage(String value) { this.message = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setIf(String c) { this.ifCondition = c; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setUnless(String c) { this.unlessCondition = c; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 119 */     if (testIfCondition() && testUnlessCondition()) {
/* 120 */       String text = null;
/* 121 */       if (this.message != null && this.message.length() > 0) {
/* 122 */         text = this.message;
/*     */       } else {
/*     */         
/* 125 */         if (getProject().getProperty(this.ifCondition) != null) {
/* 126 */           text = ""if="" + this.ifCondition;
/*     */         }
/* 128 */         if (this.unlessCondition != null && this.unlessCondition.length() > 0 && getProject().getProperty(this.unlessCondition) == null) {
/*     */           
/* 130 */           if (text == null) {
/* 131 */             text = """";
/*     */           } else {
/* 133 */             text = text + "" and "";
/*     */           } 
/* 135 */           text = text + ""unless="" + this.unlessCondition;
/*     */         }
/* 137 */         else if (text == null) {
/* 138 */           text = ""No message"";
/*     */         } 
/*     */       } 
/*     */       
/* 142 */       throw new BuildException(text);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(String msg) {
/* 151 */     if (this.message == null) {
/* 152 */       this.message = """";
/*     */     }
/* 154 */     this.message += getProject().replaceProperties(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testIfCondition() {
/* 162 */     if (this.ifCondition == null || """".equals(this.ifCondition)) {
/* 163 */       return true;
/*     */     }
/* 165 */     return (getProject().getProperty(this.ifCondition) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testUnlessCondition() {
/* 174 */     if (this.unlessCondition == null || """".equals(this.unlessCondition)) {
/* 175 */       return true;
/*     */     }
/* 177 */     return (getProject().getProperty(this.unlessCondition) == null);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Exit.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Expand,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.types.selectors.SelectorUtils;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.zip.ZipEntry;
/*     */ import org.apache.tools.zip.ZipFile;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Expand
/*     */   extends Task
/*     */ {
/*     */   private File dest;
/*     */   private File source;
/*     */   private boolean overwrite = true;
/*  95 */   private Vector patternsets = new Vector();
/*  96 */   private Vector filesets = new Vector();
/*     */   
/*     */   private static final String NATIVE_ENCODING = ""native-encoding"";
/*     */   
/* 100 */   private String encoding = ""UTF8"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 108 */     if (""expand"".equals(getTaskType())) {
/* 109 */       log(""!! expand is deprecated. Use unzip instead. !!"");
/*     */     }
/*     */     
/* 112 */     if (this.source == null && this.filesets.size() == 0) {
/* 113 */       throw new BuildException(""src attribute and/or filesets must be specified"");
/*     */     }
/*     */ 
/*     */     
/* 117 */     if (this.dest == null) {
/* 118 */       throw new BuildException(""Dest attribute must be specified"");
/*     */     }
/*     */ 
/*     */     
/* 122 */     if (this.dest.exists() && !this.dest.isDirectory()) {
/* 123 */       throw new BuildException(""Dest must be a directory."", getLocation());
/*     */     }
/*     */     
/* 126 */     FileUtils fileUtils = FileUtils.newFileUtils();
/*     */     
/* 128 */     if (this.source != null) {
/* 129 */       if (this.source.isDirectory()) {
/* 130 */         throw new BuildException(""Src must not be a directory. Use nested filesets instead."", getLocation());
/*     */       }
/*     */       
/* 133 */       expandFile(fileUtils, this.source, this.dest);
/*     */     } 
/*     */     
/* 136 */     if (this.filesets.size() > 0) {
/* 137 */       for (int j = 0; j < this.filesets.size(); j++) {
/* 138 */         FileSet fs = this.filesets.elementAt(j);
/* 139 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 140 */         File fromDir = fs.getDir(getProject());
/*     */         
/* 142 */         String[] files = ds.getIncludedFiles();
/* 143 */         for (int i = 0; i < files.length; i++) {
/* 144 */           File file = new File(fromDir, files[i]);
/* 145 */           expandFile(fileUtils, file, this.dest);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void expandFile(FileUtils fileUtils, File srcF, File dir) {
/* 155 */     log(""Expanding: "" + srcF + "" into "" + dir, 2);
/* 156 */     ZipFile zf = null;
/*     */     try {
/* 158 */       zf = new ZipFile(srcF, this.encoding);
/* 159 */       Enumeration e = zf.getEntries();
/* 160 */       while (e.hasMoreElements()) {
/* 161 */         ZipEntry ze = e.nextElement();
/* 162 */         extractFile(fileUtils, srcF, dir, zf.getInputStream(ze), ze.getName(), new Date(ze.getTime()), ze.isDirectory());
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 167 */       log(""expand complete"", 3);
/*     */     } catch (IOException ioe) {
/* 169 */       throw new BuildException(""Error while expanding "" + srcF.getPath(), ioe);
/*     */     } finally {
/*     */       
/* 172 */       if (zf != null) {
/*     */         try {
/* 174 */           zf.close();
/* 175 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void extractFile(FileUtils fileUtils, File srcF, File dir, InputStream compressedInputStream, String entryName, Date entryDate, boolean isDirectory) throws IOException {
/* 188 */     if (this.patternsets != null && this.patternsets.size() > 0) {
/* 189 */       String name = entryName.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */       
/* 191 */       boolean included = false;
/* 192 */       for (int v = 0; v < this.patternsets.size(); v++) {
/* 193 */         PatternSet p = this.patternsets.elementAt(v);
/* 194 */         String[] incls = p.getIncludePatterns(getProject());
/* 195 */         if (incls == null || incls.length == 0)
/*     */         {
/* 197 */           incls = new String[] { ""**"" };
/*     */         }
/*     */         
/* 200 */         for (int w = 0; w < incls.length; w++) {
/* 201 */           String pattern = incls[w].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */           
/* 203 */           if (pattern.endsWith(File.separator)) {
/* 204 */             pattern = pattern + ""**"";
/*     */           }
/*     */           
/* 207 */           included = SelectorUtils.matchPath(pattern, name);
/* 208 */           if (included) {
/*     */             break;
/*     */           }
/*     */         } 
/*     */         
/* 213 */         if (!included) {
/*     */           break;
/*     */         }
/*     */ 
/*     */         
/* 218 */         String[] excls = p.getExcludePatterns(getProject());
/* 219 */         if (excls != null) {
/* 220 */           for (int w = 0; w < excls.length; w++) {
/* 221 */             String pattern = excls[w].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */ 
/*     */             
/* 224 */             if (pattern.endsWith(File.separator)) {
/* 225 */               pattern = pattern + ""**"";
/*     */             }
/* 227 */             included = !SelectorUtils.matchPath(pattern, name);
/* 228 */             if (!included) {
/*     */               break;
/*     */             }
/*     */           } 
/*     */         }
/*     */       } 
/* 234 */       if (!included) {
/*     */         return;
/*     */       }
/*     */     } 
/*     */     
/* 239 */     File f = fileUtils.resolveFile(dir, entryName);
/*     */     try {
/* 241 */       if (!this.overwrite && f.exists() && f.lastModified() >= entryDate.getTime()) {
/*     */         
/* 243 */         log(""Skipping "" + f + "" as it is up-to-date"", 4);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 248 */       log(""expanding "" + entryName + "" to "" + f, 3);
/*     */ 
/*     */       
/* 251 */       File dirF = fileUtils.getParentFile(f);
/* 252 */       if (dirF != null) {
/* 253 */         dirF.mkdirs();
/*     */       }
/*     */       
/* 256 */       if (isDirectory) {
/* 257 */         f.mkdirs();
/*     */       } else {
/* 259 */         byte[] buffer = new byte[1024];
/* 260 */         int length = 0;
/* 261 */         FileOutputStream fos = null;
/*     */         try {
/* 263 */           fos = new FileOutputStream(f);
/*     */ 
/*     */           
/* 266 */           while ((length = compressedInputStream.read(buffer)) >= 0) {
/* 267 */             fos.write(buffer, 0, length);
/*     */           }
/*     */           
/* 270 */           fos.close();
/* 271 */           fos = null;
/*     */         } finally {
/* 273 */           if (fos != null) {
/*     */             try {
/* 275 */               fos.close();
/* 276 */             } catch (IOException e) {}
/*     */           }
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 283 */       fileUtils.setFileLastModified(f, entryDate.getTime());
/*     */     } catch (FileNotFoundException ex) {
/* 285 */       log(""Unable to expand to file "" + f.getPath(), 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void setDest(File d) { this.dest = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void setSrc(File s) { this.source = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 314 */   public void setOverwrite(boolean b) { this.overwrite = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 321 */   public void addPatternset(PatternSet set) { this.patternsets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 328 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEncoding(String encoding) {
/* 340 */     if (""native-encoding"".equals(encoding)) {
/* 341 */       encoding = null;
/*     */     }
/* 343 */     this.encoding = encoding;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Expand.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Filter,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Filter
/*     */   extends Task
/*     */ {
/*     */   private String token;
/*     */   private String value;
/*     */   private File filtersFile;
/*     */   
/*  87 */   public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setFiltersfile(File filtersFile) { this.filtersFile = filtersFile; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 109 */     boolean isFiltersFromFile = (this.filtersFile != null && this.token == null && this.value == null);
/*     */     
/* 111 */     boolean isSingleFilter = (this.filtersFile == null && this.token != null && this.value != null);
/*     */ 
/*     */     
/* 114 */     if (!isFiltersFromFile && !isSingleFilter) {
/* 115 */       throw new BuildException(""both token and value parameters, or only a filtersFile parameter is required"", getLocation());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 120 */     if (isSingleFilter) {
/* 121 */       getProject().getGlobalFilterSet().addFilter(this.token, this.value);
/*     */     }
/*     */     
/* 124 */     if (isFiltersFromFile) {
/* 125 */       readFilters();
/*     */     }
/*     */   }
/*     */   
/*     */   protected void readFilters() throws BuildException {
/* 130 */     log(""Reading filters from "" + this.filtersFile, 3);
/* 131 */     getProject().getGlobalFilterSet().readFiltersFromFile(this.filtersFile);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Filter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.FixCRLF,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.BufferedWriter;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.FileReader;
/*      */ import java.io.FileWriter;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.OutputStreamWriter;
/*      */ import java.io.Reader;
/*      */ import java.io.Writer;
/*      */ import java.util.Enumeration;
/*      */ import java.util.NoSuchElementException;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.taskdefs.condition.Os;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FixCRLF
/*      */   extends MatchingTask
/*      */ {
/*      */   private static final int UNDEF = -1;
/*      */   private static final int NOTJAVA = 0;
/*      */   private static final int LOOKING = 1;
/*      */   private static final int IN_CHAR_CONST = 2;
/*      */   private static final int IN_STR_CONST = 3;
/*      */   private static final int IN_SINGLE_COMMENT = 4;
/*      */   private static final int IN_MULTI_COMMENT = 5;
/*      */   private static final int ASIS = 0;
/*      */   private static final int CR = 1;
/*      */   private static final int LF = 2;
/*      */   private static final int CRLF = 3;
/*      */   private static final int ADD = 1;
/*      */   private static final int REMOVE = -1;
/*      */   private static final int SPACES = -1;
/*      */   private static final int TABS = 1;
/*      */   private static final int INBUFLEN = 8192;
/*      */   private static final int LINEBUFLEN = 200;
/*      */   private static final char CTRLZ = '\032';
/*  148 */   private int tablength = 8;
/*  149 */   private String spaces = ""        "";
/*  150 */   private StringBuffer linebuf = new StringBuffer(1024);
/*  151 */   private StringBuffer linebuf2 = new StringBuffer(1024);
/*      */   
/*      */   private int eol;
/*      */   private String eolstr;
/*      */   private int ctrlz;
/*      */   private int tabs;
/*      */   private boolean javafiles = false;
/*      */   private File srcDir;
/*  159 */   private File destDir = null;
/*      */   
/*  161 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  166 */   private String encoding = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FixCRLF() {
/*  175 */     this.tabs = 0;
/*  176 */     if (Os.isFamily(""mac"")) {
/*  177 */       this.ctrlz = -1;
/*  178 */       this.eol = 1;
/*  179 */       this.eolstr = ""\r"";
/*  180 */     } else if (Os.isFamily(""dos"")) {
/*  181 */       this.ctrlz = 0;
/*  182 */       this.eol = 3;
/*  183 */       this.eolstr = ""\r\n"";
/*      */     } else {
/*  185 */       this.ctrlz = -1;
/*  186 */       this.eol = 2;
/*  187 */       this.eolstr = ""\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  195 */   public void setSrcdir(File srcDir) { this.srcDir = srcDir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  203 */   public void setDestdir(File destDir) { this.destDir = destDir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  210 */   public void setJavafiles(boolean javafiles) { this.javafiles = javafiles; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEol(CrLf attr) {
/*  226 */     String option = attr.getValue();
/*  227 */     if (option.equals(""asis"")) {
/*  228 */       this.eol = 0;
/*  229 */     } else if (option.equals(""cr"") || option.equals(""mac"")) {
/*  230 */       this.eol = 1;
/*  231 */       this.eolstr = ""\r"";
/*  232 */     } else if (option.equals(""lf"") || option.equals(""unix"")) {
/*  233 */       this.eol = 2;
/*  234 */       this.eolstr = ""\n"";
/*      */     } else {
/*      */       
/*  237 */       this.eol = 3;
/*  238 */       this.eolstr = ""\r\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setCr(AddAsisRemove attr) {
/*  255 */     log(""DEPRECATED: The cr attribute has been deprecated,"", 1);
/*      */     
/*  257 */     log(""Please use the eol attribute instead"", 1);
/*  258 */     String option = attr.getValue();
/*  259 */     CrLf c = new CrLf();
/*  260 */     if (option.equals(""remove"")) {
/*  261 */       c.setValue(""lf"");
/*  262 */     } else if (option.equals(""asis"")) {
/*  263 */       c.setValue(""asis"");
/*      */     } else {
/*      */       
/*  266 */       c.setValue(""crlf"");
/*      */     } 
/*  268 */     setEol(c);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTab(AddAsisRemove attr) {
/*  282 */     String option = attr.getValue();
/*  283 */     if (option.equals(""remove"")) {
/*  284 */       this.tabs = -1;
/*  285 */     } else if (option.equals(""asis"")) {
/*  286 */       this.tabs = 0;
/*      */     } else {
/*      */       
/*  289 */       this.tabs = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTablength(int tlength) throws BuildException {
/*  299 */     if (tlength < 2 || tlength > 80) {
/*  300 */       throw new BuildException(""tablength must be between 2 and 80"", getLocation());
/*      */     }
/*      */     
/*  303 */     this.tablength = tlength;
/*  304 */     StringBuffer sp = new StringBuffer();
/*  305 */     for (int i = 0; i < this.tablength; i++) {
/*  306 */       sp.append(' ');
/*      */     }
/*  308 */     this.spaces = sp.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEof(AddAsisRemove attr) {
/*  322 */     String option = attr.getValue();
/*  323 */     if (option.equals(""remove"")) {
/*  324 */       this.ctrlz = -1;
/*  325 */     } else if (option.equals(""asis"")) {
/*  326 */       this.ctrlz = 0;
/*      */     } else {
/*      */       
/*  329 */       this.ctrlz = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  338 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/*  347 */     if (this.srcDir == null) {
/*  348 */       throw new BuildException(""srcdir attribute must be set!"");
/*      */     }
/*  350 */     if (!this.srcDir.exists()) {
/*  351 */       throw new BuildException(""srcdir does not exist!"");
/*      */     }
/*  353 */     if (!this.srcDir.isDirectory()) {
/*  354 */       throw new BuildException(""srcdir is not a directory!"");
/*      */     }
/*  356 */     if (this.destDir != null) {
/*  357 */       if (!this.destDir.exists()) {
/*  358 */         throw new BuildException(""destdir does not exist!"");
/*      */       }
/*  360 */       if (!this.destDir.isDirectory()) {
/*  361 */         throw new BuildException(""destdir is not a directory!"");
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  366 */     log(""options: eol="" + ((this.eol == 0) ? ""asis"" : ((this.eol == 1) ? ""cr"" : ((this.eol == 2) ? ""lf"" : ""crlf""))) + "" tab="" + ((this.tabs == 1) ? ""add"" : ((this.tabs == 0) ? ""asis"" : ""remove"")) + "" eof="" + ((this.ctrlz == 1) ? ""add"" : ((this.ctrlz == 0) ? ""asis"" : ""remove"")) + "" tablength="" + this.tablength + "" encoding="" + ((this.encoding == null) ? ""default"" : this.encoding), 3);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  375 */     DirectoryScanner ds = getDirectoryScanner(this.srcDir);
/*  376 */     String[] files = ds.getIncludedFiles();
/*      */     
/*  378 */     for (int i = 0; i < files.length; i++) {
/*  379 */       processFile(files[i]);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  388 */   private Reader getReader(File f) throws IOException { return (this.encoding == null) ? new FileReader(f) : new InputStreamReader(new FileInputStream(f), this.encoding); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void processFile(String file) throws BuildException {
/*  394 */     File srcFile = new File(this.srcDir, file);
/*  395 */     File destD = (this.destDir == null) ? this.srcDir : this.destDir;
/*  396 */     File tmpFile = null;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  401 */     OneLiner lines = new OneLiner(this, srcFile);
/*      */     
/*      */     try {
/*      */       BufferedWriter outWriter;
/*      */       try {
/*  406 */         tmpFile = this.fileUtils.createTempFile(""fixcrlf"", """", null);
/*  407 */         tmpFile.deleteOnExit();
/*  408 */         Writer writer = (this.encoding == null) ? new FileWriter(tmpFile) : new OutputStreamWriter(new FileOutputStream(tmpFile), this.encoding);
/*      */ 
/*      */         
/*  411 */         outWriter = new BufferedWriter(writer);
/*      */       } catch (IOException e) {
/*  413 */         throw new BuildException(e);
/*      */       } 
/*      */       
/*  416 */       while (lines.hasMoreElements()) {
/*      */         OneLiner.BufferLine line;
/*      */ 
/*      */         
/*      */         try {
/*  421 */           line = (OneLiner.BufferLine)lines.nextElement();
/*      */         } catch (NoSuchElementException e) {
/*  423 */           throw new BuildException(e);
/*      */         } 
/*      */         
/*  426 */         String lineString = line.getLineString();
/*  427 */         int linelen = line.length();
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  432 */         if (this.tabs == 0) {
/*      */           
/*      */           try {
/*  435 */             outWriter.write(lineString);
/*      */           } catch (IOException e) {
/*  437 */             throw new BuildException(e);
/*      */           }
/*      */         
/*      */         } else {
/*      */           
/*  442 */           while (line.getNext() < linelen) {
/*      */             char terminator; int begin; int endComment;
/*  444 */             switch (lines.getState()) {
/*      */               
/*      */               case 0:
/*  447 */                 notInConstant(line, line.length(), outWriter);
/*      */ 
/*      */               
/*      */               case 5:
/*  451 */                 endComment = lineString.indexOf(""*/"", line.getNext());
/*      */                 
/*  453 */                 if (endComment >= 0) {
/*      */                   
/*  455 */                   endComment += 2;
/*  456 */                   lines.setState(1);
/*      */                 } else {
/*  458 */                   endComment = linelen;
/*      */                 } 
/*      */                 
/*  461 */                 notInConstant(line, endComment, outWriter);
/*      */ 
/*      */               
/*      */               case 4:
/*  465 */                 notInConstant(line, line.length(), outWriter);
/*  466 */                 lines.setState(1);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*      */               case 2:
/*      */               case 3:
/*  479 */                 begin = line.getNext();
/*  480 */                 terminator = (lines.getState() == 3) ? '""' : '\'';
/*      */ 
/*      */                 
/*  483 */                 endOfCharConst(line, terminator);
/*  484 */                 while (line.getNext() < line.getLookahead()) {
/*  485 */                   if (line.getNextCharInc() == '\t') {
/*  486 */                     line.setColumn(line.getColumn() + this.tablength - line.getColumn() % this.tablength);
/*      */                     
/*      */                     continue;
/*      */                   } 
/*  490 */                   line.incColumn();
/*      */                 } 
/*      */ 
/*      */ 
/*      */                 
/*      */                 try {
/*  496 */                   outWriter.write(line.substring(begin, line.getNext()));
/*      */                 } catch (IOException e) {
/*      */                   
/*  499 */                   throw new BuildException(e);
/*      */                 } 
/*      */                 
/*  502 */                 lines.setState(1);
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*      */               case 1:
/*  508 */                 nextStateChange(line);
/*  509 */                 notInConstant(line, line.getLookahead(), outWriter);
/*      */             } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*      */           } 
/*      */         } 
/*      */         try {
/*  519 */           outWriter.write(this.eolstr);
/*      */         } catch (IOException e) {
/*  521 */           throw new BuildException(e);
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*      */       try {
/*  528 */         if (this.ctrlz == 0) {
/*  529 */           outWriter.write(lines.getEofStr());
/*  530 */         } else if (this.ctrlz == 1) {
/*  531 */           outWriter.write(26);
/*      */         } 
/*      */       } catch (IOException e) {
/*  534 */         throw new BuildException(e);
/*      */       } finally {
/*      */         try {
/*  537 */           outWriter.close();
/*      */         } catch (IOException e) {
/*  539 */           throw new BuildException(e);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*      */       try {
/*  545 */         lines.close();
/*  546 */         lines = null;
/*      */       } catch (IOException e) {
/*  548 */         throw new BuildException(""Unable to close source file "" + srcFile);
/*      */       } 
/*      */ 
/*      */       
/*  552 */       File destFile = new File(destD, file);
/*      */       
/*  554 */       boolean destIsWrong = true;
/*  555 */       if (destFile.exists()) {
/*      */         
/*  557 */         log(""destFile exists"", 4);
/*  558 */         if (!this.fileUtils.contentEquals(destFile, tmpFile)) {
/*  559 */           log(destFile + "" is being written"", 4);
/*      */         } else {
/*  561 */           log(destFile + "" is not written, as the contents "" + ""are identical"", 4);
/*      */           
/*  563 */           destIsWrong = false;
/*      */         } 
/*      */       } 
/*      */       
/*  567 */       if (destIsWrong) {
/*  568 */         this.fileUtils.rename(tmpFile, destFile);
/*  569 */         tmpFile = null;
/*      */       } 
/*      */     } catch (IOException e) {
/*      */       
/*  573 */       throw new BuildException(e);
/*      */     } finally {
/*      */       try {
/*  576 */         if (lines != null) {
/*  577 */           lines.close();
/*      */         }
/*      */       } catch (IOException io) {
/*  580 */         log(""Error closing "" + srcFile, 0);
/*      */       } 
/*      */       
/*  583 */       if (tmpFile != null) {
/*  584 */         tmpFile.delete();
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void nextStateChange(OneLiner.BufferLine bufline) throws BuildException {
/*  605 */     int eol = bufline.length();
/*  606 */     int ptr = bufline.getNext();
/*      */ 
/*      */ 
/*      */     
/*  610 */     while (ptr < eol) {
/*  611 */       switch (bufline.getChar(ptr++)) {
/*      */         case '\'':
/*  613 */           bufline.setState(2);
/*  614 */           bufline.setLookahead(--ptr);
/*      */           return;
/*      */         case '""':
/*  617 */           bufline.setState(3);
/*  618 */           bufline.setLookahead(--ptr);
/*      */           return;
/*      */         case '/':
/*  621 */           if (ptr < eol) {
/*  622 */             if (bufline.getChar(ptr) == '*') {
/*  623 */               bufline.setState(5);
/*  624 */               bufline.setLookahead(--ptr); return;
/*      */             } 
/*  626 */             if (bufline.getChar(ptr) == '/') {
/*  627 */               bufline.setState(4);
/*  628 */               bufline.setLookahead(--ptr);
/*      */               return;
/*      */             } 
/*      */           } 
/*      */       } 
/*      */ 
/*      */ 
/*      */     
/*      */     } 
/*  637 */     bufline.setLookahead(ptr);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void endOfCharConst(OneLiner.BufferLine bufline, char terminator) throws BuildException {
/*  656 */     int ptr = bufline.getNext();
/*  657 */     int eol = bufline.length();
/*      */     
/*  659 */     ptr++;
/*  660 */     while (ptr < eol) {
/*  661 */       char c; if ((c = bufline.getChar(ptr++)) == '\\') {
/*  662 */         ptr++; continue;
/*      */       } 
/*  664 */       if (c == terminator) {
/*  665 */         bufline.setLookahead(ptr);
/*      */         
/*      */         return;
/*      */       } 
/*      */     } 
/*      */     
/*  671 */     throw new BuildException(""endOfCharConst: unterminated char constant"");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void notInConstant(OneLiner.BufferLine bufline, int end, BufferedWriter outWriter) {
/*  695 */     String line = bufline.substring(bufline.getNext(), end);
/*  696 */     int place = 0;
/*  697 */     int col = bufline.getColumn();
/*      */ 
/*      */ 
/*      */     
/*  701 */     this.linebuf = new StringBuffer(); int nextTab;
/*  702 */     while ((nextTab = line.indexOf('\t', place)) >= 0) {
/*  703 */       this.linebuf.append(line.substring(place, nextTab));
/*  704 */       col += nextTab - place;
/*  705 */       int tabspaces = this.tablength - col % this.tablength;
/*  706 */       this.linebuf.append(this.spaces.substring(0, tabspaces));
/*  707 */       col += tabspaces;
/*  708 */       place = nextTab + 1;
/*      */     } 
/*  710 */     this.linebuf.append(line.substring(place, line.length()));
/*      */     
/*  712 */     String linestring = new String(this.linebuf.substring(0));
/*  713 */     if (this.tabs == -1) {
/*      */       try {
/*  715 */         outWriter.write(linestring);
/*      */       } catch (IOException e) {
/*  717 */         throw new BuildException(e);
/*      */       } 
/*      */     } else {
/*      */       
/*  721 */       this.linebuf2 = new StringBuffer();
/*  722 */       place = 0;
/*  723 */       col = bufline.getColumn();
/*  724 */       int placediff = col - 0;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  729 */       int nextStop = col + this.tablength - col % this.tablength;
/*  730 */       if (nextStop - col < 2) {
/*  731 */         this.linebuf2.append(linestring.substring(place, nextStop - placediff));
/*      */         
/*  733 */         place = nextStop - placediff;
/*  734 */         nextStop += this.tablength;
/*      */       } 
/*      */       
/*  737 */       for (; nextStop - placediff <= linestring.length(); 
/*  738 */         nextStop += this.tablength) {
/*  739 */         int tabCol = nextStop; do {
/*      */         
/*  741 */         } while (--tabCol - placediff >= place && linestring.charAt(tabCol - placediff) == ' ');
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  746 */         if (nextStop - tabCol > 2) {
/*  747 */           this.linebuf2.append(linestring.substring(place, ++tabCol - placediff));
/*      */           
/*  749 */           this.linebuf2.append('\t');
/*      */         } else {
/*  751 */           this.linebuf2.append(linestring.substring(place, nextStop - placediff));
/*      */         } 
/*      */ 
/*      */         
/*  755 */         place = nextStop - placediff;
/*      */       } 
/*      */ 
/*      */       
/*  759 */       this.linebuf2.append(linestring.substring(place, linestring.length()));
/*      */       
/*      */       try {
/*  762 */         outWriter.write(this.linebuf2.substring(0));
/*      */       } catch (IOException e) {
/*  764 */         throw new BuildException(e);
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  770 */     bufline.setColumn(bufline.getColumn() + linestring.length());
/*  771 */     bufline.setNext(end);
/*      */   }
/*      */ 
/*      */   
/*      */   class OneLiner
/*      */     implements Enumeration
/*      */   {
/*      */     private int state;
/*      */     
/*      */     private StringBuffer eolStr;
/*      */     private StringBuffer eofStr;
/*      */     private BufferedReader reader;
/*      */     private StringBuffer line;
/*      */     private boolean reachedEof;
/*      */     private File srcFile;
/*      */     private final FixCRLF this$0;
/*      */     
/*      */     public OneLiner(FixCRLF this$0, File srcFile) throws BuildException {
/*  789 */       this.this$0 = this$0; this.state = this.this$0.javafiles ? 1 : 0; this.eolStr = new StringBuffer(200); this.eofStr = new StringBuffer(); this.line = new StringBuffer(); this.reachedEof = false;
/*  790 */       this.srcFile = srcFile;
/*      */       try {
/*  792 */         this.reader = new BufferedReader(this$0.getReader(srcFile), 8192);
/*      */         
/*  794 */         nextLine();
/*      */       } catch (IOException e) {
/*  796 */         throw new BuildException(srcFile + "": "" + e.getMessage(), e, this$0.getLocation());
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     protected void nextLine() throws BuildException {
/*  803 */       int ch = -1;
/*  804 */       int eolcount = 0;
/*      */       
/*  806 */       this.eolStr = new StringBuffer();
/*  807 */       this.line = new StringBuffer();
/*      */       
/*      */       try {
/*  810 */         ch = this.reader.read();
/*  811 */         while (ch != -1 && ch != 13 && ch != 10) {
/*  812 */           this.line.append((char)ch);
/*  813 */           ch = this.reader.read();
/*      */         } 
/*      */         
/*  816 */         if (ch == -1 && this.line.length() == 0) {
/*      */           
/*  818 */           this.reachedEof = true;
/*      */           
/*      */           return;
/*      */         } 
/*  822 */         switch ((char)ch) {
/*      */ 
/*      */           
/*      */           case '\r':
/*  826 */             eolcount++;
/*  827 */             this.eolStr.append('\r');
/*  828 */             this.reader.mark(2);
/*  829 */             switch (ch = this.reader.read()) {
/*      */               case 13:
/*  831 */                 if ((char)(ch = this.reader.read()) == '\n') {
/*  832 */                   eolcount += 2;
/*  833 */                   this.eolStr.append(""\r\n""); break;
/*      */                 } 
/*  835 */                 this.reader.reset();
/*      */                 break;
/*      */               
/*      */               case 10:
/*  839 */                 eolcount++;
/*  840 */                 this.eolStr.append('\n');
/*      */                 break;
/*      */               
/*      */               case -1:
/*      */                 break;
/*      */             } 
/*      */             
/*  847 */             this.reader.reset();
/*      */             break;
/*      */ 
/*      */ 
/*      */           
/*      */           case '\n':
/*  853 */             eolcount++;
/*  854 */             this.eolStr.append('\n');
/*      */             break;
/*      */         } 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  861 */         if (eolcount == 0) {
/*  862 */           int i = this.line.length(); do {  }
/*  863 */           while (--i >= 0 && this.line.charAt(i) == '\032');
/*      */ 
/*      */           
/*  866 */           if (i < this.line.length() - 1) {
/*      */ 
/*      */             
/*  869 */             this.eofStr.append(this.line.toString().substring(i + 1));
/*  870 */             if (i < 0) {
/*  871 */               this.line.setLength(0);
/*  872 */               this.reachedEof = true;
/*      */             } else {
/*  874 */               this.line.setLength(i + 1);
/*      */             }
/*      */           
/*      */           } 
/*      */         } 
/*      */       } catch (IOException e) {
/*      */         
/*  881 */         throw new BuildException(this.srcFile + "": "" + e.getMessage(), e, this.this$0.getLocation());
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  887 */     public String getEofStr() { return this.eofStr.substring(0); }
/*      */ 
/*      */ 
/*      */     
/*  891 */     public int getState() { return this.state; }
/*      */ 
/*      */ 
/*      */     
/*  895 */     public void setState(int state) { this.state = state; }
/*      */ 
/*      */ 
/*      */     
/*  899 */     public boolean hasMoreElements() { return !this.reachedEof; }
/*      */ 
/*      */ 
/*      */     
/*      */     public Object nextElement() throws NoSuchElementException {
/*  904 */       if (!hasMoreElements()) {
/*  905 */         throw new NoSuchElementException(""OneLiner"");
/*      */       }
/*  907 */       BufferLine tmpLine = new BufferLine(this, this.line.toString(), this.eolStr.substring(0));
/*      */       
/*  909 */       nextLine();
/*  910 */       return tmpLine;
/*      */     }
/*      */     
/*      */     public void close() throws IOException {
/*  914 */       if (this.reader != null)
/*  915 */         this.reader.close(); 
/*      */     }
/*      */     
/*      */     class BufferLine {
/*      */       private int next;
/*      */       private int column;
/*      */       private int lookahead;
/*      */       private String line;
/*      */       private String eolStr;
/*      */       private final FixCRLF.OneLiner this$1;
/*      */       
/*      */       public BufferLine(FixCRLF.OneLiner this$1, String line, String eolStr) throws BuildException {
/*  927 */         this.this$1 = this$1; this.next = 0; this.column = 0; this.lookahead = -1;
/*  928 */         this.next = 0;
/*  929 */         this.column = 0;
/*  930 */         this.line = line;
/*  931 */         this.eolStr = eolStr;
/*      */       }
/*      */ 
/*      */       
/*  935 */       public int getNext() { return this.next; }
/*      */ 
/*      */ 
/*      */       
/*  939 */       public void setNext(int next) { this.next = next; }
/*      */ 
/*      */ 
/*      */       
/*  943 */       public int getLookahead() { return this.lookahead; }
/*      */ 
/*      */ 
/*      */       
/*  947 */       public void setLookahead(int lookahead) { this.lookahead = lookahead; }
/*      */ 
/*      */ 
/*      */       
/*  951 */       public char getChar(int i) { return this.line.charAt(i); }
/*      */ 
/*      */ 
/*      */       
/*  955 */       public char getNextChar() { return getChar(this.next); }
/*      */ 
/*      */ 
/*      */       
/*  959 */       public char getNextCharInc() { return getChar(this.next++); }
/*      */ 
/*      */ 
/*      */       
/*  963 */       public int getColumn() { return this.column; }
/*      */ 
/*      */ 
/*      */       
/*  967 */       public void setColumn(int col) { this.column = col; }
/*      */ 
/*      */ 
/*      */       
/*  971 */       public int incColumn() { return this.column++; }
/*      */ 
/*      */ 
/*      */       
/*  975 */       public int length() { return this.line.length(); }
/*      */ 
/*      */ 
/*      */       
/*  979 */       public int getEolLength() { return this.eolStr.length(); }
/*      */ 
/*      */ 
/*      */       
/*  983 */       public String getLineString() { return this.line; }
/*      */ 
/*      */ 
/*      */       
/*  987 */       public String getEol() { return this.eolStr; }
/*      */ 
/*      */ 
/*      */       
/*  991 */       public String substring(int begin) { return this.line.substring(begin); }
/*      */ 
/*      */ 
/*      */       
/*  995 */       public String substring(int begin, int end) { return this.line.substring(begin, end); }
/*      */ 
/*      */ 
/*      */       
/*  999 */       public void setState(int state) { this.this$1.setState(state); }
/*      */ 
/*      */ 
/*      */       
/* 1003 */       public int getState() { return this.this$1.getState(); } } } class BufferLine { private int next; private int column; private int lookahead; private String line; private String eolStr; private final FixCRLF.OneLiner this$1; public int getState() { return this.this$1.getState(); } public BufferLine(FixCRLF.OneLiner this$1, String line, String eolStr) throws BuildException {
/*      */       this.this$1 = this$1;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.lookahead = -1;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.line = line;
/*      */       this.eolStr = eolStr;
/*      */     } public int getNext() { return this.next; } public void setNext(int next) { this.next = next; } public int getLookahead() { return this.lookahead; } public void setLookahead(int lookahead) { this.lookahead = lookahead; } public char getChar(int i) { return this.line.charAt(i); } public char getNextChar() { return getChar(this.next); } public char getNextCharInc() { return getChar(this.next++); } public int getColumn() { return this.column; } public void setColumn(int col) { this.column = col; } public int incColumn() { return this.column++; } public int length() { return this.line.length(); } public int getEolLength() { return this.eolStr.length(); } public String getLineString() { return this.line; } public String getEol() { return this.eolStr; } public String substring(int begin) { return this.line.substring(begin); } public String substring(int begin, int end) { return this.line.substring(begin, end); } public void setState(int state) { this.this$1.setState(state); } }
/* 1013 */   public static class AddAsisRemove extends EnumeratedAttribute { public String[] getValues() { return new String[] { ""add"", ""asis"", ""remove"" }; } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class CrLf
/*      */     extends EnumeratedAttribute
/*      */   {
/* 1025 */     public String[] getValues() { return new String[] { ""asis"", ""cr"", ""lf"", ""crlf"", ""mac"", ""unix"", ""dos"" }; }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\FixCRLF.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GenerateKey,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GenerateKey
/*     */   extends Task
/*     */ {
/*     */   protected String alias;
/*     */   protected String keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected String sigalg;
/*     */   protected String keyalg;
/*     */   protected String dname;
/*     */   protected DistinguishedName expandedDname;
/*     */   protected int keysize;
/*     */   protected int validity;
/*     */   protected boolean verbose;
/*     */   
/*     */   public static class DnameParam
/*     */   {
/*     */     private String name;
/*     */     private String value;
/*     */     
/*  79 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/*  83 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/*  87 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */     
/*  91 */     public String getValue() { return this.value; }
/*     */   }
/*     */   
/*     */   public static class DistinguishedName
/*     */   {
/*  96 */     private Vector params = new Vector();
/*     */     
/*     */     public Object createParam() {
/*  99 */       GenerateKey.DnameParam param = new GenerateKey.DnameParam();
/* 100 */       this.params.addElement(param);
/*     */       
/* 102 */       return param;
/*     */     }
/*     */ 
/*     */     
/* 106 */     public Enumeration getParams() { return this.params.elements(); }
/*     */ 
/*     */     
/*     */     public String toString() {
/* 110 */       int size = this.params.size();
/* 111 */       StringBuffer sb = new StringBuffer();
/* 112 */       boolean firstPass = true;
/*     */       
/* 114 */       for (int i = 0; i < size; i++) {
/* 115 */         if (!firstPass) {
/* 116 */           sb.append("" ,"");
/*     */         }
/* 118 */         firstPass = false;
/*     */         
/* 120 */         GenerateKey.DnameParam param = this.params.elementAt(i);
/* 121 */         sb.append(encode(param.getName()));
/* 122 */         sb.append('=');
/* 123 */         sb.append(encode(param.getValue()));
/*     */       } 
/*     */       
/* 126 */       return sb.toString();
/*     */     }
/*     */     
/*     */     public String encode(String string) {
/* 130 */       int end = string.indexOf(',');
/*     */       
/* 132 */       if (-1 == end) {
/* 133 */         return string;
/*     */       }
/*     */       
/* 136 */       StringBuffer sb = new StringBuffer();
/*     */       
/* 138 */       int start = 0;
/*     */       
/* 140 */       while (-1 != end) {
/* 141 */         sb.append(string.substring(start, end));
/* 142 */         sb.append(""\\,"");
/* 143 */         start = end + 1;
/* 144 */         end = string.indexOf(',', start);
/*     */       } 
/*     */       
/* 147 */       sb.append(string.substring(start));
/*     */       
/* 149 */       return sb.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DistinguishedName createDname() throws BuildException {
/* 182 */     if (null != this.expandedDname) {
/* 183 */       throw new BuildException(""DName sub-element can only be specified once."");
/*     */     }
/*     */     
/* 186 */     if (null != this.dname) {
/* 187 */       throw new BuildException(""It is not possible to specify dname  both as attribute and element."");
/*     */     }
/*     */     
/* 190 */     this.expandedDname = new DistinguishedName();
/* 191 */     return this.expandedDname;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDname(String dname) {
/* 200 */     if (null != this.expandedDname) {
/* 201 */       throw new BuildException(""It is not possible to specify dname  both as attribute and element."");
/*     */     }
/*     */     
/* 204 */     this.dname = dname;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void setAlias(String alias) { this.alias = alias; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setKeystore(String keystore) { this.keystore = keystore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 231 */   public void setStorepass(String storepass) { this.storepass = storepass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 240 */   public void setStoretype(String storetype) { this.storetype = storetype; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public void setKeypass(String keypass) { this.keypass = keypass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setSigalg(String sigalg) { this.sigalg = sigalg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public void setKeyalg(String keyalg) { this.keyalg = keyalg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeysize(String keysize) throws BuildException {
/*     */     try {
/* 278 */       this.keysize = Integer.parseInt(keysize);
/*     */     } catch (NumberFormatException nfe) {
/* 280 */       throw new BuildException(""KeySize attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setValidity(String validity) throws BuildException {
/*     */     try {
/* 292 */       this.validity = Integer.parseInt(validity);
/*     */     } catch (NumberFormatException nfe) {
/* 294 */       throw new BuildException(""Validity attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 307 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 308 */       throw new BuildException(""The genkey task is only available on JDK versions 1.2 or greater"");
/*     */     }
/*     */ 
/*     */     
/* 312 */     if (null == this.alias) {
/* 313 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 316 */     if (null == this.storepass) {
/* 317 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 320 */     if (null == this.dname && null == this.expandedDname) {
/* 321 */       throw new BuildException(""dname must be set"");
/*     */     }
/*     */     
/* 324 */     StringBuffer sb = new StringBuffer();
/*     */     
/* 326 */     sb.append(""-genkey "");
/*     */     
/* 328 */     if (this.verbose) {
/* 329 */       sb.append(""-v "");
/*     */     }
/*     */     
/* 332 */     sb.append(""-alias \"""");
/* 333 */     sb.append(this.alias);
/* 334 */     sb.append(""\"" "");
/*     */     
/* 336 */     if (null != this.dname) {
/* 337 */       sb.append(""-dname \"""");
/* 338 */       sb.append(this.dname);
/* 339 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 342 */     if (null != this.expandedDname) {
/* 343 */       sb.append(""-dname \"""");
/* 344 */       sb.append(this.expandedDname);
/* 345 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 348 */     if (null != this.keystore) {
/* 349 */       sb.append(""-keystore \"""");
/* 350 */       sb.append(this.keystore);
/* 351 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 354 */     if (null != this.storepass) {
/* 355 */       sb.append(""-storepass \"""");
/* 356 */       sb.append(this.storepass);
/* 357 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 360 */     if (null != this.storetype) {
/* 361 */       sb.append(""-storetype \"""");
/* 362 */       sb.append(this.storetype);
/* 363 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 366 */     sb.append(""-keypass \"""");
/* 367 */     if (null != this.keypass) {
/* 368 */       sb.append(this.keypass);
/*     */     } else {
/* 370 */       sb.append(this.storepass);
/*     */     } 
/* 372 */     sb.append(""\"" "");
/*     */     
/* 374 */     if (null != this.sigalg) {
/* 375 */       sb.append(""-sigalg \"""");
/* 376 */       sb.append(this.sigalg);
/* 377 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 380 */     if (null != this.keyalg) {
/* 381 */       sb.append(""-keyalg \"""");
/* 382 */       sb.append(this.keyalg);
/* 383 */       sb.append(""\"" "");
/*     */     } 
/*     */ 
/*     */     
/* 387 */     if (0 < this.keysize) {
/* 388 */       sb.append(""-keysize \"""");
/* 389 */       sb.append(this.keysize);
/* 390 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 393 */     if (0 < this.validity) {
/* 394 */       sb.append(""-validity \"""");
/* 395 */       sb.append(this.validity);
/* 396 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 399 */     log(""Generating Key for "" + this.alias);
/* 400 */     ExecTask cmd = (ExecTask)getProject().createTask(""exec"");
/* 401 */     cmd.setExecutable(""keytool"");
/* 402 */     Commandline.Argument arg = cmd.createArg();
/* 403 */     arg.setLine(sb.toString());
/* 404 */     cmd.setFailonerror(true);
/* 405 */     cmd.setTaskName(getTaskName());
/* 406 */     cmd.execute();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\GenerateKey.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Get,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.HttpURLConnection;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.util.Date;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Get
/*     */   extends Task
/*     */ {
/*     */   private URL source;
/*     */   private File dest;
/*     */   private boolean verbose = false;
/*     */   private boolean useTimestamp = false;
/*     */   private boolean ignoreErrors = false;
/*  90 */   private String uname = null;
/*  91 */   private String pword = null;
/*     */ 
/*     */ 
/*     */   
/*     */   static Class array$B;
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 100 */     if (this.source == null) {
/* 101 */       throw new BuildException(""src attribute is required"", getLocation());
/*     */     }
/*     */     
/* 104 */     if (this.dest == null) {
/* 105 */       throw new BuildException(""dest attribute is required"", getLocation());
/*     */     }
/*     */     
/* 108 */     if (this.dest.exists() && this.dest.isDirectory()) {
/* 109 */       throw new BuildException(""The specified destination is a directory"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 113 */     if (this.dest.exists() && !this.dest.canWrite()) {
/* 114 */       throw new BuildException(""Can't write to "" + this.dest.getAbsolutePath(), getLocation());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 120 */       log(""Getting: "" + this.source);
/*     */ 
/*     */       
/* 123 */       long timestamp = 0L;
/*     */       
/* 125 */       boolean hasTimestamp = false;
/* 126 */       if (this.useTimestamp && this.dest.exists()) {
/* 127 */         timestamp = this.dest.lastModified();
/* 128 */         if (this.verbose) {
/* 129 */           Date t = new Date(timestamp);
/* 130 */           log(""local file date : "" + t.toString());
/*     */         } 
/*     */         
/* 133 */         hasTimestamp = true;
/*     */       } 
/*     */ 
/*     */       
/* 137 */       URLConnection connection = this.source.openConnection();
/*     */ 
/*     */       
/* 140 */       if (this.useTimestamp && hasTimestamp) {
/* 141 */         connection.setIfModifiedSince(timestamp);
/*     */       }
/*     */       
/* 144 */       if (this.uname != null || this.pword != null) {
/* 145 */         String str, up = this.uname + "":"" + this.pword;
/*     */ 
/*     */         
/*     */         try {
/* 149 */           Object encoder = Class.forName(""sun.misc.BASE64Encoder"").newInstance();
/*     */           
/* 151 */           str = (String)encoder.getClass().getMethod(""encode"", new Class[] { (array$B == null) ? (array$B = class$(""[B"")) : array$B }).invoke(encoder, new Object[] { up.getBytes() });
/*     */         
/*     */         }
/*     */         catch (Exception ex) {
/*     */           
/* 156 */           Base64Converter encoder = new Base64Converter();
/* 157 */           str = encoder.encode(up.getBytes());
/*     */         } 
/* 159 */         connection.setRequestProperty(""Authorization"", ""Basic "" + str);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 164 */       connection.connect();
/*     */       
/* 166 */       if (connection instanceof HttpURLConnection) {
/* 167 */         HttpURLConnection httpConnection = (HttpURLConnection)connection;
/*     */         
/* 169 */         if (httpConnection.getResponseCode() == 304) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 175 */           log(""Not modified - so not downloaded"");
/*     */           
/*     */           return;
/*     */         } 
/* 179 */         if (httpConnection.getResponseCode() == 401) {
/*     */           
/* 181 */           String message = ""HTTP Authorization failure"";
/* 182 */           if (this.ignoreErrors) {
/* 183 */             log(message, 1);
/*     */             return;
/*     */           } 
/* 186 */           throw new BuildException(message);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 198 */       InputStream is = null;
/* 199 */       for (int i = 0; i < 3; i++) {
/*     */         try {
/* 201 */           is = connection.getInputStream();
/*     */           break;
/*     */         } catch (IOException ex) {
/* 204 */           log(""Error opening connection "" + ex);
/*     */         } 
/*     */       } 
/* 207 */       if (is == null) {
/* 208 */         log(""Can't get "" + this.source + "" to "" + this.dest);
/* 209 */         if (this.ignoreErrors) {
/*     */           return;
/*     */         }
/* 212 */         throw new BuildException(""Can't get "" + this.source + "" to "" + this.dest, getLocation());
/*     */       } 
/*     */ 
/*     */       
/* 216 */       FileOutputStream fos = new FileOutputStream(this.dest);
/* 217 */       boolean finished = false;
/*     */       try {
/* 219 */         byte[] buffer = new byte[102400];
/*     */         
/* 221 */         int dots = 0;
/*     */         int length;
/* 223 */         while ((length = is.read(buffer)) >= 0) {
/* 224 */           fos.write(buffer, 0, length);
/* 225 */           if (this.verbose) {
/* 226 */             System.out.print(""."");
/* 227 */             if (dots++ > 50) {
/* 228 */               System.out.flush();
/* 229 */               dots = 0;
/*     */             } 
/*     */           } 
/*     */         } 
/* 233 */         if (this.verbose) {
/* 234 */           System.out.println();
/*     */         }
/* 236 */         finished = true;
/*     */       } finally {
/* 238 */         if (fos != null) {
/* 239 */           fos.close();
/*     */         }
/* 241 */         is.close();
/*     */ 
/*     */ 
/*     */         
/* 245 */         if (!finished) {
/* 246 */           this.dest.delete();
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 253 */       if (this.useTimestamp) {
/* 254 */         long remoteTimestamp = connection.getLastModified();
/* 255 */         if (this.verbose) {
/* 256 */           Date t = new Date(remoteTimestamp);
/* 257 */           log(""last modified = "" + t.toString() + ((remoteTimestamp == 0L) ? "" - using current time instead"" : """"));
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 262 */         if (remoteTimestamp != 0L) {
/* 263 */           FileUtils.newFileUtils().setFileLastModified(this.dest, remoteTimestamp);
/*     */         }
/*     */       } 
/*     */     } catch (IOException ioe) {
/*     */       
/* 268 */       log(""Error getting "" + this.source + "" to "" + this.dest);
/* 269 */       if (this.ignoreErrors) {
/*     */         return;
/*     */       }
/* 272 */       throw new BuildException(ioe, getLocation());
/*     */     } 
/*     */   }
/*     */   
/*     */   static Class class$(String x0) { try {
/*     */       return Class.forName(x0);
/*     */     } catch (ClassNotFoundException x1) {
/*     */       throw new NoClassDefFoundError(x1.getMessage());
/*     */     }  }
/*     */   
/* 282 */   public void setSrc(URL u) { this.source = u; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void setVerbose(boolean v) { this.verbose = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 309 */   public void setIgnoreErrors(boolean v) { this.ignoreErrors = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setUseTimestamp(boolean v) {
/* 331 */     if (!JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 332 */       this.useTimestamp = v;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   public void setUsername(String u) { this.uname = u; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 352 */   public void setPassword(String p) { this.pword = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class Base64Converter
/*     */   {
/* 368 */     public final char[] alphabet = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 380 */     public String encode(String s) { return encode(s.getBytes()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String encode(byte[] octetString) {
/* 387 */       char[] out = new char[((octetString.length - 1) / 3 + 1) * 4];
/*     */ 
/*     */       
/* 390 */       int outIndex = 0;
/* 391 */       int i = 0;
/*     */       
/* 393 */       while (i + 3 <= octetString.length) {
/*     */         
/* 395 */         int bits24 = (octetString[i++] & 0xFF) << 16;
/* 396 */         bits24 |= (octetString[i++] & 0xFF) << 8;
/*     */         
/* 398 */         int bits6 = (bits24 & 0xFC0000) >> 18;
/* 399 */         out[outIndex++] = this.alphabet[bits6];
/* 400 */         bits6 = (bits24 & 0x3F000) >> 12;
/* 401 */         out[outIndex++] = this.alphabet[bits6];
/* 402 */         bits6 = (bits24 & 0xFC0) >> 6;
/* 403 */         out[outIndex++] = this.alphabet[bits6];
/* 404 */         bits6 = bits24 & 0x3F;
/* 405 */         out[outIndex++] = this.alphabet[bits6];
/*     */       } 
/*     */       
/* 408 */       if (octetString.length - i == 2) {
/*     */         
/* 410 */         int j = (octetString[i] & 0xFF) << 16;
/* 411 */         j |= (octetString[i + 1] & 0xFF) << 8;
/* 412 */         int k = (j & 0xFC0000) >> 18;
/* 413 */         out[outIndex++] = this.alphabet[k];
/* 414 */         k = (j & 0x3F000) >> 12;
/* 415 */         out[outIndex++] = this.alphabet[k];
/* 416 */         k = (j & 0xFC0) >> 6;
/* 417 */         out[outIndex++] = this.alphabet[k];
/*     */ 
/*     */         
/* 420 */         out[outIndex++] = '=';
/* 421 */       } else if (octetString.length - i == 1) {
/*     */         
/* 423 */         int j = (octetString[i] & 0xFF) << 16;
/* 424 */         int k = (j & 0xFC0000) >> 18;
/* 425 */         out[outIndex++] = this.alphabet[k];
/* 426 */         k = (j & 0x3F000) >> 12;
/* 427 */         out[outIndex++] = this.alphabet[k];
/*     */ 
/*     */         
/* 430 */         out[outIndex++] = '=';
/* 431 */         out[outIndex++] = '=';
/*     */       } 
/*     */       
/* 434 */       return new String(out);
/*     */     }
/*     */     
/*     */     private Base64Converter() {}
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Get.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GUnzip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.zip.GZIPInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GUnzip
/*     */   extends Unpack
/*     */ {
/*     */   private static final String DEFAULT_EXTENSION = "".gz"";
/*     */   
/*  81 */   protected String getDefaultExtension() { return "".gz""; }
/*     */ 
/*     */   
/*     */   protected void extract() {
/*  85 */     if (this.source.lastModified() > this.dest.lastModified()) {
/*  86 */       log(""Expanding "" + this.source.getAbsolutePath() + "" to "" + this.dest.getAbsolutePath());
/*     */ 
/*     */       
/*  89 */       FileOutputStream out = null;
/*  90 */       GZIPInputStream zIn = null;
/*  91 */       FileInputStream fis = null;
/*     */       try {
/*  93 */         out = new FileOutputStream(this.dest);
/*  94 */         fis = new FileInputStream(this.source);
/*  95 */         zIn = new GZIPInputStream(fis);
/*  96 */         byte[] buffer = new byte[8192];
/*  97 */         int count = 0;
/*     */         do {
/*  99 */           out.write(buffer, 0, count);
/* 100 */           count = zIn.read(buffer, 0, buffer.length);
/* 101 */         } while (count != -1);
/*     */       } catch (IOException ioe) {
/* 103 */         String msg = ""Problem expanding gzip "" + ioe.getMessage();
/* 104 */         throw new BuildException(msg, ioe, getLocation());
/*     */       } finally {
/* 106 */         if (fis != null) {
/*     */           try {
/* 108 */             fis.close();
/* 109 */           } catch (IOException ioex) {}
/*     */         }
/*     */ 
/*     */         
/* 113 */         if (out != null) {
/*     */           try {
/* 115 */             out.close();
/* 116 */           } catch (IOException ioex) {}
/*     */         }
/*     */ 
/*     */         
/* 120 */         if (zIn != null)
/*     */           try {
/* 122 */             zIn.close();
/* 123 */           } catch (IOException ioex) {} 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\GUnzip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GZip,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.util.zip.GZIPOutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class GZip
/*    */   extends Pack
/*    */ {
/*    */   protected void pack() {
/* 80 */     GZIPOutputStream zOut = null;
/*    */     try {
/* 82 */       zOut = new GZIPOutputStream(new FileOutputStream(this.zipFile));
/* 83 */       zipFile(this.source, zOut);
/*    */     } catch (IOException ioe) {
/* 85 */       String msg = ""Problem creating gzip "" + ioe.getMessage();
/* 86 */       throw new BuildException(msg, ioe, getLocation());
/*    */     } finally {
/* 88 */       if (zOut != null)
/*    */         
/*    */         try {
/* 91 */           zOut.close();
/* 92 */         } catch (IOException e) {} 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\GZip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ImportTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ImportTask
/*     */   extends Task
/*     */ {
/*     */   private String file;
/*     */   private boolean optional;
/* 100 */   private static final FileUtils FILE_UTILS = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setOptional(boolean optional) { this.optional = true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setFile(String file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 128 */     if (this.file == null) {
/* 129 */       throw new BuildException(""import requires file attribute"");
/*     */     }
/* 131 */     if (getOwningTarget() == null || !"""".equals(getOwningTarget().getName()))
/*     */     {
/* 133 */       throw new BuildException(""import only allowed as a top-level task"");
/*     */     }
/*     */     
/* 136 */     ProjectHelper helper = (ProjectHelper)getProject().getReference(""ant.projectHelper"");
/*     */     
/* 138 */     Vector importStack = helper.getImportStack();
/*     */     
/* 140 */     if (importStack.size() == 0)
/*     */     {
/*     */       
/* 143 */       throw new BuildException(""import requires support in ProjectHelper"");
/*     */     }
/*     */     
/* 146 */     if (getLocation() == null || getLocation().getFileName() == null) {
/* 147 */       throw new BuildException(""Unable to get location of import task"");
/*     */     }
/*     */     
/* 150 */     File buildFile = new File(getLocation().getFileName());
/* 151 */     buildFile = new File(buildFile.getAbsolutePath());
/*     */     
/* 153 */     getProject().log(""Importing file "" + this.file + "" from "" + buildFile.getAbsolutePath(), 3);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 159 */     File buildFileParent = new File(buildFile.getParent());
/* 160 */     File importedFile = FILE_UTILS.resolveFile(buildFileParent, this.file);
/*     */     
/* 162 */     if (!importedFile.exists()) {
/* 163 */       String message = ""Cannot find "" + this.file + "" imported from "" + buildFile.getAbsolutePath();
/*     */ 
/*     */       
/* 166 */       if (this.optional) {
/* 167 */         getProject().log(message, 3);
/*     */         return;
/*     */       } 
/* 170 */       throw new BuildException(message);
/*     */     } 
/*     */ 
/*     */     
/* 174 */     importedFile = new File(getPath(importedFile));
/*     */     
/* 176 */     if (importStack.contains(importedFile)) {
/* 177 */       getProject().log(""Skipped already imported file:\n   "" + importedFile + ""\n"", 1);
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/*     */     try {
/* 184 */       helper.parse(getProject(), importedFile);
/*     */     } catch (BuildException ex) {
/* 186 */       throw ProjectHelper.addLocationToBuildException(ex, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static String getPath(File file) {
/*     */     try {
/* 193 */       return file.getCanonicalPath();
/*     */     } catch (IOException e) {
/* 195 */       return file.getAbsolutePath();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ImportTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Input,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.input.InputRequest;
/*     */ import org.apache.tools.ant.input.MultipleChoiceInputRequest;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Input
/*     */   extends Task
/*     */ {
/*  75 */   private String validargs = null;
/*  76 */   private String message = """";
/*  77 */   private String addproperty = null;
/*  78 */   private String defaultvalue = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setValidargs(String validargs) { this.validargs = validargs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setAddproperty(String addproperty) { this.addproperty = addproperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setMessage(String message) { this.message = message; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setDefaultvalue(String defaultvalue) { this.defaultvalue = defaultvalue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void addText(String msg) { this.message += getProject().replaceProperties(msg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 141 */     if (this.addproperty != null && getProject().getProperty(this.addproperty) != null) {
/*     */       
/* 143 */       log(""skipping "" + getTaskName() + "" as property "" + this.addproperty + "" has already been set."");
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 148 */     InputRequest request = null;
/* 149 */     if (this.validargs != null) {
/* 150 */       Vector accept = StringUtils.split(this.validargs, 44);
/* 151 */       MultipleChoiceInputRequest multipleChoiceInputRequest = new MultipleChoiceInputRequest(this.message, accept);
/*     */     } else {
/* 153 */       request = new InputRequest(this.message);
/*     */     } 
/*     */     
/* 156 */     getProject().getInputHandler().handleInput(request);
/*     */     
/* 158 */     String value = request.getInput();
/* 159 */     if ((value == null || value.trim().length() == 0) && this.defaultvalue != null)
/*     */     {
/* 161 */       value = this.defaultvalue;
/*     */     }
/* 163 */     if (this.addproperty != null && value != null)
/* 164 */       getProject().setNewProperty(this.addproperty, value); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Input.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.Reader;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jar
/*     */   extends Zip
/*     */ {
/*     */   private static final String INDEX_NAME = ""META-INF/INDEX.LIST"";
/*     */   private static final String MANIFEST_NAME = ""META-INF/MANIFEST.MF"";
/*     */   private Manifest configuredManifest;
/*     */   private Manifest savedConfiguredManifest;
/*     */   private Manifest filesetManifest;
/*     */   private Manifest originalManifest;
/*     */   private FilesetManifestConfig filesetManifestConfig;
/*     */   private boolean mergeManifestsMain = true;
/*     */   private Manifest manifest;
/*     */   private String manifestEncoding;
/*     */   private File manifestFile;
/*     */   private boolean index = false;
/*     */   private boolean createEmpty = false;
/*     */   private Vector rootEntries;
/*     */   
/*     */   public Jar() {
/* 162 */     this.archiveType = ""jar"";
/* 163 */     this.emptyBehavior = ""create"";
/* 164 */     setEncoding(""UTF8"");
/* 165 */     this.rootEntries = new Vector();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setWhenempty(Zip.WhenEmpty we) { log(""JARs are never empty, they contain at least a manifest file"", 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setJarfile(File jarFile) { setDestFile(jarFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setIndex(boolean flag) { this.index = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setManifestEncoding(String manifestEncoding) { this.manifestEncoding = manifestEncoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredManifest(Manifest newManifest) throws ManifestException {
/* 208 */     if (this.configuredManifest == null) {
/* 209 */       this.configuredManifest = newManifest;
/*     */     } else {
/* 211 */       this.configuredManifest.merge(newManifest);
/*     */     } 
/* 213 */     this.savedConfiguredManifest = this.configuredManifest;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setManifest(File manifestFile) {
/* 224 */     if (!manifestFile.exists()) {
/* 225 */       throw new BuildException(""Manifest file: "" + manifestFile + "" does not exist."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 229 */     this.manifestFile = manifestFile;
/*     */   }
/*     */ 
/*     */   
/*     */   private Manifest getManifest(File manifestFile) {
/* 234 */     Manifest newManifest = null;
/* 235 */     FileInputStream fis = null;
/* 236 */     InputStreamReader isr = null;
/*     */     try {
/* 238 */       fis = new FileInputStream(manifestFile);
/* 239 */       if (this.manifestEncoding == null) {
/* 240 */         isr = new InputStreamReader(fis);
/*     */       } else {
/* 242 */         isr = new InputStreamReader(fis, this.manifestEncoding);
/*     */       } 
/* 244 */       newManifest = getManifest(isr);
/*     */     } catch (UnsupportedEncodingException e) {
/* 246 */       throw new BuildException(""Unsupported encoding while reading manifest: "" + e.getMessage(), e);
/*     */     } catch (IOException e) {
/*     */       
/* 249 */       throw new BuildException(""Unable to read manifest file: "" + manifestFile + "" ("" + e.getMessage() + "")"", e);
/*     */     }
/*     */     finally {
/*     */       
/* 253 */       if (isr != null) {
/*     */         try {
/* 255 */           isr.close();
/* 256 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 261 */     return newManifest;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Manifest getManifestFromJar(File jarFile) throws IOException {
/* 270 */     ZipFile zf = null;
/*     */     try {
/* 272 */       zf = new ZipFile(jarFile);
/*     */ 
/*     */ 
/*     */       
/* 276 */       Enumeration e = zf.entries();
/* 277 */       while (e.hasMoreElements()) {
/* 278 */         ZipEntry ze = e.nextElement();
/* 279 */         if (ze.getName().equalsIgnoreCase(""META-INF/MANIFEST.MF"")) {
/* 280 */           InputStreamReader isr = new InputStreamReader(zf.getInputStream(ze), ""UTF-8"");
/*     */           
/* 282 */           return getManifest(isr);
/*     */         } 
/*     */       } 
/* 285 */       return null;
/*     */     } finally {
/* 287 */       if (zf != null) {
/*     */         try {
/* 289 */           zf.close();
/* 290 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Manifest getManifest(Reader r) {
/* 299 */     Manifest newManifest = null;
/*     */     try {
/* 301 */       newManifest = new Manifest(r);
/*     */     } catch (ManifestException e) {
/* 303 */       log(""Manifest is invalid: "" + e.getMessage(), 0);
/* 304 */       throw new BuildException(""Invalid Manifest: "" + this.manifestFile, e, getLocation());
/*     */     } catch (IOException e) {
/*     */       
/* 307 */       throw new BuildException(""Unable to read manifest file ("" + e.getMessage() + "")"", e);
/*     */     } 
/*     */     
/* 310 */     return newManifest;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFilesetmanifest(FilesetManifestConfig config) {
/* 327 */     this.filesetManifestConfig = config;
/* 328 */     this.mergeManifestsMain = ""merge"".equals(config.getValue());
/*     */     
/* 330 */     if (this.filesetManifestConfig != null && !this.filesetManifestConfig.getValue().equals(""skip""))
/*     */     {
/*     */       
/* 333 */       this.doubleFilePass = true;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMetainf(ZipFileSet fs) {
/* 344 */     fs.setPrefix(""META-INF/"");
/* 345 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 351 */     if (!this.skipWriting) {
/* 352 */       Manifest jarManifest = createManifest();
/* 353 */       writeManifest(zOut, jarManifest);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private Manifest createManifest() throws BuildException {
/*     */     try {
/* 360 */       Manifest finalManifest = Manifest.getDefaultManifest();
/*     */       
/* 362 */       if (this.manifest == null && 
/* 363 */         this.manifestFile != null)
/*     */       {
/*     */         
/* 366 */         this.manifest = getManifest(this.manifestFile);
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 378 */       if (isInUpdateMode()) {
/* 379 */         finalManifest.merge(this.originalManifest);
/*     */       }
/* 381 */       finalManifest.merge(this.filesetManifest);
/* 382 */       finalManifest.merge(this.configuredManifest);
/* 383 */       finalManifest.merge(this.manifest, !this.mergeManifestsMain);
/*     */       
/* 385 */       return finalManifest;
/*     */     } catch (ManifestException e) {
/*     */       
/* 388 */       log(""Manifest is invalid: "" + e.getMessage(), 0);
/* 389 */       throw new BuildException(""Invalid Manifest"", e, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void writeManifest(ZipOutputStream zOut, Manifest manifest) throws IOException {
/* 395 */     Enumeration e = manifest.getWarnings();
/* 396 */     while (e.hasMoreElements()) {
/* 397 */       log(""Manifest warning: "" + (String)e.nextElement(), 1);
/*     */     }
/*     */ 
/*     */     
/* 401 */     zipDir(null, zOut, ""META-INF/"", 16877);
/*     */     
/* 403 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/* 404 */     OutputStreamWriter osw = new OutputStreamWriter(baos, ""UTF-8"");
/* 405 */     PrintWriter writer = new PrintWriter(osw);
/* 406 */     manifest.write(writer);
/* 407 */     writer.flush();
/*     */     
/* 409 */     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
/*     */     
/* 411 */     super.zipFile(bais, zOut, ""META-INF/MANIFEST.MF"", System.currentTimeMillis(), null, 33188);
/*     */ 
/*     */     
/* 414 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void finalizeZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 420 */     if (this.index) {
/* 421 */       createIndexList(zOut);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void createIndexList(ZipOutputStream zOut) throws IOException {
/* 436 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */     
/* 438 */     PrintWriter writer = new PrintWriter(new OutputStreamWriter(baos, ""UTF8""));
/*     */ 
/*     */ 
/*     */     
/* 442 */     writer.println(""JarIndex-Version: 1.0"");
/* 443 */     writer.println();
/*     */ 
/*     */     
/* 446 */     writer.println(this.zipFile.getName());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 451 */     Enumeration e = this.addedDirs.keys();
/* 452 */     while (e.hasMoreElements()) {
/* 453 */       String dir = e.nextElement();
/*     */ 
/*     */ 
/*     */       
/* 457 */       dir = dir.replace('\\', '/');
/* 458 */       int pos = dir.lastIndexOf('/');
/* 459 */       if (pos != -1) {
/* 460 */         dir = dir.substring(0, pos);
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 466 */       if (dir.startsWith(""META-INF"")) {
/*     */         continue;
/*     */       }
/*     */       
/* 470 */       writer.println(dir);
/*     */     } 
/*     */     
/* 473 */     e = this.rootEntries.elements();
/* 474 */     while (e.hasMoreElements()) {
/* 475 */       writer.println(e.nextElement());
/*     */     }
/*     */     
/* 478 */     writer.flush();
/* 479 */     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
/*     */     
/* 481 */     super.zipFile(bais, zOut, ""META-INF/INDEX.LIST"", System.currentTimeMillis(), null, 33188);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(InputStream is, ZipOutputStream zOut, String vPath, long lastModified, File fromArchive, int mode) throws IOException {
/* 491 */     if (""META-INF/MANIFEST.MF"".equalsIgnoreCase(vPath)) {
/* 492 */       if (!this.doubleFilePass || (this.doubleFilePass && this.skipWriting)) {
/* 493 */         filesetManifest(fromArchive, is);
/*     */       }
/* 495 */     } else if (""META-INF/INDEX.LIST"".equalsIgnoreCase(vPath) && this.index) {
/* 496 */       log(""Warning: selected "" + this.archiveType + "" files include a META-INF/INDEX.LIST which will"" + "" be replaced by a newly generated one."", 1);
/*     */     }
/*     */     else {
/*     */       
/* 500 */       if (this.index && vPath.indexOf(""/"") == -1) {
/* 501 */         this.rootEntries.addElement(vPath);
/*     */       }
/* 503 */       super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void filesetManifest(File file, InputStream is) throws IOException {
/* 508 */     if (this.manifestFile != null && this.manifestFile.equals(file)) {
/*     */ 
/*     */       
/* 511 */       log(""Found manifest "" + file, 3);
/*     */       try {
/* 513 */         if (is != null) {
/*     */           InputStreamReader inputStreamReader;
/* 515 */           if (this.manifestEncoding == null) {
/* 516 */             inputStreamReader = new InputStreamReader(is);
/*     */           } else {
/* 518 */             inputStreamReader = new InputStreamReader(is, this.manifestEncoding);
/*     */           } 
/* 520 */           this.manifest = getManifest(inputStreamReader);
/*     */         } else {
/* 522 */           this.manifest = getManifest(file);
/*     */         } 
/*     */       } catch (UnsupportedEncodingException e) {
/* 525 */         throw new BuildException(""Unsupported encoding while reading manifest: "" + e.getMessage(), e);
/*     */       }
/*     */     
/* 528 */     } else if (this.filesetManifestConfig != null && !this.filesetManifestConfig.getValue().equals(""skip"")) {
/*     */ 
/*     */       
/* 531 */       log(""Found manifest to merge in file "" + file, 3);
/*     */ 
/*     */       
/*     */       try {
/* 535 */         Manifest newManifest = null;
/* 536 */         if (is != null) {
/*     */           InputStreamReader inputStreamReader;
/* 538 */           if (this.manifestEncoding == null) {
/* 539 */             inputStreamReader = new InputStreamReader(is);
/*     */           } else {
/* 541 */             inputStreamReader = new InputStreamReader(is, this.manifestEncoding);
/*     */           } 
/* 543 */           newManifest = getManifest(inputStreamReader);
/*     */         } else {
/* 545 */           newManifest = getManifest(file);
/*     */         } 
/*     */         
/* 548 */         if (this.filesetManifest == null) {
/* 549 */           this.filesetManifest = newManifest;
/*     */         } else {
/* 551 */           this.filesetManifest.merge(newManifest);
/*     */         } 
/*     */       } catch (UnsupportedEncodingException e) {
/* 554 */         throw new BuildException(""Unsupported encoding while reading manifest: "" + e.getMessage(), e);
/*     */       } catch (ManifestException e) {
/*     */         
/* 557 */         log(""Manifest in file "" + file + "" is invalid: "" + e.getMessage(), 0);
/*     */         
/* 559 */         throw new BuildException(""Invalid Manifest"", e, getLocation());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Zip.ArchiveState getResourcesToAdd(FileSet[] filesets, File zipFile, boolean needsUpdate) throws BuildException {
/* 607 */     if (zipFile.exists()) {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 612 */         this.originalManifest = getManifestFromJar(zipFile);
/* 613 */         if (this.originalManifest == null) {
/* 614 */           log(""Updating jar since the current jar has no manifest"", 3);
/*     */           
/* 616 */           needsUpdate = true;
/*     */         } else {
/* 618 */           Manifest mf = createManifest();
/* 619 */           if (!mf.equals(this.originalManifest)) {
/* 620 */             log(""Updating jar since jar manifest has changed"", 3);
/*     */             
/* 622 */             needsUpdate = true;
/*     */           } 
/*     */         } 
/*     */       } catch (Throwable t) {
/* 626 */         log(""error while reading original manifest: "" + t.getMessage(), 1);
/*     */         
/* 628 */         needsUpdate = true;
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 633 */       needsUpdate = true;
/*     */     } 
/*     */     
/* 636 */     this.createEmpty = needsUpdate;
/* 637 */     return super.getResourcesToAdd(filesets, zipFile, needsUpdate);
/*     */   }
/*     */   
/*     */   protected boolean createEmptyZip(File zipFile) throws BuildException {
/* 641 */     if (!this.createEmpty) {
/* 642 */       return true;
/*     */     }
/*     */     
/* 645 */     ZipOutputStream zOut = null;
/*     */     try {
/* 647 */       log(""Building MANIFEST-only jar: "" + getDestFile().getAbsolutePath());
/*     */       
/* 649 */       zOut = new ZipOutputStream(new FileOutputStream(getDestFile()));
/*     */       
/* 651 */       zOut.setEncoding(getEncoding());
/* 652 */       if (isCompress()) {
/* 653 */         zOut.setMethod(8);
/*     */       } else {
/* 655 */         zOut.setMethod(0);
/*     */       } 
/* 657 */       initZipOutputStream(zOut);
/* 658 */       finalizeZipOutputStream(zOut);
/*     */     } catch (IOException ioe) {
/* 660 */       throw new BuildException(""Could not create almost empty JAR archive ("" + ioe.getMessage() + "")"", ioe, getLocation());
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 666 */         if (zOut != null) {
/* 667 */           zOut.close();
/*     */         }
/* 669 */       } catch (IOException ex) {}
/*     */       
/* 671 */       this.createEmpty = false;
/*     */     } 
/* 673 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 683 */     super.cleanUp();
/*     */ 
/*     */     
/* 686 */     if (!this.doubleFilePass || (this.doubleFilePass && !this.skipWriting)) {
/* 687 */       this.manifest = null;
/* 688 */       this.configuredManifest = this.savedConfiguredManifest;
/* 689 */       this.filesetManifest = null;
/* 690 */       this.originalManifest = null;
/*     */     } 
/* 692 */     this.rootEntries.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {
/* 703 */     super.reset();
/* 704 */     this.configuredManifest = null;
/* 705 */     this.filesetManifestConfig = null;
/* 706 */     this.mergeManifestsMain = false;
/* 707 */     this.manifestFile = null;
/* 708 */     this.index = false;
/*     */   }
/*     */   
/*     */   public static class FilesetManifestConfig
/*     */     extends EnumeratedAttribute {
/* 713 */     public String[] getValues() { return new String[] { ""skip"", ""merge"", ""mergewithoutmain"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Jar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Java,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ExitException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Assertions;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Permissions;
/*     */ import org.apache.tools.ant.types.PropertySet;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Java
/*     */   extends Task
/*     */ {
/*  90 */   private CommandlineJava cmdl = new CommandlineJava();
/*  91 */   private Environment env = new Environment();
/*     */   private boolean fork = false;
/*     */   private boolean newEnvironment = false;
/*  94 */   private File dir = null;
/*     */   private boolean failOnError = false;
/*     */   private boolean append = false;
/*  97 */   private Long timeout = null;
/*  98 */   private Redirector redirector = new Redirector(this);
/*     */   private String resultProperty;
/* 100 */   private Permissions perm = null;
/*     */ 
/*     */   
/*     */   private boolean spawn = false;
/*     */ 
/*     */   
/*     */   private boolean incompatibleWithSpawn = false;
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 110 */     File savedDir = this.dir;
/* 111 */     Permissions savedPermissions = this.perm;
/*     */     
/* 113 */     int err = -1;
/*     */     try {
/* 115 */       err = executeJava();
/* 116 */       if (err != 0) {
/* 117 */         if (this.failOnError) {
/* 118 */           throw new BuildException(""Java returned: "" + err, getLocation());
/*     */         }
/* 120 */         log(""Java Result: "" + err, 0);
/*     */       } 
/*     */       
/* 123 */       maybeSetResultPropertyValue(err);
/*     */     } finally {
/* 125 */       this.dir = savedDir;
/* 126 */       this.perm = savedPermissions;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int executeJava() throws BuildException {
/* 139 */     String classname = this.cmdl.getClassname();
/* 140 */     if (classname == null && this.cmdl.getJar() == null) {
/* 141 */       throw new BuildException(""Classname must not be null."");
/*     */     }
/*     */     
/* 144 */     if (!this.fork && this.cmdl.getJar() != null) {
/* 145 */       throw new BuildException(""Cannot execute a jar in non-forked mode. Please set fork='true'. "");
/*     */     }
/*     */     
/* 148 */     if (this.spawn && !this.fork) {
/* 149 */       throw new BuildException(""Cannot spawn a java process in non-forked mode. Please set fork='true'. "");
/*     */     }
/*     */     
/* 152 */     if (this.spawn && this.incompatibleWithSpawn) {
/* 153 */       getProject().log(""spawn does not allow attributes related to input, output, error, result"", 0);
/*     */       
/* 155 */       getProject().log(""spawn does not also not allow timeout"", 0);
/* 156 */       throw new BuildException(""You have used an attribute which is not compatible with spawn"");
/*     */     } 
/*     */     
/* 159 */     if (this.cmdl.getAssertions() != null && !this.fork) {
/* 160 */       log(""Assertion statements are currently ignored in non-forked mode"");
/*     */     }
/*     */     
/* 163 */     if (this.fork) {
/* 164 */       if (this.perm != null) {
/* 165 */         log(""Permissions can not be set this way in forked mode."", 1);
/*     */       }
/* 167 */       log(this.cmdl.describeCommand(), 3);
/*     */     } else {
/* 169 */       if (this.cmdl.getVmCommand().size() > 1) {
/* 170 */         log(""JVM args ignored when same JVM is used."", 1);
/*     */       }
/*     */       
/* 173 */       if (this.dir != null) {
/* 174 */         log(""Working directory ignored when same JVM is used."", 1);
/*     */       }
/*     */ 
/*     */       
/* 178 */       if (this.newEnvironment || null != this.env.getVariables()) {
/* 179 */         log(""Changes to environment variables are ignored when same JVM is used."", 1);
/*     */       }
/*     */ 
/*     */       
/* 183 */       if (this.cmdl.getBootclasspath() != null) {
/* 184 */         log(""bootclasspath ignored when same JVM is used."", 1);
/*     */       }
/*     */       
/* 187 */       if (this.perm == null && this.failOnError == true) {
/* 188 */         this.perm = new Permissions(true);
/* 189 */         log(""running "" + this.cmdl.getClassname() + "" with default permissions (exit forbidden)"", 3);
/*     */       } 
/*     */       
/* 192 */       log(""Running in same VM "" + this.cmdl.describeJavaCommand(), 3);
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 197 */       if (this.fork) {
/* 198 */         if (!this.spawn) {
/* 199 */           return fork(this.cmdl.getCommandline());
/*     */         }
/* 201 */         spawn(this.cmdl.getCommandline());
/* 202 */         return 0;
/*     */       } 
/*     */       
/*     */       try {
/* 206 */         run(this.cmdl);
/* 207 */         return 0;
/*     */       } catch (ExitException ex) {
/* 209 */         return ex.getStatus();
/*     */       } 
/*     */     } catch (BuildException e) {
/*     */       
/* 213 */       if (this.failOnError) {
/* 214 */         throw e;
/*     */       }
/* 216 */       log(e.getMessage(), 0);
/* 217 */       return 0;
/*     */     } catch (Throwable t) {
/*     */       
/* 220 */       if (this.failOnError) {
/* 221 */         throw new BuildException(t);
/*     */       }
/* 223 */       log(t.getMessage(), 0);
/* 224 */       return 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 236 */   public void setSpawn(boolean spawn) { this.spawn = spawn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void setClasspath(Path s) { createClasspath().append(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public Path createClasspath() { return this.cmdl.createClasspath(getProject()).createPath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 264 */   public Path createBootclasspath() { return this.cmdl.createBootclasspath(getProject()).createPath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Permissions createPermissions() {
/* 273 */     if (this.perm == null) {
/* 274 */       this.perm = new Permissions();
/*     */     }
/* 276 */     return this.perm;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 285 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(File jarfile) throws BuildException {
/* 296 */     if (this.cmdl.getClassname() != null) {
/* 297 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command."");
/*     */     }
/*     */     
/* 300 */     this.cmdl.setJar(jarfile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String s) throws BuildException {
/* 311 */     if (this.cmdl.getJar() != null) {
/* 312 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command"");
/*     */     }
/*     */     
/* 315 */     this.cmdl.setClassname(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setArgs(String s) {
/* 327 */     log(""The args attribute is deprecated. Please use nested arg elements."", 1);
/*     */     
/* 329 */     this.cmdl.createArgument().setLine(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 338 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 350 */   public void setResultProperty(String resultProperty) { this.resultProperty = resultProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void maybeSetResultPropertyValue(int result) {
/* 360 */     String res = Integer.toString(result);
/* 361 */     if (this.resultProperty != null) {
/* 362 */       getProject().setNewProperty(this.resultProperty, res);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 372 */   public void setFork(boolean s) { this.fork = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJvmargs(String s) {
/* 381 */     log(""The jvmargs attribute is deprecated. Please use nested jvmarg elements."", 1);
/*     */     
/* 383 */     this.cmdl.createVmArgument().setLine(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 392 */   public Commandline.Argument createJvmarg() { return this.cmdl.createVmArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 401 */   public void setJvm(String s) { this.cmdl.setVm(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 410 */   public void addSysproperty(Environment.Variable sysp) { this.cmdl.addSysproperty(sysp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 421 */   public void addSyspropertyset(PropertySet sysp) { this.cmdl.addSyspropertyset(sysp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFailonerror(boolean fail) {
/* 432 */     this.failOnError = fail;
/* 433 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 443 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutput(File out) {
/* 452 */     this.redirector.setOutput(out);
/* 453 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setInput(File input) {
/* 462 */     this.redirector.setInput(input);
/* 463 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setInputString(String inputString) {
/* 472 */     this.redirector.setInputString(inputString);
/* 473 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLogError(boolean logError) {
/* 485 */     this.redirector.setLogError(logError);
/* 486 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setError(File error) {
/* 497 */     this.redirector.setError(error);
/* 498 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutputproperty(String outputProp) {
/* 509 */     this.redirector.setOutputProperty(outputProp);
/* 510 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setErrorProperty(String errorProperty) {
/* 522 */     this.redirector.setErrorProperty(errorProperty);
/* 523 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 532 */   public void setMaxmemory(String max) { this.cmdl.setMaxmemory(max); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 540 */   public void setJVMVersion(String value) { this.cmdl.setVmversion(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 553 */   public void addEnv(Environment.Variable var) { this.env.addVariable(var); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 566 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAppend(boolean append) {
/* 577 */     this.append = append;
/* 578 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTimeout(Long value) {
/* 589 */     this.timeout = value;
/* 590 */     this.incompatibleWithSpawn = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addAssertions(Assertions asserts) {
/* 599 */     if (this.cmdl.getAssertions() != null) {
/* 600 */       throw new BuildException(""Only one assertion declaration is allowed"");
/*     */     }
/* 602 */     this.cmdl.setAssertions(asserts);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String output) {
/* 613 */     if (this.redirector.getOutputStream() != null) {
/* 614 */       this.redirector.handleOutput(output);
/*     */     } else {
/* 616 */       super.handleOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int handleInput(byte[] buffer, int offset, int length) throws IOException {
/* 634 */     if (this.redirector.getInputStream() != null) {
/* 635 */       return this.redirector.handleInput(buffer, offset, length);
/*     */     }
/* 637 */     return super.handleInput(buffer, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleFlush(String output) {
/* 649 */     if (this.redirector.getOutputStream() != null) {
/* 650 */       this.redirector.handleFlush(output);
/*     */     } else {
/* 652 */       super.handleFlush(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String output) {
/* 664 */     if (this.redirector.getErrorStream() != null) {
/* 665 */       this.redirector.handleErrorOutput(output);
/*     */     } else {
/* 667 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorFlush(String output) {
/* 679 */     if (this.redirector.getErrorStream() != null) {
/* 680 */       this.redirector.handleErrorFlush(output);
/*     */     } else {
/* 682 */       super.handleErrorOutput(output);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void run(CommandlineJava command) throws BuildException {
/*     */     try {
/* 692 */       ExecuteJava exe = new ExecuteJava();
/* 693 */       exe.setJavaCommand(command.getJavaCommand());
/* 694 */       exe.setClasspath(command.getClasspath());
/* 695 */       exe.setSystemProperties(command.getSystemProperties());
/* 696 */       exe.setPermissions(this.perm);
/* 697 */       exe.setTimeout(this.timeout);
/* 698 */       this.redirector.createStreams();
/* 699 */       exe.execute(getProject());
/* 700 */       this.redirector.complete();
/* 701 */       if (exe.killedProcess()) {
/* 702 */         throw new BuildException(""Timeout: killed the sub-process"");
/*     */       }
/*     */     } catch (IOException e) {
/* 705 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int fork(String[] command) throws BuildException {
/* 714 */     Execute exe = new Execute(this.redirector.createHandler(), createWatchdog());
/*     */     
/* 716 */     exe.setAntRun(getProject());
/*     */     
/* 718 */     if (this.dir == null) {
/* 719 */       this.dir = getProject().getBaseDir();
/* 720 */     } else if (!this.dir.exists() || !this.dir.isDirectory()) {
/* 721 */       throw new BuildException(this.dir.getAbsolutePath() + "" is not a valid directory"", getLocation());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 726 */     exe.setWorkingDirectory(this.dir);
/*     */     
/* 728 */     String[] environment = this.env.getVariables();
/* 729 */     if (environment != null) {
/* 730 */       for (int i = 0; i < environment.length; i++) {
/* 731 */         log(""Setting environment variable: "" + environment[i], 3);
/*     */       }
/*     */     }
/*     */     
/* 735 */     exe.setNewenvironment(this.newEnvironment);
/* 736 */     exe.setEnvironment(environment);
/*     */     
/* 738 */     exe.setCommandline(command);
/*     */     try {
/* 740 */       int rc = exe.execute();
/* 741 */       this.redirector.complete();
/* 742 */       if (exe.killedProcess()) {
/* 743 */         throw new BuildException(""Timeout: killed the sub-process"");
/*     */       }
/* 745 */       return rc;
/*     */     } catch (IOException e) {
/* 747 */       throw new BuildException(e, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void spawn(String[] command) throws BuildException {
/* 756 */     Execute exe = new Execute();
/*     */     
/* 758 */     exe.setAntRun(getProject());
/*     */     
/* 760 */     if (this.dir == null) {
/* 761 */       this.dir = getProject().getBaseDir();
/* 762 */     } else if (!this.dir.exists() || !this.dir.isDirectory()) {
/* 763 */       throw new BuildException(this.dir.getAbsolutePath() + "" is not a valid directory"", getLocation());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 768 */     exe.setWorkingDirectory(this.dir);
/*     */     
/* 770 */     String[] environment = this.env.getVariables();
/* 771 */     if (environment != null) {
/* 772 */       for (int i = 0; i < environment.length; i++) {
/* 773 */         log(""Setting environment variable: "" + environment[i], 3);
/*     */       }
/*     */     }
/*     */     
/* 777 */     exe.setNewenvironment(this.newEnvironment);
/* 778 */     exe.setEnvironment(environment);
/*     */     
/* 780 */     exe.setCommandline(command);
/*     */     try {
/* 782 */       exe.spawn();
/*     */     } catch (IOException e) {
/* 784 */       throw new BuildException(e, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void run(String classname, Vector args) throws BuildException {
/* 796 */     CommandlineJava cmdj = new CommandlineJava();
/* 797 */     cmdj.setClassname(classname);
/* 798 */     for (int i = 0; i < args.size(); i++) {
/* 799 */       cmdj.createArgument().setValue(args.elementAt(i));
/*     */     }
/* 801 */     run(cmdj);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 808 */   public void clearArgs() { this.cmdl.clearJavaArgs(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteWatchdog createWatchdog() throws BuildException {
/* 821 */     if (this.timeout == null) {
/* 822 */       return null;
/*     */     }
/* 824 */     return new ExecuteWatchdog(this.timeout.longValue());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Java.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javac,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.GlobPatternMapper;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.ant.util.facade.FacadeTaskHelper;
/*     */ import org.apache.tools.ant.util.facade.ImplementationSpecificArgument;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Compile failed; see the compiler error output for details."";
/*     */   private Path src;
/*     */   private File destDir;
/*     */   private Path compileClasspath;
/*     */   private Path compileSourcepath;
/*     */   private String encoding;
/*     */   private boolean debug = false;
/*     */   private boolean optimize = false;
/*     */   private boolean deprecation = false;
/*     */   private boolean depend = false;
/*     */   private boolean verbose = false;
/*     */   private String target;
/*     */   private Path bootclasspath;
/*     */   private Path extdirs;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/*     */   private boolean fork = false;
/* 132 */   private String forkedExecutable = null;
/*     */   private boolean nowarn = false;
/*     */   private String memoryInitialSize;
/*     */   private String memoryMaximumSize;
/* 136 */   private FacadeTaskHelper facade = null;
/*     */   
/*     */   protected boolean failOnError = true;
/*     */   protected boolean listFiles = false;
/* 140 */   protected File[] compileList = new File[0];
/*     */   
/*     */   private String source;
/*     */   
/*     */   private String debugLevel;
/*     */   
/*     */   private File tmpDir;
/*     */ 
/*     */   
/*     */   public Javac() {
/* 150 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 151 */       this.facade = new FacadeTaskHelper(""javac1.1"");
/* 152 */     } else if (JavaEnvUtils.isJavaVersion(""1.2"")) {
/* 153 */       this.facade = new FacadeTaskHelper(""javac1.2"");
/* 154 */     } else if (JavaEnvUtils.isJavaVersion(""1.3"")) {
/* 155 */       this.facade = new FacadeTaskHelper(""javac1.3"");
/* 156 */     } else if (JavaEnvUtils.isJavaVersion(""1.4"")) {
/* 157 */       this.facade = new FacadeTaskHelper(""javac1.4"");
/*     */     } else {
/* 159 */       this.facade = new FacadeTaskHelper(""classic"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public String getDebugLevel() { return this.debugLevel; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setDebugLevel(String v) { this.debugLevel = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public String getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setSource(String v) { this.source = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createSrc() {
/* 216 */     if (this.src == null) {
/* 217 */       this.src = new Path(getProject());
/*     */     }
/* 219 */     return this.src.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path recreateSrc() {
/* 228 */     this.src = null;
/* 229 */     return createSrc();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrcdir(Path srcDir) {
/* 237 */     if (this.src == null) {
/* 238 */       this.src = srcDir;
/*     */     } else {
/* 240 */       this.src.append(srcDir);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public Path getSrcdir() { return this.src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setDestdir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   public File getDestdir() { return this.destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSourcepath(Path sourcepath) {
/* 275 */     if (this.compileSourcepath == null) {
/* 276 */       this.compileSourcepath = sourcepath;
/*     */     } else {
/* 278 */       this.compileSourcepath.append(sourcepath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public Path getSourcepath() { return this.compileSourcepath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createSourcepath() {
/* 295 */     if (this.compileSourcepath == null) {
/* 296 */       this.compileSourcepath = new Path(getProject());
/*     */     }
/* 298 */     return this.compileSourcepath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void setSourcepathRef(Reference r) { createSourcepath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 315 */     if (this.compileClasspath == null) {
/* 316 */       this.compileClasspath = classpath;
/*     */     } else {
/* 318 */       this.compileClasspath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 327 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 335 */     if (this.compileClasspath == null) {
/* 336 */       this.compileClasspath = new Path(getProject());
/*     */     }
/* 338 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 346 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBootclasspath(Path bootclasspath) {
/* 356 */     if (this.bootclasspath == null) {
/* 357 */       this.bootclasspath = bootclasspath;
/*     */     } else {
/* 359 */       this.bootclasspath.append(bootclasspath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 369 */   public Path getBootclasspath() { return this.bootclasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createBootclasspath() {
/* 377 */     if (this.bootclasspath == null) {
/* 378 */       this.bootclasspath = new Path(getProject());
/*     */     }
/* 380 */     return this.bootclasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 388 */   public void setBootClasspathRef(Reference r) { createBootclasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path extdirs) {
/* 397 */     if (this.extdirs == null) {
/* 398 */       this.extdirs = extdirs;
/*     */     } else {
/* 400 */       this.extdirs.append(extdirs);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 410 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 418 */     if (this.extdirs == null) {
/* 419 */       this.extdirs = new Path(getProject());
/*     */     }
/* 421 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 429 */   public void setListfiles(boolean list) { this.listFiles = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 437 */   public boolean getListfiles() { return this.listFiles; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 446 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 454 */   public void setProceed(boolean proceed) { this.failOnError = !proceed; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 462 */   public boolean getFailonerror() { return this.failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 471 */   public void setDeprecation(boolean deprecation) { this.deprecation = deprecation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 479 */   public boolean getDeprecation() { return this.deprecation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 490 */   public void setMemoryInitialSize(String memoryInitialSize) { this.memoryInitialSize = memoryInitialSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 498 */   public String getMemoryInitialSize() { return this.memoryInitialSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 509 */   public void setMemoryMaximumSize(String memoryMaximumSize) { this.memoryMaximumSize = memoryMaximumSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 517 */   public String getMemoryMaximumSize() { return this.memoryMaximumSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 525 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 533 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 542 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 550 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 558 */   public void setOptimize(boolean optimize) { this.optimize = optimize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 566 */   public boolean getOptimize() { return this.optimize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 575 */   public void setDepend(boolean depend) { this.depend = depend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 583 */   public boolean getDepend() { return this.depend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 591 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 599 */   public boolean getVerbose() { return this.verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 609 */   public void setTarget(String target) { this.target = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 617 */   public String getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 625 */   public void setIncludeantruntime(boolean include) { this.includeAntRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 633 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 641 */   public void setIncludejavaruntime(boolean include) { this.includeJavaRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 650 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 659 */   public void setFork(boolean f) { this.fork = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 670 */   public void setExecutable(String forkExec) { this.forkedExecutable = forkExec; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 680 */   public String getExecutable() { return this.forkedExecutable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 688 */   public boolean isForkedJavac() { return (this.fork || ""extJavac"".equals(getCompiler())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getJavacExecutable() {
/* 704 */     if (this.forkedExecutable == null && isForkedJavac()) {
/* 705 */       this.forkedExecutable = getSystemJavac();
/* 706 */     } else if (this.forkedExecutable != null && !isForkedJavac()) {
/* 707 */       this.forkedExecutable = null;
/*     */     } 
/* 709 */     return this.forkedExecutable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 717 */   public void setNowarn(boolean flag) { this.nowarn = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 725 */   public boolean getNowarn() { return this.nowarn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ImplementationSpecificArgument createCompilerArg() {
/* 733 */     ImplementationSpecificArgument arg = new ImplementationSpecificArgument(this);
/*     */     
/* 735 */     this.facade.addImplementationArgument(arg);
/* 736 */     return arg;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCurrentCompilerArgs() {
/* 744 */     String chosen = this.facade.getExplicitChoice();
/*     */     
/* 746 */     this.facade.setImplementation(getCompiler());
/*     */     try {
/* 748 */       return this.facade.getArgs();
/*     */     } finally {
/* 750 */       this.facade.setImplementation(chosen);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 761 */   public void setTempdir(File tmpDir) { this.tmpDir = tmpDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 771 */   public File getTempdir() { return this.tmpDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 779 */     checkParameters();
/* 780 */     resetFileLists();
/*     */ 
/*     */ 
/*     */     
/* 784 */     String[] list = this.src.list();
/* 785 */     for (int i = 0; i < list.length; i++) {
/* 786 */       File srcDir = getProject().resolveFile(list[i]);
/* 787 */       if (!srcDir.exists()) {
/* 788 */         throw new BuildException(""srcdir \"""" + srcDir.getPath() + ""\"" does not exist!"", getLocation());
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 793 */       DirectoryScanner ds = getDirectoryScanner(srcDir);
/* 794 */       String[] files = ds.getIncludedFiles();
/*     */       
/* 796 */       scanDir(srcDir, (this.destDir != null) ? this.destDir : srcDir, files);
/*     */     } 
/*     */     
/* 799 */     compile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 806 */   protected void resetFileLists() { this.compileList = new File[0]; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File srcDir, File destDir, String[] files) {
/* 818 */     GlobPatternMapper m = new GlobPatternMapper();
/* 819 */     m.setFrom(""*.java"");
/* 820 */     m.setTo(""*.class"");
/* 821 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 822 */     File[] newFiles = sfs.restrictAsFiles(files, srcDir, destDir, (FileNameMapper)m);
/*     */     
/* 824 */     if (newFiles.length > 0) {
/* 825 */       File[] newCompileList = new File[this.compileList.length + newFiles.length];
/*     */       
/* 827 */       System.arraycopy(this.compileList, 0, newCompileList, 0, this.compileList.length);
/*     */       
/* 829 */       System.arraycopy(newFiles, 0, newCompileList, this.compileList.length, newFiles.length);
/*     */       
/* 831 */       this.compileList = newCompileList;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 840 */   public File[] getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 851 */   protected boolean isJdkCompiler(String compilerImpl) { return (""modern"".equals(compilerImpl) || ""classic"".equals(compilerImpl) || ""javac1.1"".equals(compilerImpl) || ""javac1.2"".equals(compilerImpl) || ""javac1.3"".equals(compilerImpl) || ""javac1.4"".equals(compilerImpl)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 863 */   protected String getSystemJavac() { return JavaEnvUtils.getJdkExecutable(""javac""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 872 */   public void setCompiler(String compiler) { this.facade.setImplementation(compiler); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompiler() {
/* 890 */     String compilerImpl = getCompilerVersion();
/* 891 */     if (this.fork) {
/* 892 */       if (isJdkCompiler(compilerImpl)) {
/* 893 */         if (this.facade.hasBeenSet()) {
/* 894 */           log(""Since fork is true, ignoring compiler setting."", 1);
/*     */         }
/*     */         
/* 897 */         compilerImpl = ""extJavac"";
/*     */       } else {
/* 899 */         log(""Since compiler setting isn't classic or modern,ignoring fork setting."", 1);
/*     */       } 
/*     */     }
/*     */     
/* 903 */     return compilerImpl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompilerVersion() {
/* 920 */     this.facade.setMagicValue(getProject().getProperty(""build.compiler""));
/* 921 */     return this.facade.getImplementation();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkParameters() throws BuildException {
/* 932 */     if (this.src == null) {
/* 933 */       throw new BuildException(""srcdir attribute must be set!"", getLocation());
/*     */     }
/*     */     
/* 936 */     if (this.src.size() == 0) {
/* 937 */       throw new BuildException(""srcdir attribute must be set!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 941 */     if (this.destDir != null && !this.destDir.isDirectory()) {
/* 942 */       throw new BuildException(""destination directory \"""" + this.destDir + ""\"" does not exist "" + ""or is not a directory"", getLocation());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void compile() {
/* 955 */     String compilerImpl = getCompiler();
/*     */     
/* 957 */     if (this.compileList.length > 0) {
/* 958 */       log(""Compiling "" + this.compileList.length + "" source file"" + ((this.compileList.length == 1) ? """" : ""s"") + ((this.destDir != null) ? ("" to "" + this.destDir) : """"));
/*     */ 
/*     */ 
/*     */       
/* 962 */       if (this.listFiles) {
/* 963 */         for (int i = 0; i < this.compileList.length; i++) {
/* 964 */           String filename = this.compileList[i].getAbsolutePath();
/* 965 */           log(filename);
/*     */         } 
/*     */       }
/*     */       
/* 969 */       CompilerAdapter adapter = CompilerAdapterFactory.getCompiler(compilerImpl, this);
/*     */ 
/*     */ 
/*     */       
/* 973 */       adapter.setJavac(this);
/*     */ 
/*     */       
/* 976 */       if (!adapter.execute()) {
/* 977 */         if (this.failOnError) {
/* 978 */           throw new BuildException(""Compile failed; see the compiler error output for details."", getLocation());
/*     */         }
/* 980 */         log(""Compile failed; see the compiler error output for details."", 0);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public class ImplementationSpecificArgument
/*     */     extends ImplementationSpecificArgument
/*     */   {
/*     */     private final Javac this$0;
/*     */     
/* 991 */     public ImplementationSpecificArgument(Javac this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 998 */     public void setCompiler(String impl) { setImplementation(impl); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Javac.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javadoc,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.File;
/*      */ import java.io.FileReader;
/*      */ import java.io.FileWriter;
/*      */ import java.io.FilenameFilter;
/*      */ import java.io.IOException;
/*      */ import java.io.PrintWriter;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Locale;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.ProjectComponent;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.types.Commandline;
/*      */ import org.apache.tools.ant.types.DirSet;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.types.FileSet;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.types.PatternSet;
/*      */ import org.apache.tools.ant.types.Reference;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Javadoc
/*      */   extends Task
/*      */ {
/*      */   public class DocletParam
/*      */   {
/*      */     private String name;
/*      */     private String value;
/*      */     private final Javadoc this$0;
/*      */     
/*  120 */     public DocletParam(Javadoc this$0) { this.this$0 = this$0; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  133 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  142 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  154 */     public void setValue(String value) { this.value = value; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  163 */     public String getValue() { return this.value; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class ExtensionInfo
/*      */     extends ProjectComponent
/*      */   {
/*      */     private String name;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Path path;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  186 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  195 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setPath(Path path) {
/*  204 */       if (this.path == null) {
/*  205 */         this.path = path;
/*      */       } else {
/*  207 */         this.path.append(path);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  218 */     public Path getPath() { return this.path; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Path createPath() {
/*  228 */       if (this.path == null) {
/*  229 */         this.path = new Path(getProject());
/*      */       }
/*  231 */       return this.path.createPath();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  240 */     public void setPathRef(Reference r) { createPath().setRefid(r); }
/*      */   }
/*      */   
/*      */   public class DocletInfo
/*      */     extends ExtensionInfo {
/*      */     private Vector params;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public DocletInfo(Javadoc this$0) {
/*  249 */       this.this$0 = this$0;
/*      */ 
/*      */       
/*  252 */       this.params = new Vector();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Javadoc.DocletParam createParam() {
/*  260 */       Javadoc.DocletParam param = new Javadoc.DocletParam(this.this$0);
/*  261 */       this.params.addElement(param);
/*      */       
/*  263 */       return param;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  272 */     public Enumeration getParams() { return this.params.elements(); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class PackageName
/*      */   {
/*      */     private String name;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  289 */     public void setName(String name) { this.name = name.trim(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  298 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  305 */     public String toString() { return getName(); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class SourceFile
/*      */   {
/*      */     private File file;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public SourceFile() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  328 */     public SourceFile(File file) { this.file = file; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  337 */     public void setFile(File file) { this.file = file; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  346 */     public File getFile() { return this.file; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class Html
/*      */   {
/*  358 */     private StringBuffer text = new StringBuffer();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  366 */     public void addText(String t) { this.text.append(t); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  375 */     public String getText() { return this.text.substring(0); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class AccessType
/*      */     extends EnumeratedAttribute
/*      */   {
/*  390 */     public String[] getValues() { return new String[] { ""protected"", ""public"", ""package"", ""private"" }; }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  395 */   private Commandline cmd = new Commandline();
/*      */ 
/*      */   
/*  398 */   private static boolean javadoc1 = JavaEnvUtils.isJavaVersion(""1.1"");
/*      */ 
/*      */ 
/*      */   
/*  402 */   private static boolean javadoc4 = (!JavaEnvUtils.isJavaVersion(""1.1"") && !JavaEnvUtils.isJavaVersion(""1.2"") && !JavaEnvUtils.isJavaVersion(""1.3""));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addArgIf(boolean b, String arg) {
/*  415 */     if (b) {
/*  416 */       this.cmd.createArgument().setValue(arg);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void add12ArgIfNotEmpty(String key, String value) {
/*  427 */     if (!javadoc1) {
/*  428 */       if (value != null && value.length() != 0) {
/*  429 */         this.cmd.createArgument().setValue(key);
/*  430 */         this.cmd.createArgument().setValue(value);
/*      */       } else {
/*  432 */         log(""Warning: Leaving out empty argument '"" + key + ""'"", 1);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void add12ArgIf(boolean b, String arg) {
/*  446 */     if (!javadoc1 && b) {
/*  447 */       this.cmd.createArgument().setValue(arg);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean failOnError = false;
/*      */ 
/*      */   
/*  456 */   private Path sourcePath = null;
/*  457 */   private File destDir = null;
/*  458 */   private Vector sourceFiles = new Vector();
/*  459 */   private Vector packageNames = new Vector();
/*  460 */   private Vector excludePackageNames = new Vector(1);
/*      */   private boolean author = true;
/*      */   private boolean version = true;
/*  463 */   private DocletInfo doclet = null;
/*  464 */   private Path classpath = null;
/*  465 */   private Path bootclasspath = null;
/*  466 */   private String group = null;
/*  467 */   private String packageList = null;
/*  468 */   private Vector links = new Vector();
/*  469 */   private Vector groups = new Vector();
/*  470 */   private Vector tags = new Vector();
/*      */   private boolean useDefaultExcludes = true;
/*  472 */   private Html doctitle = null;
/*  473 */   private Html header = null;
/*  474 */   private Html footer = null;
/*  475 */   private Html bottom = null;
/*      */   private boolean useExternalFile = false;
/*  477 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*  478 */   private String source = null;
/*      */   
/*      */   private boolean linksource = false;
/*      */   private boolean breakiterator = false;
/*      */   private String noqualifier;
/*  483 */   private Vector fileSets = new Vector();
/*  484 */   private Vector packageSets = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setUseExternalFile(boolean b) {
/*  493 */     if (!javadoc1) {
/*  494 */       this.useExternalFile = b;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  506 */   public void setDefaultexcludes(boolean useDefaultExcludes) { this.useDefaultExcludes = useDefaultExcludes; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setMaxmemory(String max) {
/*  516 */     if (javadoc1) {
/*  517 */       this.cmd.createArgument().setValue(""-J-mx"" + max);
/*      */     } else {
/*  519 */       this.cmd.createArgument().setValue(""-J-Xmx"" + max);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  529 */   public void setAdditionalparam(String add) { this.cmd.createArgument().setLine(add); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  537 */   public Commandline.Argument createArg() { return this.cmd.createArgument(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSourcepath(Path src) {
/*  546 */     if (this.sourcePath == null) {
/*  547 */       this.sourcePath = src;
/*      */     } else {
/*  549 */       this.sourcePath.append(src);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createSourcepath() {
/*  560 */     if (this.sourcePath == null) {
/*  561 */       this.sourcePath = new Path(getProject());
/*      */     }
/*  563 */     return this.sourcePath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  572 */   public void setSourcepathRef(Reference r) { createSourcepath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDestdir(File dir) {
/*  581 */     this.destDir = dir;
/*  582 */     this.cmd.createArgument().setValue(""-d"");
/*  583 */     this.cmd.createArgument().setFile(this.destDir);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSourcefiles(String src) {
/*  592 */     StringTokenizer tok = new StringTokenizer(src, "","");
/*  593 */     while (tok.hasMoreTokens()) {
/*  594 */       String f = tok.nextToken();
/*  595 */       SourceFile sf = new SourceFile();
/*  596 */       sf.setFile(getProject().resolveFile(f.trim()));
/*  597 */       addSource(sf);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  607 */   public void addSource(SourceFile sf) { this.sourceFiles.addElement(sf); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setPackagenames(String packages) {
/*  619 */     StringTokenizer tok = new StringTokenizer(packages, "","");
/*  620 */     while (tok.hasMoreTokens()) {
/*  621 */       String p = tok.nextToken();
/*  622 */       PackageName pn = new PackageName();
/*  623 */       pn.setName(p);
/*  624 */       addPackage(pn);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  637 */   public void addPackage(PackageName pn) { this.packageNames.addElement(pn); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExcludePackageNames(String packages) {
/*  647 */     StringTokenizer tok = new StringTokenizer(packages, "","");
/*  648 */     while (tok.hasMoreTokens()) {
/*  649 */       String p = tok.nextToken();
/*  650 */       PackageName pn = new PackageName();
/*  651 */       pn.setName(p);
/*  652 */       addExcludePackage(pn);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  662 */   public void addExcludePackage(PackageName pn) { this.excludePackageNames.addElement(pn); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setOverview(File f) {
/*  672 */     if (!javadoc1) {
/*  673 */       this.cmd.createArgument().setValue(""-overview"");
/*  674 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  685 */   public void setPublic(boolean b) { addArgIf(b, ""-public""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  695 */   public void setProtected(boolean b) { addArgIf(b, ""-protected""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  705 */   public void setPackage(boolean b) { addArgIf(b, ""-package""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  715 */   public void setPrivate(boolean b) { addArgIf(b, ""-private""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  726 */   public void setAccess(AccessType at) { this.cmd.createArgument().setValue(""-"" + at.getValue()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDoclet(String docletName) {
/*  736 */     if (this.doclet == null) {
/*  737 */       this.doclet = new DocletInfo(this);
/*  738 */       this.doclet.setProject(getProject());
/*      */     } 
/*  740 */     this.doclet.setName(docletName);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocletPath(Path docletPath) {
/*  749 */     if (this.doclet == null) {
/*  750 */       this.doclet = new DocletInfo(this);
/*  751 */       this.doclet.setProject(getProject());
/*      */     } 
/*  753 */     this.doclet.setPath(docletPath);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocletPathRef(Reference r) {
/*  763 */     if (this.doclet == null) {
/*  764 */       this.doclet = new DocletInfo(this);
/*  765 */       this.doclet.setProject(getProject());
/*      */     } 
/*  767 */     this.doclet.createPath().setRefid(r);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public DocletInfo createDoclet() {
/*  776 */     this.doclet = new DocletInfo(this);
/*  777 */     return this.doclet;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  786 */   public void addTaglet(ExtensionInfo tagletInfo) { this.tags.addElement(tagletInfo); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setOld(boolean b) {
/*  798 */     if (b) {
/*  799 */       if (javadoc1) {
/*  800 */         log(""Javadoc 1.1 doesn't support the -1.1 switch"", 1);
/*      */       }
/*  802 */       else if (javadoc4) {
/*  803 */         log(""Javadoc 1.4 doesn't support the -1.1 switch anymore"", 1);
/*      */       } else {
/*      */         
/*  806 */         this.cmd.createArgument().setValue(""-1.1"");
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setClasspath(Path path) {
/*  818 */     if (this.classpath == null) {
/*  819 */       this.classpath = path;
/*      */     } else {
/*  821 */       this.classpath.append(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createClasspath() {
/*  831 */     if (this.classpath == null) {
/*  832 */       this.classpath = new Path(getProject());
/*      */     }
/*  834 */     return this.classpath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  843 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBootclasspath(Path path) {
/*  852 */     if (this.bootclasspath == null) {
/*  853 */       this.bootclasspath = path;
/*      */     } else {
/*  855 */       this.bootclasspath.append(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createBootclasspath() {
/*  865 */     if (this.bootclasspath == null) {
/*  866 */       this.bootclasspath = new Path(getProject());
/*      */     }
/*  868 */     return this.bootclasspath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  877 */   public void setBootClasspathRef(Reference r) { createBootclasspath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExtdirs(String path) {
/*  887 */     if (!javadoc1) {
/*  888 */       this.cmd.createArgument().setValue(""-extdirs"");
/*  889 */       this.cmd.createArgument().setValue(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExtdirs(Path path) {
/*  899 */     if (!javadoc1) {
/*  900 */       this.cmd.createArgument().setValue(""-extdirs"");
/*  901 */       this.cmd.createArgument().setPath(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  911 */   public void setVerbose(boolean b) { add12ArgIf(b, ""-verbose""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLocale(String locale) {
/*  920 */     if (!javadoc1) {
/*      */ 
/*      */       
/*  923 */       this.cmd.createArgument(true).setValue(locale);
/*  924 */       this.cmd.createArgument(true).setValue(""-locale"");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEncoding(String enc) {
/*  934 */     this.cmd.createArgument().setValue(""-encoding"");
/*  935 */     this.cmd.createArgument().setValue(enc);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  944 */   public void setVersion(boolean b) { this.version = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  953 */   public void setUse(boolean b) { add12ArgIf(b, ""-use""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  963 */   public void setAuthor(boolean b) { this.author = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  972 */   public void setSplitindex(boolean b) { add12ArgIf(b, ""-splitindex""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  982 */   public void setWindowtitle(String title) { add12ArgIfNotEmpty(""-windowtitle"", title); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDoctitle(String doctitle) {
/*  991 */     Html h = new Html();
/*  992 */     h.addText(doctitle);
/*  993 */     addDoctitle(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDoctitle(Html text) {
/* 1002 */     if (!javadoc1) {
/* 1003 */       this.doctitle = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setHeader(String header) {
/* 1013 */     Html h = new Html();
/* 1014 */     h.addText(header);
/* 1015 */     addHeader(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addHeader(Html text) {
/* 1024 */     if (!javadoc1) {
/* 1025 */       this.header = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setFooter(String footer) {
/* 1035 */     Html h = new Html();
/* 1036 */     h.addText(footer);
/* 1037 */     addFooter(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addFooter(Html text) {
/* 1046 */     if (!javadoc1) {
/* 1047 */       this.footer = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBottom(String bottom) {
/* 1057 */     Html h = new Html();
/* 1058 */     h.addText(bottom);
/* 1059 */     addBottom(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addBottom(Html text) {
/* 1068 */     if (!javadoc1) {
/* 1069 */       this.bottom = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLinkoffline(String src) {
/* 1080 */     if (!javadoc1) {
/* 1081 */       LinkArgument le = createLink();
/* 1082 */       le.setOffline(true);
/* 1083 */       String linkOfflineError = ""The linkoffline attribute must include a URL and a package-list file location separated by a space"";
/*      */ 
/*      */       
/* 1086 */       if (src.trim().length() == 0) {
/* 1087 */         throw new BuildException(linkOfflineError);
/*      */       }
/* 1089 */       StringTokenizer tok = new StringTokenizer(src, "" "", false);
/* 1090 */       le.setHref(tok.nextToken());
/*      */       
/* 1092 */       if (!tok.hasMoreTokens()) {
/* 1093 */         throw new BuildException(linkOfflineError);
/*      */       }
/* 1095 */       le.setPackagelistLoc(getProject().resolveFile(tok.nextToken()));
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1107 */   public void setGroup(String src) { this.group = src; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLink(String src) {
/* 1114 */     if (!javadoc1) {
/* 1115 */       createLink().setHref(src);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1125 */   public void setNodeprecated(boolean b) { addArgIf(b, ""-nodeprecated""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1134 */   public void setNodeprecatedlist(boolean b) { add12ArgIf(b, ""-nodeprecatedlist""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1143 */   public void setNotree(boolean b) { addArgIf(b, ""-notree""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1152 */   public void setNoindex(boolean b) { addArgIf(b, ""-noindex""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1161 */   public void setNohelp(boolean b) { add12ArgIf(b, ""-nohelp""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1170 */   public void setNonavbar(boolean b) { add12ArgIf(b, ""-nonavbar""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1179 */   public void setSerialwarn(boolean b) { add12ArgIf(b, ""-serialwarn""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setStylesheetfile(File f) {
/* 1188 */     if (!javadoc1) {
/* 1189 */       this.cmd.createArgument().setValue(""-stylesheetfile"");
/* 1190 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setHelpfile(File f) {
/* 1200 */     if (!javadoc1) {
/* 1201 */       this.cmd.createArgument().setValue(""-helpfile"");
/* 1202 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocencoding(String enc) {
/* 1212 */     this.cmd.createArgument().setValue(""-docencoding"");
/* 1213 */     this.cmd.createArgument().setValue(enc);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setPackageList(String src) {
/* 1222 */     if (!javadoc1) {
/* 1223 */       this.packageList = src;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public LinkArgument createLink() {
/* 1233 */     LinkArgument la = new LinkArgument(this);
/* 1234 */     this.links.addElement(la);
/* 1235 */     return la;
/*      */   }
/*      */ 
/*      */   
/*      */   public class LinkArgument
/*      */   {
/*      */     private String href;
/*      */     private boolean offline;
/*      */     private File packagelistLoc;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public LinkArgument(Javadoc this$0) {
/* 1247 */       this.this$0 = this$0;
/*      */       this.offline = false;
/*      */     }
/*      */     
/* 1251 */     public void setHref(String hr) { this.href = hr; }
/*      */ 
/*      */ 
/*      */     
/* 1255 */     public String getHref() { return this.href; }
/*      */ 
/*      */ 
/*      */     
/* 1259 */     public void setPackagelistLoc(File src) { this.packagelistLoc = src; }
/*      */ 
/*      */ 
/*      */     
/* 1263 */     public File getPackagelistLoc() { return this.packagelistLoc; }
/*      */ 
/*      */ 
/*      */     
/* 1267 */     public void setOffline(boolean offline) { this.offline = offline; }
/*      */ 
/*      */ 
/*      */     
/* 1271 */     public boolean isLinkOffline() { return this.offline; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public TagArgument createTag() {
/* 1282 */     if (!javadoc4) {
/* 1283 */       log(""-tag option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1286 */     TagArgument ta = new TagArgument(this);
/* 1287 */     this.tags.addElement(ta);
/* 1288 */     return ta;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1296 */   static final String[] SCOPE_ELEMENTS = new String[] { ""overview"", ""packages"", ""types"", ""constructors"", ""methods"", ""fields"" };
/*      */ 
/*      */ 
/*      */   
/*      */   public class TagArgument
/*      */     extends FileSet
/*      */   {
/*      */     private String name;
/*      */ 
/*      */     
/*      */     private String description;
/*      */ 
/*      */     
/*      */     private boolean enabled;
/*      */ 
/*      */     
/*      */     private String scope;
/*      */ 
/*      */     
/*      */     private final Javadoc this$0;
/*      */ 
/*      */     
/*      */     public TagArgument(Javadoc this$0) {
/* 1319 */       this.this$0 = this$0;
/*      */       this.name = null;
/*      */       this.description = null;
/*      */       this.enabled = true;
/*      */       this.scope = ""a"";
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1329 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1340 */     public void setDescription(String description) { this.description = description; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setScope(String verboseScope) throws BuildException {
/* 1360 */       verboseScope = verboseScope.toLowerCase(Locale.US);
/*      */       
/* 1362 */       boolean[] elements = new boolean[Javadoc.SCOPE_ELEMENTS.length];
/*      */       
/* 1364 */       boolean gotAll = false;
/* 1365 */       boolean gotNotAll = false;
/*      */ 
/*      */ 
/*      */       
/* 1369 */       StringTokenizer tok = new StringTokenizer(verboseScope, "","");
/* 1370 */       while (tok.hasMoreTokens()) {
/* 1371 */         String next = tok.nextToken().trim();
/* 1372 */         if (next.equals(""all"")) {
/* 1373 */           if (gotAll) {
/* 1374 */             getProject().log(""Repeated tag scope element: all"", 3);
/*      */           }
/*      */           
/* 1377 */           gotAll = true; continue;
/*      */         } 
/*      */         int i;
/* 1380 */         for (i = 0; i < Javadoc.SCOPE_ELEMENTS.length && 
/* 1381 */           !next.equals(Javadoc.SCOPE_ELEMENTS[i]); i++);
/*      */ 
/*      */ 
/*      */         
/* 1385 */         if (i == Javadoc.SCOPE_ELEMENTS.length) {
/* 1386 */           throw new BuildException(""Unrecognised scope element: "" + next);
/*      */         }
/*      */         
/* 1389 */         if (elements[i]) {
/* 1390 */           getProject().log(""Repeated tag scope element: "" + next, 3);
/*      */         }
/*      */         
/* 1393 */         elements[i] = true;
/* 1394 */         gotNotAll = true;
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1399 */       if (gotNotAll && gotAll) {
/* 1400 */         throw new BuildException(""Mixture of \""all\"" and other scope elements in tag parameter."");
/*      */       }
/*      */       
/* 1403 */       if (!gotNotAll && !gotAll) {
/* 1404 */         throw new BuildException(""No scope elements specified in tag parameter."");
/*      */       }
/*      */       
/* 1407 */       if (gotAll) {
/* 1408 */         this.scope = ""a"";
/*      */       } else {
/* 1410 */         StringBuffer buff = new StringBuffer(elements.length);
/* 1411 */         for (int i = 0; i < elements.length; i++) {
/* 1412 */           if (elements[i]) {
/* 1413 */             buff.append(Javadoc.SCOPE_ELEMENTS[i].charAt(0));
/*      */           }
/*      */         } 
/* 1416 */         this.scope = buff.toString();
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1426 */     public void setEnabled(boolean enabled) { this.enabled = enabled; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getParameter() throws BuildException {
/* 1436 */       if (this.name == null || this.name.equals("""")) {
/* 1437 */         throw new BuildException(""No name specified for custom tag."");
/*      */       }
/* 1439 */       if (this.description != null) {
/* 1440 */         return this.name + "":"" + (this.enabled ? """" : ""X"") + this.scope + "":"" + this.description;
/*      */       }
/*      */       
/* 1443 */       return this.name;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public GroupArgument createGroup() {
/* 1453 */     GroupArgument ga = new GroupArgument(this);
/* 1454 */     this.groups.addElement(ga);
/* 1455 */     return ga;
/*      */   }
/*      */   
/*      */   public class GroupArgument {
/*      */     private Javadoc.Html title;
/*      */     
/*      */     public GroupArgument(Javadoc this$0) {
/* 1462 */       this.this$0 = this$0;
/*      */       this.packages = new Vector();
/*      */     } private Vector packages; private final Javadoc this$0;
/*      */     public void setTitle(String src) {
/* 1466 */       Javadoc.Html h = new Javadoc.Html();
/* 1467 */       h.addText(src);
/* 1468 */       addTitle(h);
/*      */     }
/*      */     
/* 1471 */     public void addTitle(Javadoc.Html text) { this.title = text; }
/*      */ 
/*      */ 
/*      */     
/* 1475 */     public String getTitle() { return (this.title != null) ? this.title.getText() : null; }
/*      */ 
/*      */     
/*      */     public void setPackages(String src) {
/* 1479 */       StringTokenizer tok = new StringTokenizer(src, "","");
/* 1480 */       while (tok.hasMoreTokens()) {
/* 1481 */         String p = tok.nextToken();
/* 1482 */         Javadoc.PackageName pn = new Javadoc.PackageName();
/* 1483 */         pn.setName(p);
/* 1484 */         addPackage(pn);
/*      */       } 
/*      */     }
/*      */     
/* 1488 */     public void addPackage(Javadoc.PackageName pn) { this.packages.addElement(pn); }
/*      */ 
/*      */     
/*      */     public String getPackages() {
/* 1492 */       StringBuffer p = new StringBuffer();
/* 1493 */       for (int i = 0; i < this.packages.size(); i++) {
/* 1494 */         if (i > 0) {
/* 1495 */           p.append("":"");
/*      */         }
/* 1497 */         p.append(this.packages.elementAt(i).toString());
/*      */       } 
/* 1499 */       return p.toString();
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1507 */   public void setCharset(String src) { add12ArgIfNotEmpty(""-charset"", src); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1517 */   public void setFailonerror(boolean b) { this.failOnError = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSource(String source) {
/* 1527 */     if (!javadoc4) {
/* 1528 */       log(""-source option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1531 */     this.source = source;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1543 */   public void addPackageset(DirSet packageSet) { this.packageSets.addElement(packageSet); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1557 */   public void addFileset(FileSet fs) { this.fileSets.addElement(fs); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLinksource(boolean b) {
/* 1567 */     if (!javadoc4) {
/* 1568 */       log(""-linksource option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1571 */     this.linksource = b;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBreakiterator(boolean b) {
/* 1581 */     if (!javadoc4) {
/* 1582 */       log(""-breakiterator option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1585 */     this.breakiterator = b;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setNoqualifier(String noqualifier) {
/* 1595 */     if (!javadoc4) {
/* 1596 */       log(""-noqualifier option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1599 */     this.noqualifier = noqualifier;
/*      */   }
/*      */   
/*      */   public void execute() throws BuildException {
/* 1603 */     if (""javadoc2"".equals(getTaskType())) {
/* 1604 */       log(""!! javadoc2 is deprecated. Use javadoc instead. !!"");
/*      */     }
/*      */     
/* 1607 */     Vector packagesToDoc = new Vector();
/* 1608 */     Path sourceDirs = new Path(getProject());
/*      */     
/* 1610 */     if (this.packageList != null && this.sourcePath == null) {
/* 1611 */       String msg = ""sourcePath attribute must be set when specifying packagelist."";
/*      */       
/* 1613 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/* 1616 */     if (this.sourcePath != null) {
/* 1617 */       sourceDirs.addExisting(this.sourcePath);
/*      */     }
/*      */     
/* 1620 */     parsePackages(packagesToDoc, sourceDirs);
/*      */     
/* 1622 */     if (packagesToDoc.size() != 0 && sourceDirs.size() == 0) {
/* 1623 */       String msg = ""sourcePath attribute must be set when specifying package names."";
/*      */       
/* 1625 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/* 1628 */     Vector sourceFilesToDoc = (Vector)this.sourceFiles.clone();
/* 1629 */     addFileSets(sourceFilesToDoc);
/*      */     
/* 1631 */     if (this.packageList == null && packagesToDoc.size() == 0 && sourceFilesToDoc.size() == 0)
/*      */     {
/* 1633 */       throw new BuildException(""No source files and no packages have been specified."");
/*      */     }
/*      */ 
/*      */     
/* 1637 */     log(""Generating Javadoc"", 2);
/*      */     
/* 1639 */     Commandline toExecute = (Commandline)this.cmd.clone();
/* 1640 */     toExecute.setExecutable(JavaEnvUtils.getJdkExecutable(""javadoc""));
/*      */ 
/*      */     
/* 1643 */     if (this.doctitle != null) {
/* 1644 */       toExecute.createArgument().setValue(""-doctitle"");
/* 1645 */       toExecute.createArgument().setValue(expand(this.doctitle.getText()));
/*      */     } 
/* 1647 */     if (this.header != null) {
/* 1648 */       toExecute.createArgument().setValue(""-header"");
/* 1649 */       toExecute.createArgument().setValue(expand(this.header.getText()));
/*      */     } 
/* 1651 */     if (this.footer != null) {
/* 1652 */       toExecute.createArgument().setValue(""-footer"");
/* 1653 */       toExecute.createArgument().setValue(expand(this.footer.getText()));
/*      */     } 
/* 1655 */     if (this.bottom != null) {
/* 1656 */       toExecute.createArgument().setValue(""-bottom"");
/* 1657 */       toExecute.createArgument().setValue(expand(this.bottom.getText()));
/*      */     } 
/*      */     
/* 1660 */     if (this.classpath == null) {
/* 1661 */       this.classpath = (new Path(getProject())).concatSystemClasspath(""last"");
/*      */     } else {
/* 1663 */       this.classpath = this.classpath.concatSystemClasspath(""ignore"");
/*      */     } 
/*      */     
/* 1666 */     if (!javadoc1) {
/* 1667 */       if (this.classpath.size() > 0) {
/* 1668 */         toExecute.createArgument().setValue(""-classpath"");
/* 1669 */         toExecute.createArgument().setPath(this.classpath);
/*      */       } 
/* 1671 */       if (sourceDirs.size() > 0) {
/* 1672 */         toExecute.createArgument().setValue(""-sourcepath"");
/* 1673 */         toExecute.createArgument().setPath(sourceDirs);
/*      */       } 
/*      */     } else {
/* 1676 */       sourceDirs.append(this.classpath);
/* 1677 */       if (sourceDirs.size() > 0) {
/* 1678 */         toExecute.createArgument().setValue(""-classpath"");
/* 1679 */         toExecute.createArgument().setPath(sourceDirs);
/*      */       } 
/*      */     } 
/*      */     
/* 1683 */     if (this.version && this.doclet == null) {
/* 1684 */       toExecute.createArgument().setValue(""-version"");
/*      */     }
/* 1686 */     if (this.author && this.doclet == null) {
/* 1687 */       toExecute.createArgument().setValue(""-author"");
/*      */     }
/*      */     
/* 1690 */     if ((javadoc1 || this.doclet == null) && 
/* 1691 */       this.destDir == null) {
/* 1692 */       String msg = ""destDir attribute must be set!"";
/* 1693 */       throw new BuildException(msg);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1699 */     if (!javadoc1) {
/* 1700 */       if (this.doclet != null) {
/* 1701 */         if (this.doclet.getName() == null) {
/* 1702 */           throw new BuildException(""The doclet name must be specified."", getLocation());
/*      */         }
/*      */         
/* 1705 */         toExecute.createArgument().setValue(""-doclet"");
/* 1706 */         toExecute.createArgument().setValue(this.doclet.getName());
/* 1707 */         if (this.doclet.getPath() != null) {
/* 1708 */           Path docletPath = this.doclet.getPath().concatSystemClasspath(""ignore"");
/*      */           
/* 1710 */           if (docletPath.size() != 0) {
/* 1711 */             toExecute.createArgument().setValue(""-docletpath"");
/* 1712 */             toExecute.createArgument().setPath(docletPath);
/*      */           } 
/*      */         } 
/* 1715 */         Enumeration e = this.doclet.getParams();
/* 1716 */         while (e.hasMoreElements()) {
/* 1717 */           DocletParam param = e.nextElement();
/* 1718 */           if (param.getName() == null) {
/* 1719 */             throw new BuildException(""Doclet parameters must have a name"");
/*      */           }
/*      */ 
/*      */           
/* 1723 */           toExecute.createArgument().setValue(param.getName());
/* 1724 */           if (param.getValue() != null) {
/* 1725 */             toExecute.createArgument().setValue(param.getValue());
/*      */           }
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 1731 */       if (this.bootclasspath != null && this.bootclasspath.size() > 0) {
/* 1732 */         toExecute.createArgument().setValue(""-bootclasspath"");
/* 1733 */         toExecute.createArgument().setPath(this.bootclasspath);
/*      */       } 
/*      */ 
/*      */       
/* 1737 */       if (this.links.size() != 0) {
/* 1738 */         for (Enumeration e = this.links.elements(); e.hasMoreElements(); ) {
/* 1739 */           LinkArgument la = e.nextElement();
/*      */           
/* 1741 */           if (la.getHref() == null || la.getHref().length() == 0) {
/* 1742 */             log(""No href was given for the link - skipping"", 3);
/*      */             
/*      */             continue;
/*      */           } 
/*      */           
/*      */           try {
/* 1748 */             URL base = new URL(""file://."");
/* 1749 */             new URL(base, la.getHref());
/*      */           } catch (MalformedURLException mue) {
/*      */             
/* 1752 */             log(""Link href \"""" + la.getHref() + ""\"" is not a valid url - skipping link"", 1);
/*      */ 
/*      */             
/*      */             continue;
/*      */           } 
/*      */ 
/*      */           
/* 1759 */           if (la.isLinkOffline()) {
/* 1760 */             File packageListLocation = la.getPackagelistLoc();
/* 1761 */             if (packageListLocation == null) {
/* 1762 */               throw new BuildException(""The package list  location for link "" + la.getHref() + "" must be provided because the link is "" + ""offline"");
/*      */             }
/*      */ 
/*      */ 
/*      */             
/* 1767 */             File packageListFile = new File(packageListLocation, ""package-list"");
/*      */             
/* 1769 */             if (packageListFile.exists()) {
/*      */               try {
/* 1771 */                 String packageListURL = this.fileUtils.getFileURL(packageListLocation).toExternalForm();
/*      */ 
/*      */                 
/* 1774 */                 toExecute.createArgument().setValue(""-linkoffline"");
/*      */                 
/* 1776 */                 toExecute.createArgument().setValue(la.getHref());
/*      */                 
/* 1778 */                 toExecute.createArgument().setValue(packageListURL);
/*      */                 continue;
/*      */               } catch (MalformedURLException ex) {
/* 1781 */                 log(""Warning: Package list location was invalid "" + packageListLocation, 1);
/*      */                 
/*      */                 continue;
/*      */               } 
/*      */             }
/* 1786 */             log(""Warning: No package list was found at "" + packageListLocation, 3);
/*      */             
/*      */             continue;
/*      */           } 
/* 1790 */           toExecute.createArgument().setValue(""-link"");
/* 1791 */           toExecute.createArgument().setValue(la.getHref());
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1808 */       if (this.group != null) {
/* 1809 */         StringTokenizer tok = new StringTokenizer(this.group, "","", false);
/* 1810 */         while (tok.hasMoreTokens()) {
/* 1811 */           String grp = tok.nextToken().trim();
/* 1812 */           int space = grp.indexOf("" "");
/* 1813 */           if (space > 0) {
/* 1814 */             String name = grp.substring(0, space);
/* 1815 */             String pkgList = grp.substring(space + 1);
/* 1816 */             toExecute.createArgument().setValue(""-group"");
/* 1817 */             toExecute.createArgument().setValue(name);
/* 1818 */             toExecute.createArgument().setValue(pkgList);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 1824 */       if (this.groups.size() != 0) {
/* 1825 */         for (Enumeration e = this.groups.elements(); e.hasMoreElements(); ) {
/* 1826 */           GroupArgument ga = e.nextElement();
/* 1827 */           String title = ga.getTitle();
/* 1828 */           String packages = ga.getPackages();
/* 1829 */           if (title == null || packages == null) {
/* 1830 */             throw new BuildException(""The title and packages must be specified for group elements."");
/*      */           }
/*      */ 
/*      */           
/* 1834 */           toExecute.createArgument().setValue(""-group"");
/* 1835 */           toExecute.createArgument().setValue(expand(title));
/* 1836 */           toExecute.createArgument().setValue(packages);
/*      */         } 
/*      */       }
/*      */ 
/*      */       
/* 1841 */       if (javadoc4) {
/* 1842 */         for (Enumeration e = this.tags.elements(); e.hasMoreElements(); ) {
/* 1843 */           Object element = e.nextElement();
/* 1844 */           if (element instanceof TagArgument) {
/* 1845 */             TagArgument ta = (TagArgument)element;
/* 1846 */             File tagDir = ta.getDir(getProject());
/* 1847 */             if (tagDir == null) {
/*      */ 
/*      */               
/* 1850 */               toExecute.createArgument().setValue(""-tag"");
/* 1851 */               toExecute.createArgument().setValue(ta.getParameter());
/*      */               
/*      */               continue;
/*      */             } 
/* 1855 */             DirectoryScanner tagDefScanner = ta.getDirectoryScanner(getProject());
/* 1856 */             String[] files = tagDefScanner.getIncludedFiles();
/* 1857 */             for (int i = 0; i < files.length; i++) {
/* 1858 */               File tagDefFile = new File(tagDir, files[i]);
/*      */               try {
/* 1860 */                 BufferedReader in = new BufferedReader(new FileReader(tagDefFile));
/*      */                 
/* 1862 */                 String line = null;
/* 1863 */                 while ((line = in.readLine()) != null) {
/* 1864 */                   toExecute.createArgument().setValue(""-tag"");
/* 1865 */                   toExecute.createArgument().setValue(line);
/*      */                 } 
/* 1867 */                 in.close();
/*      */               } catch (IOException ioe) {
/* 1869 */                 throw new BuildException(""Couldn't read  tag file from "" + tagDefFile.getAbsolutePath(), ioe);
/*      */               } 
/*      */             } 
/*      */             
/*      */             continue;
/*      */           } 
/*      */           
/* 1876 */           ExtensionInfo tagletInfo = (ExtensionInfo)element;
/* 1877 */           toExecute.createArgument().setValue(""-taglet"");
/* 1878 */           toExecute.createArgument().setValue(tagletInfo.getName());
/*      */           
/* 1880 */           if (tagletInfo.getPath() != null) {
/* 1881 */             Path tagletPath = tagletInfo.getPath().concatSystemClasspath(""ignore"");
/*      */             
/* 1883 */             if (tagletPath.size() != 0) {
/* 1884 */               toExecute.createArgument().setValue(""-tagletpath"");
/*      */               
/* 1886 */               toExecute.createArgument().setPath(tagletPath);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */ 
/*      */         
/* 1892 */         if (this.source != null) {
/* 1893 */           toExecute.createArgument().setValue(""-source"");
/* 1894 */           toExecute.createArgument().setValue(this.source);
/*      */         } 
/*      */         
/* 1897 */         if (this.linksource && this.doclet == null) {
/* 1898 */           toExecute.createArgument().setValue(""-linksource"");
/*      */         }
/* 1900 */         if (this.breakiterator && this.doclet == null) {
/* 1901 */           toExecute.createArgument().setValue(""-breakiterator"");
/*      */         }
/* 1903 */         if (this.noqualifier != null && this.doclet == null) {
/* 1904 */           toExecute.createArgument().setValue(""-noqualifier"");
/* 1905 */           toExecute.createArgument().setValue(this.noqualifier);
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1911 */     File tmpList = null;
/* 1912 */     PrintWriter srcListWriter = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/* 1919 */       if (this.useExternalFile) {
/* 1920 */         if (tmpList == null) {
/* 1921 */           tmpList = this.fileUtils.createTempFile(""javadoc"", """", null);
/* 1922 */           tmpList.deleteOnExit();
/* 1923 */           toExecute.createArgument().setValue(""@"" + tmpList.getAbsolutePath());
/*      */         } 
/*      */         
/* 1926 */         srcListWriter = new PrintWriter(new FileWriter(tmpList.getAbsolutePath(), true));
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1931 */       Enumeration e = packagesToDoc.elements();
/* 1932 */       while (e.hasMoreElements()) {
/* 1933 */         String packageName = e.nextElement();
/* 1934 */         if (this.useExternalFile) {
/* 1935 */           srcListWriter.println(packageName); continue;
/*      */         } 
/* 1937 */         toExecute.createArgument().setValue(packageName);
/*      */       } 
/*      */ 
/*      */       
/* 1941 */       e = sourceFilesToDoc.elements();
/* 1942 */       while (e.hasMoreElements()) {
/* 1943 */         SourceFile sf = (SourceFile)e.nextElement();
/* 1944 */         String sourceFileName = sf.getFile().getAbsolutePath();
/* 1945 */         if (this.useExternalFile) {
/* 1946 */           if (javadoc4 && sourceFileName.indexOf("" "") > -1) {
/* 1947 */             srcListWriter.println(""\"""" + sourceFileName + ""\""""); continue;
/*      */           } 
/* 1949 */           srcListWriter.println(sourceFileName);
/*      */           continue;
/*      */         } 
/* 1952 */         toExecute.createArgument().setValue(sourceFileName);
/*      */       }
/*      */     
/*      */     } catch (IOException e) {
/*      */       
/* 1957 */       tmpList.delete();
/* 1958 */       throw new BuildException(""Error creating temporary file"", e, getLocation());
/*      */     } finally {
/*      */       
/* 1961 */       if (srcListWriter != null) {
/* 1962 */         srcListWriter.close();
/*      */       }
/*      */     } 
/*      */     
/* 1966 */     if (this.packageList != null) {
/* 1967 */       toExecute.createArgument().setValue(""@"" + this.packageList);
/*      */     }
/* 1969 */     log(toExecute.describeCommand(), 3);
/*      */     
/* 1971 */     log(""Javadoc execution"", 2);
/*      */     
/* 1973 */     JavadocOutputStream out = new JavadocOutputStream(this, 2);
/* 1974 */     JavadocOutputStream err = new JavadocOutputStream(this, 1);
/* 1975 */     Execute exe = new Execute(new PumpStreamHandler(out, err));
/* 1976 */     exe.setAntRun(getProject());
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1984 */     exe.setWorkingDirectory(null);
/*      */     try {
/* 1986 */       exe.setCommandline(toExecute.getCommandline());
/* 1987 */       int ret = exe.execute();
/* 1988 */       if (ret != 0 && this.failOnError) {
/* 1989 */         throw new BuildException(""Javadoc returned "" + ret, getLocation());
/*      */       }
/*      */     } catch (IOException e) {
/* 1992 */       throw new BuildException(""Javadoc failed: "" + e, e, getLocation());
/*      */     } finally {
/* 1994 */       if (tmpList != null) {
/* 1995 */         tmpList.delete();
/* 1996 */         tmpList = null;
/*      */       } 
/*      */       
/* 1999 */       out.logFlush();
/* 2000 */       err.logFlush();
/*      */       try {
/* 2002 */         out.close();
/* 2003 */         err.close();
/* 2004 */       } catch (IOException e) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addFileSets(Vector sf) {
/* 2017 */     Enumeration e = this.fileSets.elements();
/* 2018 */     while (e.hasMoreElements()) {
/* 2019 */       FileSet fs = e.nextElement();
/* 2020 */       if (!fs.hasPatterns() && !fs.hasSelectors()) {
/* 2021 */         fs = (FileSet)fs.clone();
/* 2022 */         fs.createInclude().setName(""**/*.java"");
/*      */       } 
/* 2024 */       File baseDir = fs.getDir(getProject());
/* 2025 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 2026 */       String[] files = ds.getIncludedFiles();
/* 2027 */       for (int i = 0; i < files.length; i++) {
/* 2028 */         sf.addElement(new SourceFile(new File(baseDir, files[i])));
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void parsePackages(Vector pn, Path sp) {
/* 2042 */     Vector addedPackages = new Vector();
/* 2043 */     Vector dirSets = (Vector)this.packageSets.clone();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 2049 */     if (this.sourcePath != null && this.packageNames.size() > 0) {
/* 2050 */       PatternSet ps = new PatternSet();
/* 2051 */       Enumeration e = this.packageNames.elements();
/* 2052 */       while (e.hasMoreElements()) {
/* 2053 */         PackageName p = e.nextElement();
/* 2054 */         String pkg = p.getName().replace('.', '/');
/* 2055 */         if (pkg.endsWith(""*"")) {
/* 2056 */           pkg = pkg + ""*"";
/*      */         }
/* 2058 */         ps.createInclude().setName(pkg);
/*      */       } 
/*      */       
/* 2061 */       e = this.excludePackageNames.elements();
/* 2062 */       while (e.hasMoreElements()) {
/* 2063 */         PackageName p = e.nextElement();
/* 2064 */         String pkg = p.getName().replace('.', '/');
/* 2065 */         if (pkg.endsWith(""*"")) {
/* 2066 */           pkg = pkg + ""*"";
/*      */         }
/* 2068 */         ps.createExclude().setName(pkg);
/*      */       } 
/*      */ 
/*      */       
/* 2072 */       String[] pathElements = this.sourcePath.list();
/* 2073 */       for (int i = 0; i < pathElements.length; i++) {
/* 2074 */         DirSet ds = new DirSet();
/* 2075 */         ds.setDefaultexcludes(this.useDefaultExcludes);
/* 2076 */         ds.setDir(new File(pathElements[i]));
/* 2077 */         ds.createPatternSet().addConfiguredPatternset(ps);
/* 2078 */         dirSets.addElement(ds);
/*      */       } 
/*      */     } 
/*      */     
/* 2082 */     Enumeration e = dirSets.elements();
/* 2083 */     while (e.hasMoreElements()) {
/* 2084 */       DirSet ds = e.nextElement();
/* 2085 */       File baseDir = ds.getDir(getProject());
/* 2086 */       log(""scanning "" + baseDir + "" for packages."", 4);
/* 2087 */       DirectoryScanner dsc = ds.getDirectoryScanner(getProject());
/* 2088 */       String[] dirs = dsc.getIncludedDirectories();
/* 2089 */       boolean containsPackages = false;
/* 2090 */       for (int i = 0; i < dirs.length; i++) {
/*      */         
/* 2092 */         File pd = new File(baseDir, dirs[i]);
/* 2093 */         String[] files = pd.list(new FilenameFilter(this) { private final Javadoc this$0;
/*      */               public boolean accept(File dir1, String name) {
/* 2095 */                 if (name.endsWith("".java"")) {
/* 2096 */                   return true;
/*      */                 }
/* 2098 */                 return false;
/*      */               } }
/*      */           );
/*      */         
/* 2102 */         if (files.length > 0) {
/* 2103 */           containsPackages = true;
/* 2104 */           String packageName = dirs[i].replace(File.separatorChar, '.');
/*      */           
/* 2106 */           if (!addedPackages.contains(packageName)) {
/* 2107 */             addedPackages.addElement(packageName);
/* 2108 */             pn.addElement(packageName);
/*      */           } 
/*      */         } 
/*      */       } 
/* 2112 */       if (containsPackages) {
/*      */ 
/*      */         
/* 2115 */         sp.createPathElement().setLocation(baseDir); continue;
/*      */       } 
/* 2117 */       log(baseDir + "" doesn't contain any packages, dropping it."", 3);
/*      */     } 
/*      */   }
/*      */   
/*      */   private class JavadocOutputStream extends LogOutputStream { private String queuedLine;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     JavadocOutputStream(Javadoc this$0, int level) {
/* 2125 */       super(this$0, level);
/*      */ 
/*      */ 
/*      */       
/*      */       this.this$0 = this$0;
/*      */ 
/*      */ 
/*      */       
/* 2133 */       this.queuedLine = null;
/*      */     } protected void processLine(String line, int messageLevel) {
/* 2135 */       if (messageLevel == 2 && line.startsWith(""Generating "")) {
/*      */         
/* 2137 */         if (this.queuedLine != null) {
/* 2138 */           super.processLine(this.queuedLine, 3);
/*      */         }
/* 2140 */         this.queuedLine = line;
/*      */       } else {
/* 2142 */         if (this.queuedLine != null) {
/* 2143 */           if (line.startsWith(""Building "")) {
/* 2144 */             super.processLine(this.queuedLine, 3);
/*      */           } else {
/* 2146 */             super.processLine(this.queuedLine, 2);
/*      */           } 
/* 2148 */           this.queuedLine = null;
/*      */         } 
/* 2150 */         super.processLine(line, messageLevel);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*      */     protected void logFlush() {
/* 2156 */       if (this.queuedLine != null) {
/* 2157 */         super.processLine(this.queuedLine, 3);
/* 2158 */         this.queuedLine = null;
/*      */       } 
/*      */     } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 2167 */   protected String expand(String content) { return getProject().replaceProperties(content); }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Javadoc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JDBCTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.sql.Connection;
/*     */ import java.sql.DatabaseMetaData;
/*     */ import java.sql.Driver;
/*     */ import java.sql.SQLException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class JDBCTask
/*     */   extends Task
/*     */ {
/* 140 */   private static Hashtable loaderMap = new Hashtable(3);
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean caching = true;
/*     */ 
/*     */   
/*     */   private Path classpath;
/*     */ 
/*     */   
/*     */   private AntClassLoader loader;
/*     */ 
/*     */   
/*     */   private boolean autocommit = false;
/*     */ 
/*     */   
/* 156 */   private String driver = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   private String url = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   private String userId = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   private String password = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   private String rdbms = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   private String version = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setClasspath(Path classpath) { this.classpath = classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setCaching(boolean enable) { this.caching = enable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 205 */     if (this.classpath == null) {
/* 206 */       this.classpath = new Path(getProject());
/*     */     }
/* 208 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setDriver(String driver) { this.driver = driver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setUrl(String url) { this.url = url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 240 */   public void setPassword(String password) { this.password = password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public void setAutocommit(boolean autocommit) { this.autocommit = autocommit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setRdbms(String rdbms) { this.rdbms = rdbms; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   public void setVersion(String version) { this.version = version; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidRdbms(Connection conn) {
/* 274 */     if (this.rdbms == null && this.version == null) {
/* 275 */       return true;
/*     */     }
/*     */     
/*     */     try {
/* 279 */       DatabaseMetaData dmd = conn.getMetaData();
/*     */       
/* 281 */       if (this.rdbms != null) {
/* 282 */         String theVendor = dmd.getDatabaseProductName().toLowerCase();
/*     */         
/* 284 */         log(""RDBMS = "" + theVendor, 3);
/* 285 */         if (theVendor == null || theVendor.indexOf(this.rdbms) < 0) {
/* 286 */           log(""Not the required RDBMS: "" + this.rdbms, 3);
/* 287 */           return false;
/*     */         } 
/*     */       } 
/*     */       
/* 291 */       if (this.version != null) {
/*     */         
/* 293 */         String theVersion = dmd.getDatabaseProductVersion().toLowerCase();
/*     */         
/* 295 */         log(""Version = "" + theVersion, 3);
/* 296 */         if (theVersion == null || (!theVersion.startsWith(this.version) && theVersion.indexOf("" "" + this.version) < 0)) {
/*     */ 
/*     */           
/* 299 */           log(""Not the required version: \"""" + this.version + ""\"""", 3);
/* 300 */           return false;
/*     */         } 
/*     */       } 
/*     */     } catch (SQLException e) {
/*     */       
/* 305 */       log(""Failed to obtain required RDBMS information"", 0);
/* 306 */       return false;
/*     */     } 
/*     */     
/* 309 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 313 */   protected static Hashtable getLoaderMap() { return loaderMap; }
/*     */ 
/*     */ 
/*     */   
/* 317 */   protected AntClassLoader getLoader() { return this.loader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Connection getConnection() throws BuildException {
/* 331 */     if (this.userId == null) {
/* 332 */       throw new BuildException(""User Id attribute must be set!"", getLocation());
/*     */     }
/* 334 */     if (this.password == null) {
/* 335 */       throw new BuildException(""Password attribute must be set!"", getLocation());
/*     */     }
/* 337 */     if (this.url == null) {
/* 338 */       throw new BuildException(""Url attribute must be set!"", getLocation());
/*     */     }
/*     */     
/*     */     try {
/* 342 */       log(""connecting to "" + getUrl(), 3);
/* 343 */       Properties info = new Properties();
/* 344 */       info.put(""user"", getUserId());
/* 345 */       info.put(""password"", getPassword());
/* 346 */       Connection conn = getDriver().connect(getUrl(), info);
/*     */       
/* 348 */       if (conn == null)
/*     */       {
/* 350 */         throw new SQLException(""No suitable Driver for "" + this.url);
/*     */       }
/*     */       
/* 353 */       conn.setAutoCommit(this.autocommit);
/* 354 */       return conn;
/*     */     } catch (SQLException e) {
/* 356 */       throw new BuildException(e, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Driver getDriver() throws BuildException {
/* 368 */     if (this.driver == null) {
/* 369 */       throw new BuildException(""Driver attribute must be set!"", getLocation());
/*     */     }
/*     */     
/* 372 */     Driver driverInstance = null;
/*     */     try {
/*     */       Class clazz;
/* 375 */       if (this.classpath != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 382 */         synchronized (loaderMap) {
/* 383 */           if (this.caching) {
/* 384 */             this.loader = (AntClassLoader)loaderMap.get(this.driver);
/*     */           }
/* 386 */           if (this.loader == null) {
/* 387 */             log(""Loading "" + this.driver + "" using AntClassLoader with classpath "" + this.classpath, 3);
/*     */ 
/*     */             
/* 390 */             this.loader = getProject().createClassLoader(this.classpath);
/* 391 */             if (this.caching) {
/* 392 */               loaderMap.put(this.driver, this.loader);
/*     */             }
/*     */           } else {
/* 395 */             log(""Loading "" + this.driver + "" using a cached AntClassLoader."", 3);
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 400 */         clazz = this.loader.loadClass(this.driver);
/*     */       } else {
/* 402 */         log(""Loading "" + this.driver + "" using system loader."", 3);
/*     */         
/* 404 */         clazz = Class.forName(this.driver);
/*     */       } 
/* 406 */       driverInstance = (Driver)clazz.newInstance();
/*     */     } catch (ClassNotFoundException e) {
/* 408 */       throw new BuildException(""Class Not Found: JDBC driver "" + this.driver + "" could not be loaded"", getLocation());
/*     */     }
/*     */     catch (IllegalAccessException e) {
/*     */       
/* 412 */       throw new BuildException(""Illegal Access: JDBC driver "" + this.driver + "" could not be loaded"", getLocation());
/*     */     }
/*     */     catch (InstantiationException e) {
/*     */       
/* 416 */       throw new BuildException(""Instantiation Exception: JDBC driver "" + this.driver + "" could not be loaded"", getLocation());
/*     */     } 
/*     */ 
/*     */     
/* 420 */     return driverInstance;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 425 */   public void isCaching(boolean value) { this.caching = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 433 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 441 */   public boolean isAutocommit() { return this.autocommit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 449 */   public String getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 457 */   public String getUserId() { return this.userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 465 */   public void setUserid(String userId) { this.userId = userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 473 */   public String getPassword() { return this.password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 481 */   public String getRdbms() { return this.rdbms; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 489 */   public String getVersion() { return this.version; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\JDBCTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jikes,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Random;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */ {
/*     */   protected JikesOutputParser jop;
/*     */   protected String command;
/*     */   protected Project project;
/*     */   
/*     */   protected Jikes(JikesOutputParser jop, String command, Project project) {
/*  89 */     System.err.println(""As of Ant 1.2 released in October 2000, the Jikes class"");
/*     */     
/*  91 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/*  93 */     System.err.println(""Don't use it!"");
/*     */     
/*  95 */     this.jop = jop;
/*  96 */     this.command = command;
/*  97 */     this.project = project;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void compile(String[] args) {
/* 105 */     String[] commandArray = null;
/* 106 */     File tmpFile = null;
/*     */     
/*     */     try {
/* 109 */       String myos = System.getProperty(""os.name"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 116 */       if (myos.toLowerCase().indexOf(""windows"") >= 0 && args.length > 250) {
/*     */         
/* 118 */         PrintWriter out = null;
/*     */         try {
/* 120 */           String tempFileName = ""jikes"" + (new Random(System.currentTimeMillis())).nextLong();
/*     */           
/* 122 */           tmpFile = new File(tempFileName);
/* 123 */           out = new PrintWriter(new FileWriter(tmpFile));
/* 124 */           for (int i = 0; i < args.length; i++) {
/* 125 */             out.println(args[i]);
/*     */           }
/* 127 */           out.flush();
/* 128 */           commandArray = new String[] { this.command, ""@"" + tmpFile.getAbsolutePath() };
/*     */         } catch (IOException e) {
/*     */           
/* 131 */           throw new BuildException(""Error creating temporary file"", e);
/*     */         } finally {
/*     */           
/* 134 */           if (out != null) {
/*     */             try {
/* 136 */               out.close();
/* 137 */             } catch (Throwable t) {}
/*     */           }
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 143 */         commandArray = new String[args.length + 1];
/* 144 */         commandArray[0] = this.command;
/* 145 */         System.arraycopy(args, 0, commandArray, 1, args.length);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 153 */         Execute exe = new Execute(this.jop);
/* 154 */         exe.setAntRun(this.project);
/* 155 */         exe.setWorkingDirectory(this.project.getBaseDir());
/* 156 */         exe.setCommandline(commandArray);
/* 157 */         exe.execute();
/*     */       } catch (IOException e) {
/* 159 */         throw new BuildException(""Error running Jikes compiler"", e);
/*     */       } 
/*     */     } finally {
/* 162 */       if (tmpFile != null)
/* 163 */         tmpFile.delete(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JikesOutputParser,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JikesOutputParser
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   protected Task task;
/*     */   protected boolean errorFlag = false;
/*     */   protected int errors;
/*     */   protected int warnings;
/*     */   protected boolean error = false;
/*     */   protected boolean emacsMode;
/*     */   protected BufferedReader br;
/*     */   
/*     */   public void setProcessInputStream(OutputStream os) {}
/*     */   
/*     */   public void setProcessErrorStream(InputStream is) {}
/*     */   
/* 102 */   public void setProcessOutputStream(InputStream is) throws IOException { this.br = new BufferedReader(new InputStreamReader(is)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void start() throws IOException { parseOutput(this.br); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stop() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected JikesOutputParser(Task task, boolean emacsMode) {
/* 125 */     System.err.println(""As of Ant 1.2 released in October 2000, the JikesOutputParser class"");
/*     */     
/* 127 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/* 129 */     System.err.println(""Don't use it!"");
/*     */     
/* 131 */     this.task = task;
/* 132 */     this.emacsMode = emacsMode;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void parseOutput(BufferedReader reader) throws IOException {
/* 140 */     if (this.emacsMode) {
/* 141 */       parseEmacsOutput(reader);
/*     */     } else {
/* 143 */       parseStandardOutput(reader);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parseStandardOutput(BufferedReader reader) throws IOException {
/*     */     String line;
/* 159 */     while ((line = reader.readLine()) != null) {
/* 160 */       String lower = line.toLowerCase();
/* 161 */       if (line.trim().equals("""")) {
/*     */         continue;
/*     */       }
/* 164 */       if (lower.indexOf(""error"") != -1) {
/* 165 */         setError(true);
/* 166 */       } else if (lower.indexOf(""warning"") != -1) {
/* 167 */         setError(false);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/* 175 */       else if (this.emacsMode) {
/* 176 */         setError(true);
/*     */       } 
/*     */       
/* 179 */       log(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 185 */   private void parseEmacsOutput(BufferedReader reader) throws IOException { parseStandardOutput(reader); }
/*     */ 
/*     */   
/*     */   private void setError(boolean err) {
/* 189 */     this.error = err;
/* 190 */     if (this.error) {
/* 191 */       this.errorFlag = true;
/*     */     }
/*     */   }
/*     */   
/*     */   private void log(String line) {
/* 196 */     if (!this.emacsMode) {
/* 197 */       this.task.log("""", this.error ? 0 : 1);
/*     */     }
/* 199 */     this.task.log(line, this.error ? 0 : 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   protected boolean getErrorFlag() { return this.errorFlag; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\JikesOutputParser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.KeySubst,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class KeySubst
/*     */   extends Task
/*     */ {
/*  80 */   private File source = null;
/*  81 */   private File dest = null;
/*  82 */   private String sep = ""*"";
/*  83 */   private Hashtable replacements = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  89 */     log(""!! KeySubst is deprecated. Use Filter + Copy instead. !!"");
/*  90 */     log(""Performing Substitutions"");
/*  91 */     if (this.source == null || this.dest == null) {
/*  92 */       log(""Source and destinations must not be null"");
/*     */       return;
/*     */     } 
/*  95 */     BufferedReader br = null;
/*  96 */     BufferedWriter bw = null;
/*     */     try {
/*  98 */       br = new BufferedReader(new FileReader(this.source));
/*  99 */       this.dest.delete();
/* 100 */       bw = new BufferedWriter(new FileWriter(this.dest));
/*     */       
/* 102 */       String line = null;
/* 103 */       String newline = null;
/* 104 */       line = br.readLine();
/* 105 */       while (line != null) {
/* 106 */         if (line.length() == 0) {
/* 107 */           bw.newLine();
/*     */         } else {
/* 109 */           newline = replace(line, this.replacements);
/* 110 */           bw.write(newline);
/* 111 */           bw.newLine();
/*     */         } 
/* 113 */         line = br.readLine();
/*     */       } 
/* 115 */       bw.flush();
/*     */     } catch (IOException ioe) {
/* 117 */       ioe.printStackTrace();
/*     */     } finally {
/* 119 */       if (bw != null) {
/*     */         try {
/* 121 */           bw.close();
/* 122 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 126 */       if (br != null) {
/*     */         try {
/* 128 */           br.close();
/* 129 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setSrc(File s) { this.source = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setSep(String sep) { this.sep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeys(String keys) {
/* 170 */     if (keys != null && keys.length() > 0) {
/* 171 */       StringTokenizer tok = new StringTokenizer(keys, this.sep, false);
/*     */       
/* 173 */       while (tok.hasMoreTokens()) {
/* 174 */         String token = tok.nextToken().trim();
/* 175 */         StringTokenizer itok = new StringTokenizer(token, ""="", false);
/*     */ 
/*     */         
/* 178 */         String name = itok.nextToken();
/* 179 */         String value = itok.nextToken();
/* 180 */         this.replacements.put(name, value);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void main(String[] args) {
/*     */     try {
/* 188 */       Hashtable hash = new Hashtable();
/* 189 */       hash.put(""VERSION"", ""1.0.3"");
/* 190 */       hash.put(""b"", ""ffff"");
/* 191 */       System.out.println(replace(""$f ${VERSION} f ${b} jj $"", hash));
/*     */     } catch (Exception e) {
/*     */       
/* 194 */       e.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replace(String origString, Hashtable keys) throws BuildException {
/* 205 */     StringBuffer finalString = new StringBuffer();
/* 206 */     int index = 0;
/* 207 */     int i = 0;
/* 208 */     String key = null;
/* 209 */     while ((index = origString.indexOf(""${"", i)) > -1) {
/* 210 */       key = origString.substring(index + 2, origString.indexOf(""}"", index + 3));
/*     */       
/* 212 */       finalString.append(origString.substring(i, index));
/* 213 */       if (keys.containsKey(key)) {
/* 214 */         finalString.append(keys.get(key));
/*     */       } else {
/* 216 */         finalString.append(""${"");
/* 217 */         finalString.append(key);
/* 218 */         finalString.append(""}"");
/*     */       } 
/* 220 */       i = index + 3 + key.length();
/*     */     } 
/* 222 */     finalString.append(origString.substring(i));
/* 223 */     return finalString.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\KeySubst.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LoadFile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LoadFile
/*     */   extends Task
/*     */ {
/*  82 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failOnError = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   private String property = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   private final Vector filterChains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public final void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public final void setSrcFile(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public final void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 160 */     if (this.srcFile == null) {
/* 161 */       throw new BuildException(""source file not defined"");
/*     */     }
/* 163 */     if (this.property == null) {
/* 164 */       throw new BuildException(""output property not defined"");
/*     */     }
/* 166 */     FileInputStream fis = null;
/* 167 */     BufferedInputStream bis = null;
/* 168 */     Reader instream = null;
/* 169 */     log(""loading "" + this.srcFile + "" into property "" + this.property, 3);
/*     */     
/*     */     try {
/* 172 */       long len = this.srcFile.length();
/* 173 */       log(""file size = "" + len, 4);
/*     */       
/* 175 */       int size = (int)len;
/*     */       
/* 177 */       fis = new FileInputStream(this.srcFile);
/* 178 */       bis = new BufferedInputStream(fis);
/* 179 */       if (this.encoding == null) {
/* 180 */         instream = new InputStreamReader(bis);
/*     */       } else {
/* 182 */         instream = new InputStreamReader(bis, this.encoding);
/*     */       } 
/*     */       
/* 185 */       String text = """";
/* 186 */       if (size != 0) {
/* 187 */         ChainReaderHelper crh = new ChainReaderHelper();
/* 188 */         crh.setBufferSize(size);
/* 189 */         crh.setPrimaryReader(instream);
/* 190 */         crh.setFilterChains(this.filterChains);
/* 191 */         crh.setProject(getProject());
/* 192 */         instream = crh.getAssembledReader();
/*     */         
/* 194 */         text = crh.readFully(instream);
/*     */       } 
/*     */       
/* 197 */       if (text != null && 
/* 198 */         text.length() > 0) {
/* 199 */         getProject().setNewProperty(this.property, text);
/* 200 */         log(""loaded "" + text.length() + "" characters"", 3);
/*     */         
/* 202 */         log(this.property + "" := "" + text, 4);
/*     */       }
/*     */     
/*     */     } catch (IOException ioe) {
/*     */       
/* 207 */       String message = ""Unable to load file: "" + ioe.toString();
/* 208 */       if (this.failOnError) {
/* 209 */         throw new BuildException(message, ioe, getLocation());
/*     */       }
/* 211 */       log(message, 0);
/*     */     } catch (BuildException be) {
/*     */       
/* 214 */       if (this.failOnError) {
/* 215 */         throw be;
/*     */       }
/* 217 */       log(be.getMessage(), 0);
/*     */     } finally {
/*     */       
/*     */       try {
/* 221 */         if (fis != null) {
/* 222 */           fis.close();
/*     */         }
/* 224 */       } catch (IOException ioex) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 234 */   public final void addFilterChain(FilterChain filter) { this.filterChains.addElement(filter); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\LoadFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LoadProperties,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LoadProperties
/*     */   extends Task
/*     */ {
/*  83 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   private final Vector filterChains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public final void setSrcFile(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 128 */     if (this.srcFile == null) {
/* 129 */       throw new BuildException(""Source file not defined."");
/*     */     }
/*     */     
/* 132 */     if (!this.srcFile.exists()) {
/* 133 */       throw new BuildException(""Source file does not exist."");
/*     */     }
/*     */     
/* 136 */     if (!this.srcFile.isFile()) {
/* 137 */       throw new BuildException(""Source file is not a file."");
/*     */     }
/*     */     
/* 140 */     FileInputStream fis = null;
/* 141 */     BufferedInputStream bis = null;
/* 142 */     Reader instream = null;
/* 143 */     ByteArrayInputStream tis = null;
/*     */     
/*     */     try {
/* 146 */       long len = this.srcFile.length();
/*     */ 
/*     */       
/* 149 */       fis = new FileInputStream(this.srcFile);
/* 150 */       bis = new BufferedInputStream(fis);
/* 151 */       if (this.encoding == null) {
/* 152 */         instream = new InputStreamReader(bis);
/*     */       } else {
/* 154 */         instream = new InputStreamReader(bis, this.encoding);
/*     */       } 
/*     */       
/* 157 */       ChainReaderHelper crh = new ChainReaderHelper();
/* 158 */       crh.setPrimaryReader(instream);
/* 159 */       crh.setFilterChains(this.filterChains);
/* 160 */       crh.setProject(getProject());
/* 161 */       instream = crh.getAssembledReader();
/*     */       
/* 163 */       String text = crh.readFully(instream);
/*     */       
/* 165 */       if (text != null) {
/* 166 */         if (!text.endsWith(""\n"")) {
/* 167 */           text = text + ""\n"";
/*     */         }
/*     */         
/* 170 */         if (this.encoding == null) {
/* 171 */           tis = new ByteArrayInputStream(text.getBytes());
/*     */         } else {
/* 173 */           tis = new ByteArrayInputStream(text.getBytes(this.encoding));
/*     */         } 
/* 175 */         Properties props = new Properties();
/* 176 */         props.load(tis);
/*     */         
/* 178 */         Property propertyTask = (Property)getProject().createTask(""property"");
/*     */         
/* 180 */         propertyTask.setTaskName(getTaskName());
/* 181 */         propertyTask.addProperties(props);
/*     */       } 
/*     */     } catch (IOException ioe) {
/*     */       
/* 185 */       String message = ""Unable to load file: "" + ioe.toString();
/* 186 */       throw new BuildException(message, ioe, getLocation());
/*     */     } catch (BuildException be) {
/* 188 */       throw be;
/*     */     } finally {
/*     */       try {
/* 191 */         if (fis != null) {
/* 192 */           fis.close();
/*     */         }
/* 194 */       } catch (IOException ioex) {}
/*     */ 
/*     */       
/*     */       try {
/* 198 */         if (tis != null) {
/* 199 */           tis.close();
/*     */         }
/* 201 */       } catch (IOException ioex) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 211 */   public final void addFilterChain(FilterChain filter) { this.filterChains.addElement(filter); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\LoadProperties.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private static final int INTIAL_SIZE = 132;
/*     */   private static final int CR = 13;
/*     */   private static final int LF = 10;
/*  85 */   private ByteArrayOutputStream buffer = new ByteArrayOutputStream(132);
/*     */   
/*     */   private boolean skip = false;
/*     */   
/*     */   private Task task;
/*  90 */   private int level = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LogOutputStream(Task task, int level) {
/*  99 */     this.task = task;
/* 100 */     this.level = level;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int cc) throws IOException {
/* 111 */     byte c = (byte)cc;
/* 112 */     if (c == 10 || c == 13) {
/* 113 */       if (!this.skip) {
/* 114 */         processBuffer();
/*     */       }
/*     */     } else {
/* 117 */       this.buffer.write(cc);
/*     */     } 
/* 119 */     this.skip = (c == 13);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void flush() { processBuffer(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer() {
/* 134 */     processLine(this.buffer.toString());
/* 135 */     this.buffer.reset();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   protected void processLine(String line) { processLine(line, this.level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   protected void processLine(String line, int level) { this.task.log(line, level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 161 */     if (this.buffer.size() > 0) {
/* 162 */       processBuffer();
/*     */     }
/* 164 */     super.close();
/*     */   }
/*     */ 
/*     */   
/* 168 */   public int getMessageLevel() { return this.level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] b, int off, int len) throws IOException {
/* 182 */     int offset = off;
/* 183 */     int blockStartOffset = offset;
/* 184 */     int remaining = len;
/* 185 */     while (remaining > 0) {
/* 186 */       while (remaining > 0 && b[offset] != 10 && b[offset] != 13) {
/* 187 */         offset++;
/* 188 */         remaining--;
/*     */       } 
/*     */       
/* 191 */       int blockLength = offset - blockStartOffset;
/* 192 */       if (blockLength > 0) {
/* 193 */         this.buffer.write(b, blockStartOffset, blockLength);
/*     */       }
/* 195 */       while (remaining > 0 && (b[offset] == 10 || b[offset] == 13)) {
/* 196 */         write(b[offset]);
/* 197 */         offset++;
/* 198 */         remaining--;
/*     */       } 
/* 200 */       blockStartOffset = offset;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\LogOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogStreamHandler,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogStreamHandler
/*    */   extends PumpStreamHandler
/*    */ {
/* 77 */   public LogStreamHandler(Task task, int outlevel, int errlevel) { super(new LogOutputStream(task, outlevel), new LogOutputStream(task, errlevel)); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void stop() {
/* 85 */     super.stop();
/*    */     try {
/* 87 */       getErr().close();
/* 88 */       getOut().close();
/*    */     } catch (IOException e) {
/*    */       
/* 91 */       throw new BuildException(e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\LogStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.MacroDef,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.apache.tools.ant.AntTypeDefinition;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ComponentHelper;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.RuntimeConfigurable;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.UnknownElement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MacroDef
/*     */   extends AntlibDefinition
/*     */ {
/*     */   private NestedSequential nestedSequential;
/*     */   private String name;
/*  81 */   private List attributes = new ArrayList();
/*  82 */   private Map elements = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NestedSequential createSequential() {
/*  98 */     if (this.nestedSequential != null) {
/*  99 */       throw new BuildException(""Only one sequential allowed"");
/*     */     }
/* 101 */     this.nestedSequential = new NestedSequential();
/* 102 */     return this.nestedSequential;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class NestedSequential
/*     */     implements TaskContainer
/*     */   {
/* 110 */     private List nested = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 118 */     public void addTask(Task task) { this.nested.add(task); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 125 */     public List getNested() { return this.nested; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean similar(NestedSequential other) {
/* 137 */       if (this.nested.size() != other.nested.size()) {
/* 138 */         return false;
/*     */       }
/* 140 */       for (int i = 0; i < this.nested.size(); i++) {
/* 141 */         UnknownElement me = this.nested.get(i);
/* 142 */         UnknownElement o = other.nested.get(i);
/* 143 */         if (!me.similar(o)) {
/* 144 */           return false;
/*     */         }
/*     */       } 
/* 147 */       return true;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public UnknownElement getNestedTask() {
/* 156 */     UnknownElement ret = new UnknownElement(""sequential"");
/* 157 */     ret.setTaskName(""sequential"");
/* 158 */     ret.setNamespace("""");
/* 159 */     ret.setQName(""sequential"");
/* 160 */     new RuntimeConfigurable(ret, ""sequential"");
/* 161 */     for (int i = 0; i < this.nestedSequential.getNested().size(); i++) {
/* 162 */       UnknownElement e = this.nestedSequential.getNested().get(i);
/*     */       
/* 164 */       ret.addChild(e);
/* 165 */       ret.getWrapper().addChild(e.getWrapper());
/*     */     } 
/* 167 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public List getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public Map getElements() { return this.elements; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public static boolean isValidNameCharacter(char c) { return (Character.isLetterOrDigit(c) || c == '.' || c == '-'); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean isValidName(String name) {
/* 203 */     if (name.length() == 0) {
/* 204 */       return false;
/*     */     }
/* 206 */     for (int i = 0; i < name.length(); i++) {
/* 207 */       if (!isValidNameCharacter(name.charAt(i))) {
/* 208 */         return false;
/*     */       }
/*     */     } 
/* 211 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredAttribute(Attribute attribute) {
/* 220 */     if (attribute.getName() == null) {
/* 221 */       throw new BuildException(""the attribute nested element needed a \""name\"" attribute"");
/*     */     }
/*     */     
/* 224 */     for (int i = 0; i < this.attributes.size(); i++) {
/* 225 */       if (((Attribute)this.attributes.get(i)).getName().equals(attribute.getName()))
/*     */       {
/* 227 */         throw new BuildException(""the attribute "" + attribute.getName() + "" has already been specified"");
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 232 */     this.attributes.add(attribute);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredElement(TemplateElement element) {
/* 241 */     if (element.getName() == null) {
/* 242 */       throw new BuildException(""the element nested element needed a \""name\"" attribute"");
/*     */     }
/*     */     
/* 245 */     if (this.elements.get(element.getName()) != null) {
/* 246 */       throw new BuildException(""the element "" + element.getName() + "" has already been specified"");
/*     */     }
/*     */ 
/*     */     
/* 250 */     this.elements.put(element.getName(), element);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 258 */     if (this.nestedSequential == null) {
/* 259 */       throw new BuildException(""Missing sequential element"");
/*     */     }
/* 261 */     if (this.name == null) {
/* 262 */       throw new BuildException(""Name not specified"");
/*     */     }
/*     */     
/* 265 */     this.name = ProjectHelper.genComponentName(getURI(), this.name);
/*     */     
/* 267 */     MyAntTypeDefinition def = new MyAntTypeDefinition(this);
/* 268 */     def.setName(this.name);
/* 269 */     def.setClass(MacroInstance.class);
/*     */     
/* 271 */     ComponentHelper helper = ComponentHelper.getComponentHelper(getProject());
/*     */ 
/*     */     
/* 274 */     helper.addDataTypeDefinition(def);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Attribute
/*     */   {
/*     */     private String name;
/*     */ 
/*     */ 
/*     */     
/*     */     private String defaultValue;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setName(String name) {
/* 292 */       if (!MacroDef.isValidName(name)) {
/* 293 */         throw new BuildException(""Illegal name ["" + name + ""] for attribute"");
/*     */       }
/*     */       
/* 296 */       this.name = name;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 303 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 313 */     public void setDefault(String defaultValue) { this.defaultValue = defaultValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 320 */     public String getDefault() { return this.defaultValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/* 330 */       if (obj == null) {
/* 331 */         return false;
/*     */       }
/* 333 */       if (obj.getClass() != getClass()) {
/* 334 */         return false;
/*     */       }
/* 336 */       Attribute other = (Attribute)obj;
/* 337 */       if (this.name == null) {
/* 338 */         if (other.name != null) {
/* 339 */           return false;
/*     */         }
/* 341 */       } else if (!this.name.equals(other.name)) {
/* 342 */         return false;
/*     */       } 
/* 344 */       if (this.defaultValue == null) {
/* 345 */         if (other.defaultValue != null) {
/* 346 */           return false;
/*     */         }
/* 348 */       } else if (!this.defaultValue.equals(other.defaultValue)) {
/* 349 */         return false;
/*     */       } 
/* 351 */       return true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 358 */     public int hashCode() { return MacroDef.objectHashCode(this.defaultValue) + MacroDef.objectHashCode(this.name); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TemplateElement
/*     */   {
/*     */     private String name;
/*     */ 
/*     */ 
/*     */     
/*     */     private boolean optional = false;
/*     */ 
/*     */ 
/*     */     
/*     */     public void setName(String name) {
/* 375 */       if (!MacroDef.isValidName(name)) {
/* 376 */         throw new BuildException(""Illegal name ["" + name + ""] for attribute"");
/*     */       }
/*     */       
/* 379 */       this.name = name;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 386 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 396 */     public void setOptional(boolean optional) { this.optional = optional; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 403 */     public boolean isOptional() { return this.optional; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean equals(Object obj) {
/* 413 */       if (obj == null) {
/* 414 */         return false;
/*     */       }
/* 416 */       if (obj.getClass() != getClass()) {
/* 417 */         return false;
/*     */       }
/* 419 */       TemplateElement other = (TemplateElement)obj;
/* 420 */       if (this.name == null) {
/* 421 */         if (other.name != null) {
/* 422 */           return false;
/*     */         }
/* 424 */       } else if (!this.name.equals(other.name)) {
/* 425 */         return false;
/*     */       } 
/* 427 */       return (this.optional == other.optional);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 434 */     public int hashCode() { return MacroDef.objectHashCode(this.name) + (this.optional ? 1 : 0); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object obj) {
/* 446 */     if (obj == null) {
/* 447 */       return false;
/*     */     }
/* 449 */     if (!obj.getClass().equals(getClass())) {
/* 450 */       return false;
/*     */     }
/* 452 */     MacroDef other = (MacroDef)obj;
/* 453 */     if (this.name == null) {
/* 454 */       return (other.name == null);
/*     */     }
/* 456 */     if (!this.name.equals(other.name)) {
/* 457 */       return false;
/*     */     }
/* 459 */     if (getURI() == null || getURI().equals("""") || getURI().equals(""antlib:org.apache.tools.ant"")) {
/*     */       
/* 461 */       if (other.getURI() != null && !other.getURI().equals("""") && !other.getURI().equals(""antlib:org.apache.tools.ant""))
/*     */       {
/* 463 */         return false;
/*     */       }
/*     */     }
/* 466 */     else if (!getURI().equals(other.getURI())) {
/* 467 */       return false;
/*     */     } 
/*     */ 
/*     */     
/* 471 */     if (!this.nestedSequential.similar(other.nestedSequential)) {
/* 472 */       return false;
/*     */     }
/* 474 */     if (!this.attributes.equals(other.attributes)) {
/* 475 */       return false;
/*     */     }
/* 477 */     if (!this.elements.equals(other.elements)) {
/* 478 */       return false;
/*     */     }
/* 480 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 487 */   public int hashCode() { return objectHashCode(this.name) + objectHashCode(getURI()) + objectHashCode(this.nestedSequential) + objectHashCode(this.attributes) + objectHashCode(this.elements); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class MyAntTypeDefinition
/*     */     extends AntTypeDefinition
/*     */   {
/*     */     private MacroDef macroDef;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 508 */     public MyAntTypeDefinition(MacroDef macroDef) { this.macroDef = macroDef; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Object create(Project project) {
/* 518 */       Object o = super.create(project);
/* 519 */       if (o == null) {
/* 520 */         return null;
/*     */       }
/* 522 */       ((MacroInstance)o).setMacroDef(this.macroDef);
/* 523 */       return o;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean sameDefinition(AntTypeDefinition other, Project project) {
/* 534 */       if (!super.sameDefinition(other, project)) {
/* 535 */         return false;
/*     */       }
/* 537 */       MyAntTypeDefinition otherDef = (MyAntTypeDefinition)other;
/* 538 */       return this.macroDef.equals(otherDef.macroDef);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean similarDefinition(AntTypeDefinition other, Project project) {
/* 550 */       if (!super.similarDefinition(other, project)) {
/* 551 */         return false;
/*     */       }
/* 553 */       MyAntTypeDefinition otherDef = (MyAntTypeDefinition)other;
/* 554 */       return this.macroDef.equals(otherDef.macroDef);
/*     */     }
/*     */   }
/*     */   
/*     */   private static int objectHashCode(Object o) {
/* 559 */     if (o == null) {
/* 560 */       return 0;
/*     */     }
/* 562 */     return o.hashCode();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\MacroDef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.MacroInstance,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Enumeration;
/*     */ import java.util.HashMap;
/*     */ import java.util.HashSet;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DynamicConfigurator;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.RuntimeConfigurable;
/*     */ import org.apache.tools.ant.Target;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.UnknownElement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MacroInstance
/*     */   extends Task
/*     */   implements DynamicConfigurator
/*     */ {
/*     */   private MacroDef macroDef;
/*  86 */   private Map map = new HashMap();
/*  87 */   private Map nsElements = null;
/*  88 */   private Map presentElements = new HashMap();
/*  89 */   private Hashtable localProperties = new Hashtable();
/*     */   
/*     */   private static final int STATE_NORMAL = 0;
/*     */   
/*     */   private static final int STATE_EXPECT_BRACKET = 1;
/*     */   private static final int STATE_EXPECT_NAME = 2;
/*     */   private static final int STATE_EXPECT_EXCAPE = 3;
/*     */   
/*  97 */   public void setMacroDef(MacroDef macroDef) { this.macroDef = macroDef; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public void setDynamicAttribute(String name, String value) { this.map.put(name, value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object createDynamicElement(String name) throws BuildException {
/* 118 */     if (getNsElements().get(name) == null) {
/* 119 */       throw new BuildException(""unsupported element "" + name);
/*     */     }
/* 121 */     if (this.presentElements.get(name) != null) {
/* 122 */       throw new BuildException(""Element "" + name + "" already present"");
/*     */     }
/* 124 */     Element ret = new Element();
/* 125 */     this.presentElements.put(name, ret);
/* 126 */     return ret;
/*     */   }
/*     */   
/*     */   private Map getNsElements() {
/* 130 */     if (this.nsElements == null) {
/* 131 */       this.nsElements = new HashMap();
/* 132 */       Iterator i = this.macroDef.getElements().entrySet().iterator();
/* 133 */       while (i.hasNext()) {
/* 134 */         Map.Entry entry = i.next();
/* 135 */         this.nsElements.put(entry.getKey(), entry.getValue());
/*     */       } 
/*     */     } 
/*     */     
/* 139 */     return this.nsElements;
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Element
/*     */     implements TaskContainer
/*     */   {
/* 146 */     private List unknownElements = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 154 */     public void addTask(Task nestedTask) { this.unknownElements.add(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 161 */     public List getUnknownElements() { return this.unknownElements; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String macroSubs(String s, Map macroMapping) {
/* 171 */     if (s == null) {
/* 172 */       return null;
/*     */     }
/* 174 */     StringBuffer ret = new StringBuffer();
/* 175 */     StringBuffer macroName = null;
/* 176 */     boolean inMacro = false;
/* 177 */     int state = 0;
/* 178 */     for (int i = 0; i < s.length(); i++) {
/* 179 */       char ch = s.charAt(i);
/* 180 */       switch (state) {
/*     */         case 0:
/* 182 */           if (ch == '@') {
/* 183 */             state = 1; break;
/*     */           } 
/* 185 */           ret.append(ch);
/*     */           break;
/*     */         
/*     */         case 1:
/* 189 */           if (ch == '{') {
/* 190 */             state = 2;
/* 191 */             macroName = new StringBuffer(); break;
/* 192 */           }  if (ch == '@') {
/* 193 */             state = 3; break;
/*     */           } 
/* 195 */           state = 0;
/* 196 */           ret.append('@');
/* 197 */           ret.append(ch);
/*     */           break;
/*     */         
/*     */         case 2:
/* 201 */           if (ch == '}') {
/* 202 */             state = 0;
/* 203 */             String name = macroName.toString();
/* 204 */             String value = (String)macroMapping.get(name);
/* 205 */             if (value == null) {
/* 206 */               ret.append(""@{"" + name + ""}"");
/*     */             } else {
/* 208 */               ret.append(value);
/*     */             } 
/* 210 */             macroName = null; break;
/*     */           } 
/* 212 */           macroName.append(ch);
/*     */           break;
/*     */         
/*     */         case 3:
/* 216 */           state = 0;
/* 217 */           if (ch == '{') {
/* 218 */             ret.append(""@"");
/*     */           } else {
/* 220 */             ret.append(""@@"");
/*     */           } 
/* 222 */           ret.append(ch);
/*     */           break;
/*     */       } 
/*     */ 
/*     */     
/*     */     } 
/* 228 */     switch (state) {
/*     */ 
/*     */       
/*     */       case 1:
/* 232 */         ret.append('@');
/*     */         break;
/*     */       case 2:
/* 235 */         ret.append(""@{"");
/* 236 */         ret.append(macroName.toString());
/*     */         break;
/*     */       case 3:
/* 239 */         ret.append(""@@"");
/*     */         break;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 245 */     return ret.toString();
/*     */   }
/*     */   
/*     */   private UnknownElement copy(UnknownElement ue) {
/* 249 */     UnknownElement ret = new UnknownElement(ue.getTag());
/* 250 */     ret.setNamespace(ue.getNamespace());
/* 251 */     ret.setProject(getProject());
/* 252 */     ret.setQName(ue.getQName());
/* 253 */     ret.setTaskName(ue.getTaskName());
/* 254 */     ret.setLocation(ue.getLocation());
/* 255 */     if (getOwningTarget() == null) {
/* 256 */       Target t = new Target();
/* 257 */       t.setProject(getProject());
/* 258 */       ret.setOwningTarget(t);
/*     */     } else {
/* 260 */       ret.setOwningTarget(getOwningTarget());
/*     */     } 
/* 262 */     RuntimeConfigurable rc = new RuntimeConfigurable(ret, ue.getTaskName());
/*     */     
/* 264 */     rc.setPolyType(ue.getWrapper().getPolyType());
/* 265 */     Map map = ue.getWrapper().getAttributeMap();
/* 266 */     for (Iterator i = map.entrySet().iterator(); i.hasNext(); ) {
/* 267 */       Map.Entry entry = i.next();
/* 268 */       rc.setAttribute((String)entry.getKey(), macroSubs((String)entry.getValue(), this.localProperties));
/*     */     } 
/*     */ 
/*     */     
/* 272 */     rc.addText(macroSubs(ue.getWrapper().getText().toString(), this.localProperties));
/*     */ 
/*     */     
/* 275 */     Enumeration e = ue.getWrapper().getChildren();
/* 276 */     while (e.hasMoreElements()) {
/* 277 */       RuntimeConfigurable r = e.nextElement();
/* 278 */       UnknownElement unknownElement = (UnknownElement)r.getProxy();
/* 279 */       String tag = unknownElement.getTaskType();
/* 280 */       MacroDef.TemplateElement templateElement = (MacroDef.TemplateElement)getNsElements().get(tag);
/*     */       
/* 282 */       if (templateElement == null) {
/* 283 */         UnknownElement child = copy(unknownElement);
/* 284 */         rc.addChild(child.getWrapper());
/* 285 */         ret.addChild(child); continue;
/*     */       } 
/* 287 */       Element element = (Element)this.presentElements.get(tag);
/* 288 */       if (element == null) {
/* 289 */         if (!templateElement.isOptional()) {
/* 290 */           throw new BuildException(""Required nested element "" + templateElement.getName() + "" missing"");
/*     */         }
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 296 */       Iterator i = element.getUnknownElements().iterator();
/* 297 */       while (i.hasNext()) {
/* 298 */         UnknownElement child = i.next();
/* 299 */         rc.addChild(child.getWrapper());
/* 300 */         ret.addChild(child);
/*     */       } 
/*     */     } 
/*     */     
/* 304 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 314 */     this.localProperties = new Hashtable();
/* 315 */     Set copyKeys = new HashSet(this.map.keySet());
/* 316 */     for (Iterator i = this.macroDef.getAttributes().iterator(); i.hasNext(); ) {
/* 317 */       MacroDef.Attribute attribute = i.next();
/* 318 */       String value = (String)this.map.get(attribute.getName());
/* 319 */       if (value == null) {
/* 320 */         value = attribute.getDefault();
/* 321 */         value = macroSubs(value, this.localProperties);
/*     */       } 
/* 323 */       if (value == null) {
/* 324 */         throw new BuildException(""required attribute "" + attribute.getName() + "" not set"");
/*     */       }
/*     */       
/* 327 */       this.localProperties.put(attribute.getName(), value);
/* 328 */       copyKeys.remove(attribute.getName());
/*     */     } 
/* 330 */     if (copyKeys.contains(""id"")) {
/* 331 */       copyKeys.remove(""id"");
/*     */     }
/* 333 */     if (copyKeys.size() != 0) {
/* 334 */       throw new BuildException(""Unknown attribute"" + ((copyKeys.size() > 1) ? ""s "" : "" "") + copyKeys);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 340 */     UnknownElement c = copy(this.macroDef.getNestedTask());
/* 341 */     c.init();
/*     */     try {
/* 343 */       c.perform();
/*     */     } catch (BuildException ex) {
/* 345 */       throw ProjectHelper.addLocationToBuildException(ex, getLocation());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\MacroInstance.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Manifest,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.PrintWriter;
/*      */ import java.io.Reader;
/*      */ import java.io.StringWriter;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.util.CollectionUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Manifest
/*      */ {
/*      */   public static final String ATTRIBUTE_MANIFEST_VERSION = ""Manifest-Version"";
/*      */   public static final String ATTRIBUTE_SIGNATURE_VERSION = ""Signature-Version"";
/*      */   public static final String ATTRIBUTE_NAME = ""Name"";
/*      */   public static final String ATTRIBUTE_FROM = ""From"";
/*      */   public static final String ATTRIBUTE_CLASSPATH = ""Class-Path"";
/*      */   public static final String DEFAULT_MANIFEST_VERSION = ""1.0"";
/*      */   public static final int MAX_LINE_LENGTH = 72;
/*      */   public static final int MAX_SECTION_LENGTH = 70;
/*      */   public static final String EOL = ""\r\n"";
/*      */   
/*      */   public static class Attribute
/*      */   {
/*  129 */     private String name = null;
/*      */ 
/*      */     
/*  132 */     private Vector values = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  138 */     private int currentIndex = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Attribute() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  153 */     public Attribute(String line) throws ManifestException { parse(line); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Attribute(String name, String value) {
/*  163 */       this.name = name;
/*  164 */       setValue(value);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public int hashCode() {
/*  171 */       int hashCode = 0;
/*      */       
/*  173 */       if (this.name != null) {
/*  174 */         hashCode += this.name.hashCode();
/*      */       }
/*      */       
/*  177 */       hashCode += this.values.hashCode();
/*  178 */       return hashCode;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean equals(Object rhs) {
/*  185 */       if (rhs == null || rhs.getClass() != getClass()) {
/*  186 */         return false;
/*      */       }
/*      */       
/*  189 */       if (rhs == this) {
/*  190 */         return true;
/*      */       }
/*      */       
/*  193 */       Attribute rhsAttribute = (Attribute)rhs;
/*  194 */       String lhsKey = getKey();
/*  195 */       String rhsKey = rhsAttribute.getKey();
/*  196 */       if ((lhsKey == null && rhsKey != null) || (lhsKey != null && rhsKey == null) || !lhsKey.equals(rhsKey))
/*      */       {
/*      */         
/*  199 */         return false;
/*      */       }
/*      */       
/*  202 */       return CollectionUtils.equals(this.values, rhsAttribute.values);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void parse(String line) throws ManifestException {
/*  214 */       int index = line.indexOf("": "");
/*  215 */       if (index == -1) {
/*  216 */         throw new ManifestException(""Manifest line \"""" + line + ""\"" is not valid as it does not "" + ""contain a name and a value separated by ': ' "");
/*      */       }
/*      */ 
/*      */       
/*  220 */       this.name = line.substring(0, index);
/*  221 */       setValue(line.substring(index + 2));
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  230 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  239 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getKey() {
/*  248 */       if (this.name == null) {
/*  249 */         return null;
/*      */       }
/*  251 */       return this.name.toLowerCase();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setValue(String value) {
/*  260 */       if (this.currentIndex >= this.values.size()) {
/*  261 */         this.values.addElement(value);
/*  262 */         this.currentIndex = this.values.size() - 1;
/*      */       } else {
/*  264 */         this.values.setElementAt(value, this.currentIndex);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getValue() {
/*  274 */       if (this.values.size() == 0) {
/*  275 */         return null;
/*      */       }
/*      */       
/*  278 */       String fullValue = """";
/*  279 */       for (Enumeration e = getValues(); e.hasMoreElements(); ) {
/*  280 */         String value = e.nextElement();
/*  281 */         fullValue = fullValue + value + "" "";
/*      */       } 
/*  283 */       return fullValue.trim();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addValue(String value) {
/*  292 */       this.currentIndex++;
/*  293 */       setValue(value);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  302 */     public Enumeration getValues() { return this.values.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addContinuation(String line) {
/*  315 */       String currentValue = this.values.elementAt(this.currentIndex);
/*  316 */       setValue(currentValue + line.substring(1));
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void write(PrintWriter writer) throws IOException {
/*  327 */       for (Enumeration e = getValues(); e.hasMoreElements();) {
/*  328 */         writeValue(writer, e.nextElement());
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void writeValue(PrintWriter writer, String value) throws IOException {
/*  342 */       String line = this.name + "": "" + value;
/*  343 */       while ((line.getBytes()).length > 72) {
/*      */         
/*  345 */         int breakIndex = 70;
/*  346 */         String section = line.substring(0, breakIndex);
/*      */         
/*  348 */         while ((section.getBytes()).length > 70 && breakIndex > 0) {
/*  349 */           breakIndex--;
/*  350 */           section = line.substring(0, breakIndex);
/*      */         } 
/*  352 */         if (breakIndex == 0) {
/*  353 */           throw new IOException(""Unable to write manifest line "" + this.name + "": "" + value);
/*      */         }
/*      */         
/*  356 */         writer.print(section + ""\r\n"");
/*  357 */         line = "" "" + line.substring(breakIndex);
/*      */       } 
/*  359 */       writer.print(line + ""\r\n"");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class Section
/*      */   {
/*  370 */     private Vector warnings = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  376 */     private String name = null;
/*      */ 
/*      */     
/*  379 */     private Hashtable attributes = new Hashtable();
/*      */ 
/*      */     
/*  382 */     private Vector attributeIndex = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  389 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  398 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String read(BufferedReader reader) throws ManifestException, IOException {
/*      */       String nameReadAhead;
/*  416 */       Manifest.Attribute attribute = null;
/*      */       while (true)
/*  418 */       { String line = reader.readLine();
/*  419 */         if (line == null || line.length() == 0) {
/*  420 */           return null;
/*      */         }
/*  422 */         if (line.charAt(0) == ' ') {
/*      */           
/*  424 */           if (attribute == null) {
/*  425 */             if (this.name != null) {
/*      */ 
/*      */ 
/*      */               
/*  429 */               this.name += line.substring(1); continue;
/*      */             } 
/*  431 */             throw new ManifestException(""Can't start an attribute with a continuation line "" + line);
/*      */           } 
/*      */ 
/*      */           
/*  435 */           attribute.addContinuation(line);
/*      */           continue;
/*      */         } 
/*  438 */         attribute = new Manifest.Attribute(line);
/*  439 */         nameReadAhead = addAttributeAndCheck(attribute);
/*      */         
/*  441 */         attribute = getAttribute(attribute.getKey());
/*  442 */         if (nameReadAhead != null)
/*  443 */           break;  }  return nameReadAhead;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void merge(Section section) throws ManifestException {
/*  457 */       if ((this.name == null && section.getName() != null) || (this.name != null && !this.name.equalsIgnoreCase(section.getName())))
/*      */       {
/*      */         
/*  460 */         throw new ManifestException(""Unable to merge sections with different names"");
/*      */       }
/*      */ 
/*      */       
/*  464 */       Enumeration e = section.getAttributeKeys();
/*  465 */       Manifest.Attribute classpathAttribute = null;
/*  466 */       while (e.hasMoreElements()) {
/*  467 */         String attributeName = e.nextElement();
/*  468 */         Manifest.Attribute attribute = section.getAttribute(attributeName);
/*  469 */         if (attributeName.equalsIgnoreCase(""Class-Path"")) {
/*  470 */           if (classpathAttribute == null) {
/*  471 */             classpathAttribute = new Manifest.Attribute();
/*  472 */             classpathAttribute.setName(""Class-Path"");
/*      */           } 
/*  474 */           Enumeration cpe = attribute.getValues();
/*  475 */           while (cpe.hasMoreElements()) {
/*  476 */             String value = cpe.nextElement();
/*  477 */             classpathAttribute.addValue(value);
/*      */           } 
/*      */           continue;
/*      */         } 
/*  481 */         storeAttribute(attribute);
/*      */       } 
/*      */ 
/*      */       
/*  485 */       if (classpathAttribute != null)
/*      */       {
/*  487 */         storeAttribute(classpathAttribute);
/*      */       }
/*      */ 
/*      */       
/*  491 */       Enumeration warnEnum = section.warnings.elements();
/*  492 */       while (warnEnum.hasMoreElements()) {
/*  493 */         this.warnings.addElement(warnEnum.nextElement());
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void write(PrintWriter writer) throws IOException {
/*  505 */       if (this.name != null) {
/*  506 */         Manifest.Attribute nameAttr = new Manifest.Attribute(""Name"", this.name);
/*  507 */         nameAttr.write(writer);
/*      */       } 
/*  509 */       Enumeration e = getAttributeKeys();
/*  510 */       while (e.hasMoreElements()) {
/*  511 */         String key = e.nextElement();
/*  512 */         Manifest.Attribute attribute = getAttribute(key);
/*  513 */         attribute.write(writer);
/*      */       } 
/*  515 */       writer.print(""\r\n"");
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  527 */     public Manifest.Attribute getAttribute(String attributeName) { return (Manifest.Attribute)this.attributes.get(attributeName.toLowerCase()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  537 */     public Enumeration getAttributeKeys() { return this.attributeIndex.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getAttributeValue(String attributeName) {
/*  549 */       Manifest.Attribute attribute = getAttribute(attributeName.toLowerCase());
/*  550 */       if (attribute == null) {
/*  551 */         return null;
/*      */       }
/*  553 */       return attribute.getValue();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void removeAttribute(String attributeName) {
/*  562 */       String key = attributeName.toLowerCase();
/*  563 */       this.attributes.remove(key);
/*  564 */       this.attributeIndex.removeElement(key);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addConfiguredAttribute(Manifest.Attribute attribute) throws ManifestException {
/*  576 */       String check = addAttributeAndCheck(attribute);
/*  577 */       if (check != null) {
/*  578 */         throw new BuildException(""Specify the section name using the \""name\"" attribute of the <section> element rather than using a \""Name\"" manifest attribute"");
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String addAttributeAndCheck(Manifest.Attribute attribute) throws ManifestException {
/*  597 */       if (attribute.getName() == null || attribute.getValue() == null) {
/*  598 */         throw new BuildException(""Attributes must have name and value"");
/*      */       }
/*  600 */       if (attribute.getKey().equalsIgnoreCase(""Name"")) {
/*  601 */         this.warnings.addElement(""\""Name\"" attributes should not occur in the main section and must be the first element in all other sections: \"""" + attribute.getName() + "": "" + attribute.getValue() + ""\"""");
/*      */ 
/*      */ 
/*      */         
/*  605 */         return attribute.getValue();
/*      */       } 
/*      */       
/*  608 */       if (attribute.getKey().startsWith(""From"".toLowerCase())) {
/*  609 */         this.warnings.addElement(""Manifest attributes should not start with \""From\"" in \"""" + attribute.getName() + "": "" + attribute.getValue() + ""\"""");
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  614 */         String attributeKey = attribute.getKey();
/*  615 */         if (attributeKey.equalsIgnoreCase(""Class-Path""))
/*  616 */         { Manifest.Attribute classpathAttribute = (Manifest.Attribute)this.attributes.get(attributeKey);
/*      */ 
/*      */           
/*  619 */           if (classpathAttribute == null) {
/*  620 */             storeAttribute(attribute);
/*      */           } else {
/*  622 */             this.warnings.addElement(""Multiple Class-Path attributes are supported but violate the Jar specification and may not be correctly processed in all environments"");
/*      */ 
/*      */ 
/*      */             
/*  626 */             Enumeration e = attribute.getValues();
/*  627 */             while (e.hasMoreElements()) {
/*  628 */               String value = e.nextElement();
/*  629 */               classpathAttribute.addValue(value);
/*      */             } 
/*      */           }  }
/*  632 */         else { if (this.attributes.containsKey(attributeKey)) {
/*  633 */             throw new ManifestException(""The attribute \"""" + attribute.getName() + ""\"" may not occur more "" + ""than once in the same section"");
/*      */           }
/*      */ 
/*      */           
/*  637 */           storeAttribute(attribute); }
/*      */       
/*      */       } 
/*  640 */       return null;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object clone() {
/*  650 */       Section cloned = new Section();
/*  651 */       cloned.setName(this.name);
/*  652 */       Enumeration e = getAttributeKeys();
/*  653 */       while (e.hasMoreElements()) {
/*  654 */         String key = e.nextElement();
/*  655 */         Manifest.Attribute attribute = getAttribute(key);
/*  656 */         cloned.storeAttribute(new Manifest.Attribute(attribute.getName(), attribute.getValue()));
/*      */       } 
/*      */       
/*  659 */       return cloned;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void storeAttribute(Manifest.Attribute attribute) {
/*  668 */       if (attribute == null) {
/*      */         return;
/*      */       }
/*  671 */       String attributeKey = attribute.getKey();
/*  672 */       this.attributes.put(attributeKey, attribute);
/*  673 */       if (!this.attributeIndex.contains(attributeKey)) {
/*  674 */         this.attributeIndex.addElement(attributeKey);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  684 */     public Enumeration getWarnings() { return this.warnings.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public int hashCode() {
/*  691 */       int hashCode = 0;
/*      */       
/*  693 */       if (this.name != null) {
/*  694 */         hashCode += this.name.hashCode();
/*      */       }
/*      */       
/*  697 */       hashCode += this.attributes.hashCode();
/*  698 */       return hashCode;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean equals(Object rhs) {
/*  705 */       if (rhs == null || rhs.getClass() != getClass()) {
/*  706 */         return false;
/*      */       }
/*      */       
/*  709 */       if (rhs == this) {
/*  710 */         return true;
/*      */       }
/*      */       
/*  713 */       Section rhsSection = (Section)rhs;
/*      */       
/*  715 */       return CollectionUtils.equals(this.attributes, rhsSection.attributes);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  721 */   private String manifestVersion = ""1.0"";
/*      */ 
/*      */   
/*  724 */   private Section mainSection = new Section();
/*      */ 
/*      */   
/*  727 */   private Hashtable sections = new Hashtable();
/*      */ 
/*      */   
/*  730 */   private Vector sectionIndex = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static Manifest getDefaultManifest() throws BuildException {
/*      */     try {
/*  741 */       String defManifest = ""/org/apache/tools/ant/defaultManifest.mf"";
/*  742 */       InputStream in = Manifest.class.getResourceAsStream(defManifest);
/*  743 */       if (in == null) {
/*  744 */         throw new BuildException(""Could not find default manifest: "" + defManifest);
/*      */       }
/*      */       
/*      */       try {
/*  748 */         Manifest defaultManifest = new Manifest(new InputStreamReader(in, ""UTF-8""));
/*      */         
/*  750 */         Attribute createdBy = new Attribute(""Created-By"", System.getProperty(""java.vm.version"") + "" ("" + System.getProperty(""java.vm.vendor"") + "")"");
/*      */ 
/*      */         
/*  753 */         defaultManifest.getMainSection().storeAttribute(createdBy);
/*  754 */         return defaultManifest;
/*      */       } catch (UnsupportedEncodingException e) {
/*  756 */         return new Manifest(new InputStreamReader(in));
/*      */       } 
/*      */     } catch (ManifestException e) {
/*  759 */       throw new BuildException(""Default manifest is invalid !!"", e);
/*      */     } catch (IOException e) {
/*  761 */       throw new BuildException(""Unable to read default manifest"", e);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  767 */   public Manifest() { this.manifestVersion = null; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Manifest(Reader r) throws ManifestException, IOException {
/*  780 */     BufferedReader reader = new BufferedReader(r);
/*      */     
/*  782 */     String nextSectionName = this.mainSection.read(reader);
/*  783 */     String readManifestVersion = this.mainSection.getAttributeValue(""Manifest-Version"");
/*      */     
/*  785 */     if (readManifestVersion != null) {
/*  786 */       this.manifestVersion = readManifestVersion;
/*  787 */       this.mainSection.removeAttribute(""Manifest-Version"");
/*      */     } 
/*      */     
/*  790 */     String line = null;
/*  791 */     while ((line = reader.readLine()) != null) {
/*  792 */       if (line.length() == 0) {
/*      */         continue;
/*      */       }
/*      */       
/*  796 */       Section section = new Section();
/*  797 */       if (nextSectionName == null) {
/*  798 */         Attribute sectionName = new Attribute(line);
/*  799 */         if (!sectionName.getName().equalsIgnoreCase(""Name"")) {
/*  800 */           throw new ManifestException(""Manifest sections should start with a \""Name\"" attribute and not \"""" + sectionName.getName() + ""\"""");
/*      */         }
/*      */ 
/*      */ 
/*      */         
/*  805 */         nextSectionName = sectionName.getValue();
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  810 */         Attribute firstAttribute = new Attribute(line);
/*  811 */         section.addAttributeAndCheck(firstAttribute);
/*      */       } 
/*      */       
/*  814 */       section.setName(nextSectionName);
/*  815 */       nextSectionName = section.read(reader);
/*  816 */       addConfiguredSection(section);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addConfiguredSection(Section section) throws ManifestException {
/*  829 */     String sectionName = section.getName();
/*  830 */     if (sectionName == null) {
/*  831 */       throw new BuildException(""Sections must have a name"");
/*      */     }
/*  833 */     this.sections.put(sectionName, section);
/*  834 */     if (!this.sectionIndex.contains(sectionName)) {
/*  835 */       this.sectionIndex.addElement(sectionName);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addConfiguredAttribute(Attribute attribute) throws ManifestException {
/*  848 */     if (attribute.getKey() == null || attribute.getValue() == null) {
/*  849 */       throw new BuildException(""Attributes must have name and value"");
/*      */     }
/*  851 */     if (attribute.getKey().equalsIgnoreCase(""Manifest-Version"")) {
/*  852 */       this.manifestVersion = attribute.getValue();
/*      */     } else {
/*  854 */       this.mainSection.addConfiguredAttribute(attribute);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  867 */   public void merge(Manifest other) throws ManifestException { merge(other, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void merge(Manifest other, boolean overwriteMain) throws ManifestException {
/*  882 */     if (other != null) {
/*  883 */       if (overwriteMain) {
/*  884 */         this.mainSection = (Section)other.mainSection.clone();
/*      */       } else {
/*  886 */         this.mainSection.merge(other.mainSection);
/*      */       } 
/*      */       
/*  889 */       if (other.manifestVersion != null) {
/*  890 */         this.manifestVersion = other.manifestVersion;
/*      */       }
/*      */       
/*  893 */       Enumeration e = other.getSectionNames();
/*  894 */       while (e.hasMoreElements()) {
/*  895 */         String sectionName = e.nextElement();
/*  896 */         Section ourSection = (Section)this.sections.get(sectionName);
/*  897 */         Section otherSection = (Section)other.sections.get(sectionName);
/*      */         
/*  899 */         if (ourSection == null) {
/*  900 */           if (otherSection != null)
/*  901 */             addConfiguredSection((Section)otherSection.clone()); 
/*      */           continue;
/*      */         } 
/*  904 */         ourSection.merge(otherSection);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void write(PrintWriter writer) throws IOException {
/*  918 */     writer.print(""Manifest-Version: "" + this.manifestVersion + ""\r\n"");
/*  919 */     String signatureVersion = this.mainSection.getAttributeValue(""Signature-Version"");
/*      */     
/*  921 */     if (signatureVersion != null) {
/*  922 */       writer.print(""Signature-Version: "" + signatureVersion + ""\r\n"");
/*      */       
/*  924 */       this.mainSection.removeAttribute(""Signature-Version"");
/*      */     } 
/*  926 */     this.mainSection.write(writer);
/*      */ 
/*      */     
/*  929 */     if (signatureVersion != null) {
/*      */       try {
/*  931 */         Attribute svAttr = new Attribute(""Signature-Version"", signatureVersion);
/*      */         
/*  933 */         this.mainSection.addConfiguredAttribute(svAttr);
/*  934 */       } catch (ManifestException e) {}
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  939 */     Enumeration e = this.sectionIndex.elements();
/*  940 */     while (e.hasMoreElements()) {
/*  941 */       String sectionName = e.nextElement();
/*  942 */       Section section = getSection(sectionName);
/*  943 */       section.write(writer);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String toString() {
/*  954 */     StringWriter sw = new StringWriter();
/*      */     try {
/*  956 */       write(new PrintWriter(sw));
/*      */     } catch (IOException e) {
/*  958 */       return null;
/*      */     } 
/*  960 */     return sw.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Enumeration getWarnings() {
/*  969 */     Vector warnings = new Vector();
/*      */     
/*  971 */     Enumeration warnEnum = this.mainSection.getWarnings();
/*  972 */     while (warnEnum.hasMoreElements()) {
/*  973 */       warnings.addElement(warnEnum.nextElement());
/*      */     }
/*      */ 
/*      */     
/*  977 */     Enumeration e = this.sections.elements();
/*  978 */     while (e.hasMoreElements()) {
/*  979 */       Section section = e.nextElement();
/*  980 */       Enumeration e2 = section.getWarnings();
/*  981 */       while (e2.hasMoreElements()) {
/*  982 */         warnings.addElement(e2.nextElement());
/*      */       }
/*      */     } 
/*      */     
/*  986 */     return warnings.elements();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int hashCode() {
/*  993 */     int hashCode = 0;
/*      */     
/*  995 */     if (this.manifestVersion != null) {
/*  996 */       hashCode += this.manifestVersion.hashCode();
/*      */     }
/*  998 */     hashCode += this.mainSection.hashCode();
/*  999 */     hashCode += this.sections.hashCode();
/*      */     
/* 1001 */     return hashCode;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean equals(Object rhs) {
/* 1008 */     if (rhs == null || rhs.getClass() != getClass()) {
/* 1009 */       return false;
/*      */     }
/*      */     
/* 1012 */     if (rhs == this) {
/* 1013 */       return true;
/*      */     }
/*      */     
/* 1016 */     Manifest rhsManifest = (Manifest)rhs;
/* 1017 */     if (this.manifestVersion == null) {
/* 1018 */       if (rhsManifest.manifestVersion != null) {
/* 1019 */         return false;
/*      */       }
/* 1021 */     } else if (!this.manifestVersion.equals(rhsManifest.manifestVersion)) {
/* 1022 */       return false;
/*      */     } 
/*      */     
/* 1025 */     if (!this.mainSection.equals(rhsManifest.mainSection)) {
/* 1026 */       return false;
/*      */     }
/*      */     
/* 1029 */     return CollectionUtils.equals(this.sections, rhsManifest.sections);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1038 */   public String getManifestVersion() { return this.manifestVersion; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1047 */   public Section getMainSection() { return this.mainSection; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1058 */   public Section getSection(String name) { return (Section)this.sections.get(name); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1067 */   public Enumeration getSectionNames() { return this.sectionIndex.elements(); }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Manifest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ManifestException,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ManifestException
/*    */   extends Exception
/*    */ {
/* 69 */   public ManifestException(String msg) { super(msg); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ManifestException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ManifestTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ManifestTask
/*     */   extends Task
/*     */ {
/*  87 */   private Manifest nestedManifest = new Manifest();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File manifestFile;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Mode mode;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String encoding;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Mode
/*     */     extends EnumeratedAttribute
/*     */   {
/* 114 */     public String[] getValues() { return new String[] { ""update"", ""replace"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ManifestTask() {
/* 122 */     this.mode = new Mode();
/* 123 */     this.mode.setValue(""replace"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void addConfiguredSection(Manifest.Section section) throws ManifestException { this.nestedManifest.addConfiguredSection(section); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void addConfiguredAttribute(Manifest.Attribute attribute) throws ManifestException { this.nestedManifest.addConfiguredAttribute(attribute); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setFile(File f) { this.manifestFile = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setMode(Mode m) { this.mode = m; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 181 */     if (this.manifestFile == null) {
/* 182 */       throw new BuildException(""the file attribute is required"");
/*     */     }
/*     */     
/* 185 */     Manifest toWrite = Manifest.getDefaultManifest();
/* 186 */     Manifest current = null;
/* 187 */     BuildException error = null;
/*     */     
/* 189 */     if (this.manifestFile.exists()) {
/* 190 */       FileInputStream fis = null;
/* 191 */       InputStreamReader isr = null;
/*     */       try {
/* 193 */         fis = new FileInputStream(this.manifestFile);
/* 194 */         if (this.encoding == null) {
/* 195 */           isr = new InputStreamReader(fis, ""UTF-8"");
/*     */         } else {
/* 197 */           isr = new InputStreamReader(fis, this.encoding);
/*     */         } 
/* 199 */         current = new Manifest(isr);
/*     */       } catch (ManifestException m) {
/* 201 */         error = new BuildException(""Existing manifest "" + this.manifestFile + "" is invalid"", m, getLocation());
/*     */       } catch (IOException e) {
/*     */         
/* 204 */         error = new BuildException(""Failed to read "" + this.manifestFile, e, getLocation());
/*     */       } finally {
/*     */         
/* 207 */         if (isr != null) {
/*     */           try {
/* 209 */             isr.close();
/* 210 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 218 */       if (this.mode.getValue().equals(""update"") && this.manifestFile.exists()) {
/* 219 */         if (current != null) {
/* 220 */           toWrite.merge(current);
/* 221 */         } else if (error != null) {
/* 222 */           throw error;
/*     */         } 
/*     */       }
/*     */       
/* 226 */       toWrite.merge(this.nestedManifest);
/*     */     } catch (ManifestException m) {
/* 228 */       throw new BuildException(""Manifest is invalid"", m, getLocation());
/*     */     } 
/*     */     
/* 231 */     if (toWrite.equals(current)) {
/* 232 */       log(""Manifest has not changed, do not recreate"", 3);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 237 */     PrintWriter w = null;
/*     */     try {
/* 239 */       FileOutputStream fos = new FileOutputStream(this.manifestFile);
/* 240 */       OutputStreamWriter osw = new OutputStreamWriter(fos, ""UTF-8"");
/* 241 */       w = new PrintWriter(osw);
/* 242 */       toWrite.write(w);
/*     */     } catch (IOException e) {
/* 244 */       throw new BuildException(""Failed to write "" + this.manifestFile, e, getLocation());
/*     */     } finally {
/*     */       
/* 247 */       if (w != null)
/* 248 */         w.close(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ManifestTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.MatchingTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.types.selectors.AndSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsSelector;
/*     */ import org.apache.tools.ant.types.selectors.DateSelector;
/*     */ import org.apache.tools.ant.types.selectors.DependSelector;
/*     */ import org.apache.tools.ant.types.selectors.DepthSelector;
/*     */ import org.apache.tools.ant.types.selectors.DifferentSelector;
/*     */ import org.apache.tools.ant.types.selectors.ExtendSelector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.FilenameSelector;
/*     */ import org.apache.tools.ant.types.selectors.MajoritySelector;
/*     */ import org.apache.tools.ant.types.selectors.NoneSelector;
/*     */ import org.apache.tools.ant.types.selectors.NotSelector;
/*     */ import org.apache.tools.ant.types.selectors.OrSelector;
/*     */ import org.apache.tools.ant.types.selectors.PresentSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectorContainer;
/*     */ import org.apache.tools.ant.types.selectors.SizeSelector;
/*     */ import org.apache.tools.ant.types.selectors.TypeSelector;
/*     */ import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class MatchingTask
/*     */   extends Task
/*     */   implements SelectorContainer
/*     */ {
/* 103 */   protected FileSet fileset = new FileSet();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/* 109 */     super.setProject(project);
/* 110 */     this.fileset.setProject(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public PatternSet.NameEntry createInclude() { return this.fileset.createInclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public PatternSet.NameEntry createIncludesFile() { return this.fileset.createIncludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public PatternSet.NameEntry createExclude() { return this.fileset.createExclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public PatternSet.NameEntry createExcludesFile() { return this.fileset.createExcludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public PatternSet createPatternSet() { return this.fileset.createPatternSet(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setIncludes(String includes) { this.fileset.setIncludes(includes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetItems(String itemString) {
/* 171 */     log(""The items attribute is deprecated. Please use the includes attribute."", 1);
/*     */     
/* 173 */     if (itemString == null || itemString.equals(""*"") || itemString.equals(""."")) {
/*     */       
/* 175 */       createInclude().setName(""**"");
/*     */     } else {
/* 177 */       StringTokenizer tok = new StringTokenizer(itemString, "", "");
/* 178 */       while (tok.hasMoreTokens()) {
/* 179 */         String pattern = tok.nextToken().trim();
/* 180 */         if (pattern.length() > 0) {
/* 181 */           createInclude().setName(pattern + ""/**"");
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   public void setExcludes(String excludes) { this.fileset.setExcludes(excludes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetIgnore(String ignoreString) {
/* 204 */     log(""The ignore attribute is deprecated.Please use the excludes attribute."", 1);
/*     */     
/* 206 */     if (ignoreString != null && ignoreString.length() > 0) {
/* 207 */       StringTokenizer tok = new StringTokenizer(ignoreString, "", "", false);
/*     */       
/* 209 */       while (tok.hasMoreTokens()) {
/* 210 */         createExclude().setName(""**/"" + tok.nextToken().trim() + ""/**"");
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setDefaultexcludes(boolean useDefaultExcludes) { this.fileset.setDefaultexcludes(useDefaultExcludes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected DirectoryScanner getDirectoryScanner(File baseDir) {
/* 230 */     this.fileset.setDir(baseDir);
/* 231 */     return this.fileset.getDirectoryScanner(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setIncludesfile(File includesfile) { this.fileset.setIncludesfile(includesfile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 251 */   public void setExcludesfile(File excludesfile) { this.fileset.setExcludesfile(excludesfile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public void setCaseSensitive(boolean isCaseSensitive) { this.fileset.setCaseSensitive(isCaseSensitive); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void setFollowSymlinks(boolean followSymlinks) { this.fileset.setFollowSymlinks(followSymlinks); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   public boolean hasSelectors() { return this.fileset.hasSelectors(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public int selectorCount() { return this.fileset.selectorCount(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public FileSelector[] getSelectors(Project p) { return this.fileset.getSelectors(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public Enumeration selectorElements() { return this.fileset.selectorElements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void appendSelector(FileSelector selector) { this.fileset.appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 325 */   public void addSelector(SelectSelector selector) { this.fileset.addSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 333 */   public void addAnd(AndSelector selector) { this.fileset.addAnd(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public void addOr(OrSelector selector) { this.fileset.addOr(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 349 */   public void addNot(NotSelector selector) { this.fileset.addNot(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 357 */   public void addNone(NoneSelector selector) { this.fileset.addNone(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 365 */   public void addMajority(MajoritySelector selector) { this.fileset.addMajority(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 373 */   public void addDate(DateSelector selector) { this.fileset.addDate(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 381 */   public void addSize(SizeSelector selector) { this.fileset.addSize(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 389 */   public void addFilename(FilenameSelector selector) { this.fileset.addFilename(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 397 */   public void addCustom(ExtendSelector selector) { this.fileset.addCustom(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public void addContains(ContainsSelector selector) { this.fileset.addContains(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 413 */   public void addPresent(PresentSelector selector) { this.fileset.addPresent(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 421 */   public void addDepth(DepthSelector selector) { this.fileset.addDepth(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 429 */   public void addDepend(DependSelector selector) { this.fileset.addDepend(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 437 */   public void addContainsRegexp(ContainsRegexpSelector selector) { this.fileset.addContainsRegexp(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 446 */   public void addDifferent(DifferentSelector selector) { this.fileset.addDifferent(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 455 */   public void addType(TypeSelector selector) { this.fileset.addType(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 464 */   public void addModified(ModifiedSelector selector) { this.fileset.addModified(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 473 */   public void add(FileSelector selector) { this.fileset.add(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 482 */   protected final FileSet getImplicitFileSet() { return this.fileset; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\MatchingTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Mkdir,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Mkdir
/*     */   extends Task
/*     */ {
/*     */   private static final int MKDIR_RETRY_SLEEP_MILLIS = 10;
/*     */   private File dir;
/*     */   
/*     */   public void execute() throws BuildException {
/*  85 */     if (this.dir == null) {
/*  86 */       throw new BuildException(""dir attribute is required"", getLocation());
/*     */     }
/*     */     
/*  89 */     if (this.dir.isFile()) {
/*  90 */       throw new BuildException(""Unable to create directory as a file already exists with that name: "" + this.dir.getAbsolutePath());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  95 */     if (!this.dir.exists()) {
/*  96 */       boolean result = mkdirs(this.dir);
/*  97 */       if (!result) {
/*  98 */         String msg = ""Directory "" + this.dir.getAbsolutePath() + "" creation was not successful for an unknown reason"";
/*     */         
/* 100 */         throw new BuildException(msg, getLocation());
/*     */       } 
/* 102 */       log(""Created dir: "" + this.dir.getAbsolutePath());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean mkdirs(File f) {
/* 120 */     if (!f.mkdirs()) {
/*     */       try {
/* 122 */         Thread.sleep(10L);
/* 123 */         return f.mkdirs();
/*     */       } catch (InterruptedException ex) {
/* 125 */         return f.mkdirs();
/*     */       } 
/*     */     }
/* 128 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Mkdir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Move,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Move
/*     */   extends Copy
/*     */ {
/* 101 */   public Move() { setOverwrite(true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/* 114 */     if (this.completeDirMap.size() > 0) {
/* 115 */       Enumeration e = this.completeDirMap.keys();
/* 116 */       while (e.hasMoreElements()) {
/* 117 */         File fromDir = e.nextElement();
/* 118 */         File toDir = (File)this.completeDirMap.get(fromDir);
/*     */         try {
/* 120 */           log(""Attempting to rename dir: "" + fromDir + "" to "" + toDir, this.verbosity);
/*     */           
/* 122 */           renameFile(fromDir, toDir, this.filtering, this.forceOverwrite);
/*     */         } catch (IOException ioe) {
/* 124 */           String msg = ""Failed to rename dir "" + fromDir + "" to "" + toDir + "" due to "" + ioe.getMessage();
/*     */ 
/*     */           
/* 127 */           throw new BuildException(msg, ioe, getLocation());
/*     */         } 
/*     */       } 
/*     */     } 
/* 131 */     if (this.fileCopyMap.size() > 0) {
/* 132 */       log(""Moving "" + this.fileCopyMap.size() + "" files to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */       
/* 135 */       Enumeration e = this.fileCopyMap.keys();
/* 136 */       while (e.hasMoreElements()) {
/* 137 */         String fromFile = e.nextElement();
/*     */         
/* 139 */         File f = new File(fromFile);
/* 140 */         boolean selfMove = false;
/* 141 */         if (f.exists()) {
/* 142 */           String[] toFiles = (String[])this.fileCopyMap.get(fromFile);
/* 143 */           for (int i = 0; i < toFiles.length; i++) {
/* 144 */             String toFile = toFiles[i];
/*     */             
/* 146 */             if (fromFile.equals(toFile)) {
/* 147 */               log(""Skipping self-move of "" + fromFile, this.verbosity);
/* 148 */               selfMove = true;
/*     */             
/*     */             }
/*     */             else {
/*     */ 
/*     */               
/* 154 */               File d = new File(toFile);
/* 155 */               if (i + 1 == toFiles.length && !selfMove) {
/*     */ 
/*     */                 
/* 158 */                 moveFile(f, d, this.filtering, this.forceOverwrite);
/*     */               } else {
/* 160 */                 copyFile(f, d, this.filtering, this.forceOverwrite);
/*     */               } 
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/* 167 */     if (this.includeEmpty) {
/* 168 */       Enumeration e = this.dirCopyMap.keys();
/* 169 */       int createCount = 0;
/* 170 */       while (e.hasMoreElements()) {
/* 171 */         String fromDirName = e.nextElement();
/* 172 */         String[] toDirNames = (String[])this.dirCopyMap.get(fromDirName);
/* 173 */         boolean selfMove = false;
/* 174 */         for (int i = 0; i < toDirNames.length; i++) {
/*     */           
/* 176 */           if (fromDirName.equals(toDirNames[i])) {
/* 177 */             log(""Skipping self-move of "" + fromDirName, this.verbosity);
/* 178 */             selfMove = true;
/*     */           }
/*     */           else {
/*     */             
/* 182 */             File d = new File(toDirNames[i]);
/* 183 */             if (!d.exists()) {
/* 184 */               if (!d.mkdirs()) {
/* 185 */                 log(""Unable to create directory "" + d.getAbsolutePath(), 0);
/*     */               } else {
/*     */                 
/* 188 */                 createCount++;
/*     */               } 
/*     */             }
/*     */           } 
/*     */         } 
/* 193 */         File fromDir = new File(fromDirName);
/* 194 */         if (!selfMove && okToDelete(fromDir)) {
/* 195 */           deleteDir(fromDir);
/*     */         }
/*     */       } 
/*     */ 
/*     */       
/* 200 */       if (createCount > 0) {
/* 201 */         log(""Moved "" + this.dirCopyMap.size() + "" empty director"" + ((this.dirCopyMap.size() == 1) ? ""y"" : ""ies"") + "" to "" + createCount + "" empty director"" + ((createCount == 1) ? ""y"" : ""ies"") + "" under "" + this.destDir.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void moveFile(File fromFile, File toFile, boolean filtering, boolean overwrite) {
/* 218 */     boolean moved = false;
/*     */     try {
/* 220 */       log(""Attempting to rename: "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */       
/* 222 */       moved = renameFile(fromFile, toFile, filtering, this.forceOverwrite);
/*     */     } catch (IOException ioe) {
/* 224 */       String msg = ""Failed to rename "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */ 
/*     */       
/* 227 */       throw new BuildException(msg, ioe, getLocation());
/*     */     } 
/*     */     
/* 230 */     if (!moved) {
/* 231 */       copyFile(fromFile, toFile, filtering, overwrite);
/* 232 */       if (!fromFile.delete()) {
/* 233 */         throw new BuildException(""Unable to delete file "" + fromFile.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void copyFile(File fromFile, File toFile, boolean filtering, boolean overwrite) {
/*     */     try {
/* 250 */       log(""Copying "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */ 
/*     */       
/* 253 */       FilterSetCollection executionFilters = new FilterSetCollection();
/*     */       
/* 255 */       if (filtering) {
/* 256 */         executionFilters.addFilterSet(getProject().getGlobalFilterSet());
/*     */       }
/*     */       
/* 259 */       Enumeration filterEnum = getFilterSets().elements();
/*     */       
/* 261 */       while (filterEnum.hasMoreElements()) {
/* 262 */         executionFilters.addFilterSet(filterEnum.nextElement());
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 267 */       getFileUtils().copyFile(fromFile, toFile, executionFilters, getFilterChains(), this.forceOverwrite, getPreserveLastModified(), getEncoding(), getOutputEncoding(), getProject());
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*     */     catch (IOException ioe) {
/*     */ 
/*     */ 
/*     */       
/* 276 */       String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */ 
/*     */       
/* 279 */       throw new BuildException(msg, ioe, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean okToDelete(File d) {
/* 291 */     String[] list = d.list();
/* 292 */     if (list == null) {
/* 293 */       return false;
/*     */     }
/*     */     
/* 296 */     for (int i = 0; i < list.length; i++) {
/* 297 */       String s = list[i];
/* 298 */       File f = new File(d, s);
/* 299 */       if (f.isDirectory()) {
/* 300 */         if (!okToDelete(f)) {
/* 301 */           return false;
/*     */         }
/*     */       } else {
/* 304 */         return false;
/*     */       } 
/*     */     } 
/*     */     
/* 308 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void deleteDir(File d) {
/* 316 */     String[] list = d.list();
/* 317 */     if (list == null) {
/*     */       return;
/*     */     }
/*     */     
/* 321 */     for (int i = 0; i < list.length; i++) {
/* 322 */       String s = list[i];
/* 323 */       File f = new File(d, s);
/* 324 */       if (f.isDirectory()) {
/* 325 */         deleteDir(f);
/*     */       } else {
/* 327 */         throw new BuildException(""UNEXPECTED ERROR - The file "" + f.getAbsolutePath() + "" should not exist!"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 332 */     log(""Deleting directory "" + d.getAbsolutePath(), this.verbosity);
/* 333 */     if (!d.delete()) {
/* 334 */       throw new BuildException(""Unable to delete directory "" + d.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean renameFile(File sourceFile, File destFile, boolean filtering, boolean overwrite) throws IOException, BuildException {
/* 361 */     boolean renamed = true;
/* 362 */     if ((getFilterSets() != null && getFilterSets().size() > 0) || (getFilterChains() != null && getFilterChains().size() > 0)) {
/*     */       
/* 364 */       renamed = false;
/*     */     }
/* 366 */     else if (!filtering) {
/*     */ 
/*     */       
/* 369 */       String parentPath = destFile.getParent();
/* 370 */       if (parentPath != null) {
/* 371 */         File parent = new File(parentPath);
/* 372 */         if (!parent.exists()) {
/* 373 */           parent.mkdirs();
/*     */         }
/*     */       } 
/*     */       
/* 377 */       if (destFile.exists() && destFile.isFile() && 
/* 378 */         !destFile.delete()) {
/* 379 */         throw new BuildException(""Unable to remove existing file "" + destFile);
/*     */       }
/*     */ 
/*     */       
/* 383 */       renamed = sourceFile.renameTo(destFile);
/*     */     } else {
/* 385 */       renamed = false;
/*     */     } 
/*     */     
/* 388 */     return renamed;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Move.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Pack,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Pack
/*     */   extends Task
/*     */ {
/*     */   protected File zipFile;
/*     */   protected File source;
/*     */   
/*  84 */   public void setZipfile(File zipFile) { this.zipFile = zipFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setDestfile(File zipFile) { setZipfile(zipFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setSrc(File src) { this.source = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 109 */     if (this.zipFile == null) {
/* 110 */       throw new BuildException(""zipfile attribute is required"", getLocation());
/*     */     }
/*     */     
/* 113 */     if (this.zipFile.isDirectory()) {
/* 114 */       throw new BuildException(""zipfile attribute must not represent a directory!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 118 */     if (this.source == null) {
/* 119 */       throw new BuildException(""src attribute is required"", getLocation());
/*     */     }
/*     */     
/* 122 */     if (this.source.isDirectory()) {
/* 123 */       throw new BuildException(""Src attribute must not represent a directory!"", getLocation());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 133 */     validate();
/*     */     
/* 135 */     if (!this.source.exists()) {
/* 136 */       log(""Nothing to do: "" + this.source.getAbsolutePath() + "" doesn't exist."");
/*     */     }
/* 138 */     else if (this.zipFile.lastModified() < this.source.lastModified()) {
/* 139 */       log(""Building: "" + this.zipFile.getAbsolutePath());
/* 140 */       pack();
/*     */     } else {
/* 142 */       log(""Nothing to do: "" + this.zipFile.getAbsolutePath() + "" is up to date."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void zipFile(InputStream in, OutputStream zOut) throws IOException {
/* 155 */     byte[] buffer = new byte[8192];
/* 156 */     int count = 0;
/*     */     do {
/* 158 */       zOut.write(buffer, 0, count);
/* 159 */       count = in.read(buffer, 0, buffer.length);
/* 160 */     } while (count != -1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, OutputStream zOut) throws IOException {
/* 171 */     FileInputStream fIn = new FileInputStream(file);
/*     */     try {
/* 173 */       zipFile(fIn, zOut);
/*     */     } finally {
/* 175 */       fIn.close();
/*     */     } 
/*     */   }
/*     */   
/*     */   protected abstract void pack();
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Pack.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Parallel,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Enumeration;
/*     */ import java.util.List;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Parallel
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*     */   public static class TaskList
/*     */     implements TaskContainer
/*     */   {
/*  94 */     private List tasks = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 102 */     public void addTask(Task nestedTask) throws BuildException { this.tasks.add(nestedTask); }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 107 */   private Vector nestedTasks = new Vector();
/*     */ 
/*     */   
/* 110 */   private final Object semaphore = new Object();
/*     */ 
/*     */   
/* 113 */   private int numThreads = 0;
/*     */ 
/*     */   
/* 116 */   private int numThreadsPerProcessor = 0;
/*     */ 
/*     */ 
/*     */   
/*     */   private long timeout;
/*     */ 
/*     */ 
/*     */   
/*     */   private volatile boolean stillRunning;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean timedOut;
/*     */ 
/*     */   
/*     */   private boolean failOnAny;
/*     */ 
/*     */   
/*     */   private TaskList daemonTasks;
/*     */ 
/*     */   
/*     */   private StringBuffer exceptionMessage;
/*     */ 
/*     */   
/* 140 */   private int numExceptions = 0;
/*     */ 
/*     */ 
/*     */   
/*     */   private Throwable firstException;
/*     */ 
/*     */   
/*     */   private Location firstLocation;
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDaemons(TaskList daemonTasks) {
/* 152 */     if (this.daemonTasks != null) {
/* 153 */       throw new BuildException(""Only one daemon group is supported"");
/*     */     }
/* 155 */     this.daemonTasks = daemonTasks;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPollInterval(int pollInterval) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setFailOnAny(boolean failOnAny) { this.failOnAny = failOnAny; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void addTask(Task nestedTask) { this.nestedTasks.addElement(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setThreadsPerProcessor(int numThreadsPerProcessor) { this.numThreadsPerProcessor = numThreadsPerProcessor; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setThreadCount(int numThreads) { this.numThreads = numThreads; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 227 */   public void setTimeout(long timeout) { this.timeout = timeout; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 238 */     updateThreadCounts();
/* 239 */     if (this.numThreads == 0) {
/* 240 */       this.numThreads = this.nestedTasks.size();
/*     */     }
/* 242 */     spinThreads();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void updateThreadCounts() {
/* 249 */     if (this.numThreadsPerProcessor != 0) {
/* 250 */       int numProcessors = getNumProcessors();
/* 251 */       if (numProcessors != 0) {
/* 252 */         this.numThreads = numProcessors * this.numThreadsPerProcessor;
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private void processExceptions(TaskRunnable[] runnables) {
/* 258 */     if (runnables == null) {
/*     */       return;
/*     */     }
/* 261 */     for (int i = 0; i < runnables.length; i++) {
/* 262 */       Throwable t = runnables[i].getException();
/* 263 */       if (t != null) {
/* 264 */         this.numExceptions++;
/* 265 */         if (this.firstException == null) {
/* 266 */           this.firstException = t;
/*     */         }
/* 268 */         if (t instanceof BuildException && this.firstLocation == Location.UNKNOWN_LOCATION)
/*     */         {
/* 270 */           this.firstLocation = ((BuildException)t).getLocation();
/*     */         }
/* 272 */         this.exceptionMessage.append(StringUtils.LINE_SEP);
/* 273 */         this.exceptionMessage.append(t.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void spinThreads() throws BuildException {
/* 284 */     int numTasks = this.nestedTasks.size();
/* 285 */     TaskRunnable[] runnables = new TaskRunnable[numTasks];
/* 286 */     this.stillRunning = true;
/* 287 */     this.timedOut = false;
/*     */     
/* 289 */     int threadNumber = 0;
/* 290 */     for (Enumeration e = this.nestedTasks.elements(); e.hasMoreElements(); 
/* 291 */       threadNumber++) {
/* 292 */       Task nestedTask = e.nextElement();
/* 293 */       runnables[threadNumber] = new TaskRunnable(this, nestedTask);
/*     */     } 
/*     */ 
/*     */     
/* 297 */     int maxRunning = (numTasks < this.numThreads) ? numTasks : this.numThreads;
/* 298 */     TaskRunnable[] running = new TaskRunnable[maxRunning];
/*     */     
/* 300 */     threadNumber = 0;
/* 301 */     ThreadGroup group = new ThreadGroup(""parallel"");
/*     */     
/* 303 */     TaskRunnable[] daemons = null;
/* 304 */     if (this.daemonTasks != null && this.daemonTasks.tasks.size() != 0) {
/* 305 */       daemons = new TaskRunnable[this.daemonTasks.tasks.size()];
/*     */     }
/*     */     
/* 308 */     synchronized (this.semaphore) {
/*     */       
/* 310 */       if (daemons != null) {
/* 311 */         for (int i = 0; i < daemons.length; i++) {
/* 312 */           daemons[i] = new TaskRunnable(this, this.daemonTasks.tasks.get(i));
/* 313 */           Thread daemonThread = new Thread(group, daemons[i]);
/* 314 */           daemonThread.setDaemon(true);
/* 315 */           daemonThread.start();
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 321 */       for (int i = 0; i < maxRunning; i++) {
/* 322 */         running[i] = runnables[threadNumber++];
/* 323 */         Thread thread = new Thread(group, running[i]);
/* 324 */         thread.start();
/*     */       } 
/*     */       
/* 327 */       if (this.timeout != 0L) {
/*     */         
/* 329 */         Thread timeoutThread = new Thread(this) { private final Parallel this$0;
/*     */             public synchronized void run() {
/*     */               try {
/* 332 */                 wait(this.this$0.timeout);
/* 333 */                 synchronized (this.this$0.semaphore) {
/* 334 */                   this.this$0.stillRunning = false;
/* 335 */                   this.this$0.timedOut = true;
/* 336 */                   this.this$0.semaphore.notifyAll();
/*     */                 } 
/* 338 */               } catch (InterruptedException e) {}
/*     */             } }
/*     */           ;
/*     */ 
/*     */         
/* 343 */         timeoutThread.start();
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 348 */       label79: while (threadNumber < numTasks && this.stillRunning) {
/* 349 */         for (int i = 0; i < maxRunning; i++) {
/* 350 */           if (running[i] == null || (running[i]).finished) {
/* 351 */             running[i] = runnables[threadNumber++];
/* 352 */             Thread thread = new Thread(group, running[i]);
/* 353 */             thread.start();
/*     */ 
/*     */ 
/*     */             
/*     */             continue label79;
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/*     */         try {
/* 363 */           this.semaphore.wait();
/* 364 */         } catch (InterruptedException ie) {}
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 373 */       while (this.stillRunning) {
/* 374 */         int i = 0; while (true) { if (i >= maxRunning)
/*     */           
/*     */           { 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 386 */             this.stillRunning = false; break; }  if (running[i] != null && !(running[i]).finished)
/*     */             try { this.semaphore.wait(); break; } catch (InterruptedException ie) { break; }   i++; }
/*     */       
/*     */       } 
/* 390 */     }  if (this.timedOut) {
/* 391 */       throw new BuildException(""Parallel execution timed out"");
/*     */     }
/*     */ 
/*     */     
/* 395 */     this.exceptionMessage = new StringBuffer();
/* 396 */     this.numExceptions = 0;
/* 397 */     this.firstException = null;
/* 398 */     this.firstLocation = Location.UNKNOWN_LOCATION;
/* 399 */     processExceptions(daemons);
/* 400 */     processExceptions(runnables);
/*     */     
/* 402 */     if (this.numExceptions == 1) {
/* 403 */       if (this.firstException instanceof BuildException) {
/* 404 */         throw (BuildException)this.firstException;
/*     */       }
/* 406 */       throw new BuildException(this.firstException);
/*     */     } 
/* 408 */     if (this.numExceptions > 1) {
/* 409 */       throw new BuildException(this.exceptionMessage.toString(), this.firstLocation);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int getNumProcessors() {
/*     */     try {
/* 421 */       Class[] paramTypes = new Class[0];
/* 422 */       Method availableProcessors = Runtime.class.getMethod(""availableProcessors"", paramTypes);
/*     */ 
/*     */       
/* 425 */       Object[] args = new Object[0];
/* 426 */       Integer ret = (Integer)availableProcessors.invoke(Runtime.getRuntime(), args);
/* 427 */       return ret.intValue();
/*     */     } catch (Exception e) {
/*     */       
/* 430 */       return 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private class TaskRunnable
/*     */     implements Runnable
/*     */   {
/*     */     private Throwable exception;
/*     */     
/*     */     private Task task;
/*     */     
/*     */     boolean finished;
/*     */     
/*     */     private final Parallel this$0;
/*     */     
/*     */     TaskRunnable(Parallel this$0, Task task) {
/* 447 */       this.this$0 = this$0;
/* 448 */       this.task = task;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void run() {
/*     */       try {
/* 457 */         this.task.perform();
/*     */       } catch (Throwable t) {
/* 459 */         this.exception = t = null;
/*     */       } finally {
/* 461 */         synchronized (this.this$0.semaphore) {
/* 462 */           this.finished = true;
/* 463 */           if (this.this$0.failOnAny) {
/* 464 */             this.this$0.stillRunning = false;
/*     */           }
/* 466 */           this.this$0.semaphore.notifyAll();
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 476 */     public Throwable getException() { return this.exception; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Parallel.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Patch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Patch
/*     */   extends Task
/*     */ {
/*     */   private File originalFile;
/*     */   private File directory;
/*     */   private boolean havePatchfile = false;
/*  78 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  86 */   public void setOriginalfile(File file) { this.originalFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDestfile(File file) {
/*  96 */     if (file != null) {
/*  97 */       this.cmd.createArgument().setValue(""-o"");
/*  98 */       this.cmd.createArgument().setFile(file);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPatchfile(File file) {
/* 107 */     if (!file.exists()) {
/* 108 */       throw new BuildException(""patchfile "" + file + "" doesn't exist"", getLocation());
/*     */     }
/*     */     
/* 111 */     this.cmd.createArgument().setValue(""-i"");
/* 112 */     this.cmd.createArgument().setFile(file);
/* 113 */     this.havePatchfile = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBackups(boolean backups) {
/* 121 */     if (backups) {
/* 122 */       this.cmd.createArgument().setValue(""-b"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIgnorewhitespace(boolean ignore) {
/* 131 */     if (ignore) {
/* 132 */       this.cmd.createArgument().setValue(""-l"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setStrip(int num) throws BuildException {
/* 145 */     if (num < 0) {
/* 146 */       throw new BuildException(""strip has to be >= 0"", getLocation());
/*     */     }
/* 148 */     this.cmd.createArgument().setValue(""-p"" + num);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean q) {
/* 156 */     if (q) {
/* 157 */       this.cmd.createArgument().setValue(""-s"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setReverse(boolean r) {
/* 167 */     if (r) {
/* 168 */       this.cmd.createArgument().setValue(""-R"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setDir(File directory) { this.directory = directory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 187 */     if (!this.havePatchfile) {
/* 188 */       throw new BuildException(""patchfile argument is required"", getLocation());
/*     */     }
/*     */     
/* 191 */     Commandline toExecute = (Commandline)this.cmd.clone();
/* 192 */     toExecute.setExecutable(""patch"");
/*     */     
/* 194 */     if (this.originalFile != null) {
/* 195 */       toExecute.createArgument().setFile(this.originalFile);
/*     */     }
/*     */     
/* 198 */     Execute exe = new Execute(new LogStreamHandler(this, 2, 1), null);
/*     */ 
/*     */     
/* 201 */     exe.setCommandline(toExecute.getCommandline());
/*     */     
/* 203 */     if (this.directory != null) {
/* 204 */       if (this.directory.exists() && this.directory.isDirectory())
/* 205 */       { exe.setWorkingDirectory(this.directory); }
/* 206 */       else { if (!this.directory.isDirectory()) {
/* 207 */           throw new BuildException(this.directory + "" is not a directory."", getLocation());
/*     */         }
/*     */         
/* 210 */         throw new BuildException(""directory "" + this.directory + "" doesn't exist"", getLocation()); }
/*     */     
/*     */     } else {
/*     */       
/* 214 */       exe.setWorkingDirectory(getProject().getBaseDir());
/*     */     } 
/*     */     
/* 217 */     log(toExecute.describeCommand(), 3);
/*     */     try {
/* 219 */       exe.execute();
/*     */     } catch (IOException e) {
/* 221 */       throw new BuildException(e, getLocation());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Patch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PathConvert,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.DirSet;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathConvert
/*     */   extends Task
/*     */ {
/*  85 */   private Path path = null;
/*     */ 
/*     */ 
/*     */   
/*  89 */   private Reference refid = null;
/*     */ 
/*     */ 
/*     */   
/*  93 */   private String targetOS = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean targetWindows = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean onWindows = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean setonempty = true;
/*     */ 
/*     */ 
/*     */   
/* 109 */   private String property = null;
/*     */ 
/*     */ 
/*     */   
/* 113 */   private Vector prefixMap = new Vector();
/*     */ 
/*     */ 
/*     */   
/* 117 */   private String pathSep = null;
/*     */ 
/*     */ 
/*     */   
/* 121 */   private String dirSep = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public PathConvert() { this.onWindows = Os.isFamily(""dos""); } public class MapEntry {
/*     */     private String from; private String to; private final PathConvert this$0; public void setFrom(String from) { this.from = from; } public void setTo(String to) { this.to = to; } public String apply(String elem) { if (this.from == null || this.to == null)
/*     */         throw new BuildException(""Both 'from' and 'to' must be set in a map entry"");  String cmpElem = this.this$0.onWindows ? elem.toLowerCase() : elem; String cmpFrom = this.this$0.onWindows ? this.from.toLowerCase() : this.from;
/*     */       if (cmpElem.startsWith(cmpFrom)) {
/*     */         int len = this.from.length();
/*     */         if (len >= elem.length()) {
/*     */           elem = this.to;
/*     */         } else {
/*     */           elem = this.to + elem.substring(len);
/*     */         } 
/*     */       } 
/* 138 */       return elem; } public MapEntry(PathConvert this$0) { this.this$0 = this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 194 */       this.from = null;
/* 195 */       this.to = null; }
/*     */   
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TargetOs
/*     */     extends EnumeratedAttribute
/*     */   {
/* 205 */     public String[] getValues() { return new String[] { ""windows"", ""unix"", ""netware"", ""os/2"", ""tandem"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() {
/* 213 */     if (isReference()) {
/* 214 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 217 */     if (this.path == null) {
/* 218 */       this.path = new Path(getProject());
/*     */     }
/* 220 */     return this.path.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MapEntry createMap() {
/* 230 */     MapEntry entry = new MapEntry(this);
/*     */     
/* 232 */     this.prefixMap.addElement(entry);
/* 233 */     return entry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTargetos(String target) {
/* 247 */     TargetOs to = new TargetOs();
/*     */     
/* 249 */     to.setValue(target);
/* 250 */     setTargetos(to);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTargetos(TargetOs target) {
/* 263 */     this.targetOS = target.getValue();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 272 */     this.targetWindows = (!this.targetOS.equals(""unix"") && !this.targetOS.equals(""tandem""));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setSetonempty(boolean setonempty) { this.setonempty = setonempty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setProperty(String p) { this.property = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) {
/* 300 */     if (this.path != null) {
/* 301 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 304 */     this.refid = r;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void setPathSep(String sep) { this.pathSep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 325 */   public void setDirSep(String sep) { this.dirSep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public boolean isReference() { return (this.refid != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 342 */     Path savedPath = this.path;
/* 343 */     String savedPathSep = this.pathSep;
/* 344 */     String savedDirSep = this.dirSep;
/*     */ 
/*     */     
/*     */     try {
/* 348 */       if (isReference()) {
/* 349 */         this.path = (new Path(getProject())).createPath();
/*     */         
/* 351 */         Object obj = this.refid.getReferencedObject(getProject());
/*     */         
/* 353 */         if (obj instanceof Path) {
/* 354 */           this.path.setRefid(this.refid);
/* 355 */         } else if (obj instanceof FileSet) {
/* 356 */           FileSet fs = (FileSet)obj;
/*     */           
/* 358 */           this.path.addFileset(fs);
/* 359 */         } else if (obj instanceof DirSet) {
/* 360 */           DirSet ds = (DirSet)obj;
/*     */           
/* 362 */           this.path.addDirset(ds);
/* 363 */         } else if (obj instanceof FileList) {
/* 364 */           FileList fl = (FileList)obj;
/*     */           
/* 366 */           this.path.addFilelist(fl);
/*     */         } else {
/*     */           
/* 369 */           throw new BuildException(""'refid' does not refer to a path, fileset, dirset, or filelist."");
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 375 */       validateSetup();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 385 */       String fromDirSep = this.onWindows ? ""\\"" : ""/"";
/*     */       
/* 387 */       StringBuffer rslt = new StringBuffer(100);
/*     */ 
/*     */       
/* 390 */       String[] elems = this.path.list();
/*     */       
/* 392 */       for (int i = 0; i < elems.length; i++) {
/* 393 */         String elem = elems[i];
/*     */         
/* 395 */         elem = mapElement(elem);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 400 */         if (i != 0) {
/* 401 */           rslt.append(this.pathSep);
/*     */         }
/*     */         
/* 404 */         StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);
/*     */         
/* 406 */         String token = null;
/*     */         
/* 408 */         while (stDirectory.hasMoreTokens()) {
/* 409 */           token = stDirectory.nextToken();
/*     */           
/* 411 */           if (fromDirSep.equals(token)) {
/* 412 */             rslt.append(this.dirSep); continue;
/*     */           } 
/* 414 */           rslt.append(token);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 421 */       String value = rslt.toString();
/* 422 */       if (this.setonempty) {
/* 423 */         log(""Set property "" + this.property + "" = "" + value, 3);
/*     */         
/* 425 */         getProject().setNewProperty(this.property, value);
/*     */       }
/* 427 */       else if (rslt.length() > 0) {
/* 428 */         log(""Set property "" + this.property + "" = "" + value, 3);
/*     */         
/* 430 */         getProject().setNewProperty(this.property, value);
/*     */       } 
/*     */     } finally {
/*     */       
/* 434 */       this.path = savedPath;
/* 435 */       this.dirSep = savedDirSep;
/* 436 */       this.pathSep = savedPathSep;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String mapElement(String elem) {
/* 451 */     int size = this.prefixMap.size();
/*     */     
/* 453 */     if (size != 0)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 458 */       for (int i = 0; i < size; i++) {
/* 459 */         MapEntry entry = this.prefixMap.elementAt(i);
/* 460 */         String newElem = entry.apply(elem);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 465 */         if (newElem != elem) {
/* 466 */           elem = newElem;
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/*     */     }
/* 472 */     return elem;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validateSetup() throws BuildException {
/* 483 */     if (this.path == null) {
/* 484 */       throw new BuildException(""You must specify a path to convert"");
/*     */     }
/*     */     
/* 487 */     if (this.property == null) {
/* 488 */       throw new BuildException(""You must specify a property"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 493 */     if (this.targetOS == null && this.pathSep == null && this.dirSep == null) {
/* 494 */       throw new BuildException(""You must specify at least one of targetOS, dirSep, or pathSep"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 500 */     String dsep = File.separator;
/* 501 */     String psep = File.pathSeparator;
/*     */     
/* 503 */     if (this.targetOS != null) {
/* 504 */       psep = this.targetWindows ? "";"" : "":"";
/* 505 */       dsep = this.targetWindows ? ""\\"" : ""/"";
/*     */     } 
/*     */     
/* 508 */     if (this.pathSep != null)
/*     */     {
/* 510 */       psep = this.pathSep;
/*     */     }
/*     */     
/* 513 */     if (this.dirSep != null)
/*     */     {
/* 515 */       dsep = this.dirSep;
/*     */     }
/*     */     
/* 518 */     this.pathSep = psep;
/* 519 */     this.dirSep = dsep;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 528 */   private BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested <path> elements when using the refid attribute.""); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\PathConvert.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PreSetDef,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.AntTypeDefinition;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ComponentHelper;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.UnknownElement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PreSetDef
/*     */   extends AntlibDefinition
/*     */   implements TaskContainer
/*     */ {
/*     */   private UnknownElement nestedTask;
/*     */   private String name;
/*     */   
/*  89 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addTask(Task nestedTask) {
/*  97 */     if (this.nestedTask != null) {
/*  98 */       throw new BuildException(""Only one nested element allowed"");
/*     */     }
/* 100 */     if (!(nestedTask instanceof UnknownElement)) {
/* 101 */       throw new BuildException(""addTask called with a task that is not an unknown element"");
/*     */     }
/*     */     
/* 104 */     this.nestedTask = (UnknownElement)nestedTask;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 112 */     if (this.nestedTask == null) {
/* 113 */       throw new BuildException(""Missing nested element"");
/*     */     }
/* 115 */     if (this.name == null) {
/* 116 */       throw new BuildException(""Name not specified"");
/*     */     }
/*     */     
/* 119 */     this.name = ProjectHelper.genComponentName(getURI(), this.name);
/*     */     
/* 121 */     ComponentHelper helper = ComponentHelper.getComponentHelper(getProject());
/*     */ 
/*     */     
/* 124 */     String componentName = ProjectHelper.genComponentName(this.nestedTask.getNamespace(), this.nestedTask.getTag());
/*     */ 
/*     */     
/* 127 */     AntTypeDefinition def = helper.getDefinition(componentName);
/* 128 */     if (def == null) {
/* 129 */       throw new BuildException(""Unable to find typedef "" + componentName);
/*     */     }
/*     */ 
/*     */     
/* 133 */     PreSetDefinition newDef = new PreSetDefinition(def, this.nestedTask);
/*     */     
/* 135 */     newDef.setName(this.name);
/*     */     
/* 137 */     helper.addDataTypeDefinition(newDef);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class PreSetDefinition
/*     */     extends AntTypeDefinition
/*     */   {
/*     */     private AntTypeDefinition parent;
/*     */ 
/*     */ 
/*     */     
/*     */     private UnknownElement element;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public PreSetDefinition(AntTypeDefinition parent, UnknownElement el) {
/* 156 */       if (parent instanceof PreSetDefinition) {
/* 157 */         PreSetDefinition p = (PreSetDefinition)parent;
/* 158 */         el.applyPreSet(p.element);
/* 159 */         parent = p.parent;
/*     */       } 
/* 161 */       this.parent = parent;
/* 162 */       this.element = el;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 171 */     public void setClass(Class clazz) { throw new BuildException(""Not supported""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 180 */     public void setClassName(String className) { throw new BuildException(""Not supported""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 188 */     public String getClassName() { return this.parent.getClassName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 197 */     public void setAdapterClass(Class adapterClass) { throw new BuildException(""Not supported""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 207 */     public void setAdaptToClass(Class adaptToClass) { throw new BuildException(""Not supported""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 216 */     public void setClassLoader(ClassLoader classLoader) { throw new BuildException(""Not supported""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 224 */     public ClassLoader getClassLoader() { return this.parent.getClassLoader(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 233 */     public Class getExposedClass(Project project) { return this.parent.getExposedClass(project); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 242 */     public Class getTypeClass(Project project) { return this.parent.getTypeClass(project); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 251 */     public void checkClass(Project project) { this.parent.checkClass(project); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Object createObject(Project project) {
/* 262 */       Object o = this.parent.create(project);
/* 263 */       if (o == null) {
/* 264 */         return null;
/*     */       }
/* 266 */       return o;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 274 */     public UnknownElement getPreSets() { return this.element; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 285 */     public Object create(Project project) { return this; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean sameDefinition(AntTypeDefinition other, Project project) {
/* 296 */       if (other == null) {
/* 297 */         return false;
/*     */       }
/* 299 */       if (other.getClass() != getClass()) {
/* 300 */         return false;
/*     */       }
/* 302 */       PreSetDefinition otherDef = (PreSetDefinition)other;
/* 303 */       if (!this.parent.sameDefinition(otherDef.parent, project)) {
/* 304 */         return false;
/*     */       }
/* 306 */       if (!this.element.similar(otherDef.element)) {
/* 307 */         return false;
/*     */       }
/* 309 */       return true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean similarDefinition(AntTypeDefinition other, Project project) {
/* 321 */       if (other == null) {
/* 322 */         return false;
/*     */       }
/* 324 */       if (!other.getClass().getName().equals(getClass().getName())) {
/* 325 */         return false;
/*     */       }
/* 327 */       PreSetDefinition otherDef = (PreSetDefinition)other;
/* 328 */       if (!this.parent.similarDefinition(otherDef.parent, project)) {
/* 329 */         return false;
/*     */       }
/* 331 */       if (!this.element.similar(otherDef.element)) {
/* 332 */         return false;
/*     */       }
/* 334 */       return true;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\PreSetDef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ProcessDestroyer,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ProcessDestroyer
/*     */   implements Runnable
/*     */ {
/*  71 */   private Vector processes = new Vector();
/*     */   
/*     */   private Method addShutdownHookMethod;
/*     */   private Method removeShutdownHookMethod;
/*  75 */   private ProcessDestroyerImpl destroyProcessThread = null;
/*     */   private boolean added = false;
/*     */   
/*     */   private class ProcessDestroyerImpl
/*     */     extends Thread
/*     */   {
/*     */     private boolean shouldDestroy;
/*     */     private final ProcessDestroyer this$0;
/*     */     
/*     */     public ProcessDestroyerImpl(ProcessDestroyer this$0) {
/*  85 */       super(""ProcessDestroyer Shutdown Hook"");
/*     */       this.this$0 = this$0;
/*     */       this.shouldDestroy = true; } public void run() {
/*  88 */       if (this.shouldDestroy) {
/*  89 */         this.this$0.run();
/*     */       }
/*     */     }
/*     */ 
/*     */     
/*  94 */     public void setShouldDestroy(boolean shouldDestroy) { this.shouldDestroy = shouldDestroy; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ProcessDestroyer() {
/*     */     try {
/* 112 */       Class[] paramTypes = { Thread.class };
/* 113 */       this.addShutdownHookMethod = Runtime.class.getMethod(""addShutdownHook"", paramTypes);
/*     */ 
/*     */       
/* 116 */       this.removeShutdownHookMethod = Runtime.class.getMethod(""removeShutdownHook"", paramTypes);
/*     */     
/*     */     }
/* 119 */     catch (NoSuchMethodException e) {
/*     */     
/*     */     } catch (Exception e) {
/* 122 */       e.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addShutdownHook() {
/* 131 */     if (this.addShutdownHookMethod != null) {
/* 132 */       this.destroyProcessThread = new ProcessDestroyerImpl(this);
/* 133 */       Object[] args = { this.destroyProcessThread };
/*     */       try {
/* 135 */         this.addShutdownHookMethod.invoke(Runtime.getRuntime(), args);
/* 136 */         this.added = true;
/*     */       } catch (IllegalAccessException e) {
/* 138 */         e.printStackTrace();
/*     */       } catch (InvocationTargetException e) {
/* 140 */         e.printStackTrace();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeShutdownHook() {
/* 150 */     if (this.removeShutdownHookMethod != null && this.destroyProcessThread != null) {
/* 151 */       Object[] args = { this.destroyProcessThread };
/*     */       try {
/* 153 */         Boolean removed = (Boolean)this.removeShutdownHookMethod.invoke(Runtime.getRuntime(), args);
/*     */ 
/*     */ 
/*     */         
/* 157 */         if (!removed.booleanValue()) {
/* 158 */           System.err.println(""Could not remove shutdown hook"");
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 163 */         this.destroyProcessThread.setShouldDestroy(false);
/* 164 */         this.destroyProcessThread.start();
/*     */         
/*     */         try {
/* 167 */           this.destroyProcessThread.join(20000L);
/* 168 */         } catch (InterruptedException ie) {}
/*     */ 
/*     */ 
/*     */         
/* 172 */         this.destroyProcessThread = null;
/* 173 */         this.added = false;
/*     */       } catch (IllegalAccessException e) {
/* 175 */         e.printStackTrace();
/*     */       } catch (InvocationTargetException e) {
/* 177 */         e.printStackTrace();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public boolean isAddedAsShutdownHook() { return this.added; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean add(Process process) {
/* 200 */     synchronized (this.processes) {
/*     */       
/* 202 */       if (this.processes.size() == 0) {
/* 203 */         addShutdownHook();
/*     */       }
/* 205 */       this.processes.addElement(process);
/* 206 */       return this.processes.contains(process);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean remove(Process process) {
/* 219 */     synchronized (this.processes) {
/* 220 */       boolean processRemoved = this.processes.removeElement(process);
/* 221 */       if (this.processes.size() == 0) {
/* 222 */         this.processes.notifyAll();
/* 223 */         removeShutdownHook();
/*     */       } 
/* 225 */       return processRemoved;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/* 233 */     synchronized (this.processes) {
/* 234 */       Enumeration e = this.processes.elements();
/* 235 */       while (e.hasMoreElements()) {
/* 236 */         ((Process)e.nextElement()).destroy();
/*     */       }
/*     */ 
/*     */       
/*     */       try {
/* 241 */         this.processes.wait();
/* 242 */       } catch (InterruptedException interrupt) {}
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\ProcessDestroyer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Property,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Property
/*     */   extends Task
/*     */ {
/*     */   protected String name;
/*     */   protected String value;
/*     */   protected File file;
/*     */   protected URL url;
/*     */   protected String resource;
/*     */   protected Path classpath;
/*     */   protected String env;
/*     */   protected Reference ref;
/*     */   protected String prefix;
/*     */   private Project fallback;
/*     */   protected boolean userProperty;
/*     */   
/* 124 */   public Property() { this(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   protected Property(boolean userProperty) { this(userProperty, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Property(boolean userProperty, Project fallback) {
/* 138 */     this.userProperty = userProperty;
/* 139 */     this.fallback = fallback;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 151 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public void setLocation(File location) { setValue(location.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */   
/* 179 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/* 193 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setUrl(URL url) { this.url = url; }
/*     */ 
/*     */ 
/*     */   
/* 207 */   public URL getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/* 218 */     this.prefix = prefix;
/* 219 */     if (!prefix.endsWith(""."")) {
/* 220 */       this.prefix += ""."";
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 228 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setRefid(Reference ref) { this.ref = ref; }
/*     */ 
/*     */ 
/*     */   
/* 245 */   public Reference getRefid() { return this.ref; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setResource(String resource) { this.resource = resource; }
/*     */ 
/*     */ 
/*     */   
/* 259 */   public String getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 283 */   public void setEnvironment(String env) { this.env = env; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 290 */   public String getEnvironment() { return this.env; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 298 */     if (this.classpath == null) {
/* 299 */       this.classpath = classpath;
/*     */     } else {
/* 301 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 309 */     if (this.classpath == null) {
/* 310 */       this.classpath = new Path(getProject());
/*     */     }
/* 312 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 320 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 327 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 336 */   public void setUserProperty(boolean userProperty) { log(""DEPRECATED: Ignoring request to set user property in Property task."", 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 345 */   public String toString() { return (this.value == null) ? """" : this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 354 */     if (getProject() == null) {
/* 355 */       throw new IllegalStateException(""project has not been set"");
/*     */     }
/*     */     
/* 358 */     if (this.name != null) {
/* 359 */       if (this.value == null && this.ref == null) {
/* 360 */         throw new BuildException(""You must specify value, location or refid with the name attribute"", getLocation());
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 365 */     else if (this.url == null && this.file == null && this.resource == null && this.env == null) {
/* 366 */       throw new BuildException(""You must specify url, file, resource or environment when not using the name attribute"", getLocation());
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 372 */     if (this.url == null && this.file == null && this.resource == null && this.prefix != null) {
/* 373 */       throw new BuildException(""Prefix is only valid when loading from a url, file or resource"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 377 */     if (this.name != null && this.value != null) {
/* 378 */       addProperty(this.name, this.value);
/*     */     }
/*     */     
/* 381 */     if (this.file != null) {
/* 382 */       loadFile(this.file);
/*     */     }
/*     */     
/* 385 */     if (this.url != null) {
/* 386 */       loadUrl(this.url);
/*     */     }
/*     */     
/* 389 */     if (this.resource != null) {
/* 390 */       loadResource(this.resource);
/*     */     }
/*     */     
/* 393 */     if (this.env != null) {
/* 394 */       loadEnvironment(this.env);
/*     */     }
/*     */     
/* 397 */     if (this.name != null && this.ref != null) {
/*     */       try {
/* 399 */         addProperty(this.name, this.ref.getReferencedObject(getProject()).toString());
/*     */       } catch (BuildException be) {
/*     */         
/* 402 */         if (this.fallback != null) {
/* 403 */           addProperty(this.name, this.ref.getReferencedObject(this.fallback).toString());
/*     */         } else {
/*     */           
/* 406 */           throw be;
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadUrl(URL url) throws BuildException {
/* 417 */     Properties props = new Properties();
/* 418 */     log(""Loading "" + url, 3);
/*     */     try {
/* 420 */       InputStream is = url.openStream();
/*     */       try {
/* 422 */         props.load(is);
/*     */       } finally {
/* 424 */         if (is != null) {
/* 425 */           is.close();
/*     */         }
/*     */       } 
/* 428 */       addProperties(props);
/*     */     } catch (IOException ex) {
/* 430 */       throw new BuildException(ex, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadFile(File file) throws BuildException {
/* 440 */     Properties props = new Properties();
/* 441 */     log(""Loading "" + file.getAbsolutePath(), 3);
/*     */     try {
/* 443 */       if (file.exists()) {
/* 444 */         FileInputStream fis = new FileInputStream(file);
/*     */         try {
/* 446 */           props.load(fis);
/*     */         } finally {
/* 448 */           if (fis != null) {
/* 449 */             fis.close();
/*     */           }
/*     */         } 
/* 452 */         addProperties(props);
/*     */       } else {
/* 454 */         log(""Unable to find property file: "" + file.getAbsolutePath(), 3);
/*     */       } 
/*     */     } catch (IOException ex) {
/*     */       
/* 458 */       throw new BuildException(ex, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadResource(String name) {
/* 467 */     Properties props = new Properties();
/* 468 */     log(""Resource Loading "" + name, 3);
/* 469 */     InputStream is = null;
/*     */     try {
/* 471 */       ClassLoader cL = null;
/*     */       
/* 473 */       if (this.classpath != null) {
/* 474 */         AntClassLoader antClassLoader = getProject().createClassLoader(this.classpath);
/*     */       } else {
/* 476 */         cL = getClass().getClassLoader();
/*     */       } 
/*     */       
/* 479 */       if (cL == null) {
/* 480 */         is = ClassLoader.getSystemResourceAsStream(name);
/*     */       } else {
/* 482 */         is = cL.getResourceAsStream(name);
/*     */       } 
/*     */       
/* 485 */       if (is != null) {
/* 486 */         props.load(is);
/* 487 */         addProperties(props);
/*     */       } else {
/* 489 */         log(""Unable to find resource "" + name, 1);
/*     */       } 
/*     */     } catch (IOException ex) {
/* 492 */       throw new BuildException(ex, getLocation());
/*     */     } finally {
/* 494 */       if (is != null) {
/*     */         try {
/* 496 */           is.close();
/* 497 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadEnvironment(String prefix) {
/* 510 */     Properties props = new Properties();
/* 511 */     if (!prefix.endsWith(""."")) {
/* 512 */       prefix = prefix + ""."";
/*     */     }
/* 514 */     log(""Loading Environment "" + prefix, 3);
/* 515 */     Vector osEnv = Execute.getProcEnvironment();
/* 516 */     for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {
/* 517 */       String entry = e.nextElement();
/* 518 */       int pos = entry.indexOf('=');
/* 519 */       if (pos == -1) {
/* 520 */         log(""Ignoring: "" + entry, 1); continue;
/*     */       } 
/* 522 */       props.put(prefix + entry.substring(0, pos), entry.substring(pos + 1));
/*     */     } 
/*     */ 
/*     */     
/* 526 */     addProperties(props);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addProperties(Properties props) {
/* 534 */     resolveAllProperties(props);
/* 535 */     Enumeration e = props.keys();
/* 536 */     while (e.hasMoreElements()) {
/* 537 */       String name = e.nextElement();
/* 538 */       String value = props.getProperty(name);
/*     */       
/* 540 */       String v = getProject().replaceProperties(value);
/*     */       
/* 542 */       if (this.prefix != null) {
/* 543 */         name = this.prefix + name;
/*     */       }
/*     */       
/* 546 */       addProperty(name, v);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addProperty(String n, String v) {
/* 556 */     if (this.userProperty) {
/* 557 */       if (getProject().getUserProperty(n) == null) {
/* 558 */         getProject().setInheritedProperty(n, v);
/*     */       } else {
/* 560 */         log(""Override ignored for "" + n, 3);
/*     */       } 
/*     */     } else {
/* 563 */       getProject().setNewProperty(n, v);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveAllProperties(Properties props) throws BuildException {
/* 572 */     for (Enumeration e = props.keys(); e.hasMoreElements(); ) {
/* 573 */       String name = e.nextElement();
/* 574 */       Stack referencesSeen = new Stack();
/* 575 */       resolve(props, name, referencesSeen);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolve(Properties props, String name, Stack referencesSeen) throws BuildException {
/* 591 */     if (referencesSeen.contains(name)) {
/* 592 */       throw new BuildException(""Property "" + name + "" was circularly "" + ""defined."");
/*     */     }
/*     */ 
/*     */     
/* 596 */     String value = props.getProperty(name);
/* 597 */     Vector fragments = new Vector();
/* 598 */     Vector propertyRefs = new Vector();
/* 599 */     ProjectHelper.parsePropertyString(value, fragments, propertyRefs);
/*     */     
/* 601 */     if (propertyRefs.size() != 0) {
/* 602 */       referencesSeen.push(name);
/* 603 */       StringBuffer sb = new StringBuffer();
/* 604 */       Enumeration i = fragments.elements();
/* 605 */       Enumeration j = propertyRefs.elements();
/* 606 */       while (i.hasMoreElements()) {
/* 607 */         String fragment = i.nextElement();
/* 608 */         if (fragment == null) {
/* 609 */           String propertyName = j.nextElement();
/* 610 */           fragment = getProject().getProperty(propertyName);
/* 611 */           if (fragment == null) {
/* 612 */             if (props.containsKey(propertyName)) {
/* 613 */               resolve(props, propertyName, referencesSeen);
/* 614 */               fragment = props.getProperty(propertyName);
/*     */             } else {
/* 616 */               fragment = ""${"" + propertyName + ""}"";
/*     */             } 
/*     */           }
/*     */         } 
/* 620 */         sb.append(fragment);
/*     */       } 
/* 622 */       value = sb.toString();
/* 623 */       props.put(name, value);
/* 624 */       referencesSeen.pop();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Property.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PumpStreamHandler,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PumpStreamHandler
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   private Thread outputThread;
/*     */   private Thread errorThread;
/*     */   private Thread inputThread;
/*     */   private OutputStream out;
/*     */   private OutputStream err;
/*     */   private InputStream input;
/*     */   
/*     */   public PumpStreamHandler(OutputStream out, OutputStream err, InputStream input) {
/*  82 */     this.out = out;
/*  83 */     this.err = err;
/*  84 */     this.input = input;
/*     */   }
/*     */ 
/*     */   
/*  88 */   public PumpStreamHandler(OutputStream out, OutputStream err) { this(out, err, null); }
/*     */ 
/*     */ 
/*     */   
/*  92 */   public PumpStreamHandler(OutputStream outAndErr) { this(outAndErr, outAndErr); }
/*     */ 
/*     */ 
/*     */   
/*  96 */   public PumpStreamHandler() { this(System.out, System.err); }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setProcessOutputStream(InputStream is) { createProcessOutputPump(is, this.out); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProcessErrorStream(InputStream is) {
/* 105 */     if (this.err != null) {
/* 106 */       createProcessErrorPump(is, this.err);
/*     */     }
/*     */   }
/*     */   
/*     */   public void setProcessInputStream(OutputStream os) {
/* 111 */     if (this.input != null) {
/* 112 */       this.inputThread = createPump(this.input, os, true);
/*     */     } else {
/*     */       try {
/* 115 */         os.close();
/* 116 */       } catch (IOException e) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void start() {
/* 123 */     this.outputThread.start();
/* 124 */     this.errorThread.start();
/* 125 */     if (this.inputThread != null) {
/* 126 */       this.inputThread.start();
/*     */     }
/*     */   }
/*     */   
/*     */   public void stop() {
/*     */     try {
/* 132 */       this.outputThread.join();
/* 133 */     } catch (InterruptedException e) {}
/*     */ 
/*     */     
/*     */     try {
/* 137 */       this.errorThread.join();
/* 138 */     } catch (InterruptedException e) {}
/*     */ 
/*     */ 
/*     */     
/* 142 */     if (this.inputThread != null) {
/*     */       try {
/* 144 */         this.inputThread.join();
/* 145 */       } catch (InterruptedException e) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 151 */       this.err.flush();
/* 152 */     } catch (IOException e) {}
/*     */ 
/*     */     
/*     */     try {
/* 156 */       this.out.flush();
/* 157 */     } catch (IOException e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   protected OutputStream getErr() { return this.err; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   protected OutputStream getOut() { return this.out; }
/*     */ 
/*     */ 
/*     */   
/* 171 */   protected void createProcessOutputPump(InputStream is, OutputStream os) { this.outputThread = createPump(is, os); }
/*     */ 
/*     */ 
/*     */   
/* 175 */   protected void createProcessErrorPump(InputStream is, OutputStream os) { this.errorThread = createPump(is, os); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   protected Thread createPump(InputStream is, OutputStream os) { return createPump(is, os, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Thread createPump(InputStream is, OutputStream os, boolean closeWhenExhausted) {
/* 193 */     Thread result = new Thread(new StreamPumper(is, os, closeWhenExhausted));
/*     */     
/* 195 */     result.setDaemon(true);
/* 196 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\PumpStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Recorder,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Recorder
/*     */   extends Task
/*     */ {
/*  90 */   private String filename = null;
/*     */ 
/*     */ 
/*     */   
/*  94 */   private Boolean append = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private Boolean start = null;
/*     */   
/* 101 */   private int loglevel = -1;
/*     */   
/*     */   private boolean emacsMode = false;
/*     */   
/* 105 */   private static Hashtable recorderEntries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setName(String fname) { this.filename = fname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAction(ActionChoices action) {
/* 130 */     if (action.getValue().equalsIgnoreCase(""start"")) {
/* 131 */       this.start = Boolean.TRUE;
/*     */     } else {
/* 133 */       this.start = Boolean.FALSE;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setAppend(boolean append) { this.append = new Boolean(append); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLoglevel(VerbosityLevelChoices level) {
/* 156 */     String lev = level.getValue();
/*     */     
/* 158 */     if (lev.equalsIgnoreCase(""error"")) {
/* 159 */       this.loglevel = 0;
/* 160 */     } else if (lev.equalsIgnoreCase(""warn"")) {
/* 161 */       this.loglevel = 1;
/* 162 */     } else if (lev.equalsIgnoreCase(""info"")) {
/* 163 */       this.loglevel = 2;
/* 164 */     } else if (lev.equalsIgnoreCase(""verbose"")) {
/* 165 */       this.loglevel = 3;
/* 166 */     } else if (lev.equalsIgnoreCase(""debug"")) {
/* 167 */       this.loglevel = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 176 */     if (this.filename == null) {
/* 177 */       throw new BuildException(""No filename specified"");
/*     */     }
/*     */     
/* 180 */     getProject().log(""setting a recorder for name "" + this.filename, 4);
/*     */ 
/*     */ 
/*     */     
/* 184 */     RecorderEntry recorder = getRecorder(this.filename, getProject());
/*     */     
/* 186 */     recorder.setMessageOutputLevel(this.loglevel);
/* 187 */     recorder.setRecordState(this.start);
/* 188 */     recorder.setEmacsMode(this.emacsMode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ActionChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 199 */     private static final String[] values = new String[] { ""start"", ""stop"" };
/*     */ 
/*     */ 
/*     */     
/* 203 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class VerbosityLevelChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 213 */     private static final String[] values = new String[] { ""error"", ""warn"", ""info"", ""verbose"", ""debug"" };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 218 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RecorderEntry getRecorder(String name, Project proj) throws BuildException {
/*     */     RecorderEntry recorderEntry;
/* 229 */     Object o = recorderEntries.get(name);
/*     */ 
/*     */     
/* 232 */     if (o == null) {
/*     */       
/*     */       try {
/* 235 */         recorderEntry = new RecorderEntry(name);
/*     */         
/* 237 */         PrintStream out = null;
/*     */         
/* 239 */         if (this.append == null) {
/* 240 */           out = new PrintStream(new FileOutputStream(name));
/*     */         } else {
/*     */           
/* 243 */           out = new PrintStream(new FileOutputStream(name, this.append.booleanValue()));
/*     */         } 
/*     */         
/* 246 */         recorderEntry.setErrorPrintStream(out);
/* 247 */         recorderEntry.setOutputPrintStream(out);
/*     */       } catch (IOException ioe) {
/* 249 */         throw new BuildException(""Problems creating a recorder entry"", ioe);
/*     */       } 
/*     */       
/* 252 */       proj.addBuildListener((BuildListener)recorderEntry);
/* 253 */       recorderEntries.put(name, recorderEntry);
/*     */     } else {
/* 255 */       recorderEntry = (RecorderEntry)o;
/*     */     } 
/* 257 */     return recorderEntry;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Recorder.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.RecorderEntry,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.BuildLogger;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RecorderEntry
/*     */   implements BuildLogger
/*     */ {
/*  77 */   private String filename = null;
/*     */   
/*     */   private boolean record = true;
/*     */   
/*  81 */   private int loglevel = 2;
/*     */   
/*  83 */   private PrintStream out = null;
/*     */   
/*  85 */   private long targetStartTime = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RecorderEntry(String name) {
/*  96 */     this.targetStartTime = System.currentTimeMillis();
/*  97 */     this.filename = name;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String getFilename() { return this.filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRecordState(Boolean state) {
/* 117 */     if (state != null) {
/* 118 */       this.record = state.booleanValue();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void buildStarted(BuildEvent event) { log(""> BUILD STARTED"", 4); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 129 */     log(""< BUILD FINISHED"", 4);
/*     */     
/* 131 */     Throwable error = event.getException();
/*     */     
/* 133 */     if (error == null) {
/* 134 */       this.out.println(StringUtils.LINE_SEP + ""BUILD SUCCESSFUL"");
/*     */     } else {
/* 136 */       this.out.println(StringUtils.LINE_SEP + ""BUILD FAILED"" + StringUtils.LINE_SEP);
/*     */       
/* 138 */       error.printStackTrace(this.out);
/*     */     } 
/* 140 */     this.out.flush();
/* 141 */     this.out.close();
/*     */   }
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 146 */     log("">> TARGET STARTED -- "" + event.getTarget(), 4);
/* 147 */     log(StringUtils.LINE_SEP + event.getTarget().getName() + "":"", 2);
/*     */     
/* 149 */     this.targetStartTime = System.currentTimeMillis();
/*     */   }
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {
/* 154 */     log(""<< TARGET FINISHED -- "" + event.getTarget(), 4);
/*     */     
/* 156 */     String time = formatTime(System.currentTimeMillis() - this.targetStartTime);
/*     */     
/* 158 */     log(event.getTarget() + "":  duration "" + time, 3);
/* 159 */     this.out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void taskStarted(BuildEvent event) { log("">>> TASK STARTED -- "" + event.getTask(), 4); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {
/* 169 */     log(""<<< TASK FINISHED -- "" + event.getTask(), 4);
/* 170 */     this.out.flush();
/*     */   }
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 175 */     log(""--- MESSAGE LOGGED"", 4);
/*     */     
/* 177 */     StringBuffer buf = new StringBuffer();
/*     */     
/* 179 */     if (event.getTask() != null) {
/* 180 */       String name = event.getTask().getTaskName();
/*     */       
/* 182 */       if (!this.emacsMode) {
/* 183 */         String label = ""["" + name + ""] "";
/* 184 */         int size = 12 - label.length();
/*     */         
/* 186 */         for (int i = 0; i < size; i++) {
/* 187 */           buf.append("" "");
/*     */         }
/* 189 */         buf.append(label);
/*     */       } 
/*     */     } 
/* 192 */     buf.append(event.getMessage());
/*     */     
/* 194 */     log(buf.toString(), event.getPriority());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void log(String mesg, int level) {
/* 205 */     if (this.record && level <= this.loglevel) {
/* 206 */       this.out.println(mesg);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void setMessageOutputLevel(int level) {
/* 212 */     if (level >= 0 && level <= 4) {
/* 213 */       this.loglevel = level;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setOutputPrintStream(PrintStream output) { this.out = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public void setErrorPrintStream(PrintStream err) { this.out = err; }
/*     */ 
/*     */ 
/*     */   
/*     */   private static String formatTime(long millis) {
/* 234 */     long seconds = millis / 1000L;
/* 235 */     long minutes = seconds / 60L;
/*     */ 
/*     */     
/* 238 */     if (minutes > 0L) {
/* 239 */       return Long.toString(minutes) + "" minute"" + ((minutes == 1L) ? "" "" : ""s "") + Long.toString(seconds % 60L) + "" second"" + ((seconds % 60L == 1L) ? """" : ""s"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 244 */     return Long.toString(seconds) + "" second"" + ((seconds % 60L == 1L) ? """" : ""s"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\RecorderEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Redirector,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.LazyFileOutputStream;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ import org.apache.tools.ant.util.TeeOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Redirector
/*     */ {
/*     */   private File out;
/*     */   private File error;
/*     */   private File input;
/*     */   private boolean logError = false;
/* 108 */   private ByteArrayOutputStream baos = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   private ByteArrayOutputStream errorBaos = null;
/*     */ 
/*     */   
/*     */   private String outputProperty;
/*     */ 
/*     */   
/*     */   private String errorProperty;
/*     */ 
/*     */   
/*     */   private String inputString;
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */   
/*     */   private Task managingTask;
/*     */ 
/*     */   
/* 131 */   private OutputStream outputStream = null;
/*     */ 
/*     */   
/* 134 */   private OutputStream errorStream = null;
/*     */ 
/*     */   
/* 137 */   private InputStream inputStream = null;
/*     */ 
/*     */   
/* 140 */   private PrintStream outPrintStream = null;
/*     */ 
/*     */   
/* 143 */   private PrintStream errorPrintStream = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public Redirector(Task managingTask) { this.managingTask = managingTask; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setInput(File input) { this.input = input; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setInputString(String inputString) { this.inputString = inputString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setOutput(File out) { this.out = out; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setLogError(boolean logError) { this.logError = logError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void setError(File error) { this.error = error; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setOutputProperty(String outputProperty) { this.outputProperty = outputProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 234 */   public void setErrorProperty(String errorProperty) { this.errorProperty = errorProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setPropertyFromBAOS(ByteArrayOutputStream baos, String propertyName) throws IOException {
/* 248 */     BufferedReader in = new BufferedReader(new StringReader(Execute.toString(baos)));
/*     */     
/* 250 */     String line = null;
/* 251 */     StringBuffer val = new StringBuffer();
/* 252 */     while ((line = in.readLine()) != null) {
/* 253 */       if (val.length() != 0) {
/* 254 */         val.append(StringUtils.LINE_SEP);
/*     */       }
/* 256 */       val.append(line);
/*     */     } 
/* 258 */     this.managingTask.getProject().setNewProperty(propertyName, val.toString());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void createStreams() {
/* 267 */     if (this.out == null && this.outputProperty == null) {
/* 268 */       this.outputStream = new LogOutputStream(this.managingTask, 2);
/* 269 */       this.errorStream = new LogOutputStream(this.managingTask, 1);
/*     */     } else {
/* 271 */       if (this.out != null) {
/* 272 */         this.outputStream = (OutputStream)new LazyFileOutputStream(this.out, this.append);
/* 273 */         this.managingTask.log(""Output redirected to "" + this.out, 3);
/*     */       } 
/*     */ 
/*     */       
/* 277 */       if (this.outputProperty != null) {
/* 278 */         this.baos = new ByteArrayOutputStream();
/* 279 */         this.managingTask.log(""Output redirected to property: "" + this.outputProperty, 3);
/*     */         
/* 281 */         if (this.out == null) {
/* 282 */           this.outputStream = this.baos;
/*     */         } else {
/* 284 */           this.outputStream = (OutputStream)new TeeOutputStream(this.outputStream, this.baos);
/*     */         } 
/*     */       } else {
/* 287 */         this.baos = null;
/*     */       } 
/*     */       
/* 290 */       this.errorStream = this.outputStream;
/*     */     } 
/*     */     
/* 293 */     if (this.logError) {
/* 294 */       this.errorStream = new LogOutputStream(this.managingTask, 1);
/*     */     }
/*     */     
/* 297 */     if (this.error != null) {
/* 298 */       this.errorStream = (OutputStream)new LazyFileOutputStream(this.error, this.append);
/* 299 */       this.managingTask.log(""Error redirected to "" + this.error, 3);
/*     */     } 
/*     */ 
/*     */     
/* 303 */     if (this.errorProperty != null) {
/* 304 */       this.errorBaos = new ByteArrayOutputStream();
/* 305 */       this.managingTask.log(""Error redirected to property: "" + this.errorProperty, 3);
/*     */       
/* 307 */       if (this.error == null) {
/* 308 */         this.errorStream = this.errorBaos;
/*     */       } else {
/* 310 */         this.errorStream = (OutputStream)new TeeOutputStream(this.errorStream, this.errorBaos);
/*     */       } 
/*     */     } else {
/* 313 */       this.errorBaos = null;
/*     */     } 
/*     */     
/* 316 */     if (this.input != null && this.inputString != null) {
/* 317 */       throw new BuildException(""The \""input\"" and \""inputstring\"" attributes cannot both be specified"");
/*     */     }
/*     */     
/* 320 */     if (this.input != null) {
/*     */       try {
/* 322 */         this.inputStream = new FileInputStream(this.input);
/*     */       } catch (FileNotFoundException fne) {
/* 324 */         throw new BuildException(""Cannot read from "" + this.input, fne);
/*     */       } 
/* 326 */     } else if (this.inputString != null) {
/* 327 */       this.inputStream = new ByteArrayInputStream(this.inputString.getBytes());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExecuteStreamHandler createHandler() throws BuildException {
/* 341 */     createStreams();
/* 342 */     return new PumpStreamHandler(this.outputStream, this.errorStream, this.inputStream);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String output) {
/* 351 */     if (this.outPrintStream == null) {
/* 352 */       this.outPrintStream = new PrintStream(this.outputStream);
/*     */     }
/* 354 */     this.outPrintStream.print(output);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int handleInput(byte[] buffer, int offset, int length) throws IOException {
/* 370 */     if (this.inputStream == null) {
/* 371 */       return this.managingTask.getProject().defaultInput(buffer, offset, length);
/*     */     }
/*     */     
/* 374 */     return this.inputStream.read(buffer, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleFlush(String output) {
/* 384 */     if (this.outPrintStream == null) {
/* 385 */       this.outPrintStream = new PrintStream(this.outputStream);
/*     */     }
/* 387 */     this.outPrintStream.print(output);
/* 388 */     this.outPrintStream.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String output) {
/* 397 */     if (this.errorPrintStream == null) {
/* 398 */       this.errorPrintStream = new PrintStream(this.errorStream);
/*     */     }
/* 400 */     this.errorPrintStream.print(output);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorFlush(String output) {
/* 409 */     if (this.errorPrintStream == null) {
/* 410 */       this.errorPrintStream = new PrintStream(this.errorStream);
/*     */     }
/* 412 */     this.errorPrintStream.print(output);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 422 */   public OutputStream getOutputStream() { return this.outputStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 432 */   public OutputStream getErrorStream() { return this.errorStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 442 */   public InputStream getInputStream() { return this.inputStream; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void complete() throws IOException {
/* 455 */     System.out.flush();
/* 456 */     System.err.flush();
/*     */     
/* 458 */     if (this.inputStream != null) {
/* 459 */       this.inputStream.close();
/*     */     }
/*     */     
/* 462 */     if (this.outputStream instanceof LazyFileOutputStream) {
/* 463 */       ((LazyFileOutputStream)this.outputStream).open();
/*     */     }
/* 465 */     this.outputStream.close();
/*     */     
/* 467 */     if (this.errorStream != this.outputStream) {
/* 468 */       if (this.errorStream instanceof LazyFileOutputStream) {
/* 469 */         ((LazyFileOutputStream)this.errorStream).open();
/*     */       }
/* 471 */       this.errorStream.close();
/*     */     } 
/*     */     
/* 474 */     if (this.baos != null) {
/* 475 */       setPropertyFromBAOS(this.baos, this.outputProperty);
/*     */     }
/* 477 */     if (this.errorBaos != null)
/* 478 */       setPropertyFromBAOS(this.errorBaos, this.errorProperty); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Redirector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rename,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rename
/*     */   extends Task
/*     */ {
/*     */   private File src;
/*     */   private File dest;
/*     */   private boolean replace = true;
/*     */   
/*  84 */   public void setSrc(File src) { this.src = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setReplace(String replace) { this.replace = Project.toBoolean(replace); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 110 */     log(""DEPRECATED - The rename task is deprecated.  Use move instead."");
/*     */     
/* 112 */     if (this.dest == null) {
/* 113 */       throw new BuildException(""dest attribute is required"", getLocation());
/*     */     }
/*     */     
/* 116 */     if (this.src == null) {
/* 117 */       throw new BuildException(""src attribute is required"", getLocation());
/*     */     }
/*     */     
/* 120 */     if (!this.replace && this.dest.exists()) {
/* 121 */       throw new BuildException(this.dest + "" already exists."");
/*     */     }
/*     */     
/*     */     try {
/* 125 */       FileUtils.newFileUtils().rename(this.src, this.dest);
/*     */     } catch (IOException e) {
/* 127 */       throw new BuildException(""Unable to rename "" + this.src + "" to "" + this.dest, e, getLocation());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Rename.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Replace,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Reader;
/*     */ import java.io.Writer;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Replace
/*     */   extends MatchingTask
/*     */ {
/*  95 */   private File src = null;
/*  96 */   private NestedString token = null;
/*  97 */   private NestedString value = new NestedString(this);
/*     */   
/*  99 */   private File propertyFile = null;
/* 100 */   private File replaceFilterFile = null;
/* 101 */   private Properties properties = null;
/* 102 */   private Vector replacefilters = new Vector();
/*     */   
/* 104 */   private File dir = null;
/*     */   
/*     */   private int fileCount;
/*     */   
/*     */   private int replaceCount;
/*     */   
/*     */   private boolean summary = false;
/* 111 */   private String encoding = null;
/*     */   
/* 113 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */   
/*     */   public class NestedString
/*     */   {
/*     */     public NestedString(Replace this$0) {
/* 118 */       this.this$0 = this$0;
/*     */       
/* 120 */       this.buf = new StringBuffer();
/*     */     }
/*     */ 
/*     */     
/*     */     private StringBuffer buf;
/*     */     
/*     */     private final Replace this$0;
/*     */     
/* 128 */     public void addText(String val) { this.buf.append(val); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 135 */     public String getText() { return this.buf.substring(0); }
/*     */   }
/*     */   
/*     */   public class Replacefilter {
/*     */     private String token;
/*     */     private String value;
/*     */     
/* 142 */     public Replacefilter(Replace this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/*     */     private String property;
/*     */ 
/*     */     
/*     */     private final Replace this$0;
/*     */ 
/*     */     
/*     */     public void validate() throws BuildException {
/* 153 */       if (this.token == null) {
/* 154 */         String message = ""token is a mandatory attribute of replacefilter."";
/*     */         
/* 156 */         throw new BuildException(message);
/*     */       } 
/*     */       
/* 159 */       if ("""".equals(this.token)) {
/* 160 */         String message = ""The token attribute must not be an empty string."";
/*     */         
/* 162 */         throw new BuildException(message);
/*     */       } 
/*     */ 
/*     */       
/* 166 */       if (this.value != null && this.property != null) {
/* 167 */         String message = ""Either value or property can be specified, but a replacefilter element cannot have both."";
/*     */ 
/*     */         
/* 170 */         throw new BuildException(message);
/*     */       } 
/*     */       
/* 173 */       if (this.property != null) {
/*     */         
/* 175 */         if (this.this$0.propertyFile == null) {
/* 176 */           String message = ""The replacefilter's property attribute can only be used with the replacetask's propertyFile attribute."";
/*     */ 
/*     */           
/* 179 */           throw new BuildException(message);
/*     */         } 
/*     */ 
/*     */         
/* 183 */         if (this.this$0.properties == null || this.this$0.properties.getProperty(this.property) == null) {
/*     */           
/* 185 */           String message = ""property \"""" + this.property + ""\"" was not found in "" + this.this$0.propertyFile.getPath();
/*     */           
/* 187 */           throw new BuildException(message);
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getReplaceValue() {
/* 197 */       if (this.property != null)
/* 198 */         return this.this$0.properties.getProperty(this.property); 
/* 199 */       if (this.value != null)
/* 200 */         return this.value; 
/* 201 */       if (this.this$0.value != null) {
/* 202 */         return this.this$0.value.getText();
/*     */       }
/*     */       
/* 205 */       return new String("""");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 214 */     public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 222 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 231 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 239 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 248 */     public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 257 */     public String getProperty() { return this.property; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 267 */     Vector savedFilters = (Vector)this.replacefilters.clone();
/* 268 */     Properties savedProperties = (this.properties == null) ? null : (Properties)this.properties.clone();
/*     */ 
/*     */     
/*     */     try {
/* 272 */       if (this.replaceFilterFile != null) {
/* 273 */         Properties props = getProperties(this.replaceFilterFile);
/* 274 */         Enumeration e = props.keys();
/* 275 */         while (e.hasMoreElements()) {
/* 276 */           String token = e.nextElement().toString();
/* 277 */           Replacefilter replaceFilter = createReplacefilter();
/* 278 */           replaceFilter.setToken(token);
/* 279 */           replaceFilter.setValue(props.getProperty(token));
/*     */         } 
/*     */       } 
/*     */       
/* 283 */       validateAttributes();
/*     */       
/* 285 */       if (this.propertyFile != null) {
/* 286 */         this.properties = getProperties(this.propertyFile);
/*     */       }
/*     */       
/* 289 */       validateReplacefilters();
/* 290 */       this.fileCount = 0;
/* 291 */       this.replaceCount = 0;
/*     */       
/* 293 */       if (this.src != null) {
/* 294 */         processFile(this.src);
/*     */       }
/*     */       
/* 297 */       if (this.dir != null) {
/* 298 */         DirectoryScanner ds = getDirectoryScanner(this.dir);
/* 299 */         String[] srcs = ds.getIncludedFiles();
/*     */         
/* 301 */         for (int i = 0; i < srcs.length; i++) {
/* 302 */           File file = new File(this.dir, srcs[i]);
/* 303 */           processFile(file);
/*     */         } 
/*     */       } 
/*     */       
/* 307 */       if (this.summary) {
/* 308 */         log(""Replaced "" + this.replaceCount + "" occurrences in "" + this.fileCount + "" files."", 2);
/*     */       }
/*     */     } finally {
/*     */       
/* 312 */       this.replacefilters = savedFilters;
/* 313 */       this.properties = savedProperties;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateAttributes() throws BuildException {
/* 325 */     if (this.src == null && this.dir == null) {
/* 326 */       String message = ""Either the file or the dir attribute must be specified"";
/*     */       
/* 328 */       throw new BuildException(message, getLocation());
/*     */     } 
/* 330 */     if (this.propertyFile != null && !this.propertyFile.exists()) {
/* 331 */       String message = ""Property file "" + this.propertyFile.getPath() + "" does not exist."";
/*     */       
/* 333 */       throw new BuildException(message, getLocation());
/*     */     } 
/* 335 */     if (this.token == null && this.replacefilters.size() == 0) {
/* 336 */       String message = ""Either token or a nested replacefilter must be specified"";
/*     */       
/* 338 */       throw new BuildException(message, getLocation());
/*     */     } 
/* 340 */     if (this.token != null && """".equals(this.token.getText())) {
/* 341 */       String message = ""The token attribute must not be an empty string."";
/* 342 */       throw new BuildException(message, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateReplacefilters() throws BuildException {
/* 354 */     for (int i = 0; i < this.replacefilters.size(); i++) {
/* 355 */       Replacefilter element = this.replacefilters.elementAt(i);
/*     */       
/* 357 */       element.validate();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Properties getProperties(File propertyFile) throws BuildException {
/* 369 */     Properties properties = new Properties();
/*     */     
/*     */     try {
/* 372 */       properties.load(new FileInputStream(propertyFile));
/*     */     } catch (FileNotFoundException e) {
/* 374 */       String message = ""Property file ("" + propertyFile.getPath() + "") not found."";
/*     */       
/* 376 */       throw new BuildException(message);
/*     */     } catch (IOException e) {
/* 378 */       String message = ""Property file ("" + propertyFile.getPath() + "") cannot be loaded."";
/*     */       
/* 380 */       throw new BuildException(message);
/*     */     } 
/*     */     
/* 383 */     return properties;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFile(File src) throws BuildException {
/* 395 */     if (!src.exists()) {
/* 396 */       throw new BuildException(""Replace: source file "" + src.getPath() + "" doesn't exist"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 400 */     File temp = this.fileUtils.createTempFile(""rep"", "".tmp"", this.fileUtils.getParentFile(src));
/*     */     
/* 402 */     temp.deleteOnExit();
/*     */     
/* 404 */     Reader reader = null;
/* 405 */     Writer writer = null;
/*     */     try {
/* 407 */       reader = (this.encoding == null) ? new FileReader(src) : new InputStreamReader(new FileInputStream(src), this.encoding);
/*     */       
/* 409 */       writer = (this.encoding == null) ? new FileWriter(temp) : new OutputStreamWriter(new FileOutputStream(temp), this.encoding);
/*     */ 
/*     */       
/* 412 */       BufferedReader br = new BufferedReader(reader);
/* 413 */       BufferedWriter bw = new BufferedWriter(writer);
/*     */       
/* 415 */       String buf = FileUtils.readFully(br);
/* 416 */       if (buf == null) {
/* 417 */         buf = """";
/*     */       }
/*     */ 
/*     */       
/* 421 */       String newString = new String(buf);
/*     */       
/* 423 */       if (this.token != null) {
/*     */ 
/*     */ 
/*     */         
/* 427 */         String val = stringReplace(this.value.getText(), ""\r\n"", ""\n"", false);
/*     */         
/* 429 */         val = stringReplace(val, ""\n"", StringUtils.LINE_SEP, false);
/*     */         
/* 431 */         String tok = stringReplace(this.token.getText(), ""\r\n"", ""\n"", false);
/*     */         
/* 433 */         tok = stringReplace(tok, ""\n"", StringUtils.LINE_SEP, false);
/*     */ 
/*     */ 
/*     */         
/* 437 */         log(""Replacing in "" + src.getPath() + "": "" + this.token.getText() + "" --> "" + this.value.getText(), 3);
/*     */         
/* 439 */         newString = stringReplace(newString, tok, val, true);
/*     */       } 
/*     */       
/* 442 */       if (this.replacefilters.size() > 0) {
/* 443 */         newString = processReplacefilters(newString, src.getPath());
/*     */       }
/*     */       
/* 446 */       boolean changes = !newString.equals(buf);
/* 447 */       if (changes) {
/* 448 */         bw.write(newString, 0, newString.length());
/* 449 */         bw.flush();
/*     */       } 
/*     */ 
/*     */       
/* 453 */       bw.close();
/* 454 */       writer = null;
/* 455 */       br.close();
/* 456 */       reader = null;
/*     */ 
/*     */ 
/*     */       
/* 460 */       if (changes) {
/* 461 */         this.fileCount++;
/* 462 */         this.fileUtils.rename(temp, src);
/* 463 */         temp = null;
/*     */       } 
/*     */     } catch (IOException ioe) {
/* 466 */       throw new BuildException(""IOException in "" + src + "" - "" + ioe.getClass().getName() + "":"" + ioe.getMessage(), ioe, getLocation());
/*     */     }
/*     */     finally {
/*     */       
/* 470 */       if (reader != null) {
/*     */         try {
/* 472 */           reader.close();
/* 473 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 477 */       if (writer != null) {
/*     */         try {
/* 479 */           writer.close();
/* 480 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 484 */       if (temp != null) {
/* 485 */         temp.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String processReplacefilters(String buffer, String filename) {
/* 498 */     String newString = new String(buffer);
/*     */     
/* 500 */     for (int i = 0; i < this.replacefilters.size(); i++) {
/* 501 */       Replacefilter filter = this.replacefilters.elementAt(i);
/*     */ 
/*     */       
/* 504 */       log(""Replacing in "" + filename + "": "" + filter.getToken() + "" --> "" + filter.getReplaceValue(), 3);
/*     */       
/* 506 */       newString = stringReplace(newString, filter.getToken(), filter.getReplaceValue(), true);
/*     */     } 
/*     */ 
/*     */     
/* 510 */     return newString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 519 */   public void setFile(File file) { this.src = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 531 */   public void setSummary(boolean summary) { this.summary = summary; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 543 */   public void setReplaceFilterFile(File filename) { this.replaceFilterFile = filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 552 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 563 */   public void setToken(String token) { createReplaceToken().addText(token); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 572 */   public void setValue(String value) { createReplaceValue().addText(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 582 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NestedString createReplaceToken() {
/* 590 */     if (this.token == null) {
/* 591 */       this.token = new NestedString(this);
/*     */     }
/* 593 */     return this.token;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 601 */   public NestedString createReplaceValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 612 */   public void setPropertyFile(File filename) { this.propertyFile = filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Replacefilter createReplacefilter() {
/* 620 */     Replacefilter filter = new Replacefilter(this);
/* 621 */     this.replacefilters.addElement(filter);
/* 622 */     return filter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String stringReplace(String str, String str1, String str2, boolean countReplaces) {
/* 630 */     StringBuffer ret = new StringBuffer();
/* 631 */     int start = 0;
/* 632 */     int found = str.indexOf(str1);
/* 633 */     while (found >= 0) {
/*     */       
/* 635 */       if (found > start) {
/* 636 */         ret.append(str.substring(start, found));
/*     */       }
/*     */ 
/*     */       
/* 640 */       if (str2 != null) {
/* 641 */         ret.append(str2);
/*     */       }
/*     */ 
/*     */       
/* 645 */       start = found + str1.length();
/* 646 */       found = str.indexOf(str1, start);
/* 647 */       if (countReplaces) {
/* 648 */         this.replaceCount++;
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 653 */     if (str.length() > start) {
/* 654 */       ret.append(str.substring(start, str.length()));
/*     */     }
/*     */     
/* 657 */     return ret.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Replace.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rmic,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.rmi.Remote;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapter;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.ant.util.facade.FacadeTaskHelper;
/*     */ import org.apache.tools.ant.util.facade.ImplementationSpecificArgument;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rmic
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Rmic failed; see the compiler error output for details."";
/*     */   private File baseDir;
/*     */   private String classname;
/*     */   private File sourceBase;
/*     */   private String stubVersion;
/*     */   private Path compileClasspath;
/*     */   private Path extdirs;
/*     */   private boolean verify = false;
/*     */   private boolean filtering = false;
/*     */   private boolean iiop = false;
/*     */   private String iiopopts;
/*     */   private boolean idl = false;
/*     */   private String idlopts;
/*     */   private boolean debug = false;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/* 145 */   private Vector compileList = new Vector();
/*     */   
/* 147 */   private ClassLoader loader = null;
/*     */   
/* 149 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */   
/*     */   private FacadeTaskHelper facade;
/*     */   
/*     */   public Rmic() {
/*     */     try {
/* 155 */       Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 156 */       this.facade = new FacadeTaskHelper(""kaffe"");
/*     */     } catch (ClassNotFoundException cnfe) {
/* 158 */       this.facade = new FacadeTaskHelper(""sun"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setBase(File base) { this.baseDir = base; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public File getBase() { return this.baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void setClassname(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public String getClassname() { return this.classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 196 */   public void setSourceBase(File sourceBase) { this.sourceBase = sourceBase; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public File getSourceBase() { return this.sourceBase; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void setStubVersion(String stubVersion) { this.stubVersion = stubVersion; }
/*     */ 
/*     */ 
/*     */   
/* 215 */   public String getStubVersion() { return this.stubVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setFiltering(boolean filter) { this.filtering = filter; }
/*     */ 
/*     */ 
/*     */   
/* 227 */   public boolean getFiltering() { return this.filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 242 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 249 */     if (this.compileClasspath == null) {
/* 250 */       this.compileClasspath = classpath;
/*     */     } else {
/* 252 */       this.compileClasspath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 260 */     if (this.compileClasspath == null) {
/* 261 */       this.compileClasspath = new Path(getProject());
/*     */     }
/* 263 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setVerify(boolean verify) { this.verify = verify; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public boolean getVerify() { return this.verify; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   public void setIiop(boolean iiop) { this.iiop = iiop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 310 */   public boolean getIiop() { return this.iiop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 317 */   public void setIiopopts(String iiopopts) { this.iiopopts = iiopopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 324 */   public String getIiopopts() { return this.iiopopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 333 */   public void setIdl(boolean idl) { this.idl = idl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 340 */   public boolean getIdl() { return this.idl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 347 */   public void setIdlopts(String idlopts) { this.idlopts = idlopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 354 */   public String getIdlopts() { return this.idlopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 361 */   public Vector getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 370 */   public void setIncludeantruntime(boolean include) { this.includeAntRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 378 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 388 */   public void setIncludejavaruntime(boolean include) { this.includeJavaRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 396 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path extdirs) {
/* 404 */     if (this.extdirs == null) {
/* 405 */       this.extdirs = extdirs;
/*     */     } else {
/* 407 */       this.extdirs.append(extdirs);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 415 */     if (this.extdirs == null) {
/* 416 */       this.extdirs = new Path(getProject());
/*     */     }
/* 418 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 426 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */   
/* 430 */   public Vector getCompileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 440 */   public void setCompiler(String compiler) { this.facade.setImplementation(compiler); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompiler() {
/* 448 */     this.facade.setMagicValue(getProject().getProperty(""build.rmic""));
/* 449 */     return this.facade.getImplementation();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ImplementationSpecificArgument createCompilerArg() {
/* 457 */     ImplementationSpecificArgument arg = new ImplementationSpecificArgument(this);
/*     */     
/* 459 */     this.facade.addImplementationArgument(arg);
/* 460 */     return arg;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCurrentCompilerArgs() {
/* 469 */     getCompiler();
/* 470 */     return this.facade.getArgs();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 478 */     if (this.baseDir == null) {
/* 479 */       throw new BuildException(""base attribute must be set!"", getLocation());
/*     */     }
/* 481 */     if (!this.baseDir.exists()) {
/* 482 */       throw new BuildException(""base does not exist!"", getLocation());
/*     */     }
/*     */     
/* 485 */     if (this.verify) {
/* 486 */       log(""Verify has been turned on."", 3);
/*     */     }
/*     */     
/* 489 */     RmicAdapter adapter = RmicAdapterFactory.getRmic(getCompiler(), this);
/*     */ 
/*     */     
/* 492 */     adapter.setRmic(this);
/*     */     
/* 494 */     Path classpath = adapter.getClasspath();
/* 495 */     this.loader = (ClassLoader)getProject().createClassLoader(classpath);
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 500 */       if (this.classname == null) {
/* 501 */         DirectoryScanner ds = getDirectoryScanner(this.baseDir);
/* 502 */         String[] files = ds.getIncludedFiles();
/* 503 */         scanDir(this.baseDir, files, adapter.getMapper());
/*     */       } else {
/*     */         
/* 506 */         scanDir(this.baseDir, new String[] { this.classname.replace('.', File.separatorChar) + "".class"" }adapter.getMapper());
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 513 */       int fileCount = this.compileList.size();
/* 514 */       if (fileCount > 0) {
/* 515 */         log(""RMI Compiling "" + fileCount + "" class"" + ((fileCount > 1) ? ""es"" : """") + "" to "" + this.baseDir, 2);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 520 */         if (!adapter.execute()) {
/* 521 */           throw new BuildException(""Rmic failed; see the compiler error output for details."", getLocation());
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 530 */       if (null != this.sourceBase && !this.baseDir.equals(this.sourceBase) && fileCount > 0)
/*     */       {
/* 532 */         if (this.idl) {
/* 533 */           log(""Cannot determine sourcefiles in idl mode, "", 1);
/*     */           
/* 535 */           log(""sourcebase attribute will be ignored."", 1);
/*     */         } else {
/*     */           
/* 538 */           for (int j = 0; j < fileCount; j++) {
/* 539 */             moveGeneratedFile(this.baseDir, this.sourceBase, this.compileList.elementAt(j), adapter);
/*     */           }
/*     */         }
/*     */       
/*     */       }
/*     */     } finally {
/*     */       
/* 546 */       this.compileList.removeAllElements();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void moveGeneratedFile(File baseDir, File sourceBaseFile, String classname, RmicAdapter adapter) throws BuildException {
/* 561 */     String classFileName = classname.replace('.', File.separatorChar) + "".class"";
/*     */     
/* 563 */     String[] generatedFiles = adapter.getMapper().mapFileName(classFileName);
/*     */ 
/*     */     
/* 566 */     for (int i = 0; i < generatedFiles.length; i++) {
/* 567 */       String generatedFile = generatedFiles[i];
/* 568 */       if (generatedFile.endsWith("".class"")) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 574 */         int pos = generatedFile.length() - "".class"".length();
/* 575 */         String sourceFileName = generatedFile.substring(0, pos) + "".java"";
/*     */ 
/*     */         
/* 578 */         File oldFile = new File(baseDir, sourceFileName);
/* 579 */         if (oldFile.exists()) {
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 584 */           File newFile = new File(sourceBaseFile, sourceFileName);
/*     */           try {
/* 586 */             if (this.filtering) {
/* 587 */               this.fileUtils.copyFile(oldFile, newFile, new FilterSetCollection(getProject().getGlobalFilterSet()));
/*     */             }
/*     */             else {
/*     */               
/* 591 */               this.fileUtils.copyFile(oldFile, newFile);
/*     */             } 
/* 593 */             oldFile.delete();
/*     */           } catch (IOException ioe) {
/* 595 */             String msg = ""Failed to copy "" + oldFile + "" to "" + newFile + "" due to "" + ioe.getMessage();
/*     */             
/* 597 */             throw new BuildException(msg, ioe, getLocation());
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File baseDir, String[] files, FileNameMapper mapper) {
/* 609 */     String[] newFiles = files;
/* 610 */     if (this.idl) {
/* 611 */       log(""will leave uptodate test to rmic implementation in idl mode."", 3);
/*     */     }
/* 613 */     else if (this.iiop && this.iiopopts != null && this.iiopopts.indexOf(""-always"") > -1) {
/*     */       
/* 615 */       log(""no uptodate test as -always option has been specified"", 3);
/*     */     } else {
/*     */       
/* 618 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 619 */       newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
/*     */     } 
/*     */     
/* 622 */     for (int i = 0; i < newFiles.length; i++) {
/* 623 */       String classname = newFiles[i].replace(File.separatorChar, '.');
/* 624 */       classname = classname.substring(0, classname.lastIndexOf("".class""));
/* 625 */       this.compileList.addElement(classname);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isValidRmiRemote(String classname) {
/*     */     try {
/* 634 */       Class testClass = this.loader.loadClass(classname);
/*     */       
/* 636 */       if (testClass.isInterface() && !this.iiop && !this.idl) {
/* 637 */         return false;
/*     */       }
/* 639 */       return isValidRmiRemote(testClass);
/*     */     } catch (ClassNotFoundException e) {
/* 641 */       log(""Unable to verify class "" + classname + "". It could not be found."", 1);
/*     */     } catch (NoClassDefFoundError e) {
/*     */       
/* 644 */       log(""Unable to verify class "" + classname + "". It is not defined."", 1);
/*     */     } catch (Throwable t) {
/*     */       
/* 647 */       log(""Unable to verify class "" + classname + "". Loading caused Exception: "" + t.getMessage(), 1);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 652 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getRemoteInterface(Class testClass) {
/* 660 */     if (Remote.class.isAssignableFrom(testClass)) {
/* 661 */       Class[] interfaces = testClass.getInterfaces();
/* 662 */       if (interfaces != null) {
/* 663 */         for (int i = 0; i < interfaces.length; i++) {
/* 664 */           if (Remote.class.isAssignableFrom(interfaces[i])) {
/* 665 */             return interfaces[i];
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/* 670 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 678 */   private boolean isValidRmiRemote(Class testClass) { return (getRemoteInterface(testClass) != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 685 */   public ClassLoader getLoader() { return this.loader; }
/*     */ 
/*     */   
/*     */   public class ImplementationSpecificArgument
/*     */     extends ImplementationSpecificArgument
/*     */   {
/*     */     private final Rmic this$0;
/*     */     
/* 693 */     public ImplementationSpecificArgument(Rmic this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 704 */     public void setCompiler(String impl) { setImplementation(impl); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Rmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SendEmail,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.taskdefs.email.EmailTask;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SendEmail
/*    */   extends EmailTask
/*    */ {
/* 81 */   public void setMailport(Integer value) { setMailport(value.intValue()); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\SendEmail.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sequential,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sequential
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*  82 */   private Vector nestedTasks = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void addTask(Task nestedTask) { this.nestedTasks.addElement(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 100 */     for (Enumeration e = this.nestedTasks.elements(); e.hasMoreElements(); ) {
/* 101 */       Task nestedTask = e.nextElement();
/* 102 */       nestedTask.perform();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Sequential.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SignJar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SignJar
/*     */   extends Task
/*     */ {
/*     */   protected File jar;
/*     */   protected String alias;
/*     */   private String keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected String sigfile;
/*     */   protected File signedjar;
/*     */   protected boolean verbose;
/*     */   protected boolean internalsf;
/*     */   protected boolean sectionsonly;
/*     */   private String maxMemory;
/* 118 */   protected Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean lazy;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setMaxmemory(String max) { this.maxMemory = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setJar(File jar) { this.jar = jar; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setAlias(String alias) { this.alias = alias; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setKeystore(String keystore) { this.keystore = keystore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setStorepass(String storepass) { this.storepass = storepass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setStoretype(String storetype) { this.storetype = storetype; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setKeypass(String keypass) { this.keypass = keypass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setSigfile(String sigfile) { this.sigfile = sigfile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setSignedjar(File signedjar) { this.signedjar = signedjar; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setInternalsf(boolean internalsf) { this.internalsf = internalsf; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setSectionsonly(boolean sectionsonly) { this.sectionsonly = sectionsonly; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setLazy(boolean lazy) { this.lazy = lazy; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 231 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 239 */     if (null == this.jar && this.filesets.size() == 0) {
/* 240 */       throw new BuildException(""jar must be set through jar attribute or nested filesets"");
/*     */     }
/*     */     
/* 243 */     if (null != this.jar) {
/* 244 */       if (this.filesets.size() != 0) {
/* 245 */         log(""nested filesets will be ignored if the jar attribute has been specified."", 1);
/*     */       }
/*     */ 
/*     */       
/* 249 */       doOneJar(this.jar, this.signedjar);
/*     */       
/*     */       return;
/*     */     } 
/* 253 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 254 */       FileSet fs = this.filesets.elementAt(i);
/* 255 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 256 */       String[] jarFiles = ds.getIncludedFiles();
/* 257 */       for (int j = 0; j < jarFiles.length; j++) {
/* 258 */         doOneJar(new File(fs.getDir(getProject()), jarFiles[j]), null);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void doOneJar(File jarSource, File jarTarget) throws BuildException {
/* 270 */     if (null == this.alias) {
/* 271 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 274 */     if (null == this.storepass) {
/* 275 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 278 */     if (isUpToDate(jarSource, jarTarget)) {
/*     */       return;
/*     */     }
/*     */     
/* 282 */     ExecTask cmd = (ExecTask)getProject().createTask(""exec"");
/* 283 */     cmd.setExecutable(JavaEnvUtils.getJdkExecutable(""jarsigner""));
/*     */     
/* 285 */     if (this.maxMemory != null) {
/* 286 */       cmd.createArg().setValue(""-J-Xmx"" + this.maxMemory);
/*     */     }
/*     */     
/* 289 */     if (null != this.keystore) {
/*     */       
/* 291 */       File keystoreFile = getProject().resolveFile(this.keystore);
/* 292 */       if (keystoreFile.exists()) {
/* 293 */         cmd.createArg().setValue(""-keystore"");
/* 294 */         cmd.createArg().setValue(keystoreFile.getPath());
/*     */       } else {
/*     */         
/* 297 */         cmd.createArg().setValue(""-keystore"");
/* 298 */         cmd.createArg().setValue(this.keystore);
/*     */       } 
/*     */     } 
/*     */     
/* 302 */     if (null != this.storepass) {
/* 303 */       cmd.createArg().setValue(""-storepass"");
/* 304 */       cmd.createArg().setValue(this.storepass);
/*     */     } 
/*     */     
/* 307 */     if (null != this.storetype) {
/* 308 */       cmd.createArg().setValue(""-storetype"");
/* 309 */       cmd.createArg().setValue(this.storetype);
/*     */     } 
/*     */     
/* 312 */     if (null != this.keypass) {
/* 313 */       cmd.createArg().setValue(""-keypass"");
/* 314 */       cmd.createArg().setValue(this.keypass);
/*     */     } 
/*     */     
/* 317 */     if (null != this.sigfile) {
/* 318 */       cmd.createArg().setValue(""-sigfile"");
/* 319 */       cmd.createArg().setValue(this.sigfile);
/*     */     } 
/*     */     
/* 322 */     if (null != jarTarget) {
/* 323 */       cmd.createArg().setValue(""-signedjar"");
/* 324 */       cmd.createArg().setValue(jarTarget.toString());
/*     */     } 
/*     */     
/* 327 */     if (this.verbose) {
/* 328 */       cmd.createArg().setValue(""-verbose"");
/*     */     }
/*     */     
/* 331 */     if (this.internalsf) {
/* 332 */       cmd.createArg().setValue(""-internalsf"");
/*     */     }
/*     */     
/* 335 */     if (this.sectionsonly) {
/* 336 */       cmd.createArg().setValue(""-sectionsonly"");
/*     */     }
/*     */     
/* 339 */     cmd.createArg().setValue(jarSource.toString());
/*     */     
/* 341 */     cmd.createArg().setValue(this.alias);
/*     */     
/* 343 */     log(""Signing Jar : "" + jarSource.getAbsolutePath());
/* 344 */     cmd.setFailonerror(true);
/* 345 */     cmd.setTaskName(getTaskName());
/* 346 */     cmd.execute();
/*     */   }
/*     */   
/*     */   protected boolean isUpToDate(File jarFile, File signedjarFile) {
/* 350 */     if (null == jarFile) {
/* 351 */       return false;
/*     */     }
/*     */     
/* 354 */     if (null != signedjarFile) {
/*     */       
/* 356 */       if (!jarFile.exists()) {
/* 357 */         return false;
/*     */       }
/* 359 */       if (!signedjarFile.exists()) {
/* 360 */         return false;
/*     */       }
/* 362 */       if (jarFile.equals(signedjarFile)) {
/* 363 */         return false;
/*     */       }
/* 365 */       if (signedjarFile.lastModified() > jarFile.lastModified()) {
/* 366 */         return true;
/*     */       }
/*     */     }
/* 369 */     else if (this.lazy) {
/* 370 */       return isSigned(jarFile);
/*     */     } 
/*     */ 
/*     */     
/* 374 */     return false;
/*     */   }
/*     */   
/*     */   protected boolean isSigned(File file) {
/* 378 */     String SIG_START = ""META-INF/"";
/* 379 */     String SIG_END = "".SF"";
/*     */     
/* 381 */     if (!file.exists()) {
/* 382 */       return false;
/*     */     }
/* 384 */     ZipFile jarFile = null;
/*     */     try {
/* 386 */       jarFile = new ZipFile(file);
/* 387 */       if (null == this.alias) {
/* 388 */         Enumeration entries = jarFile.entries();
/* 389 */         while (entries.hasMoreElements()) {
/* 390 */           String name = ((ZipEntry)entries.nextElement()).getName();
/* 391 */           if (name.startsWith(""META-INF/"") && name.endsWith("".SF"")) {
/* 392 */             return true;
/*     */           }
/*     */         } 
/* 395 */         return false;
/*     */       } 
/* 397 */       return (jarFile.getEntry(""META-INF/"" + this.alias.toUpperCase() + "".SF"") != null);
/*     */     }
/*     */     catch (IOException e) {
/*     */       
/* 401 */       return false;
/*     */     } finally {
/* 403 */       if (jarFile != null)
/*     */         try {
/* 405 */           jarFile.close();
/* 406 */         } catch (IOException e) {} 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\SignJar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sleep,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sleep
/*     */   extends Task
/*     */ {
/*     */   private boolean failOnError = true;
/*  88 */   private int seconds = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   private int hours = 0;
/*     */ 
/*     */ 
/*     */   
/*  97 */   private int minutes = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int milliseconds = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setSeconds(int seconds) { this.seconds = seconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setHours(int hours) { this.hours = hours; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setMinutes(int minutes) { this.minutes = minutes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setMilliseconds(int milliseconds) { this.milliseconds = milliseconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void doSleep(long millis) {
/*     */     try {
/* 160 */       Thread.sleep(millis);
/* 161 */     } catch (InterruptedException ie) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   private long getSleepTime() { return ((this.hours * 60L + this.minutes) * 60L + this.seconds) * 1000L + this.milliseconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() throws BuildException {
/* 195 */     if (getSleepTime() < 0L) {
/* 196 */       throw new BuildException(""Negative sleep periods are not supported"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 211 */       validate();
/* 212 */       long sleepTime = getSleepTime();
/* 213 */       log(""sleeping for "" + sleepTime + "" milliseconds"", 3);
/*     */       
/* 215 */       doSleep(sleepTime);
/*     */     } catch (Exception e) {
/* 217 */       if (this.failOnError) {
/* 218 */         throw new BuildException(e);
/*     */       }
/* 220 */       String text = e.toString();
/* 221 */       log(text, 0);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Sleep.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SQLExec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintStream;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import java.sql.Connection;
/*     */ import java.sql.ResultSet;
/*     */ import java.sql.ResultSetMetaData;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.Statement;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SQLExec
/*     */   extends JDBCTask
/*     */ {
/*     */   public static class DelimiterType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String NORMAL = ""normal"";
/*     */     public static final String ROW = ""row"";
/*     */     
/* 125 */     public String[] getValues() { return new String[] { ""normal"", ""row"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private int goodSql = 0;
/*     */   
/* 133 */   private int totalSql = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   private Connection conn = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   private Statement statement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   private String sqlCommand = """";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   private Vector transactions = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   private String delimiter = "";"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   private String delimiterType = ""normal"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean print = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean showheaders = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   private File output = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   private String onError = ""abort"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean keepformat = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean escapeProcessing = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setSrc(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void addText(String sql) { this.sqlCommand += sql; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Transaction createTransaction() {
/* 247 */     Transaction t = new Transaction(this);
/* 248 */     this.transactions.addElement(t);
/* 249 */     return t;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public void setDelimiter(String delimiter) { this.delimiter = delimiter; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setDelimiterType(DelimiterType delimiterType) { this.delimiterType = delimiterType.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setPrint(boolean print) { this.print = print; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void setShowheaders(boolean showheaders) { this.showheaders = showheaders; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 305 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 324 */   public void setOnerror(OnError action) { this.onError = action.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public void setKeepformat(boolean keepformat) { this.keepformat = keepformat; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   public void setEscapeProcessing(boolean enable) { this.escapeProcessing = enable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 350 */     Vector savedTransaction = (Vector)this.transactions.clone();
/* 351 */     String savedSqlCommand = this.sqlCommand;
/*     */     
/* 353 */     this.sqlCommand = this.sqlCommand.trim();
/*     */     
/*     */     try {
/* 356 */       if (this.srcFile == null && this.sqlCommand.length() == 0 && this.filesets.isEmpty())
/*     */       {
/* 358 */         if (this.transactions.size() == 0) {
/* 359 */           throw new BuildException(""Source file or fileset, transactions or sql statement must be set!"", getLocation());
/*     */         }
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 365 */       if (this.srcFile != null && !this.srcFile.exists()) {
/* 366 */         throw new BuildException(""Source file does not exist!"", getLocation());
/*     */       }
/*     */ 
/*     */       
/* 370 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 371 */         FileSet fs = this.filesets.elementAt(i);
/* 372 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 373 */         File srcDir = fs.getDir(getProject());
/*     */         
/* 375 */         String[] srcFiles = ds.getIncludedFiles();
/*     */ 
/*     */         
/* 378 */         for (int j = 0; j < srcFiles.length; j++) {
/* 379 */           Transaction t = createTransaction();
/* 380 */           t.setSrc(new File(srcDir, srcFiles[j]));
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 385 */       Transaction t = createTransaction();
/* 386 */       t.setSrc(this.srcFile);
/* 387 */       t.addText(this.sqlCommand);
/* 388 */       this.conn = getConnection();
/* 389 */       if (!isValidRdbms(this.conn)) {
/*     */         return;
/*     */       }
/*     */       try {
/* 393 */         this.statement = this.conn.createStatement();
/* 394 */         this.statement.setEscapeProcessing(this.escapeProcessing);
/*     */         
/* 396 */         PrintStream out = System.out;
/*     */         try {
/* 398 */           if (this.output != null) {
/* 399 */             log(""Opening PrintStream to output file "" + this.output, 3);
/*     */             
/* 401 */             out = new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output.getAbsolutePath(), this.append)));
/*     */           } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 409 */           Enumeration e = this.transactions.elements();
/* 410 */           while (e.hasMoreElements()) {
/*     */             
/* 412 */             ((Transaction)e.nextElement()).runTransaction(out);
/* 413 */             if (!isAutocommit()) {
/* 414 */               log(""Committing transaction"", 3);
/* 415 */               this.conn.commit();
/*     */             } 
/*     */           } 
/*     */         } finally {
/* 419 */           if (out != null && out != System.out) {
/* 420 */             out.close();
/*     */           }
/*     */         } 
/*     */       } catch (IOException e) {
/* 424 */         if (!isAutocommit() && this.conn != null && this.onError.equals(""abort"")) {
/*     */           try {
/* 426 */             this.conn.rollback();
/* 427 */           } catch (SQLException ex) {}
/*     */         }
/*     */ 
/*     */         
/* 431 */         throw new BuildException(e, getLocation());
/*     */       } catch (SQLException e) {
/* 433 */         if (!isAutocommit() && this.conn != null && this.onError.equals(""abort"")) {
/*     */           try {
/* 435 */             this.conn.rollback();
/* 436 */           } catch (SQLException ex) {}
/*     */         }
/*     */ 
/*     */         
/* 440 */         throw new BuildException(e, getLocation());
/*     */       } finally {
/*     */         try {
/* 443 */           if (this.statement != null) {
/* 444 */             this.statement.close();
/*     */           }
/* 446 */           if (this.conn != null) {
/* 447 */             this.conn.close();
/*     */           }
/* 449 */         } catch (SQLException ex) {}
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 454 */       log(this.goodSql + "" of "" + this.totalSql + "" SQL statements executed successfully"");
/*     */     } finally {
/*     */       
/* 457 */       this.transactions = savedTransaction;
/* 458 */       this.sqlCommand = savedSqlCommand;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException {
/* 467 */     StringBuffer sql = new StringBuffer();
/* 468 */     String line = """";
/*     */     
/* 470 */     BufferedReader in = new BufferedReader(reader);
/*     */     
/* 472 */     while ((line = in.readLine()) != null) {
/* 473 */       if (!this.keepformat) {
/* 474 */         line = line.trim();
/*     */       }
/* 476 */       line = getProject().replaceProperties(line);
/* 477 */       if (!this.keepformat) {
/* 478 */         if (line.startsWith(""//"")) {
/*     */           continue;
/*     */         }
/* 481 */         if (line.startsWith(""--"")) {
/*     */           continue;
/*     */         }
/* 484 */         StringTokenizer st = new StringTokenizer(line);
/* 485 */         if (st.hasMoreTokens()) {
/* 486 */           String token = st.nextToken();
/* 487 */           if (""REM"".equalsIgnoreCase(token)) {
/*     */             continue;
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 493 */       if (!this.keepformat) {
/* 494 */         sql.append("" "" + line);
/*     */       } else {
/* 496 */         sql.append(""\n"" + line);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 502 */       if (!this.keepformat && 
/* 503 */         line.indexOf(""--"") >= 0) {
/* 504 */         sql.append(""\n"");
/*     */       }
/*     */       
/* 507 */       if ((this.delimiterType.equals(""normal"") && sql.toString().endsWith(this.delimiter)) || (this.delimiterType.equals(""row"") && line.equals(this.delimiter))) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 512 */         execSQL(sql.substring(0, sql.length() - this.delimiter.length()), out);
/*     */         
/* 514 */         sql.replace(0, sql.length(), """");
/*     */       } 
/*     */     } 
/*     */     
/* 518 */     if (!sql.equals("""")) {
/* 519 */       execSQL(sql.toString(), out);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void execSQL(String sql, PrintStream out) throws SQLException {
/* 529 */     if ("""".equals(sql.trim())) {
/*     */       return;
/*     */     }
/*     */     
/*     */     try {
/* 534 */       this.totalSql++;
/* 535 */       log(""SQL: "" + sql, 3);
/*     */ 
/*     */       
/* 538 */       int updateCount = 0, updateCountTotal = 0;
/* 539 */       ResultSet resultSet = null;
/*     */       
/* 541 */       boolean ret = this.statement.execute(sql);
/* 542 */       updateCount = this.statement.getUpdateCount();
/* 543 */       resultSet = this.statement.getResultSet();
/*     */       do {
/* 545 */         if (!ret) {
/* 546 */           if (updateCount != -1) {
/* 547 */             updateCountTotal += updateCount;
/*     */           }
/*     */         }
/* 550 */         else if (this.print) {
/* 551 */           printResults(out);
/*     */         } 
/*     */         
/* 554 */         ret = this.statement.getMoreResults();
/* 555 */         updateCount = this.statement.getUpdateCount();
/* 556 */         resultSet = this.statement.getResultSet();
/* 557 */       } while (ret);
/*     */       
/* 559 */       log(updateCountTotal + "" rows affected"", 3);
/*     */ 
/*     */       
/* 562 */       if (this.print) {
/* 563 */         StringBuffer line = new StringBuffer();
/* 564 */         line.append(updateCountTotal + "" rows affected"");
/* 565 */         out.println(line);
/*     */       } 
/*     */       
/* 568 */       SQLWarning warning = this.conn.getWarnings();
/* 569 */       while (warning != null) {
/* 570 */         log(warning + "" sql warning"", 3);
/* 571 */         warning = warning.getNextWarning();
/*     */       } 
/* 573 */       this.conn.clearWarnings();
/* 574 */       this.goodSql++;
/*     */     } catch (SQLException e) {
/* 576 */       log(""Failed to execute: "" + sql, 0);
/* 577 */       if (!this.onError.equals(""continue"")) {
/* 578 */         throw e;
/*     */       }
/* 580 */       log(e.toString(), 0);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void printResults(PrintStream out) throws SQLException {
/* 588 */     ResultSet rs = null;
/* 589 */     rs = this.statement.getResultSet();
/* 590 */     if (rs != null) {
/* 591 */       log(""Processing new result set."", 3);
/* 592 */       ResultSetMetaData md = rs.getMetaData();
/* 593 */       int columnCount = md.getColumnCount();
/* 594 */       StringBuffer line = new StringBuffer();
/* 595 */       if (this.showheaders) {
/* 596 */         for (int col = 1; col < columnCount; col++) {
/* 597 */           line.append(md.getColumnName(col));
/* 598 */           line.append("","");
/*     */         } 
/* 600 */         line.append(md.getColumnName(columnCount));
/* 601 */         out.println(line);
/* 602 */         line = new StringBuffer();
/*     */       } 
/* 604 */       while (rs.next()) {
/* 605 */         boolean first = true;
/* 606 */         for (int col = 1; col <= columnCount; col++) {
/* 607 */           String columnValue = rs.getString(col);
/* 608 */           if (columnValue != null) {
/* 609 */             columnValue = columnValue.trim();
/*     */           }
/*     */           
/* 612 */           if (first) {
/* 613 */             first = false;
/*     */           } else {
/* 615 */             line.append("","");
/*     */           } 
/* 617 */           line.append(columnValue);
/*     */         } 
/* 619 */         out.println(line);
/* 620 */         line = new StringBuffer();
/*     */       } 
/*     */     } 
/* 623 */     out.println();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class OnError
/*     */     extends EnumeratedAttribute
/*     */   {
/* 632 */     public String[] getValues() { return new String[] { ""continue"", ""stop"", ""abort"" }; }
/*     */   }
/*     */   
/*     */   public class Transaction
/*     */   {
/*     */     private File tSrcFile;
/*     */     private String tSqlCommand;
/*     */     private final SQLExec this$0;
/*     */     
/*     */     public Transaction(SQLExec this$0) {
/* 642 */       this.this$0 = this$0;
/* 643 */       this.tSrcFile = null;
/* 644 */       this.tSqlCommand = """";
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 650 */     public void setSrc(File src) { this.tSrcFile = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 657 */     public void addText(String sql) { this.tSqlCommand += sql; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void runTransaction(PrintStream out) throws IOException, SQLException {
/* 665 */       if (this.tSqlCommand.length() != 0) {
/* 666 */         this.this$0.log(""Executing commands"", 2);
/* 667 */         this.this$0.runStatements(new StringReader(this.tSqlCommand), out);
/*     */       } 
/*     */       
/* 670 */       if (this.tSrcFile != null) {
/* 671 */         this.this$0.log(""Executing file: "" + this.tSrcFile.getAbsolutePath(), 2);
/*     */         
/* 673 */         Reader reader = (this.this$0.encoding == null) ? new FileReader(this.tSrcFile) : new InputStreamReader(new FileInputStream(this.tSrcFile), this.this$0.encoding);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         try {
/* 679 */           this.this$0.runStatements(reader, out);
/*     */         } finally {
/* 681 */           reader.close();
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\SQLExec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.StreamPumper,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StreamPumper
/*     */   implements Runnable
/*     */ {
/*     */   private static final int SIZE = 128;
/*     */   private InputStream is;
/*     */   private OutputStream os;
/*     */   private boolean finished;
/*     */   private boolean closeWhenExhausted;
/*     */   
/*     */   public StreamPumper(InputStream is, OutputStream os, boolean closeWhenExhausted) {
/*  88 */     this.is = is;
/*  89 */     this.os = os;
/*  90 */     this.closeWhenExhausted = closeWhenExhausted;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public StreamPumper(InputStream is, OutputStream os) { this(is, os, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/* 110 */     synchronized (this) {
/*     */       
/* 112 */       this.finished = false;
/*     */     } 
/*     */     
/* 115 */     byte[] buf = new byte[128];
/*     */     
/*     */     try {
/*     */       int length;
/* 119 */       while ((length = this.is.read(buf)) > 0) {
/* 120 */         this.os.write(buf, 0, length);
/*     */       }
/* 122 */     } catch (Exception e) {
/*     */     
/*     */     } finally {
/* 125 */       if (this.closeWhenExhausted) {
/*     */         try {
/* 127 */           this.os.close();
/* 128 */         } catch (IOException e) {}
/*     */       }
/*     */ 
/*     */       
/* 132 */       synchronized (this) {
/* 133 */         this.finished = true;
/* 134 */         notifyAll();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public synchronized boolean isFinished() { return this.finished; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void waitFor() throws InterruptedException {
/* 153 */     while (!isFinished())
/* 154 */       wait(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\StreamPumper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SubAnt,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.DirSet;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.PropertySet;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SubAnt
/*     */   extends Task
/*     */ {
/*     */   private Path buildpath;
/* 103 */   private String target = null;
/* 104 */   private String antfile = ""build.xml"";
/* 105 */   private File genericantfile = null;
/*     */   private boolean inheritAll = false;
/*     */   private boolean inheritRefs = false;
/*     */   private boolean failOnError = true;
/* 109 */   private String output = null;
/*     */   
/* 111 */   private Vector properties = new Vector();
/* 112 */   private Vector references = new Vector();
/* 113 */   private Vector propertySets = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 118 */     if (this.buildpath == null) {
/* 119 */       throw new BuildException(""No buildpath specified"");
/*     */     }
/*     */     
/* 122 */     String[] filenames = this.buildpath.list();
/* 123 */     int count = filenames.length;
/* 124 */     if (count < 1) {
/* 125 */       log(""No sub-builds to iterate on"", 1);
/*     */ 
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 134 */     BuildException buildException = null;
/* 135 */     for (int i = 0; i < count; i++) {
/* 136 */       File file = null;
/* 137 */       Throwable thrownException = null;
/*     */       try {
/* 139 */         File directory = null;
/* 140 */         file = new File(filenames[i]);
/* 141 */         if (file.isDirectory()) {
/* 142 */           if (this.genericantfile != null) {
/* 143 */             directory = file;
/* 144 */             file = this.genericantfile;
/*     */           } else {
/* 146 */             file = new File(file, this.antfile);
/*     */           } 
/*     */         }
/* 149 */         execute(file, directory);
/*     */       } catch (RuntimeException ex) {
/* 151 */         if (!getProject().isKeepGoingMode()) {
/* 152 */           throw ex;
/*     */         }
/* 154 */         thrownException = ex;
/*     */       } catch (Throwable ex) {
/* 156 */         if (!getProject().isKeepGoingMode()) {
/* 157 */           throw new BuildException(ex);
/*     */         }
/* 159 */         thrownException = ex;
/*     */       } 
/* 161 */       if (thrownException != null) {
/* 162 */         if (thrownException instanceof BuildException) {
/* 163 */           log(""File '"" + file + ""' failed with message '"" + thrownException.getMessage() + ""'."", 0);
/*     */ 
/*     */ 
/*     */           
/* 167 */           if (buildException == null) {
/* 168 */             buildException = (BuildException)thrownException;
/*     */           }
/*     */         } else {
/* 171 */           log(""Target '"" + file + ""' failed with message '"" + thrownException.getMessage() + ""'."", 0);
/*     */ 
/*     */           
/* 174 */           thrownException.printStackTrace(System.err);
/* 175 */           if (buildException == null) {
/* 176 */             buildException = new BuildException(thrownException);
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 183 */     if (buildException != null) {
/* 184 */       throw buildException;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void execute(File file, File directory) throws BuildException {
/* 200 */     if (!file.exists() || file.isDirectory() || !file.canRead()) {
/* 201 */       String msg = ""Invalid file: "" + file;
/* 202 */       if (this.failOnError) {
/* 203 */         throw new BuildException(msg);
/*     */       }
/* 205 */       log(msg, 1);
/*     */       
/*     */       return;
/*     */     } 
/* 209 */     Ant ant = createAntTask(directory);
/* 210 */     String antfilename = null;
/*     */     try {
/* 212 */       antfilename = file.getCanonicalPath();
/*     */     } catch (IOException e) {
/* 214 */       throw new BuildException(e);
/*     */     } 
/*     */     
/* 217 */     ant.setAntfile(antfilename);
/*     */     try {
/* 219 */       ant.execute();
/*     */     } catch (BuildException e) {
/* 221 */       if (this.failOnError) {
/* 222 */         throw e;
/*     */       }
/* 224 */       log(""Failure for target '"" + this.target + ""' of: "" + antfilename + ""\n"" + e.getMessage(), 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public void setAntfile(String antfile) { this.antfile = antfile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 251 */   public void setGenericAntfile(File afile) { this.genericantfile = afile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   public void setFailonerror(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void setTarget(String target) { this.target = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setOutput(String s) { this.output = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setInheritall(boolean b) { this.inheritAll = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 301 */   public void setInheritrefs(boolean b) { this.inheritRefs = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public void addProperty(Property p) { this.properties.addElement(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 321 */   public void addReference(Ant.Reference r) { this.references.addElement(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public void addPropertyset(PropertySet ps) { this.propertySets.addElement(ps); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   public void addDirset(DirSet set) { getBuildpath().addDirset(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 356 */   public void addFileset(FileSet set) { getBuildpath().addFileset(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 368 */   public void addFilelist(FileList list) { getBuildpath().addFilelist(list); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   public void setBuildpath(Path s) { getBuildpath().append(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 386 */   public Path createBuildpath() { return getBuildpath().createPath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 396 */   public Path.PathElement createBuildpathElement() { return getBuildpath().createPathElement(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Path getBuildpath() {
/* 405 */     if (this.buildpath == null) {
/* 406 */       this.buildpath = new Path(getProject());
/*     */     }
/* 408 */     return this.buildpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 417 */   public void setBuildpathRef(Reference r) { createBuildpath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Ant createAntTask(File directory) {
/* 429 */     Ant ant = (Ant)getProject().createTask(""ant"");
/* 430 */     ant.setOwningTarget(getOwningTarget());
/* 431 */     ant.setTaskName(getTaskName());
/* 432 */     ant.init();
/* 433 */     if (this.target != null && this.target.length() > 0) {
/* 434 */       ant.setTarget(this.target);
/*     */     }
/*     */ 
/*     */     
/* 438 */     if (this.output != null) {
/* 439 */       ant.setOutput(this.output);
/*     */     }
/*     */     
/* 442 */     if (directory != null) {
/* 443 */       ant.setDir(directory);
/*     */     }
/*     */     
/* 446 */     ant.setInheritAll(this.inheritAll);
/* 447 */     for (Enumeration i = this.properties.elements(); i.hasMoreElements();) {
/* 448 */       copyProperty(ant.createProperty(), i.nextElement());
/*     */     }
/*     */     
/* 451 */     for (Enumeration i = this.propertySets.elements(); i.hasMoreElements();) {
/* 452 */       ant.addPropertyset(i.nextElement());
/*     */     }
/*     */     
/* 455 */     ant.setInheritRefs(this.inheritRefs);
/* 456 */     for (Enumeration i = this.references.elements(); i.hasMoreElements();) {
/* 457 */       ant.addReference(i.nextElement());
/*     */     }
/*     */     
/* 460 */     return ant;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void copyProperty(Property to, Property from) {
/* 470 */     to.setName(from.getName());
/*     */     
/* 472 */     if (from.getValue() != null) {
/* 473 */       to.setValue(from.getValue());
/*     */     }
/* 475 */     if (from.getFile() != null) {
/* 476 */       to.setFile(from.getFile());
/*     */     }
/* 478 */     if (from.getResource() != null) {
/* 479 */       to.setResource(from.getResource());
/*     */     }
/* 481 */     if (from.getPrefix() != null) {
/* 482 */       to.setPrefix(from.getPrefix());
/*     */     }
/* 484 */     if (from.getRefid() != null) {
/* 485 */       to.setRefid(from.getRefid());
/*     */     }
/* 487 */     if (from.getEnvironment() != null) {
/* 488 */       to.setEnvironment(from.getEnvironment());
/*     */     }
/* 490 */     if (from.getClasspath() != null)
/* 491 */       to.setClasspath(from.getClasspath()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\SubAnt.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sync,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sync
/*     */   extends Task
/*     */ {
/*     */   private MyCopy _copy;
/*     */   
/*     */   public void init() throws BuildException {
/* 100 */     this._copy = new MyCopy();
/* 101 */     configureTask(this._copy);
/*     */ 
/*     */     
/* 104 */     this._copy.setFiltering(false);
/* 105 */     this._copy.setIncludeEmptyDirs(false);
/* 106 */     this._copy.setPreserveLastModified(true);
/*     */   }
/*     */   
/*     */   private void configureTask(Task helper) {
/* 110 */     helper.setProject(getProject());
/* 111 */     helper.setTaskName(getTaskName());
/* 112 */     helper.setOwningTarget(getOwningTarget());
/* 113 */     helper.init();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 120 */     File toDir = this._copy.getToDir();
/*     */ 
/*     */     
/* 123 */     Hashtable allFiles = this._copy._dest2src;
/*     */ 
/*     */ 
/*     */     
/* 127 */     boolean noRemovalNecessary = (!toDir.exists() || (toDir.list()).length < 1);
/*     */ 
/*     */     
/* 130 */     log(""PASS#1: Copying files to "" + toDir, 4);
/* 131 */     this._copy.execute();
/*     */ 
/*     */     
/* 134 */     if (noRemovalNecessary) {
/* 135 */       log(""NO removing necessary in "" + toDir, 4);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 140 */     log(""PASS#2: Removing orphan files from "" + toDir, 4);
/* 141 */     int[] removedFileCount = removeOrphanFiles(allFiles, toDir);
/* 142 */     logRemovedCount(removedFileCount[0], ""dangling director"", ""y"", ""ies"");
/* 143 */     logRemovedCount(removedFileCount[1], ""dangling file"", """", ""s"");
/*     */ 
/*     */     
/* 146 */     if (!this._copy.getIncludeEmptyDirs()) {
/* 147 */       log(""PASS#3: Removing empty directories from "" + toDir, 4);
/*     */       
/* 149 */       int removedDirCount = removeEmptyDirectories(toDir, false);
/* 150 */       logRemovedCount(removedDirCount, ""empty director"", ""y"", ""ies"");
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void logRemovedCount(int count, String prefix, String singularSuffix, String pluralSuffix) {
/* 156 */     File toDir = this._copy.getToDir();
/*     */     
/* 158 */     String what = (prefix == null) ? """" : prefix;
/* 159 */     what = what + ((count < 2) ? singularSuffix : pluralSuffix);
/*     */     
/* 161 */     if (count > 0) {
/* 162 */       log(""Removed "" + count + "" "" + what + "" from "" + toDir, 2);
/*     */     } else {
/*     */       
/* 165 */       log(""NO "" + what + "" to remove from "" + toDir, 3);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int[] removeOrphanFiles(Hashtable nonOrphans, File file) {
/* 187 */     int[] removedCount = { 0, 0, 0 };
/* 188 */     if (file.isDirectory()) {
/* 189 */       File[] children = file.listFiles();
/* 190 */       for (int i = 0; i < children.length; i++) {
/* 191 */         int[] temp = removeOrphanFiles(nonOrphans, children[i]);
/* 192 */         removedCount[0] = removedCount[0] + temp[0];
/* 193 */         removedCount[1] = removedCount[1] + temp[1];
/* 194 */         removedCount[2] = removedCount[2] + temp[2];
/*     */       } 
/*     */       
/* 197 */       if (nonOrphans.get(file) == null && removedCount[2] == 0) {
/* 198 */         log(""Removing orphan directory: "" + file, 4);
/* 199 */         file.delete();
/* 200 */         removedCount[0] = removedCount[0] + 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/*     */       else {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 221 */         removedCount[2] = 1;
/*     */       }
/*     */     
/*     */     }
/* 225 */     else if (nonOrphans.get(file) == null) {
/* 226 */       log(""Removing orphan file: "" + file, 4);
/* 227 */       file.delete();
/* 228 */       removedCount[1] = removedCount[1] + 1;
/*     */     } else {
/* 230 */       removedCount[2] = 1;
/*     */     } 
/*     */     
/* 233 */     return removedCount;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int removeEmptyDirectories(File dir, boolean removeIfEmpty) {
/* 253 */     int removedCount = 0;
/* 254 */     if (dir.isDirectory()) {
/* 255 */       File[] children = dir.listFiles();
/* 256 */       for (int i = 0; i < children.length; i++) {
/* 257 */         File file = children[i];
/*     */         
/* 259 */         if (file.isDirectory()) {
/* 260 */           removedCount += removeEmptyDirectories(file, true);
/*     */         }
/*     */       } 
/* 263 */       if (children.length > 0)
/*     */       {
/*     */         
/* 266 */         children = dir.listFiles();
/*     */       }
/* 268 */       if (children.length < 1 && removeIfEmpty) {
/* 269 */         log(""Removing empty directory: "" + dir, 4);
/* 270 */         dir.delete();
/* 271 */         removedCount++;
/*     */       } 
/*     */     } 
/* 274 */     return removedCount;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setTodir(File destDir) { this._copy.setTodir(destDir); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void setVerbose(boolean verbose) { this._copy.setVerbose(verbose); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void setOverwrite(boolean overwrite) { this._copy.setOverwrite(overwrite); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   public void setIncludeEmptyDirs(boolean includeEmpty) { this._copy.setIncludeEmptyDirs(includeEmpty); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void setFailOnError(boolean failonerror) { this._copy.setFailOnError(failonerror); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 322 */   public void addFileset(FileSet set) { this._copy.addFileset(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class MyCopy
/*     */     extends Copy
/*     */   {
/* 332 */     private Hashtable _dest2src = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void buildMap(File fromDir, File toDir, String[] names, FileNameMapper mapper, Hashtable map) {
/* 339 */       Sync.assertTrue(""No mapper"", mapper instanceof org.apache.tools.ant.util.IdentityMapper);
/*     */       
/* 341 */       super.buildMap(fromDir, toDir, names, mapper, map);
/*     */       
/* 343 */       for (int i = 0; i < names.length; i++) {
/* 344 */         String name = names[i];
/* 345 */         File dest = new File(toDir, name);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 350 */         this._dest2src.put(dest, fromDir);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 355 */     public File getToDir() { return this.destDir; }
/*     */ 
/*     */ 
/*     */     
/* 359 */     public boolean getIncludeEmptyDirs() { return this.includeEmpty; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void assertTrue(String message, boolean condition) {
/* 368 */     if (!condition)
/* 369 */       throw new BuildException(""Assertion Error: "" + message); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Sync.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.GZIPOutputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.bzip2.CBZip2OutputStream;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tar
/*     */   extends MatchingTask
/*     */ {
/*     */   public static final String WARN = ""warn"";
/*     */   public static final String FAIL = ""fail"";
/*     */   public static final String TRUNCATE = ""truncate"";
/*     */   public static final String GNU = ""gnu"";
/*     */   public static final String OMIT = ""omit"";
/*     */   File tarFile;
/*     */   File baseDir;
/* 122 */   private TarLongFileMode longFileMode = new TarLongFileMode();
/*     */   
/* 124 */   Vector filesets = new Vector();
/* 125 */   Vector fileSetFiles = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean longWarningGiven = false;
/*     */ 
/*     */   
/* 132 */   private TarCompressionMethod compression = new TarCompressionMethod();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarFileSet createTarFileSet() {
/* 138 */     TarFileSet fileset = new TarFileSet();
/* 139 */     this.filesets.addElement(fileset);
/* 140 */     return fileset;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setTarfile(File tarFile) { this.tarFile = tarFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setDestFile(File destFile) { this.tarFile = destFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public void setBasedir(File baseDir) { this.baseDir = baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLongfile(String mode) {
/* 186 */     log(""DEPRECATED - The setLongfile(String) method has been deprecated. Use setLongfile(Tar.TarLongFileMode) instead."");
/*     */     
/* 188 */     this.longFileMode = new TarLongFileMode();
/* 189 */     this.longFileMode.setValue(mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setLongfile(TarLongFileMode mode) { this.longFileMode = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setCompression(TarCompressionMethod mode) { this.compression = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 226 */     if (this.tarFile == null) {
/* 227 */       throw new BuildException(""tarfile attribute must be set!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 231 */     if (this.tarFile.exists() && this.tarFile.isDirectory()) {
/* 232 */       throw new BuildException(""tarfile is a directory!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 236 */     if (this.tarFile.exists() && !this.tarFile.canWrite()) {
/* 237 */       throw new BuildException(""Can not write to the specified tarfile!"", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 241 */     Vector savedFileSets = (Vector)this.filesets.clone();
/*     */     try {
/* 243 */       if (this.baseDir != null) {
/* 244 */         if (!this.baseDir.exists()) {
/* 245 */           throw new BuildException(""basedir does not exist!"", getLocation());
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 250 */         TarFileSet mainFileSet = new TarFileSet(this.fileset);
/* 251 */         mainFileSet.setDir(this.baseDir);
/* 252 */         this.filesets.addElement(mainFileSet);
/*     */       } 
/*     */       
/* 255 */       if (this.filesets.size() == 0) {
/* 256 */         throw new BuildException(""You must supply either a basedir attribute or some nested filesets."", getLocation());
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 263 */       boolean upToDate = true;
/* 264 */       for (Enumeration e = this.filesets.elements(); e.hasMoreElements(); ) {
/* 265 */         TarFileSet fs = e.nextElement();
/* 266 */         String[] files = fs.getFiles(getProject());
/*     */         
/* 268 */         if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {
/* 269 */           upToDate = false;
/*     */         }
/*     */         
/* 272 */         for (int i = 0; i < files.length; i++) {
/* 273 */           if (this.tarFile.equals(new File(fs.getDir(getProject()), files[i])))
/*     */           {
/* 275 */             throw new BuildException(""A tar file cannot include itself"", getLocation());
/*     */           }
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 281 */       if (upToDate) {
/* 282 */         log(""Nothing to do: "" + this.tarFile.getAbsolutePath() + "" is up to date."", 2);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 287 */       log(""Building tar: "" + this.tarFile.getAbsolutePath(), 2);
/*     */       
/* 289 */       TarOutputStream tOut = null;
/*     */       try {
/* 291 */         tOut = new TarOutputStream(this.compression.compress(new BufferedOutputStream(new FileOutputStream(this.tarFile))));
/*     */ 
/*     */ 
/*     */         
/* 295 */         tOut.setDebug(true);
/* 296 */         if (this.longFileMode.isTruncateMode()) {
/* 297 */           tOut.setLongFileMode(1);
/* 298 */         } else if (this.longFileMode.isFailMode() || this.longFileMode.isOmitMode()) {
/*     */           
/* 300 */           tOut.setLongFileMode(0);
/*     */         } else {
/*     */           
/* 303 */           tOut.setLongFileMode(2);
/*     */         } 
/*     */         
/* 306 */         this.longWarningGiven = false;
/* 307 */         Enumeration e = this.filesets.elements();
/* 308 */         while (e.hasMoreElements()) {
/* 309 */           TarFileSet fs = e.nextElement();
/* 310 */           String[] files = fs.getFiles(getProject());
/* 311 */           if (files.length > 1 && fs.getFullpath().length() > 0) {
/* 312 */             throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file."");
/*     */           }
/*     */ 
/*     */ 
/*     */           
/* 317 */           for (int i = 0; i < files.length; i++) {
/* 318 */             File f = new File(fs.getDir(getProject()), files[i]);
/* 319 */             String name = files[i].replace(File.separatorChar, '/');
/* 320 */             tarFile(f, tOut, name, fs);
/*     */           } 
/*     */         } 
/*     */       } catch (IOException ioe) {
/* 324 */         String msg = ""Problem creating TAR: "" + ioe.getMessage();
/* 325 */         throw new BuildException(msg, ioe, getLocation());
/*     */       } finally {
/* 327 */         if (tOut != null) {
/*     */           
/*     */           try {
/* 330 */             tOut.close();
/* 331 */           } catch (IOException e) {}
/*     */         }
/*     */       }
/*     */     
/*     */     } finally {
/*     */       
/* 337 */       this.filesets = savedFileSets;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void tarFile(File file, TarOutputStream tOut, String vPath, TarFileSet tarFileSet) throws IOException {
/* 347 */     FileInputStream fIn = null;
/*     */     
/* 349 */     String fullpath = tarFileSet.getFullpath();
/* 350 */     if (fullpath.length() > 0) {
/* 351 */       vPath = fullpath;
/*     */     } else {
/*     */       
/* 354 */       if (vPath.length() <= 0) {
/*     */         return;
/*     */       }
/*     */       
/* 358 */       if (file.isDirectory() && !vPath.endsWith(""/"")) {
/* 359 */         vPath = vPath + ""/"";
/*     */       }
/*     */       
/* 362 */       String prefix = tarFileSet.getPrefix();
/*     */       
/* 364 */       if (prefix.length() > 0 && !prefix.endsWith(""/"")) {
/* 365 */         prefix = prefix + ""/"";
/*     */       }
/* 367 */       vPath = prefix + vPath;
/*     */     } 
/*     */     
/* 370 */     if (vPath.startsWith(""/"") && !tarFileSet.getPreserveLeadingSlashes()) {
/* 371 */       int l = vPath.length();
/* 372 */       if (l <= 1) {
/*     */         return;
/*     */       }
/*     */       
/* 376 */       vPath = vPath.substring(1, l);
/*     */     } 
/*     */     
/*     */     try {
/* 380 */       if (vPath.length() >= 100) {
/* 381 */         if (this.longFileMode.isOmitMode()) {
/* 382 */           log(""Omitting: "" + vPath, 2); return;
/*     */         } 
/* 384 */         if (this.longFileMode.isWarnMode()) {
/* 385 */           log(""Entry: "" + vPath + "" longer than "" + 'd' + "" characters."", 1);
/*     */ 
/*     */           
/* 388 */           if (!this.longWarningGiven) {
/* 389 */             log(""Resulting tar file can only be processed successfully by GNU compatible tar commands"", 1);
/*     */ 
/*     */             
/* 392 */             this.longWarningGiven = true;
/*     */           } 
/* 394 */         } else if (this.longFileMode.isFailMode()) {
/* 395 */           throw new BuildException(""Entry: "" + vPath + "" longer than "" + 'd' + ""characters."", getLocation());
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 401 */       TarEntry te = new TarEntry(vPath);
/* 402 */       te.setModTime(file.lastModified());
/* 403 */       if (!file.isDirectory()) {
/* 404 */         te.setSize(file.length());
/* 405 */         te.setMode(tarFileSet.getMode());
/*     */       } else {
/* 407 */         te.setMode(tarFileSet.getDirMode());
/*     */       } 
/* 409 */       te.setUserName(tarFileSet.getUserName());
/* 410 */       te.setGroupName(tarFileSet.getGroup());
/*     */       
/* 412 */       tOut.putNextEntry(te);
/*     */       
/* 414 */       if (!file.isDirectory()) {
/* 415 */         fIn = new FileInputStream(file);
/*     */         
/* 417 */         byte[] buffer = new byte[8192];
/* 418 */         int count = 0;
/*     */         do {
/* 420 */           tOut.write(buffer, 0, count);
/* 421 */           count = fIn.read(buffer, 0, buffer.length);
/* 422 */         } while (count != -1);
/*     */       } 
/*     */       
/* 425 */       tOut.closeEntry();
/*     */     } finally {
/* 427 */       if (fIn != null) {
/* 428 */         fIn.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 437 */   protected boolean archiveIsUpToDate(String[] files) { return archiveIsUpToDate(files, this.baseDir); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean archiveIsUpToDate(String[] files, File dir) {
/* 444 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 445 */     MergingMapper mm = new MergingMapper();
/* 446 */     mm.setTo(this.tarFile.getAbsolutePath());
/* 447 */     return ((sfs.restrict(files, dir, null, (FileNameMapper)mm)).length == 0);
/*     */   }
/*     */ 
/*     */   
/*     */   public static class TarFileSet
/*     */     extends FileSet
/*     */   {
/* 454 */     private String[] files = null;
/*     */     
/* 456 */     private int fileMode = 33188;
/* 457 */     private int dirMode = 16877;
/*     */     
/* 459 */     private String userName = """";
/* 460 */     private String groupName = """";
/* 461 */     private String prefix = """";
/* 462 */     private String fullpath = """";
/*     */     
/*     */     private boolean preserveLeadingSlashes = false;
/*     */     
/* 466 */     public TarFileSet(FileSet fileset) { super(fileset); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public TarFileSet() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String[] getFiles(Project p) {
/* 479 */       if (this.files == null) {
/* 480 */         DirectoryScanner ds = getDirectoryScanner(p);
/* 481 */         String[] directories = ds.getIncludedDirectories();
/* 482 */         String[] filesPerSe = ds.getIncludedFiles();
/* 483 */         this.files = new String[directories.length + filesPerSe.length];
/* 484 */         System.arraycopy(directories, 0, this.files, 0, directories.length);
/* 485 */         System.arraycopy(filesPerSe, 0, this.files, directories.length, filesPerSe.length);
/*     */       } 
/*     */ 
/*     */       
/* 489 */       return this.files;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 498 */     public void setMode(String octalString) { this.fileMode = 0x8000 | Integer.parseInt(octalString, 8); }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 503 */     public int getMode() { return this.fileMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 514 */     public void setDirMode(String octalString) { this.dirMode = 0x4000 | Integer.parseInt(octalString, 8); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 522 */     public int getDirMode() { return this.dirMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 531 */     public void setUserName(String userName) { this.userName = userName; }
/*     */ 
/*     */ 
/*     */     
/* 535 */     public String getUserName() { return this.userName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 544 */     public void setGroup(String groupName) { this.groupName = groupName; }
/*     */ 
/*     */ 
/*     */     
/* 548 */     public String getGroup() { return this.groupName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 557 */     public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */     
/* 561 */     public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 571 */     public void setFullpath(String fullpath) { this.fullpath = fullpath; }
/*     */ 
/*     */ 
/*     */     
/* 575 */     public String getFullpath() { return this.fullpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 584 */     public void setPreserveLeadingSlashes(boolean b) { this.preserveLeadingSlashes = b; }
/*     */ 
/*     */ 
/*     */     
/* 588 */     public boolean getPreserveLeadingSlashes() { return this.preserveLeadingSlashes; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TarLongFileMode
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String WARN = ""warn"";
/*     */     
/*     */     public static final String FAIL = ""fail"";
/*     */     
/*     */     public static final String TRUNCATE = ""truncate"";
/*     */     
/*     */     public static final String GNU = ""gnu"";
/*     */     
/*     */     public static final String OMIT = ""omit"";
/*     */     
/* 606 */     private final String[] validModes = new String[] { ""warn"", ""fail"", ""truncate"", ""gnu"", ""omit"" };
/*     */ 
/*     */ 
/*     */     
/* 610 */     public TarLongFileMode() { setValue(""warn""); }
/*     */ 
/*     */ 
/*     */     
/* 614 */     public String[] getValues() { return this.validModes; }
/*     */ 
/*     */ 
/*     */     
/* 618 */     public boolean isTruncateMode() { return ""truncate"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 622 */     public boolean isWarnMode() { return ""warn"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 626 */     public boolean isGnuMode() { return ""gnu"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 630 */     public boolean isFailMode() { return ""fail"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 634 */     public boolean isOmitMode() { return ""omit"".equalsIgnoreCase(getValue()); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final class TarCompressionMethod
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String NONE = ""none"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String GZIP = ""gzip"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String BZIP2 = ""bzip2"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 664 */     public TarCompressionMethod() { setValue(""none""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 672 */     public String[] getValues() { return new String[] { ""none"", ""gzip"", ""bzip2"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private OutputStream compress(OutputStream ostream) throws IOException {
/* 685 */       String value = getValue();
/* 686 */       if (""gzip"".equals(value)) {
/* 687 */         return new GZIPOutputStream(ostream);
/*     */       }
/* 689 */       if (""bzip2"".equals(value)) {
/* 690 */         ostream.write(66);
/* 691 */         ostream.write(90);
/* 692 */         return (OutputStream)new CBZip2OutputStream(ostream);
/*     */       } 
/*     */       
/* 695 */       return ostream;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Tar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Taskdef,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.Task;
/*    */ import org.apache.tools.ant.TaskAdapter;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Taskdef
/*    */   extends Typedef
/*    */ {
/*    */   public Taskdef() {
/* 86 */     setAdapterClass(TaskAdapter.class);
/* 87 */     setAdaptToClass(Task.class);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Taskdef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.TaskOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private Task task;
/*     */   private StringBuffer line;
/*     */   private int msgOutputLevel;
/*     */   
/*     */   TaskOutputStream(Task task, int msgOutputLevel) {
/*  89 */     System.err.println(""As of Ant 1.2 released in October 2000, the TaskOutputStream class"");
/*     */     
/*  91 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/*  93 */     System.err.println(""Don't use it!"");
/*     */     
/*  95 */     this.task = task;
/*  96 */     this.msgOutputLevel = msgOutputLevel;
/*     */     
/*  98 */     this.line = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int c) throws IOException {
/* 108 */     char cc = (char)c;
/* 109 */     if (cc == '\r' || cc == '\n') {
/*     */       
/* 111 */       if (this.line.length() > 0) {
/* 112 */         processLine();
/*     */       }
/*     */     } else {
/* 115 */       this.line.append(cc);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processLine() {
/* 124 */     String s = this.line.toString();
/* 125 */     this.task.log(s, this.msgOutputLevel);
/* 126 */     this.line = new StringBuffer();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\TaskOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.TempFile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TempFile
/*     */   extends Task
/*     */ {
/*     */   private String property;
/*  90 */   private File destDir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String prefix;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   private String suffix = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setDestDir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setSuffix(String suffix) { this.suffix = suffix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 151 */     if (this.property == null || this.property.length() == 0) {
/* 152 */       throw new BuildException(""no property specified"");
/*     */     }
/* 154 */     if (this.destDir == null) {
/* 155 */       this.destDir = getProject().resolveFile(""."");
/*     */     }
/* 157 */     FileUtils utils = FileUtils.newFileUtils();
/* 158 */     File tfile = utils.createTempFile(this.prefix, this.suffix, this.destDir);
/* 159 */     getProject().setNewProperty(this.property, tfile.toString());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\TempFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Touch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.DateFormat;
/*     */ import java.text.ParseException;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Touch
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*  91 */   private long millis = -1L;
/*     */   private String dateTime;
/*  93 */   private Vector filesets = new Vector();
/*     */   
/*     */   private FileUtils fileUtils;
/*     */   
/*  97 */   public Touch() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setMillis(long millis) { this.millis = millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setDatetime(String dateTime) { this.dateTime = dateTime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 138 */     long savedMillis = this.millis;
/*     */     
/* 140 */     if (this.file == null && this.filesets.size() == 0) {
/* 141 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 146 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 147 */       throw new BuildException(""Use a fileset to touch directories."");
/*     */     }
/*     */     
/*     */     try {
/* 151 */       if (this.dateTime != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 162 */         DateFormat df = DateFormat.getDateTimeInstance(3, 3, Locale.US);
/*     */ 
/*     */ 
/*     */         
/*     */         try {
/* 167 */           setMillis(df.parse(this.dateTime).getTime());
/*     */         } catch (ParseException pe) {
/* 169 */           df = DateFormat.getDateTimeInstance(3, 2, Locale.US);
/*     */ 
/*     */ 
/*     */           
/*     */           try {
/* 174 */             setMillis(df.parse(this.dateTime).getTime());
/*     */           } catch (ParseException pe2) {
/* 176 */             throw new BuildException(pe2.getMessage(), pe, getLocation());
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 181 */         if (this.millis < 0L) {
/* 182 */           throw new BuildException(""Date of "" + this.dateTime + "" results in negative "" + ""milliseconds value "" + ""relative to epoch "" + ""(January 1, 1970, "" + ""00:00:00 GMT)."");
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 191 */       touch();
/*     */     } finally {
/* 193 */       this.millis = savedMillis;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void touch() throws BuildException {
/* 201 */     if (this.file != null && 
/* 202 */       !this.file.exists()) {
/* 203 */       log(""Creating "" + this.file, 2);
/*     */       try {
/* 205 */         this.fileUtils.createNewFile(this.file);
/*     */       } catch (IOException ioe) {
/* 207 */         throw new BuildException(""Could not create "" + this.file, ioe, getLocation());
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 213 */     if (this.millis >= 0L && JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 214 */       log(""modification time of files cannot be set in JDK 1.1"", 1);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 219 */     boolean resetMillis = false;
/* 220 */     if (this.millis < 0L) {
/* 221 */       resetMillis = true;
/* 222 */       this.millis = System.currentTimeMillis();
/*     */     } 
/*     */     
/* 225 */     if (this.file != null) {
/* 226 */       touch(this.file);
/*     */     }
/*     */ 
/*     */     
/* 230 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 231 */       FileSet fs = this.filesets.elementAt(i);
/* 232 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 233 */       File fromDir = fs.getDir(getProject());
/*     */       
/* 235 */       String[] srcFiles = ds.getIncludedFiles();
/* 236 */       String[] srcDirs = ds.getIncludedDirectories();
/*     */       
/* 238 */       for (int j = 0; j < srcFiles.length; j++) {
/* 239 */         touch(new File(fromDir, srcFiles[j]));
/*     */       }
/*     */       
/* 242 */       for (int j = 0; j < srcDirs.length; j++) {
/* 243 */         touch(new File(fromDir, srcDirs[j]));
/*     */       }
/*     */     } 
/*     */     
/* 247 */     if (resetMillis) {
/* 248 */       this.millis = -1L;
/*     */     }
/*     */   }
/*     */   
/*     */   protected void touch(File file) throws BuildException {
/* 253 */     if (!file.canWrite()) {
/* 254 */       throw new BuildException(""Can not change modification date of read-only file "" + file);
/*     */     }
/*     */ 
/*     */     
/* 258 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */       return;
/*     */     }
/*     */     
/* 262 */     this.fileUtils.setFileLastModified(file, this.millis);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Touch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Transform,"package org.apache.tools.ant.taskdefs;
public class Transform extends ExecuteOn {}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Transform.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tstamp,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Locale;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.TimeZone;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tstamp
/*     */   extends Task
/*     */ {
/*  87 */   private Vector customFormats = new Vector();
/*  88 */   private String prefix = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/*  96 */     this.prefix = prefix;
/*  97 */     if (!this.prefix.endsWith(""."")) {
/*  98 */       this.prefix += ""."";
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 109 */       Date d = new Date();
/*     */       
/* 111 */       Enumeration i = this.customFormats.elements();
/* 112 */       while (i.hasMoreElements()) {
/* 113 */         CustomFormat cts = i.nextElement();
/* 114 */         cts.execute(getProject(), d, getLocation());
/*     */       } 
/*     */       
/* 117 */       SimpleDateFormat dstamp = new SimpleDateFormat(""yyyyMMdd"");
/* 118 */       setProperty(""DSTAMP"", dstamp.format(d));
/*     */       
/* 120 */       SimpleDateFormat tstamp = new SimpleDateFormat(""HHmm"");
/* 121 */       setProperty(""TSTAMP"", tstamp.format(d));
/*     */       
/* 123 */       SimpleDateFormat today = new SimpleDateFormat(""MMMM d yyyy"", Locale.US);
/*     */       
/* 125 */       setProperty(""TODAY"", today.format(d));
/*     */     } catch (Exception e) {
/*     */       
/* 128 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public CustomFormat createFormat() {
/* 137 */     CustomFormat cts = new CustomFormat(this);
/* 138 */     this.customFormats.addElement(cts);
/* 139 */     return cts;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   private void setProperty(String name, String value) { getProject().setNewProperty(this.prefix + name, value); }
/*     */ 
/*     */   
/*     */   public class CustomFormat
/*     */   {
/*     */     private TimeZone timeZone;
/*     */     
/*     */     private String propertyName;
/*     */     
/*     */     private String pattern;
/*     */     
/*     */     private String language;
/*     */     
/*     */     private String country;
/*     */     
/*     */     private String variant;
/*     */     
/*     */     private int offset;
/*     */     
/*     */     private int field;
/*     */     
/*     */     private final Tstamp this$0;
/*     */ 
/*     */     
/*     */     public CustomFormat(Tstamp this$0) {
/* 172 */       this.this$0 = this$0;
/*     */       this.offset = 0;
/*     */       this.field = 5;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 180 */     public void setProperty(String propertyName) { this.propertyName = propertyName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 190 */     public void setPattern(String pattern) { this.pattern = pattern; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setLocale(String locale) {
/* 203 */       StringTokenizer st = new StringTokenizer(locale, "" \t\n\r\f,"");
/*     */       try {
/* 205 */         this.language = st.nextToken();
/* 206 */         if (st.hasMoreElements()) {
/* 207 */           this.country = st.nextToken();
/* 208 */           if (st.hasMoreElements()) {
/* 209 */             this.variant = st.nextToken();
/* 210 */             if (st.hasMoreElements()) {
/* 211 */               throw new BuildException(""bad locale format"", this.this$0.getLocation());
/*     */             }
/*     */           } 
/*     */         } else {
/*     */           
/* 216 */           this.country = """";
/*     */         } 
/*     */       } catch (NoSuchElementException e) {
/* 219 */         throw new BuildException(""bad locale format"", e, this.this$0.getLocation());
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 231 */     public void setTimezone(String id) { this.timeZone = TimeZone.getTimeZone(id); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 239 */     public void setOffset(int offset) { this.offset = offset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setUnit(String unit) {
/* 250 */       this.this$0.log(""DEPRECATED - The setUnit(String) method has been deprecated. Use setUnit(Tstamp.Unit) instead."");
/*     */       
/* 252 */       Tstamp.Unit u = new Tstamp.Unit();
/* 253 */       u.setValue(unit);
/* 254 */       this.field = u.getCalendarField();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 274 */     public void setUnit(Tstamp.Unit unit) { this.field = unit.getCalendarField(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void execute(Project project, Date date, Location location) {
/*     */       SimpleDateFormat simpleDateFormat;
/* 284 */       if (this.propertyName == null) {
/* 285 */         throw new BuildException(""property attribute must be provided"", location);
/*     */       }
/*     */ 
/*     */       
/* 289 */       if (this.pattern == null) {
/* 290 */         throw new BuildException(""pattern attribute must be provided"", location);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 295 */       if (this.language == null) {
/* 296 */         simpleDateFormat = new SimpleDateFormat(this.pattern);
/* 297 */       } else if (this.variant == null) {
/* 298 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country));
/*     */       } else {
/*     */         
/* 301 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country, this.variant));
/*     */       } 
/*     */ 
/*     */       
/* 305 */       if (this.offset != 0) {
/* 306 */         Calendar calendar = Calendar.getInstance();
/* 307 */         calendar.setTime(date);
/* 308 */         calendar.add(this.field, this.offset);
/* 309 */         date = calendar.getTime();
/*     */       } 
/* 311 */       if (this.timeZone != null) {
/* 312 */         simpleDateFormat.setTimeZone(this.timeZone);
/*     */       }
/* 314 */       this.this$0.setProperty(this.propertyName, simpleDateFormat.format(date));
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Unit
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String MILLISECOND = ""millisecond"";
/*     */     
/*     */     private static final String SECOND = ""second"";
/*     */     
/*     */     private static final String MINUTE = ""minute"";
/*     */     private static final String HOUR = ""hour"";
/*     */     private static final String DAY = ""day"";
/*     */     private static final String WEEK = ""week"";
/*     */     private static final String MONTH = ""month"";
/*     */     private static final String YEAR = ""year"";
/* 332 */     private static final String[] units = new String[] { ""millisecond"", ""second"", ""minute"", ""hour"", ""day"", ""week"", ""month"", ""year"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 343 */     private Hashtable calendarFields = new Hashtable();
/*     */     
/*     */     public Unit() {
/* 346 */       this.calendarFields.put(""millisecond"", new Integer(14));
/*     */       
/* 348 */       this.calendarFields.put(""second"", new Integer(13));
/* 349 */       this.calendarFields.put(""minute"", new Integer(12));
/* 350 */       this.calendarFields.put(""hour"", new Integer(11));
/* 351 */       this.calendarFields.put(""day"", new Integer(5));
/* 352 */       this.calendarFields.put(""week"", new Integer(3));
/* 353 */       this.calendarFields.put(""month"", new Integer(2));
/* 354 */       this.calendarFields.put(""year"", new Integer(1));
/*     */     }
/*     */     
/*     */     public int getCalendarField() {
/* 358 */       String key = getValue().toLowerCase();
/* 359 */       Integer i = (Integer)this.calendarFields.get(key);
/* 360 */       return i.intValue();
/*     */     }
/*     */ 
/*     */     
/* 364 */     public String[] getValues() { return units; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Tstamp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Typedef,"package org.apache.tools.ant.taskdefs;
public class Typedef extends Definer {}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Typedef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Unpack,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Unpack
/*     */   extends Task
/*     */ {
/*     */   protected File source;
/*     */   protected File dest;
/*     */   
/*     */   public void setSrc(String src) {
/*  83 */     log(""DEPRECATED - The setSrc(String) method has been deprecated. Use setSrc(File) instead."");
/*     */     
/*  85 */     setSrc(getProject().resolveFile(src));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDest(String dest) {
/*  96 */     log(""DEPRECATED - The setDest(String) method has been deprecated. Use setDest(File) instead."");
/*     */     
/*  98 */     setDest(getProject().resolveFile(dest));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setSrc(File src) { this.source = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 118 */     if (this.source == null) {
/* 119 */       throw new BuildException(""No Src specified"", getLocation());
/*     */     }
/*     */     
/* 122 */     if (!this.source.exists()) {
/* 123 */       throw new BuildException(""Src doesn't exist"", getLocation());
/*     */     }
/*     */     
/* 126 */     if (this.source.isDirectory()) {
/* 127 */       throw new BuildException(""Cannot expand a directory"", getLocation());
/*     */     }
/*     */     
/* 130 */     if (this.dest == null) {
/* 131 */       this.dest = new File(this.source.getParent());
/*     */     }
/*     */     
/* 134 */     if (this.dest.isDirectory()) {
/* 135 */       String defaultExtension = getDefaultExtension();
/* 136 */       createDestFile(defaultExtension);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void createDestFile(String defaultExtension) {
/* 141 */     String sourceName = this.source.getName();
/* 142 */     int len = sourceName.length();
/* 143 */     if (defaultExtension != null && len > defaultExtension.length() && defaultExtension.equalsIgnoreCase(sourceName.substring(len - defaultExtension.length()))) {
/*     */ 
/*     */       
/* 146 */       this.dest = new File(this.dest, sourceName.substring(0, len - defaultExtension.length()));
/*     */     } else {
/*     */       
/* 149 */       this.dest = new File(this.dest, sourceName);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/* 154 */     File savedDest = this.dest;
/*     */     try {
/* 156 */       validate();
/* 157 */       extract();
/*     */     } finally {
/* 159 */       this.dest = savedDest;
/*     */     } 
/*     */   }
/*     */   
/*     */   protected abstract String getDefaultExtension();
/*     */   
/*     */   protected abstract void extract();
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Unpack.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Untar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.zip.GZIPInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.bzip2.CBZip2InputStream;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarInputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Untar
/*     */   extends Expand
/*     */ {
/*  97 */   private UntarCompressionMethod compression = new UntarCompressionMethod();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setCompression(UntarCompressionMethod method) { this.compression = method; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setEncoding(String encoding) { throw new BuildException(""The "" + getTaskName() + "" task doesn't support the encoding"" + "" attribute"", getLocation()); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void expandFile(FileUtils fileUtils, File srcF, File dir) {
/* 127 */     TarInputStream tis = null;
/*     */     try {
/* 129 */       log(""Expanding: "" + srcF + "" into "" + dir, 2);
/* 130 */       tis = new TarInputStream(this.compression.decompress(srcF, new BufferedInputStream(new FileInputStream(srcF))));
/*     */ 
/*     */ 
/*     */       
/* 134 */       TarEntry te = null;
/*     */       
/* 136 */       while ((te = tis.getNextEntry()) != null) {
/* 137 */         extractFile(fileUtils, srcF, dir, (InputStream)tis, te.getName(), te.getModTime(), te.isDirectory());
/*     */       }
/*     */       
/* 140 */       log(""expand complete"", 3);
/*     */     } catch (IOException ioe) {
/*     */       
/* 143 */       throw new BuildException(""Error while expanding "" + srcF.getPath(), ioe, getLocation());
/*     */     } finally {
/*     */       
/* 146 */       if (tis != null) {
/*     */         try {
/* 148 */           tis.close();
/* 149 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final class UntarCompressionMethod
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String NONE = ""none"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String GZIP = ""gzip"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String BZIP2 = ""bzip2"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 183 */     public UntarCompressionMethod() { setValue(""none""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 192 */     public String[] getValues() { return new String[] { ""none"", ""gzip"", ""bzip2"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private InputStream decompress(File file, InputStream istream) throws IOException, BuildException {
/* 209 */       String value = getValue();
/* 210 */       if (""gzip"".equals(value)) {
/* 211 */         return new GZIPInputStream(istream);
/*     */       }
/* 213 */       if (""bzip2"".equals(value)) {
/* 214 */         char[] magic = { 'B', 'Z' };
/* 215 */         for (int i = 0; i < magic.length; i++) {
/* 216 */           if (istream.read() != magic[i]) {
/* 217 */             throw new BuildException(""Invalid bz2 file."" + file.toString());
/*     */           }
/*     */         } 
/*     */         
/* 221 */         return (InputStream)new CBZip2InputStream(istream);
/*     */       } 
/*     */       
/* 224 */       return istream;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Untar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.UpToDate,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UpToDate
/*     */   extends Task
/*     */   implements Condition
/*     */ {
/*     */   private String _property;
/*     */   private String _value;
/*     */   private File _sourceFile;
/*     */   private File _targetFile;
/*  93 */   private Vector sourceFileSets = new Vector();
/*     */   
/*  95 */   protected Mapper mapperElement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setProperty(String property) { this._property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setValue(String value) { this._value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   private String getValue() { return (this._value != null) ? this._value : ""true""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setTargetFile(File file) { this._targetFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setSrcfile(File file) { this._sourceFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void addSrcfiles(FileSet fs) { this.sourceFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 155 */     if (this.mapperElement != null) {
/* 156 */       throw new BuildException(""Cannot define more than one mapper"", getLocation());
/*     */     }
/*     */     
/* 159 */     this.mapperElement = new Mapper(getProject());
/* 160 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() {
/* 168 */     if (this.sourceFileSets.size() == 0 && this._sourceFile == null) {
/* 169 */       throw new BuildException(""At least one srcfile or a nested <srcfiles> element must be set."");
/*     */     }
/*     */ 
/*     */     
/* 173 */     if (this.sourceFileSets.size() > 0 && this._sourceFile != null) {
/* 174 */       throw new BuildException(""Cannot specify both the srcfile attribute and a nested <srcfiles> element."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 179 */     if (this._targetFile == null && this.mapperElement == null) {
/* 180 */       throw new BuildException(""The targetfile attribute or a nested mapper element must be set."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 185 */     if (this._targetFile != null && !this._targetFile.exists()) {
/* 186 */       log(""The targetfile \"""" + this._targetFile.getAbsolutePath() + ""\"" does not exist."", 3);
/*     */       
/* 188 */       return false;
/*     */     } 
/*     */ 
/*     */     
/* 192 */     if (this._sourceFile != null && !this._sourceFile.exists()) {
/* 193 */       throw new BuildException(this._sourceFile.getAbsolutePath() + "" not found."");
/*     */     }
/*     */ 
/*     */     
/* 197 */     Enumeration e = this.sourceFileSets.elements();
/* 198 */     boolean upToDate = true;
/* 199 */     while (upToDate && e.hasMoreElements()) {
/* 200 */       FileSet fs = e.nextElement();
/* 201 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 202 */       upToDate = (upToDate && scanDir(fs.getDir(getProject()), ds.getIncludedFiles()));
/*     */     } 
/*     */ 
/*     */     
/* 206 */     if (this._sourceFile != null) {
/* 207 */       if (this.mapperElement == null) {
/* 208 */         upToDate = (upToDate && this._targetFile.lastModified() >= this._sourceFile.lastModified());
/*     */       } else {
/*     */         
/* 211 */         SourceFileScanner sfs = new SourceFileScanner(this);
/* 212 */         upToDate = (upToDate && (sfs.restrict(new String[] { this._sourceFile.getAbsolutePath() }, null, null, this.mapperElement.getImplementation())).length == 0);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 218 */     return upToDate;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 227 */     if (this._property == null) {
/* 228 */       throw new BuildException(""property attribute is required."", getLocation());
/*     */     }
/*     */     
/* 231 */     boolean upToDate = eval();
/* 232 */     if (upToDate) {
/* 233 */       getProject().setNewProperty(this._property, getValue());
/* 234 */       if (this.mapperElement == null) {
/* 235 */         log(""File \"""" + this._targetFile.getAbsolutePath() + ""\"" is up-to-date."", 3);
/*     */       } else {
/*     */         
/* 238 */         log(""All target files are up-to-date."", 3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean scanDir(File srcDir, String[] files) {
/* 245 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 246 */     FileNameMapper mapper = null;
/* 247 */     File dir = srcDir;
/* 248 */     if (this.mapperElement == null) {
/* 249 */       MergingMapper mm = new MergingMapper();
/* 250 */       mm.setTo(this._targetFile.getAbsolutePath());
/* 251 */       MergingMapper mergingMapper = mm;
/* 252 */       dir = null;
/*     */     } else {
/* 254 */       mapper = this.mapperElement.getImplementation();
/*     */     } 
/* 256 */     return ((sfs.restrict(files, srcDir, dir, mapper)).length == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\UpToDate.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.WaitFor,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.taskdefs.condition.ConditionBase;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WaitFor
/*     */   extends ConditionBase
/*     */ {
/*  92 */   private long maxWaitMillis = 180000L;
/*  93 */   private long maxWaitMultiplier = 1L;
/*  94 */   private long checkEveryMillis = 500L;
/*  95 */   private long checkEveryMultiplier = 1L;
/*     */ 
/*     */   
/*     */   private String timeoutProperty;
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setMaxWait(long time) { this.maxWaitMillis = time; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setMaxWaitUnit(Unit unit) { this.maxWaitMultiplier = unit.getMultiplier(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setCheckEvery(long time) { this.checkEveryMillis = time; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setCheckEveryUnit(Unit unit) { this.checkEveryMultiplier = unit.getMultiplier(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setTimeoutProperty(String p) { this.timeoutProperty = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 138 */     if (countConditions() > 1) {
/* 139 */       throw new BuildException(""You must not nest more than one condition into <waitfor>"");
/*     */     }
/*     */     
/* 142 */     if (countConditions() < 1) {
/* 143 */       throw new BuildException(""You must nest a condition into <waitfor>"");
/*     */     }
/*     */     
/* 146 */     Condition c = getConditions().nextElement();
/*     */     
/* 148 */     long savedMaxWaitMillis = this.maxWaitMillis;
/* 149 */     long savedCheckEveryMillis = this.checkEveryMillis;
/*     */     try {
/* 151 */       this.maxWaitMillis *= this.maxWaitMultiplier;
/* 152 */       this.checkEveryMillis *= this.checkEveryMultiplier;
/* 153 */       long start = System.currentTimeMillis();
/* 154 */       long end = start + this.maxWaitMillis;
/*     */       
/* 156 */       while (System.currentTimeMillis() < end) {
/* 157 */         if (c.eval()) {
/*     */           return;
/*     */         }
/*     */         try {
/* 161 */           Thread.sleep(this.checkEveryMillis);
/* 162 */         } catch (InterruptedException e) {}
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 167 */       if (this.timeoutProperty != null) {
/* 168 */         getProject().setNewProperty(this.timeoutProperty, ""true"");
/*     */       }
/*     */     } finally {
/* 171 */       this.maxWaitMillis = savedMaxWaitMillis;
/* 172 */       this.checkEveryMillis = savedCheckEveryMillis;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Unit
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String MILLISECOND = ""millisecond"";
/*     */     
/*     */     private static final String SECOND = ""second"";
/*     */     
/*     */     private static final String MINUTE = ""minute"";
/*     */     
/*     */     private static final String HOUR = ""hour"";
/*     */     
/*     */     private static final String DAY = ""day"";
/*     */     private static final String WEEK = ""week"";
/* 190 */     private static final String[] units = new String[] { ""millisecond"", ""second"", ""minute"", ""hour"", ""day"", ""week"" };
/*     */ 
/*     */ 
/*     */     
/* 194 */     private Hashtable timeTable = new Hashtable();
/*     */     
/*     */     public Unit() {
/* 197 */       this.timeTable.put(""millisecond"", new Long(1L));
/* 198 */       this.timeTable.put(""second"", new Long(1000L));
/* 199 */       this.timeTable.put(""minute"", new Long(60000L));
/* 200 */       this.timeTable.put(""hour"", new Long(3600000L));
/* 201 */       this.timeTable.put(""day"", new Long(86400000L));
/* 202 */       this.timeTable.put(""week"", new Long(604800000L));
/*     */     }
/*     */     
/*     */     public long getMultiplier() {
/* 206 */       String key = getValue().toLowerCase();
/* 207 */       Long l = (Long)this.timeTable.get(key);
/* 208 */       return l.longValue();
/*     */     }
/*     */ 
/*     */     
/* 212 */     public String[] getValues() { return units; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\WaitFor.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.War,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class War
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*  97 */   private static final FileUtils fu = FileUtils.newFileUtils();
/*     */ 
/*     */   
/*     */   public War() {
/* 101 */     this.archiveType = ""war"";
/* 102 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setWarfile(File warFile) { setDestFile(warFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setWebxml(File descr) {
/* 120 */     this.deploymentDescriptor = descr;
/* 121 */     if (!this.deploymentDescriptor.exists()) {
/* 122 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 128 */     ZipFileSet fs = new ZipFileSet();
/* 129 */     fs.setFile(this.deploymentDescriptor);
/* 130 */     fs.setFullpath(""WEB-INF/web.xml"");
/* 131 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addLib(ZipFileSet fs) {
/* 140 */     fs.setPrefix(""WEB-INF/lib/"");
/* 141 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addClasses(ZipFileSet fs) {
/* 149 */     fs.setPrefix(""WEB-INF/classes/"");
/* 150 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addWebinf(ZipFileSet fs) {
/* 158 */     fs.setPrefix(""WEB-INF/"");
/* 159 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 169 */     if (this.deploymentDescriptor == null && !isInUpdateMode()) {
/* 170 */       throw new BuildException(""webxml attribute is required"", getLocation());
/*     */     }
/*     */     
/* 173 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath, int mode) throws IOException {
/* 186 */     if (vPath.equalsIgnoreCase(""WEB-INF/web.xml"")) {
/* 187 */       if (this.deploymentDescriptor == null || !fu.fileNameEquals(this.deploymentDescriptor, file) || this.descriptorAdded) {
/*     */ 
/*     */         
/* 190 */         log(""Warning: selected "" + this.archiveType + "" files include a WEB-INF/web.xml which will be ignored "" + ""(please use webxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 195 */         super.zipFile(file, zOut, vPath, mode);
/* 196 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 199 */       super.zipFile(file, zOut, vPath, mode);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 208 */     this.descriptorAdded = false;
/* 209 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\War.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.WhichResource,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.net.URL;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WhichResource
/*     */   extends Task
/*     */ {
/*     */   private Path classpath;
/*     */   private String classname;
/*     */   private String resource;
/*     */   private String property;
/*     */   
/*     */   public void setClasspath(Path cp) {
/* 104 */     if (this.classpath == null) {
/* 105 */       this.classpath = cp;
/*     */     } else {
/* 107 */       this.classpath.append(cp);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 116 */     if (this.classpath == null) {
/* 117 */       this.classpath = new Path(getProject());
/*     */     }
/* 119 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() {
/* 127 */     int setcount = 0;
/* 128 */     if (this.classname != null) {
/* 129 */       setcount++;
/*     */     }
/* 131 */     if (this.resource != null) {
/* 132 */       setcount++;
/*     */     }
/*     */ 
/*     */     
/* 136 */     if (setcount == 0) {
/* 137 */       throw new BuildException(""One of classname or resource must be specified"");
/*     */     }
/*     */     
/* 140 */     if (setcount > 1) {
/* 141 */       throw new BuildException(""Only one of classname or resource can be specified"");
/*     */     }
/*     */     
/* 144 */     if (this.property == null) {
/* 145 */       throw new BuildException(""No property defined"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 154 */     validate();
/* 155 */     if (this.classpath != null) {
/* 156 */       getProject().log(""using user supplied classpath: "" + this.classpath, 4);
/*     */       
/* 158 */       this.classpath = this.classpath.concatSystemClasspath(""ignore"");
/*     */     } else {
/* 160 */       this.classpath = new Path(getProject());
/* 161 */       this.classpath = this.classpath.concatSystemClasspath(""only"");
/* 162 */       getProject().log(""using system classpath: "" + this.classpath, 4);
/*     */     } 
/*     */     
/* 165 */     AntClassLoader loader = new AntClassLoader(getProject().getCoreLoader(), getProject(), this.classpath, false);
/*     */ 
/*     */     
/* 168 */     String location = null;
/* 169 */     if (this.classname != null) {
/*     */       
/* 171 */       this.classname = this.classname.replace('.', '/');
/* 172 */       this.resource = ""/"" + this.classname + "".class"";
/*     */     }
/* 174 */     else if (!this.resource.startsWith(""/"")) {
/* 175 */       this.resource = ""/"" + this.resource;
/*     */     } 
/*     */     
/* 178 */     log(""Searching for "" + this.resource, 3);
/*     */     
/* 180 */     URL url = loader.getResource(this.resource);
/* 181 */     if (url != null) {
/*     */       
/* 183 */       location = url.toExternalForm();
/* 184 */       getProject().setNewProperty(this.property, location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   public void setResource(String resource) { this.resource = resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setClass(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setProperty(String property) { this.property = property; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\WhichResource.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XmlProperty,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.NamedNodeMap;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlProperty
/*     */   extends Task
/*     */ {
/*     */   private File src;
/* 213 */   private String prefix = """";
/*     */   private boolean keepRoot = true;
/*     */   private boolean validate = false;
/*     */   private boolean collapseAttributes = false;
/*     */   private boolean semanticAttributes = false;
/*     */   private boolean includeSemanticAttribute = false;
/* 219 */   private File rootDirectory = null;
/* 220 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/* 221 */   private Hashtable addedAttributes = new Hashtable();
/*     */   
/*     */   private static final String ID = ""id"";
/*     */   private static final String REF_ID = ""refid"";
/*     */   private static final String LOCATION = ""location"";
/*     */   private static final String VALUE = ""value"";
/*     */   private static final String PATH = ""path"";
/*     */   private static final String PATHID = ""pathid"";
/* 229 */   private static final String[] ATTRIBUTES = new String[] { ""id"", ""refid"", ""location"", ""value"", ""path"", ""pathid"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 245 */   public void init() { super.init(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 257 */     if (getFile() == null) {
/* 258 */       String msg = ""XmlProperty task requires a file attribute"";
/* 259 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 263 */       log(""Loading "" + this.src.getAbsolutePath(), 3);
/*     */       
/* 265 */       if (this.src.exists()) {
/*     */         
/* 267 */         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
/* 268 */         factory.setValidating(this.validate);
/* 269 */         factory.setNamespaceAware(false);
/* 270 */         Document document = factory.newDocumentBuilder().parse(this.src);
/* 271 */         Element topElement = document.getDocumentElement();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 277 */         this.addedAttributes = new Hashtable();
/*     */         
/* 279 */         if (this.keepRoot) {
/* 280 */           addNodeRecursively(topElement, this.prefix, null);
/*     */         } else {
/* 282 */           NodeList topChildren = topElement.getChildNodes();
/* 283 */           int numChildren = topChildren.getLength();
/* 284 */           for (int i = 0; i < numChildren; i++) {
/* 285 */             addNodeRecursively(topChildren.item(i), this.prefix, null);
/*     */           }
/*     */         } 
/*     */       } else {
/*     */         
/* 290 */         log(""Unable to find property file: "" + this.src.getAbsolutePath(), 3);
/*     */       }
/*     */     
/*     */     }
/*     */     catch (SAXException sxe) {
/*     */       
/* 296 */       Exception x = sxe = null;
/* 297 */       if (sxe.getException() != null) {
/* 298 */         x = sxe.getException();
/*     */       }
/* 300 */       throw new BuildException(x);
/*     */     }
/*     */     catch (ParserConfigurationException pce) {
/*     */       
/* 304 */       throw new BuildException(pce);
/*     */     } catch (IOException ioe) {
/*     */       
/* 307 */       throw new BuildException(ioe);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addNodeRecursively(Node node, String prefix, Object container) {
/* 316 */     String nodePrefix = prefix;
/* 317 */     if (node.getNodeType() != 3) {
/* 318 */       if (prefix.trim().length() > 0) {
/* 319 */         nodePrefix = nodePrefix + ""."";
/*     */       }
/* 321 */       nodePrefix = nodePrefix + node.getNodeName();
/*     */     } 
/*     */ 
/*     */     
/* 325 */     Object nodeObject = processNode(node, nodePrefix, container);
/*     */ 
/*     */     
/* 328 */     if (node.hasChildNodes()) {
/*     */       
/* 330 */       NodeList nodeChildren = node.getChildNodes();
/* 331 */       int numChildren = nodeChildren.getLength();
/*     */       
/* 333 */       for (int i = 0; i < numChildren; i++)
/*     */       {
/*     */ 
/*     */         
/* 337 */         addNodeRecursively(nodeChildren.item(i), nodePrefix, nodeObject);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 344 */   void addNodeRecursively(Node node, String prefix) { addNodeRecursively(node, prefix, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object processNode(Node node, String prefix, Object container) {
/* 368 */     Object addedPath = null;
/*     */ 
/*     */     
/* 371 */     String id = null;
/*     */     
/* 373 */     if (node.hasAttributes()) {
/*     */       
/* 375 */       NamedNodeMap nodeAttributes = node.getAttributes();
/*     */ 
/*     */       
/* 378 */       Node idNode = nodeAttributes.getNamedItem(""id"");
/* 379 */       id = (this.semanticAttributes && idNode != null) ? idNode.getNodeValue() : null;
/*     */ 
/*     */ 
/*     */       
/* 383 */       for (int i = 0; i < nodeAttributes.getLength(); i++) {
/*     */         
/* 385 */         Node attributeNode = nodeAttributes.item(i);
/*     */         
/* 387 */         if (!this.semanticAttributes) {
/* 388 */           String attributeName = getAttributeName(attributeNode);
/* 389 */           String attributeValue = getAttributeValue(attributeNode);
/* 390 */           addProperty(prefix + attributeName, attributeValue, null);
/*     */         } else {
/*     */           
/* 393 */           String nodeName = attributeNode.getNodeName();
/* 394 */           String attributeValue = getAttributeValue(attributeNode);
/*     */           
/* 396 */           Path containingPath = (container != null && container instanceof Path) ? (Path)container : null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 405 */           if (!nodeName.equals(""id""))
/*     */           {
/*     */             
/* 408 */             if (containingPath != null && nodeName.equals(""path"")) {
/*     */ 
/*     */               
/* 411 */               containingPath.setPath(attributeValue);
/* 412 */             } else if (container instanceof Path && nodeName.equals(""refid"")) {
/*     */ 
/*     */               
/* 415 */               containingPath.setPath(attributeValue);
/* 416 */             } else if (container instanceof Path && nodeName.equals(""location"")) {
/*     */ 
/*     */ 
/*     */               
/* 420 */               containingPath.setLocation(resolveFile(attributeValue));
/* 421 */             } else if (nodeName.equals(""pathid"")) {
/*     */               
/* 423 */               if (container != null) {
/* 424 */                 throw new BuildException(""XmlProperty does not support nested paths"");
/*     */               }
/*     */ 
/*     */               
/* 428 */               addedPath = new Path(getProject());
/* 429 */               getProject().addReference(attributeValue, addedPath);
/*     */             } else {
/*     */               
/* 432 */               String attributeName = getAttributeName(attributeNode);
/* 433 */               addProperty(prefix + attributeName, attributeValue, id);
/*     */             } 
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/* 439 */     String nodeText = null;
/* 440 */     if (node.getNodeType() == 3) {
/*     */       
/* 442 */       nodeText = getAttributeValue(node);
/* 443 */     } else if (node.getNodeType() == 1 && node.getChildNodes().getLength() == 1 && node.getFirstChild().getNodeType() == 4) {
/*     */ 
/*     */ 
/*     */       
/* 447 */       nodeText = node.getFirstChild().getNodeValue();
/*     */     } 
/*     */     
/* 450 */     if (nodeText != null) {
/*     */       
/* 452 */       if (this.semanticAttributes && id == null && container instanceof String) {
/*     */         
/* 454 */         id = (String)container;
/* 455 */         System.out.println(""Setting id = "" + id);
/*     */       } 
/*     */       
/* 458 */       if (nodeText.trim().length() != 0) {
/* 459 */         addProperty(prefix, nodeText, id);
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 467 */     return (addedPath != null) ? addedPath : id;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addProperty(String name, String value, String id) {
/* 475 */     String msg = name + "":"" + value;
/* 476 */     if (id != null) {
/* 477 */       msg = msg + ""(id="" + id + "")"";
/*     */     }
/* 479 */     log(msg, 4);
/*     */     
/* 481 */     if (this.addedAttributes.containsKey(name)) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 490 */       value = (String)this.addedAttributes.get(name) + "","" + value;
/* 491 */       getProject().setProperty(name, value);
/*     */     } else {
/* 493 */       getProject().setNewProperty(name, value);
/*     */     } 
/* 495 */     this.addedAttributes.put(name, value);
/* 496 */     if (id != null) {
/* 497 */       getProject().addReference(id, value);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getAttributeName(Node attributeNode) {
/* 509 */     String attributeName = attributeNode.getNodeName();
/*     */     
/* 511 */     if (this.semanticAttributes) {
/*     */ 
/*     */       
/* 514 */       if (attributeName.equals(""refid"")) {
/* 515 */         return """";
/*     */       }
/* 517 */       if (!isSemanticAttribute(attributeName) || this.includeSemanticAttribute)
/*     */       {
/* 519 */         return ""."" + attributeName;
/*     */       }
/* 521 */       return """";
/*     */     } 
/* 523 */     if (this.collapseAttributes) {
/* 524 */       return ""."" + attributeName;
/*     */     }
/* 526 */     return ""("" + attributeName + "")"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean isSemanticAttribute(String attributeName) {
/* 534 */     for (int i = 0; i < ATTRIBUTES.length; i++) {
/* 535 */       if (attributeName.equals(ATTRIBUTES[i])) {
/* 536 */         return true;
/*     */       }
/*     */     } 
/* 539 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getAttributeValue(Node attributeNode) {
/* 555 */     String nodeValue = attributeNode.getNodeValue().trim();
/* 556 */     if (this.semanticAttributes) {
/* 557 */       String attributeName = attributeNode.getNodeName();
/* 558 */       nodeValue = getProject().replaceProperties(nodeValue);
/* 559 */       if (attributeName.equals(""location"")) {
/* 560 */         File f = resolveFile(nodeValue);
/* 561 */         return f.getPath();
/* 562 */       }  if (attributeName.equals(""refid"")) {
/* 563 */         Object ref = getProject().getReference(nodeValue);
/* 564 */         if (ref != null) {
/* 565 */           return ref.toString();
/*     */         }
/*     */       } 
/*     */     } 
/* 569 */     return nodeValue;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   public void setFile(File src) { this.src = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 585 */   public void setPrefix(String prefix) { this.prefix = prefix.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 595 */   public void setKeeproot(boolean keepRoot) { this.keepRoot = keepRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 603 */   public void setValidate(boolean validate) { this.validate = validate; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 612 */   public void setCollapseAttributes(boolean collapseAttributes) { this.collapseAttributes = collapseAttributes; }
/*     */ 
/*     */ 
/*     */   
/* 616 */   public void setSemanticAttributes(boolean semanticAttributes) { this.semanticAttributes = semanticAttributes; }
/*     */ 
/*     */ 
/*     */   
/* 620 */   public void setRootDirectory(File rootDirectory) { this.rootDirectory = rootDirectory; }
/*     */ 
/*     */ 
/*     */   
/* 624 */   public void setIncludeSemanticAttribute(boolean includeSemanticAttribute) { this.includeSemanticAttribute = includeSemanticAttribute; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 630 */   protected File getFile() { return this.src; }
/*     */ 
/*     */ 
/*     */   
/* 634 */   protected String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */   
/* 638 */   protected boolean getKeeproot() { return this.keepRoot; }
/*     */ 
/*     */ 
/*     */   
/* 642 */   protected boolean getValidate() { return this.validate; }
/*     */ 
/*     */ 
/*     */   
/* 646 */   protected boolean getCollapseAttributes() { return this.collapseAttributes; }
/*     */ 
/*     */ 
/*     */   
/* 650 */   protected boolean getSemanticAttributes() { return this.semanticAttributes; }
/*     */ 
/*     */ 
/*     */   
/* 654 */   protected File getRootDirectory() { return this.rootDirectory; }
/*     */ 
/*     */ 
/*     */   
/* 658 */   protected boolean getIncludeSementicAttribute() { return this.includeSemanticAttribute; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File resolveFile(String fileName) {
/* 666 */     if (this.rootDirectory == null) {
/* 667 */       return getProject().resolveFile(fileName);
/*     */     }
/* 669 */     return this.fileUtils.resolveFile(this.rootDirectory, fileName);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XmlProperty.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLiaison,"package org.apache.tools.ant.taskdefs;
import java.io.File;
public interface XSLTLiaison {
  public static final String FILE_PROTOCOL_PREFIX = ""file://"";
  void setStylesheet(File paramFile) throws Exception;
  void addParam(String paramString1, String paramString2) throws Exception;
  void transform(File paramFile1, File paramFile2) throws Exception;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XSLTLiaison.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLiaison2,"package org.apache.tools.ant.taskdefs;
public interface XSLTLiaison2 extends XSLTLiaison {
  void configure(XSLTProcess paramXSLTProcess);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XSLTLiaison2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLogger,"package org.apache.tools.ant.taskdefs;
public interface XSLTLogger {
  void log(String paramString);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XSLTLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLoggerAware,"package org.apache.tools.ant.taskdefs;
public interface XSLTLoggerAware {
  void setLogger(XSLTLogger paramXSLTLogger);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XSLTLoggerAware.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTProcess,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.DynamicConfigurator;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.types.XMLCatalog;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTProcess
/*     */   extends MatchingTask
/*     */   implements XSLTLogger
/*     */ {
/*  89 */   private File destDir = null;
/*     */ 
/*     */   
/*  92 */   private File baseDir = null;
/*     */ 
/*     */   
/*  95 */   private String xslFile = null;
/*     */ 
/*     */   
/*  98 */   private String targetExtension = "".html"";
/*     */ 
/*     */   
/* 101 */   private Vector params = new Vector();
/*     */ 
/*     */   
/* 104 */   private File inFile = null;
/*     */ 
/*     */   
/* 107 */   private File outFile = null;
/*     */ 
/*     */   
/*     */   private String processor;
/*     */ 
/*     */   
/* 113 */   private Path classpath = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private XSLTLiaison liaison;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean stylesheetLoaded = false;
/*     */ 
/*     */   
/*     */   private boolean force = false;
/*     */ 
/*     */   
/*     */   private FileUtils fileUtils;
/*     */ 
/*     */   
/* 130 */   private Vector outputProperties = new Vector();
/*     */ 
/*     */   
/* 133 */   private XMLCatalog xmlCatalog = new XMLCatalog();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String TRAX_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.TraXLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String XSLP_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.XslpLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String XALAN_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.XalanLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean performDirectoryScan = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   private Factory factory = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean reuseLoadedStylesheet = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public XSLTProcess() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void setScanIncludedDirectories(boolean b) { this.performDirectoryScan = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setReloadStylesheet(boolean b) { this.reuseLoadedStylesheet = !b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 203 */     File savedBaseDir = this.baseDir;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 209 */     if (this.xslFile == null) {
/* 210 */       throw new BuildException(""no stylesheet specified"", getLocation());
/*     */     }
/*     */     
/* 213 */     if (this.inFile != null && !this.inFile.exists()) {
/* 214 */       throw new BuildException(""input file "" + this.inFile.toString() + "" does not exist"", getLocation());
/*     */     }
/*     */     try {
/* 217 */       if (this.baseDir == null) {
/* 218 */         this.baseDir = getProject().resolveFile(""."");
/*     */       }
/*     */       
/* 221 */       this.liaison = getLiaison();
/*     */ 
/*     */       
/* 224 */       if (this.liaison instanceof XSLTLoggerAware) {
/* 225 */         ((XSLTLoggerAware)this.liaison).setLogger(this);
/*     */       }
/*     */       
/* 228 */       log(""Using "" + this.liaison.getClass().toString(), 3);
/*     */       
/* 230 */       File stylesheet = getProject().resolveFile(this.xslFile);
/* 231 */       if (!stylesheet.exists()) {
/* 232 */         stylesheet = this.fileUtils.resolveFile(this.baseDir, this.xslFile);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 237 */         if (stylesheet.exists()) {
/* 238 */           log(""DEPRECATED - the style attribute should be relative to the project's"");
/*     */           
/* 240 */           log(""             basedir, not the tasks's basedir."");
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 245 */       if (this.inFile != null && this.outFile != null) {
/* 246 */         process(this.inFile, this.outFile, stylesheet);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 256 */       if (this.destDir == null) {
/* 257 */         String msg = ""destdir attributes must be set!"";
/* 258 */         throw new BuildException(msg);
/*     */       } 
/* 260 */       DirectoryScanner scanner = getDirectoryScanner(this.baseDir);
/* 261 */       log(""Transforming into "" + this.destDir, 2);
/*     */ 
/*     */       
/* 264 */       String[] list = scanner.getIncludedFiles();
/* 265 */       for (int i = 0; i < list.length; i++) {
/* 266 */         process(this.baseDir, list[i], this.destDir, stylesheet);
/*     */       }
/* 268 */       if (this.performDirectoryScan) {
/*     */         
/* 270 */         String[] dirs = scanner.getIncludedDirectories();
/* 271 */         for (int j = 0; j < dirs.length; j++) {
/* 272 */           list = (new File(this.baseDir, dirs[j])).list();
/* 273 */           for (int i = 0; i < list.length; i++) {
/* 274 */             process(this.baseDir, list[i], this.destDir, stylesheet);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } finally {
/* 279 */       this.liaison = null;
/* 280 */       this.stylesheetLoaded = false;
/* 281 */       this.baseDir = savedBaseDir;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 292 */   public void setForce(boolean force) { this.force = force; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   public void setBasedir(File dir) { this.baseDir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void setDestdir(File dir) { this.destDir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 322 */   public void setExtension(String name) { this.targetExtension = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 332 */   public void setStyle(String xslFile) { this.xslFile = xslFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public void setClasspath(Path classpath) { createClasspath().append(classpath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 350 */     if (this.classpath == null) {
/* 351 */       this.classpath = new Path(getProject());
/*     */     }
/* 353 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 363 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 374 */   public void setProcessor(String processor) { this.processor = processor; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public void addConfiguredXMLCatalog(XMLCatalog xmlCatalog) { this.xmlCatalog.addConfiguredXMLCatalog(xmlCatalog); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveProcessor(String proc) throws Exception {
/* 395 */     if (proc.equals(""trax"")) {
/* 396 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.TraXLiaison"");
/* 397 */       this.liaison = clazz.newInstance();
/* 398 */     } else if (proc.equals(""xslp"")) {
/* 399 */       log(""DEPRECATED - xslp processor is deprecated. Use trax instead."");
/*     */       
/* 401 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XslpLiaison"");
/* 402 */       this.liaison = clazz.newInstance();
/* 403 */     } else if (proc.equals(""xalan"")) {
/* 404 */       log(""DEPRECATED - xalan processor is deprecated. Use trax instead."");
/*     */       
/* 406 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XalanLiaison"");
/* 407 */       this.liaison = clazz.newInstance();
/*     */     } else {
/* 409 */       this.liaison = loadClass(proc).newInstance();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class loadClass(String classname) throws Exception {
/* 422 */     if (this.classpath == null) {
/* 423 */       return Class.forName(classname);
/*     */     }
/* 425 */     AntClassLoader al = getProject().createClassLoader(this.classpath);
/* 426 */     Class c = Class.forName(classname, true, (ClassLoader)al);
/* 427 */     return c;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 438 */   public void setOut(File outFile) { this.outFile = outFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 448 */   public void setIn(File inFile) { this.inFile = inFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void process(File baseDir, String xmlFile, File destDir, File stylesheet) throws BuildException {
/* 465 */     String fileExt = this.targetExtension;
/* 466 */     File outFile = null;
/* 467 */     File inFile = null;
/*     */     
/*     */     try {
/* 470 */       long styleSheetLastModified = stylesheet.lastModified();
/* 471 */       inFile = new File(baseDir, xmlFile);
/*     */       
/* 473 */       if (inFile.isDirectory()) {
/* 474 */         log(""Skipping "" + inFile + "" it is a directory."", 3);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 479 */       int dotPos = xmlFile.lastIndexOf('.');
/* 480 */       if (dotPos > 0) {
/* 481 */         outFile = new File(destDir, xmlFile.substring(0, xmlFile.lastIndexOf('.')) + fileExt);
/*     */       } else {
/*     */         
/* 484 */         outFile = new File(destDir, xmlFile + fileExt);
/*     */       } 
/* 486 */       if (this.force || inFile.lastModified() > outFile.lastModified() || styleSheetLastModified > outFile.lastModified())
/*     */       {
/*     */         
/* 489 */         ensureDirectoryFor(outFile);
/* 490 */         log(""Processing "" + inFile + "" to "" + outFile);
/*     */         
/* 492 */         configureLiaison(stylesheet);
/* 493 */         this.liaison.transform(inFile, outFile);
/*     */       }
/*     */     
/*     */     } catch (Exception ex) {
/*     */       
/* 498 */       log(""Failed to process "" + inFile, 2);
/* 499 */       if (outFile != null) {
/* 500 */         outFile.delete();
/*     */       }
/*     */       
/* 503 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void process(File inFile, File outFile, File stylesheet) throws BuildException {
/*     */     try {
/* 519 */       long styleSheetLastModified = stylesheet.lastModified();
/* 520 */       log(""In file "" + inFile + "" time: "" + inFile.lastModified(), 4);
/*     */       
/* 522 */       log(""Out file "" + outFile + "" time: "" + outFile.lastModified(), 4);
/*     */       
/* 524 */       log(""Style file "" + this.xslFile + "" time: "" + styleSheetLastModified, 4);
/*     */       
/* 526 */       if (this.force || inFile.lastModified() >= outFile.lastModified() || styleSheetLastModified >= outFile.lastModified()) {
/*     */         
/* 528 */         ensureDirectoryFor(outFile);
/* 529 */         log(""Processing "" + inFile + "" to "" + outFile, 2);
/*     */         
/* 531 */         configureLiaison(stylesheet);
/* 532 */         this.liaison.transform(inFile, outFile);
/*     */       } else {
/* 534 */         log(""Skipping input file "" + inFile + "" because it is older than output file "" + outFile + "" and so is the stylesheet "" + stylesheet, 4);
/*     */       }
/*     */     
/*     */     } catch (Exception ex) {
/*     */       
/* 539 */       log(""Failed to process "" + inFile, 2);
/* 540 */       if (outFile != null) {
/* 541 */         outFile.delete();
/*     */       }
/* 543 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void ensureDirectoryFor(File targetFile) throws BuildException {
/* 555 */     File directory = this.fileUtils.getParentFile(targetFile);
/* 556 */     if (!directory.exists() && 
/* 557 */       !directory.mkdirs()) {
/* 558 */       throw new BuildException(""Unable to create directory: "" + directory.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 570 */   public Factory getFactory() { return this.factory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 579 */   public XMLCatalog getXMLCatalog() { return this.xmlCatalog; }
/*     */ 
/*     */ 
/*     */   
/* 583 */   public Enumeration getOutputProperties() { return this.outputProperties.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected XSLTLiaison getLiaison() {
/* 595 */     if (this.liaison == null) {
/* 596 */       if (this.processor != null) {
/*     */         try {
/* 598 */           resolveProcessor(this.processor);
/*     */         } catch (Exception e) {
/* 600 */           throw new BuildException(e);
/*     */         } 
/*     */       } else {
/*     */         
/* 604 */         try { resolveProcessor(""trax""); }
/*     */         
/* 606 */         catch (Throwable e1) { 
/* 607 */           try { resolveProcessor(""xalan""); }
/*     */           
/* 609 */           catch (Throwable e2) { try {
/* 610 */               resolveProcessor(""xslp"");
/*     */             } catch (Throwable e3) {
/* 612 */               e3.printStackTrace();
/* 613 */               e2.printStackTrace();
/* 614 */               throw new BuildException(e1);
/*     */             }  }
/*     */            }
/*     */       
/*     */       } 
/*     */     }
/* 620 */     return this.liaison;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Param createParam() {
/* 629 */     Param p = new Param();
/* 630 */     this.params.addElement(p);
/* 631 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Param
/*     */   {
/* 639 */     private String name = null;
/*     */ 
/*     */     
/* 642 */     private String expression = null;
/*     */ 
/*     */     
/*     */     private String ifProperty;
/*     */ 
/*     */     
/*     */     private String unlessProperty;
/*     */ 
/*     */     
/*     */     private Project project;
/*     */ 
/*     */     
/* 654 */     public void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 663 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 672 */     public void setExpression(String expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getName() throws BuildException {
/* 682 */       if (this.name == null) {
/* 683 */         throw new BuildException(""Name attribute is missing."");
/*     */       }
/* 685 */       return this.name;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getExpression() throws BuildException {
/* 695 */       if (this.expression == null) {
/* 696 */         throw new BuildException(""Expression attribute is missing."");
/*     */       }
/* 698 */       return this.expression;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 707 */     public void setIf(String ifProperty) { this.ifProperty = ifProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 717 */     public void setUnless(String unlessProperty) { this.unlessProperty = unlessProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean shouldUse() {
/* 724 */       if (this.ifProperty != null && this.project.getProperty(this.ifProperty) == null)
/* 725 */         return false; 
/* 726 */       if (this.unlessProperty != null && this.project.getProperty(this.unlessProperty) != null)
/*     */       {
/* 728 */         return false;
/*     */       }
/*     */       
/* 731 */       return true;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public OutputProperty createOutputProperty() {
/* 742 */     OutputProperty p = new OutputProperty();
/* 743 */     this.outputProperties.addElement(p);
/* 744 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class OutputProperty
/*     */   {
/*     */     private String name;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 765 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 774 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 781 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 789 */     public void setValue(String value) { this.value = value; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {
/* 797 */     super.init();
/* 798 */     this.xmlCatalog.setProject(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureLiaison(File stylesheet) throws BuildException {
/* 808 */     if (this.stylesheetLoaded && this.reuseLoadedStylesheet) {
/*     */       return;
/*     */     }
/* 811 */     this.stylesheetLoaded = true;
/*     */     
/*     */     try {
/* 814 */       log(""Loading stylesheet "" + stylesheet, 2);
/* 815 */       this.liaison.setStylesheet(stylesheet);
/* 816 */       for (Enumeration e = this.params.elements(); e.hasMoreElements(); ) {
/* 817 */         Param p = e.nextElement();
/* 818 */         if (p.shouldUse()) {
/* 819 */           this.liaison.addParam(p.getName(), p.getExpression());
/*     */         }
/*     */       } 
/* 822 */       if (this.liaison instanceof XSLTLiaison2) {
/* 823 */         ((XSLTLiaison2)this.liaison).configure(this);
/*     */       }
/*     */     } catch (Exception ex) {
/* 826 */       log(""Failed to transform using stylesheet "" + stylesheet, 2);
/*     */       
/* 828 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Factory createFactory() throws BuildException {
/* 838 */     if (this.factory != null) {
/* 839 */       throw new BuildException(""'factory' element must be unique"");
/*     */     }
/* 841 */     this.factory = new Factory();
/* 842 */     return this.factory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Factory
/*     */   {
/*     */     private String name;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 857 */     private Vector attributes = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 863 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 871 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 879 */     public void addAttribute(Attribute attr) { this.attributes.addElement(attr); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 887 */     public Enumeration getAttributes() { return this.attributes.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public static class Attribute
/*     */       implements DynamicConfigurator
/*     */     {
/*     */       private String name;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       private Object value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 910 */       public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 917 */       public Object getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */       
/* 921 */       public Object createDynamicElement(String name) throws BuildException { return null; }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       public void setDynamicAttribute(String name, String value) throws BuildException {
/* 927 */         if (""name"".equalsIgnoreCase(name)) {
/* 928 */           this.name = value;
/* 929 */         } else if (""value"".equalsIgnoreCase(name)) {
/*     */ 
/*     */           
/* 932 */           if (""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value)) {
/*     */             
/* 934 */             this.value = new Boolean(value);
/*     */           } else {
/*     */             try {
/* 937 */               this.value = new Integer(value);
/*     */             } catch (NumberFormatException e) {
/* 939 */               this.value = value;
/*     */             } 
/*     */           } 
/*     */         } else {
/* 943 */           throw new BuildException(""Unsupported attribute: "" + name);
/*     */         } 
/*     */       }
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\XSLTProcess.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Zip,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.ByteArrayInputStream;
/*      */ import java.io.ByteArrayOutputStream;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.OutputStream;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Stack;
/*      */ import java.util.Vector;
/*      */ import java.util.zip.CRC32;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.ProjectComponent;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.types.FileSet;
/*      */ import org.apache.tools.ant.types.PatternSet;
/*      */ import org.apache.tools.ant.types.Resource;
/*      */ import org.apache.tools.ant.types.ResourceFactory;
/*      */ import org.apache.tools.ant.types.ZipFileSet;
/*      */ import org.apache.tools.ant.types.ZipScanner;
/*      */ import org.apache.tools.ant.util.FileNameMapper;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.GlobPatternMapper;
/*      */ import org.apache.tools.ant.util.IdentityMapper;
/*      */ import org.apache.tools.ant.util.MergingMapper;
/*      */ import org.apache.tools.ant.util.ResourceUtils;
/*      */ import org.apache.tools.zip.ZipEntry;
/*      */ import org.apache.tools.zip.ZipFile;
/*      */ import org.apache.tools.zip.ZipOutputStream;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Zip
/*      */   extends MatchingTask
/*      */ {
/*      */   protected File zipFile;
/*      */   private ZipScanner zs;
/*      */   private File baseDir;
/*  108 */   protected Hashtable entries = new Hashtable();
/*  109 */   private Vector groupfilesets = new Vector();
/*  110 */   private Vector filesetsFromGroupfilesets = new Vector();
/*  111 */   protected String duplicate = ""add"";
/*      */   
/*      */   private boolean doCompress = true;
/*      */   private boolean doUpdate = false;
/*      */   private boolean savedDoUpdate = false;
/*      */   private boolean doFilesonly = false;
/*  117 */   protected String archiveType = ""zip"";
/*      */ 
/*      */   
/*  120 */   private static final long EMPTY_CRC = (new CRC32()).getValue();
/*  121 */   protected String emptyBehavior = ""skip"";
/*  122 */   private Vector filesets = new Vector();
/*  123 */   protected Hashtable addedDirs = new Hashtable();
/*  124 */   private Vector addedFiles = new Vector();
/*      */   
/*      */   protected boolean doubleFilePass = false;
/*      */   
/*      */   protected boolean skipWriting = false;
/*  129 */   private static FileUtils fileUtils = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean addingNewFiles = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String encoding;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean keepCompression = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  159 */   public void setZipfile(File zipFile) { setDestFile(zipFile); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  170 */   public void setFile(File file) { setDestFile(file); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  180 */   public void setDestFile(File destFile) { this.zipFile = destFile; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  188 */   public File getDestFile() { return this.zipFile; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  196 */   public void setBasedir(File baseDir) { this.baseDir = baseDir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  204 */   public void setCompress(boolean c) { this.doCompress = c; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  213 */   public boolean isCompress() { return this.doCompress; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  221 */   public void setFilesonly(boolean f) { this.doFilesonly = f; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setUpdate(boolean c) {
/*  229 */     this.doUpdate = c;
/*  230 */     this.savedDoUpdate = c;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  237 */   public boolean isInUpdateMode() { return this.doUpdate; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  244 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  252 */   public void addZipfileset(ZipFileSet set) { this.filesets.addElement(set); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  259 */   public void addZipGroupFileset(FileSet set) { this.groupfilesets.addElement(set); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  272 */   public void setDuplicate(Duplicate df) { this.duplicate = df.getValue(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class WhenEmpty
/*      */     extends EnumeratedAttribute
/*      */   {
/*  281 */     public String[] getValues() { return new String[] { ""fail"", ""skip"", ""create"" }; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  295 */   public void setWhenempty(WhenEmpty we) { this.emptyBehavior = we.getValue(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  306 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  315 */   public String getEncoding() { return this.encoding; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  325 */   public void setKeepCompression(boolean keep) { this.keepCompression = keep; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/*  333 */     if (this.doubleFilePass) {
/*  334 */       this.skipWriting = true;
/*  335 */       executeMain();
/*  336 */       this.skipWriting = false;
/*  337 */       executeMain();
/*      */     } else {
/*  339 */       executeMain();
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   public void executeMain() throws BuildException {
/*  345 */     if (this.baseDir == null && this.filesets.size() == 0 && this.groupfilesets.size() == 0 && ""zip"".equals(this.archiveType))
/*      */     {
/*  347 */       throw new BuildException(""basedir attribute must be set, or at least one fileset must be given!"");
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  352 */     if (this.zipFile == null) {
/*  353 */       throw new BuildException(""You must specify the "" + this.archiveType + "" file to create!"");
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  358 */     File renamedFile = null;
/*      */ 
/*      */ 
/*      */     
/*  362 */     this.addingNewFiles = true;
/*  363 */     if (this.doUpdate && !this.zipFile.exists()) {
/*  364 */       this.doUpdate = false;
/*  365 */       log(""ignoring update attribute as "" + this.archiveType + "" doesn't exist."", 4);
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  370 */     for (int i = 0; i < this.groupfilesets.size(); i++) {
/*      */       
/*  372 */       log(""Processing groupfileset "", 3);
/*  373 */       FileSet fs = this.groupfilesets.elementAt(i);
/*  374 */       DirectoryScanner directoryScanner = fs.getDirectoryScanner(getProject());
/*  375 */       String[] files = directoryScanner.getIncludedFiles();
/*  376 */       File basedir = directoryScanner.getBasedir();
/*  377 */       for (int j = 0; j < files.length; j++) {
/*      */         
/*  379 */         log(""Adding file "" + files[j] + "" to fileset"", 3);
/*      */         
/*  381 */         ZipFileSet zf = new ZipFileSet();
/*  382 */         zf.setProject(getProject());
/*  383 */         zf.setSrc(new File(basedir, files[j]));
/*  384 */         this.filesets.addElement(zf);
/*  385 */         this.filesetsFromGroupfilesets.addElement(zf);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  390 */     Vector vfss = new Vector();
/*  391 */     if (this.baseDir != null) {
/*  392 */       FileSet fs = (FileSet)getImplicitFileSet().clone();
/*  393 */       fs.setDir(this.baseDir);
/*  394 */       vfss.addElement(fs);
/*      */     } 
/*  396 */     for (int i = 0; i < this.filesets.size(); i++) {
/*  397 */       FileSet fs = this.filesets.elementAt(i);
/*  398 */       vfss.addElement(fs);
/*      */     } 
/*      */     
/*  401 */     FileSet[] fss = new FileSet[vfss.size()];
/*  402 */     vfss.copyInto((Object[])fss);
/*  403 */     boolean success = false;
/*      */     
/*      */     try {
/*  406 */       ArchiveState state = getResourcesToAdd(fss, this.zipFile, false);
/*      */ 
/*      */       
/*  409 */       if (!state.isOutOfDate()) {
/*      */         return;
/*      */       }
/*      */       
/*  413 */       Resource[][] addThem = state.getResourcesToAdd();
/*      */       
/*  415 */       if (this.doUpdate) {
/*  416 */         renamedFile = fileUtils.createTempFile(""zip"", "".tmp"", fileUtils.getParentFile(this.zipFile));
/*      */ 
/*      */         
/*  419 */         renamedFile.deleteOnExit();
/*      */         
/*      */         try {
/*  422 */           fileUtils.rename(this.zipFile, renamedFile);
/*      */         } catch (SecurityException e) {
/*  424 */           throw new BuildException(""Not allowed to rename old file ("" + this.zipFile.getAbsolutePath() + "") to temporary file"");
/*      */         
/*      */         }
/*      */         catch (IOException e) {
/*      */           
/*  429 */           throw new BuildException(""Unable to rename old file ("" + this.zipFile.getAbsolutePath() + "") to temporary file"");
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  436 */       String action = this.doUpdate ? ""Updating "" : ""Building "";
/*      */       
/*  438 */       log(action + this.archiveType + "": "" + this.zipFile.getAbsolutePath());
/*      */       
/*  440 */       ZipOutputStream zOut = null;
/*      */       
/*      */       try {
/*  443 */         if (!this.skipWriting) {
/*  444 */           zOut = new ZipOutputStream(this.zipFile);
/*      */           
/*  446 */           zOut.setEncoding(this.encoding);
/*  447 */           if (this.doCompress) {
/*  448 */             zOut.setMethod(8);
/*      */           } else {
/*  450 */             zOut.setMethod(0);
/*      */           } 
/*      */         } 
/*  453 */         initZipOutputStream(zOut);
/*      */ 
/*      */         
/*  456 */         for (int i = 0; i < fss.length; i++) {
/*  457 */           if ((addThem[i]).length != 0) {
/*  458 */             addResources(fss[i], addThem[i], zOut);
/*      */           }
/*      */         } 
/*      */         
/*  462 */         if (this.doUpdate) {
/*  463 */           this.addingNewFiles = false;
/*  464 */           ZipFileSet oldFiles = new ZipFileSet();
/*  465 */           oldFiles.setProject(getProject());
/*  466 */           oldFiles.setSrc(renamedFile);
/*      */           
/*  468 */           for (int i = 0; i < this.addedFiles.size(); i++) {
/*  469 */             PatternSet.NameEntry ne = oldFiles.createExclude();
/*  470 */             ne.setName(this.addedFiles.elementAt(i));
/*      */           } 
/*  472 */           DirectoryScanner ds = oldFiles.getDirectoryScanner(getProject());
/*      */           
/*  474 */           ((ZipScanner)ds).setEncoding(this.encoding);
/*      */           
/*  476 */           String[] f = ds.getIncludedFiles();
/*  477 */           Resource[] r = new Resource[f.length];
/*  478 */           for (int i = 0; i < f.length; i++) {
/*  479 */             r[i] = ds.getResource(f[i]);
/*      */           }
/*      */           
/*  482 */           if (!this.doFilesonly) {
/*  483 */             String[] d = ds.getIncludedDirectories();
/*  484 */             Resource[] dr = new Resource[d.length];
/*  485 */             for (int i = 0; i < d.length; i++) {
/*  486 */               dr[i] = ds.getResource(d[i]);
/*      */             }
/*  488 */             Resource[] tmp = r;
/*  489 */             r = new Resource[tmp.length + dr.length];
/*  490 */             System.arraycopy(dr, 0, r, 0, dr.length);
/*  491 */             System.arraycopy(tmp, 0, r, dr.length, tmp.length);
/*      */           } 
/*  493 */           addResources((FileSet)oldFiles, r, zOut);
/*      */         } 
/*  495 */         finalizeZipOutputStream(zOut);
/*      */ 
/*      */ 
/*      */         
/*  499 */         if (this.doUpdate && 
/*  500 */           !renamedFile.delete()) {
/*  501 */           log(""Warning: unable to delete temporary file "" + renamedFile.getName(), 1);
/*      */         }
/*      */ 
/*      */         
/*  505 */         success = true;
/*      */       } finally {
/*      */         
/*      */         try {
/*  509 */           if (zOut != null) {
/*  510 */             zOut.close();
/*      */ 
/*      */ 
/*      */           
/*      */           }
/*      */ 
/*      */         
/*      */         }
/*      */         catch (IOException ex) {
/*      */ 
/*      */ 
/*      */           
/*  522 */           if (success) {
/*  523 */             throw ex;
/*      */           }
/*      */         } 
/*      */       } 
/*      */     } catch (IOException ioe) {
/*  528 */       String msg = ""Problem creating "" + this.archiveType + "": "" + ioe.getMessage();
/*      */ 
/*      */ 
/*      */       
/*  532 */       if ((!this.doUpdate || renamedFile != null) && !this.zipFile.delete()) {
/*  533 */         msg = msg + "" (and the archive is probably corrupt but I could not delete it)"";
/*      */       }
/*      */ 
/*      */       
/*  537 */       if (this.doUpdate && renamedFile != null) {
/*      */         try {
/*  539 */           fileUtils.rename(renamedFile, this.zipFile);
/*      */         } catch (IOException e) {
/*  541 */           msg = msg + "" (and I couldn't rename the temporary file "" + renamedFile.getName() + "" back)"";
/*      */         } 
/*      */       }
/*      */ 
/*      */       
/*  546 */       throw new BuildException(msg, ioe, getLocation());
/*      */     } finally {
/*  548 */       cleanUp();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  557 */   protected final boolean isAddingNewFiles() { return this.addingNewFiles; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected final void addResources(FileSet fileset, Resource[] resources, ZipOutputStream zOut) throws IOException {
/*  574 */     String prefix = """";
/*  575 */     String fullpath = """";
/*  576 */     int dirMode = 16877;
/*  577 */     int fileMode = 33188;
/*      */     
/*  579 */     ZipFileSet zfs = null;
/*  580 */     if (fileset instanceof ZipFileSet) {
/*  581 */       zfs = (ZipFileSet)fileset;
/*  582 */       prefix = zfs.getPrefix(getProject());
/*  583 */       fullpath = zfs.getFullpath(getProject());
/*  584 */       dirMode = zfs.getDirMode(getProject());
/*  585 */       fileMode = zfs.getFileMode(getProject());
/*      */     } 
/*      */     
/*  588 */     if (prefix.length() > 0 && fullpath.length() > 0) {
/*  589 */       throw new BuildException(""Both prefix and fullpath attributes must not be set on the same fileset."");
/*      */     }
/*      */ 
/*      */     
/*  593 */     if (resources.length != 1 && fullpath.length() > 0) {
/*  594 */       throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file."");
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  599 */     if (prefix.length() > 0) {
/*  600 */       if (!prefix.endsWith(""/"") && !prefix.endsWith(""\\"")) {
/*  601 */         prefix = prefix + ""/"";
/*      */       }
/*  603 */       addParentDirs(null, prefix, zOut, """", dirMode);
/*      */     } 
/*      */     
/*  606 */     ZipFile zf = null;
/*      */     
/*  608 */     try { boolean dealingWithFiles = false;
/*  609 */       File base = null;
/*      */       
/*  611 */       if (zfs == null || zfs.getSrc(getProject()) == null) {
/*  612 */         dealingWithFiles = true;
/*  613 */         base = fileset.getDir(getProject());
/*      */       } else {
/*  615 */         zf = new ZipFile(zfs.getSrc(getProject()), this.encoding);
/*      */       } 
/*      */       
/*  618 */       for (int i = 0; i < resources.length; i++) {
/*  619 */         String name = null;
/*  620 */         if (fullpath.length() > 0) {
/*  621 */           name = fullpath;
/*      */         } else {
/*  623 */           name = resources[i].getName();
/*      */         } 
/*  625 */         name = name.replace(File.separatorChar, '/');
/*      */         
/*  627 */         if (!"""".equals(name)) {
/*      */ 
/*      */           
/*  630 */           if (resources[i].isDirectory() && !name.endsWith(""/"")) {
/*  631 */             name = name + ""/"";
/*      */           }
/*      */           
/*  634 */           if (!this.doFilesonly && !dealingWithFiles && resources[i].isDirectory() && !zfs.hasDirModeBeenSet()) {
/*      */ 
/*      */             
/*  637 */             int nextToLastSlash = name.lastIndexOf(""/"", name.length() - 2);
/*      */             
/*  639 */             if (nextToLastSlash != -1) {
/*  640 */               addParentDirs(base, name.substring(0, nextToLastSlash + 1), zOut, prefix, dirMode);
/*      */             }
/*      */ 
/*      */             
/*  644 */             ZipEntry ze = zf.getEntry(resources[i].getName());
/*  645 */             addParentDirs(base, name, zOut, prefix, ze.getUnixMode());
/*      */           } else {
/*      */             
/*  648 */             addParentDirs(base, name, zOut, prefix, dirMode);
/*      */           } 
/*      */           
/*  651 */           if (!resources[i].isDirectory() && dealingWithFiles) {
/*  652 */             File f = fileUtils.resolveFile(base, resources[i].getName());
/*      */             
/*  654 */             zipFile(f, zOut, prefix + name, fileMode);
/*  655 */           } else if (!resources[i].isDirectory()) {
/*  656 */             ZipEntry ze = zf.getEntry(resources[i].getName());
/*      */             
/*  658 */             if (ze != null) {
/*  659 */               boolean oldCompress = this.doCompress;
/*  660 */               if (this.keepCompression) {
/*  661 */                 this.doCompress = (ze.getMethod() == 8);
/*      */               }
/*      */               try {
/*  664 */                 zipFile(zf.getInputStream(ze), zOut, prefix + name, ze.getTime(), zfs.getSrc(getProject()), zfs.hasFileModeBeenSet() ? fileMode : ze.getUnixMode());
/*      */               
/*      */               }
/*      */               finally {
/*      */                 
/*  669 */                 this.doCompress = oldCompress;
/*      */               } 
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       }  }
/*  675 */     finally { if (zf != null) {
/*  676 */         zf.close();
/*      */       } }
/*      */   
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void finalizeZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected boolean createEmptyZip(File zipFile) throws BuildException {
/*  704 */     log(""Note: creating empty "" + this.archiveType + "" archive "" + zipFile, 2);
/*      */     
/*  706 */     OutputStream os = null;
/*      */     try {
/*  708 */       os = new FileOutputStream(zipFile);
/*      */       
/*  710 */       byte[] empty = new byte[22];
/*  711 */       empty[0] = 80;
/*  712 */       empty[1] = 75;
/*  713 */       empty[2] = 5;
/*  714 */       empty[3] = 6;
/*      */       
/*  716 */       os.write(empty);
/*      */     } catch (IOException ioe) {
/*  718 */       throw new BuildException(""Could not create empty ZIP archive ("" + ioe.getMessage() + "")"", ioe, getLocation());
/*      */     }
/*      */     finally {
/*      */       
/*  722 */       if (os != null) {
/*      */         try {
/*  724 */           os.close();
/*  725 */         } catch (IOException e) {}
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  730 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private synchronized ZipScanner getZipScanner() {
/*  737 */     if (this.zs == null) {
/*  738 */       this.zs = new ZipScanner();
/*  739 */       this.zs.setEncoding(this.encoding);
/*  740 */       this.zs.setSrc(this.zipFile);
/*      */     } 
/*  742 */     return this.zs;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected ArchiveState getResourcesToAdd(FileSet[] filesets, File zipFile, boolean needsUpdate) throws BuildException {
/*  772 */     Resource[][] initialResources = grabResources(filesets);
/*  773 */     if (isEmpty(initialResources)) {
/*  774 */       if (needsUpdate && this.doUpdate)
/*      */       {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  791 */         return new ArchiveState(true, initialResources);
/*      */       }
/*      */       
/*  794 */       if (this.emptyBehavior.equals(""skip"")) {
/*  795 */         if (this.doUpdate) {
/*  796 */           log(this.archiveType + "" archive "" + zipFile + "" not updated because no new files were included."", 3);
/*      */         }
/*      */         else {
/*      */           
/*  800 */           log(""Warning: skipping "" + this.archiveType + "" archive "" + zipFile + "" because no files were included."", 1);
/*      */         } 
/*      */       } else {
/*      */         
/*  804 */         if (this.emptyBehavior.equals(""fail"")) {
/*  805 */           throw new BuildException(""Cannot create "" + this.archiveType + "" archive "" + zipFile + "": no files were included."", getLocation());
/*      */         }
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  811 */         createEmptyZip(zipFile);
/*      */       } 
/*  813 */       return new ArchiveState(needsUpdate, initialResources);
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  818 */     if (!zipFile.exists()) {
/*  819 */       return new ArchiveState(true, initialResources);
/*      */     }
/*      */     
/*  822 */     if (needsUpdate && !this.doUpdate)
/*      */     {
/*  824 */       return new ArchiveState(true, initialResources);
/*      */     }
/*      */     
/*  827 */     Resource[][] newerResources = new Resource[filesets.length][];
/*      */     
/*  829 */     for (int i = 0; i < filesets.length; i++) {
/*  830 */       if (!(this.fileset instanceof ZipFileSet) || ((ZipFileSet)this.fileset).getSrc(getProject()) == null) {
/*      */         
/*  832 */         File base = filesets[i].getDir(getProject());
/*      */         
/*  834 */         for (int j = 0; j < (initialResources[i]).length; j++) {
/*  835 */           File resourceAsFile = fileUtils.resolveFile(base, initialResources[i][j].getName());
/*      */ 
/*      */           
/*  838 */           if (resourceAsFile.equals(zipFile)) {
/*  839 */             throw new BuildException(""A zip file cannot include itself"", getLocation());
/*      */           }
/*      */         } 
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  846 */     for (int i = 0; i < filesets.length; i++) {
/*  847 */       if ((initialResources[i]).length == 0) {
/*  848 */         newerResources[i] = new Resource[0];
/*      */       }
/*      */       else {
/*      */         
/*  852 */         Object object = new IdentityMapper();
/*  853 */         if (filesets[i] instanceof ZipFileSet) {
/*  854 */           ZipFileSet zfs = (ZipFileSet)filesets[i];
/*  855 */           if (zfs.getFullpath(getProject()) != null && !zfs.getFullpath(getProject()).equals("""")) {
/*      */ 
/*      */ 
/*      */ 
/*      */             
/*  860 */             MergingMapper fm = new MergingMapper();
/*  861 */             fm.setTo(zfs.getFullpath(getProject()));
/*  862 */             MergingMapper mergingMapper = fm;
/*      */           }
/*  864 */           else if (zfs.getPrefix(getProject()) != null && !zfs.getPrefix(getProject()).equals("""")) {
/*      */             
/*  866 */             GlobPatternMapper gm = new GlobPatternMapper();
/*  867 */             gm.setFrom(""*"");
/*  868 */             String prefix = zfs.getPrefix(getProject());
/*  869 */             if (!prefix.endsWith(""/"") && !prefix.endsWith(""\\"")) {
/*  870 */               prefix = prefix + ""/"";
/*      */             }
/*  872 */             gm.setTo(prefix + ""*"");
/*  873 */             object = gm;
/*      */           } 
/*      */         } 
/*      */         
/*  877 */         Resource[] resources = initialResources[i];
/*  878 */         if (this.doFilesonly) {
/*  879 */           resources = selectFileResources(resources);
/*      */         }
/*      */         
/*  882 */         newerResources[i] = ResourceUtils.selectOutOfDateSources((ProjectComponent)this, resources, (FileNameMapper)object, (ResourceFactory)getZipScanner());
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  887 */         needsUpdate = (needsUpdate || (newerResources[i]).length > 0);
/*      */         
/*  889 */         if (needsUpdate && !this.doUpdate) {
/*      */           break;
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  896 */     if (needsUpdate && !this.doUpdate)
/*      */     {
/*  898 */       return new ArchiveState(true, initialResources);
/*      */     }
/*      */     
/*  901 */     return new ArchiveState(needsUpdate, newerResources);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Resource[][] grabResources(FileSet[] filesets) {
/*  912 */     Resource[][] result = new Resource[filesets.length][];
/*  913 */     for (int i = 0; i < filesets.length; i++) {
/*  914 */       DirectoryScanner rs = filesets[i].getDirectoryScanner(getProject());
/*      */       
/*  916 */       if (rs instanceof ZipScanner) {
/*  917 */         ((ZipScanner)rs).setEncoding(this.encoding);
/*      */       }
/*  919 */       Vector resources = new Vector();
/*  920 */       String[] directories = rs.getIncludedDirectories();
/*  921 */       for (int j = 0; j < directories.length; j++) {
/*  922 */         resources.addElement(rs.getResource(directories[j]));
/*      */       }
/*  924 */       String[] files = rs.getIncludedFiles();
/*  925 */       for (int j = 0; j < files.length; j++) {
/*  926 */         resources.addElement(rs.getResource(files[j]));
/*      */       }
/*      */       
/*  929 */       result[i] = new Resource[resources.size()];
/*  930 */       resources.copyInto((Object[])result[i]);
/*      */     } 
/*  932 */     return result;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void zipDir(File dir, ZipOutputStream zOut, String vPath, int mode) throws IOException {
/*  941 */     if (this.addedDirs.get(vPath) != null) {
/*      */       return;
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  947 */     log(""adding directory "" + vPath, 3);
/*  948 */     this.addedDirs.put(vPath, vPath);
/*      */     
/*  950 */     if (!this.skipWriting) {
/*  951 */       ZipEntry ze = new ZipEntry(vPath);
/*  952 */       if (dir != null && dir.exists()) {
/*      */         
/*  954 */         ze.setTime(dir.lastModified() + 1999L);
/*      */       } else {
/*      */         
/*  957 */         ze.setTime(System.currentTimeMillis() + 1999L);
/*      */       } 
/*  959 */       ze.setSize(0L);
/*  960 */       ze.setMethod(0);
/*      */       
/*  962 */       ze.setCrc(EMPTY_CRC);
/*  963 */       ze.setUnixMode(mode);
/*      */       
/*  965 */       zOut.putNextEntry(ze);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath, long lastModified, File fromArchive, int mode) throws IOException {
/*  985 */     if (this.entries.contains(vPath)) {
/*      */       
/*  987 */       if (this.duplicate.equals(""preserve"")) {
/*  988 */         log(vPath + "" already added, skipping"", 2); return;
/*      */       } 
/*  990 */       if (this.duplicate.equals(""fail"")) {
/*  991 */         throw new BuildException(""Duplicate file "" + vPath + "" was found and the duplicate "" + ""attribute is 'fail'."");
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  996 */       log(""duplicate file "" + vPath + "" found, adding."", 3);
/*      */     }
/*      */     else {
/*      */       
/* 1000 */       log(""adding entry "" + vPath, 3);
/*      */     } 
/*      */     
/* 1003 */     this.entries.put(vPath, vPath);
/*      */     
/* 1005 */     if (!this.skipWriting) {
/* 1006 */       ZipEntry ze = new ZipEntry(vPath);
/* 1007 */       ze.setTime(lastModified);
/* 1008 */       ze.setMethod(this.doCompress ? 8 : 0);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1017 */       if (!zOut.isSeekable() && !this.doCompress) {
/* 1018 */         long size = 0L;
/* 1019 */         CRC32 cal = new CRC32();
/* 1020 */         if (!in.markSupported()) {
/*      */           
/* 1022 */           ByteArrayOutputStream bos = new ByteArrayOutputStream();
/*      */           
/* 1024 */           byte[] buffer = new byte[8192];
/* 1025 */           int count = 0;
/*      */           do {
/* 1027 */             size += count;
/* 1028 */             cal.update(buffer, 0, count);
/* 1029 */             bos.write(buffer, 0, count);
/* 1030 */             count = in.read(buffer, 0, buffer.length);
/* 1031 */           } while (count != -1);
/* 1032 */           in = new ByteArrayInputStream(bos.toByteArray());
/*      */         } else {
/*      */           
/* 1035 */           in.mark(2147483647);
/* 1036 */           byte[] buffer = new byte[8192];
/* 1037 */           int count = 0;
/*      */           do {
/* 1039 */             size += count;
/* 1040 */             cal.update(buffer, 0, count);
/* 1041 */             count = in.read(buffer, 0, buffer.length);
/* 1042 */           } while (count != -1);
/* 1043 */           in.reset();
/*      */         } 
/* 1045 */         ze.setSize(size);
/* 1046 */         ze.setCrc(cal.getValue());
/*      */       } 
/*      */       
/* 1049 */       ze.setUnixMode(mode);
/* 1050 */       zOut.putNextEntry(ze);
/*      */       
/* 1052 */       byte[] buffer = new byte[8192];
/* 1053 */       int count = 0;
/*      */       do {
/* 1055 */         if (count != 0) {
/* 1056 */           zOut.write(buffer, 0, count);
/*      */         }
/* 1058 */         count = in.read(buffer, 0, buffer.length);
/* 1059 */       } while (count != -1);
/*      */     } 
/* 1061 */     this.addedFiles.addElement(vPath);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void zipFile(File file, ZipOutputStream zOut, String vPath, int mode) throws IOException {
/* 1079 */     if (file.equals(this.zipFile)) {
/* 1080 */       throw new BuildException(""A zip file cannot include itself"", getLocation());
/*      */     }
/*      */ 
/*      */     
/* 1084 */     FileInputStream fIn = new FileInputStream(file);
/*      */     
/*      */     try {
/* 1087 */       zipFile(fIn, zOut, vPath, file.lastModified() + 1999L, null, mode);
/*      */     } finally {
/* 1089 */       fIn.close();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected final void addParentDirs(File baseDir, String entry, ZipOutputStream zOut, String prefix, int dirMode) throws IOException {
/* 1102 */     if (!this.doFilesonly) {
/* 1103 */       Stack directories = new Stack();
/* 1104 */       int slashPos = entry.length();
/*      */ 
/*      */       
/* 1107 */       String dir = entry.substring(0, slashPos + 1);
/* 1108 */       while ((slashPos = entry.lastIndexOf('/', slashPos - 1)) != -1 && this.addedDirs.get(prefix + dir) == null)
/*      */       {
/*      */         
/* 1111 */         directories.push(dir);
/*      */       }
/*      */       
/* 1114 */       while (!directories.isEmpty()) {
/* 1115 */         String dir = directories.pop();
/* 1116 */         File f = null;
/* 1117 */         if (baseDir != null) {
/* 1118 */           f = new File(baseDir, dir);
/*      */         } else {
/* 1120 */           f = new File(dir);
/*      */         } 
/* 1122 */         zipDir(f, zOut, prefix + dir, dirMode);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void cleanUp() {
/* 1142 */     this.addedDirs.clear();
/* 1143 */     this.addedFiles.removeAllElements();
/* 1144 */     this.entries.clear();
/* 1145 */     this.addingNewFiles = false;
/* 1146 */     this.doUpdate = this.savedDoUpdate;
/* 1147 */     Enumeration e = this.filesetsFromGroupfilesets.elements();
/* 1148 */     while (e.hasMoreElements()) {
/* 1149 */       ZipFileSet zf = e.nextElement();
/* 1150 */       this.filesets.removeElement(zf);
/*      */     } 
/* 1152 */     this.filesetsFromGroupfilesets.removeAllElements();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void reset() {
/* 1164 */     this.filesets.removeAllElements();
/* 1165 */     this.zipFile = null;
/* 1166 */     this.baseDir = null;
/* 1167 */     this.groupfilesets.removeAllElements();
/* 1168 */     this.duplicate = ""add"";
/* 1169 */     this.archiveType = ""zip"";
/* 1170 */     this.doCompress = true;
/* 1171 */     this.emptyBehavior = ""skip"";
/* 1172 */     this.doUpdate = false;
/* 1173 */     this.doFilesonly = false;
/* 1174 */     this.encoding = null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static final boolean isEmpty(Resource[][] r) {
/* 1183 */     for (int i = 0; i < r.length; i++) {
/* 1184 */       if ((r[i]).length > 0) {
/* 1185 */         return false;
/*      */       }
/*      */     } 
/* 1188 */     return true;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Resource[] selectFileResources(Resource[] orig) {
/* 1197 */     if (orig.length == 0) {
/* 1198 */       return orig;
/*      */     }
/*      */     
/* 1201 */     Vector v = new Vector(orig.length);
/* 1202 */     for (int i = 0; i < orig.length; i++) {
/* 1203 */       if (!orig[i].isDirectory()) {
/* 1204 */         v.addElement(orig[i]);
/*      */       } else {
/* 1206 */         log(""Ignoring directory "" + orig[i].getName() + "" as only files will be added."", 3);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1211 */     if (v.size() != orig.length) {
/* 1212 */       Resource[] r = new Resource[v.size()];
/* 1213 */       v.copyInto((Object[])r);
/* 1214 */       return r;
/*      */     } 
/* 1216 */     return orig;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class Duplicate
/*      */     extends EnumeratedAttribute
/*      */   {
/* 1225 */     public String[] getValues() { return new String[] { ""add"", ""preserve"", ""fail"" }; }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public static class ArchiveState
/*      */   {
/*      */     private boolean outOfDate;
/*      */ 
/*      */     
/*      */     private Resource[][] resourcesToAdd;
/*      */ 
/*      */ 
/*      */     
/*      */     ArchiveState(boolean state, Resource[][] r) {
/* 1240 */       this.outOfDate = state;
/* 1241 */       this.resourcesToAdd = r;
/*      */     }
/*      */ 
/*      */     
/* 1245 */     public boolean isOutOfDate() { return this.outOfDate; }
/*      */ 
/*      */ 
/*      */     
/* 1249 */     public Resource[][] getResourcesToAdd() { return this.resourcesToAdd; }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\Zip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapter,"package org.apache.tools.ant.taskdefs.compilers;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Javac;
public interface CompilerAdapter {
  void setJavac(Javac paramJavac);
  boolean execute() throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CompilerAdapterFactory
/*     */ {
/*     */   private static final String MODERN_COMPILER = ""com.sun.tools.javac.Main"";
/*     */   
/*     */   public static CompilerAdapter getCompiler(String compilerType, Task task) throws BuildException {
/* 101 */     boolean isClassicCompilerSupported = true;
/*     */     
/* 103 */     if (JavaEnvUtils.isJavaVersion(""1.4"")) {
/* 104 */       isClassicCompilerSupported = false;
/*     */     }
/*     */     
/* 107 */     if (compilerType.equalsIgnoreCase(""jikes"")) {
/* 108 */       return new Jikes();
/*     */     }
/* 110 */     if (compilerType.equalsIgnoreCase(""extJavac"")) {
/* 111 */       return new JavacExternal();
/*     */     }
/* 113 */     if (compilerType.equalsIgnoreCase(""classic"") || compilerType.equalsIgnoreCase(""javac1.1"") || compilerType.equalsIgnoreCase(""javac1.2"")) {
/*     */ 
/*     */       
/* 116 */       if (isClassicCompilerSupported) {
/* 117 */         return new Javac12();
/*     */       }
/* 119 */       task.log(""This version of java does not support the classic compiler; upgrading to modern"", 1);
/*     */ 
/*     */ 
/*     */       
/* 123 */       compilerType = ""modern"";
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 128 */     if (compilerType.equalsIgnoreCase(""modern"") || compilerType.equalsIgnoreCase(""javac1.3"") || compilerType.equalsIgnoreCase(""javac1.4"")) {
/*     */ 
/*     */ 
/*     */       
/* 132 */       if (doesModernCompilerExist()) {
/* 133 */         return new Javac13();
/*     */       }
/* 135 */       if (isClassicCompilerSupported) {
/* 136 */         task.log(""Modern compiler not found - looking for classic compiler"", 1);
/*     */         
/* 138 */         return new Javac12();
/*     */       } 
/* 140 */       throw new BuildException(""Unable to find a javac compiler;\ncom.sun.tools.javac.Main is not on the classpath.\nPerhaps JAVA_HOME does not point to the JDK"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 151 */     if (compilerType.equalsIgnoreCase(""jvc"") || compilerType.equalsIgnoreCase(""microsoft""))
/*     */     {
/* 153 */       return new Jvc();
/*     */     }
/* 155 */     if (compilerType.equalsIgnoreCase(""kjc"")) {
/* 156 */       return new Kjc();
/*     */     }
/* 158 */     if (compilerType.equalsIgnoreCase(""gcj"")) {
/* 159 */       return new Gcj();
/*     */     }
/* 161 */     if (compilerType.equalsIgnoreCase(""sj"") || compilerType.equalsIgnoreCase(""symantec""))
/*     */     {
/* 163 */       return new Sj();
/*     */     }
/* 165 */     return resolveClassName(compilerType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean doesModernCompilerExist() {
/*     */     
/* 174 */     try { Class.forName(""com.sun.tools.javac.Main"");
/* 175 */       return true; }
/*     */     
/* 177 */     catch (ClassNotFoundException cnfe) { try {
/* 178 */         CompilerAdapterFactory.class.getClassLoader().loadClass(""com.sun.tools.javac.Main"");
/* 179 */         return true;
/* 180 */       } catch (ClassNotFoundException cnfe2) {
/*     */ 
/*     */         
/* 183 */         return false;
/*     */       }  }
/*     */   
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static CompilerAdapter resolveClassName(String className) throws BuildException {
/*     */     try {
/* 197 */       Class c = Class.forName(className);
/* 198 */       Object o = c.newInstance();
/* 199 */       return (CompilerAdapter)o;
/*     */     } catch (ClassNotFoundException cnfe) {
/* 201 */       throw new BuildException(""Compiler Adapter '"" + className + ""' can't be found."", cnfe);
/*     */     } catch (ClassCastException cce) {
/*     */       
/* 204 */       throw new BuildException(className + "" isn't the classname of "" + ""a compiler adapter."", cce);
/*     */     }
/*     */     catch (Throwable t) {
/*     */       
/* 208 */       throw new BuildException(""Compiler Adapter "" + className + "" caused an interesting exception."", t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Execute;
/*     */ import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
/*     */ import org.apache.tools.ant.taskdefs.Javac;
/*     */ import org.apache.tools.ant.taskdefs.LogStreamHandler;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultCompilerAdapter
/*     */   implements CompilerAdapter
/*     */ {
/*     */   protected Path src;
/*     */   protected File destDir;
/*     */   protected String encoding;
/*     */   protected boolean debug = false;
/*     */   protected boolean optimize = false;
/*     */   protected boolean deprecation = false;
/*     */   protected boolean depend = false;
/*     */   protected boolean verbose = false;
/*     */   protected String target;
/*     */   protected Path bootclasspath;
/*     */   protected Path extdirs;
/*     */   protected Path compileClasspath;
/*     */   protected Path compileSourcepath;
/*     */   protected Project project;
/*     */   protected Location location;
/*     */   protected boolean includeAntRuntime;
/*     */   protected boolean includeJavaRuntime;
/*     */   protected String memoryInitialSize;
/*     */   protected String memoryMaximumSize;
/*     */   protected File[] compileList;
/* 111 */   protected static final String lSep = System.getProperty(""line.separator"");
/*     */   
/*     */   protected Javac attributes;
/* 114 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJavac(Javac attributes) {
/* 123 */     this.attributes = attributes;
/* 124 */     this.src = attributes.getSrcdir();
/* 125 */     this.destDir = attributes.getDestdir();
/* 126 */     this.encoding = attributes.getEncoding();
/* 127 */     this.debug = attributes.getDebug();
/* 128 */     this.optimize = attributes.getOptimize();
/* 129 */     this.deprecation = attributes.getDeprecation();
/* 130 */     this.depend = attributes.getDepend();
/* 131 */     this.verbose = attributes.getVerbose();
/* 132 */     this.target = attributes.getTarget();
/* 133 */     this.bootclasspath = attributes.getBootclasspath();
/* 134 */     this.extdirs = attributes.getExtdirs();
/* 135 */     this.compileList = attributes.getFileList();
/* 136 */     this.compileClasspath = attributes.getClasspath();
/* 137 */     this.compileSourcepath = attributes.getSourcepath();
/* 138 */     this.project = attributes.getProject();
/* 139 */     this.location = attributes.getLocation();
/* 140 */     this.includeAntRuntime = attributes.getIncludeantruntime();
/* 141 */     this.includeJavaRuntime = attributes.getIncludejavaruntime();
/* 142 */     this.memoryInitialSize = attributes.getMemoryInitialSize();
/* 143 */     this.memoryMaximumSize = attributes.getMemoryMaximumSize();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public Javac getJavac() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   protected Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 167 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 172 */     if (this.destDir != null) {
/* 173 */       classpath.setLocation(this.destDir);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 179 */     Path cp = this.compileClasspath;
/* 180 */     if (cp == null) {
/* 181 */       cp = new Path(this.project);
/*     */     }
/* 183 */     if (this.includeAntRuntime) {
/* 184 */       classpath.addExisting(cp.concatSystemClasspath(""last""));
/*     */     } else {
/* 186 */       classpath.addExisting(cp.concatSystemClasspath(""ignore""));
/*     */     } 
/*     */     
/* 189 */     if (this.includeJavaRuntime) {
/* 190 */       classpath.addJavaRuntime();
/*     */     }
/*     */     
/* 193 */     return classpath;
/*     */   }
/*     */ 
/*     */   
/* 197 */   protected Commandline setupJavacCommandlineSwitches(Commandline cmd) { return setupJavacCommandlineSwitches(cmd, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommandlineSwitches(Commandline cmd, boolean useDebugLevel) {
/* 206 */     Path classpath = getCompileClasspath();
/*     */ 
/*     */     
/* 209 */     Path sourcepath = null;
/* 210 */     if (this.compileSourcepath != null) {
/* 211 */       sourcepath = this.compileSourcepath;
/*     */     } else {
/* 213 */       sourcepath = this.src;
/*     */     } 
/*     */     
/* 216 */     String memoryParameterPrefix = assumeJava11() ? ""-J-"" : ""-J-X"";
/* 217 */     if (this.memoryInitialSize != null) {
/* 218 */       if (!this.attributes.isForkedJavac()) {
/* 219 */         this.attributes.log(""Since fork is false, ignoring memoryInitialSize setting."", 1);
/*     */       }
/*     */       else {
/*     */         
/* 223 */         cmd.createArgument().setValue(memoryParameterPrefix + ""ms"" + this.memoryInitialSize);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 228 */     if (this.memoryMaximumSize != null) {
/* 229 */       if (!this.attributes.isForkedJavac()) {
/* 230 */         this.attributes.log(""Since fork is false, ignoring memoryMaximumSize setting."", 1);
/*     */       }
/*     */       else {
/*     */         
/* 234 */         cmd.createArgument().setValue(memoryParameterPrefix + ""mx"" + this.memoryMaximumSize);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 239 */     if (this.attributes.getNowarn()) {
/* 240 */       cmd.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */     
/* 243 */     if (this.deprecation == true) {
/* 244 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 247 */     if (this.destDir != null) {
/* 248 */       cmd.createArgument().setValue(""-d"");
/* 249 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 252 */     cmd.createArgument().setValue(""-classpath"");
/*     */ 
/*     */ 
/*     */     
/* 256 */     if (assumeJava11()) {
/* 257 */       Path cp = new Path(this.project);
/*     */ 
/*     */ 
/*     */       
/* 261 */       if (this.bootclasspath != null) {
/* 262 */         cp.append(this.bootclasspath);
/*     */       }
/* 264 */       if (this.extdirs != null) {
/* 265 */         cp.addExtdirs(this.extdirs);
/*     */       }
/* 267 */       cp.append(classpath);
/* 268 */       cp.append(sourcepath);
/* 269 */       cmd.createArgument().setPath(cp);
/*     */     } else {
/* 271 */       cmd.createArgument().setPath(classpath);
/*     */ 
/*     */       
/* 274 */       if (sourcepath.size() > 0) {
/* 275 */         cmd.createArgument().setValue(""-sourcepath"");
/* 276 */         cmd.createArgument().setPath(sourcepath);
/*     */       } 
/* 278 */       if (this.target != null) {
/* 279 */         cmd.createArgument().setValue(""-target"");
/* 280 */         cmd.createArgument().setValue(this.target);
/*     */       } 
/* 282 */       if (this.bootclasspath != null && this.bootclasspath.size() > 0) {
/* 283 */         cmd.createArgument().setValue(""-bootclasspath"");
/* 284 */         cmd.createArgument().setPath(this.bootclasspath);
/*     */       } 
/* 286 */       if (this.extdirs != null && this.extdirs.size() > 0) {
/* 287 */         cmd.createArgument().setValue(""-extdirs"");
/* 288 */         cmd.createArgument().setPath(this.extdirs);
/*     */       } 
/*     */     } 
/*     */     
/* 292 */     if (this.encoding != null) {
/* 293 */       cmd.createArgument().setValue(""-encoding"");
/* 294 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/* 296 */     if (this.debug) {
/* 297 */       if (useDebugLevel && !assumeJava11()) {
/* 298 */         String debugLevel = this.attributes.getDebugLevel();
/* 299 */         if (debugLevel != null) {
/* 300 */           cmd.createArgument().setValue(""-g:"" + debugLevel);
/*     */         } else {
/* 302 */           cmd.createArgument().setValue(""-g"");
/*     */         } 
/*     */       } else {
/* 305 */         cmd.createArgument().setValue(""-g"");
/*     */       } 
/* 307 */     } else if (!assumeJava11()) {
/* 308 */       cmd.createArgument().setValue(""-g:none"");
/*     */     } 
/* 310 */     if (this.optimize) {
/* 311 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/*     */     
/* 314 */     if (this.depend) {
/* 315 */       if (assumeJava11()) {
/* 316 */         cmd.createArgument().setValue(""-depend"");
/* 317 */       } else if (assumeJava12()) {
/* 318 */         cmd.createArgument().setValue(""-Xdepend"");
/*     */       } else {
/* 320 */         this.attributes.log(""depend attribute is not supported by the modern compiler"", 1);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 325 */     if (this.verbose) {
/* 326 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/*     */     
/* 329 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 331 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd) {
/* 339 */     setupJavacCommandlineSwitches(cmd, true);
/* 340 */     if (this.attributes.getSource() != null && !assumeJava13()) {
/* 341 */       cmd.createArgument().setValue(""-source"");
/* 342 */       cmd.createArgument().setValue(this.attributes.getSource());
/*     */     } 
/* 344 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupModernJavacCommand() {
/* 352 */     Commandline cmd = new Commandline();
/* 353 */     setupModernJavacCommandlineSwitches(cmd);
/*     */     
/* 355 */     logAndAddFilesToCompile(cmd);
/* 356 */     return cmd;
/*     */   }
/*     */ 
/*     */   
/* 360 */   protected Commandline setupJavacCommand() { return setupJavacCommand(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommand(boolean debugLevelCheck) {
/* 368 */     Commandline cmd = new Commandline();
/* 369 */     setupJavacCommandlineSwitches(cmd, debugLevelCheck);
/* 370 */     logAndAddFilesToCompile(cmd);
/* 371 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline cmd) {
/* 379 */     this.attributes.log(""Compilation "" + cmd.describeArguments(), 3);
/*     */ 
/*     */     
/* 382 */     StringBuffer niceSourceList = new StringBuffer(""File"");
/* 383 */     if (this.compileList.length != 1) {
/* 384 */       niceSourceList.append(""s"");
/*     */     }
/* 386 */     niceSourceList.append("" to be compiled:"");
/*     */     
/* 388 */     niceSourceList.append(lSep);
/*     */     
/* 390 */     for (int i = 0; i < this.compileList.length; i++) {
/* 391 */       String arg = this.compileList[i].getAbsolutePath();
/* 392 */       cmd.createArgument().setValue(arg);
/* 393 */       niceSourceList.append(""    "" + arg + lSep);
/*     */     } 
/*     */     
/* 396 */     this.attributes.log(niceSourceList.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 408 */   protected int executeExternalCompile(String[] args, int firstFileName) { return executeExternalCompile(args, firstFileName, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int executeExternalCompile(String[] args, int firstFileName, boolean quoteFiles) {
/* 427 */     String[] commandArray = null;
/* 428 */     File tmpFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 438 */       if (Commandline.toString(args).length() > 4096 && firstFileName >= 0) {
/*     */         
/* 440 */         PrintWriter out = null;
/*     */         try {
/* 442 */           File userDir = getJavac().getTempdir();
/* 443 */           if (userDir == null) {
/* 444 */             String userDirName = System.getProperty(""user.dir"");
/* 445 */             userDir = new File(userDirName);
/*     */           } 
/* 447 */           tmpFile = this.fileUtils.createTempFile(""files"", """", userDir);
/* 448 */           tmpFile.deleteOnExit();
/* 449 */           out = new PrintWriter(new FileWriter(tmpFile));
/* 450 */           for (int i = firstFileName; i < args.length; i++) {
/* 451 */             if (quoteFiles && args[i].indexOf("" "") > -1) {
/* 452 */               args[i] = args[i].replace('\\', '/');
/* 453 */               out.println(""\"""" + args[i] + ""\"""");
/*     */             } else {
/* 455 */               out.println(args[i]);
/*     */             } 
/*     */           } 
/* 458 */           out.flush();
/* 459 */           commandArray = new String[firstFileName + 1];
/* 460 */           System.arraycopy(args, 0, commandArray, 0, firstFileName);
/* 461 */           commandArray[firstFileName] = ""@"" + tmpFile;
/*     */         } catch (IOException e) {
/* 463 */           throw new BuildException(""Error creating temporary file"", e, this.location);
/*     */         } finally {
/*     */           
/* 466 */           if (out != null) {
/*     */             try {
/* 468 */               out.close();
/* 469 */             } catch (Throwable t) {}
/*     */           }
/*     */         }
/*     */       
/*     */       } else {
/*     */         
/* 475 */         commandArray = args;
/*     */       } 
/*     */       
/*     */       try {
/* 479 */         Execute exe = new Execute((ExecuteStreamHandler)new LogStreamHandler((Task)this.attributes, 2, 1));
/*     */ 
/*     */ 
/*     */         
/* 483 */         exe.setAntRun(this.project);
/* 484 */         exe.setWorkingDirectory(this.project.getBaseDir());
/* 485 */         exe.setCommandline(commandArray);
/* 486 */         exe.execute();
/* 487 */         return exe.getExitValue();
/*     */       } catch (IOException e) {
/* 489 */         throw new BuildException(""Error running "" + args[0] + "" compiler"", e, this.location);
/*     */       } 
/*     */     } finally {
/*     */       
/* 493 */       if (tmpFile != null) {
/* 494 */         tmpFile.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 503 */   protected void addExtdirsToClasspath(Path classpath) { classpath.addExtdirs(this.extdirs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 510 */   protected void addCurrentCompilerArgs(Commandline cmd) { cmd.addArguments(getJavac().getCurrentCompilerArgs()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 518 */   protected boolean assumeJava11() { return (""javac1.1"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.1"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.1""))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 530 */   protected boolean assumeJava12() { return (""javac1.2"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.2"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.2""))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 542 */   protected boolean assumeJava13() { return (""javac1.3"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3"")) || (""modern"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3""))); }
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\DefaultCompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Gcj,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Gcj
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  77 */     this.attributes.log(""Using gcj compiler"", 3);
/*  78 */     Commandline cmd = setupGCJCommand();
/*     */     
/*  80 */     int firstFileName = cmd.size();
/*  81 */     logAndAddFilesToCompile(cmd);
/*     */     
/*  83 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ 
/*     */   
/*     */   protected Commandline setupGCJCommand() {
/*  88 */     Commandline cmd = new Commandline();
/*  89 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (this.bootclasspath != null) {
/*  94 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  99 */     classpath.addExtdirs(this.extdirs);
/*     */     
/* 101 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 103 */       this.includeJavaRuntime = true;
/*     */     }
/* 105 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 109 */     if (this.compileSourcepath != null) {
/* 110 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 112 */       classpath.append(this.src);
/*     */     } 
/*     */     
/* 115 */     String exec = getJavac().getExecutable();
/* 116 */     cmd.setExecutable((exec == null) ? ""gcj"" : exec);
/*     */     
/* 118 */     if (this.destDir != null) {
/* 119 */       cmd.createArgument().setValue(""-d"");
/* 120 */       cmd.createArgument().setFile(this.destDir);
/*     */       
/* 122 */       if (this.destDir.mkdirs()) {
/* 123 */         throw new BuildException(""Can't make output directories. Maybe permission is wrong. "");
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 128 */     cmd.createArgument().setValue(""-classpath"");
/* 129 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 131 */     if (this.encoding != null) {
/* 132 */       cmd.createArgument().setValue(""--encoding="" + this.encoding);
/*     */     }
/* 134 */     if (this.debug) {
/* 135 */       cmd.createArgument().setValue(""-g1"");
/*     */     }
/* 137 */     if (this.optimize) {
/* 138 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 144 */     cmd.createArgument().setValue(""-C"");
/*     */     
/* 146 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 148 */     return cmd;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Gcj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac12,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac12
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  87 */     this.attributes.log(""Using classic compiler"", 3);
/*  88 */     Commandline cmd = setupJavacCommand(true);
/*     */     
/*  90 */     LogOutputStream logOutputStream = new LogOutputStream((Task)this.attributes, 1);
/*     */ 
/*     */     
/*     */     try {
/*  94 */       Class c = Class.forName(""sun.tools.javac.Main"");
/*  95 */       Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });
/*     */ 
/*     */       
/*  98 */       Object compiler = cons.newInstance(new Object[] { logOutputStream, ""javac"" });
/*     */ 
/*     */ 
/*     */       
/* 102 */       Method compile = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/* 104 */       Boolean ok = (Boolean)compile.invoke(compiler, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/* 107 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/* 109 */       throw new BuildException(""Cannot use classic compiler, as it is not available.  A common solution is to set the environment variable JAVA_HOME to your jdk directory."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/* 115 */       if (ex instanceof BuildException) {
/* 116 */         throw (BuildException)ex;
/*     */       }
/* 118 */       throw new BuildException(""Error starting classic compiler: "", ex, this.location);
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/* 123 */         logOutputStream.close();
/*     */       } catch (IOException e) {
/*     */         
/* 126 */         throw new BuildException(e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Javac12.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac13,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac13
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   private static final int MODERN_COMPILER_SUCCESS = 0;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  89 */     this.attributes.log(""Using modern compiler"", 3);
/*  90 */     Commandline cmd = setupModernJavacCommand();
/*     */ 
/*     */     
/*     */     try {
/*  94 */       Class c = Class.forName(""com.sun.tools.javac.Main"");
/*  95 */       Object compiler = c.newInstance();
/*  96 */       Method compile = c.getMethod(""compile"", new Class[] { (new String[0]).getClass() });
/*     */       
/*  98 */       int result = ((Integer)compile.invoke(compiler, new Object[] { cmd.getArguments() })).intValue();
/*     */ 
/*     */       
/* 101 */       return (result == 0);
/*     */     } catch (Exception ex) {
/* 103 */       if (ex instanceof BuildException) {
/* 104 */         throw (BuildException)ex;
/*     */       }
/* 106 */       throw new BuildException(""Error starting modern compiler"", ex, this.location);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Javac13.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.JavacExternal,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JavacExternal
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 73 */     this.attributes.log(""Using external javac compiler"", 3);
/*    */     
/* 75 */     Commandline cmd = new Commandline();
/* 76 */     cmd.setExecutable(getJavac().getJavacExecutable());
/* 77 */     setupModernJavacCommandlineSwitches(cmd);
/* 78 */     int firstFileName = assumeJava11() ? -1 : cmd.size();
/* 79 */     logAndAddFilesToCompile(cmd);
/*    */     
/* 81 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName, true) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\JavacExternal.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jikes,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  87 */     this.attributes.log(""Using jikes compiler"", 3);
/*     */     
/*  89 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (this.bootclasspath != null) {
/*  94 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  99 */     classpath.addExtdirs(this.extdirs);
/*     */     
/* 101 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 103 */       this.includeJavaRuntime = true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 110 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 114 */     if (this.compileSourcepath != null) {
/* 115 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 117 */       classpath.append(this.src);
/*     */     } 
/*     */ 
/*     */     
/* 121 */     String jikesPath = System.getProperty(""jikes.class.path"");
/* 122 */     if (jikesPath != null) {
/* 123 */       classpath.append(new Path(this.project, jikesPath));
/*     */     }
/*     */     
/* 126 */     Commandline cmd = new Commandline();
/* 127 */     String exec = getJavac().getExecutable();
/* 128 */     cmd.setExecutable((exec == null) ? ""jikes"" : exec);
/*     */     
/* 130 */     if (this.deprecation == true) {
/* 131 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 134 */     if (this.destDir != null) {
/* 135 */       cmd.createArgument().setValue(""-d"");
/* 136 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 139 */     cmd.createArgument().setValue(""-classpath"");
/* 140 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 142 */     if (this.encoding != null) {
/* 143 */       cmd.createArgument().setValue(""-encoding"");
/* 144 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/* 146 */     if (this.debug) {
/* 147 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/* 149 */     if (this.optimize) {
/* 150 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/* 152 */     if (this.verbose) {
/* 153 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/* 155 */     if (this.depend) {
/* 156 */       cmd.createArgument().setValue(""-depend"");
/*     */     }
/*     */     
/* 159 */     if (this.target != null) {
/* 160 */       cmd.createArgument().setValue(""-target"");
/* 161 */       cmd.createArgument().setValue(this.target);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 177 */     String emacsProperty = this.project.getProperty(""build.compiler.emacs"");
/* 178 */     if (emacsProperty != null && Project.toBoolean(emacsProperty)) {
/* 179 */       cmd.createArgument().setValue(""+E"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 188 */     String warningsProperty = this.project.getProperty(""build.compiler.warnings"");
/*     */     
/* 190 */     if (warningsProperty != null) {
/* 191 */       this.attributes.log(""!! the build.compiler.warnings property is deprecated. !!"", 1);
/*     */       
/* 193 */       this.attributes.log(""!! Use the nowarn attribute instead. !!"", 1);
/*     */       
/* 195 */       if (!Project.toBoolean(warningsProperty))
/* 196 */         cmd.createArgument().setValue(""-nowarn""); 
/*     */     } 
/* 198 */     if (this.attributes.getNowarn())
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 205 */       cmd.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 211 */     String pedanticProperty = this.project.getProperty(""build.compiler.pedantic"");
/*     */     
/* 213 */     if (pedanticProperty != null && Project.toBoolean(pedanticProperty)) {
/* 214 */       cmd.createArgument().setValue(""+P"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 222 */     String fullDependProperty = this.project.getProperty(""build.compiler.fulldepend"");
/*     */     
/* 224 */     if (fullDependProperty != null && Project.toBoolean(fullDependProperty))
/*     */     {
/* 226 */       cmd.createArgument().setValue(""+F"");
/*     */     }
/*     */     
/* 229 */     if (this.attributes.getSource() != null) {
/* 230 */       cmd.createArgument().setValue(""-source"");
/* 231 */       cmd.createArgument().setValue(this.attributes.getSource());
/*     */     } 
/*     */     
/* 234 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 236 */     int firstFileName = cmd.size();
/* 237 */     logAndAddFilesToCompile(cmd);
/*     */     
/* 239 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jvc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jvc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  82 */     this.attributes.log(""Using jvc compiler"", 3);
/*     */     
/*  84 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  88 */     if (this.bootclasspath != null) {
/*  89 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */     
/*  92 */     if (this.includeJavaRuntime)
/*     */     {
/*     */       
/*  95 */       classpath.addExtdirs(this.extdirs);
/*     */     }
/*     */     
/*  98 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 102 */     if (this.compileSourcepath != null) {
/* 103 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 105 */       classpath.append(this.src);
/*     */     } 
/*     */     
/* 108 */     Commandline cmd = new Commandline();
/* 109 */     String exec = getJavac().getExecutable();
/* 110 */     cmd.setExecutable((exec == null) ? ""jvc"" : exec);
/*     */     
/* 112 */     if (this.destDir != null) {
/* 113 */       cmd.createArgument().setValue(""/d"");
/* 114 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 118 */     cmd.createArgument().setValue(""/cp:p"");
/* 119 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 121 */     boolean msExtensions = true;
/* 122 */     String mse = getProject().getProperty(""build.compiler.jvc.extensions"");
/* 123 */     if (mse != null) {
/* 124 */       msExtensions = Project.toBoolean(mse);
/*     */     }
/*     */     
/* 127 */     if (msExtensions) {
/*     */       
/* 129 */       cmd.createArgument().setValue(""/x-"");
/*     */       
/* 131 */       cmd.createArgument().setValue(""/nomessage"");
/*     */     } 
/*     */ 
/*     */     
/* 135 */     cmd.createArgument().setValue(""/nologo"");
/*     */     
/* 137 */     if (this.debug) {
/* 138 */       cmd.createArgument().setValue(""/g"");
/*     */     }
/* 140 */     if (this.optimize) {
/* 141 */       cmd.createArgument().setValue(""/O"");
/*     */     }
/* 143 */     if (this.verbose) {
/* 144 */       cmd.createArgument().setValue(""/verbose"");
/*     */     }
/*     */     
/* 147 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 149 */     int firstFileName = cmd.size();
/* 150 */     logAndAddFilesToCompile(cmd);
/*     */     
/* 152 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Jvc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Kjc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Kjc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  79 */     this.attributes.log(""Using kjc compiler"", 3);
/*  80 */     Commandline cmd = setupKjcCommand();
/*     */     
/*     */     try {
/*  83 */       Class c = Class.forName(""at.dms.kjc.Main"");
/*     */ 
/*     */       
/*  86 */       Method compile = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  88 */       Boolean ok = (Boolean)compile.invoke(null, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/*  91 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/*  93 */       throw new BuildException(""Cannot use kjc compiler, as it is not available. A common solution is to set the environment variable CLASSPATH to your kjc archive (kjc.jar)."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/*  99 */       if (ex instanceof BuildException) {
/* 100 */         throw (BuildException)ex;
/*     */       }
/* 102 */       throw new BuildException(""Error starting kjc compiler: "", ex, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupKjcCommand() {
/* 112 */     Commandline cmd = new Commandline();
/*     */ 
/*     */     
/* 115 */     Path classpath = getCompileClasspath();
/*     */     
/* 117 */     if (this.deprecation == true) {
/* 118 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 121 */     if (this.destDir != null) {
/* 122 */       cmd.createArgument().setValue(""-d"");
/* 123 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 127 */     cmd.createArgument().setValue(""-classpath"");
/*     */     
/* 129 */     Path cp = new Path(this.project);
/*     */ 
/*     */     
/* 132 */     if (this.bootclasspath != null) {
/* 133 */       cp.append(this.bootclasspath);
/*     */     }
/*     */     
/* 136 */     if (this.extdirs != null) {
/* 137 */       cp.addExtdirs(this.extdirs);
/*     */     }
/*     */     
/* 140 */     cp.append(classpath);
/* 141 */     if (this.compileSourcepath != null) {
/* 142 */       cp.append(this.compileSourcepath);
/*     */     } else {
/* 144 */       cp.append(this.src);
/*     */     } 
/*     */     
/* 147 */     cmd.createArgument().setPath(cp);
/*     */ 
/*     */ 
/*     */     
/* 151 */     if (this.encoding != null) {
/* 152 */       cmd.createArgument().setValue(""-encoding"");
/* 153 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/*     */     
/* 156 */     if (this.debug) {
/* 157 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 160 */     if (this.optimize) {
/* 161 */       cmd.createArgument().setValue(""-O2"");
/*     */     }
/*     */     
/* 164 */     if (this.verbose) {
/* 165 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/*     */     
/* 168 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 170 */     logAndAddFilesToCompile(cmd);
/* 171 */     return cmd;
/*     */   }
/*     */   
/*     */   static Class class$(String x0) { try {
/*     */       return Class.forName(x0);
/*     */     } catch (ClassNotFoundException x1) {
/*     */       throw new NoClassDefFoundError(x1.getMessage());
/*     */     }  }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Kjc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Sj,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Sj
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 74 */     this.attributes.log(""Using symantec java compiler"", 3);
/*    */     
/* 76 */     Commandline cmd = setupJavacCommand();
/* 77 */     String exec = getJavac().getExecutable();
/* 78 */     cmd.setExecutable((exec == null) ? ""sj"" : exec);
/*    */     
/* 80 */     int firstFileName = cmd.size() - this.compileList.length;
/*    */     
/* 82 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\compilers\Sj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.And,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class And
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 77 */     Enumeration e = getConditions();
/* 78 */     while (e.hasMoreElements()) {
/* 79 */       Condition c = e.nextElement();
/* 80 */       if (!c.eval()) {
/* 81 */         return false;
/*    */       }
/*    */     } 
/* 84 */     return true;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\And.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Condition,"package org.apache.tools.ant.taskdefs.condition;
import org.apache.tools.ant.BuildException;
public interface Condition {
  boolean eval() throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Condition.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.ConditionBase,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.taskdefs.Available;
/*     */ import org.apache.tools.ant.taskdefs.Checksum;
/*     */ import org.apache.tools.ant.taskdefs.UpToDate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ConditionBase
/*     */   extends ProjectComponent
/*     */ {
/*  74 */   private Vector conditions = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   protected int countConditions() { return this.conditions.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   protected final Enumeration getConditions() { return this.conditions.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void addAvailable(Available a) { this.conditions.addElement(a); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void addChecksum(Checksum c) { this.conditions.addElement(c); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void addUptodate(UpToDate u) { this.conditions.addElement(u); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void addNot(Not n) { this.conditions.addElement(n); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public void addAnd(And a) { this.conditions.addElement(a); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void addOr(Or o) { this.conditions.addElement(o); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void addEquals(Equals e) { this.conditions.addElement(e); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void addOs(Os o) { this.conditions.addElement(o); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void addIsSet(IsSet i) { this.conditions.addElement(i); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void addHttp(Http h) { this.conditions.addElement(h); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void addSocket(Socket s) { this.conditions.addElement(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void addFilesMatch(FilesMatch test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void addContains(Contains test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void addIsTrue(IsTrue test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 242 */   public void addIsFalse(IsFalse test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void addIsReference(IsReference i) { this.conditions.addElement(i); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public void add(Condition c) { this.conditions.addElement(c); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\ConditionBase.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Contains,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Contains
/*     */   implements Condition
/*     */ {
/*     */   private String string;
/*     */   private String subString;
/*     */   private boolean caseSensitive = true;
/*     */   
/*  78 */   public void setString(String string) { this.string = string; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setSubstring(String subString) { this.subString = subString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setCasesensitive(boolean b) { this.caseSensitive = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 105 */     if (this.string == null || this.subString == null) {
/* 106 */       throw new BuildException(""both string and substring are required in contains"");
/*     */     }
/*     */ 
/*     */     
/* 110 */     return this.caseSensitive ? ((this.string.indexOf(this.subString) > -1)) : ((this.string.toLowerCase().indexOf(this.subString.toLowerCase()) > -1));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Contains.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Equals,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Equals
/*     */   implements Condition
/*     */ {
/*     */   private String arg1;
/*     */   private String arg2;
/*     */   private boolean trim = false;
/*     */   private boolean caseSensitive = true;
/*     */   
/*  78 */   public void setArg1(String a1) { this.arg1 = a1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setArg2(String a2) { this.arg2 = a2; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setTrim(boolean b) { this.trim = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setCasesensitive(boolean b) { this.caseSensitive = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 114 */     if (this.arg1 == null || this.arg2 == null) {
/* 115 */       throw new BuildException(""both arg1 and arg2 are required in equals"");
/*     */     }
/*     */ 
/*     */     
/* 119 */     if (this.trim) {
/* 120 */       this.arg1 = this.arg1.trim();
/* 121 */       this.arg2 = this.arg2.trim();
/*     */     } 
/*     */     
/* 124 */     return this.caseSensitive ? this.arg1.equals(this.arg2) : this.arg1.equalsIgnoreCase(this.arg2);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Equals.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.FilesMatch,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilesMatch
/*     */   implements Condition
/*     */ {
/*     */   private File file1;
/*     */   private File file2;
/*  80 */   private FileUtils fu = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setFile1(File file1) { this.file1 = file1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setFile2(File file2) { this.file2 = file2; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 111 */     if (this.file1 == null || this.file2 == null) {
/* 112 */       throw new BuildException(""both file1 and file2 are required in filesmatch"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 117 */     boolean matches = false;
/*     */     try {
/* 119 */       matches = this.fu.contentEquals(this.file1, this.file2);
/*     */     } catch (IOException ioe) {
/* 121 */       throw new BuildException(""when comparing files: "" + ioe.getMessage(), ioe);
/*     */     } 
/*     */     
/* 124 */     return matches;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\FilesMatch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Http,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.HttpURLConnection;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Http
/*     */   extends ProjectComponent
/*     */   implements Condition
/*     */ {
/*  73 */   private String spec = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   public void setUrl(String url) { this.spec = url; }
/*     */ 
/*     */   
/*  84 */   private int errorsBeginAt = 400;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setErrorsBeginAt(int errorsBeginAt) { this.errorsBeginAt = errorsBeginAt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 101 */     if (this.spec == null) {
/* 102 */       throw new BuildException(""No url specified in http condition"");
/*     */     }
/* 104 */     log(""Checking for "" + this.spec, 3);
/*     */     try {
/* 106 */       URL url = new URL(this.spec);
/*     */       try {
/* 108 */         URLConnection conn = url.openConnection();
/* 109 */         if (conn instanceof HttpURLConnection) {
/* 110 */           HttpURLConnection http = (HttpURLConnection)conn;
/* 111 */           int code = http.getResponseCode();
/* 112 */           log(""Result code for "" + this.spec + "" was "" + code, 3);
/*     */           
/* 114 */           if (code > 0 && code < this.errorsBeginAt) {
/* 115 */             return true;
/*     */           }
/* 117 */           return false;
/*     */         } 
/*     */       } catch (IOException e) {
/*     */         
/* 121 */         return false;
/*     */       } 
/*     */     } catch (MalformedURLException e) {
/* 124 */       throw new BuildException(""Badly formed URL: "" + this.spec, e);
/*     */     } 
/* 126 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Http.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsFalse,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsFalse
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/* 70 */   private Boolean value = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 77 */   public void setValue(boolean value) { this.value = value ? Boolean.TRUE : Boolean.FALSE; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 85 */     if (this.value == null) {
/* 86 */       throw new BuildException(""Nothing to test for falsehood"");
/*    */     }
/* 88 */     return !this.value.booleanValue();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\IsFalse.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsReference,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IsReference
/*     */   extends ProjectComponent
/*     */   implements Condition
/*     */ {
/*     */   private Reference ref;
/*     */   private String type;
/*     */   
/*  80 */   public void setRefid(Reference r) { this.ref = r; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setType(String type) { this.type = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/*  98 */     if (this.ref == null) {
/*  99 */       throw new BuildException(""No reference specified for isreference condition"");
/*     */     }
/*     */ 
/*     */     
/* 103 */     Object o = getProject().getReference(this.ref.getRefId());
/*     */     
/* 105 */     if (o == null)
/* 106 */       return false; 
/* 107 */     if (this.type == null) {
/* 108 */       return true;
/*     */     }
/* 110 */     Class typeClass = (Class)getProject().getDataTypeDefinitions().get(this.type);
/*     */ 
/*     */     
/* 113 */     if (typeClass == null) {
/* 114 */       typeClass = (Class)getProject().getTaskDefinitions().get(this.type);
/*     */     }
/*     */ 
/*     */     
/* 118 */     if (typeClass == null)
/*     */     {
/* 120 */       return false;
/*     */     }
/*     */     
/* 123 */     return typeClass.isAssignableFrom(o.getClass());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\IsReference.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsSet,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsSet
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/*    */   private String property;
/*    */   
/* 76 */   public void setProperty(String p) { this.property = p; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 84 */     if (this.property == null) {
/* 85 */       throw new BuildException(""No property specified for isset condition"");
/*    */     }
/*    */ 
/*    */     
/* 89 */     return (getProject().getProperty(this.property) != null);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\IsSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsTrue,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsTrue
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/* 70 */   private Boolean value = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 77 */   public void setValue(boolean value) { this.value = value ? Boolean.TRUE : Boolean.FALSE; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 85 */     if (this.value == null) {
/* 86 */       throw new BuildException(""Nothing to test for truth"");
/*    */     }
/* 88 */     return this.value.booleanValue();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\IsTrue.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Not,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Not
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 78 */     if (countConditions() > 1) {
/* 79 */       throw new BuildException(""You must not nest more than one condition into <not>"");
/*    */     }
/*    */     
/* 82 */     if (countConditions() < 1) {
/* 83 */       throw new BuildException(""You must nest a condition into <not>"");
/*    */     }
/* 85 */     return !((Condition)getConditions().nextElement()).eval();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Not.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Or,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Or
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 77 */     Enumeration e = getConditions();
/* 78 */     while (e.hasMoreElements()) {
/* 79 */       Condition c = e.nextElement();
/* 80 */       if (c.eval()) {
/* 81 */         return true;
/*    */       }
/*    */     } 
/* 84 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Or.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Os,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.util.Locale;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Os
/*     */   implements Condition
/*     */ {
/*  69 */   private static final String OS_NAME = System.getProperty(""os.name"").toLowerCase(Locale.US);
/*     */   
/*  71 */   private static final String OS_ARCH = System.getProperty(""os.arch"").toLowerCase(Locale.US);
/*     */   
/*  73 */   private static final String OS_VERSION = System.getProperty(""os.version"").toLowerCase(Locale.US);
/*     */   
/*  75 */   private static final String PATH_SEP = System.getProperty(""path.separator"");
/*     */ 
/*     */ 
/*     */   
/*     */   private String family;
/*     */ 
/*     */   
/*     */   private String name;
/*     */ 
/*     */   
/*     */   private String version;
/*     */ 
/*     */   
/*     */   private String arch;
/*     */ 
/*     */ 
/*     */   
/*     */   public Os() {}
/*     */ 
/*     */ 
/*     */   
/*  96 */   public Os(String family) { setFamily(family); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setFamily(String f) { this.family = f.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setName(String name) { this.name = name.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setArch(String arch) { this.arch = arch.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setVersion(String version) { this.version = version.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public boolean eval() throws BuildException { return isOs(this.family, this.name, this.arch, this.version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public static boolean isFamily(String family) { return isOs(family, null, null, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   public static boolean isName(String name) { return isOs(null, name, null, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public static boolean isArch(String arch) { return isOs(null, null, arch, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public static boolean isVersion(String version) { return isOs(null, null, null, version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean isOs(String family, String name, String arch, String version) {
/* 217 */     boolean retValue = false;
/*     */     
/* 219 */     if (family != null || name != null || arch != null || version != null) {
/*     */ 
/*     */       
/* 222 */       boolean isFamily = true;
/* 223 */       boolean isName = true;
/* 224 */       boolean isArch = true;
/* 225 */       boolean isVersion = true;
/*     */       
/* 227 */       if (family != null) {
/* 228 */         if (family.equals(""windows"")) {
/* 229 */           isFamily = (OS_NAME.indexOf(""windows"") > -1);
/* 230 */         } else if (family.equals(""os/2"")) {
/* 231 */           isFamily = (OS_NAME.indexOf(""os/2"") > -1);
/* 232 */         } else if (family.equals(""netware"")) {
/* 233 */           isFamily = (OS_NAME.indexOf(""netware"") > -1);
/* 234 */         } else if (family.equals(""dos"")) {
/* 235 */           isFamily = (PATH_SEP.equals("";"") && !isFamily(""netware""));
/* 236 */         } else if (family.equals(""mac"")) {
/* 237 */           isFamily = (OS_NAME.indexOf(""mac"") > -1);
/* 238 */         } else if (family.equals(""tandem"")) {
/* 239 */           isFamily = (OS_NAME.indexOf(""nonstop_kernel"") > -1);
/* 240 */         } else if (family.equals(""unix"")) {
/* 241 */           isFamily = (PATH_SEP.equals("":"") && !isFamily(""openvms"") && (!isFamily(""mac"") || OS_NAME.endsWith(""x"")));
/*     */         
/*     */         }
/* 244 */         else if (family.equals(""win9x"")) {
/* 245 */           isFamily = (isFamily(""windows"") && (OS_NAME.indexOf(""95"") >= 0 || OS_NAME.indexOf(""98"") >= 0 || OS_NAME.indexOf(""me"") >= 0 || OS_NAME.indexOf(""ce"") >= 0));
/*     */ 
/*     */ 
/*     */         
/*     */         }
/* 250 */         else if (family.equals(""z/os"")) {
/* 251 */           isFamily = (OS_NAME.indexOf(""z/os"") > -1 || OS_NAME.indexOf(""os/390"") > -1);
/*     */         }
/* 253 */         else if (family.equals(""os/400"")) {
/* 254 */           isFamily = (OS_NAME.indexOf(""os/400"") > -1);
/* 255 */         } else if (family.equals(""openvms"")) {
/* 256 */           isFamily = (OS_NAME.indexOf(""openvms"") > -1);
/*     */         } else {
/* 258 */           throw new BuildException(""Don't know how to detect os family \"""" + family + ""\"""");
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 263 */       if (name != null) {
/* 264 */         isName = name.equals(OS_NAME);
/*     */       }
/* 266 */       if (arch != null) {
/* 267 */         isArch = arch.equals(OS_ARCH);
/*     */       }
/* 269 */       if (version != null) {
/* 270 */         isVersion = version.equals(OS_VERSION);
/*     */       }
/* 272 */       retValue = (isFamily && isName && isArch && isVersion);
/*     */     } 
/* 274 */     return retValue;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Os.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Socket,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.Socket;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Socket
/*     */   extends ProjectComponent
/*     */   implements Condition
/*     */ {
/*  71 */   private String server = null;
/*  72 */   private int port = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   public void setServer(String server) { this.server = server; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/*  97 */     if (this.server == null) {
/*  98 */       throw new BuildException(""No server specified in socket condition"");
/*     */     }
/*     */     
/* 101 */     if (this.port == 0) {
/* 102 */       throw new BuildException(""No port specified in socket condition"");
/*     */     }
/* 104 */     log(""Checking for listener at "" + this.server + "":"" + this.port, 3);
/*     */     
/* 106 */     Socket s = null;
/*     */     try {
/* 108 */       s = new Socket(this.server, this.port);
/*     */     } catch (IOException e) {
/* 110 */       return false;
/*     */     } finally {
/* 112 */       if (s != null) {
/*     */         try {
/* 114 */           s.close();
/* 115 */         } catch (IOException ioe) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 120 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\condition\Socket.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.TimeZone;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ChangeLogParser
/*     */ {
/*     */   private static final int GET_FILE = 1;
/*     */   private static final int GET_DATE = 2;
/*     */   private static final int GET_COMMENT = 3;
/*     */   private static final int GET_REVISION = 4;
/*     */   private static final int GET_PREVIOUS_REV = 5;
/*  78 */   private static final SimpleDateFormat c_inputDate = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"");
/*     */   private String m_file;
/*     */   
/*     */   static  {
/*  82 */     TimeZone utc = TimeZone.getTimeZone(""UTC"");
/*  83 */     c_inputDate.setTimeZone(utc);
/*     */   }
/*     */ 
/*     */   
/*     */   private String m_date;
/*     */   
/*     */   private String m_author;
/*     */   
/*     */   private String m_comment;
/*     */   private String m_revision;
/*     */   private String m_previousRevision;
/*  94 */   private int m_status = 1;
/*     */ 
/*     */   
/*  97 */   private final Hashtable m_entries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   CVSEntry[] getEntrySetAsArray() {
/* 105 */     CVSEntry[] array = new CVSEntry[this.m_entries.size()];
/* 106 */     Enumeration e = this.m_entries.elements();
/* 107 */     int i = 0;
/* 108 */     while (e.hasMoreElements()) {
/* 109 */       array[i++] = e.nextElement();
/*     */     }
/* 111 */     return array;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stdout(String line) {
/* 119 */     switch (this.m_status) {
/*     */ 
/*     */       
/*     */       case 1:
/* 123 */         reset();
/* 124 */         processFile(line);
/*     */         break;
/*     */       case 4:
/* 127 */         processRevision(line);
/*     */         break;
/*     */       
/*     */       case 2:
/* 131 */         processDate(line);
/*     */         break;
/*     */       
/*     */       case 3:
/* 135 */         processComment(line);
/*     */         break;
/*     */       
/*     */       case 5:
/* 139 */         processGetPreviousRevision(line);
/*     */         break;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processComment(String line) {
/* 150 */     String lineSeparator = System.getProperty(""line.separator"");
/* 151 */     if (line.startsWith(""======"")) {
/*     */ 
/*     */       
/* 154 */       int end = this.m_comment.length() - lineSeparator.length();
/*     */       
/* 156 */       this.m_comment = this.m_comment.substring(0, end);
/* 157 */       saveEntry();
/* 158 */       this.m_status = 1;
/* 159 */     } else if (line.startsWith(""----------------------------"")) {
/* 160 */       int end = this.m_comment.length() - lineSeparator.length();
/*     */       
/* 162 */       this.m_comment = this.m_comment.substring(0, end);
/* 163 */       this.m_status = 5;
/*     */     } else {
/* 165 */       this.m_comment += line + lineSeparator;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFile(String line) {
/* 175 */     if (line.startsWith(""Working file:"")) {
/* 176 */       this.m_file = line.substring(14, line.length());
/* 177 */       this.m_status = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processRevision(String line) {
/* 187 */     if (line.startsWith(""revision"")) {
/* 188 */       this.m_revision = line.substring(9);
/* 189 */       this.m_status = 2;
/* 190 */     } else if (line.startsWith(""======"")) {
/*     */ 
/*     */       
/* 193 */       this.m_status = 1;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processDate(String line) {
/* 203 */     if (line.startsWith(""date:"")) {
/* 204 */       this.m_date = line.substring(6, 25);
/* 205 */       String lineData = line.substring(line.indexOf("";"") + 1);
/* 206 */       this.m_author = lineData.substring(10, lineData.indexOf("";""));
/*     */       
/* 208 */       this.m_status = 3;
/*     */ 
/*     */ 
/*     */       
/* 212 */       this.m_comment = """";
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processGetPreviousRevision(String line) {
/* 222 */     if (!line.startsWith(""revision"")) {
/* 223 */       throw new IllegalStateException(""Unexpected line from CVS: "" + line);
/*     */     }
/*     */     
/* 226 */     this.m_previousRevision = line.substring(9);
/*     */     
/* 228 */     saveEntry();
/*     */     
/* 230 */     this.m_revision = this.m_previousRevision;
/* 231 */     this.m_status = 2;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void saveEntry() {
/*     */     CVSEntry cVSEntry;
/* 238 */     String entryKey = this.m_date + this.m_author + this.m_comment;
/*     */     
/* 240 */     if (!this.m_entries.containsKey(entryKey)) {
/* 241 */       cVSEntry = new CVSEntry(parseDate(this.m_date), this.m_author, this.m_comment);
/* 242 */       this.m_entries.put(entryKey, cVSEntry);
/*     */     } else {
/* 244 */       cVSEntry = (CVSEntry)this.m_entries.get(entryKey);
/*     */     } 
/*     */     
/* 247 */     cVSEntry.addFile(this.m_file, this.m_revision, this.m_previousRevision);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Date parseDate(String date) {
/*     */     try {
/* 258 */       return c_inputDate.parse(date);
/*     */     }
/*     */     catch (ParseException e) {
/*     */       
/* 262 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void reset() {
/* 270 */     this.m_file = null;
/* 271 */     this.m_date = null;
/* 272 */     this.m_author = null;
/* 273 */     this.m_comment = null;
/* 274 */     this.m_revision = null;
/* 275 */     this.m_previousRevision = null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogParser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Execute;
/*     */ import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ChangeLogTask
/*     */   extends Task
/*     */ {
/*     */   private File m_usersFile;
/* 112 */   private Vector m_cvsUsers = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   private File m_dir;
/*     */ 
/*     */ 
/*     */   
/*     */   private File m_destfile;
/*     */ 
/*     */ 
/*     */   
/*     */   private Date m_start;
/*     */ 
/*     */ 
/*     */   
/*     */   private Date m_stop;
/*     */ 
/*     */   
/* 131 */   private final Vector m_filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setDir(File dir) { this.m_dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void setDestfile(File destfile) { this.m_destfile = destfile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setUsersfile(File usersFile) { this.m_usersFile = usersFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void addUser(CvsUser user) { this.m_cvsUsers.addElement(user); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setStart(Date start) { this.m_start = start; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setEnd(Date stop) { this.m_stop = stop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDaysinpast(int days) {
/* 200 */     long time = System.currentTimeMillis() - days * 24L * 60L * 60L * 1000L;
/*     */ 
/*     */     
/* 203 */     setStart(new Date(time));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void addFileset(FileSet fileSet) { this.m_filesets.addElement(fileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 224 */     File savedDir = this.m_dir;
/*     */ 
/*     */     
/*     */     try {
/* 228 */       validate();
/*     */       
/* 230 */       Properties userList = new Properties();
/*     */       
/* 232 */       loadUserlist(userList);
/*     */       
/* 234 */       Enumeration e = this.m_cvsUsers.elements();
/* 235 */       while (e.hasMoreElements()) {
/* 236 */         CvsUser user = e.nextElement();
/*     */         
/* 238 */         user.validate();
/* 239 */         userList.put(user.getUserID(), user.getDisplayname());
/*     */       } 
/*     */       
/* 242 */       Commandline command = new Commandline();
/*     */       
/* 244 */       command.setExecutable(""cvs"");
/* 245 */       command.createArgument().setValue(""log"");
/*     */       
/* 247 */       if (null != this.m_start) {
/* 248 */         SimpleDateFormat outputDate = new SimpleDateFormat(""yyyy-MM-dd"");
/*     */ 
/*     */ 
/*     */         
/* 252 */         String dateRange = "">="" + outputDate.format(this.m_start);
/*     */ 
/*     */         
/* 255 */         command.createArgument().setValue(""-d"");
/* 256 */         command.createArgument().setValue(dateRange);
/*     */       } 
/*     */ 
/*     */       
/* 260 */       if (!this.m_filesets.isEmpty()) {
/* 261 */         Enumeration e = this.m_filesets.elements();
/*     */         
/* 263 */         while (e.hasMoreElements()) {
/* 264 */           FileSet fileSet = e.nextElement();
/* 265 */           DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());
/*     */           
/* 267 */           String[] files = scanner.getIncludedFiles();
/*     */           
/* 269 */           for (int i = 0; i < files.length; i++) {
/* 270 */             command.createArgument().setValue(files[i]);
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 275 */       ChangeLogParser parser = new ChangeLogParser();
/* 276 */       RedirectingStreamHandler handler = new RedirectingStreamHandler(parser);
/*     */ 
/*     */       
/* 279 */       log(command.describeCommand(), 3);
/*     */       
/* 281 */       Execute exe = new Execute((ExecuteStreamHandler)handler);
/*     */       
/* 283 */       exe.setWorkingDirectory(this.m_dir);
/* 284 */       exe.setCommandline(command.getCommandline());
/* 285 */       exe.setAntRun(getProject());
/*     */       try {
/* 287 */         int resultCode = exe.execute();
/*     */         
/* 289 */         if (Execute.isFailure(resultCode)) {
/* 290 */           throw new BuildException(""Error running cvs log"");
/*     */         }
/*     */       } catch (IOException ioe) {
/* 293 */         throw new BuildException(ioe.toString());
/*     */       } 
/*     */       
/* 296 */       String errors = handler.getErrors();
/*     */       
/* 298 */       if (null != errors) {
/* 299 */         log(errors, 0);
/*     */       }
/*     */       
/* 302 */       CVSEntry[] entrySet = parser.getEntrySetAsArray();
/* 303 */       CVSEntry[] filteredEntrySet = filterEntrySet(entrySet);
/*     */       
/* 305 */       replaceAuthorIdWithName(userList, filteredEntrySet);
/*     */       
/* 307 */       writeChangeLog(filteredEntrySet);
/*     */     } finally {
/*     */       
/* 310 */       this.m_dir = savedDir;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 321 */     if (null == this.m_dir) {
/* 322 */       this.m_dir = getProject().getBaseDir();
/*     */     }
/* 324 */     if (null == this.m_destfile) {
/* 325 */       String message = ""Destfile must be set."";
/*     */       
/* 327 */       throw new BuildException(""Destfile must be set."");
/*     */     } 
/* 329 */     if (!this.m_dir.exists()) {
/* 330 */       String message = ""Cannot find base dir "" + this.m_dir.getAbsolutePath();
/*     */ 
/*     */       
/* 333 */       throw new BuildException(message);
/*     */     } 
/* 335 */     if (null != this.m_usersFile && !this.m_usersFile.exists()) {
/* 336 */       String message = ""Cannot find user lookup list "" + this.m_usersFile.getAbsolutePath();
/*     */ 
/*     */       
/* 339 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void loadUserlist(Properties userList) throws BuildException {
/* 352 */     if (null != this.m_usersFile) {
/*     */       try {
/* 354 */         userList.load(new FileInputStream(this.m_usersFile));
/*     */       } catch (IOException ioe) {
/* 356 */         throw new BuildException(ioe.toString(), ioe);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private CVSEntry[] filterEntrySet(CVSEntry[] entrySet) {
/* 368 */     Vector results = new Vector();
/*     */     
/* 370 */     for (int i = 0; i < entrySet.length; i++) {
/* 371 */       CVSEntry cvsEntry = entrySet[i];
/* 372 */       Date date = cvsEntry.getDate();
/*     */       
/* 374 */       if (null == this.m_start || !this.m_start.after(date))
/*     */       {
/*     */ 
/*     */         
/* 378 */         if (null == this.m_stop || !this.m_stop.before(date))
/*     */         {
/*     */ 
/*     */           
/* 382 */           results.addElement(cvsEntry); } 
/*     */       }
/*     */     } 
/* 385 */     CVSEntry[] resultArray = new CVSEntry[results.size()];
/*     */     
/* 387 */     results.copyInto((Object[])resultArray);
/* 388 */     return resultArray;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void replaceAuthorIdWithName(Properties userList, CVSEntry[] entrySet) {
/* 396 */     for (int i = 0; i < entrySet.length; i++) {
/*     */       
/* 398 */       CVSEntry entry = entrySet[i];
/* 399 */       if (userList.containsKey(entry.getAuthor())) {
/* 400 */         entry.setAuthor(userList.getProperty(entry.getAuthor()));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeChangeLog(CVSEntry[] entrySet) throws BuildException {
/* 413 */     FileOutputStream output = null;
/*     */     
/*     */     try {
/* 416 */       output = new FileOutputStream(this.m_destfile);
/*     */       
/* 418 */       PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, ""UTF-8""));
/*     */ 
/*     */       
/* 421 */       ChangeLogWriter serializer = new ChangeLogWriter();
/*     */       
/* 423 */       serializer.printChangeLog(writer, entrySet);
/*     */     } catch (UnsupportedEncodingException uee) {
/* 425 */       getProject().log(uee.toString(), 0);
/*     */     } catch (IOException ioe) {
/* 427 */       throw new BuildException(ioe.toString(), ioe);
/*     */     } finally {
/* 429 */       if (null != output)
/*     */         try {
/* 431 */           output.close();
/* 432 */         } catch (IOException ioe) {} 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Enumeration;
/*     */ import java.util.TimeZone;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ChangeLogWriter
/*     */ {
/*  69 */   private static final SimpleDateFormat c_outputDate = new SimpleDateFormat(""yyyy-MM-dd"");
/*     */ 
/*     */   
/*  72 */   private static final SimpleDateFormat c_outputTime = new SimpleDateFormat(""HH:mm"");
/*     */ 
/*     */   
/*     */   static  {
/*  76 */     TimeZone utc = TimeZone.getTimeZone(""UTC"");
/*  77 */     c_outputDate.setTimeZone(utc);
/*  78 */     c_outputTime.setTimeZone(utc);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printChangeLog(PrintWriter output, CVSEntry[] entries) {
/*  89 */     output.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/*  90 */     output.println(""<changelog>"");
/*  91 */     for (int i = 0; i < entries.length; i++) {
/*  92 */       CVSEntry entry = entries[i];
/*     */       
/*  94 */       printEntry(output, entry);
/*     */     } 
/*  96 */     output.println(""</changelog>"");
/*  97 */     output.flush();
/*  98 */     output.close();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printEntry(PrintWriter output, CVSEntry entry) {
/* 109 */     output.println(""\t<entry>"");
/* 110 */     output.println(""\t\t<date>"" + c_outputDate.format(entry.getDate()) + ""</date>"");
/*     */     
/* 112 */     output.println(""\t\t<time>"" + c_outputTime.format(entry.getDate()) + ""</time>"");
/*     */     
/* 114 */     output.println(""\t\t<author><![CDATA["" + entry.getAuthor() + ""]]></author>"");
/*     */ 
/*     */     
/* 117 */     Enumeration enumeration = entry.getFiles().elements();
/*     */     
/* 119 */     while (enumeration.hasMoreElements()) {
/* 120 */       RCSFile file = enumeration.nextElement();
/*     */       
/* 122 */       output.println(""\t\t<file>"");
/* 123 */       output.println(""\t\t\t<name>"" + file.getName() + ""</name>"");
/* 124 */       output.println(""\t\t\t<revision>"" + file.getRevision() + ""</revision>"");
/*     */ 
/*     */       
/* 127 */       String previousRevision = file.getPreviousRevision();
/*     */       
/* 129 */       if (previousRevision != null) {
/* 130 */         output.println(""\t\t\t<prevrevision>"" + previousRevision + ""</prevrevision>"");
/*     */       }
/*     */ 
/*     */       
/* 134 */       output.println(""\t\t</file>"");
/*     */     } 
/* 136 */     output.println(""\t\t<msg><![CDATA["" + entry.getComment() + ""]]></msg>"");
/* 137 */     output.println(""\t</entry>"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogWriter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CVSEntry,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CVSEntry
/*     */ {
/*     */   private Date m_date;
/*     */   private String m_author;
/*     */   private final String m_comment;
/*  70 */   private final Vector m_files = new Vector();
/*     */   
/*     */   public CVSEntry(Date date, String author, String comment) {
/*  73 */     this.m_date = date;
/*  74 */     this.m_author = author;
/*  75 */     this.m_comment = comment;
/*     */   }
/*     */ 
/*     */   
/*  79 */   public void addFile(String file, String revision) { this.m_files.addElement(new RCSFile(file, revision)); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void addFile(String file, String revision, String previousRevision) { this.m_files.addElement(new RCSFile(file, revision, previousRevision)); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   Date getDate() { return this.m_date; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   void setAuthor(String author) { this.m_author = author; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   String getAuthor() { return this.m_author; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   String getComment() { return this.m_comment; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   Vector getFiles() { return this.m_files; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String toString() { return getAuthor() + ""\n"" + getDate() + ""\n"" + getFiles() + ""\n"" + getComment(); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\CVSEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.AbstractCvsTask;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CvsTagDiff
/*     */   extends AbstractCvsTask
/*     */ {
/*     */   static final String FILE_STRING = ""File "";
/*     */   static final String TO_STRING = "" to "";
/*     */   static final String FILE_IS_NEW = "" is new;"";
/*     */   static final String REVISION = ""revision "";
/*     */   static final String FILE_HAS_CHANGED = "" changed from revision "";
/*     */   static final String FILE_WAS_REMOVED = "" is removed"";
/*     */   private String mypackage;
/*     */   private String mystartTag;
/*     */   private String myendTag;
/*     */   private String mystartDate;
/*     */   private String myendDate;
/*     */   private File mydestfile;
/* 167 */   private FileUtils myfileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void setPackage(String p) { this.mypackage = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setStartTag(String s) { this.mystartTag = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setStartDate(String s) { this.mystartDate = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void setEndTag(String s) { this.myendTag = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   public void setEndDate(String s) { this.myendDate = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setDestFile(File f) { this.mydestfile = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 229 */     validate();
/*     */ 
/*     */     
/* 232 */     addCommandArgument(""rdiff"");
/* 233 */     addCommandArgument(""-s"");
/* 234 */     if (this.mystartTag != null) {
/* 235 */       addCommandArgument(""-r"");
/* 236 */       addCommandArgument(this.mystartTag);
/*     */     } else {
/* 238 */       addCommandArgument(""-D"");
/* 239 */       addCommandArgument(this.mystartDate);
/*     */     } 
/* 241 */     if (this.myendTag != null) {
/* 242 */       addCommandArgument(""-r"");
/* 243 */       addCommandArgument(this.myendTag);
/*     */     } else {
/* 245 */       addCommandArgument(""-D"");
/* 246 */       addCommandArgument(this.myendDate);
/*     */     } 
/*     */     
/* 249 */     StringTokenizer myTokenizer = new StringTokenizer(this.mypackage);
/* 250 */     while (myTokenizer.hasMoreTokens()) {
/* 251 */       addCommandArgument(myTokenizer.nextToken());
/*     */     }
/*     */     
/* 254 */     setCommand("""");
/* 255 */     File tmpFile = null;
/*     */     try {
/* 257 */       tmpFile = this.myfileUtils.createTempFile(""cvstagdiff"", "".log"", null);
/* 258 */       tmpFile.deleteOnExit();
/* 259 */       setOutput(tmpFile);
/*     */ 
/*     */       
/* 262 */       super.execute();
/*     */ 
/*     */       
/* 265 */       CvsTagEntry[] entries = parseRDiff(tmpFile);
/*     */ 
/*     */       
/* 268 */       writeTagDiff(entries);
/*     */     } finally {
/*     */       
/* 271 */       if (tmpFile != null) {
/* 272 */         tmpFile.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private CvsTagEntry[] parseRDiff(File tmpFile) throws BuildException {
/* 287 */     BufferedReader reader = null;
/*     */     
/*     */     try {
/* 290 */       reader = new BufferedReader(new FileReader(tmpFile));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 306 */       String toBeRemoved = ""File "" + this.mypackage + ""/"";
/* 307 */       int headerLength = toBeRemoved.length();
/* 308 */       Vector entries = new Vector();
/*     */       
/* 310 */       String line = reader.readLine();
/*     */       
/* 312 */       CvsTagEntry entry = null;
/*     */       
/* 314 */       while (null != line) {
/* 315 */         if (line.length() > headerLength) {
/* 316 */           if (line.startsWith(toBeRemoved)) {
/* 317 */             line = line.substring(headerLength);
/*     */           } else {
/* 319 */             line = line.substring(""File "".length());
/*     */           } 
/*     */           int index;
/* 322 */           if ((index = line.indexOf("" is new;"")) != -1) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 329 */             String filename = line.substring(0, index);
/* 330 */             String rev = null;
/* 331 */             int indexrev = -1;
/* 332 */             if ((indexrev = line.indexOf(""revision "", index)) != -1) {
/* 333 */               rev = line.substring(indexrev + ""revision "".length());
/*     */             }
/* 335 */             entry = new CvsTagEntry(filename, rev);
/* 336 */             entries.addElement(entry);
/* 337 */             log(entry.toString(), 3);
/* 338 */           } else if ((index = line.indexOf("" changed from revision "")) != -1) {
/*     */ 
/*     */             
/* 341 */             String filename = line.substring(0, index);
/* 342 */             int revSeparator = line.indexOf("" to "", index);
/* 343 */             String prevRevision = line.substring(index + "" changed from revision "".length(), revSeparator);
/*     */ 
/*     */             
/* 346 */             String revision = line.substring(revSeparator + "" to "".length());
/* 347 */             entry = new CvsTagEntry(filename, revision, prevRevision);
/*     */ 
/*     */             
/* 350 */             entries.addElement(entry);
/* 351 */             log(entry.toString(), 3);
/* 352 */           } else if ((index = line.indexOf("" is removed"")) != -1) {
/*     */             
/* 354 */             String filename = line.substring(0, index);
/* 355 */             String rev = null;
/* 356 */             int indexrev = -1;
/* 357 */             if ((indexrev = line.indexOf(""revision "", index)) != -1) {
/* 358 */               rev = line.substring(indexrev + ""revision "".length());
/*     */             }
/* 360 */             entry = new CvsTagEntry(filename, null, rev);
/* 361 */             entries.addElement(entry);
/* 362 */             log(entry.toString(), 3);
/*     */           } 
/*     */         } 
/* 365 */         line = reader.readLine();
/*     */       } 
/*     */       
/* 368 */       CvsTagEntry[] array = new CvsTagEntry[entries.size()];
/* 369 */       entries.copyInto((Object[])array);
/*     */       
/* 371 */       return array;
/*     */     } catch (IOException e) {
/* 373 */       throw new BuildException(""Error in parsing"", e);
/*     */     } finally {
/* 375 */       if (reader != null) {
/*     */         try {
/* 377 */           reader.close();
/*     */         } catch (IOException e) {
/* 379 */           log(e.toString(), 0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeTagDiff(CvsTagEntry[] entries) throws BuildException {
/* 392 */     FileOutputStream output = null;
/*     */     try {
/* 394 */       output = new FileOutputStream(this.mydestfile);
/* 395 */       PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, ""UTF-8""));
/*     */       
/* 397 */       writer.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/* 398 */       writer.print(""<tagdiff "");
/* 399 */       if (this.mystartTag != null) {
/* 400 */         writer.print(""startTag=\"""" + this.mystartTag + ""\"" "");
/*     */       } else {
/* 402 */         writer.print(""startDate=\"""" + this.mystartDate + ""\"" "");
/*     */       } 
/* 404 */       if (this.myendTag != null) {
/* 405 */         writer.print(""endTag=\"""" + this.myendTag + ""\"" "");
/*     */       } else {
/* 407 */         writer.print(""endDate=\"""" + this.myendDate + ""\"" "");
/*     */       } 
/*     */       
/* 410 */       writer.print(""cvsroot=\"""" + getCvsRoot() + ""\"" "");
/* 411 */       writer.print(""package=\"""" + this.mypackage + ""\"" "");
/*     */       
/* 413 */       writer.println("">"");
/* 414 */       for (int i = 0, c = entries.length; i < c; i++) {
/* 415 */         writeTagEntry(writer, entries[i]);
/*     */       }
/* 417 */       writer.println(""</tagdiff>"");
/* 418 */       writer.flush();
/* 419 */       writer.close();
/*     */     } catch (UnsupportedEncodingException uee) {
/* 421 */       log(uee.toString(), 0);
/*     */     } catch (IOException ioe) {
/* 423 */       throw new BuildException(ioe.toString(), ioe);
/*     */     } finally {
/* 425 */       if (null != output) {
/*     */         try {
/* 427 */           output.close();
/*     */         } catch (IOException ioe) {
/* 429 */           log(ioe.toString(), 0);
/*     */         } 
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeTagEntry(PrintWriter writer, CvsTagEntry entry) {
/* 442 */     writer.println(""\t<entry>"");
/* 443 */     writer.println(""\t\t<file>"");
/* 444 */     writer.println(""\t\t\t<name>"" + entry.getFile() + ""</name>"");
/* 445 */     if (entry.getRevision() != null) {
/* 446 */       writer.println(""\t\t\t<revision>"" + entry.getRevision() + ""</revision>"");
/*     */     }
/*     */     
/* 449 */     if (entry.getPreviousRevision() != null) {
/* 450 */       writer.println(""\t\t\t<prevrevision>"" + entry.getPreviousRevision() + ""</prevrevision>"");
/*     */     }
/*     */     
/* 453 */     writer.println(""\t\t</file>"");
/* 454 */     writer.println(""\t</entry>"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 463 */     if (null == this.mypackage) {
/* 464 */       throw new BuildException(""Package/module must be set."");
/*     */     }
/*     */     
/* 467 */     if (null == this.mydestfile) {
/* 468 */       throw new BuildException(""Destfile must be set."");
/*     */     }
/*     */     
/* 471 */     if (null == this.mystartTag && null == this.mystartDate) {
/* 472 */       throw new BuildException(""Start tag or start date must be set."");
/*     */     }
/*     */     
/* 475 */     if (null != this.mystartTag && null != this.mystartDate) {
/* 476 */       throw new BuildException(""Only one of start tag and start date must be set."");
/*     */     }
/*     */ 
/*     */     
/* 480 */     if (null == this.myendTag && null == this.myendDate) {
/* 481 */       throw new BuildException(""End tag or end date must be set."");
/*     */     }
/*     */     
/* 484 */     if (null != this.myendTag && null != this.myendDate)
/* 485 */       throw new BuildException(""Only one of end tag and end date must be set.""); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsTagDiff.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CvsTagEntry
/*     */ {
/*     */   String m_filename;
/*     */   String m_prevRevision;
/*     */   String m_revision;
/*     */   
/*  65 */   public CvsTagEntry(String filename) { this(filename, null, null); }
/*     */ 
/*     */ 
/*     */   
/*  69 */   public CvsTagEntry(String filename, String revision) { this(filename, revision, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public CvsTagEntry(String filename, String revision, String prevRevision) {
/*  74 */     this.m_filename = filename;
/*  75 */     this.m_revision = revision;
/*  76 */     this.m_prevRevision = prevRevision;
/*     */   }
/*     */ 
/*     */   
/*  80 */   public String getFile() { return this.m_filename; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public String getRevision() { return this.m_revision; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getPreviousRevision() { return this.m_prevRevision; }
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buffer = new StringBuffer();
/*  93 */     buffer.append(this.m_filename);
/*  94 */     if (this.m_revision == null) {
/*  95 */       buffer.append("" was removed"");
/*  96 */       if (this.m_prevRevision != null) {
/*  97 */         buffer.append(""; previous revision was "").append(this.m_prevRevision);
/*     */       }
/*  99 */     } else if (this.m_revision != null && this.m_prevRevision == null) {
/* 100 */       buffer.append("" is new; current revision is "").append(this.m_revision);
/*     */     }
/* 102 */     else if (this.m_revision != null && this.m_prevRevision != null) {
/* 103 */       buffer.append("" has changed from "").append(this.m_prevRevision).append("" to "").append(this.m_revision);
/*     */     } 
/*     */     
/* 106 */     return buffer.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsTagEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsUser,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CvsUser
/*     */ {
/*     */   private String m_userID;
/*     */   private String m_displayName;
/*     */   
/*  78 */   public void setDisplayname(String displayName) { this.m_displayName = displayName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setUserid(String userID) { this.m_userID = userID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   String getUserID() { return this.m_userID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   String getDisplayname() { return this.m_displayName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void validate() throws BuildException {
/* 119 */     if (null == this.m_userID) {
/* 120 */       String message = ""Username attribute must be set."";
/*     */       
/* 122 */       throw new BuildException(""Username attribute must be set."");
/*     */     } 
/* 124 */     if (null == this.m_displayName) {
/* 125 */       String message = ""Displayname attribute must be set for userID "" + this.m_userID;
/*     */ 
/*     */       
/* 128 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsUser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RCSFile,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RCSFile
/*    */ {
/*    */   private String m_name;
/*    */   private String m_revision;
/*    */   private String m_previousRevision;
/*    */   
/* 70 */   RCSFile(String name, String rev) { this(name, rev, null); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   RCSFile(String name, String revision, String previousRevision) {
/* 77 */     this.m_name = name;
/* 78 */     this.m_revision = revision;
/* 79 */     if (!revision.equals(previousRevision)) {
/* 80 */       this.m_previousRevision = previousRevision;
/*    */     }
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 86 */   String getName() { return this.m_name; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 91 */   String getRevision() { return this.m_revision; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 96 */   String getPreviousRevision() { return this.m_previousRevision; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\RCSFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RedirectingOutputStream,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RedirectingOutputStream
/*    */   extends LogOutputStream
/*    */ {
/*    */   private final ChangeLogParser parser;
/*    */   
/*    */   public RedirectingOutputStream(ChangeLogParser parser) {
/* 75 */     super(null, 0);
/* 76 */     this.parser = parser;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   protected void processLine(String line) { this.parser.stdout(line); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\RedirectingOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ import java.io.ByteArrayOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.taskdefs.PumpStreamHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RedirectingStreamHandler
/*    */   extends PumpStreamHandler
/*    */ {
/* 70 */   RedirectingStreamHandler(ChangeLogParser parser) { super((OutputStream)new RedirectingOutputStream(parser), new ByteArrayOutputStream()); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   String getErrors() {
/*    */     try {
/* 77 */       ByteArrayOutputStream error = (ByteArrayOutputStream)getErr();
/*    */ 
/*    */       
/* 80 */       return error.toString(""ASCII"");
/*    */     } catch (Exception e) {
/* 82 */       return null;
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public void stop() {
/* 88 */     super.stop();
/*    */     try {
/* 90 */       getErr().close();
/* 91 */       getOut().close();
/*    */     } catch (IOException e) {
/*    */       
/* 94 */       throw new BuildException(e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\cvslib\RedirectingStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.EmailAddress,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EmailAddress
/*     */ {
/*     */   private String name;
/*     */   private String address;
/*     */   
/*     */   public EmailAddress() {}
/*     */   
/*     */   public EmailAddress(String email) {
/*  88 */     int minLen = 9;
/*  89 */     int len = email.length();
/*     */ 
/*     */     
/*  92 */     if (len > 9 && (
/*  93 */       email.charAt(0) == '<' || email.charAt(1) == '<') && (email.charAt(len - 1) == '>' || email.charAt(len - 2) == '>')) {
/*     */       
/*  95 */       this.address = trim(email, true);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 100 */     int paramDepth = 0;
/* 101 */     int start = 0;
/* 102 */     int end = 0;
/* 103 */     int nStart = 0;
/* 104 */     int nEnd = 0;
/*     */     
/* 106 */     for (int i = 0; i < len; i++) {
/* 107 */       char c = email.charAt(i);
/* 108 */       if (c == '(') {
/* 109 */         paramDepth++;
/* 110 */         if (start == 0) {
/* 111 */           end = i;
/* 112 */           nStart = i + 1;
/*     */         } 
/* 114 */       } else if (c == ')') {
/* 115 */         paramDepth--;
/* 116 */         if (end == 0) {
/* 117 */           start = i + 1;
/* 118 */           nEnd = i;
/*     */         } 
/* 120 */       } else if (paramDepth == 0 && c == '<') {
/* 121 */         if (start == 0) {
/* 122 */           nEnd = i;
/*     */         }
/* 124 */         start = i + 1;
/* 125 */       } else if (paramDepth == 0 && c == '>') {
/* 126 */         end = i;
/* 127 */         if (end != len - 1) {
/* 128 */           nStart = i + 1;
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 134 */     if (end == 0) {
/* 135 */       end = len;
/*     */     }
/*     */     
/* 138 */     if (nEnd == 0) {
/* 139 */       nEnd = len;
/*     */     }
/*     */ 
/*     */     
/* 143 */     this.address = trim(email.substring(start, end), true);
/* 144 */     this.name = trim(email.substring(nStart, nEnd), false);
/*     */ 
/*     */ 
/*     */     
/* 148 */     if (this.name.length() + this.address.length() > len) {
/* 149 */       this.name = null;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String trim(String t, boolean trimAngleBrackets) {
/* 158 */     int start = 0;
/* 159 */     int end = t.length();
/* 160 */     boolean trim = false;
/*     */     do {
/* 162 */       trim = false;
/* 163 */       if (t.charAt(end - 1) == ')' || (t.charAt(end - 1) == '>' && trimAngleBrackets) || (t.charAt(end - 1) == '""' && t.charAt(end - 2) != '\\') || t.charAt(end - 1) <= ' ') {
/*     */ 
/*     */ 
/*     */         
/* 167 */         trim = true;
/* 168 */         end--;
/*     */       } 
/* 170 */       if (t.charAt(start) != '(' && (t.charAt(start) != '<' || !trimAngleBrackets) && t.charAt(start) != '""' && t.charAt(start) > ' ') {
/*     */         continue;
/*     */       }
/*     */       
/* 174 */       trim = true;
/* 175 */       start++;
/*     */     }
/* 177 */     while (trim);
/* 178 */     return t.substring(start, end);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setAddress(String address) { this.address = address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 208 */     if (this.name == null) {
/* 209 */       return this.address;
/*     */     }
/* 211 */     return this.name + "" <"" + this.address + "">"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public String getAddress() { return this.address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public String getName() { return this.name; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\EmailAddress.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.EmailTask,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EmailTask
/*     */   extends Task
/*     */ {
/*     */   public static final String AUTO = ""auto"";
/*     */   public static final String MIME = ""mime"";
/*     */   public static final String UU = ""uu"";
/*     */   public static final String PLAIN = ""plain"";
/*     */   
/*     */   public static class Encoding
/*     */     extends EnumeratedAttribute
/*     */   {
/* 106 */     public String[] getValues() { return new String[] { ""auto"", ""mime"", ""uu"", ""plain"" }; }
/*     */   }
/*     */ 
/*     */   
/* 110 */   private String encoding = ""auto"";
/*     */   
/* 112 */   private String host = ""localhost"";
/* 113 */   private int port = 25;
/*     */   
/* 115 */   private String subject = null;
/*     */   
/* 117 */   private Message message = null;
/*     */   
/*     */   private boolean failOnError = true;
/*     */   private boolean includeFileNames = false;
/* 121 */   private String messageMimeType = null;
/*     */ 
/*     */   
/* 124 */   private EmailAddress from = null;
/*     */   
/* 126 */   private Vector replyToList = new Vector();
/*     */   
/* 128 */   private Vector toList = new Vector();
/*     */   
/* 130 */   private Vector ccList = new Vector();
/*     */   
/* 132 */   private Vector bccList = new Vector();
/*     */ 
/*     */   
/* 135 */   private Vector files = new Vector();
/* 136 */   private Vector filesets = new Vector();
/*     */   
/* 138 */   private String charset = null;
/*     */   
/* 140 */   private String user = null;
/*     */   
/* 142 */   private String password = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean SSL = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public void setUser(String user) { this.user = user; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void setPassword(String password) { this.password = password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setSSL(boolean SSL) { this.SSL = SSL; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setEncoding(Encoding encoding) { this.encoding = encoding.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setMailport(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setMailhost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setSubject(String subject) { this.subject = subject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessage(String message) {
/* 219 */     if (this.message != null) {
/* 220 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 224 */     this.message = new Message(message);
/* 225 */     this.message.setProject(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessageFile(File file) {
/* 235 */     if (this.message != null) {
/* 236 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 240 */     this.message = new Message(file);
/* 241 */     this.message.setProject(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void setMessageMimeType(String type) { this.messageMimeType = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMessage(Message message) throws BuildException {
/* 264 */     if (this.message != null) {
/* 265 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 269 */     this.message = message;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFrom(EmailAddress address) {
/* 279 */     if (this.from != null) {
/* 280 */       throw new BuildException(""Emails can only be from one address"");
/*     */     }
/*     */     
/* 283 */     this.from = address;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String address) {
/* 293 */     if (this.from != null) {
/* 294 */       throw new BuildException(""Emails can only be from one address"");
/*     */     }
/*     */     
/* 297 */     this.from = new EmailAddress(address);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   public void addReplyTo(EmailAddress address) { this.replyToList.add(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 319 */   public void setReplyTo(String address) { this.replyToList.add(new EmailAddress(address)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 329 */   public void addTo(EmailAddress address) { this.toList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setToList(String list) {
/* 339 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 341 */     while (tokens.hasMoreTokens()) {
/* 342 */       this.toList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 353 */   public void addCc(EmailAddress address) { this.ccList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCcList(String list) {
/* 363 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 365 */     while (tokens.hasMoreTokens()) {
/* 366 */       this.ccList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   public void addBcc(EmailAddress address) { this.bccList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBccList(String list) {
/* 387 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 389 */     while (tokens.hasMoreTokens()) {
/* 390 */       this.bccList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 401 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiles(String filenames) {
/* 411 */     StringTokenizer t = new StringTokenizer(filenames, "", "");
/*     */     
/* 413 */     while (t.hasMoreTokens()) {
/* 414 */       this.files.addElement(getProject().resolveFile(t.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   public void addFileset(FileSet fs) { this.filesets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 436 */   public void setIncludefilenames(boolean includeFileNames) { this.includeFileNames = includeFileNames; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 446 */   public boolean getIncludeFileNames() { return this.includeFileNames; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 452 */     Message savedMessage = this.message;
/* 453 */     Vector savedFiles = (Vector)this.files.clone();
/*     */     
/*     */     try {
/* 456 */       Mailer mailer = null;
/*     */ 
/*     */       
/* 459 */       boolean autoFound = false;
/*     */       
/* 461 */       if (this.encoding.equals(""mime"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/*     */         try {
/* 464 */           mailer = (Mailer)Class.forName(""org.apache.tools.ant.taskdefs.email.MimeMailer"").newInstance();
/*     */ 
/*     */           
/* 467 */           autoFound = true;
/* 468 */           log(""Using MIME mail"", 3);
/*     */         } catch (Throwable e) {
/* 470 */           log(""Failed to initialise MIME mail: "" + e.getMessage(), 1);
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 475 */       if (!autoFound && (this.user != null || this.password != null) && (this.encoding.equals(""uu"") || this.encoding.equals(""plain"")))
/*     */       {
/* 477 */         throw new BuildException(""SMTP auth only possible with MIME mail"");
/*     */       }
/*     */       
/* 480 */       if (!autoFound && this.SSL && (this.encoding.equals(""uu"") || this.encoding.equals(""plain"")))
/*     */       {
/* 482 */         throw new BuildException(""SSL only possible with MIME mail"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 487 */       if (this.encoding.equals(""uu"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/*     */         try {
/* 490 */           mailer = (Mailer)Class.forName(""org.apache.tools.ant.taskdefs.email.UUMailer"").newInstance();
/*     */ 
/*     */           
/* 493 */           autoFound = true;
/* 494 */           log(""Using UU mail"", 3);
/*     */         } catch (Throwable e) {
/* 496 */           log(""Failed to initialise UU mail"", 1);
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 501 */       if (this.encoding.equals(""plain"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/* 503 */         mailer = new PlainMailer();
/* 504 */         autoFound = true;
/* 505 */         log(""Using plain mail"", 3);
/*     */       } 
/*     */ 
/*     */       
/* 509 */       if (mailer == null) {
/* 510 */         throw new BuildException(""Failed to initialise encoding: "" + this.encoding);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 515 */       if (this.message == null) {
/* 516 */         this.message = new Message();
/* 517 */         this.message.setProject(getProject());
/*     */       } 
/*     */ 
/*     */       
/* 521 */       if (this.from == null || this.from.getAddress() == null) {
/* 522 */         throw new BuildException(""A from element is required"");
/*     */       }
/*     */ 
/*     */       
/* 526 */       if (this.toList.isEmpty() && this.ccList.isEmpty() && this.bccList.isEmpty()) {
/* 527 */         throw new BuildException(""At least one of to,cc or bcc must be supplied"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 532 */       if (this.messageMimeType != null) {
/* 533 */         if (this.message.isMimeTypeSpecified()) {
/* 534 */           throw new BuildException(""The mime type can only be specified in one location"");
/*     */         }
/*     */         
/* 537 */         this.message.setMimeType(this.messageMimeType);
/*     */       } 
/*     */ 
/*     */       
/* 541 */       if (this.charset != null) {
/* 542 */         if (this.message.getCharset() != null) {
/* 543 */           throw new BuildException(""The charset can only be specified in one location"");
/*     */         }
/*     */         
/* 546 */         this.message.setCharset(this.charset);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 551 */       Enumeration e = this.filesets.elements();
/*     */       
/* 553 */       while (e.hasMoreElements()) {
/* 554 */         FileSet fs = e.nextElement();
/*     */         
/* 556 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 557 */         String[] includedFiles = ds.getIncludedFiles();
/* 558 */         File baseDir = ds.getBasedir();
/*     */         
/* 560 */         for (int j = 0; j < includedFiles.length; j++) {
/* 561 */           File file = new File(baseDir, includedFiles[j]);
/*     */           
/* 563 */           this.files.addElement(file);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 568 */       log(""Sending email: "" + this.subject, 2);
/* 569 */       log(""From "" + this.from, 3);
/* 570 */       log(""ReplyTo "" + this.replyToList, 3);
/* 571 */       log(""To "" + this.toList, 3);
/* 572 */       log(""Cc "" + this.ccList, 3);
/* 573 */       log(""Bcc "" + this.bccList, 3);
/*     */ 
/*     */       
/* 576 */       mailer.setHost(this.host);
/* 577 */       mailer.setPort(this.port);
/* 578 */       mailer.setUser(this.user);
/* 579 */       mailer.setPassword(this.password);
/* 580 */       mailer.setSSL(this.SSL);
/* 581 */       mailer.setMessage(this.message);
/* 582 */       mailer.setFrom(this.from);
/* 583 */       mailer.setReplyToList(this.replyToList);
/* 584 */       mailer.setToList(this.toList);
/* 585 */       mailer.setCcList(this.ccList);
/* 586 */       mailer.setBccList(this.bccList);
/* 587 */       mailer.setFiles(this.files);
/* 588 */       mailer.setSubject(this.subject);
/* 589 */       mailer.setTask(this);
/* 590 */       mailer.setIncludeFileNames(this.includeFileNames);
/*     */ 
/*     */       
/* 593 */       mailer.send();
/*     */ 
/*     */       
/* 596 */       int count = this.files.size();
/*     */       
/* 598 */       log(""Sent email with "" + count + "" attachment"" + ((count == 1) ? """" : ""s""), 2);
/*     */     } catch (BuildException e) {
/*     */       
/* 601 */       log(""Failed to send email"", 1);
/* 602 */       if (this.failOnError) {
/* 603 */         throw e;
/*     */       }
/*     */     } catch (Exception e) {
/* 606 */       log(""Failed to send email"", 1);
/* 607 */       if (this.failOnError) {
/* 608 */         throw new BuildException(e);
/*     */       }
/*     */     } finally {
/* 611 */       this.message = savedMessage;
/* 612 */       this.files = savedFiles;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 622 */   public void setCharset(String charset) { this.charset = charset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 631 */   public String getCharset() { return this.charset; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\EmailTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.Mailer,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.DateUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Mailer
/*     */ {
/*  68 */   protected String host = null;
/*  69 */   protected int port = -1;
/*  70 */   protected String user = null;
/*  71 */   protected String password = null;
/*     */   protected boolean SSL = false;
/*     */   protected Message message;
/*     */   protected EmailAddress from;
/*  75 */   protected Vector replyToList = null;
/*  76 */   protected Vector toList = null;
/*  77 */   protected Vector ccList = null;
/*  78 */   protected Vector bccList = null;
/*  79 */   protected Vector files = null;
/*  80 */   protected String subject = null;
/*     */ 
/*     */   
/*     */   protected Task task;
/*     */ 
/*     */   
/*     */   protected boolean includeFileNames = false;
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setHost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setUser(String user) { this.user = user; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setPassword(String password) { this.password = password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setSSL(boolean SSL) { this.SSL = SSL; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setMessage(Message m) { this.message = m; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setFrom(EmailAddress from) { this.from = from; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setReplyToList(Vector list) { this.replyToList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setToList(Vector list) { this.toList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setCcList(Vector list) { this.ccList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setBccList(Vector list) { this.bccList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void setFiles(Vector files) { this.files = files; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   public void setSubject(String subject) { this.subject = subject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 220 */   public void setTask(Task task) { this.task = task; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setIncludeFileNames(boolean b) { this.includeFileNames = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract void send() throws BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 251 */   protected final String getDate() { return DateUtils.getDateForHeader(); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\Mailer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.Message,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Message
/*     */   extends ProjectComponent
/*     */ {
/*  74 */   private File messageSource = null;
/*  75 */   private StringBuffer buffer = new StringBuffer();
/*  76 */   private String mimeType = ""text/plain"";
/*     */   private boolean specified = false;
/*  78 */   private String charset = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Message() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public Message(String text) { addText(text); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public Message(File file) { this.messageSource = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void addText(String text) { this.buffer.append(text); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setSrc(File src) { this.messageSource = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMimeType(String mimeType) {
/* 131 */     this.mimeType = mimeType;
/* 132 */     this.specified = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public String getMimeType() { return this.mimeType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void print(PrintStream ps) throws IOException {
/* 156 */     PrintWriter out = (this.charset != null) ? new PrintWriter(new OutputStreamWriter(ps, this.charset)) : new PrintWriter(ps);
/*     */ 
/*     */     
/* 159 */     if (this.messageSource != null) {
/*     */       
/* 161 */       FileReader freader = new FileReader(this.messageSource);
/*     */       
/*     */       try {
/* 164 */         BufferedReader in = new BufferedReader(freader);
/* 165 */         String line = null;
/* 166 */         while ((line = in.readLine()) != null) {
/* 167 */           out.println(getProject().replaceProperties(line));
/*     */         }
/*     */       } finally {
/* 170 */         freader.close();
/*     */       } 
/*     */     } else {
/* 173 */       out.println(getProject().replaceProperties(this.buffer.substring(0)));
/*     */     } 
/* 175 */     out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public boolean isMimeTypeSpecified() { return this.specified; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setCharset(String charset) { this.charset = charset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public String getCharset() { return this.charset; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\Message.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.PlainMailer,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.mail.MailMessage;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class PlainMailer
/*     */   extends Mailer
/*     */ {
/*     */   public void send() {
/*     */     try {
/*  79 */       MailMessage mailMessage = new MailMessage(this.host, this.port);
/*     */       
/*  81 */       mailMessage.from(this.from.toString());
/*     */ 
/*     */ 
/*     */       
/*  85 */       Enumeration e = this.replyToList.elements();
/*  86 */       while (e.hasMoreElements()) {
/*  87 */         mailMessage.replyto(e.nextElement().toString());
/*     */       }
/*     */       
/*  90 */       e = this.toList.elements();
/*  91 */       while (e.hasMoreElements()) {
/*  92 */         mailMessage.to(e.nextElement().toString());
/*     */       }
/*     */       
/*  95 */       e = this.ccList.elements();
/*  96 */       while (e.hasMoreElements()) {
/*  97 */         mailMessage.cc(e.nextElement().toString());
/*     */       }
/*     */       
/* 100 */       e = this.bccList.elements();
/* 101 */       while (e.hasMoreElements()) {
/* 102 */         mailMessage.bcc(e.nextElement().toString());
/*     */       }
/*     */       
/* 105 */       if (this.subject != null) {
/* 106 */         mailMessage.setSubject(this.subject);
/*     */       }
/*     */       
/* 109 */       mailMessage.setHeader(""Date"", getDate());
/* 110 */       if (this.message.getCharset() != null) {
/* 111 */         mailMessage.setHeader(""Content-Type"", this.message.getMimeType() + ""; charset=\"""" + this.message.getCharset() + ""\"""");
/*     */       }
/*     */       else {
/*     */         
/* 115 */         mailMessage.setHeader(""Content-Type"", this.message.getMimeType());
/*     */       } 
/* 117 */       PrintStream out = mailMessage.getPrintStream();
/* 118 */       this.message.print(out);
/*     */       
/* 120 */       e = this.files.elements();
/* 121 */       while (e.hasMoreElements()) {
/* 122 */         File file = (File)e.nextElement();
/*     */         
/* 124 */         attach(file, out);
/*     */       } 
/*     */       
/* 127 */       mailMessage.sendAndClose();
/*     */     } catch (IOException ioe) {
/* 129 */       throw new BuildException(""IO error sending mail"", ioe);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void attach(File file, PrintStream out) throws IOException {
/* 143 */     if (!file.exists() || !file.canRead()) {
/* 144 */       throw new BuildException(""File \"""" + file.getName() + ""\"" does not exist or is not "" + ""readable."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 149 */     if (this.includeFileNames) {
/* 150 */       out.println();
/*     */       
/* 152 */       String filename = file.getName();
/* 153 */       int filenamelength = filename.length();
/*     */       
/* 155 */       out.println(filename);
/* 156 */       for (int star = 0; star < filenamelength; star++) {
/* 157 */         out.print('=');
/*     */       }
/* 159 */       out.println();
/*     */     } 
/*     */ 
/*     */     
/* 163 */     int maxBuf = 1024;
/* 164 */     byte[] buf = new byte[1024];
/* 165 */     FileInputStream finstr = new FileInputStream(file);
/*     */     
/*     */     try {
/* 168 */       BufferedInputStream in = new BufferedInputStream(finstr, buf.length);
/*     */       int length;
/* 170 */       while ((length = in.read(buf)) != -1) {
/* 171 */         out.write(buf, 0, length);
/*     */       }
/*     */     } finally {
/* 174 */       finstr.close();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\PlainMailer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.UUMailer,"/*    */ package org.apache.tools.ant.taskdefs.email;
/*    */ 
/*    */ import java.io.BufferedInputStream;
/*    */ import java.io.File;
/*    */ import java.io.FileInputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.PrintStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import sun.misc.UUEncoder;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class UUMailer
/*    */   extends PlainMailer
/*    */ {
/*    */   protected void attach(File file, PrintStream out) throws IOException {
/* 73 */     if (!file.exists() || !file.canRead()) {
/* 74 */       throw new BuildException(""File \"""" + file.getName() + ""\"" does not exist or is not "" + ""readable."");
/*    */     }
/*    */ 
/*    */ 
/*    */     
/* 79 */     FileInputStream finstr = new FileInputStream(file);
/*    */     
/*    */     try {
/* 82 */       BufferedInputStream in = new BufferedInputStream(finstr);
/* 83 */       UUEncoder encoder = new UUEncoder(file.getName());
/*    */       
/* 85 */       encoder.encode(in, out);
/*    */     } finally {
/*    */       
/* 88 */       finstr.close();
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\email\UUMailer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Random;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.Rmic;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultRmicAdapter
/*     */   implements RmicAdapter
/*     */ {
/*     */   private Rmic attributes;
/*     */   private FileNameMapper mapper;
/*  83 */   private static final Random rand = new Random();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRmic(Rmic attributes) {
/*  89 */     this.attributes = attributes;
/*  90 */     this.mapper = new RmicFileNameMapper(this);
/*     */   }
/*     */ 
/*     */   
/*  94 */   public Rmic getRmic() { return this.attributes; }
/*     */ 
/*     */ 
/*     */   
/*  98 */   protected String getStubClassSuffix() { return ""_Stub""; }
/*     */ 
/*     */ 
/*     */   
/* 102 */   protected String getSkelClassSuffix() { return ""_Skel""; }
/*     */ 
/*     */ 
/*     */   
/* 106 */   protected String getTieClassSuffix() { return ""_Tie""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public FileNameMapper getMapper() { return this.mapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public Path getClasspath() { return getCompileClasspath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 140 */     Path classpath = new Path(this.attributes.getProject());
/*     */ 
/*     */     
/* 143 */     classpath.setLocation(this.attributes.getBase());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 148 */     Path cp = this.attributes.getClasspath();
/* 149 */     if (cp == null) {
/* 150 */       cp = new Path(this.attributes.getProject());
/*     */     }
/* 152 */     if (this.attributes.getIncludeantruntime()) {
/* 153 */       classpath.addExisting(cp.concatSystemClasspath(""last""));
/*     */     } else {
/* 155 */       classpath.addExisting(cp.concatSystemClasspath(""ignore""));
/*     */     } 
/*     */     
/* 158 */     if (this.attributes.getIncludejavaruntime()) {
/* 159 */       classpath.addJavaRuntime();
/*     */     }
/* 161 */     return classpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   protected Commandline setupRmicCommand() { return setupRmicCommand(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupRmicCommand(String[] options) {
/* 178 */     Commandline cmd = new Commandline();
/*     */     
/* 180 */     if (options != null) {
/* 181 */       for (int i = 0; i < options.length; i++) {
/* 182 */         cmd.createArgument().setValue(options[i]);
/*     */       }
/*     */     }
/*     */     
/* 186 */     Path classpath = getCompileClasspath();
/*     */     
/* 188 */     cmd.createArgument().setValue(""-d"");
/* 189 */     cmd.createArgument().setFile(this.attributes.getBase());
/*     */     
/* 191 */     if (this.attributes.getExtdirs() != null) {
/* 192 */       if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */ 
/*     */ 
/*     */         
/* 196 */         classpath.addExtdirs(this.attributes.getExtdirs());
/*     */       } else {
/* 198 */         cmd.createArgument().setValue(""-extdirs"");
/* 199 */         cmd.createArgument().setPath(this.attributes.getExtdirs());
/*     */       } 
/*     */     }
/*     */     
/* 203 */     cmd.createArgument().setValue(""-classpath"");
/* 204 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 206 */     String stubVersion = this.attributes.getStubVersion();
/* 207 */     if (null != stubVersion) {
/* 208 */       if (""1.1"".equals(stubVersion)) {
/* 209 */         cmd.createArgument().setValue(""-v1.1"");
/* 210 */       } else if (""1.2"".equals(stubVersion)) {
/* 211 */         cmd.createArgument().setValue(""-v1.2"");
/*     */       } else {
/* 213 */         cmd.createArgument().setValue(""-vcompat"");
/*     */       } 
/*     */     }
/*     */     
/* 217 */     if (null != this.attributes.getSourceBase()) {
/* 218 */       cmd.createArgument().setValue(""-keepgenerated"");
/*     */     }
/*     */     
/* 221 */     if (this.attributes.getIiop()) {
/* 222 */       this.attributes.log(""IIOP has been turned on."", 2);
/* 223 */       cmd.createArgument().setValue(""-iiop"");
/* 224 */       if (this.attributes.getIiopopts() != null) {
/* 225 */         this.attributes.log(""IIOP Options: "" + this.attributes.getIiopopts(), 2);
/*     */         
/* 227 */         cmd.createArgument().setValue(this.attributes.getIiopopts());
/*     */       } 
/*     */     } 
/*     */     
/* 231 */     if (this.attributes.getIdl()) {
/* 232 */       cmd.createArgument().setValue(""-idl"");
/* 233 */       this.attributes.log(""IDL has been turned on."", 2);
/* 234 */       if (this.attributes.getIdlopts() != null) {
/* 235 */         cmd.createArgument().setValue(this.attributes.getIdlopts());
/* 236 */         this.attributes.log(""IDL Options: "" + this.attributes.getIdlopts(), 2);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 241 */     if (this.attributes.getDebug()) {
/* 242 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 245 */     cmd.addArguments(this.attributes.getCurrentCompilerArgs());
/*     */     
/* 247 */     logAndAddFilesToCompile(cmd);
/* 248 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline cmd) {
/* 256 */     Vector compileList = this.attributes.getCompileList();
/*     */     
/* 258 */     this.attributes.log(""Compilation "" + cmd.describeArguments(), 3);
/*     */ 
/*     */     
/* 261 */     StringBuffer niceSourceList = new StringBuffer(""File"");
/* 262 */     if (compileList.size() != 1) {
/* 263 */       niceSourceList.append(""s"");
/*     */     }
/* 265 */     niceSourceList.append("" to be compiled:"");
/*     */     
/* 267 */     for (int i = 0; i < compileList.size(); i++) {
/* 268 */       String arg = compileList.elementAt(i);
/* 269 */       cmd.createArgument().setValue(arg);
/* 270 */       niceSourceList.append(""    "" + arg);
/*     */     } 
/*     */     
/* 273 */     this.attributes.log(niceSourceList.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private class RmicFileNameMapper
/*     */     implements FileNameMapper
/*     */   {
/*     */     private final DefaultRmicAdapter this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 293 */     RmicFileNameMapper(DefaultRmicAdapter this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setFrom(String s) {}
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setTo(String s) {}
/*     */ 
/*     */ 
/*     */     
/*     */     public String[] mapFileName(String name) {
/* 308 */       if (name == null || !name.endsWith("".class"") || name.endsWith(this.this$0.getStubClassSuffix() + "".class"") || name.endsWith(this.this$0.getSkelClassSuffix() + "".class"") || name.endsWith(this.this$0.getTieClassSuffix() + "".class""))
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 314 */         return null;
/*     */       }
/*     */ 
/*     */       
/* 318 */       String base = name.substring(0, name.length() - 6);
/*     */       
/* 320 */       String classname = base.replace(File.separatorChar, '.');
/* 321 */       if (this.this$0.attributes.getVerify() && !this.this$0.attributes.isValidRmiRemote(classname))
/*     */       {
/* 323 */         return null;
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 334 */       String[] target = { name + "".tmp."" + rand.nextLong() };
/*     */       
/* 336 */       if (!this.this$0.attributes.getIiop() && !this.this$0.attributes.getIdl()) {
/*     */         
/* 338 */         if (""1.2"".equals(this.this$0.attributes.getStubVersion())) {
/* 339 */           target = new String[] { base + this.this$0.getStubClassSuffix() + "".class"" };
/*     */         }
/*     */         else {
/*     */           
/* 343 */           target = new String[] { base + this.this$0.getStubClassSuffix() + "".class"", base + this.this$0.getSkelClassSuffix() + "".class"" };
/*     */         
/*     */         }
/*     */       
/*     */       }
/* 348 */       else if (!this.this$0.attributes.getIdl()) {
/* 349 */         int lastSlash = base.lastIndexOf(File.separatorChar);
/*     */         
/* 351 */         String dirname = """";
/*     */ 
/*     */ 
/*     */         
/* 355 */         int index = -1;
/* 356 */         if (lastSlash == -1) {
/*     */           
/* 358 */           index = 0;
/*     */         } else {
/* 360 */           index = lastSlash + 1;
/* 361 */           dirname = base.substring(0, index);
/*     */         } 
/*     */         
/* 364 */         String filename = base.substring(index);
/*     */         
/*     */         try {
/* 367 */           Class c = this.this$0.attributes.getLoader().loadClass(classname);
/*     */           
/* 369 */           if (c.isInterface())
/*     */           {
/* 371 */             target = new String[] { dirname + ""_"" + filename + this.this$0.getStubClassSuffix() + "".class"" };
/*     */ 
/*     */ 
/*     */           
/*     */           }
/*     */           else
/*     */           {
/*     */ 
/*     */             
/* 380 */             Class interf = this.this$0.attributes.getRemoteInterface(c);
/* 381 */             String iName = interf.getName();
/* 382 */             String iDir = """";
/* 383 */             int iIndex = -1;
/* 384 */             int lastDot = iName.lastIndexOf(""."");
/* 385 */             if (lastDot == -1) {
/*     */               
/* 387 */               iIndex = 0;
/*     */             } else {
/* 389 */               iIndex = lastDot + 1;
/* 390 */               iDir = iName.substring(0, iIndex);
/* 391 */               iDir = iDir.replace('.', File.separatorChar);
/*     */             } 
/*     */             
/* 394 */             target = new String[] { dirname + ""_"" + filename + this.this$0.getTieClassSuffix() + "".class"", iDir + ""_"" + iName.substring(iIndex) + this.this$0.getStubClassSuffix() + "".class"" };
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/*     */         catch (ClassNotFoundException e) {
/*     */           
/* 402 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". It could not be found."", 1);
/*     */         }
/*     */         catch (NoClassDefFoundError e) {
/*     */           
/* 406 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". It is not defined."", 1);
/*     */         } catch (Throwable t) {
/*     */           
/* 409 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". Loading caused Exception: "" + t.getMessage(), 1);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 414 */       return target;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\DefaultRmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.KaffeRmic,"/*    */ package org.apache.tools.ant.taskdefs.rmic;
/*    */ 
/*    */ import java.lang.reflect.Constructor;
/*    */ import java.lang.reflect.Method;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KaffeRmic
/*    */   extends DefaultRmicAdapter
/*    */ {
/*    */   static Class array$Ljava$lang$String;
/*    */   
/*    */   public boolean execute() throws BuildException {
/* 72 */     getRmic().log(""Using Kaffe rmic"", 3);
/* 73 */     Commandline cmd = setupRmicCommand();
/*    */ 
/*    */     
/*    */     try {
/* 77 */       Class c = Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 78 */       Constructor cons = c.getConstructor(new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/* 79 */       Object rmic = cons.newInstance(new Object[] { cmd.getArguments() });
/* 80 */       Method doRmic = c.getMethod(""run"", null);
/* 81 */       Boolean ok = (Boolean)doRmic.invoke(rmic, null);
/*    */       
/* 83 */       return ok.booleanValue();
/*    */     } catch (ClassNotFoundException ex) {
/* 85 */       throw new BuildException(""Cannot use Kaffe rmic, as it is not available.  A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*    */     
/*    */     }
/*    */     catch (Exception ex) {
/*    */ 
/*    */       
/* 91 */       if (ex instanceof BuildException) {
/* 92 */         throw (BuildException)ex;
/*    */       }
/* 94 */       throw new BuildException(""Error starting Kaffe rmic: "", ex, getRmic().getLocation());
/*    */     } 
/*    */   }
/*    */   
/*    */   static Class class$(String x0) { try {
/*    */       return Class.forName(x0);
/*    */     } catch (ClassNotFoundException x1) {
/*    */       throw new NoClassDefFoundError(x1.getMessage());
/*    */     }  }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\KaffeRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapter,"package org.apache.tools.ant.taskdefs.rmic;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Rmic;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileNameMapper;
public interface RmicAdapter {
  void setRmic(Rmic paramRmic);
  boolean execute() throws BuildException;
  FileNameMapper getMapper();
  Path getClasspath();
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RmicAdapterFactory
/*     */ {
/*     */   public static RmicAdapter getRmic(String rmicType, Task task) throws BuildException {
/*  93 */     if (rmicType.equalsIgnoreCase(""sun""))
/*  94 */       return new SunRmic(); 
/*  95 */     if (rmicType.equalsIgnoreCase(""kaffe""))
/*  96 */       return new KaffeRmic(); 
/*  97 */     if (rmicType.equalsIgnoreCase(""weblogic"")) {
/*  98 */       return new WLRmic();
/*     */     }
/* 100 */     return resolveClassName(rmicType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static RmicAdapter resolveClassName(String className) throws BuildException {
/*     */     try {
/* 114 */       Class c = Class.forName(className);
/* 115 */       Object o = c.newInstance();
/* 116 */       return (RmicAdapter)o;
/*     */     } catch (ClassNotFoundException cnfe) {
/* 118 */       throw new BuildException(className + "" can't be found."", cnfe);
/*     */     } catch (ClassCastException cce) {
/* 120 */       throw new BuildException(className + "" isn't the classname of "" + ""a rmic adapter."", cce);
/*     */     }
/*     */     catch (Throwable t) {
/*     */       
/* 124 */       throw new BuildException(className + "" caused an interesting "" + ""exception."", t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.SunRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SunRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  75 */     getRmic().log(""Using SUN rmic compiler"", 3);
/*  76 */     Commandline cmd = setupRmicCommand();
/*     */ 
/*     */ 
/*     */     
/*  80 */     LogOutputStream logstr = new LogOutputStream((Task)getRmic(), 1);
/*     */ 
/*     */     
/*     */     try {
/*  84 */       Class c = Class.forName(""sun.rmi.rmic.Main"");
/*  85 */       Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });
/*     */       
/*  87 */       Object rmic = cons.newInstance(new Object[] { logstr, ""rmic"" });
/*     */       
/*  89 */       Method doRmic = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  91 */       Boolean ok = (Boolean)doRmic.invoke(rmic, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/*  94 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/*  96 */       throw new BuildException(""Cannot use SUN rmic, as it is not available.  A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/* 102 */       if (ex instanceof BuildException) {
/* 103 */         throw (BuildException)ex;
/*     */       }
/* 105 */       throw new BuildException(""Error starting SUN rmic: "", ex, getRmic().getLocation());
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/* 110 */         logstr.close();
/*     */       } catch (IOException e) {
/* 112 */         throw new BuildException(e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\SunRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.WLRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WLRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  72 */     getRmic().log(""Using WebLogic rmic"", 3);
/*  73 */     Commandline cmd = setupRmicCommand(new String[] { ""-noexit"" });
/*     */     
/*  75 */     AntClassLoader loader = null;
/*     */     
/*     */     try {
/*  78 */       Class c = null;
/*  79 */       if (getRmic().getClasspath() == null) {
/*  80 */         c = Class.forName(""weblogic.rmic"");
/*     */       } else {
/*  82 */         loader = getRmic().getProject().createClassLoader(getRmic().getClasspath());
/*     */         
/*  84 */         c = Class.forName(""weblogic.rmic"", true, (ClassLoader)loader);
/*     */       } 
/*  86 */       Method doRmic = c.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  88 */       doRmic.invoke(null, new Object[] { cmd.getArguments() });
/*  89 */       return true;
/*     */     } catch (ClassNotFoundException ex) {
/*  91 */       throw new BuildException(""Cannot use WebLogic rmic, as it is not available.  A common solution is to set the environment variable CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */       
/*  96 */       if (ex instanceof BuildException) {
/*  97 */         throw (BuildException)ex;
/*     */       }
/*  99 */       throw new BuildException(""Error starting WebLogic rmic: "", ex, getRmic().getLocation());
/*     */     }
/*     */     finally {
/*     */       
/* 103 */       if (loader != null) {
/* 104 */         loader.cleanup();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public String getStubClassSuffix() { return ""_WLStub""; }
/*     */   static Class class$(String x0) { try {
/*     */       return Class.forName(x0);
/*     */     } catch (ClassNotFoundException x1) {
/*     */       throw new NoClassDefFoundError(x1.getMessage());
/*     */     }  }
/*     */   
/* 120 */   public String getSkelClassSuffix() { return ""_WLSkel""; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\taskdefs\rmic\WLRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.AbstractFileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.selectors.AndSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsRegexpSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsSelector;
/*     */ import org.apache.tools.ant.types.selectors.DateSelector;
/*     */ import org.apache.tools.ant.types.selectors.DependSelector;
/*     */ import org.apache.tools.ant.types.selectors.DepthSelector;
/*     */ import org.apache.tools.ant.types.selectors.DifferentSelector;
/*     */ import org.apache.tools.ant.types.selectors.ExtendSelector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.FilenameSelector;
/*     */ import org.apache.tools.ant.types.selectors.MajoritySelector;
/*     */ import org.apache.tools.ant.types.selectors.NoneSelector;
/*     */ import org.apache.tools.ant.types.selectors.NotSelector;
/*     */ import org.apache.tools.ant.types.selectors.OrSelector;
/*     */ import org.apache.tools.ant.types.selectors.PresentSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectorContainer;
/*     */ import org.apache.tools.ant.types.selectors.SelectorScanner;
/*     */ import org.apache.tools.ant.types.selectors.SizeSelector;
/*     */ import org.apache.tools.ant.types.selectors.TypeSelector;
/*     */ import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractFileSet
/*     */   extends DataType
/*     */   implements Cloneable, SelectorContainer
/*     */ {
/* 105 */   private PatternSet defaultPatterns = new PatternSet();
/* 106 */   private Vector additionalPatterns = new Vector();
/* 107 */   private Vector selectors = new Vector();
/*     */   
/*     */   private File dir;
/*     */   
/*     */   private boolean useDefaultExcludes = true;
/*     */   
/*     */   private boolean isCaseSensitive = true;
/*     */   private boolean followSymlinks = true;
/*     */   
/*     */   public AbstractFileSet() {}
/*     */   
/*     */   protected AbstractFileSet(AbstractFileSet fileset) {
/* 119 */     this.dir = fileset.dir;
/* 120 */     this.defaultPatterns = fileset.defaultPatterns;
/* 121 */     this.additionalPatterns = fileset.additionalPatterns;
/* 122 */     this.selectors = fileset.selectors;
/* 123 */     this.useDefaultExcludes = fileset.useDefaultExcludes;
/* 124 */     this.isCaseSensitive = fileset.isCaseSensitive;
/* 125 */     this.followSymlinks = fileset.followSymlinks;
/* 126 */     setProject(fileset.getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 136 */     if (this.dir != null || this.defaultPatterns.hasPatterns(getProject())) {
/* 137 */       throw tooManyAttributes();
/*     */     }
/* 139 */     if (!this.additionalPatterns.isEmpty()) {
/* 140 */       throw noChildrenAllowed();
/*     */     }
/* 142 */     if (!this.selectors.isEmpty()) {
/* 143 */       throw noChildrenAllowed();
/*     */     }
/* 145 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 152 */     if (isReference()) {
/* 153 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 156 */     this.dir = dir;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File getDir(Project p) {
/* 163 */     if (isReference()) {
/* 164 */       return getRef(p).getDir(p);
/*     */     }
/* 166 */     return this.dir;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 173 */     if (isReference()) {
/* 174 */       throw noChildrenAllowed();
/*     */     }
/* 176 */     PatternSet patterns = new PatternSet();
/* 177 */     this.additionalPatterns.addElement(patterns);
/* 178 */     return patterns;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 185 */     if (isReference()) {
/* 186 */       throw noChildrenAllowed();
/*     */     }
/* 188 */     return this.defaultPatterns.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createIncludesFile() {
/* 195 */     if (isReference()) {
/* 196 */       throw noChildrenAllowed();
/*     */     }
/* 198 */     return this.defaultPatterns.createIncludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 205 */     if (isReference()) {
/* 206 */       throw noChildrenAllowed();
/*     */     }
/* 208 */     return this.defaultPatterns.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExcludesFile() {
/* 215 */     if (isReference()) {
/* 216 */       throw noChildrenAllowed();
/*     */     }
/* 218 */     return this.defaultPatterns.createExcludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFile(File file) {
/* 225 */     if (isReference()) {
/* 226 */       throw tooManyAttributes();
/*     */     }
/* 228 */     setDir(file.getParentFile());
/*     */     
/* 230 */     PatternSet.NameEntry include = createInclude();
/* 231 */     include.setName(file.getName());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 243 */     if (isReference()) {
/* 244 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 247 */     this.defaultPatterns.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 259 */     if (isReference()) {
/* 260 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 263 */     this.defaultPatterns.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File incl) throws BuildException {
/* 272 */     if (isReference()) {
/* 273 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 276 */     this.defaultPatterns.setIncludesfile(incl);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excl) throws BuildException {
/* 285 */     if (isReference()) {
/* 286 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 289 */     this.defaultPatterns.setExcludesfile(excl);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 300 */     if (isReference()) {
/* 301 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 304 */     this.useDefaultExcludes = useDefaultExcludes;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCaseSensitive(boolean isCaseSensitive) {
/* 314 */     if (isReference()) {
/* 315 */       throw tooManyAttributes();
/*     */     }
/* 317 */     this.isCaseSensitive = isCaseSensitive;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFollowSymlinks(boolean followSymlinks) {
/* 326 */     if (isReference()) {
/* 327 */       throw tooManyAttributes();
/*     */     }
/* 329 */     this.followSymlinks = followSymlinks;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isFollowSymlinks() {
/* 340 */     if (isReference()) {
/* 341 */       return getRef(getProject()).isFollowSymlinks();
/*     */     }
/* 343 */     return this.followSymlinks;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getDataTypeName() {
/* 352 */     Project project = getProject();
/* 353 */     if (project != null) {
/* 354 */       Hashtable typedefs = project.getDataTypeDefinitions();
/* 355 */       for (Enumeration e = typedefs.keys(); e.hasMoreElements(); ) {
/* 356 */         String typeName = e.nextElement();
/* 357 */         Class typeClass = (Class)typedefs.get(typeName);
/* 358 */         if (typeClass == getClass()) {
/* 359 */           return typeName;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 364 */     String classname = getClass().getName();
/*     */     
/* 366 */     int dotIndex = classname.lastIndexOf(""."");
/* 367 */     if (dotIndex == -1) {
/* 368 */       return classname;
/*     */     }
/* 370 */     return classname.substring(dotIndex + 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project p) {
/* 377 */     if (isReference()) {
/* 378 */       return getRef(p).getDirectoryScanner(p);
/*     */     }
/*     */     
/* 381 */     if (this.dir == null) {
/* 382 */       throw new BuildException(""No directory specified for "" + getDataTypeName() + ""."");
/*     */     }
/*     */ 
/*     */     
/* 386 */     if (!this.dir.exists()) {
/* 387 */       throw new BuildException(this.dir.getAbsolutePath() + "" not found."");
/*     */     }
/* 389 */     if (!this.dir.isDirectory()) {
/* 390 */       throw new BuildException(this.dir.getAbsolutePath() + "" is not a directory."");
/*     */     }
/*     */ 
/*     */     
/* 394 */     DirectoryScanner ds = new DirectoryScanner();
/* 395 */     setupDirectoryScanner((FileScanner)ds, p);
/* 396 */     ds.setFollowSymlinks(this.followSymlinks);
/* 397 */     ds.scan();
/* 398 */     return ds;
/*     */   }
/*     */   
/*     */   public void setupDirectoryScanner(FileScanner ds, Project p) {
/* 402 */     if (isReference()) {
/* 403 */       getRef(p).setupDirectoryScanner(ds, p);
/*     */       
/*     */       return;
/*     */     } 
/* 407 */     if (ds == null) {
/* 408 */       throw new IllegalArgumentException(""ds cannot be null"");
/*     */     }
/*     */     
/* 411 */     ds.setBasedir(this.dir);
/*     */     
/* 413 */     int count = this.additionalPatterns.size();
/* 414 */     for (int i = 0; i < count; i++) {
/* 415 */       Object o = this.additionalPatterns.elementAt(i);
/* 416 */       this.defaultPatterns.append((PatternSet)o, p);
/*     */     } 
/*     */     
/* 419 */     p.log(getDataTypeName() + "": Setup scanner in dir "" + this.dir + "" with "" + this.defaultPatterns, 4);
/*     */ 
/*     */     
/* 422 */     ds.setIncludes(this.defaultPatterns.getIncludePatterns(p));
/* 423 */     ds.setExcludes(this.defaultPatterns.getExcludePatterns(p));
/* 424 */     if (ds instanceof SelectorScanner) {
/* 425 */       SelectorScanner ss = (SelectorScanner)ds;
/* 426 */       ss.setSelectors(getSelectors(p));
/*     */     } 
/*     */     
/* 429 */     if (this.useDefaultExcludes) {
/* 430 */       ds.addDefaultExcludes();
/*     */     }
/* 432 */     ds.setCaseSensitive(this.isCaseSensitive);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected AbstractFileSet getRef(Project p) {
/* 440 */     if (!isChecked()) {
/* 441 */       Stack stk = new Stack();
/* 442 */       stk.push(this);
/* 443 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 446 */     Object o = getRefid().getReferencedObject(p);
/* 447 */     if (!getClass().isAssignableFrom(o.getClass())) {
/* 448 */       String msg = getRefid().getRefId() + "" doesn't denote a "" + getDataTypeName();
/*     */       
/* 450 */       throw new BuildException(msg);
/*     */     } 
/* 452 */     return (AbstractFileSet)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasSelectors() {
/* 464 */     if (isReference() && getProject() != null) {
/* 465 */       return getRef(getProject()).hasSelectors();
/*     */     }
/* 467 */     return !this.selectors.isEmpty();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasPatterns() {
/* 476 */     if (isReference() && getProject() != null) {
/* 477 */       return getRef(getProject()).hasPatterns();
/*     */     }
/*     */     
/* 480 */     if (this.defaultPatterns.hasPatterns(getProject())) {
/* 481 */       return true;
/*     */     }
/*     */     
/* 484 */     Enumeration e = this.additionalPatterns.elements();
/* 485 */     while (e.hasMoreElements()) {
/* 486 */       PatternSet ps = e.nextElement();
/* 487 */       if (ps.hasPatterns(getProject())) {
/* 488 */         return true;
/*     */       }
/*     */     } 
/*     */     
/* 492 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int selectorCount() {
/* 501 */     if (isReference() && getProject() != null) {
/* 502 */       return getRef(getProject()).selectorCount();
/*     */     }
/* 504 */     return this.selectors.size();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 513 */     if (isReference()) {
/* 514 */       return getRef(p).getSelectors(p);
/*     */     }
/* 516 */     FileSelector[] result = new FileSelector[this.selectors.size()];
/* 517 */     this.selectors.copyInto((Object[])result);
/* 518 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration selectorElements() {
/* 528 */     if (isReference() && getProject() != null) {
/* 529 */       return getRef(getProject()).selectorElements();
/*     */     }
/* 531 */     return this.selectors.elements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void appendSelector(FileSelector selector) {
/* 540 */     if (isReference()) {
/* 541 */       throw noChildrenAllowed();
/*     */     }
/* 543 */     this.selectors.addElement(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 553 */   public void addSelector(SelectSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 561 */   public void addAnd(AndSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 569 */   public void addOr(OrSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   public void addNot(NotSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 585 */   public void addNone(NoneSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 593 */   public void addMajority(MajoritySelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 601 */   public void addDate(DateSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 609 */   public void addSize(SizeSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 617 */   public void addDifferent(DifferentSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 625 */   public void addFilename(FilenameSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 633 */   public void addType(TypeSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 641 */   public void addCustom(ExtendSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 649 */   public void addContains(ContainsSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 657 */   public void addPresent(PresentSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 665 */   public void addDepth(DepthSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 673 */   public void addDepend(DependSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 681 */   public void addContainsRegexp(ContainsRegexpSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 690 */   public void addModified(ModifiedSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 699 */   public void add(FileSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 708 */     DirectoryScanner ds = getDirectoryScanner(getProject());
/* 709 */     String[] files = ds.getIncludedFiles();
/* 710 */     StringBuffer sb = new StringBuffer();
/*     */     
/* 712 */     for (int i = 0; i < files.length; i++) {
/* 713 */       if (i > 0) {
/* 714 */         sb.append(';');
/*     */       }
/* 716 */       sb.append(files[i]);
/*     */     } 
/* 718 */     return sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 729 */     if (isReference()) {
/* 730 */       return getRef(getProject()).clone();
/*     */     }
/*     */     try {
/* 733 */       AbstractFileSet fs = (AbstractFileSet)super.clone();
/* 734 */       fs.defaultPatterns = (PatternSet)this.defaultPatterns.clone();
/* 735 */       fs.additionalPatterns = new Vector(this.additionalPatterns.size());
/* 736 */       Enumeration e = this.additionalPatterns.elements();
/* 737 */       while (e.hasMoreElements()) {
/* 738 */         fs.additionalPatterns.addElement(((PatternSet)e.nextElement()).clone());
/*     */       }
/*     */       
/* 741 */       fs.selectors = (Vector)fs.selectors.clone();
/* 742 */       return fs;
/*     */     } catch (CloneNotSupportedException e) {
/* 744 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\AbstractFileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.AntFilterReader,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class AntFilterReader
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   private String className;
/*  71 */   private final Vector parameters = new Vector();
/*     */   
/*     */   private Path classpath;
/*     */ 
/*     */   
/*  76 */   public final void setClassName(String className) { this.className = className; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public final String getClassName() { return this.className; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public final void addParam(Parameter param) { this.parameters.addElement(param); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setClasspath(Path classpath) {
/*  91 */     if (isReference()) {
/*  92 */       throw tooManyAttributes();
/*     */     }
/*  94 */     if (this.classpath == null) {
/*  95 */       this.classpath = classpath;
/*     */     } else {
/*  97 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Path createClasspath() {
/* 105 */     if (isReference()) {
/* 106 */       throw noChildrenAllowed();
/*     */     }
/* 108 */     if (this.classpath == null) {
/* 109 */       this.classpath = new Path(getProject());
/*     */     }
/* 111 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathRef(Reference r) {
/* 126 */     if (isReference()) {
/* 127 */       throw tooManyAttributes();
/*     */     }
/* 129 */     createClasspath().setRefid(r);
/*     */   }
/*     */   
/*     */   public final Parameter[] getParams() {
/* 133 */     Parameter[] params = new Parameter[this.parameters.size()];
/* 134 */     this.parameters.copyInto((Object[])params);
/* 135 */     return params;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 149 */     if (!this.parameters.isEmpty() || this.className != null || this.classpath != null)
/*     */     {
/* 151 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 154 */     Object o = r.getReferencedObject(getProject());
/* 155 */     if (o instanceof AntFilterReader) {
/* 156 */       AntFilterReader afr = (AntFilterReader)o;
/* 157 */       setClassName(afr.getClassName());
/* 158 */       setClasspath(afr.getClasspath());
/* 159 */       Parameter[] p = afr.getParams();
/* 160 */       if (p != null) {
/* 161 */         for (int i = 0; i < p.length; i++) {
/* 162 */           addParam(p[i]);
/*     */         }
/*     */       }
/*     */     } else {
/* 166 */       String msg = r.getRefId() + "" doesn't refer to a FilterReader"";
/* 167 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/* 170 */     super.setRefid(r);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\AntFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Assertions,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Assertions
/*     */   extends DataType
/*     */ {
/*     */   private Boolean enableSystemAssertions;
/* 115 */   private ArrayList assertionList = new ArrayList();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addEnable(EnabledAssertion assertion) {
/* 123 */     checkChildrenAllowed();
/* 124 */     this.assertionList.add(assertion);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDisable(DisabledAssertion assertion) {
/* 132 */     checkChildrenAllowed();
/* 133 */     this.assertionList.add(assertion);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEnableSystemAssertions(Boolean enableSystemAssertions) {
/* 141 */     checkAttributesAllowed();
/* 142 */     this.enableSystemAssertions = enableSystemAssertions;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference ref) {
/* 154 */     if (this.assertionList.size() > 0 || this.enableSystemAssertions != null) {
/* 155 */       throw tooManyAttributes();
/*     */     }
/* 157 */     super.setRefid(ref);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Assertions getFinalReference() {
/* 165 */     if (getRefid() == null) {
/* 166 */       return this;
/*     */     }
/* 168 */     Object o = getRefid().getReferencedObject(getProject());
/* 169 */     if (!(o instanceof Assertions)) {
/* 170 */       throw new BuildException(""reference is of wrong type"");
/*     */     }
/* 172 */     return (Assertions)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int size() {
/* 181 */     Assertions clause = getFinalReference();
/* 182 */     return clause.getFinalSize();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   private int getFinalSize() { return this.assertionList.size() + ((this.enableSystemAssertions != null) ? 1 : 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void applyAssertions(List commandList) {
/* 200 */     getProject().log(""Applying assertions"", 4);
/* 201 */     Assertions clause = getFinalReference();
/*     */     
/* 203 */     if (Boolean.TRUE.equals(clause.enableSystemAssertions)) {
/* 204 */       getProject().log(""Enabling system assertions"", 4);
/* 205 */       commandList.add(""-enablesystemassertions"");
/* 206 */     } else if (Boolean.FALSE.equals(clause.enableSystemAssertions)) {
/* 207 */       getProject().log(""disabling system assertions"", 4);
/* 208 */       commandList.add(""-disablesystemassertions"");
/*     */     } 
/*     */ 
/*     */     
/* 212 */     Iterator it = clause.assertionList.iterator();
/* 213 */     while (it.hasNext()) {
/* 214 */       BaseAssertion assertion = it.next();
/* 215 */       String arg = assertion.toCommand();
/* 216 */       getProject().log(""adding assertion "" + arg, 4);
/* 217 */       commandList.add(arg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void applyAssertions(CommandlineJava command) {
/* 226 */     Assertions clause = getFinalReference();
/*     */     
/* 228 */     if (Boolean.TRUE.equals(clause.enableSystemAssertions)) {
/* 229 */       addVmArgument(command, ""-enablesystemassertions"");
/* 230 */     } else if (Boolean.FALSE.equals(clause.enableSystemAssertions)) {
/* 231 */       addVmArgument(command, ""-disablesystemassertions"");
/*     */     } 
/*     */ 
/*     */     
/* 235 */     Iterator it = clause.assertionList.iterator();
/* 236 */     while (it.hasNext()) {
/* 237 */       BaseAssertion assertion = it.next();
/* 238 */       String arg = assertion.toCommand();
/* 239 */       addVmArgument(command, arg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addVmArgument(CommandlineJava command, String arg) {
/* 250 */     Commandline.Argument argument = command.createVmArgument();
/* 251 */     argument.setValue(arg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object clone() throws CloneNotSupportedException {
/* 262 */     Assertions that = (Assertions)super.clone();
/* 263 */     that.assertionList = (ArrayList)this.assertionList.clone();
/* 264 */     return that;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static abstract class BaseAssertion
/*     */   {
/*     */     private String packageName;
/*     */ 
/*     */ 
/*     */     
/*     */     private String className;
/*     */ 
/*     */ 
/*     */     
/* 280 */     public void setClass(String className) { this.className = className; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 288 */     public void setPackage(String packageName) { this.packageName = packageName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 297 */     protected String getClassName() { return this.className; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 306 */     protected String getPackageName() { return this.packageName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public abstract String getCommandPrefix();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String toCommand() {
/* 322 */       if (getPackageName() != null && getClassName() != null) {
/* 323 */         throw new BuildException(""Both package and class have been set"");
/*     */       }
/* 325 */       StringBuffer command = new StringBuffer(getCommandPrefix());
/*     */       
/* 327 */       if (getPackageName() != null) {
/*     */         
/* 329 */         command.append(':');
/* 330 */         command.append(getPackageName());
/* 331 */         if (!command.toString().endsWith(""...""))
/*     */         {
/* 333 */           command.append(""..."");
/*     */         }
/* 335 */       } else if (getClassName() != null) {
/*     */         
/* 337 */         command.append(':');
/* 338 */         command.append(getClassName());
/*     */       } 
/* 340 */       return command.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class EnabledAssertion
/*     */     extends BaseAssertion
/*     */   {
/* 354 */     public String getCommandPrefix() { return ""-ea""; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class DisabledAssertion
/*     */     extends BaseAssertion
/*     */   {
/* 368 */     public String getCommandPrefix() { return ""-da""; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Assertions.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Commandline,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.ArrayList;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Commandline
/*     */   implements Cloneable
/*     */ {
/*  97 */   private Vector arguments = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private String executable = null;
/*     */   
/* 104 */   protected static final String DISCLAIMER = StringUtils.LINE_SEP + ""The ' characters around the executable and arguments are"" + StringUtils.LINE_SEP + ""not part of the command."" + StringUtils.LINE_SEP;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline(String toProcess) {
/* 118 */     String[] tmp = translateCommandline(toProcess);
/* 119 */     if (tmp != null && tmp.length > 0) {
/* 120 */       setExecutable(tmp[0]);
/* 121 */       for (int i = 1; i < tmp.length; i++) {
/* 122 */         createArgument().setValue(tmp[i]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Argument
/*     */     extends ProjectComponent
/*     */   {
/*     */     private String[] parts;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 147 */     public void setValue(String value) { this.parts = new String[] { value }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setLine(String line) {
/* 156 */       if (line == null) {
/*     */         return;
/*     */       }
/* 159 */       this.parts = Commandline.translateCommandline(line);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 170 */     public void setPath(Path value) { this.parts = new String[] { value.toString() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setPathref(Reference value) {
/* 181 */       Path p = new Path(getProject());
/* 182 */       p.setRefid(value);
/* 183 */       this.parts = new String[] { p.toString() };
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 193 */     public void setFile(File value) { this.parts = new String[] { value.getAbsolutePath() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 200 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public class Marker
/*     */   {
/*     */     private int position;
/*     */     
/*     */     private int realPos;
/*     */     
/*     */     private final Commandline this$0;
/*     */ 
/*     */     
/*     */     Marker(Commandline this$0, int position) {
/* 215 */       this.this$0 = this$0; this.realPos = -1;
/* 216 */       this.position = position;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public int getPosition() {
/* 226 */       if (this.realPos == -1) {
/* 227 */         this.realPos = (this.this$0.executable == null) ? 0 : 1;
/* 228 */         for (int i = 0; i < this.position; i++) {
/* 229 */           Commandline.Argument arg = this.this$0.arguments.elementAt(i);
/* 230 */           this.realPos += (arg.getParts()).length;
/*     */         } 
/*     */       } 
/* 233 */       return this.realPos;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 248 */   public Argument createArgument() { return createArgument(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Argument createArgument(boolean insertAtStart) {
/* 261 */     Argument argument = new Argument();
/* 262 */     if (insertAtStart) {
/* 263 */       this.arguments.insertElementAt(argument, 0);
/*     */     } else {
/* 265 */       this.arguments.addElement(argument);
/*     */     } 
/* 267 */     return argument;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExecutable(String executable) {
/* 275 */     if (executable == null || executable.length() == 0) {
/*     */       return;
/*     */     }
/* 278 */     this.executable = executable.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public String getExecutable() { return this.executable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArguments(String[] line) {
/* 297 */     for (int i = 0; i < line.length; i++) {
/* 298 */       createArgument().setValue(line[i]);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 306 */     List commands = new LinkedList();
/* 307 */     ListIterator list = commands.listIterator();
/* 308 */     addCommandToList(list);
/* 309 */     String[] result = new String[commands.size()];
/* 310 */     return (String[])commands.toArray((Object[])result);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addCommandToList(ListIterator list) {
/* 319 */     if (this.executable != null) {
/* 320 */       list.add(this.executable);
/*     */     }
/* 322 */     addArgumentsToList(list);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getArguments() {
/* 331 */     List result = new ArrayList(this.arguments.size() * 2);
/* 332 */     addArgumentsToList(result.listIterator());
/* 333 */     String[] res = new String[result.size()];
/* 334 */     return (String[])result.toArray((Object[])res);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArgumentsToList(ListIterator list) {
/* 343 */     for (int i = 0; i < this.arguments.size(); i++) {
/* 344 */       Argument arg = this.arguments.elementAt(i);
/* 345 */       String[] s = arg.getParts();
/* 346 */       if (s != null) {
/* 347 */         for (int j = 0; j < s.length; j++) {
/* 348 */           list.add(s[j]);
/*     */         }
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 360 */   public String toString() { return toString(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String quoteArgument(String argument) {
/* 374 */     if (argument.indexOf(""\"""") > -1) {
/* 375 */       if (argument.indexOf(""'"") > -1) {
/* 376 */         throw new BuildException(""Can't handle single and double quotes in same argument"");
/*     */       }
/*     */       
/* 379 */       return '\'' + argument + '\'';
/*     */     } 
/* 381 */     if (argument.indexOf(""'"") > -1 || argument.indexOf("" "") > -1) {
/* 382 */       return '""' + argument + '""';
/*     */     }
/* 384 */     return argument;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String toString(String[] line) {
/* 396 */     if (line == null || line.length == 0) {
/* 397 */       return """";
/*     */     }
/*     */ 
/*     */     
/* 401 */     StringBuffer result = new StringBuffer();
/* 402 */     for (int i = 0; i < line.length; i++) {
/* 403 */       if (i > 0) {
/* 404 */         result.append(' ');
/*     */       }
/* 406 */       result.append(quoteArgument(line[i]));
/*     */     } 
/* 408 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String[] translateCommandline(String toProcess) {
/* 418 */     if (toProcess == null || toProcess.length() == 0)
/*     */     {
/* 420 */       return new String[0];
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 425 */     int normal = 0;
/* 426 */     int inQuote = 1;
/* 427 */     int inDoubleQuote = 2;
/* 428 */     int state = 0;
/* 429 */     StringTokenizer tok = new StringTokenizer(toProcess, ""\""' "", true);
/* 430 */     Vector v = new Vector();
/* 431 */     StringBuffer current = new StringBuffer();
/* 432 */     boolean lastTokenHasBeenQuoted = false;
/*     */     
/* 434 */     while (tok.hasMoreTokens()) {
/* 435 */       String nextTok = tok.nextToken();
/* 436 */       switch (state) {
/*     */         case 1:
/* 438 */           if (""'"".equals(nextTok)) {
/* 439 */             lastTokenHasBeenQuoted = true;
/* 440 */             state = 0; continue;
/*     */           } 
/* 442 */           current.append(nextTok);
/*     */           continue;
/*     */         
/*     */         case 2:
/* 446 */           if (""\"""".equals(nextTok)) {
/* 447 */             lastTokenHasBeenQuoted = true;
/* 448 */             state = 0; continue;
/*     */           } 
/* 450 */           current.append(nextTok);
/*     */           continue;
/*     */       } 
/*     */       
/* 454 */       if (""'"".equals(nextTok)) {
/* 455 */         state = 1;
/* 456 */       } else if (""\"""".equals(nextTok)) {
/* 457 */         state = 2;
/* 458 */       } else if ("" "".equals(nextTok)) {
/* 459 */         if (lastTokenHasBeenQuoted || current.length() != 0) {
/* 460 */           v.addElement(current.toString());
/* 461 */           current = new StringBuffer();
/*     */         } 
/*     */       } else {
/* 464 */         current.append(nextTok);
/*     */       } 
/* 466 */       lastTokenHasBeenQuoted = false;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 471 */     if (lastTokenHasBeenQuoted || current.length() != 0) {
/* 472 */       v.addElement(current.toString());
/*     */     }
/*     */     
/* 475 */     if (state == 1 || state == 2) {
/* 476 */       throw new BuildException(""unbalanced quotes in "" + toProcess);
/*     */     }
/*     */     
/* 479 */     String[] args = new String[v.size()];
/* 480 */     v.copyInto((Object[])args);
/* 481 */     return args;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 490 */   public int size() { return (getCommandline()).length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/*     */     try {
/* 499 */       Commandline c = (Commandline)super.clone();
/* 500 */       c.arguments = (Vector)this.arguments.clone();
/* 501 */       return c;
/*     */     } catch (CloneNotSupportedException e) {
/* 503 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void clear() {
/* 510 */     this.executable = null;
/* 511 */     this.arguments.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 519 */   public void clearArgs() { this.arguments.removeAllElements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 530 */   public Marker createMarker() { return new Marker(this, this.arguments.size()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 541 */   public String describeCommand() { return describeCommand(this); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 552 */   public String describeArguments() { return describeArguments(this); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 563 */   public static String describeCommand(Commandline line) { return describeCommand(line.getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 574 */   public static String describeArguments(Commandline line) { return describeArguments(line.getArguments()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String describeCommand(String[] args) {
/* 588 */     if (args == null || args.length == 0) {
/* 589 */       return """";
/*     */     }
/*     */     
/* 592 */     StringBuffer buf = new StringBuffer(""Executing '"");
/* 593 */     buf.append(args[0]);
/* 594 */     buf.append(""'"");
/* 595 */     if (args.length > 0) {
/* 596 */       buf.append("" with "");
/* 597 */       buf.append(describeArguments(args, 1));
/*     */     } else {
/* 599 */       buf.append(DISCLAIMER);
/*     */     } 
/* 601 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 612 */   public static String describeArguments(String[] args) { return describeArguments(args, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static String describeArguments(String[] args, int offset) {
/* 625 */     if (args == null || args.length <= offset) {
/* 626 */       return """";
/*     */     }
/*     */     
/* 629 */     StringBuffer buf = new StringBuffer(""argument"");
/* 630 */     if (args.length > offset) {
/* 631 */       buf.append(""s"");
/*     */     }
/* 633 */     buf.append("":"").append(StringUtils.LINE_SEP);
/* 634 */     for (int i = offset; i < args.length; i++) {
/* 635 */       buf.append(""'"").append(args[i]).append(""'"").append(StringUtils.LINE_SEP);
/*     */     }
/*     */     
/* 638 */     buf.append(DISCLAIMER);
/* 639 */     return buf.toString();
/*     */   }
/*     */   
/*     */   public Commandline() {}
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Commandline.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.CommandlineJava,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.ListIterator;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CommandlineJava
/*     */   implements Cloneable
/*     */ {
/*  83 */   private Commandline vmCommand = new Commandline();
/*     */ 
/*     */ 
/*     */   
/*  87 */   private Commandline javaCommand = new Commandline();
/*     */ 
/*     */ 
/*     */   
/*  91 */   private SysProperties sysProperties = new SysProperties();
/*  92 */   private Path classpath = null;
/*  93 */   private Path bootclasspath = null;
/*     */   private String vmVersion;
/*  95 */   private String maxMemory = null;
/*     */ 
/*     */ 
/*     */   
/*  99 */   private Assertions assertions = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean executeJar = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static class SysProperties
/*     */     extends Environment
/*     */     implements Cloneable
/*     */   {
/* 111 */     Properties sys = null;
/* 112 */     private Vector propertySets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String[] getVariables() throws BuildException {
/* 122 */       List definitions = new LinkedList();
/* 123 */       ListIterator list = definitions.listIterator();
/* 124 */       addDefinitionsToList(list);
/* 125 */       if (definitions.size() == 0) {
/* 126 */         return null;
/*     */       }
/* 128 */       return (String[])definitions.toArray((Object[])new String[0]);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void addDefinitionsToList(ListIterator listIt) {
/* 137 */       String[] props = super.getVariables();
/* 138 */       if (props != null) {
/* 139 */         for (int i = 0; i < props.length; i++) {
/* 140 */           listIt.add(""-D"" + props[i]);
/*     */         }
/*     */       }
/* 143 */       Properties propertySets = mergePropertySets();
/* 144 */       for (Enumeration e = propertySets.keys(); e.hasMoreElements(); ) {
/* 145 */         String key = e.nextElement();
/* 146 */         String value = propertySets.getProperty(key);
/* 147 */         listIt.add(""-D"" + key + ""="" + value);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public int size() {
/* 157 */       Properties p = mergePropertySets();
/* 158 */       return this.variables.size() + p.size();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setSystem() throws BuildException {
/*     */       try {
/* 168 */         this.sys = System.getProperties();
/* 169 */         Properties p = new Properties();
/* 170 */         for (Enumeration e = this.sys.keys(); e.hasMoreElements(); ) {
/* 171 */           Object o = e.nextElement();
/* 172 */           p.put(o, this.sys.get(o));
/*     */         } 
/* 174 */         p.putAll(mergePropertySets());
/* 175 */         for (Enumeration e = this.variables.elements(); e.hasMoreElements(); ) {
/* 176 */           Environment.Variable v = e.nextElement();
/* 177 */           p.put(v.getKey(), v.getValue());
/*     */         } 
/* 179 */         System.setProperties(p);
/*     */       } catch (SecurityException e) {
/* 181 */         throw new BuildException(""Cannot modify system properties"", e);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void restoreSystem() throws BuildException {
/* 191 */       if (this.sys == null) {
/* 192 */         throw new BuildException(""Unbalanced nesting of SysProperties"");
/*     */       }
/*     */       
/*     */       try {
/* 196 */         System.setProperties(this.sys);
/* 197 */         this.sys = null;
/*     */       } catch (SecurityException e) {
/* 199 */         throw new BuildException(""Cannot modify system properties"", e);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Object clone() {
/*     */       try {
/* 209 */         SysProperties c = (SysProperties)super.clone();
/* 210 */         c.variables = (Vector)this.variables.clone();
/* 211 */         c.propertySets = (Vector)this.propertySets.clone();
/* 212 */         return c;
/*     */       } catch (CloneNotSupportedException e) {
/* 214 */         return null;
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 223 */     public void addSyspropertyset(PropertySet ps) { this.propertySets.addElement(ps); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private Properties mergePropertySets() {
/* 231 */       Properties p = new Properties();
/* 232 */       Enumeration e = this.propertySets.elements();
/* 233 */       while (e.hasMoreElements()) {
/* 234 */         PropertySet ps = e.nextElement();
/* 235 */         p.putAll(ps.getProperties());
/*     */       } 
/* 237 */       return p;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public CommandlineJava() {
/* 245 */     setVm(JavaEnvUtils.getJreExecutable(""java""));
/* 246 */     setVmversion(JavaEnvUtils.getJavaVersion());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public Commandline.Argument createArgument() { return this.javaCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 262 */   public Commandline.Argument createVmArgument() { return this.vmCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void addSysproperty(Environment.Variable sysp) { this.sysProperties.addVariable(sysp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void addSyspropertyset(PropertySet sysp) { this.sysProperties.addSyspropertyset(sysp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setVm(String vm) { this.vmCommand.setExecutable(vm); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public void setVmversion(String value) { this.vmVersion = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 303 */   public Assertions getAssertions() { return this.assertions; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public void setAssertions(Assertions assertions) { this.assertions = assertions; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(String jarpathname) {
/* 319 */     this.javaCommand.setExecutable(jarpathname);
/* 320 */     this.executeJar = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getJar() {
/* 329 */     if (this.executeJar) {
/* 330 */       return this.javaCommand.getExecutable();
/*     */     }
/* 332 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String classname) {
/* 340 */     this.javaCommand.setExecutable(classname);
/* 341 */     this.executeJar = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getClassname() {
/* 349 */     if (!this.executeJar) {
/* 350 */       return this.javaCommand.getExecutable();
/*     */     }
/* 352 */     return null;
/*     */   }
/*     */   
/*     */   public Path createClasspath(Project p) {
/* 356 */     if (this.classpath == null) {
/* 357 */       this.classpath = new Path(p);
/*     */     }
/* 359 */     return this.classpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createBootclasspath(Project p) {
/* 366 */     if (this.bootclasspath == null) {
/* 367 */       this.bootclasspath = new Path(p);
/*     */     }
/* 369 */     return this.bootclasspath;
/*     */   }
/*     */ 
/*     */   
/* 373 */   public String getVmversion() { return this.vmVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 382 */     List commands = new LinkedList();
/* 383 */     ListIterator listIterator = commands.listIterator();
/*     */     
/* 385 */     addCommandsToList(listIterator);
/*     */     
/* 387 */     return (String[])commands.toArray((Object[])new String[0]);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addCommandsToList(ListIterator listIterator) {
/* 397 */     getActualVMCommand().addCommandToList(listIterator);
/*     */     
/* 399 */     this.sysProperties.addDefinitionsToList(listIterator);
/*     */     
/* 401 */     if (haveBootclasspath(true)) {
/* 402 */       listIterator.add(""-Xbootclasspath:"" + this.bootclasspath.toString());
/*     */     }
/*     */     
/* 405 */     if (haveClasspath()) {
/* 406 */       listIterator.add(""-classpath"");
/* 407 */       listIterator.add(this.classpath.concatSystemClasspath(""ignore"").toString());
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 412 */     if (getAssertions() != null) {
/* 413 */       getAssertions().applyAssertions(this);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 420 */     if (this.executeJar) {
/* 421 */       listIterator.add(""-jar"");
/*     */     }
/*     */ 
/*     */     
/* 425 */     this.javaCommand.addCommandToList(listIterator);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 433 */   public void setMaxmemory(String max) { this.maxMemory = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 442 */   public String toString() { return Commandline.toString(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 453 */   public String describeCommand() { return Commandline.describeCommand(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 465 */   public String describeJavaCommand() { return Commandline.describeCommand(getJavaCommand()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Commandline getActualVMCommand() {
/* 473 */     Commandline actualVMCommand = (Commandline)this.vmCommand.clone();
/* 474 */     if (this.maxMemory != null) {
/* 475 */       if (this.vmVersion.startsWith(""1.1"")) {
/* 476 */         actualVMCommand.createArgument().setValue(""-mx"" + this.maxMemory);
/*     */       } else {
/* 478 */         actualVMCommand.createArgument().setValue(""-Xmx"" + this.maxMemory);
/*     */       } 
/*     */     }
/* 481 */     return actualVMCommand;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int size() {
/* 492 */     int size = getActualVMCommand().size() + this.javaCommand.size() + this.sysProperties.size();
/*     */     
/* 494 */     if (haveClasspath()) {
/* 495 */       size += 2;
/*     */     }
/*     */     
/* 498 */     if (haveBootclasspath(true)) {
/* 499 */       size++;
/*     */     }
/*     */     
/* 502 */     if (this.executeJar) {
/* 503 */       size++;
/*     */     }
/*     */     
/* 506 */     if (getAssertions() != null) {
/* 507 */       size += getAssertions().size();
/*     */     }
/* 509 */     return size;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 517 */   public Commandline getJavaCommand() { return this.javaCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 525 */   public Commandline getVmCommand() { return getActualVMCommand(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 533 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 541 */   public Path getBootclasspath() { return this.bootclasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 550 */   public void setSystemProperties() throws BuildException { this.sysProperties.setSystem(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 558 */   public void restoreSystemProperties() throws BuildException { this.sysProperties.restoreSystem(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 566 */   public SysProperties getSystemProperties() { return this.sysProperties; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/*     */     try {
/* 575 */       CommandlineJava c = (CommandlineJava)super.clone();
/* 576 */       c.vmCommand = (Commandline)this.vmCommand.clone();
/* 577 */       c.javaCommand = (Commandline)this.javaCommand.clone();
/* 578 */       c.sysProperties = (SysProperties)this.sysProperties.clone();
/* 579 */       if (this.classpath != null) {
/* 580 */         c.classpath = (Path)this.classpath.clone();
/*     */       }
/* 582 */       if (this.bootclasspath != null) {
/* 583 */         c.bootclasspath = (Path)this.bootclasspath.clone();
/*     */       }
/* 585 */       if (this.assertions != null) {
/* 586 */         c.assertions = (Assertions)this.assertions.clone();
/*     */       }
/* 588 */       return c;
/*     */     } catch (CloneNotSupportedException e) {
/* 590 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 598 */   public void clearJavaArgs() { this.javaCommand.clearArgs(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean haveClasspath() {
/* 608 */     Path fullClasspath = (this.classpath != null) ? this.classpath.concatSystemClasspath(""ignore"") : null;
/*     */     
/* 610 */     return (fullClasspath != null && fullClasspath.toString().trim().length() > 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean haveBootclasspath(boolean log) {
/* 625 */     if (this.bootclasspath != null && this.bootclasspath.toString().trim().length() > 0)
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 632 */       if (!this.bootclasspath.toString().equals(this.bootclasspath.concatSystemClasspath(""ignore"").toString())) {
/*     */ 
/*     */         
/* 635 */         if (log) {
/* 636 */           System.out.println(""Ignoring bootclasspath as build.sysclasspath has been set."");
/*     */         }
/*     */       }
/* 639 */       else if (this.vmVersion.startsWith(""1.1"")) {
/* 640 */         if (log) {
/* 641 */           System.out.println(""Ignoring bootclasspath as the target VM doesn't support it."");
/*     */         }
/*     */       } else {
/*     */         
/* 645 */         return true;
/*     */       } 
/*     */     }
/* 648 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\CommandlineJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DataType,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DataType
/*     */   extends ProjectComponent
/*     */ {
/*     */   protected String description;
/*     */   protected Reference ref;
/*     */   protected boolean checked = true;
/*     */   
/* 112 */   public void setDescription(String desc) { this.description = desc; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public boolean isReference() { return (this.ref != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference ref) {
/* 138 */     this.ref = ref;
/* 139 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack stack, Project project) throws BuildException {
/* 162 */     if (this.checked || !isReference()) {
/*     */       return;
/*     */     }
/* 165 */     Object o = this.ref.getReferencedObject(project);
/*     */     
/* 167 */     if (o instanceof DataType) {
/* 168 */       if (stack.contains(o)) {
/* 169 */         throw circularReference();
/*     */       }
/* 171 */       stack.push(o);
/* 172 */       ((DataType)o).dieOnCircularReference(stack, project);
/* 173 */       stack.pop();
/*     */     } 
/*     */     
/* 176 */     this.checked = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object getCheckedRef(Class requiredClass, String dataTypeName) {
/* 185 */     if (!this.checked) {
/* 186 */       Stack stk = new Stack();
/* 187 */       stk.push(this);
/* 188 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 191 */     Object o = this.ref.getReferencedObject(getProject());
/* 192 */     if (!requiredClass.isAssignableFrom(o.getClass())) {
/* 193 */       String msg = this.ref.getRefId() + "" doesn't denote a "" + dataTypeName;
/* 194 */       throw new BuildException(msg);
/*     */     } 
/* 196 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   protected BuildException tooManyAttributes() { return new BuildException(""You must not specify more than one attribute when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   protected BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested elements when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   protected BuildException circularReference() { return new BuildException(""This data type contains a circular reference.""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 228 */   protected boolean isChecked() { return this.checked; }
/*     */ 
/*     */ 
/*     */   
/* 232 */   protected void setChecked(boolean checked) { this.checked = checked; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 240 */   protected Reference getRefid() { return this.ref; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkAttributesAllowed() {
/* 249 */     if (isReference()) {
/* 250 */       throw tooManyAttributes();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkChildrenAllowed() {
/* 260 */     if (isReference())
/* 261 */       throw noChildrenAllowed(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\DataType.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Description,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Target;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.UnknownElement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Description
/*     */   extends DataType
/*     */ {
/*     */   public void addText(String text) {
/*  91 */     ProjectHelper ph = ProjectHelper.getProjectHelper();
/*  92 */     if (!(ph instanceof org.apache.tools.ant.helper.ProjectHelperImpl)) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/*  97 */     String currentDescription = getProject().getDescription();
/*  98 */     if (currentDescription == null) {
/*  99 */       getProject().setDescription(text);
/*     */     } else {
/* 101 */       getProject().setDescription(currentDescription + text);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getDescription(Project project) {
/* 114 */     StringBuffer description = new StringBuffer();
/* 115 */     Vector targets = (Vector)project.getReference(""ant.targets"");
/* 116 */     for (int i = 0; i < targets.size(); i++) {
/* 117 */       Target t = targets.elementAt(i);
/* 118 */       concatDescriptions(project, t, description);
/*     */     } 
/* 120 */     return description.toString();
/*     */   }
/*     */ 
/*     */   
/*     */   private static void concatDescriptions(Project project, Target t, StringBuffer description) {
/* 125 */     if (t == null) {
/*     */       return;
/*     */     }
/* 128 */     Vector tasks = findElementInTarget(project, t, ""description"");
/* 129 */     if (tasks == null) {
/*     */       return;
/*     */     }
/* 132 */     for (int i = 0; i < tasks.size(); i++) {
/* 133 */       Task task = tasks.elementAt(i);
/* 134 */       if (task instanceof UnknownElement) {
/*     */ 
/*     */         
/* 137 */         UnknownElement ue = (UnknownElement)task;
/* 138 */         StringBuffer descComp = ue.getWrapper().getText();
/* 139 */         if (descComp != null) {
/* 140 */           description.append(descComp);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private static Vector findElementInTarget(Project project, Target t, String name) {
/* 147 */     Task[] tasks = t.getTasks();
/* 148 */     Vector elems = new Vector();
/* 149 */     for (int i = 0; i < tasks.length; i++) {
/* 150 */       if (name.equals(tasks[i].getTaskName())) {
/* 151 */         elems.addElement(tasks[i]);
/*     */       }
/*     */     } 
/* 154 */     return elems;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Description.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DirSet,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DirSet
/*    */   extends AbstractFileSet
/*    */ {
/*    */   public DirSet() {}
/*    */   
/* 70 */   protected DirSet(DirSet dirset) { super(dirset); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object clone() {
/* 78 */     if (isReference()) {
/* 79 */       return ((DirSet)getRef(getProject())).clone();
/*    */     }
/* 81 */     return super.clone();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\DirSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DTDLocation,"package org.apache.tools.ant.types;
public class DTDLocation extends ResourceLocation {}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\DTDLocation.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.EnumeratedAttribute,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class EnumeratedAttribute
/*     */ {
/*     */   protected String value;
/*  78 */   private int index = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract String[] getValues();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setValue(String value) throws BuildException {
/*  97 */     int index = indexOfValue(value);
/*  98 */     if (index == -1) {
/*  99 */       throw new BuildException(value + "" is not a legal value for this attribute"");
/*     */     }
/* 101 */     this.index = index;
/* 102 */     this.value = value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public final boolean containsValue(String value) { return (indexOfValue(value) != -1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int indexOfValue(String value) {
/* 120 */     String[] values = getValues();
/* 121 */     if (values == null || value == null) {
/* 122 */       return -1;
/*     */     }
/* 124 */     for (int i = 0; i < values.length; i++) {
/* 125 */       if (value.equals(values[i])) {
/* 126 */         return i;
/*     */       }
/*     */     } 
/* 129 */     return -1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public final String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public final int getIndex() { return this.index; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public String toString() { return getValue(); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\EnumeratedAttribute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Environment,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Environment
/*     */ {
/*     */   protected Vector variables;
/*     */   
/*     */   public static class Variable
/*     */   {
/*     */     private String key;
/*     */     private String value;
/*     */     
/*  97 */     public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 105 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 113 */     public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 121 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 131 */     public void setPath(Path path) { this.value = path.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 139 */     public void setFile(File file) { this.value = file.getAbsolutePath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getContent() throws BuildException {
/* 150 */       if (this.key == null || this.value == null) {
/* 151 */         throw new BuildException(""key and value must be specified for environment variables."");
/*     */       }
/*     */       
/* 154 */       StringBuffer sb = new StringBuffer(this.key.trim());
/* 155 */       sb.append(""="").append(this.value.trim());
/* 156 */       return sb.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public Environment() { this.variables = new Vector(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void addVariable(Variable var) { this.variables.addElement(var); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getVariables() throws BuildException {
/* 183 */     if (this.variables.size() == 0) {
/* 184 */       return null;
/*     */     }
/* 186 */     String[] result = new String[this.variables.size()];
/* 187 */     for (int i = 0; i < result.length; i++) {
/* 188 */       result[i] = ((Variable)this.variables.elementAt(i)).getContent();
/*     */     }
/* 190 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Environment.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileList,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileList
/*     */   extends DataType
/*     */ {
/*  76 */   private Vector filenames = new Vector();
/*     */   
/*     */   private File dir;
/*     */ 
/*     */   
/*     */   public FileList() {}
/*     */   
/*     */   protected FileList(FileList filelist) {
/*  84 */     this.dir = filelist.dir;
/*  85 */     this.filenames = filelist.filenames;
/*  86 */     setProject(filelist.getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/*  97 */     if (this.dir != null || this.filenames.size() != 0) {
/*  98 */       throw tooManyAttributes();
/*     */     }
/* 100 */     super.setRefid(r);
/*     */   }
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 104 */     if (isReference()) {
/* 105 */       throw tooManyAttributes();
/*     */     }
/* 107 */     this.dir = dir;
/*     */   }
/*     */   
/*     */   public File getDir(Project p) {
/* 111 */     if (isReference()) {
/* 112 */       return getRef(p).getDir(p);
/*     */     }
/* 114 */     return this.dir;
/*     */   }
/*     */   
/*     */   public void setFiles(String filenames) {
/* 118 */     if (isReference()) {
/* 119 */       throw tooManyAttributes();
/*     */     }
/* 121 */     if (filenames != null && filenames.length() > 0) {
/* 122 */       StringTokenizer tok = new StringTokenizer(filenames, "", \t\n\r\f"", false);
/* 123 */       while (tok.hasMoreTokens()) {
/* 124 */         this.filenames.addElement(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getFiles(Project p) {
/* 133 */     if (isReference()) {
/* 134 */       return getRef(p).getFiles(p);
/*     */     }
/*     */     
/* 137 */     if (this.dir == null) {
/* 138 */       throw new BuildException(""No directory specified for filelist."");
/*     */     }
/*     */     
/* 141 */     if (this.filenames.size() == 0) {
/* 142 */       throw new BuildException(""No files specified for filelist."");
/*     */     }
/*     */     
/* 145 */     String[] result = new String[this.filenames.size()];
/* 146 */     this.filenames.copyInto((Object[])result);
/* 147 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected FileList getRef(Project p) {
/* 155 */     if (!isChecked()) {
/* 156 */       Stack stk = new Stack();
/* 157 */       stk.push(this);
/* 158 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 161 */     Object o = getRefid().getReferencedObject(p);
/* 162 */     if (!(o instanceof FileList)) {
/* 163 */       String msg = getRefid().getRefId() + "" doesn't denote a filelist"";
/* 164 */       throw new BuildException(msg);
/*     */     } 
/* 166 */     return (FileList)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FileList.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileSet,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FileSet
/*    */   extends AbstractFileSet
/*    */ {
/*    */   public FileSet() {}
/*    */   
/* 75 */   protected FileSet(FileSet fileset) { super(fileset); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object clone() {
/* 83 */     if (isReference()) {
/* 84 */       return ((FileSet)getRef(getProject())).clone();
/*    */     }
/* 86 */     return super.clone();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterChain,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.filters.ChainableReader;
/*     */ import org.apache.tools.ant.filters.ClassConstants;
/*     */ import org.apache.tools.ant.filters.EscapeUnicode;
/*     */ import org.apache.tools.ant.filters.ExpandProperties;
/*     */ import org.apache.tools.ant.filters.HeadFilter;
/*     */ import org.apache.tools.ant.filters.LineContains;
/*     */ import org.apache.tools.ant.filters.LineContainsRegExp;
/*     */ import org.apache.tools.ant.filters.PrefixLines;
/*     */ import org.apache.tools.ant.filters.ReplaceTokens;
/*     */ import org.apache.tools.ant.filters.StripJavaComments;
/*     */ import org.apache.tools.ant.filters.StripLineBreaks;
/*     */ import org.apache.tools.ant.filters.StripLineComments;
/*     */ import org.apache.tools.ant.filters.TabsToSpaces;
/*     */ import org.apache.tools.ant.filters.TailFilter;
/*     */ import org.apache.tools.ant.filters.TokenFilter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class FilterChain
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*  84 */   private Vector filterReaders = new Vector();
/*     */ 
/*     */   
/*  87 */   public final void addFilterReader(AntFilterReader filterReader) { this.filterReaders.addElement(filterReader); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public final Vector getFilterReaders() { return this.filterReaders; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public final void addClassConstants(ClassConstants classConstants) { this.filterReaders.addElement(classConstants); }
/*     */ 
/*     */ 
/*     */   
/*  99 */   public final void addExpandProperties(ExpandProperties expandProperties) { this.filterReaders.addElement(expandProperties); }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public final void addHeadFilter(HeadFilter headFilter) { this.filterReaders.addElement(headFilter); }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public final void addLineContains(LineContains lineContains) { this.filterReaders.addElement(lineContains); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public final void addLineContainsRegExp(LineContainsRegExp lineContainsRegExp) { this.filterReaders.addElement(lineContainsRegExp); }
/*     */ 
/*     */ 
/*     */   
/* 116 */   public final void addPrefixLines(PrefixLines prefixLines) { this.filterReaders.addElement(prefixLines); }
/*     */ 
/*     */ 
/*     */   
/* 120 */   public final void addReplaceTokens(ReplaceTokens replaceTokens) { this.filterReaders.addElement(replaceTokens); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public final void addStripJavaComments(StripJavaComments stripJavaComments) { this.filterReaders.addElement(stripJavaComments); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public final void addStripLineBreaks(StripLineBreaks stripLineBreaks) { this.filterReaders.addElement(stripLineBreaks); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public final void addStripLineComments(StripLineComments stripLineComments) { this.filterReaders.addElement(stripLineComments); }
/*     */ 
/*     */ 
/*     */   
/* 139 */   public final void addTabsToSpaces(TabsToSpaces tabsToSpaces) { this.filterReaders.addElement(tabsToSpaces); }
/*     */ 
/*     */ 
/*     */   
/* 143 */   public final void addTailFilter(TailFilter tailFilter) { this.filterReaders.addElement(tailFilter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public final void addEscapeUnicode(EscapeUnicode escapeUnicode) { this.filterReaders.addElement(escapeUnicode); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public final void addTokenFilter(TokenFilter tokenFilter) { this.filterReaders.addElement(tokenFilter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public void addDeleteCharacters(TokenFilter.DeleteCharacters filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void addContainsRegex(TokenFilter.ContainsRegex filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void addReplaceRegex(TokenFilter.ReplaceRegex filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void addTrim(TokenFilter.Trim filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void addReplaceString(TokenFilter.ReplaceString filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void addIgnoreBlank(TokenFilter.IgnoreBlank filter) { this.filterReaders.addElement(filter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 222 */     if (!this.filterReaders.isEmpty()) {
/* 223 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 226 */     Object o = r.getReferencedObject(getProject());
/* 227 */     if (o instanceof FilterChain) {
/* 228 */       FilterChain fc = (FilterChain)o;
/* 229 */       this.filterReaders = fc.getFilterReaders();
/*     */     } else {
/* 231 */       String msg = r.getRefId() + "" doesn't refer to a FilterChain"";
/* 232 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/* 235 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 244 */   public void add(ChainableReader filter) { this.filterReaders.addElement(filter); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FilterChain.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSet
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   public static final String DEFAULT_TOKEN_START = ""@"";
/*     */   public static final String DEFAULT_TOKEN_END = ""@"";
/*     */   
/*     */   public static class Filter
/*     */   {
/*     */     String token;
/*     */     String value;
/*     */     
/*     */     public Filter(String token, String value) {
/*  97 */       this.token = token;
/*  98 */       this.value = value;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Filter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 113 */     public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 122 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 131 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 140 */     public String getValue() { return this.value; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public class FiltersFile
/*     */   {
/*     */     private final FilterSet this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 154 */     public FiltersFile(FilterSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 163 */     public void setFile(File file) { this.this$0.readFiltersFromFile(file); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   private String startOfToken = ""@"";
/* 174 */   private String endOfToken = ""@"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   private Vector filters = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Vector passedTokens;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean duplicateToken;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector getFilters() {
/* 203 */     if (isReference()) {
/* 204 */       return getRef().getFilters();
/*     */     }
/* 206 */     return this.filters;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   protected FilterSet getRef() { return (FilterSet)getCheckedRef(FilterSet.class, ""filterset""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getFilterHash() {
/* 224 */     int filterSize = getFilters().size();
/* 225 */     Hashtable filterHash = new Hashtable(filterSize + 1);
/* 226 */     for (Enumeration e = getFilters().elements(); e.hasMoreElements(); ) {
/* 227 */       Filter filter = e.nextElement();
/* 228 */       filterHash.put(filter.getToken(), filter.getValue());
/*     */     } 
/* 230 */     return filterHash;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiltersfile(File filtersFile) throws BuildException {
/* 240 */     if (isReference()) {
/* 241 */       throw tooManyAttributes();
/*     */     }
/* 243 */     readFiltersFromFile(filtersFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBeginToken(String startOfToken) {
/* 252 */     if (isReference()) {
/* 253 */       throw tooManyAttributes();
/*     */     }
/* 255 */     if (startOfToken == null || """".equals(startOfToken)) {
/* 256 */       throw new BuildException(""beginToken must not be empty"");
/*     */     }
/* 258 */     this.startOfToken = startOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getBeginToken() {
/* 267 */     if (isReference()) {
/* 268 */       return getRef().getBeginToken();
/*     */     }
/* 270 */     return this.startOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEndToken(String endOfToken) {
/* 280 */     if (isReference()) {
/* 281 */       throw tooManyAttributes();
/*     */     }
/* 283 */     if (endOfToken == null || """".equals(endOfToken)) {
/* 284 */       throw new BuildException(""endToken must not be empty"");
/*     */     }
/* 286 */     this.endOfToken = endOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getEndToken() {
/* 295 */     if (isReference()) {
/* 296 */       return getRef().getEndToken();
/*     */     }
/* 298 */     return this.endOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void readFiltersFromFile(File filtersFile) throws BuildException {
/* 310 */     if (isReference()) {
/* 311 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 314 */     if (!filtersFile.exists()) {
/* 315 */       throw new BuildException(""Could not read filters from file "" + filtersFile + "" as it doesn't exist."");
/*     */     }
/*     */ 
/*     */     
/* 319 */     if (filtersFile.isFile()) {
/* 320 */       log(""Reading filters from "" + filtersFile, 3);
/* 321 */       FileInputStream in = null;
/*     */       try {
/* 323 */         Properties props = new Properties();
/* 324 */         in = new FileInputStream(filtersFile);
/* 325 */         props.load(in);
/*     */         
/* 327 */         Enumeration e = props.propertyNames();
/* 328 */         Vector filters = getFilters();
/* 329 */         while (e.hasMoreElements()) {
/* 330 */           String strPropName = (String)e.nextElement();
/* 331 */           String strValue = props.getProperty(strPropName);
/* 332 */           filters.addElement(new Filter(strPropName, strValue));
/*     */         } 
/*     */       } catch (Exception ex) {
/* 335 */         throw new BuildException(""Could not read filters from file: "" + filtersFile);
/*     */       } finally {
/*     */         
/* 338 */         if (in != null) {
/*     */           try {
/* 340 */             in.close();
/* 341 */           } catch (IOException ioex) {}
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 347 */       throw new BuildException(""Must specify a file not a directory in the filtersfile attribute:"" + filtersFile);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String line) {
/* 360 */     String beginToken = getBeginToken();
/* 361 */     String endToken = getEndToken();
/* 362 */     int index = line.indexOf(beginToken);
/*     */     
/* 364 */     if (index > -1) {
/* 365 */       Hashtable tokens = getFilterHash();
/*     */       try {
/* 367 */         StringBuffer b = new StringBuffer();
/* 368 */         int i = 0;
/* 369 */         String token = null;
/* 370 */         String value = null;
/*     */         
/*     */         do {
/* 373 */           int endIndex = line.indexOf(endToken, index + beginToken.length() + 1);
/*     */           
/* 375 */           if (endIndex == -1) {
/*     */             break;
/*     */           }
/* 378 */           token = line.substring(index + beginToken.length(), endIndex);
/*     */           
/* 380 */           b.append(line.substring(i, index));
/* 381 */           if (tokens.containsKey(token)) {
/* 382 */             value = (String)tokens.get(token);
/* 383 */             if (!value.equals(token))
/*     */             {
/* 385 */               value = replaceTokens(value, token);
/*     */             }
/* 387 */             log(""Replacing: "" + beginToken + token + endToken + "" -> "" + value, 3);
/*     */             
/* 389 */             b.append(value);
/* 390 */             i = index + beginToken.length() + token.length() + endToken.length();
/*     */           }
/*     */           else {
/*     */             
/* 394 */             b.append(beginToken);
/* 395 */             i = index + beginToken.length();
/*     */           } 
/* 397 */         } while ((index = line.indexOf(beginToken, i)) > -1);
/*     */         
/* 399 */         b.append(line.substring(i));
/* 400 */         return b.toString();
/*     */       } catch (StringIndexOutOfBoundsException e) {
/* 402 */         return line;
/*     */       } 
/*     */     } 
/* 405 */     return line;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 412 */   public FilterSet() { this.duplicateToken = false; } protected FilterSet(FilterSet filterset) { this.duplicateToken = false;
/*     */     this.filters = (Vector)filterset.getFilters().clone(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String replaceTokens(String line, String parent) throws BuildException {
/* 423 */     if (this.passedTokens == null) {
/* 424 */       this.passedTokens = new Vector();
/*     */     }
/* 426 */     if (this.passedTokens.contains(parent) && !this.duplicateToken) {
/* 427 */       this.duplicateToken = true;
/* 428 */       StringBuffer sb = new StringBuffer();
/* 429 */       sb.append(""Inifinite loop in tokens. Currently known tokens : "");
/* 430 */       sb.append(this.passedTokens);
/* 431 */       sb.append(""\nProblem token : "" + getBeginToken() + parent + getEndToken());
/*     */       
/* 433 */       sb.append("" called from "" + getBeginToken() + this.passedTokens.lastElement());
/*     */       
/* 435 */       sb.append(getEndToken());
/* 436 */       System.out.println(sb.toString());
/* 437 */       return parent;
/*     */     } 
/* 439 */     this.passedTokens.addElement(parent);
/* 440 */     String value = replaceTokens(line);
/* 441 */     if (value.indexOf(getBeginToken()) == -1 && !this.duplicateToken) {
/* 442 */       this.duplicateToken = false;
/* 443 */       this.passedTokens = null;
/* 444 */     } else if (this.duplicateToken) {
/*     */       
/* 446 */       if (this.passedTokens.size() > 0) {
/* 447 */         value = this.passedTokens.lastElement();
/* 448 */         this.passedTokens.removeElementAt(this.passedTokens.size() - 1);
/* 449 */         if (this.passedTokens.size() == 0) {
/* 450 */           value = getBeginToken() + value + getEndToken();
/* 451 */           this.duplicateToken = false;
/*     */         } 
/*     */       } 
/*     */     } 
/* 455 */     return value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(Filter filter) {
/* 464 */     if (isReference()) {
/* 465 */       throw noChildrenAllowed();
/*     */     }
/* 467 */     this.filters.addElement(filter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FiltersFile createFiltersfile() {
/* 476 */     if (isReference()) {
/* 477 */       throw noChildrenAllowed();
/*     */     }
/* 479 */     return new FiltersFile(this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(String token, String value) {
/* 489 */     if (isReference()) {
/* 490 */       throw noChildrenAllowed();
/*     */     }
/* 492 */     this.filters.addElement(new Filter(token, value));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredFilterSet(FilterSet filterSet) {
/* 501 */     if (isReference()) {
/* 502 */       throw noChildrenAllowed();
/*     */     }
/* 504 */     for (Enumeration e = filterSet.getFilters().elements(); e.hasMoreElements();) {
/* 505 */       this.filters.addElement(e.nextElement());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 515 */   public boolean hasFilters() { return (getFilters().size() > 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() throws BuildException {
/* 526 */     if (isReference()) {
/* 527 */       return getRef().clone();
/*     */     }
/*     */     try {
/* 530 */       FilterSet fs = (FilterSet)super.clone();
/* 531 */       fs.filters = (Vector)getFilters().clone();
/* 532 */       fs.setProject(getProject());
/* 533 */       return fs;
/*     */     } catch (CloneNotSupportedException e) {
/* 535 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FilterSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSetCollection,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSetCollection
/*     */ {
/*  78 */   private Vector filterSets = new Vector();
/*     */ 
/*     */   
/*     */   public FilterSetCollection() {}
/*     */ 
/*     */   
/*  84 */   public FilterSetCollection(FilterSet filterSet) { addFilterSet(filterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void addFilterSet(FilterSet filterSet) { this.filterSets.addElement(filterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String line) {
/* 100 */     String replacedLine = line;
/* 101 */     for (Enumeration e = this.filterSets.elements(); e.hasMoreElements(); ) {
/* 102 */       FilterSet filterSet = e.nextElement();
/* 103 */       replacedLine = filterSet.replaceTokens(replacedLine);
/*     */     } 
/* 105 */     return replacedLine;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasFilters() {
/* 114 */     for (Enumeration e = this.filterSets.elements(); e.hasMoreElements(); ) {
/* 115 */       FilterSet filterSet = e.nextElement();
/* 116 */       if (filterSet.hasFilters()) {
/* 117 */         return true;
/*     */       }
/*     */     } 
/* 120 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FilterSetCollection.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FlexInteger,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FlexInteger
/*    */ {
/*    */   private Integer value;
/*    */   
/* 72 */   public FlexInteger(String value) { this.value = Integer.decode(value); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 79 */   public int intValue() { return this.value.intValue(); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public String toString() { return this.value.toString(); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\FlexInteger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Mapper,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Mapper
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*  71 */   protected MapperType type = null;
/*     */   
/*     */   protected String classname;
/*     */   
/*     */   protected Path classpath;
/*     */   
/*     */   protected String from;
/*     */   protected String to;
/*     */   
/*     */   public void setType(MapperType type) {
/*  81 */     if (isReference()) {
/*  82 */       throw tooManyAttributes();
/*     */     }
/*  84 */     this.type = type;
/*     */   } public void setClassname(String classname) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*  87 */     this.classname = classname; } public Mapper(Project p) { this.classname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  99 */     this.classpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 139 */     this.from = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 151 */     this.to = null; setProject(p); }
/*     */   public void setClasspath(Path classpath) { if (isReference())
/*     */       throw tooManyAttributes();  if (this.classpath == null) {
/*     */       this.classpath = classpath;
/*     */     } else {
/*     */       this.classpath.append(classpath);
/* 157 */     }  } public void setTo(String to) { if (isReference()) {
/* 158 */       throw tooManyAttributes();
/*     */     }
/* 160 */     this.to = to; } public Path createClasspath() { if (isReference())
/*     */       throw noChildrenAllowed();  if (this.classpath == null)
/*     */       this.classpath = new Path(getProject()); 
/*     */     return this.classpath.createPath(); }
/*     */   public void setClasspathRef(Reference r) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     createClasspath().setRefid(r); }
/*     */   public void setFrom(String from) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     this.from = from; }
/* 170 */   public void setRefid(Reference r) throws BuildException { if (this.type != null || this.from != null || this.to != null) {
/* 171 */       throw tooManyAttributes();
/*     */     }
/* 173 */     super.setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileNameMapper getImplementation() throws BuildException {
/* 180 */     if (isReference()) {
/* 181 */       return getRef().getImplementation();
/*     */     }
/*     */     
/* 184 */     if (this.type == null && this.classname == null) {
/* 185 */       throw new BuildException(""one of the attributes type or classname is required"");
/*     */     }
/*     */     
/* 188 */     if (this.type != null && this.classname != null) {
/* 189 */       throw new BuildException(""must not specify both type and classname attribute"");
/*     */     }
/*     */     
/*     */     try {
/* 193 */       if (this.type != null) {
/* 194 */         this.classname = this.type.getImplementation();
/*     */       }
/*     */       
/* 197 */       Class c = null;
/* 198 */       if (this.classpath == null) {
/* 199 */         c = Class.forName(this.classname);
/*     */       } else {
/* 201 */         AntClassLoader al = getProject().createClassLoader(this.classpath);
/* 202 */         c = Class.forName(this.classname, true, (ClassLoader)al);
/*     */       } 
/*     */       
/* 205 */       FileNameMapper m = (FileNameMapper)c.newInstance();
/* 206 */       Project project = getProject();
/* 207 */       if (project != null) {
/* 208 */         project.setProjectReference(m);
/*     */       }
/* 210 */       m.setFrom(this.from);
/* 211 */       m.setTo(this.to);
/* 212 */       return m;
/*     */     } catch (BuildException be) {
/* 214 */       throw be;
/*     */     } catch (Throwable t) {
/* 216 */       throw new BuildException(t);
/*     */     } finally {
/* 218 */       if (this.type != null) {
/* 219 */         this.classname = null;
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Mapper getRef() {
/* 229 */     if (!isChecked()) {
/* 230 */       Stack stk = new Stack();
/* 231 */       stk.push(this);
/* 232 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 235 */     Object o = getRefid().getReferencedObject(getProject());
/* 236 */     if (!(o instanceof Mapper)) {
/* 237 */       String msg = getRefid().getRefId() + "" doesn't denote a mapper"";
/* 238 */       throw new BuildException(msg);
/*     */     } 
/* 240 */     return (Mapper)o;
/*     */   }
/*     */ 
/*     */   
/*     */   public static class MapperType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private Properties implementations;
/*     */ 
/*     */     
/*     */     public MapperType() {
/* 251 */       this.implementations = new Properties();
/* 252 */       this.implementations.put(""identity"", ""org.apache.tools.ant.util.IdentityMapper"");
/*     */       
/* 254 */       this.implementations.put(""flatten"", ""org.apache.tools.ant.util.FlatFileNameMapper"");
/*     */       
/* 256 */       this.implementations.put(""glob"", ""org.apache.tools.ant.util.GlobPatternMapper"");
/*     */       
/* 258 */       this.implementations.put(""merge"", ""org.apache.tools.ant.util.MergingMapper"");
/*     */       
/* 260 */       this.implementations.put(""regexp"", ""org.apache.tools.ant.util.RegexpPatternMapper"");
/*     */       
/* 262 */       this.implementations.put(""package"", ""org.apache.tools.ant.util.PackageNameMapper"");
/*     */       
/* 264 */       this.implementations.put(""unpackage"", ""org.apache.tools.ant.util.UnPackageNameMapper"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 269 */     public String[] getValues() { return new String[] { ""identity"", ""flatten"", ""glob"", ""merge"", ""regexp"", ""package"", ""unpackage"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 274 */     public String getImplementation() { return this.implementations.getProperty(getValue()); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Mapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Parameter,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class Parameter
/*    */ {
/* 62 */   private String name = null;
/* 63 */   private String type = null;
/* 64 */   private String value = null;
/*    */ 
/*    */   
/* 67 */   public final void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public final void setType(String type) { this.type = type; }
/*    */ 
/*    */ 
/*    */   
/* 75 */   public final void setValue(String value) { this.value = value; }
/*    */ 
/*    */ 
/*    */   
/* 79 */   public final String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public final String getType() { return this.type; }
/*    */ 
/*    */ 
/*    */   
/* 87 */   public final String getValue() { return this.value; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Parameter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Parameterizable,"package org.apache.tools.ant.types;
public interface Parameterizable {
  void setParameters(Parameter[] paramArrayOfParameter);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Parameterizable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Path,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Locale;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.PathTokenizer;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Path
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   private Vector elements;
/* 103 */   public static Path systemClasspath = new Path(null, System.getProperty(""java.class.path""));
/*     */   
/*     */   public class PathElement
/*     */   {
/*     */     private String[] parts;
/*     */     private final Path this$0;
/*     */     
/* 110 */     public PathElement(Path this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/* 114 */     public void setLocation(File loc) { this.parts = new String[] { Path.translateFile(loc.getAbsolutePath()) }; }
/*     */ 
/*     */ 
/*     */     
/* 118 */     public void setPath(String path) { this.parts = Path.translatePath(this.this$0.getProject(), path); }
/*     */ 
/*     */ 
/*     */     
/* 122 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path(Project p, String path) {
/* 131 */     this(p);
/* 132 */     createPathElement().setPath(path);
/*     */   }
/*     */   
/*     */   public Path(Project project) {
/* 136 */     setProject(project);
/* 137 */     this.elements = new Vector();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLocation(File location) throws BuildException {
/* 146 */     if (isReference()) {
/* 147 */       throw tooManyAttributes();
/*     */     }
/* 149 */     createPathElement().setLocation(location);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPath(String path) throws BuildException {
/* 158 */     if (isReference()) {
/* 159 */       throw tooManyAttributes();
/*     */     }
/* 161 */     createPathElement().setPath(path);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 171 */     if (!this.elements.isEmpty()) {
/* 172 */       throw tooManyAttributes();
/*     */     }
/* 174 */     this.elements.addElement(r);
/* 175 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PathElement createPathElement() throws BuildException {
/* 182 */     if (isReference()) {
/* 183 */       throw noChildrenAllowed();
/*     */     }
/* 185 */     PathElement pe = new PathElement(this);
/* 186 */     this.elements.addElement(pe);
/* 187 */     return pe;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFileset(FileSet fs) throws BuildException {
/* 194 */     if (isReference()) {
/* 195 */       throw noChildrenAllowed();
/*     */     }
/* 197 */     this.elements.addElement(fs);
/* 198 */     setChecked(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilelist(FileList fl) throws BuildException {
/* 205 */     if (isReference()) {
/* 206 */       throw noChildrenAllowed();
/*     */     }
/* 208 */     this.elements.addElement(fl);
/* 209 */     setChecked(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDirset(DirSet dset) throws BuildException {
/* 216 */     if (isReference()) {
/* 217 */       throw noChildrenAllowed();
/*     */     }
/* 219 */     this.elements.addElement(dset);
/* 220 */     setChecked(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void add(Path path) throws BuildException {
/* 228 */     if (isReference()) {
/* 229 */       throw noChildrenAllowed();
/*     */     }
/* 231 */     this.elements.addElement(path);
/* 232 */     setChecked(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() throws BuildException {
/* 240 */     if (isReference()) {
/* 241 */       throw noChildrenAllowed();
/*     */     }
/* 243 */     Path p = new Path(getProject());
/* 244 */     this.elements.addElement(p);
/* 245 */     setChecked(false);
/* 246 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(Path other) {
/* 253 */     if (other == null) {
/*     */       return;
/*     */     }
/* 256 */     String[] l = other.list();
/* 257 */     for (int i = 0; i < l.length; i++) {
/* 258 */       if (this.elements.indexOf(l[i]) == -1) {
/* 259 */         this.elements.addElement(l[i]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void addExisting(Path source) { addExisting(source, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addExisting(Path source, boolean tryUserDir) {
/* 282 */     String[] list = source.list();
/* 283 */     File userDir = tryUserDir ? new File(System.getProperty(""user.dir"")) : null;
/*     */ 
/*     */     
/* 286 */     for (int i = 0; i < list.length; i++) {
/* 287 */       File f = null;
/* 288 */       if (getProject() != null) {
/* 289 */         f = getProject().resolveFile(list[i]);
/*     */       } else {
/* 291 */         f = new File(list[i]);
/*     */       } 
/*     */ 
/*     */       
/* 295 */       if (tryUserDir && !f.exists()) {
/* 296 */         f = new File(userDir, list[i]);
/*     */       }
/* 298 */       if (f.exists()) {
/* 299 */         setLocation(f);
/*     */       } else {
/* 301 */         log(""dropping "" + f + "" from path as it doesn't exist"", 3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] list() {
/* 312 */     if (!isChecked()) {
/*     */       
/* 314 */       Stack stk = new Stack();
/* 315 */       stk.push(this);
/* 316 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 319 */     Vector result = new Vector(2 * this.elements.size());
/* 320 */     for (int i = 0; i < this.elements.size(); i++) {
/* 321 */       Object o = this.elements.elementAt(i);
/* 322 */       if (o instanceof Reference) {
/* 323 */         Reference r = (Reference)o;
/* 324 */         o = r.getReferencedObject(getProject());
/*     */         
/* 326 */         if (!(o instanceof Path)) {
/* 327 */           String msg = r.getRefId() + "" doesn't denote a path "" + o;
/* 328 */           throw new BuildException(msg);
/*     */         } 
/*     */       } 
/*     */       
/* 332 */       if (o instanceof String) {
/*     */         
/* 334 */         addUnlessPresent(result, (String)o);
/* 335 */       } else if (o instanceof PathElement) {
/* 336 */         String[] parts = ((PathElement)o).getParts();
/* 337 */         if (parts == null) {
/* 338 */           throw new BuildException(""You must either set location or path on <pathelement>"");
/*     */         }
/*     */         
/* 341 */         for (int j = 0; j < parts.length; j++) {
/* 342 */           addUnlessPresent(result, parts[j]);
/*     */         }
/* 344 */       } else if (o instanceof Path) {
/* 345 */         Path p = (Path)o;
/* 346 */         if (p.getProject() == null) {
/* 347 */           p.setProject(getProject());
/*     */         }
/* 349 */         String[] parts = p.list();
/* 350 */         for (int j = 0; j < parts.length; j++) {
/* 351 */           addUnlessPresent(result, parts[j]);
/*     */         }
/* 353 */       } else if (o instanceof DirSet) {
/* 354 */         DirSet dset = (DirSet)o;
/* 355 */         DirectoryScanner ds = dset.getDirectoryScanner(getProject());
/* 356 */         String[] s = ds.getIncludedDirectories();
/* 357 */         File dir = dset.getDir(getProject());
/* 358 */         addUnlessPresent(result, dir, s);
/* 359 */       } else if (o instanceof FileSet) {
/* 360 */         FileSet fs = (FileSet)o;
/* 361 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 362 */         String[] s = ds.getIncludedFiles();
/* 363 */         File dir = fs.getDir(getProject());
/* 364 */         addUnlessPresent(result, dir, s);
/* 365 */       } else if (o instanceof FileList) {
/* 366 */         FileList fl = (FileList)o;
/* 367 */         String[] s = fl.getFiles(getProject());
/* 368 */         File dir = fl.getDir(getProject());
/* 369 */         addUnlessPresent(result, dir, s);
/*     */       } 
/*     */     } 
/* 372 */     String[] res = new String[result.size()];
/* 373 */     result.copyInto((Object[])res);
/* 374 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 384 */     String[] list = list();
/*     */ 
/*     */     
/* 387 */     if (list.length == 0) {
/* 388 */       return """";
/*     */     }
/*     */ 
/*     */     
/* 392 */     StringBuffer result = new StringBuffer(list[0].toString());
/* 393 */     for (int i = 1; i < list.length; i++) {
/* 394 */       result.append(File.pathSeparatorChar);
/* 395 */       result.append(list[i]);
/*     */     } 
/*     */     
/* 398 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String[] translatePath(Project project, String source) {
/* 405 */     Vector result = new Vector();
/* 406 */     if (source == null) {
/* 407 */       return new String[0];
/*     */     }
/*     */     
/* 410 */     PathTokenizer tok = new PathTokenizer(source);
/* 411 */     StringBuffer element = new StringBuffer();
/* 412 */     while (tok.hasMoreTokens()) {
/* 413 */       String pathElement = tok.nextToken();
/*     */       try {
/* 415 */         element.append(resolveFile(project, pathElement));
/*     */       } catch (BuildException e) {
/* 417 */         project.log(""Dropping path element "" + pathElement + "" as it is not valid relative to the project"", 3);
/*     */       } 
/*     */ 
/*     */       
/* 421 */       for (int i = 0; i < element.length(); i++) {
/* 422 */         translateFileSep(element, i);
/*     */       }
/* 424 */       result.addElement(element.toString());
/* 425 */       element = new StringBuffer();
/*     */     } 
/* 427 */     String[] res = new String[result.size()];
/* 428 */     result.copyInto((Object[])res);
/* 429 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String translateFile(String source) {
/* 437 */     if (source == null) {
/* 438 */       return """";
/*     */     }
/*     */     
/* 441 */     StringBuffer result = new StringBuffer(source);
/* 442 */     for (int i = 0; i < result.length(); i++) {
/* 443 */       translateFileSep(result, i);
/*     */     }
/*     */     
/* 446 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static boolean translateFileSep(StringBuffer buffer, int pos) {
/* 455 */     if (buffer.charAt(pos) == '/' || buffer.charAt(pos) == '\\') {
/* 456 */       buffer.setCharAt(pos, File.separatorChar);
/* 457 */       return true;
/*     */     } 
/* 459 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 466 */   public int size() { return (list()).length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/*     */     try {
/* 474 */       Path p = (Path)super.clone();
/* 475 */       p.elements = (Vector)this.elements.clone();
/* 476 */       return p;
/*     */     } catch (CloneNotSupportedException e) {
/* 478 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack stk, Project p) throws BuildException {
/* 489 */     if (isChecked()) {
/*     */       return;
/*     */     }
/*     */     
/* 493 */     Enumeration e = this.elements.elements();
/* 494 */     while (e.hasMoreElements()) {
/* 495 */       Object o = e.nextElement();
/* 496 */       if (o instanceof Reference) {
/* 497 */         o = ((Reference)o).getReferencedObject(p);
/*     */       }
/*     */       
/* 500 */       if (o instanceof DataType) {
/* 501 */         if (stk.contains(o)) {
/* 502 */           throw circularReference();
/*     */         }
/* 504 */         stk.push(o);
/* 505 */         ((DataType)o).dieOnCircularReference(stk, p);
/* 506 */         stk.pop();
/*     */       } 
/*     */     } 
/*     */     
/* 510 */     setChecked(true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String resolveFile(Project project, String relativeName) {
/* 519 */     if (project != null) {
/* 520 */       File f = project.resolveFile(relativeName);
/* 521 */       return f.getAbsolutePath();
/*     */     } 
/* 523 */     return relativeName;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addUnlessPresent(Vector v, String s) {
/* 530 */     if (v.indexOf(s) == -1) {
/* 531 */       v.addElement(s);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addUnlessPresent(Vector v, File dir, String[] s) {
/* 540 */     for (int j = 0; j < s.length; j++) {
/* 541 */       File d = new File(dir, s[j]);
/* 542 */       String absolutePath = d.getAbsolutePath();
/* 543 */       addUnlessPresent(v, translateFile(absolutePath));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 553 */   public Path concatSystemClasspath() { return concatSystemClasspath(""last""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path concatSystemClasspath(String defValue) {
/* 563 */     Path result = new Path(getProject());
/*     */     
/* 565 */     String order = defValue;
/* 566 */     if (getProject() != null) {
/* 567 */       String o = getProject().getProperty(""build.sysclasspath"");
/* 568 */       if (o != null) {
/* 569 */         order = o;
/*     */       }
/*     */     } 
/*     */     
/* 573 */     if (order.equals(""only"")) {
/*     */       
/* 575 */       result.addExisting(systemClasspath, true);
/*     */     }
/* 577 */     else if (order.equals(""first"")) {
/*     */       
/* 579 */       result.addExisting(systemClasspath, true);
/* 580 */       result.addExisting(this);
/*     */     }
/* 582 */     else if (order.equals(""ignore"")) {
/*     */       
/* 584 */       result.addExisting(this);
/*     */     }
/*     */     else {
/*     */       
/* 588 */       if (!order.equals(""last"")) {
/* 589 */         log(""invalid value for build.sysclasspath: "" + order, 1);
/*     */       }
/*     */ 
/*     */       
/* 593 */       result.addExisting(this);
/* 594 */       result.addExisting(systemClasspath, true);
/*     */     } 
/*     */ 
/*     */     
/* 598 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addJavaRuntime() {
/* 606 */     if (""Kaffe"".equals(System.getProperty(""java.vm.name""))) {
/*     */ 
/*     */       
/* 609 */       File kaffeShare = new File(System.getProperty(""java.home"") + File.separator + ""share"" + File.separator + ""kaffe"");
/*     */ 
/*     */       
/* 612 */       if (kaffeShare.isDirectory()) {
/* 613 */         FileSet kaffeJarFiles = new FileSet();
/* 614 */         kaffeJarFiles.setDir(kaffeShare);
/* 615 */         kaffeJarFiles.setIncludes(""*.jar"");
/* 616 */         addFileset(kaffeJarFiles);
/*     */       } 
/*     */     } 
/*     */     
/* 620 */     if (System.getProperty(""java.vendor"").toLowerCase(Locale.US).indexOf(""microsoft"") >= 0) {
/*     */       
/* 622 */       FileSet msZipFiles = new FileSet();
/* 623 */       msZipFiles.setDir(new File(System.getProperty(""java.home"") + File.separator + ""Packages""));
/*     */       
/* 625 */       msZipFiles.setIncludes(""*.ZIP"");
/* 626 */       addFileset(msZipFiles);
/* 627 */     } else if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 628 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""classes.zip""));
/*     */ 
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/* 635 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 641 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""jre"" + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 648 */       String[] secJars = { ""jce"", ""jsse"" };
/* 649 */       for (int i = 0; i < secJars.length; i++) {
/* 650 */         addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + secJars[i] + "".jar""));
/*     */ 
/*     */ 
/*     */         
/* 654 */         addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + secJars[i] + "".jar""));
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 663 */       String[] ibmJars = { ""core"", ""graphics"", ""security"", ""server"", ""xml"" };
/*     */       
/* 665 */       for (int i = 0; i < ibmJars.length; i++) {
/* 666 */         addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ibmJars[i] + "".jar""));
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 673 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""classes.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 678 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""ui.jar""));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addExtdirs(Path extdirs) {
/* 694 */     if (extdirs == null) {
/* 695 */       String extProp = System.getProperty(""java.ext.dirs"");
/* 696 */       if (extProp != null) {
/* 697 */         extdirs = new Path(getProject(), extProp);
/*     */       } else {
/*     */         return;
/*     */       } 
/*     */     } 
/*     */     
/* 703 */     String[] dirs = extdirs.list();
/* 704 */     for (int i = 0; i < dirs.length; i++) {
/* 705 */       File dir = getProject().resolveFile(dirs[i]);
/* 706 */       if (dir.exists() && dir.isDirectory()) {
/* 707 */         FileSet fs = new FileSet();
/* 708 */         fs.setDir(dir);
/* 709 */         fs.setIncludes(""*"");
/* 710 */         addFileset(fs);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Path.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.PatternSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PatternSet
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*  81 */   private Vector includeList = new Vector();
/*  82 */   private Vector excludeList = new Vector();
/*  83 */   private Vector includesFileList = new Vector();
/*  84 */   private Vector excludesFileList = new Vector();
/*     */   
/*     */   public class NameEntry
/*     */   {
/*     */     private String name;
/*     */     private String ifCond;
/*     */     
/*  91 */     public NameEntry(PatternSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */     
/*     */     private String unlessCond;
/*     */     private final PatternSet this$0;
/*     */     
/*  97 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 101 */     public void setIf(String cond) { this.ifCond = cond; }
/*     */ 
/*     */ 
/*     */     
/* 105 */     public void setUnless(String cond) { this.unlessCond = cond; }
/*     */ 
/*     */ 
/*     */     
/* 109 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 113 */     public String evalName(Project p) { return valid(p) ? this.name : null; }
/*     */ 
/*     */     
/*     */     private boolean valid(Project p) {
/* 117 */       if (this.ifCond != null && p.getProperty(this.ifCond) == null)
/* 118 */         return false; 
/* 119 */       if (this.unlessCond != null && p.getProperty(this.unlessCond) != null) {
/* 120 */         return false;
/*     */       }
/* 122 */       return true;
/*     */     }
/*     */     
/*     */     public String toString() {
/* 126 */       StringBuffer buf = new StringBuffer(this.name);
/* 127 */       if (this.ifCond != null || this.unlessCond != null) {
/* 128 */         buf.append("":"");
/* 129 */         String connector = """";
/*     */         
/* 131 */         if (this.ifCond != null) {
/* 132 */           buf.append(""if->"");
/* 133 */           buf.append(this.ifCond);
/* 134 */           connector = "";"";
/*     */         } 
/* 136 */         if (this.unlessCond != null) {
/* 137 */           buf.append(connector);
/* 138 */           buf.append(""unless->"");
/* 139 */           buf.append(this.unlessCond);
/*     */         } 
/*     */       } 
/*     */       
/* 143 */       return buf.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 159 */     if (!this.includeList.isEmpty() || !this.excludeList.isEmpty()) {
/* 160 */       throw tooManyAttributes();
/*     */     }
/* 162 */     super.setRefid(r);
/*     */   }
/*     */   
/*     */   public void addConfiguredPatternset(PatternSet p) {
/* 166 */     if (isReference()) {
/* 167 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 170 */     String[] nestedIncludes = p.getIncludePatterns(getProject());
/* 171 */     String[] nestedExcludes = p.getExcludePatterns(getProject());
/*     */     
/* 173 */     if (nestedIncludes != null) {
/* 174 */       for (int i = 0; i < nestedIncludes.length; i++) {
/* 175 */         createInclude().setName(nestedIncludes[i]);
/*     */       }
/*     */     }
/*     */     
/* 179 */     if (nestedExcludes != null) {
/* 180 */       for (int i = 0; i < nestedExcludes.length; i++) {
/* 181 */         createExclude().setName(nestedExcludes[i]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createInclude() {
/* 190 */     if (isReference()) {
/* 191 */       throw noChildrenAllowed();
/*     */     }
/* 193 */     return addPatternToList(this.includeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createIncludesFile() {
/* 200 */     if (isReference()) {
/* 201 */       throw noChildrenAllowed();
/*     */     }
/* 203 */     return addPatternToList(this.includesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExclude() {
/* 210 */     if (isReference()) {
/* 211 */       throw noChildrenAllowed();
/*     */     }
/* 213 */     return addPatternToList(this.excludeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExcludesFile() {
/* 220 */     if (isReference()) {
/* 221 */       throw noChildrenAllowed();
/*     */     }
/* 223 */     return addPatternToList(this.excludesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 233 */     if (isReference()) {
/* 234 */       throw tooManyAttributes();
/*     */     }
/* 236 */     if (includes != null && includes.length() > 0) {
/* 237 */       StringTokenizer tok = new StringTokenizer(includes, "", "", false);
/* 238 */       while (tok.hasMoreTokens()) {
/* 239 */         createInclude().setName(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 251 */     if (isReference()) {
/* 252 */       throw tooManyAttributes();
/*     */     }
/* 254 */     if (excludes != null && excludes.length() > 0) {
/* 255 */       StringTokenizer tok = new StringTokenizer(excludes, "", "", false);
/* 256 */       while (tok.hasMoreTokens()) {
/* 257 */         createExclude().setName(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private NameEntry addPatternToList(Vector list) {
/* 266 */     NameEntry result = new NameEntry(this);
/* 267 */     list.addElement(result);
/* 268 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File includesFile) throws BuildException {
/* 277 */     if (isReference()) {
/* 278 */       throw tooManyAttributes();
/*     */     }
/* 280 */     createIncludesFile().setName(includesFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excludesFile) throws BuildException {
/* 289 */     if (isReference()) {
/* 290 */       throw tooManyAttributes();
/*     */     }
/* 292 */     createExcludesFile().setName(excludesFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readPatterns(File patternfile, Vector patternlist, Project p) throws BuildException {
/* 302 */     BufferedReader patternReader = null;
/*     */     
/*     */     try {
/* 305 */       patternReader = new BufferedReader(new FileReader(patternfile));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 310 */       String line = patternReader.readLine();
/* 311 */       while (line != null) {
/* 312 */         if (line.length() > 0) {
/* 313 */           line = p.replaceProperties(line);
/* 314 */           addPatternToList(patternlist).setName(line);
/*     */         } 
/* 316 */         line = patternReader.readLine();
/*     */       } 
/*     */     } catch (IOException ioe) {
/* 319 */       String msg = ""An error occured while reading from pattern file: "" + patternfile;
/*     */       
/* 321 */       throw new BuildException(msg, ioe);
/*     */     } finally {
/* 323 */       if (null != patternReader) {
/*     */         try {
/* 325 */           patternReader.close();
/* 326 */         } catch (IOException ioe) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(PatternSet other, Project p) {
/* 337 */     if (isReference()) {
/* 338 */       throw new BuildException(""Cannot append to a reference"");
/*     */     }
/*     */     
/* 341 */     String[] incl = other.getIncludePatterns(p);
/* 342 */     if (incl != null) {
/* 343 */       for (int i = 0; i < incl.length; i++) {
/* 344 */         createInclude().setName(incl[i]);
/*     */       }
/*     */     }
/*     */     
/* 348 */     String[] excl = other.getExcludePatterns(p);
/* 349 */     if (excl != null) {
/* 350 */       for (int i = 0; i < excl.length; i++) {
/* 351 */         createExclude().setName(excl[i]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludePatterns(Project p) {
/* 360 */     if (isReference()) {
/* 361 */       return getRef(p).getIncludePatterns(p);
/*     */     }
/* 363 */     readFiles(p);
/* 364 */     return makeArray(this.includeList, p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getExcludePatterns(Project p) {
/* 372 */     if (isReference()) {
/* 373 */       return getRef(p).getExcludePatterns(p);
/*     */     }
/* 375 */     readFiles(p);
/* 376 */     return makeArray(this.excludeList, p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   boolean hasPatterns(Project p) {
/* 384 */     if (isReference()) {
/* 385 */       return getRef(p).hasPatterns(p);
/*     */     }
/* 387 */     return (this.includesFileList.size() > 0 || this.excludesFileList.size() > 0 || this.includeList.size() > 0 || this.excludeList.size() > 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private PatternSet getRef(Project p) {
/* 397 */     if (!isChecked()) {
/* 398 */       Stack stk = new Stack();
/* 399 */       stk.push(this);
/* 400 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 403 */     Object o = getRefid().getReferencedObject(p);
/* 404 */     if (!(o instanceof PatternSet)) {
/* 405 */       String msg = getRefid().getRefId() + "" doesn't denote a patternset"";
/* 406 */       throw new BuildException(msg);
/*     */     } 
/* 408 */     return (PatternSet)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String[] makeArray(Vector list, Project p) {
/* 416 */     if (list.size() == 0) {
/* 417 */       return null;
/*     */     }
/*     */     
/* 420 */     Vector tmpNames = new Vector();
/* 421 */     for (Enumeration e = list.elements(); e.hasMoreElements(); ) {
/* 422 */       NameEntry ne = e.nextElement();
/* 423 */       String pattern = ne.evalName(p);
/* 424 */       if (pattern != null && pattern.length() > 0) {
/* 425 */         tmpNames.addElement(pattern);
/*     */       }
/*     */     } 
/*     */     
/* 429 */     String[] result = new String[tmpNames.size()];
/* 430 */     tmpNames.copyInto((Object[])result);
/* 431 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readFiles(Project p) {
/* 438 */     if (this.includesFileList.size() > 0) {
/* 439 */       Enumeration e = this.includesFileList.elements();
/* 440 */       while (e.hasMoreElements()) {
/* 441 */         NameEntry ne = e.nextElement();
/* 442 */         String fileName = ne.evalName(p);
/* 443 */         if (fileName != null) {
/* 444 */           File inclFile = p.resolveFile(fileName);
/* 445 */           if (!inclFile.exists()) {
/* 446 */             throw new BuildException(""Includesfile "" + inclFile.getAbsolutePath() + "" not found."");
/*     */           }
/*     */ 
/*     */           
/* 450 */           readPatterns(inclFile, this.includeList, p);
/*     */         } 
/*     */       } 
/* 453 */       this.includesFileList.removeAllElements();
/*     */     } 
/*     */     
/* 456 */     if (this.excludesFileList.size() > 0) {
/* 457 */       Enumeration e = this.excludesFileList.elements();
/* 458 */       while (e.hasMoreElements()) {
/* 459 */         NameEntry ne = e.nextElement();
/* 460 */         String fileName = ne.evalName(p);
/* 461 */         if (fileName != null) {
/* 462 */           File exclFile = p.resolveFile(fileName);
/* 463 */           if (!exclFile.exists()) {
/* 464 */             throw new BuildException(""Excludesfile "" + exclFile.getAbsolutePath() + "" not found."");
/*     */           }
/*     */ 
/*     */           
/* 468 */           readPatterns(exclFile, this.excludeList, p);
/*     */         } 
/*     */       } 
/* 471 */       this.excludesFileList.removeAllElements();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 476 */   public String toString() { return ""patternSet{ includes: "" + this.includeList + "" excludes: "" + this.excludeList + "" }""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 484 */     if (isReference()) {
/* 485 */       return getRef(getProject()).clone();
/*     */     }
/*     */     try {
/* 488 */       PatternSet ps = (PatternSet)super.clone();
/* 489 */       ps.includeList = (Vector)this.includeList.clone();
/* 490 */       ps.excludeList = (Vector)this.excludeList.clone();
/* 491 */       ps.includesFileList = (Vector)this.includesFileList.clone();
/* 492 */       ps.excludesFileList = (Vector)this.excludesFileList.clone();
/* 493 */       return ps;
/*     */     } catch (CloneNotSupportedException e) {
/* 495 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\PatternSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Permissions,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.net.SocketPermission;
/*     */ import java.security.Permission;
/*     */ import java.security.Permissions;
/*     */ import java.security.UnresolvedPermission;
/*     */ import java.util.HashSet;
/*     */ import java.util.Iterator;
/*     */ import java.util.LinkedList;
/*     */ import java.util.List;
/*     */ import java.util.PropertyPermission;
/*     */ import java.util.Set;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ExitException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Permissions
/*     */ {
/*  84 */   private List grantedPermissions = new LinkedList();
/*  85 */   private List revokedPermissions = new LinkedList();
/*  86 */   private Permissions granted = null;
/*  87 */   private SecurityManager origSm = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean active = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean delegateToOldSM = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public Permissions(boolean delegateToOldSM) { this.delegateToOldSM = delegateToOldSM; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public void addConfiguredGrant(Permission perm) { this.grantedPermissions.add(perm); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void addConfiguredRevoke(Permission perm) { this.revokedPermissions.add(perm); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSecurityManager() throws BuildException {
/* 129 */     this.origSm = System.getSecurityManager();
/* 130 */     init();
/* 131 */     System.setSecurityManager(new MySM());
/* 132 */     this.active = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void init() throws BuildException {
/* 139 */     this.granted = new Permissions();
/* 140 */     for (Iterator i = this.revokedPermissions.listIterator(); i.hasNext(); ) {
/* 141 */       Permission p = i.next();
/* 142 */       if (p.getClassName() == null) {
/* 143 */         throw new BuildException(""Revoked permission "" + p + "" does not contain a class."");
/*     */       }
/*     */     } 
/* 146 */     for (Iterator i = this.grantedPermissions.listIterator(); i.hasNext(); ) {
/* 147 */       Permission p = i.next();
/* 148 */       if (p.getClassName() == null) {
/* 149 */         throw new BuildException(""Granted permission "" + p + "" does not contain a class."");
/*     */       }
/* 151 */       Permission perm = new UnresolvedPermission(p.getClassName(), p.getName(), p.getActions(), null);
/* 152 */       this.granted.add(perm);
/*     */     } 
/*     */ 
/*     */     
/* 156 */     this.granted.add(new SocketPermission(""localhost:1024-"", ""listen""));
/* 157 */     this.granted.add(new PropertyPermission(""java.version"", ""read""));
/* 158 */     this.granted.add(new PropertyPermission(""java.vendor"", ""read""));
/* 159 */     this.granted.add(new PropertyPermission(""java.vendor.url"", ""read""));
/* 160 */     this.granted.add(new PropertyPermission(""java.class.version"", ""read""));
/* 161 */     this.granted.add(new PropertyPermission(""os.name"", ""read""));
/* 162 */     this.granted.add(new PropertyPermission(""os.version"", ""read""));
/* 163 */     this.granted.add(new PropertyPermission(""os.arch"", ""read""));
/* 164 */     this.granted.add(new PropertyPermission(""file.encoding"", ""read""));
/* 165 */     this.granted.add(new PropertyPermission(""file.separator"", ""read""));
/* 166 */     this.granted.add(new PropertyPermission(""path.separator"", ""read""));
/* 167 */     this.granted.add(new PropertyPermission(""line.separator"", ""read""));
/* 168 */     this.granted.add(new PropertyPermission(""java.specification.version"", ""read""));
/* 169 */     this.granted.add(new PropertyPermission(""java.specification.vendor"", ""read""));
/* 170 */     this.granted.add(new PropertyPermission(""java.specification.name"", ""read""));
/* 171 */     this.granted.add(new PropertyPermission(""java.vm.specification.version"", ""read""));
/* 172 */     this.granted.add(new PropertyPermission(""java.vm.specification.vendor"", ""read""));
/* 173 */     this.granted.add(new PropertyPermission(""java.vm.specification.name"", ""read""));
/* 174 */     this.granted.add(new PropertyPermission(""java.vm.version"", ""read""));
/* 175 */     this.granted.add(new PropertyPermission(""java.vm.vendor"", ""read""));
/* 176 */     this.granted.add(new PropertyPermission(""java.vm.name"", ""read""));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void restoreSecurityManager() {
/* 183 */     this.active = false;
/* 184 */     System.setSecurityManager(this.origSm);
/*     */   }
/*     */   
/*     */   public Permissions() {}
/*     */   
/*     */   private class MySM extends SecurityManager {
/*     */     private MySM(Permissions this$0) {
/* 191 */       Permissions.this = Permissions.this;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     private final Permissions this$0;
/*     */ 
/*     */ 
/*     */     
/*     */     public void checkExit(int status) {
/* 201 */       Permission perm = new RuntimePermission(""exitVM"", null);
/*     */       try {
/* 203 */         checkPermission(perm);
/*     */       } catch (SecurityException e) {
/* 205 */         throw new ExitException(e.getMessage(), status);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void checkPermission(Permission perm) {
/* 216 */       if (Permissions.this.active) {
/* 217 */         if (Permissions.this.delegateToOldSM && !perm.getName().equals(""exitVM"")) {
/* 218 */           boolean permOK = false;
/* 219 */           if (Permissions.this.granted.implies(perm)) {
/* 220 */             permOK = true;
/*     */           }
/* 222 */           checkRevoked(perm);
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 227 */           if (!permOK && Permissions.this.origSm != null) {
/* 228 */             Permissions.this.origSm.checkPermission(perm);
/*     */           }
/*     */         } else {
/* 231 */           if (!Permissions.this.granted.implies(perm)) {
/* 232 */             throw new SecurityException(""Permission "" + perm + "" was not granted."");
/*     */           }
/* 234 */           checkRevoked(perm);
/*     */         } 
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void checkRevoked(Permission perm) {
/* 243 */       for (Iterator i = Permissions.this.revokedPermissions.listIterator(); i.hasNext();) {
/* 244 */         if (((Permissions.Permission)i.next()).matches(perm)) {
/* 245 */           throw new SecurityException(""Permission "" + perm + "" was revoked."");
/*     */         }
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Permission
/*     */   {
/*     */     private String className;
/*     */     
/*     */     private String name;
/*     */     
/*     */     private String actionString;
/*     */     
/*     */     private Set actions;
/*     */ 
/*     */     
/* 264 */     public void setClass(String aClass) { this.className = aClass.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 271 */     public String getClassName() { return this.className; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 279 */     public void setName(String aName) { this.name = aName.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 287 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setActions(String actions) {
/* 295 */       this.actionString = actions;
/* 296 */       if (actions.length() > 0) {
/* 297 */         this.actions = parseActions(actions);
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 306 */     public String getActions() { return this.actionString; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     boolean matches(Permission perm) {
/* 315 */       if (!this.className.equals(perm.getClass().getName())) {
/* 316 */         return false;
/*     */       }
/*     */       
/* 319 */       if (this.name != null) {
/* 320 */         if (this.name.endsWith(""*"")) {
/* 321 */           if (!perm.getName().startsWith(this.name.substring(0, this.name.length() - 1))) {
/* 322 */             return false;
/*     */           }
/*     */         }
/* 325 */         else if (!this.name.equals(perm.getName())) {
/* 326 */           return false;
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 331 */       if (this.actions != null) {
/* 332 */         Set as = parseActions(perm.getActions());
/* 333 */         int size = as.size();
/* 334 */         as.removeAll(this.actions);
/* 335 */         if (as.size() == size)
/*     */         {
/* 337 */           return false;
/*     */         }
/*     */       } 
/*     */       
/* 341 */       return true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private Set parseActions(String actions) {
/* 349 */       Set result = new HashSet();
/* 350 */       StringTokenizer tk = new StringTokenizer(actions, "","");
/* 351 */       while (tk.hasMoreTokens()) {
/* 352 */         String item = tk.nextToken().trim();
/* 353 */         if (!item.equals("""")) {
/* 354 */           result.add(item);
/*     */         }
/*     */       } 
/* 357 */       return result;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 364 */     public String toString() { return ""Permission: "" + this.className + "" (\"""" + this.name + ""\"", \"""" + this.actions + ""\"")""; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Permissions.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.PropertySet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcher;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcherFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertySet
/*     */   extends DataType
/*     */ {
/*     */   private boolean dynamic = true;
/*     */   private Vector cachedNames;
/*  79 */   private Vector ptyRefs = new Vector();
/*  80 */   private Vector setRefs = new Vector();
/*     */   private Mapper _mapper;
/*     */   
/*     */   public static class PropertyRef
/*     */   {
/*     */     private int count;
/*     */     private String name;
/*     */     private String regex;
/*     */     private String prefix;
/*     */     private String builtin;
/*     */     
/*     */     public void setName(String name) {
/*  92 */       assertValid(""name"", name);
/*  93 */       this.name = name;
/*     */     }
/*     */     
/*     */     public void setRegex(String regex) {
/*  97 */       assertValid(""regex"", regex);
/*  98 */       this.regex = regex;
/*     */     }
/*     */     
/*     */     public void setPrefix(String prefix) {
/* 102 */       assertValid(""prefix"", prefix);
/* 103 */       this.prefix = prefix;
/*     */     }
/*     */     
/*     */     public void setBuiltin(PropertySet.BuiltinPropertySetName b) {
/* 107 */       String builtin = b.getValue();
/* 108 */       assertValid(""builtin"", builtin);
/* 109 */       this.builtin = builtin;
/*     */     }
/*     */     
/*     */     private void assertValid(String attr, String value) {
/* 113 */       if (value == null || value.length() < 1) {
/* 114 */         throw new BuildException(""Invalid attribute: "" + attr);
/*     */       }
/*     */       
/* 117 */       if (++this.count != 1) {
/* 118 */         throw new BuildException(""Attributes name, regex, and prefix are mutually exclusive"");
/*     */       }
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 124 */     public String toString() { return ""name="" + this.name + "", regex="" + this.regex + "", prefix="" + this.prefix + "", builtin="" + this.builtin; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void appendName(String name) {
/* 131 */     PropertyRef ref = new PropertyRef();
/* 132 */     ref.setName(name);
/* 133 */     addPropertyref(ref);
/*     */   }
/*     */   
/*     */   public void appendRegex(String regex) {
/* 137 */     PropertyRef ref = new PropertyRef();
/* 138 */     ref.setRegex(regex);
/* 139 */     addPropertyref(ref);
/*     */   }
/*     */   
/*     */   public void appendPrefix(String prefix) {
/* 143 */     PropertyRef ref = new PropertyRef();
/* 144 */     ref.setPrefix(prefix);
/* 145 */     addPropertyref(ref);
/*     */   }
/*     */   
/*     */   public void appendBuiltin(BuiltinPropertySetName b) {
/* 149 */     PropertyRef ref = new PropertyRef();
/* 150 */     ref.setBuiltin(b);
/* 151 */     addPropertyref(ref);
/*     */   }
/*     */   
/*     */   public void setMapper(String type, String from, String to) {
/* 155 */     Mapper mapper = createMapper();
/* 156 */     Mapper.MapperType mapperType = new Mapper.MapperType();
/* 157 */     mapperType.setValue(type);
/* 158 */     mapper.setFrom(from);
/* 159 */     mapper.setTo(to);
/*     */   }
/*     */   
/*     */   public void addPropertyref(PropertyRef ref) {
/* 163 */     assertNotReference();
/* 164 */     this.ptyRefs.addElement(ref);
/*     */   }
/*     */   
/*     */   public void addPropertyset(PropertySet ref) {
/* 168 */     assertNotReference();
/* 169 */     this.setRefs.addElement(ref);
/*     */   }
/*     */   
/*     */   public Mapper createMapper() {
/* 173 */     assertNotReference();
/* 174 */     if (this._mapper != null) {
/* 175 */       throw new BuildException(""Too many <mapper>s!"");
/*     */     }
/* 177 */     this._mapper = new Mapper(getProject());
/* 178 */     return this._mapper;
/*     */   }
/*     */   
/*     */   public void setDynamic(boolean dynamic) {
/* 182 */     assertNotReference();
/* 183 */     this.dynamic = dynamic;
/*     */   }
/*     */ 
/*     */   
/* 187 */   public boolean getDynamic() { return isReference() ? (getRef()).dynamic : this.dynamic; }
/*     */ 
/*     */ 
/*     */   
/* 191 */   public Mapper getMapper() { return isReference() ? (getRef())._mapper : this._mapper; }
/*     */ 
/*     */   
/*     */   public Properties getProperties() {
/* 195 */     Vector names = null;
/* 196 */     Project prj = getProject();
/*     */     
/* 198 */     if (getDynamic() || this.cachedNames == null) {
/* 199 */       names = new Vector();
/* 200 */       if (isReference()) {
/* 201 */         getRef().addPropertyNames(names, prj.getProperties());
/*     */       } else {
/* 203 */         addPropertyNames(names, prj.getProperties());
/*     */       } 
/*     */       
/* 206 */       if (!getDynamic()) {
/* 207 */         this.cachedNames = names;
/*     */       }
/*     */     } else {
/* 210 */       names = this.cachedNames;
/*     */     } 
/*     */     
/* 213 */     FileNameMapper mapper = null;
/* 214 */     Mapper myMapper = getMapper();
/* 215 */     if (myMapper != null) {
/* 216 */       mapper = myMapper.getImplementation();
/*     */     }
/* 218 */     Properties properties = new Properties();
/* 219 */     for (Enumeration e = names.elements(); e.hasMoreElements(); ) {
/* 220 */       String name = e.nextElement();
/* 221 */       String value = prj.getProperty(name);
/* 222 */       if (mapper != null) {
/* 223 */         String[] newname = mapper.mapFileName(name);
/* 224 */         if (newname != null) {
/* 225 */           name = newname[0];
/*     */         }
/*     */       } 
/* 228 */       properties.setProperty(name, value);
/*     */     } 
/* 230 */     return properties;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addPropertyNames(Vector names, Hashtable properties) {
/* 240 */     Project prj = getProject();
/*     */ 
/*     */     
/* 243 */     for (Enumeration e = this.ptyRefs.elements(); e.hasMoreElements(); ) {
/* 244 */       PropertyRef ref = e.nextElement();
/* 245 */       if (ref.name != null) {
/* 246 */         if (prj.getProperty(ref.name) != null)
/* 247 */           names.addElement(ref.name);  continue;
/*     */       } 
/* 249 */       if (ref.prefix != null) {
/* 250 */         for (Enumeration p = properties.keys(); p.hasMoreElements(); ) {
/* 251 */           String name = p.nextElement();
/* 252 */           if (name.startsWith(ref.prefix))
/* 253 */             names.addElement(name); 
/*     */         }  continue;
/*     */       } 
/* 256 */       if (ref.regex != null) {
/* 257 */         RegexpMatcherFactory matchMaker = new RegexpMatcherFactory();
/* 258 */         RegexpMatcher matcher = matchMaker.newRegexpMatcher();
/* 259 */         matcher.setPattern(ref.regex);
/* 260 */         for (Enumeration p = properties.keys(); p.hasMoreElements(); ) {
/* 261 */           String name = p.nextElement();
/* 262 */           if (matcher.matches(name))
/* 263 */             names.addElement(name); 
/*     */         }  continue;
/*     */       } 
/* 266 */       if (ref.builtin != null) {
/*     */         
/* 268 */         Enumeration e2 = null;
/* 269 */         if (ref.builtin.equals(""all"")) {
/* 270 */           e2 = properties.keys();
/* 271 */         } else if (ref.builtin.equals(""system"")) {
/* 272 */           e2 = System.getProperties().keys();
/* 273 */         } else if (ref.builtin.equals(""commandline"")) {
/*     */           
/* 275 */           e2 = getProject().getUserProperties().keys();
/*     */         } else {
/* 277 */           throw new BuildException(""Impossible: Invalid builtin attribute!"");
/*     */         } 
/*     */ 
/*     */         
/* 281 */         while (e2.hasMoreElements()) {
/* 282 */           names.addElement(e2.nextElement());
/*     */         }
/*     */         continue;
/*     */       } 
/* 286 */       throw new BuildException(""Impossible: Invalid PropertyRef!"");
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 291 */     for (Enumeration e = this.setRefs.elements(); e.hasMoreElements(); ) {
/* 292 */       PropertySet set = e.nextElement();
/* 293 */       set.addPropertyNames(names, properties);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected PropertySet getRef() {
/* 302 */     if (!isChecked()) {
/* 303 */       Stack stk = new Stack();
/* 304 */       stk.push(this);
/* 305 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 308 */     Object o = getRefid().getReferencedObject(getProject());
/* 309 */     if (!(o instanceof PropertySet)) {
/* 310 */       String msg = getRefid().getRefId() + "" doesn't denote a propertyset"";
/*     */       
/* 312 */       throw new BuildException(msg);
/*     */     } 
/* 314 */     return (PropertySet)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setRefid(Reference r) {
/* 326 */     if (!this.noAttributeSet) {
/* 327 */       throw tooManyAttributes();
/*     */     }
/* 329 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void assertNotReference() {
/* 343 */     if (isReference()) {
/* 344 */       throw tooManyAttributes();
/*     */     }
/* 346 */     this.noAttributeSet = false;
/*     */   }
/*     */   
/*     */   private boolean noAttributeSet = true;
/*     */   
/*     */   public static class BuiltinPropertySetName
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     static final String ALL = ""all"";
/*     */     static final String SYSTEM = ""system"";
/*     */     static final String COMMANDLINE = ""commandline"";
/*     */     
/* 358 */     public String[] getValues() { return new String[] { ""all"", ""system"", ""commandline"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\PropertySet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Reference,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Project;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Reference
/*    */ {
/*    */   private String refid;
/*    */   
/*    */   public Reference() {}
/*    */   
/*    */   public Reference(String id) {
/* 74 */     this();
/* 75 */     setRefId(id);
/*    */   }
/*    */ 
/*    */   
/* 79 */   public void setRefId(String id) { this.refid = id; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public String getRefId() { return this.refid; }
/*    */ 
/*    */   
/*    */   public Object getReferencedObject(Project project) throws BuildException {
/* 87 */     if (this.refid == null) {
/* 88 */       throw new BuildException(""No reference specified"");
/*    */     }
/*    */     
/* 91 */     Object o = project.getReference(this.refid);
/* 92 */     if (o == null) {
/* 93 */       throw new BuildException(""Reference "" + this.refid + "" not found."");
/*    */     }
/* 95 */     return o;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Reference.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.RegularExpression,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ import org.apache.tools.ant.util.regexp.RegexpFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegularExpression
/*     */   extends DataType
/*     */ {
/*     */   public static final String DATA_TYPE_NAME = ""regexp"";
/* 104 */   private static final RegexpFactory factory = new RegexpFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   private Regexp regexp = factory.newRegexp();
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setPattern(String pattern) { this.regexp.setPattern(pattern); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getPattern(Project p) {
/* 121 */     if (isReference()) {
/* 122 */       return getRef(p).getPattern(p);
/*     */     }
/*     */     
/* 125 */     return this.regexp.getPattern();
/*     */   }
/*     */   
/*     */   public Regexp getRegexp(Project p) {
/* 129 */     if (isReference()) {
/* 130 */       return getRef(p).getRegexp(p);
/*     */     }
/* 132 */     return this.regexp;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RegularExpression getRef(Project p) {
/* 140 */     if (!isChecked()) {
/* 141 */       Stack stk = new Stack();
/* 142 */       stk.push(this);
/* 143 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */ 
/*     */     
/* 147 */     Object o = getRefid().getReferencedObject(p);
/* 148 */     if (!(o instanceof RegularExpression)) {
/* 149 */       String msg = getRefid().getRefId() + "" doesn't denote a "" + ""regexp"";
/*     */       
/* 151 */       throw new BuildException(msg);
/*     */     } 
/* 153 */     return (RegularExpression)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\RegularExpression.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Resource,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Resource
/*     */   implements Cloneable, Comparable
/*     */ {
/*  67 */   private String name = null;
/*     */   private boolean exists = true;
/*  69 */   private long lastmodified = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean directory = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public Resource(String name) { this(name, false, 0L, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public Resource(String name, boolean exists, long lastmodified) { this(name, exists, lastmodified, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource(String name, boolean exists, long lastmodified, boolean directory) {
/* 106 */     this.name = name;
/* 107 */     this.exists = exists;
/* 108 */     this.lastmodified = lastmodified;
/* 109 */     this.directory = directory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public boolean isExists() { return this.exists; }
/*     */ 
/*     */ 
/*     */   
/* 142 */   public void setExists(boolean exists) { this.exists = exists; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public long getLastModified() { return (!this.exists || this.lastmodified < 0L) ? 0L : this.lastmodified; }
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setLastModified(long lastmodified) { this.lastmodified = lastmodified; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public boolean isDirectory() { return this.directory; }
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setDirectory(boolean directory) { this.directory = directory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/*     */     try {
/* 175 */       return super.clone();
/*     */     } catch (CloneNotSupportedException e) {
/* 177 */       throw new Error(""CloneNotSupportedException for a Clonable Resource caught?"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int compareTo(Object other) {
/* 188 */     if (!(other instanceof Resource)) {
/* 189 */       throw new IllegalArgumentException(""Can only be compared with Resources"");
/*     */     }
/*     */     
/* 192 */     Resource r = (Resource)other;
/* 193 */     return getName().compareTo(r.getName());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Resource.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ResourceFactory,"package org.apache.tools.ant.types;
public interface ResourceFactory {
  Resource getResource(String paramString);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\ResourceFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ResourceLocation,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.net.URL;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResourceLocation
/*     */ {
/*  87 */   private String name = null;
/*     */ 
/*     */   
/*  90 */   private String publicId = null;
/*     */ 
/*     */   
/*  93 */   private String location = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private URL base = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setPublicId(String publicId) { this.publicId = publicId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setLocation(String location) { this.location = location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setBase(URL base) { this.base = base; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public String getPublicId() { return this.publicId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public String getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public URL getBase() { return this.base; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\ResourceLocation.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Substitution,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Substitution
/*     */   extends DataType
/*     */ {
/*     */   public static final String DATA_TYPE_NAME = ""substitition"";
/*  80 */   private String expression = null;
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setExpression(String expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getExpression(Project p) {
/*  92 */     if (isReference()) {
/*  93 */       return getRef(p).getExpression(p);
/*     */     }
/*     */     
/*  96 */     return this.expression;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Substitution getRef(Project p) {
/* 104 */     if (!isChecked()) {
/* 105 */       Stack stk = new Stack();
/* 106 */       stk.push(this);
/* 107 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */ 
/*     */     
/* 111 */     Object o = getRefid().getReferencedObject(p);
/* 112 */     if (!(o instanceof Substitution)) {
/* 113 */       String msg = getRefid().getRefId() + "" doesn't denote a substitution"";
/* 114 */       throw new BuildException(msg);
/*     */     } 
/* 116 */     return (Substitution)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\Substitution.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.XMLCatalog,"/*      */ package org.apache.tools.ant.types;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Method;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Stack;
/*      */ import java.util.Vector;
/*      */ import javax.xml.parsers.ParserConfigurationException;
/*      */ import javax.xml.parsers.SAXParserFactory;
/*      */ import javax.xml.transform.Source;
/*      */ import javax.xml.transform.TransformerException;
/*      */ import javax.xml.transform.URIResolver;
/*      */ import javax.xml.transform.sax.SAXSource;
/*      */ import org.apache.tools.ant.AntClassLoader;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JAXPUtils;
/*      */ import org.xml.sax.EntityResolver;
/*      */ import org.xml.sax.InputSource;
/*      */ import org.xml.sax.SAXException;
/*      */ import org.xml.sax.XMLReader;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class XMLCatalog
/*      */   extends DataType
/*      */   implements Cloneable, EntityResolver, URIResolver
/*      */ {
/*  164 */   private static FileUtils fileUtils = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  169 */   private Vector elements = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Path classpath;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Path catalogPath;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static final String APACHE_RESOLVER = ""org.apache.tools.ant.types.resolver.ApacheCatalogResolver"";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static final String CATALOG_RESOLVER = ""org.apache.xml.resolver.tools.CatalogResolver"";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private CatalogResolver catalogResolver;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static Class class$java$lang$String;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  210 */   private Vector getElements() { return (getRef()).elements; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  219 */   private Path getClasspath() { return (getRef()).classpath; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void setElements(Vector aVector) {
/*  232 */     if (isReference()) {
/*  233 */       throw noChildrenAllowed();
/*      */     }
/*  235 */     this.elements = aVector;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createClasspath() {
/*  247 */     if (isReference()) {
/*  248 */       throw noChildrenAllowed();
/*      */     }
/*  250 */     if (this.classpath == null) {
/*  251 */       this.classpath = new Path(getProject());
/*      */     }
/*  253 */     setChecked(false);
/*  254 */     return this.classpath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setClasspath(Path classpath) {
/*  266 */     if (isReference()) {
/*  267 */       throw tooManyAttributes();
/*      */     }
/*  269 */     if (this.classpath == null) {
/*  270 */       this.classpath = classpath;
/*      */     } else {
/*  272 */       this.classpath.append(classpath);
/*      */     } 
/*  274 */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setClasspathRef(Reference r) {
/*  286 */     if (isReference()) {
/*  287 */       throw tooManyAttributes();
/*      */     }
/*  289 */     createClasspath().setRefid(r);
/*  290 */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createCatalogPath() {
/*  303 */     if (isReference()) {
/*  304 */       throw noChildrenAllowed();
/*      */     }
/*  306 */     if (this.catalogPath == null) {
/*  307 */       this.catalogPath = new Path(getProject());
/*      */     }
/*  309 */     setChecked(false);
/*  310 */     return this.catalogPath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setCatalogPathRef(Reference r) {
/*  323 */     if (isReference()) {
/*  324 */       throw tooManyAttributes();
/*      */     }
/*  326 */     createCatalogPath().setRefid(r);
/*  327 */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  337 */   public Path getCatalogPath() { return (getRef()).catalogPath; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDTD(ResourceLocation dtd) throws BuildException {
/*  353 */     if (isReference()) {
/*  354 */       throw noChildrenAllowed();
/*      */     }
/*      */     
/*  357 */     getElements().addElement(dtd);
/*  358 */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  373 */   public void addEntity(ResourceLocation entity) throws BuildException { addDTD(entity); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addConfiguredXMLCatalog(XMLCatalog catalog) {
/*  385 */     if (isReference()) {
/*  386 */       throw noChildrenAllowed();
/*      */     }
/*      */ 
/*      */     
/*  390 */     Vector newElements = catalog.getElements();
/*  391 */     Vector ourElements = getElements();
/*  392 */     Enumeration e = newElements.elements();
/*  393 */     while (e.hasMoreElements()) {
/*  394 */       ourElements.addElement(e.nextElement());
/*      */     }
/*      */ 
/*      */     
/*  398 */     Path nestedClasspath = catalog.getClasspath();
/*  399 */     createClasspath().append(nestedClasspath);
/*      */ 
/*      */     
/*  402 */     Path nestedCatalogPath = catalog.getCatalogPath();
/*  403 */     createCatalogPath().append(nestedCatalogPath);
/*  404 */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setRefid(Reference r) throws BuildException {
/*  420 */     if (!this.elements.isEmpty()) {
/*  421 */       throw tooManyAttributes();
/*      */     }
/*  423 */     super.setRefid(r);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
/*  434 */     if (isReference()) {
/*  435 */       return getRef().resolveEntity(publicId, systemId);
/*      */     }
/*      */     
/*  438 */     if (!isChecked()) {
/*      */       
/*  440 */       Stack stk = new Stack();
/*  441 */       stk.push(this);
/*  442 */       dieOnCircularReference(stk, getProject());
/*      */     } 
/*      */     
/*  445 */     log(""resolveEntity: '"" + publicId + ""': '"" + systemId + ""'"", 4);
/*      */ 
/*      */     
/*  448 */     InputSource inputSource = getCatalogResolver().resolveEntity(publicId, systemId);
/*      */ 
/*      */     
/*  451 */     if (inputSource == null) {
/*  452 */       log(""No matching catalog entry found, parser will use: '"" + systemId + ""'"", 4);
/*      */     }
/*      */ 
/*      */     
/*  456 */     return inputSource;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Source resolve(String href, String base) throws TransformerException {
/*  467 */     if (isReference()) {
/*  468 */       return getRef().resolve(href, base);
/*      */     }
/*      */     
/*  471 */     if (!isChecked()) {
/*      */       
/*  473 */       Stack stk = new Stack();
/*  474 */       stk.push(this);
/*  475 */       dieOnCircularReference(stk, getProject());
/*      */     } 
/*      */     
/*  478 */     SAXSource source = null;
/*      */     
/*  480 */     String uri = removeFragment(href);
/*      */     
/*  482 */     log(""resolve: '"" + uri + ""' with base: '"" + base + ""'"", 4);
/*      */     
/*  484 */     source = (SAXSource)getCatalogResolver().resolve(uri, base);
/*      */     
/*  486 */     if (source == null) {
/*  487 */       log(""No matching catalog entry found, parser will use: '"" + href + ""'"", 4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  493 */       source = new SAXSource();
/*  494 */       URL baseURL = null;
/*      */       try {
/*  496 */         if (base == null) {
/*  497 */           baseURL = fileUtils.getFileURL(getProject().getBaseDir());
/*      */         } else {
/*  499 */           baseURL = new URL(base);
/*      */         } 
/*  501 */         URL url = (uri.length() == 0) ? baseURL : new URL(baseURL, uri);
/*  502 */         source.setInputSource(new InputSource(url.toString()));
/*      */       }
/*      */       catch (MalformedURLException ex) {
/*      */         
/*  506 */         source.setInputSource(new InputSource(uri));
/*      */       } 
/*      */     } 
/*      */     
/*  510 */     setEntityResolver(source);
/*  511 */     return source;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private XMLCatalog getRef() {
/*  518 */     if (!isReference()) {
/*  519 */       return this;
/*      */     }
/*  521 */     return (XMLCatalog)getCheckedRef(XMLCatalog.class, ""xmlcatalog"");
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public XMLCatalog() {
/*  527 */     this.catalogResolver = null;
/*      */     setChecked(false);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private CatalogResolver getCatalogResolver() {
/*  541 */     if (this.catalogResolver == null) {
/*      */       
/*  543 */       AntClassLoader loader = null;
/*      */       
/*  545 */       loader = getProject().createClassLoader(Path.systemClasspath);
/*      */       
/*      */       try {
/*  548 */         Class clazz = Class.forName(""org.apache.tools.ant.types.resolver.ApacheCatalogResolver"", true, (ClassLoader)loader);
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  553 */         ClassLoader apacheResolverLoader = clazz.getClassLoader();
/*      */ 
/*      */         
/*  556 */         Class baseResolverClass = Class.forName(""org.apache.xml.resolver.tools.CatalogResolver"", true, apacheResolverLoader);
/*      */ 
/*      */ 
/*      */         
/*  560 */         ClassLoader baseResolverLoader = baseResolverClass.getClassLoader();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  567 */         clazz = Class.forName(""org.apache.tools.ant.types.resolver.ApacheCatalogResolver"", true, baseResolverLoader);
/*      */         
/*  569 */         Object obj = clazz.newInstance();
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  574 */         this.catalogResolver = new ExternalResolver(this, clazz, obj);
/*      */       
/*      */       }
/*      */       catch (Throwable ex) {
/*      */ 
/*      */         
/*  580 */         this.catalogResolver = new InternalResolver(this);
/*  581 */         if (getCatalogPath() != null && (getCatalogPath().list()).length != 0)
/*      */         {
/*  583 */           log(""Warning: catalogpath listing external catalogs will be ignored"", 1);
/*      */         }
/*      */         
/*  586 */         log(""Failed to load Apache resolver: "" + ex, 4);
/*      */       } 
/*      */     } 
/*  589 */     return this.catalogResolver;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void setEntityResolver(SAXSource source) throws TransformerException {
/*  613 */     XMLReader reader = source.getXMLReader();
/*  614 */     if (reader == null) {
/*  615 */       SAXParserFactory spFactory = SAXParserFactory.newInstance();
/*  616 */       spFactory.setNamespaceAware(true);
/*      */       try {
/*  618 */         reader = spFactory.newSAXParser().getXMLReader();
/*      */       } catch (ParserConfigurationException ex) {
/*  620 */         throw new TransformerException(ex);
/*      */       } catch (SAXException ex) {
/*  622 */         throw new TransformerException(ex);
/*      */       } 
/*      */     } 
/*  625 */     reader.setEntityResolver(this);
/*  626 */     source.setXMLReader(reader);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private ResourceLocation findMatchingEntry(String publicId) {
/*  638 */     Enumeration e = getElements().elements();
/*  639 */     ResourceLocation element = null;
/*  640 */     while (e.hasMoreElements()) {
/*  641 */       Object o = e.nextElement();
/*  642 */       if (o instanceof ResourceLocation) {
/*  643 */         element = (ResourceLocation)o;
/*  644 */         if (element.getPublicId().equals(publicId)) {
/*  645 */           return element;
/*      */         }
/*      */       } 
/*      */     } 
/*  649 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private String removeFragment(String uri) {
/*  663 */     String result = uri;
/*  664 */     int hashPos = uri.indexOf(""#"");
/*  665 */     if (hashPos >= 0) {
/*  666 */       result = uri.substring(0, hashPos);
/*      */     }
/*  668 */     return result;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputSource filesystemLookup(ResourceLocation matchingEntry) {
/*  679 */     String uri = matchingEntry.getLocation();
/*      */     
/*  681 */     uri = uri.replace(File.separatorChar, '/');
/*  682 */     URL baseURL = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  689 */     if (matchingEntry.getBase() != null) {
/*  690 */       baseURL = matchingEntry.getBase();
/*      */     } else {
/*      */       try {
/*  693 */         baseURL = fileUtils.getFileURL(getProject().getBaseDir());
/*      */       } catch (MalformedURLException ex) {
/*  695 */         throw new BuildException(""Project basedir cannot be converted to a URL"");
/*      */       } 
/*      */     } 
/*      */     
/*  699 */     InputSource source = null;
/*  700 */     URL url = null;
/*      */     try {
/*  702 */       url = new URL(baseURL, uri);
/*      */     }
/*      */     catch (MalformedURLException ex) {
/*      */       
/*  706 */       File testFile = new File(uri);
/*  707 */       if (testFile.exists() && testFile.canRead()) {
/*  708 */         log(""uri : '"" + uri + ""' matches a readable file"", 4);
/*      */         
/*      */         try {
/*  711 */           url = fileUtils.getFileURL(testFile);
/*      */         } catch (MalformedURLException ex1) {
/*  713 */           throw new BuildException(""could not find an URL for :"" + testFile.getAbsolutePath());
/*      */         } 
/*      */       } else {
/*  716 */         log(""uri : '"" + uri + ""' does not match a readable file"", 4);
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  722 */     if (url != null) {
/*  723 */       String fileName = url.getFile();
/*  724 */       if (fileName != null) {
/*  725 */         log(""fileName "" + fileName, 4);
/*  726 */         File resFile = new File(fileName);
/*  727 */         if (resFile.exists() && resFile.canRead()) {
/*      */           try {
/*  729 */             source = new InputSource(new FileInputStream(resFile));
/*  730 */             String sysid = JAXPUtils.getSystemId(resFile);
/*  731 */             source.setSystemId(sysid);
/*  732 */             log(""catalog entry matched a readable file: '"" + sysid + ""'"", 4);
/*      */           }
/*  734 */           catch (IOException ex) {}
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  740 */     return source;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputSource classpathLookup(ResourceLocation matchingEntry) {
/*  751 */     InputSource source = null;
/*      */     
/*  753 */     AntClassLoader loader = null;
/*  754 */     Path cp = this.classpath;
/*  755 */     if (cp != null) {
/*  756 */       cp = this.classpath.concatSystemClasspath(""ignore"");
/*      */     } else {
/*  758 */       cp = (new Path(getProject())).concatSystemClasspath(""last"");
/*      */     } 
/*  760 */     loader = getProject().createClassLoader(cp);
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  765 */     InputStream is = loader.getResourceAsStream(matchingEntry.getLocation());
/*      */ 
/*      */     
/*  768 */     if (is != null) {
/*  769 */       source = new InputSource(is);
/*  770 */       URL entryURL = loader.getResource(matchingEntry.getLocation());
/*  771 */       String sysid = entryURL.toExternalForm();
/*  772 */       source.setSystemId(sysid);
/*  773 */       log(""catalog entry matched a resource in the classpath: '"" + sysid + ""'"", 4);
/*      */     } 
/*      */ 
/*      */     
/*  777 */     return source;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputSource urlLookup(ResourceLocation matchingEntry) {
/*  788 */     String uri = matchingEntry.getLocation();
/*  789 */     URL baseURL = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  796 */     if (matchingEntry.getBase() != null) {
/*  797 */       baseURL = matchingEntry.getBase();
/*      */     } else {
/*      */       try {
/*  800 */         baseURL = fileUtils.getFileURL(getProject().getBaseDir());
/*      */       } catch (MalformedURLException ex) {
/*  802 */         throw new BuildException(""Project basedir cannot be converted to a URL"");
/*      */       } 
/*      */     } 
/*      */     
/*  806 */     InputSource source = null;
/*  807 */     URL url = null;
/*      */     
/*      */     try {
/*  810 */       url = new URL(baseURL, uri);
/*  811 */     } catch (MalformedURLException ex) {}
/*      */ 
/*      */ 
/*      */     
/*  815 */     if (url != null) {
/*      */       try {
/*  817 */         InputStream is = url.openStream();
/*  818 */         if (is != null) {
/*  819 */           source = new InputSource(is);
/*  820 */           String sysid = url.toExternalForm();
/*  821 */           source.setSystemId(sysid);
/*  822 */           log(""catalog entry matched as a URL: '"" + sysid + ""'"", 4);
/*      */         }
/*      */       
/*  825 */       } catch (IOException ex) {}
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  830 */     return source;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private static interface CatalogResolver
/*      */     extends URIResolver, EntityResolver
/*      */   {
/*      */     InputSource resolveEntity(String param1String1, String param1String2);
/*      */ 
/*      */ 
/*      */     
/*      */     Source resolve(String param1String1, String param1String2) throws TransformerException;
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private class InternalResolver
/*      */     implements CatalogResolver
/*      */   {
/*      */     private final XMLCatalog this$0;
/*      */ 
/*      */     
/*      */     public InternalResolver(XMLCatalog this$0) {
/*  854 */       this.this$0 = this$0;
/*  855 */       this$0.log(""Apache resolver library not found, internal resolver will be used"", 3);
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     public InputSource resolveEntity(String publicId, String systemId) {
/*  861 */       InputSource result = null;
/*  862 */       ResourceLocation matchingEntry = this.this$0.findMatchingEntry(publicId);
/*      */       
/*  864 */       if (matchingEntry != null) {
/*      */         
/*  866 */         this.this$0.log(""Matching catalog entry found for publicId: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  871 */         result = this.this$0.filesystemLookup(matchingEntry);
/*      */         
/*  873 */         if (result == null) {
/*  874 */           result = this.this$0.classpathLookup(matchingEntry);
/*      */         }
/*      */         
/*  877 */         if (result == null) {
/*  878 */           result = this.this$0.urlLookup(matchingEntry);
/*      */         }
/*      */       } 
/*  881 */       return result;
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     public Source resolve(String href, String base) throws TransformerException {
/*  887 */       SAXSource result = null;
/*  888 */       InputSource source = null;
/*      */       
/*  890 */       ResourceLocation matchingEntry = this.this$0.findMatchingEntry(href);
/*      */       
/*  892 */       if (matchingEntry != null) {
/*      */         
/*  894 */         this.this$0.log(""Matching catalog entry found for uri: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  909 */         ResourceLocation entryCopy = matchingEntry;
/*  910 */         if (base != null) {
/*      */           try {
/*  912 */             URL baseURL = new URL(base);
/*  913 */             entryCopy = new ResourceLocation();
/*  914 */             entryCopy.setBase(baseURL);
/*  915 */           } catch (MalformedURLException ex) {}
/*      */         }
/*      */ 
/*      */         
/*  919 */         entryCopy.setPublicId(matchingEntry.getPublicId());
/*  920 */         entryCopy.setLocation(matchingEntry.getLocation());
/*      */         
/*  922 */         source = this.this$0.filesystemLookup(entryCopy);
/*      */         
/*  924 */         if (source == null) {
/*  925 */           source = this.this$0.classpathLookup(entryCopy);
/*      */         }
/*      */         
/*  928 */         if (source == null) {
/*  929 */           source = this.this$0.urlLookup(entryCopy);
/*      */         }
/*      */         
/*  932 */         if (source != null) {
/*  933 */           result = new SAXSource(source);
/*      */         }
/*      */       } 
/*  936 */       return result;
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   private class ExternalResolver
/*      */     implements CatalogResolver
/*      */   {
/*      */     private Method setXMLCatalog;
/*      */     
/*      */     private Method parseCatalog;
/*      */     
/*      */     private Method resolveEntity;
/*      */     
/*      */     private Method resolve;
/*      */     
/*      */     private Object resolverImpl;
/*      */     
/*      */     private boolean externalCatalogsProcessed;
/*      */     
/*      */     private final XMLCatalog this$0;
/*      */ 
/*      */     
/*      */     public ExternalResolver(XMLCatalog this$0, Class resolverImplClass, Object resolverImpl) {
/*  960 */       this.this$0 = this$0; this.setXMLCatalog = null; this.parseCatalog = null; this.resolveEntity = null; this.resolve = null; this.resolverImpl = null;
/*      */       this.externalCatalogsProcessed = false;
/*  962 */       this.resolverImpl = resolverImpl;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       try {
/*  972 */         this.setXMLCatalog = resolverImplClass.getMethod(""setXMLCatalog"", new Class[] { (XMLCatalog.class$org$apache$tools$ant$types$XMLCatalog == null) ? (XMLCatalog.class$org$apache$tools$ant$types$XMLCatalog = XMLCatalog.class$(""org.apache.tools.ant.types.XMLCatalog"")) : XMLCatalog.class$org$apache$tools$ant$types$XMLCatalog });
/*      */ 
/*      */ 
/*      */         
/*  976 */         this.parseCatalog = resolverImplClass.getMethod(""parseCatalog"", new Class[] { (XMLCatalog.class$java$lang$String == null) ? (XMLCatalog.class$java$lang$String = XMLCatalog.class$(""java.lang.String"")) : XMLCatalog.class$java$lang$String });
/*      */ 
/*      */ 
/*      */         
/*  980 */         this.resolveEntity = resolverImplClass.getMethod(""resolveEntity"", new Class[] { (XMLCatalog.class$java$lang$String == null) ? (XMLCatalog.class$java$lang$String = XMLCatalog.class$(""java.lang.String"")) : XMLCatalog.class$java$lang$String, (XMLCatalog.class$java$lang$String == null) ? (XMLCatalog.class$java$lang$String = XMLCatalog.class$(""java.lang.String"")) : XMLCatalog.class$java$lang$String });
/*      */ 
/*      */ 
/*      */         
/*  984 */         this.resolve = resolverImplClass.getMethod(""resolve"", new Class[] { (XMLCatalog.class$java$lang$String == null) ? (XMLCatalog.class$java$lang$String = XMLCatalog.class$(""java.lang.String"")) : XMLCatalog.class$java$lang$String, (XMLCatalog.class$java$lang$String == null) ? (XMLCatalog.class$java$lang$String = XMLCatalog.class$(""java.lang.String"")) : XMLCatalog.class$java$lang$String });
/*      */       }
/*      */       catch (NoSuchMethodException ex) {
/*      */         
/*  988 */         throw new BuildException(ex);
/*      */       } 
/*      */       
/*  991 */       this$0.log(""Apache resolver library found, xml-commons resolver will be used"", 3);
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     public InputSource resolveEntity(String publicId, String systemId) {
/*  997 */       InputSource result = null;
/*      */       
/*  999 */       processExternalCatalogs();
/*      */       
/* 1001 */       ResourceLocation matchingEntry = this.this$0.findMatchingEntry(publicId);
/*      */       
/* 1003 */       if (matchingEntry != null) {
/*      */         
/* 1005 */         this.this$0.log(""Matching catalog entry found for publicId: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 1010 */         result = this.this$0.filesystemLookup(matchingEntry);
/*      */         
/* 1012 */         if (result == null) {
/* 1013 */           result = this.this$0.classpathLookup(matchingEntry);
/*      */         }
/*      */         
/* 1016 */         if (result == null) {
/*      */           try {
/* 1018 */             result = (InputSource)this.resolveEntity.invoke(this.resolverImpl, new Object[] { publicId, systemId });
/*      */           }
/*      */           catch (Exception ex) {
/*      */             
/* 1022 */             throw new BuildException(ex);
/*      */           } 
/*      */         }
/*      */       } else {
/*      */ 
/*      */         
/*      */         try {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1035 */           result = (InputSource)this.resolveEntity.invoke(this.resolverImpl, new Object[] { publicId, systemId });
/*      */         }
/*      */         catch (Exception ex) {
/*      */           
/* 1039 */           throw new BuildException(ex);
/*      */         } 
/*      */       } 
/*      */       
/* 1043 */       return result;
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*      */     public Source resolve(String href, String base) throws TransformerException {
/* 1049 */       SAXSource result = null;
/* 1050 */       InputSource source = null;
/*      */       
/* 1052 */       processExternalCatalogs();
/*      */       
/* 1054 */       ResourceLocation matchingEntry = this.this$0.findMatchingEntry(href);
/*      */       
/* 1056 */       if (matchingEntry != null) {
/*      */         
/* 1058 */         this.this$0.log(""Matching catalog entry found for uri: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 1075 */         ResourceLocation entryCopy = matchingEntry;
/* 1076 */         if (base != null) {
/*      */           try {
/* 1078 */             URL baseURL = new URL(base);
/* 1079 */             entryCopy = new ResourceLocation();
/* 1080 */             entryCopy.setBase(baseURL);
/* 1081 */           } catch (MalformedURLException ex) {}
/*      */         }
/*      */ 
/*      */         
/* 1085 */         entryCopy.setPublicId(matchingEntry.getPublicId());
/* 1086 */         entryCopy.setLocation(matchingEntry.getLocation());
/*      */         
/* 1088 */         source = this.this$0.filesystemLookup(entryCopy);
/*      */         
/* 1090 */         if (source == null) {
/* 1091 */           source = this.this$0.classpathLookup(entryCopy);
/*      */         }
/*      */         
/* 1094 */         if (source != null) {
/* 1095 */           result = new SAXSource(source);
/*      */         } else {
/*      */           try {
/* 1098 */             result = (SAXSource)this.resolve.invoke(this.resolverImpl, new Object[] { href, base });
/*      */           }
/*      */           catch (Exception ex) {
/*      */             
/* 1102 */             throw new BuildException(ex);
/*      */           } 
/*      */         } 
/*      */       } else {
/*      */ 
/*      */         
/*      */         try {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1115 */           result = (SAXSource)this.resolve.invoke(this.resolverImpl, new Object[] { href, base });
/*      */         }
/*      */         catch (Exception ex) {
/*      */           
/* 1119 */           throw new BuildException(ex);
/*      */         } 
/*      */       } 
/* 1122 */       return result;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void processExternalCatalogs() {
/* 1134 */       if (!this.externalCatalogsProcessed) {
/*      */         
/*      */         try {
/* 1137 */           this.setXMLCatalog.invoke(this.resolverImpl, new Object[] { this.this$0 });
/*      */         } catch (Exception ex) {
/*      */           
/* 1140 */           throw new BuildException(ex);
/*      */         } 
/*      */ 
/*      */         
/* 1144 */         Path catPath = this.this$0.getCatalogPath();
/* 1145 */         if (catPath != null) {
/* 1146 */           this.this$0.log(""Using catalogpath '"" + this.this$0.getCatalogPath() + ""'"", 4);
/*      */           
/* 1148 */           String[] catPathList = this.this$0.getCatalogPath().list();
/*      */           
/* 1150 */           for (int i = 0; i < catPathList.length; i++) {
/* 1151 */             File catFile = new File(catPathList[i]);
/* 1152 */             this.this$0.log(""Parsing "" + catFile, 4);
/*      */             try {
/* 1154 */               this.parseCatalog.invoke(this.resolverImpl, new Object[] { catFile.getPath() });
/*      */             } catch (Exception ex) {
/*      */               
/* 1157 */               throw new BuildException(ex);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */       } 
/* 1162 */       this.externalCatalogsProcessed = true;
/*      */     }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\XMLCatalog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipFileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipFileSet
/*     */   extends FileSet
/*     */ {
/*     */   public static final int DEFAULT_DIR_MODE = 16877;
/*     */   public static final int DEFAULT_FILE_MODE = 33188;
/*  94 */   private File srcFile = null;
/*  95 */   private String prefix = """";
/*  96 */   private String fullpath = """";
/*     */   private boolean hasDir = false;
/*  98 */   private int fileMode = 33188;
/*  99 */   private int dirMode = 16877;
/*     */   
/*     */   private boolean fileModeHasBeenSet = false;
/*     */   
/*     */   private boolean dirModeHasBeenSet = false;
/*     */ 
/*     */   
/*     */   public ZipFileSet() {}
/*     */ 
/*     */   
/* 109 */   protected ZipFileSet(FileSet fileset) { super(fileset); }
/*     */ 
/*     */   
/*     */   protected ZipFileSet(ZipFileSet fileset) {
/* 113 */     super(fileset);
/* 114 */     this.srcFile = fileset.srcFile;
/* 115 */     this.prefix = fileset.prefix;
/* 116 */     this.fullpath = fileset.fullpath;
/* 117 */     this.hasDir = fileset.hasDir;
/* 118 */     this.fileMode = fileset.fileMode;
/* 119 */     this.dirMode = fileset.dirMode;
/* 120 */     this.fileModeHasBeenSet = fileset.fileModeHasBeenSet;
/* 121 */     this.dirModeHasBeenSet = fileset.dirModeHasBeenSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 129 */     if (isReference()) {
/* 130 */       throw tooManyAttributes();
/*     */     }
/* 132 */     if (this.srcFile != null) {
/* 133 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/* 135 */     super.setDir(dir);
/* 136 */     this.hasDir = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrc(File srcFile) {
/* 147 */     if (isReference()) {
/* 148 */       throw tooManyAttributes();
/*     */     }
/* 150 */     if (this.hasDir) {
/* 151 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/* 153 */     this.srcFile = srcFile;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File getSrc(Project p) {
/* 162 */     if (isReference()) {
/* 163 */       return ((ZipFileSet)getRef(p)).getSrc(p);
/*     */     }
/* 165 */     return this.srcFile;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/* 175 */     if (!prefix.equals("""") && !this.fullpath.equals("""")) {
/* 176 */       throw new BuildException(""Cannot set both fullpath and prefix attributes"");
/*     */     }
/* 178 */     this.prefix = prefix;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getPrefix(Project p) {
/* 185 */     if (isReference()) {
/* 186 */       return ((ZipFileSet)getRef(p)).getPrefix(p);
/*     */     }
/* 188 */     return this.prefix;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFullpath(String fullpath) {
/* 198 */     if (!this.prefix.equals("""") && !fullpath.equals("""")) {
/* 199 */       throw new BuildException(""Cannot set both fullpath and prefix attributes"");
/*     */     }
/* 201 */     this.fullpath = fullpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getFullpath(Project p) {
/* 208 */     if (isReference()) {
/* 209 */       return ((ZipFileSet)getRef(p)).getFullpath(p);
/*     */     }
/* 211 */     return this.fullpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project p) {
/* 220 */     if (isReference()) {
/* 221 */       return getRef(p).getDirectoryScanner(p);
/*     */     }
/* 223 */     if (this.srcFile != null) {
/* 224 */       ZipScanner zs = new ZipScanner();
/* 225 */       zs.setSrc(this.srcFile);
/* 226 */       super.setDir(p.getBaseDir());
/* 227 */       setupDirectoryScanner((FileScanner)zs, p);
/* 228 */       zs.init();
/* 229 */       return zs;
/*     */     } 
/* 231 */     return super.getDirectoryScanner(p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFileMode(String octalString) {
/* 243 */     this.fileModeHasBeenSet = true;
/* 244 */     this.fileMode = 0x8000 | Integer.parseInt(octalString, 8);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int getFileMode(Project p) {
/* 252 */     if (isReference()) {
/* 253 */       return ((ZipFileSet)getRef(p)).getFileMode(p);
/*     */     }
/* 255 */     return this.fileMode;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasFileModeBeenSet() {
/* 264 */     if (isReference()) {
/* 265 */       return ((ZipFileSet)getRef(getProject())).hasFileModeBeenSet();
/*     */     }
/* 267 */     return this.fileModeHasBeenSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDirMode(String octalString) {
/* 278 */     this.dirModeHasBeenSet = true;
/* 279 */     this.dirMode = 0x4000 | Integer.parseInt(octalString, 8);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int getDirMode(Project p) {
/* 287 */     if (isReference()) {
/* 288 */       return ((ZipFileSet)getRef(p)).getDirMode(p);
/*     */     }
/* 290 */     return this.dirMode;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasDirModeBeenSet() {
/* 299 */     if (isReference()) {
/* 300 */       return ((ZipFileSet)getRef(getProject())).hasDirModeBeenSet();
/*     */     }
/* 302 */     return this.dirModeHasBeenSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected AbstractFileSet getRef(Project p) {
/* 310 */     if (!isChecked()) {
/* 311 */       Stack stk = new Stack();
/* 312 */       stk.push(this);
/* 313 */       dieOnCircularReference(stk, p);
/*     */     } 
/* 315 */     Object o = getRefid().getReferencedObject(p);
/* 316 */     if (o instanceof ZipFileSet)
/* 317 */       return (AbstractFileSet)o; 
/* 318 */     if (o instanceof FileSet) {
/* 319 */       ZipFileSet zfs = new ZipFileSet((FileSet)o);
/* 320 */       zfs.setPrefix(this.prefix);
/* 321 */       zfs.setFullpath(this.fullpath);
/* 322 */       zfs.fileModeHasBeenSet = this.fileModeHasBeenSet;
/* 323 */       zfs.fileMode = this.fileMode;
/* 324 */       zfs.dirModeHasBeenSet = this.dirModeHasBeenSet;
/* 325 */       zfs.dirMode = this.dirMode;
/* 326 */       return zfs;
/*     */     } 
/* 328 */     String msg = getRefid().getRefId() + "" doesn't denote a zipfileset or a fileset"";
/* 329 */     throw new BuildException(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 338 */     if (isReference()) {
/* 339 */       return ((ZipFileSet)getRef(getProject())).clone();
/*     */     }
/* 341 */     return super.clone();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\ZipFileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipScanner,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Arrays;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.zip.ZipEntry;
/*     */ import org.apache.tools.zip.ZipFile;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipScanner
/*     */   extends DirectoryScanner
/*     */ {
/*     */   protected File srcFile;
/*     */   private Resource lastScannedResource;
/*     */   private Hashtable myentries;
/*     */   private String encoding;
/*     */   
/* 109 */   public void setSrc(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedFiles() {
/* 130 */     if (this.srcFile != null) {
/* 131 */       Vector myvector = new Vector();
/*     */       
/* 133 */       scanme();
/* 134 */       for (Enumeration e = this.myentries.elements(); e.hasMoreElements(); ) {
/* 135 */         Resource myresource = e.nextElement();
/* 136 */         if (!myresource.isDirectory() && match(myresource.getName())) {
/* 137 */           myvector.addElement(myresource.getName());
/*     */         }
/*     */       } 
/* 140 */       String[] files = new String[myvector.size()];
/* 141 */       myvector.copyInto((Object[])files);
/* 142 */       Arrays.sort((Object[])files);
/* 143 */       return files;
/*     */     } 
/* 145 */     return super.getIncludedFiles();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedDirectories() {
/* 158 */     if (this.srcFile != null) {
/* 159 */       Vector myvector = new Vector();
/*     */       
/* 161 */       scanme();
/* 162 */       for (Enumeration e = this.myentries.elements(); e.hasMoreElements(); ) {
/* 163 */         Resource myresource = e.nextElement();
/* 164 */         if (myresource.isDirectory() && match(myresource.getName())) {
/* 165 */           myvector.addElement(myresource.getName());
/*     */         }
/*     */       } 
/* 168 */       String[] files = new String[myvector.size()];
/* 169 */       myvector.copyInto((Object[])files);
/* 170 */       Arrays.sort((Object[])files);
/* 171 */       return files;
/*     */     } 
/* 173 */     return super.getIncludedDirectories();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 181 */     if (this.includes == null) {
/*     */       
/* 183 */       this.includes = new String[1];
/* 184 */       this.includes[0] = ""**"";
/*     */     } 
/* 186 */     if (this.excludes == null) {
/* 187 */       this.excludes = new String[0];
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean match(String path) {
/* 201 */     String vpath = path.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     
/* 203 */     return (isIncluded(vpath) && !isExcluded(vpath));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource getResource(String name) {
/* 212 */     if (this.srcFile == null)
/* 213 */       return super.getResource(name); 
/* 214 */     if (name.equals(""""))
/*     */     {
/* 216 */       return new Resource("""", true, Long.MAX_VALUE, true);
/*     */     }
/*     */ 
/*     */     
/* 220 */     scanme();
/* 221 */     if (this.myentries.containsKey(name))
/* 222 */       return (Resource)this.myentries.get(name); 
/* 223 */     if (this.myentries.containsKey(name + ""/"")) {
/* 224 */       return (Resource)this.myentries.get(name + ""/"");
/*     */     }
/* 226 */     return new Resource(name);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void scanme() {
/* 238 */     Resource thisresource = new Resource(this.srcFile.getAbsolutePath(), this.srcFile.exists(), this.srcFile.lastModified());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 243 */     if (this.lastScannedResource != null && this.lastScannedResource.getName().equals(thisresource.getName()) && this.lastScannedResource.getLastModified() == thisresource.getLastModified()) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 250 */     ZipEntry entry = null;
/* 251 */     ZipFile zf = null;
/* 252 */     this.myentries = new Hashtable();
/*     */     
/*     */     try {
/* 255 */       zf = new ZipFile(this.srcFile, this.encoding);
/*     */     } catch (ZipException ex) {
/* 257 */       throw new BuildException(""problem reading "" + this.srcFile, ex);
/*     */     } catch (IOException ex) {
/* 259 */       throw new BuildException(""problem opening "" + this.srcFile, ex);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*     */     finally {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 271 */       if (zf != null) {
/*     */         try {
/* 273 */           zf.close();
/* 274 */         } catch (IOException ex) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 280 */     this.lastScannedResource = thisresource;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\ZipScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.resolver.ApacheCatalog,"/*     */ package org.apache.tools.ant.types.resolver;
/*     */ 
/*     */ import org.apache.xml.resolver.Catalog;
/*     */ import org.apache.xml.resolver.CatalogEntry;
/*     */ import org.apache.xml.resolver.helpers.PublicId;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ApacheCatalog
/*     */   extends Catalog
/*     */ {
/*  82 */   private ApacheCatalogResolver resolver = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Catalog newCatalog() {
/*  95 */     ApacheCatalog cat = (ApacheCatalog)super.newCatalog();
/*  96 */     cat.setResolver(this.resolver);
/*  97 */     return cat;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setResolver(ApacheCatalogResolver resolver) { this.resolver = resolver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addEntry(CatalogEntry entry) {
/* 124 */     int type = entry.getEntryType();
/*     */     
/* 126 */     if (type == Catalog.PUBLIC) {
/*     */       
/* 128 */       String publicid = PublicId.normalize(entry.getEntryArg(0));
/* 129 */       String systemid = normalizeURI(entry.getEntryArg(1));
/*     */       
/* 131 */       if (this.resolver == null) {
/* 132 */         this.catalogManager.debug.message(1, ""Internal Error: null ApacheCatalogResolver"");
/*     */       } else {
/*     */         
/* 135 */         this.resolver.addPublicEntry(publicid, systemid, this.base);
/*     */       }
/*     */     
/* 138 */     } else if (type == Catalog.URI) {
/*     */       
/* 140 */       String uri = normalizeURI(entry.getEntryArg(0));
/* 141 */       String altURI = normalizeURI(entry.getEntryArg(1));
/*     */       
/* 143 */       if (this.resolver == null) {
/* 144 */         this.catalogManager.debug.message(1, ""Internal Error: null ApacheCatalogResolver"");
/*     */       } else {
/*     */         
/* 147 */         this.resolver.addURIEntry(uri, altURI, this.base);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 152 */     super.addEntry(entry);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\resolver\ApacheCatalog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.resolver.ApacheCatalogResolver,"/*     */ package org.apache.tools.ant.types.resolver;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.ResourceLocation;
/*     */ import org.apache.tools.ant.types.XMLCatalog;
/*     */ import org.apache.xml.resolver.Catalog;
/*     */ import org.apache.xml.resolver.CatalogManager;
/*     */ import org.apache.xml.resolver.tools.CatalogResolver;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ApacheCatalogResolver
/*     */   extends CatalogResolver
/*     */ {
/* 105 */   private XMLCatalog xmlCatalog = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/* 116 */     CatalogManager.getStaticManager().setIgnoreMissingProperties(true);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 122 */     System.getProperties().put(""xml.catalog.className"", ApacheCatalog.class.getName());
/*     */ 
/*     */     
/* 125 */     CatalogManager.getStaticManager().setUseStaticCatalog(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setXMLCatalog(XMLCatalog xmlCatalog) { this.xmlCatalog = xmlCatalog; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseCatalog(String file) {
/* 142 */     Catalog _catalog = getCatalog();
/* 143 */     if (!(_catalog instanceof ApacheCatalog)) {
/* 144 */       throw new BuildException(""Wrong catalog type found: "" + _catalog.getClass().getName());
/*     */     }
/* 146 */     ApacheCatalog catalog = (ApacheCatalog)_catalog;
/*     */ 
/*     */     
/* 149 */     catalog.setResolver(this);
/*     */     
/*     */     try {
/* 152 */       catalog.parseCatalog(file);
/*     */     } catch (MalformedURLException ex) {
/* 154 */       throw new BuildException(ex);
/*     */     } catch (IOException ex) {
/* 156 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addPublicEntry(String publicid, String systemid, URL base) {
/* 177 */     ResourceLocation dtd = new ResourceLocation();
/* 178 */     dtd.setBase(base);
/* 179 */     dtd.setPublicId(publicid);
/* 180 */     dtd.setLocation(systemid);
/*     */     
/* 182 */     this.xmlCatalog.addDTD(dtd);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addURIEntry(String uri, String altURI, URL base) {
/* 203 */     ResourceLocation entity = new ResourceLocation();
/* 204 */     entity.setBase(base);
/* 205 */     entity.setPublicId(uri);
/* 206 */     entity.setLocation(altURI);
/*     */     
/* 208 */     this.xmlCatalog.addEntity(entity);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\resolver\ApacheCatalogResolver.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.AndSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AndSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  79 */     StringBuffer buf = new StringBuffer();
/*  80 */     if (hasSelectors()) {
/*  81 */       buf.append(""{andselect: "");
/*  82 */       buf.append(super.toString());
/*  83 */       buf.append(""}"");
/*     */     } 
/*  85 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/*  99 */     validate();
/* 100 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 103 */     while (e.hasMoreElements()) {
/* 104 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 106 */       if (!result) {
/* 107 */         return false;
/*     */       }
/*     */     } 
/* 110 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\AndSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseExtendSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseExtendSelector
/*     */   extends BaseSelector
/*     */   implements ExtendFileSelector
/*     */ {
/*  75 */   protected Parameter[] parameters = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setParameters(Parameter[] parameters) { this.parameters = parameters; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   protected Parameter[] getParameters() { return this.parameters; }
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2) throws BuildException;
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\BaseExtendSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.DataType;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseSelector
/*     */   extends DataType
/*     */   implements FileSelector
/*     */ {
/*  73 */   private String errmsg = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setError(String msg) {
/*  89 */     if (this.errmsg == null) {
/*  90 */       this.errmsg = msg;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getError() { return this.errmsg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() {
/* 120 */     if (getError() == null) {
/* 121 */       verifySettings();
/*     */     }
/* 123 */     if (getError() != null)
/* 124 */       throw new BuildException(this.errmsg); 
/*     */   }
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2);
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\BaseSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseSelectorContainer,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseSelectorContainer
/*     */   extends BaseSelector
/*     */   implements SelectorContainer
/*     */ {
/*  74 */   private Vector selectorsList = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public boolean hasSelectors() { return !this.selectorsList.isEmpty(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public int selectorCount() { return this.selectorsList.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 104 */     FileSelector[] result = new FileSelector[this.selectorsList.size()];
/* 105 */     this.selectorsList.copyInto((Object[])result);
/* 106 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public Enumeration selectorElements() { return this.selectorsList.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 125 */     StringBuffer buf = new StringBuffer();
/* 126 */     Enumeration e = selectorElements();
/* 127 */     if (e.hasMoreElements()) {
/* 128 */       while (e.hasMoreElements()) {
/* 129 */         buf.append(e.nextElement().toString());
/* 130 */         if (e.hasMoreElements()) {
/* 131 */           buf.append("", "");
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 136 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void appendSelector(FileSelector selector) { this.selectorsList.addElement(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() {
/* 165 */     verifySettings();
/* 166 */     String errmsg = getError();
/* 167 */     if (errmsg != null) {
/* 168 */       throw new BuildException(errmsg);
/*     */     }
/* 170 */     Enumeration e = selectorElements();
/* 171 */     while (e.hasMoreElements()) {
/* 172 */       Object o = e.nextElement();
/* 173 */       if (o instanceof BaseSelector) {
/* 174 */         ((BaseSelector)o).validate();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void addSelector(SelectSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void addAnd(AndSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void addOr(OrSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void addNot(NotSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void addNone(NoneSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void addMajority(MajoritySelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public void addDate(DateSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void addSize(SizeSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 265 */   public void addFilename(FilenameSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 273 */   public void addCustom(ExtendSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void addContains(ContainsSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void addPresent(PresentSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void addDepth(DepthSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 305 */   public void addDepend(DependSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void addDifferent(DifferentSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 321 */   public void addType(TypeSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 329 */   public void addContainsRegexp(ContainsRegexpSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 338 */   public void addModified(ModifiedSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 347 */   public void add(FileSelector selector) { appendSelector(selector); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\BaseSelectorContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ContainsRegexpSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.RegularExpression;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ContainsRegexpSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  76 */   private String userProvidedExpression = null;
/*  77 */   private RegularExpression myRegExp = null;
/*  78 */   private Regexp myExpression = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String EXPRESSION_KEY = ""expression"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buf = new StringBuffer(""{containsregexpselector expression: "");
/*     */     
/*  94 */     buf.append(this.userProvidedExpression);
/*  95 */     buf.append(""}"");
/*  96 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setExpression(String theexpression) { this.userProvidedExpression = theexpression; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 115 */     super.setParameters(parameters);
/* 116 */     if (parameters != null) {
/* 117 */       for (int i = 0; i < parameters.length; i++) {
/* 118 */         String paramname = parameters[i].getName();
/* 119 */         if (""expression"".equalsIgnoreCase(paramname)) {
/* 120 */           setExpression(parameters[i].getValue());
/*     */         } else {
/* 122 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 133 */     if (this.userProvidedExpression == null) {
/* 134 */       setError(""The expression attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 147 */     String teststr = null;
/* 148 */     BufferedReader in = null;
/*     */ 
/*     */ 
/*     */     
/* 152 */     validate();
/*     */     
/* 154 */     if (file.isDirectory()) {
/* 155 */       return true;
/*     */     }
/*     */     
/* 158 */     if (this.myRegExp == null) {
/* 159 */       this.myRegExp = new RegularExpression();
/* 160 */       this.myRegExp.setPattern(this.userProvidedExpression);
/* 161 */       this.myExpression = this.myRegExp.getRegexp(getProject());
/*     */     } 
/*     */     
/*     */     try {
/* 165 */       in = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
/*     */ 
/*     */       
/* 168 */       teststr = in.readLine();
/*     */       
/* 170 */       while (teststr != null) {
/*     */         
/* 172 */         if (this.myExpression.matches(teststr)) {
/* 173 */           return true;
/*     */         }
/* 175 */         teststr = in.readLine();
/*     */       } 
/*     */       
/* 178 */       return false;
/*     */     } catch (IOException ioe) {
/* 180 */       throw new BuildException(""Could not read file "" + filename);
/*     */     } finally {
/* 182 */       if (in != null)
/*     */         try {
/* 184 */           in.close();
/*     */         } catch (Exception e) {
/* 186 */           throw new BuildException(""Could not close file "" + filename);
/*     */         }  
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\ContainsRegexpSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ContainsSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ContainsSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  76 */   private String contains = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean casesensitive = true;
/*     */ 
/*     */   
/*     */   private boolean ignorewhitespace = false;
/*     */ 
/*     */   
/*     */   public static final String EXPRESSION_KEY = ""expression"";
/*     */ 
/*     */   
/*     */   public static final String CONTAINS_KEY = ""text"";
/*     */ 
/*     */   
/*     */   public static final String CASE_KEY = ""casesensitive"";
/*     */ 
/*     */   
/*     */   public static final String WHITESPACE_KEY = ""ignorewhitespace"";
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 100 */     StringBuffer buf = new StringBuffer(""{containsselector text: "");
/* 101 */     buf.append(this.contains);
/* 102 */     buf.append("" casesensitive: "");
/* 103 */     if (this.casesensitive) {
/* 104 */       buf.append(""true"");
/*     */     } else {
/* 106 */       buf.append(""false"");
/*     */     } 
/* 108 */     buf.append("" ignorewhitespace: "");
/* 109 */     if (this.ignorewhitespace) {
/* 110 */       buf.append(""true"");
/*     */     } else {
/* 112 */       buf.append(""false"");
/*     */     } 
/* 114 */     buf.append(""}"");
/* 115 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setText(String contains) { this.contains = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setCasesensitive(boolean casesensitive) { this.casesensitive = casesensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setIgnorewhitespace(boolean ignorewhitespace) { this.ignorewhitespace = ignorewhitespace; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 153 */     super.setParameters(parameters);
/* 154 */     if (parameters != null) {
/* 155 */       for (int i = 0; i < parameters.length; i++) {
/* 156 */         String paramname = parameters[i].getName();
/* 157 */         if (""text"".equalsIgnoreCase(paramname)) {
/* 158 */           setText(parameters[i].getValue());
/* 159 */         } else if (""casesensitive"".equalsIgnoreCase(paramname)) {
/* 160 */           setCasesensitive(Project.toBoolean(parameters[i].getValue()));
/*     */         }
/* 162 */         else if (""ignorewhitespace"".equalsIgnoreCase(paramname)) {
/* 163 */           setIgnorewhitespace(Project.toBoolean(parameters[i].getValue()));
/*     */         } else {
/*     */           
/* 166 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 178 */     if (this.contains == null) {
/* 179 */       setError(""The text attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 195 */     validate();
/*     */     
/* 197 */     if (file.isDirectory()) {
/* 198 */       return true;
/*     */     }
/*     */     
/* 201 */     String userstr = this.contains;
/* 202 */     if (!this.casesensitive) {
/* 203 */       userstr = this.contains.toLowerCase();
/*     */     }
/* 205 */     if (this.ignorewhitespace) {
/* 206 */       userstr = SelectorUtils.removeWhitespace(userstr);
/*     */     }
/* 208 */     BufferedReader in = null;
/*     */     try {
/* 210 */       in = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
/*     */       
/* 212 */       String teststr = in.readLine();
/* 213 */       while (teststr != null) {
/* 214 */         if (!this.casesensitive) {
/* 215 */           teststr = teststr.toLowerCase();
/*     */         }
/* 217 */         if (this.ignorewhitespace) {
/* 218 */           teststr = SelectorUtils.removeWhitespace(teststr);
/*     */         }
/* 220 */         if (teststr.indexOf(userstr) > -1) {
/* 221 */           return true;
/*     */         }
/* 223 */         teststr = in.readLine();
/*     */       } 
/* 225 */       return false;
/*     */     } catch (IOException ioe) {
/* 227 */       throw new BuildException(""Could not read file "" + filename);
/*     */     } finally {
/* 229 */       if (in != null)
/*     */         try {
/* 231 */           in.close();
/*     */         } catch (Exception e) {
/* 233 */           throw new BuildException(""Could not close file "" + filename);
/*     */         }  
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\ContainsSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DateSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.text.DateFormat;
/*     */ import java.text.ParseException;
/*     */ import java.util.Locale;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DateSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  75 */   private long millis = -1L;
/*  76 */   private String dateTime = null;
/*     */   private boolean includeDirs = false;
/*  78 */   private int granularity = 0;
/*  79 */   private int cmp = 2;
/*     */ 
/*     */   
/*     */   public static final String MILLIS_KEY = ""millis"";
/*     */ 
/*     */   
/*     */   public static final String DATETIME_KEY = ""datetime"";
/*     */ 
/*     */   
/*     */   public static final String CHECKDIRS_KEY = ""checkdirs"";
/*     */   
/*     */   public static final String GRANULARITY_KEY = ""granularity"";
/*     */   
/*     */   public static final String WHEN_KEY = ""when"";
/*     */ 
/*     */   
/*     */   public DateSelector() {
/*  96 */     if (Os.isFamily(""dos"")) {
/*  97 */       this.granularity = 2000;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 105 */     StringBuffer buf = new StringBuffer(""{dateselector date: "");
/* 106 */     buf.append(this.dateTime);
/* 107 */     buf.append("" compare: "");
/* 108 */     if (this.cmp == 0) {
/* 109 */       buf.append(""before"");
/* 110 */     } else if (this.cmp == 1) {
/* 111 */       buf.append(""after"");
/*     */     } else {
/* 113 */       buf.append(""equal"");
/*     */     } 
/* 115 */     buf.append("" granularity: "");
/* 116 */     buf.append(this.granularity);
/* 117 */     buf.append(""}"");
/* 118 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public void setMillis(long millis) { this.millis = millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public long getMillis() { return this.millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDatetime(String dateTime) {
/* 146 */     this.dateTime = dateTime;
/* 147 */     if (dateTime != null) {
/* 148 */       DateFormat df = DateFormat.getDateTimeInstance(3, 3, Locale.US);
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 153 */         setMillis(df.parse(dateTime).getTime());
/* 154 */         if (this.millis < 0L) {
/* 155 */           setError(""Date of "" + dateTime + "" results in negative milliseconds value relative"" + "" to epoch (January 1, 1970, 00:00:00 GMT)."");
/*     */         }
/*     */       }
/*     */       catch (ParseException pe) {
/*     */         
/* 160 */         setError(""Date of "" + dateTime + "" Cannot be parsed correctly. It should be in"" + "" MM/DD/YYYY HH:MM AM_PM format."");
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setCheckdirs(boolean includeDirs) { this.includeDirs = includeDirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void setGranularity(int granularity) { this.granularity = granularity; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setWhen(TimeComparisons cmp) { this.cmp = cmp.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 202 */     super.setParameters(parameters);
/* 203 */     if (parameters != null) {
/* 204 */       for (int i = 0; i < parameters.length; i++) {
/* 205 */         String paramname = parameters[i].getName();
/* 206 */         if (""millis"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 208 */             setMillis((new Long(parameters[i].getValue())).longValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 211 */             setError(""Invalid millisecond setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/* 214 */         } else if (""datetime"".equalsIgnoreCase(paramname)) {
/* 215 */           setDatetime(parameters[i].getValue());
/* 216 */         } else if (""checkdirs"".equalsIgnoreCase(paramname)) {
/* 217 */           setCheckdirs(Project.toBoolean(parameters[i].getValue()));
/* 218 */         } else if (""granularity"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 220 */             setGranularity((new Integer(parameters[i].getValue())).intValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 223 */             setError(""Invalid granularity setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/* 226 */         } else if (""when"".equalsIgnoreCase(paramname)) {
/* 227 */           TimeComparisons cmp = new TimeComparisons();
/* 228 */           cmp.setValue(parameters[i].getValue());
/* 229 */           setWhen(cmp);
/*     */         } else {
/* 231 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 242 */     if (this.dateTime == null && this.millis < 0L) {
/* 243 */       setError(""You must provide a datetime or the number of milliseconds."");
/*     */     }
/* 245 */     else if (this.millis < 0L) {
/* 246 */       setError(""Date of "" + this.dateTime + "" results in negative milliseconds value"" + "" relative to epoch (January 1, 1970, 00:00:00 GMT)."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 262 */     validate();
/* 263 */     if (file.isDirectory() && !this.includeDirs) {
/* 264 */       return true;
/*     */     }
/* 266 */     if (this.cmp == 0)
/* 267 */       return (file.lastModified() - this.granularity < this.millis); 
/* 268 */     if (this.cmp == 1) {
/* 269 */       return (file.lastModified() + this.granularity > this.millis);
/*     */     }
/* 271 */     return (Math.abs(file.lastModified() - this.millis) <= this.granularity);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TimeComparisons
/*     */     extends EnumeratedAttribute
/*     */   {
/* 284 */     public String[] getValues() { return new String[] { ""before"", ""after"", ""equal"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\DateSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DependSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DependSelector
/*     */   extends MappingSelector
/*     */ {
/*     */   public String toString() {
/*  82 */     StringBuffer buf = new StringBuffer(""{dependselector targetdir: "");
/*  83 */     if (this.targetdir == null) {
/*  84 */       buf.append(""NOT YET SET"");
/*     */     } else {
/*  86 */       buf.append(this.targetdir.getName());
/*     */     } 
/*  88 */     buf.append("" granularity: "");
/*  89 */     buf.append(this.granularity);
/*  90 */     if (this.map != null) {
/*  91 */       buf.append("" mapper: "");
/*  92 */       buf.append(this.map.toString());
/*  93 */     } else if (this.mapperElement != null) {
/*  94 */       buf.append("" mapper: "");
/*  95 */       buf.append(this.mapperElement.toString());
/*     */     } 
/*  97 */     buf.append(""}"");
/*  98 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean selectionTest(File srcfile, File destfile) {
/* 109 */     boolean selected = SelectorUtils.isOutOfDate(srcfile, destfile, this.granularity);
/*     */     
/* 111 */     return selected;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\DependSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DepthSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DepthSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  72 */   public int min = -1;
/*  73 */   public int max = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String MIN_KEY = ""min"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String MAX_KEY = ""max"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  90 */     StringBuffer buf = new StringBuffer(""{depthselector min: "");
/*  91 */     buf.append(this.min);
/*  92 */     buf.append("" max: "");
/*  93 */     buf.append(this.max);
/*  94 */     buf.append(""}"");
/*  95 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setMin(int min) { this.min = min; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setMax(int max) { this.max = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 123 */     super.setParameters(parameters);
/* 124 */     if (parameters != null) {
/* 125 */       for (int i = 0; i < parameters.length; i++) {
/* 126 */         String paramname = parameters[i].getName();
/* 127 */         if (""min"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 129 */             setMin(Integer.parseInt(parameters[i].getValue()));
/*     */           } catch (NumberFormatException nfe1) {
/* 131 */             setError(""Invalid minimum value "" + parameters[i].getValue());
/*     */           }
/*     */         
/* 134 */         } else if (""max"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 136 */             setMax(Integer.parseInt(parameters[i].getValue()));
/*     */           } catch (NumberFormatException nfe1) {
/* 138 */             setError(""Invalid maximum value "" + parameters[i].getValue());
/*     */           } 
/*     */         } else {
/*     */           
/* 142 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 153 */     if (this.min < 0 && this.max < 0) {
/* 154 */       setError(""You must set at least one of the min or the max levels."");
/*     */     }
/*     */     
/* 157 */     if (this.max < this.min && this.max > -1) {
/* 158 */       setError(""The maximum depth is lower than the minimum."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 177 */     validate();
/*     */     
/* 179 */     int depth = -1;
/*     */     
/* 181 */     String absBase = basedir.getAbsolutePath();
/* 182 */     String absFile = file.getAbsolutePath();
/* 183 */     StringTokenizer tokBase = new StringTokenizer(absBase, File.separator);
/*     */     
/* 185 */     StringTokenizer tokFile = new StringTokenizer(absFile, File.separator);
/*     */     
/* 187 */     while (tokFile.hasMoreTokens()) {
/* 188 */       String filetoken = tokFile.nextToken();
/* 189 */       if (tokBase.hasMoreTokens()) {
/* 190 */         String basetoken = tokBase.nextToken();
/*     */         
/* 192 */         if (!basetoken.equals(filetoken)) {
/* 193 */           throw new BuildException(""File "" + filename + "" does not appear within "" + absBase + ""directory"");
/*     */         }
/*     */         
/*     */         continue;
/*     */       } 
/* 198 */       depth++;
/* 199 */       if (this.max > -1 && depth > this.max) {
/* 200 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 204 */     if (tokBase.hasMoreTokens()) {
/* 205 */       throw new BuildException(""File "" + filename + "" is outside of "" + absBase + ""directory tree"");
/*     */     }
/*     */     
/* 208 */     if (this.min > -1 && depth < this.min) {
/* 209 */       return false;
/*     */     }
/* 211 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\DepthSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DifferentSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DifferentSelector
/*     */   extends MappingSelector
/*     */ {
/*  85 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean ignoreFileTimes = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setIgnoreFileTimes(boolean ignoreFileTimes) { this.ignoreFileTimes = ignoreFileTimes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean selectionTest(File srcfile, File destfile) {
/* 107 */     if (srcfile.exists() != destfile.exists()) {
/* 108 */       return true;
/*     */     }
/*     */     
/* 111 */     if (srcfile.length() != destfile.length())
/*     */     {
/* 113 */       return true;
/*     */     }
/*     */     
/* 116 */     if (!this.ignoreFileTimes) {
/*     */ 
/*     */       
/* 119 */       boolean sameDate = (destfile.lastModified() >= srcfile.lastModified() - this.granularity && destfile.lastModified() <= srcfile.lastModified() + this.granularity);
/*     */ 
/*     */ 
/*     */       
/* 123 */       if (!sameDate) {
/* 124 */         return true;
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 130 */       return !this.fileUtils.contentEquals(srcfile, destfile);
/*     */     } catch (IOException e) {
/* 132 */       throw new BuildException(""while comparing "" + srcfile + "" and "" + destfile, e);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\DifferentSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ExtendFileSelector,"package org.apache.tools.ant.types.selectors;
import org.apache.tools.ant.types.Parameterizable;
public interface ExtendFileSelector extends FileSelector, Parameterizable {}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\ExtendFileSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ExtendSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExtendSelector
/*     */   extends BaseSelector
/*     */ {
/*  75 */   private String classname = null;
/*  76 */   private FileSelector dynselector = null;
/*  77 */   private Vector paramVec = new Vector();
/*  78 */   private Path classpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setClassname(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void selectorCreate() {
/*  99 */     if (this.classname != null && this.classname.length() > 0) {
/*     */       try {
/* 101 */         Class c = null;
/* 102 */         if (this.classpath == null) {
/* 103 */           c = Class.forName(this.classname);
/*     */         } else {
/* 105 */           AntClassLoader al = getProject().createClassLoader(this.classpath);
/*     */           
/* 107 */           c = Class.forName(this.classname, true, (ClassLoader)al);
/*     */         } 
/* 109 */         this.dynselector = (FileSelector)c.newInstance();
/* 110 */         Project project = getProject();
/* 111 */         if (project != null) {
/* 112 */           project.setProjectReference(this.dynselector);
/*     */         }
/*     */       } catch (ClassNotFoundException cnfexcept) {
/* 115 */         setError(""Selector "" + this.classname + "" not initialized, no such class"");
/*     */       } catch (InstantiationException iexcept) {
/*     */         
/* 118 */         setError(""Selector "" + this.classname + "" not initialized, could not create class"");
/*     */       } catch (IllegalAccessException iaexcept) {
/*     */         
/* 121 */         setError(""Selector "" + this.classname + "" not initialized, class not accessible"");
/*     */       } 
/*     */     } else {
/*     */       
/* 125 */       setError(""There is no classname specified"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void addParam(Parameter p) { this.paramVec.addElement(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setClasspath(Path classpath) {
/* 144 */     if (isReference()) {
/* 145 */       throw tooManyAttributes();
/*     */     }
/* 147 */     if (this.classpath == null) {
/* 148 */       this.classpath = classpath;
/*     */     } else {
/* 150 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Path createClasspath() {
/* 159 */     if (isReference()) {
/* 160 */       throw noChildrenAllowed();
/*     */     }
/* 162 */     if (this.classpath == null) {
/* 163 */       this.classpath = new Path(getProject());
/*     */     }
/* 165 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public final Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathref(Reference r) {
/* 182 */     if (isReference()) {
/* 183 */       throw tooManyAttributes();
/*     */     }
/* 185 */     createClasspath().setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 197 */     if (this.dynselector == null) {
/* 198 */       selectorCreate();
/*     */     }
/* 200 */     if (this.classname == null || this.classname.length() < 1) {
/* 201 */       setError(""The classname attribute is required"");
/* 202 */     } else if (this.dynselector == null) {
/* 203 */       setError(""Internal Error: The custom selector was not created"");
/* 204 */     } else if (!(this.dynselector instanceof ExtendFileSelector) && this.paramVec.size() > 0) {
/*     */       
/* 206 */       setError(""Cannot set parameters on custom selector that does not implement ExtendFileSelector"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) throws BuildException {
/* 223 */     validate();
/* 224 */     if (this.paramVec.size() > 0 && this.dynselector instanceof ExtendFileSelector) {
/* 225 */       Parameter[] paramArray = new Parameter[this.paramVec.size()];
/* 226 */       this.paramVec.copyInto((Object[])paramArray);
/*     */       
/* 228 */       ((ExtendFileSelector)this.dynselector).setParameters(paramArray);
/*     */     } 
/* 230 */     return this.dynselector.isSelected(basedir, filename, file);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\ExtendSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.FilenameSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilenameSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  70 */   private String pattern = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean casesensitive = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean negated = false;
/*     */ 
/*     */   
/*     */   public static final String NAME_KEY = ""name"";
/*     */ 
/*     */   
/*     */   public static final String CASE_KEY = ""casesensitive"";
/*     */ 
/*     */   
/*     */   public static final String NEGATE_KEY = ""negate"";
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buf = new StringBuffer(""{filenameselector name: "");
/*  93 */     buf.append(this.pattern);
/*  94 */     buf.append("" negate: "");
/*  95 */     if (this.negated) {
/*  96 */       buf.append(""true"");
/*     */     } else {
/*  98 */       buf.append(""false"");
/*     */     } 
/* 100 */     buf.append("" casesensitive: "");
/* 101 */     if (this.casesensitive) {
/* 102 */       buf.append(""true"");
/*     */     } else {
/* 104 */       buf.append(""false"");
/*     */     } 
/* 106 */     buf.append(""}"");
/* 107 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setName(String pattern) {
/* 118 */     pattern = pattern.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     
/* 120 */     if (pattern.endsWith(File.separator)) {
/* 121 */       pattern = pattern + ""**"";
/*     */     }
/* 123 */     this.pattern = pattern;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setCasesensitive(boolean casesensitive) { this.casesensitive = casesensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setNegate(boolean negated) { this.negated = negated; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 154 */     super.setParameters(parameters);
/* 155 */     if (parameters != null) {
/* 156 */       for (int i = 0; i < parameters.length; i++) {
/* 157 */         String paramname = parameters[i].getName();
/* 158 */         if (""name"".equalsIgnoreCase(paramname)) {
/* 159 */           setName(parameters[i].getValue());
/* 160 */         } else if (""casesensitive"".equalsIgnoreCase(paramname)) {
/* 161 */           setCasesensitive(Project.toBoolean(parameters[i].getValue()));
/*     */         }
/* 163 */         else if (""negate"".equalsIgnoreCase(paramname)) {
/* 164 */           setNegate(Project.toBoolean(parameters[i].getValue()));
/*     */         } else {
/* 166 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 178 */     if (this.pattern == null) {
/* 179 */       setError(""The name attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 196 */     validate();
/*     */     
/* 198 */     return (SelectorUtils.matchPath(this.pattern, filename, this.casesensitive) == (!this.negated));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\FilenameSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.FileSelector,"package org.apache.tools.ant.types.selectors;
import java.io.File;
import org.apache.tools.ant.BuildException;
public interface FileSelector {
  boolean isSelected(File paramFile1, String paramString, File paramFile2) throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\FileSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.MajoritySelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MajoritySelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   private boolean allowtie = true;
/*     */   
/*     */   public String toString() {
/*  86 */     StringBuffer buf = new StringBuffer();
/*  87 */     if (hasSelectors()) {
/*  88 */       buf.append(""{majorityselect: "");
/*  89 */       buf.append(super.toString());
/*  90 */       buf.append(""}"");
/*     */     } 
/*  92 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setAllowtie(boolean tiebreaker) { this.allowtie = tiebreaker; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 118 */     validate();
/* 119 */     int yesvotes = 0;
/* 120 */     int novotes = 0;
/* 121 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 124 */     while (e.hasMoreElements()) {
/* 125 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 127 */       if (result) {
/* 128 */         yesvotes++; continue;
/*     */       } 
/* 130 */       novotes++;
/*     */     } 
/*     */     
/* 133 */     if (yesvotes > novotes)
/* 134 */       return true; 
/* 135 */     if (novotes > yesvotes) {
/* 136 */       return false;
/*     */     }
/*     */     
/* 139 */     return this.allowtie;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\MajoritySelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.MappingSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class MappingSelector
/*     */   extends BaseSelector
/*     */ {
/*  71 */   protected File targetdir = null;
/*  72 */   protected Mapper mapperElement = null;
/*  73 */   protected FileNameMapper map = null;
/*  74 */   protected int granularity = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  81 */   public MappingSelector() { this.granularity = (int)FileUtils.newFileUtils().getFileTimestampGranularity(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setTargetdir(File targetdir) { this.targetdir = targetdir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 101 */     if (this.mapperElement != null) {
/* 102 */       throw new BuildException(""Cannot define more than one mapper"");
/*     */     }
/* 104 */     this.mapperElement = new Mapper(getProject());
/* 105 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 113 */     if (this.targetdir == null) {
/* 114 */       setError(""The targetdir attribute is required."");
/*     */     }
/* 116 */     if (this.mapperElement == null) {
/* 117 */       this.map = (FileNameMapper)new IdentityMapper();
/*     */     } else {
/* 119 */       this.map = this.mapperElement.getImplementation();
/*     */     } 
/* 121 */     if (this.map == null) {
/* 122 */       setError(""Could not set <mapper> element."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 138 */     validate();
/*     */ 
/*     */     
/* 141 */     String[] destfiles = this.map.mapFileName(filename);
/*     */ 
/*     */     
/* 144 */     if (destfiles == null) {
/* 145 */       return false;
/*     */     }
/*     */     
/* 148 */     if (destfiles.length != 1 || destfiles[0] == null) {
/* 149 */       throw new BuildException(""Invalid destination file results for "" + this.targetdir.getName() + "" with filename "" + filename);
/*     */     }
/*     */     
/* 152 */     String destname = destfiles[0];
/* 153 */     File destfile = new File(this.targetdir, destname);
/*     */     
/* 155 */     boolean selected = selectionTest(file, destfile);
/* 156 */     return selected;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected abstract boolean selectionTest(File paramFile1, File paramFile2);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public void setGranularity(int granularity) { this.granularity = granularity; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\MappingSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.NoneSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class NoneSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  80 */     StringBuffer buf = new StringBuffer();
/*  81 */     if (hasSelectors()) {
/*  82 */       buf.append(""{noneselect: "");
/*  83 */       buf.append(super.toString());
/*  84 */       buf.append(""}"");
/*     */     } 
/*  86 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 100 */     validate();
/* 101 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 104 */     while (e.hasMoreElements()) {
/* 105 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 107 */       if (result) {
/* 108 */         return false;
/*     */       }
/*     */     } 
/* 111 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\NoneSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.NotSelector,"/*    */ package org.apache.tools.ant.types.selectors;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NotSelector
/*    */   extends NoneSelector
/*    */ {
/*    */   public String toString() {
/* 79 */     StringBuffer buf = new StringBuffer();
/* 80 */     if (hasSelectors()) {
/* 81 */       buf.append(""{notselect: "");
/* 82 */       buf.append(super.toString());
/* 83 */       buf.append(""}"");
/*    */     } 
/* 85 */     return buf.toString();
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void verifySettings() {
/* 93 */     if (selectorCount() != 1)
/* 94 */       setError(""One and only one selector is allowed within the <not> tag""); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\NotSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.OrSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class OrSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  79 */     StringBuffer buf = new StringBuffer();
/*  80 */     if (hasSelectors()) {
/*  81 */       buf.append(""{orselect: "");
/*  82 */       buf.append(super.toString());
/*  83 */       buf.append(""}"");
/*     */     } 
/*  85 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/*  99 */     validate();
/* 100 */     Enumeration e = selectorElements();
/*     */ 
/*     */ 
/*     */     
/* 104 */     while (e.hasMoreElements()) {
/* 105 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 107 */       if (result) {
/* 108 */         return true;
/*     */       }
/*     */     } 
/* 111 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\OrSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.PresentSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PresentSelector
/*     */   extends BaseSelector
/*     */ {
/*  76 */   private File targetdir = null;
/*  77 */   private Mapper mapperElement = null;
/*  78 */   private FileNameMapper map = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean destmustexist = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buf = new StringBuffer(""{presentselector targetdir: "");
/*  93 */     if (this.targetdir == null) {
/*  94 */       buf.append(""NOT YET SET"");
/*     */     } else {
/*  96 */       buf.append(this.targetdir.getName());
/*     */     } 
/*  98 */     buf.append("" present: "");
/*  99 */     if (this.destmustexist) {
/* 100 */       buf.append(""both"");
/*     */     } else {
/* 102 */       buf.append(""srconly"");
/*     */     } 
/* 104 */     if (this.map != null) {
/* 105 */       buf.append(this.map.toString());
/* 106 */     } else if (this.mapperElement != null) {
/* 107 */       buf.append(this.mapperElement.toString());
/*     */     } 
/* 109 */     buf.append(""}"");
/* 110 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setTargetdir(File targetdir) { this.targetdir = targetdir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 129 */     if (this.mapperElement != null) {
/* 130 */       throw new BuildException(""Cannot define more than one mapper"");
/*     */     }
/* 132 */     this.mapperElement = new Mapper(getProject());
/* 133 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPresent(FilePresence fp) {
/* 150 */     if (fp.getIndex() == 0) {
/* 151 */       this.destmustexist = false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 160 */     if (this.targetdir == null) {
/* 161 */       setError(""The targetdir attribute is required."");
/*     */     }
/* 163 */     if (this.mapperElement == null) {
/* 164 */       this.map = (FileNameMapper)new IdentityMapper();
/*     */     } else {
/* 166 */       this.map = this.mapperElement.getImplementation();
/*     */     } 
/* 168 */     if (this.map == null) {
/* 169 */       setError(""Could not set <mapper> element."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 185 */     validate();
/*     */ 
/*     */     
/* 188 */     String[] destfiles = this.map.mapFileName(filename);
/*     */ 
/*     */     
/* 191 */     if (destfiles == null) {
/* 192 */       return false;
/*     */     }
/*     */     
/* 195 */     if (destfiles.length != 1 || destfiles[0] == null) {
/* 196 */       throw new BuildException(""Invalid destination file results for "" + this.targetdir + "" with filename "" + filename);
/*     */     }
/*     */     
/* 199 */     String destname = destfiles[0];
/* 200 */     File destfile = new File(this.targetdir, destname);
/* 201 */     return (destfile.exists() == this.destmustexist);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FilePresence
/*     */     extends EnumeratedAttribute
/*     */   {
/* 213 */     public String[] getValues() { return new String[] { ""srconly"", ""both"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\PresentSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorContainer,"package org.apache.tools.ant.types.selectors;
import java.util.Enumeration;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector;
public interface SelectorContainer {
  boolean hasSelectors();
  int selectorCount();
  FileSelector[] getSelectors(Project paramProject);
  Enumeration selectorElements();
  void appendSelector(FileSelector paramFileSelector);
  void addSelector(SelectSelector paramSelectSelector);
  void addAnd(AndSelector paramAndSelector);
  void addOr(OrSelector paramOrSelector);
  void addNot(NotSelector paramNotSelector);
  void addNone(NoneSelector paramNoneSelector);
  void addMajority(MajoritySelector paramMajoritySelector);
  void addDate(DateSelector paramDateSelector);
  void addSize(SizeSelector paramSizeSelector);
  void addFilename(FilenameSelector paramFilenameSelector);
  void addCustom(ExtendSelector paramExtendSelector);
  void addContains(ContainsSelector paramContainsSelector);
  void addPresent(PresentSelector paramPresentSelector);
  void addDepth(DepthSelector paramDepthSelector);
  void addDepend(DependSelector paramDependSelector);
  void addContainsRegexp(ContainsRegexpSelector paramContainsRegexpSelector);
  void addType(TypeSelector paramTypeSelector);
  void addDifferent(DifferentSelector paramDifferentSelector);
  void addModified(ModifiedSelector paramModifiedSelector);
  void add(FileSelector paramFileSelector);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\SelectorContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorScanner,"package org.apache.tools.ant.types.selectors;
public interface SelectorScanner {
  void setSelectors(FileSelector[] paramArrayOfFileSelector);
  String[] getDeselectedDirectories();
  String[] getDeselectedFiles();
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\SelectorScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorUtils,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Resource;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class SelectorUtils
/*     */ {
/*  79 */   private static SelectorUtils instance = new SelectorUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public static SelectorUtils getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public static boolean matchPatternStart(String pattern, String str) { return matchPatternStart(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean matchPatternStart(String pattern, String str, boolean isCaseSensitive) {
/* 139 */     if (str.startsWith(File.separator) != pattern.startsWith(File.separator))
/*     */     {
/* 141 */       return false;
/*     */     }
/*     */     
/* 144 */     String[] patDirs = tokenizePathAsArray(pattern);
/* 145 */     String[] strDirs = tokenizePathAsArray(str);
/*     */     
/* 147 */     int patIdxStart = 0;
/* 148 */     int patIdxEnd = patDirs.length - 1;
/* 149 */     int strIdxStart = 0;
/* 150 */     int strIdxEnd = strDirs.length - 1;
/*     */ 
/*     */     
/* 153 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 154 */       String patDir = patDirs[patIdxStart];
/* 155 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 158 */       if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {
/* 159 */         return false;
/*     */       }
/* 161 */       patIdxStart++;
/* 162 */       strIdxStart++;
/*     */     } 
/*     */     
/* 165 */     if (strIdxStart > strIdxEnd)
/*     */     {
/* 167 */       return true; } 
/* 168 */     if (patIdxStart > patIdxEnd)
/*     */     {
/* 170 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 174 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public static boolean matchPath(String pattern, String str) { return matchPath(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean matchPath(String pattern, String str, boolean isCaseSensitive) {
/* 212 */     if (str.startsWith(File.separator) != pattern.startsWith(File.separator))
/*     */     {
/* 214 */       return false;
/*     */     }
/*     */     
/* 217 */     String[] patDirs = tokenizePathAsArray(pattern);
/* 218 */     String[] strDirs = tokenizePathAsArray(str);
/*     */     
/* 220 */     int patIdxStart = 0;
/* 221 */     int patIdxEnd = patDirs.length - 1;
/* 222 */     int strIdxStart = 0;
/* 223 */     int strIdxEnd = strDirs.length - 1;
/*     */ 
/*     */     
/* 226 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 227 */       String patDir = patDirs[patIdxStart];
/* 228 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 231 */       if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {
/* 232 */         patDirs = null;
/* 233 */         strDirs = null;
/* 234 */         return false;
/*     */       } 
/* 236 */       patIdxStart++;
/* 237 */       strIdxStart++;
/*     */     } 
/* 239 */     if (strIdxStart > strIdxEnd) {
/*     */       
/* 241 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 242 */         if (!patDirs[i].equals(""**"")) {
/* 243 */           patDirs = null;
/* 244 */           strDirs = null;
/* 245 */           return false;
/*     */         } 
/*     */       } 
/* 248 */       return true;
/*     */     } 
/* 250 */     if (patIdxStart > patIdxEnd) {
/*     */       
/* 252 */       patDirs = null;
/* 253 */       strDirs = null;
/* 254 */       return false;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 259 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 260 */       String patDir = patDirs[patIdxEnd];
/* 261 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 264 */       if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {
/* 265 */         patDirs = null;
/* 266 */         strDirs = null;
/* 267 */         return false;
/*     */       } 
/* 269 */       patIdxEnd--;
/* 270 */       strIdxEnd--;
/*     */     } 
/* 272 */     if (strIdxStart > strIdxEnd) {
/*     */       
/* 274 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 275 */         if (!patDirs[i].equals(""**"")) {
/* 276 */           patDirs = null;
/* 277 */           strDirs = null;
/* 278 */           return false;
/*     */         } 
/*     */       } 
/* 281 */       return true;
/*     */     } 
/*     */     
/* 284 */     while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
/* 285 */       int patIdxTmp = -1;
/* 286 */       for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
/* 287 */         if (patDirs[i].equals(""**"")) {
/* 288 */           patIdxTmp = i;
/*     */           break;
/*     */         } 
/*     */       } 
/* 292 */       if (patIdxTmp == patIdxStart + 1) {
/*     */         
/* 294 */         patIdxStart++;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 299 */       int patLength = patIdxTmp - patIdxStart - 1;
/* 300 */       int strLength = strIdxEnd - strIdxStart + 1;
/* 301 */       int foundIdx = -1;
/*     */       
/* 303 */       for (int i = 0; i <= strLength - patLength; ) {
/* 304 */         for (int j = 0; j < patLength; j++) {
/* 305 */           String subPat = patDirs[patIdxStart + j + 1];
/* 306 */           String subStr = strDirs[strIdxStart + i + j];
/* 307 */           if (!match(subPat, subStr, isCaseSensitive)) {
/*     */             i++;
/*     */             continue;
/*     */           } 
/*     */         } 
/* 312 */         foundIdx = strIdxStart + i;
/*     */         
/*     */         break;
/*     */       } 
/* 316 */       if (foundIdx == -1) {
/* 317 */         patDirs = null;
/* 318 */         strDirs = null;
/* 319 */         return false;
/*     */       } 
/*     */       
/* 322 */       patIdxStart = patIdxTmp;
/* 323 */       strIdxStart = foundIdx + patLength;
/*     */     } 
/*     */     
/* 326 */     for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 327 */       if (!patDirs[i].equals(""**"")) {
/* 328 */         patDirs = null;
/* 329 */         strDirs = null;
/* 330 */         return false;
/*     */       } 
/*     */     } 
/*     */     
/* 334 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 352 */   public static boolean match(String pattern, String str) { return match(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean match(String pattern, String str, boolean isCaseSensitive) {
/* 374 */     char[] patArr = pattern.toCharArray();
/* 375 */     char[] strArr = str.toCharArray();
/* 376 */     int patIdxStart = 0;
/* 377 */     int patIdxEnd = patArr.length - 1;
/* 378 */     int strIdxStart = 0;
/* 379 */     int strIdxEnd = strArr.length - 1;
/*     */ 
/*     */     
/* 382 */     boolean containsStar = false;
/* 383 */     for (int i = 0; i < patArr.length; i++) {
/* 384 */       if (patArr[i] == '*') {
/* 385 */         containsStar = true;
/*     */         
/*     */         break;
/*     */       } 
/*     */     } 
/* 390 */     if (!containsStar) {
/*     */       
/* 392 */       if (patIdxEnd != strIdxEnd) {
/* 393 */         return false;
/*     */       }
/* 395 */       for (int i = 0; i <= patIdxEnd; i++) {
/* 396 */         char ch = patArr[i];
/* 397 */         if (ch != '?') {
/* 398 */           if (isCaseSensitive && ch != strArr[i]) {
/* 399 */             return false;
/*     */           }
/* 401 */           if (!isCaseSensitive && Character.toUpperCase(ch) != Character.toUpperCase(strArr[i]))
/*     */           {
/* 403 */             return false;
/*     */           }
/*     */         } 
/*     */       } 
/* 407 */       return true;
/*     */     } 
/*     */     
/* 410 */     if (patIdxEnd == 0) {
/* 411 */       return true;
/*     */     }
/*     */     
/*     */     char c;
/* 415 */     while ((c = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {
/* 416 */       if (c != '?') {
/* 417 */         if (isCaseSensitive && c != strArr[strIdxStart]) {
/* 418 */           return false;
/*     */         }
/* 420 */         if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxStart]))
/*     */         {
/* 422 */           return false;
/*     */         }
/*     */       } 
/* 425 */       patIdxStart++;
/* 426 */       strIdxStart++;
/*     */     } 
/* 428 */     if (strIdxStart > strIdxEnd) {
/*     */ 
/*     */       
/* 431 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 432 */         if (patArr[i] != '*') {
/* 433 */           return false;
/*     */         }
/*     */       } 
/* 436 */       return true;
/*     */     } 
/*     */ 
/*     */     
/* 440 */     while ((c = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {
/* 441 */       if (c != '?') {
/* 442 */         if (isCaseSensitive && c != strArr[strIdxEnd]) {
/* 443 */           return false;
/*     */         }
/* 445 */         if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxEnd]))
/*     */         {
/* 447 */           return false;
/*     */         }
/*     */       } 
/* 450 */       patIdxEnd--;
/* 451 */       strIdxEnd--;
/*     */     } 
/* 453 */     if (strIdxStart > strIdxEnd) {
/*     */ 
/*     */       
/* 456 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 457 */         if (patArr[i] != '*') {
/* 458 */           return false;
/*     */         }
/*     */       } 
/* 461 */       return true;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 466 */     while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
/* 467 */       int patIdxTmp = -1;
/* 468 */       for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
/* 469 */         if (patArr[i] == '*') {
/* 470 */           patIdxTmp = i;
/*     */           break;
/*     */         } 
/*     */       } 
/* 474 */       if (patIdxTmp == patIdxStart + 1) {
/*     */         
/* 476 */         patIdxStart++;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 481 */       int patLength = patIdxTmp - patIdxStart - 1;
/* 482 */       int strLength = strIdxEnd - strIdxStart + 1;
/* 483 */       int foundIdx = -1;
/*     */       
/* 485 */       for (int i = 0; i <= strLength - patLength; ) {
/* 486 */         for (int j = 0; j < patLength; j++) {
/* 487 */           c = patArr[patIdxStart + j + 1];
/* 488 */           if (c != '?') {
/* 489 */             if (isCaseSensitive && c != strArr[strIdxStart + i + j]) {
/*     */               // Byte code: goto -> 544
/*     */             }
/*     */             
/* 493 */             if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxStart + i + j])) {
/*     */               i++;
/*     */               
/*     */               continue;
/*     */             } 
/*     */           } 
/*     */         } 
/*     */         
/* 501 */         foundIdx = strIdxStart + i;
/*     */         
/*     */         break;
/*     */       } 
/* 505 */       if (foundIdx == -1) {
/* 506 */         return false;
/*     */       }
/*     */       
/* 509 */       patIdxStart = patIdxTmp;
/* 510 */       strIdxStart = foundIdx + patLength;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 515 */     for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 516 */       if (patArr[i] != '*') {
/* 517 */         return false;
/*     */       }
/*     */     } 
/* 520 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 532 */   public static Vector tokenizePath(String path) { return tokenizePath(path, File.separator); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector tokenizePath(String path, String separator) {
/* 545 */     Vector ret = new Vector();
/* 546 */     StringTokenizer st = new StringTokenizer(path, separator);
/* 547 */     while (st.hasMoreTokens()) {
/* 548 */       ret.addElement(st.nextToken());
/*     */     }
/* 550 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String[] tokenizePathAsArray(String path) {
/* 557 */     char sep = File.separatorChar;
/* 558 */     int start = 0;
/* 559 */     int len = path.length();
/* 560 */     int count = 0;
/* 561 */     for (int pos = 0; pos < len; pos++) {
/* 562 */       if (path.charAt(pos) == sep) {
/* 563 */         if (pos != start) {
/* 564 */           count++;
/*     */         }
/* 566 */         start = pos + 1;
/*     */       } 
/*     */     } 
/* 569 */     if (len != start) {
/* 570 */       count++;
/*     */     }
/* 572 */     String[] l = new String[count];
/* 573 */     count = 0;
/* 574 */     start = 0;
/* 575 */     for (int pos = 0; pos < len; pos++) {
/* 576 */       if (path.charAt(pos) == sep) {
/* 577 */         if (pos != start) {
/* 578 */           String tok = path.substring(start, pos);
/* 579 */           l[count++] = tok;
/*     */         } 
/* 581 */         start = pos + 1;
/*     */       } 
/*     */     } 
/* 584 */     if (len != start) {
/* 585 */       String tok = path.substring(start);
/* 586 */       l[count] = tok;
/*     */     } 
/* 588 */     return l;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean isOutOfDate(File src, File target, int granularity) {
/* 607 */     if (!src.exists()) {
/* 608 */       return false;
/*     */     }
/* 610 */     if (!target.exists()) {
/* 611 */       return true;
/*     */     }
/* 613 */     if (src.lastModified() - granularity > target.lastModified()) {
/* 614 */       return true;
/*     */     }
/* 616 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean isOutOfDate(Resource src, Resource target, int granularity) {
/* 635 */     if (!src.isExists()) {
/* 636 */       return false;
/*     */     }
/* 638 */     if (!target.isExists()) {
/* 639 */       return true;
/*     */     }
/* 641 */     if (src.getLastModified() - granularity > target.getLastModified()) {
/* 642 */       return true;
/*     */     }
/* 644 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String removeWhitespace(String input) {
/* 656 */     StringBuffer result = new StringBuffer();
/* 657 */     if (input != null) {
/* 658 */       StringTokenizer st = new StringTokenizer(input);
/* 659 */       while (st.hasMoreTokens()) {
/* 660 */         result.append(st.nextToken());
/*     */       }
/*     */     } 
/* 663 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 672 */   public static boolean hasWildcards(String input) { return (input.indexOf('*') != -1 || input.indexOf('?') != -1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String rtrimWildcardTokens(String input) {
/* 681 */     Vector v = tokenizePath(input, File.separator);
/* 682 */     StringBuffer sb = new StringBuffer();
/* 683 */     for (int counter = 0; counter < v.size() && 
/* 684 */       !hasWildcards(v.elementAt(counter)); counter++) {
/*     */ 
/*     */       
/* 687 */       if (counter > 0) {
/* 688 */         sb.append(File.separator);
/*     */       }
/* 690 */       sb.append(v.elementAt(counter));
/*     */     } 
/* 692 */     return sb.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\SelectorUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SelectSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   private String ifProperty;
/*     */   private String unlessProperty;
/*     */   
/*     */   public String toString() {
/*  88 */     StringBuffer buf = new StringBuffer();
/*  89 */     if (hasSelectors()) {
/*  90 */       buf.append(""{select"");
/*  91 */       if (this.ifProperty != null) {
/*  92 */         buf.append("" if: "");
/*  93 */         buf.append(this.ifProperty);
/*     */       } 
/*  95 */       if (this.unlessProperty != null) {
/*  96 */         buf.append("" unless: "");
/*  97 */         buf.append(this.unlessProperty);
/*     */       } 
/*  99 */       buf.append("" "");
/* 100 */       buf.append(super.toString());
/* 101 */       buf.append(""}"");
/*     */     } 
/* 103 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private SelectSelector getRef() {
/* 111 */     Object o = getCheckedRef(getClass(), ""SelectSelector"");
/* 112 */     return (SelectSelector)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasSelectors() {
/* 120 */     if (isReference()) {
/* 121 */       return getRef().hasSelectors();
/*     */     }
/* 123 */     return super.hasSelectors();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int selectorCount() {
/* 131 */     if (isReference()) {
/* 132 */       return getRef().selectorCount();
/*     */     }
/* 134 */     return super.selectorCount();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 143 */     if (isReference()) {
/* 144 */       return getRef().getSelectors(p);
/*     */     }
/* 146 */     return super.getSelectors(p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration selectorElements() {
/* 154 */     if (isReference()) {
/* 155 */       return getRef().selectorElements();
/*     */     }
/* 157 */     return super.selectorElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void appendSelector(FileSelector selector) {
/* 166 */     if (isReference()) {
/* 167 */       throw noChildrenAllowed();
/*     */     }
/* 169 */     super.appendSelector(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 178 */     int cnt = selectorCount();
/* 179 */     if (cnt < 0 || cnt > 1) {
/* 180 */       setError(""Only one selector is allowed within the <selector> tag"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean passesConditions() {
/* 191 */     if (this.ifProperty != null && getProject().getProperty(this.ifProperty) == null)
/*     */     {
/* 193 */       return false; } 
/* 194 */     if (this.unlessProperty != null && getProject().getProperty(this.unlessProperty) != null)
/*     */     {
/* 196 */       return false;
/*     */     }
/* 198 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setIf(String ifProperty) { this.ifProperty = ifProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setUnless(String unlessProperty) { this.unlessProperty = unlessProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 233 */     validate();
/*     */ 
/*     */     
/* 236 */     if (!passesConditions()) {
/* 237 */       return false;
/*     */     }
/*     */     
/* 240 */     Enumeration e = selectorElements();
/* 241 */     if (!e.hasMoreElements()) {
/* 242 */       return true;
/*     */     }
/* 244 */     FileSelector f = e.nextElement();
/* 245 */     return f.isSelected(basedir, filename, file);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\SelectSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SizeSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SizeSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  70 */   private long size = -1L;
/*  71 */   private long multiplier = 1L;
/*  72 */   private long sizelimit = -1L;
/*  73 */   private int cmp = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String SIZE_KEY = ""value"";
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String UNITS_KEY = ""units"";
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String WHEN_KEY = ""when"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buf = new StringBuffer(""{sizeselector value: "");
/*  93 */     buf.append(this.sizelimit);
/*  94 */     buf.append(""compare: "");
/*  95 */     if (this.cmp == 0) {
/*  96 */       buf.append(""less"");
/*  97 */     } else if (this.cmp == 1) {
/*  98 */       buf.append(""more"");
/*     */     } else {
/* 100 */       buf.append(""equal"");
/*     */     } 
/* 102 */     buf.append(""}"");
/* 103 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setValue(long size) {
/* 114 */     this.size = size;
/* 115 */     if (this.multiplier != 0L && size > -1L) {
/* 116 */       this.sizelimit = size * this.multiplier;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setUnits(ByteUnits units) {
/* 147 */     int i = units.getIndex();
/* 148 */     this.multiplier = 0L;
/* 149 */     if (i > -1 && i < 4) {
/* 150 */       this.multiplier = 1000L;
/* 151 */     } else if (i > 3 && i < 9) {
/* 152 */       this.multiplier = 1024L;
/* 153 */     } else if (i > 8 && i < 13) {
/* 154 */       this.multiplier = 1000000L;
/* 155 */     } else if (i > 12 && i < 18) {
/* 156 */       this.multiplier = 1048576L;
/* 157 */     } else if (i > 17 && i < 22) {
/* 158 */       this.multiplier = 1000000000L;
/* 159 */     } else if (i > 21 && i < 27) {
/* 160 */       this.multiplier = 1073741824L;
/* 161 */     } else if (i > 26 && i < 31) {
/* 162 */       this.multiplier = 1000000000000L;
/* 163 */     } else if (i > 30 && i < 36) {
/* 164 */       this.multiplier = 1099511627776L;
/*     */     } 
/* 166 */     if (this.multiplier > 0L && this.size > -1L) {
/* 167 */       this.sizelimit = this.size * this.multiplier;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setWhen(SizeComparisons cmp) { this.cmp = cmp.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 189 */     super.setParameters(parameters);
/* 190 */     if (parameters != null) {
/* 191 */       for (int i = 0; i < parameters.length; i++) {
/* 192 */         String paramname = parameters[i].getName();
/* 193 */         if (""value"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 195 */             setValue((new Long(parameters[i].getValue())).longValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 198 */             setError(""Invalid size setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/* 201 */         } else if (""units"".equalsIgnoreCase(paramname)) {
/* 202 */           ByteUnits units = new ByteUnits();
/* 203 */           units.setValue(parameters[i].getValue());
/* 204 */           setUnits(units);
/* 205 */         } else if (""when"".equalsIgnoreCase(paramname)) {
/* 206 */           SizeComparisons cmp = new SizeComparisons();
/* 207 */           cmp.setValue(parameters[i].getValue());
/* 208 */           setWhen(cmp);
/*     */         } else {
/* 210 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 227 */     if (this.size < 0L) {
/* 228 */       setError(""The value attribute is required, and must be positive"");
/* 229 */     } else if (this.multiplier < 1L) {
/* 230 */       setError(""Invalid Units supplied, must be K,Ki,M,Mi,G,Gi,T,or Ti"");
/* 231 */     } else if (this.sizelimit < 0L) {
/* 232 */       setError(""Internal error: Code is not setting sizelimit correctly"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 248 */     validate();
/*     */ 
/*     */     
/* 251 */     if (file.isDirectory()) {
/* 252 */       return true;
/*     */     }
/* 254 */     if (this.cmp == 0)
/* 255 */       return (file.length() < this.sizelimit); 
/* 256 */     if (this.cmp == 1) {
/* 257 */       return (file.length() > this.sizelimit);
/*     */     }
/* 259 */     return (file.length() == this.sizelimit);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ByteUnits
/*     */     extends EnumeratedAttribute
/*     */   {
/* 287 */     public String[] getValues() { return new String[] { ""K"", ""k"", ""kilo"", ""KILO"", ""Ki"", ""KI"", ""ki"", ""kibi"", ""KIBI"", ""M"", ""m"", ""mega"", ""MEGA"", ""Mi"", ""MI"", ""mi"", ""mebi"", ""MEBI"", ""G"", ""g"", ""giga"", ""GIGA"", ""Gi"", ""GI"", ""gi"", ""gibi"", ""GIBI"", ""T"", ""t"", ""tera"", ""TERA"", ""Ti"", ""TI"", ""ti"", ""tebi"", ""TEBI"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class SizeComparisons
/*     */     extends EnumeratedAttribute
/*     */   {
/* 307 */     public String[] getValues() { return new String[] { ""less"", ""more"", ""equal"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\SizeSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.TypeSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TypeSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  70 */   private String type = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String TYPE_KEY = ""type"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/*  86 */     StringBuffer buf = new StringBuffer(""{typeselector type: "");
/*  87 */     buf.append(this.type);
/*  88 */     buf.append(""}"");
/*  89 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setType(FileType fileTypes) { this.type = fileTypes.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 107 */     super.setParameters(parameters);
/* 108 */     if (parameters != null) {
/* 109 */       for (int i = 0; i < parameters.length; i++) {
/* 110 */         String paramname = parameters[i].getName();
/* 111 */         if (""type"".equalsIgnoreCase(paramname)) {
/* 112 */           FileType type = new FileType();
/* 113 */           type.setValue(parameters[i].getValue());
/* 114 */           setType(type);
/*     */         } else {
/* 116 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 128 */     if (this.type == null) {
/* 129 */       setError(""The type attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 145 */     validate();
/*     */     
/* 147 */     if (file.isDirectory()) {
/* 148 */       return this.type.equals(""dir"");
/*     */     }
/* 150 */     return this.type.equals(""file"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String FILE = ""file"";
/*     */ 
/*     */ 
/*     */     
/*     */     public static final String DIR = ""dir"";
/*     */ 
/*     */ 
/*     */     
/* 167 */     public String[] getValues() { return new String[] { ""file"", ""dir"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\TypeSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.Algorithm,"package org.apache.tools.ant.types.selectors.modifiedselector;
import java.io.File;
public interface Algorithm {
  boolean isValid();
  String getValue(File paramFile);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\Algorithm.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.Cache,"package org.apache.tools.ant.types.selectors.modifiedselector;
import java.util.Iterator;
public interface Cache {
  boolean isValid();
  void delete();
  void load();
  void save();
  Object get(Object paramObject);
  void put(Object paramObject1, Object paramObject2);
  Iterator iterator();
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\Cache.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.DigestAlgorithm,"/*     */ package org.apache.tools.ant.types.selectors.modifiedselector;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.security.DigestInputStream;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.security.NoSuchProviderException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DigestAlgorithm
/*     */   implements Algorithm
/*     */ {
/* 104 */   private String algorithm = ""MD5"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   private String provider = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   private MessageDigest messageDigest = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   private int readBufferSize = 8192;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setAlgorithm(String algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setProvider(String provider) { this.provider = provider; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void initMessageDigest() {
/* 147 */     if (this.messageDigest != null) {
/*     */       return;
/*     */     }
/*     */     
/* 151 */     if (this.provider != null && !"""".equals(this.provider) && !""null"".equals(this.provider)) {
/*     */       try {
/* 153 */         this.messageDigest = MessageDigest.getInstance(this.algorithm, this.provider);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 155 */         throw new BuildException(noalgo);
/*     */       } catch (NoSuchProviderException noprovider) {
/* 157 */         throw new BuildException(noprovider);
/*     */       } 
/*     */     } else {
/*     */       try {
/* 161 */         this.messageDigest = MessageDigest.getInstance(this.algorithm);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 163 */         throw new BuildException(noalgo);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public boolean isValid() { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getValue(File file) {
/* 189 */     initMessageDigest();
/* 190 */     String checksum = null;
/*     */     try {
/* 192 */       if (!file.canRead()) {
/* 193 */         return null;
/*     */       }
/* 195 */       FileInputStream fis = null;
/* 196 */       FileOutputStream fos = null;
/* 197 */       byte[] buf = new byte[this.readBufferSize];
/*     */       try {
/* 199 */         this.messageDigest.reset();
/* 200 */         fis = new FileInputStream(file);
/* 201 */         DigestInputStream dis = new DigestInputStream(fis, this.messageDigest); do {
/*     */         
/* 203 */         } while (dis.read(buf, 0, this.readBufferSize) != -1);
/*     */ 
/*     */         
/* 206 */         dis.close();
/* 207 */         fis.close();
/* 208 */         fis = null;
/* 209 */         byte[] fileDigest = this.messageDigest.digest();
/* 210 */         StringBuffer checksumSb = new StringBuffer();
/* 211 */         for (int i = 0; i < fileDigest.length; i++) {
/* 212 */           String hexStr = Integer.toHexString(0xFF & fileDigest[i]);
/* 213 */           if (hexStr.length() < 2) {
/* 214 */             checksumSb.append(""0"");
/*     */           }
/* 216 */           checksumSb.append(hexStr);
/*     */         } 
/* 218 */         checksum = checksumSb.toString();
/*     */       } catch (Exception e) {
/* 220 */         return null;
/*     */       } 
/*     */     } catch (Exception e) {
/* 223 */       return null;
/*     */     } 
/* 225 */     return checksum;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 234 */     StringBuffer buf = new StringBuffer();
/* 235 */     buf.append(""<DigestAlgorithm:"");
/* 236 */     buf.append(""algorithm="").append(this.algorithm);
/* 237 */     buf.append("";provider="").append(this.provider);
/* 238 */     buf.append("">"");
/* 239 */     return buf.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\DigestAlgorithm.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator,"/*    */ package org.apache.tools.ant.types.selectors.modifiedselector;
/*    */ 
/*    */ import java.util.Comparator;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class EqualComparator
/*    */   implements Comparator
/*    */ {
/*    */   public int compare(Object o1, Object o2) {
/* 79 */     if (o1 == null) {
/* 80 */       if (o2 == null) {
/* 81 */         return 1;
/*    */       }
/* 83 */       return 0;
/*    */     } 
/*    */     
/* 86 */     return o1.equals(o2) ? 0 : 1;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 95 */   public String toString() { return ""EqualComparator""; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\EqualComparator.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm,"/*     */ package org.apache.tools.ant.types.selectors.modifiedselector;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HashvalueAlgorithm
/*     */   implements Algorithm
/*     */ {
/*  78 */   public boolean isValid() { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getValue(File file) {
/*     */     try {
/*  92 */       if (!file.canRead()) {
/*  93 */         return null;
/*     */       }
/*  95 */       FileInputStream fis = new FileInputStream(file);
/*  96 */       byte[] content = new byte[fis.available()];
/*  97 */       fis.read(content);
/*  98 */       fis.close();
/*  99 */       String s = new String(content);
/* 100 */       int hash = s.hashCode();
/* 101 */       return Integer.toString(hash);
/*     */     } catch (Exception e) {
/* 103 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public String toString() { return ""HashvalueAlgorithm""; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\HashvalueAlgorithm.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector,"/*     */ package org.apache.tools.ant.types.selectors.modifiedselector;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Comparator;
/*     */ import java.util.Iterator;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.IntrospectionHelper;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.selectors.BaseExtendSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ModifiedSelector
/*     */   extends BaseExtendSelector
/*     */ {
/* 233 */   private Cache cache = null;
/*     */ 
/*     */   
/* 236 */   private Algorithm algorithm = null;
/*     */ 
/*     */   
/* 239 */   private Comparator comparator = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean update = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean selectDirectories = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isConfigured = false;
/*     */ 
/*     */ 
/*     */   
/* 255 */   private AlgorithmName algoName = null;
/*     */ 
/*     */   
/* 258 */   private CacheName cacheName = null;
/*     */ 
/*     */   
/* 261 */   private ComparatorName compName = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 268 */   private Vector configParameter = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   private Vector specialParameter = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 292 */     configure();
/* 293 */     if (this.cache == null) {
/* 294 */       setError(""Cache must be set."");
/* 295 */     } else if (this.algorithm == null) {
/* 296 */       setError(""Algorithm must be set."");
/* 297 */     } else if (!this.cache.isValid()) {
/* 298 */       setError(""Cache must be proper configured."");
/* 299 */     } else if (!this.algorithm.isValid()) {
/* 300 */       setError(""Algorithm must be proper configured."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void configure() {
/* 326 */     if (this.isConfigured) {
/*     */       return;
/*     */     }
/* 329 */     this.isConfigured = true;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 334 */     Project project = getProject();
/* 335 */     String filename = ""cache.properties"";
/* 336 */     File cachefile = null;
/* 337 */     if (project != null) {
/*     */       
/* 339 */       cachefile = new File(project.getBaseDir(), filename);
/*     */     } else {
/*     */       
/* 342 */       cachefile = new File(filename);
/*     */     } 
/* 344 */     this.cache = new PropertiesfileCache(cachefile);
/* 345 */     this.algorithm = new DigestAlgorithm();
/* 346 */     this.comparator = new EqualComparator();
/* 347 */     this.update = true;
/* 348 */     this.selectDirectories = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 354 */     for (Iterator itConfig = this.configParameter.iterator(); itConfig.hasNext(); ) {
/* 355 */       Parameter par = itConfig.next();
/* 356 */       if (par.getName().indexOf(""."") > 0) {
/*     */         
/* 358 */         this.specialParameter.add(par); continue;
/*     */       } 
/* 360 */       useParameter(par);
/*     */     } 
/*     */     
/* 363 */     this.configParameter = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 368 */     String className = null;
/* 369 */     String pkg = ""org.apache.tools.ant.types.selectors.cacheselector"";
/*     */ 
/*     */     
/* 372 */     if (this.algorithm == null) {
/* 373 */       if (""hashvalue"".equals(this.algoName.getValue())) {
/* 374 */         className = pkg + "".HashvalueAlgorithm"";
/* 375 */       } else if (""digest"".equals(this.algoName.getValue())) {
/* 376 */         className = pkg + "".DigestAlgorithm"";
/*     */       } 
/* 378 */       if (className != null) {
/*     */         
/*     */         try {
/* 381 */           this.algorithm = (Algorithm)Class.forName(className).newInstance();
/*     */         } catch (Exception e) {
/* 383 */           e.printStackTrace();
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 389 */     if (this.cache == null) {
/* 390 */       if (""propertyfile"".equals(this.cacheName.getValue())) {
/* 391 */         className = pkg + "".PropertiesfileCache"";
/*     */       }
/* 393 */       if (className != null) {
/*     */         
/*     */         try {
/* 396 */           this.cache = (Cache)Class.forName(className).newInstance();
/*     */         } catch (Exception e) {
/* 398 */           e.printStackTrace();
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 404 */     if (this.comparator == null) {
/* 405 */       if (""equal"".equals(this.compName.getValue())) {
/* 406 */         className = pkg + "".EqualComparator"";
/* 407 */       } else if (""role"".equals(this.compName.getValue())) {
/* 408 */         className = ""java.text.RuleBasedCollator"";
/*     */       } 
/* 410 */       if (className != null) {
/*     */         
/*     */         try {
/* 413 */           this.comparator = (Comparator)Class.forName(className).newInstance();
/*     */         } catch (Exception e) {
/* 415 */           e.printStackTrace();
/*     */         } 
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 423 */     for (Iterator itSpecial = this.specialParameter.iterator(); itSpecial.hasNext(); ) {
/* 424 */       Parameter par = itSpecial.next();
/* 425 */       useParameter(par);
/*     */     } 
/* 427 */     this.specialParameter = new Vector();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 442 */     validate();
/* 443 */     File f = new File(basedir, filename);
/*     */ 
/*     */     
/* 446 */     if (f.isDirectory()) {
/* 447 */       return this.selectDirectories;
/*     */     }
/*     */ 
/*     */     
/* 451 */     String cachedValue = String.valueOf(this.cache.get(f.getAbsolutePath()));
/* 452 */     String newValue = this.algorithm.getValue(f);
/* 453 */     boolean rv = (this.comparator.compare(cachedValue, newValue) != 0);
/*     */ 
/*     */     
/* 456 */     if (this.update && !cachedValue.equals(newValue)) {
/* 457 */       this.cache.put(f.getAbsolutePath(), newValue);
/* 458 */       this.cache.save();
/*     */     } 
/*     */     
/* 461 */     return rv;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 473 */   public void setUpdate(boolean update) { this.update = update; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 482 */   public void setSeldirs(boolean seldirs) { this.selectDirectories = seldirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addParam(String key, Object value) {
/* 492 */     Parameter par = new Parameter();
/* 493 */     par.setName(key);
/* 494 */     par.setValue(String.valueOf(value));
/* 495 */     this.configParameter.add(par);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 504 */   public void addParam(Parameter parameter) { this.configParameter.add(parameter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 515 */     if (parameters != null) {
/* 516 */       for (int i = 0; i < parameters.length; i++) {
/* 517 */         this.configParameter.add(parameters[i]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void useParameter(Parameter parameter) {
/* 537 */     String key = parameter.getName();
/* 538 */     String value = parameter.getValue();
/* 539 */     if (""cache"".equals(key)) {
/* 540 */       CacheName cn = new CacheName();
/* 541 */       cn.setValue(value);
/* 542 */       setCache(cn);
/* 543 */     } else if (""algorithm"".equals(key)) {
/* 544 */       AlgorithmName an = new AlgorithmName();
/* 545 */       an.setValue(value);
/* 546 */       setAlgorithm(an);
/* 547 */     } else if (""comparator"".equals(key)) {
/* 548 */       ComparatorName cn = new ComparatorName();
/* 549 */       cn.setValue(value);
/* 550 */       setComparator(cn);
/* 551 */     } else if (""update"".equals(key)) {
/* 552 */       boolean updateValue = ""true"".equalsIgnoreCase(value);
/*     */ 
/*     */ 
/*     */       
/* 556 */       setUpdate(updateValue);
/* 557 */     } else if (""seldirs"".equals(key)) {
/* 558 */       boolean sdValue = ""true"".equalsIgnoreCase(value);
/*     */ 
/*     */ 
/*     */       
/* 562 */       setSeldirs(sdValue);
/* 563 */     } else if (key.startsWith(""cache."")) {
/* 564 */       String name = key.substring(6);
/* 565 */       tryToSetAParameter(this.cache, name, value);
/* 566 */     } else if (key.startsWith(""algorithm."")) {
/* 567 */       String name = key.substring(10);
/* 568 */       tryToSetAParameter(this.algorithm, name, value);
/* 569 */     } else if (key.startsWith(""comparator."")) {
/* 570 */       String name = key.substring(11);
/* 571 */       tryToSetAParameter(this.comparator, name, value);
/*     */     } else {
/* 573 */       setError(""Invalid parameter "" + key);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void tryToSetAParameter(Object obj, String name, String value) {
/* 586 */     Project prj = (getProject() != null) ? getProject() : new Project();
/* 587 */     IntrospectionHelper iHelper = IntrospectionHelper.getHelper(prj, obj.getClass());
/*     */ 
/*     */     
/*     */     try {
/* 591 */       iHelper.setAttribute(prj, obj, name, value);
/* 592 */     } catch (BuildException e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 606 */     StringBuffer buf = new StringBuffer(""{modifiedselector"");
/* 607 */     buf.append("" update="").append(this.update);
/* 608 */     buf.append("" seldirs="").append(this.selectDirectories);
/* 609 */     buf.append("" cache="").append(this.cache);
/* 610 */     buf.append("" algorithm="").append(this.algorithm);
/* 611 */     buf.append("" comparator="").append(this.comparator);
/* 612 */     buf.append(""}"");
/* 613 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 621 */   public Cache getCache() { return this.cache; }
/*     */   
/* 623 */   public void setCache(CacheName name) { this.cacheName = name; }
/*     */   
/*     */   public static class CacheName
/*     */     extends EnumeratedAttribute {
/* 627 */     public String[] getValues() { return new String[] { ""propertyfile"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 632 */   public Algorithm getAlgorithm() { return this.algorithm; }
/*     */   
/* 634 */   public void setAlgorithm(AlgorithmName name) { this.algoName = name; }
/*     */   
/*     */   public static class AlgorithmName
/*     */     extends EnumeratedAttribute {
/* 638 */     public String[] getValues() { return new String[] { ""hashvalue"", ""digest"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 643 */   public Comparator getComparator() { return this.comparator; }
/*     */   
/* 645 */   public void setComparator(ComparatorName name) { this.compName = name; }
/*     */   
/*     */   public static class ComparatorName
/*     */     extends EnumeratedAttribute {
/* 649 */     public String[] getValues() { return new String[] { ""equal"", ""rule"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\ModifiedSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache,"/*     */ package org.apache.tools.ant.types.selectors.modifiedselector;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Iterator;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertiesfileCache
/*     */   implements Cache
/*     */ {
/* 102 */   private File cachefile = null;
/*     */ 
/*     */   
/* 105 */   private Properties cache = new Properties();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean cacheLoaded = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean cacheDirty = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PropertiesfileCache() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public PropertiesfileCache(File cachefile) { this.cachefile = cachefile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void setCachefile(File file) { this.cachefile = file; }
/*     */ 
/*     */   
/* 141 */   public File getCachefile() { return this.cachefile; }
/*     */ 
/*     */   
/* 144 */   public boolean isValid() { return (this.cachefile != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void load() {
/* 152 */     if (this.cachefile != null && this.cachefile.isFile() && this.cachefile.canRead()) {
/*     */       try {
/* 154 */         BufferedInputStream bis = new BufferedInputStream(new FileInputStream(this.cachefile));
/*     */         
/* 156 */         this.cache.load(bis);
/* 157 */         bis.close();
/*     */       } catch (Exception e) {
/* 159 */         e.printStackTrace();
/*     */       } 
/*     */     }
/*     */     
/* 163 */     this.cacheLoaded = true;
/* 164 */     this.cacheDirty = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void save() {
/* 175 */     if (!this.cacheDirty) {
/*     */       return;
/*     */     }
/* 178 */     if (this.cachefile != null && this.cache.propertyNames().hasMoreElements()) {
/*     */       try {
/* 180 */         BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(this.cachefile));
/*     */         
/* 182 */         this.cache.store(bos, null);
/* 183 */         bos.flush();
/* 184 */         bos.close();
/*     */       } catch (Exception e) {
/* 186 */         e.printStackTrace();
/*     */       } 
/*     */     }
/* 189 */     this.cacheDirty = false;
/*     */   }
/*     */ 
/*     */   
/*     */   public void delete() {
/* 194 */     this.cache = new Properties();
/* 195 */     this.cachefile.delete();
/* 196 */     this.cacheLoaded = true;
/* 197 */     this.cacheDirty = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object get(Object key) {
/* 206 */     if (!this.cacheLoaded) {
/* 207 */       load();
/*     */     }
/*     */     try {
/* 210 */       return this.cache.getProperty(String.valueOf(key));
/*     */     } catch (ClassCastException e) {
/* 212 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void put(Object key, Object value) {
/* 222 */     this.cache.put(String.valueOf(key), String.valueOf(value));
/* 223 */     this.cacheDirty = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Iterator iterator() {
/* 231 */     Vector v = new Vector();
/* 232 */     Enumeration en = this.cache.propertyNames();
/* 233 */     while (en.hasMoreElements()) {
/* 234 */       v.add(en.nextElement());
/*     */     }
/* 236 */     return v.iterator();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 248 */     StringBuffer buf = new StringBuffer();
/* 249 */     buf.append(""<PropertiesfileCache:"");
/* 250 */     buf.append(""cachefile="").append(this.cachefile);
/* 251 */     buf.append("";noOfEntries="").append(this.cache.size());
/* 252 */     buf.append("">"");
/* 253 */     return buf.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\ant\types\selectors\modifiedselector\PropertiesfileCache.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.ClasspathUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ClasspathUtils
/*     */ {
/*     */   private static final String LOADER_ID_PREFIX = ""ant.loader."";
/*     */   public static final String REUSE_LOADER_REF = ""ant.reuse.loader"";
/*     */   
/* 123 */   public static ClassLoader getClassLoaderForPath(Project p, Reference ref) { return getClassLoaderForPath(p, ref, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getClassLoaderForPath(Project p, Reference ref, boolean reverseLoader) {
/* 143 */     String pathId = ref.getRefId();
/* 144 */     Object path = p.getReference(pathId);
/* 145 */     if (!(path instanceof Path)) {
/* 146 */       throw new BuildException(""The specified classpathref "" + pathId + "" does not reference a Path."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 151 */     String loaderId = ""ant.loader."" + pathId;
/* 152 */     return getClassLoaderForPath(p, (Path)path, loaderId, reverseLoader);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public static ClassLoader getClassLoaderForPath(Project p, Path path, String loaderId) { return getClassLoaderForPath(p, path, loaderId, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public static ClassLoader getClassLoaderForPath(Project p, Path path, String loaderId, boolean reverseLoader) { return getClassLoaderForPath(p, path, loaderId, reverseLoader, isMagicPropertySet(p)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getClassLoaderForPath(Project p, Path path, String loaderId, boolean reverseLoader, boolean reuseLoader) {
/* 208 */     ClassLoader cl = null;
/*     */ 
/*     */     
/* 211 */     if (loaderId != null && reuseLoader) {
/* 212 */       Object reusedLoader = p.getReference(loaderId);
/* 213 */       if (reusedLoader != null && !(reusedLoader instanceof ClassLoader))
/*     */       {
/* 215 */         throw new BuildException(""The specified loader id "" + loaderId + "" does not reference a class loader"");
/*     */       }
/*     */ 
/*     */       
/* 219 */       cl = (ClassLoader)reusedLoader;
/*     */     } 
/* 221 */     if (cl == null) {
/* 222 */       cl = getUniqueClassLoaderForPath(p, path, reverseLoader);
/* 223 */       if (loaderId != null && reuseLoader) {
/* 224 */         p.addReference(loaderId, cl);
/*     */       }
/*     */     } 
/*     */     
/* 228 */     return cl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getUniqueClassLoaderForPath(Project p, Path path, boolean reverseLoader) {
/* 246 */     AntClassLoader acl = p.createClassLoader((path != null) ? path : Path.systemClasspath);
/*     */     
/* 248 */     if (reverseLoader) {
/* 249 */       acl.setParentFirst(false);
/* 250 */       acl.addJavaLibraries();
/*     */     } 
/*     */     
/* 253 */     return (ClassLoader)acl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Object newInstance(String className, ClassLoader userDefinedLoader) {
/*     */     try {
/* 272 */       Class clazz = userDefinedLoader.loadClass(className);
/* 273 */       Object o = clazz.newInstance();
/* 274 */       return o;
/*     */     } catch (ClassNotFoundException e) {
/* 276 */       throw new BuildException(""Class "" + className + "" not found by the specific classLoader."", e);
/*     */     
/*     */     }
/*     */     catch (InstantiationException e) {
/*     */ 
/*     */       
/* 282 */       throw new BuildException(""Could not instantiate "" + className + "". Specified class should have a no "" + ""argument constructor."", e);
/*     */ 
/*     */     
/*     */     }
/*     */     catch (IllegalAccessException e) {
/*     */ 
/*     */       
/* 289 */       throw new BuildException(""Could not instantiate "" + className + "". Specified class should have a "" + ""public constructor."", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public static Delegate getDelegate(ProjectComponent component) { return new Delegate(component); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 314 */   private static boolean isMagicPropertySet(Project p) { return (p.getProperty(""ant.reuse.loader"") != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Delegate
/*     */   {
/*     */     private final ProjectComponent component;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private Path classpath;
/*     */ 
/*     */ 
/*     */     
/*     */     private String classpathId;
/*     */ 
/*     */ 
/*     */     
/*     */     private String className;
/*     */ 
/*     */ 
/*     */     
/*     */     private String loaderId;
/*     */ 
/*     */ 
/*     */     
/*     */     private boolean reverseLoader = false;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 348 */     Delegate(ProjectComponent component) { this.component = component; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setClasspath(Path classpath) {
/* 359 */       if (this.classpath == null) {
/* 360 */         this.classpath = classpath;
/*     */       } else {
/* 362 */         this.classpath.append(classpath);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Path createClasspath() {
/* 375 */       if (this.classpath == null) {
/* 376 */         this.classpath = new Path(this.component.getProject());
/*     */       }
/* 378 */       return this.classpath.createPath();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 390 */     public void setClassname(String fcqn) { this.className = fcqn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setClasspathref(Reference r) {
/* 402 */       this.classpathId = r.getRefId();
/* 403 */       createClasspath().setRefid(r);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 422 */     public void setReverseLoader(boolean reverseLoader) { this.reverseLoader = reverseLoader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 430 */     public void setLoaderRef(Reference r) { this.loaderId = r.getRefId(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public ClassLoader getClassLoader() {
/* 440 */       ClassLoader cl = ClasspathUtils.getClassLoaderForPath(getContextProject(), this.classpath, getClassLoadId(), this.reverseLoader, (this.loaderId != null || ClasspathUtils.isMagicPropertySet(getContextProject())));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 446 */       return cl;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 453 */     private Project getContextProject() { return this.component.getProject(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getClassLoadId() {
/* 460 */       if (this.loaderId == null && this.classpathId != null) {
/* 461 */         return ""ant.loader."" + this.classpathId;
/*     */       }
/* 463 */       return this.loaderId;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Object newInstance() {
/* 474 */       ClassLoader cl = getClassLoader();
/* 475 */       return ClasspathUtils.newInstance(this.className, cl);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 482 */     public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */     
/* 486 */     public boolean isReverseLoader() { return this.reverseLoader; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\ClasspathUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.CollectionUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Dictionary;
/*     */ import java.util.Enumeration;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CollectionUtils
/*     */ {
/*     */   public static boolean equals(Vector v1, Vector v2) {
/*  79 */     if (v1 == v2) {
/*  80 */       return true;
/*     */     }
/*     */     
/*  83 */     if (v1 == null || v2 == null) {
/*  84 */       return false;
/*     */     }
/*     */     
/*  87 */     return v1.equals(v2);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean equals(Dictionary d1, Dictionary d2) {
/* 100 */     if (d1 == d2) {
/* 101 */       return true;
/*     */     }
/*     */     
/* 104 */     if (d1 == null || d2 == null) {
/* 105 */       return false;
/*     */     }
/*     */     
/* 108 */     if (d1.size() != d2.size()) {
/* 109 */       return false;
/*     */     }
/*     */     
/* 112 */     Enumeration e1 = d1.keys();
/* 113 */     while (e1.hasMoreElements()) {
/* 114 */       Object key = e1.nextElement();
/* 115 */       Object value1 = d1.get(key);
/* 116 */       Object value2 = d2.get(key);
/* 117 */       if (value2 == null || !value1.equals(value2)) {
/* 118 */         return false;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 125 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void putAll(Dictionary m1, Dictionary m2) {
/* 135 */     for (Enumeration it = m2.keys(); it.hasMoreElements(); ) {
/* 136 */       Object key = it.nextElement();
/* 137 */       m1.put(key, m2.get(key));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final class EmptyEnumeration
/*     */     implements Enumeration
/*     */   {
/* 149 */     public boolean hasMoreElements() { return false; }
/*     */ 
/*     */ 
/*     */     
/* 153 */     public Object nextElement() throws NoSuchElementException { throw new NoSuchElementException(); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\CollectionUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.DateUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.text.ChoiceFormat;
/*     */ import java.text.DateFormat;
/*     */ import java.text.MessageFormat;
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Locale;
/*     */ import java.util.TimeZone;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class DateUtils
/*     */ {
/*     */   public static final String ISO8601_DATETIME_PATTERN = ""yyyy-MM-dd'T'HH:mm:ss"";
/*     */   public static final String ISO8601_DATE_PATTERN = ""yyyy-MM-dd"";
/*     */   public static final String ISO8601_TIME_PATTERN = ""HH:mm:ss"";
/* 102 */   public static final DateFormat DATE_HEADER_FORMAT = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss "", Locale.US);
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   private static final MessageFormat MINUTE_SECONDS = new MessageFormat(""{0}{1}"");
/*     */ 
/*     */   
/* 110 */   private static final double[] LIMITS = new double[] { 0.0D, 1.0D, 2.0D };
/*     */   
/* 112 */   private static final String[] MINUTES_PART = new String[] { """", ""1 minute "", ""{0,number} minutes "" };
/*     */   
/* 114 */   private static final String[] SECONDS_PART = new String[] { ""0 seconds"", ""1 second"", ""{1,number} seconds"" };
/*     */   
/* 116 */   private static final ChoiceFormat MINUTES_FORMAT = new ChoiceFormat(LIMITS, MINUTES_PART);
/*     */ 
/*     */   
/* 119 */   private static final ChoiceFormat SECONDS_FORMAT = new ChoiceFormat(LIMITS, SECONDS_PART);
/*     */ 
/*     */   
/*     */   static  {
/* 123 */     MINUTE_SECONDS.setFormat(0, MINUTES_FORMAT);
/* 124 */     MINUTE_SECONDS.setFormat(1, SECONDS_FORMAT);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public static String format(long date, String pattern) { return format(new Date(date), pattern); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String format(Date date, String pattern) {
/* 150 */     DateFormat df = createDateFormat(pattern);
/* 151 */     return df.format(date);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String formatElapsedTime(long millis) {
/* 168 */     long seconds = millis / 1000L;
/* 169 */     long minutes = seconds / 60L;
/* 170 */     Object[] args = { new Long(minutes), new Long(seconds % 60L) };
/* 171 */     return MINUTE_SECONDS.format(args);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static DateFormat createDateFormat(String pattern) {
/* 180 */     SimpleDateFormat sdf = new SimpleDateFormat(pattern);
/* 181 */     TimeZone gmt = TimeZone.getTimeZone(""GMT"");
/* 182 */     sdf.setTimeZone(gmt);
/* 183 */     sdf.setLenient(true);
/* 184 */     return sdf;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getPhaseOfMoon(Calendar cal) {
/* 220 */     int dayOfTheYear = cal.get(6);
/* 221 */     int yearInMetonicCycle = (cal.get(1) - 1900) % 19 + 1;
/* 222 */     int epact = (11 * yearInMetonicCycle + 18) % 30;
/* 223 */     if ((epact == 25 && yearInMetonicCycle > 11) || epact == 24) {
/* 224 */       epact++;
/*     */     }
/* 226 */     return ((dayOfTheYear + epact) * 6 + 11) % 177 / 22 & 0x7;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getDateForHeader() {
/* 236 */     Calendar cal = Calendar.getInstance();
/* 237 */     TimeZone tz = cal.getTimeZone();
/* 238 */     int offset = tz.getOffset(cal.get(0), cal.get(1), cal.get(2), cal.get(5), cal.get(7), cal.get(14));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 244 */     StringBuffer tzMarker = new StringBuffer((offset < 0) ? ""-"" : ""+"");
/* 245 */     offset = Math.abs(offset);
/* 246 */     int hours = offset / 3600000;
/* 247 */     int minutes = offset / 60000 - 60 * hours;
/* 248 */     if (hours < 10) {
/* 249 */       tzMarker.append(""0"");
/*     */     }
/* 251 */     tzMarker.append(hours);
/* 252 */     if (minutes < 10) {
/* 253 */       tzMarker.append(""0"");
/*     */     }
/* 255 */     tzMarker.append(minutes);
/* 256 */     return DATE_HEADER_FORMAT.format(cal.getTime()) + tzMarker.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 272 */   public static Date parseIso8601DateTime(String datestr) throws ParseException { return (new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"")).parse(datestr); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public static Date parseIso8601Date(String datestr) throws ParseException { return (new SimpleDateFormat(""yyyy-MM-dd"")).parse(datestr); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Date parseIso8601DateTimeOrDate(String datestr) throws ParseException {
/*     */     try {
/* 304 */       return parseIso8601DateTime(datestr);
/*     */     } catch (ParseException px) {
/* 306 */       return parseIso8601Date(datestr);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\DateUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.DOMElementWriter,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Writer;
/*     */ import org.w3c.dom.Attr;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.NamedNodeMap;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.w3c.dom.Text;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DOMElementWriter
/*     */ {
/*  82 */   private static String lSep = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   protected String[] knownEntities = new String[] { ""gt"", ""amp"", ""lt"", ""apos"", ""quot"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(Element root, OutputStream out) throws IOException {
/* 100 */     Writer wri = new OutputStreamWriter(out, ""UTF8"");
/* 101 */     wri.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"");
/* 102 */     write(root, wri, 0, ""  "");
/* 103 */     wri.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(Element element, Writer out, int indent, String indentWith) throws IOException {
/* 120 */     for (int i = 0; i < indent; i++) {
/* 121 */       out.write(indentWith);
/*     */     }
/*     */ 
/*     */     
/* 125 */     out.write(""<"");
/* 126 */     out.write(element.getTagName());
/*     */ 
/*     */     
/* 129 */     NamedNodeMap attrs = element.getAttributes();
/* 130 */     for (int i = 0; i < attrs.getLength(); i++) {
/* 131 */       Attr attr = (Attr)attrs.item(i);
/* 132 */       out.write("" "");
/* 133 */       out.write(attr.getName());
/* 134 */       out.write(""=\"""");
/* 135 */       out.write(encode(attr.getValue()));
/* 136 */       out.write(""\"""");
/*     */     } 
/* 138 */     out.write("">"");
/*     */ 
/*     */     
/* 141 */     boolean hasChildren = false;
/* 142 */     NodeList children = element.getChildNodes();
/* 143 */     for (int i = 0; i < children.getLength(); i++) {
/* 144 */       String data; Node child = children.item(i);
/*     */       
/* 146 */       switch (child.getNodeType()) {
/*     */         
/*     */         case 1:
/* 149 */           if (!hasChildren) {
/* 150 */             out.write(lSep);
/* 151 */             hasChildren = true;
/*     */           } 
/* 153 */           write((Element)child, out, indent + 1, indentWith);
/*     */           break;
/*     */         
/*     */         case 3:
/* 157 */           out.write(encode(child.getNodeValue()));
/*     */           break;
/*     */         
/*     */         case 4:
/* 161 */           out.write(""<![CDATA["");
/* 162 */           out.write(encodedata(((Text)child).getData()));
/* 163 */           out.write(""]]>"");
/*     */           break;
/*     */         
/*     */         case 5:
/* 167 */           out.write(38);
/* 168 */           out.write(child.getNodeName());
/* 169 */           out.write(59);
/*     */           break;
/*     */         
/*     */         case 7:
/* 173 */           out.write(""<?"");
/* 174 */           out.write(child.getNodeName());
/* 175 */           data = child.getNodeValue();
/* 176 */           if (data != null && data.length() > 0) {
/* 177 */             out.write(32);
/* 178 */             out.write(data);
/*     */           } 
/* 180 */           out.write(""?>"");
/*     */           break;
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     } 
/* 188 */     if (hasChildren) {
/* 189 */       for (int i = 0; i < indent; i++) {
/* 190 */         out.write(indentWith);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 195 */     out.write(""</"");
/* 196 */     out.write(element.getTagName());
/* 197 */     out.write("">"");
/* 198 */     out.write(lSep);
/* 199 */     out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encode(String value) {
/* 207 */     StringBuffer sb = new StringBuffer();
/* 208 */     int len = value.length();
/* 209 */     for (int i = 0; i < len; i++) {
/* 210 */       int nextSemi; char c = value.charAt(i);
/* 211 */       switch (c) {
/*     */         case '<':
/* 213 */           sb.append(""&lt;"");
/*     */           break;
/*     */         case '>':
/* 216 */           sb.append(""&gt;"");
/*     */           break;
/*     */         case '\'':
/* 219 */           sb.append(""&apos;"");
/*     */           break;
/*     */         case '""':
/* 222 */           sb.append(""&quot;"");
/*     */           break;
/*     */         case '&':
/* 225 */           nextSemi = value.indexOf("";"", i);
/* 226 */           if (nextSemi < 0 || !isReference(value.substring(i, nextSemi + 1))) {
/*     */             
/* 228 */             sb.append(""&amp;""); break;
/*     */           } 
/* 230 */           sb.append('&');
/*     */           break;
/*     */         
/*     */         default:
/* 234 */           if (isLegalCharacter(c)) {
/* 235 */             sb.append(c);
/*     */           }
/*     */           break;
/*     */       } 
/*     */     } 
/* 240 */     return sb.substring(0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encodedata(String value) {
/* 257 */     StringBuffer sb = new StringBuffer();
/* 258 */     int len = value.length();
/* 259 */     for (int i = 0; i < len; i++) {
/* 260 */       char c = value.charAt(i);
/* 261 */       if (isLegalCharacter(c)) {
/* 262 */         sb.append(c);
/*     */       }
/*     */     } 
/*     */     
/* 266 */     String result = sb.substring(0);
/* 267 */     int cdEnd = result.indexOf(""]]>"");
/* 268 */     while (cdEnd != -1) {
/* 269 */       sb.setLength(cdEnd);
/* 270 */       sb.append(""&#x5d;&#x5d;&gt;"").append(result.substring(cdEnd + 3));
/*     */       
/* 272 */       result = sb.substring(0);
/* 273 */       cdEnd = result.indexOf(""]]>"");
/*     */     } 
/*     */     
/* 276 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isReference(String ent) {
/* 283 */     if (ent.charAt(0) != '&' || !ent.endsWith("";"")) {
/* 284 */       return false;
/*     */     }
/*     */     
/* 287 */     if (ent.charAt(1) == '#') {
/* 288 */       if (ent.charAt(2) == 'x') {
/*     */         try {
/* 290 */           Integer.parseInt(ent.substring(3, ent.length() - 1), 16);
/* 291 */           return true;
/*     */         } catch (NumberFormatException nfe) {
/* 293 */           return false;
/*     */         } 
/*     */       }
/*     */       try {
/* 297 */         Integer.parseInt(ent.substring(2, ent.length() - 1));
/* 298 */         return true;
/*     */       } catch (NumberFormatException nfe) {
/* 300 */         return false;
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 305 */     String name = ent.substring(1, ent.length() - 1);
/* 306 */     for (int i = 0; i < this.knownEntities.length; i++) {
/* 307 */       if (name.equals(this.knownEntities[i])) {
/* 308 */         return true;
/*     */       }
/*     */     } 
/* 311 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isLegalCharacter(char c) {
/* 324 */     if (c == '\t' || c == '\n' || c == '\r')
/* 325 */       return true; 
/* 326 */     if (c < ' ')
/* 327 */       return false; 
/* 328 */     if (c <= '퟿')
/* 329 */       return true; 
/* 330 */     if (c < '')
/* 331 */       return false; 
/* 332 */     if (c <= '�') {
/* 333 */       return true;
/*     */     }
/* 335 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\DOMElementWriter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileNameMapper,"package org.apache.tools.ant.util;
public interface FileNameMapper {
  void setFrom(String paramString);
  void setTo(String paramString);
  String[] mapFileName(String paramString);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\FileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileUtils,"/*      */ package org.apache.tools.ant.util;
/*      */ 
/*      */ import java.io.BufferedInputStream;
/*      */ import java.io.BufferedReader;
/*      */ import java.io.BufferedWriter;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.FileReader;
/*      */ import java.io.FileWriter;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.OutputStreamWriter;
/*      */ import java.io.Reader;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Method;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.text.CharacterIterator;
/*      */ import java.text.DecimalFormat;
/*      */ import java.text.StringCharacterIterator;
/*      */ import java.util.Random;
/*      */ import java.util.Stack;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*      */ import org.apache.tools.ant.launch.Locator;
/*      */ import org.apache.tools.ant.taskdefs.condition.Os;
/*      */ import org.apache.tools.ant.types.FilterSetCollection;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FileUtils
/*      */ {
/*  103 */   private static Random rand = new Random(System.currentTimeMillis());
/*  104 */   private static Object lockReflection = new Object();
/*  105 */   private static Method setLastModified = null;
/*      */   
/*  107 */   private boolean onNetWare = Os.isFamily(""netware"");
/*      */ 
/*      */   
/*  110 */   private static boolean[] isSpecial = new boolean[256];
/*  111 */   private static char[] escapedChar1 = new char[256];
/*  112 */   private static char[] escapedChar2 = new char[256];
/*      */ 
/*      */ 
/*      */   
/*      */   public static final long FAT_FILE_TIMESTAMP_GRANULARITY = 2000L;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static  {
/*  122 */     for (int i = 0; i <= 32; i++) {
/*  123 */       isSpecial[i] = true;
/*  124 */       escapedChar1[i] = Character.forDigit(i >> 4, 16);
/*  125 */       escapedChar2[i] = Character.forDigit(i & 0xF, 16);
/*      */     } 
/*  127 */     isSpecial[127] = true;
/*  128 */     escapedChar1[127] = '7';
/*  129 */     escapedChar2[127] = 'F';
/*  130 */     char[] escChs = { '<', '>', '#', '%', '""', '{', '}', '|', '\\', '^', '~', '[', ']', '`' };
/*      */     
/*  132 */     int len = escChs.length;
/*      */     
/*  134 */     for (int i = 0; i < len; i++) {
/*  135 */       char ch = escChs[i];
/*  136 */       isSpecial[ch] = true;
/*  137 */       escapedChar1[ch] = Character.forDigit(ch >> 4, 16);
/*  138 */       escapedChar2[ch] = Character.forDigit(ch & 0xF, 16);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  148 */   public static FileUtils newFileUtils() { return new FileUtils(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  166 */   public URL getFileURL(File file) throws MalformedURLException { return new URL(toURI(file.getAbsolutePath())); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  182 */   public void copyFile(String sourceFile, String destFile) throws IOException { copyFile(new File(sourceFile), new File(destFile), null, false, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  200 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, false, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  221 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  248 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, preserveLastModified); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  279 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified, String encoding) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, preserveLastModified, encoding); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  314 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String encoding, Project project) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, filterChains, overwrite, preserveLastModified, encoding, project); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  352 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String inputEncoding, String outputEncoding, Project project) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, filterChains, overwrite, preserveLastModified, inputEncoding, outputEncoding, project); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  369 */   public void copyFile(File sourceFile, File destFile) throws IOException { copyFile(sourceFile, destFile, null, false, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  386 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters) throws IOException { copyFile(sourceFile, destFile, filters, false, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  406 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite) throws IOException { copyFile(sourceFile, destFile, filters, overwrite, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  432 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified) throws IOException { copyFile(sourceFile, destFile, filters, overwrite, preserveLastModified, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  464 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified, String encoding) throws IOException { copyFile(sourceFile, destFile, filters, null, overwrite, preserveLastModified, encoding, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  499 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String encoding, Project project) throws IOException { copyFile(sourceFile, destFile, filters, filterChains, overwrite, preserveLastModified, encoding, encoding, project); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String inputEncoding, String outputEncoding, Project project) throws IOException {
/*  538 */     if (overwrite || !destFile.exists() || destFile.lastModified() < sourceFile.lastModified()) {
/*      */ 
/*      */       
/*  541 */       if (destFile.exists() && destFile.isFile()) {
/*  542 */         destFile.delete();
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  547 */       File parent = getParentFile(destFile);
/*  548 */       if (parent != null && !parent.exists()) {
/*  549 */         parent.mkdirs();
/*      */       }
/*      */       
/*  552 */       boolean filterSetsAvailable = (filters != null && filters.hasFilters());
/*      */       
/*  554 */       boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0);
/*      */ 
/*      */       
/*  557 */       if (filterSetsAvailable) {
/*  558 */         BufferedReader in = null;
/*  559 */         BufferedWriter out = null;
/*      */         
/*      */         try {
/*  562 */           if (inputEncoding == null) {
/*  563 */             in = new BufferedReader(new FileReader(sourceFile));
/*      */           } else {
/*  565 */             InputStreamReader isr = new InputStreamReader(new FileInputStream(sourceFile), inputEncoding);
/*      */ 
/*      */             
/*  568 */             in = new BufferedReader(isr);
/*      */           } 
/*      */           
/*  571 */           if (outputEncoding == null) {
/*  572 */             out = new BufferedWriter(new FileWriter(destFile));
/*      */           } else {
/*  574 */             OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile), outputEncoding);
/*      */ 
/*      */             
/*  577 */             out = new BufferedWriter(osw);
/*      */           } 
/*      */           
/*  580 */           if (filterChainsAvailable) {
/*  581 */             ChainReaderHelper crh = new ChainReaderHelper();
/*  582 */             crh.setBufferSize(8192);
/*  583 */             crh.setPrimaryReader(in);
/*  584 */             crh.setFilterChains(filterChains);
/*  585 */             crh.setProject(project);
/*  586 */             Reader rdr = crh.getAssembledReader();
/*  587 */             in = new BufferedReader(rdr);
/*      */           } 
/*      */           
/*  590 */           LineTokenizer lineTokenizer = new LineTokenizer();
/*  591 */           lineTokenizer.setIncludeDelims(true);
/*  592 */           String newline = null;
/*  593 */           String line = lineTokenizer.getToken(in);
/*  594 */           while (line != null) {
/*  595 */             if (line.length() == 0) {
/*      */ 
/*      */               
/*  598 */               out.newLine();
/*      */             } else {
/*  600 */               newline = filters.replaceTokens(line);
/*  601 */               out.write(newline);
/*      */             } 
/*  603 */             line = lineTokenizer.getToken(in);
/*      */           } 
/*      */         } finally {
/*  606 */           if (out != null) {
/*  607 */             out.close();
/*      */           }
/*  609 */           if (in != null) {
/*  610 */             in.close();
/*      */           }
/*      */         } 
/*  613 */       } else if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) {
/*      */ 
/*      */ 
/*      */         
/*  617 */         BufferedReader in = null;
/*  618 */         BufferedWriter out = null;
/*      */         
/*      */         try {
/*  621 */           if (inputEncoding == null) {
/*  622 */             in = new BufferedReader(new FileReader(sourceFile));
/*      */           } else {
/*  624 */             in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), inputEncoding));
/*      */           } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  631 */           if (outputEncoding == null) {
/*  632 */             out = new BufferedWriter(new FileWriter(destFile));
/*      */           } else {
/*  634 */             out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile), outputEncoding));
/*      */           } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  641 */           if (filterChainsAvailable) {
/*  642 */             ChainReaderHelper crh = new ChainReaderHelper();
/*  643 */             crh.setBufferSize(8192);
/*  644 */             crh.setPrimaryReader(in);
/*  645 */             crh.setFilterChains(filterChains);
/*  646 */             crh.setProject(project);
/*  647 */             Reader rdr = crh.getAssembledReader();
/*  648 */             in = new BufferedReader(rdr);
/*      */           } 
/*  650 */           char[] buffer = new char[8192];
/*      */           while (true) {
/*  652 */             int nRead = in.read(buffer, 0, buffer.length);
/*  653 */             if (nRead == -1) {
/*      */               break;
/*      */             }
/*  656 */             out.write(buffer, 0, nRead);
/*      */           } 
/*      */         } finally {
/*  659 */           if (out != null) {
/*  660 */             out.close();
/*      */           }
/*  662 */           if (in != null) {
/*  663 */             in.close();
/*      */           }
/*      */         } 
/*      */       } else {
/*  667 */         FileInputStream in = null;
/*  668 */         FileOutputStream out = null;
/*      */         try {
/*  670 */           in = new FileInputStream(sourceFile);
/*  671 */           out = new FileOutputStream(destFile);
/*      */           
/*  673 */           byte[] buffer = new byte[8192];
/*  674 */           int count = 0;
/*      */           do {
/*  676 */             out.write(buffer, 0, count);
/*  677 */             count = in.read(buffer, 0, buffer.length);
/*  678 */           } while (count != -1);
/*      */         } finally {
/*  680 */           if (out != null) {
/*  681 */             out.close();
/*      */           }
/*  683 */           if (in != null) {
/*  684 */             in.close();
/*      */           }
/*      */         } 
/*      */       } 
/*      */       
/*  689 */       if (preserveLastModified) {
/*  690 */         setFileLastModified(destFile, sourceFile.lastModified());
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected final Method getSetLastModified() {
/*  701 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*  702 */       return null;
/*      */     }
/*  704 */     synchronized (lockReflection) {
/*  705 */       if (setLastModified == null) {
/*      */         try {
/*  707 */           setLastModified = File.class.getMethod(""setLastModified"", new Class[] { long.class });
/*      */         }
/*      */         catch (NoSuchMethodException nse) {
/*      */           
/*  711 */           throw new BuildException(""File.setlastModified not in JDK > 1.1?"", nse);
/*      */         } 
/*      */       }
/*      */     } 
/*      */     
/*  716 */     return setLastModified;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setFileLastModified(File file, long time) throws BuildException {
/*  729 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*      */       return;
/*      */     }
/*  732 */     Long[] times = new Long[1];
/*  733 */     if (time < 0L) {
/*  734 */       times[0] = new Long(System.currentTimeMillis());
/*      */     } else {
/*  736 */       times[0] = new Long(time);
/*      */     } 
/*      */     
/*      */     try {
/*  740 */       getSetLastModified().invoke(file, (Object[])times);
/*      */     } catch (InvocationTargetException ite) {
/*  742 */       Throwable nested = ite.getTargetException();
/*  743 */       throw new BuildException(""Exception setting the modification time of "" + file, nested);
/*      */     } catch (Throwable other) {
/*      */       
/*  746 */       throw new BuildException(""Exception setting the modification time of "" + file, other);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File resolveFile(File file, String filename) {
/*  768 */     filename = filename.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */ 
/*      */ 
/*      */     
/*  772 */     if (!this.onNetWare) {
/*  773 */       if (filename.startsWith(File.separator) || (filename.length() >= 2 && Character.isLetter(filename.charAt(0)) && filename.charAt(1) == ':'))
/*      */       {
/*      */ 
/*      */         
/*  777 */         return normalize(filename);
/*      */       
/*      */       }
/*      */     }
/*      */     else {
/*      */       
/*  783 */       int colon = filename.indexOf("":"");
/*  784 */       if (filename.startsWith(File.separator) || colon > -1)
/*      */       {
/*  786 */         return normalize(filename);
/*      */       }
/*      */     } 
/*      */     
/*  790 */     if (file == null) {
/*  791 */       return new File(filename);
/*      */     }
/*      */     
/*  794 */     File helpFile = new File(file.getAbsolutePath());
/*  795 */     StringTokenizer tok = new StringTokenizer(filename, File.separator);
/*  796 */     while (tok.hasMoreTokens()) {
/*  797 */       String part = tok.nextToken();
/*  798 */       if (part.equals("".."")) {
/*  799 */         helpFile = getParentFile(helpFile);
/*  800 */         if (helpFile == null) {
/*  801 */           String msg = ""The file or path you specified ("" + filename + "") is invalid relative to "" + file.getPath();
/*      */ 
/*      */           
/*  804 */           throw new BuildException(msg);
/*      */         }  continue;
/*  806 */       }  if (part.equals(""."")) {
/*      */         continue;
/*      */       }
/*  809 */       helpFile = new File(helpFile, part);
/*      */     } 
/*      */ 
/*      */     
/*  813 */     return new File(helpFile.getAbsolutePath());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File normalize(String path) {
/*  837 */     String orig = path;
/*      */     
/*  839 */     path = path.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*      */ 
/*      */ 
/*      */     
/*  843 */     int colon = path.indexOf("":"");
/*      */     
/*  845 */     if (!this.onNetWare) {
/*  846 */       if (!path.startsWith(File.separator) && (path.length() < 2 || !Character.isLetter(path.charAt(0)) || colon != 1))
/*      */       {
/*      */ 
/*      */         
/*  850 */         String msg = path + "" is not an absolute path"";
/*  851 */         throw new BuildException(msg);
/*      */       }
/*      */     
/*  854 */     } else if (!path.startsWith(File.separator) && colon == -1) {
/*      */       
/*  856 */       String msg = path + "" is not an absolute path"";
/*  857 */       throw new BuildException(msg);
/*      */     } 
/*      */ 
/*      */     
/*  861 */     boolean dosWithDrive = false;
/*  862 */     String root = null;
/*      */     
/*  864 */     if ((!this.onNetWare && path.length() >= 2 && Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (this.onNetWare && colon > -1)) {
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  869 */       dosWithDrive = true;
/*      */       
/*  871 */       char[] ca = path.replace('/', '\\').toCharArray();
/*  872 */       StringBuffer sbRoot = new StringBuffer();
/*  873 */       for (int i = 0; i < colon; i++) {
/*  874 */         sbRoot.append(Character.toUpperCase(ca[i]));
/*      */       }
/*  876 */       sbRoot.append(':');
/*  877 */       if (colon + 1 < path.length()) {
/*  878 */         sbRoot.append(File.separatorChar);
/*      */       }
/*  880 */       root = sbRoot.toString();
/*      */ 
/*      */       
/*  883 */       StringBuffer sbPath = new StringBuffer();
/*  884 */       for (int i = colon + 1; i < ca.length; i++) {
/*  885 */         if (ca[i] != '\\' || (ca[i] == '\\' && ca[i - 1] != '\\'))
/*      */         {
/*  887 */           sbPath.append(ca[i]);
/*      */         }
/*      */       } 
/*  890 */       path = sbPath.toString().replace('\\', File.separatorChar);
/*      */     
/*      */     }
/*  893 */     else if (path.length() == 1) {
/*  894 */       root = File.separator;
/*  895 */       path = """";
/*  896 */     } else if (path.charAt(1) == File.separatorChar) {
/*      */       
/*  898 */       root = File.separator + File.separator;
/*  899 */       path = path.substring(2);
/*      */     } else {
/*  901 */       root = File.separator;
/*  902 */       path = path.substring(1);
/*      */     } 
/*      */ 
/*      */     
/*  906 */     Stack s = new Stack();
/*  907 */     s.push(root);
/*  908 */     StringTokenizer tok = new StringTokenizer(path, File.separator);
/*  909 */     while (tok.hasMoreTokens()) {
/*  910 */       String thisToken = tok.nextToken();
/*  911 */       if (""."".equals(thisToken))
/*      */         continue; 
/*  913 */       if ("".."".equals(thisToken)) {
/*  914 */         if (s.size() < 2) {
/*  915 */           throw new BuildException(""Cannot resolve path "" + orig);
/*      */         }
/*  917 */         s.pop();
/*      */         continue;
/*      */       } 
/*  920 */       s.push(thisToken);
/*      */     } 
/*      */ 
/*      */     
/*  924 */     StringBuffer sb = new StringBuffer();
/*  925 */     for (int i = 0; i < s.size(); i++) {
/*  926 */       if (i > 1)
/*      */       {
/*      */         
/*  929 */         sb.append(File.separatorChar);
/*      */       }
/*  931 */       sb.append(s.elementAt(i));
/*      */     } 
/*      */ 
/*      */     
/*  935 */     path = sb.toString();
/*  936 */     if (dosWithDrive) {
/*  937 */       path = path.replace('/', '\\');
/*      */     }
/*  939 */     return new File(path);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String toVMSPath(File f) {
/*  954 */     String path = normalize(f.getAbsolutePath()).getPath();
/*  955 */     String name = f.getName();
/*  956 */     boolean isAbsolute = (path.charAt(0) == File.separatorChar);
/*      */     
/*  958 */     boolean isDirectory = (f.isDirectory() && !name.regionMatches(true, name.length() - 4, "".DIR"", 0, 4));
/*      */ 
/*      */     
/*  961 */     String device = null;
/*  962 */     StringBuffer directory = null;
/*  963 */     String file = null;
/*      */     
/*  965 */     int index = 0;
/*      */     
/*  967 */     if (isAbsolute) {
/*  968 */       index = path.indexOf(File.separatorChar, 1);
/*  969 */       if (index == -1) {
/*  970 */         return path.substring(1) + "":[000000]"";
/*      */       }
/*  972 */       device = path.substring(1, index++);
/*      */     } 
/*      */     
/*  975 */     if (isDirectory) {
/*  976 */       directory = new StringBuffer(path.substring(index).replace(File.separatorChar, '.'));
/*      */     } else {
/*      */       
/*  979 */       int dirEnd = path.lastIndexOf(File.separatorChar, path.length());
/*      */       
/*  981 */       if (dirEnd == -1 || dirEnd < index) {
/*  982 */         file = path.substring(index);
/*      */       } else {
/*  984 */         directory = new StringBuffer(path.substring(index, dirEnd).replace(File.separatorChar, '.'));
/*      */         
/*  986 */         index = dirEnd + 1;
/*  987 */         if (path.length() > index) {
/*  988 */           file = path.substring(index);
/*      */         }
/*      */       } 
/*      */     } 
/*  992 */     if (!isAbsolute && directory != null) {
/*  993 */       directory.insert(0, '.');
/*      */     }
/*  995 */     String osPath = ((device != null) ? (device + "":"") : """") + ((directory != null) ? (""["" + directory + ""]"") : """") + ((file != null) ? file : """");
/*      */ 
/*      */     
/*  998 */     return osPath;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File createTempFile(String prefix, String suffix, File parentDir) {
/* 1023 */     File result = null;
/* 1024 */     String parent = System.getProperty(""java.io.tmpdir"");
/* 1025 */     if (parentDir != null) {
/* 1026 */       parent = parentDir.getPath();
/*      */     }
/* 1028 */     DecimalFormat fmt = new DecimalFormat(""#####"");
/* 1029 */     synchronized (rand) {
/*      */       do {
/* 1031 */         result = new File(parent, prefix + fmt.format(Math.abs(rand.nextInt())) + suffix);
/*      */       
/*      */       }
/* 1034 */       while (result.exists());
/*      */     } 
/* 1036 */     return result;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean contentEquals(File f1, File f2) throws IOException {
/* 1057 */     if (f1.exists() != f2.exists()) {
/* 1058 */       return false;
/*      */     }
/*      */     
/* 1061 */     if (!f1.exists())
/*      */     {
/* 1063 */       return true;
/*      */     }
/*      */     
/* 1066 */     if (f1.isDirectory() || f2.isDirectory())
/*      */     {
/* 1068 */       return false;
/*      */     }
/*      */     
/* 1071 */     if (fileNameEquals(f1, f2))
/*      */     {
/* 1073 */       return true;
/*      */     }
/*      */     
/* 1076 */     if (f1.length() != f2.length())
/*      */     {
/* 1078 */       return false;
/*      */     }
/*      */     
/* 1081 */     InputStream in1 = null;
/* 1082 */     InputStream in2 = null;
/*      */     try {
/* 1084 */       in1 = new BufferedInputStream(new FileInputStream(f1));
/* 1085 */       in2 = new BufferedInputStream(new FileInputStream(f2));
/*      */       
/* 1087 */       int expectedByte = in1.read();
/* 1088 */       while (expectedByte != -1) {
/* 1089 */         if (expectedByte != in2.read()) {
/* 1090 */           return false;
/*      */         }
/* 1092 */         expectedByte = in1.read();
/*      */       } 
/* 1094 */       if (in2.read() != -1) {
/* 1095 */         return false;
/*      */       }
/* 1097 */       return true;
/*      */     } finally {
/* 1099 */       if (in1 != null) {
/*      */         try {
/* 1101 */           in1.close();
/* 1102 */         } catch (IOException e) {}
/*      */       }
/*      */ 
/*      */       
/* 1106 */       if (in2 != null) {
/*      */         try {
/* 1108 */           in2.close();
/* 1109 */         } catch (IOException e) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File getParentFile(File f) {
/* 1126 */     if (f != null) {
/* 1127 */       String p = f.getParent();
/* 1128 */       if (p != null) {
/* 1129 */         return new File(p);
/*      */       }
/*      */     } 
/* 1132 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1144 */   public static final String readFully(Reader rdr) throws IOException { return readFully(rdr, 8192); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static final String readFully(Reader rdr, int bufferSize) throws IOException {
/* 1160 */     if (bufferSize <= 0) {
/* 1161 */       throw new IllegalArgumentException(""Buffer size must be greater than 0"");
/*      */     }
/*      */     
/* 1164 */     char[] buffer = new char[bufferSize];
/* 1165 */     int bufferLength = 0;
/* 1166 */     String text = null;
/* 1167 */     StringBuffer textBuffer = null;
/* 1168 */     while (bufferLength != -1) {
/* 1169 */       bufferLength = rdr.read(buffer);
/* 1170 */       if (bufferLength != -1) {
/* 1171 */         if (textBuffer == null) {
/* 1172 */           textBuffer = new StringBuffer(new String(buffer, 0, bufferLength));
/*      */           continue;
/*      */         } 
/* 1175 */         textBuffer.append(new String(buffer, 0, bufferLength));
/*      */       } 
/*      */     } 
/*      */     
/* 1179 */     if (textBuffer != null) {
/* 1180 */       text = textBuffer.toString();
/*      */     }
/* 1182 */     return text;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean createNewFile(File f) throws IOException {
/* 1196 */     if (f != null) {
/* 1197 */       if (f.exists()) {
/* 1198 */         return false;
/*      */       }
/*      */       
/* 1201 */       FileOutputStream fos = null;
/*      */       try {
/* 1203 */         fos = new FileOutputStream(f);
/* 1204 */         fos.write(new byte[0]);
/*      */       } finally {
/* 1206 */         if (fos != null) {
/* 1207 */           fos.close();
/*      */         }
/*      */       } 
/*      */       
/* 1211 */       return true;
/*      */     } 
/* 1213 */     return false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean isSymbolicLink(File parent, String name) throws IOException {
/* 1231 */     File resolvedParent = new File(parent.getCanonicalPath());
/* 1232 */     File toTest = new File(resolvedParent, name);
/* 1233 */     return !toTest.getAbsolutePath().equals(toTest.getCanonicalPath());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String removeLeadingPath(File leading, File path) {
/* 1248 */     String l = normalize(leading.getAbsolutePath()).getAbsolutePath();
/* 1249 */     String p = normalize(path.getAbsolutePath()).getAbsolutePath();
/* 1250 */     if (l.equals(p)) {
/* 1251 */       return """";
/*      */     }
/*      */ 
/*      */ 
/*      */     
/* 1256 */     if (!l.endsWith(File.separator)) {
/* 1257 */       l = l + File.separator;
/*      */     }
/*      */     
/* 1260 */     if (p.startsWith(l)) {
/* 1261 */       return p.substring(l.length());
/*      */     }
/* 1263 */     return p;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String toURI(String path) {
/* 1280 */     boolean isDir = (new File(path)).isDirectory();
/*      */     
/* 1282 */     StringBuffer sb = new StringBuffer(""file:"");
/*      */ 
/*      */     
/*      */     try {
/* 1286 */       path = normalize(path).getAbsolutePath();
/* 1287 */       sb.append(""//"");
/*      */       
/* 1289 */       if (!path.startsWith(File.separator)) {
/* 1290 */         sb.append(""/"");
/*      */       }
/*      */     }
/* 1293 */     catch (BuildException e) {}
/*      */ 
/*      */ 
/*      */     
/* 1297 */     path = path.replace('\\', '/');
/*      */     
/* 1299 */     CharacterIterator iter = new StringCharacterIterator(path);
/* 1300 */     for (char c = iter.first(); c != Character.MAX_VALUE; 
/* 1301 */       c = iter.next()) {
/* 1302 */       if (isSpecial[c]) {
/* 1303 */         sb.append('%');
/* 1304 */         sb.append(escapedChar1[c]);
/* 1305 */         sb.append(escapedChar2[c]);
/*      */       } else {
/* 1307 */         sb.append(c);
/*      */       } 
/*      */     } 
/* 1310 */     if (isDir && !path.endsWith(""/"")) {
/* 1311 */       sb.append('/');
/*      */     }
/* 1313 */     return sb.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String fromURI(String uri) {
/* 1329 */     String path = Locator.fromURI(uri);
/*      */ 
/*      */     
/*      */     try {
/* 1333 */       path = normalize(path).getAbsolutePath();
/* 1334 */     } catch (BuildException e) {}
/*      */ 
/*      */     
/* 1337 */     return path;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1355 */   public boolean fileNameEquals(File f1, File f2) { return normalize(f1.getAbsolutePath()).equals(normalize(f2.getAbsolutePath())); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void rename(File from, File to) throws IOException {
/* 1377 */     if (to.exists() && !to.delete()) {
/* 1378 */       throw new IOException(""Failed to delete "" + to + "" while trying to rename "" + from);
/*      */     }
/*      */ 
/*      */     
/* 1382 */     File parent = getParentFile(to);
/* 1383 */     if (parent != null && !parent.exists() && !parent.mkdirs()) {
/* 1384 */       throw new IOException(""Failed to create directory "" + parent + "" while trying to rename "" + from);
/*      */     }
/*      */ 
/*      */     
/* 1388 */     if (!from.renameTo(to)) {
/* 1389 */       copyFile(from, to);
/* 1390 */       if (!from.delete()) {
/* 1391 */         throw new IOException(""Failed to delete "" + from + "" while trying to rename it."");
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */   
/*      */   public long getFileTimestampGranularity() {
/* 1398 */     if (Os.isFamily(""dos"")) {
/* 1399 */       return 2000L;
/*      */     }
/* 1401 */     return 0L;
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\FileUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FlatFileNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FlatFileNameMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String from) {}
/*    */   
/*    */   public void setTo(String to) {}
/*    */   
/* 85 */   public String[] mapFileName(String sourceFileName) { return new String[] { (new File(sourceFileName)).getName() }; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\FlatFileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.GlobPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GlobPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  75 */   protected String fromPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   protected String fromPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int prefixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int postfixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   protected String toPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   protected String toPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String from) {
/* 106 */     int index = from.lastIndexOf(""*"");
/* 107 */     if (index == -1) {
/* 108 */       this.fromPrefix = from;
/* 109 */       this.fromPostfix = """";
/*     */     } else {
/* 111 */       this.fromPrefix = from.substring(0, index);
/* 112 */       this.fromPostfix = from.substring(index + 1);
/*     */     } 
/* 114 */     this.prefixLength = this.fromPrefix.length();
/* 115 */     this.postfixLength = this.fromPostfix.length();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTo(String to) {
/* 122 */     int index = to.lastIndexOf(""*"");
/* 123 */     if (index == -1) {
/* 124 */       this.toPrefix = to;
/* 125 */       this.toPostfix = """";
/*     */     } else {
/* 127 */       this.toPrefix = to.substring(0, index);
/* 128 */       this.toPostfix = to.substring(index + 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String sourceFileName) {
/* 138 */     if (this.fromPrefix == null || !sourceFileName.startsWith(this.fromPrefix) || !sourceFileName.endsWith(this.fromPostfix))
/*     */     {
/*     */       
/* 141 */       return null;
/*     */     }
/* 143 */     return new String[] { this.toPrefix + extractVariablePart(sourceFileName) + this.toPostfix };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   protected String extractVariablePart(String name) { return name.substring(this.prefixLength, name.length() - this.postfixLength); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\GlobPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.IdentityMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IdentityMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String from) {}
/*    */   
/*    */   public void setTo(String to) {}
/*    */   
/* 83 */   public String[] mapFileName(String sourceFileName) { return new String[] { sourceFileName }; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\IdentityMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.JavaEnvUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JavaEnvUtils
/*     */ {
/*  71 */   private static final boolean isDos = Os.isFamily(""dos"");
/*     */   
/*  73 */   private static final boolean isNetware = Os.isName(""netware"");
/*     */   
/*  75 */   private static final boolean isAix = Os.isName(""aix"");
/*     */ 
/*     */   
/*  78 */   private static final String javaHome = System.getProperty(""java.home"");
/*     */ 
/*     */   
/*  81 */   private static final FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */   
/*     */   private static String javaVersion;
/*     */ 
/*     */ 
/*     */   
/*     */   private static int javaVersionNumber;
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_0 = ""1.0"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_1 = ""1.1"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_2 = ""1.2"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_3 = ""1.3"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_4 = ""1.4"";
/*     */ 
/*     */   
/*     */   private static Vector jrePackages;
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/*     */     try {
/* 114 */       javaVersion = ""1.0"";
/* 115 */       javaVersionNumber = 10;
/* 116 */       Class.forName(""java.lang.Void"");
/* 117 */       javaVersion = ""1.1"";
/* 118 */       javaVersionNumber++;
/* 119 */       Class.forName(""java.lang.ThreadLocal"");
/* 120 */       javaVersion = ""1.2"";
/* 121 */       javaVersionNumber++;
/* 122 */       Class.forName(""java.lang.StrictMath"");
/* 123 */       javaVersion = ""1.3"";
/* 124 */       javaVersionNumber++;
/* 125 */       Class.forName(""java.lang.CharSequence"");
/* 126 */       javaVersion = ""1.4"";
/* 127 */       javaVersionNumber++;
/* 128 */     } catch (Throwable t) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public static String getJavaVersion() { return javaVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public static boolean isJavaVersion(String version) { return (javaVersion == version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getJreExecutable(String command) {
/* 172 */     if (isNetware)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 177 */       return command;
/*     */     }
/*     */     
/* 180 */     File jExecutable = null;
/*     */     
/* 182 */     if (isAix)
/*     */     {
/*     */       
/* 185 */       jExecutable = findInDir(javaHome + ""/sh"", command);
/*     */     }
/*     */     
/* 188 */     if (jExecutable == null) {
/* 189 */       jExecutable = findInDir(javaHome + ""/bin"", command);
/*     */     }
/*     */     
/* 192 */     if (jExecutable != null) {
/* 193 */       return jExecutable.getAbsolutePath();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 198 */     return addExtension(command);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getJdkExecutable(String command) {
/* 212 */     if (isNetware)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 217 */       return command;
/*     */     }
/*     */     
/* 220 */     File jExecutable = null;
/*     */     
/* 222 */     if (isAix)
/*     */     {
/*     */       
/* 225 */       jExecutable = findInDir(javaHome + ""/../sh"", command);
/*     */     }
/*     */     
/* 228 */     if (jExecutable == null) {
/* 229 */       jExecutable = findInDir(javaHome + ""/../bin"", command);
/*     */     }
/*     */     
/* 232 */     if (jExecutable != null) {
/* 233 */       return jExecutable.getAbsolutePath();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 238 */     return getJreExecutable(command);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   private static String addExtension(String command) { return command + (isDos ? "".exe"" : """"); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static File findInDir(String dirName, String commandName) {
/* 259 */     File dir = fileUtils.normalize(dirName);
/* 260 */     File executable = null;
/* 261 */     if (dir.exists()) {
/* 262 */       executable = new File(dir, addExtension(commandName));
/* 263 */       if (!executable.exists()) {
/* 264 */         executable = null;
/*     */       }
/*     */     } 
/* 267 */     return executable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void buildJrePackages() {
/* 276 */     jrePackages = new Vector();
/* 277 */     switch (javaVersionNumber) {
/*     */       case 14:
/* 279 */         jrePackages.addElement(""org.apache.crimson"");
/* 280 */         jrePackages.addElement(""org.apache.xalan"");
/* 281 */         jrePackages.addElement(""org.apache.xml"");
/* 282 */         jrePackages.addElement(""org.apache.xpath"");
/* 283 */         jrePackages.addElement(""org.ietf.jgss"");
/* 284 */         jrePackages.addElement(""org.w3c.dom"");
/* 285 */         jrePackages.addElement(""org.xml.sax"");
/*     */       
/*     */       case 13:
/* 288 */         jrePackages.addElement(""org.omg"");
/* 289 */         jrePackages.addElement(""com.sun.corba"");
/* 290 */         jrePackages.addElement(""com.sun.jndi"");
/* 291 */         jrePackages.addElement(""com.sun.media"");
/* 292 */         jrePackages.addElement(""com.sun.naming"");
/* 293 */         jrePackages.addElement(""com.sun.org.omg"");
/* 294 */         jrePackages.addElement(""com.sun.rmi"");
/* 295 */         jrePackages.addElement(""sunw.io"");
/* 296 */         jrePackages.addElement(""sunw.util"");
/*     */       
/*     */       case 12:
/* 299 */         jrePackages.addElement(""com.sun.java"");
/* 300 */         jrePackages.addElement(""com.sun.image"");
/*     */         break;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 306 */     jrePackages.addElement(""sun"");
/* 307 */     jrePackages.addElement(""java"");
/* 308 */     jrePackages.addElement(""javax"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector getJrePackageTestCases() {
/* 317 */     Vector tests = new Vector();
/* 318 */     tests.addElement(""java.lang.Object"");
/* 319 */     switch (javaVersionNumber) {
/*     */       case 14:
/* 321 */         tests.addElement(""sun.audio.AudioPlayer"");
/* 322 */         tests.addElement(""org.apache.crimson.parser.ContentModel"");
/* 323 */         tests.addElement(""org.apache.xalan.processor.ProcessorImport"");
/* 324 */         tests.addElement(""org.apache.xml.utils.URI"");
/* 325 */         tests.addElement(""org.apache.xpath.XPathFactory"");
/* 326 */         tests.addElement(""org.ietf.jgss.Oid"");
/* 327 */         tests.addElement(""org.w3c.dom.Attr"");
/* 328 */         tests.addElement(""org.xml.sax.XMLReader"");
/*     */       
/*     */       case 13:
/* 331 */         tests.addElement(""org.omg.CORBA.Any"");
/* 332 */         tests.addElement(""com.sun.corba.se.internal.corba.AnyImpl"");
/* 333 */         tests.addElement(""com.sun.jndi.ldap.LdapURL"");
/* 334 */         tests.addElement(""com.sun.media.sound.Printer"");
/* 335 */         tests.addElement(""com.sun.naming.internal.VersionHelper"");
/* 336 */         tests.addElement(""com.sun.org.omg.CORBA.Initializer"");
/* 337 */         tests.addElement(""sunw.io.Serializable"");
/* 338 */         tests.addElement(""sunw.util.EventListener"");
/*     */       
/*     */       case 12:
/* 341 */         tests.addElement(""javax.accessibility.Accessible"");
/* 342 */         tests.addElement(""sun.misc.BASE64Encoder"");
/* 343 */         tests.addElement(""com.sun.image.codec.jpeg.JPEGCodec"");
/*     */         break;
/*     */     } 
/*     */ 
/*     */     
/* 348 */     tests.addElement(""sun.reflect.SerializationConstructorAccessorImpl"");
/* 349 */     tests.addElement(""sun.net.www.http.HttpClient"");
/* 350 */     tests.addElement(""sun.audio.AudioPlayer"");
/*     */ 
/*     */     
/* 353 */     return tests;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector getJrePackages() {
/* 361 */     if (jrePackages == null) {
/* 362 */       buildJrePackages();
/*     */     }
/* 364 */     return jrePackages;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\JavaEnvUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.JAXPUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import javax.xml.parsers.FactoryConfigurationError;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.xml.sax.Parser;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.XMLReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JAXPUtils
/*     */ {
/*  85 */   private static final FileUtils fu = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   private static SAXParserFactory parserFactory = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   private static SAXParserFactory nsParserFactory = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   private static DocumentBuilderFactory builderFactory = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized SAXParserFactory getParserFactory() throws BuildException {
/* 120 */     if (parserFactory == null) {
/* 121 */       parserFactory = newParserFactory();
/*     */     }
/* 123 */     return parserFactory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized SAXParserFactory getNSParserFactory() throws BuildException {
/* 137 */     if (nsParserFactory == null) {
/* 138 */       nsParserFactory = newParserFactory();
/* 139 */       nsParserFactory.setNamespaceAware(true);
/*     */     } 
/* 141 */     return nsParserFactory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SAXParserFactory newParserFactory() throws BuildException {
/*     */     try {
/* 152 */       return SAXParserFactory.newInstance();
/*     */     } catch (FactoryConfigurationError e) {
/* 154 */       throw new BuildException(""XML parser factory has not been configured correctly: "" + e.getMessage(), e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Parser getParser() throws BuildException {
/*     */     try {
/* 170 */       return newSAXParser(getParserFactory()).getParser();
/*     */     } catch (SAXException e) {
/* 172 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static XMLReader getXMLReader() throws BuildException {
/*     */     try {
/* 186 */       return newSAXParser(getParserFactory()).getXMLReader();
/*     */     } catch (SAXException e) {
/* 188 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static XMLReader getNamespaceXMLReader() throws BuildException {
/*     */     try {
/* 201 */       return newSAXParser(getNSParserFactory()).getXMLReader();
/*     */     } catch (SAXException e) {
/* 203 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public static String getSystemId(File file) { return fu.toURI(file.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static DocumentBuilder getDocumentBuilder() throws BuildException {
/*     */     try {
/* 228 */       return getDocumentBuilderFactory().newDocumentBuilder();
/*     */     } catch (ParserConfigurationException e) {
/* 230 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static SAXParser newSAXParser(SAXParserFactory factory) throws BuildException {
/*     */     try {
/* 243 */       return factory.newSAXParser();
/*     */     } catch (ParserConfigurationException e) {
/* 245 */       throw new BuildException(""Cannot create parser for the given configuration: "" + e.getMessage(), e);
/*     */     } catch (SAXException e) {
/*     */       
/* 248 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static BuildException convertToBuildException(SAXException e) {
/* 258 */     Exception nested = e.getException();
/* 259 */     if (nested != null) {
/* 260 */       return new BuildException(nested);
/*     */     }
/* 262 */     return new BuildException(e);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static synchronized DocumentBuilderFactory getDocumentBuilderFactory() throws BuildException {
/* 274 */     if (builderFactory == null) {
/*     */       try {
/* 276 */         builderFactory = DocumentBuilderFactory.newInstance();
/*     */       } catch (FactoryConfigurationError e) {
/* 278 */         throw new BuildException(""Document builder factory has not been configured correctly: "" + e.getMessage(), e);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 283 */     return builderFactory;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\JAXPUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.KeepAliveInputStream,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.FilterInputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.InputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KeepAliveInputStream
/*    */   extends FilterInputStream
/*    */ {
/* 79 */   public KeepAliveInputStream(InputStream in) { super(in); }
/*    */   
/*    */   public void close() throws IOException {}
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\KeepAliveInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.KeepAliveOutputStream,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.FilterOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KeepAliveOutputStream
/*    */   extends FilterOutputStream
/*    */ {
/* 78 */   public KeepAliveOutputStream(OutputStream out) { super(out); }
/*    */   
/*    */   public void close() throws IOException {}
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\KeepAliveOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.LazyFileOutputStream,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LazyFileOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private FileOutputStream fos;
/*     */   private File file;
/*     */   private boolean append;
/*     */   private boolean opened = false;
/*     */   private boolean closed = false;
/*     */   
/*  81 */   public LazyFileOutputStream(String name) { this(name, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public LazyFileOutputStream(String name, boolean append) { this(new File(name), append); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public LazyFileOutputStream(File f) { this(f, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LazyFileOutputStream(File file, boolean append) {
/* 107 */     this.file = file;
/* 108 */     this.append = append;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void open() throws IOException { ensureOpened(); }
/*     */ 
/*     */   
/*     */   public synchronized void close() throws IOException {
/* 121 */     if (this.opened) {
/* 122 */       this.fos.close();
/*     */     }
/* 124 */     this.closed = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void write(byte[] b) throws IOException { write(b, 0, b.length); }
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void write(byte[] b, int offset, int len) throws IOException {
/* 136 */     ensureOpened();
/* 137 */     this.fos.write(b, offset, len);
/*     */   }
/*     */   
/*     */   public synchronized void write(int b) throws IOException {
/* 141 */     ensureOpened();
/* 142 */     this.fos.write(b);
/*     */   }
/*     */   
/*     */   private synchronized void ensureOpened() throws IOException {
/* 146 */     if (this.closed) {
/* 147 */       throw new IOException(this.file + "" has already been closed."");
/*     */     }
/*     */     
/* 150 */     if (!this.opened) {
/* 151 */       this.fos = new FileOutputStream(this.file.getAbsolutePath(), this.append);
/* 152 */       this.opened = true;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\LazyFileOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.LazyHashtable,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LazyHashtable
/*     */   extends Hashtable
/*     */ {
/*     */   protected boolean initAllDone = false;
/*     */   
/*     */   protected void initAll() {
/*  79 */     if (this.initAllDone) {
/*     */       return;
/*     */     }
/*  82 */     this.initAllDone = true;
/*     */   }
/*     */ 
/*     */   
/*     */   public Enumeration elements() {
/*  87 */     initAll();
/*  88 */     return super.elements();
/*     */   }
/*     */   
/*     */   public boolean isEmpty() {
/*  92 */     initAll();
/*  93 */     return super.isEmpty();
/*     */   }
/*     */   
/*     */   public int size() {
/*  97 */     initAll();
/*  98 */     return super.size();
/*     */   }
/*     */   
/*     */   public boolean contains(Object value) {
/* 102 */     initAll();
/* 103 */     return super.contains(value);
/*     */   }
/*     */   
/*     */   public boolean containsKey(Object value) {
/* 107 */     initAll();
/* 108 */     return super.containsKey(value);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public boolean containsValue(Object value) { return contains(value); }
/*     */ 
/*     */   
/*     */   public Enumeration keys() {
/* 119 */     initAll();
/* 120 */     return super.keys();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\LazyHashtable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.LineTokenizer,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LineTokenizer
/*     */   extends ProjectComponent
/*     */   implements Tokenizer
/*     */ {
/*  69 */   private String lineEnd = """";
/*  70 */   private int pushed = -2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean includeDelims = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  82 */   public void setIncludeDelims(boolean includeDelims) { this.includeDelims = includeDelims; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getToken(Reader in) throws IOException {
/*  93 */     int ch = -1;
/*  94 */     if (this.pushed != -2) {
/*  95 */       ch = this.pushed;
/*  96 */       this.pushed = -2;
/*     */     } else {
/*  98 */       ch = in.read();
/*     */     } 
/* 100 */     if (ch == -1) {
/* 101 */       return null;
/*     */     }
/*     */     
/* 104 */     this.lineEnd = """";
/* 105 */     StringBuffer line = new StringBuffer();
/*     */     
/* 107 */     int state = 0;
/* 108 */     while (ch != -1) {
/* 109 */       if (state == 0) {
/* 110 */         if (ch == 13)
/* 111 */         { state = 1; }
/* 112 */         else { if (ch == 10) {
/* 113 */             this.lineEnd = ""\n"";
/*     */             break;
/*     */           } 
/* 116 */           line.append((char)ch); }
/*     */       
/*     */       } else {
/* 119 */         state = 0;
/* 120 */         if (ch == 10) {
/* 121 */           this.lineEnd = ""\r\n""; break;
/*     */         } 
/* 123 */         this.pushed = ch;
/* 124 */         this.lineEnd = ""\r"";
/*     */         
/*     */         break;
/*     */       } 
/* 128 */       ch = in.read();
/*     */     } 
/* 130 */     if (ch == -1 && state == 1) {
/* 131 */       this.lineEnd = ""\r"";
/*     */     }
/*     */     
/* 134 */     if (this.includeDelims) {
/* 135 */       line.append(this.lineEnd);
/*     */     }
/* 137 */     return line.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getPostToken() {
/* 144 */     if (this.includeDelims) {
/* 145 */       return """";
/*     */     }
/* 147 */     return this.lineEnd;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\LineTokenizer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.LoaderUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.launch.Locator;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoaderUtils
/*     */ {
/*     */   public static void setContextClassLoader(ClassLoader loader) {
/*  73 */     Thread currentThread = Thread.currentThread();
/*  74 */     currentThread.setContextClassLoader(loader);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getContextClassLoader() {
/*  85 */     Thread currentThread = Thread.currentThread();
/*  86 */     return currentThread.getContextClassLoader();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public static boolean isContextLoaderAvailable() { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static File normalizeSource(File source) {
/* 107 */     if (source != null) {
/* 108 */       FileUtils fileUtils = FileUtils.newFileUtils();
/*     */       try {
/* 110 */         source = fileUtils.normalize(source.getAbsolutePath());
/* 111 */       } catch (BuildException e) {}
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 116 */     return source;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public static File getClassSource(Class c) { return normalizeSource(Locator.getClassSource(c)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static File getResourceSource(ClassLoader c, String resource) {
/* 144 */     if (c == null) {
/* 145 */       c = LoaderUtils.class.getClassLoader();
/*     */     }
/* 147 */     return normalizeSource(Locator.getResourceSource(c, resource));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\LoaderUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.MergingMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MergingMapper
/*    */   implements FileNameMapper
/*    */ {
/* 67 */   protected String[] mergedFile = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void setFrom(String from) {}
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 79 */   public void setTo(String to) { this.mergedFile = new String[] { to }; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public String[] mapFileName(String sourceFileName) { return this.mergedFile; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\MergingMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.PackageNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PackageNameMapper
/*    */   extends GlobPatternMapper
/*    */ {
/*    */   protected String extractVariablePart(String name) {
/* 78 */     String var = name.substring(this.prefixLength, name.length() - this.postfixLength);
/*    */     
/* 80 */     return var.replace(File.separatorChar, '.');
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\PackageNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.RegexpPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcher;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcherFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  69 */   protected RegexpMatcher reg = null;
/*  70 */   protected char[] to = null;
/*  71 */   protected StringBuffer result = new StringBuffer();
/*     */ 
/*     */   
/*  74 */   public RegexpPatternMapper() throws BuildException { this.reg = (new RegexpMatcherFactory()).newRegexpMatcher(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String from) throws BuildException {
/*     */     try {
/*  82 */       this.reg.setPattern(from);
/*     */     }
/*     */     catch (NoClassDefFoundError e) {
/*     */       
/*  86 */       throw new BuildException(""Cannot load regular expression matcher"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setTo(String to) { this.to = to.toCharArray(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String sourceFileName) {
/* 104 */     if (this.reg == null || this.to == null || !this.reg.matches(sourceFileName))
/*     */     {
/* 106 */       return null;
/*     */     }
/* 108 */     return new String[] { replaceReferences(sourceFileName) };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String replaceReferences(String source) {
/* 116 */     Vector v = this.reg.getGroups(source);
/*     */     
/* 118 */     this.result.setLength(0);
/* 119 */     for (int i = 0; i < this.to.length; i++) {
/* 120 */       if (this.to[i] == '\\') {
/* 121 */         if (++i < this.to.length) {
/* 122 */           int value = Character.digit(this.to[i], 10);
/* 123 */           if (value > -1) {
/* 124 */             this.result.append(v.elementAt(value));
/*     */           } else {
/* 126 */             this.result.append(this.to[i]);
/*     */           } 
/*     */         } else {
/*     */           
/* 130 */           this.result.append('\\');
/*     */         } 
/*     */       } else {
/* 133 */         this.result.append(this.to[i]);
/*     */       } 
/*     */     } 
/* 136 */     return this.result.substring(0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\RegexpPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.ResourceUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.Resource;
/*     */ import org.apache.tools.ant.types.ResourceFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ResourceUtils
/*     */ {
/*     */   public static Resource[] selectOutOfDateSources(ProjectComponent logTo, Resource[] source, FileNameMapper mapper, ResourceFactory targets) {
/*  91 */     long now = (new Date()).getTime();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 101 */     if (Os.isFamily(""windows"")) {
/* 102 */       now += 2000L;
/*     */     }
/*     */     
/* 105 */     Vector vresult = new Vector();
/* 106 */     for (int counter = 0; counter < source.length; counter++) {
/* 107 */       if (source[counter].getLastModified() > now) {
/* 108 */         logTo.log(""Warning: "" + source[counter].getName() + "" modified in the future."", 1);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 113 */       String[] targetnames = mapper.mapFileName(source[counter].getName().replace('/', File.separatorChar));
/*     */ 
/*     */       
/* 116 */       if (targetnames != null) {
/* 117 */         boolean added = false;
/* 118 */         StringBuffer targetList = new StringBuffer();
/* 119 */         for (int ctarget = 0; !added && ctarget < targetnames.length; 
/* 120 */           ctarget++) {
/* 121 */           Resource atarget = targets.getResource(targetnames[ctarget].replace(File.separatorChar, '/'));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 127 */           if (!atarget.isExists()) {
/* 128 */             logTo.log(source[counter].getName() + "" added as "" + atarget.getName() + "" doesn't exist."", 3);
/*     */ 
/*     */             
/* 131 */             vresult.addElement(source[counter]);
/* 132 */             added = true;
/* 133 */           } else if (!atarget.isDirectory() && atarget.getLastModified() < source[counter].getLastModified()) {
/*     */             
/* 135 */             logTo.log(source[counter].getName() + "" added as "" + atarget.getName() + "" is outdated."", 3);
/*     */ 
/*     */             
/* 138 */             vresult.addElement(source[counter]);
/* 139 */             added = true;
/*     */           } else {
/* 141 */             if (targetList.length() > 0) {
/* 142 */               targetList.append("", "");
/*     */             }
/* 144 */             targetList.append(atarget.getName());
/*     */           } 
/*     */         } 
/*     */         
/* 148 */         if (!added) {
/* 149 */           logTo.log(source[counter].getName() + "" omitted as "" + targetList.toString() + ((targetnames.length == 1) ? "" is"" : "" are "") + "" up to date."", 3);
/*     */         
/*     */         }
/*     */       }
/*     */       else {
/*     */         
/* 155 */         logTo.log(source[counter].getName() + "" skipped - don't know how to handle it"", 3);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 160 */     Resource[] result = new Resource[vresult.size()];
/* 161 */     vresult.copyInto((Object[])result);
/* 162 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\ResourceUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.ScriptRunner,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import org.apache.bsf.BSFException;
/*     */ import org.apache.bsf.BSFManager;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ScriptRunner
/*     */ {
/*     */   private String language;
/*  77 */   private String script = """";
/*     */ 
/*     */   
/*  80 */   private Map beans = new HashMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addBeans(Map dictionary) {
/*  90 */     for (Iterator i = dictionary.keySet().iterator(); i.hasNext(); ) {
/*  91 */       String key = i.next();
/*     */       try {
/*  93 */         Object val = dictionary.get(key);
/*  94 */         addBean(key, val);
/*  95 */       } catch (BuildException ex) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addBean(String key, Object bean) {
/* 111 */     boolean isValid = (key.length() > 0 && Character.isJavaIdentifierStart(key.charAt(0)));
/*     */ 
/*     */     
/* 114 */     for (int i = 1; isValid && i < key.length(); i++) {
/* 115 */       isValid = Character.isJavaIdentifierPart(key.charAt(i));
/*     */     }
/*     */     
/* 118 */     if (isValid) {
/* 119 */       this.beans.put(key, bean);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void executeScript(String execName) throws BuildException {
/* 132 */     if (this.language == null) {
/* 133 */       throw new BuildException(""script language must be specified"");
/*     */     }
/*     */     
/*     */     try {
/* 137 */       BSFManager manager = new BSFManager();
/*     */       
/* 139 */       for (Iterator i = this.beans.keySet().iterator(); i.hasNext(); ) {
/* 140 */         String key = i.next();
/* 141 */         Object value = this.beans.get(key);
/* 142 */         if (value != null) {
/* 143 */           manager.declareBean(key, value, value.getClass());
/*     */ 
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 149 */         manager.undeclareBean(key);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 154 */       manager.exec(this.language, execName, 0, 0, this.script);
/*     */     } catch (BSFException be) {
/* 156 */       Object object = be = null;
/* 157 */       Throwable te = be.getTargetException();
/* 158 */       if (te != null) {
/* 159 */         if (te instanceof BuildException) {
/* 160 */           throw (BuildException)te;
/*     */         }
/* 162 */         object = te;
/*     */       } 
/*     */       
/* 165 */       throw new BuildException((Throwable)object);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void setLanguage(String language) { this.language = language; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public String getLanguage() { return this.language; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrc(File file) {
/* 193 */     if (!file.exists()) {
/* 194 */       throw new BuildException(""file "" + file.getPath() + "" not found."");
/*     */     }
/*     */     
/* 197 */     int count = (int)file.length();
/* 198 */     byte[] data = new byte[count];
/*     */     
/*     */     try {
/* 201 */       FileInputStream inStream = new FileInputStream(file);
/* 202 */       inStream.read(data);
/* 203 */       inStream.close();
/*     */     } catch (IOException e) {
/* 205 */       throw new BuildException(e);
/*     */     } 
/*     */     
/* 208 */     this.script += new String(data);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void addText(String text) { this.script += text; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\ScriptRunner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.SourceFileScanner,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Resource;
/*     */ import org.apache.tools.ant.types.ResourceFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SourceFileScanner
/*     */   implements ResourceFactory
/*     */ {
/*     */   protected Task task;
/*     */   private FileUtils fileUtils;
/*     */   private File destDir;
/*     */   
/*     */   public SourceFileScanner(Task task) {
/*  85 */     this.task = task;
/*  86 */     this.fileUtils = FileUtils.newFileUtils();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] restrict(String[] files, File srcDir, File destDir, FileNameMapper mapper) {
/* 103 */     this.destDir = destDir;
/* 104 */     Vector v = new Vector();
/* 105 */     for (int i = 0; i < files.length; i++) {
/* 106 */       File src = this.fileUtils.resolveFile(srcDir, files[i]);
/* 107 */       v.addElement(new Resource(files[i], src.exists(), src.lastModified(), src.isDirectory()));
/*     */     } 
/*     */     
/* 110 */     Resource[] sourceresources = new Resource[v.size()];
/* 111 */     v.copyInto((Object[])sourceresources);
/*     */ 
/*     */ 
/*     */     
/* 115 */     Resource[] outofdate = ResourceUtils.selectOutOfDateSources((ProjectComponent)this.task, sourceresources, mapper, this);
/*     */ 
/*     */     
/* 118 */     String[] result = new String[outofdate.length];
/* 119 */     for (int counter = 0; counter < outofdate.length; counter++) {
/* 120 */       result[counter] = outofdate[counter].getName();
/*     */     }
/* 122 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File[] restrictAsFiles(String[] files, File srcDir, File destDir, FileNameMapper mapper) {
/* 132 */     String[] res = restrict(files, srcDir, destDir, mapper);
/* 133 */     File[] result = new File[res.length];
/* 134 */     for (int i = 0; i < res.length; i++) {
/* 135 */       result[i] = new File(srcDir, res[i]);
/*     */     }
/* 137 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Resource getResource(String name) {
/* 148 */     File src = this.fileUtils.resolveFile(this.destDir, name);
/* 149 */     return new Resource(name, src.exists(), src.lastModified(), src.isDirectory());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\SourceFileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.StringUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StringUtils
/*     */ {
/*  68 */   public static final String LINE_SEP = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public static Vector lineSplit(String data) { return split(data, 10); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector split(String data, int ch) {
/*  88 */     Vector elems = new Vector();
/*  89 */     int pos = -1;
/*  90 */     int i = 0;
/*  91 */     while ((pos = data.indexOf(ch, i)) != -1) {
/*  92 */       String elem = data.substring(i, pos);
/*  93 */       elems.addElement(elem);
/*  94 */       i = pos + 1;
/*     */     } 
/*  96 */     elems.addElement(data.substring(i));
/*  97 */     return elems;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replace(String data, String from, String to) {
/* 108 */     StringBuffer buf = new StringBuffer(data.length());
/* 109 */     int pos = -1;
/* 110 */     int i = 0;
/* 111 */     while ((pos = data.indexOf(from, i)) != -1) {
/* 112 */       buf.append(data.substring(i, pos)).append(to);
/* 113 */       i = pos + from.length();
/*     */     } 
/* 115 */     buf.append(data.substring(i));
/* 116 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStackTrace(Throwable t) {
/* 125 */     StringWriter sw = new StringWriter();
/* 126 */     PrintWriter pw = new PrintWriter(sw, true);
/* 127 */     t.printStackTrace(pw);
/* 128 */     pw.flush();
/* 129 */     pw.close();
/* 130 */     return sw.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\StringUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.TaskLogger,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class TaskLogger
/*    */ {
/*    */   private Task m_task;
/*    */   
/* 72 */   public TaskLogger(Task task) { this.m_task = task; }
/*    */ 
/*    */ 
/*    */   
/* 76 */   public void info(String message) { this.m_task.log(message, 2); }
/*    */ 
/*    */ 
/*    */   
/* 80 */   public void error(String message) { this.m_task.log(message, 0); }
/*    */ 
/*    */ 
/*    */   
/* 84 */   public void warning(String message) { this.m_task.log(message, 1); }
/*    */ 
/*    */ 
/*    */   
/* 88 */   public void verbose(String message) { this.m_task.log(message, 3); }
/*    */ 
/*    */ 
/*    */   
/* 92 */   public void debug(String message) { this.m_task.log(message, 4); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\TaskLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.TeeOutputStream,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class TeeOutputStream
/*    */   extends OutputStream
/*    */ {
/*    */   private OutputStream left;
/*    */   private OutputStream right;
/*    */   
/*    */   public TeeOutputStream(OutputStream left, OutputStream right) {
/* 70 */     this.left = left;
/* 71 */     this.right = right;
/*    */   }
/*    */   
/*    */   public void close() throws IOException {
/* 75 */     this.left.close();
/* 76 */     this.right.close();
/*    */   }
/*    */   
/*    */   public void flush() throws IOException {
/* 80 */     this.left.flush();
/* 81 */     this.right.flush();
/*    */   }
/*    */   
/*    */   public void write(byte[] b) throws IOException {
/* 85 */     this.left.write(b);
/* 86 */     this.right.write(b);
/*    */   }
/*    */   
/*    */   public void write(byte[] b, int off, int len) throws IOException {
/* 90 */     this.left.write(b, off, len);
/* 91 */     this.right.write(b, off, len);
/*    */   }
/*    */   
/*    */   public void write(int b) throws IOException {
/* 95 */     this.left.write(b);
/* 96 */     this.right.write(b);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\TeeOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.TimeoutObserver,"package org.apache.tools.ant.util;
public interface TimeoutObserver {
  void timeoutOccured(Watchdog paramWatchdog);
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\TimeoutObserver.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.Tokenizer,"package org.apache.tools.ant.util;
import java.io.IOException;
import java.io.Reader;
public interface Tokenizer {
  String getToken(Reader paramReader) throws IOException;
  String getPostToken();
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\Tokenizer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.UnPackageNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class UnPackageNameMapper
/*    */   extends GlobPatternMapper
/*    */ {
/*    */   protected String extractVariablePart(String name) {
/* 80 */     String var = name.substring(this.prefixLength, name.length() - this.postfixLength);
/*    */     
/* 82 */     return var.replace('.', File.separatorChar);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\UnPackageNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.Watchdog,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Watchdog
/*     */   implements Runnable
/*     */ {
/*  73 */   private Vector observers = new Vector(1);
/*  74 */   private long timeout = -1L;
/*     */   private boolean stopped = false;
/*     */   
/*     */   public Watchdog(long timeout) {
/*  78 */     if (timeout < 1L) {
/*  79 */       throw new IllegalArgumentException(""timeout lesser than 1."");
/*     */     }
/*  81 */     this.timeout = timeout;
/*     */   }
/*     */ 
/*     */   
/*  85 */   public void addTimeoutObserver(TimeoutObserver to) { this.observers.addElement(to); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void removeTimeoutObserver(TimeoutObserver to) { this.observers.removeElement(to); }
/*     */ 
/*     */   
/*     */   protected final void fireTimeoutOccured() {
/*  93 */     Enumeration e = this.observers.elements();
/*  94 */     while (e.hasMoreElements()) {
/*  95 */       ((TimeoutObserver)e.nextElement()).timeoutOccured(this);
/*     */     }
/*     */   }
/*     */   
/*     */   public synchronized void start() {
/* 100 */     this.stopped = false;
/* 101 */     Thread t = new Thread(this, ""WATCHDOG"");
/* 102 */     t.setDaemon(true);
/* 103 */     t.start();
/*     */   }
/*     */   
/*     */   public synchronized void stop() {
/* 107 */     this.stopped = true;
/* 108 */     notifyAll();
/*     */   }
/*     */   
/*     */   public synchronized void run() {
/* 112 */     long until = System.currentTimeMillis() + this.timeout;
/*     */     long now;
/* 114 */     while (!this.stopped && until > (now = System.currentTimeMillis())) {
/*     */       try {
/* 116 */         wait(until - now);
/* 117 */       } catch (InterruptedException e) {}
/*     */     } 
/*     */     
/* 120 */     if (!this.stopped)
/* 121 */       fireTimeoutOccured(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\Watchdog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.WeakishReference,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.lang.reflect.Constructor;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class WeakishReference
/*     */ {
/*     */   private static Constructor referenceConstructor;
/*     */   private static final String WEAK_REFERENCE_NAME = ""org.apache.tools.ant.util.optional.WeakishReference12"";
/*     */   
/*     */   public static WeakishReference createReference(Object object) {
/*  80 */     if (referenceConstructor == null) {
/*  81 */       createReferenceConstructor();
/*     */     }
/*     */     try {
/*  84 */       return referenceConstructor.newInstance(new Object[] { object });
/*     */     } catch (Exception e) {
/*     */       
/*  87 */       throw new BuildException(""while creating a weakish reference"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void createReferenceConstructor() {
/*  95 */     Class[] ctor = { Object.class };
/*     */     try {
/*  97 */       referenceConstructor = HardReference.class.getConstructor(ctor);
/*     */     } catch (NoSuchMethodException e) {
/*     */       
/* 100 */       throw new BuildException(""when creating a Hard Reference constructor"", e);
/*     */     } 
/* 102 */     if (!JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */       
/*     */       try {
/* 105 */         Class clazz = Class.forName(""org.apache.tools.ant.util.optional.WeakishReference12"");
/* 106 */         referenceConstructor = clazz.getConstructor(ctor);
/* 107 */       } catch (ClassNotFoundException e) {
/*     */       
/* 109 */       } catch (NoSuchMethodException e) {}
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract Object get();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class HardReference
/*     */     extends WeakishReference
/*     */   {
/*     */     private Object object;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 136 */     public HardReference(Object object) { this.object = object; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 143 */     public Object get() { return this.object; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\WeakishReference.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.facade.FacadeTaskHelper,"/*     */ package org.apache.tools.ant.util.facade;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FacadeTaskHelper
/*     */ {
/*  76 */   private Vector args = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String userChoice;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String magicValue;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String defaultValue;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public FacadeTaskHelper(String defaultValue) { this(defaultValue, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FacadeTaskHelper(String defaultValue, String magicValue) {
/* 108 */     this.defaultValue = defaultValue;
/* 109 */     this.magicValue = magicValue;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setMagicValue(String magicValue) { this.magicValue = magicValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setImplementation(String userChoice) { this.userChoice = userChoice; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public String getImplementation() { return (this.userChoice != null) ? this.userChoice : ((this.magicValue != null) ? this.magicValue : this.defaultValue); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getExplicitChoice() { return this.userChoice; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void addImplementationArgument(ImplementationSpecificArgument arg) { this.args.addElement(arg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getArgs() {
/* 154 */     Vector tmp = new Vector(this.args.size());
/* 155 */     for (Enumeration e = this.args.elements(); e.hasMoreElements(); ) {
/* 156 */       ImplementationSpecificArgument arg = e.nextElement();
/*     */       
/* 158 */       String[] curr = arg.getParts(getImplementation());
/* 159 */       for (int i = 0; i < curr.length; i++) {
/* 160 */         tmp.addElement(curr[i]);
/*     */       }
/*     */     } 
/* 163 */     String[] res = new String[tmp.size()];
/* 164 */     tmp.copyInto((Object[])res);
/* 165 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public boolean hasBeenSet() { return (this.userChoice != null || this.magicValue != null); }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\facade\FacadeTaskHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.facade.ImplementationSpecificArgument,"/*    */ package org.apache.tools.ant.util.facade;
/*    */ 
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ImplementationSpecificArgument
/*    */   extends Commandline.Argument
/*    */ {
/*    */   private String impl;
/*    */   
/* 77 */   public void setImplementation(String impl) { this.impl = impl; }
/*    */ 
/*    */   
/*    */   public final String[] getParts(String chosenImpl) {
/* 81 */     if (this.impl == null || this.impl.equals(chosenImpl)) {
/* 82 */       return getParts();
/*    */     }
/* 84 */     return new String[0];
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\facade\ImplementationSpecificArgument.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.Regexp,"package org.apache.tools.ant.util.regexp;
import org.apache.tools.ant.BuildException;
public interface Regexp extends RegexpMatcher {
  public static final int REPLACE_FIRST = 1;
  public static final int REPLACE_ALL = 16;
  String substitute(String paramString1, String paramString2, int paramInt) throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\regexp\Regexp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpFactory,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpFactory
/*     */   extends RegexpMatcherFactory
/*     */ {
/*  75 */   public Regexp newRegexp() throws BuildException { return newRegexp(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Regexp newRegexp(Project p) throws BuildException {
/*  84 */     String systemDefault = null;
/*  85 */     if (p == null) {
/*  86 */       systemDefault = System.getProperty(""ant.regexp.regexpimpl"");
/*     */     } else {
/*  88 */       systemDefault = p.getProperty(""ant.regexp.regexpimpl"");
/*     */     } 
/*     */     
/*  91 */     if (systemDefault != null) {
/*  92 */       return createRegexpInstance(systemDefault);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/*  98 */       testAvailability(""java.util.regex.Matcher"");
/*  99 */       return createRegexpInstance(""org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp"");
/* 100 */     } catch (BuildException be) {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 105 */         testAvailability(""org.apache.oro.text.regex.Pattern"");
/* 106 */         return createRegexpInstance(""org.apache.tools.ant.util.regexp.JakartaOroRegexp"");
/* 107 */       } catch (BuildException be) {
/*     */ 
/*     */         
/*     */         try {
/*     */           
/* 112 */           testAvailability(""org.apache.regexp.RE"");
/* 113 */           return createRegexpInstance(""org.apache.tools.ant.util.regexp.JakartaRegexpRegexp"");
/* 114 */         } catch (BuildException be) {
/*     */ 
/*     */ 
/*     */           
/* 118 */           throw new BuildException(""No supported regular expression matcher found"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Regexp createRegexpInstance(String classname) throws BuildException {
/* 132 */     RegexpMatcher m = createInstance(classname);
/* 133 */     if (m instanceof Regexp) {
/* 134 */       return (Regexp)m;
/*     */     }
/* 136 */     throw new BuildException(classname + "" doesn't implement the Regexp interface"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\regexp\RegexpFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcher,"package org.apache.tools.ant.util.regexp;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
public interface RegexpMatcher {
  public static final int MATCH_DEFAULT = 0;
  public static final int MATCH_CASE_INSENSITIVE = 256;
  public static final int MATCH_MULTILINE = 4096;
  public static final int MATCH_SINGLELINE = 65536;
  void setPattern(String paramString) throws BuildException;
  String getPattern() throws BuildException;
  boolean matches(String paramString) throws BuildException;
  Vector getGroups(String paramString) throws BuildException;
  boolean matches(String paramString, int paramInt) throws BuildException;
  Vector getGroups(String paramString, int paramInt) throws BuildException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\regexp\RegexpMatcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcherFactory,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpMatcherFactory
/*     */ {
/*  80 */   public RegexpMatcher newRegexpMatcher() throws BuildException { return newRegexpMatcher(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RegexpMatcher newRegexpMatcher(Project p) throws BuildException {
/*  90 */     String systemDefault = null;
/*  91 */     if (p == null) {
/*  92 */       systemDefault = System.getProperty(""ant.regexp.regexpimpl"");
/*     */     } else {
/*  94 */       systemDefault = p.getProperty(""ant.regexp.regexpimpl"");
/*     */     } 
/*     */     
/*  97 */     if (systemDefault != null) {
/*  98 */       return createInstance(systemDefault);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 104 */       testAvailability(""java.util.regex.Matcher"");
/* 105 */       return createInstance(""org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher"");
/* 106 */     } catch (BuildException be) {
/*     */ 
/*     */       
/*     */       try {
/*     */         
/* 111 */         testAvailability(""org.apache.oro.text.regex.Pattern"");
/* 112 */         return createInstance(""org.apache.tools.ant.util.regexp.JakartaOroMatcher"");
/* 113 */       } catch (BuildException be) {
/*     */ 
/*     */         
/*     */         try {
/*     */           
/* 118 */           testAvailability(""org.apache.regexp.RE"");
/* 119 */           return createInstance(""org.apache.tools.ant.util.regexp.JakartaRegexpMatcher"");
/* 120 */         } catch (BuildException be) {
/*     */ 
/*     */ 
/*     */           
/* 124 */           throw new BuildException(""No supported regular expression matcher found"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   } protected RegexpMatcher createInstance(String className) throws BuildException {
/*     */     try {
/* 130 */       Class implClass = Class.forName(className);
/* 131 */       return (RegexpMatcher)implClass.newInstance();
/*     */     } catch (Throwable t) {
/* 133 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void testAvailability(String className) throws BuildException {
/*     */     try {
/* 139 */       Class.forName(className);
/*     */     } catch (Throwable t) {
/* 141 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\regexp\RegexpMatcherFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpUtil,"/*    */ package org.apache.tools.ant.util.regexp;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RegexpUtil
/*    */ {
/* 63 */   public static final boolean hasFlag(int options, int flag) { return ((options & flag) > 0); }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public static final int removeFlag(int options, int flag) { return options & -1 - flag; }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\an\\util\regexp\RegexpUtil.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.BZip2Constants,"/*    */ package org.apache.tools.bzip2;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public interface BZip2Constants
/*    */ {
/*    */   public static final int baseBlockSize = 100000;
/*    */   public static final int MAX_ALPHA_SIZE = 258;
/*    */   public static final int MAX_CODE_LEN = 23;
/*    */   public static final int RUNA = 0;
/*    */   public static final int RUNB = 1;
/*    */   public static final int N_GROUPS = 6;
/*    */   public static final int G_SIZE = 50;
/*    */   public static final int N_ITERS = 4;
/*    */   public static final int MAX_SELECTORS = 18002;
/*    */   public static final int NUM_OVERSHOOT_BYTES = 20;
/* 82 */   public static final int[] rNums = new int[] { 619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 936, 638 };
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\bzip2\BZip2Constants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CBZip2InputStream,"/*     */ package org.apache.tools.bzip2;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CBZip2InputStream
/*     */   extends InputStream
/*     */   implements BZip2Constants
/*     */ {
/*     */   private int last;
/*     */   private int origPtr;
/*     */   private int blockSize100k;
/*     */   private boolean blockRandomised;
/*     */   private int bsBuff;
/*     */   private int bsLive;
/*     */   
/*  73 */   private static void cadvise() { System.out.println(""CRC Error""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   private static void badBGLengths() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*  82 */   private static void bitStreamEOF() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*  86 */   private static void compressedStreamEOF() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*     */   private void makeMaps() {
/*  91 */     this.nInUse = 0;
/*  92 */     for (int i = 0; i < 256; i++) {
/*  93 */       if (this.inUse[i]) {
/*  94 */         this.seqToUnseq[this.nInUse] = (char)i;
/*  95 */         this.unseqToSeq[i] = (char)this.nInUse;
/*  96 */         this.nInUse++;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   private CRC mCrc = new CRC();
/*     */   
/* 124 */   private boolean[] inUse = new boolean[256];
/*     */   
/*     */   private int nInUse;
/* 127 */   private char[] seqToUnseq = new char[256];
/* 128 */   private char[] unseqToSeq = new char[256];
/*     */   
/* 130 */   private char[] selector = new char[18002];
/* 131 */   private char[] selectorMtf = new char[18002];
/*     */ 
/*     */   
/*     */   private int[] tt;
/*     */ 
/*     */   
/*     */   private char[] ll8;
/*     */ 
/*     */   
/* 140 */   private int[] unzftab = new int[256];
/*     */   
/* 142 */   private int[][] limit = new int[6][258];
/* 143 */   private int[][] base = new int[6][258];
/* 144 */   private int[][] perm = new int[6][258];
/* 145 */   private int[] minLens = new int[6];
/*     */   
/*     */   private InputStream bsStream;
/*     */   
/*     */   private boolean streamEnd = false;
/*     */   
/* 151 */   private int currentChar = -1;
/*     */   
/*     */   private static final int START_BLOCK_STATE = 1;
/*     */   
/*     */   private static final int RAND_PART_A_STATE = 2;
/*     */   private static final int RAND_PART_B_STATE = 3;
/*     */   private static final int RAND_PART_C_STATE = 4;
/*     */   private static final int NO_RAND_PART_A_STATE = 5;
/*     */   private static final int NO_RAND_PART_B_STATE = 6;
/*     */   private static final int NO_RAND_PART_C_STATE = 7;
/* 161 */   private int currentState = 1;
/*     */   
/*     */   private int storedBlockCRC;
/*     */   private int storedCombinedCRC;
/*     */   private int computedBlockCRC;
/*     */   private int computedCombinedCRC;
/*     */   int i2;
/* 168 */   int rNToGo = 0; int count; int chPrev; int ch2; int i; int tPos;
/* 169 */   int rTPos = 0;
/*     */   int j2;
/*     */   char z;
/*     */   
/*     */   public CBZip2InputStream(InputStream zStream) {
/* 174 */     this.ll8 = null;
/* 175 */     this.tt = null;
/* 176 */     bsSetStream(zStream);
/* 177 */     initialize();
/* 178 */     initBlock();
/* 179 */     setupBlock();
/*     */   }
/*     */   
/*     */   public int read() {
/* 183 */     if (this.streamEnd) {
/* 184 */       return -1;
/*     */     }
/* 186 */     int retChar = this.currentChar;
/* 187 */     switch (this.currentState) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       case 3:
/* 193 */         setupRandPartB();
/*     */         break;
/*     */       case 4:
/* 196 */         setupRandPartC();
/*     */         break;
/*     */ 
/*     */       
/*     */       case 6:
/* 201 */         setupNoRandPartB();
/*     */         break;
/*     */       case 7:
/* 204 */         setupNoRandPartC();
/*     */         break;
/*     */     } 
/*     */ 
/*     */     
/* 209 */     return retChar;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize() {
/* 215 */     char magic3 = bsGetUChar();
/* 216 */     char magic4 = bsGetUChar();
/* 217 */     if (magic3 != 'h' || magic4 < '1' || magic4 > '9') {
/* 218 */       bsFinishedWithStream();
/* 219 */       this.streamEnd = true;
/*     */       
/*     */       return;
/*     */     } 
/* 223 */     setDecompressStructureSizes(magic4 - 48);
/* 224 */     this.computedCombinedCRC = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void initBlock() {
/* 230 */     char magic1 = bsGetUChar();
/* 231 */     char magic2 = bsGetUChar();
/* 232 */     char magic3 = bsGetUChar();
/* 233 */     char magic4 = bsGetUChar();
/* 234 */     char magic5 = bsGetUChar();
/* 235 */     char magic6 = bsGetUChar();
/* 236 */     if (magic1 == '\027' && magic2 == 'r' && magic3 == 'E' && magic4 == '8' && magic5 == 'P' && magic6 == '') {
/*     */       
/* 238 */       complete();
/*     */       
/*     */       return;
/*     */     } 
/* 242 */     if (magic1 != '1' || magic2 != 'A' || magic3 != 'Y' || magic4 != '&' || magic5 != 'S' || magic6 != 'Y') {
/*     */       
/* 244 */       badBlockHeader();
/* 245 */       this.streamEnd = true;
/*     */       
/*     */       return;
/*     */     } 
/* 249 */     this.storedBlockCRC = bsGetInt32();
/*     */     
/* 251 */     if (bsR(1) == 1) {
/* 252 */       this.blockRandomised = true;
/*     */     } else {
/* 254 */       this.blockRandomised = false;
/*     */     } 
/*     */ 
/*     */     
/* 258 */     getAndMoveToFrontDecode();
/*     */     
/* 260 */     this.mCrc.initialiseCRC();
/* 261 */     this.currentState = 1;
/*     */   }
/*     */   
/*     */   private void endBlock() {
/* 265 */     this.computedBlockCRC = this.mCrc.getFinalCRC();
/*     */     
/* 267 */     if (this.storedBlockCRC != this.computedBlockCRC) {
/* 268 */       crcError();
/*     */     }
/*     */     
/* 271 */     this.computedCombinedCRC = this.computedCombinedCRC << 1 | this.computedCombinedCRC >>> 31;
/*     */     
/* 273 */     this.computedCombinedCRC ^= this.computedBlockCRC;
/*     */   }
/*     */   
/*     */   private void complete() {
/* 277 */     this.storedCombinedCRC = bsGetInt32();
/* 278 */     if (this.storedCombinedCRC != this.computedCombinedCRC) {
/* 279 */       crcError();
/*     */     }
/*     */     
/* 282 */     bsFinishedWithStream();
/* 283 */     this.streamEnd = true;
/*     */   }
/*     */ 
/*     */   
/* 287 */   private static void blockOverrun() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/* 291 */   private static void badBlockHeader() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/* 295 */   private static void crcError() { cadvise(); }
/*     */ 
/*     */   
/*     */   private void bsFinishedWithStream() {
/*     */     try {
/* 300 */       if (this.bsStream != null && 
/* 301 */         this.bsStream != System.in) {
/* 302 */         this.bsStream.close();
/* 303 */         this.bsStream = null;
/*     */       }
/*     */     
/* 306 */     } catch (IOException ioe) {}
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void bsSetStream(InputStream f) {
/* 312 */     this.bsStream = f;
/* 313 */     this.bsLive = 0;
/* 314 */     this.bsBuff = 0;
/*     */   }
/*     */ 
/*     */   
/*     */   private int bsR(int n) {
/* 319 */     while (this.bsLive < n) {
/*     */       
/* 321 */       char thech = Character.MIN_VALUE;
/*     */       try {
/* 323 */         thech = (char)this.bsStream.read();
/*     */       } catch (IOException e) {
/* 325 */         compressedStreamEOF();
/*     */       } 
/* 327 */       if (thech == -1) {
/* 328 */         compressedStreamEOF();
/*     */       }
/* 330 */       int zzi = thech;
/* 331 */       this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 332 */       this.bsLive += 8;
/*     */     } 
/*     */     
/* 335 */     int v = this.bsBuff >> this.bsLive - n & (1 << n) - 1;
/* 336 */     this.bsLive -= n;
/* 337 */     return v;
/*     */   }
/*     */ 
/*     */   
/* 341 */   private char bsGetUChar() { return (char)bsR(8); }
/*     */ 
/*     */   
/*     */   private int bsGetint() {
/* 345 */     int u = 0;
/* 346 */     u = u << 8 | bsR(8);
/* 347 */     u = u << 8 | bsR(8);
/* 348 */     u = u << 8 | bsR(8);
/* 349 */     u = u << 8 | bsR(8);
/* 350 */     return u;
/*     */   }
/*     */ 
/*     */   
/* 354 */   private int bsGetIntVS(int numBits) { return bsR(numBits); }
/*     */ 
/*     */ 
/*     */   
/* 358 */   private int bsGetInt32() { return bsGetint(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void hbCreateDecodeTables(int[] limit, int[] base, int[] perm, char[] length, int minLen, int maxLen, int alphaSize) {
/* 366 */     int pp = 0; int i;
/* 367 */     for (i = minLen; i <= maxLen; i++) {
/* 368 */       for (int j = 0; j < alphaSize; j++) {
/* 369 */         if (length[j] == i) {
/* 370 */           perm[pp] = j;
/* 371 */           pp++;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 376 */     for (i = 0; i < 23; i++) {
/* 377 */       base[i] = 0;
/*     */     }
/* 379 */     for (i = 0; i < alphaSize; i++) {
/* 380 */       base[length[i] + 1] = base[length[i] + 1] + 1;
/*     */     }
/*     */     
/* 383 */     for (i = 1; i < 23; i++) {
/* 384 */       base[i] = base[i] + base[i - 1];
/*     */     }
/*     */     
/* 387 */     for (i = 0; i < 23; i++) {
/* 388 */       limit[i] = 0;
/*     */     }
/* 390 */     int vec = 0;
/*     */     
/* 392 */     for (i = minLen; i <= maxLen; i++) {
/* 393 */       vec += base[i + 1] - base[i];
/* 394 */       limit[i] = vec - 1;
/* 395 */       vec <<= 1;
/*     */     } 
/* 397 */     for (i = minLen + 1; i <= maxLen; i++) {
/* 398 */       base[i] = (limit[i - 1] + 1 << 1) - base[i];
/*     */     }
/*     */   }
/*     */   
/*     */   private void recvDecodingTables() {
/* 403 */     char[][] len = new char[6][258];
/*     */ 
/*     */     
/* 406 */     boolean[] inUse16 = new boolean[16];
/*     */     
/*     */     int i;
/* 409 */     for (i = 0; i < 16; i++) {
/* 410 */       if (bsR(1) == 1) {
/* 411 */         inUse16[i] = true;
/*     */       } else {
/* 413 */         inUse16[i] = false;
/*     */       } 
/*     */     } 
/*     */     
/* 417 */     for (i = 0; i < 256; i++) {
/* 418 */       this.inUse[i] = false;
/*     */     }
/*     */     
/* 421 */     for (i = 0; i < 16; i++) {
/* 422 */       if (inUse16[i]) {
/* 423 */         for (int j = 0; j < 16; j++) {
/* 424 */           if (bsR(1) == 1) {
/* 425 */             this.inUse[i * 16 + j] = true;
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 431 */     makeMaps();
/* 432 */     int alphaSize = this.nInUse + 2;
/*     */ 
/*     */     
/* 435 */     int nGroups = bsR(3);
/* 436 */     int nSelectors = bsR(15);
/* 437 */     for (i = 0; i < nSelectors; i++) {
/* 438 */       byte b = 0;
/* 439 */       while (bsR(1) == 1) {
/* 440 */         b++;
/*     */       }
/* 442 */       this.selectorMtf[i] = (char)b;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 447 */     char[] pos = new char[6];
/*     */     char v;
/* 449 */     for (v = Character.MIN_VALUE; v < nGroups; v = (char)(v + 1)) {
/* 450 */       pos[v] = v;
/*     */     }
/*     */     
/* 453 */     for (i = 0; i < nSelectors; i++) {
/* 454 */       v = this.selectorMtf[i];
/* 455 */       char tmp = pos[v];
/* 456 */       while (v > '\000') {
/* 457 */         pos[v] = pos[v - 1];
/* 458 */         v = (char)(v - 1);
/*     */       } 
/* 460 */       pos[0] = tmp;
/* 461 */       this.selector[i] = tmp;
/*     */     } 
/*     */     
/*     */     int t;
/*     */     
/* 466 */     for (t = 0; t < nGroups; t++) {
/* 467 */       int curr = bsR(5);
/* 468 */       for (i = 0; i < alphaSize; i++) {
/* 469 */         while (bsR(1) == 1) {
/* 470 */           if (bsR(1) == 0) {
/* 471 */             curr++; continue;
/*     */           } 
/* 473 */           curr--;
/*     */         } 
/*     */         
/* 476 */         len[t][i] = (char)curr;
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 481 */     for (t = 0; t < nGroups; t++) {
/* 482 */       int minLen = 32;
/* 483 */       int maxLen = 0;
/* 484 */       for (i = 0; i < alphaSize; i++) {
/* 485 */         if (len[t][i] > maxLen) {
/* 486 */           maxLen = len[t][i];
/*     */         }
/* 488 */         if (len[t][i] < minLen) {
/* 489 */           minLen = len[t][i];
/*     */         }
/*     */       } 
/* 492 */       hbCreateDecodeTables(this.limit[t], this.base[t], this.perm[t], len[t], minLen, maxLen, alphaSize);
/*     */       
/* 494 */       this.minLens[t] = minLen;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void getAndMoveToFrontDecode() {
/* 499 */     char[] yy = new char[256];
/*     */ 
/*     */ 
/*     */     
/* 503 */     int limitLast = 100000 * this.blockSize100k;
/* 504 */     this.origPtr = bsGetIntVS(24);
/*     */     
/* 506 */     recvDecodingTables();
/* 507 */     int EOB = this.nInUse + 1;
/* 508 */     int groupNo = -1;
/* 509 */     int groupPos = 0;
/*     */ 
/*     */ 
/*     */     
/*     */     int i;
/*     */ 
/*     */ 
/*     */     
/* 517 */     for (i = 0; i <= 255; i++) {
/* 518 */       this.unzftab[i] = 0;
/*     */     }
/*     */     
/* 521 */     for (i = 0; i <= 255; i++) {
/* 522 */       yy[i] = (char)i;
/*     */     }
/*     */     
/* 525 */     this.last = -1;
/*     */ 
/*     */ 
/*     */     
/* 529 */     if (groupPos == 0) {
/* 530 */       groupNo++;
/* 531 */       groupPos = 50;
/*     */     } 
/* 533 */     groupPos--;
/* 534 */     int zt = this.selector[groupNo];
/* 535 */     int zn = this.minLens[zt];
/* 536 */     int zvec = bsR(zn);
/* 537 */     while (zvec > this.limit[zt][zn]) {
/* 538 */       zn++;
/*     */ 
/*     */       
/* 541 */       while (this.bsLive < 1) {
/*     */         
/* 543 */         char thech = Character.MIN_VALUE;
/*     */         try {
/* 545 */           thech = (char)this.bsStream.read();
/*     */         } catch (IOException e) {
/* 547 */           compressedStreamEOF();
/*     */         } 
/* 549 */         if (thech == -1) {
/* 550 */           compressedStreamEOF();
/*     */         }
/* 552 */         int zzi = thech;
/* 553 */         this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 554 */         this.bsLive += 8;
/*     */       } 
/*     */       
/* 557 */       int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 558 */       this.bsLive--;
/*     */       
/* 560 */       zvec = zvec << 1 | zj;
/*     */     } 
/* 562 */     int nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 567 */     while (nextSym != EOB) {
/*     */ 
/*     */ 
/*     */       
/* 571 */       if (nextSym == 0 || nextSym == 1) {
/*     */         
/* 573 */         int s = -1;
/* 574 */         int N = 1;
/*     */         do {
/* 576 */           if (nextSym == 0) {
/* 577 */             s += 1 * N;
/* 578 */           } else if (nextSym == 1) {
/* 579 */             s += 2 * N;
/*     */           } 
/* 581 */           N *= 2;
/*     */ 
/*     */           
/* 584 */           if (groupPos == 0) {
/* 585 */             groupNo++;
/* 586 */             groupPos = 50;
/*     */           } 
/* 588 */           groupPos--;
/* 589 */           int zt = this.selector[groupNo];
/* 590 */           int zn = this.minLens[zt];
/* 591 */           int zvec = bsR(zn);
/* 592 */           while (zvec > this.limit[zt][zn]) {
/* 593 */             zn++;
/*     */ 
/*     */             
/* 596 */             while (this.bsLive < 1) {
/*     */               
/* 598 */               char thech = Character.MIN_VALUE;
/*     */               try {
/* 600 */                 thech = (char)this.bsStream.read();
/*     */               } catch (IOException e) {
/* 602 */                 compressedStreamEOF();
/*     */               } 
/* 604 */               if (thech == -1) {
/* 605 */                 compressedStreamEOF();
/*     */               }
/* 607 */               int zzi = thech;
/* 608 */               this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 609 */               this.bsLive += 8;
/*     */             } 
/*     */             
/* 612 */             int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 613 */             this.bsLive--;
/*     */             
/* 615 */             zvec = zvec << 1 | zj;
/*     */           } 
/* 617 */           nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */         }
/* 619 */         while (nextSym == 0 || nextSym == 1);
/*     */         
/* 621 */         s++;
/* 622 */         char ch = this.seqToUnseq[yy[0]];
/* 623 */         this.unzftab[ch] = this.unzftab[ch] + s;
/*     */         
/* 625 */         while (s > 0) {
/* 626 */           this.last++;
/* 627 */           this.ll8[this.last] = ch;
/* 628 */           s--;
/*     */         } 
/*     */         
/* 631 */         if (this.last >= limitLast) {
/* 632 */           blockOverrun();
/*     */         }
/*     */         
/*     */         continue;
/*     */       } 
/* 637 */       this.last++;
/* 638 */       if (this.last >= limitLast) {
/* 639 */         blockOverrun();
/*     */       }
/*     */       
/* 642 */       char tmp = yy[nextSym - 1];
/* 643 */       this.unzftab[this.seqToUnseq[tmp]] = this.unzftab[this.seqToUnseq[tmp]] + 1;
/* 644 */       this.ll8[this.last] = this.seqToUnseq[tmp];
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 653 */       int j = nextSym - 1;
/* 654 */       for (; j > 3; j -= 4) {
/* 655 */         yy[j] = yy[j - 1];
/* 656 */         yy[j - 1] = yy[j - 2];
/* 657 */         yy[j - 2] = yy[j - 3];
/* 658 */         yy[j - 3] = yy[j - 4];
/*     */       } 
/* 660 */       for (; j > 0; j--) {
/* 661 */         yy[j] = yy[j - 1];
/*     */       }
/*     */       
/* 664 */       yy[0] = tmp;
/*     */ 
/*     */       
/* 667 */       if (groupPos == 0) {
/* 668 */         groupNo++;
/* 669 */         groupPos = 50;
/*     */       } 
/* 671 */       groupPos--;
/* 672 */       int zt = this.selector[groupNo];
/* 673 */       int zn = this.minLens[zt];
/* 674 */       int zvec = bsR(zn);
/* 675 */       while (zvec > this.limit[zt][zn]) {
/* 676 */         zn++;
/*     */ 
/*     */         
/* 679 */         while (this.bsLive < 1) {
/*     */           
/* 681 */           char thech = Character.MIN_VALUE;
/*     */           try {
/* 683 */             thech = (char)this.bsStream.read();
/*     */           } catch (IOException e) {
/* 685 */             compressedStreamEOF();
/*     */           } 
/* 687 */           int zzi = thech;
/* 688 */           this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 689 */           this.bsLive += 8;
/*     */         } 
/*     */         
/* 692 */         int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 693 */         this.bsLive--;
/*     */         
/* 695 */         zvec = zvec << 1 | zj;
/*     */       } 
/* 697 */       nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setupBlock() {
/* 705 */     int[] cftab = new int[257];
/*     */ 
/*     */     
/* 708 */     cftab[0] = 0;
/* 709 */     for (this.i = 1; this.i <= 256; this.i++) {
/* 710 */       cftab[this.i] = this.unzftab[this.i - 1];
/*     */     }
/* 712 */     for (this.i = 1; this.i <= 256; this.i++) {
/* 713 */       cftab[this.i] = cftab[this.i] + cftab[this.i - 1];
/*     */     }
/*     */     
/* 716 */     for (this.i = 0; this.i <= this.last; this.i++) {
/* 717 */       char ch = this.ll8[this.i];
/* 718 */       this.tt[cftab[ch]] = this.i;
/* 719 */       cftab[ch] = cftab[ch] + 1;
/*     */     } 
/* 721 */     cftab = null;
/*     */     
/* 723 */     this.tPos = this.tt[this.origPtr];
/*     */     
/* 725 */     this.count = 0;
/* 726 */     this.i2 = 0;
/* 727 */     this.ch2 = 256;
/*     */     
/* 729 */     if (this.blockRandomised) {
/* 730 */       this.rNToGo = 0;
/* 731 */       this.rTPos = 0;
/* 732 */       setupRandPartA();
/*     */     } else {
/* 734 */       setupNoRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartA() {
/* 739 */     if (this.i2 <= this.last) {
/* 740 */       this.chPrev = this.ch2;
/* 741 */       this.ch2 = this.ll8[this.tPos];
/* 742 */       this.tPos = this.tt[this.tPos];
/* 743 */       if (this.rNToGo == 0) {
/* 744 */         this.rNToGo = BZip2Constants.rNums[this.rTPos];
/* 745 */         this.rTPos++;
/* 746 */         if (this.rTPos == 512) {
/* 747 */           this.rTPos = 0;
/*     */         }
/*     */       } 
/* 750 */       this.rNToGo--;
/* 751 */       this.ch2 ^= (this.rNToGo == 1) ? 1 : 0;
/* 752 */       this.i2++;
/*     */       
/* 754 */       this.currentChar = this.ch2;
/* 755 */       this.currentState = 3;
/* 756 */       this.mCrc.updateCRC(this.ch2);
/*     */     } else {
/* 758 */       endBlock();
/* 759 */       initBlock();
/* 760 */       setupBlock();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartA() {
/* 765 */     if (this.i2 <= this.last) {
/* 766 */       this.chPrev = this.ch2;
/* 767 */       this.ch2 = this.ll8[this.tPos];
/* 768 */       this.tPos = this.tt[this.tPos];
/* 769 */       this.i2++;
/*     */       
/* 771 */       this.currentChar = this.ch2;
/* 772 */       this.currentState = 6;
/* 773 */       this.mCrc.updateCRC(this.ch2);
/*     */     } else {
/* 775 */       endBlock();
/* 776 */       initBlock();
/* 777 */       setupBlock();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartB() {
/* 782 */     if (this.ch2 != this.chPrev) {
/* 783 */       this.currentState = 2;
/* 784 */       this.count = 1;
/* 785 */       setupRandPartA();
/*     */     } else {
/* 787 */       this.count++;
/* 788 */       if (this.count >= 4) {
/* 789 */         this.z = this.ll8[this.tPos];
/* 790 */         this.tPos = this.tt[this.tPos];
/* 791 */         if (this.rNToGo == 0) {
/* 792 */           this.rNToGo = BZip2Constants.rNums[this.rTPos];
/* 793 */           this.rTPos++;
/* 794 */           if (this.rTPos == 512) {
/* 795 */             this.rTPos = 0;
/*     */           }
/*     */         } 
/* 798 */         this.rNToGo--;
/* 799 */         this.z = (char)(this.z ^ ((this.rNToGo == 1) ? '\001' : Character.MIN_VALUE));
/* 800 */         this.j2 = 0;
/* 801 */         this.currentState = 4;
/* 802 */         setupRandPartC();
/*     */       } else {
/* 804 */         this.currentState = 2;
/* 805 */         setupRandPartA();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartC() {
/* 811 */     if (this.j2 < this.z) {
/* 812 */       this.currentChar = this.ch2;
/* 813 */       this.mCrc.updateCRC(this.ch2);
/* 814 */       this.j2++;
/*     */     } else {
/* 816 */       this.currentState = 2;
/* 817 */       this.i2++;
/* 818 */       this.count = 0;
/* 819 */       setupRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartB() {
/* 824 */     if (this.ch2 != this.chPrev) {
/* 825 */       this.currentState = 5;
/* 826 */       this.count = 1;
/* 827 */       setupNoRandPartA();
/*     */     } else {
/* 829 */       this.count++;
/* 830 */       if (this.count >= 4) {
/* 831 */         this.z = this.ll8[this.tPos];
/* 832 */         this.tPos = this.tt[this.tPos];
/* 833 */         this.currentState = 7;
/* 834 */         this.j2 = 0;
/* 835 */         setupNoRandPartC();
/*     */       } else {
/* 837 */         this.currentState = 5;
/* 838 */         setupNoRandPartA();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartC() {
/* 844 */     if (this.j2 < this.z) {
/* 845 */       this.currentChar = this.ch2;
/* 846 */       this.mCrc.updateCRC(this.ch2);
/* 847 */       this.j2++;
/*     */     } else {
/* 849 */       this.currentState = 5;
/* 850 */       this.i2++;
/* 851 */       this.count = 0;
/* 852 */       setupNoRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setDecompressStructureSizes(int newSize100k) {
/* 857 */     if (0 > newSize100k || newSize100k > 9 || 0 > this.blockSize100k || this.blockSize100k > 9);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 862 */     this.blockSize100k = newSize100k;
/*     */     
/* 864 */     if (newSize100k == 0) {
/*     */       return;
/*     */     }
/*     */     
/* 868 */     int n = 100000 * newSize100k;
/* 869 */     this.ll8 = new char[n];
/* 870 */     this.tt = new int[n];
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\bzip2\CBZip2InputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CBZip2OutputStream,"/*      */ package org.apache.tools.bzip2;
/*      */ 
/*      */ import java.io.IOException;
/*      */ import java.io.OutputStream;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class CBZip2OutputStream
/*      */   extends OutputStream
/*      */   implements BZip2Constants
/*      */ {
/*      */   protected static final int SETMASK = 2097152;
/*      */   protected static final int CLEARMASK = -2097153;
/*      */   protected static final int GREATER_ICOST = 15;
/*      */   protected static final int LESSER_ICOST = 0;
/*      */   protected static final int SMALL_THRESH = 20;
/*      */   protected static final int DEPTH_THRESH = 10;
/*      */   protected static final int QSORT_STACK_SIZE = 1000;
/*      */   int last;
/*      */   int origPtr;
/*      */   int blockSize100k;
/*      */   boolean blockRandomised;
/*      */   int bytesOut;
/*      */   int bsBuff;
/*      */   int bsLive;
/*      */   
/*   93 */   private static void panic() { System.out.println(""panic""); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void makeMaps() {
/*   99 */     this.nInUse = 0;
/*  100 */     for (int i = 0; i < 256; i++) {
/*  101 */       if (this.inUse[i]) {
/*  102 */         this.seqToUnseq[this.nInUse] = (char)i;
/*  103 */         this.unseqToSeq[i] = (char)this.nInUse;
/*  104 */         this.nInUse++;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void hbMakeCodeLengths(char[] len, int[] freq, int alphaSize, int maxLen) {
/*  118 */     int[] heap = new int[260];
/*  119 */     int[] weight = new int[516];
/*  120 */     int[] parent = new int[516];
/*      */     int i;
/*  122 */     for (i = 0; i < alphaSize; i++) {
/*  123 */       weight[i + 1] = ((freq[i] == 0) ? 1 : freq[i]) << 8;
/*      */     }
/*      */     
/*      */     while (true) {
/*  127 */       int nNodes = alphaSize;
/*  128 */       int nHeap = 0;
/*      */       
/*  130 */       heap[0] = 0;
/*  131 */       weight[0] = 0;
/*  132 */       parent[0] = -2;
/*      */       
/*  134 */       for (i = 1; i <= alphaSize; i++) {
/*  135 */         parent[i] = -1;
/*  136 */         nHeap++;
/*  137 */         heap[nHeap] = i;
/*      */ 
/*      */         
/*  140 */         int zz = nHeap;
/*  141 */         int tmp = heap[zz];
/*  142 */         while (weight[tmp] < weight[heap[zz >> 1]]) {
/*  143 */           heap[zz] = heap[zz >> 1];
/*  144 */           zz >>= 1;
/*      */         } 
/*  146 */         heap[zz] = tmp;
/*      */       } 
/*      */       
/*  149 */       if (nHeap >= 260) {
/*  150 */         panic();
/*      */       }
/*      */       
/*  153 */       while (nHeap > 1) {
/*  154 */         int n1 = heap[1];
/*  155 */         heap[1] = heap[nHeap];
/*  156 */         nHeap--;
/*      */         
/*  158 */         int zz = 0, yy = 0, tmp = 0;
/*  159 */         zz = 1;
/*  160 */         tmp = heap[zz];
/*      */         while (true) {
/*  162 */           yy = zz << 1;
/*  163 */           if (yy > nHeap) {
/*      */             break;
/*      */           }
/*  166 */           if (yy < nHeap && weight[heap[yy + 1]] < weight[heap[yy]])
/*      */           {
/*  168 */             yy++;
/*      */           }
/*  170 */           if (weight[tmp] < weight[heap[yy]]) {
/*      */             break;
/*      */           }
/*  173 */           heap[zz] = heap[yy];
/*  174 */           zz = yy;
/*      */         } 
/*  176 */         heap[zz] = tmp;
/*      */         
/*  178 */         int n2 = heap[1];
/*  179 */         heap[1] = heap[nHeap];
/*  180 */         nHeap--;
/*      */         
/*  182 */         int zz = 0, yy = 0, tmp = 0;
/*  183 */         zz = 1;
/*  184 */         tmp = heap[zz];
/*      */         while (true) {
/*  186 */           yy = zz << 1;
/*  187 */           if (yy > nHeap) {
/*      */             break;
/*      */           }
/*  190 */           if (yy < nHeap && weight[heap[yy + 1]] < weight[heap[yy]])
/*      */           {
/*  192 */             yy++;
/*      */           }
/*  194 */           if (weight[tmp] < weight[heap[yy]]) {
/*      */             break;
/*      */           }
/*  197 */           heap[zz] = heap[yy];
/*  198 */           zz = yy;
/*      */         } 
/*  200 */         heap[zz] = tmp;
/*      */         
/*  202 */         nNodes++;
/*  203 */         parent[n2] = nNodes; parent[n1] = nNodes;
/*      */         
/*  205 */         weight[nNodes] = (weight[n1] & 0xFFFFFF00) + (weight[n2] & 0xFFFFFF00) | 1 + (((weight[n1] & 0xFF) > (weight[n2] & 0xFF)) ? (weight[n1] & 0xFF) : (weight[n2] & 0xFF));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  212 */         parent[nNodes] = -1;
/*  213 */         nHeap++;
/*  214 */         heap[nHeap] = nNodes;
/*      */         
/*  216 */         int zz = 0, tmp = 0;
/*  217 */         zz = nHeap;
/*  218 */         tmp = heap[zz];
/*  219 */         while (weight[tmp] < weight[heap[zz >> 1]]) {
/*  220 */           heap[zz] = heap[zz >> 1];
/*  221 */           zz >>= 1;
/*      */         } 
/*  223 */         heap[zz] = tmp;
/*      */       } 
/*      */       
/*  226 */       if (nNodes >= 516) {
/*  227 */         panic();
/*      */       }
/*      */       
/*  230 */       boolean tooLong = false;
/*  231 */       for (i = 1; i <= alphaSize; i++) {
/*  232 */         int j = 0;
/*  233 */         int k = i;
/*  234 */         while (parent[k] >= 0) {
/*  235 */           k = parent[k];
/*  236 */           j++;
/*      */         } 
/*  238 */         len[i - 1] = (char)j;
/*  239 */         if (j > maxLen) {
/*  240 */           tooLong = true;
/*      */         }
/*      */       } 
/*      */       
/*  244 */       if (!tooLong) {
/*      */         break;
/*      */       }
/*      */       
/*  248 */       for (i = 1; i < alphaSize; i++) {
/*  249 */         int m = weight[i] >> 8;
/*  250 */         m = 1 + m / 2;
/*  251 */         weight[i] = m << 8;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  278 */   CRC mCrc = new CRC();
/*      */   
/*  280 */   private boolean[] inUse = new boolean[256];
/*      */   
/*      */   private int nInUse;
/*  283 */   private char[] seqToUnseq = new char[256];
/*  284 */   private char[] unseqToSeq = new char[256];
/*      */   
/*  286 */   private char[] selector = new char[18002];
/*  287 */   private char[] selectorMtf = new char[18002];
/*      */   
/*      */   private char[] block;
/*      */   
/*      */   private int[] quadrant;
/*      */   
/*      */   private int[] zptr;
/*      */   private short[] szptr;
/*      */   private int[] ftab;
/*      */   private int nMTF;
/*  297 */   private int[] mtfFreq = new int[258];
/*      */ 
/*      */   
/*      */   private int workFactor;
/*      */   
/*      */   private int workDone;
/*      */   
/*      */   private int workLimit;
/*      */   
/*      */   private boolean firstAttempt;
/*      */   
/*      */   private int nBlocksRandomised;
/*      */   
/*  310 */   private int currentChar = -1;
/*  311 */   private int runLength = 0; boolean closed; private int blockCRC; private int combinedCRC; private int allowableBlockSize; private OutputStream bsStream;
/*      */   private int[] incs;
/*      */   
/*  314 */   public CBZip2OutputStream(OutputStream inStream) throws IOException { this(inStream, 9); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void write(int bv) throws IOException {
/*  345 */     int b = (256 + bv) % 256;
/*  346 */     if (this.currentChar != -1) {
/*  347 */       if (this.currentChar == b) {
/*  348 */         this.runLength++;
/*  349 */         if (this.runLength > 254) {
/*  350 */           writeRun();
/*  351 */           this.currentChar = -1;
/*  352 */           this.runLength = 0;
/*      */         } 
/*      */       } else {
/*  355 */         writeRun();
/*  356 */         this.runLength = 1;
/*  357 */         this.currentChar = b;
/*      */       } 
/*      */     } else {
/*  360 */       this.currentChar = b;
/*  361 */       this.runLength++;
/*      */     } 
/*      */   }
/*      */   
/*      */   private void writeRun() throws IOException {
/*  366 */     if (this.last < this.allowableBlockSize) {
/*  367 */       this.inUse[this.currentChar] = true;
/*  368 */       for (int i = 0; i < this.runLength; i++) {
/*  369 */         this.mCrc.updateCRC((char)this.currentChar);
/*      */       }
/*  371 */       switch (this.runLength) {
/*      */         case 1:
/*  373 */           this.last++;
/*  374 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */         case 2:
/*  377 */           this.last++;
/*  378 */           this.block[this.last + 1] = (char)this.currentChar;
/*  379 */           this.last++;
/*  380 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */         case 3:
/*  383 */           this.last++;
/*  384 */           this.block[this.last + 1] = (char)this.currentChar;
/*  385 */           this.last++;
/*  386 */           this.block[this.last + 1] = (char)this.currentChar;
/*  387 */           this.last++;
/*  388 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */       } 
/*  391 */       this.inUse[this.runLength - 4] = true;
/*  392 */       this.last++;
/*  393 */       this.block[this.last + 1] = (char)this.currentChar;
/*  394 */       this.last++;
/*  395 */       this.block[this.last + 1] = (char)this.currentChar;
/*  396 */       this.last++;
/*  397 */       this.block[this.last + 1] = (char)this.currentChar;
/*  398 */       this.last++;
/*  399 */       this.block[this.last + 1] = (char)this.currentChar;
/*  400 */       this.last++;
/*  401 */       this.block[this.last + 1] = (char)(this.runLength - 4);
/*      */     }
/*      */     else {
/*      */       
/*  405 */       endBlock();
/*  406 */       initBlock();
/*  407 */       writeRun();
/*      */     } 
/*      */   }
/*      */   
/*  411 */   public CBZip2OutputStream(OutputStream inStream, int inBlockSize) throws IOException { this.closed = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1538 */     this.incs = new int[] { 1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484 }; this.block = null; this.quadrant = null; this.zptr = null; this.ftab = null; bsSetStream(inStream); this.workFactor = 50; if (inBlockSize > 9) inBlockSize = 9;  if (inBlockSize < 1) inBlockSize = 1;  this.blockSize100k = inBlockSize; allocateCompressStructures(); initialize(); initBlock(); }
/*      */   protected void finalize() throws Throwable { close(); super.finalize(); }
/*      */   public void close() throws IOException { if (this.closed) return;  if (this.runLength > 0) writeRun();  this.currentChar = -1; endBlock(); endCompression(); this.closed = true; super.close(); this.bsStream.close(); }
/*      */   public void flush() throws IOException { super.flush(); this.bsStream.flush(); }
/*      */   private void initialize() throws IOException { this.bytesOut = 0; this.nBlocksRandomised = 0; bsPutUChar(104); bsPutUChar(48 + this.blockSize100k); this.combinedCRC = 0; }
/* 1543 */   private void initBlock() { this.mCrc.initialiseCRC(); this.last = -1; for (int i = 0; i < 256; i++) this.inUse[i] = false;  this.allowableBlockSize = 100000 * this.blockSize100k - 20; } private void endBlock() throws IOException { this.blockCRC = this.mCrc.getFinalCRC(); this.combinedCRC = this.combinedCRC << 1 | this.combinedCRC >>> 31; this.combinedCRC ^= this.blockCRC; doReversibleTransformation(); bsPutUChar(49); bsPutUChar(65); bsPutUChar(89); bsPutUChar(38); bsPutUChar(83); bsPutUChar(89); bsPutint(this.blockCRC); if (this.blockRandomised) { bsW(1, 1); this.nBlocksRandomised++; } else { bsW(1, 0); }  moveToFrontCodeAndSend(); } private void endCompression() throws IOException { bsPutUChar(23); bsPutUChar(114); bsPutUChar(69); bsPutUChar(56); bsPutUChar(80); bsPutUChar(144); bsPutint(this.combinedCRC); bsFinishedWithStream(); } private void hbAssignCodes(int[] code, char[] length, int minLen, int maxLen, int alphaSize) { int vec = 0; for (int n = minLen; n <= maxLen; n++) { for (int i = 0; i < alphaSize; i++) { if (length[i] == n) { code[i] = vec; vec++; }  }  vec <<= 1; }  } private void bsSetStream(OutputStream f) { this.bsStream = f; this.bsLive = 0; this.bsBuff = 0; this.bytesOut = 0; } private void bsFinishedWithStream() throws IOException { while (this.bsLive > 0) { int ch = this.bsBuff >> 24; try { this.bsStream.write(ch); } catch (IOException e) { throw e; }  this.bsBuff <<= 8; this.bsLive -= 8; this.bytesOut++; }  } private void bsW(int n, int v) throws IOException { while (this.bsLive >= 8) { int ch = this.bsBuff >> 24; try { this.bsStream.write(ch); } catch (IOException e) { throw e; }  this.bsBuff <<= 8; this.bsLive -= 8; this.bytesOut++; }  this.bsBuff |= v << 32 - this.bsLive - n; this.bsLive += n; } private void bsPutUChar(int c) throws IOException { bsW(8, c); } private void allocateCompressStructures() { int n = 100000 * this.blockSize100k;
/* 1544 */     this.block = new char[n + 1 + 20];
/* 1545 */     this.quadrant = new int[n + 20];
/* 1546 */     this.zptr = new int[n];
/* 1547 */     this.ftab = new int[65537];
/*      */     
/* 1549 */     if (this.block == null || this.quadrant == null || this.zptr == null || this.ftab == null);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1568 */     this.szptr = new short[2 * n]; }
/*      */   private void bsPutint(int u) throws IOException { bsW(8, u >> 24 & 0xFF); bsW(8, u >> 16 & 0xFF); bsW(8, u >> 8 & 0xFF); bsW(8, u & 0xFF); }
/*      */   private void bsPutIntVS(int numBits, int c) throws IOException { bsW(numBits, c); }
/*      */   private void sendMTFValues() throws IOException { byte b; char[][] len = new char[6][258]; int nSelectors = 0; int alphaSize = this.nInUse + 2; int t; for (t = 0; t < 6; t++) { for (int v = 0; v < alphaSize; v++) len[t][v] = '\017';  }  if (this.nMTF <= 0) panic();  if (this.nMTF < 200) { b = 2; } else if (this.nMTF < 600) { b = 3; } else if (this.nMTF < 1200) { b = 4; } else if (this.nMTF < 2400) { b = 5; } else { b = 6; }  int nPart = b; int remF = this.nMTF; int gs = 0; while (nPart > 0) { int tFreq = remF / nPart; int ge = gs - 1; int aFreq = 0; while (aFreq < tFreq && ge < alphaSize - 1) { ge++; aFreq += this.mtfFreq[ge]; }  if (ge > gs && nPart != b && nPart != 1 && (b - nPart) % 2 == 1) { aFreq -= this.mtfFreq[ge]; ge--; }  for (byte b1 = 0; b1 < alphaSize; b1++) { if (b1 >= gs && b1 <= ge) { len[nPart - 1][b1] = Character.MIN_VALUE; } else { len[nPart - 1][b1] = '\017'; }  }  nPart--; gs = ge + 1; remF -= aFreq; }  int[][] rfreq = new int[6][258]; int[] fave = new int[6]; short[] cost = new short[6]; for (int iter = 0; iter < 4; iter++) { for (t = 0; t < b; t++) fave[t] = 0;  for (t = 0; t < b; t++) { for (byte b1 = 0; b1 < alphaSize; b1++) rfreq[t][b1] = 0;  }  nSelectors = 0; int totc = 0; gs = 0; while (gs < this.nMTF) { int n = gs + 50 - 1; if (n >= this.nMTF) n = this.nMTF - 1;  for (t = 0; t < b; t++) cost[t] = 0;  if (b == 6) { short cost5 = 0, cost4 = cost5, cost3 = cost4, cost2 = cost3, cost1 = cost2, cost0 = cost1; for (int i = gs; i <= n; i++) { short icv = this.szptr[i]; cost0 = (short)(cost0 + len[0][icv]); cost1 = (short)(cost1 + len[1][icv]); cost2 = (short)(cost2 + len[2][icv]); cost3 = (short)(cost3 + len[3][icv]); cost4 = (short)(cost4 + len[4][icv]); cost5 = (short)(cost5 + len[5][icv]); }  cost[0] = cost0; cost[1] = cost1; cost[2] = cost2; cost[3] = cost3; cost[4] = cost4; cost[5] = cost5; } else { for (int i1 = gs; i1 <= n; i1++) { short icv = this.szptr[i1]; for (t = 0; t < b; t++) cost[t] = (short)(cost[t] + len[t][icv]);  }  }  int bc = 999999999; int bt = -1; for (t = 0; t < b; t++) { if (cost[t] < bc) { bc = cost[t]; bt = t; }  }  totc += bc; fave[bt] = fave[bt] + 1; this.selector[nSelectors] = (char)bt; nSelectors++; for (int m = gs; m <= n; m++) rfreq[bt][this.szptr[m]] = rfreq[bt][this.szptr[m]] + 1;  gs = n + 1; }  for (t = 0; t < b; t++) hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);  }  rfreq = null; fave = null; cost = null; if (b >= 8) panic();  if (nSelectors >= 32768 || nSelectors > 18002) panic();  char[] pos = new char[6]; int k; for (k = 0; k < b; k++) pos[k] = (char)k;  for (k = 0; k < nSelectors; k++) { char ll_i = this.selector[k]; int j = 0; char tmp = pos[j]; while (ll_i != tmp) { j++; char tmp2 = tmp; tmp = pos[j]; pos[j] = tmp2; }  pos[0] = tmp; this.selectorMtf[k] = (char)j; }  int[][] code = new int[6][258]; for (t = 0; t < b; t++) { int minLen = 32; int maxLen = 0; for (k = 0; k < alphaSize; k++) { if (len[t][k] > maxLen) maxLen = len[t][k];  if (len[t][k] < minLen) minLen = len[t][k];  }  if (maxLen > 20) panic();  if (minLen < 1) panic();  hbAssignCodes(code[t], len[t], minLen, maxLen, alphaSize); }  boolean[] inUse16 = new boolean[16]; for (k = 0; k < 16; k++) { inUse16[k] = false; for (byte b1 = 0; b1 < 16; b1++) { if (this.inUse[k * 16 + b1]) inUse16[k] = true;  }  }  int nBytes = this.bytesOut; for (k = 0; k < 16; k++) { if (inUse16[k]) { bsW(1, 1); } else { bsW(1, 0); }  }  for (k = 0; k < 16; k++) { if (inUse16[k]) for (byte b1 = 0; b1 < 16; b1++) { if (this.inUse[k * 16 + b1]) { bsW(1, 1); } else { bsW(1, 0); }  }   }  nBytes = this.bytesOut; bsW(3, b); bsW(15, nSelectors); for (k = 0; k < nSelectors; k++) { for (byte b1 = 0; b1 < this.selectorMtf[k]; b1++) bsW(1, 1);  bsW(1, 0); }  nBytes = this.bytesOut; for (t = 0; t < b; t++) { int curr = len[t][0]; bsW(5, curr); for (k = 0; k < alphaSize; k++) { while (curr < len[t][k]) { bsW(2, 2); curr++; }  while (curr > len[t][k]) { bsW(2, 3); curr--; }  bsW(1, 0); }  }  nBytes = this.bytesOut; int selCtr = 0; gs = 0; while (gs < this.nMTF) { int m = gs + 50 - 1; if (m >= this.nMTF) m = this.nMTF - 1;  for (k = gs; k <= m; k++) bsW(len[this.selector[selCtr]][this.szptr[k]], code[this.selector[selCtr]][this.szptr[k]]);  gs = m + 1; selCtr++; }  if (selCtr != nSelectors) panic();  } private void moveToFrontCodeAndSend() throws IOException { bsPutIntVS(24, this.origPtr); generateMTFValues(); sendMTFValues(); } private void simpleSort(int lo, int hi, int d) { int bigN = hi - lo + 1; if (bigN < 2) return;  int hp = 0; while (this.incs[hp] < bigN) hp++;  hp--; for (; hp >= 0; hp--) { int h = this.incs[hp]; int i = lo + h; while (i <= hi) { int v = this.zptr[i]; int j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (i > hi) break;  v = this.zptr[i]; j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (i > hi) break;  v = this.zptr[i]; j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (this.workDone > this.workLimit && this.firstAttempt) return;  }  }  } private void vswap(int p1, int p2, int n) { int temp = 0; while (n > 0) { temp = this.zptr[p1]; this.zptr[p1] = this.zptr[p2]; this.zptr[p2] = temp; p1++; p2++; n--; }  } private char med3(char a, char b, char c) { if (a > b) { char t = a; a = b; b = t; }  if (b > c) { char c1 = b; b = c; c = c1; }  if (a > b) b = a;  return b; } private static class StackElem {
/* 1572 */     int ll; int hh; int dd; private StackElem() {} } private void qSort3(int loSt, int hiSt, int dSt) { StackElem[] stack = new StackElem[1000]; for (int count = 0; count < 1000; count++) stack[count] = new StackElem();  int sp = 0; (stack[sp]).ll = loSt; (stack[sp]).hh = hiSt; (stack[sp]).dd = dSt; sp++; while (sp > 0) { if (sp >= 1000) panic();  sp--; int lo = (stack[sp]).ll; int hi = (stack[sp]).hh; int d = (stack[sp]).dd; if (hi - lo < 20 || d > 10) { simpleSort(lo, hi, d); if (this.workDone > this.workLimit && this.firstAttempt) return;  continue; }  int med = med3(this.block[this.zptr[lo] + d + 1], this.block[this.zptr[hi] + d + 1], this.block[this.zptr[lo + hi >> 1] + d + 1]); int ltLo = lo, unLo = ltLo; int gtHi = hi, unHi = gtHi; while (true) { if (unLo <= unHi) { int n = this.block[this.zptr[unLo] + d + 1] - med; if (n == 0) { int temp = 0; temp = this.zptr[unLo]; this.zptr[unLo] = this.zptr[ltLo]; this.zptr[ltLo] = temp; ltLo++; unLo++; continue; }  if (n <= 0) { unLo++; continue; }  }  while (unLo <= unHi) { int j = this.block[this.zptr[unHi] + d + 1] - med; if (j == 0) { int temp = 0; temp = this.zptr[unHi]; this.zptr[unHi] = this.zptr[gtHi]; this.zptr[gtHi] = temp; gtHi--; unHi--; continue; }  if (j < 0) break;  unHi--; }  if (unLo > unHi) break;  int temp = 0; temp = this.zptr[unLo]; this.zptr[unLo] = this.zptr[unHi]; this.zptr[unHi] = temp; unLo++; unHi--; }  if (gtHi < ltLo) { (stack[sp]).ll = lo; (stack[sp]).hh = hi; (stack[sp]).dd = d + 1; sp++; continue; }  int i = (ltLo - lo < unLo - ltLo) ? (ltLo - lo) : (unLo - ltLo); vswap(lo, unLo - i, i); int m = (hi - gtHi < gtHi - unHi) ? (hi - gtHi) : (gtHi - unHi); vswap(unLo, hi - m + 1, m); i = lo + unLo - ltLo - 1; m = hi - gtHi - unHi + 1; (stack[sp]).ll = lo; (stack[sp]).hh = i; (stack[sp]).dd = d; sp++; (stack[sp]).ll = i + 1; (stack[sp]).hh = m - 1; (stack[sp]).dd = d + 1; sp++; (stack[sp]).ll = m; (stack[sp]).hh = hi; (stack[sp]).dd = d; sp++; }  } private void mainSort() { int[] runningOrder = new int[256]; int[] copy = new int[256]; boolean[] bigDone = new boolean[256]; int i; for (i = 0; i < 20; i++) this.block[this.last + i + 2] = this.block[i % (this.last + 1) + 1];  for (i = 0; i <= this.last + 20; i++) this.quadrant[i] = 0;  this.block[0] = this.block[this.last + 1]; if (this.last < 4000) { for (i = 0; i <= this.last; i++) this.zptr[i] = i;  this.firstAttempt = false; this.workDone = this.workLimit = 0; simpleSort(0, this.last, 0); } else { int numQSorted = 0; for (i = 0; i <= 255; i++) bigDone[i] = false;  for (i = 0; i <= 65536; i++) this.ftab[i] = 0;  int c1 = this.block[0]; for (i = 0; i <= this.last; i++) { int c2 = this.block[i + 1]; this.ftab[(c1 << 8) + c2] = this.ftab[(c1 << 8) + c2] + 1; c1 = c2; }  for (i = 1; i <= 65536; i++) this.ftab[i] = this.ftab[i] + this.ftab[i - 1];  c1 = this.block[1]; for (i = 0; i < this.last; i++) { char c = this.block[i + 2]; int j = (c1 << 8) + c; c1 = c; this.ftab[j] = this.ftab[j] - 1; this.zptr[this.ftab[j]] = i; }  int k = (this.block[this.last + 1] << 8) + this.block[1]; this.ftab[k] = this.ftab[k] - 1; this.zptr[this.ftab[k]] = this.last; for (i = 0; i <= 255; i++) runningOrder[i] = i;  int h = 1; do { h = 3 * h + 1; } while (h <= 256); do { h /= 3; for (i = h; i <= 255; i++) { int vv = runningOrder[i]; k = i; while (this.ftab[runningOrder[k - h] + 1 << 8] - this.ftab[runningOrder[k - h] << 8] > this.ftab[vv + 1 << 8] - this.ftab[vv << 8]) { runningOrder[k] = runningOrder[k - h]; k -= h; if (k <= h - 1) break;  }  runningOrder[k] = vv; }  } while (h != 1); for (i = 0; i <= 255; i++) { int ss = runningOrder[i]; for (k = 0; k <= 255; k++) { int sb = (ss << 8) + k; if ((this.ftab[sb] & 0x200000) != 2097152) { int lo = this.ftab[sb] & 0xFFDFFFFF; int hi = (this.ftab[sb + 1] & 0xFFDFFFFF) - 1; if (hi > lo) { qSort3(lo, hi, 2); numQSorted += hi - lo + 1; if (this.workDone > this.workLimit && this.firstAttempt) return;  }  this.ftab[sb] = this.ftab[sb] | 0x200000; }  }  bigDone[ss] = true; if (i < 255) { int bbStart = this.ftab[ss << 8] & 0xFFDFFFFF; int bbSize = (this.ftab[ss + 1 << 8] & 0xFFDFFFFF) - bbStart; int shifts = 0; while (bbSize >> shifts > 65534) shifts++;  for (k = 0; k < bbSize; k++) { int a2update = this.zptr[bbStart + k]; int qVal = k >> shifts; this.quadrant[a2update] = qVal; if (a2update < 20) this.quadrant[a2update + this.last + 1] = qVal;  }  if (bbSize - 1 >> shifts > 65535) panic();  }  for (k = 0; k <= 255; k++) copy[k] = this.ftab[(k << 8) + ss] & 0xFFDFFFFF;  k = this.ftab[ss << 8] & 0xFFDFFFFF; for (; k < (this.ftab[ss + 1 << 8] & 0xFFDFFFFF); k++) { c1 = this.block[this.zptr[k]]; if (!bigDone[c1]) { this.zptr[copy[c1]] = (this.zptr[k] == 0) ? this.last : (this.zptr[k] - 1); copy[c1] = copy[c1] + 1; }  }  for (k = 0; k <= 255; k++) this.ftab[(k << 8) + ss] = this.ftab[(k << 8) + ss] | 0x200000;  }  }  } private void randomiseBlock() { int rNToGo = 0; int rTPos = 0; int i; for (i = 0; i < 256; i++) this.inUse[i] = false;  for (i = 0; i <= this.last; i++) { if (rNToGo == 0) { rNToGo = (char)BZip2Constants.rNums[rTPos]; rTPos++; if (rTPos == 512) rTPos = 0;  }  rNToGo--; this.block[i + 1] = (char)(this.block[i + 1] ^ ((rNToGo == 1) ? '\001' : Character.MIN_VALUE)); this.block[i + 1] = (char)(this.block[i + 1] & 0xFF); this.inUse[this.block[i + 1]] = true; }  } private void doReversibleTransformation() { this.workLimit = this.workFactor * this.last; this.workDone = 0; this.blockRandomised = false; this.firstAttempt = true; mainSort(); if (this.workDone > this.workLimit && this.firstAttempt) { randomiseBlock(); this.workLimit = this.workDone = 0; this.blockRandomised = true; this.firstAttempt = false; mainSort(); }  this.origPtr = -1; for (int i = 0; i <= this.last; i++) { if (this.zptr[i] == 0) { this.origPtr = i; break; }  }  if (this.origPtr == -1) panic();  } private boolean fullGtU(int i1, int i2) { char c1 = this.block[i1 + 1]; char c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; int k = this.last + 1; do { c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  int s1 = this.quadrant[i1]; int s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; if (i1 > this.last) { i1 -= this.last; i1--; }  if (i2 > this.last) { i2 -= this.last; i2--; }  k -= 4; this.workDone++; } while (k >= 0); return false; } private void generateMTFValues() { char[] yy = new char[256];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1580 */     makeMaps();
/* 1581 */     int EOB = this.nInUse + 1;
/*      */     int i;
/* 1583 */     for (i = 0; i <= EOB; i++) {
/* 1584 */       this.mtfFreq[i] = 0;
/*      */     }
/*      */     
/* 1587 */     int wr = 0;
/* 1588 */     int zPend = 0;
/* 1589 */     for (i = 0; i < this.nInUse; i++) {
/* 1590 */       yy[i] = (char)i;
/*      */     }
/*      */ 
/*      */     
/* 1594 */     for (i = 0; i <= this.last; i++) {
/*      */ 
/*      */       
/* 1597 */       char ll_i = this.unseqToSeq[this.block[this.zptr[i]]];
/*      */       
/* 1599 */       int j = 0;
/* 1600 */       char tmp = yy[j];
/* 1601 */       while (ll_i != tmp) {
/* 1602 */         j++;
/* 1603 */         char tmp2 = tmp;
/* 1604 */         tmp = yy[j];
/* 1605 */         yy[j] = tmp2;
/*      */       } 
/* 1607 */       yy[0] = tmp;
/*      */       
/* 1609 */       if (j == 0) {
/* 1610 */         zPend++;
/*      */       } else {
/* 1612 */         if (zPend > 0) {
/* 1613 */           zPend--;
/*      */           while (true) {
/* 1615 */             switch (zPend % 2) {
/*      */               case 0:
/* 1617 */                 this.szptr[wr] = 0;
/* 1618 */                 wr++;
/* 1619 */                 this.mtfFreq[0] = this.mtfFreq[0] + 1;
/*      */                 break;
/*      */               case 1:
/* 1622 */                 this.szptr[wr] = 1;
/* 1623 */                 wr++;
/* 1624 */                 this.mtfFreq[1] = this.mtfFreq[1] + 1;
/*      */                 break;
/*      */             } 
/* 1627 */             if (zPend < 2) {
/*      */               break;
/*      */             }
/* 1630 */             zPend = (zPend - 2) / 2;
/*      */           } 
/* 1632 */           zPend = 0;
/*      */         } 
/* 1634 */         this.szptr[wr] = (short)(j + 1);
/* 1635 */         wr++;
/* 1636 */         this.mtfFreq[j + 1] = this.mtfFreq[j + 1] + 1;
/*      */       } 
/*      */     } 
/*      */     
/* 1640 */     if (zPend > 0) {
/* 1641 */       zPend--;
/*      */       while (true) {
/* 1643 */         switch (zPend % 2) {
/*      */           case 0:
/* 1645 */             this.szptr[wr] = 0;
/* 1646 */             wr++;
/* 1647 */             this.mtfFreq[0] = this.mtfFreq[0] + 1;
/*      */             break;
/*      */           case 1:
/* 1650 */             this.szptr[wr] = 1;
/* 1651 */             wr++;
/* 1652 */             this.mtfFreq[1] = this.mtfFreq[1] + 1;
/*      */             break;
/*      */         } 
/* 1655 */         if (zPend < 2) {
/*      */           break;
/*      */         }
/* 1658 */         zPend = (zPend - 2) / 2;
/*      */       } 
/*      */     } 
/*      */     
/* 1662 */     this.szptr[wr] = (short)EOB;
/* 1663 */     wr++;
/* 1664 */     this.mtfFreq[EOB] = this.mtfFreq[EOB] + 1;
/*      */     
/* 1666 */     this.nMTF = wr; }
/*      */ 
/*      */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\bzip2\CBZip2OutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CRC,"/*     */ package org.apache.tools.bzip2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CRC
/*     */ {
/*  70 */   public static int[] crc32Table = new int[] { 0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371, 1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, -1742489888, -1662866601, -1851683442, -1788833735, -1960329156, -1880695413, -2103051438, -2040207643, -1104454824, -1159051537, -1213636554, -1284997759, -1389417084, -1444007885, -1532160278, -1603531939, -734892656, -789352409, -575645954, -646886583, -952755380, -1007220997, -827056094, -898286187, -231047128, -151282273, -71779514, -8804623, -515967244, -436212925, -390279782, -327299027, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633, 1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, -1398421865, -1469785312, -1524105735, -1578704818, -1079922613, -1151291908, -1239184603, -1293773166, -1968362705, -1905510760, -2094067647, -2014441994, -1716953613, -1654112188, -1876203875, -1796572374, -525066777, -462094256, -382327159, -302564546, -206542021, -143559028, -97365931, -17609246, -960696225, -1031934488, -817968335, -872425850, -709327229, -780559564, -600130067, -654598054, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652, 1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, -248556018, -168932423, -122852000, -60002089, -500490030, -420856475, -341238852, -278395381, -685261898, -739858943, -559578920, -630940305, -1004286614, -1058877219, -845023740, -916395085, -1119974018, -1174433591, -1262701040, -1333941337, -1371866206, -1426332139, -1481064244, -1552294533, -1690935098, -1611170447, -1833673816, -1770699233, -2009983462, -1930228819, -2119160460, -2056179517, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480, 1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, -978770311, -1050133554, -869589737, -924188512, -693284699, -764654318, -550540341, -605129092, -475935807, -413084042, -366743377, -287118056, -257573603, -194731862, -114850189, -35218492, -1984365303, -1921392450, -2143631769, -2063868976, -1698919467, -1635936670, -1824608069, -1744851700, -1347415887, -1418654458, -1506661409, -1561119128, -1129027987, -1200260134, -1254728445, -1309196108 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   int globalCrc;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public CRC() { initialiseCRC(); }
/*     */ 
/*     */ 
/*     */   
/* 142 */   void initialiseCRC() { this.globalCrc = -1; }
/*     */ 
/*     */ 
/*     */   
/* 146 */   int getFinalCRC() { return this.globalCrc ^ 0xFFFFFFFF; }
/*     */ 
/*     */ 
/*     */   
/* 150 */   int getGlobalCRC() { return this.globalCrc; }
/*     */ 
/*     */ 
/*     */   
/* 154 */   void setGlobalCRC(int newCrc) { this.globalCrc = newCrc; }
/*     */ 
/*     */   
/*     */   void updateCRC(int inCh) {
/* 158 */     int temp = this.globalCrc >> 24 ^ inCh;
/* 159 */     if (temp < 0) {
/* 160 */       temp = 256 + temp;
/*     */     }
/* 162 */     this.globalCrc = this.globalCrc << 8 ^ crc32Table[temp];
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\bzip2\CRC.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.ErrorInQuitException,"/*    */ package org.apache.tools.mail;
/*    */ 
/*    */ import java.io.IOException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ErrorInQuitException
/*    */   extends IOException
/*    */ {
/* 78 */   public ErrorInQuitException(IOException e) { super(e.getMessage()); }
/*    */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\mail\ErrorInQuitException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailMessage,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.net.InetAddress;
/*     */ import java.net.Socket;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MailMessage
/*     */ {
/*     */   public static final String DEFAULT_HOST = ""localhost"";
/*     */   public static final int DEFAULT_PORT = 25;
/*     */   private String host;
/* 143 */   private int port = 25;
/*     */ 
/*     */   
/*     */   private String from;
/*     */ 
/*     */   
/*     */   private Vector replyto;
/*     */   
/*     */   private Vector to;
/*     */   
/*     */   private Vector cc;
/*     */   
/*     */   private Vector headersKeys;
/*     */   
/*     */   private Vector headersValues;
/*     */   
/*     */   private MailPrintStream out;
/*     */   
/*     */   private SmtpResponseReader in;
/*     */   
/*     */   private Socket socket;
/*     */   
/*     */   private static final int OK_READY = 220;
/*     */   
/*     */   private static final int OK_HELO = 250;
/*     */   
/*     */   private static final int OK_FROM = 250;
/*     */   
/*     */   private static final int OK_RCPT_1 = 250;
/*     */   
/*     */   private static final int OK_RCPT_2 = 251;
/*     */   
/*     */   private static final int OK_DATA = 354;
/*     */   
/*     */   private static final int OK_DOT = 250;
/*     */   
/*     */   private static final int OK_QUIT = 221;
/*     */ 
/*     */   
/* 182 */   public MailMessage() throws IOException { this(""localhost"", 25); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public MailMessage(String host) throws IOException { this(host, 25); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MailMessage(String host, int port) throws IOException {
/* 205 */     this.port = port;
/* 206 */     this.host = host;
/* 207 */     this.replyto = new Vector();
/* 208 */     this.to = new Vector();
/* 209 */     this.cc = new Vector();
/* 210 */     this.headersKeys = new Vector();
/* 211 */     this.headersValues = new Vector();
/* 212 */     connect();
/* 213 */     sendHelo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void from(String from) throws IOException {
/* 232 */     sendFrom(from);
/* 233 */     this.from = from;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 244 */   public void replyto(String rto) { this.replyto.addElement(rto); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void to(String to) throws IOException {
/* 255 */     sendRcpt(to);
/* 256 */     this.to.addElement(to);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void cc(String cc) throws IOException {
/* 267 */     sendRcpt(cc);
/* 268 */     this.cc.addElement(cc);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   public void bcc(String bcc) throws IOException { sendRcpt(bcc); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 289 */   public void setSubject(String subj) { setHeader(""Subject"", subj); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setHeader(String name, String value) {
/* 300 */     this.headersKeys.add(name);
/* 301 */     this.headersValues.add(value);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PrintStream getPrintStream() throws IOException {
/* 315 */     setFromHeader();
/* 316 */     setReplyToHeader();
/* 317 */     setToHeader();
/* 318 */     setCcHeader();
/* 319 */     setHeader(""X-Mailer"", ""org.apache.tools.mail.MailMessage (ant.apache.org)"");
/* 320 */     sendData();
/* 321 */     flushHeaders();
/* 322 */     return this.out;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 329 */   void setFromHeader() { setHeader(""From"", this.from); }
/*     */ 
/*     */ 
/*     */   
/*     */   void setReplyToHeader() {
/* 334 */     if (!this.replyto.isEmpty()) {
/* 335 */       setHeader(""Reply-To"", vectorToList(this.replyto));
/*     */     }
/*     */   }
/*     */   
/*     */   void setToHeader() {
/* 340 */     if (!this.to.isEmpty()) {
/* 341 */       setHeader(""To"", vectorToList(this.to));
/*     */     }
/*     */   }
/*     */   
/*     */   void setCcHeader() {
/* 346 */     if (!this.cc.isEmpty()) {
/* 347 */       setHeader(""Cc"", vectorToList(this.cc));
/*     */     }
/*     */   }
/*     */   
/*     */   String vectorToList(Vector v) {
/* 352 */     StringBuffer buf = new StringBuffer();
/* 353 */     Enumeration e = v.elements();
/* 354 */     while (e.hasMoreElements()) {
/* 355 */       buf.append(e.nextElement());
/* 356 */       if (e.hasMoreElements()) {
/* 357 */         buf.append("", "");
/*     */       }
/*     */     } 
/* 360 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void flushHeaders() throws IOException {
/* 368 */     for (int i = 0; i < this.headersKeys.size(); i++) {
/* 369 */       String name = this.headersKeys.elementAt(i);
/* 370 */       String value = this.headersValues.elementAt(i);
/* 371 */       this.out.println(name + "": "" + value);
/*     */     } 
/* 373 */     this.out.println();
/* 374 */     this.out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void sendAndClose() throws IOException {
/*     */     try {
/* 385 */       sendDot();
/* 386 */       sendQuit();
/*     */     } finally {
/* 388 */       disconnect();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   static String sanitizeAddress(String s) {
/* 395 */     int paramDepth = 0;
/* 396 */     int start = 0;
/* 397 */     int end = 0;
/* 398 */     int len = s.length();
/*     */     
/* 400 */     for (int i = 0; i < len; i++) {
/* 401 */       char c = s.charAt(i);
/* 402 */       if (c == '(') {
/* 403 */         paramDepth++;
/* 404 */         if (start == 0) {
/* 405 */           end = i;
/*     */         }
/* 407 */       } else if (c == ')') {
/* 408 */         paramDepth--;
/* 409 */         if (end == 0) {
/* 410 */           start = i + 1;
/*     */         }
/* 412 */       } else if (paramDepth == 0 && c == '<') {
/* 413 */         start = i + 1;
/* 414 */       } else if (paramDepth == 0 && c == '>') {
/* 415 */         end = i;
/*     */       } 
/*     */     } 
/*     */     
/* 419 */     if (end == 0) {
/* 420 */       end = len;
/*     */     }
/*     */     
/* 423 */     return s.substring(start, end);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   void connect() throws IOException {
/* 429 */     this.socket = new Socket(this.host, this.port);
/* 430 */     this.out = new MailPrintStream(new BufferedOutputStream(this.socket.getOutputStream()));
/*     */ 
/*     */     
/* 433 */     this.in = new SmtpResponseReader(this.socket.getInputStream());
/* 434 */     getReady();
/*     */   }
/*     */   
/*     */   void getReady() throws IOException {
/* 438 */     String response = this.in.getResponse();
/* 439 */     int[] ok = { 220 };
/* 440 */     if (!isResponseOK(response, ok)) {
/* 441 */       throw new IOException(""Didn't get introduction from server: "" + response);
/*     */     }
/*     */   }
/*     */   
/*     */   void sendHelo() throws IOException {
/* 446 */     String local = InetAddress.getLocalHost().getHostName();
/* 447 */     int[] ok = { 250 };
/* 448 */     send(""HELO "" + local, ok);
/*     */   }
/*     */   void sendFrom(String from) throws IOException {
/* 451 */     int[] ok = { 250 };
/* 452 */     send(""MAIL FROM: <"" + sanitizeAddress(from) + "">"", ok);
/*     */   }
/*     */   void sendRcpt(String rcpt) throws IOException {
/* 455 */     int[] ok = { 250, 251 };
/* 456 */     send(""RCPT TO: <"" + sanitizeAddress(rcpt) + "">"", ok);
/*     */   }
/*     */   
/*     */   void sendData() throws IOException {
/* 460 */     int[] ok = { 354 };
/* 461 */     send(""DATA"", ok);
/*     */   }
/*     */   
/*     */   void sendDot() throws IOException {
/* 465 */     int[] ok = { 250 };
/* 466 */     send(""\r\n."", ok);
/*     */   }
/*     */   
/*     */   void sendQuit() throws IOException {
/* 470 */     int[] ok = { 221 };
/*     */     try {
/* 472 */       send(""QUIT"", ok);
/*     */     } catch (IOException e) {
/* 474 */       throw new ErrorInQuitException(e);
/*     */     } 
/*     */   }
/*     */   
/*     */   void send(String msg, int[] ok) throws IOException {
/* 479 */     this.out.rawPrint(msg + ""\r\n"");
/* 480 */     String response = this.in.getResponse();
/* 481 */     if (!isResponseOK(response, ok)) {
/* 482 */       throw new IOException(""Unexpected reply to command: "" + msg + "": "" + response);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   boolean isResponseOK(String response, int[] ok) {
/* 489 */     for (int i = 0; i < ok.length; i++) {
/* 490 */       if (response.startsWith("""" + ok[i])) {
/* 491 */         return true;
/*     */       }
/*     */     } 
/* 494 */     return false;
/*     */   }
/*     */   
/*     */   void disconnect() throws IOException {
/* 498 */     if (this.out != null) {
/* 499 */       this.out.close();
/*     */     }
/* 501 */     if (this.in != null) {
/*     */       try {
/* 503 */         this.in.close();
/* 504 */       } catch (IOException e) {}
/*     */     }
/*     */ 
/*     */     
/* 508 */     if (this.socket != null)
/*     */       try {
/* 510 */         this.socket.close();
/* 511 */       } catch (IOException e) {} 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\mail\MailMessage.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailPrintStream,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class MailPrintStream
/*     */   extends PrintStream
/*     */ {
/*     */   private int lastChar;
/*     */   
/* 527 */   public MailPrintStream(OutputStream out) { super(out, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int b) {
/* 533 */     if (b == 10 && this.lastChar != 13) {
/* 534 */       rawWrite(13);
/* 535 */       rawWrite(b);
/* 536 */     } else if (b == 46 && this.lastChar == 10) {
/* 537 */       rawWrite(46);
/* 538 */       rawWrite(b);
/*     */     } else {
/* 540 */       rawWrite(b);
/*     */     } 
/* 542 */     this.lastChar = b;
/*     */   }
/*     */   
/*     */   public void write(byte[] buf, int off, int len) {
/* 546 */     for (int i = 0; i < len; i++) {
/* 547 */       write(buf[off + i]);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 552 */   void rawWrite(int b) { super.write(b); }
/*     */ 
/*     */   
/*     */   void rawPrint(String s) {
/* 556 */     int len = s.length();
/* 557 */     for (int i = 0; i < len; i++)
/* 558 */       rawWrite(s.charAt(i)); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\mail\MailPrintStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.SmtpResponseReader,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SmtpResponseReader
/*     */ {
/*  73 */   protected BufferedReader reader = null;
/*  74 */   private StringBuffer result = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   public SmtpResponseReader(InputStream in) { this.reader = new BufferedReader(new InputStreamReader(in)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getResponse() throws IOException {
/*  91 */     this.result.setLength(0);
/*  92 */     String line = this.reader.readLine();
/*  93 */     if (line != null && line.length() >= 3) {
/*  94 */       this.result.append(line.substring(0, 3));
/*  95 */       this.result.append("" "");
/*     */     } 
/*     */     
/*  98 */     while (line != null) {
/*  99 */       append(line);
/* 100 */       if (!hasMoreLines(line)) {
/*     */         break;
/*     */       }
/* 103 */       line = this.reader.readLine();
/*     */     } 
/* 105 */     return this.result.toString().trim();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void close() throws IOException { this.reader.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   protected boolean hasMoreLines(String line) { return (line.length() > 3 && line.charAt(3) == '-'); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void append(String line) {
/* 126 */     if (line.length() > 4) {
/* 127 */       this.result.append(line.substring(4));
/* 128 */       this.result.append("" "");
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\mail\SmtpResponseReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarBuffer,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarBuffer
/*     */ {
/*     */   public static final int DEFAULT_RCDSIZE = 512;
/*     */   public static final int DEFAULT_BLKSIZE = 10240;
/*     */   private InputStream inStream;
/*     */   private OutputStream outStream;
/*     */   private byte[] blockBuffer;
/*     */   private int currBlkIdx;
/*     */   private int currRecIdx;
/*     */   private int blockSize;
/*     */   private int recordSize;
/*     */   private int recsPerBlock;
/*     */   private boolean debug;
/*     */   
/*  96 */   public TarBuffer(InputStream inStream) { this(inStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public TarBuffer(InputStream inStream, int blockSize) { this(inStream, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(InputStream inStream, int blockSize, int recordSize) {
/* 104 */     this.inStream = inStream;
/* 105 */     this.outStream = null;
/*     */     
/* 107 */     initialize(blockSize, recordSize);
/*     */   }
/*     */ 
/*     */   
/* 111 */   public TarBuffer(OutputStream outStream) { this(outStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public TarBuffer(OutputStream outStream, int blockSize) { this(outStream, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {
/* 119 */     this.inStream = null;
/* 120 */     this.outStream = outStream;
/*     */     
/* 122 */     initialize(blockSize, recordSize);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize(int blockSize, int recordSize) {
/* 129 */     this.debug = false;
/* 130 */     this.blockSize = blockSize;
/* 131 */     this.recordSize = recordSize;
/* 132 */     this.recsPerBlock = this.blockSize / this.recordSize;
/* 133 */     this.blockBuffer = new byte[this.blockSize];
/*     */     
/* 135 */     if (this.inStream != null) {
/* 136 */       this.currBlkIdx = -1;
/* 137 */       this.currRecIdx = this.recsPerBlock;
/*     */     } else {
/* 139 */       this.currBlkIdx = 0;
/* 140 */       this.currRecIdx = 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public int getBlockSize() { return this.blockSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public int getRecordSize() { return this.recordSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isEOFRecord(byte[] record) {
/* 174 */     for (int i = 0, sz = getRecordSize(); i < sz; i++) {
/* 175 */       if (record[i] != 0) {
/* 176 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 180 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void skipRecord() throws IOException {
/* 187 */     if (this.debug) {
/* 188 */       System.err.println(""SkipRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 192 */     if (this.inStream == null) {
/* 193 */       throw new IOException(""reading (via skip) from an output buffer"");
/*     */     }
/*     */     
/* 196 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 197 */       !readBlock()) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 202 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] readRecord() throws IOException {
/* 211 */     if (this.debug) {
/* 212 */       System.err.println(""ReadRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 216 */     if (this.inStream == null) {
/* 217 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 220 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 221 */       !readBlock()) {
/* 222 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 226 */     byte[] result = new byte[this.recordSize];
/*     */     
/* 228 */     System.arraycopy(this.blockBuffer, this.currRecIdx * this.recordSize, result, 0, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 232 */     this.currRecIdx++;
/*     */     
/* 234 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean readBlock() throws IOException {
/* 241 */     if (this.debug) {
/* 242 */       System.err.println(""ReadBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 245 */     if (this.inStream == null) {
/* 246 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 249 */     this.currRecIdx = 0;
/*     */     
/* 251 */     int offset = 0;
/* 252 */     int bytesNeeded = this.blockSize;
/*     */     
/* 254 */     while (bytesNeeded > 0) {
/* 255 */       long numBytes = this.inStream.read(this.blockBuffer, offset, bytesNeeded);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 271 */       if (numBytes == -1L) {
/*     */         break;
/*     */       }
/*     */       
/* 275 */       offset = (int)(offset + numBytes);
/* 276 */       bytesNeeded = (int)(bytesNeeded - numBytes);
/*     */       
/* 278 */       if (numBytes != this.blockSize && 
/* 279 */         this.debug) {
/* 280 */         System.err.println(""ReadBlock: INCOMPLETE READ "" + numBytes + "" of "" + this.blockSize + "" bytes read."");
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 287 */     this.currBlkIdx++;
/*     */     
/* 289 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 298 */   public int getCurrentBlockNum() { return this.currBlkIdx; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   public int getCurrentRecordNum() { return this.currRecIdx - 1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] record) throws IOException {
/* 317 */     if (this.debug) {
/* 318 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 322 */     if (this.outStream == null) {
/* 323 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 326 */     if (record.length != this.recordSize) {
/* 327 */       throw new IOException(""record to write has length '"" + record.length + ""' which is not the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 333 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 334 */       writeBlock();
/*     */     }
/*     */     
/* 337 */     System.arraycopy(record, 0, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 341 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] buf, int offset) throws IOException {
/* 353 */     if (this.debug) {
/* 354 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 358 */     if (this.outStream == null) {
/* 359 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 362 */     if (offset + this.recordSize > buf.length) {
/* 363 */       throw new IOException(""record has length '"" + buf.length + ""' with offset '"" + offset + ""' which is less than the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 369 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 370 */       writeBlock();
/*     */     }
/*     */     
/* 373 */     System.arraycopy(buf, offset, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 377 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeBlock() throws IOException {
/* 384 */     if (this.debug) {
/* 385 */       System.err.println(""WriteBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 388 */     if (this.outStream == null) {
/* 389 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 392 */     this.outStream.write(this.blockBuffer, 0, this.blockSize);
/* 393 */     this.outStream.flush();
/*     */     
/* 395 */     this.currRecIdx = 0;
/* 396 */     this.currBlkIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void flushBlock() throws IOException {
/* 403 */     if (this.debug) {
/* 404 */       System.err.println(""TarBuffer.flushBlock() called."");
/*     */     }
/*     */     
/* 407 */     if (this.outStream == null) {
/* 408 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 411 */     if (this.currRecIdx > 0) {
/* 412 */       writeBlock();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 421 */     if (this.debug) {
/* 422 */       System.err.println(""TarBuffer.closeBuffer()."");
/*     */     }
/*     */     
/* 425 */     if (this.outStream != null) {
/* 426 */       flushBlock();
/*     */       
/* 428 */       if (this.outStream != System.out && this.outStream != System.err) {
/*     */         
/* 430 */         this.outStream.close();
/*     */         
/* 432 */         this.outStream = null;
/*     */       } 
/* 434 */     } else if (this.inStream != null && 
/* 435 */       this.inStream != System.in) {
/* 436 */       this.inStream.close();
/*     */       
/* 438 */       this.inStream = null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarBuffer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarConstants,"package org.apache.tools.tar;
public interface TarConstants {
  public static final int NAMELEN = 100;
  public static final int MODELEN = 8;
  public static final int UIDLEN = 8;
  public static final int GIDLEN = 8;
  public static final int CHKSUMLEN = 8;
  public static final int SIZELEN = 12;
  public static final int MAGICLEN = 8;
  public static final int MODTIMELEN = 12;
  public static final int UNAMELEN = 32;
  public static final int GNAMELEN = 32;
  public static final int DEVLEN = 8;
  public static final byte LF_OLDNORM = 0;
  public static final byte LF_NORMAL = 48;
  public static final byte LF_LINK = 49;
  public static final byte LF_SYMLINK = 50;
  public static final byte LF_CHR = 51;
  public static final byte LF_BLK = 52;
  public static final byte LF_DIR = 53;
  public static final byte LF_FIFO = 54;
  public static final byte LF_CONTIG = 55;
  public static final String TMAGIC = ""ustar"";
  public static final String GNU_TMAGIC = ""ustar  "";
  public static final String GNU_LONGLINK = ""././@LongLink"";
  public static final byte LF_GNUTYPE_LONGNAME = 76;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarConstants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarEntry,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Locale;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarEntry
/*     */   implements TarConstants
/*     */ {
/* 179 */   private StringBuffer magic = new StringBuffer(""ustar"");
/* 180 */   private StringBuffer name = new StringBuffer(); private int mode; private int userId; private int groupId; private long size;
/* 181 */   private StringBuffer linkName = new StringBuffer(); private long modTime; private int checkSum; private byte linkFlag; private StringBuffer userName;
/*     */   private TarEntry() {
/* 183 */     String user = System.getProperty(""user.name"", """");
/*     */     
/* 185 */     if (user.length() > 31) {
/* 186 */       user = user.substring(0, 31);
/*     */     }
/*     */     
/* 189 */     this.userId = 0;
/* 190 */     this.groupId = 0;
/* 191 */     this.userName = new StringBuffer(user);
/* 192 */     this.groupName = new StringBuffer("""");
/* 193 */     this.file = null;
/*     */   }
/*     */   private StringBuffer groupName; private int devMajor; private int devMinor;
/*     */   private File file;
/*     */   public static final int MAX_NAMELEN = 31;
/*     */   public static final int DEFAULT_DIR_MODE = 16877;
/*     */   public static final int DEFAULT_FILE_MODE = 33188;
/*     */   public static final int MILLIS_PER_SECOND = 1000;
/*     */   
/*     */   public TarEntry(String name) {
/* 203 */     this();
/*     */     
/* 205 */     boolean isDir = name.endsWith(""/"");
/*     */     
/* 207 */     this.devMajor = 0;
/* 208 */     this.devMinor = 0;
/* 209 */     this.name = new StringBuffer(name);
/* 210 */     this.mode = isDir ? 16877 : 33188;
/* 211 */     this.linkFlag = isDir ? 53 : 48;
/* 212 */     this.userId = 0;
/* 213 */     this.groupId = 0;
/* 214 */     this.size = 0L;
/* 215 */     this.checkSum = 0;
/* 216 */     this.modTime = (new Date()).getTime() / 1000L;
/* 217 */     this.linkName = new StringBuffer("""");
/* 218 */     this.userName = new StringBuffer("""");
/* 219 */     this.groupName = new StringBuffer("""");
/* 220 */     this.devMajor = 0;
/* 221 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(String name, byte linkFlag) {
/* 232 */     this(name);
/* 233 */     this.linkFlag = linkFlag;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(File file) {
/* 243 */     this();
/*     */     
/* 245 */     this.file = file;
/*     */     
/* 247 */     String name = file.getPath();
/* 248 */     String osname = System.getProperty(""os.name"").toLowerCase(Locale.US);
/*     */     
/* 250 */     if (osname != null)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 255 */       if (osname.startsWith(""windows"")) {
/* 256 */         if (name.length() > 2) {
/* 257 */           char ch1 = name.charAt(0);
/* 258 */           char ch2 = name.charAt(1);
/*     */           
/* 260 */           if (ch2 == ':' && ((ch1 >= 'a' && ch1 <= 'z') || (ch1 >= 'A' && ch1 <= 'Z')))
/*     */           {
/*     */             
/* 263 */             name = name.substring(2);
/*     */           }
/*     */         } 
/* 266 */       } else if (osname.indexOf(""netware"") > -1) {
/* 267 */         int colon = name.indexOf(':');
/* 268 */         if (colon != -1) {
/* 269 */           name = name.substring(colon + 1);
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 274 */     name = name.replace(File.separatorChar, '/');
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 279 */     while (name.startsWith(""/"")) {
/* 280 */       name = name.substring(1);
/*     */     }
/*     */     
/* 283 */     this.linkName = new StringBuffer("""");
/* 284 */     this.name = new StringBuffer(name);
/*     */     
/* 286 */     if (file.isDirectory()) {
/* 287 */       this.mode = 16877;
/* 288 */       this.linkFlag = 53;
/*     */       
/* 290 */       if (this.name.charAt(this.name.length() - 1) != '/') {
/* 291 */         this.name.append(""/"");
/*     */       }
/*     */     } else {
/* 294 */       this.mode = 33188;
/* 295 */       this.linkFlag = 48;
/*     */     } 
/*     */     
/* 298 */     this.size = file.length();
/* 299 */     this.modTime = file.lastModified() / 1000L;
/* 300 */     this.checkSum = 0;
/* 301 */     this.devMajor = 0;
/* 302 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(byte[] headerBuf) {
/* 312 */     this();
/* 313 */     parseTarHeader(headerBuf);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 324 */   public boolean equals(TarEntry it) { return getName().equals(it.getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object it) {
/* 335 */     if (it == null || getClass() != it.getClass()) {
/* 336 */       return false;
/*     */     }
/* 338 */     return equals((TarEntry)it);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 347 */   public int hashCode() { return getName().hashCode(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 359 */   public boolean isDescendent(TarEntry desc) { return desc.getName().startsWith(getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 368 */   public String getName() { return this.name.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 377 */   public void setName(String name) { this.name = new StringBuffer(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 386 */   public void setMode(int mode) { this.mode = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 395 */   public String getLinkName() { return this.linkName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 404 */   public int getUserId() { return this.userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 413 */   public void setUserId(int userId) { this.userId = userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 422 */   public int getGroupId() { return this.groupId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 431 */   public void setGroupId(int groupId) { this.groupId = groupId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 440 */   public String getUserName() { return this.userName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 449 */   public void setUserName(String userName) { this.userName = new StringBuffer(userName); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 458 */   public String getGroupName() { return this.groupName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 467 */   public void setGroupName(String groupName) { this.groupName = new StringBuffer(groupName); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIds(int userId, int groupId) {
/* 477 */     setUserId(userId);
/* 478 */     setGroupId(groupId);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setNames(String userName, String groupName) {
/* 488 */     setUserName(userName);
/* 489 */     setGroupName(groupName);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 499 */   public void setModTime(long time) { this.modTime = time / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 508 */   public void setModTime(Date time) { this.modTime = time.getTime() / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 517 */   public Date getModTime() { return new Date(this.modTime * 1000L); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 526 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 535 */   public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 544 */   public long getSize() { return this.size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 553 */   public void setSize(long size) { this.size = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 563 */   public boolean isGNULongNameEntry() { return (this.linkFlag == 76 && this.name.toString().equals(""././@LongLink"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isDirectory() {
/* 573 */     if (this.file != null) {
/* 574 */       return this.file.isDirectory();
/*     */     }
/*     */     
/* 577 */     if (this.linkFlag == 53) {
/* 578 */       return true;
/*     */     }
/*     */     
/* 581 */     if (getName().endsWith(""/"")) {
/* 582 */       return true;
/*     */     }
/*     */     
/* 585 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry[] getDirectoryEntries() {
/* 595 */     if (this.file == null || !this.file.isDirectory()) {
/* 596 */       return new TarEntry[0];
/*     */     }
/*     */     
/* 599 */     String[] list = this.file.list();
/* 600 */     TarEntry[] result = new TarEntry[list.length];
/*     */     
/* 602 */     for (int i = 0; i < list.length; i++) {
/* 603 */       result[i] = new TarEntry(new File(this.file, list[i]));
/*     */     }
/*     */     
/* 606 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeEntryHeader(byte[] outbuf) {
/* 615 */     int offset = 0;
/*     */     
/* 617 */     offset = TarUtils.getNameBytes(this.name, outbuf, offset, 100);
/* 618 */     offset = TarUtils.getOctalBytes(this.mode, outbuf, offset, 8);
/* 619 */     offset = TarUtils.getOctalBytes(this.userId, outbuf, offset, 8);
/* 620 */     offset = TarUtils.getOctalBytes(this.groupId, outbuf, offset, 8);
/* 621 */     offset = TarUtils.getLongOctalBytes(this.size, outbuf, offset, 12);
/* 622 */     offset = TarUtils.getLongOctalBytes(this.modTime, outbuf, offset, 12);
/*     */     
/* 624 */     int csOffset = offset;
/*     */     
/* 626 */     for (int c = 0; c < 8; c++) {
/* 627 */       outbuf[offset++] = 32;
/*     */     }
/*     */     
/* 630 */     outbuf[offset++] = this.linkFlag;
/* 631 */     offset = TarUtils.getNameBytes(this.linkName, outbuf, offset, 100);
/* 632 */     offset = TarUtils.getNameBytes(this.magic, outbuf, offset, 8);
/* 633 */     offset = TarUtils.getNameBytes(this.userName, outbuf, offset, 32);
/* 634 */     offset = TarUtils.getNameBytes(this.groupName, outbuf, offset, 32);
/* 635 */     offset = TarUtils.getOctalBytes(this.devMajor, outbuf, offset, 8);
/* 636 */     offset = TarUtils.getOctalBytes(this.devMinor, outbuf, offset, 8);
/*     */     
/* 638 */     while (offset < outbuf.length) {
/* 639 */       outbuf[offset++] = 0;
/*     */     }
/*     */     
/* 642 */     long checkSum = TarUtils.computeCheckSum(outbuf);
/*     */     
/* 644 */     TarUtils.getCheckSumOctalBytes(checkSum, outbuf, csOffset, 8);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseTarHeader(byte[] header) {
/* 653 */     int offset = 0;
/*     */     
/* 655 */     this.name = TarUtils.parseName(header, offset, 100);
/* 656 */     offset += 100;
/* 657 */     this.mode = (int)TarUtils.parseOctal(header, offset, 8);
/* 658 */     offset += 8;
/* 659 */     this.userId = (int)TarUtils.parseOctal(header, offset, 8);
/* 660 */     offset += 8;
/* 661 */     this.groupId = (int)TarUtils.parseOctal(header, offset, 8);
/* 662 */     offset += 8;
/* 663 */     this.size = TarUtils.parseOctal(header, offset, 12);
/* 664 */     offset += 12;
/* 665 */     this.modTime = TarUtils.parseOctal(header, offset, 12);
/* 666 */     offset += 12;
/* 667 */     this.checkSum = (int)TarUtils.parseOctal(header, offset, 8);
/* 668 */     offset += 8;
/* 669 */     this.linkFlag = header[offset++];
/* 670 */     this.linkName = TarUtils.parseName(header, offset, 100);
/* 671 */     offset += 100;
/* 672 */     this.magic = TarUtils.parseName(header, offset, 8);
/* 673 */     offset += 8;
/* 674 */     this.userName = TarUtils.parseName(header, offset, 32);
/* 675 */     offset += 32;
/* 676 */     this.groupName = TarUtils.parseName(header, offset, 32);
/* 677 */     offset += 32;
/* 678 */     this.devMajor = (int)TarUtils.parseOctal(header, offset, 8);
/* 679 */     offset += 8;
/* 680 */     this.devMinor = (int)TarUtils.parseOctal(header, offset, 8);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarInputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarInputStream
/*     */   extends FilterInputStream
/*     */ {
/*     */   protected boolean debug;
/*     */   protected boolean hasHitEOF;
/*     */   protected int entrySize;
/*     */   protected int entryOffset;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] readBuf;
/*     */   protected TarBuffer buffer;
/*     */   protected TarEntry currEntry;
/*     */   private boolean v7Format;
/*     */   
/*  89 */   public TarInputStream(InputStream is) { this(is, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public TarInputStream(InputStream is, int blockSize) { this(is, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarInputStream(InputStream is, int blockSize, int recordSize) {
/*  97 */     super(is);
/*     */     
/*  99 */     this.buffer = new TarBuffer(is, blockSize, recordSize);
/* 100 */     this.readBuf = null;
/* 101 */     this.oneBuf = new byte[1];
/* 102 */     this.debug = false;
/* 103 */     this.hasHitEOF = false;
/* 104 */     this.v7Format = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDebug(boolean debug) {
/* 113 */     this.debug = debug;
/* 114 */     this.buffer.setDebug(debug);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void close() throws IOException { this.buffer.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public int available() throws IOException { return this.entrySize - this.entryOffset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long skip(long numToSkip) throws IOException {
/* 160 */     byte[] skipBuf = new byte[8192];
/* 161 */     long skip = numToSkip;
/* 162 */     while (skip > 0L) {
/* 163 */       int realSkip = (int)((skip > skipBuf.length) ? skipBuf.length : skip);
/* 164 */       int numRead = read(skipBuf, 0, realSkip);
/* 165 */       if (numRead == -1) {
/*     */         break;
/*     */       }
/* 168 */       skip -= numRead;
/*     */     } 
/* 170 */     return numToSkip - skip;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public boolean markSupported() { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void mark(int markLimit) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry getNextEntry() throws IOException {
/* 209 */     if (this.hasHitEOF) {
/* 210 */       return null;
/*     */     }
/*     */     
/* 213 */     if (this.currEntry != null) {
/* 214 */       int numToSkip = this.entrySize - this.entryOffset;
/*     */       
/* 216 */       if (this.debug) {
/* 217 */         System.err.println(""TarInputStream: SKIP currENTRY '"" + this.currEntry.getName() + ""' SZ "" + this.entrySize + "" OFF "" + this.entryOffset + ""  skipping "" + numToSkip + "" bytes"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 224 */       if (numToSkip > 0) {
/* 225 */         skip(numToSkip);
/*     */       }
/*     */       
/* 228 */       this.readBuf = null;
/*     */     } 
/*     */     
/* 231 */     byte[] headerBuf = this.buffer.readRecord();
/*     */     
/* 233 */     if (headerBuf == null) {
/* 234 */       if (this.debug) {
/* 235 */         System.err.println(""READ NULL RECORD"");
/*     */       }
/* 237 */       this.hasHitEOF = true;
/* 238 */     } else if (this.buffer.isEOFRecord(headerBuf)) {
/* 239 */       if (this.debug) {
/* 240 */         System.err.println(""READ EOF RECORD"");
/*     */       }
/* 242 */       this.hasHitEOF = true;
/*     */     } 
/*     */     
/* 245 */     if (this.hasHitEOF) {
/* 246 */       this.currEntry = null;
/*     */     } else {
/* 248 */       this.currEntry = new TarEntry(headerBuf);
/*     */       
/* 250 */       if (headerBuf[257] != 117 || headerBuf[258] != 115 || headerBuf[259] != 116 || headerBuf[260] != 97 || headerBuf[261] != 114)
/*     */       {
/*     */         
/* 253 */         this.v7Format = true;
/*     */       }
/*     */       
/* 256 */       if (this.debug) {
/* 257 */         System.err.println(""TarInputStream: SET CURRENTRY '"" + this.currEntry.getName() + ""' size = "" + this.currEntry.getSize());
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 263 */       this.entryOffset = 0;
/*     */ 
/*     */       
/* 266 */       this.entrySize = (int)this.currEntry.getSize();
/*     */     } 
/*     */     
/* 269 */     if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {
/*     */       
/* 271 */       StringBuffer longName = new StringBuffer();
/* 272 */       byte[] buffer = new byte[256];
/* 273 */       int length = 0;
/* 274 */       while ((length = read(buffer)) >= 0) {
/* 275 */         longName.append(new String(buffer, 0, length));
/*     */       }
/* 277 */       getNextEntry();
/*     */ 
/*     */       
/* 280 */       if (longName.length() > 0 && longName.charAt(longName.length() - 1) == '\000')
/*     */       {
/* 282 */         longName.deleteCharAt(longName.length() - 1);
/*     */       }
/* 284 */       this.currEntry.setName(longName.toString());
/*     */     } 
/*     */     
/* 287 */     return this.currEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/* 298 */     int num = read(this.oneBuf, 0, 1);
/*     */     
/* 300 */     if (num == -1) {
/* 301 */       return num;
/*     */     }
/* 303 */     return this.oneBuf[0];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 316 */   public int read(byte[] buf) throws IOException { return read(buf, 0, buf.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read(byte[] buf, int offset, int numToRead) throws IOException {
/* 332 */     int totalRead = 0;
/*     */     
/* 334 */     if (this.entryOffset >= this.entrySize) {
/* 335 */       return -1;
/*     */     }
/*     */     
/* 338 */     if (numToRead + this.entryOffset > this.entrySize) {
/* 339 */       numToRead = this.entrySize - this.entryOffset;
/*     */     }
/*     */     
/* 342 */     if (this.readBuf != null) {
/* 343 */       int sz = (numToRead > this.readBuf.length) ? this.readBuf.length : numToRead;
/*     */ 
/*     */       
/* 346 */       System.arraycopy(this.readBuf, 0, buf, offset, sz);
/*     */       
/* 348 */       if (sz >= this.readBuf.length) {
/* 349 */         this.readBuf = null;
/*     */       } else {
/* 351 */         int newLen = this.readBuf.length - sz;
/* 352 */         byte[] newBuf = new byte[newLen];
/*     */         
/* 354 */         System.arraycopy(this.readBuf, sz, newBuf, 0, newLen);
/*     */         
/* 356 */         this.readBuf = newBuf;
/*     */       } 
/*     */       
/* 359 */       totalRead += sz;
/* 360 */       numToRead -= sz;
/* 361 */       offset += sz;
/*     */     } 
/*     */     
/* 364 */     while (numToRead > 0) {
/* 365 */       byte[] rec = this.buffer.readRecord();
/*     */       
/* 367 */       if (rec == null)
/*     */       {
/* 369 */         throw new IOException(""unexpected EOF with "" + numToRead + "" bytes unread"");
/*     */       }
/*     */ 
/*     */       
/* 373 */       int sz = numToRead;
/* 374 */       int recLen = rec.length;
/*     */       
/* 376 */       if (recLen > sz) {
/* 377 */         System.arraycopy(rec, 0, buf, offset, sz);
/*     */         
/* 379 */         this.readBuf = new byte[recLen - sz];
/*     */         
/* 381 */         System.arraycopy(rec, sz, this.readBuf, 0, recLen - sz);
/*     */       } else {
/* 383 */         sz = recLen;
/*     */         
/* 385 */         System.arraycopy(rec, 0, buf, offset, recLen);
/*     */       } 
/*     */       
/* 388 */       totalRead += sz;
/* 389 */       numToRead -= sz;
/* 390 */       offset += sz;
/*     */     } 
/*     */     
/* 393 */     this.entryOffset += totalRead;
/*     */     
/* 395 */     return totalRead;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyEntryContents(OutputStream out) throws IOException {
/* 405 */     byte[] buf = new byte[32768];
/*     */     
/*     */     while (true) {
/* 408 */       int numRead = read(buf, 0, buf.length);
/*     */       
/* 410 */       if (numRead == -1) {
/*     */         break;
/*     */       }
/*     */       
/* 414 */       out.write(buf, 0, numRead);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarOutputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarOutputStream
/*     */   extends FilterOutputStream
/*     */ {
/*     */   public static final int LONGFILE_ERROR = 0;
/*     */   public static final int LONGFILE_TRUNCATE = 1;
/*     */   public static final int LONGFILE_GNU = 2;
/*     */   protected boolean debug;
/*     */   protected int currSize;
/*     */   protected int currBytes;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] recordBuf;
/*     */   protected int assemLen;
/*     */   protected byte[] assemBuf;
/*     */   protected TarBuffer buffer;
/*  91 */   protected int longFileMode = 0;
/*     */ 
/*     */   
/*  94 */   public TarOutputStream(OutputStream os) { this(os, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public TarOutputStream(OutputStream os, int blockSize) { this(os, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarOutputStream(OutputStream os, int blockSize, int recordSize) {
/* 102 */     super(os);
/*     */     
/* 104 */     this.buffer = new TarBuffer(os, blockSize, recordSize);
/* 105 */     this.debug = false;
/* 106 */     this.assemLen = 0;
/* 107 */     this.assemBuf = new byte[recordSize];
/* 108 */     this.recordBuf = new byte[recordSize];
/* 109 */     this.oneBuf = new byte[1];
/*     */   }
/*     */ 
/*     */   
/* 113 */   public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setDebug(boolean debugF) { this.debug = debugF; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setBufferDebug(boolean debug) { this.buffer.setDebug(debug); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void finish() throws IOException { writeEOFRecord(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 149 */     finish();
/* 150 */     this.buffer.close();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(TarEntry entry) throws IOException {
/* 174 */     if (entry.getName().length() >= 100)
/*     */     {
/* 176 */       if (this.longFileMode == 2) {
/*     */ 
/*     */         
/* 179 */         TarEntry longLinkEntry = new TarEntry(""././@LongLink"", (byte)76);
/*     */ 
/*     */         
/* 182 */         longLinkEntry.setSize((entry.getName().length() + 1));
/* 183 */         putNextEntry(longLinkEntry);
/* 184 */         write(entry.getName().getBytes());
/* 185 */         write(0);
/* 186 */         closeEntry();
/* 187 */       } else if (this.longFileMode != 1) {
/* 188 */         throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + 'd' + "" bytes)"");
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 194 */     entry.writeEntryHeader(this.recordBuf);
/* 195 */     this.buffer.writeRecord(this.recordBuf);
/*     */     
/* 197 */     this.currBytes = 0;
/*     */     
/* 199 */     if (entry.isDirectory()) {
/* 200 */       this.currSize = 0;
/*     */     } else {
/* 202 */       this.currSize = (int)entry.getSize();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 216 */     if (this.assemLen > 0) {
/* 217 */       for (int i = this.assemLen; i < this.assemBuf.length; i++) {
/* 218 */         this.assemBuf[i] = 0;
/*     */       }
/*     */       
/* 221 */       this.buffer.writeRecord(this.assemBuf);
/*     */       
/* 223 */       this.currBytes += this.assemLen;
/* 224 */       this.assemLen = 0;
/*     */     } 
/*     */     
/* 227 */     if (this.currBytes < this.currSize) {
/* 228 */       throw new IOException(""entry closed at '"" + this.currBytes + ""' before the '"" + this.currSize + ""' bytes specified in the header were written"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int b) throws IOException {
/* 242 */     this.oneBuf[0] = (byte)b;
/*     */     
/* 244 */     write(this.oneBuf, 0, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void write(byte[] wBuf) throws IOException { write(wBuf, 0, wBuf.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
/* 272 */     if (this.currBytes + numToWrite > this.currSize) {
/* 273 */       throw new IOException(""request to write '"" + numToWrite + ""' bytes exceeds size in header of '"" + this.currSize + ""' bytes"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 286 */     if (this.assemLen > 0) {
/* 287 */       if (this.assemLen + numToWrite >= this.recordBuf.length) {
/* 288 */         int aLen = this.recordBuf.length - this.assemLen;
/*     */         
/* 290 */         System.arraycopy(this.assemBuf, 0, this.recordBuf, 0, this.assemLen);
/*     */         
/* 292 */         System.arraycopy(wBuf, wOffset, this.recordBuf, this.assemLen, aLen);
/*     */         
/* 294 */         this.buffer.writeRecord(this.recordBuf);
/*     */         
/* 296 */         this.currBytes += this.recordBuf.length;
/* 297 */         wOffset += aLen;
/* 298 */         numToWrite -= aLen;
/* 299 */         this.assemLen = 0;
/*     */       } else {
/* 301 */         System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen, numToWrite);
/*     */ 
/*     */         
/* 304 */         wOffset += numToWrite;
/* 305 */         this.assemLen += numToWrite;
/* 306 */         numToWrite -= numToWrite;
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 315 */     while (numToWrite > 0) {
/* 316 */       if (numToWrite < this.recordBuf.length) {
/* 317 */         System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen, numToWrite);
/*     */ 
/*     */         
/* 320 */         this.assemLen += numToWrite;
/*     */         
/*     */         break;
/*     */       } 
/*     */       
/* 325 */       this.buffer.writeRecord(wBuf, wOffset);
/*     */       
/* 327 */       int num = this.recordBuf.length;
/*     */       
/* 329 */       this.currBytes += num;
/* 330 */       numToWrite -= num;
/* 331 */       wOffset += num;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeEOFRecord() throws IOException {
/* 340 */     for (int i = 0; i < this.recordBuf.length; i++) {
/* 341 */       this.recordBuf[i] = 0;
/*     */     }
/*     */     
/* 344 */     this.buffer.writeRecord(this.recordBuf);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarUtils,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarUtils
/*     */ {
/*     */   public static long parseOctal(byte[] header, int offset, int length) {
/*  80 */     long result = 0L;
/*  81 */     boolean stillPadding = true;
/*  82 */     int end = offset + length;
/*     */     
/*  84 */     for (int i = offset; i < end && 
/*  85 */       header[i] != 0; i++) {
/*     */ 
/*     */ 
/*     */       
/*  89 */       if (header[i] == 32 || header[i] == 48) {
/*  90 */         if (stillPadding) {
/*     */           continue;
/*     */         }
/*     */         
/*  94 */         if (header[i] == 32) {
/*     */           break;
/*     */         }
/*     */       } 
/*     */       
/*  99 */       stillPadding = false;
/* 100 */       result = (result << 3L) + (header[i] - 48);
/*     */       continue;
/*     */     } 
/* 103 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static StringBuffer parseName(byte[] header, int offset, int length) {
/* 115 */     StringBuffer result = new StringBuffer(length);
/* 116 */     int end = offset + length;
/*     */     
/* 118 */     for (int i = offset; i < end && 
/* 119 */       header[i] != 0; i++)
/*     */     {
/*     */ 
/*     */       
/* 123 */       result.append((char)header[i]);
/*     */     }
/*     */     
/* 126 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {
/*     */     int i;
/* 140 */     for (i = 0; i < length && i < name.length(); i++) {
/* 141 */       buf[offset + i] = (byte)name.charAt(i);
/*     */     }
/*     */     
/* 144 */     for (; i < length; i++) {
/* 145 */       buf[offset + i] = 0;
/*     */     }
/*     */     
/* 148 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
/* 160 */     int idx = length - 1;
/*     */     
/* 162 */     buf[offset + idx] = 0;
/* 163 */     idx--;
/* 164 */     buf[offset + idx] = 32;
/* 165 */     idx--;
/*     */     
/* 167 */     if (value == 0L) {
/* 168 */       buf[offset + idx] = 48;
/* 169 */       idx--;
/*     */     } else {
/* 171 */       for (long val = value; idx >= 0 && val > 0L; idx--) {
/* 172 */         buf[offset + idx] = (byte)(48 + (byte)(int)(val & 0x7L));
/* 173 */         val >>= 3L;
/*     */       } 
/*     */     } 
/*     */     
/* 177 */     for (; idx >= 0; idx--) {
/* 178 */       buf[offset + idx] = 32;
/*     */     }
/*     */     
/* 181 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {
/* 193 */     byte[] temp = new byte[length + 1];
/*     */     
/* 195 */     getOctalBytes(value, temp, 0, length + 1);
/* 196 */     System.arraycopy(temp, 0, buf, offset, length);
/*     */     
/* 198 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {
/* 210 */     getOctalBytes(value, buf, offset, length);
/*     */     
/* 212 */     buf[offset + length - 1] = 32;
/* 213 */     buf[offset + length - 2] = 0;
/*     */     
/* 215 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static long computeCheckSum(byte[] buf) {
/* 225 */     long sum = 0L;
/*     */     
/* 227 */     for (int i = 0; i < buf.length; i++) {
/* 228 */       sum += (0xFF & buf[i]);
/*     */     }
/*     */     
/* 231 */     return sum;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\tar\TarUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.AsiExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AsiExtraField
/*     */   implements ZipExtraField, UnixStat, Cloneable
/*     */ {
/*  89 */   private static final ZipShort HEADER_ID = new ZipShort(30062);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   private int mode = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int uid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private int gid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   private String link = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dirFlag = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public ZipShort getHeaderId() { return HEADER_ID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public ZipShort getLocalFileDataLength() { return new ZipShort(14 + (getLinkedFile().getBytes()).length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public ZipShort getCentralDirectoryLength() { return getLocalFileDataLength(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getLocalFileDataData() {
/* 175 */     byte[] data = new byte[getLocalFileDataLength().getValue() - 4];
/* 176 */     System.arraycopy((new ZipShort(getMode())).getBytes(), 0, data, 0, 2);
/*     */     
/* 178 */     byte[] linkArray = getLinkedFile().getBytes();
/* 179 */     System.arraycopy((new ZipLong(linkArray.length)).getBytes(), 0, data, 2, 4);
/*     */ 
/*     */     
/* 182 */     System.arraycopy((new ZipShort(getUserId())).getBytes(), 0, data, 6, 2);
/*     */     
/* 184 */     System.arraycopy((new ZipShort(getGroupId())).getBytes(), 0, data, 8, 2);
/*     */ 
/*     */     
/* 187 */     System.arraycopy(linkArray, 0, data, 10, linkArray.length);
/*     */     
/* 189 */     this.crc.reset();
/* 190 */     this.crc.update(data);
/* 191 */     long checksum = this.crc.getValue();
/*     */     
/* 193 */     byte[] result = new byte[data.length + 4];
/* 194 */     System.arraycopy((new ZipLong(checksum)).getBytes(), 0, result, 0, 4);
/* 195 */     System.arraycopy(data, 0, result, 4, data.length);
/* 196 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public byte[] getCentralDirectoryData() { return getLocalFileDataData(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setUserId(int uid) { this.uid = uid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public int getUserId() { return this.uid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setGroupId(int gid) { this.gid = gid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public int getGroupId() { return this.gid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLinkedFile(String name) {
/* 253 */     this.link = name;
/* 254 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public String getLinkedFile() { return this.link; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public boolean isLink() { return (getLinkedFile().length() != 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setMode(int mode) { this.mode = getMode(mode); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDirectory(boolean dirFlag) {
/* 302 */     this.dirFlag = dirFlag;
/* 303 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public boolean isDirectory() { return (this.dirFlag && !isLink()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseFromLocalFileData(byte[] data, int offset, int length) throws ZipException {
/* 323 */     long givenChecksum = (new ZipLong(data, offset)).getValue();
/* 324 */     byte[] tmp = new byte[length - 4];
/* 325 */     System.arraycopy(data, offset + 4, tmp, 0, length - 4);
/* 326 */     this.crc.reset();
/* 327 */     this.crc.update(tmp);
/* 328 */     long realChecksum = this.crc.getValue();
/* 329 */     if (givenChecksum != realChecksum) {
/* 330 */       throw new ZipException(""bad CRC checksum "" + Long.toHexString(givenChecksum) + "" instead of "" + Long.toHexString(realChecksum));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 336 */     int newMode = (new ZipShort(tmp, 0)).getValue();
/* 337 */     byte[] linkArray = new byte[(int)(new ZipLong(tmp, 2)).getValue()];
/* 338 */     this.uid = (new ZipShort(tmp, 6)).getValue();
/* 339 */     this.gid = (new ZipShort(tmp, 8)).getValue();
/*     */     
/* 341 */     if (linkArray.length == 0) {
/* 342 */       this.link = """";
/*     */     } else {
/* 344 */       System.arraycopy(tmp, 10, linkArray, 0, linkArray.length);
/* 345 */       this.link = new String(linkArray);
/*     */     } 
/* 347 */     setDirectory(((newMode & 0x4000) != 0));
/* 348 */     setMode(newMode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int getMode(int mode) {
/* 357 */     int type = 32768;
/* 358 */     if (isLink()) {
/* 359 */       type = 40960;
/* 360 */     } else if (isDirectory()) {
/* 361 */       type = 16384;
/*     */     } 
/* 363 */     return type | mode & 0xFFF;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\AsiExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ExtraFieldUtils,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExtraFieldUtils
/*     */ {
/*  77 */   private static Hashtable implementations = new Hashtable(); static  {
/*  78 */     register(AsiExtraField.class);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void register(Class c) {
/*     */     try {
/*  91 */       ZipExtraField ze = c.newInstance();
/*  92 */       implementations.put(ze.getHeaderId(), c);
/*     */     } catch (ClassCastException cc) {
/*  94 */       throw new RuntimeException(c + "" doesn't implement ZipExtraField"");
/*     */     } catch (InstantiationException ie) {
/*  96 */       throw new RuntimeException(c + "" is not a concrete class"");
/*     */     } catch (IllegalAccessException ie) {
/*  98 */       throw new RuntimeException(c + ""'s no-arg constructor is not public"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField createExtraField(ZipShort headerId) throws InstantiationException, IllegalAccessException {
/* 110 */     Class c = (Class)implementations.get(headerId);
/* 111 */     if (c != null) {
/* 112 */       return c.newInstance();
/*     */     }
/* 114 */     UnrecognizedExtraField u = new UnrecognizedExtraField();
/* 115 */     u.setHeaderId(headerId);
/* 116 */     return u;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField[] parse(byte[] data) throws ZipException {
/* 126 */     Vector v = new Vector();
/* 127 */     int start = 0;
/* 128 */     while (start <= data.length - 4) {
/* 129 */       ZipShort headerId = new ZipShort(data, start);
/* 130 */       int length = (new ZipShort(data, start + 2)).getValue();
/* 131 */       if (start + 4 + length > data.length) {
/* 132 */         throw new ZipException(""data starting at "" + start + "" is in unknown format"");
/*     */       }
/*     */       
/*     */       try {
/* 136 */         ZipExtraField ze = createExtraField(headerId);
/* 137 */         ze.parseFromLocalFileData(data, start + 4, length);
/* 138 */         v.addElement(ze);
/*     */       } catch (InstantiationException ie) {
/* 140 */         throw new ZipException(ie.getMessage());
/*     */       } catch (IllegalAccessException iae) {
/* 142 */         throw new ZipException(iae.getMessage());
/*     */       } 
/* 144 */       start += length + 4;
/*     */     } 
/* 146 */     if (start != data.length) {
/* 147 */       throw new ZipException(""data starting at "" + start + "" is in unknown format"");
/*     */     }
/*     */ 
/*     */     
/* 151 */     ZipExtraField[] result = new ZipExtraField[v.size()];
/* 152 */     v.copyInto((Object[])result);
/* 153 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeLocalFileDataData(ZipExtraField[] data) {
/* 162 */     int sum = 4 * data.length;
/* 163 */     for (int i = 0; i < data.length; i++) {
/* 164 */       sum += data[i].getLocalFileDataLength().getValue();
/*     */     }
/* 166 */     byte[] result = new byte[sum];
/* 167 */     int start = 0;
/* 168 */     for (int i = 0; i < data.length; i++) {
/* 169 */       System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2);
/*     */       
/* 171 */       System.arraycopy(data[i].getLocalFileDataLength().getBytes(), 0, result, start + 2, 2);
/*     */       
/* 173 */       byte[] local = data[i].getLocalFileDataData();
/* 174 */       System.arraycopy(local, 0, result, start + 4, local.length);
/* 175 */       start += local.length + 4;
/*     */     } 
/* 177 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) {
/* 186 */     int sum = 4 * data.length;
/* 187 */     for (int i = 0; i < data.length; i++) {
/* 188 */       sum += data[i].getCentralDirectoryLength().getValue();
/*     */     }
/* 190 */     byte[] result = new byte[sum];
/* 191 */     int start = 0;
/* 192 */     for (int i = 0; i < data.length; i++) {
/* 193 */       System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2);
/*     */       
/* 195 */       System.arraycopy(data[i].getCentralDirectoryLength().getBytes(), 0, result, start + 2, 2);
/*     */       
/* 197 */       byte[] local = data[i].getCentralDirectoryData();
/* 198 */       System.arraycopy(local, 0, result, start + 4, local.length);
/* 199 */       start += local.length + 4;
/*     */     } 
/* 201 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ExtraFieldUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnixStat,"package org.apache.tools.zip;
public interface UnixStat {
  public static final int PERM_MASK = 4095;
  public static final int LINK_FLAG = 40960;
  public static final int FILE_FLAG = 32768;
  public static final int DIR_FLAG = 16384;
  public static final int DEFAULT_LINK_PERM = 511;
  public static final int DEFAULT_DIR_PERM = 493;
  public static final int DEFAULT_FILE_PERM = 420;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\UnixStat.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnrecognizedExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnrecognizedExtraField
/*     */   implements ZipExtraField
/*     */ {
/*     */   private ZipShort headerId;
/*     */   private byte[] localData;
/*     */   private byte[] centralData;
/*     */   
/*  77 */   public void setHeaderId(ZipShort headerId) { this.headerId = headerId; }
/*     */ 
/*     */ 
/*     */   
/*  81 */   public ZipShort getHeaderId() { return this.headerId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setLocalFileDataData(byte[] data) { this.localData = data; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public ZipShort getLocalFileDataLength() { return new ZipShort(this.localData.length); }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public byte[] getLocalFileDataData() { return this.localData; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setCentralDirectoryData(byte[] data) { this.centralData = data; }
/*     */ 
/*     */   
/*     */   public ZipShort getCentralDirectoryLength() {
/* 117 */     if (this.centralData != null) {
/* 118 */       return new ZipShort(this.centralData.length);
/*     */     }
/* 120 */     return getLocalFileDataLength();
/*     */   }
/*     */   
/*     */   public byte[] getCentralDirectoryData() {
/* 124 */     if (this.centralData != null) {
/* 125 */       return this.centralData;
/*     */     }
/* 127 */     return getLocalFileDataData();
/*     */   }
/*     */   
/*     */   public void parseFromLocalFileData(byte[] data, int offset, int length) {
/* 131 */     byte[] tmp = new byte[length];
/* 132 */     System.arraycopy(data, offset, tmp, 0, length);
/* 133 */     setLocalFileDataData(tmp);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\UnrecognizedExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipEntry,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipEntry
/*     */   extends ZipEntry
/*     */   implements Cloneable
/*     */ {
/*     */   private static final int PLATFORM_UNIX = 3;
/*     */   private static final int PLATFORM_FAT = 0;
/*  74 */   private int internalAttributes = 0;
/*  75 */   private int platform = 0;
/*  76 */   private long externalAttributes = 0L;
/*  77 */   private Vector extraFields = new Vector();
/*  78 */   private String name = null;
/*     */ 
/*     */   
/*     */   private Long compressedSize;
/*     */ 
/*     */   
/*     */   public ZipEntry(String name)
/*     */   {
/*  86 */     super(name);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 378 */     this.compressedSize = null; } public ZipEntry(ZipEntry entry) throws ZipException { super(entry.getName()); this.compressedSize = null; setComment(entry.getComment()); setMethod(entry.getMethod()); setTime(entry.getTime()); long size = entry.getSize(); if (size > 0L) setSize(size);  long cSize = entry.getCompressedSize(); if (cSize > 0L) setComprSize(cSize);  long crc = entry.getCrc(); if (crc > 0L) setCrc(crc);  byte[] extra = entry.getExtra(); if (extra != null) { setExtraFields(ExtraFieldUtils.parse(extra)); } else { setExtra(); }  } public ZipEntry(ZipEntry entry) throws ZipException { this(entry); setInternalAttributes(entry.getInternalAttributes()); setExternalAttributes(entry.getExternalAttributes()); setExtraFields(entry.getExtraFields()); } protected ZipEntry() { super(""""); this.compressedSize = null; }
/*     */   public Object clone() { try {
/*     */       ZipEntry e = (ZipEntry)super.clone(); e.setName(getName()); e.setComment(getComment()); e.setMethod(getMethod()); e.setTime(getTime()); long size = getSize(); if (size > 0L)
/*     */         e.setSize(size);  long cSize = getCompressedSize(); if (cSize > 0L)
/*     */         e.setComprSize(cSize);  long crc = getCrc(); if (crc > 0L)
/*     */         e.setCrc(crc);  e.extraFields = (Vector)this.extraFields.clone(); e.setInternalAttributes(getInternalAttributes());
/*     */       e.setExternalAttributes(getExternalAttributes());
/*     */       e.setExtraFields(getExtraFields());
/*     */       return e;
/*     */     } catch (Throwable t) {
/*     */       return null;
/* 389 */     }  } public int getInternalAttributes() { return this.internalAttributes; } public void setInternalAttributes(int value) { this.internalAttributes = value; } public long getExternalAttributes() { return this.externalAttributes; } public void setComprSize(long size) { if (haveSetCompressedSize()) {
/* 390 */       performSetCompressedSize(this, size);
/*     */     } else {
/* 392 */       this.compressedSize = new Long(size);
/*     */     }  }
/*     */   public void setExternalAttributes(long value) { this.externalAttributes = value; }
/*     */   public void setUnixMode(int mode) { setExternalAttributes((mode << 16 | (((mode & 0x80) == 0) ? 1 : 0) | (isDirectory() ? 16 : 0))); this.platform = 3; }
/*     */   public int getUnixMode() { return (int)(getExternalAttributes() >> 16L & 0xFFFFL); }
/*     */   public int getPlatform() { return this.platform; } protected void setPlatform(int platform) { this.platform = platform; } public void setExtraFields(ZipExtraField[] fields) { this.extraFields.removeAllElements(); for (int i = 0; i < fields.length; i++)
/*     */       this.extraFields.addElement(fields[i]);  setExtra(); } public ZipExtraField[] getExtraFields() { ZipExtraField[] result = new ZipExtraField[this.extraFields.size()]; this.extraFields.copyInto((Object[])result); return result; } public void addExtraField(ZipExtraField ze) { ZipShort type = ze.getHeaderId(); boolean done = false; for (int i = 0; !done && i < this.extraFields.size(); i++) { if (((ZipExtraField)this.extraFields.elementAt(i)).getHeaderId().equals(type)) {
/*     */         this.extraFields.setElementAt(ze, i); done = true;
/*     */       }  }
/*     */      if (!done)
/* 402 */       this.extraFields.addElement(ze);  setExtra(); } public long getCompressedSize() { if (this.compressedSize != null)
/*     */     {
/* 404 */       return this.compressedSize.longValue();
/*     */     }
/* 406 */     return super.getCompressedSize(); } public void removeExtraField(ZipShort type) { boolean done = false; for (int i = 0; !done && i < this.extraFields.size(); i++) { if (((ZipExtraField)this.extraFields.elementAt(i)).getHeaderId().equals(type)) { this.extraFields.removeElementAt(i); done = true; }  }
/*     */      if (!done)
/*     */       throw new NoSuchElementException();  setExtra(); } public void setExtra(byte[] extra) throws RuntimeException { try { setExtraFields(ExtraFieldUtils.parse(extra)); }
/*     */     catch (Exception e) { throw new RuntimeException(e.getMessage()); }
/*     */      } protected void setExtra() { super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields())); }
/*     */   public byte[] getLocalFileDataExtra() { byte[] extra = getExtra(); return (extra != null) ? extra : new byte[0]; }
/*     */   public byte[] getCentralDirectoryExtra() { return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields()); }
/* 413 */   public String getName() { return (this.name == null) ? super.getName() : this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 420 */   public boolean isDirectory() { return getName().endsWith(""/""); }
/*     */ 
/*     */ 
/*     */   
/* 424 */   protected void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 432 */   private static Method setCompressedSizeMethod = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 438 */   private static Object lockReflection = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean triedToGetMethod = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean haveSetCompressedSize() {
/* 452 */     checkSCS();
/* 453 */     return (setCompressedSizeMethod != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void performSetCompressedSize(ZipEntry ze, long size) {
/* 462 */     Long[] s = { new Long(size) };
/*     */     try {
/* 464 */       setCompressedSizeMethod.invoke(ze, (Object[])s);
/*     */     } catch (InvocationTargetException ite) {
/* 466 */       Throwable nested = ite.getTargetException();
/* 467 */       throw new RuntimeException(""Exception setting the compressed size of "" + ze + "": "" + nested.getMessage());
/*     */     }
/*     */     catch (Throwable other) {
/*     */       
/* 471 */       throw new RuntimeException(""Exception setting the compressed size of "" + ze + "": "" + other.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void checkSCS() {
/* 483 */     if (!triedToGetMethod)
/* 484 */       synchronized (lockReflection) {
/* 485 */         triedToGetMethod = true;
/*     */         try {
/* 487 */           setCompressedSizeMethod = ZipEntry.class.getMethod(""setCompressedSize"", new Class[] { long.class });
/*     */         
/*     */         }
/* 490 */         catch (NoSuchMethodException nse) {}
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipExtraField,"package org.apache.tools.zip;
import java.util.zip.ZipException;
public interface ZipExtraField {
  ZipShort getHeaderId();
  ZipShort getLocalFileDataLength();
  ZipShort getCentralDirectoryLength();
  byte[] getLocalFileDataData();
  byte[] getCentralDirectoryData();
  void parseFromLocalFileData(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws ZipException;
}
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipFile,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.RandomAccessFile;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.zip.Inflater;
/*     */ import java.util.zip.InflaterInputStream;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipFile
/*     */ {
/* 105 */   private Hashtable entries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   private Hashtable nameMap = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   private Hashtable dataOffsets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   private String encoding = null;
/*     */ 
/*     */   
/*     */   private RandomAccessFile archive;
/*     */ 
/*     */   
/*     */   private static final int CFH_LEN = 42;
/*     */ 
/*     */   
/*     */   private static final int MIN_EOCD_SIZE = 22;
/*     */   
/*     */   private static final int CFD_LOCATOR_OFFSET = 16;
/*     */   
/*     */   private static final long LFH_OFFSET_FOR_FILENAME_LENGTH = 26L;
/*     */ 
/*     */   
/* 140 */   public ZipFile(File f) throws IOException { this(f, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   public ZipFile(String name) throws IOException { this(new File(name), null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public ZipFile(String name, String encoding) throws IOException { this(new File(name), encoding); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipFile(File f, String encoding) throws IOException {
/* 178 */     this.encoding = encoding;
/* 179 */     this.archive = new RandomAccessFile(f, ""r"");
/* 180 */     populateFromCentralDirectory();
/* 181 */     resolveLocalFileHeaderData();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void close() throws IOException { this.archive.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public Enumeration getEntries() { return this.entries.keys(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 218 */   public ZipEntry getEntry(String name) { return (ZipEntry)this.nameMap.get(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public InputStream getInputStream(ZipEntry ze) throws IOException, ZipException {
/* 228 */     Long start = (Long)this.dataOffsets.get(ze);
/* 229 */     if (start == null) {
/* 230 */       return null;
/*     */     }
/* 232 */     BoundedInputStream bis = new BoundedInputStream(this, start.longValue(), ze.getCompressedSize());
/*     */     
/* 234 */     switch (ze.getMethod()) {
/*     */       case 0:
/* 236 */         return bis;
/*     */       case 8:
/* 238 */         bis.addDummy();
/* 239 */         return new InflaterInputStream(bis, new Inflater(true));
/*     */     } 
/* 241 */     throw new ZipException(""Found unsupported compression method "" + ze.getMethod());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void populateFromCentralDirectory() throws IOException {
/* 274 */     positionAtCentralDirectory();
/*     */     
/* 276 */     byte[] cfh = new byte[42];
/*     */     
/* 278 */     byte[] signatureBytes = new byte[4];
/* 279 */     this.archive.readFully(signatureBytes);
/* 280 */     ZipLong sig = new ZipLong(signatureBytes);
/* 281 */     while (sig.equals(ZipOutputStream.CFH_SIG)) {
/* 282 */       this.archive.readFully(cfh);
/* 283 */       int off = 0;
/* 284 */       ZipEntry ze = new ZipEntry();
/*     */       
/* 286 */       ZipShort versionMadeBy = new ZipShort(cfh, off);
/* 287 */       off += 2;
/* 288 */       ze.setPlatform(versionMadeBy.getValue() >> 8 & 0xF);
/*     */       
/* 290 */       off += 4;
/*     */       
/* 292 */       ze.setMethod((new ZipShort(cfh, off)).getValue());
/* 293 */       off += 2;
/*     */       
/* 295 */       ze.setTime(fromDosTime(new ZipLong(cfh, off)).getTime());
/* 296 */       off += 4;
/*     */       
/* 298 */       ze.setCrc((new ZipLong(cfh, off)).getValue());
/* 299 */       off += 4;
/*     */       
/* 301 */       ze.setCompressedSize((new ZipLong(cfh, off)).getValue());
/* 302 */       off += 4;
/*     */       
/* 304 */       ze.setSize((new ZipLong(cfh, off)).getValue());
/* 305 */       off += 4;
/*     */       
/* 307 */       int fileNameLen = (new ZipShort(cfh, off)).getValue();
/* 308 */       off += 2;
/*     */       
/* 310 */       int extraLen = (new ZipShort(cfh, off)).getValue();
/* 311 */       off += 2;
/*     */       
/* 313 */       int commentLen = (new ZipShort(cfh, off)).getValue();
/* 314 */       off += 2;
/*     */       
/* 316 */       off += 2;
/*     */       
/* 318 */       ze.setInternalAttributes((new ZipShort(cfh, off)).getValue());
/* 319 */       off += 2;
/*     */       
/* 321 */       ze.setExternalAttributes((new ZipLong(cfh, off)).getValue());
/* 322 */       off += 4;
/*     */ 
/*     */       
/* 325 */       this.entries.put(ze, new Long((new ZipLong(cfh, off)).getValue()));
/*     */       
/* 327 */       byte[] fileName = new byte[fileNameLen];
/* 328 */       this.archive.readFully(fileName);
/* 329 */       ze.setName(getString(fileName));
/*     */       
/* 331 */       this.nameMap.put(ze.getName(), ze);
/*     */       
/* 333 */       this.archive.skipBytes(extraLen);
/*     */       
/* 335 */       byte[] comment = new byte[commentLen];
/* 336 */       this.archive.readFully(comment);
/* 337 */       ze.setComment(getString(comment));
/*     */       
/* 339 */       this.archive.readFully(signatureBytes);
/* 340 */       sig = new ZipLong(signatureBytes);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void positionAtCentralDirectory() throws IOException {
/* 377 */     long off = this.archive.length() - 22L;
/* 378 */     this.archive.seek(off);
/* 379 */     byte[] sig = ZipOutputStream.EOCD_SIG.getBytes();
/* 380 */     int curr = this.archive.read();
/* 381 */     boolean found = false;
/* 382 */     while (curr != -1) {
/* 383 */       if (curr == sig[0]) {
/* 384 */         curr = this.archive.read();
/* 385 */         if (curr == sig[1]) {
/* 386 */           curr = this.archive.read();
/* 387 */           if (curr == sig[2]) {
/* 388 */             curr = this.archive.read();
/* 389 */             if (curr == sig[3]) {
/* 390 */               found = true;
/*     */               break;
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/* 396 */       this.archive.seek(--off);
/* 397 */       curr = this.archive.read();
/*     */     } 
/* 399 */     if (!found) {
/* 400 */       throw new ZipException(""archive is not a ZIP archive"");
/*     */     }
/* 402 */     this.archive.seek(off + 16L);
/* 403 */     byte[] cfdOffset = new byte[4];
/* 404 */     this.archive.readFully(cfdOffset);
/* 405 */     this.archive.seek((new ZipLong(cfdOffset)).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveLocalFileHeaderData() throws IOException {
/* 432 */     Enumeration e = getEntries();
/* 433 */     while (e.hasMoreElements()) {
/* 434 */       ZipEntry ze = e.nextElement();
/* 435 */       long offset = ((Long)this.entries.get(ze)).longValue();
/* 436 */       this.archive.seek(offset + 26L);
/* 437 */       byte[] b = new byte[2];
/* 438 */       this.archive.readFully(b);
/* 439 */       int fileNameLen = (new ZipShort(b)).getValue();
/* 440 */       this.archive.readFully(b);
/* 441 */       int extraFieldLen = (new ZipShort(b)).getValue();
/* 442 */       this.archive.skipBytes(fileNameLen);
/* 443 */       byte[] localExtraData = new byte[extraFieldLen];
/* 444 */       this.archive.readFully(localExtraData);
/* 445 */       ze.setExtra(localExtraData);
/* 446 */       this.dataOffsets.put(ze, new Long(offset + 26L + 2L + 2L + fileNameLen + extraFieldLen));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static Date fromDosTime(ZipLong l) {
/* 459 */     long dosTime = l.getValue();
/* 460 */     Calendar cal = Calendar.getInstance();
/* 461 */     cal.set(1, (int)(dosTime >> 25L & 0x7FL) + 1980);
/* 462 */     cal.set(2, (int)(dosTime >> 21L & 0xFL) - 1);
/* 463 */     cal.set(5, (int)(dosTime >> 16L) & 0x1F);
/* 464 */     cal.set(11, (int)(dosTime >> 11L) & 0x1F);
/* 465 */     cal.set(12, (int)(dosTime >> 5L) & 0x3F);
/* 466 */     cal.set(13, (int)(dosTime << 1L) & 0x3E);
/* 467 */     return cal.getTime();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getString(byte[] bytes) throws ZipException {
/* 479 */     if (this.encoding == null) {
/* 480 */       return new String(bytes);
/*     */     }
/*     */     try {
/* 483 */       return new String(bytes, this.encoding);
/*     */     } catch (UnsupportedEncodingException uee) {
/* 485 */       throw new ZipException(uee.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private class BoundedInputStream
/*     */     extends InputStream
/*     */   {
/*     */     private long remaining;
/*     */     
/*     */     private long loc;
/*     */     private boolean addDummyByte;
/*     */     private final ZipFile this$0;
/*     */     
/*     */     BoundedInputStream(ZipFile this$0, long start, long remaining) {
/* 500 */       this.this$0 = this$0; this.addDummyByte = false;
/* 501 */       this.remaining = remaining;
/* 502 */       this.loc = start;
/*     */     }
/*     */     
/*     */     public int read() throws IOException {
/* 506 */       if (this.remaining-- <= 0L) {
/* 507 */         if (this.addDummyByte) {
/* 508 */           this.addDummyByte = false;
/* 509 */           return 0;
/*     */         } 
/* 511 */         return -1;
/*     */       } 
/* 513 */       synchronized (this.this$0.archive) {
/* 514 */         this.this$0.archive.seek(this.loc++);
/* 515 */         return this.this$0.archive.read();
/*     */       } 
/*     */     }
/*     */     
/*     */     public int read(byte[] b, int off, int len) throws IOException {
/* 520 */       if (this.remaining <= 0L) {
/* 521 */         if (this.addDummyByte) {
/* 522 */           this.addDummyByte = false;
/* 523 */           b[off] = 0;
/* 524 */           return 1;
/*     */         } 
/* 526 */         return -1;
/*     */       } 
/*     */       
/* 529 */       if (len <= 0) {
/* 530 */         return 0;
/*     */       }
/*     */       
/* 533 */       if (len > this.remaining) {
/* 534 */         len = (int)this.remaining;
/*     */       }
/* 536 */       int ret = -1;
/* 537 */       synchronized (this.this$0.archive) {
/* 538 */         this.this$0.archive.seek(this.loc);
/* 539 */         ret = this.this$0.archive.read(b, off, len);
/*     */       } 
/* 541 */       if (ret > 0) {
/* 542 */         this.loc += ret;
/* 543 */         this.remaining -= ret;
/*     */       } 
/* 545 */       return ret;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 553 */     void addDummy() { this.addDummyByte = true; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipLong,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ZipLong
/*     */   implements Cloneable
/*     */ {
/*     */   private long value;
/*     */   
/*  74 */   public ZipLong(long value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipLong(byte[] bytes) { this(bytes, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipLong(byte[] bytes, int offset) {
/*  92 */     this.value = (bytes[offset + 3] << 24) & 0xFF000000L;
/*  93 */     this.value += (bytes[offset + 2] << 16 & 0xFF0000);
/*  94 */     this.value += (bytes[offset + 1] << 8 & 0xFF00);
/*  95 */     this.value += (bytes[offset] & 0xFF);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 104 */     byte[] result = new byte[4];
/* 105 */     result[0] = (byte)(int)(this.value & 0xFFL);
/* 106 */     result[1] = (byte)(int)((this.value & 0xFF00L) >> 8L);
/* 107 */     result[2] = (byte)(int)((this.value & 0xFF0000L) >> 16L);
/* 108 */     result[3] = (byte)(int)((this.value & 0xFF000000L) >> 24L);
/* 109 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public long getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object o) {
/* 127 */     if (o == null || !(o instanceof ZipLong)) {
/* 128 */       return false;
/*     */     }
/* 130 */     return (this.value == ((ZipLong)o).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public int hashCode() { return (int)this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipLong.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipOutputStream,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FilterOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.RandomAccessFile;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Date;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.Deflater;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipOutputStream
/*     */   extends FilterOutputStream
/*     */ {
/*     */   private ZipEntry entry;
/* 108 */   private String comment = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   private int level = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean hasCompressionLevelChanged = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   private int method = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   private Vector entries = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   private long written = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   private long dataStart = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   private long localDataStart = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   private ZipLong cdOffset = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   private ZipLong cdLength = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   private static final byte[] ZERO = new byte[] { 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   private static final byte[] LZERO = new byte[] { 0, 0, 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   private Hashtable offsets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   protected Deflater def = new Deflater(-1, true);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 236 */   protected byte[] buf = new byte[512];
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 243 */   private RandomAccessFile raf = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int DEFLATED = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int STORED = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 265 */   public ZipOutputStream(OutputStream out) { super(out); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipOutputStream(File file) throws IOException {
/* 275 */     super(null);
/*     */     
/*     */     try {
/* 278 */       this.raf = new RandomAccessFile(file, ""rw"");
/* 279 */       this.raf.setLength(0L);
/*     */     } catch (IOException e) {
/* 281 */       if (this.raf != null) {
/*     */         try {
/* 283 */           this.raf.close();
/* 284 */         } catch (IOException inner) {}
/*     */ 
/*     */         
/* 287 */         this.raf = null;
/*     */       } 
/* 289 */       this.out = new FileOutputStream(file);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 304 */   public boolean isSeekable() { return (this.raf != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 317 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 328 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void finish() throws IOException {
/* 338 */     closeEntry();
/* 339 */     this.cdOffset = new ZipLong(this.written);
/* 340 */     for (int i = 0; i < this.entries.size(); i++) {
/* 341 */       writeCentralFileHeader(this.entries.elementAt(i));
/*     */     }
/* 343 */     this.cdLength = new ZipLong(this.written - this.cdOffset.getValue());
/* 344 */     writeCentralDirectoryEnd();
/* 345 */     this.offsets.clear();
/* 346 */     this.entries.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 355 */     if (this.entry == null) {
/*     */       return;
/*     */     }
/*     */     
/* 359 */     long realCrc = this.crc.getValue();
/* 360 */     this.crc.reset();
/*     */     
/* 362 */     if (this.entry.getMethod() == 8) {
/* 363 */       this.def.finish();
/* 364 */       while (!this.def.finished()) {
/* 365 */         deflate();
/*     */       }
/*     */       
/* 368 */       this.entry.setSize(this.def.getTotalIn());
/* 369 */       this.entry.setComprSize(this.def.getTotalOut());
/* 370 */       this.entry.setCrc(realCrc);
/*     */       
/* 372 */       this.def.reset();
/*     */       
/* 374 */       this.written += this.entry.getCompressedSize();
/* 375 */     } else if (this.raf == null) {
/* 376 */       if (this.entry.getCrc() != realCrc) {
/* 377 */         throw new ZipException(""bad CRC checksum for entry "" + this.entry.getName() + "": "" + Long.toHexString(this.entry.getCrc()) + "" instead of "" + Long.toHexString(realCrc));
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 384 */       if (this.entry.getSize() != this.written - this.dataStart) {
/* 385 */         throw new ZipException(""bad size for entry "" + this.entry.getName() + "": "" + this.entry.getSize() + "" instead of "" + (this.written - this.dataStart));
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 392 */       long size = this.written - this.dataStart;
/*     */       
/* 394 */       this.entry.setSize(size);
/* 395 */       this.entry.setComprSize(size);
/* 396 */       this.entry.setCrc(realCrc);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 401 */     if (this.raf != null) {
/* 402 */       long save = this.raf.getFilePointer();
/*     */       
/* 404 */       this.raf.seek(this.localDataStart);
/* 405 */       writeOut((new ZipLong(this.entry.getCrc())).getBytes());
/* 406 */       writeOut((new ZipLong(this.entry.getCompressedSize())).getBytes());
/* 407 */       writeOut((new ZipLong(this.entry.getSize())).getBytes());
/* 408 */       this.raf.seek(save);
/*     */     } 
/*     */     
/* 411 */     writeDataDescriptor(this.entry);
/* 412 */     this.entry = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(ZipEntry ze) throws IOException {
/* 421 */     closeEntry();
/*     */     
/* 423 */     this.entry = ze;
/* 424 */     this.entries.addElement(this.entry);
/*     */     
/* 426 */     if (this.entry.getMethod() == -1) {
/* 427 */       this.entry.setMethod(this.method);
/*     */     }
/*     */     
/* 430 */     if (this.entry.getTime() == -1L) {
/* 431 */       this.entry.setTime(System.currentTimeMillis());
/*     */     }
/*     */ 
/*     */     
/* 435 */     if (this.entry.getMethod() == 0 && this.raf == null) {
/* 436 */       if (this.entry.getSize() == -1L) {
/* 437 */         throw new ZipException(""uncompressed size is required for STORED method when not writing to a file"");
/*     */       }
/*     */ 
/*     */       
/* 441 */       if (this.entry.getCrc() == -1L) {
/* 442 */         throw new ZipException(""crc checksum is required for STORED method when not writing to a file"");
/*     */       }
/*     */       
/* 445 */       this.entry.setComprSize(this.entry.getSize());
/*     */     } 
/*     */     
/* 448 */     if (this.entry.getMethod() == 8 && this.hasCompressionLevelChanged) {
/* 449 */       this.def.setLevel(this.level);
/* 450 */       this.hasCompressionLevelChanged = false;
/*     */     } 
/* 452 */     writeLocalFileHeader(this.entry);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 461 */   public void setComment(String comment) { this.comment = comment; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLevel(int level) {
/* 472 */     this.hasCompressionLevelChanged = (this.level != level);
/* 473 */     this.level = level;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 484 */   public void setMethod(int method) { this.method = method; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] b, int offset, int length) throws IOException {
/* 491 */     if (this.entry.getMethod() == 8) {
/* 492 */       if (length > 0 && 
/* 493 */         !this.def.finished()) {
/* 494 */         this.def.setInput(b, offset, length);
/* 495 */         while (!this.def.needsInput()) {
/* 496 */           deflate();
/*     */         }
/*     */       } 
/*     */     } else {
/*     */       
/* 501 */       writeOut(b, offset, length);
/* 502 */       this.written += length;
/*     */     } 
/* 504 */     this.crc.update(b, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int b) throws IOException {
/* 515 */     byte[] buf = new byte[1];
/* 516 */     buf[0] = (byte)(b & 0xFF);
/* 517 */     write(buf, 0, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 528 */     finish();
/*     */     
/* 530 */     if (this.raf != null) {
/* 531 */       this.raf.close();
/*     */     }
/* 533 */     if (this.out != null) {
/* 534 */       this.out.close();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void flush() throws IOException {
/* 546 */     if (this.out == null) {
/* 547 */       this.out.flush();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 559 */   protected static final ZipLong LFH_SIG = new ZipLong(67324752L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 565 */   protected static final ZipLong DD_SIG = new ZipLong(134695760L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 571 */   protected static final ZipLong CFH_SIG = new ZipLong(33639248L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   protected static final ZipLong EOCD_SIG = new ZipLong(101010256L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void deflate() throws IOException {
/* 585 */     int len = this.def.deflate(this.buf, 0, this.buf.length);
/* 586 */     if (len > 0) {
/* 587 */       writeOut(this.buf, 0, len);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeLocalFileHeader(ZipEntry ze) throws IOException {
/* 597 */     this.offsets.put(ze, new ZipLong(this.written));
/*     */     
/* 599 */     writeOut(LFH_SIG.getBytes());
/* 600 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */     
/* 604 */     if (ze.getMethod() == 8 && this.raf == null) {
/*     */ 
/*     */       
/* 607 */       writeOut((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 610 */       writeOut((new ZipShort(8)).getBytes());
/*     */     } else {
/* 612 */       writeOut((new ZipShort(10)).getBytes());
/* 613 */       writeOut(ZERO);
/*     */     } 
/* 615 */     this.written += 4L;
/*     */ 
/*     */     
/* 618 */     writeOut((new ZipShort(ze.getMethod())).getBytes());
/* 619 */     this.written += 2L;
/*     */ 
/*     */     
/* 622 */     writeOut(toDosTime(new Date(ze.getTime())).getBytes());
/* 623 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 628 */     this.localDataStart = this.written;
/* 629 */     if (ze.getMethod() == 8 || this.raf != null) {
/* 630 */       writeOut(LZERO);
/* 631 */       writeOut(LZERO);
/* 632 */       writeOut(LZERO);
/*     */     } else {
/* 634 */       writeOut((new ZipLong(ze.getCrc())).getBytes());
/* 635 */       writeOut((new ZipLong(ze.getSize())).getBytes());
/* 636 */       writeOut((new ZipLong(ze.getSize())).getBytes());
/*     */     } 
/* 638 */     this.written += 12L;
/*     */ 
/*     */     
/* 641 */     byte[] name = getBytes(ze.getName());
/* 642 */     writeOut((new ZipShort(name.length)).getBytes());
/* 643 */     this.written += 2L;
/*     */ 
/*     */     
/* 646 */     byte[] extra = ze.getLocalFileDataExtra();
/* 647 */     writeOut((new ZipShort(extra.length)).getBytes());
/* 648 */     this.written += 2L;
/*     */ 
/*     */     
/* 651 */     writeOut(name);
/* 652 */     this.written += name.length;
/*     */ 
/*     */     
/* 655 */     writeOut(extra);
/* 656 */     this.written += extra.length;
/*     */     
/* 658 */     this.dataStart = this.written;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeDataDescriptor(ZipEntry ze) throws IOException {
/* 667 */     if (ze.getMethod() != 8 || this.raf != null) {
/*     */       return;
/*     */     }
/* 670 */     writeOut(DD_SIG.getBytes());
/* 671 */     writeOut((new ZipLong(this.entry.getCrc())).getBytes());
/* 672 */     writeOut((new ZipLong(this.entry.getCompressedSize())).getBytes());
/* 673 */     writeOut((new ZipLong(this.entry.getSize())).getBytes());
/* 674 */     this.written += 16L;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralFileHeader(ZipEntry ze) throws IOException {
/* 683 */     writeOut(CFH_SIG.getBytes());
/* 684 */     this.written += 4L;
/*     */ 
/*     */     
/* 687 */     writeOut((new ZipShort(ze.getPlatform() << 8 | 0x14)).getBytes());
/* 688 */     this.written += 2L;
/*     */ 
/*     */ 
/*     */     
/* 692 */     if (ze.getMethod() == 8 && this.raf == null) {
/*     */ 
/*     */       
/* 695 */       writeOut((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 698 */       writeOut((new ZipShort(8)).getBytes());
/*     */     } else {
/* 700 */       writeOut((new ZipShort(10)).getBytes());
/* 701 */       writeOut(ZERO);
/*     */     } 
/* 703 */     this.written += 4L;
/*     */ 
/*     */     
/* 706 */     writeOut((new ZipShort(ze.getMethod())).getBytes());
/* 707 */     this.written += 2L;
/*     */ 
/*     */     
/* 710 */     writeOut(toDosTime(new Date(ze.getTime())).getBytes());
/* 711 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 716 */     writeOut((new ZipLong(ze.getCrc())).getBytes());
/* 717 */     writeOut((new ZipLong(ze.getCompressedSize())).getBytes());
/* 718 */     writeOut((new ZipLong(ze.getSize())).getBytes());
/* 719 */     this.written += 12L;
/*     */ 
/*     */     
/* 722 */     byte[] name = getBytes(ze.getName());
/* 723 */     writeOut((new ZipShort(name.length)).getBytes());
/* 724 */     this.written += 2L;
/*     */ 
/*     */     
/* 727 */     byte[] extra = ze.getCentralDirectoryExtra();
/* 728 */     writeOut((new ZipShort(extra.length)).getBytes());
/* 729 */     this.written += 2L;
/*     */ 
/*     */     
/* 732 */     String comm = ze.getComment();
/* 733 */     if (comm == null) {
/* 734 */       comm = """";
/*     */     }
/* 736 */     byte[] comment = getBytes(comm);
/* 737 */     writeOut((new ZipShort(comment.length)).getBytes());
/* 738 */     this.written += 2L;
/*     */ 
/*     */     
/* 741 */     writeOut(ZERO);
/* 742 */     this.written += 2L;
/*     */ 
/*     */     
/* 745 */     writeOut((new ZipShort(ze.getInternalAttributes())).getBytes());
/* 746 */     this.written += 2L;
/*     */ 
/*     */     
/* 749 */     writeOut((new ZipLong(ze.getExternalAttributes())).getBytes());
/* 750 */     this.written += 4L;
/*     */ 
/*     */     
/* 753 */     writeOut(((ZipLong)this.offsets.get(ze)).getBytes());
/* 754 */     this.written += 4L;
/*     */ 
/*     */     
/* 757 */     writeOut(name);
/* 758 */     this.written += name.length;
/*     */ 
/*     */     
/* 761 */     writeOut(extra);
/* 762 */     this.written += extra.length;
/*     */ 
/*     */     
/* 765 */     writeOut(comment);
/* 766 */     this.written += comment.length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralDirectoryEnd() throws IOException {
/* 775 */     writeOut(EOCD_SIG.getBytes());
/*     */ 
/*     */     
/* 778 */     writeOut(ZERO);
/* 779 */     writeOut(ZERO);
/*     */ 
/*     */     
/* 782 */     byte[] num = (new ZipShort(this.entries.size())).getBytes();
/* 783 */     writeOut(num);
/* 784 */     writeOut(num);
/*     */ 
/*     */     
/* 787 */     writeOut(this.cdLength.getBytes());
/* 788 */     writeOut(this.cdOffset.getBytes());
/*     */ 
/*     */     
/* 791 */     byte[] data = getBytes(this.comment);
/* 792 */     writeOut((new ZipShort(data.length)).getBytes());
/* 793 */     writeOut(data);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 801 */   private static final ZipLong DOS_TIME_MIN = new ZipLong(8448L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static ZipLong toDosTime(Date time) {
/* 811 */     int year = time.getYear() + 1900;
/* 812 */     int month = time.getMonth() + 1;
/* 813 */     if (year < 1980) {
/* 814 */       return DOS_TIME_MIN;
/*     */     }
/* 816 */     long value = (year - 1980 << 25 | month << 21 | time.getDate() << 16 | time.getHours() << 11 | time.getMinutes() << 5 | time.getSeconds() >> 1);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 823 */     byte[] result = new byte[4];
/* 824 */     result[0] = (byte)(int)(value & 0xFFL);
/* 825 */     result[1] = (byte)(int)((value & 0xFF00L) >> 8L);
/* 826 */     result[2] = (byte)(int)((value & 0xFF0000L) >> 16L);
/* 827 */     result[3] = (byte)(int)((value & 0xFF000000L) >> 24L);
/* 828 */     return new ZipLong(result);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected byte[] getBytes(String name) throws ZipException {
/* 838 */     if (this.encoding == null) {
/* 839 */       return name.getBytes();
/*     */     }
/*     */     try {
/* 842 */       return name.getBytes(this.encoding);
/*     */     } catch (UnsupportedEncodingException uee) {
/* 844 */       throw new ZipException(uee.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 855 */   protected final void writeOut(byte[] data) throws IOException { writeOut(data, 0, data.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void writeOut(byte[] data, int offset, int length) throws IOException {
/* 865 */     if (this.raf != null) {
/* 866 */       this.raf.write(data, offset, length);
/*     */     } else {
/* 868 */       this.out.write(data, offset, length);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipShort,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ZipShort
/*     */   implements Cloneable
/*     */ {
/*     */   private int value;
/*     */   
/*  74 */   public ZipShort(int value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipShort(byte[] bytes) { this(bytes, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipShort(byte[] bytes, int offset) {
/*  92 */     this.value = bytes[offset + 1] << 8 & 0xFF00;
/*  93 */     this.value += bytes[offset] & 0xFF;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 102 */     byte[] result = new byte[2];
/* 103 */     result[0] = (byte)(this.value & 0xFF);
/* 104 */     result[1] = (byte)((this.value & 0xFF00) >> 8);
/* 105 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public int getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object o) {
/* 123 */     if (o == null || !(o instanceof ZipShort)) {
/* 124 */       return false;
/*     */     }
/* 126 */     return (this.value == ((ZipShort)o).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public int hashCode() { return this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.6.jar!\org\apache\tools\zip\ZipShort.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
