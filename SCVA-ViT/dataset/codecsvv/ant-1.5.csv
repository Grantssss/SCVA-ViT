metric_name,file
org.apache.tools.ant.AntClassLoader,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.ByteArrayOutputStream;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Constructor;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Method;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Vector;
/*      */ import java.util.zip.ZipEntry;
/*      */ import java.util.zip.ZipFile;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ import org.apache.tools.ant.util.LoaderUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class AntClassLoader
/*      */   extends ClassLoader
/*      */   implements BuildListener
/*      */ {
/*      */   private static final int BUFFER_SIZE = 8192;
/*      */   
/*      */   private class ResourceEnumeration
/*      */     implements Enumeration
/*      */   {
/*      */     private String resourceName;
/*      */     private int pathElementsIndex;
/*      */     private URL nextResource;
/*      */     private final AntClassLoader this$0;
/*      */     
/*      */     ResourceEnumeration(AntClassLoader this$0, String name) {
/*  124 */       this.this$0 = this$0;
/*  125 */       this.resourceName = name;
/*  126 */       this.pathElementsIndex = 0;
/*  127 */       findNextResource();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  138 */     public boolean hasMoreElements() { return (this.nextResource != null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Object nextElement() {
/*  147 */       URL ret = this.nextResource;
/*  148 */       findNextResource();
/*  149 */       return ret;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void findNextResource() {
/*  159 */       URL url = null;
/*  160 */       while (this.pathElementsIndex < this.this$0.pathComponents.size() && url == null) {
/*      */         
/*      */         try {
/*  163 */           File pathComponent = this.this$0.pathComponents.elementAt(this.pathElementsIndex);
/*      */           
/*  165 */           url = this.this$0.getResourceURL(pathComponent, this.resourceName);
/*  166 */           this.pathElementsIndex++;
/*  167 */         } catch (BuildException e) {}
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  172 */       this.nextResource = url;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  185 */   private Vector pathComponents = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Project project;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean parentFirst = true;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  203 */   private Vector systemPackages = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  210 */   private Vector loaderPackages = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean ignoreBase = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  223 */   private ClassLoader parent = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  228 */   private Hashtable zipFiles = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  234 */   private ClassLoader savedContextLoader = null;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isContextLoaderSaved = false;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  244 */   private static Method getProtectionDomain = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  250 */   private static Method defineClassProtectionDomain = null;
/*      */   
/*      */   static Class array$B;
/*      */   
/*      */   static  {
/*      */     try {
/*  256 */       getProtectionDomain = Class.class.getMethod(""getProtectionDomain"", new Class[0]);
/*      */       
/*  258 */       Class protectionDomain = Class.forName(""java.security.ProtectionDomain"");
/*      */       
/*  260 */       Class[] args = { String.class, (array$B == null) ? (array$B = class$(""[B"")) : array$B, int.class, int.class, protectionDomain };
/*      */       
/*  262 */       defineClassProtectionDomain = ClassLoader.class.getDeclaredMethod(""defineClass"", args);
/*      */     }
/*  264 */     catch (Exception e) {}
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(Project project, Path classpath) {
/*  282 */     this.parent = AntClassLoader.class.getClassLoader();
/*  283 */     this.project = project;
/*  284 */     project.addBuildListener(this);
/*  285 */     if (classpath != null) {
/*  286 */       Path actualClasspath = classpath.concatSystemClasspath(""ignore"");
/*  287 */       String[] pathElements = actualClasspath.list();
/*  288 */       for (int i = 0; i < pathElements.length; i++) {
/*      */         try {
/*  290 */           addPathElement(pathElements[i]);
/*  291 */         } catch (BuildException e) {}
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(ClassLoader parent, Project project, Path classpath, boolean parentFirst) {
/*  317 */     this(project, classpath);
/*  318 */     if (parent != null) {
/*  319 */       this.parent = parent;
/*      */     }
/*  321 */     this.parentFirst = parentFirst;
/*      */ 
/*      */     
/*  324 */     addSystemPackageRoot(""java"");
/*  325 */     addSystemPackageRoot(""javax"");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  343 */   public AntClassLoader(Project project, Path classpath, boolean parentFirst) { this(null, project, classpath, parentFirst); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public AntClassLoader(ClassLoader parent, boolean parentFirst) {
/*  360 */     if (parent != null) {
/*  361 */       this.parent = parent;
/*      */     } else {
/*  363 */       parent = AntClassLoader.class.getClassLoader();
/*      */     } 
/*  365 */     this.project = null;
/*  366 */     this.parentFirst = parentFirst;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void log(String message, int priority) {
/*  378 */     if (this.project != null) {
/*  379 */       this.project.log(message, priority);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setThreadContextLoader() {
/*  391 */     if (this.isContextLoaderSaved) {
/*  392 */       throw new BuildException(""Context loader has not been reset"");
/*      */     }
/*  394 */     if (LoaderUtils.isContextLoaderAvailable()) {
/*  395 */       this.savedContextLoader = LoaderUtils.getContextClassLoader();
/*  396 */       ClassLoader loader = this;
/*  397 */       if (this.project != null && ""only"".equals(this.project.getProperty(""build.sysclasspath"")))
/*      */       {
/*  399 */         loader = getClass().getClassLoader();
/*      */       }
/*  401 */       LoaderUtils.setContextClassLoader(loader);
/*  402 */       this.isContextLoaderSaved = true;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void resetThreadContextLoader() {
/*  410 */     if (LoaderUtils.isContextLoaderAvailable() && this.isContextLoaderSaved) {
/*      */       
/*  412 */       LoaderUtils.setContextClassLoader(this.savedContextLoader);
/*  413 */       this.savedContextLoader = null;
/*  414 */       this.isContextLoaderSaved = false;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addPathElement(String pathElement) throws BuildException {
/*  429 */     File pathComponent = (this.project != null) ? this.project.resolveFile(pathElement) : new File(pathElement);
/*      */ 
/*      */     
/*  432 */     this.pathComponents.addElement(pathComponent);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getClasspath() {
/*  442 */     StringBuffer sb = new StringBuffer();
/*  443 */     boolean firstPass = true;
/*  444 */     Enumeration enum = this.pathComponents.elements();
/*  445 */     while (enum.hasMoreElements()) {
/*  446 */       if (!firstPass) {
/*  447 */         sb.append(System.getProperty(""path.separator""));
/*      */       } else {
/*  449 */         firstPass = false;
/*      */       } 
/*  451 */       sb.append(((File)enum.nextElement()).getAbsolutePath());
/*      */     } 
/*  453 */     return sb.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  466 */   public void setIsolated(boolean isolated) { this.ignoreBase = isolated; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static void initializeClass(Class theClass) {
/*  482 */     Constructor[] cons = (Constructor[])theClass.getDeclaredConstructors();
/*      */     
/*  484 */     if (cons != null && 
/*  485 */       cons.length > 0 && cons[0] != null) {
/*  486 */       String[] strs = new String[256];
/*      */       try {
/*  488 */         cons[0].newInstance((Object[])strs);
/*      */       
/*      */       }
/*  491 */       catch (Throwable t) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  519 */   public void addSystemPackageRoot(String packageRoot) { this.systemPackages.addElement(packageRoot + "".""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  532 */   public void addLoaderPackageRoot(String packageRoot) { this.loaderPackages.addElement(packageRoot + "".""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class forceLoadClass(String classname) throws ClassNotFoundException {
/*  552 */     log(""force loading "" + classname, 4);
/*      */     
/*  554 */     Class theClass = findLoadedClass(classname);
/*      */     
/*  556 */     if (theClass == null) {
/*  557 */       theClass = findClass(classname);
/*      */     }
/*      */     
/*  560 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class forceLoadSystemClass(String classname) throws ClassNotFoundException {
/*  581 */     log(""force system loading "" + classname, 4);
/*      */     
/*  583 */     Class theClass = findLoadedClass(classname);
/*      */     
/*  585 */     if (theClass == null) {
/*  586 */       theClass = findBaseClass(classname);
/*      */     }
/*      */     
/*  589 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public InputStream getResourceAsStream(String name) {
/*  603 */     InputStream resourceStream = null;
/*  604 */     if (isParentFirst(name)) {
/*  605 */       resourceStream = loadBaseResource(name);
/*  606 */       if (resourceStream != null) {
/*  607 */         log(""ResourceStream for "" + name + "" loaded from parent loader"", 4);
/*      */       }
/*      */       else {
/*      */         
/*  611 */         resourceStream = loadResource(name);
/*  612 */         if (resourceStream != null) {
/*  613 */           log(""ResourceStream for "" + name + "" loaded from ant loader"", 4);
/*      */         }
/*      */       } 
/*      */     } else {
/*      */       
/*  618 */       resourceStream = loadResource(name);
/*  619 */       if (resourceStream != null) {
/*  620 */         log(""ResourceStream for "" + name + "" loaded from ant loader"", 4);
/*      */       }
/*      */       else {
/*      */         
/*  624 */         resourceStream = loadBaseResource(name);
/*  625 */         if (resourceStream != null) {
/*  626 */           log(""ResourceStream for "" + name + "" loaded from parent loader"", 4);
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  632 */     if (resourceStream == null) {
/*  633 */       log(""Couldn't load ResourceStream for "" + name, 4);
/*      */     }
/*      */ 
/*      */     
/*  637 */     return resourceStream;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream loadResource(String name) {
/*  652 */     InputStream stream = null;
/*      */     
/*  654 */     Enumeration e = this.pathComponents.elements();
/*  655 */     while (e.hasMoreElements() && stream == null) {
/*  656 */       File pathComponent = e.nextElement();
/*  657 */       stream = getResourceStream(pathComponent, name);
/*      */     } 
/*  659 */     return stream;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream loadBaseResource(String name) {
/*  673 */     if (this.parent == null) {
/*  674 */       return ClassLoader.getSystemResourceAsStream(name);
/*      */     }
/*  676 */     return this.parent.getResourceAsStream(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private InputStream getResourceStream(File file, String resourceName) {
/*      */     try {
/*  694 */       if (!file.exists()) {
/*  695 */         return null;
/*      */       }
/*      */       
/*  698 */       if (file.isDirectory()) {
/*  699 */         File resource = new File(file, resourceName);
/*      */         
/*  701 */         if (resource.exists()) {
/*  702 */           return new FileInputStream(resource);
/*      */         }
/*      */       } else {
/*      */         
/*  706 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(file);
/*  707 */         if (zipFile == null) {
/*  708 */           zipFile = new ZipFile(file);
/*  709 */           this.zipFiles.put(file, zipFile);
/*      */         } 
/*  711 */         ZipEntry entry = zipFile.getEntry(resourceName);
/*  712 */         if (entry != null) {
/*  713 */           return zipFile.getInputStream(entry);
/*      */         }
/*      */       } 
/*      */     } catch (Exception e) {
/*  717 */       log(""Ignoring Exception "" + e.getClass().getName() + "": "" + e.getMessage() + "" reading resource "" + resourceName + "" from "" + file, 3);
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  722 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean isParentFirst(String resourceName) {
/*  745 */     boolean useParentFirst = this.parentFirst;
/*      */     
/*  747 */     for (Enumeration e = this.systemPackages.elements(); e.hasMoreElements(); ) {
/*  748 */       String packageName = e.nextElement();
/*  749 */       if (resourceName.startsWith(packageName)) {
/*  750 */         useParentFirst = true;
/*      */         
/*      */         break;
/*      */       } 
/*      */     } 
/*  755 */     for (Enumeration e = this.loaderPackages.elements(); e.hasMoreElements(); ) {
/*  756 */       String packageName = e.nextElement();
/*  757 */       if (resourceName.startsWith(packageName)) {
/*  758 */         useParentFirst = false;
/*      */         
/*      */         break;
/*      */       } 
/*      */     } 
/*  763 */     return useParentFirst;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public URL getResource(String name) {
/*  781 */     URL url = null;
/*  782 */     if (isParentFirst(name)) {
/*  783 */       url = (this.parent == null) ? super.getResource(name) : this.parent.getResource(name);
/*      */     }
/*      */ 
/*      */     
/*  787 */     if (url != null) {
/*  788 */       log(""Resource "" + name + "" loaded from parent loader"", 4);
/*      */     
/*      */     }
/*      */     else {
/*      */ 
/*      */       
/*  794 */       Enumeration e = this.pathComponents.elements();
/*  795 */       while (e.hasMoreElements() && url == null) {
/*  796 */         File pathComponent = e.nextElement();
/*  797 */         url = getResourceURL(pathComponent, name);
/*  798 */         if (url != null) {
/*  799 */           log(""Resource "" + name + "" loaded from ant loader"", 4);
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  806 */     if (url == null && !isParentFirst(name)) {
/*      */ 
/*      */       
/*  809 */       url = (this.parent == null) ? super.getResource(name) : this.parent.getResource(name);
/*      */       
/*  811 */       if (url != null) {
/*  812 */         log(""Resource "" + name + "" loaded from parent loader"", 4);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  817 */     if (url == null) {
/*  818 */       log(""Couldn't load Resource "" + name, 4);
/*      */     }
/*      */     
/*  821 */     return url;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  834 */   protected Enumeration findResources(String name) throws IOException { return new ResourceEnumeration(this, name); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private URL getResourceURL(File file, String resourceName) {
/*      */     try {
/*  851 */       if (!file.exists()) {
/*  852 */         return null;
/*      */       }
/*      */       
/*  855 */       if (file.isDirectory()) {
/*  856 */         File resource = new File(file, resourceName);
/*      */         
/*  858 */         if (resource.exists()) {
/*      */           try {
/*  860 */             return new URL(""file:"" + resource.toString());
/*      */           } catch (MalformedURLException ex) {
/*  862 */             return null;
/*      */           } 
/*      */         }
/*      */       } else {
/*  866 */         ZipFile zipFile = (ZipFile)this.zipFiles.get(file);
/*  867 */         if (zipFile == null) {
/*  868 */           zipFile = new ZipFile(file);
/*  869 */           this.zipFiles.put(file, zipFile);
/*      */         } 
/*      */         
/*  872 */         ZipEntry entry = zipFile.getEntry(resourceName);
/*  873 */         if (entry != null) {
/*      */           try {
/*  875 */             return new URL(""jar:file:"" + file.toString() + ""!/"" + entry);
/*      */           } catch (MalformedURLException ex) {
/*      */             
/*  878 */             return null;
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } catch (Exception e) {
/*  883 */       e.printStackTrace();
/*      */     } 
/*      */     
/*  886 */     return null;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected Class loadClass(String classname, boolean resolve) throws ClassNotFoundException {
/*  912 */     Class theClass = findLoadedClass(classname);
/*  913 */     if (theClass != null) {
/*  914 */       return theClass;
/*      */     }
/*      */     
/*  917 */     if (isParentFirst(classname)) {
/*      */       try {
/*  919 */         theClass = findBaseClass(classname);
/*  920 */         log(""Class "" + classname + "" loaded from parent loader"", 4);
/*      */       } catch (ClassNotFoundException cnfe) {
/*      */         
/*  923 */         theClass = findClass(classname);
/*  924 */         log(""Class "" + classname + "" loaded from ant loader"", 4);
/*      */       } 
/*      */     } else {
/*      */       
/*      */       try {
/*  929 */         theClass = findClass(classname);
/*  930 */         log(""Class "" + classname + "" loaded from ant loader"", 4);
/*      */       } catch (ClassNotFoundException cnfe) {
/*      */         
/*  933 */         if (this.ignoreBase) {
/*  934 */           throw cnfe;
/*      */         }
/*  936 */         theClass = findBaseClass(classname);
/*  937 */         log(""Class "" + classname + "" loaded from parent loader"", 4);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/*  942 */     if (resolve) {
/*  943 */       resolveClass(theClass);
/*      */     }
/*      */     
/*  946 */     return theClass;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  959 */   private String getClassFilename(String classname) { return classname.replace('.', '/') + "".class""; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class getClassFromStream(InputStream stream, String classname) throws IOException, SecurityException {
/*  979 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*  980 */     int bytesRead = -1;
/*  981 */     byte[] buffer = new byte[8192];
/*      */     
/*  983 */     while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
/*  984 */       baos.write(buffer, 0, bytesRead);
/*      */     }
/*      */     
/*  987 */     byte[] classData = baos.toByteArray();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  993 */     if (defineClassProtectionDomain != null) {
/*      */       try {
/*  995 */         Object domain = getProtectionDomain.invoke(Project.class, new Object[0]);
/*      */         
/*  997 */         Object[] args = { classname, classData, new Integer(0), new Integer(classData.length), domain };
/*      */ 
/*      */         
/* 1000 */         return (Class)defineClassProtectionDomain.invoke(this, args);
/*      */       } catch (InvocationTargetException ite) {
/* 1002 */         Throwable t = ite.getTargetException();
/* 1003 */         if (t instanceof ClassFormatError)
/* 1004 */           throw (ClassFormatError)t; 
/* 1005 */         if (t instanceof NoClassDefFoundError)
/* 1006 */           throw (NoClassDefFoundError)t; 
/* 1007 */         if (t instanceof SecurityException) {
/* 1008 */           throw (SecurityException)t;
/*      */         }
/* 1010 */         throw new IOException(t.toString());
/*      */       } catch (Exception e) {
/*      */         
/* 1013 */         throw new IOException(e.toString());
/*      */       } 
/*      */     }
/* 1016 */     return defineClass(classname, classData, 0, classData.length);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Class findClass(String name) throws ClassNotFoundException {
/* 1032 */     log(""Finding class "" + name, 4);
/*      */     
/* 1034 */     return findClassInComponents(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class findClassInComponents(String name) throws ClassNotFoundException {
/* 1053 */     InputStream stream = null;
/* 1054 */     String classFilename = getClassFilename(name);
/*      */     try {
/* 1056 */       Enumeration e = this.pathComponents.elements();
/* 1057 */       while (e.hasMoreElements()) {
/* 1058 */         File pathComponent = e.nextElement();
/*      */         try {
/* 1060 */           stream = getResourceStream(pathComponent, classFilename);
/* 1061 */           if (stream != null) {
/* 1062 */             return getClassFromStream(stream, name);
/*      */           }
/*      */         } catch (SecurityException se) {
/* 1065 */           throw se;
/*      */         } catch (IOException ioe) {
/*      */           
/* 1068 */           log(""Exception reading component "" + pathComponent, 3);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 1073 */       throw new ClassNotFoundException(name);
/*      */     } finally {
/*      */       try {
/* 1076 */         if (stream != null) {
/* 1077 */           stream.close();
/*      */         }
/* 1079 */       } catch (IOException e) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private Class findBaseClass(String name) throws ClassNotFoundException {
/* 1099 */     if (this.parent == null) {
/* 1100 */       return findSystemClass(name);
/*      */     }
/* 1102 */     return this.parent.loadClass(name);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void cleanup() {
/* 1111 */     for (Enumeration e = this.zipFiles.elements(); e.hasMoreElements(); ) {
/* 1112 */       ZipFile zipFile = e.nextElement();
/*      */       try {
/* 1114 */         zipFile.close();
/* 1115 */       } catch (IOException ioe) {}
/*      */     } 
/*      */ 
/*      */     
/* 1119 */     this.zipFiles = new Hashtable();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void buildStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void buildFinished(BuildEvent event) {
/* 1137 */     this.project.removeBuildListener(this);
/* 1138 */     this.project = null;
/* 1139 */     cleanup();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void targetFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskStarted(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void taskFinished(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void messageLogged(BuildEvent event) {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addJavaLibraries() {
/* 1187 */     Vector packages = JavaEnvUtils.getJrePackages();
/* 1188 */     Enumeration e = packages.elements();
/* 1189 */     while (e.hasMoreElements()) {
/* 1190 */       String packageName = e.nextElement();
/* 1191 */       addSystemPackageRoot(packageName);
/*      */     } 
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\AntClassLoader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildEvent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.EventObject;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildEvent
/*     */   extends EventObject
/*     */ {
/*     */   private Project project;
/*     */   private Target target;
/*     */   private Task task;
/*     */   private String message;
/*  83 */   private int priority = 3;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Throwable exception;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Project project) {
/*  98 */     super(project);
/*  99 */     this.project = project;
/* 100 */     this.target = null;
/* 101 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Target target) {
/* 113 */     super(target);
/* 114 */     this.project = target.getProject();
/* 115 */     this.target = target;
/* 116 */     this.task = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildEvent(Task task) {
/* 128 */     super(task);
/* 129 */     this.project = task.getProject();
/* 130 */     this.target = task.getOwningTarget();
/* 131 */     this.task = task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessage(String message, int priority) {
/* 146 */     this.message = message;
/* 147 */     this.priority = priority;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setException(Throwable exception) { this.exception = exception; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public Target getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public Task getTask() { return this.task; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public String getMessage() { return this.message; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 219 */   public int getPriority() { return this.priority; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public Throwable getException() { return this.exception; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\BuildEvent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildException,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildException
/*     */   extends RuntimeException
/*     */ {
/*     */   private Throwable cause;
/*  70 */   private Location location = Location.UNKNOWN_LOCATION;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  86 */   public BuildException(String message) { super(message); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String message, Throwable cause) {
/*  99 */     super(message);
/* 100 */     this.cause = cause;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String msg, Throwable cause, Location location) {
/* 115 */     this(msg, cause);
/* 116 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable cause) {
/* 126 */     super(cause.toString());
/* 127 */     this.cause = cause;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(String message, Location location) {
/* 140 */     super(message);
/* 141 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BuildException(Throwable cause, Location location) {
/* 154 */     this(cause);
/* 155 */     this.location = location;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public Throwable getException() { return this.cause; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   public String toString() { return this.location.toString() + getMessage(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setLocation(Location location) { this.location = location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public void printStackTrace() { printStackTrace(System.err); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printStackTrace(PrintStream ps) {
/* 212 */     synchronized (ps) {
/* 213 */       super.printStackTrace(ps);
/* 214 */       if (this.cause != null) {
/* 215 */         ps.println(""--- Nested Exception ---"");
/* 216 */         this.cause.printStackTrace(ps);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printStackTrace(PrintWriter pw) {
/* 229 */     synchronized (pw) {
/* 230 */       super.printStackTrace(pw);
/* 231 */       if (this.cause != null) {
/* 232 */         pw.println(""--- Nested Exception ---"");
/* 233 */         this.cause.printStackTrace(pw);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\BuildException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildListener,"package org.apache.tools.ant;
import java.util.EventListener;
public interface BuildListener extends EventListener {
  void buildStarted(BuildEvent paramBuildEvent);
  void buildFinished(BuildEvent paramBuildEvent);
  void targetStarted(BuildEvent paramBuildEvent);
  void targetFinished(BuildEvent paramBuildEvent);
  void taskStarted(BuildEvent paramBuildEvent);
  void taskFinished(BuildEvent paramBuildEvent);
  void messageLogged(BuildEvent paramBuildEvent);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\BuildListener.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.BuildLogger,"package org.apache.tools.ant;
import java.io.PrintStream;
public interface BuildLogger extends BuildListener {
  void setMessageOutputLevel(int paramInt);
  void setOutputPrintStream(PrintStream paramPrintStream);
  void setEmacsMode(boolean paramBoolean);
  void setErrorPrintStream(PrintStream paramPrintStream);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\BuildLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DefaultLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.util.DateUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultLogger
/*     */   implements BuildLogger
/*     */ {
/*     */   public static final int LEFT_COLUMN_SIZE = 12;
/*     */   protected PrintStream out;
/*     */   protected PrintStream err;
/*  84 */   protected int msgOutputLevel = 0;
/*     */   
/*  86 */   private long startTime = System.currentTimeMillis();
/*     */ 
/*     */   
/*  89 */   protected static final String lSep = StringUtils.LINE_SEP;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void setMessageOutputLevel(int level) { this.msgOutputLevel = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setOutputPrintStream(PrintStream output) { this.out = new PrintStream(output, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setErrorPrintStream(PrintStream err) { this.err = new PrintStream(err, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void buildStarted(BuildEvent event) { this.startTime = System.currentTimeMillis(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 168 */     Throwable error = event.getException();
/* 169 */     StringBuffer message = new StringBuffer();
/*     */     
/* 171 */     if (error == null) {
/* 172 */       message.append(StringUtils.LINE_SEP);
/* 173 */       message.append(""BUILD SUCCESSFUL"");
/*     */     } else {
/* 175 */       message.append(StringUtils.LINE_SEP);
/* 176 */       message.append(""BUILD FAILED"");
/* 177 */       message.append(StringUtils.LINE_SEP);
/*     */       
/* 179 */       if (3 <= this.msgOutputLevel || !(error instanceof BuildException)) {
/*     */         
/* 181 */         message.append(StringUtils.getStackTrace(error));
/*     */       }
/* 183 */       else if (error instanceof BuildException) {
/* 184 */         message.append(error.toString()).append(lSep);
/*     */       } else {
/* 186 */         message.append(error.getMessage()).append(lSep);
/*     */       } 
/*     */     } 
/*     */     
/* 190 */     message.append(StringUtils.LINE_SEP);
/* 191 */     message.append(""Total time: "");
/* 192 */     message.append(formatTime(System.currentTimeMillis() - this.startTime));
/*     */     
/* 194 */     String msg = message.toString();
/* 195 */     if (error == null) {
/* 196 */       printMessage(msg, this.out, 3);
/*     */     } else {
/* 198 */       printMessage(msg, this.err, 0);
/*     */     } 
/* 200 */     log(msg);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 211 */     if (2 <= this.msgOutputLevel) {
/* 212 */       String msg = StringUtils.LINE_SEP + event.getTarget().getName() + "":"";
/*     */       
/* 214 */       printMessage(msg, this.out, event.getPriority());
/* 215 */       log(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskStarted(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 249 */     int priority = event.getPriority();
/*     */     
/* 251 */     if (priority <= this.msgOutputLevel) {
/*     */       
/* 253 */       StringBuffer message = new StringBuffer();
/* 254 */       if (event.getTask() != null && !this.emacsMode) {
/*     */         
/* 256 */         String name = event.getTask().getTaskName();
/* 257 */         String label = ""["" + name + ""] "";
/* 258 */         int size = 12 - label.length();
/* 259 */         StringBuffer tmp = new StringBuffer();
/* 260 */         for (int i = 0; i < size; i++) {
/* 261 */           tmp.append("" "");
/*     */         }
/* 263 */         tmp.append(label);
/* 264 */         label = tmp.toString();
/*     */         
/*     */         try {
/* 267 */           BufferedReader r = new BufferedReader(new StringReader(event.getMessage()));
/*     */ 
/*     */           
/* 270 */           String line = r.readLine();
/* 271 */           boolean first = true;
/* 272 */           while (line != null) {
/* 273 */             if (!first) {
/* 274 */               message.append(StringUtils.LINE_SEP);
/*     */             }
/* 276 */             first = false;
/* 277 */             message.append(label).append(line);
/* 278 */             line = r.readLine();
/*     */           } 
/*     */         } catch (IOException e) {
/*     */           
/* 282 */           message.append(label).append(event.getMessage());
/*     */         } 
/*     */       } else {
/* 285 */         message.append(event.getMessage());
/*     */       } 
/*     */       
/* 288 */       String msg = message.toString();
/* 289 */       if (priority != 0) {
/* 290 */         printMessage(msg, this.out, priority);
/*     */       } else {
/* 292 */         printMessage(msg, this.err, priority);
/*     */       } 
/* 294 */       log(msg);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   protected static String formatTime(long millis) { return DateUtils.formatElapsedTime(millis); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 324 */   protected void printMessage(String message, PrintStream stream, int priority) { stream.println(message); }
/*     */   
/*     */   protected void log(String message) {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\DefaultLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DemuxOutputStream,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Hashtable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DemuxOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private static final int MAX_SIZE = 1024;
/*     */   
/*     */   private static class BufferInfo
/*     */   {
/*     */     private ByteArrayOutputStream buffer;
/*     */     
/*     */     private BufferInfo() {}
/*     */     
/*     */     private boolean skip = false;
/*     */   }
/*  94 */   private Hashtable buffers = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Project project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isErrorStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DemuxOutputStream(Project project, boolean isErrorStream) {
/* 117 */     this.project = project;
/* 118 */     this.isErrorStream = isErrorStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private BufferInfo getBufferInfo() {
/* 127 */     Thread current = Thread.currentThread();
/* 128 */     BufferInfo bufferInfo = (BufferInfo)this.buffers.get(current);
/* 129 */     if (bufferInfo == null) {
/* 130 */       bufferInfo = new BufferInfo();
/* 131 */       bufferInfo.buffer = new ByteArrayOutputStream();
/* 132 */       bufferInfo.skip = false;
/* 133 */       this.buffers.put(current, bufferInfo);
/*     */     } 
/* 135 */     return bufferInfo;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resetBufferInfo() {
/* 142 */     Thread current = Thread.currentThread();
/* 143 */     BufferInfo bufferInfo = (BufferInfo)this.buffers.get(current);
/*     */     try {
/* 145 */       bufferInfo.buffer.close();
/* 146 */     } catch (IOException e) {}
/*     */ 
/*     */     
/* 149 */     bufferInfo.buffer = new ByteArrayOutputStream();
/* 150 */     bufferInfo.skip = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeBuffer() {
/* 157 */     Thread current = Thread.currentThread();
/* 158 */     this.buffers.remove(current);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int cc) throws IOException {
/* 169 */     byte c = (byte)cc;
/*     */     
/* 171 */     BufferInfo bufferInfo = getBufferInfo();
/* 172 */     if (c == 10 || c == 13) {
/* 173 */       if (!bufferInfo.skip) {
/* 174 */         processBuffer(bufferInfo.buffer);
/*     */       }
/*     */     } else {
/* 177 */       bufferInfo.buffer.write(cc);
/* 178 */       if (bufferInfo.buffer.size() > 1024) {
/* 179 */         processBuffer(bufferInfo.buffer);
/*     */       }
/*     */     } 
/* 182 */     bufferInfo.skip = (c == 13);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer(ByteArrayOutputStream buffer) {
/* 194 */     String output = buffer.toString();
/* 195 */     this.project.demuxOutput(output, this.isErrorStream);
/* 196 */     resetBufferInfo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 207 */     flush();
/* 208 */     removeBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void flush() throws IOException {
/* 218 */     BufferInfo bufferInfo = getBufferInfo();
/* 219 */     if (bufferInfo.buffer.size() > 0)
/* 220 */       processBuffer(bufferInfo.buffer); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\DemuxOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Diagnostics,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FilenameFilter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class Diagnostics
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public static boolean isOptionalAvailable() {
/*     */     try {
/*  87 */       Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/*     */     } catch (ClassNotFoundException e) {
/*  89 */       return false;
/*     */     } 
/*  91 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void validateVersion() throws BuildException {
/*     */     try {
/* 101 */       Class optional = Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/* 102 */       String coreVersion = getImplementationVersion(Main.class);
/* 103 */       String optionalVersion = getImplementationVersion(optional);
/*     */       
/* 105 */       if (coreVersion != null && !coreVersion.equals(optionalVersion)) {
/* 106 */         throw new BuildException(""Invalid implementation version between Ant core and Ant optional tasks.\n core    : "" + coreVersion + ""\n"" + "" optional: "" + optionalVersion);
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 111 */     catch (ClassNotFoundException e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static File[] listLibraries() {
/* 122 */     String home = System.getProperty(""ant.home"");
/* 123 */     File libDir = new File(home, ""lib"");
/* 124 */     FilenameFilter filter = new FilenameFilter() {
/*     */         public boolean accept(File dir, String name) {
/* 126 */           return name.endsWith("".jar"");
/*     */         }
/*     */       };
/*     */     
/* 130 */     String[] filenames = libDir.list(filter);
/* 131 */     File[] files = new File[filenames.length];
/* 132 */     for (int i = 0; i < filenames.length; i++) {
/* 133 */       files[i] = new File(libDir, filenames[i]);
/*     */     }
/* 135 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public static void main(String[] args) { doReport(System.out); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String getImplementationVersion(Class clazz) {
/*     */     try {
/* 156 */       Method method = Class.class.getMethod(""getPackage"", new Class[0]);
/* 157 */       Object pkg = method.invoke(clazz, null);
/* 158 */       if (pkg != null) {
/*     */         
/* 160 */         method = pkg.getClass().getMethod(""getImplementationVersion"", new Class[0]);
/* 161 */         Object version = method.invoke(pkg, null);
/* 162 */         return (String)version;
/*     */       } 
/*     */     } catch (Exception e) {
/*     */       
/* 166 */       return ""?.?"";
/*     */     } 
/* 168 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void doReport(PrintStream out) {
/* 176 */     out.println(""------- Ant diagnostics report -------"");
/* 177 */     out.println(Main.getAntVersion());
/* 178 */     out.println();
/* 179 */     out.println(""-------------------------------------------"");
/* 180 */     out.println("" Implementation Version (JDK1.2+ only)"");
/* 181 */     out.println(""-------------------------------------------"");
/* 182 */     out.println(""core tasks     : "" + getImplementationVersion(Main.class));
/*     */     
/* 184 */     Class optional = null;
/*     */     try {
/* 186 */       optional = Class.forName(""org.apache.tools.ant.taskdefs.optional.Test"");
/*     */       
/* 188 */       out.println(""optional tasks : "" + getImplementationVersion(optional));
/*     */     } catch (ClassNotFoundException e) {
/* 190 */       out.println(""optional tasks : not available"");
/*     */     } 
/*     */     
/* 193 */     out.println();
/* 194 */     out.println(""-------------------------------------------"");
/* 195 */     out.println("" ANT_HOME/lib jar listing"");
/* 196 */     out.println(""-------------------------------------------"");
/* 197 */     doReportLibraries(out);
/*     */     
/* 199 */     out.println();
/* 200 */     out.println(""-------------------------------------------"");
/* 201 */     out.println("" Tasks availability"");
/* 202 */     out.println(""-------------------------------------------"");
/* 203 */     doReportTasksAvailability(out);
/*     */     
/* 205 */     out.println();
/* 206 */     out.println(""-------------------------------------------"");
/* 207 */     out.println("" org.apache.env.Which diagnostics"");
/* 208 */     out.println(""-------------------------------------------"");
/* 209 */     doReportWhich(out);
/*     */     
/* 211 */     out.println();
/* 212 */     out.println(""-------------------------------------------"");
/* 213 */     out.println("" System properties"");
/* 214 */     out.println(""-------------------------------------------"");
/* 215 */     doReportSystemProperties(out);
/*     */     
/* 217 */     out.println();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportSystemProperties(PrintStream out) {
/* 225 */     Enumeration keys = System.getProperties().keys();
/* 226 */     while (keys.hasMoreElements()) {
/* 227 */       String key = keys.nextElement();
/* 228 */       out.println(key + "" : "" + System.getProperty(key));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportLibraries(PrintStream out) {
/* 238 */     File[] libs = listLibraries();
/* 239 */     for (int i = 0; i < libs.length; i++) {
/* 240 */       out.println(libs[i].getName() + "" ("" + libs[i].length() + "" bytes)"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportWhich(PrintStream out) {
/* 251 */     Throwable error = null;
/*     */     try {
/* 253 */       Class which = Class.forName(""org.apache.env.Which"");
/* 254 */       Method method = which.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/* 255 */       method.invoke(null, new Object[] { new String[0] });
/*     */     } catch (ClassNotFoundException e) {
/* 257 */       out.println(""Not available."");
/* 258 */       out.println(""Download it at http://xml.apache.org/commons/"");
/*     */     } catch (InvocationTargetException e) {
/* 260 */       error = (e.getTargetException() == null) ? e : e.getTargetException();
/*     */     } catch (Exception e) {
/* 262 */       error = e = null;
/*     */     } 
/*     */     
/* 265 */     if (error != null) {
/* 266 */       out.println(""Error while running org.apache.env.Which"");
/* 267 */       error.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void doReportTasksAvailability(PrintStream out) {
/* 281 */     InputStream is = Main.class.getResourceAsStream(""/org/apache/tools/ant/taskdefs/defaults.properties"");
/* 282 */     if (is == null) {
/* 283 */       out.println(""None available"");
/*     */     } else {
/* 285 */       Properties props = new Properties();
/*     */       try {
/* 287 */         props.load(is);
/* 288 */         for (Enumeration keys = props.keys(); keys.hasMoreElements(); ) {
/* 289 */           String key = keys.nextElement();
/* 290 */           String classname = props.getProperty(key);
/*     */           try {
/* 292 */             Class.forName(classname);
/* 293 */             props.remove(key);
/*     */           } catch (ClassNotFoundException e) {
/* 295 */             out.println(key + "" : Not Available"");
/*     */           } 
/*     */         } 
/* 298 */         if (props.size() == 0) {
/* 299 */           out.println(""All defined tasks are available"");
/*     */         }
/*     */       } catch (IOException e) {
/* 302 */         out.println(e.getMessage());
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Diagnostics.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DirectoryScanner,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectorScanner;
/*     */ import org.apache.tools.ant.types.selectors.SelectorUtils;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DirectoryScanner
/*     */   implements FileScanner, SelectorScanner
/*     */ {
/* 161 */   protected static final String[] DEFAULTEXCLUDES = new String[] { ""**/*~"", ""**/#*#"", ""**/.#*"", ""**/%*%"", ""**/._*"", ""**/CVS"", ""**/CVS/**"", ""**/.cvsignore"", ""**/SCCS"", ""**/SCCS/**"", ""**/vssver.scc"", ""**/.svn"", ""**/.svn/**"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected File basedir;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] includes;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] excludes;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 187 */   protected FileSelector[] selectors = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector filesIncluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector filesNotIncluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector filesExcluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector dirsIncluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector dirsNotIncluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector dirsExcluded;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector filesDeselected;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Vector dirsDeselected;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean haveSlowResults = false;
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isCaseSensitive = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean followSymlinks = true;
/*     */ 
/*     */ 
/*     */   
/* 244 */   private static final FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean everythingIncluded = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 272 */   protected static boolean matchPatternStart(String pattern, String str) { return SelectorUtils.matchPatternStart(pattern, str); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   protected static boolean matchPatternStart(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.matchPatternStart(pattern, str, isCaseSensitive); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 309 */   protected static boolean matchPath(String pattern, String str) { return SelectorUtils.matchPath(pattern, str); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 327 */   protected static boolean matchPath(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.matchPath(pattern, str, isCaseSensitive); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 345 */   public static boolean match(String pattern, String str) { return SelectorUtils.match(pattern, str); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 367 */   protected static boolean match(String pattern, String str, boolean isCaseSensitive) { return SelectorUtils.match(pattern, str, isCaseSensitive); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 379 */   private static Vector tokenizePath(String path) { return SelectorUtils.tokenizePath(path); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 392 */   public void setBasedir(String basedir) { setBasedir(new File(basedir.replace('/', File.separatorChar).replace('\\', File.separatorChar))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 404 */   public void setBasedir(File basedir) { this.basedir = basedir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 414 */   public File getBasedir() { return this.basedir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 424 */   public void setCaseSensitive(boolean isCaseSensitive) { this.isCaseSensitive = isCaseSensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 433 */   public void setFollowSymlinks(boolean followSymlinks) { this.followSymlinks = followSymlinks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String[] includes) {
/* 450 */     if (includes == null) {
/* 451 */       this.includes = null;
/*     */     } else {
/* 453 */       this.includes = new String[includes.length];
/* 454 */       for (int i = 0; i < includes.length; i++) {
/*     */         
/* 456 */         String pattern = includes[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */         
/* 458 */         if (pattern.endsWith(File.separator)) {
/* 459 */           pattern = pattern + ""**"";
/*     */         }
/* 461 */         this.includes[i] = pattern;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String[] excludes) {
/* 480 */     if (excludes == null) {
/* 481 */       this.excludes = null;
/*     */     } else {
/* 483 */       this.excludes = new String[excludes.length];
/* 484 */       for (int i = 0; i < excludes.length; i++) {
/*     */         
/* 486 */         String pattern = excludes[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */         
/* 488 */         if (pattern.endsWith(File.separator)) {
/* 489 */           pattern = pattern + ""**"";
/*     */         }
/* 491 */         this.excludes[i] = pattern;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 503 */   public void setSelectors(FileSelector[] selectors) { this.selectors = selectors; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 515 */   public boolean isEverythingIncluded() { return this.everythingIncluded; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void scan() throws IllegalStateException {
/* 528 */     if (this.basedir == null) {
/* 529 */       throw new IllegalStateException(""No basedir set"");
/*     */     }
/* 531 */     if (!this.basedir.exists()) {
/* 532 */       throw new IllegalStateException(""basedir "" + this.basedir + "" does not exist"");
/*     */     }
/*     */     
/* 535 */     if (!this.basedir.isDirectory()) {
/* 536 */       throw new IllegalStateException(""basedir "" + this.basedir + "" is not a directory"");
/*     */     }
/*     */ 
/*     */     
/* 540 */     if (this.includes == null) {
/*     */       
/* 542 */       this.includes = new String[1];
/* 543 */       this.includes[0] = ""**"";
/*     */     } 
/* 545 */     if (this.excludes == null) {
/* 546 */       this.excludes = new String[0];
/*     */     }
/*     */     
/* 549 */     this.filesIncluded = new Vector();
/* 550 */     this.filesNotIncluded = new Vector();
/* 551 */     this.filesExcluded = new Vector();
/* 552 */     this.filesDeselected = new Vector();
/* 553 */     this.dirsIncluded = new Vector();
/* 554 */     this.dirsNotIncluded = new Vector();
/* 555 */     this.dirsExcluded = new Vector();
/* 556 */     this.dirsDeselected = new Vector();
/*     */     
/* 558 */     if (isIncluded("""")) {
/* 559 */       if (!isExcluded("""")) {
/* 560 */         if (isSelected("""", this.basedir)) {
/* 561 */           this.dirsIncluded.addElement("""");
/*     */         } else {
/* 563 */           this.dirsDeselected.addElement("""");
/*     */         } 
/*     */       } else {
/* 566 */         this.dirsExcluded.addElement("""");
/*     */       } 
/*     */     } else {
/* 569 */       this.dirsNotIncluded.addElement("""");
/*     */     } 
/* 571 */     scandir(this.basedir, """", true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void slowScan() {
/* 583 */     if (this.haveSlowResults) {
/*     */       return;
/*     */     }
/*     */     
/* 587 */     String[] excl = new String[this.dirsExcluded.size()];
/* 588 */     this.dirsExcluded.copyInto((Object[])excl);
/*     */     
/* 590 */     String[] notIncl = new String[this.dirsNotIncluded.size()];
/* 591 */     this.dirsNotIncluded.copyInto((Object[])notIncl);
/*     */     
/* 593 */     for (int i = 0; i < excl.length; i++) {
/* 594 */       if (!couldHoldIncluded(excl[i])) {
/* 595 */         scandir(new File(this.basedir, excl[i]), excl[i] + File.separator, false);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 600 */     for (int i = 0; i < notIncl.length; i++) {
/* 601 */       if (!couldHoldIncluded(notIncl[i])) {
/* 602 */         scandir(new File(this.basedir, notIncl[i]), notIncl[i] + File.separator, false);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 607 */     this.haveSlowResults = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scandir(File dir, String vpath, boolean fast) {
/* 631 */     String[] newfiles = dir.list();
/*     */     
/* 633 */     if (newfiles == null)
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 641 */       throw new BuildException(""IO error scanning directory "" + dir.getAbsolutePath());
/*     */     }
/*     */ 
/*     */     
/* 645 */     if (!this.followSymlinks) {
/* 646 */       Vector noLinks = new Vector();
/* 647 */       for (int i = 0; i < newfiles.length; i++) {
/*     */         try {
/* 649 */           if (fileUtils.isSymbolicLink(dir, newfiles[i])) {
/* 650 */             String name = vpath + newfiles[i];
/* 651 */             File file = new File(dir, newfiles[i]);
/* 652 */             if (file.isDirectory()) {
/* 653 */               this.dirsExcluded.addElement(name);
/*     */             } else {
/* 655 */               this.filesExcluded.addElement(name);
/*     */             } 
/*     */           } else {
/* 658 */             noLinks.addElement(newfiles[i]);
/*     */           } 
/*     */         } catch (IOException ioe) {
/* 661 */           String msg = ""IOException caught while checking for links, couldn't get cannonical path!"";
/*     */ 
/*     */           
/* 664 */           System.err.println(msg);
/* 665 */           noLinks.addElement(newfiles[i]);
/*     */         } 
/*     */       } 
/* 668 */       newfiles = new String[noLinks.size()];
/* 669 */       noLinks.copyInto((Object[])newfiles);
/*     */     } 
/*     */     
/* 672 */     for (int i = 0; i < newfiles.length; i++) {
/* 673 */       String name = vpath + newfiles[i];
/* 674 */       File file = new File(dir, newfiles[i]);
/* 675 */       if (file.isDirectory()) {
/* 676 */         if (isIncluded(name)) {
/* 677 */           if (!isExcluded(name)) {
/* 678 */             if (isSelected(name, file)) {
/* 679 */               this.dirsIncluded.addElement(name);
/* 680 */               if (fast) {
/* 681 */                 scandir(file, name + File.separator, fast);
/*     */               }
/*     */             } else {
/* 684 */               this.everythingIncluded = false;
/* 685 */               this.dirsDeselected.addElement(name);
/* 686 */               if (fast && couldHoldIncluded(name)) {
/* 687 */                 scandir(file, name + File.separator, fast);
/*     */               }
/*     */             } 
/*     */           } else {
/*     */             
/* 692 */             this.everythingIncluded = false;
/* 693 */             this.dirsExcluded.addElement(name);
/* 694 */             if (fast && couldHoldIncluded(name)) {
/* 695 */               scandir(file, name + File.separator, fast);
/*     */             }
/*     */           } 
/*     */         } else {
/* 699 */           this.everythingIncluded = false;
/* 700 */           this.dirsNotIncluded.addElement(name);
/* 701 */           if (fast && couldHoldIncluded(name)) {
/* 702 */             scandir(file, name + File.separator, fast);
/*     */           }
/*     */         } 
/* 705 */         if (!fast) {
/* 706 */           scandir(file, name + File.separator, fast);
/*     */         }
/* 708 */       } else if (file.isFile()) {
/* 709 */         if (isIncluded(name)) {
/* 710 */           if (!isExcluded(name)) {
/* 711 */             if (isSelected(name, file)) {
/* 712 */               this.filesIncluded.addElement(name);
/*     */             } else {
/* 714 */               this.everythingIncluded = false;
/* 715 */               this.filesDeselected.addElement(name);
/*     */             } 
/*     */           } else {
/* 718 */             this.everythingIncluded = false;
/* 719 */             this.filesExcluded.addElement(name);
/*     */           } 
/*     */         } else {
/* 722 */           this.everythingIncluded = false;
/* 723 */           this.filesNotIncluded.addElement(name);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isIncluded(String name) {
/* 738 */     for (int i = 0; i < this.includes.length; i++) {
/* 739 */       if (matchPath(this.includes[i], name, this.isCaseSensitive)) {
/* 740 */         return true;
/*     */       }
/*     */     } 
/* 743 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean couldHoldIncluded(String name) {
/* 755 */     for (int i = 0; i < this.includes.length; i++) {
/* 756 */       if (matchPatternStart(this.includes[i], name, this.isCaseSensitive)) {
/* 757 */         return true;
/*     */       }
/*     */     } 
/* 760 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isExcluded(String name) {
/* 772 */     for (int i = 0; i < this.excludes.length; i++) {
/* 773 */       if (matchPath(this.excludes[i], name, this.isCaseSensitive)) {
/* 774 */         return true;
/*     */       }
/*     */     } 
/* 777 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isSelected(String name, File file) {
/* 789 */     if (this.selectors != null) {
/* 790 */       for (int i = 0; i < this.selectors.length; i++) {
/* 791 */         if (!this.selectors[i].isSelected(this.basedir, name, file)) {
/* 792 */           return false;
/*     */         }
/*     */       } 
/*     */     }
/* 796 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedFiles() {
/* 808 */     int count = this.filesIncluded.size();
/* 809 */     String[] files = new String[count];
/* 810 */     for (int i = 0; i < count; i++) {
/* 811 */       files[i] = this.filesIncluded.elementAt(i);
/*     */     }
/* 813 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getNotIncludedFiles() {
/* 827 */     slowScan();
/* 828 */     int count = this.filesNotIncluded.size();
/* 829 */     String[] files = new String[count];
/* 830 */     for (int i = 0; i < count; i++) {
/* 831 */       files[i] = this.filesNotIncluded.elementAt(i);
/*     */     }
/* 833 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getExcludedFiles() {
/* 848 */     slowScan();
/* 849 */     int count = this.filesExcluded.size();
/* 850 */     String[] files = new String[count];
/* 851 */     for (int i = 0; i < count; i++) {
/* 852 */       files[i] = this.filesExcluded.elementAt(i);
/*     */     }
/* 854 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getDeselectedFiles() {
/* 867 */     slowScan();
/* 868 */     int count = this.filesDeselected.size();
/* 869 */     String[] files = new String[count];
/* 870 */     for (int i = 0; i < count; i++) {
/* 871 */       files[i] = this.filesDeselected.elementAt(i);
/*     */     }
/* 873 */     return files;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedDirectories() {
/* 885 */     int count = this.dirsIncluded.size();
/* 886 */     String[] directories = new String[count];
/* 887 */     for (int i = 0; i < count; i++) {
/* 888 */       directories[i] = this.dirsIncluded.elementAt(i);
/*     */     }
/* 890 */     return directories;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getNotIncludedDirectories() {
/* 904 */     slowScan();
/* 905 */     int count = this.dirsNotIncluded.size();
/* 906 */     String[] directories = new String[count];
/* 907 */     for (int i = 0; i < count; i++) {
/* 908 */       directories[i] = this.dirsNotIncluded.elementAt(i);
/*     */     }
/* 910 */     return directories;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getExcludedDirectories() {
/* 925 */     slowScan();
/* 926 */     int count = this.dirsExcluded.size();
/* 927 */     String[] directories = new String[count];
/* 928 */     for (int i = 0; i < count; i++) {
/* 929 */       directories[i] = this.dirsExcluded.elementAt(i);
/*     */     }
/* 931 */     return directories;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getDeselectedDirectories() {
/* 944 */     slowScan();
/* 945 */     int count = this.dirsDeselected.size();
/* 946 */     String[] directories = new String[count];
/* 947 */     for (int i = 0; i < count; i++) {
/* 948 */       directories[i] = this.dirsDeselected.elementAt(i);
/*     */     }
/* 950 */     return directories;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDefaultExcludes() {
/* 957 */     int excludesLength = (this.excludes == null) ? 0 : this.excludes.length;
/*     */     
/* 959 */     String[] newExcludes = new String[excludesLength + DEFAULTEXCLUDES.length];
/* 960 */     if (excludesLength > 0) {
/* 961 */       System.arraycopy(this.excludes, 0, newExcludes, 0, excludesLength);
/*     */     }
/* 963 */     for (int i = 0; i < DEFAULTEXCLUDES.length; i++) {
/* 964 */       newExcludes[i + excludesLength] = DEFAULTEXCLUDES[i].replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     }
/*     */     
/* 967 */     this.excludes = newExcludes;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\DirectoryScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.DynamicConfigurator,"package org.apache.tools.ant;
public interface DynamicConfigurator {
  void setDynamicAttribute(String paramString1, String paramString2) throws BuildException;
  Object createDynamicElement(String paramString) throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\DynamicConfigurator.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ExitException,"/*    */ package org.apache.tools.ant;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ExitException
/*    */   extends SecurityException
/*    */ {
/*    */   private int status;
/*    */   
/*    */   public ExitException(int status) {
/* 73 */     super(""ExitException: status "" + status);
/* 74 */     this.status = status;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 81 */   public int getStatus() { return this.status; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\ExitException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.FileScanner,"package org.apache.tools.ant;
import java.io.File;
public interface FileScanner {
  void addDefaultExcludes();
  File getBasedir();
  String[] getExcludedDirectories();
  String[] getExcludedFiles();
  String[] getIncludedDirectories();
  String[] getIncludedFiles();
  String[] getNotIncludedDirectories();
  String[] getNotIncludedFiles();
  void scan() throws IllegalStateException;
  void setBasedir(String paramString);
  void setBasedir(File paramFile);
  void setExcludes(String[] paramArrayOfString);
  void setIncludes(String[] paramArrayOfString);
  void setCaseSensitive(boolean paramBoolean);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\FileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.IntrospectionHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Locale;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class IntrospectionHelper
/*     */   implements BuildListener
/*     */ {
/*     */   private Hashtable attributeTypes;
/*     */   private Hashtable attributeSetters;
/*     */   private Hashtable nestedTypes;
/*     */   private Hashtable nestedCreators;
/*     */   private Hashtable nestedStorers;
/* 111 */   private Method addText = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class bean;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   private static Hashtable helpers = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   private static final Hashtable PRIMITIVE_TYPE_MAP = new Hashtable(8);
/*     */ 
/*     */   
/*     */   static  {
/* 133 */     Class[] primitives = { boolean.class, byte.class, char.class, short.class, int.class, long.class, float.class, double.class };
/*     */ 
/*     */     
/* 136 */     Class[] wrappers = { Boolean.class, Byte.class, Character.class, Short.class, Integer.class, Long.class, Float.class, Double.class };
/*     */ 
/*     */     
/* 139 */     for (int i = 0; i < primitives.length; i++) {
/* 140 */       PRIMITIVE_TYPE_MAP.put(primitives[i], wrappers[i]);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private IntrospectionHelper(Class bean) {
/* 199 */     this.attributeTypes = new Hashtable();
/* 200 */     this.attributeSetters = new Hashtable();
/* 201 */     this.nestedTypes = new Hashtable();
/* 202 */     this.nestedCreators = new Hashtable();
/* 203 */     this.nestedStorers = new Hashtable();
/*     */     
/* 205 */     this.bean = bean;
/*     */     
/* 207 */     Method[] methods = bean.getMethods();
/* 208 */     for (int i = 0; i < methods.length; i++) {
/* 209 */       Method m = methods[i];
/* 210 */       String name = m.getName();
/* 211 */       Class returnType = m.getReturnType();
/* 212 */       Class[] args = m.getParameterTypes();
/*     */ 
/*     */       
/* 215 */       if (!Task.class.isAssignableFrom(bean) || args.length != 1 || !isHiddenSetMethod(name, args[0]))
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 221 */         if (!TaskContainer.class.isAssignableFrom(bean) || args.length != 1 || !""addTask"".equals(name) || !Task.class.equals(args[0]))
/*     */         {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 228 */           if (""addText"".equals(name) && void.class.equals(returnType) && args.length == 1 && String.class.equals(args[0])) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 233 */             this.addText = methods[i];
/*     */           }
/* 235 */           else if (name.startsWith(""set"") && void.class.equals(returnType) && args.length == 1 && !args[0].isArray()) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 240 */             String propName = getPropertyName(name, ""set"");
/* 241 */             if (this.attributeSetters.get(propName) == null || 
/* 242 */               !String.class.equals(args[0])) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 262 */               AttributeSetter as = createAttributeSetter(m, args[0]);
/* 263 */               if (as != null) {
/* 264 */                 this.attributeTypes.put(propName, args[0]);
/* 265 */                 this.attributeSetters.put(propName, as);
/*     */               } 
/*     */             } 
/* 268 */           } else if (name.startsWith(""create"") && !returnType.isArray() && !returnType.isPrimitive() && args.length == 0) {
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 273 */             String propName = getPropertyName(name, ""create"");
/* 274 */             this.nestedTypes.put(propName, returnType);
/* 275 */             this.nestedCreators.put(propName, new NestedCreator(this, m)
/*     */                 {
/*     */                   private final Method val$m;
/*     */                   private final IntrospectionHelper this$0;
/*     */                   
/*     */                   public Object create(Object parent) throws InvocationTargetException, IllegalAccessException {
/* 281 */                     return this.val$m.invoke(parent, new Object[0]);
/*     */                   }
/*     */                 });
/*     */             
/* 285 */             this.nestedStorers.remove(propName);
/*     */           }
/* 287 */           else if (name.startsWith(""addConfigured"") && void.class.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
/*     */ 
/*     */             
/*     */             try {
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 295 */               Constructor c = args[0].getConstructor(new Class[0]);
/*     */               
/* 297 */               String propName = getPropertyName(name, ""addConfigured"");
/* 298 */               this.nestedTypes.put(propName, args[0]);
/* 299 */               this.nestedCreators.put(propName, new NestedCreator(this, c) {
/*     */                     private final Constructor val$c;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public Object create(Object parent) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 304 */                       Object o = this.val$c.newInstance(new Object[0]);
/* 305 */                       return o;
/*     */                     }
/*     */                   });
/*     */               
/* 309 */               this.nestedStorers.put(propName, new NestedStorer(this, m) {
/*     */                     private final Method val$m;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public void store(Object parent, Object child) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 314 */                       this.val$m.invoke(parent, new Object[] { child });
/*     */                     }
/*     */                   });
/*     */             }
/* 318 */             catch (NoSuchMethodException nse) {}
/*     */           }
/* 320 */           else if (name.startsWith(""add"") && void.class.equals(returnType) && args.length == 1 && !String.class.equals(args[0]) && !args[0].isArray() && !args[0].isPrimitive()) {
/*     */ 
/*     */             
/*     */             try {
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 328 */               Constructor c = args[0].getConstructor(new Class[0]);
/*     */               
/* 330 */               String propName = getPropertyName(name, ""add"");
/* 331 */               this.nestedTypes.put(propName, args[0]);
/* 332 */               this.nestedCreators.put(propName, new NestedCreator(this, c, m) { private final Constructor val$c;
/*     */                     private final Method val$m;
/*     */                     private final IntrospectionHelper this$0;
/*     */                     
/*     */                     public Object create(Object parent) throws InvocationTargetException, IllegalAccessException, InstantiationException {
/* 337 */                       Object o = this.val$c.newInstance(new Object[0]);
/* 338 */                       this.val$m.invoke(parent, new Object[] { o });
/* 339 */                       return o;
/*     */                     } }
/*     */                 );
/*     */               
/* 343 */               this.nestedStorers.remove(name);
/* 344 */             } catch (NoSuchMethodException nse) {}
/*     */           } 
/*     */         }
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private static interface AttributeSetter
/*     */   {
/*     */     void set(Project param1Project, Object param1Object, String param1String) throws InvocationTargetException, IllegalAccessException, BuildException;
/*     */   }
/*     */ 
/*     */   
/*     */   private boolean isHiddenSetMethod(String name, Class type) {
/* 359 */     if (""setLocation"".equals(name) && Location.class.equals(type))
/*     */     {
/* 361 */       return true;
/*     */     }
/*     */     
/* 364 */     if (""setTaskType"".equals(name) && String.class.equals(type))
/*     */     {
/* 366 */       return true;
/*     */     }
/*     */     
/* 369 */     return false;
/*     */   }
/*     */   
/*     */   private static interface NestedStorer
/*     */   {
/*     */     void store(Object param1Object1, Object param1Object2) throws InvocationTargetException, IllegalAccessException, InstantiationException;
/*     */   }
/*     */   
/*     */   private static interface NestedCreator {
/*     */     Object create(Object param1Object) throws InvocationTargetException, IllegalAccessException, InstantiationException;
/*     */   }
/*     */   
/*     */   public static synchronized IntrospectionHelper getHelper(Class c) {
/* 382 */     IntrospectionHelper ih = (IntrospectionHelper)helpers.get(c);
/* 383 */     if (ih == null) {
/* 384 */       ih = new IntrospectionHelper(c);
/* 385 */       helpers.put(c, ih);
/*     */     } 
/* 387 */     return ih;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAttribute(Project p, Object element, String attributeName, String value) throws BuildException {
/* 410 */     AttributeSetter as = (AttributeSetter)this.attributeSetters.get(attributeName);
/*     */     
/* 412 */     if (as == null) {
/* 413 */       if (element instanceof DynamicConfigurator) {
/* 414 */         DynamicConfigurator dc = (DynamicConfigurator)element;
/* 415 */         dc.setDynamicAttribute(attributeName, value);
/*     */         
/*     */         return;
/*     */       } 
/* 419 */       String msg = getElementName(p, element) + "" doesn't support the \"""" + attributeName + ""\"" attribute."";
/*     */ 
/*     */       
/* 422 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 426 */       as.set(p, element, value);
/*     */     } catch (IllegalAccessException ie) {
/*     */       
/* 429 */       throw new BuildException(ie);
/*     */     } catch (InvocationTargetException ite) {
/* 431 */       Throwable t = ite.getTargetException();
/* 432 */       if (t instanceof BuildException) {
/* 433 */         throw (BuildException)t;
/*     */       }
/* 435 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(Project project, Object element, String text) throws BuildException {
/* 458 */     if (this.addText == null) {
/*     */       
/* 460 */       if (text.trim().length() == 0) {
/*     */         return;
/*     */       }
/*     */ 
/*     */       
/* 465 */       String msg = project.getElementName(element) + "" doesn't support nested text data."";
/*     */       
/* 467 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/*     */     try {
/* 471 */       this.addText.invoke(element, (Object[])new String[] { text });
/*     */     } catch (IllegalAccessException ie) {
/*     */       
/* 474 */       throw new BuildException(ie);
/*     */     } catch (InvocationTargetException ite) {
/* 476 */       Throwable t = ite.getTargetException();
/* 477 */       if (t instanceof BuildException) {
/* 478 */         throw (BuildException)t;
/*     */       }
/* 480 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object createElement(Project project, Object parent, String elementName) throws BuildException {
/* 507 */     NestedCreator nc = (NestedCreator)this.nestedCreators.get(elementName);
/* 508 */     if (nc == null && parent instanceof DynamicConfigurator) {
/* 509 */       DynamicConfigurator dc = (DynamicConfigurator)parent;
/* 510 */       Object nestedElement = dc.createDynamicElement(elementName);
/* 511 */       if (nestedElement != null) {
/* 512 */         if (nestedElement instanceof ProjectComponent) {
/* 513 */           ((ProjectComponent)nestedElement).setProject(project);
/*     */         }
/* 515 */         return nestedElement;
/*     */       } 
/*     */     } 
/* 518 */     if (nc == null) {
/* 519 */       String msg = project.getElementName(parent) + "" doesn't support the nested \"""" + elementName + ""\"" element."";
/*     */       
/* 521 */       throw new BuildException(msg);
/*     */     } 
/*     */     try {
/* 524 */       Object nestedElement = nc.create(parent);
/* 525 */       if (nestedElement instanceof ProjectComponent) {
/* 526 */         ((ProjectComponent)nestedElement).setProject(project);
/*     */       }
/* 528 */       return nestedElement;
/*     */     } catch (IllegalAccessException ie) {
/*     */       
/* 531 */       throw new BuildException(ie);
/*     */     } catch (InstantiationException ine) {
/*     */       
/* 534 */       throw new BuildException(ine);
/*     */     } catch (InvocationTargetException ite) {
/* 536 */       Throwable t = ite.getTargetException();
/* 537 */       if (t instanceof BuildException) {
/* 538 */         throw (BuildException)t;
/*     */       }
/* 540 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void storeElement(Project project, Object parent, Object child, String elementName) throws BuildException {
/* 566 */     if (elementName == null) {
/*     */       return;
/*     */     }
/* 569 */     NestedStorer ns = (NestedStorer)this.nestedStorers.get(elementName);
/* 570 */     if (ns == null) {
/*     */       return;
/*     */     }
/*     */     try {
/* 574 */       ns.store(parent, child);
/*     */     } catch (IllegalAccessException ie) {
/*     */       
/* 577 */       throw new BuildException(ie);
/*     */     } catch (InstantiationException ine) {
/*     */       
/* 580 */       throw new BuildException(ine);
/*     */     } catch (InvocationTargetException ite) {
/* 582 */       Throwable t = ite.getTargetException();
/* 583 */       if (t instanceof BuildException) {
/* 584 */         throw (BuildException)t;
/*     */       }
/* 586 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getElementType(String elementName) throws BuildException {
/* 604 */     Class nt = (Class)this.nestedTypes.get(elementName);
/* 605 */     if (nt == null) {
/* 606 */       String msg = ""Class "" + this.bean.getName() + "" doesn't support the nested \"""" + elementName + ""\"" element."";
/*     */       
/* 608 */       throw new BuildException(msg);
/*     */     } 
/* 610 */     return nt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getAttributeType(String attributeName) throws BuildException {
/* 627 */     Class at = (Class)this.attributeTypes.get(attributeName);
/* 628 */     if (at == null) {
/* 629 */       String msg = ""Class "" + this.bean.getName() + "" doesn't support the \"""" + attributeName + ""\"" attribute."";
/*     */       
/* 631 */       throw new BuildException(msg);
/*     */     } 
/* 633 */     return at;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 642 */   public boolean supportsCharacters() { return (this.addText != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 653 */   public Enumeration getAttributes() { return this.attributeSetters.keys(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 664 */   public Enumeration getNestedElements() { return this.nestedTypes.keys(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private AttributeSetter createAttributeSetter(Method m, Class arg) {
/* 700 */     Class reflectedArg = PRIMITIVE_TYPE_MAP.containsKey(arg) ? (Class)PRIMITIVE_TYPE_MAP.get(arg) : arg;
/*     */ 
/*     */ 
/*     */     
/* 704 */     if (String.class.equals(reflectedArg)) {
/* 705 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 708 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new String[] { value }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */     
/* 713 */     if (Character.class.equals(reflectedArg)) {
/* 714 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 717 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new Character[] { new Character(value.charAt(0)) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */     
/* 723 */     if (Boolean.class.equals(reflectedArg)) {
/* 724 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 727 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new Boolean[] { new Boolean(Project.toBoolean(value)) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 734 */     if (Class.class.equals(reflectedArg)) {
/* 735 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           
/*     */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 739 */               this.val$m.invoke(parent, (Object[])new Class[] { Class.forName(value) });
/*     */             } catch (ClassNotFoundException ce) {
/* 741 */               throw new BuildException(ce);
/*     */             } 
/*     */           }
/*     */           private final IntrospectionHelper this$0; }
/*     */         ;
/*     */     }
/* 747 */     if (File.class.equals(reflectedArg)) {
/* 748 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 751 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new File[] { p.resolveFile(value) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */     
/* 757 */     if (Path.class.equals(reflectedArg)) {
/* 758 */       return new AttributeSetter(this, m) { private final Method val$m;
/*     */           private final IntrospectionHelper this$0;
/*     */           
/* 761 */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException { this.val$m.invoke(parent, (Object[])new Path[] { new Path(p, value) }); }
/*     */            }
/*     */         ;
/*     */     }
/*     */ 
/*     */     
/* 767 */     if (EnumeratedAttribute.class.isAssignableFrom(reflectedArg)) {
/* 768 */       return new AttributeSetter(this, reflectedArg, m) { private final Class val$reflectedArg;
/*     */           
/*     */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 772 */               EnumeratedAttribute ea = this.val$reflectedArg.newInstance();
/*     */               
/* 774 */               ea.setValue(value);
/* 775 */               this.val$m.invoke(parent, (Object[])new EnumeratedAttribute[] { ea });
/*     */             } catch (InstantiationException ie) {
/* 777 */               throw new BuildException(ie);
/*     */             } 
/*     */           }
/*     */ 
/*     */           
/*     */           private final Method val$m;
/*     */           
/*     */           private final IntrospectionHelper this$0; }
/*     */         ;
/*     */     }
/*     */     try {
/* 788 */       Constructor c = reflectedArg.getConstructor(new Class[] { String.class });
/*     */ 
/*     */       
/* 791 */       return new AttributeSetter(this, c, m) {
/*     */           private final Constructor val$c;
/*     */           
/*     */           public void set(Project p, Object parent, String value) throws InvocationTargetException, IllegalAccessException, BuildException {
/*     */             try {
/* 796 */               Object attribute = this.val$c.newInstance((Object[])new String[] { value });
/* 797 */               if (attribute instanceof ProjectComponent) {
/* 798 */                 ((ProjectComponent)attribute).setProject(p);
/*     */               }
/* 800 */               this.val$m.invoke(parent, new Object[] { attribute });
/*     */             } catch (InstantiationException ie) {
/* 802 */               throw new BuildException(ie);
/*     */             } 
/*     */           }
/*     */           private final Method val$m; private final IntrospectionHelper this$0;
/*     */         };
/* 807 */     } catch (NoSuchMethodException nme) {
/*     */ 
/*     */ 
/*     */       
/* 811 */       return null;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 829 */   protected String getElementName(Project project, Object element) { return project.getElementName(element); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getPropertyName(String methodName, String prefix) {
/* 846 */     int start = prefix.length();
/* 847 */     return methodName.substring(start).toLowerCase(Locale.US);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 885 */     this.attributeTypes.clear();
/* 886 */     this.attributeSetters.clear();
/* 887 */     this.nestedTypes.clear();
/* 888 */     this.nestedCreators.clear();
/* 889 */     this.addText = null;
/* 890 */     helpers.clear();
/*     */   }
/*     */   
/*     */   public void buildStarted(BuildEvent event) {}
/*     */   
/*     */   public void targetStarted(BuildEvent event) {}
/*     */   
/*     */   public void targetFinished(BuildEvent event) {}
/*     */   
/*     */   public void taskStarted(BuildEvent event) {}
/*     */   
/*     */   public void taskFinished(BuildEvent event) {}
/*     */   
/*     */   public void messageLogged(BuildEvent event) {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\IntrospectionHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Location,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Location
/*     */ {
/*     */   private String fileName;
/*     */   private int lineNumber;
/*     */   private int columnNumber;
/*  72 */   public static final Location UNKNOWN_LOCATION = new Location();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   private Location() { this(null, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public Location(String fileName) { this(fileName, 0, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Location(String fileName, int lineNumber, int columnNumber) {
/* 106 */     this.fileName = fileName;
/* 107 */     this.lineNumber = lineNumber;
/* 108 */     this.columnNumber = columnNumber;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 122 */     StringBuffer buf = new StringBuffer();
/*     */     
/* 124 */     if (this.fileName != null) {
/* 125 */       buf.append(this.fileName);
/*     */       
/* 127 */       if (this.lineNumber != 0) {
/* 128 */         buf.append("":"");
/* 129 */         buf.append(this.lineNumber);
/*     */       } 
/*     */       
/* 132 */       buf.append("": "");
/*     */     } 
/*     */     
/* 135 */     return buf.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Location.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Main,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.input.DefaultInputHandler;
/*     */ import org.apache.tools.ant.input.InputHandler;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Main
/*     */ {
/*     */   public static final String DEFAULT_BUILD_FILENAME = ""build.xml"";
/*  89 */   private int msgOutputLevel = 2;
/*     */ 
/*     */   
/*     */   private File buildFile;
/*     */ 
/*     */   
/*  95 */   private static PrintStream out = System.out;
/*     */ 
/*     */   
/*  98 */   private static PrintStream err = System.err;
/*     */ 
/*     */   
/* 101 */   private Vector targets = new Vector(5);
/*     */ 
/*     */   
/* 104 */   private Properties definedProps = new Properties();
/*     */ 
/*     */   
/* 107 */   private Vector listeners = new Vector(5);
/*     */ 
/*     */   
/* 110 */   private Vector propertyFiles = new Vector(5);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   private String loggerClassname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   private String inputHandlerClassname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean readyToRun = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean projectHelp = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean isLogFileUsed = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printMessage(Throwable t) {
/* 156 */     String message = t.getMessage();
/* 157 */     if (message != null) {
/* 158 */       System.err.println(message);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void start(String[] args, Properties additionalUserProperties, ClassLoader coreLoader) {
/* 176 */     Main m = null;
/*     */     
/*     */     try {
/* 179 */       Diagnostics.validateVersion();
/* 180 */       m = new Main(args);
/*     */     } catch (Throwable exc) {
/* 182 */       printMessage(exc);
/* 183 */       System.exit(1);
/*     */     } 
/*     */     
/* 186 */     if (additionalUserProperties != null) {
/* 187 */       Enumeration e = additionalUserProperties.keys();
/* 188 */       while (e.hasMoreElements()) {
/* 189 */         String key = e.nextElement();
/* 190 */         String property = additionalUserProperties.getProperty(key);
/* 191 */         m.definedProps.put(key, property);
/*     */       } 
/*     */     } 
/*     */     
/*     */     try {
/* 196 */       m.runBuild(coreLoader);
/* 197 */       System.exit(0);
/*     */     } catch (BuildException be) {
/* 199 */       if (err != System.err) {
/* 200 */         printMessage(be);
/*     */       }
/* 202 */       System.exit(1);
/*     */     } catch (Throwable exc) {
/* 204 */       exc.printStackTrace();
/* 205 */       printMessage(exc);
/* 206 */       System.exit(1);
/*     */     } finally {
/* 208 */       if (isLogFileUsed) {
/* 209 */         if (out != null) {
/*     */           try {
/* 211 */             out.close();
/* 212 */           } catch (Exception e) {}
/*     */         }
/*     */ 
/*     */         
/* 216 */         if (err != null) {
/*     */           try {
/* 218 */             err.close();
/* 219 */           } catch (Exception e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public static void main(String[] args) { start(args, null, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Main(String[] args) throws BuildException {
/* 253 */     String searchForThis = null;
/* 254 */     PrintStream logTo = null;
/*     */ 
/*     */ 
/*     */     
/* 258 */     for (int i = 0; i < args.length; i++) {
/* 259 */       String arg = args[i];
/*     */       
/* 261 */       if (arg.equals(""-help"")) {
/* 262 */         printUsage(); return;
/*     */       } 
/* 264 */       if (arg.equals(""-version"")) {
/* 265 */         printVersion(); return;
/*     */       } 
/* 267 */       if (arg.equals(""-diagnostics"")) {
/* 268 */         Diagnostics.doReport(System.out); return;
/*     */       } 
/* 270 */       if (arg.equals(""-quiet"") || arg.equals(""-q"")) {
/* 271 */         this.msgOutputLevel = 1;
/* 272 */       } else if (arg.equals(""-verbose"") || arg.equals(""-v"")) {
/* 273 */         printVersion();
/* 274 */         this.msgOutputLevel = 3;
/* 275 */       } else if (arg.equals(""-debug"")) {
/* 276 */         printVersion();
/* 277 */         this.msgOutputLevel = 4;
/* 278 */       } else if (arg.equals(""-logfile"") || arg.equals(""-l"")) {
/*     */         try {
/* 280 */           File logFile = new File(args[i + 1]);
/* 281 */           i++;
/* 282 */           logTo = new PrintStream(new FileOutputStream(logFile));
/* 283 */           isLogFileUsed = true;
/*     */         } catch (IOException ioe) {
/* 285 */           String msg = ""Cannot write on the specified log file. Make sure the path exists and you have write permissions."";
/*     */ 
/*     */           
/* 288 */           System.out.println(msg);
/*     */           return;
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 291 */           String msg = ""You must specify a log file when using the -log argument"";
/*     */           
/* 293 */           System.out.println(msg);
/*     */           return;
/*     */         } 
/* 296 */       } else if (arg.equals(""-buildfile"") || arg.equals(""-file"") || arg.equals(""-f"")) {
/*     */         
/*     */         try {
/* 299 */           this.buildFile = new File(args[i + 1]);
/* 300 */           i++;
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 302 */           String msg = ""You must specify a buildfile when using the -buildfile argument"";
/*     */           
/* 304 */           System.out.println(msg);
/*     */           return;
/*     */         } 
/* 307 */       } else if (arg.equals(""-listener"")) {
/*     */         try {
/* 309 */           this.listeners.addElement(args[i + 1]);
/* 310 */           i++;
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 312 */           String msg = ""You must specify a classname when using the -listener argument"";
/*     */           
/* 314 */           System.out.println(msg);
/*     */           return;
/*     */         } 
/* 317 */       } else if (arg.startsWith(""-D"")) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 330 */         String name = arg.substring(2, arg.length());
/* 331 */         String value = null;
/* 332 */         int posEq = name.indexOf(""="");
/* 333 */         if (posEq > 0) {
/* 334 */           value = name.substring(posEq + 1);
/* 335 */           name = name.substring(0, posEq);
/* 336 */         } else if (i < args.length - 1) {
/* 337 */           value = args[++i];
/*     */         } 
/*     */         
/* 340 */         this.definedProps.put(name, value);
/* 341 */       } else if (arg.equals(""-logger"")) {
/* 342 */         if (this.loggerClassname != null) {
/* 343 */           System.out.println(""Only one logger class may  be specified."");
/*     */           
/*     */           return;
/*     */         } 
/*     */         try {
/* 348 */           this.loggerClassname = args[++i];
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 350 */           System.out.println(""You must specify a classname when using the -logger argument"");
/*     */           
/*     */           return;
/*     */         } 
/* 354 */       } else if (arg.equals(""-inputhandler"")) {
/* 355 */         if (this.inputHandlerClassname != null) {
/* 356 */           System.out.println(""Only one input handler class may be specified."");
/*     */           
/*     */           return;
/*     */         } 
/*     */         try {
/* 361 */           this.inputHandlerClassname = args[++i];
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 363 */           System.out.println(""You must specify a classname when using the -inputhandler argument"");
/*     */           
/*     */           return;
/*     */         } 
/* 367 */       } else if (arg.equals(""-emacs"")) {
/* 368 */         this.emacsMode = true;
/* 369 */       } else if (arg.equals(""-projecthelp"")) {
/*     */         
/* 371 */         this.projectHelp = true;
/* 372 */       } else if (arg.equals(""-find"")) {
/*     */         
/* 374 */         if (i < args.length - 1) {
/* 375 */           searchForThis = args[++i];
/*     */         } else {
/* 377 */           searchForThis = ""build.xml"";
/*     */         } 
/* 379 */       } else if (arg.startsWith(""-propertyfile"")) {
/*     */         try {
/* 381 */           this.propertyFiles.addElement(args[i + 1]);
/* 382 */           i++;
/*     */         } catch (ArrayIndexOutOfBoundsException aioobe) {
/* 384 */           String msg = ""You must specify a property filename when using the -propertyfile argument"";
/*     */           
/* 386 */           System.out.println(msg); return;
/*     */         } 
/*     */       } else {
/* 389 */         if (arg.startsWith(""-"")) {
/*     */           
/* 391 */           String msg = ""Unknown argument: "" + arg;
/* 392 */           System.out.println(msg);
/* 393 */           printUsage();
/*     */           
/*     */           return;
/*     */         } 
/* 397 */         this.targets.addElement(arg);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 402 */     if (this.buildFile == null)
/*     */     {
/* 404 */       if (searchForThis != null) {
/* 405 */         this.buildFile = findBuildFile(System.getProperty(""user.dir""), searchForThis);
/*     */       } else {
/*     */         
/* 408 */         this.buildFile = new File(""build.xml"");
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 413 */     if (!this.buildFile.exists()) {
/* 414 */       System.out.println(""Buildfile: "" + this.buildFile + "" does not exist!"");
/* 415 */       throw new BuildException(""Build failed"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 421 */     if (this.buildFile.isDirectory()) {
/* 422 */       System.out.println(""What? Buildfile: "" + this.buildFile + "" is a dir!"");
/* 423 */       throw new BuildException(""Build failed"");
/*     */     } 
/*     */ 
/*     */     
/* 427 */     int propertyFileIndex = 0;
/* 428 */     for (; propertyFileIndex < this.propertyFiles.size(); 
/* 429 */       propertyFileIndex++) {
/* 430 */       String filename = this.propertyFiles.elementAt(propertyFileIndex);
/*     */       
/* 432 */       Properties props = new Properties();
/* 433 */       FileInputStream fis = null;
/*     */       try {
/* 435 */         fis = new FileInputStream(filename);
/* 436 */         props.load(fis);
/*     */       } catch (IOException e) {
/* 438 */         System.out.println(""Could not load property file "" + filename + "": "" + e.getMessage());
/*     */       } finally {
/*     */         
/* 441 */         if (fis != null) {
/*     */           try {
/* 443 */             fis.close();
/* 444 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 450 */       Enumeration propertyNames = props.propertyNames();
/* 451 */       while (propertyNames.hasMoreElements()) {
/* 452 */         String name = (String)propertyNames.nextElement();
/* 453 */         if (this.definedProps.getProperty(name) == null) {
/* 454 */           this.definedProps.put(name, props.getProperty(name));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 459 */     if (this.msgOutputLevel >= 2) {
/* 460 */       System.out.println(""Buildfile: "" + this.buildFile);
/*     */     }
/*     */     
/* 463 */     if (logTo != null) {
/* 464 */       out = err = logTo;
/* 465 */       System.setOut(out);
/* 466 */       System.setErr(out);
/*     */     } 
/* 468 */     this.readyToRun = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File getParentFile(File file) {
/* 480 */     String filename = file.getAbsolutePath();
/* 481 */     file = new File(filename);
/* 482 */     filename = file.getParent();
/*     */     
/* 484 */     if (filename != null && this.msgOutputLevel >= 3) {
/* 485 */       System.out.println(""Searching in "" + filename);
/*     */     }
/*     */     
/* 488 */     return (filename == null) ? null : new File(filename);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File findBuildFile(String start, String suffix) throws BuildException {
/* 510 */     if (this.msgOutputLevel >= 2) {
/* 511 */       System.out.println(""Searching for "" + suffix + "" ..."");
/*     */     }
/*     */     
/* 514 */     File parent = new File((new File(start)).getAbsolutePath());
/* 515 */     File file = new File(parent, suffix);
/*     */ 
/*     */     
/* 518 */     while (!file.exists()) {
/*     */       
/* 520 */       parent = getParentFile(parent);
/*     */ 
/*     */ 
/*     */       
/* 524 */       if (parent == null) {
/* 525 */         throw new BuildException(""Could not locate a build file!"");
/*     */       }
/*     */ 
/*     */       
/* 529 */       file = new File(parent, suffix);
/*     */     } 
/*     */     
/* 532 */     return file;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void runBuild(ClassLoader coreLoader) throws BuildException {
/* 548 */     if (!this.readyToRun) {
/*     */       return;
/*     */     }
/*     */     
/* 552 */     Project project = new Project();
/* 553 */     project.setCoreLoader(coreLoader);
/*     */     
/* 555 */     Throwable error = null;
/*     */     
/*     */     try {
/* 558 */       addBuildListeners(project);
/* 559 */       addInputHandler(project);
/*     */       
/* 561 */       PrintStream err = System.err;
/* 562 */       PrintStream out = System.out;
/*     */ 
/*     */ 
/*     */       
/* 566 */       SecurityManager oldsm = null;
/* 567 */       if (!JavaEnvUtils.isJavaVersion(""1.0"") && !JavaEnvUtils.isJavaVersion(""1.1""))
/*     */       {
/* 569 */         oldsm = System.getSecurityManager();
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 577 */         System.setOut(new PrintStream(new DemuxOutputStream(project, false)));
/* 578 */         System.setErr(new PrintStream(new DemuxOutputStream(project, true)));
/*     */         
/* 580 */         if (!this.projectHelp) {
/* 581 */           project.fireBuildStarted();
/*     */         }
/* 583 */         project.init();
/* 584 */         project.setUserProperty(""ant.version"", getAntVersion());
/*     */ 
/*     */         
/* 587 */         Enumeration e = this.definedProps.keys();
/* 588 */         while (e.hasMoreElements()) {
/* 589 */           String arg = e.nextElement();
/* 590 */           String value = (String)this.definedProps.get(arg);
/* 591 */           project.setUserProperty(arg, value);
/*     */         } 
/*     */         
/* 594 */         project.setUserProperty(""ant.file"", this.buildFile.getAbsolutePath());
/*     */ 
/*     */         
/* 597 */         ProjectHelper.configureProject(project, this.buildFile);
/*     */         
/* 599 */         if (this.projectHelp) {
/* 600 */           printDescription(project);
/* 601 */           printTargets(project, (this.msgOutputLevel > 2));
/*     */           
/*     */           return;
/*     */         } 
/*     */         
/* 606 */         if (this.targets.size() == 0) {
/* 607 */           this.targets.addElement(project.getDefaultTarget());
/*     */         }
/*     */         
/* 610 */         project.executeTargets(this.targets);
/*     */       }
/*     */       finally {
/*     */         
/* 614 */         if (oldsm != null) {
/* 615 */           System.setSecurityManager(oldsm);
/*     */         }
/*     */         
/* 618 */         System.setOut(out);
/* 619 */         System.setErr(err);
/*     */       } 
/*     */     } catch (RuntimeException exc) {
/* 622 */       error = exc = null;
/* 623 */       throw exc;
/*     */     } catch (Error err) {
/* 625 */       error = err = null;
/* 626 */       throw err;
/*     */     } finally {
/* 628 */       if (!this.projectHelp) {
/* 629 */         project.fireBuildFinished(error);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addBuildListeners(Project project) {
/* 644 */     project.addBuildListener(createLogger());
/*     */     
/* 646 */     for (int i = 0; i < this.listeners.size(); i++) {
/* 647 */       String className = this.listeners.elementAt(i);
/*     */       try {
/* 649 */         BuildListener listener = (BuildListener)Class.forName(className).newInstance();
/*     */         
/* 651 */         project.addBuildListener(listener);
/*     */       } catch (Throwable exc) {
/* 653 */         throw new BuildException(""Unable to instantiate listener "" + className, exc);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addInputHandler(Project project) {
/* 666 */     InputHandler handler = null;
/* 667 */     if (this.inputHandlerClassname == null) {
/* 668 */       DefaultInputHandler defaultInputHandler = new DefaultInputHandler();
/*     */     } else {
/*     */       try {
/* 671 */         handler = (InputHandler)Class.forName(this.inputHandlerClassname).newInstance();
/*     */       } catch (ClassCastException e) {
/*     */         
/* 674 */         String msg = ""The specified input handler class "" + this.inputHandlerClassname + "" does not implement the InputHandler interface"";
/*     */ 
/*     */         
/* 677 */         throw new BuildException(msg);
/*     */       } catch (Exception e) {
/*     */         
/* 680 */         String msg = ""Unable to instantiate specified input handler class "" + this.inputHandlerClassname + "" : "" + e.getClass().getName();
/*     */ 
/*     */         
/* 683 */         throw new BuildException(msg);
/*     */       } 
/*     */     } 
/* 686 */     project.setInputHandler(handler);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private BuildLogger createLogger() {
/* 700 */     BuildLogger logger = null;
/* 701 */     if (this.loggerClassname != null) {
/*     */       try {
/* 703 */         logger = (BuildLogger)Class.forName(this.loggerClassname).newInstance();
/*     */       } catch (ClassCastException e) {
/* 705 */         System.err.println(""The specified logger class "" + this.loggerClassname + "" does not implement the BuildLogger interface"");
/*     */ 
/*     */         
/* 708 */         throw new RuntimeException();
/*     */       } catch (Exception e) {
/* 710 */         System.err.println(""Unable to instantiate specified logger class "" + this.loggerClassname + "" : "" + e.getClass().getName());
/*     */ 
/*     */         
/* 713 */         throw new RuntimeException();
/*     */       } 
/*     */     } else {
/* 716 */       logger = new DefaultLogger();
/*     */     } 
/*     */     
/* 719 */     logger.setMessageOutputLevel(this.msgOutputLevel);
/* 720 */     logger.setOutputPrintStream(out);
/* 721 */     logger.setErrorPrintStream(err);
/* 722 */     logger.setEmacsMode(this.emacsMode);
/*     */     
/* 724 */     return logger;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printUsage() {
/* 731 */     String lSep = System.getProperty(""line.separator"");
/* 732 */     StringBuffer msg = new StringBuffer();
/* 733 */     msg.append(""ant [options] [target [target2 [target3] ...]]"" + lSep);
/* 734 */     msg.append(""Options: "" + lSep);
/* 735 */     msg.append(""  -help                  print this message"" + lSep);
/* 736 */     msg.append(""  -projecthelp           print project help information"" + lSep);
/* 737 */     msg.append(""  -version               print the version information and exit"" + lSep);
/* 738 */     msg.append(""  -diagnostics           print information that might be helpful to"" + lSep);
/* 739 */     msg.append(""                         diagnose or report problems."" + lSep);
/* 740 */     msg.append(""  -quiet, -q             be extra quiet"" + lSep);
/* 741 */     msg.append(""  -verbose, -v           be extra verbose"" + lSep);
/* 742 */     msg.append(""  -debug                 print debugging information"" + lSep);
/* 743 */     msg.append(""  -emacs                 produce logging information without adornments"" + lSep);
/* 744 */     msg.append(""  -logfile <file>        use given file for log"" + lSep);
/* 745 */     msg.append(""    -l     <file>                ''"" + lSep);
/* 746 */     msg.append(""  -logger <classname>    the class which is to perform logging"" + lSep);
/* 747 */     msg.append(""  -listener <classname>  add an instance of class as a project listener"" + lSep);
/* 748 */     msg.append(""  -buildfile <file>      use given buildfile"" + lSep);
/* 749 */     msg.append(""    -file    <file>              ''"" + lSep);
/* 750 */     msg.append(""    -f       <file>              ''"" + lSep);
/* 751 */     msg.append(""  -D<property>=<value>   use value for given property"" + lSep);
/* 752 */     msg.append(""  -propertyfile <name>   load all properties from file with -D"" + lSep);
/* 753 */     msg.append(""                         properties taking precedence"" + lSep);
/* 754 */     msg.append(""  -inputhandler <class>  the class which will handle input requests"" + lSep);
/* 755 */     msg.append(""  -find <file>           search for buildfile towards the root of the"" + lSep);
/* 756 */     msg.append(""                         filesystem and use it"" + lSep);
/* 757 */     System.out.println(msg.toString());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 766 */   private static void printVersion() throws BuildException { System.out.println(getAntVersion()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 772 */   private static String antVersion = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized String getAntVersion() throws BuildException {
/* 785 */     if (antVersion == null) {
/*     */       try {
/* 787 */         Properties props = new Properties();
/* 788 */         InputStream in = Main.class.getResourceAsStream(""/org/apache/tools/ant/version.txt"");
/*     */         
/* 790 */         props.load(in);
/* 791 */         in.close();
/*     */         
/* 793 */         StringBuffer msg = new StringBuffer();
/* 794 */         msg.append(""Apache Ant version "");
/* 795 */         msg.append(props.getProperty(""VERSION""));
/* 796 */         msg.append("" compiled on "");
/* 797 */         msg.append(props.getProperty(""DATE""));
/* 798 */         antVersion = msg.toString();
/*     */       } catch (IOException ioe) {
/* 800 */         throw new BuildException(""Could not load the version information:"" + ioe.getMessage());
/*     */       } catch (NullPointerException npe) {
/*     */         
/* 803 */         throw new BuildException(""Could not load the version information."");
/*     */       } 
/*     */     }
/* 806 */     return antVersion;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printDescription(Project project) {
/* 817 */     if (project.getDescription() != null) {
/* 818 */       project.log(project.getDescription());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printTargets(Project project, boolean printSubTargets) {
/* 833 */     int maxLength = 0;
/* 834 */     Enumeration ptargets = project.getTargets().elements();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 840 */     Vector topNames = new Vector();
/* 841 */     Vector topDescriptions = new Vector();
/* 842 */     Vector subNames = new Vector();
/*     */     
/* 844 */     while (ptargets.hasMoreElements()) {
/* 845 */       Target currentTarget = ptargets.nextElement();
/* 846 */       String targetName = currentTarget.getName();
/* 847 */       String targetDescription = currentTarget.getDescription();
/*     */       
/* 849 */       if (targetDescription == null) {
/* 850 */         int pos = findTargetPosition(subNames, targetName);
/* 851 */         subNames.insertElementAt(targetName, pos); continue;
/*     */       } 
/* 853 */       int pos = findTargetPosition(topNames, targetName);
/* 854 */       topNames.insertElementAt(targetName, pos);
/* 855 */       topDescriptions.insertElementAt(targetDescription, pos);
/* 856 */       if (targetName.length() > maxLength) {
/* 857 */         maxLength = targetName.length();
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 862 */     printTargets(project, topNames, topDescriptions, ""Main targets:"", maxLength);
/*     */ 
/*     */ 
/*     */     
/* 866 */     if (topNames.size() == 0) {
/* 867 */       printSubTargets = true;
/*     */     }
/* 869 */     if (printSubTargets) {
/* 870 */       printTargets(project, subNames, null, ""Subtargets:"", 0);
/*     */     }
/*     */     
/* 873 */     String defaultTarget = project.getDefaultTarget();
/* 874 */     if (defaultTarget != null && !"""".equals(defaultTarget))
/*     */     {
/* 876 */       project.log(""Default target: "" + defaultTarget);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static int findTargetPosition(Vector names, String name) {
/* 891 */     int res = names.size();
/* 892 */     for (int i = 0; i < names.size() && res == names.size(); i++) {
/* 893 */       if (name.compareTo(names.elementAt(i)) < 0) {
/* 894 */         res = i;
/*     */       }
/*     */     } 
/* 897 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void printTargets(Project project, Vector names, Vector descriptions, String heading, int maxlen) {
/* 922 */     String lSep = System.getProperty(""line.separator"");
/*     */     
/* 924 */     String spaces = ""    "";
/* 925 */     while (spaces.length() < maxlen) {
/* 926 */       spaces = spaces + spaces;
/*     */     }
/* 928 */     StringBuffer msg = new StringBuffer();
/* 929 */     msg.append(heading + lSep + lSep);
/* 930 */     for (int i = 0; i < names.size(); i++) {
/* 931 */       msg.append("" "");
/* 932 */       msg.append(names.elementAt(i));
/* 933 */       if (descriptions != null) {
/* 934 */         msg.append(spaces.substring(0, maxlen - ((String)names.elementAt(i)).length() + 2));
/* 935 */         msg.append(descriptions.elementAt(i));
/*     */       } 
/* 937 */       msg.append(lSep);
/*     */     } 
/* 939 */     project.log(msg.toString());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Main.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.NoBannerLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class NoBannerLogger
/*     */   extends DefaultLogger
/*     */ {
/*     */   protected String targetName;
/*     */   
/*  87 */   public void targetStarted(BuildEvent event) { this.targetName = event.getTarget().getName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void targetFinished(BuildEvent event) { this.targetName = null; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 110 */     if (event.getPriority() > this.msgOutputLevel || null == event.getMessage() || """".equals(event.getMessage().trim())) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 116 */     if (null != this.targetName) {
/* 117 */       this.out.println(StringUtils.LINE_SEP + this.targetName + "":"");
/* 118 */       this.targetName = null;
/*     */     } 
/*     */     
/* 121 */     super.messageLogged(event);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\NoBannerLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.PathTokenizer,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathTokenizer
/*     */ {
/*     */   private StringTokenizer tokenizer;
/*  82 */   private String lookahead = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private boolean onNetWare = Os.isFamily(""netware"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dosStyleFilesystem;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PathTokenizer(String path) {
/* 103 */     if (this.onNetWare) {
/*     */ 
/*     */       
/* 106 */       this.tokenizer = new StringTokenizer(path, "":;"", true);
/*     */     }
/*     */     else {
/*     */       
/* 110 */       this.tokenizer = new StringTokenizer(path, "":;"", false);
/*     */     } 
/* 112 */     this.dosStyleFilesystem = (File.pathSeparatorChar == ';');
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasMoreTokens() {
/* 124 */     if (this.lookahead != null) {
/* 125 */       return true;
/*     */     }
/*     */     
/* 128 */     return this.tokenizer.hasMoreTokens();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String nextToken() throws NoSuchElementException {
/* 140 */     String token = null;
/* 141 */     if (this.lookahead != null) {
/* 142 */       token = this.lookahead;
/* 143 */       this.lookahead = null;
/*     */     } else {
/* 145 */       token = this.tokenizer.nextToken().trim();
/*     */     } 
/*     */     
/* 148 */     if (!this.onNetWare) {
/* 149 */       if (token.length() == 1 && Character.isLetter(token.charAt(0)) && this.dosStyleFilesystem && this.tokenizer.hasMoreTokens()) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 154 */         String nextToken = this.tokenizer.nextToken().trim();
/* 155 */         if (nextToken.startsWith(""\\"") || nextToken.startsWith(""/"")) {
/*     */ 
/*     */ 
/*     */           
/* 159 */           token = token + "":"" + nextToken;
/*     */         } else {
/*     */           
/* 162 */           this.lookahead = nextToken;
/*     */         }
/*     */       
/*     */       } 
/*     */     } else {
/*     */       
/* 168 */       if (token.equals(File.pathSeparator) || token.equals("":""))
/*     */       {
/* 170 */         token = this.tokenizer.nextToken().trim();
/*     */       }
/*     */       
/* 173 */       if (this.tokenizer.hasMoreTokens()) {
/*     */         
/* 175 */         String nextToken = this.tokenizer.nextToken().trim();
/*     */ 
/*     */         
/* 178 */         if (!nextToken.equals(File.pathSeparator)) {
/* 179 */           if (nextToken.equals("":"")) {
/* 180 */             if (!token.startsWith(""/"") && !token.startsWith(""\\""))
/*     */             {
/* 182 */               String oneMore = this.tokenizer.nextToken().trim();
/* 183 */               if (!oneMore.equals(File.pathSeparator)) {
/* 184 */                 token = token + "":"" + oneMore;
/*     */               } else {
/* 186 */                 token = token + "":"";
/* 187 */                 this.lookahead = oneMore;
/*     */               }
/*     */             
/*     */             }
/*     */           
/*     */           } else {
/*     */             
/* 194 */             this.lookahead = nextToken;
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/* 199 */     return token;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\PathTokenizer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Project,"/*      */ package org.apache.tools.ant;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.lang.reflect.Constructor;
/*      */ import java.lang.reflect.InvocationTargetException;
/*      */ import java.lang.reflect.Modifier;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Properties;
/*      */ import java.util.Stack;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.input.DefaultInputHandler;
/*      */ import org.apache.tools.ant.input.InputHandler;
/*      */ import org.apache.tools.ant.types.FilterSet;
/*      */ import org.apache.tools.ant.types.FilterSetCollection;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Project
/*      */ {
/*      */   public static final int MSG_ERR = 0;
/*      */   public static final int MSG_WARN = 1;
/*      */   public static final int MSG_INFO = 2;
/*      */   public static final int MSG_VERBOSE = 3;
/*      */   public static final int MSG_DEBUG = 4;
/*      */   private static final String VISITING = ""VISITING"";
/*      */   private static final String VISITED = ""VISITED"";
/*      */   public static final String JAVA_1_0 = ""1.0"";
/*      */   public static final String JAVA_1_1 = ""1.1"";
/*      */   public static final String JAVA_1_2 = ""1.2"";
/*      */   public static final String JAVA_1_3 = ""1.3"";
/*      */   public static final String JAVA_1_4 = ""1.4"";
/*      */   public static final String TOKEN_START = ""@"";
/*      */   public static final String TOKEN_END = ""@"";
/*      */   private String name;
/*      */   private String description;
/*  155 */   private Hashtable properties = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  162 */   private Hashtable userProperties = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  169 */   private Hashtable inheritedProperties = new Hashtable();
/*      */   
/*  171 */   private Hashtable references = new Hashtable();
/*      */ 
/*      */   
/*      */   private String defaultTarget;
/*      */   
/*  176 */   private Hashtable dataClassDefinitions = new Hashtable();
/*      */   
/*  178 */   private Hashtable taskClassDefinitions = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  184 */   private Hashtable createdTasks = new Hashtable();
/*      */   
/*  186 */   private Hashtable targets = new Hashtable();
/*      */   
/*  188 */   private FilterSet globalFilterSet = new FilterSet();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  194 */   private FilterSetCollection globalFilters = new FilterSetCollection(this.globalFilterSet);
/*      */ 
/*      */ 
/*      */   
/*      */   private File baseDir;
/*      */ 
/*      */   
/*  201 */   private Vector listeners = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  207 */   private ClassLoader coreLoader = null;
/*      */ 
/*      */   
/*  210 */   private Hashtable threadTasks = new Hashtable();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  215 */   private InputHandler inputHandler = null;
/*      */ 
/*      */   
/*      */   private FileUtils fileUtils;
/*      */ 
/*      */   
/*  221 */   public void setInputHandler(InputHandler handler) { this.inputHandler = handler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  228 */   public InputHandler getInputHandler() { return this.inputHandler; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Project() {
/*  238 */     this.fileUtils = FileUtils.newFileUtils();
/*  239 */     this.inputHandler = (InputHandler)new DefaultInputHandler();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void init() throws BuildException {
/*  251 */     setJavaVersionProperty();
/*      */     
/*  253 */     String defs = ""/org/apache/tools/ant/taskdefs/defaults.properties"";
/*      */     
/*      */     try {
/*  256 */       Properties props = new Properties();
/*  257 */       InputStream in = getClass().getResourceAsStream(defs);
/*  258 */       if (in == null) {
/*  259 */         throw new BuildException(""Can't load default task list"");
/*      */       }
/*  261 */       props.load(in);
/*  262 */       in.close();
/*      */       
/*  264 */       Enumeration enum = props.propertyNames();
/*  265 */       while (enum.hasMoreElements()) {
/*  266 */         String key = (String)enum.nextElement();
/*  267 */         String value = props.getProperty(key);
/*      */         try {
/*  269 */           Class taskClass = Class.forName(value);
/*  270 */           addTaskDefinition(key, taskClass);
/*      */         } catch (NoClassDefFoundError ncdfe) {
/*  272 */           log(""Could not load a dependent class ("" + ncdfe.getMessage() + "") for task "" + key, 4);
/*      */         } catch (ClassNotFoundException cnfe) {
/*      */           
/*  275 */           log(""Could not load class ("" + value + "") for task "" + key, 4);
/*      */         } 
/*      */       } 
/*      */     } catch (IOException ioe) {
/*      */       
/*  280 */       throw new BuildException(""Can't load default task list"");
/*      */     } 
/*      */     
/*  283 */     String dataDefs = ""/org/apache/tools/ant/types/defaults.properties"";
/*      */     
/*      */     try {
/*  286 */       Properties props = new Properties();
/*  287 */       InputStream in = getClass().getResourceAsStream(dataDefs);
/*  288 */       if (in == null) {
/*  289 */         throw new BuildException(""Can't load default datatype list"");
/*      */       }
/*  291 */       props.load(in);
/*  292 */       in.close();
/*      */       
/*  294 */       Enumeration enum = props.propertyNames();
/*  295 */       while (enum.hasMoreElements()) {
/*  296 */         String key = (String)enum.nextElement();
/*  297 */         String value = props.getProperty(key);
/*      */         try {
/*  299 */           Class dataClass = Class.forName(value);
/*  300 */           addDataTypeDefinition(key, dataClass);
/*  301 */         } catch (NoClassDefFoundError ncdfe) {
/*      */         
/*  303 */         } catch (ClassNotFoundException cnfe) {}
/*      */       }
/*      */     
/*      */     } catch (IOException ioe) {
/*      */       
/*  308 */       throw new BuildException(""Can't load default datatype list"");
/*      */     } 
/*      */     
/*  311 */     setSystemProperties();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  322 */   public void setCoreLoader(ClassLoader coreLoader) { this.coreLoader = coreLoader; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  334 */   public ClassLoader getCoreLoader() { return this.coreLoader; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  345 */   public void addBuildListener(BuildListener listener) { this.listeners.addElement(listener); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  356 */   public void removeBuildListener(BuildListener listener) { this.listeners.removeElement(listener); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  365 */   public Vector getBuildListeners() { return (Vector)this.listeners.clone(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  375 */   public void log(String message) { log(message, 2); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  384 */   public void log(String message, int msgLevel) { fireMessageLogged(this, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  394 */   public void log(Task task, String message, int msgLevel) { fireMessageLogged(task, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  405 */   public void log(Target target, String message, int msgLevel) { fireMessageLogged(target, message, msgLevel); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  414 */   public FilterSet getGlobalFilterSet() { return this.globalFilterSet; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void setProperty(String name, String value) {
/*  427 */     if (null != this.userProperties.get(name)) {
/*  428 */       log(""Override ignored for user property "" + name, 3);
/*      */       
/*      */       return;
/*      */     } 
/*  432 */     if (null != this.properties.get(name)) {
/*  433 */       log(""Overriding previous definition of property "" + name, 3);
/*      */     }
/*      */ 
/*      */     
/*  437 */     log(""Setting project property: "" + name + "" -> "" + value, 4);
/*      */     
/*  439 */     this.properties.put(name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void setNewProperty(String name, String value) {
/*  454 */     if (null != this.properties.get(name)) {
/*  455 */       log(""Override ignored for property "" + name, 3);
/*      */       return;
/*      */     } 
/*  458 */     log(""Setting project property: "" + name + "" -> "" + value, 4);
/*      */     
/*  460 */     this.properties.put(name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void setUserProperty(String name, String value) {
/*  473 */     log(""Setting ro project property: "" + name + "" -> "" + value, 4);
/*      */     
/*  475 */     this.userProperties.put(name, value);
/*  476 */     this.properties.put(name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void setInheritedProperty(String name, String value) {
/*  492 */     this.inheritedProperties.put(name, value);
/*  493 */     setUserProperty(name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void setPropertyInternal(String name, String value) {
/*  505 */     if (null != this.userProperties.get(name)) {
/*      */       return;
/*      */     }
/*  508 */     this.properties.put(name, value);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getProperty(String name) {
/*  521 */     if (name == null) {
/*  522 */       return null;
/*      */     }
/*  524 */     String property = (String)this.properties.get(name);
/*  525 */     return property;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  544 */   public String replaceProperties(String value) throws BuildException { return ProjectHelper.replaceProperties(this, value, this.properties); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getUserProperty(String name) {
/*  557 */     if (name == null) {
/*  558 */       return null;
/*      */     }
/*  560 */     String property = (String)this.userProperties.get(name);
/*  561 */     return property;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Hashtable getProperties() {
/*  570 */     Hashtable propertiesCopy = new Hashtable();
/*      */     
/*  572 */     Enumeration e = this.properties.keys();
/*  573 */     while (e.hasMoreElements()) {
/*  574 */       Object name = e.nextElement();
/*  575 */       Object value = this.properties.get(name);
/*  576 */       propertiesCopy.put(name, value);
/*      */     } 
/*      */     
/*  579 */     return propertiesCopy;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Hashtable getUserProperties() {
/*  587 */     Hashtable propertiesCopy = new Hashtable();
/*      */     
/*  589 */     Enumeration e = this.userProperties.keys();
/*  590 */     while (e.hasMoreElements()) {
/*  591 */       Object name = e.nextElement();
/*  592 */       Object value = this.properties.get(name);
/*  593 */       propertiesCopy.put(name, value);
/*      */     } 
/*      */     
/*  596 */     return propertiesCopy;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void copyUserProperties(Project other) {
/*  612 */     Enumeration e = this.userProperties.keys();
/*  613 */     while (e.hasMoreElements()) {
/*  614 */       Object arg = e.nextElement();
/*  615 */       if (this.inheritedProperties.containsKey(arg)) {
/*      */         continue;
/*      */       }
/*  618 */       Object value = this.userProperties.get(arg);
/*  619 */       other.setUserProperty(arg.toString(), value.toString());
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void copyInheritedProperties(Project other) {
/*  636 */     Enumeration e = this.inheritedProperties.keys();
/*  637 */     while (e.hasMoreElements()) {
/*  638 */       String arg = e.nextElement().toString();
/*  639 */       if (other.getUserProperty(arg) != null) {
/*      */         continue;
/*      */       }
/*  642 */       Object value = this.inheritedProperties.get(arg);
/*  643 */       other.setInheritedProperty(arg, value.toString());
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  658 */   public void setDefaultTarget(String defaultTarget) { this.defaultTarget = defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  667 */   public String getDefaultTarget() { return this.defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  678 */   public void setDefault(String defaultTarget) { this.defaultTarget = defaultTarget; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setName(String name) {
/*  689 */     setUserProperty(""ant.project.name"", name);
/*  690 */     this.name = name;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  699 */   public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  709 */   public void setDescription(String description) { this.description = description; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  719 */   public String getDescription() { return this.description; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addFilter(String token, String value) {
/*  735 */     if (token == null) {
/*      */       return;
/*      */     }
/*      */     
/*  739 */     this.globalFilterSet.addFilter(new FilterSet.Filter(token, value));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  755 */   public Hashtable getFilters() { return this.globalFilterSet.getFilterHash(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  768 */   public void setBasedir(String baseD) throws BuildException { setBaseDir(new File(baseD)); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBaseDir(File baseDir) throws BuildException {
/*  781 */     baseDir = this.fileUtils.normalize(baseDir.getAbsolutePath());
/*  782 */     if (!baseDir.exists()) {
/*  783 */       throw new BuildException(""Basedir "" + baseDir.getAbsolutePath() + "" does not exist"");
/*      */     }
/*      */     
/*  786 */     if (!baseDir.isDirectory()) {
/*  787 */       throw new BuildException(""Basedir "" + baseDir.getAbsolutePath() + "" is not a directory"");
/*      */     }
/*      */     
/*  790 */     this.baseDir = baseDir;
/*  791 */     setPropertyInternal(""basedir"", this.baseDir.getPath());
/*  792 */     String msg = ""Project base dir set to: "" + this.baseDir;
/*  793 */     log(msg, 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public File getBaseDir() {
/*  803 */     if (this.baseDir == null) {
/*      */       try {
/*  805 */         setBasedir(""."");
/*      */       } catch (BuildException ex) {
/*  807 */         ex.printStackTrace();
/*      */       } 
/*      */     }
/*  810 */     return this.baseDir;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  820 */   public static String getJavaVersion() { return JavaEnvUtils.getJavaVersion(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setJavaVersionProperty() throws BuildException {
/*  834 */     String javaVersion = JavaEnvUtils.getJavaVersion();
/*  835 */     setPropertyInternal(""ant.java.version"", javaVersion);
/*      */ 
/*      */     
/*  838 */     if (JavaEnvUtils.isJavaVersion(""1.0"")) {
/*  839 */       throw new BuildException(""Ant cannot work on Java 1.0"");
/*      */     }
/*      */     
/*  842 */     log(""Detected Java version: "" + javaVersion + "" in: "" + System.getProperty(""java.home""), 3);
/*      */ 
/*      */     
/*  845 */     log(""Detected OS: "" + System.getProperty(""os.name""), 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSystemProperties() {
/*  853 */     Properties systemP = System.getProperties();
/*  854 */     Enumeration e = systemP.keys();
/*  855 */     while (e.hasMoreElements()) {
/*  856 */       Object name = e.nextElement();
/*  857 */       String value = systemP.get(name).toString();
/*  858 */       setPropertyInternal(name.toString(), value);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addTaskDefinition(String taskName, Class taskClass) throws BuildException {
/*  884 */     Class old = (Class)this.taskClassDefinitions.get(taskName);
/*  885 */     if (null != old) {
/*  886 */       if (old.equals(taskClass)) {
/*  887 */         log(""Ignoring override for task "" + taskName + "", it is already defined by the same class."", 3);
/*      */         
/*      */         return;
/*      */       } 
/*      */       
/*  892 */       int logLevel = 1;
/*  893 */       if (old.getName().equals(taskClass.getName())) {
/*  894 */         ClassLoader oldLoader = old.getClassLoader();
/*  895 */         ClassLoader newLoader = taskClass.getClassLoader();
/*      */         
/*  897 */         if (oldLoader != null && newLoader != null && oldLoader instanceof AntClassLoader && newLoader instanceof AntClassLoader && ((AntClassLoader)oldLoader).getClasspath().equals(((AntClassLoader)newLoader).getClasspath()))
/*      */         {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*  906 */           logLevel = 3;
/*      */         }
/*      */       } 
/*      */       
/*  910 */       log(""Trying to override old definition of task "" + taskName, logLevel);
/*      */       
/*  912 */       invalidateCreatedTasks(taskName);
/*      */     } 
/*      */ 
/*      */     
/*  916 */     String msg = "" +User task: "" + taskName + ""     "" + taskClass.getName();
/*  917 */     log(msg, 4);
/*  918 */     checkTaskClass(taskClass);
/*  919 */     this.taskClassDefinitions.put(taskName, taskClass);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void checkTaskClass(Class taskClass) throws BuildException {
/*  935 */     if (!Modifier.isPublic(taskClass.getModifiers())) {
/*  936 */       String message = taskClass + "" is not public"";
/*  937 */       log(message, 0);
/*  938 */       throw new BuildException(message);
/*      */     } 
/*  940 */     if (Modifier.isAbstract(taskClass.getModifiers())) {
/*  941 */       String message = taskClass + "" is abstract"";
/*  942 */       log(message, 0);
/*  943 */       throw new BuildException(message);
/*      */     } 
/*      */     try {
/*  946 */       taskClass.getConstructor(null);
/*      */     }
/*      */     catch (NoSuchMethodException e) {
/*      */       
/*  950 */       String message = ""No public no-arg constructor in "" + taskClass;
/*      */       
/*  952 */       log(message, 0);
/*  953 */       throw new BuildException(message);
/*      */     } 
/*  955 */     if (!Task.class.isAssignableFrom(taskClass)) {
/*  956 */       TaskAdapter.checkTaskClass(taskClass, this);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  968 */   public Hashtable getTaskDefinitions() { return this.taskClassDefinitions; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDataTypeDefinition(String typeName, Class typeClass) {
/*  985 */     synchronized (this.dataClassDefinitions) {
/*  986 */       Class old = (Class)this.dataClassDefinitions.get(typeName);
/*  987 */       if (null != old) {
/*  988 */         if (old.equals(typeClass)) {
/*  989 */           log(""Ignoring override for datatype "" + typeName + "", it is already defined by the same class."", 3);
/*      */           
/*      */           return;
/*      */         } 
/*      */         
/*  994 */         log(""Trying to override old definition of datatype "" + typeName, 1);
/*      */       } 
/*      */ 
/*      */       
/*  998 */       this.dataClassDefinitions.put(typeName, typeClass);
/*      */     } 
/* 1000 */     String msg = "" +User datatype: "" + typeName + ""     "" + typeClass.getName();
/*      */     
/* 1002 */     log(msg, 4);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1013 */   public Hashtable getDataTypeDefinitions() { return this.dataClassDefinitions; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addTarget(Target target) throws BuildException {
/* 1027 */     String name = target.getName();
/* 1028 */     if (this.targets.get(name) != null) {
/* 1029 */       throw new BuildException(""Duplicate target: `"" + name + ""'"");
/*      */     }
/* 1031 */     addOrReplaceTarget(name, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addTarget(String targetName, Target target) throws BuildException {
/* 1048 */     if (this.targets.get(targetName) != null) {
/* 1049 */       throw new BuildException(""Duplicate target: `"" + targetName + ""'"");
/*      */     }
/* 1051 */     addOrReplaceTarget(targetName, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1062 */   public void addOrReplaceTarget(Target target) { addOrReplaceTarget(target.getName(), target); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addOrReplaceTarget(String targetName, Target target) {
/* 1075 */     String msg = "" +Target: "" + targetName;
/* 1076 */     log(msg, 4);
/* 1077 */     target.setProject(this);
/* 1078 */     this.targets.put(targetName, target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1087 */   public Hashtable getTargets() { return this.targets; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Task createTask(String taskType) throws BuildException {
/* 1103 */     Class c = (Class)this.taskClassDefinitions.get(taskType);
/*      */     
/* 1105 */     if (c == null) {
/* 1106 */       return null;
/*      */     }
/*      */     
/*      */     try {
/* 1110 */       Object o = c.newInstance();
/* 1111 */       Task task = null;
/* 1112 */       if (o instanceof Task) {
/* 1113 */         task = (Task)o;
/*      */       }
/*      */       else {
/*      */         
/* 1117 */         TaskAdapter taskA = new TaskAdapter();
/* 1118 */         taskA.setProxy(o);
/* 1119 */         task = taskA;
/*      */       } 
/* 1121 */       task.setProject(this);
/* 1122 */       task.setTaskType(taskType);
/*      */ 
/*      */       
/* 1125 */       task.setTaskName(taskType);
/*      */       
/* 1127 */       String msg = ""   +Task: "" + taskType;
/* 1128 */       log(msg, 4);
/* 1129 */       addCreatedTask(taskType, task);
/* 1130 */       return task;
/*      */     } catch (Throwable t) {
/* 1132 */       String msg = ""Could not create task of type: "" + taskType + "" due to "" + t;
/*      */       
/* 1134 */       throw new BuildException(msg, t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addCreatedTask(String type, Task task) {
/* 1149 */     synchronized (this.createdTasks) {
/* 1150 */       Vector v = (Vector)this.createdTasks.get(type);
/* 1151 */       if (v == null) {
/* 1152 */         v = new Vector();
/* 1153 */         this.createdTasks.put(type, v);
/*      */       } 
/* 1155 */       v.addElement(task);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void invalidateCreatedTasks(String type) {
/* 1167 */     synchronized (this.createdTasks) {
/* 1168 */       Vector v = (Vector)this.createdTasks.get(type);
/* 1169 */       if (v != null) {
/* 1170 */         Enumeration enum = v.elements();
/* 1171 */         while (enum.hasMoreElements()) {
/* 1172 */           Task t = enum.nextElement();
/* 1173 */           t.markInvalid();
/*      */         } 
/* 1175 */         v.removeAllElements();
/* 1176 */         this.createdTasks.remove(type);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Object createDataType(String typeName) throws BuildException {
/* 1194 */     Class c = (Class)this.dataClassDefinitions.get(typeName);
/*      */     
/* 1196 */     if (c == null) {
/* 1197 */       return null;
/*      */     }
/*      */     
/*      */     try {
/* 1201 */       Constructor ctor = null;
/* 1202 */       boolean noArg = false;
/*      */ 
/*      */       
/*      */       try {
/* 1206 */         ctor = c.getConstructor(new Class[0]);
/* 1207 */         noArg = true;
/*      */       } catch (NoSuchMethodException nse) {
/* 1209 */         ctor = c.getConstructor(new Class[] { Project.class });
/* 1210 */         noArg = false;
/*      */       } 
/*      */       
/* 1213 */       Object o = null;
/* 1214 */       if (noArg) {
/* 1215 */         o = ctor.newInstance(new Object[0]);
/*      */       } else {
/* 1217 */         o = ctor.newInstance(new Object[] { this });
/*      */       } 
/* 1219 */       if (o instanceof ProjectComponent) {
/* 1220 */         ((ProjectComponent)o).setProject(this);
/*      */       }
/* 1222 */       String msg = ""   +DataType: "" + typeName;
/* 1223 */       log(msg, 4);
/* 1224 */       return o;
/*      */     } catch (InvocationTargetException ite) {
/* 1226 */       Throwable t = ite.getTargetException();
/* 1227 */       String msg = ""Could not create datatype of type: "" + typeName + "" due to "" + t;
/*      */       
/* 1229 */       throw new BuildException(msg, t);
/*      */     } catch (Throwable t) {
/* 1231 */       String msg = ""Could not create datatype of type: "" + typeName + "" due to "" + t;
/*      */       
/* 1233 */       throw new BuildException(msg, t);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void executeTargets(Vector targetNames) throws BuildException {
/* 1247 */     Throwable error = null;
/*      */     
/* 1249 */     for (int i = 0; i < targetNames.size(); i++) {
/* 1250 */       executeTarget(targetNames.elementAt(i));
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void demuxOutput(String line, boolean isError) {
/* 1264 */     Task task = (Task)this.threadTasks.get(Thread.currentThread());
/* 1265 */     if (task == null) {
/* 1266 */       fireMessageLogged(this, line, isError ? 0 : 2);
/*      */     }
/* 1268 */     else if (isError) {
/* 1269 */       task.handleErrorOutput(line);
/*      */     } else {
/* 1271 */       task.handleOutput(line);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void executeTarget(String targetName) throws BuildException {
/*      */     Target curtarget;
/* 1289 */     if (targetName == null) {
/* 1290 */       String msg = ""No target specified"";
/* 1291 */       throw new BuildException(msg);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1299 */     Vector sortedTargets = topoSort(targetName, this.targets);
/*      */     
/* 1301 */     int curidx = 0;
/*      */ 
/*      */     
/*      */     do {
/* 1305 */       curtarget = sortedTargets.elementAt(curidx++);
/* 1306 */       curtarget.performTasks();
/* 1307 */     } while (!curtarget.getName().equals(targetName));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1328 */   public File resolveFile(String fileName, File rootDir) { return this.fileUtils.resolveFile(rootDir, fileName); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1344 */   public File resolveFile(String fileName) { return this.fileUtils.resolveFile(this.baseDir, fileName); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static String translatePath(String toProcess) {
/* 1364 */     if (toProcess == null || toProcess.length() == 0) {
/* 1365 */       return """";
/*      */     }
/*      */     
/* 1368 */     StringBuffer path = new StringBuffer(toProcess.length() + 50);
/* 1369 */     PathTokenizer tokenizer = new PathTokenizer(toProcess);
/* 1370 */     while (tokenizer.hasMoreTokens()) {
/* 1371 */       String pathComponent = tokenizer.nextToken();
/* 1372 */       pathComponent = pathComponent.replace('/', File.separatorChar);
/* 1373 */       pathComponent = pathComponent.replace('\\', File.separatorChar);
/* 1374 */       if (path.length() != 0) {
/* 1375 */         path.append(File.pathSeparatorChar);
/*      */       }
/* 1377 */       path.append(pathComponent);
/*      */     } 
/*      */     
/* 1380 */     return path.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1398 */   public void copyFile(String sourceFile, String destFile) throws IOException { this.fileUtils.copyFile(sourceFile, destFile); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1418 */   public void copyFile(String sourceFile, String destFile, boolean filtering) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1442 */   public void copyFile(String sourceFile, String destFile, boolean filtering, boolean overwrite) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1472 */   public void copyFile(String sourceFile, String destFile, boolean filtering, boolean overwrite, boolean preserveLastModified) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite, preserveLastModified); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1490 */   public void copyFile(File sourceFile, File destFile) throws IOException { this.fileUtils.copyFile(sourceFile, destFile); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1510 */   public void copyFile(File sourceFile, File destFile, boolean filtering) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1534 */   public void copyFile(File sourceFile, File destFile, boolean filtering, boolean overwrite) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1564 */   public void copyFile(File sourceFile, File destFile, boolean filtering, boolean overwrite, boolean preserveLastModified) throws IOException { this.fileUtils.copyFile(sourceFile, destFile, filtering ? this.globalFilters : null, overwrite, preserveLastModified); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setFileLastModified(File file, long time) throws BuildException {
/* 1585 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 1586 */       log(""Cannot change the modification time of "" + file + "" in JDK 1.1"", 1);
/*      */       
/*      */       return;
/*      */     } 
/* 1590 */     this.fileUtils.setFileLastModified(file, time);
/* 1591 */     log(""Setting modification time for "" + file, 3);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1607 */   public static boolean toBoolean(String s) { return (s.equalsIgnoreCase(""on"") || s.equalsIgnoreCase(""true"") || s.equalsIgnoreCase(""yes"")); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final Vector topoSort(String root, Hashtable targets) throws BuildException {
/* 1628 */     Vector ret = new Vector();
/* 1629 */     Hashtable state = new Hashtable();
/* 1630 */     Stack visiting = new Stack();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1640 */     tsort(root, targets, state, visiting, ret);
/* 1641 */     log(""Build sequence for target `"" + root + ""' is "" + ret, 3);
/* 1642 */     for (Enumeration en = targets.keys(); en.hasMoreElements(); ) {
/* 1643 */       String curTarget = en.nextElement();
/* 1644 */       String st = (String)state.get(curTarget);
/* 1645 */       if (st == null) {
/* 1646 */         tsort(curTarget, targets, state, visiting, ret); continue;
/* 1647 */       }  if (st == ""VISITING"") {
/* 1648 */         throw new RuntimeException(""Unexpected node in visiting state: "" + curTarget);
/*      */       }
/*      */     } 
/*      */     
/* 1652 */     log(""Complete build sequence is "" + ret, 3);
/* 1653 */     return ret;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private final void tsort(String root, Hashtable targets, Hashtable state, Stack visiting, Vector ret) throws BuildException {
/* 1700 */     state.put(root, ""VISITING"");
/* 1701 */     visiting.push(root);
/*      */     
/* 1703 */     Target target = (Target)targets.get(root);
/*      */ 
/*      */     
/* 1706 */     if (target == null) {
/* 1707 */       StringBuffer sb = new StringBuffer(""Target `"");
/* 1708 */       sb.append(root);
/* 1709 */       sb.append(""' does not exist in this project. "");
/* 1710 */       visiting.pop();
/* 1711 */       if (!visiting.empty()) {
/* 1712 */         String parent = visiting.peek();
/* 1713 */         sb.append(""It is used from target `"");
/* 1714 */         sb.append(parent);
/* 1715 */         sb.append(""'."");
/*      */       } 
/*      */       
/* 1718 */       throw new BuildException(new String(sb));
/*      */     } 
/*      */     
/* 1721 */     for (Enumeration en = target.getDependencies(); en.hasMoreElements(); ) {
/* 1722 */       String cur = en.nextElement();
/* 1723 */       String m = state.get(cur);
/* 1724 */       if (m == null) {
/*      */         
/* 1726 */         tsort(cur, targets, state, visiting, ret); continue;
/* 1727 */       }  if (m == ""VISITING"")
/*      */       {
/* 1729 */         throw makeCircularException(cur, visiting);
/*      */       }
/*      */     } 
/*      */     
/* 1733 */     String p = visiting.pop();
/* 1734 */     if (root != p) {
/* 1735 */       throw new RuntimeException(""Unexpected internal error: expected to pop "" + root + "" but got "" + p);
/*      */     }
/*      */     
/* 1738 */     state.put(root, ""VISITED"");
/* 1739 */     ret.addElement(target);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static BuildException makeCircularException(String end, Stack stk) {
/*      */     String c;
/* 1752 */     StringBuffer sb = new StringBuffer(""Circular dependency: "");
/* 1753 */     sb.append(end);
/*      */     
/*      */     do {
/* 1756 */       c = stk.pop();
/* 1757 */       sb.append("" <- "");
/* 1758 */       sb.append(c);
/* 1759 */     } while (!c.equals(end));
/* 1760 */     return new BuildException(new String(sb));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addReference(String name, Object value) {
/* 1770 */     synchronized (this.references) {
/* 1771 */       Object old = this.references.get(name);
/* 1772 */       if (old == value) {
/*      */         return;
/*      */       }
/*      */       
/* 1776 */       if (old != null) {
/* 1777 */         log(""Overriding previous definition of reference to "" + name, 1);
/*      */       }
/*      */       
/* 1780 */       log(""Adding reference: "" + name + "" -> "" + value, 4);
/* 1781 */       this.references.put(name, value);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1792 */   public Hashtable getReferences() { return this.references; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1805 */   public Object getReference(String key) { return this.references.get(key); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String getElementName(Object element) {
/* 1822 */     Hashtable elements = this.taskClassDefinitions;
/* 1823 */     Class elementClass = element.getClass();
/* 1824 */     String typeName = ""task"";
/* 1825 */     if (!elements.contains(elementClass)) {
/* 1826 */       elements = this.dataClassDefinitions;
/* 1827 */       typeName = ""data type"";
/* 1828 */       if (!elements.contains(elementClass)) {
/* 1829 */         elements = null;
/*      */       }
/*      */     } 
/*      */     
/* 1833 */     if (elements != null) {
/* 1834 */       Enumeration e = elements.keys();
/* 1835 */       while (e.hasMoreElements()) {
/* 1836 */         String name = e.nextElement();
/* 1837 */         Class clazz = (Class)elements.get(name);
/* 1838 */         if (elementClass.equals(clazz)) {
/* 1839 */           return ""The <"" + name + ""> "" + typeName;
/*      */         }
/*      */       } 
/*      */     } 
/*      */     
/* 1844 */     return ""Class "" + elementClass.getName();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void fireBuildStarted() {
/* 1851 */     BuildEvent event = new BuildEvent(this);
/* 1852 */     Vector listeners = getBuildListeners();
/* 1853 */     for (int i = 0; i < listeners.size(); i++) {
/* 1854 */       BuildListener listener = listeners.elementAt(i);
/* 1855 */       listener.buildStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void fireBuildFinished(Throwable exception) {
/* 1866 */     BuildEvent event = new BuildEvent(this);
/* 1867 */     event.setException(exception);
/* 1868 */     Vector listeners = getBuildListeners();
/* 1869 */     for (int i = 0; i < listeners.size(); i++) {
/* 1870 */       BuildListener listener = listeners.elementAt(i);
/* 1871 */       listener.buildFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTargetStarted(Target target) {
/* 1883 */     BuildEvent event = new BuildEvent(target);
/* 1884 */     Vector listeners = getBuildListeners();
/* 1885 */     for (int i = 0; i < listeners.size(); i++) {
/* 1886 */       BuildListener listener = listeners.elementAt(i);
/* 1887 */       listener.targetStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTargetFinished(Target target, Throwable exception) {
/* 1902 */     BuildEvent event = new BuildEvent(target);
/* 1903 */     event.setException(exception);
/* 1904 */     Vector listeners = getBuildListeners();
/* 1905 */     for (int i = 0; i < listeners.size(); i++) {
/* 1906 */       BuildListener listener = listeners.elementAt(i);
/* 1907 */       listener.targetFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTaskStarted(Task task) {
/* 1919 */     registerThreadTask(Thread.currentThread(), task);
/* 1920 */     BuildEvent event = new BuildEvent(task);
/* 1921 */     Vector listeners = getBuildListeners();
/* 1922 */     for (int i = 0; i < listeners.size(); i++) {
/* 1923 */       BuildListener listener = listeners.elementAt(i);
/* 1924 */       listener.taskStarted(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireTaskFinished(Task task, Throwable exception) {
/* 1939 */     registerThreadTask(Thread.currentThread(), null);
/* 1940 */     System.out.flush();
/* 1941 */     System.err.flush();
/* 1942 */     BuildEvent event = new BuildEvent(task);
/* 1943 */     event.setException(exception);
/* 1944 */     Vector listeners = getBuildListeners();
/* 1945 */     for (int i = 0; i < listeners.size(); i++) {
/* 1946 */       BuildListener listener = listeners.elementAt(i);
/* 1947 */       listener.taskFinished(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void fireMessageLoggedEvent(BuildEvent event, String message, int priority) {
/* 1963 */     event.setMessage(message, priority);
/* 1964 */     Vector listeners = getBuildListeners();
/* 1965 */     for (int i = 0; i < listeners.size(); i++) {
/* 1966 */       BuildListener listener = listeners.elementAt(i);
/* 1967 */       listener.messageLogged(event);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Project project, String message, int priority) {
/* 1982 */     BuildEvent event = new BuildEvent(project);
/* 1983 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Target target, String message, int priority) {
/* 1997 */     BuildEvent event = new BuildEvent(target);
/* 1998 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected void fireMessageLogged(Task task, String message, int priority) {
/* 2011 */     BuildEvent event = new BuildEvent(task);
/* 2012 */     fireMessageLoggedEvent(event, message, priority);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public synchronized void registerThreadTask(Thread thread, Task task) {
/* 2024 */     if (task != null) {
/* 2025 */       this.threadTasks.put(thread, task);
/*      */     } else {
/* 2027 */       this.threadTasks.remove(thread);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 2039 */   public Task getThreadTask(Thread thread) { return (Task)this.threadTasks.get(thread); }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Project.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectComponent,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ProjectComponent
/*     */ {
/*  67 */   protected Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void log(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void log(String msg, int msgLevel) {
/* 112 */     if (this.project != null)
/* 113 */       this.project.log(msg, msgLevel); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\ProjectComponent.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.ProjectHelper,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.helper.ProjectHelperImpl;
/*     */ import org.apache.tools.ant.util.LoaderUtils;
/*     */ import org.xml.sax.AttributeList;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ProjectHelper
/*     */ {
/*     */   public static final String HELPER_PROPERTY = ""org.apache.tools.ant.ProjectHelper"";
/*     */   public static final String SERVICE_ID = ""META-INF/services/org.apache.tools.ant.ProjectHelper"";
/*     */   
/*     */   public static void configureProject(Project project, File buildFile) throws BuildException {
/* 116 */     ProjectHelper helper = getProjectHelper();
/* 117 */     helper.parse(project, buildFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void parse(Project project, Object source) throws BuildException { throw new BuildException(""ProjectHelper.parse() must be implemented in a helper plugin "" + getClass().getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ProjectHelper getProjectHelper() throws BuildException {
/* 159 */     ProjectHelper helper = null;
/*     */ 
/*     */     
/* 162 */     String helperClass = System.getProperty(""org.apache.tools.ant.ProjectHelper"");
/*     */     try {
/* 164 */       if (helperClass != null) {
/* 165 */         helper = newHelper(helperClass);
/*     */       }
/*     */     } catch (SecurityException e) {
/* 168 */       System.out.println(""Unable to load ProjectHelper class \"""" + helperClass + "" specified in system property "" + ""org.apache.tools.ant.ProjectHelper"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 175 */     if (helper == null) {
/*     */       try {
/* 177 */         ClassLoader classLoader = getContextClassLoader();
/* 178 */         InputStream is = null;
/* 179 */         if (classLoader != null) {
/* 180 */           is = classLoader.getResourceAsStream(""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */         }
/* 182 */         if (is == null) {
/* 183 */           is = ClassLoader.getSystemResourceAsStream(""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */         }
/*     */         
/* 186 */         if (is != null) {
/*     */           InputStreamReader inputStreamReader;
/*     */ 
/*     */           
/*     */           try {
/* 191 */             inputStreamReader = new InputStreamReader(is, ""UTF-8"");
/*     */           } catch (UnsupportedEncodingException e) {
/* 193 */             inputStreamReader = new InputStreamReader(is);
/*     */           } 
/* 195 */           BufferedReader rd = new BufferedReader(inputStreamReader);
/*     */           
/* 197 */           String helperClassName = rd.readLine();
/* 198 */           rd.close();
/*     */           
/* 200 */           if (helperClassName != null && !"""".equals(helperClassName))
/*     */           {
/*     */             
/* 203 */             helper = newHelper(helperClassName);
/*     */           }
/*     */         } 
/*     */       } catch (Exception ex) {
/* 207 */         System.out.println(""Unable to load ProjectHelper from service \""META-INF/services/org.apache.tools.ant.ProjectHelper"");
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 212 */     if (helper != null) {
/* 213 */       return helper;
/*     */     }
/*     */     
/*     */     try {
/* 217 */       return (ProjectHelper)new ProjectHelperImpl();
/*     */     } catch (Throwable e) {
/* 219 */       String message = ""Unable to load default ProjectHelper due to "" + e.getClass().getName() + "": "" + e.getMessage();
/*     */       
/* 221 */       throw new BuildException(message, e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static ProjectHelper newHelper(String helperClass) throws BuildException {
/* 241 */     ClassLoader classLoader = getContextClassLoader();
/*     */     try {
/* 243 */       Class clazz = null;
/* 244 */       if (classLoader != null) {
/*     */         try {
/* 246 */           clazz = classLoader.loadClass(helperClass);
/* 247 */         } catch (ClassNotFoundException ex) {}
/*     */       }
/*     */ 
/*     */       
/* 251 */       if (clazz == null) {
/* 252 */         clazz = Class.forName(helperClass);
/*     */       }
/* 254 */       return (ProjectHelper)clazz.newInstance();
/*     */     } catch (Exception e) {
/* 256 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getContextClassLoader() {
/* 268 */     if (!LoaderUtils.isContextLoaderAvailable()) {
/* 269 */       return null;
/*     */     }
/*     */     
/* 272 */     return LoaderUtils.getContextClassLoader();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void configure(Object target, AttributeList attrs, Project project) throws BuildException {
/* 292 */     if (target instanceof TaskAdapter) {
/* 293 */       target = ((TaskAdapter)target).getProxy();
/*     */     }
/*     */     
/* 296 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(target.getClass());
/*     */ 
/*     */     
/* 299 */     project.addBuildListener(ih);
/*     */     
/* 301 */     for (int i = 0; i < attrs.getLength(); i++) {
/*     */       
/* 303 */       String value = replaceProperties(project, attrs.getValue(i), project.getProperties());
/*     */       
/*     */       try {
/* 306 */         ih.setAttribute(project, target, attrs.getName(i).toLowerCase(Locale.US), value);
/*     */       
/*     */       }
/*     */       catch (BuildException be) {
/*     */         
/* 311 */         if (!attrs.getName(i).equals(""id"")) {
/* 312 */           throw be;
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public static void addText(Project project, Object target, char[] buf, int start, int count) throws BuildException { addText(project, target, new String(buf, start, count)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void addText(Project project, Object target, String text) throws BuildException {
/* 353 */     if (text == null) {
/*     */       return;
/*     */     }
/*     */     
/* 357 */     if (target instanceof TaskAdapter) {
/* 358 */       target = ((TaskAdapter)target).getProxy();
/*     */     }
/*     */     
/* 361 */     IntrospectionHelper.getHelper(target.getClass()).addText(project, target, text);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void storeChild(Project project, Object parent, Object child, String tag) {
/* 380 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(parent.getClass());
/*     */     
/* 382 */     ih.storeElement(project, parent, child, tag);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public static String replaceProperties(Project project, String value) throws BuildException { return project.replaceProperties(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replaceProperties(Project project, String value, Hashtable keys) throws BuildException {
/* 428 */     if (value == null) {
/* 429 */       return null;
/*     */     }
/*     */     
/* 432 */     Vector fragments = new Vector();
/* 433 */     Vector propertyRefs = new Vector();
/* 434 */     parsePropertyString(value, fragments, propertyRefs);
/*     */     
/* 436 */     StringBuffer sb = new StringBuffer();
/* 437 */     Enumeration i = fragments.elements();
/* 438 */     Enumeration j = propertyRefs.elements();
/* 439 */     while (i.hasMoreElements()) {
/* 440 */       String fragment = i.nextElement();
/* 441 */       if (fragment == null) {
/* 442 */         String propertyName = j.nextElement();
/* 443 */         if (!keys.containsKey(propertyName)) {
/* 444 */           project.log(""Property ${"" + propertyName + ""} has not been set"", 3);
/*     */         }
/*     */         
/* 447 */         fragment = keys.containsKey(propertyName) ? (String)keys.get(propertyName) : (""${"" + propertyName + ""}"");
/*     */       } 
/*     */ 
/*     */       
/* 451 */       sb.append(fragment);
/*     */     } 
/*     */     
/* 454 */     return sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void parsePropertyString(String value, Vector fragments, Vector propertyRefs) throws BuildException {
/* 477 */     int prev = 0;
/*     */     
/*     */     int pos;
/* 480 */     while ((pos = value.indexOf(""$"", prev)) >= 0) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 486 */       if (pos > 0) {
/* 487 */         fragments.addElement(value.substring(prev, pos));
/*     */       }
/*     */ 
/*     */       
/* 491 */       if (pos == value.length() - 1) {
/* 492 */         fragments.addElement(""$"");
/* 493 */         prev = pos + 1; continue;
/* 494 */       }  if (value.charAt(pos + 1) != '{') {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 501 */         if (value.charAt(pos + 1) == '$') {
/*     */           
/* 503 */           fragments.addElement(""$"");
/* 504 */           prev = pos + 2;
/*     */           continue;
/*     */         } 
/* 507 */         fragments.addElement(value.substring(pos, pos + 2));
/* 508 */         prev = pos + 2;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 513 */       int endName = value.indexOf('}', pos);
/* 514 */       if (endName < 0) {
/* 515 */         throw new BuildException(""Syntax error in property: "" + value);
/*     */       }
/*     */       
/* 518 */       String propertyName = value.substring(pos + 2, endName);
/* 519 */       fragments.addElement(null);
/* 520 */       propertyRefs.addElement(propertyName);
/* 521 */       prev = endName + 1;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 526 */     if (prev < value.length())
/* 527 */       fragments.addElement(value.substring(prev)); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\ProjectHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.RuntimeConfigurable,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.xml.sax.AttributeList;
/*     */ import org.xml.sax.helpers.AttributeListImpl;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RuntimeConfigurable
/*     */ {
/*  73 */   private String elementTag = null;
/*     */   
/*  75 */   private Vector children = new Vector();
/*     */   
/*  77 */   private Object wrappedObject = null;
/*     */   
/*     */   private AttributeList attributes;
/*     */   
/*  81 */   private StringBuffer characters = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean proxyConfigured = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable(Object proxy, String elementTag) {
/*  93 */     this.wrappedObject = proxy;
/*  94 */     this.elementTag = elementTag;
/*  95 */     this.proxyConfigured = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void setProxy(Object proxy) {
/* 105 */     this.wrappedObject = proxy;
/* 106 */     this.proxyConfigured = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setAttributes(AttributeList attributes) { this.attributes = new AttributeListImpl(attributes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public AttributeList getAttributes() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void addChild(RuntimeConfigurable child) { this.children.addElement(child); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   RuntimeConfigurable getChild(int index) { return this.children.elementAt(index); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void addText(String data) { this.characters.append(data); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void addText(char[] buf, int start, int count) { addText(new String(buf, start, count)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public String getElementTag() { return this.elementTag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void maybeConfigure(Project p) throws BuildException { maybeConfigure(p, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure(Project p, boolean configureChildren) throws BuildException {
/* 226 */     String id = null;
/*     */     
/* 228 */     if (this.proxyConfigured) {
/*     */       return;
/*     */     }
/*     */     
/* 232 */     if (this.attributes != null) {
/* 233 */       ProjectHelper.configure(this.wrappedObject, this.attributes, p);
/* 234 */       id = this.attributes.getValue(""id"");
/*     */     } 
/* 236 */     if (this.characters.length() != 0) {
/* 237 */       ProjectHelper.addText(p, this.wrappedObject, this.characters.toString());
/*     */     }
/* 239 */     Enumeration enum = this.children.elements();
/* 240 */     while (enum.hasMoreElements()) {
/* 241 */       RuntimeConfigurable child = enum.nextElement();
/*     */       
/* 243 */       if (child.wrappedObject instanceof Task) {
/* 244 */         Task childTask = (Task)child.wrappedObject;
/* 245 */         childTask.setRuntimeConfigurableWrapper(child);
/*     */       } 
/*     */       
/* 248 */       if (configureChildren) {
/* 249 */         if (child.wrappedObject instanceof Task) {
/* 250 */           Task childTask = (Task)child.wrappedObject;
/* 251 */           childTask.maybeConfigure();
/*     */         } else {
/* 253 */           child.maybeConfigure(p);
/*     */         } 
/* 255 */         ProjectHelper.storeChild(p, this.wrappedObject, child.wrappedObject, child.getElementTag().toLowerCase(Locale.US));
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 260 */     if (id != null) {
/* 261 */       p.addReference(id, this.wrappedObject);
/*     */     }
/* 263 */     this.proxyConfigured = true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\RuntimeConfigurable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Target,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Target
/*     */   implements TaskContainer
/*     */ {
/*     */   private String name;
/*  71 */   private String ifCondition = """";
/*     */   
/*  73 */   private String unlessCondition = """";
/*     */   
/*  75 */   private Vector dependencies = new Vector(2);
/*     */   
/*  77 */   private Vector children = new Vector(5);
/*     */   
/*     */   private Project project;
/*     */   
/*  81 */   private String description = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   public void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDepends(String depS) {
/* 115 */     if (depS.length() > 0) {
/* 116 */       StringTokenizer tok = new StringTokenizer(depS, "","", true);
/*     */       
/* 118 */       while (tok.hasMoreTokens()) {
/* 119 */         String token = tok.nextToken().trim();
/*     */ 
/*     */         
/* 122 */         if (token.equals("""") || token.equals("","")) {
/* 123 */           throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" has an empty string for dependency."");
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 128 */         addDependency(token);
/*     */ 
/*     */ 
/*     */         
/* 132 */         if (tok.hasMoreTokens()) {
/* 133 */           token = tok.nextToken();
/* 134 */           if (!tok.hasMoreTokens() || !token.equals("","")) {
/* 135 */             throw new BuildException(""Syntax Error: Depend attribute for target \"""" + getName() + ""\"" ends with a , character"");
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void addTask(Task task) { this.children.addElement(task); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void addDataType(RuntimeConfigurable r) { this.children.addElement(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task[] getTasks() {
/* 188 */     Vector tasks = new Vector(this.children.size());
/* 189 */     Enumeration enum = this.children.elements();
/* 190 */     while (enum.hasMoreElements()) {
/* 191 */       Object o = enum.nextElement();
/* 192 */       if (o instanceof Task) {
/* 193 */         tasks.addElement(o);
/*     */       }
/*     */     } 
/*     */     
/* 197 */     Task[] retval = new Task[tasks.size()];
/* 198 */     tasks.copyInto((Object[])retval);
/* 199 */     return retval;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void addDependency(String dependency) { this.dependencies.addElement(dependency); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 218 */   public Enumeration getDependencies() { return this.dependencies.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setIf(String property) { this.ifCondition = (property == null) ? """" : property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void setUnless(String property) { this.unlessCondition = (property == null) ? """" : property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setDescription(String description) { this.description = description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 273 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 283 */   public String toString() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 303 */     if (testIfCondition() && testUnlessCondition()) {
/* 304 */       Enumeration enum = this.children.elements();
/* 305 */       while (enum.hasMoreElements()) {
/* 306 */         Object o = enum.nextElement();
/* 307 */         if (o instanceof Task) {
/* 308 */           Task task = (Task)o;
/* 309 */           task.perform(); continue;
/*     */         } 
/* 311 */         RuntimeConfigurable r = (RuntimeConfigurable)o;
/* 312 */         r.maybeConfigure(this.project);
/*     */       }
/*     */     
/* 315 */     } else if (!testIfCondition()) {
/* 316 */       this.project.log(this, ""Skipped because property '"" + this.ifCondition + ""' not set."", 3);
/*     */     } else {
/*     */       
/* 319 */       this.project.log(this, ""Skipped because property '"" + this.unlessCondition + ""' set."", 3);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void performTasks() {
/*     */     try {
/* 333 */       this.project.fireTargetStarted(this);
/* 334 */       execute();
/* 335 */       this.project.fireTargetFinished(this, null);
/*     */     } catch (RuntimeException exc) {
/* 337 */       this.project.fireTargetFinished(this, exc);
/* 338 */       throw exc;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void replaceChild(Task el, RuntimeConfigurable o) {
/*     */     int index;
/* 352 */     while ((index = this.children.indexOf(el)) >= 0) {
/* 353 */       this.children.setElementAt(o, index);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void replaceChild(Task el, Task o) {
/*     */     int index;
/* 367 */     while ((index = this.children.indexOf(el)) >= 0) {
/* 368 */       this.children.setElementAt(o, index);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testIfCondition() {
/* 382 */     if ("""".equals(this.ifCondition)) {
/* 383 */       return true;
/*     */     }
/*     */     
/* 386 */     String test = this.project.replaceProperties(this.ifCondition);
/* 387 */     return (this.project.getProperty(test) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean testUnlessCondition() {
/* 400 */     if ("""".equals(this.unlessCondition)) {
/* 401 */       return true;
/*     */     }
/* 403 */     String test = this.project.replaceProperties(this.unlessCondition);
/* 404 */     return (this.project.getProperty(test) == null);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Target.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.Task,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Task
/*     */   extends ProjectComponent
/*     */ {
/*  67 */   protected Target target = null;
/*     */   
/*  69 */   protected String description = null;
/*     */   
/*  71 */   protected Location location = Location.UNKNOWN_LOCATION;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   protected String taskName = null;
/*     */   
/*  82 */   protected String taskType = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RuntimeConfigurable wrapper;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean invalid = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private UnknownElement replacement;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setOwningTarget(Target target) { this.target = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public Target getOwningTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setTaskName(String name) { this.taskName = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public String getTaskName() { return this.taskName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   void setTaskType(String type) { this.taskType = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setDescription(String desc) { this.description = desc; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 165 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public Location getLocation() { return this.location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   public void setLocation(Location location) { this.location = location; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RuntimeConfigurable getRuntimeConfigurableWrapper() {
/* 221 */     if (this.wrapper == null) {
/* 222 */       this.wrapper = new RuntimeConfigurable(this, getTaskName());
/*     */     }
/* 224 */     return this.wrapper;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 240 */   public void setRuntimeConfigurableWrapper(RuntimeConfigurable wrapper) { this.wrapper = wrapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/* 255 */     if (!this.invalid) {
/* 256 */       if (this.wrapper != null) {
/* 257 */         this.wrapper.maybeConfigure(this.project);
/*     */       }
/*     */     } else {
/* 260 */       getReplacement();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   protected void handleOutput(String line) { log(line, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   protected void handleErrorOutput(String line) { log(line, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public void log(String msg) { log(msg, 2); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void log(String msg, int msgLevel) { this.project.log(this, msg, msgLevel); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void perform() {
/* 313 */     if (!this.invalid) {
/*     */       try {
/* 315 */         this.project.fireTaskStarted(this);
/* 316 */         maybeConfigure();
/* 317 */         execute();
/* 318 */         this.project.fireTaskFinished(this, null);
/*     */       } catch (RuntimeException exc) {
/* 320 */         if (exc instanceof BuildException) {
/* 321 */           BuildException be = (BuildException)exc;
/* 322 */           if (be.getLocation() == Location.UNKNOWN_LOCATION) {
/* 323 */             be.setLocation(getLocation());
/*     */           }
/*     */         } 
/* 326 */         this.project.fireTaskFinished(this, exc);
/* 327 */         throw exc;
/*     */       } 
/*     */     } else {
/* 330 */       UnknownElement ue = getReplacement();
/* 331 */       Task task = ue.getTask();
/* 332 */       task.perform();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   final void markInvalid() { this.invalid = true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 350 */   protected final boolean isInvalid() { return this.invalid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private UnknownElement getReplacement() {
/* 366 */     if (this.replacement == null) {
/* 367 */       this.replacement = new UnknownElement(this.taskType);
/* 368 */       this.replacement.setProject(this.project);
/* 369 */       this.replacement.setTaskType(this.taskType);
/* 370 */       this.replacement.setTaskName(this.taskName);
/* 371 */       this.replacement.setLocation(this.location);
/* 372 */       this.replacement.setOwningTarget(this.target);
/* 373 */       this.replacement.setRuntimeConfigurableWrapper(this.wrapper);
/* 374 */       this.wrapper.setProxy(this.replacement);
/* 375 */       this.target.replaceChild(this, this.replacement);
/* 376 */       this.replacement.maybeConfigure();
/*     */     } 
/* 378 */     return this.replacement;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\Task.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskAdapter,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskAdapter
/*     */   extends Task
/*     */ {
/*     */   private Object proxy;
/*     */   
/*     */   public static void checkTaskClass(Class taskClass, Project project) {
/*     */     try {
/*  94 */       Method executeM = taskClass.getMethod(""execute"", null);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  99 */       if (!void.class.equals(executeM.getReturnType())) {
/* 100 */         String message = ""return type of execute() should be void but was \"""" + executeM.getReturnType() + ""\"" in "" + taskClass;
/*     */ 
/*     */         
/* 103 */         project.log(message, 1);
/*     */       } 
/*     */     } catch (NoSuchMethodException e) {
/* 106 */       String message = ""No public execute() in "" + taskClass;
/* 107 */       project.log(message, 0);
/* 108 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 119 */     Method setProjectM = null;
/*     */     try {
/* 121 */       Class c = this.proxy.getClass();
/* 122 */       setProjectM = c.getMethod(""setProject"", new Class[] { Project.class });
/*     */       
/* 124 */       if (setProjectM != null) {
/* 125 */         setProjectM.invoke(this.proxy, new Object[] { this.project });
/*     */       }
/* 127 */     } catch (NoSuchMethodException e) {
/*     */ 
/*     */     
/*     */     } catch (Exception ex) {
/* 131 */       log(""Error setting project in "" + this.proxy.getClass(), 0);
/*     */       
/* 133 */       throw new BuildException(ex);
/*     */     } 
/*     */ 
/*     */     
/* 137 */     Method executeM = null;
/*     */     try {
/* 139 */       Class c = this.proxy.getClass();
/* 140 */       executeM = c.getMethod(""execute"", new Class[0]);
/* 141 */       if (executeM == null) {
/* 142 */         log(""No public execute() in "" + this.proxy.getClass(), 0);
/*     */         
/* 144 */         throw new BuildException(""No public execute() in "" + this.proxy.getClass());
/*     */       } 
/*     */       
/* 147 */       executeM.invoke(this.proxy, null);
/*     */       return;
/*     */     } catch (InvocationTargetException ie) {
/* 150 */       log(""Error in "" + this.proxy.getClass(), 0);
/* 151 */       Throwable t = ie.getTargetException();
/* 152 */       if (t instanceof BuildException) {
/* 153 */         throw (BuildException)t;
/*     */       }
/* 155 */       throw new BuildException(t);
/*     */     } catch (Exception ex) {
/*     */       
/* 158 */       log(""Error in "" + this.proxy.getClass(), 0);
/* 159 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setProxy(Object o) { this.proxy = o; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public Object getProxy() { return this.proxy; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\TaskAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.TaskContainer,"package org.apache.tools.ant;
public interface TaskContainer {
  void addTask(Task paramTask);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\TaskContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.UnknownElement,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnknownElement
/*     */   extends Task
/*     */ {
/*     */   private String elementName;
/*     */   private Object realThing;
/*  83 */   private Vector children = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public UnknownElement(String elementName) { this.elementName = elementName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public String getTag() { return this.elementName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/* 115 */     this.realThing = makeObject(this, this.wrapper);
/*     */     
/* 117 */     this.wrapper.setProxy(this.realThing);
/* 118 */     if (this.realThing instanceof Task) {
/* 119 */       ((Task)this.realThing).setRuntimeConfigurableWrapper(this.wrapper);
/*     */     }
/*     */     
/* 122 */     handleChildren(this.realThing, this.wrapper);
/*     */     
/* 124 */     this.wrapper.maybeConfigure(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String line) {
/* 133 */     if (this.realThing instanceof Task) {
/* 134 */       ((Task)this.realThing).handleOutput(line);
/*     */     } else {
/* 136 */       super.handleOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String line) {
/* 146 */     if (this.realThing instanceof Task) {
/* 147 */       ((Task)this.realThing).handleErrorOutput(line);
/*     */     } else {
/* 149 */       super.handleErrorOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 158 */     if (this.realThing == null)
/*     */     {
/*     */       
/* 161 */       throw new BuildException(""Could not create task of type: "" + this.elementName, this.location);
/*     */     }
/*     */ 
/*     */     
/* 165 */     if (this.realThing instanceof Task) {
/* 166 */       ((Task)this.realThing).execute();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void addChild(UnknownElement child) { this.children.addElement(child); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleChildren(Object parent, RuntimeConfigurable parentWrapper) throws BuildException {
/* 196 */     if (parent instanceof TaskAdapter) {
/* 197 */       parent = ((TaskAdapter)parent).getProxy();
/*     */     }
/*     */     
/* 200 */     Class parentClass = parent.getClass();
/* 201 */     IntrospectionHelper ih = IntrospectionHelper.getHelper(parentClass);
/*     */     
/* 203 */     for (int i = 0; i < this.children.size(); i++) {
/* 204 */       RuntimeConfigurable childWrapper = parentWrapper.getChild(i);
/* 205 */       UnknownElement child = this.children.elementAt(i);
/* 206 */       Object realChild = null;
/*     */       
/* 208 */       if (parent instanceof TaskContainer) {
/* 209 */         realChild = makeTask(child, childWrapper, false);
/* 210 */         ((TaskContainer)parent).addTask((Task)realChild);
/*     */       } else {
/* 212 */         realChild = ih.createElement(this.project, parent, child.getTag());
/*     */       } 
/*     */       
/* 215 */       childWrapper.setProxy(realChild);
/* 216 */       if (parent instanceof TaskContainer) {
/* 217 */         ((Task)realChild).setRuntimeConfigurableWrapper(childWrapper);
/*     */       }
/*     */       
/* 220 */       child.handleChildren(realChild, childWrapper);
/*     */       
/* 222 */       if (parent instanceof TaskContainer) {
/* 223 */         ((Task)realChild).maybeConfigure();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object makeObject(UnknownElement ue, RuntimeConfigurable w) {
/* 239 */     Object o = makeTask(ue, w, true);
/* 240 */     if (o == null) {
/* 241 */       o = this.project.createDataType(ue.getTag());
/*     */     }
/* 243 */     if (o == null) {
/* 244 */       throw getNotFoundException(""task or type"", ue.getTag());
/*     */     }
/* 246 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Task makeTask(UnknownElement ue, RuntimeConfigurable w, boolean onTopLevel) {
/* 266 */     Task task = this.project.createTask(ue.getTag());
/* 267 */     if (task == null && !onTopLevel) {
/* 268 */       throw getNotFoundException(""task"", ue.getTag());
/*     */     }
/*     */     
/* 271 */     if (task != null) {
/* 272 */       task.setLocation(getLocation());
/*     */       
/* 274 */       task.setOwningTarget(this.target);
/* 275 */       task.init();
/*     */     } 
/* 277 */     return task;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected BuildException getNotFoundException(String what, String elementName) {
/* 294 */     String lSep = System.getProperty(""line.separator"");
/* 295 */     String msg = ""Could not create "" + what + "" of type: "" + elementName + ""."" + lSep + lSep + ""Ant could not find the task or a class this "" + ""task relies upon."" + lSep + lSep + ""This is common and has a number of causes; the usual "" + lSep + ""solutions are to read the manual pages then download and"" + lSep + ""install needed JAR files, or fix the build file: "" + lSep + "" - You have misspelt '"" + elementName + ""'."" + lSep + ""   Fix: check your spelling."" + lSep + "" - The task needs an external JAR file to execute"" + lSep + ""   and this is not found at the right place in the classpath."" + lSep + ""   Fix: check the documentation for dependencies."" + lSep + ""   Fix: declare the task."" + lSep + "" - The task is an Ant optional task and optional.jar is absent"" + lSep + ""   Fix: look for optional.jar in ANT_HOME/lib, download if needed"" + lSep + "" - The task was not built into optional.jar as dependent"" + lSep + ""   libraries were not found at build time."" + lSep + ""   Fix: look in the JAR to verify, then rebuild with the needed"" + lSep + ""   libraries, or download a release version from apache.org"" + lSep + "" - The build file was written for a later version of Ant"" + lSep + ""   Fix: upgrade to at least the latest release version of Ant"" + lSep + "" - The task is not an Ant core or optional task "" + lSep + ""   and needs to be declared using <taskdef>."" + lSep + lSep + ""Remember that for JAR files to be visible to Ant tasks implemented"" + lSep + ""in ANT_HOME/lib, the files must be in the same directory or on the"" + lSep + ""classpath"" + lSep + lSep + ""Please neither file bug reports on this problem, nor email the"" + lSep + ""Ant mailing lists, until all of these causes have been explored,"" + lSep + ""as this is not an Ant bug."";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 328 */     return new BuildException(msg, this.location);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 337 */   public String getTaskName() { return (this.realThing == null || !(this.realThing instanceof Task)) ? super.getTaskName() : ((Task)this.realThing).getTaskName(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Task getTask() {
/* 348 */     if (this.realThing instanceof Task) {
/* 349 */       return (Task)this.realThing;
/*     */     }
/* 351 */     return null;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\UnknownElement.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.XmlLogger,"/*     */ package org.apache.tools.ant;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintStream;
/*     */ import java.io.Writer;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import org.apache.tools.ant.util.DOMElementWriter;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.Text;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlLogger
/*     */   implements BuildLogger
/*     */ {
/*  90 */   private int msgOutputLevel = 4;
/*     */   
/*     */   private PrintStream outStream;
/*     */   
/*  94 */   private static final DocumentBuilder builder = getDocumentBuilder();
/*     */   
/*     */   private static final String BUILD_TAG = ""build"";
/*     */   private static final String TARGET_TAG = ""target"";
/*     */   private static final String TASK_TAG = ""task"";
/*     */   private static final String MESSAGE_TAG = ""message"";
/*     */   private static final String NAME_ATTR = ""name"";
/*     */   
/*     */   private static DocumentBuilder getDocumentBuilder() {
/*     */     try {
/* 104 */       return DocumentBuilderFactory.newInstance().newDocumentBuilder();
/*     */     } catch (Exception exc) {
/* 106 */       throw new ExceptionInInitializerError(exc);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String TIME_ATTR = ""time"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String PRIORITY_ATTR = ""priority"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String LOCATION_ATTR = ""location"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String ERROR_ATTR = ""error"";
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String STACKTRACE_TAG = ""stacktrace"";
/*     */ 
/*     */   
/* 132 */   private Document doc = builder.newDocument();
/*     */   
/* 134 */   private Hashtable tasks = new Hashtable();
/*     */   
/* 136 */   private Hashtable targets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   private Hashtable threadStacks = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/* 145 */   private TimedElement buildElement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class TimedElement
/*     */   {
/*     */     private long startTime;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private Element element;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private TimedElement() {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildStarted(BuildEvent event) {
/* 171 */     this.buildElement = new TimedElement();
/* 172 */     this.buildElement.startTime = System.currentTimeMillis();
/* 173 */     this.buildElement.element = this.doc.createElement(""build"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 184 */     long totalTime = System.currentTimeMillis() - this.buildElement.startTime;
/* 185 */     this.buildElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */ 
/*     */     
/* 188 */     if (event.getException() != null) {
/* 189 */       this.buildElement.element.setAttribute(""error"", event.getException().toString());
/*     */ 
/*     */ 
/*     */       
/* 193 */       Throwable t = event.getException();
/* 194 */       Text errText = this.doc.createCDATASection(StringUtils.getStackTrace(t));
/* 195 */       Element stacktrace = this.doc.createElement(""stacktrace"");
/* 196 */       stacktrace.appendChild(errText);
/* 197 */       this.buildElement.element.appendChild(stacktrace);
/*     */     } 
/*     */     
/* 200 */     String outFilename = event.getProject().getProperty(""XmlLogger.file"");
/* 201 */     if (outFilename == null) {
/* 202 */       outFilename = ""log.xml"";
/*     */     }
/* 204 */     String xslUri = event.getProject().getProperty(""ant.XmlLogger.stylesheet.uri"");
/*     */     
/* 206 */     if (xslUri == null) {
/* 207 */       xslUri = ""log.xsl"";
/*     */     }
/* 209 */     Writer out = null;
/*     */ 
/*     */     
/*     */     try {
/* 213 */       OutputStream stream = this.outStream;
/* 214 */       if (stream == null) {
/* 215 */         stream = new FileOutputStream(outFilename);
/*     */       }
/* 217 */       out = new OutputStreamWriter(stream, ""UTF8"");
/* 218 */       out.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>\n"");
/* 219 */       if (xslUri.length() > 0) {
/* 220 */         out.write(""<?xml-stylesheet type=\""text/xsl\"" href=\"""" + xslUri + ""\""?>\n\n"");
/*     */       }
/*     */       
/* 223 */       (new DOMElementWriter()).write(this.buildElement.element, out, 0, ""\t"");
/* 224 */       out.flush();
/*     */     } catch (IOException exc) {
/* 226 */       throw new BuildException(""Unable to write log file"", exc);
/*     */     } finally {
/* 228 */       if (out != null) {
/*     */         try {
/* 230 */           out.close();
/* 231 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */     
/* 235 */     this.buildElement = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Stack getStack() {
/* 243 */     Stack threadStack = (Stack)this.threadStacks.get(Thread.currentThread());
/* 244 */     if (threadStack == null) {
/* 245 */       threadStack = new Stack();
/* 246 */       this.threadStacks.put(Thread.currentThread(), threadStack);
/*     */     } 
/* 248 */     return threadStack;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 260 */     Target target = event.getTarget();
/* 261 */     TimedElement targetElement = new TimedElement();
/* 262 */     targetElement.startTime = System.currentTimeMillis();
/* 263 */     targetElement.element = this.doc.createElement(""target"");
/* 264 */     targetElement.element.setAttribute(""name"", target.getName());
/* 265 */     this.targets.put(target, targetElement);
/* 266 */     getStack().push(targetElement);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {
/* 277 */     Target target = event.getTarget();
/* 278 */     TimedElement targetElement = (TimedElement)this.targets.get(target);
/* 279 */     if (targetElement != null) {
/* 280 */       long totalTime = System.currentTimeMillis() - targetElement.startTime;
/*     */       
/* 282 */       targetElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */ 
/*     */       
/* 285 */       TimedElement parentElement = null;
/* 286 */       Stack threadStack = getStack();
/* 287 */       if (!threadStack.empty()) {
/* 288 */         TimedElement poppedStack = threadStack.pop();
/* 289 */         if (poppedStack != targetElement) {
/* 290 */           throw new RuntimeException(""Mismatch - popped element = "" + poppedStack.element + "" finished target element = "" + targetElement.element);
/*     */         }
/*     */ 
/*     */         
/* 294 */         if (!threadStack.empty()) {
/* 295 */           parentElement = threadStack.peek();
/*     */         }
/*     */       } 
/* 298 */       if (parentElement == null) {
/* 299 */         this.buildElement.element.appendChild(targetElement.element);
/*     */       } else {
/* 301 */         parentElement.element.appendChild(targetElement.element);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskStarted(BuildEvent event) {
/* 315 */     Task task = event.getTask();
/* 316 */     TimedElement taskElement = new TimedElement();
/* 317 */     taskElement.startTime = System.currentTimeMillis();
/* 318 */     taskElement.element = this.doc.createElement(""task"");
/*     */     
/* 320 */     String name = event.getTask().getTaskName();
/* 321 */     taskElement.element.setAttribute(""name"", name);
/* 322 */     taskElement.element.setAttribute(""location"", event.getTask().getLocation().toString());
/*     */     
/* 324 */     this.tasks.put(task, taskElement);
/* 325 */     getStack().push(taskElement);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {
/* 336 */     Task task = event.getTask();
/* 337 */     TimedElement taskElement = (TimedElement)this.tasks.get(task);
/* 338 */     if (taskElement != null) {
/* 339 */       long totalTime = System.currentTimeMillis() - taskElement.startTime;
/* 340 */       taskElement.element.setAttribute(""time"", DefaultLogger.formatTime(totalTime));
/*     */       
/* 342 */       Target target = task.getOwningTarget();
/* 343 */       TimedElement targetElement = null;
/* 344 */       if (target != null) {
/* 345 */         targetElement = (TimedElement)this.targets.get(target);
/*     */       }
/* 347 */       if (targetElement == null) {
/* 348 */         this.buildElement.element.appendChild(taskElement.element);
/*     */       } else {
/* 350 */         targetElement.element.appendChild(taskElement.element);
/*     */       } 
/* 352 */       Stack threadStack = getStack();
/* 353 */       if (!threadStack.empty()) {
/* 354 */         TimedElement poppedStack = threadStack.pop();
/* 355 */         if (poppedStack != taskElement) {
/* 356 */           throw new RuntimeException(""Mismatch - popped element = "" + poppedStack.element + "" finished task element = "" + taskElement.element);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 373 */     int priority = event.getPriority();
/* 374 */     if (priority > this.msgOutputLevel) {
/*     */       return;
/*     */     }
/* 377 */     Element messageElement = this.doc.createElement(""message"");
/*     */     
/* 379 */     String name = ""debug"";
/* 380 */     switch (event.getPriority()) {
/*     */       case 0:
/* 382 */         name = ""error"";
/*     */         break;
/*     */       case 1:
/* 385 */         name = ""warn"";
/*     */         break;
/*     */       case 2:
/* 388 */         name = ""info"";
/*     */         break;
/*     */       default:
/* 391 */         name = ""debug"";
/*     */         break;
/*     */     } 
/* 394 */     messageElement.setAttribute(""priority"", name);
/*     */     
/* 396 */     Text messageText = this.doc.createCDATASection(event.getMessage());
/* 397 */     messageElement.appendChild(messageText);
/*     */     
/* 399 */     TimedElement parentElement = null;
/*     */     
/* 401 */     Task task = event.getTask();
/*     */     
/* 403 */     Target target = event.getTarget();
/* 404 */     if (task != null) {
/* 405 */       parentElement = (TimedElement)this.tasks.get(task);
/*     */     }
/* 407 */     if (parentElement == null && target != null) {
/* 408 */       parentElement = (TimedElement)this.targets.get(target);
/*     */     }
/*     */     
/* 411 */     if (parentElement == null) {
/* 412 */       Stack threadStack = (Stack)this.threadStacks.get(Thread.currentThread());
/*     */       
/* 414 */       if (threadStack != null && 
/* 415 */         !threadStack.empty()) {
/* 416 */         parentElement = threadStack.peek();
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 421 */     if (parentElement != null) {
/* 422 */       parentElement.element.appendChild(messageElement);
/*     */     } else {
/* 424 */       this.buildElement.element.appendChild(messageElement);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 438 */   public void setMessageOutputLevel(int level) { this.msgOutputLevel = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 448 */   public void setOutputPrintStream(PrintStream output) { this.outStream = new PrintStream(output, true); }
/*     */   
/*     */   public void setEmacsMode(boolean emacsMode) {}
/*     */   
/*     */   public void setErrorPrintStream(PrintStream err) {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\XmlLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.BaseFilterReader,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.FilterReader;
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseFilterReader
/*     */   extends FilterReader
/*     */ {
/*     */   private boolean initialized = false;
/*  75 */   private Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public BaseFilterReader() {
/*  86 */     super(new StringReader(new String()));
/*     */     try {
/*  88 */       close();
/*  89 */     } catch (IOException ioe) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public BaseFilterReader(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read(char[] cbuf, int off, int len) throws IOException {
/* 122 */     for (int i = 0; i < len; i++) {
/* 123 */       int ch = read();
/* 124 */       if (ch == -1) {
/* 125 */         if (i == 0) {
/* 126 */           return -1;
/*     */         }
/* 128 */         return i;
/*     */       } 
/*     */       
/* 131 */       cbuf[off + i] = (char)ch;
/*     */     } 
/* 133 */     return len;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final long skip(long n) throws IOException {
/* 148 */     if (n < 0L) {
/* 149 */       throw new IllegalArgumentException(""skip value is negative"");
/*     */     }
/*     */     
/* 152 */     for (long i = 0L; i < n; i++) {
/* 153 */       if (read() == -1) {
/* 154 */         return i;
/*     */       }
/*     */     } 
/* 157 */     return n;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   protected final void setInitialized(boolean initialized) { this.initialized = initialized; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   protected final boolean getInitialized() { return this.initialized; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public final void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   protected final Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final String readLine() throws IOException {
/* 208 */     int ch = this.in.read();
/*     */     
/* 210 */     if (ch == -1) {
/* 211 */       return null;
/*     */     }
/*     */     
/* 214 */     StringBuffer line = new StringBuffer();
/*     */     
/* 216 */     while (ch != -1) {
/* 217 */       line.append((char)ch);
/* 218 */       if (ch == 10) {
/*     */         break;
/*     */       }
/* 221 */       ch = this.in.read();
/*     */     } 
/* 223 */     return line.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   protected final String readFully() throws IOException { return FileUtils.readFully(this.in, 8192); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\BaseFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.BaseParamFilterReader,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Parameterizable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseParamFilterReader
/*     */   extends BaseFilterReader
/*     */   implements Parameterizable
/*     */ {
/*     */   private Parameter[] parameters;
/*     */   
/*     */   public BaseParamFilterReader() {}
/*     */   
/*  88 */   public BaseParamFilterReader(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setParameters(Parameter[] parameters) {
/*  99 */     this.parameters = parameters;
/* 100 */     setInitialized(false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   protected final Parameter[] getParameters() { return this.parameters; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\BaseParamFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ChainableReader,"package org.apache.tools.ant.filters;
import java.io.Reader;
public interface ChainableReader {
  Reader chain(Reader paramReader);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\ChainableReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ClassConstants,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ClassConstants
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   static Class class$(String x0) { 
/*  82 */     try { return Class.forName(x0); } catch (ClassNotFoundException x1) { throw new NoClassDefFoundError(x1.getMessage()); }
/*     */      }
/*     */ 
/*     */   
/*  86 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String JAVA_CLASS_HELPER = ""org.apache.tools.ant.filters.util.JavaClassHelper"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static Class array$B;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public ClassConstants(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 125 */     int ch = -1;
/*     */     
/* 127 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 128 */       this.queuedData = null;
/*     */     }
/*     */     
/* 131 */     if (this.queuedData != null) {
/* 132 */       ch = this.queuedData.charAt(0);
/* 133 */       this.queuedData = this.queuedData.substring(1);
/* 134 */       if (this.queuedData.length() == 0) {
/* 135 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 138 */       String clazz = readFully();
/* 139 */       if (clazz == null) {
/* 140 */         ch = -1;
/*     */       } else {
/* 142 */         byte[] bytes = clazz.getBytes();
/*     */         try {
/* 144 */           Class javaClassHelper = Class.forName(""org.apache.tools.ant.filters.util.JavaClassHelper"");
/*     */           
/* 146 */           if (javaClassHelper != null) {
/* 147 */             Class[] params = { (array$B == null) ? (array$B = class$(""[B"")) : array$B };
/*     */ 
/*     */             
/* 150 */             Method getConstants = javaClassHelper.getMethod(""getConstants"", params);
/*     */             
/* 152 */             Object[] args = { bytes };
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 157 */             StringBuffer sb = (StringBuffer)getConstants.invoke(null, args);
/*     */             
/* 159 */             if (sb.length() > 0) {
/* 160 */               this.queuedData = sb.toString();
/* 161 */               return read();
/*     */             } 
/*     */           } 
/*     */         } catch (ClassNotFoundException cnfe) {
/* 165 */           throw new IOException(cnfe.getMessage());
/*     */         } catch (NoSuchMethodException nsme) {
/* 167 */           throw new IOException(nsme.getMessage());
/*     */         } catch (IllegalAccessException iae) {
/* 169 */           throw new IOException(iae.getMessage());
/*     */         } catch (IllegalArgumentException iarge) {
/* 171 */           throw new IOException(iarge.getMessage());
/*     */         } catch (InvocationTargetException ite) {
/* 173 */           throw new IOException(ite.getMessage());
/*     */         } 
/*     */       } 
/*     */     } 
/* 177 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 191 */     ClassConstants newFilter = new ClassConstants(rdr);
/* 192 */     return newFilter;
/*     */   }
/*     */   
/*     */   public ClassConstants() {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\ClassConstants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ExpandProperties,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ExpandProperties
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  75 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExpandProperties() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public ExpandProperties(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 110 */     int ch = -1;
/*     */     
/* 112 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 113 */       this.queuedData = null;
/*     */     }
/*     */     
/* 116 */     if (this.queuedData != null) {
/* 117 */       ch = this.queuedData.charAt(0);
/* 118 */       this.queuedData = this.queuedData.substring(1);
/* 119 */       if (this.queuedData.length() == 0) {
/* 120 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 123 */       this.queuedData = readFully();
/* 124 */       if (this.queuedData == null) {
/* 125 */         ch = -1;
/*     */       } else {
/* 127 */         Project project = getProject();
/* 128 */         this.queuedData = project.replaceProperties(this.queuedData);
/* 129 */         return read();
/*     */       } 
/*     */     } 
/* 132 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 146 */     ExpandProperties newFilter = new ExpandProperties(rdr);
/* 147 */     newFilter.setProject(getProject());
/* 148 */     return newFilter;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\ExpandProperties.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.HeadFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class HeadFilter
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String LINES_KEY = ""lines"";
/*  81 */   private long linesRead = 0L;
/*     */ 
/*     */   
/*  84 */   private long lines = 10L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public HeadFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   public HeadFilter(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 118 */     if (!getInitialized()) {
/* 119 */       initialize();
/* 120 */       setInitialized(true);
/*     */     } 
/*     */     
/* 123 */     int ch = -1;
/*     */     
/* 125 */     if (this.linesRead < this.lines) {
/*     */       
/* 127 */       ch = this.in.read();
/*     */       
/* 129 */       if (ch == 10) {
/* 130 */         this.linesRead++;
/*     */       }
/*     */     } 
/*     */     
/* 134 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public final void setLines(long lines) { this.lines = lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 152 */   private final long getLines() { return this.lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 166 */     HeadFilter newFilter = new HeadFilter(rdr);
/* 167 */     newFilter.setLines(getLines());
/* 168 */     newFilter.setInitialized(true);
/* 169 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 177 */     Parameter[] params = getParameters();
/* 178 */     if (params != null)
/* 179 */       for (int i = 0; i < params.length; i++) {
/* 180 */         if (""lines"".equals(params[i].getName())) {
/* 181 */           this.lines = (new Long(params[i].getValue())).longValue();
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\HeadFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.LineContains,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LineContains
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String CONTAINS_KEY = ""contains"";
/*  92 */   private Vector contains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LineContains() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public LineContains(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 131 */     if (!getInitialized()) {
/* 132 */       initialize();
/* 133 */       setInitialized(true);
/*     */     } 
/*     */     
/* 136 */     int ch = -1;
/*     */     
/* 138 */     if (this.line != null) {
/* 139 */       ch = this.line.charAt(0);
/* 140 */       if (this.line.length() == 1) {
/* 141 */         this.line = null;
/*     */       } else {
/* 143 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 146 */       String goodLine = null;
/* 147 */       this.line = readLine();
/* 148 */       if (this.line == null) {
/* 149 */         ch = -1;
/*     */       } else {
/* 151 */         int containsSize = this.contains.size();
/* 152 */         for (int i = 0; i < containsSize; i++) {
/* 153 */           String containsStr = this.contains.elementAt(i);
/* 154 */           if (this.line.indexOf(containsStr) == -1) {
/* 155 */             this.line = null;
/*     */             break;
/*     */           } 
/*     */         } 
/* 159 */         return read();
/*     */       } 
/*     */     } 
/*     */     
/* 163 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public final void addConfiguredContains(Contains contains) { this.contains.addElement(contains.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   private void setContains(Vector contains) { this.contains = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   private final Vector getContains() { return this.contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 211 */     LineContains newFilter = new LineContains(rdr);
/* 212 */     newFilter.setContains(getContains());
/* 213 */     newFilter.setInitialized(true);
/* 214 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 221 */     Parameter[] params = getParameters();
/* 222 */     if (params != null) {
/* 223 */       for (int i = 0; i < params.length; i++) {
/* 224 */         if (""contains"".equals(params[i].getType())) {
/* 225 */           this.contains.addElement(params[i].getValue());
/*     */         }
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Contains
/*     */   {
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 246 */     public final void setValue(String contains) { this.value = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 255 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\LineContains.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.LineContainsRegExp,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.RegularExpression;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LineContainsRegExp
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String REGEXP_KEY = ""regexp"";
/*  90 */   private Vector regexps = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LineContainsRegExp() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public LineContainsRegExp(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 130 */     if (!getInitialized()) {
/* 131 */       initialize();
/* 132 */       setInitialized(true);
/*     */     } 
/*     */     
/* 135 */     int ch = -1;
/*     */     
/* 137 */     if (this.line != null) {
/* 138 */       ch = this.line.charAt(0);
/* 139 */       if (this.line.length() == 1) {
/* 140 */         this.line = null;
/*     */       } else {
/* 142 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 145 */       this.line = readLine();
/* 146 */       if (this.line == null) {
/* 147 */         ch = -1;
/*     */       } else {
/* 149 */         int regexpsSize = this.regexps.size();
/* 150 */         for (int i = 0; i < regexpsSize; i++) {
/* 151 */           RegularExpression regexp = this.regexps.elementAt(i);
/*     */           
/* 153 */           Regexp re = regexp.getRegexp(getProject());
/* 154 */           boolean matches = re.matches(this.line);
/* 155 */           if (!matches) {
/* 156 */             this.line = null;
/*     */             
/*     */             break;
/*     */           } 
/*     */         } 
/* 161 */         return read();
/*     */       } 
/*     */     } 
/*     */     
/* 165 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public final void addConfiguredRegexp(RegularExpression regExp) { this.regexps.addElement(regExp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   private void setRegexps(Vector regexps) { this.regexps = regexps; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   private final Vector getRegexps() { return this.regexps; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 216 */     LineContainsRegExp newFilter = new LineContainsRegExp(rdr);
/* 217 */     newFilter.setRegexps(getRegexps());
/* 218 */     newFilter.setInitialized(true);
/* 219 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 226 */     Parameter[] params = getParameters();
/* 227 */     if (params != null)
/* 228 */       for (int i = 0; i < params.length; i++) {
/* 229 */         if (""regexp"".equals(params[i].getType())) {
/* 230 */           String pattern = params[i].getValue();
/* 231 */           RegularExpression regexp = new RegularExpression();
/* 232 */           regexp.setPattern(pattern);
/* 233 */           this.regexps.addElement(regexp);
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\LineContainsRegExp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.PrefixLines,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class PrefixLines
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String PREFIX_KEY = ""prefix"";
/*  82 */   private String prefix = null;
/*     */ 
/*     */   
/*  85 */   private String queuedData = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PrefixLines() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public PrefixLines(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 119 */     if (!getInitialized()) {
/* 120 */       initialize();
/* 121 */       setInitialized(true);
/*     */     } 
/*     */     
/* 124 */     int ch = -1;
/*     */     
/* 126 */     if (this.queuedData != null && this.queuedData.length() == 0) {
/* 127 */       this.queuedData = null;
/*     */     }
/*     */     
/* 130 */     if (this.queuedData != null) {
/* 131 */       ch = this.queuedData.charAt(0);
/* 132 */       this.queuedData = this.queuedData.substring(1);
/* 133 */       if (this.queuedData.length() == 0) {
/* 134 */         this.queuedData = null;
/*     */       }
/*     */     } else {
/* 137 */       this.queuedData = readLine();
/* 138 */       if (this.queuedData == null) {
/* 139 */         ch = -1;
/*     */       } else {
/* 141 */         if (this.prefix != null) {
/* 142 */           this.queuedData = this.prefix + this.queuedData;
/*     */         }
/* 144 */         return read();
/*     */       } 
/*     */     } 
/* 147 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public final void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   private final String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 181 */     PrefixLines newFilter = new PrefixLines(rdr);
/* 182 */     newFilter.setPrefix(getPrefix());
/* 183 */     newFilter.setInitialized(true);
/* 184 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 191 */     Parameter[] params = getParameters();
/* 192 */     if (params != null)
/* 193 */       for (int i = 0; i < params.length; i++) {
/* 194 */         if (""prefix"".equals(params[i].getName())) {
/* 195 */           this.prefix = params[i].getValue();
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\PrefixLines.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.ReplaceTokens,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ReplaceTokens
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final char DEFAULT_BEGIN_TOKEN = '@';
/*     */   private static final char DEFAULT_END_TOKEN = '@';
/*  91 */   private String queuedData = null;
/*     */ 
/*     */   
/*  94 */   private Hashtable hash = new Hashtable();
/*     */ 
/*     */   
/*  97 */   private char beginToken = '@';
/*     */ 
/*     */   
/* 100 */   private char endToken = '@';
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ReplaceTokens() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public ReplaceTokens(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 132 */     if (!getInitialized()) {
/* 133 */       initialize();
/* 134 */       setInitialized(true);
/*     */     } 
/*     */     
/* 137 */     if (this.queuedData != null && this.queuedData.length() > 0) {
/* 138 */       int ch = this.queuedData.charAt(0);
/* 139 */       if (this.queuedData.length() > 1) {
/* 140 */         this.queuedData = this.queuedData.substring(1);
/*     */       } else {
/* 142 */         this.queuedData = null;
/*     */       } 
/* 144 */       return ch;
/*     */     } 
/*     */     
/* 147 */     int ch = this.in.read();
/* 148 */     if (ch == this.beginToken) {
/* 149 */       StringBuffer key = new StringBuffer("""");
/*     */       while (true) {
/* 151 */         ch = this.in.read();
/* 152 */         if (ch != -1)
/* 153 */         { key.append((char)ch);
/*     */ 
/*     */ 
/*     */           
/* 157 */           if (ch == this.endToken)
/*     */             break;  continue; }  break;
/* 159 */       }  if (ch == -1) {
/* 160 */         this.queuedData = this.beginToken + key.toString();
/* 161 */         return read();
/*     */       } 
/* 163 */       key.setLength(key.length() - 1);
/* 164 */       String replaceWith = (String)this.hash.get(key.toString());
/* 165 */       if (replaceWith != null) {
/* 166 */         this.queuedData = replaceWith;
/* 167 */         return read();
/*     */       } 
/* 169 */       this.queuedData = this.beginToken + key.toString() + this.endToken;
/* 170 */       return read();
/*     */     } 
/*     */ 
/*     */     
/* 174 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public final void setBeginToken(char beginToken) { this.beginToken = beginToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   private final char getBeginToken() { return this.beginToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   public final void setEndToken(char endToken) { this.endToken = endToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 210 */   private final char getEndToken() { return this.endToken; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 220 */   public final void addConfiguredToken(Token token) { this.hash.put(token.getKey(), token.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   private void setTokens(Hashtable hash) { this.hash = hash; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 240 */   private final Hashtable getTokens() { return this.hash; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 254 */     ReplaceTokens newFilter = new ReplaceTokens(rdr);
/* 255 */     newFilter.setBeginToken(getBeginToken());
/* 256 */     newFilter.setEndToken(getEndToken());
/* 257 */     newFilter.setTokens(getTokens());
/* 258 */     newFilter.setInitialized(true);
/* 259 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 266 */     Parameter[] params = getParameters();
/* 267 */     if (params != null) {
/* 268 */       for (int i = 0; i < params.length; i++) {
/* 269 */         if (params[i] != null) {
/* 270 */           String type = params[i].getType();
/* 271 */           if (""tokenchar"".equals(type)) {
/* 272 */             String name = params[i].getName();
/* 273 */             if (""begintoken"".equals(name)) {
/* 274 */               this.beginToken = params[i].getValue().charAt(0);
/* 275 */             } else if (""endtoken"".equals(name)) {
/* 276 */               this.endToken = params[i].getValue().charAt(0);
/*     */             } 
/* 278 */           } else if (""token"".equals(type)) {
/* 279 */             String name = params[i].getName();
/* 280 */             String value = params[i].getValue();
/* 281 */             this.hash.put(name, value);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Token
/*     */   {
/*     */     private String key;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 305 */     public final void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 314 */     public final void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 323 */     public final String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 332 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\ReplaceTokens.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StringInputStream,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.StringReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StringInputStream
/*     */   extends InputStream
/*     */ {
/*     */   private StringReader in;
/*     */   
/*  77 */   public StringInputStream(String source) { this.in = new StringReader(source); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public int read() throws IOException { return this.in.read(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public void close() throws IOException { this.in.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void mark(int limit) {
/*     */     try {
/* 111 */       this.in.mark(limit);
/*     */     } catch (IOException ioe) {
/* 113 */       throw new RuntimeException(ioe.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public synchronized void reset() throws IOException { this.in.reset(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public boolean markSupported() { return this.in.markSupported(); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\StringInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripJavaComments,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripJavaComments
/*     */   extends BaseFilterReader
/*     */   implements ChainableReader
/*     */ {
/*  74 */   private int readAheadCh = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean inString = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripJavaComments() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public StripJavaComments(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 112 */     int ch = -1;
/* 113 */     if (this.readAheadCh != -1) {
/* 114 */       ch = this.readAheadCh;
/* 115 */       this.readAheadCh = -1;
/*     */     } else {
/* 117 */       ch = this.in.read();
/* 118 */       if (ch == 34) {
/* 119 */         this.inString = !this.inString;
/*     */       }
/* 121 */       else if (!this.inString && 
/* 122 */         ch == 47) {
/* 123 */         ch = this.in.read();
/* 124 */         if (ch == 47) {
/* 125 */           while (ch != 10 && ch != -1) {
/* 126 */             ch = this.in.read();
/*     */           }
/* 128 */         } else if (ch == 42) {
/* 129 */           while (ch != -1) {
/* 130 */             ch = this.in.read();
/* 131 */             if (ch == 42) {
/* 132 */               ch = this.in.read();
/* 133 */               while (ch == 42 && ch != -1) {
/* 134 */                 ch = this.in.read();
/*     */               }
/*     */               
/* 137 */               if (ch == 47) {
/* 138 */                 ch = read();
/*     */                 break;
/*     */               } 
/*     */             } 
/*     */           } 
/*     */         } else {
/* 144 */           this.readAheadCh = ch;
/* 145 */           ch = 47;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 152 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 167 */     StripJavaComments newFilter = new StripJavaComments(rdr);
/* 168 */     return newFilter;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\StripJavaComments.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripLineBreaks,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripLineBreaks
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String DEFAULT_LINE_BREAKS = ""\r\n"";
/*     */   private static final String LINE_BREAKS_KEY = ""linebreaks"";
/*  88 */   private String lineBreaks = ""\r\n"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripLineBreaks() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public StripLineBreaks(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 120 */     if (!getInitialized()) {
/* 121 */       initialize();
/* 122 */       setInitialized(true);
/*     */     } 
/*     */     
/* 125 */     int ch = this.in.read();
/* 126 */     while (ch != -1 && 
/* 127 */       this.lineBreaks.indexOf(ch) != -1)
/*     */     {
/*     */       
/* 130 */       ch = this.in.read();
/*     */     }
/*     */     
/* 133 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public final void setLineBreaks(String lineBreaks) { this.lineBreaks = lineBreaks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   private final String getLineBreaks() { return this.lineBreaks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 167 */     StripLineBreaks newFilter = new StripLineBreaks(rdr);
/* 168 */     newFilter.setLineBreaks(getLineBreaks());
/* 169 */     newFilter.setInitialized(true);
/* 170 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 177 */     String userDefinedLineBreaks = null;
/* 178 */     Parameter[] params = getParameters();
/* 179 */     if (params != null) {
/* 180 */       for (int i = 0; i < params.length; i++) {
/* 181 */         if (""linebreaks"".equals(params[i].getName())) {
/* 182 */           userDefinedLineBreaks = params[i].getValue();
/*     */           break;
/*     */         } 
/*     */       } 
/*     */     }
/* 187 */     if (userDefinedLineBreaks != null)
/* 188 */       this.lineBreaks = userDefinedLineBreaks; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\StripLineBreaks.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.StripLineComments,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StripLineComments
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String COMMENTS_KEY = ""comment"";
/*  94 */   private Vector comments = new Vector();
/*     */ 
/*     */   
/*  97 */   private String line = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StripLineComments() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public StripLineComments(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 130 */     if (!getInitialized()) {
/* 131 */       initialize();
/* 132 */       setInitialized(true);
/*     */     } 
/*     */     
/* 135 */     int ch = -1;
/*     */     
/* 137 */     if (this.line != null) {
/* 138 */       ch = this.line.charAt(0);
/* 139 */       if (this.line.length() == 1) {
/* 140 */         this.line = null;
/*     */       } else {
/* 142 */         this.line = this.line.substring(1);
/*     */       } 
/*     */     } else {
/* 145 */       this.line = readLine();
/* 146 */       if (this.line == null) {
/* 147 */         ch = -1;
/*     */       } else {
/* 149 */         int commentsSize = this.comments.size();
/* 150 */         for (int i = 0; i < commentsSize; i++) {
/* 151 */           String comment = this.comments.elementAt(i);
/* 152 */           if (this.line.startsWith(comment)) {
/* 153 */             this.line = null;
/*     */             break;
/*     */           } 
/*     */         } 
/* 157 */         return read();
/*     */       } 
/*     */     } 
/*     */     
/* 161 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public final void addConfiguredComment(Comment comment) { this.comments.addElement(comment.getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   private void setComments(Vector comments) { this.comments = comments; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   private final Vector getComments() { return this.comments; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 204 */     StripLineComments newFilter = new StripLineComments(rdr);
/* 205 */     newFilter.setComments(getComments());
/* 206 */     newFilter.setInitialized(true);
/* 207 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 214 */     Parameter[] params = getParameters();
/* 215 */     if (params != null) {
/* 216 */       for (int i = 0; i < params.length; i++) {
/* 217 */         if (""comment"".equals(params[i].getType())) {
/* 218 */           this.comments.addElement(params[i].getValue());
/*     */         }
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Comment
/*     */   {
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 239 */     public final void setValue(String comment) { this.value = comment; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 248 */     public final String getValue() { return this.value; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\StripLineComments.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.TabsToSpaces,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class TabsToSpaces
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final int DEFAULT_TAB_LENGTH = 8;
/*     */   private static final String TAB_LENGTH_KEY = ""tablength"";
/*  86 */   private int tabLength = 8;
/*     */ 
/*     */   
/*  89 */   private int spacesRemaining = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TabsToSpaces() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public TabsToSpaces(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 121 */     if (!getInitialized()) {
/* 122 */       initialize();
/* 123 */       setInitialized(true);
/*     */     } 
/*     */     
/* 126 */     int ch = -1;
/*     */     
/* 128 */     if (this.spacesRemaining > 0) {
/* 129 */       this.spacesRemaining--;
/* 130 */       ch = 32;
/*     */     } else {
/* 132 */       ch = this.in.read();
/* 133 */       if (ch == 9) {
/* 134 */         this.spacesRemaining = this.tabLength - 1;
/* 135 */         ch = 32;
/*     */       } 
/*     */     } 
/* 138 */     return ch;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public final void setTablength(int tabLength) { this.tabLength = tabLength; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   private final int getTablength() { return this.tabLength; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 170 */     TabsToSpaces newFilter = new TabsToSpaces(rdr);
/* 171 */     newFilter.setTablength(getTablength());
/* 172 */     newFilter.setInitialized(true);
/* 173 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 180 */     Parameter[] params = getParameters();
/* 181 */     if (params != null)
/* 182 */       for (int i = 0; i < params.length; i++) {
/* 183 */         if (params[i] != null && 
/* 184 */           ""tablength"".equals(params[i].getName())) {
/* 185 */           this.tabLength = (new Integer(params[i].getValue())).intValue();
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\TabsToSpaces.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.TailFilter,"/*     */ package org.apache.tools.ant.filters;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class TailFilter
/*     */   extends BaseParamFilterReader
/*     */   implements ChainableReader
/*     */ {
/*     */   private static final String LINES_KEY = ""lines"";
/*  83 */   private long linesRead = 0L;
/*     */ 
/*     */   
/*  86 */   private long lines = 10L;
/*     */ 
/*     */   
/*  89 */   private char[] buffer = new char[4096];
/*     */ 
/*     */   
/*  92 */   private int returnedCharPos = -1;
/*     */ 
/*     */   
/*     */   private boolean completedReadAhead = false;
/*     */ 
/*     */   
/*  98 */   private int bufferPos = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TailFilter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public TailFilter(Reader in) { super(in); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int read() throws IOException {
/* 133 */     if (!getInitialized()) {
/* 134 */       initialize();
/* 135 */       setInitialized(true);
/*     */     } 
/*     */     
/* 138 */     if (!this.completedReadAhead) {
/* 139 */       int ch = -1;
/* 140 */       while ((ch = this.in.read()) != -1) {
/* 141 */         if (this.buffer.length == this.bufferPos) {
/* 142 */           if (this.returnedCharPos != -1) {
/* 143 */             char[] tmpBuffer = new char[this.buffer.length];
/* 144 */             System.arraycopy(this.buffer, this.returnedCharPos + 1, tmpBuffer, 0, this.buffer.length - this.returnedCharPos + 1);
/*     */             
/* 146 */             this.buffer = tmpBuffer;
/* 147 */             this.bufferPos -= this.returnedCharPos + 1;
/* 148 */             this.returnedCharPos = -1;
/*     */           } else {
/* 150 */             char[] tmpBuffer = new char[this.buffer.length * 2];
/* 151 */             System.arraycopy(this.buffer, 0, tmpBuffer, 0, this.bufferPos);
/* 152 */             this.buffer = tmpBuffer;
/*     */           } 
/*     */         }
/*     */         
/* 156 */         if (ch == 10 || ch == -1) {
/* 157 */           this.linesRead++;
/*     */           
/* 159 */           if (this.linesRead == this.lines) {
/* 160 */             int i = 0;
/* 161 */             i = this.returnedCharPos + 1;
/* 162 */             for (; this.buffer[i] != '\000' && this.buffer[i] != '\n'; i++);
/*     */             
/* 164 */             this.returnedCharPos = i;
/* 165 */             this.linesRead--;
/*     */           } 
/*     */         } 
/* 168 */         if (ch == -1) {
/*     */           break;
/*     */         }
/*     */         
/* 172 */         this.buffer[this.bufferPos] = (char)ch;
/* 173 */         this.bufferPos++;
/*     */       } 
/* 175 */       this.completedReadAhead = true;
/*     */     } 
/*     */     
/* 178 */     this.returnedCharPos++;
/* 179 */     if (this.returnedCharPos >= this.bufferPos) {
/* 180 */       return -1;
/*     */     }
/* 182 */     return this.buffer[this.returnedCharPos];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public final void setLines(long lines) { this.lines = lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 201 */   private final long getLines() { return this.lines; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader chain(Reader rdr) {
/* 215 */     TailFilter newFilter = new TailFilter(rdr);
/* 216 */     newFilter.setLines(getLines());
/* 217 */     newFilter.setInitialized(true);
/* 218 */     return newFilter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void initialize() {
/* 226 */     Parameter[] params = getParameters();
/* 227 */     if (params != null)
/* 228 */       for (int i = 0; i < params.length; i++) {
/* 229 */         if (""lines"".equals(params[i].getName())) {
/* 230 */           setLines((new Long(params[i].getValue())).longValue());
/*     */           break;
/*     */         } 
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filters\TailFilter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.util.ChainReaderHelper,"/*     */ package org.apache.tools.ant.filters.util;
/*     */ 
/*     */ import java.io.FilterReader;
/*     */ import java.io.IOException;
/*     */ import java.io.Reader;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.filters.BaseFilterReader;
/*     */ import org.apache.tools.ant.filters.ChainableReader;
/*     */ import org.apache.tools.ant.types.AntFilterReader;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Parameterizable;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ChainReaderHelper
/*     */ {
/*     */   public Reader primaryReader;
/*  90 */   public int bufferSize = 8192;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public Vector filterChains = new Vector();
/*     */ 
/*     */   
/*  98 */   private Project project = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public final void setPrimaryReader(Reader rdr) { this.primaryReader = rdr; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public final void setProject(Project project) { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final Project getProject() { return this.project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public final void setBufferSize(int size) { this.bufferSize = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public final void setFilterChains(Vector fchain) { this.filterChains = fchain; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Reader getAssembledReader() throws BuildException {
/* 140 */     if (this.primaryReader == null) {
/* 141 */       throw new BuildException(""primaryReader must not be null."");
/*     */     }
/*     */     
/* 144 */     Reader instream = this.primaryReader;
/* 145 */     int filterReadersCount = this.filterChains.size();
/* 146 */     Vector finalFilters = new Vector();
/*     */     
/* 148 */     for (int i = 0; i < filterReadersCount; i++) {
/* 149 */       FilterChain filterchain = this.filterChains.elementAt(i);
/*     */       
/* 151 */       Vector filterReaders = filterchain.getFilterReaders();
/* 152 */       int readerCount = filterReaders.size();
/* 153 */       for (int j = 0; j < readerCount; j++) {
/* 154 */         finalFilters.addElement(filterReaders.elementAt(j));
/*     */       }
/*     */     } 
/*     */     
/* 158 */     int filtersCount = finalFilters.size();
/*     */     
/* 160 */     if (filtersCount > 0) {
/* 161 */       for (int i = 0; i < filtersCount; i++) {
/* 162 */         Object o = finalFilters.elementAt(i);
/*     */         
/* 164 */         if (o instanceof AntFilterReader) {
/* 165 */           AntFilterReader filter = finalFilters.elementAt(i);
/* 166 */           String className = filter.getClassName();
/* 167 */           Path classpath = filter.getClasspath();
/* 168 */           Project project = filter.getProject();
/* 169 */           if (className != null) {
/*     */             try {
/* 171 */               Class clazz = null;
/* 172 */               if (classpath == null) {
/* 173 */                 clazz = Class.forName(className);
/*     */               } else {
/* 175 */                 AntClassLoader al = new AntClassLoader(project, classpath);
/*     */                 
/* 177 */                 clazz = al.loadClass(className);
/* 178 */                 AntClassLoader.initializeClass(clazz);
/*     */               } 
/* 180 */               if (clazz != null) {
/* 181 */                 if (!FilterReader.class.isAssignableFrom(clazz)) {
/* 182 */                   throw new BuildException(className + "" does not extend java.io.FilterReader"");
/*     */                 }
/*     */                 
/* 185 */                 Constructor[] constructors = (Constructor[])clazz.getConstructors();
/*     */                 
/* 187 */                 int j = 0;
/* 188 */                 for (; j < constructors.length; j++) {
/* 189 */                   Class[] types = constructors[j].getParameterTypes();
/*     */                   
/* 191 */                   if (types.length == 1 && types[0].isAssignableFrom(Reader.class)) {
/*     */                     break;
/*     */                   }
/*     */                 } 
/*     */                 
/* 196 */                 Reader[] rdr = { instream };
/* 197 */                 instream = constructors[j].newInstance((Object[])rdr);
/*     */                 
/* 199 */                 if (Parameterizable.class.isAssignableFrom(clazz)) {
/* 200 */                   Parameter[] params = filter.getParams();
/* 201 */                   ((Parameterizable)instream).setParameters(params);
/*     */                 } 
/*     */               } 
/*     */             } catch (ClassNotFoundException cnfe) {
/*     */               
/* 206 */               throw new BuildException(cnfe);
/*     */             } catch (InstantiationException ie) {
/* 208 */               throw new BuildException(ie);
/*     */             } catch (IllegalAccessException iae) {
/* 210 */               throw new BuildException(iae);
/*     */             } catch (InvocationTargetException ite) {
/* 212 */               throw new BuildException(ite);
/*     */             } 
/*     */           }
/* 215 */         } else if (o instanceof ChainableReader && o instanceof Reader) {
/*     */           
/* 217 */           if (this.project != null && o instanceof BaseFilterReader) {
/* 218 */             ((BaseFilterReader)o).setProject(this.project);
/*     */           }
/* 220 */           instream = ((ChainableReader)o).chain(instream);
/*     */         } 
/*     */       } 
/*     */     }
/* 224 */     return instream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 233 */   public final String readFully(Reader rdr) throws IOException { return FileUtils.readFully(rdr, this.bufferSize); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filter\\util\ChainReaderHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.filters.util.JavaClassHelper,"/*     */ package org.apache.tools.ant.filters.util;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.IOException;
/*     */ import org.apache.bcel.classfile.ClassParser;
/*     */ import org.apache.bcel.classfile.ConstantValue;
/*     */ import org.apache.bcel.classfile.Field;
/*     */ import org.apache.bcel.classfile.JavaClass;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class JavaClassHelper
/*     */ {
/*  72 */   private static final String LS = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final StringBuffer getConstants(byte[] bytes) throws IOException {
/*  79 */     StringBuffer sb = new StringBuffer();
/*  80 */     ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
/*  81 */     ClassParser parser = new ClassParser(bis, """");
/*  82 */     JavaClass javaClass = parser.parse();
/*  83 */     Field[] fields = javaClass.getFields();
/*  84 */     for (int i = 0; i < fields.length; i++) {
/*  85 */       Field field = fields[i];
/*  86 */       if (field != null) {
/*  87 */         ConstantValue cv = field.getConstantValue();
/*  88 */         if (cv != null) {
/*  89 */           String cvs = cv.toString();
/*     */           
/*  91 */           if (cvs.startsWith(""\"""") && cvs.endsWith(""\"""")) {
/*  92 */             cvs = cvs.substring(1, cvs.length() - 1);
/*     */           }
/*  94 */           sb.append(field.getName());
/*  95 */           sb.append('=');
/*  96 */           sb.append(cvs);
/*  97 */           sb.append(LS);
/*     */         } 
/*     */       } 
/*     */     } 
/* 101 */     return sb;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\filter\\util\JavaClassHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.helper.ProjectHelperImpl,"/*      */ package org.apache.tools.ant.helper;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileNotFoundException;
/*      */ import java.io.IOException;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.util.Locale;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.IntrospectionHelper;
/*      */ import org.apache.tools.ant.Location;
/*      */ import org.apache.tools.ant.Project;
/*      */ import org.apache.tools.ant.ProjectHelper;
/*      */ import org.apache.tools.ant.RuntimeConfigurable;
/*      */ import org.apache.tools.ant.Target;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.TaskAdapter;
/*      */ import org.apache.tools.ant.TaskContainer;
/*      */ import org.apache.tools.ant.UnknownElement;
/*      */ import org.apache.tools.ant.util.JAXPUtils;
/*      */ import org.xml.sax.AttributeList;
/*      */ import org.xml.sax.DocumentHandler;
/*      */ import org.xml.sax.HandlerBase;
/*      */ import org.xml.sax.InputSource;
/*      */ import org.xml.sax.Locator;
/*      */ import org.xml.sax.Parser;
/*      */ import org.xml.sax.SAXException;
/*      */ import org.xml.sax.SAXParseException;
/*      */ import org.xml.sax.helpers.XMLReaderAdapter;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ProjectHelperImpl
/*      */   extends ProjectHelper
/*      */ {
/*      */   private Parser parser;
/*      */   private Project project;
/*      */   private File buildFile;
/*      */   private File buildFileParent;
/*      */   private Locator locator;
/*      */   
/*      */   public void parse(Project project, Object source) throws BuildException {
/*  121 */     if (!(source instanceof File)) {
/*  122 */       throw new BuildException(""Only File source supported by default plugin"");
/*      */     }
/*  124 */     File buildFile = (File)source;
/*  125 */     FileInputStream inputStream = null;
/*  126 */     InputSource inputSource = null;
/*      */     
/*  128 */     this.project = project;
/*  129 */     this.buildFile = new File(buildFile.getAbsolutePath());
/*  130 */     this.buildFileParent = new File(this.buildFile.getParent());
/*      */     
/*      */     try {
/*      */       try {
/*  134 */         this.parser = JAXPUtils.getParser();
/*      */       } catch (BuildException e) {
/*  136 */         this.parser = new XMLReaderAdapter(JAXPUtils.getXMLReader());
/*      */       } 
/*      */ 
/*      */       
/*  140 */       String uri = ""file:"" + buildFile.getAbsolutePath().replace('\\', '/');
/*  141 */       for (int index = uri.indexOf('#'); index != -1; index = uri.indexOf('#')) {
/*  142 */         uri = uri.substring(0, index) + ""%23"" + uri.substring(index + 1);
/*      */       }
/*      */       
/*  145 */       inputStream = new FileInputStream(buildFile);
/*  146 */       inputSource = new InputSource(inputStream);
/*  147 */       inputSource.setSystemId(uri);
/*  148 */       project.log(""parsing buildfile "" + buildFile + "" with URI = "" + uri, 3);
/*      */       
/*  150 */       HandlerBase hb = new RootHandler(this);
/*  151 */       this.parser.setDocumentHandler(hb);
/*  152 */       this.parser.setEntityResolver(hb);
/*  153 */       this.parser.setErrorHandler(hb);
/*  154 */       this.parser.setDTDHandler(hb);
/*  155 */       this.parser.parse(inputSource);
/*      */     } catch (SAXParseException exc) {
/*  157 */       Location location = new Location(exc.getSystemId(), exc.getLineNumber(), exc.getColumnNumber());
/*      */ 
/*      */ 
/*      */       
/*  161 */       Throwable t = exc.getException();
/*  162 */       if (t instanceof BuildException) {
/*  163 */         BuildException be = (BuildException)t;
/*  164 */         if (be.getLocation() == Location.UNKNOWN_LOCATION) {
/*  165 */           be.setLocation(location);
/*      */         }
/*  167 */         throw be;
/*      */       } 
/*      */       
/*  170 */       throw new BuildException(exc.getMessage(), t, location);
/*      */     } catch (SAXException exc) {
/*  172 */       Throwable t = exc.getException();
/*  173 */       if (t instanceof BuildException) {
/*  174 */         throw (BuildException)t;
/*      */       }
/*  176 */       throw new BuildException(exc.getMessage(), t);
/*      */     } catch (FileNotFoundException exc) {
/*  178 */       throw new BuildException(exc);
/*      */     } catch (UnsupportedEncodingException exc) {
/*  180 */       throw new BuildException(""Encoding of project file is invalid."", exc);
/*      */     } catch (IOException exc) {
/*      */       
/*  183 */       throw new BuildException(""Error reading project file: "" + exc.getMessage(), exc);
/*      */     } finally {
/*      */       
/*  186 */       if (inputStream != null) {
/*      */         try {
/*  188 */           inputStream.close();
/*  189 */         } catch (IOException ioe) {}
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class AbstractHandler
/*      */     extends HandlerBase
/*      */   {
/*      */     protected DocumentHandler parentHandler;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     ProjectHelperImpl helperImpl;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public AbstractHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) {
/*  236 */       this.parentHandler = parentHandler;
/*  237 */       this.helperImpl = helperImpl;
/*      */ 
/*      */       
/*  240 */       helperImpl.parser.setDocumentHandler(this);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  256 */     public void startElement(String tag, AttributeList attrs) throws SAXParseException { throw new SAXParseException(""Unexpected element \"""" + tag + ""\"""", this.helperImpl.locator); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) throws SAXParseException {
/*  272 */       String s = (new String(buf, start, count)).trim();
/*      */       
/*  274 */       if (s.length() > 0) {
/*  275 */         throw new SAXParseException(""Unexpected text \"""" + s + ""\"""", this.helperImpl.locator);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     protected void finished() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void endElement(String name) throws SAXException {
/*  300 */       finished();
/*      */       
/*  302 */       this.helperImpl.parser.setDocumentHandler(this.parentHandler);
/*      */     }
/*      */   }
/*      */ 
/*      */   
/*      */   static class RootHandler
/*      */     extends HandlerBase
/*      */   {
/*      */     ProjectHelperImpl helperImpl;
/*      */ 
/*      */     
/*  313 */     public RootHandler(ProjectHelperImpl helperImpl) { this.helperImpl = helperImpl; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public InputSource resolveEntity(String publicId, String systemId) {
/*  328 */       this.helperImpl.project.log(""resolving systemId: "" + systemId, 3);
/*      */       
/*  330 */       if (systemId.startsWith(""file:"")) {
/*  331 */         String path = systemId.substring(5);
/*  332 */         int index = path.indexOf(""file:"");
/*      */ 
/*      */ 
/*      */         
/*  336 */         while (index != -1) {
/*  337 */           path = path.substring(0, index) + path.substring(index + 5);
/*  338 */           index = path.indexOf(""file:"");
/*      */         } 
/*      */         
/*  341 */         String entitySystemId = path;
/*  342 */         index = path.indexOf(""%23"");
/*      */         
/*  344 */         while (index != -1) {
/*  345 */           path = path.substring(0, index) + ""#"" + path.substring(index + 3);
/*  346 */           index = path.indexOf(""%23"");
/*      */         } 
/*      */         
/*  349 */         File file = new File(path);
/*  350 */         if (!file.isAbsolute()) {
/*  351 */           file = new File(this.helperImpl.buildFileParent, path);
/*      */         }
/*      */         
/*      */         try {
/*  355 */           InputSource inputSource = new InputSource(new FileInputStream(file));
/*  356 */           inputSource.setSystemId(""file:"" + entitySystemId);
/*  357 */           return inputSource;
/*      */         } catch (FileNotFoundException fne) {
/*  359 */           this.helperImpl.project.log(file.getAbsolutePath() + "" could not be found"", 1);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  364 */       return null;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String tag, AttributeList attrs) throws SAXParseException {
/*  380 */       if (tag.equals(""project"")) {
/*  381 */         (new ProjectHelperImpl.ProjectHandler(this.helperImpl, this)).init(tag, attrs);
/*      */       } else {
/*  383 */         throw new SAXParseException(""Config file is not of expected XML type"", this.helperImpl.locator);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  394 */     public void setDocumentLocator(Locator locator) { this.helperImpl.locator = locator; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class ProjectHandler
/*      */     extends AbstractHandler
/*      */   {
/*  411 */     public ProjectHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { super(helperImpl, parentHandler); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*  431 */       String def = null;
/*  432 */       String name = null;
/*  433 */       String id = null;
/*  434 */       String baseDir = null;
/*      */       
/*  436 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  437 */         String key = attrs.getName(i);
/*  438 */         String value = attrs.getValue(i);
/*      */         
/*  440 */         if (key.equals(""default"")) {
/*  441 */           def = value;
/*  442 */         } else if (key.equals(""name"")) {
/*  443 */           name = value;
/*  444 */         } else if (key.equals(""id"")) {
/*  445 */           id = value;
/*  446 */         } else if (key.equals(""basedir"")) {
/*  447 */           baseDir = value;
/*      */         } else {
/*  449 */           throw new SAXParseException(""Unexpected attribute \"""" + attrs.getName(i) + ""\"""", this.helperImpl.locator);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  454 */       if (def == null) {
/*  455 */         throw new SAXParseException(""The default attribute of project is required"", this.helperImpl.locator);
/*      */       }
/*      */ 
/*      */       
/*  459 */       this.helperImpl.project.setDefaultTarget(def);
/*      */ 
/*      */       
/*  462 */       if (name != null) {
/*  463 */         this.helperImpl.project.setName(name);
/*  464 */         this.helperImpl.project.addReference(name, this.helperImpl.project);
/*      */       } 
/*      */       
/*  467 */       if (id != null) {
/*  468 */         this.helperImpl.project.addReference(id, this.helperImpl.project);
/*      */       }
/*      */       
/*  471 */       if (this.helperImpl.project.getProperty(""basedir"") != null) {
/*  472 */         this.helperImpl.project.setBasedir(this.helperImpl.project.getProperty(""basedir""));
/*      */       }
/*  474 */       else if (baseDir == null) {
/*  475 */         this.helperImpl.project.setBasedir(this.helperImpl.buildFileParent.getAbsolutePath());
/*      */       
/*      */       }
/*  478 */       else if ((new File(baseDir)).isAbsolute()) {
/*  479 */         this.helperImpl.project.setBasedir(baseDir);
/*      */       } else {
/*  481 */         this.helperImpl.project.setBaseDir(this.helperImpl.project.resolveFile(baseDir, this.helperImpl.buildFileParent));
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  505 */       if (name.equals(""taskdef"")) {
/*  506 */         handleTaskdef(name, attrs);
/*  507 */       } else if (name.equals(""typedef"")) {
/*  508 */         handleTypedef(name, attrs);
/*  509 */       } else if (name.equals(""property"")) {
/*  510 */         handleProperty(name, attrs);
/*  511 */       } else if (name.equals(""target"")) {
/*  512 */         handleTarget(name, attrs);
/*  513 */       } else if (this.helperImpl.project.getDataTypeDefinitions().get(name) != null) {
/*  514 */         handleDataType(name, attrs);
/*      */       } else {
/*  516 */         throw new SAXParseException(""Unexpected element \"""" + name + ""\"""", this.helperImpl.locator);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  534 */     private void handleTaskdef(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, null, null, null)).init(name, attrs); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  550 */     private void handleTypedef(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, null, null, null)).init(name, attrs); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  566 */     private void handleProperty(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, null, null, null)).init(name, attrs); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  582 */     private void handleTarget(String tag, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.TargetHandler(this.helperImpl, this)).init(tag, attrs); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  597 */     private void handleDataType(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.DataTypeHandler(this.helperImpl, this)).init(name, attrs); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class TargetHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  616 */     public TargetHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { super(helperImpl, parentHandler); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*  637 */       String name = null;
/*  638 */       String depends = """";
/*  639 */       String ifCond = null;
/*  640 */       String unlessCond = null;
/*  641 */       String id = null;
/*  642 */       String description = null;
/*      */       
/*  644 */       for (int i = 0; i < attrs.getLength(); i++) {
/*  645 */         String key = attrs.getName(i);
/*  646 */         String value = attrs.getValue(i);
/*      */         
/*  648 */         if (key.equals(""name"")) {
/*  649 */           name = value;
/*  650 */         } else if (key.equals(""depends"")) {
/*  651 */           depends = value;
/*  652 */         } else if (key.equals(""if"")) {
/*  653 */           ifCond = value;
/*  654 */         } else if (key.equals(""unless"")) {
/*  655 */           unlessCond = value;
/*  656 */         } else if (key.equals(""id"")) {
/*  657 */           id = value;
/*  658 */         } else if (key.equals(""description"")) {
/*  659 */           description = value;
/*      */         } else {
/*  661 */           throw new SAXParseException(""Unexpected attribute \"""" + key + ""\"""", this.helperImpl.locator);
/*      */         } 
/*      */       } 
/*      */       
/*  665 */       if (name == null) {
/*  666 */         throw new SAXParseException(""target element appears without a name attribute"", this.helperImpl.locator);
/*      */       }
/*      */ 
/*      */       
/*  670 */       this.target = new Target();
/*  671 */       this.target.setName(name);
/*  672 */       this.target.setIf(ifCond);
/*  673 */       this.target.setUnless(unlessCond);
/*  674 */       this.target.setDescription(description);
/*  675 */       this.helperImpl.project.addTarget(name, this.target);
/*      */       
/*  677 */       if (id != null && !id.equals("""")) {
/*  678 */         this.helperImpl.project.addReference(id, this.target);
/*      */       }
/*      */ 
/*      */ 
/*      */       
/*  683 */       if (depends.length() > 0) {
/*  684 */         this.target.setDepends(depends);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  700 */       if (this.helperImpl.project.getDataTypeDefinitions().get(name) != null) {
/*  701 */         (new ProjectHelperImpl.DataTypeHandler(this.helperImpl, this, this.target)).init(name, attrs);
/*      */       } else {
/*  703 */         (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, (TaskContainer)this.target, null, this.target)).init(name, attrs);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class TaskHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private TaskContainer container;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Task task;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private RuntimeConfigurable parentWrapper;
/*      */ 
/*      */ 
/*      */     
/*  734 */     private RuntimeConfigurable wrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public TaskHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, TaskContainer container, RuntimeConfigurable parentWrapper, Target target) {
/*  759 */       super(helperImpl, parentHandler);
/*  760 */       this.container = container;
/*  761 */       this.parentWrapper = parentWrapper;
/*  762 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String tag, AttributeList attrs) throws SAXParseException {
/*      */       try {
/*  783 */         this.task = this.helperImpl.project.createTask(tag);
/*  784 */       } catch (BuildException e) {}
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  789 */       if (this.task == null) {
/*  790 */         this.task = (Task)new UnknownElement(tag);
/*  791 */         this.task.setProject(this.helperImpl.project);
/*      */         
/*  793 */         this.task.setTaskName(tag);
/*      */       } 
/*      */       
/*  796 */       this.task.setLocation(new Location(this.helperImpl.locator.getSystemId(), this.helperImpl.locator.getLineNumber(), this.helperImpl.locator.getColumnNumber()));
/*      */       
/*  798 */       this.helperImpl.configureId(this.task, attrs);
/*      */ 
/*      */       
/*  801 */       if (this.target != null) {
/*  802 */         this.task.setOwningTarget(this.target);
/*  803 */         this.container.addTask(this.task);
/*  804 */         this.task.init();
/*  805 */         this.wrapper = this.task.getRuntimeConfigurableWrapper();
/*  806 */         this.wrapper.setAttributes(attrs);
/*  807 */         if (this.parentWrapper != null) {
/*  808 */           this.parentWrapper.addChild(this.wrapper);
/*      */         }
/*      */       } else {
/*  811 */         this.task.init();
/*  812 */         ProjectHelper.configure(this.task, attrs, this.helperImpl.project);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     protected void finished() {
/*  820 */       if (this.task != null && this.target == null) {
/*  821 */         this.task.execute();
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) throws SAXParseException {
/*  840 */       if (this.wrapper == null) {
/*      */         try {
/*  842 */           ProjectHelper.addText(this.helperImpl.project, this.task, buf, start, count);
/*      */         } catch (BuildException exc) {
/*  844 */           throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */         } 
/*      */       } else {
/*  847 */         this.wrapper.addText(buf, start, count);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/*  865 */       if (this.task instanceof TaskContainer) {
/*      */         
/*  867 */         (new TaskHandler(this.helperImpl, this, (TaskContainer)this.task, this.wrapper, this.target)).init(name, attrs);
/*      */       } else {
/*      */         
/*  870 */         (new ProjectHelperImpl.NestedElementHandler(this.helperImpl, this, this.task, this.wrapper, this.target)).init(name, attrs);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   static class NestedElementHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Object parent;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Object child;
/*      */ 
/*      */ 
/*      */     
/*      */     private RuntimeConfigurable parentWrapper;
/*      */ 
/*      */ 
/*      */     
/*  895 */     private RuntimeConfigurable childWrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Target target;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public NestedElementHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, Object parent, RuntimeConfigurable parentWrapper, Target target) {
/*  920 */       super(helperImpl, parentHandler);
/*      */       
/*  922 */       if (parent instanceof TaskAdapter) {
/*  923 */         this.parent = ((TaskAdapter)parent).getProxy();
/*      */       } else {
/*  925 */         this.parent = parent;
/*      */       } 
/*  927 */       this.parentWrapper = parentWrapper;
/*  928 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String propType, AttributeList attrs) throws SAXParseException {
/*  948 */       Class parentClass = this.parent.getClass();
/*  949 */       IntrospectionHelper ih = IntrospectionHelper.getHelper(parentClass);
/*      */ 
/*      */       
/*      */       try {
/*  953 */         String elementName = propType.toLowerCase(Locale.US);
/*  954 */         if (this.parent instanceof UnknownElement) {
/*  955 */           UnknownElement uc = new UnknownElement(elementName);
/*  956 */           uc.setProject(this.helperImpl.project);
/*  957 */           ((UnknownElement)this.parent).addChild(uc);
/*  958 */           this.child = uc;
/*      */         } else {
/*  960 */           this.child = ih.createElement(this.helperImpl.project, this.parent, elementName);
/*      */         } 
/*      */         
/*  963 */         this.helperImpl.configureId(this.child, attrs);
/*      */         
/*  965 */         if (this.parentWrapper != null) {
/*  966 */           this.childWrapper = new RuntimeConfigurable(this.child, propType);
/*  967 */           this.childWrapper.setAttributes(attrs);
/*  968 */           this.parentWrapper.addChild(this.childWrapper);
/*      */         } else {
/*  970 */           ProjectHelper.configure(this.child, attrs, this.helperImpl.project);
/*  971 */           ih.storeElement(this.helperImpl.project, this.parent, this.child, elementName);
/*      */         } 
/*      */       } catch (BuildException exc) {
/*  974 */         throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) throws SAXParseException {
/*  992 */       if (this.parentWrapper == null) {
/*      */         try {
/*  994 */           ProjectHelper.addText(this.helperImpl.project, this.child, buf, start, count);
/*      */         } catch (BuildException exc) {
/*  996 */           throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */         } 
/*      */       } else {
/*  999 */         this.childWrapper.addText(buf, start, count);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void startElement(String name, AttributeList attrs) throws SAXParseException {
/* 1017 */       if (this.child instanceof TaskContainer) {
/*      */ 
/*      */         
/* 1020 */         (new ProjectHelperImpl.TaskHandler(this.helperImpl, this, (TaskContainer)this.child, this.childWrapper, this.target)).init(name, attrs);
/*      */       } else {
/*      */         
/* 1023 */         (new NestedElementHandler(this.helperImpl, this, this.child, this.childWrapper, this.target)).init(name, attrs);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   static class DataTypeHandler
/*      */     extends AbstractHandler
/*      */   {
/*      */     private Target target;
/*      */ 
/*      */     
/*      */     private Object element;
/*      */     
/* 1038 */     private RuntimeConfigurable wrapper = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1048 */     public DataTypeHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler) { this(helperImpl, parentHandler, null); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public DataTypeHandler(ProjectHelperImpl helperImpl, DocumentHandler parentHandler, Target target) {
/* 1062 */       super(helperImpl, parentHandler);
/* 1063 */       this.target = target;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void init(String propType, AttributeList attrs) throws SAXParseException {
/*      */       try {
/* 1084 */         this.element = this.helperImpl.project.createDataType(propType);
/* 1085 */         if (this.element == null) {
/* 1086 */           throw new BuildException(""Unknown data type "" + propType);
/*      */         }
/*      */         
/* 1089 */         if (this.target != null) {
/* 1090 */           this.wrapper = new RuntimeConfigurable(this.element, propType);
/* 1091 */           this.wrapper.setAttributes(attrs);
/* 1092 */           this.target.addDataType(this.wrapper);
/*      */         } else {
/* 1094 */           ProjectHelper.configure(this.element, attrs, this.helperImpl.project);
/* 1095 */           this.helperImpl.configureId(this.element, attrs);
/*      */         } 
/*      */       } catch (BuildException exc) {
/* 1098 */         throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void characters(char[] buf, int start, int count) throws SAXParseException {
/*      */       try {
/* 1118 */         ProjectHelper.addText(this.helperImpl.project, this.element, buf, start, count);
/*      */       } catch (BuildException exc) {
/* 1120 */         throw new SAXParseException(exc.getMessage(), this.helperImpl.locator, (Exception)exc);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1137 */     public void startElement(String name, AttributeList attrs) throws SAXParseException { (new ProjectHelperImpl.NestedElementHandler(this.helperImpl, this, this.element, this.wrapper, this.target)).init(name, attrs); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void configureId(Object target, AttributeList attr) {
/* 1152 */     String id = attr.getValue(""id"");
/* 1153 */     if (id != null)
/* 1154 */       this.project.addReference(id, target); 
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\helper\ProjectHelperImpl.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.DefaultInputHandler,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DefaultInputHandler
/*     */   implements InputHandler
/*     */ {
/*     */   public void handleInput(InputRequest request) throws BuildException {
/*  85 */     String prompt = getPrompt(request);
/*  86 */     BufferedReader in = new BufferedReader(new InputStreamReader(getInputStream()));
/*     */     
/*     */     do {
/*  89 */       System.out.println(prompt);
/*     */       try {
/*  91 */         String input = in.readLine();
/*  92 */         request.setInput(input);
/*     */       } catch (IOException e) {
/*  94 */         throw new BuildException(""Failed to read input from Console."", e);
/*     */       }
/*     */     
/*  97 */     } while (!request.isInputValid());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getPrompt(InputRequest request) {
/* 110 */     String prompt = request.getPrompt();
/* 111 */     if (request instanceof MultipleChoiceInputRequest) {
/* 112 */       StringBuffer sb = new StringBuffer(prompt);
/* 113 */       sb.append(""("");
/* 114 */       Enumeration enum = ((MultipleChoiceInputRequest)request).getChoices().elements();
/*     */       
/* 116 */       boolean first = true;
/* 117 */       while (enum.hasMoreElements()) {
/* 118 */         if (!first) {
/* 119 */           sb.append("","");
/*     */         }
/* 121 */         sb.append(enum.nextElement());
/* 122 */         first = false;
/*     */       } 
/* 124 */       sb.append("")"");
/* 125 */       prompt = sb.toString();
/*     */     } 
/* 127 */     return prompt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   protected InputStream getInputStream() { return System.in; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\input\DefaultInputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.InputHandler,"package org.apache.tools.ant.input;
import org.apache.tools.ant.BuildException;
public interface InputHandler {
  void handleInput(InputRequest paramInputRequest) throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\input\InputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.InputRequest,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class InputRequest
/*     */ {
/*     */   private String prompt;
/*     */   private String input;
/*     */   
/*     */   public InputRequest(String prompt) {
/*  72 */     if (prompt == null) {
/*  73 */       throw new IllegalArgumentException(""prompt must not be null"");
/*     */     }
/*     */     
/*  76 */     this.prompt = prompt;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public String getPrompt() { return this.prompt; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setInput(String input) { this.input = input; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public boolean isInputValid() { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public String getInput() { return this.input; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\input\InputRequest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.MultipleChoiceInputRequest,"/*    */ package org.apache.tools.ant.input;
/*    */ 
/*    */ import java.util.Vector;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MultipleChoiceInputRequest
/*    */   extends InputRequest
/*    */ {
/* 67 */   private Vector choices = new Vector();
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public MultipleChoiceInputRequest(String prompt, Vector choices) {
/* 75 */     super(prompt);
/* 76 */     if (choices == null) {
/* 77 */       throw new IllegalArgumentException(""choices must not be null"");
/*    */     }
/* 79 */     this.choices = choices;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public Vector getChoices() { return this.choices; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 93 */   public boolean isInputValid() { return this.choices.contains(getInput()); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\input\MultipleChoiceInputRequest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.input.PropertyFileInputHandler,"/*     */ package org.apache.tools.ant.input;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PropertyFileInputHandler
/*     */   implements InputHandler
/*     */ {
/*  72 */   private Properties props = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String FILE_NAME_KEY = ""ant.input.properties"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void handleInput(InputRequest request) throws BuildException {
/*  92 */     readProps();
/*     */     
/*  94 */     Object o = this.props.get(request.getPrompt());
/*  95 */     if (o == null) {
/*  96 */       throw new BuildException(""Unable to find input for '"" + request.getPrompt() + ""'"");
/*     */     }
/*     */     
/*  99 */     request.setInput(o.toString());
/* 100 */     if (!request.isInputValid()) {
/* 101 */       throw new BuildException(""Found invalid input "" + o + "" for '"" + request.getPrompt() + ""'"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private synchronized void readProps() throws BuildException {
/* 110 */     if (this.props == null) {
/* 111 */       String propsFile = System.getProperty(""ant.input.properties"");
/* 112 */       if (propsFile == null) {
/* 113 */         throw new BuildException(""System property ant.input.properties for PropertyFileInputHandler not set"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 119 */       this.props = new Properties();
/*     */       
/*     */       try {
/* 122 */         this.props.load(new FileInputStream(propsFile));
/*     */       } catch (IOException e) {
/* 124 */         throw new BuildException(""Couldn't load "" + propsFile, e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\input\PropertyFileInputHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.listener.AnsiColorLogger,"/*     */ package org.apache.tools.ant.listener;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class AnsiColorLogger
/*     */   extends DefaultLogger
/*     */ {
/*     */   private static final int ATTR_NORMAL = 0;
/*     */   private static final int ATTR_BRIGHT = 1;
/*     */   private static final int ATTR_DIM = 2;
/*     */   private static final int ATTR_UNDERLINE = 3;
/*     */   private static final int ATTR_BLINK = 5;
/*     */   private static final int ATTR_REVERSE = 7;
/*     */   private static final int ATTR_HIDDEN = 8;
/*     */   private static final int FG_BLACK = 30;
/*     */   private static final int FG_RED = 31;
/*     */   private static final int FG_GREEN = 32;
/*     */   private static final int FG_YELLOW = 33;
/*     */   private static final int FG_BLUE = 34;
/*     */   private static final int FG_MAGENTA = 35;
/*     */   private static final int FG_CYAN = 36;
/*     */   private static final int FG_WHITE = 37;
/*     */   private static final int BG_BLACK = 40;
/*     */   private static final int BG_RED = 41;
/*     */   private static final int BG_GREEN = 42;
/*     */   private static final int BG_YELLOW = 44;
/*     */   private static final int BG_BLUE = 44;
/*     */   private static final int BG_MAGENTA = 45;
/*     */   private static final int BG_CYAN = 46;
/*     */   private static final int BG_WHITE = 47;
/*     */   private static final String PREFIX = ""\033["";
/*     */   private static final String SUFFIX = ""m"";
/*     */   private static final char SEPARATOR = ';';
/*     */   private static final String END_COLOR = ""\033[m"";
/* 169 */   private String errColor = ""\033[2;31m"";
/*     */   
/* 171 */   private String warnColor = ""\033[2;35m"";
/*     */   
/* 173 */   private String infoColor = ""\033[2;36m"";
/*     */   
/* 175 */   private String verboseColor = ""\033[2;32m"";
/*     */   
/* 177 */   private String debugColor = ""\033[2;34m"";
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean colorsSet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private final void setColors() {
/* 187 */     String userColorFile = System.getProperty(""ant.logger.defaults"");
/* 188 */     String systemColorFile = ""/org/apache/tools/ant/listener/defaults.properties"";
/*     */ 
/*     */     
/* 191 */     InputStream in = null;
/*     */     
/*     */     try {
/* 194 */       Properties prop = new Properties();
/*     */       
/* 196 */       if (userColorFile != null) {
/* 197 */         in = new FileInputStream(userColorFile);
/*     */       } else {
/* 199 */         in = getClass().getResourceAsStream(systemColorFile);
/*     */       } 
/*     */       
/* 202 */       if (in != null) {
/* 203 */         prop.load(in);
/*     */       }
/*     */       
/* 206 */       String err = prop.getProperty(""AnsiColorLogger.ERROR_COLOR"");
/* 207 */       String warn = prop.getProperty(""AnsiColorLogger.WARNING_COLOR"");
/* 208 */       String info = prop.getProperty(""AnsiColorLogger.INFO_COLOR"");
/* 209 */       String verbose = prop.getProperty(""AnsiColorLogger.VERBOSE_COLOR"");
/* 210 */       String debug = prop.getProperty(""AnsiColorLogger.DEBUG_COLOR"");
/* 211 */       if (err != null) {
/* 212 */         this.errColor = ""\033["" + err + ""m"";
/*     */       }
/* 214 */       if (warn != null) {
/* 215 */         this.warnColor = ""\033["" + warn + ""m"";
/*     */       }
/* 217 */       if (info != null) {
/* 218 */         this.infoColor = ""\033["" + info + ""m"";
/*     */       }
/* 220 */       if (verbose != null) {
/* 221 */         this.verboseColor = ""\033["" + verbose + ""m"";
/*     */       }
/* 223 */       if (debug != null) {
/* 224 */         this.debugColor = ""\033["" + debug + ""m"";
/*     */       }
/* 226 */     } catch (IOException ioe) {
/*     */     
/*     */     } finally {
/* 229 */       if (in != null) {
/*     */         try {
/* 231 */           in.close();
/* 232 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void printMessage(String message, PrintStream stream, int priority) {
/* 245 */     if (message != null && stream != null) {
/* 246 */       if (!this.colorsSet) {
/* 247 */         setColors();
/* 248 */         this.colorsSet = true;
/*     */       } 
/*     */       
/* 251 */       StringBuffer msg = new StringBuffer(message);
/* 252 */       switch (priority) {
/*     */         case 0:
/* 254 */           msg.insert(0, this.errColor);
/* 255 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 1:
/* 258 */           msg.insert(0, this.warnColor);
/* 259 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 2:
/* 262 */           msg.insert(0, this.infoColor);
/* 263 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 3:
/* 266 */           msg.insert(0, this.verboseColor);
/* 267 */           msg.append(""\033[m"");
/*     */           break;
/*     */         case 4:
/* 270 */           msg.insert(0, this.debugColor);
/* 271 */           msg.append(""\033[m"");
/*     */           break;
/*     */       } 
/* 274 */       String strmessage = msg.toString();
/* 275 */       stream.println(strmessage);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\listener\AnsiColorLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.listener.MailLogger,"/*     */ package org.apache.tools.ant.listener;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ import org.apache.tools.mail.MailMessage;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MailLogger
/*     */   extends DefaultLogger
/*     */ {
/* 102 */   private StringBuffer buffer = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 110 */     super.buildFinished(event);
/*     */     
/* 112 */     Project project = event.getProject();
/* 113 */     Hashtable properties = project.getProperties();
/*     */ 
/*     */ 
/*     */     
/* 117 */     Properties fileProperties = new Properties();
/* 118 */     String filename = (String)properties.get(""MailLogger.properties.file"");
/* 119 */     if (filename != null) {
/* 120 */       InputStream is = null;
/*     */       try {
/* 122 */         is = new FileInputStream(filename);
/* 123 */         fileProperties.load(is);
/* 124 */       } catch (IOException ioe) {
/*     */       
/*     */       } finally {
/* 127 */         if (is != null) {
/*     */           try {
/* 129 */             is.close();
/* 130 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 136 */     for (Enumeration e = fileProperties.keys(); e.hasMoreElements(); ) {
/* 137 */       String key = e.nextElement();
/* 138 */       String value = fileProperties.getProperty(key);
/* 139 */       properties.put(key, project.replaceProperties(value));
/*     */     } 
/*     */     
/* 142 */     boolean success = (event.getException() == null);
/* 143 */     String prefix = success ? ""success"" : ""failure"";
/*     */     
/*     */     try {
/* 146 */       boolean notify = Project.toBoolean(getValue(properties, prefix + "".notify"", ""on""));
/*     */ 
/*     */       
/* 149 */       if (!notify) {
/*     */         return;
/*     */       }
/*     */       
/* 153 */       String mailhost = getValue(properties, ""mailhost"", ""localhost"");
/* 154 */       String from = getValue(properties, ""from"", null);
/*     */       
/* 156 */       String toList = getValue(properties, prefix + "".to"", null);
/* 157 */       String subject = getValue(properties, prefix + "".subject"", success ? ""Build Success"" : ""Build Failure"");
/*     */ 
/*     */       
/* 160 */       sendMail(mailhost, from, toList, subject, this.buffer.toString());
/*     */     } catch (Exception e) {
/* 162 */       System.out.println(""MailLogger failed to send e-mail!"");
/* 163 */       e.printStackTrace(System.err);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   protected void log(String message) { this.buffer.append(message).append(StringUtils.LINE_SEP); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String getValue(Hashtable properties, String name, String defaultValue) throws Exception {
/* 192 */     String propertyName = ""MailLogger."" + name;
/* 193 */     String value = (String)properties.get(propertyName);
/*     */     
/* 195 */     if (value == null) {
/* 196 */       value = defaultValue;
/*     */     }
/*     */     
/* 199 */     if (value == null) {
/* 200 */       throw new Exception(""Missing required parameter: "" + propertyName);
/*     */     }
/*     */     
/* 203 */     return value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sendMail(String mailhost, String from, String toList, String subject, String message) throws IOException {
/* 219 */     MailMessage mailMessage = new MailMessage(mailhost);
/*     */     
/* 221 */     mailMessage.from(from);
/*     */     
/* 223 */     StringTokenizer t = new StringTokenizer(toList, "", "", false);
/* 224 */     while (t.hasMoreTokens()) {
/* 225 */       mailMessage.to(t.nextToken());
/*     */     }
/*     */     
/* 228 */     mailMessage.setSubject(subject);
/*     */     
/* 230 */     PrintStream ps = mailMessage.getPrintStream();
/* 231 */     ps.println(message);
/*     */     
/* 233 */     mailMessage.sendAndClose();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\listener\MailLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AbstractCvsTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractCvsTask
/*     */   extends Task
/*     */ {
/*     */   public static final int DEFAULT_COMPRESSION_LEVEL = 3;
/*  94 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */   
/*  97 */   private Vector vecCommandlines = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsRoot;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsRsh;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String cvsPackage;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String default_command = ""checkout"";
/*     */ 
/*     */ 
/*     */   
/* 121 */   private String command = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private int compression = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean noexec = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   private int port = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   private File passFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File dest;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */   
/*     */   private File error;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failOnError = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private ExecuteStreamHandler executeStreamHandler;
/*     */ 
/*     */ 
/*     */   
/*     */   private OutputStream outputStream;
/*     */ 
/*     */ 
/*     */   
/*     */   private OutputStream errorStream;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 186 */   public void setExecuteStreamHandler(ExecuteStreamHandler handler) { this.executeStreamHandler = handler; }
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteStreamHandler getExecuteStreamHandler() {
/* 191 */     if (this.executeStreamHandler == null) {
/* 192 */       setExecuteStreamHandler(new PumpStreamHandler(getOutputStream(), getErrorStream()));
/*     */     }
/*     */ 
/*     */     
/* 196 */     return this.executeStreamHandler;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   protected void setOutputStream(OutputStream outputStream) { this.outputStream = outputStream; }
/*     */ 
/*     */ 
/*     */   
/*     */   protected OutputStream getOutputStream() {
/* 207 */     if (this.outputStream == null)
/*     */     {
/* 209 */       if (this.output != null) {
/*     */         try {
/* 211 */           setOutputStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output.getPath(), this.append))));
/*     */         
/*     */         }
/*     */         catch (IOException e) {
/*     */ 
/*     */           
/* 217 */           throw new BuildException(e, this.location);
/*     */         } 
/*     */       } else {
/* 220 */         setOutputStream(new LogOutputStream(this, 2));
/*     */       } 
/*     */     }
/*     */     
/* 224 */     return this.outputStream;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 229 */   protected void setErrorStream(OutputStream errorStream) { this.errorStream = errorStream; }
/*     */ 
/*     */ 
/*     */   
/*     */   protected OutputStream getErrorStream() {
/* 234 */     if (this.errorStream == null)
/*     */     {
/* 236 */       if (this.error != null) {
/*     */         
/*     */         try {
/* 239 */           setErrorStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(this.error.getPath(), this.append))));
/*     */         
/*     */         }
/*     */         catch (IOException e) {
/*     */           
/* 244 */           throw new BuildException(e, this.location);
/*     */         } 
/*     */       } else {
/* 247 */         setErrorStream(new LogOutputStream(this, 1));
/*     */       } 
/*     */     }
/*     */     
/* 251 */     return this.errorStream;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runCommand(Commandline toExecute) throws BuildException {
/* 266 */     Environment env = new Environment();
/*     */     
/* 268 */     if (this.port > 0) {
/* 269 */       Environment.Variable var = new Environment.Variable();
/* 270 */       var.setKey(""CVS_CLIENT_PORT"");
/* 271 */       var.setValue(String.valueOf(this.port));
/* 272 */       env.addVariable(var);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 279 */     if (this.passFile == null) {
/*     */       
/* 281 */       File defaultPassFile = new File(System.getProperty(""cygwin.user.home"", System.getProperty(""user.home"")) + File.separatorChar + "".cvspass"");
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 286 */       if (defaultPassFile.exists()) {
/* 287 */         setPassfile(defaultPassFile);
/*     */       }
/*     */     } 
/* 290 */     if (this.passFile != null) {
/* 291 */       Environment.Variable var = new Environment.Variable();
/* 292 */       var.setKey(""CVS_PASSFILE"");
/* 293 */       var.setValue(String.valueOf(this.passFile));
/* 294 */       env.addVariable(var);
/* 295 */       log(""Using cvs passfile: "" + String.valueOf(this.passFile), 2);
/*     */     } 
/*     */ 
/*     */     
/* 299 */     if (this.cvsRsh != null) {
/* 300 */       Environment.Variable var = new Environment.Variable();
/* 301 */       var.setKey(""CVS_RSH"");
/* 302 */       var.setValue(String.valueOf(this.cvsRsh));
/* 303 */       env.addVariable(var);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 310 */     Execute exe = new Execute(getExecuteStreamHandler(), null);
/*     */     
/* 312 */     exe.setAntRun(this.project);
/* 313 */     if (this.dest == null) {
/* 314 */       this.dest = this.project.getBaseDir();
/*     */     }
/*     */     
/* 317 */     if (!this.dest.exists()) {
/* 318 */       this.dest.mkdirs();
/*     */     }
/*     */     
/* 321 */     exe.setWorkingDirectory(this.dest);
/* 322 */     exe.setCommandline(toExecute.getCommandline());
/* 323 */     exe.setEnvironment(env.getVariables());
/*     */     
/*     */     try {
/* 326 */       String actualCommandLine = executeToString(exe);
/* 327 */       log(actualCommandLine, 3);
/* 328 */       int retCode = exe.execute();
/* 329 */       log(""retCode="" + retCode, 4);
/*     */       
/* 331 */       if (this.failOnError && retCode != 0) {
/* 332 */         throw new BuildException(""cvs exited with error code "" + retCode + StringUtils.LINE_SEP + ""Command line was ["" + actualCommandLine + ""]"", this.location);
/*     */       
/*     */       }
/*     */     
/*     */     }
/*     */     catch (IOException e) {
/*     */       
/* 339 */       if (this.failOnError) {
/* 340 */         throw new BuildException(e, this.location);
/*     */       }
/* 342 */       log(""Caught exception: "" + e.getMessage(), 1);
/*     */     } catch (BuildException e) {
/*     */       
/* 345 */       if (this.failOnError) {
/* 346 */         throw e;
/*     */       }
/* 348 */       Object object = e.getException();
/* 349 */       if (object == null) {
/* 350 */         object = e;
/*     */       }
/* 352 */       log(""Caught exception: "" + object.getMessage(), 1);
/*     */     } catch (Exception e) {
/*     */       
/* 355 */       if (this.failOnError) {
/* 356 */         throw new BuildException(e, this.location);
/*     */       }
/* 358 */       log(""Caught exception: "" + e.getMessage(), 1);
/*     */     } finally {
/*     */       
/* 361 */       if (this.outputStream != null) {
/*     */         try {
/* 363 */           this.outputStream.close();
/* 364 */         } catch (IOException e) {}
/*     */       }
/* 366 */       if (this.errorStream != null) {
/*     */         try {
/* 368 */           this.errorStream.close();
/* 369 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 376 */     String savedCommand = getCommand();
/*     */     
/* 378 */     if (getCommand() == null && this.vecCommandlines.size() == 0)
/*     */     {
/* 380 */       setCommand(""checkout"");
/*     */     }
/*     */     
/* 383 */     String c = getCommand();
/* 384 */     Commandline cloned = null;
/* 385 */     if (c != null) {
/* 386 */       cloned = (Commandline)this.cmd.clone();
/* 387 */       cloned.createArgument(true).setLine(c);
/* 388 */       addConfiguredCommandline(cloned, true);
/*     */     } 
/*     */     
/*     */     try {
/* 392 */       for (int i = 0; i < this.vecCommandlines.size(); i++) {
/* 393 */         runCommand(this.vecCommandlines.elementAt(i));
/*     */       }
/*     */     } finally {
/* 396 */       if (cloned != null) {
/* 397 */         removeCommandline(cloned);
/*     */       }
/* 399 */       setCommand(savedCommand);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private String executeToString(Execute execute) {
/* 405 */     StringBuffer stringBuffer = new StringBuffer(Commandline.describeCommand(execute.getCommandline()));
/*     */ 
/*     */ 
/*     */     
/* 409 */     String newLine = StringUtils.LINE_SEP;
/* 410 */     String[] variableArray = execute.getEnvironment();
/*     */     
/* 412 */     if (variableArray != null) {
/* 413 */       stringBuffer.append(newLine);
/* 414 */       stringBuffer.append(newLine);
/* 415 */       stringBuffer.append(""environment:"");
/* 416 */       stringBuffer.append(newLine);
/* 417 */       for (int z = 0; z < variableArray.length; z++) {
/* 418 */         stringBuffer.append(newLine);
/* 419 */         stringBuffer.append(""\t"");
/* 420 */         stringBuffer.append(variableArray[z]);
/*     */       } 
/*     */     } 
/*     */     
/* 424 */     return stringBuffer.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCvsRoot(String root) {
/* 435 */     if (root != null && 
/* 436 */       root.trim().equals("""")) {
/* 437 */       root = null;
/*     */     }
/*     */ 
/*     */     
/* 441 */     this.cvsRoot = root;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 446 */   public String getCvsRoot() { return this.cvsRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCvsRsh(String rsh) {
/* 456 */     if (rsh != null && 
/* 457 */       rsh.trim().equals("""")) {
/* 458 */       rsh = null;
/*     */     }
/*     */ 
/*     */     
/* 462 */     this.cvsRsh = rsh;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 467 */   public String getCvsRsh() { return this.cvsRsh; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 476 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 481 */   public int getPort() { return this.port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 490 */   public void setPassfile(File passFile) { this.passFile = passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 495 */   public File getPassFile() { return this.passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 504 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 509 */   public File getDest() { return this.dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 518 */   public void setPackage(String p) { this.cvsPackage = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 523 */   public String getPackage() { return this.cvsPackage; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTag(String p) {
/* 532 */     if (p != null && p.trim().length() > 0) {
/* 533 */       addCommandArgument(""-r"");
/* 534 */       addCommandArgument(p);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 543 */   public void addCommandArgument(String arg) { addCommandArgument(this.cmd, arg); }
/*     */ 
/*     */ 
/*     */   
/* 547 */   public void addCommandArgument(Commandline c, String arg) { c.createArgument().setValue(arg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDate(String p) {
/* 556 */     if (p != null && p.trim().length() > 0) {
/* 557 */       addCommandArgument(""-D"");
/* 558 */       addCommandArgument(p);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 567 */   public void setCommand(String c) { this.command = c; }
/*     */ 
/*     */   
/* 570 */   public String getCommand() { return this.command; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 578 */   public void setQuiet(boolean q) { this.quiet = q; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 587 */   public void setNoexec(boolean ne) { this.noexec = ne; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 595 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 604 */   public void setError(File error) { this.error = error; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 612 */   public void setAppend(boolean value) { this.append = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 622 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureCommandline(Commandline c) {
/* 629 */     if (c == null) {
/*     */       return;
/*     */     }
/* 632 */     c.setExecutable(""cvs"");
/* 633 */     if (this.cvsPackage != null) {
/* 634 */       c.createArgument().setLine(this.cvsPackage);
/*     */     }
/* 636 */     if (this.compression > 0 && this.compression < 10) {
/* 637 */       c.createArgument(true).setValue(""-z"" + this.compression);
/*     */     }
/* 639 */     if (this.quiet) {
/* 640 */       c.createArgument(true).setValue(""-q"");
/*     */     }
/* 642 */     if (this.noexec) {
/* 643 */       c.createArgument(true).setValue(""-n"");
/*     */     }
/* 645 */     if (this.cvsRoot != null) {
/* 646 */       c.createArgument(true).setLine(""-d"" + this.cvsRoot);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 651 */   protected void removeCommandline(Commandline c) { this.vecCommandlines.removeElement(c); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 659 */   public void addConfiguredCommandline(Commandline c) { addConfiguredCommandline(c, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredCommandline(Commandline c, boolean insertAtStart) {
/* 668 */     if (c == null) {
/*     */       return;
/*     */     }
/* 671 */     configureCommandline(c);
/* 672 */     if (insertAtStart) {
/* 673 */       this.vecCommandlines.insertElementAt(c, 0);
/*     */     } else {
/* 675 */       this.vecCommandlines.addElement(c);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 684 */   public void setCompressionLevel(int level) { this.compression = level; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 694 */   public void setCompression(boolean usecomp) { setCompressionLevel(usecomp ? 3 : 0); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\AbstractCvsTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ant,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.DefaultLogger;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ant
/*     */   extends Task
/*     */ {
/* 100 */   private File dir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   private String antFile = null;
/*     */ 
/*     */   
/* 109 */   private String target = null;
/*     */ 
/*     */   
/* 112 */   private String output = null;
/*     */ 
/*     */   
/*     */   private boolean inheritAll = true;
/*     */ 
/*     */   
/*     */   private boolean inheritRefs = false;
/*     */ 
/*     */   
/* 121 */   private Vector properties = new Vector();
/*     */ 
/*     */   
/* 124 */   private Vector references = new Vector();
/*     */ 
/*     */   
/*     */   private Project newProject;
/*     */ 
/*     */   
/* 130 */   private PrintStream out = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   public void setInheritAll(boolean value) { this.inheritAll = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setInheritRefs(boolean value) { this.inheritRefs = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 152 */     this.newProject = new Project();
/* 153 */     this.newProject.setJavaVersionProperty();
/* 154 */     this.newProject.addTaskDefinition(""property"", (Class)this.project.getTaskDefinitions().get(""property""));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void reinit() {
/* 170 */     init();
/* 171 */     int count = this.properties.size();
/* 172 */     for (int i = 0; i < count; i++) {
/* 173 */       Property p = this.properties.elementAt(i);
/* 174 */       Property newP = (Property)this.newProject.createTask(""property"");
/* 175 */       newP.setName(p.getName());
/* 176 */       if (p.getValue() != null) {
/* 177 */         newP.setValue(p.getValue());
/*     */       }
/* 179 */       if (p.getFile() != null) {
/* 180 */         newP.setFile(p.getFile());
/*     */       }
/* 182 */       if (p.getResource() != null) {
/* 183 */         newP.setResource(p.getResource());
/*     */       }
/* 185 */       if (p.getPrefix() != null) {
/* 186 */         newP.setPrefix(p.getPrefix());
/*     */       }
/* 188 */       if (p.getRefid() != null) {
/* 189 */         newP.setRefid(p.getRefid());
/*     */       }
/* 191 */       if (p.getEnvironment() != null) {
/* 192 */         newP.setEnvironment(p.getEnvironment());
/*     */       }
/* 194 */       if (p.getClasspath() != null) {
/* 195 */         newP.setClasspath(p.getClasspath());
/*     */       }
/* 197 */       this.properties.setElementAt(newP, i);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initializeProject() {
/* 209 */     this.newProject.setInputHandler(getProject().getInputHandler());
/*     */     
/* 211 */     Vector listeners = this.project.getBuildListeners();
/* 212 */     int count = listeners.size();
/* 213 */     for (int i = 0; i < count; i++) {
/* 214 */       this.newProject.addBuildListener(listeners.elementAt(i));
/*     */     }
/*     */     
/* 217 */     if (this.output != null) {
/* 218 */       File outfile = null;
/* 219 */       if (this.dir != null) {
/* 220 */         outfile = FileUtils.newFileUtils().resolveFile(this.dir, this.output);
/*     */       } else {
/* 222 */         outfile = getProject().resolveFile(this.output);
/*     */       } 
/*     */       try {
/* 225 */         this.out = new PrintStream(new FileOutputStream(outfile));
/* 226 */         DefaultLogger logger = new DefaultLogger();
/* 227 */         logger.setMessageOutputLevel(2);
/* 228 */         logger.setOutputPrintStream(this.out);
/* 229 */         logger.setErrorPrintStream(this.out);
/* 230 */         this.newProject.addBuildListener((BuildListener)logger);
/*     */       } catch (IOException ex) {
/* 232 */         log(""Ant: Can't set output to "" + this.output);
/*     */       } 
/*     */     } 
/*     */     
/* 236 */     Hashtable taskdefs = this.project.getTaskDefinitions();
/* 237 */     Enumeration et = taskdefs.keys();
/* 238 */     while (et.hasMoreElements()) {
/* 239 */       String taskName = et.nextElement();
/* 240 */       if (taskName.equals(""property"")) {
/*     */         continue;
/*     */       }
/*     */       
/* 244 */       Class taskClass = (Class)taskdefs.get(taskName);
/* 245 */       this.newProject.addTaskDefinition(taskName, taskClass);
/*     */     } 
/*     */     
/* 248 */     Hashtable typedefs = this.project.getDataTypeDefinitions();
/* 249 */     Enumeration e = typedefs.keys();
/* 250 */     while (e.hasMoreElements()) {
/* 251 */       String typeName = e.nextElement();
/* 252 */       Class typeClass = (Class)typedefs.get(typeName);
/* 253 */       this.newProject.addDataTypeDefinition(typeName, typeClass);
/*     */     } 
/*     */ 
/*     */     
/* 257 */     getProject().copyUserProperties(this.newProject);
/*     */     
/* 259 */     if (!this.inheritAll) {
/*     */ 
/*     */       
/* 262 */       this.newProject.setSystemProperties();
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 267 */       Hashtable props = getProject().getProperties();
/* 268 */       e = props.keys();
/* 269 */       while (e.hasMoreElements()) {
/* 270 */         String arg = e.nextElement().toString();
/* 271 */         if (""basedir"".equals(arg) || ""ant.file"".equals(arg)) {
/*     */           continue;
/*     */         }
/*     */ 
/*     */         
/* 276 */         String value = props.get(arg).toString();
/*     */         
/* 278 */         if (this.newProject.getProperty(arg) == null)
/*     */         {
/* 280 */           this.newProject.setNewProperty(arg, value);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String line) {
/* 292 */     if (this.newProject != null) {
/* 293 */       this.newProject.demuxOutput(line, false);
/*     */     } else {
/* 295 */       super.handleOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String line) {
/* 305 */     if (this.newProject != null) {
/* 306 */       this.newProject.demuxOutput(line, true);
/*     */     } else {
/* 308 */       super.handleErrorOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 316 */     File savedDir = this.dir;
/* 317 */     String savedAntFile = this.antFile;
/* 318 */     String savedTarget = this.target;
/*     */     try {
/* 320 */       if (this.newProject == null) {
/* 321 */         reinit();
/*     */       }
/*     */       
/* 324 */       if (this.dir == null && this.inheritAll) {
/* 325 */         this.dir = this.project.getBaseDir();
/*     */       }
/*     */       
/* 328 */       initializeProject();
/*     */       
/* 330 */       if (this.dir != null) {
/* 331 */         this.newProject.setBaseDir(this.dir);
/* 332 */         if (savedDir != null) {
/* 333 */           this.newProject.setInheritedProperty(""basedir"", this.dir.getAbsolutePath());
/*     */         }
/*     */       } else {
/*     */         
/* 337 */         this.dir = this.project.getBaseDir();
/*     */       } 
/*     */       
/* 340 */       overrideProperties();
/*     */       
/* 342 */       if (this.antFile == null) {
/* 343 */         this.antFile = ""build.xml"";
/*     */       }
/*     */       
/* 346 */       File file = FileUtils.newFileUtils().resolveFile(this.dir, this.antFile);
/* 347 */       this.antFile = file.getAbsolutePath();
/*     */       
/* 349 */       log(""calling target "" + ((this.target != null) ? this.target : ""[default]"") + "" in build file "" + this.antFile.toString(), 3);
/*     */ 
/*     */       
/* 352 */       this.newProject.setUserProperty(""ant.file"", this.antFile);
/* 353 */       ProjectHelper.configureProject(this.newProject, new File(this.antFile));
/*     */       
/* 355 */       if (this.target == null) {
/* 356 */         this.target = this.newProject.getDefaultTarget();
/*     */       }
/*     */       
/* 359 */       addReferences();
/*     */ 
/*     */       
/* 362 */       if (this.newProject.getBaseDir().equals(this.project.getBaseDir()) && this.newProject.getProperty(""ant.file"").equals(this.project.getProperty(""ant.file"")) && getOwningTarget() != null && this.target.equals(getOwningTarget().getName()))
/*     */       {
/*     */ 
/*     */ 
/*     */         
/* 367 */         throw new BuildException(""ant task calling its own parent target"");
/*     */       }
/*     */ 
/*     */       
/* 371 */       this.newProject.executeTarget(this.target);
/*     */     } finally {
/*     */       
/* 374 */       this.newProject = null;
/* 375 */       if (this.output != null && this.out != null) {
/*     */         try {
/* 377 */           this.out.close();
/* 378 */         } catch (Exception e) {}
/*     */       }
/*     */ 
/*     */       
/* 382 */       this.dir = savedDir;
/* 383 */       this.antFile = savedAntFile;
/* 384 */       this.target = savedTarget;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void overrideProperties() throws BuildException {
/* 393 */     Enumeration e = this.properties.elements();
/* 394 */     while (e.hasMoreElements()) {
/* 395 */       Property p = e.nextElement();
/* 396 */       p.setProject(this.newProject);
/* 397 */       p.execute();
/*     */     } 
/* 399 */     getProject().copyInheritedProperties(this.newProject);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addReferences() throws BuildException {
/* 409 */     Hashtable thisReferences = (Hashtable)this.project.getReferences().clone();
/* 410 */     Hashtable newReferences = this.newProject.getReferences();
/*     */     
/* 412 */     if (this.references.size() > 0) {
/* 413 */       for (Enumeration e = this.references.elements(); e.hasMoreElements(); ) {
/* 414 */         Reference ref = e.nextElement();
/* 415 */         String refid = ref.getRefId();
/* 416 */         if (refid == null) {
/* 417 */           throw new BuildException(""the refid attribute is required for reference elements"");
/*     */         }
/*     */         
/* 420 */         if (!thisReferences.containsKey(refid)) {
/* 421 */           log(""Parent project doesn't contain any reference '"" + refid + ""'"", 1);
/*     */ 
/*     */           
/*     */           continue;
/*     */         } 
/*     */         
/* 427 */         thisReferences.remove(refid);
/* 428 */         String toRefid = ref.getToRefid();
/* 429 */         if (toRefid == null) {
/* 430 */           toRefid = refid;
/*     */         }
/* 432 */         copyReference(refid, toRefid);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 438 */     if (this.inheritRefs) {
/* 439 */       for (Enumeration enumeration = thisReferences.keys(); enumeration.hasMoreElements(); ) {
/* 440 */         String key = enumeration.nextElement();
/* 441 */         if (newReferences.containsKey(key)) {
/*     */           continue;
/*     */         }
/* 444 */         copyReference(key, key);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void copyReference(String oldKey, String newKey) {
/* 458 */     Object orig = this.project.getReference(oldKey);
/* 459 */     Class c = orig.getClass();
/* 460 */     Object copy = orig;
/*     */     try {
/* 462 */       Method cloneM = c.getMethod(""clone"", new Class[0]);
/* 463 */       if (cloneM != null) {
/* 464 */         copy = cloneM.invoke(orig, new Object[0]);
/*     */       }
/* 466 */     } catch (Exception e) {}
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 471 */     if (copy instanceof ProjectComponent) {
/* 472 */       ((ProjectComponent)copy).setProject(this.newProject);
/*     */     } else {
/*     */       try {
/* 475 */         Method setProjectM = c.getMethod(""setProject"", new Class[] { Project.class });
/*     */         
/* 477 */         if (setProjectM != null) {
/* 478 */           setProjectM.invoke(copy, new Object[] { this.newProject });
/*     */         }
/* 480 */       } catch (NoSuchMethodException e) {
/*     */ 
/*     */       
/*     */       } catch (Exception e2) {
/* 484 */         String msg = ""Error setting new project instance for reference with id "" + oldKey;
/*     */         
/* 486 */         throw new BuildException(msg, e2, this.location);
/*     */       } 
/*     */     } 
/* 489 */     this.newProject.addReference(newKey, copy);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 499 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 511 */   public void setAntfile(String s) { this.antFile = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 519 */   public void setTarget(String s) { this.target = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 529 */   public void setOutput(String s) { this.output = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Property createProperty() {
/* 537 */     if (this.newProject == null) {
/* 538 */       reinit();
/*     */     }
/* 540 */     Property p = new Property(true, getProject());
/* 541 */     p.setProject(this.newProject);
/* 542 */     p.setTaskName(""property"");
/* 543 */     this.properties.addElement(p);
/* 544 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 552 */   public void addReference(Reference r) { this.references.addElement(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Reference
/*     */     extends Reference
/*     */   {
/* 567 */     private String targetid = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 576 */     public void setToRefid(String targetid) { this.targetid = targetid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 586 */     public String getToRefid() { return this.targetid; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Ant.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.AntStructure,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.IntrospectionHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AntStructure
/*     */   extends Task
/*     */ {
/*  88 */   private final String lSep = System.getProperty(""line.separator"");
/*     */   
/*  90 */   private final String BOOLEAN = ""%boolean;"";
/*  91 */   private final String TASKS = ""%tasks;"";
/*  92 */   private final String TYPES = ""%types;"";
/*     */   
/*  94 */   private Hashtable visited = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private File output;
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 112 */     if (this.output == null) {
/* 113 */       throw new BuildException(""output attribute is required"", this.location);
/*     */     }
/*     */     
/* 116 */     PrintWriter out = null;
/*     */     try {
/*     */       try {
/* 119 */         out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.output), ""UTF8""));
/*     */ 
/*     */       
/*     */       }
/*     */       catch (UnsupportedEncodingException ue) {
/*     */ 
/*     */ 
/*     */         
/* 127 */         out = new PrintWriter(new FileWriter(this.output));
/*     */       } 
/*     */       
/* 130 */       printHead(out, this.project.getTaskDefinitions().keys(), this.project.getDataTypeDefinitions().keys());
/*     */ 
/*     */       
/* 133 */       printTargetDecl(out);
/*     */       
/* 135 */       Enumeration dataTypes = this.project.getDataTypeDefinitions().keys();
/* 136 */       while (dataTypes.hasMoreElements()) {
/* 137 */         String typeName = dataTypes.nextElement();
/* 138 */         printElementDecl(out, typeName, (Class)this.project.getDataTypeDefinitions().get(typeName));
/*     */       } 
/*     */ 
/*     */       
/* 142 */       Enumeration tasks = this.project.getTaskDefinitions().keys();
/* 143 */       while (tasks.hasMoreElements()) {
/* 144 */         String taskName = tasks.nextElement();
/* 145 */         printElementDecl(out, taskName, (Class)this.project.getTaskDefinitions().get(taskName));
/*     */       } 
/*     */ 
/*     */       
/* 149 */       printTail(out);
/*     */     } catch (IOException ioe) {
/*     */       
/* 152 */       throw new BuildException(""Error writing "" + this.output.getAbsolutePath(), ioe, this.location);
/*     */     } finally {
/*     */       
/* 155 */       if (out != null) {
/* 156 */         out.close();
/*     */       }
/* 158 */       this.visited.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printHead(PrintWriter out, Enumeration tasks, Enumeration types) {
/* 170 */     out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>"");
/* 171 */     out.println(""<!ENTITY % boolean \""(true|false|on|off|yes|no)\"">"");
/* 172 */     out.print(""<!ENTITY % tasks \"""");
/* 173 */     boolean first = true;
/* 174 */     while (tasks.hasMoreElements()) {
/* 175 */       String taskName = tasks.nextElement();
/* 176 */       if (!first) {
/* 177 */         out.print("" | "");
/*     */       } else {
/* 179 */         first = false;
/*     */       } 
/* 181 */       out.print(taskName);
/*     */     } 
/* 183 */     out.println(""\"">"");
/* 184 */     out.print(""<!ENTITY % types \"""");
/* 185 */     first = true;
/* 186 */     while (types.hasMoreElements()) {
/* 187 */       String typeName = types.nextElement();
/* 188 */       if (!first) {
/* 189 */         out.print("" | "");
/*     */       } else {
/* 191 */         first = false;
/*     */       } 
/* 193 */       out.print(typeName);
/*     */     } 
/* 195 */     out.println(""\"">"");
/*     */     
/* 197 */     out.println("""");
/*     */     
/* 199 */     out.print(""<!ELEMENT project (target | property | taskdef"");
/* 200 */     out.print("" | typedef | "");
/* 201 */     out.print(""%types;"");
/* 202 */     out.println("")*>"");
/* 203 */     out.println(""<!ATTLIST project"");
/* 204 */     out.println(""          name    CDATA #IMPLIED"");
/* 205 */     out.println(""          default CDATA #REQUIRED"");
/* 206 */     out.println(""          basedir CDATA #IMPLIED>"");
/* 207 */     out.println("""");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printTargetDecl(PrintWriter out) {
/* 214 */     out.print(""<!ELEMENT target ("");
/* 215 */     out.print(""%tasks;"");
/* 216 */     out.print("" | "");
/* 217 */     out.print(""%types;"");
/* 218 */     out.println("")*>"");
/* 219 */     out.println("""");
/*     */     
/* 221 */     out.println(""<!ATTLIST target"");
/* 222 */     out.println(""          id          ID    #IMPLIED"");
/* 223 */     out.println(""          name        CDATA #REQUIRED"");
/* 224 */     out.println(""          if          CDATA #IMPLIED"");
/* 225 */     out.println(""          unless      CDATA #IMPLIED"");
/* 226 */     out.println(""          depends     CDATA #IMPLIED"");
/* 227 */     out.println(""          description CDATA #IMPLIED>"");
/* 228 */     out.println("""");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printElementDecl(PrintWriter out, String name, Class element) throws BuildException {
/* 237 */     if (this.visited.containsKey(name)) {
/*     */       return;
/*     */     }
/* 240 */     this.visited.put(name, """");
/*     */     
/* 242 */     IntrospectionHelper ih = null;
/*     */     try {
/* 244 */       ih = IntrospectionHelper.getHelper(element);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/* 251 */     catch (Throwable t) {
/*     */       return;
/*     */     } 
/* 254 */     StringBuffer sb = new StringBuffer(""<!ELEMENT "");
/* 255 */     sb.append(name).append("" "");
/*     */     
/* 257 */     if (Reference.class.equals(element)) {
/* 258 */       sb.append(""EMPTY>"").append(this.lSep);
/* 259 */       sb.append(""<!ATTLIST "").append(name);
/* 260 */       sb.append(this.lSep).append(""          id ID #IMPLIED"");
/* 261 */       sb.append(this.lSep).append(""          refid IDREF #IMPLIED"");
/* 262 */       sb.append("">"").append(this.lSep);
/* 263 */       out.println(sb);
/*     */       
/*     */       return;
/*     */     } 
/* 267 */     Vector v = new Vector();
/* 268 */     if (ih.supportsCharacters()) {
/* 269 */       v.addElement(""#PCDATA"");
/*     */     }
/*     */     
/* 272 */     if (TaskContainer.class.isAssignableFrom(element)) {
/* 273 */       v.addElement(""%tasks;"");
/*     */     }
/*     */     
/* 276 */     Enumeration enum = ih.getNestedElements();
/* 277 */     while (enum.hasMoreElements()) {
/* 278 */       v.addElement(enum.nextElement());
/*     */     }
/*     */     
/* 281 */     if (v.isEmpty()) {
/* 282 */       sb.append(""EMPTY"");
/*     */     } else {
/* 284 */       sb.append(""("");
/* 285 */       int count = v.size();
/* 286 */       for (int i = 0; i < count; i++) {
/* 287 */         if (i != 0) {
/* 288 */           sb.append("" | "");
/*     */         }
/* 290 */         sb.append(v.elementAt(i));
/*     */       } 
/* 292 */       sb.append("")"");
/* 293 */       if (count > 1 || !v.elementAt(0).equals(""#PCDATA"")) {
/* 294 */         sb.append(""*"");
/*     */       }
/*     */     } 
/* 297 */     sb.append("">"");
/* 298 */     out.println(sb);
/*     */     
/* 300 */     sb.setLength(0);
/* 301 */     sb.append(""<!ATTLIST "").append(name);
/* 302 */     sb.append(this.lSep).append(""          id ID #IMPLIED"");
/*     */     
/* 304 */     enum = ih.getAttributes();
/* 305 */     while (enum.hasMoreElements()) {
/* 306 */       String attrName = enum.nextElement();
/* 307 */       if (""id"".equals(attrName)) {
/*     */         continue;
/*     */       }
/*     */       
/* 311 */       sb.append(this.lSep).append(""          "").append(attrName).append("" "");
/* 312 */       Class type = ih.getAttributeType(attrName);
/* 313 */       if (type.equals(Boolean.class) || type.equals(boolean.class)) {
/*     */         
/* 315 */         sb.append(""%boolean;"").append("" "");
/* 316 */       } else if (Reference.class.isAssignableFrom(type)) {
/* 317 */         sb.append(""IDREF "");
/* 318 */       } else if (EnumeratedAttribute.class.isAssignableFrom(type)) {
/*     */         try {
/* 320 */           EnumeratedAttribute ea = (EnumeratedAttribute)type.newInstance();
/*     */           
/* 322 */           String[] values = ea.getValues();
/* 323 */           if (values == null || values.length == 0 || !areNmtokens(values)) {
/*     */ 
/*     */             
/* 326 */             sb.append(""CDATA "");
/*     */           } else {
/* 328 */             sb.append(""("");
/* 329 */             for (int i = 0; i < values.length; i++) {
/* 330 */               if (i != 0) {
/* 331 */                 sb.append("" | "");
/*     */               }
/* 333 */               sb.append(values[i]);
/*     */             } 
/* 335 */             sb.append("") "");
/*     */           } 
/*     */         } catch (InstantiationException ie) {
/* 338 */           sb.append(""CDATA "");
/*     */         } catch (IllegalAccessException ie) {
/* 340 */           sb.append(""CDATA "");
/*     */         } 
/*     */       } else {
/* 343 */         sb.append(""CDATA "");
/*     */       } 
/* 345 */       sb.append(""#IMPLIED"");
/*     */     } 
/* 347 */     sb.append("">"").append(this.lSep);
/* 348 */     out.println(sb);
/*     */     
/* 350 */     int count = v.size();
/* 351 */     for (int i = 0; i < count; i++) {
/* 352 */       String nestedName = v.elementAt(i);
/* 353 */       if (!""#PCDATA"".equals(nestedName) && !""%tasks;"".equals(nestedName) && !""%types;"".equals(nestedName))
/*     */       {
/*     */         
/* 356 */         printElementDecl(out, nestedName, ih.getElementType(nestedName));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void printTail(PrintWriter out) {}
/*     */ 
/*     */   
/*     */   protected boolean isNmtoken(String s) {
/* 367 */     int length = s.length();
/* 368 */     for (int i = 0; i < length; i++) {
/* 369 */       char c = s.charAt(i);
/*     */       
/* 371 */       if (!Character.isLetterOrDigit(c) && c != '.' && c != '-' && c != '_' && c != ':')
/*     */       {
/*     */         
/* 374 */         return false;
/*     */       }
/*     */     } 
/* 377 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean areNmtokens(String[] s) {
/* 387 */     for (int i = 0; i < s.length; i++) {
/* 388 */       if (!isNmtoken(s[i])) {
/* 389 */         return false;
/*     */       }
/*     */     } 
/* 392 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\AntStructure.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Available,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Available
/*     */   extends Task
/*     */   implements Condition
/*     */ {
/*     */   private String property;
/*     */   private String classname;
/*     */   private String file;
/*     */   private Path filepath;
/*     */   private String resource;
/*     */   private FileDir type;
/*     */   private Path classpath;
/*     */   private AntClassLoader loader;
/*  92 */   private String value = ""true"";
/*     */ 
/*     */   
/*     */   private boolean isTask = false;
/*     */ 
/*     */   
/*     */   private boolean ignoreSystemclasses = false;
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setClasspath(Path classpath) { createClasspath().append(classpath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 111 */     if (this.classpath == null) {
/* 112 */       this.classpath = new Path(this.project);
/*     */     }
/* 114 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setFilepath(Path filepath) { createFilepath().append(filepath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createFilepath() {
/* 143 */     if (this.filepath == null) {
/* 144 */       this.filepath = new Path(this.project);
/*     */     }
/* 146 */     return this.filepath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String classname) {
/* 176 */     if (!"""".equals(classname)) {
/* 177 */       this.classname = classname;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setFile(File f) { this.file = FileUtils.newFileUtils().removeLeadingPath(getProject().getBaseDir(), f); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public void setResource(String resource) { this.resource = resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setType(String type) {
/* 208 */     log(""DEPRECATED - The setType(String) method has been deprecated. Use setType(Available.FileDir) instead."");
/*     */     
/* 210 */     this.type = new FileDir();
/* 211 */     this.type.setValue(type);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setType(FileDir type) { this.type = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setIgnoresystemclasses(boolean ignore) { this.ignoreSystemclasses = ignore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 241 */     if (this.property == null) {
/* 242 */       throw new BuildException(""property attribute is required"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 246 */     this.isTask = true;
/*     */     try {
/* 248 */       if (eval()) {
/* 249 */         if (null != getProject().getProperty(this.property)) {
/* 250 */           log(""DEPRECATED - <available> used to override an existing property."" + StringUtils.LINE_SEP + ""  Build file should not reuse the same property"" + "" name for different values."");
/*     */         }
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 256 */         getProject().setProperty(this.property, this.value);
/*     */       } 
/*     */     } finally {
/* 259 */       this.isTask = false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 270 */     if (this.classname == null && this.file == null && this.resource == null) {
/* 271 */       throw new BuildException(""At least one of (classname|file|resource) is required"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 275 */     if (this.type != null && 
/* 276 */       this.file == null) {
/* 277 */       throw new BuildException(""The type attribute is only valid when specifying the file attribute."", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 283 */     if (this.classpath != null) {
/* 284 */       this.classpath.setProject(this.project);
/* 285 */       this.loader = new AntClassLoader(this.project, this.classpath);
/*     */     } 
/*     */     
/* 288 */     String appendix = """";
/* 289 */     if (this.isTask) {
/* 290 */       appendix = "" to set property "" + this.property;
/*     */     } else {
/* 292 */       setTaskName(""available"");
/*     */     } 
/*     */     
/* 295 */     if (this.classname != null && !checkClass(this.classname)) {
/* 296 */       log(""Unable to load class "" + this.classname + appendix, 3);
/*     */       
/* 298 */       return false;
/*     */     } 
/*     */     
/* 301 */     if (this.file != null && !checkFile()) {
/* 302 */       if (this.type != null) {
/* 303 */         log(""Unable to find "" + this.type + "" "" + this.file + appendix, 3);
/*     */       } else {
/*     */         
/* 306 */         log(""Unable to find "" + this.file + appendix, 3);
/*     */       } 
/* 308 */       return false;
/*     */     } 
/*     */     
/* 311 */     if (this.resource != null && !checkResource(this.resource)) {
/* 312 */       log(""Unable to load resource "" + this.resource + appendix, 3);
/*     */       
/* 314 */       return false;
/*     */     } 
/*     */     
/* 317 */     if (this.loader != null) {
/* 318 */       this.loader.cleanup();
/* 319 */       this.loader = null;
/*     */     } 
/*     */     
/* 322 */     if (!this.isTask) {
/* 323 */       setTaskName(null);
/*     */     }
/*     */     
/* 326 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkFile() {
/* 346 */     if (this.filepath == null) {
/* 347 */       return checkFile(this.project.resolveFile(this.file), this.file);
/*     */     }
/* 349 */     String[] paths = this.filepath.list();
/* 350 */     for (int i = 0; i < paths.length; i++) {
/* 351 */       log(""Searching "" + paths[i], 4);
/* 352 */       File path = new File(paths[i]);
/*     */ 
/*     */ 
/*     */       
/* 356 */       if (path.exists() && this.file.equals(paths[i])) {
/* 357 */         if (this.type == null) {
/* 358 */           log(""Found: "" + path, 3);
/* 359 */           return true;
/* 360 */         }  if (this.type.isDir() && path.isDirectory()) {
/*     */           
/* 362 */           log(""Found directory: "" + path, 3);
/* 363 */           return true;
/* 364 */         }  if (this.type.isFile() && path.isFile()) {
/*     */           
/* 366 */           log(""Found file: "" + path, 3);
/* 367 */           return true;
/*     */         } 
/*     */         
/* 370 */         return false;
/*     */       } 
/*     */       
/* 373 */       FileUtils fileUtils = FileUtils.newFileUtils();
/* 374 */       File parent = fileUtils.getParentFile(path);
/*     */       
/* 376 */       if (parent != null && parent.exists() && this.file.equals(parent.getAbsolutePath())) {
/*     */         
/* 378 */         if (this.type == null) {
/* 379 */           log(""Found: "" + parent, 3);
/* 380 */           return true;
/* 381 */         }  if (this.type.isDir()) {
/* 382 */           log(""Found directory: "" + parent, 3);
/* 383 */           return true;
/*     */         } 
/*     */         
/* 386 */         return false;
/*     */       } 
/*     */ 
/*     */       
/* 390 */       if (path.exists() && path.isDirectory() && 
/* 391 */         checkFile(new File(path, this.file), this.file + "" in "" + path))
/*     */       {
/* 393 */         return true;
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 398 */       if (parent != null && parent.exists() && 
/* 399 */         checkFile(new File(parent, this.file), this.file + "" in "" + parent))
/*     */       {
/* 401 */         return true;
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 406 */       if (parent != null) {
/* 407 */         File grandParent = fileUtils.getParentFile(parent);
/* 408 */         if (grandParent != null && grandParent.exists() && 
/* 409 */           checkFile(new File(grandParent, this.file), this.file + "" in "" + grandParent))
/*     */         {
/* 411 */           return true;
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 417 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkFile(File f, String text) {
/* 424 */     if (this.type != null) {
/* 425 */       if (this.type.isDir()) {
/* 426 */         if (f.isDirectory()) {
/* 427 */           log(""Found directory: "" + text, 3);
/*     */         }
/* 429 */         return f.isDirectory();
/* 430 */       }  if (this.type.isFile()) {
/* 431 */         if (f.isFile()) {
/* 432 */           log(""Found file: "" + text, 3);
/*     */         }
/* 434 */         return f.isFile();
/*     */       } 
/*     */     } 
/* 437 */     if (f.exists()) {
/* 438 */       log(""Found: "" + text, 3);
/*     */     }
/* 440 */     return f.exists();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkResource(String resource) {
/* 447 */     if (this.loader != null) {
/* 448 */       return (this.loader.getResourceAsStream(resource) != null);
/*     */     }
/* 450 */     ClassLoader cL = getClass().getClassLoader();
/* 451 */     if (cL != null) {
/* 452 */       return (cL.getResourceAsStream(resource) != null);
/*     */     }
/* 454 */     return (ClassLoader.getSystemResourceAsStream(resource) != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean checkClass(String classname) {
/*     */     try {
/* 465 */       Class requiredClass = null;
/* 466 */       if (this.ignoreSystemclasses) {
/* 467 */         this.loader = new AntClassLoader(null, getProject(), this.classpath, false);
/*     */         
/* 469 */         if (this.loader != null) {
/*     */           try {
/* 471 */             requiredClass = this.loader.findClass(classname);
/*     */           
/*     */           }
/*     */           catch (SecurityException se) {
/*     */             
/* 476 */             return true;
/*     */           } 
/*     */         } else {
/* 479 */           return false;
/*     */         } 
/* 481 */       } else if (this.loader != null) {
/* 482 */         requiredClass = this.loader.loadClass(classname);
/*     */       } else {
/* 484 */         ClassLoader l = getClass().getClassLoader();
/*     */ 
/*     */         
/* 487 */         if (l != null) {
/* 488 */           requiredClass = l.loadClass(classname);
/*     */         } else {
/* 490 */           requiredClass = Class.forName(classname);
/*     */         } 
/*     */       } 
/* 493 */       AntClassLoader.initializeClass(requiredClass);
/* 494 */       return true;
/*     */     } catch (ClassNotFoundException e) {
/* 496 */       log(""class \"""" + classname + ""\"" was not found"", 4);
/*     */       
/* 498 */       return false;
/*     */     } catch (NoClassDefFoundError e) {
/* 500 */       log(""Could not load dependent class \"""" + e.getMessage() + ""\"" for class \"""" + classname + ""\"""", 4);
/*     */ 
/*     */       
/* 503 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileDir
/*     */     extends EnumeratedAttribute
/*     */   {
/* 513 */     private static final String[] values = new String[] { ""file"", ""dir"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 519 */     public String[] getValues() { return values; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 528 */     public boolean isDir() { return ""dir"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 537 */     public boolean isFile() { return ""file"".equalsIgnoreCase(getValue()); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Available.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Basename,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Basename
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*     */   private String property;
/*     */   private String suffix;
/*     */   
/* 101 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setSuffix(String suffix) { this.suffix = suffix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 122 */     if (this.property == null) {
/* 123 */       throw new BuildException(""property attribute required"", this.location);
/*     */     }
/* 125 */     if (this.file == null) {
/* 126 */       throw new BuildException(""file attribute required"", this.location);
/*     */     }
/* 128 */     String value = this.file.getName();
/* 129 */     if (this.suffix != null && value.endsWith(this.suffix)) {
/* 130 */       int pos = value.indexOf('.');
/* 131 */       value = value.substring(0, pos);
/*     */     } 
/* 133 */     getProject().setNewProperty(this.property, value);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Basename.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BuildNumber,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BuildNumber
/*     */   extends Task
/*     */ {
/*     */   private static final String DEFAULT_PROPERTY_NAME = ""build.number"";
/*     */   private static final String DEFAULT_FILENAME = ""build.number"";
/*     */   private File m_file;
/*     */   
/*  99 */   public void setFile(File file) { this.m_file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 110 */     File savedFile = this.m_file;
/*     */     
/* 112 */     validate();
/*     */     
/* 114 */     Properties properties = loadProperties();
/* 115 */     int buildNumber = getBuildNumber(properties);
/*     */     
/* 117 */     properties.put(""build.number"", String.valueOf(buildNumber + 1));
/*     */ 
/*     */ 
/*     */     
/* 121 */     FileOutputStream output = null;
/*     */     
/*     */     try {
/* 124 */       output = new FileOutputStream(this.m_file);
/*     */ 
/*     */ 
/*     */       
/* 128 */       properties.save(output, ""Build Number for ANT. Do not edit!"");
/*     */     } catch (IOException ioe) {
/* 130 */       String message = ""Error while writing "" + this.m_file;
/*     */       
/* 132 */       throw new BuildException(message, ioe);
/*     */     } finally {
/* 134 */       if (null != output) {
/*     */         try {
/* 136 */           output.close();
/* 137 */         } catch (IOException ioe) {}
/*     */       }
/*     */       
/* 140 */       this.m_file = savedFile;
/*     */     } 
/*     */ 
/*     */     
/* 144 */     getProject().setNewProperty(""build.number"", String.valueOf(buildNumber));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int getBuildNumber(Properties properties) throws BuildException {
/* 158 */     String buildNumber = properties.getProperty(""build.number"", ""0"").trim();
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 163 */       return Integer.parseInt(buildNumber);
/*     */     } catch (NumberFormatException nfe) {
/* 165 */       String message = this.m_file + "" contains a non integer build number: "" + buildNumber;
/*     */ 
/*     */       
/* 168 */       throw new BuildException(message, nfe);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Properties loadProperties() throws BuildException {
/* 181 */     FileInputStream input = null;
/*     */     
/*     */     try {
/* 184 */       Properties properties = new Properties();
/*     */       
/* 186 */       input = new FileInputStream(this.m_file);
/* 187 */       properties.load(input);
/* 188 */       return properties;
/*     */     } catch (IOException ioe) {
/* 190 */       throw new BuildException(ioe);
/*     */     } finally {
/* 192 */       if (null != input) {
/*     */         try {
/* 194 */           input.close();
/* 195 */         } catch (IOException ioe) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 209 */     if (null == this.m_file) {
/* 210 */       this.m_file = getProject().resolveFile(""build.number"");
/*     */     }
/*     */     
/* 213 */     if (!this.m_file.exists()) {
/*     */       try {
/* 215 */         FileUtils.newFileUtils().createNewFile(this.m_file);
/*     */       } catch (IOException ioe) {
/* 217 */         String message = this.m_file + "" doesn't exist and new file can't be created."";
/*     */ 
/*     */         
/* 220 */         throw new BuildException(message, ioe);
/*     */       } 
/*     */     }
/*     */     
/* 224 */     if (!this.m_file.canRead()) {
/* 225 */       String message = ""Unable to read from "" + this.m_file + ""."";
/*     */       
/* 227 */       throw new BuildException(message);
/*     */     } 
/*     */     
/* 230 */     if (!this.m_file.canWrite()) {
/* 231 */       String message = ""Unable to write to "" + this.m_file + ""."";
/*     */       
/* 233 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\BuildNumber.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BUnzip2,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.bzip2.CBZip2InputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class BUnzip2
/*     */   extends Unpack
/*     */ {
/*     */   private static final String DEFAULT_EXTENSION = "".bz2"";
/*     */   
/*  82 */   protected String getDefaultExtension() { return "".bz2""; }
/*     */ 
/*     */   
/*     */   protected void extract() {
/*  86 */     if (this.source.lastModified() > this.dest.lastModified()) {
/*  87 */       log(""Expanding "" + this.source.getAbsolutePath() + "" to "" + this.dest.getAbsolutePath());
/*     */ 
/*     */       
/*  90 */       FileOutputStream out = null;
/*  91 */       CBZip2InputStream zIn = null;
/*  92 */       FileInputStream fis = null;
/*  93 */       BufferedInputStream bis = null;
/*     */       try {
/*  95 */         out = new FileOutputStream(this.dest);
/*  96 */         fis = new FileInputStream(this.source);
/*  97 */         bis = new BufferedInputStream(fis);
/*  98 */         int b = bis.read();
/*  99 */         if (b != 66) {
/* 100 */           throw new BuildException(""Invalid bz2 file."", this.location);
/*     */         }
/* 102 */         b = bis.read();
/* 103 */         if (b != 90) {
/* 104 */           throw new BuildException(""Invalid bz2 file."", this.location);
/*     */         }
/* 106 */         zIn = new CBZip2InputStream(bis);
/* 107 */         byte[] buffer = new byte[8192];
/* 108 */         int count = 0;
/*     */         do {
/* 110 */           out.write(buffer, 0, count);
/* 111 */           count = zIn.read(buffer, 0, buffer.length);
/* 112 */         } while (count != -1);
/*     */       } catch (IOException ioe) {
/* 114 */         String msg = ""Problem expanding bzip2 "" + ioe.getMessage();
/* 115 */         throw new BuildException(msg, ioe, this.location);
/*     */       } finally {
/* 117 */         if (bis != null) {
/*     */           try {
/* 119 */             bis.close();
/* 120 */           } catch (IOException ioex) {}
/*     */         }
/* 122 */         if (fis != null) {
/*     */           try {
/* 124 */             fis.close();
/* 125 */           } catch (IOException ioex) {}
/*     */         }
/* 127 */         if (out != null) {
/*     */           try {
/* 129 */             out.close();
/* 130 */           } catch (IOException ioex) {}
/*     */         }
/* 132 */         if (zIn != null)
/*     */           try {
/* 134 */             zIn.close();
/* 135 */           } catch (IOException ioex) {} 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\BUnzip2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.BZip2,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.BufferedOutputStream;
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.bzip2.CBZip2OutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class BZip2
/*    */   extends Pack
/*    */ {
/*    */   protected void pack() {
/* 77 */     CBZip2OutputStream zOut = null;
/*    */     try {
/* 79 */       BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(this.zipFile));
/*    */       
/* 81 */       bos.write(66);
/* 82 */       bos.write(90);
/* 83 */       zOut = new CBZip2OutputStream(bos);
/* 84 */       zipFile(this.source, (OutputStream)zOut);
/*    */     } catch (IOException ioe) {
/* 86 */       String msg = ""Problem creating bzip2 "" + ioe.getMessage();
/* 87 */       throw new BuildException(msg, ioe, this.location);
/*    */     } finally {
/* 89 */       if (zOut != null)
/*    */         
/*    */         try {
/* 92 */           zOut.close();
/* 93 */         } catch (IOException e) {} 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\BZip2.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CallTarget,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CallTarget
/*     */   extends Task
/*     */ {
/*     */   private Ant callee;
/*     */   private String subTarget;
/*     */   private boolean inheritAll = true;
/*     */   private boolean inheritRefs = false;
/*     */   
/* 100 */   public void setInheritAll(boolean inherit) { this.inheritAll = inherit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setInheritRefs(boolean inheritRefs) { this.inheritRefs = inheritRefs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 117 */     this.callee = (Ant)getProject().createTask(""ant"");
/* 118 */     this.callee.setOwningTarget(getOwningTarget());
/* 119 */     this.callee.setTaskName(getTaskName());
/* 120 */     this.callee.setLocation(getLocation());
/* 121 */     this.callee.init();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 130 */     if (this.callee == null) {
/* 131 */       init();
/*     */     }
/*     */     
/* 134 */     if (this.subTarget == null) {
/* 135 */       throw new BuildException(""Attribute target is required."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 139 */     this.callee.setAntfile(getProject().getProperty(""ant.file""));
/* 140 */     this.callee.setTarget(this.subTarget);
/* 141 */     this.callee.setInheritAll(this.inheritAll);
/* 142 */     this.callee.setInheritRefs(this.inheritRefs);
/* 143 */     this.callee.execute();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Property createParam() {
/* 150 */     if (this.callee == null) {
/* 151 */       init();
/*     */     }
/* 153 */     return this.callee.createProperty();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addReference(Ant.Reference r) {
/* 162 */     if (this.callee == null) {
/* 163 */       init();
/*     */     }
/* 165 */     this.callee.addReference(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setTarget(String target) { this.subTarget = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String line) {
/* 181 */     if (this.callee != null) {
/* 182 */       this.callee.handleOutput(line);
/*     */     } else {
/* 184 */       super.handleOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String line) {
/* 194 */     if (this.callee != null) {
/* 195 */       this.callee.handleErrorOutput(line);
/*     */     } else {
/* 197 */       super.handleErrorOutput(line);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\CallTarget.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Checksum,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.security.DigestInputStream;
/*     */ import java.security.MessageDigest;
/*     */ import java.security.NoSuchAlgorithmException;
/*     */ import java.security.NoSuchProviderException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Checksum
/*     */   extends MatchingTask
/*     */   implements Condition
/*     */ {
/*  88 */   private File file = null;
/*     */ 
/*     */ 
/*     */   
/*  92 */   private String algorithm = ""MD5"";
/*     */ 
/*     */ 
/*     */   
/*  96 */   private String provider = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String fileext;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String property;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean forceOverwrite;
/*     */ 
/*     */ 
/*     */   
/*     */   private String verifyProperty;
/*     */ 
/*     */ 
/*     */   
/* 118 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */   
/* 122 */   private Hashtable includeFileMap = new Hashtable();
/*     */ 
/*     */ 
/*     */   
/*     */   private MessageDigest messageDigest;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean isCondition;
/*     */ 
/*     */ 
/*     */   
/* 134 */   private int readBufferSize = 8192;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setAlgorithm(String algorithm) { this.algorithm = algorithm; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   public void setProvider(String provider) { this.provider = provider; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setFileext(String fileext) { this.fileext = fileext; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setVerifyproperty(String verifyProperty) { this.verifyProperty = verifyProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setForceOverwrite(boolean forceOverwrite) { this.forceOverwrite = forceOverwrite; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setReadBufferSize(int size) { this.readBufferSize = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 209 */     this.isCondition = false;
/* 210 */     boolean value = validateAndExecute();
/* 211 */     if (this.verifyProperty != null) {
/* 212 */       this.project.setNewProperty(this.verifyProperty, (new Boolean(value)).toString());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 224 */     this.isCondition = true;
/* 225 */     return validateAndExecute();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validateAndExecute() throws BuildException {
/* 232 */     String savedFileExt = this.fileext;
/*     */     
/* 234 */     if (this.file == null && this.filesets.size() == 0) {
/* 235 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */     
/* 239 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 240 */       throw new BuildException(""Checksum cannot be generated for directories"");
/*     */     }
/*     */ 
/*     */     
/* 244 */     if (this.property != null && this.fileext != null) {
/* 245 */       throw new BuildException(""Property and FileExt cannot co-exist."");
/*     */     }
/*     */ 
/*     */     
/* 249 */     if (this.property != null) {
/* 250 */       if (this.forceOverwrite) {
/* 251 */         throw new BuildException(""ForceOverwrite cannot be used when Property is specified"");
/*     */       }
/*     */ 
/*     */       
/* 255 */       if (this.file != null) {
/* 256 */         if (this.filesets.size() > 0) {
/* 257 */           throw new BuildException(""Multiple files cannot be used when Property is specified"");
/*     */         
/*     */         }
/*     */       }
/* 261 */       else if (this.filesets.size() > 1) {
/* 262 */         throw new BuildException(""Multiple files cannot be used when Property is specified"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 268 */     if (this.verifyProperty != null) {
/* 269 */       this.isCondition = true;
/*     */     }
/*     */     
/* 272 */     if (this.verifyProperty != null && this.forceOverwrite) {
/* 273 */       throw new BuildException(""VerifyProperty and ForceOverwrite cannot co-exist."");
/*     */     }
/*     */ 
/*     */     
/* 277 */     if (this.isCondition && this.forceOverwrite) {
/* 278 */       throw new BuildException(""ForceOverwrite cannot be used when conditions are being used."");
/*     */     }
/*     */ 
/*     */     
/* 282 */     this.messageDigest = null;
/* 283 */     if (this.provider != null) {
/*     */       try {
/* 285 */         this.messageDigest = MessageDigest.getInstance(this.algorithm, this.provider);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 287 */         throw new BuildException(noalgo, this.location);
/*     */       } catch (NoSuchProviderException noprovider) {
/* 289 */         throw new BuildException(noprovider, this.location);
/*     */       } 
/*     */     } else {
/*     */       try {
/* 293 */         this.messageDigest = MessageDigest.getInstance(this.algorithm);
/*     */       } catch (NoSuchAlgorithmException noalgo) {
/* 295 */         throw new BuildException(noalgo, this.location);
/*     */       } 
/*     */     } 
/*     */     
/* 299 */     if (this.messageDigest == null) {
/* 300 */       throw new BuildException(""Unable to create Message Digest"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 304 */     if (this.fileext == null) {
/* 305 */       this.fileext = ""."" + this.algorithm;
/* 306 */     } else if (this.fileext.trim().length() == 0) {
/* 307 */       throw new BuildException(""File extension when specified must not be an empty string"");
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 312 */       addToIncludeFileMap(this.file);
/*     */       
/* 314 */       int sizeofFileSet = this.filesets.size();
/* 315 */       for (int i = 0; i < sizeofFileSet; i++) {
/* 316 */         FileSet fs = this.filesets.elementAt(i);
/* 317 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 318 */         String[] srcFiles = ds.getIncludedFiles();
/* 319 */         for (int j = 0; j < srcFiles.length; j++) {
/* 320 */           File src = new File(fs.getDir(this.project), srcFiles[j]);
/* 321 */           addToIncludeFileMap(src);
/*     */         } 
/*     */       } 
/*     */       
/* 325 */       return generateChecksums();
/*     */     } finally {
/* 327 */       this.fileext = savedFileExt;
/* 328 */       this.includeFileMap.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addToIncludeFileMap(File file) throws BuildException {
/* 337 */     if (file != null) {
/* 338 */       if (file.exists()) {
/* 339 */         if (this.property == null) {
/* 340 */           File dest = new File(file.getParent(), file.getName() + this.fileext);
/*     */           
/* 342 */           if (this.forceOverwrite || this.isCondition || file.lastModified() > dest.lastModified()) {
/*     */             
/* 344 */             this.includeFileMap.put(file, dest);
/*     */           } else {
/* 346 */             log(file + "" omitted as "" + dest + "" is up to date."", 3);
/*     */           } 
/*     */         } else {
/*     */           
/* 350 */           this.includeFileMap.put(file, this.property);
/*     */         } 
/*     */       } else {
/* 353 */         String message = ""Could not find file "" + file.getAbsolutePath() + "" to generate checksum for."";
/*     */ 
/*     */         
/* 356 */         log(message);
/* 357 */         throw new BuildException(message, this.location);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean generateChecksums() throws BuildException {
/* 366 */     boolean checksumMatches = true;
/* 367 */     FileInputStream fis = null;
/* 368 */     FileOutputStream fos = null;
/* 369 */     byte[] buf = new byte[this.readBufferSize];
/*     */     try {
/* 371 */       for (Enumeration e = this.includeFileMap.keys(); e.hasMoreElements(); ) {
/* 372 */         this.messageDigest.reset();
/* 373 */         File src = e.nextElement();
/* 374 */         if (!this.isCondition) {
/* 375 */           log(""Calculating "" + this.algorithm + "" checksum for "" + src);
/*     */         }
/* 377 */         fis = new FileInputStream(src);
/* 378 */         DigestInputStream dis = new DigestInputStream(fis, this.messageDigest); do {
/*     */         
/* 380 */         } while (dis.read(buf, 0, this.readBufferSize) != -1);
/*     */ 
/*     */         
/* 383 */         dis.close();
/* 384 */         fis.close();
/* 385 */         fis = null;
/* 386 */         byte[] fileDigest = this.messageDigest.digest();
/* 387 */         StringBuffer checksumSb = new StringBuffer();
/* 388 */         for (int i = 0; i < fileDigest.length; i++) {
/* 389 */           String hexStr = Integer.toHexString(0xFF & fileDigest[i]);
/* 390 */           if (hexStr.length() < 2) {
/* 391 */             checksumSb.append(""0"");
/*     */           }
/* 393 */           checksumSb.append(hexStr);
/*     */         } 
/* 395 */         String checksum = checksumSb.toString();
/*     */         
/* 397 */         Object destination = this.includeFileMap.get(src);
/* 398 */         if (destination instanceof String) {
/* 399 */           String prop = (String)destination;
/* 400 */           if (this.isCondition) {
/* 401 */             checksumMatches = checksum.equals(this.property); continue;
/*     */           } 
/* 403 */           this.project.setNewProperty(prop, checksum); continue;
/*     */         } 
/* 405 */         if (destination instanceof File) {
/* 406 */           if (this.isCondition) {
/* 407 */             File existingFile = (File)destination;
/* 408 */             if (existingFile.exists()) {
/* 409 */               fis = new FileInputStream(existingFile);
/* 410 */               InputStreamReader isr = new InputStreamReader(fis);
/* 411 */               BufferedReader br = new BufferedReader(isr);
/* 412 */               String suppliedChecksum = br.readLine();
/* 413 */               fis.close();
/* 414 */               fis = null;
/* 415 */               br.close();
/* 416 */               isr.close();
/* 417 */               checksumMatches = checksum.equals(suppliedChecksum);
/*     */               continue;
/*     */             } 
/* 420 */             checksumMatches = false;
/*     */             continue;
/*     */           } 
/* 423 */           File dest = (File)destination;
/* 424 */           fos = new FileOutputStream(dest);
/* 425 */           fos.write(checksum.getBytes());
/* 426 */           fos.close();
/* 427 */           fos = null;
/*     */         } 
/*     */       } 
/*     */     } catch (Exception e) {
/*     */       
/* 432 */       throw new BuildException(e, this.location);
/*     */     } finally {
/* 434 */       if (fis != null) {
/*     */         try {
/* 436 */           fis.close();
/* 437 */         } catch (IOException e) {}
/*     */       }
/* 439 */       if (fos != null) {
/*     */         try {
/* 441 */           fos.close();
/* 442 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/* 445 */     return checksumMatches;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Checksum.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Chmod,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Chmod
/*     */   extends ExecuteOn
/*     */ {
/*  83 */   private FileSet defaultSet = new FileSet();
/*     */   
/*     */   private boolean defaultSetDefined = false;
/*     */   
/*     */   private boolean havePerm = false;
/*     */ 
/*     */   
/*     */   public Chmod() {
/*  91 */     super.setExecutable(""chmod"");
/*  92 */     setParallel(true);
/*  93 */     super.setSkipEmptyFilesets(true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/* 100 */     super.setProject(project);
/* 101 */     this.defaultSet.setProject(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFile(File src) {
/* 109 */     FileSet fs = new FileSet();
/* 110 */     fs.setDir(new File(src.getParent()));
/* 111 */     fs.createInclude().setName(src.getName());
/* 112 */     addFileset(fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setDir(File src) { this.defaultSet.setDir(src); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPerm(String perm) {
/* 128 */     createArg().setValue(perm);
/* 129 */     this.havePerm = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 136 */     this.defaultSetDefined = true;
/* 137 */     return this.defaultSet.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 144 */     this.defaultSetDefined = true;
/* 145 */     return this.defaultSet.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 152 */     this.defaultSetDefined = true;
/* 153 */     return this.defaultSet.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 163 */     this.defaultSetDefined = true;
/* 164 */     this.defaultSet.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 174 */     this.defaultSetDefined = true;
/* 175 */     this.defaultSet.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 186 */     this.defaultSetDefined = true;
/* 187 */     this.defaultSet.setDefaultexcludes(useDefaultExcludes);
/*     */   }
/*     */   
/*     */   protected void checkConfiguration() {
/* 191 */     if (!this.havePerm) {
/* 192 */       throw new BuildException(""Required attribute perm not set in chmod"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 196 */     if (this.defaultSetDefined && this.defaultSet.getDir(this.project) != null) {
/* 197 */       addFileset(this.defaultSet);
/*     */     }
/* 199 */     super.checkConfiguration();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 209 */     if (this.defaultSetDefined || this.defaultSet.getDir(this.project) == null) {
/*     */       try {
/* 211 */         super.execute();
/*     */       } finally {
/* 213 */         if (this.defaultSetDefined && this.defaultSet.getDir(this.project) != null) {
/* 214 */           this.filesets.removeElement(this.defaultSet);
/*     */         }
/*     */       } 
/* 217 */     } else if (isValidOs()) {
/*     */       
/* 219 */       Execute execute = prepareExec();
/* 220 */       Commandline cloned = (Commandline)this.cmdl.clone();
/* 221 */       cloned.createArgument().setValue(this.defaultSet.getDir(this.project).getPath());
/*     */       
/*     */       try {
/* 224 */         execute.setCommandline(cloned.getCommandline());
/* 225 */         runExecute(execute);
/*     */       } catch (IOException e) {
/* 227 */         throw new BuildException(""Execute failed: "" + e, e, this.location);
/*     */       } finally {
/*     */         
/* 230 */         logFlush();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setExecutable(String e) { throw new BuildException(this.taskType + "" doesn't support the executable attribute"", this.location); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setCommand(Commandline cmdl) { throw new BuildException(this.taskType + "" doesn't support the command attribute"", this.location); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setSkipEmptyFilesets(boolean skip) { throw new BuildException(this.taskType + "" doesn't support the skipemptyfileset attribute"", this.location); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   protected boolean isValidOs() { return (Os.isFamily(""unix"") && super.isValidOs()); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Chmod.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Concat,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringReader;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Concat
/*     */   extends Task
/*     */ {
/* 109 */   private File destinationFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private StringBuffer textBuffer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   private Vector fileSets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setDestfile(File destinationFile) { this.destinationFile = destinationFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public void addFileset(FileSet set) { this.fileSets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   public void addFilelist(FileList list) { this.fileSets.addElement(list); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(String text) {
/* 189 */     if (this.textBuffer == null)
/*     */     {
/*     */       
/* 192 */       this.textBuffer = new StringBuffer(text.length());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 197 */     this.textBuffer.append(text);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 207 */     sanitizeText();
/*     */ 
/*     */     
/* 210 */     if (this.fileSets.size() == 0 && this.textBuffer == null)
/*     */     {
/* 212 */       throw new BuildException(""At least one file must be provided, or some text."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 220 */     if (this.fileSets.size() > 0 && this.textBuffer != null) {
/* 221 */       throw new BuildException(""Cannot include inline text when using filesets."");
/*     */     }
/*     */ 
/*     */     
/* 225 */     boolean savedAppend = this.append;
/*     */ 
/*     */     
/*     */     try {
/* 229 */       for (Enumeration e = this.fileSets.elements(); e.hasMoreElements(); ) {
/*     */ 
/*     */         
/* 232 */         File fileSetBase = null;
/*     */ 
/*     */         
/* 235 */         String[] srcFiles = null;
/*     */ 
/*     */ 
/*     */         
/* 239 */         Object next = e.nextElement();
/*     */         
/* 241 */         if (next instanceof FileSet) {
/*     */           
/* 243 */           FileSet fileSet = (FileSet)next;
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 248 */           DirectoryScanner scanner = fileSet.getDirectoryScanner(this.project);
/*     */ 
/*     */ 
/*     */           
/* 252 */           fileSetBase = fileSet.getDir(this.project);
/*     */ 
/*     */           
/* 255 */           srcFiles = scanner.getIncludedFiles();
/*     */         }
/* 257 */         else if (next instanceof FileList) {
/*     */           
/* 259 */           FileList fileList = (FileList)next;
/*     */ 
/*     */           
/* 262 */           fileSetBase = fileList.getDir(this.project);
/*     */ 
/*     */           
/* 265 */           srcFiles = fileList.getFiles(this.project);
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 270 */         if (srcFiles != null) {
/* 271 */           catFiles(fileSetBase, srcFiles);
/*     */         }
/*     */       } 
/*     */     } finally {
/* 275 */       this.append = savedAppend;
/*     */     } 
/*     */ 
/*     */     
/* 279 */     catText();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {
/* 286 */     this.append = false;
/* 287 */     this.destinationFile = null;
/* 288 */     this.encoding = null;
/* 289 */     this.fileSets = new Vector();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void catFiles(File base, String[] files) {
/* 304 */     int len = files.length;
/* 305 */     String[] input = new String[len];
/* 306 */     for (int i = 0; i < len; i++) {
/*     */       
/* 308 */       File current = new File(base, files[i]);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 313 */       if (!current.exists()) {
/*     */         
/* 315 */         log(""File "" + current + "" does not exist."", 0);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 320 */         input[i] = current.getAbsolutePath();
/*     */       } 
/*     */     } 
/*     */     
/* 324 */     if (this.encoding == null) {
/* 325 */       OutputStream os = null;
/* 326 */       InputStream is = null;
/*     */ 
/*     */       
/*     */       try {
/* 330 */         if (this.destinationFile == null) {
/*     */           
/* 332 */           os = new LogOutputStream(this, 1);
/*     */         } else {
/* 334 */           os = new FileOutputStream(this.destinationFile.getAbsolutePath(), this.append);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 341 */           this.append = true;
/*     */         } 
/*     */         
/* 344 */         for (int i = 0; i < len; i++) {
/*     */ 
/*     */           
/* 347 */           if (this.destinationFile != null && this.destinationFile.getAbsolutePath().equals(input[i]))
/*     */           {
/* 349 */             log(this.destinationFile.getName() + "": input file is "" + ""output file."", 1);
/*     */           }
/*     */ 
/*     */           
/* 353 */           is = new FileInputStream(input[i]);
/* 354 */           byte[] buffer = new byte[8096];
/*     */           while (true) {
/* 356 */             int bytesRead = is.read(buffer);
/* 357 */             if (bytesRead == -1) {
/*     */               break;
/*     */             }
/*     */ 
/*     */             
/* 362 */             os.write(buffer, 0, bytesRead);
/*     */           } 
/* 364 */           os.flush();
/* 365 */           is.close();
/* 366 */           is = null;
/*     */         } 
/*     */       } catch (IOException ioex) {
/* 369 */         throw new BuildException(""Error while concatenating: "" + ioex.getMessage(), ioex);
/*     */       } finally {
/*     */         
/* 372 */         if (is != null) {
/*     */           try {
/* 374 */             is.close();
/* 375 */           } catch (Exception ignore) {}
/*     */         }
/* 377 */         if (os != null) {
/*     */           try {
/* 379 */             os.close();
/* 380 */           } catch (Exception ignore) {}
/*     */         }
/*     */       }
/*     */     
/*     */     } else {
/*     */       
/* 386 */       PrintWriter out = null;
/* 387 */       BufferedReader in = null;
/*     */       
/*     */       try {
/* 390 */         if (this.destinationFile == null) {
/*     */           
/* 392 */           out = new PrintWriter(new OutputStreamWriter(new LogOutputStream(this, 1)));
/*     */         }
/*     */         else {
/*     */           
/* 396 */           out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.destinationFile.getAbsolutePath(), this.append), this.encoding));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 406 */           this.append = true;
/*     */         } 
/*     */         
/* 409 */         for (int i = 0; i < len; i++) {
/* 410 */           in = new BufferedReader(new InputStreamReader(new FileInputStream(input[i]), this.encoding));
/*     */ 
/*     */           
/*     */           String line;
/*     */           
/* 415 */           while ((line = in.readLine()) != null)
/*     */           {
/*     */             
/* 418 */             out.println(line);
/*     */           }
/* 420 */           in.close();
/* 421 */           in = null;
/*     */         } 
/*     */       } catch (IOException ioe) {
/* 424 */         throw new BuildException(""Error while concatenating: "" + ioe.getMessage(), ioe);
/*     */       }
/*     */       finally {
/*     */         
/* 428 */         if (in != null) {
/*     */           try {
/* 430 */             in.close();
/* 431 */           } catch (Exception ignore) {}
/*     */         }
/* 433 */         if (out != null) {
/*     */           try {
/* 435 */             out.close();
/* 436 */           } catch (Exception ignore) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void catText() {
/* 450 */     if (this.textBuffer == null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 455 */     String text = this.textBuffer.toString();
/*     */ 
/*     */     
/* 458 */     text = ProjectHelper.replaceProperties(this.project, text, this.project.getProperties());
/*     */ 
/*     */ 
/*     */     
/* 462 */     FileWriter writer = null;
/* 463 */     if (this.destinationFile != null) {
/*     */       try {
/* 465 */         writer = new FileWriter(this.destinationFile.getAbsolutePath(), this.append);
/*     */       } catch (IOException ioe) {
/*     */         
/* 468 */         throw new BuildException(""Error creating destination file."", ioe);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 474 */     BufferedReader reader = null;
/*     */     try {
/* 476 */       reader = new BufferedReader(new StringReader(text));
/*     */       
/*     */       String line;
/* 479 */       while ((line = reader.readLine()) != null) {
/* 480 */         if (this.destinationFile == null) {
/*     */ 
/*     */           
/* 483 */           log(line, 1); continue;
/*     */         } 
/* 485 */         writer.write(line);
/* 486 */         writer.write(StringUtils.LINE_SEP);
/* 487 */         writer.flush();
/*     */       }
/*     */     
/*     */     } catch (IOException ioe) {
/*     */       
/* 492 */       throw new BuildException(""Error while concatenating text."", ioe);
/*     */     }
/*     */     finally {
/*     */       
/* 496 */       if (reader != null) {
/*     */         try {
/* 498 */           reader.close();
/* 499 */         } catch (Exception ignore) {}
/*     */       }
/*     */       
/* 502 */       if (writer != null) {
/*     */         try {
/* 504 */           writer.close();
/* 505 */         } catch (Exception ignore) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void sanitizeText() {
/* 517 */     if (this.textBuffer != null && 
/* 518 */       this.textBuffer.toString().trim().length() == 0)
/* 519 */       this.textBuffer = null; 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Concat.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ConditionTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.taskdefs.condition.ConditionBase;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ConditionTask
/*     */   extends ConditionBase
/*     */ {
/*  81 */   private String property = null;
/*  82 */   private String value = ""true"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setProperty(String p) { this.property = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setValue(String v) { this.value = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 105 */     if (countConditions() > 1) {
/* 106 */       throw new BuildException(""You must not nest more than one condition into <condition>"");
/*     */     }
/*     */     
/* 109 */     if (countConditions() < 1) {
/* 110 */       throw new BuildException(""You must nest a condition into <condition>"");
/*     */     }
/*     */     
/* 113 */     if (this.property == null) {
/* 114 */       throw new BuildException(""The property attribute is required."");
/*     */     }
/*     */     
/* 117 */     Condition c = getConditions().nextElement();
/* 118 */     if (c.eval()) {
/* 119 */       log(""Condition true; setting "" + this.property + "" to "" + this.value, 4);
/*     */       
/* 121 */       getProject().setNewProperty(this.property, this.value);
/*     */     } else {
/* 123 */       log(""Condition false; not setting "" + this.property, 4);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ConditionTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copy,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.FlatFileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copy
/*     */   extends Task
/*     */ {
/* 101 */   protected File file = null;
/* 102 */   protected File destFile = null;
/* 103 */   protected File destDir = null;
/* 104 */   protected Vector filesets = new Vector();
/*     */   
/*     */   protected boolean filtering = false;
/*     */   protected boolean preserveLastModified = false;
/*     */   protected boolean forceOverwrite = false;
/*     */   protected boolean flatten = false;
/* 110 */   protected int verbosity = 3;
/*     */   
/*     */   protected boolean includeEmpty = true;
/*     */   private boolean failonerror = true;
/* 114 */   protected Hashtable fileCopyMap = new Hashtable();
/* 115 */   protected Hashtable dirCopyMap = new Hashtable();
/* 116 */   protected Hashtable completeDirMap = new Hashtable();
/*     */   
/* 118 */   protected Mapper mapperElement = null;
/* 119 */   private Vector filterChains = new Vector();
/* 120 */   private Vector filterSets = new Vector();
/*     */   private FileUtils fileUtils;
/* 122 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public Copy() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */   
/* 132 */   protected FileUtils getFileUtils() { return this.fileUtils; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setTofile(File destFile) { this.destFile = destFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setTodir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FilterChain createFilterChain() {
/* 160 */     FilterChain filterChain = new FilterChain();
/* 161 */     this.filterChains.addElement(filterChain);
/* 162 */     return filterChain;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FilterSet createFilterSet() {
/* 169 */     FilterSet filterSet = new FilterSet();
/* 170 */     this.filterSets.addElement(filterSet);
/* 171 */     return filterSet;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void setPreserveLastModified(String preserve) { setPreserveLastModified(Project.toBoolean(preserve)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setPreserveLastModified(boolean preserve) { this.preserveLastModified = preserve; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 198 */   public boolean getPreserveLastModified() { return this.preserveLastModified; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   protected Vector getFilterSets() { return this.filterSets; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   protected Vector getFilterChains() { return this.filterChains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setFiltering(boolean filtering) { this.filtering = filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setOverwrite(boolean overwrite) { this.forceOverwrite = overwrite; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setFlatten(boolean flatten) { this.flatten = flatten; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean verbose) {
/* 248 */     if (verbose) {
/* 249 */       this.verbosity = 2;
/*     */     } else {
/* 251 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void setIncludeEmptyDirs(boolean includeEmpty) { this.includeEmpty = includeEmpty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   public void setFailOnError(boolean failonerror) { this.failonerror = failonerror; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 274 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 281 */     if (this.mapperElement != null) {
/* 282 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 285 */     this.mapperElement = new Mapper(this.project);
/* 286 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 304 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 311 */     File savedFile = this.file;
/* 312 */     File savedDestFile = this.destFile;
/* 313 */     File savedDestDir = this.destDir;
/* 314 */     FileSet savedFileSet = null;
/* 315 */     if (this.file == null && this.destFile != null && this.filesets.size() == 1)
/*     */     {
/* 317 */       savedFileSet = this.filesets.elementAt(0);
/*     */     }
/*     */ 
/*     */     
/* 321 */     validateAttributes();
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 326 */       if (this.file != null) {
/* 327 */         if (this.file.exists()) {
/* 328 */           if (this.destFile == null) {
/* 329 */             this.destFile = new File(this.destDir, this.file.getName());
/*     */           }
/*     */           
/* 332 */           if (this.forceOverwrite || this.file.lastModified() > this.destFile.lastModified()) {
/*     */             
/* 334 */             this.fileCopyMap.put(this.file.getAbsolutePath(), this.destFile.getAbsolutePath());
/*     */           } else {
/*     */             
/* 337 */             log(this.file + "" omitted as "" + this.destFile + "" is up to date."", 3);
/*     */           } 
/*     */         } else {
/*     */           
/* 341 */           String message = ""Warning: Could not find file "" + this.file.getAbsolutePath() + "" to copy."";
/*     */           
/* 343 */           if (!this.failonerror) {
/* 344 */             log(message);
/*     */           } else {
/* 346 */             throw new BuildException(message);
/*     */           } 
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 352 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 353 */         FileSet fs = this.filesets.elementAt(i);
/* 354 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 355 */         File fromDir = fs.getDir(this.project);
/*     */         
/* 357 */         String[] srcFiles = ds.getIncludedFiles();
/* 358 */         String[] srcDirs = ds.getIncludedDirectories();
/* 359 */         boolean isEverythingIncluded = ds.isEverythingIncluded();
/* 360 */         if (isEverythingIncluded && !this.flatten && this.mapperElement == null)
/*     */         {
/* 362 */           this.completeDirMap.put(fromDir, this.destDir);
/*     */         }
/* 364 */         scan(fromDir, this.destDir, srcFiles, srcDirs);
/*     */       } 
/*     */ 
/*     */       
/* 368 */       doFileOperations();
/*     */     }
/*     */     finally {
/*     */       
/* 372 */       this.file = savedFile;
/* 373 */       this.destFile = savedDestFile;
/* 374 */       this.destDir = savedDestDir;
/* 375 */       if (savedFileSet != null) {
/* 376 */         this.filesets.insertElementAt(savedFileSet, 0);
/*     */       }
/*     */       
/* 379 */       this.fileCopyMap.clear();
/* 380 */       this.dirCopyMap.clear();
/* 381 */       this.completeDirMap.clear();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void validateAttributes() throws BuildException {
/* 395 */     if (this.file == null && this.filesets.size() == 0) {
/* 396 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */     
/* 400 */     if (this.destFile != null && this.destDir != null) {
/* 401 */       throw new BuildException(""Only one of tofile and todir may be set."");
/*     */     }
/*     */ 
/*     */     
/* 405 */     if (this.destFile == null && this.destDir == null) {
/* 406 */       throw new BuildException(""One of tofile or todir must be set."");
/*     */     }
/*     */     
/* 409 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 410 */       throw new BuildException(""Use a fileset to copy directories."");
/*     */     }
/*     */     
/* 413 */     if (this.destFile != null && this.filesets.size() > 0) {
/* 414 */       if (this.filesets.size() > 1) {
/* 415 */         throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */       }
/*     */       
/* 418 */       FileSet fs = this.filesets.elementAt(0);
/* 419 */       DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 420 */       String[] srcFiles = ds.getIncludedFiles();
/*     */       
/* 422 */       if (srcFiles.length == 0) {
/* 423 */         throw new BuildException(""Cannot perform operation from directory to file."");
/*     */       }
/* 425 */       if (srcFiles.length == 1) {
/* 426 */         if (this.file == null) {
/* 427 */           this.file = new File(ds.getBasedir(), srcFiles[0]);
/* 428 */           this.filesets.removeElementAt(0);
/*     */         } else {
/* 430 */           throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */         } 
/*     */       } else {
/*     */         
/* 434 */         throw new BuildException(""Cannot concatenate multiple files into a single file."");
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 440 */     if (this.destFile != null) {
/* 441 */       this.destDir = this.fileUtils.getParentFile(this.destFile);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scan(File fromDir, File toDir, String[] files, String[] dirs) {
/* 452 */     Object object = null;
/* 453 */     if (this.mapperElement != null) {
/* 454 */       object = this.mapperElement.getImplementation();
/* 455 */     } else if (this.flatten) {
/* 456 */       FlatFileNameMapper flatFileNameMapper = new FlatFileNameMapper();
/*     */     } else {
/* 458 */       object = new IdentityMapper();
/*     */     } 
/*     */     
/* 461 */     buildMap(fromDir, toDir, files, (FileNameMapper)object, this.fileCopyMap);
/*     */     
/* 463 */     if (this.includeEmpty) {
/* 464 */       buildMap(fromDir, toDir, dirs, (FileNameMapper)object, this.dirCopyMap);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void buildMap(File fromDir, File toDir, String[] names, FileNameMapper mapper, Hashtable map) {
/* 471 */     String[] toCopy = null;
/* 472 */     if (this.forceOverwrite) {
/* 473 */       Vector v = new Vector();
/* 474 */       for (int i = 0; i < names.length; i++) {
/* 475 */         if (mapper.mapFileName(names[i]) != null) {
/* 476 */           v.addElement(names[i]);
/*     */         }
/*     */       } 
/* 479 */       toCopy = new String[v.size()];
/* 480 */       v.copyInto((Object[])toCopy);
/*     */     } else {
/* 482 */       SourceFileScanner ds = new SourceFileScanner(this);
/* 483 */       toCopy = ds.restrict(names, fromDir, toDir, mapper);
/*     */     } 
/*     */     
/* 486 */     for (int i = 0; i < toCopy.length; i++) {
/* 487 */       File src = new File(fromDir, toCopy[i]);
/* 488 */       File dest = new File(toDir, mapper.mapFileName(toCopy[i])[0]);
/* 489 */       map.put(src.getAbsolutePath(), dest.getAbsolutePath());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/* 498 */     if (this.fileCopyMap.size() > 0) {
/* 499 */       log(""Copying "" + this.fileCopyMap.size() + "" file"" + ((this.fileCopyMap.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */ 
/*     */       
/* 503 */       Enumeration e = this.fileCopyMap.keys();
/* 504 */       while (e.hasMoreElements()) {
/* 505 */         String fromFile = e.nextElement();
/* 506 */         String toFile = (String)this.fileCopyMap.get(fromFile);
/*     */         
/* 508 */         if (fromFile.equals(toFile)) {
/* 509 */           log(""Skipping self-copy of "" + fromFile, this.verbosity);
/*     */           
/*     */           continue;
/*     */         } 
/*     */         try {
/* 514 */           log(""Copying "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */           
/* 516 */           FilterSetCollection executionFilters = new FilterSetCollection();
/*     */           
/* 518 */           if (this.filtering) {
/* 519 */             executionFilters.addFilterSet(this.project.getGlobalFilterSet());
/*     */           }
/*     */           
/* 522 */           Enumeration filterEnum = this.filterSets.elements();
/* 523 */           while (filterEnum.hasMoreElements()) {
/* 524 */             executionFilters.addFilterSet(filterEnum.nextElement());
/*     */           }
/*     */           
/* 527 */           this.fileUtils.copyFile(fromFile, toFile, executionFilters, this.filterChains, this.forceOverwrite, this.preserveLastModified, this.encoding, this.project);
/*     */         
/*     */         }
/*     */         catch (IOException ioe) {
/*     */           
/* 532 */           String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */           
/* 534 */           throw new BuildException(msg, ioe, this.location);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 539 */     if (this.includeEmpty) {
/* 540 */       Enumeration e = this.dirCopyMap.elements();
/* 541 */       int count = 0;
/* 542 */       while (e.hasMoreElements()) {
/* 543 */         File d = new File(e.nextElement());
/* 544 */         if (!d.exists()) {
/* 545 */           if (!d.mkdirs()) {
/* 546 */             log(""Unable to create directory "" + d.getAbsolutePath(), 0);
/*     */             continue;
/*     */           } 
/* 549 */           count++;
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 554 */       if (count > 0)
/* 555 */         log(""Copied "" + count + "" empty director"" + ((count == 1) ? ""y"" : ""ies"") + "" to "" + this.destDir.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Copy.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copydir,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copydir
/*     */   extends MatchingTask
/*     */ {
/*     */   private File srcDir;
/*     */   private File destDir;
/*     */   private boolean filtering = false;
/*     */   private boolean flatten = false;
/*     */   private boolean forceOverwrite = false;
/*  82 */   private Hashtable filecopyList = new Hashtable();
/*     */ 
/*     */   
/*  85 */   public void setSrc(File src) { this.srcDir = src; }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setDest(File dest) { this.destDir = dest; }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setFiltering(boolean filter) { this.filtering = filter; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setFlatten(boolean flatten) { this.flatten = flatten; }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setForceoverwrite(boolean force) { this.forceOverwrite = force; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 105 */     log(""DEPRECATED - The copydir task is deprecated.  Use copy instead."");
/*     */     
/* 107 */     if (this.srcDir == null) {
/* 108 */       throw new BuildException(""src attribute must be set!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 112 */     if (!this.srcDir.exists()) {
/* 113 */       throw new BuildException(""srcdir "" + this.srcDir.toString() + "" does not exist!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 117 */     if (this.destDir == null) {
/* 118 */       throw new BuildException(""The dest attribute must be set."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 122 */     if (this.srcDir.equals(this.destDir)) {
/* 123 */       log(""Warning: src == dest"", 1);
/*     */     }
/*     */     
/* 126 */     DirectoryScanner ds = getDirectoryScanner(this.srcDir);
/*     */     
/*     */     try {
/* 129 */       String[] files = ds.getIncludedFiles();
/* 130 */       scanDir(this.srcDir, this.destDir, files);
/* 131 */       if (this.filecopyList.size() > 0) {
/* 132 */         log(""Copying "" + this.filecopyList.size() + "" file"" + ((this.filecopyList.size() == 1) ? """" : ""s"") + "" to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */         
/* 135 */         Enumeration enum = this.filecopyList.keys();
/* 136 */         while (enum.hasMoreElements()) {
/* 137 */           String fromFile = enum.nextElement();
/* 138 */           String toFile = (String)this.filecopyList.get(fromFile);
/*     */           try {
/* 140 */             this.project.copyFile(fromFile, toFile, this.filtering, this.forceOverwrite);
/*     */           } catch (IOException ioe) {
/*     */             
/* 143 */             String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */             
/* 145 */             throw new BuildException(msg, ioe, this.location);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } finally {
/* 150 */       this.filecopyList.clear();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void scanDir(File from, File to, String[] files) {
/* 155 */     for (int i = 0; i < files.length; i++) {
/* 156 */       File file; String filename = files[i];
/* 157 */       File srcFile = new File(from, filename);
/*     */       
/* 159 */       if (this.flatten) {
/* 160 */         file = new File(to, (new File(filename)).getName());
/*     */       } else {
/* 162 */         file = new File(to, filename);
/*     */       } 
/* 164 */       if (this.forceOverwrite || srcFile.lastModified() > file.lastModified())
/*     */       {
/* 166 */         this.filecopyList.put(srcFile.getAbsolutePath(), file.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Copydir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Copyfile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Copyfile
/*     */   extends Task
/*     */ {
/*     */   private File srcFile;
/*     */   private File destFile;
/*     */   private boolean filtering = false;
/*     */   private boolean forceOverwrite = false;
/*     */   
/*  83 */   public void setSrc(File src) { this.srcFile = src; }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setForceoverwrite(boolean force) { this.forceOverwrite = force; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setDest(File dest) { this.destFile = dest; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setFiltering(String filter) { this.filtering = Project.toBoolean(filter); }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  99 */     log(""DEPRECATED - The copyfile task is deprecated.  Use copy instead."");
/*     */     
/* 101 */     if (this.srcFile == null) {
/* 102 */       throw new BuildException(""The src attribute must be present."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 106 */     if (!this.srcFile.exists()) {
/* 107 */       throw new BuildException(""src "" + this.srcFile.toString() + "" does not exist."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 111 */     if (this.destFile == null) {
/* 112 */       throw new BuildException(""The dest attribute must be present."", this.location);
/*     */     }
/*     */ 
/*     */     
/* 116 */     if (this.srcFile.equals(this.destFile)) {
/* 117 */       log(""Warning: src == dest"", 1);
/*     */     }
/*     */     
/* 120 */     if (this.forceOverwrite || this.srcFile.lastModified() > this.destFile.lastModified())
/*     */       
/*     */       try {
/* 123 */         this.project.copyFile(this.srcFile, this.destFile, this.filtering, this.forceOverwrite);
/*     */       } catch (IOException ioe) {
/* 125 */         String msg = ""Error copying file: "" + this.srcFile.getAbsolutePath() + "" due to "" + ioe.getMessage();
/*     */         
/* 127 */         throw new BuildException(msg);
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Copyfile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Cvs,"package org.apache.tools.ant.taskdefs;
public class Cvs extends AbstractCvsTask {}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Cvs.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.CVSPass,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CVSPass
/*     */   extends Task
/*     */ {
/*  81 */   private String cvsRoot = null;
/*     */   
/*  83 */   private File passFile = null;
/*     */   
/*  85 */   private String password = null;
/*     */ 
/*     */   
/*  88 */   private final char[] shifts = new char[] { Character.MIN_VALUE, '\001', '\002', '\003', '\004', '\005', '\006', '\007', '\b', '\t', '\n', '\013', '\f', '\r', '\016', '\017', '\020', '\021', '\022', '\023', '\024', '\025', '\026', '\027', '\030', '\031', '\032', '\033', '\034', '\035', '\036', '\037', 'r', 'x', '5', 'O', '`', 'm', 'H', 'l', 'F', '@', 'L', 'C', 't', 'J', 'D', 'W', 'o', '4', 'K', 'w', '1', '""', 'R', 'Q', '_', 'A', 'p', 'V', 'v', 'n', 'z', 'i', ')', '9', 'S', '+', '.', 'f', '(', 'Y', '&', 'g', '-', '2', '*', '{', '[', '#', '}', '7', '6', 'B', '|', '~', ';', '/', '\\', 'G', 's', 'N', 'X', 'k', 'j', '8', '$', 'y', 'u', 'h', 'e', 'd', 'E', 'I', 'c', '?', '^', ']', '\'', '%', '=', '0', ':', 'q', ' ', 'Z', ',', 'b', '<', '3', '!', 'a', '>', 'M', 'T', 'P', 'U', 'ß', 'á', 'Ø', '»', '¦', 'å', '½', 'Þ', '¼', '', 'ù', '', 'È', '¸', '', 'ø', '¾', 'Ç', 'ª', 'µ', 'Ì', '', 'è', 'Ú', '·', 'ÿ', 'ê', 'Ü', '÷', 'Õ', 'Ë', 'â', 'Á', '®', '¬', 'ä', 'ü', 'Ù', 'É', '', 'æ', 'Å', 'Ó', '', 'î', '¡', '³', ' ', 'Ô', 'Ï', 'Ý', 'þ', '­', 'Ê', '', 'à', '', '', 'Ä', 'Í', '', '', '', '', 'ö', 'À', '', 'ô', 'ï', '¹', '¨', '×', '', '', '¥', '´', '', '', 'º', 'Ö', '°', 'ã', 'ç', 'Û', '©', '¯', '', 'Î', 'Æ', '', '¤', '', 'Ò', '', '±', '', '', '¶', '', '', 'Ð', '¢', '', '§', 'Ñ', '', 'ñ', '', 'û', 'í', 'ì', '«', 'Ã', 'ó', 'é', 'ý', 'ð', 'Â', 'ú', '¿', '', '', '', 'õ', 'ë', '£', 'ò', '²', '' };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public CVSPass() { this.passFile = new File(System.getProperty(""cygwin.user.home"", System.getProperty(""user.home"")) + File.separatorChar + "".cvspass""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 123 */     if (this.cvsRoot == null) {
/* 124 */       throw new BuildException(""cvsroot is required"");
/*     */     }
/* 126 */     if (this.password == null) {
/* 127 */       throw new BuildException(""password is required"");
/*     */     }
/*     */     
/* 130 */     log(""cvsRoot: "" + this.cvsRoot, 4);
/* 131 */     log(""password: "" + this.password, 4);
/* 132 */     log(""passFile: "" + this.passFile, 4);
/*     */     
/* 134 */     BufferedReader reader = null;
/* 135 */     PrintWriter writer = null;
/*     */     try {
/* 137 */       StringBuffer buf = new StringBuffer();
/*     */       
/* 139 */       if (this.passFile.exists()) {
/* 140 */         reader = new BufferedReader(new FileReader(this.passFile));
/*     */         
/* 142 */         String line = null;
/*     */         
/* 144 */         while ((line = reader.readLine()) != null) {
/* 145 */           if (!line.startsWith(this.cvsRoot)) {
/* 146 */             buf.append(line).append(StringUtils.LINE_SEP);
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 151 */       String pwdfile = buf.toString() + this.cvsRoot + "" A"" + mangle(this.password);
/*     */ 
/*     */       
/* 154 */       log(""Writing -> "" + pwdfile, 4);
/*     */       
/* 156 */       writer = new PrintWriter(new FileWriter(this.passFile));
/*     */       
/* 158 */       writer.println(pwdfile);
/*     */     } catch (IOException e) {
/* 160 */       throw new BuildException(e);
/*     */     } finally {
/* 162 */       if (reader != null) {
/*     */         try {
/* 164 */           reader.close();
/* 165 */         } catch (IOException e) {}
/*     */       }
/* 167 */       if (writer != null) {
/* 168 */         writer.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   private final String mangle(String password) {
/* 174 */     StringBuffer buf = new StringBuffer();
/* 175 */     for (int i = 0; i < password.length(); i++) {
/* 176 */       buf.append(this.shifts[password.charAt(i)]);
/*     */     }
/* 178 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void setCvsroot(String cvsRoot) { this.cvsRoot = cvsRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setPassfile(File passFile) { this.passFile = passFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setPassword(String password) { this.password = password; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\CVSPass.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Definer,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Definer
/*     */   extends Task
/*     */ {
/*     */   private String name;
/*     */   private String value;
/*     */   private Path classpath;
/*     */   private File file;
/*     */   private String resource;
/*     */   private boolean reverseLoader = false;
/*  87 */   private String loaderId = null;
/*  88 */   private String classpathId = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String REUSE_LOADER_REF = ""ant.reuse.loader"";
/*     */ 
/*     */ 
/*     */   
/*     */   public void setReverseLoader(boolean reverseLoader) {
/*  97 */     this.reverseLoader = reverseLoader;
/*  98 */     log(""The reverseloader attribute is DEPRECATED. It will be removed"", 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 108 */     if (this.classpath == null) {
/* 109 */       this.classpath = classpath;
/*     */     } else {
/* 111 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 119 */     if (this.classpath == null) {
/* 120 */       this.classpath = new Path(this.project);
/*     */     }
/* 122 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathRef(Reference r) {
/* 130 */     this.classpathId = r.getRefId();
/* 131 */     createClasspath().setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setLoaderRef(Reference r) { this.loaderId = r.getRefId(); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 151 */     AntClassLoader al = createLoader();
/*     */     
/* 153 */     if (this.file == null && this.resource == null) {
/*     */ 
/*     */       
/* 156 */       if (this.name == null || this.value == null) {
/* 157 */         String msg = ""name or classname attributes of "" + getTaskName() + "" element "" + ""are undefined"";
/*     */ 
/*     */         
/* 160 */         throw new BuildException(msg);
/*     */       } 
/* 162 */       addDefinition((ClassLoader)al, this.name, this.value);
/*     */     }
/*     */     else {
/*     */       
/* 166 */       InputStream is = null;
/*     */       try {
/* 168 */         if (this.name != null || this.value != null) {
/* 169 */           String msg = ""You must not specify name or value together with file or resource."";
/*     */           
/* 171 */           throw new BuildException(msg, this.location);
/*     */         } 
/*     */         
/* 174 */         if (this.file != null && this.resource != null) {
/* 175 */           String msg = ""You must not specify both, file and resource."";
/*     */           
/* 177 */           throw new BuildException(msg, this.location);
/*     */         } 
/*     */ 
/*     */         
/* 181 */         Properties props = new Properties();
/* 182 */         if (this.file != null) {
/* 183 */           log(""Loading definitions from file "" + this.file, 3);
/*     */           
/* 185 */           is = new FileInputStream(this.file);
/* 186 */           if (is == null) {
/* 187 */             log(""Could not load definitions from file "" + this.file + "". It doesn't exist."", 1);
/*     */           }
/*     */         } 
/*     */         
/* 191 */         if (this.resource != null) {
/* 192 */           log(""Loading definitions from resource "" + this.resource, 3);
/*     */           
/* 194 */           is = al.getResourceAsStream(this.resource);
/* 195 */           if (is == null) {
/* 196 */             log(""Could not load definitions from resource "" + this.resource + "". It could not be found."", 1);
/*     */           }
/*     */         } 
/*     */ 
/*     */ 
/*     */         
/* 202 */         if (is != null) {
/* 203 */           props.load(is);
/* 204 */           Enumeration keys = props.keys();
/* 205 */           while (keys.hasMoreElements()) {
/* 206 */             String n = keys.nextElement();
/* 207 */             String v = props.getProperty(n);
/* 208 */             addDefinition((ClassLoader)al, n, v);
/*     */           } 
/*     */         } 
/*     */       } catch (IOException ex) {
/* 212 */         throw new BuildException(ex, this.location);
/*     */       } finally {
/* 214 */         if (is != null) {
/*     */           try {
/* 216 */             is.close();
/* 217 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addDefinition(ClassLoader al, String name, String value) throws BuildException {
/*     */     try {
/* 230 */       Class c = al.loadClass(value);
/* 231 */       AntClassLoader.initializeClass(c);
/* 232 */       addDefinition(name, c);
/*     */     } catch (ClassNotFoundException cnfe) {
/* 234 */       String msg = getTaskName() + "" class "" + value + "" cannot be found"";
/*     */       
/* 236 */       throw new BuildException(msg, cnfe, this.location);
/*     */     } catch (NoClassDefFoundError ncdfe) {
/* 238 */       String msg = getTaskName() + "" class "" + value + "" cannot be found"";
/*     */       
/* 240 */       throw new BuildException(msg, ncdfe, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private AntClassLoader createLoader() {
/* 249 */     if (this.project.getProperty(""ant.reuse.loader"") != null)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 254 */       if (this.loaderId == null && this.classpathId != null) {
/* 255 */         this.loaderId = ""ant.loader."" + this.classpathId;
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 260 */     if (this.loaderId != null) {
/* 261 */       Object reusedLoader = this.project.getReference(this.loaderId);
/* 262 */       if (reusedLoader != null && 
/* 263 */         reusedLoader instanceof AntClassLoader) {
/* 264 */         return (AntClassLoader)reusedLoader;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 273 */     AntClassLoader al = null;
/* 274 */     if (this.classpath != null) {
/* 275 */       al = new AntClassLoader(this.project, this.classpath, !this.reverseLoader);
/*     */     } else {
/* 277 */       al = new AntClassLoader(this.project, Path.systemClasspath, !this.reverseLoader);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 283 */     al.addSystemPackageRoot(""org.apache.tools.ant"");
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 288 */     if (this.loaderId != null && 
/* 289 */       this.project.getReference(this.loaderId) == null) {
/* 290 */       this.project.addReference(this.loaderId, al);
/*     */     }
/*     */ 
/*     */     
/* 294 */     return al;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 310 */   public void setResource(String res) { this.resource = res; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 318 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 325 */   public String getClassname() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public void setClassname(String v) { this.value = v; }
/*     */   
/*     */   protected abstract void addDefinition(String paramString, Class paramClass);
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Definer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Delete,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Delete
/*     */   extends MatchingTask
/*     */ {
/*  87 */   protected File file = null;
/*  88 */   protected File dir = null;
/*  89 */   protected Vector filesets = new Vector();
/*     */   
/*     */   protected boolean usedMatchingTask = false;
/*     */   
/*     */   protected boolean includeEmpty = false;
/*  94 */   private int verbosity = 3;
/*     */ 
/*     */   
/*     */   private boolean quiet = false;
/*     */ 
/*     */   
/*     */   private boolean failonerror = true;
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setVerbose(boolean verbose) {
/* 122 */     if (verbose) {
/* 123 */       this.verbosity = 2;
/*     */     } else {
/* 125 */       this.verbosity = 3;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean quiet) {
/* 139 */     this.quiet = quiet;
/* 140 */     if (quiet) {
/* 141 */       this.failonerror = false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setFailOnError(boolean failonerror) { this.failonerror = failonerror; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setIncludeEmptyDirs(boolean includeEmpty) { this.includeEmpty = includeEmpty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 166 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 173 */     this.usedMatchingTask = true;
/* 174 */     return super.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createIncludesFile() {
/* 181 */     this.usedMatchingTask = true;
/* 182 */     return super.createIncludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 189 */     this.usedMatchingTask = true;
/* 190 */     return super.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExcludesFile() {
/* 197 */     this.usedMatchingTask = true;
/* 198 */     return super.createExcludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 205 */     this.usedMatchingTask = true;
/* 206 */     return super.createPatternSet();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 216 */     this.usedMatchingTask = true;
/* 217 */     super.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 227 */     this.usedMatchingTask = true;
/* 228 */     super.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 239 */     this.usedMatchingTask = true;
/* 240 */     super.setDefaultexcludes(useDefaultExcludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File includesfile) {
/* 250 */     this.usedMatchingTask = true;
/* 251 */     super.setIncludesfile(includesfile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excludesfile) {
/* 261 */     this.usedMatchingTask = true;
/* 262 */     super.setExcludesfile(excludesfile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 269 */     if (this.usedMatchingTask) {
/* 270 */       log(""DEPRECATED - Use of the implicit FileSet is deprecated.  Use a nested fileset element instead."");
/*     */     }
/*     */ 
/*     */     
/* 274 */     if (this.file == null && this.dir == null && this.filesets.size() == 0) {
/* 275 */       throw new BuildException(""At least one of the file or dir attributes, or a fileset element, must be set."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 280 */     if (this.quiet && this.failonerror) {
/* 281 */       throw new BuildException(""quiet and failonerror cannot both be set to true"", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 287 */     if (this.file != null) {
/* 288 */       if (this.file.exists()) {
/* 289 */         if (this.file.isDirectory()) {
/* 290 */           log(""Directory "" + this.file.getAbsolutePath() + "" cannot be removed using the file attribute.  "" + ""Use dir instead."");
/*     */         }
/*     */         else {
/*     */           
/* 294 */           log(""Deleting: "" + this.file.getAbsolutePath());
/*     */           
/* 296 */           if (!this.file.delete()) {
/* 297 */             String message = ""Unable to delete file "" + this.file.getAbsolutePath();
/*     */             
/* 299 */             if (this.failonerror) {
/* 300 */               throw new BuildException(message);
/*     */             }
/* 302 */             log(message, this.quiet ? 3 : 1);
/*     */           }
/*     */         
/*     */         } 
/*     */       } else {
/*     */         
/* 308 */         log(""Could not find file "" + this.file.getAbsolutePath() + "" to delete."", 3);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 315 */     if (this.dir != null && this.dir.exists() && this.dir.isDirectory() && !this.usedMatchingTask) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 324 */       if (this.verbosity == 3) {
/* 325 */         log(""Deleting directory "" + this.dir.getAbsolutePath());
/*     */       }
/* 327 */       removeDir(this.dir);
/*     */     } 
/*     */ 
/*     */     
/* 331 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 332 */       FileSet fs = this.filesets.elementAt(i);
/*     */       try {
/* 334 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 335 */         String[] files = ds.getIncludedFiles();
/* 336 */         String[] dirs = ds.getIncludedDirectories();
/* 337 */         removeFiles(fs.getDir(this.project), files, dirs);
/*     */       } catch (BuildException be) {
/*     */         
/* 340 */         if (this.failonerror) {
/* 341 */           throw be;
/*     */         }
/* 343 */         log(be.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 350 */     if (this.usedMatchingTask && this.dir != null) {
/*     */       try {
/* 352 */         DirectoryScanner ds = getDirectoryScanner(this.dir);
/* 353 */         String[] files = ds.getIncludedFiles();
/* 354 */         String[] dirs = ds.getIncludedDirectories();
/* 355 */         removeFiles(this.dir, files, dirs);
/*     */       } catch (BuildException be) {
/*     */         
/* 358 */         if (this.failonerror) {
/* 359 */           throw be;
/*     */         }
/* 361 */         log(be.getMessage(), this.quiet ? 3 : 1);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeDir(File d) {
/* 373 */     String[] list = d.list();
/* 374 */     if (list == null) {
/* 375 */       list = new String[0];
/*     */     }
/* 377 */     for (int i = 0; i < list.length; i++) {
/* 378 */       String s = list[i];
/* 379 */       File f = new File(d, s);
/* 380 */       if (f.isDirectory()) {
/* 381 */         removeDir(f);
/*     */       } else {
/* 383 */         log(""Deleting "" + f.getAbsolutePath(), this.verbosity);
/* 384 */         if (!f.delete()) {
/* 385 */           String message = ""Unable to delete file "" + f.getAbsolutePath();
/*     */           
/* 387 */           if (this.failonerror) {
/* 388 */             throw new BuildException(message);
/*     */           }
/* 390 */           log(message, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 396 */     log(""Deleting directory "" + d.getAbsolutePath(), this.verbosity);
/* 397 */     if (!d.delete()) {
/* 398 */       String message = ""Unable to delete directory "" + this.dir.getAbsolutePath();
/*     */       
/* 400 */       if (this.failonerror) {
/* 401 */         throw new BuildException(message);
/*     */       }
/* 403 */       log(message, this.quiet ? 3 : 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void removeFiles(File d, String[] files, String[] dirs) {
/* 417 */     if (files.length > 0) {
/* 418 */       log(""Deleting "" + files.length + "" files from "" + d.getAbsolutePath());
/*     */       
/* 420 */       for (int j = 0; j < files.length; j++) {
/* 421 */         File f = new File(d, files[j]);
/* 422 */         log(""Deleting "" + f.getAbsolutePath(), this.verbosity);
/* 423 */         if (!f.delete()) {
/* 424 */           String message = ""Unable to delete file "" + f.getAbsolutePath();
/*     */           
/* 426 */           if (this.failonerror) {
/* 427 */             throw new BuildException(message);
/*     */           }
/* 429 */           log(message, this.quiet ? 3 : 1);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 436 */     if (dirs.length > 0 && this.includeEmpty) {
/* 437 */       int dirCount = 0;
/* 438 */       for (int j = dirs.length - 1; j >= 0; j--) {
/* 439 */         File dir = new File(d, dirs[j]);
/* 440 */         String[] dirFiles = dir.list();
/* 441 */         if (dirFiles == null || dirFiles.length == 0) {
/* 442 */           log(""Deleting "" + dir.getAbsolutePath(), this.verbosity);
/* 443 */           if (!dir.delete()) {
/* 444 */             String message = ""Unable to delete directory "" + dir.getAbsolutePath();
/*     */             
/* 446 */             if (this.failonerror) {
/* 447 */               throw new BuildException(message);
/*     */             }
/* 449 */             log(message, this.quiet ? 3 : 1);
/*     */           }
/*     */           else {
/*     */             
/* 453 */             dirCount++;
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 458 */       if (dirCount > 0)
/* 459 */         log(""Deleted "" + dirCount + "" director"" + ((dirCount == 1) ? ""y"" : ""ies"") + "" from "" + d.getAbsolutePath()); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Delete.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Deltree,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Deltree
/*     */   extends Task
/*     */ {
/*     */   private File dir;
/*     */   
/*  83 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  93 */     log(""DEPRECATED - The deltree task is deprecated.  Use delete instead."");
/*     */ 
/*     */     
/*  96 */     if (this.dir == null) {
/*  97 */       throw new BuildException(""dir attribute must be set!"", this.location);
/*     */     }
/*     */     
/* 100 */     if (this.dir.exists()) {
/* 101 */       if (!this.dir.isDirectory()) {
/* 102 */         if (!this.dir.delete()) {
/* 103 */           throw new BuildException(""Unable to delete directory "" + this.dir.getAbsolutePath(), this.location);
/*     */         }
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 110 */       log(""Deleting: "" + this.dir.getAbsolutePath());
/*     */       
/*     */       try {
/* 113 */         removeDir(this.dir);
/*     */       } catch (IOException ioe) {
/* 115 */         String msg = ""Unable to delete "" + this.dir.getAbsolutePath();
/* 116 */         throw new BuildException(msg, this.location);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void removeDir(File dir) throws IOException {
/* 130 */     String[] list = dir.list();
/* 131 */     for (int i = 0; i < list.length; i++) {
/* 132 */       String s = list[i];
/* 133 */       File f = new File(dir, s);
/* 134 */       if (f.isDirectory()) {
/* 135 */         removeDir(f);
/*     */       }
/* 137 */       else if (!f.delete()) {
/* 138 */         throw new BuildException(""Unable to delete file "" + f.getAbsolutePath());
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 143 */     if (!dir.delete())
/* 144 */       throw new BuildException(""Unable to delete directory "" + dir.getAbsolutePath()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Deltree.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.DependSet,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DependSet
/*     */   extends MatchingTask
/*     */ {
/* 118 */   private Vector sourceFileSets = new Vector();
/* 119 */   private Vector sourceFileLists = new Vector();
/* 120 */   private Vector targetFileSets = new Vector();
/* 121 */   private Vector targetFileLists = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void addSrcfileset(FileSet fs) { this.sourceFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void addSrcfilelist(FileList fl) { this.sourceFileLists.addElement(fl); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void addTargetfileset(FileSet fs) { this.targetFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public void addTargetfilelist(FileList fl) { this.targetFileLists.addElement(fl); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 163 */     if (this.sourceFileSets.size() == 0 && this.sourceFileLists.size() == 0) {
/* 164 */       throw new BuildException(""At least one <srcfileset> or <srcfilelist> element must be set"");
/*     */     }
/*     */ 
/*     */     
/* 168 */     if (this.targetFileSets.size() == 0 && this.targetFileLists.size() == 0) {
/* 169 */       throw new BuildException(""At least one <targetfileset> or <targetfilelist> element must be set"");
/*     */     }
/*     */ 
/*     */     
/* 173 */     long now = (new Date()).getTime();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 179 */     if (Os.isFamily(""windows"")) {
/* 180 */       now += 2000L;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 186 */     Vector allTargets = new Vector();
/* 187 */     long oldestTargetTime = 0L;
/* 188 */     File oldestTarget = null;
/* 189 */     Enumeration enumTargetSets = this.targetFileSets.elements();
/* 190 */     while (enumTargetSets.hasMoreElements()) {
/*     */       
/* 192 */       FileSet targetFS = enumTargetSets.nextElement();
/* 193 */       if (!targetFS.getDir(getProject()).exists()) {
/*     */         continue;
/*     */       }
/*     */ 
/*     */       
/* 198 */       DirectoryScanner targetDS = targetFS.getDirectoryScanner(this.project);
/* 199 */       String[] targetFiles = targetDS.getIncludedFiles();
/*     */       
/* 201 */       for (int i = 0; i < targetFiles.length; i++) {
/*     */         
/* 203 */         File dest = new File(targetFS.getDir(this.project), targetFiles[i]);
/* 204 */         allTargets.addElement(dest);
/*     */         
/* 206 */         if (dest.lastModified() > now) {
/* 207 */           log(""Warning: "" + targetFiles[i] + "" modified in the future."", 1);
/*     */         }
/*     */ 
/*     */         
/* 211 */         if (oldestTarget == null || dest.lastModified() < oldestTargetTime) {
/*     */           
/* 213 */           oldestTargetTime = dest.lastModified();
/* 214 */           oldestTarget = dest;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 222 */     boolean upToDate = true;
/* 223 */     Enumeration enumTargetLists = this.targetFileLists.elements();
/* 224 */     while (enumTargetLists.hasMoreElements()) {
/*     */       
/* 226 */       FileList targetFL = enumTargetLists.nextElement();
/* 227 */       String[] targetFiles = targetFL.getFiles(this.project);
/*     */       
/* 229 */       for (int i = 0; i < targetFiles.length; i++) {
/*     */         
/* 231 */         File dest = new File(targetFL.getDir(this.project), targetFiles[i]);
/* 232 */         if (!dest.exists()) {
/* 233 */           log(targetFiles[i] + "" does not exist."", 3);
/* 234 */           upToDate = false;
/*     */         } else {
/*     */           
/* 237 */           allTargets.addElement(dest);
/*     */           
/* 239 */           if (dest.lastModified() > now) {
/* 240 */             log(""Warning: "" + targetFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 244 */           if (oldestTarget == null || dest.lastModified() < oldestTargetTime) {
/*     */             
/* 246 */             oldestTargetTime = dest.lastModified();
/* 247 */             oldestTarget = dest;
/*     */           } 
/*     */         } 
/*     */       } 
/* 251 */     }  if (oldestTarget != null) {
/* 252 */       log(oldestTarget + "" is oldest target file"", 3);
/*     */     }
/*     */     else {
/*     */       
/* 256 */       upToDate = false;
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 262 */     if (upToDate) {
/* 263 */       Enumeration enumSourceLists = this.sourceFileLists.elements();
/* 264 */       while (upToDate && enumSourceLists.hasMoreElements()) {
/*     */         
/* 266 */         FileList sourceFL = enumSourceLists.nextElement();
/* 267 */         String[] sourceFiles = sourceFL.getFiles(this.project);
/*     */         
/* 269 */         for (int i = 0; upToDate && i < sourceFiles.length; i++) {
/* 270 */           File src = new File(sourceFL.getDir(this.project), sourceFiles[i]);
/*     */           
/* 272 */           if (src.lastModified() > now) {
/* 273 */             log(""Warning: "" + sourceFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 277 */           if (!src.exists()) {
/* 278 */             log(sourceFiles[i] + "" does not exist."", 3);
/*     */             
/* 280 */             upToDate = false;
/*     */             
/*     */             break;
/*     */           } 
/* 284 */           if (src.lastModified() > oldestTargetTime) {
/* 285 */             upToDate = false;
/* 286 */             log(oldestTarget + "" is out of date with respect to "" + sourceFiles[i], 3);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 296 */     if (upToDate) {
/* 297 */       Enumeration enumSourceSets = this.sourceFileSets.elements();
/* 298 */       while (upToDate && enumSourceSets.hasMoreElements()) {
/*     */         
/* 300 */         FileSet sourceFS = enumSourceSets.nextElement();
/* 301 */         DirectoryScanner sourceDS = sourceFS.getDirectoryScanner(this.project);
/* 302 */         String[] sourceFiles = sourceDS.getIncludedFiles();
/*     */         
/* 304 */         for (int i = 0; upToDate && i < sourceFiles.length; i++) {
/* 305 */           File src = new File(sourceFS.getDir(this.project), sourceFiles[i]);
/*     */           
/* 307 */           if (src.lastModified() > now) {
/* 308 */             log(""Warning: "" + sourceFiles[i] + "" modified in the future."", 1);
/*     */           }
/*     */ 
/*     */           
/* 312 */           if (src.lastModified() > oldestTargetTime) {
/* 313 */             upToDate = false;
/* 314 */             log(oldestTarget + "" is out of date with respect to "" + sourceFiles[i], 3);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 321 */     if (!upToDate) {
/* 322 */       log(""Deleting all target files. "", 3);
/* 323 */       for (Enumeration e = allTargets.elements(); e.hasMoreElements(); ) {
/* 324 */         File fileToRemove = e.nextElement();
/* 325 */         log(""Deleting file "" + fileToRemove.getAbsolutePath(), 3);
/*     */         
/* 327 */         fileToRemove.delete();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\DependSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Dirname,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Dirname
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*     */   private String property;
/*     */   
/*  95 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 109 */     if (this.property == null) {
/* 110 */       throw new BuildException(""property attribute required"", this.location);
/*     */     }
/* 112 */     if (this.file == null) {
/* 113 */       throw new BuildException(""file attribute required"", this.location);
/*     */     }
/* 115 */     String value = this.file.getParent();
/* 116 */     getProject().setNewProperty(this.property, value);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Dirname.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Ear,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Ear
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*     */   
/*     */   public Ear() {
/*  84 */     this.archiveType = ""ear"";
/*  85 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setEarfile(File earFile) { setDestFile(earFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAppxml(File descr) {
/*  99 */     this.deploymentDescriptor = descr;
/* 100 */     if (!this.deploymentDescriptor.exists()) {
/* 101 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 107 */     ZipFileSet fs = new ZipFileSet();
/* 108 */     fs.setDir(new File(this.deploymentDescriptor.getParent()));
/* 109 */     fs.setIncludes(this.deploymentDescriptor.getName());
/* 110 */     fs.setFullpath(""META-INF/application.xml"");
/* 111 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArchives(ZipFileSet fs) {
/* 123 */     fs.setPrefix(""/"");
/* 124 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 131 */     if (this.deploymentDescriptor == null && !isInUpdateMode()) {
/* 132 */       throw new BuildException(""appxml attribute is required"", this.location);
/*     */     }
/*     */     
/* 135 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath) throws IOException {
/* 145 */     if (vPath.equalsIgnoreCase(""META-INF/application.xml"")) {
/* 146 */       if (this.deploymentDescriptor == null || !this.deploymentDescriptor.equals(file) || this.descriptorAdded) {
/*     */ 
/*     */         
/* 149 */         log(""Warning: selected "" + this.archiveType + "" files include a META-INF/application.xml which will"" + "" be ignored (please use appxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 154 */         super.zipFile(file, zOut, vPath);
/* 155 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 158 */       super.zipFile(file, zOut, vPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 167 */     this.descriptorAdded = false;
/* 168 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Ear.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Echo,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Echo
/*     */   extends Task
/*     */ {
/*  75 */   protected String message = """";
/*  76 */   protected File file = null;
/*     */   
/*     */   protected boolean append = false;
/*     */   
/*  80 */   protected int logLevel = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  88 */     if (this.file == null) {
/*  89 */       log(this.message, this.logLevel);
/*     */     } else {
/*  91 */       FileWriter out = null;
/*     */       try {
/*  93 */         out = new FileWriter(this.file.getAbsolutePath(), this.append);
/*  94 */         out.write(this.message, 0, this.message.length());
/*     */       } catch (IOException ioe) {
/*  96 */         throw new BuildException(ioe, this.location);
/*     */       } finally {
/*  98 */         if (out != null) {
/*     */           try {
/* 100 */             out.close();
/* 101 */           } catch (IOException ioex) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setMessage(String msg) { this.message = msg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void addText(String msg) { this.message += this.project.replaceProperties(msg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLevel(EchoLevel echoLevel) {
/* 150 */     String option = echoLevel.getValue();
/* 151 */     if (option.equals(""error"")) {
/* 152 */       this.logLevel = 0;
/* 153 */     } else if (option.equals(""warning"")) {
/* 154 */       this.logLevel = 1;
/* 155 */     } else if (option.equals(""info"")) {
/* 156 */       this.logLevel = 2;
/* 157 */     } else if (option.equals(""verbose"")) {
/* 158 */       this.logLevel = 3;
/*     */     } else {
/*     */       
/* 161 */       this.logLevel = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class EchoLevel
/*     */     extends EnumeratedAttribute
/*     */   {
/* 170 */     public String[] getValues() { return new String[] { ""error"", ""warning"", ""info"", ""verbose"", ""debug"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Echo.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Exec
/*     */   extends Task
/*     */ {
/*     */   private String os;
/*     */   private String out;
/*     */   private File dir;
/*     */   private String command;
/*  87 */   protected PrintWriter fos = null;
/*     */   
/*     */   private boolean failOnError = false;
/*     */   private static final int BUFFER_SIZE = 512;
/*     */   
/*     */   public Exec() {
/*  93 */     System.err.println(""As of Ant 1.2 released in October 2000, the Exec class"");
/*     */     
/*  95 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/*  97 */     System.err.println(""Don't use it!"");
/*     */   }
/*     */ 
/*     */   
/* 101 */   public void execute() throws BuildException { run(this.command); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected int run(String command) throws BuildException {
/* 106 */     int err = -1;
/*     */ 
/*     */     
/* 109 */     String myos = System.getProperty(""os.name"");
/* 110 */     log(""Myos = "" + myos, 3);
/* 111 */     if (this.os != null && this.os.indexOf(myos) < 0) {
/*     */       
/* 113 */       log(""Not found in "" + this.os, 3);
/* 114 */       return 0;
/*     */     } 
/*     */ 
/*     */     
/* 118 */     if (this.dir == null) {
/* 119 */       this.dir = this.project.getBaseDir();
/*     */     }
/*     */     
/* 122 */     if (myos.toLowerCase().indexOf(""windows"") >= 0) {
/* 123 */       if (!this.dir.equals(this.project.resolveFile("".""))) {
/* 124 */         if (myos.toLowerCase().indexOf(""nt"") >= 0) {
/* 125 */           command = ""cmd /c cd "" + this.dir + "" && "" + command;
/*     */         } else {
/* 127 */           String ant = this.project.getProperty(""ant.home"");
/* 128 */           if (ant == null) {
/* 129 */             throw new BuildException(""Property 'ant.home' not found"", this.location);
/*     */           }
/*     */ 
/*     */           
/* 133 */           String antRun = this.project.resolveFile(ant + ""/bin/antRun.bat"").toString();
/* 134 */           command = antRun + "" "" + this.dir + "" "" + command;
/*     */         } 
/*     */       }
/*     */     } else {
/* 138 */       String ant = this.project.getProperty(""ant.home"");
/* 139 */       if (ant == null) {
/* 140 */         throw new BuildException(""Property 'ant.home' not found"", this.location);
/*     */       }
/*     */       
/* 143 */       String antRun = this.project.resolveFile(ant + ""/bin/antRun"").toString();
/*     */       
/* 145 */       command = antRun + "" "" + this.dir + "" "" + command;
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 150 */       log(command, 3);
/*     */ 
/*     */       
/* 153 */       Process proc = Runtime.getRuntime().exec(command);
/*     */       
/* 155 */       if (this.out != null) {
/* 156 */         this.fos = new PrintWriter(new FileWriter(this.out));
/* 157 */         log(""Output redirected to "" + this.out, 3);
/*     */       } 
/*     */ 
/*     */       
/* 161 */       StreamPumper inputPumper = new StreamPumper(this, proc.getInputStream(), 2, this);
/*     */       
/* 163 */       StreamPumper errorPumper = new StreamPumper(this, proc.getErrorStream(), 1, this);
/*     */ 
/*     */ 
/*     */       
/* 167 */       inputPumper.start();
/* 168 */       errorPumper.start();
/*     */ 
/*     */       
/* 171 */       proc.waitFor();
/* 172 */       inputPumper.join();
/* 173 */       errorPumper.join();
/* 174 */       proc.destroy();
/*     */ 
/*     */       
/* 177 */       logFlush();
/*     */ 
/*     */       
/* 180 */       err = proc.exitValue();
/* 181 */       if (err != 0) {
/* 182 */         if (this.failOnError) {
/* 183 */           throw new BuildException(""Exec returned: "" + err, this.location);
/*     */         }
/* 185 */         log(""Result: "" + err, 0);
/*     */       } 
/*     */     } catch (IOException ioe) {
/*     */       
/* 189 */       throw new BuildException(""Error exec: "" + command, ioe, this.location);
/* 190 */     } catch (InterruptedException ex) {}
/*     */     
/* 192 */     return err;
/*     */   }
/*     */ 
/*     */   
/* 196 */   public void setDir(String d) { this.dir = this.project.resolveFile(d); }
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void setOs(String os) { this.os = os; }
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void setCommand(String command) { this.command = command; }
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setOutput(String out) { this.out = out; }
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */   
/*     */   protected void outputLog(String line, int messageLevel) {
/* 216 */     if (this.fos == null) {
/* 217 */       log(line, messageLevel);
/*     */     } else {
/* 219 */       this.fos.println(line);
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void logFlush() {
/* 224 */     if (this.fos != null)
/* 225 */       this.fos.close(); 
/*     */   }
/*     */   
/*     */   class StreamPumper
/*     */     extends Thread {
/*     */     private BufferedReader din;
/*     */     private int messageLevel;
/*     */     private boolean endOfStream;
/*     */     private int SLEEP_TIME;
/*     */     private Exec parent;
/*     */     private final Exec this$0;
/*     */     
/*     */     public StreamPumper(Exec this$0, InputStream is, int messageLevel, Exec parent) {
/* 238 */       this.this$0 = this$0; this.endOfStream = false; this.SLEEP_TIME = 5;
/* 239 */       this.din = new BufferedReader(new InputStreamReader(is));
/* 240 */       this.messageLevel = messageLevel;
/* 241 */       this.parent = parent;
/*     */     }
/*     */     
/*     */     public void pumpStream() throws IOException {
/* 245 */       byte[] buf = new byte[512];
/* 246 */       if (!this.endOfStream) {
/* 247 */         String line = this.din.readLine();
/*     */         
/* 249 */         if (line != null) {
/* 250 */           this.this$0.outputLog(line, this.messageLevel);
/*     */         } else {
/* 252 */           this.endOfStream = true;
/*     */         } 
/*     */       } 
/*     */     }
/*     */     
/*     */     public void run() {
/*     */       try {
/*     */         try {
/* 260 */           while (!this.endOfStream) {
/* 261 */             pumpStream();
/* 262 */             Thread.sleep(this.SLEEP_TIME);
/*     */           } 
/* 264 */         } catch (InterruptedException ie) {}
/* 265 */         this.din.close();
/* 266 */       } catch (IOException ioe) {}
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Exec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.StringReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecTask
/*     */   extends Task
/*     */ {
/*     */   private String os;
/*     */   private File out;
/*     */   private File dir;
/*     */   protected boolean failOnError = false;
/*     */   protected boolean newEnvironment = false;
/*  92 */   private Long timeout = null;
/*  93 */   private Environment env = new Environment();
/*  94 */   protected Commandline cmdl = new Commandline();
/*  95 */   private FileOutputStream fos = null;
/*  96 */   private ByteArrayOutputStream baos = null;
/*     */ 
/*     */   
/*     */   private String outputprop;
/*     */ 
/*     */   
/*     */   private String resultProperty;
/*     */ 
/*     */   
/*     */   private boolean failIfExecFails = true;
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */   
/*     */   private boolean vmLauncher = true;
/*     */ 
/*     */   
/* 114 */   public void setTimeout(Long value) { this.timeout = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTimeout(Integer value) {
/* 121 */     if (value == null) {
/* 122 */       this.timeout = null;
/*     */     } else {
/* 124 */       setTimeout(new Long(value.intValue()));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setExecutable(String value) { this.cmdl.setExecutable(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void setOs(String os) { this.os = os; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCommand(Commandline cmdl) {
/* 153 */     log(""The command attribute is deprecated. Please use the executable attribute and nested arg elements."", 1);
/*     */ 
/*     */     
/* 156 */     this.cmdl = cmdl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setOutput(File out) { this.out = out; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void setOutputproperty(String outputprop) { this.outputprop = outputprop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void addEnv(Environment.Variable var) { this.env.addVariable(var); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setResultProperty(String resultProperty) { this.resultProperty = resultProperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void maybeSetResultPropertyValue(int result) {
/* 217 */     String res = Integer.toString(result);
/* 218 */     if (this.resultProperty != null) {
/* 219 */       this.project.setNewProperty(this.resultProperty, res);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public void setFailIfExecutionFails(boolean flag) { this.failIfExecFails = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 246 */     File savedDir = this.dir;
/* 247 */     checkConfiguration();
/* 248 */     if (isValidOs()) {
/*     */       try {
/* 250 */         runExec(prepareExec());
/*     */       } finally {
/* 252 */         this.dir = savedDir;
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkConfiguration() throws BuildException {
/* 261 */     if (this.cmdl.getExecutable() == null) {
/* 262 */       throw new BuildException(""no executable specified"", this.location);
/*     */     }
/* 264 */     if (this.dir != null && !this.dir.exists()) {
/* 265 */       throw new BuildException(""The directory you specified does not exist"");
/*     */     }
/*     */     
/* 268 */     if (this.dir != null && !this.dir.isDirectory()) {
/* 269 */       throw new BuildException(""The directory you specified is not a directory"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidOs() {
/* 279 */     String myos = System.getProperty(""os.name"");
/* 280 */     log(""Current OS is "" + myos, 3);
/* 281 */     if (this.os != null && this.os.indexOf(myos) < 0) {
/*     */       
/* 283 */       log(""This OS, "" + myos + "" was not found in the specified list of valid OSes: "" + this.os, 3);
/*     */ 
/*     */       
/* 286 */       return false;
/*     */     } 
/* 288 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void setVMLauncher(boolean vmLauncher) { this.vmLauncher = vmLauncher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Execute prepareExec() throws BuildException {
/* 303 */     if (this.dir == null) {
/* 304 */       this.dir = this.project.getBaseDir();
/*     */     }
/* 306 */     Execute exe = new Execute(createHandler(), createWatchdog());
/* 307 */     exe.setAntRun(getProject());
/* 308 */     exe.setWorkingDirectory(this.dir);
/* 309 */     exe.setVMLauncher(this.vmLauncher);
/* 310 */     String[] environment = this.env.getVariables();
/* 311 */     if (environment != null) {
/* 312 */       for (int i = 0; i < environment.length; i++) {
/* 313 */         log(""Setting environment variable: "" + environment[i], 3);
/*     */       }
/*     */     }
/*     */     
/* 317 */     exe.setNewenvironment(this.newEnvironment);
/* 318 */     exe.setEnvironment(environment);
/* 319 */     return exe;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final void runExecute(Execute exe) throws IOException {
/* 327 */     int err = -1;
/*     */     
/* 329 */     err = exe.execute();
/*     */     
/* 331 */     if (exe.killedProcess()) {
/* 332 */       log(""Timeout: killed the sub-process"", 1);
/*     */     }
/* 334 */     maybeSetResultPropertyValue(err);
/* 335 */     if (err != 0) {
/* 336 */       if (this.failOnError) {
/* 337 */         throw new BuildException(this.taskType + "" returned: "" + err, this.location);
/*     */       }
/*     */       
/* 340 */       log(""Result: "" + err, 0);
/*     */     } 
/*     */     
/* 343 */     if (this.baos != null) {
/* 344 */       BufferedReader in = new BufferedReader(new StringReader(Execute.toString(this.baos)));
/*     */       
/* 346 */       String line = null;
/* 347 */       StringBuffer val = new StringBuffer();
/* 348 */       while ((line = in.readLine()) != null) {
/* 349 */         if (val.length() != 0) {
/* 350 */           val.append(StringUtils.LINE_SEP);
/*     */         }
/* 352 */         val.append(line);
/*     */       } 
/* 354 */       this.project.setNewProperty(this.outputprop, val.toString());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runExec(Execute exe) throws BuildException {
/* 364 */     log(this.cmdl.describeCommand(), 3);
/*     */     
/* 366 */     exe.setCommandline(this.cmdl.getCommandline());
/*     */     try {
/* 368 */       runExecute(exe);
/*     */     } catch (IOException e) {
/* 370 */       if (this.failIfExecFails) {
/* 371 */         throw new BuildException(""Execute failed: "" + e.toString(), e, this.location);
/*     */       }
/*     */       
/* 374 */       log(""Execute failed: "" + e.toString(), 0);
/*     */     }
/*     */     finally {
/*     */       
/* 378 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteStreamHandler createHandler() throws BuildException {
/* 386 */     if (this.out != null) {
/*     */       try {
/* 388 */         this.fos = new FileOutputStream(this.out.getAbsolutePath(), this.append);
/* 389 */         log(""Output redirected to "" + this.out, 3);
/* 390 */         return new PumpStreamHandler(this.fos);
/*     */       } catch (FileNotFoundException fne) {
/* 392 */         throw new BuildException(""Cannot write to "" + this.out, fne, this.location);
/*     */       } catch (IOException ioe) {
/*     */         
/* 395 */         throw new BuildException(""Cannot write to "" + this.out, ioe, this.location);
/*     */       } 
/*     */     }
/* 398 */     if (this.outputprop != null) {
/* 399 */       this.baos = new ByteArrayOutputStream();
/* 400 */       log(""Output redirected to ByteArray"", 3);
/* 401 */       return new PumpStreamHandler(this.baos);
/*     */     } 
/* 403 */     return new LogStreamHandler(this, 2, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteWatchdog createWatchdog() throws BuildException {
/* 412 */     if (this.timeout == null) {
/* 413 */       return null;
/*     */     }
/* 415 */     return new ExecuteWatchdog(this.timeout.longValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logFlush() {
/*     */     try {
/* 423 */       if (this.fos != null) {
/* 424 */         this.fos.close();
/*     */       }
/* 426 */       if (this.baos != null) {
/* 427 */         this.baos.close();
/*     */       }
/* 429 */     } catch (IOException io) {}
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ExecTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Execute,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.io.StringReader;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Execute
/*     */ {
/*     */   public static final int INVALID = 2147483647;
/*  88 */   private String[] cmdl = null;
/*  89 */   private String[] env = null;
/*  90 */   private int exitValue = Integer.MAX_VALUE;
/*     */   private ExecuteStreamHandler streamHandler;
/*     */   private ExecuteWatchdog watchdog;
/*  93 */   private File workingDirectory = null;
/*  94 */   private Project project = null;
/*     */   
/*     */   private boolean newEnvironment = false;
/*     */   
/*     */   private boolean useVMLauncher = true;
/*     */   
/* 100 */   private static String antWorkingDirectory = System.getProperty(""user.dir"");
/* 101 */   private static CommandLauncher vmLauncher = null;
/* 102 */   private static CommandLauncher shellLauncher = null;
/* 103 */   private static Vector procEnvironment = null;
/*     */ 
/*     */   
/* 106 */   private static ProcessDestroyer processDestroyer = new ProcessDestroyer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/*     */     try {
/* 114 */       vmLauncher = new Java13CommandLauncher();
/* 115 */     } catch (NoSuchMethodException exc) {}
/*     */ 
/*     */ 
/*     */     
/* 119 */     if (Os.isFamily(""mac"")) {
/*     */       
/* 121 */       shellLauncher = new MacCommandLauncher(new CommandLauncher());
/* 122 */     } else if (Os.isFamily(""os/2"")) {
/*     */       
/* 124 */       shellLauncher = new WinNTCommandLauncher(new CommandLauncher());
/* 125 */     } else if (Os.isFamily(""windows"")) {
/*     */       CommandLauncher commandLauncher;
/*     */ 
/*     */       
/* 129 */       if (System.getProperty(""java.version"").startsWith(""1.1"")) {
/*     */         
/* 131 */         commandLauncher = new Java11CommandLauncher();
/*     */       } else {
/*     */         
/* 134 */         commandLauncher = new CommandLauncher();
/*     */       } 
/*     */       
/* 137 */       if (!Os.isFamily(""win9x"")) {
/*     */         
/* 139 */         shellLauncher = new WinNTCommandLauncher(commandLauncher);
/*     */       } else {
/*     */         
/* 142 */         shellLauncher = new ScriptCommandLauncher(""bin/antRun.bat"", commandLauncher);
/*     */       }
/*     */     
/* 145 */     } else if (Os.isFamily(""netware"")) {
/*     */       CommandLauncher commandLauncher;
/*     */       
/* 148 */       if (System.getProperty(""java.version"").startsWith(""1.1"")) {
/*     */         
/* 150 */         commandLauncher = new Java11CommandLauncher();
/*     */       } else {
/*     */         
/* 153 */         commandLauncher = new CommandLauncher();
/*     */       } 
/*     */       
/* 156 */       shellLauncher = new PerlScriptCommandLauncher(""bin/antRun.pl"", commandLauncher);
/*     */     }
/*     */     else {
/*     */       
/* 160 */       shellLauncher = new ScriptCommandLauncher(""bin/antRun"", new CommandLauncher());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized Vector getProcEnvironment() {
/* 169 */     if (procEnvironment != null) {
/* 170 */       return procEnvironment;
/*     */     }
/*     */     
/* 173 */     procEnvironment = new Vector();
/*     */     try {
/* 175 */       ByteArrayOutputStream out = new ByteArrayOutputStream();
/* 176 */       Execute exe = new Execute(new PumpStreamHandler(out));
/* 177 */       exe.setCommandline(getProcEnvCommand());
/*     */       
/* 179 */       exe.setNewenvironment(true);
/* 180 */       int retval = exe.execute();
/* 181 */       if (retval != 0);
/*     */ 
/*     */ 
/*     */       
/* 185 */       BufferedReader in = new BufferedReader(new StringReader(toString(out)));
/*     */ 
/*     */       
/* 188 */       String var = null;
/* 189 */       String lineSep = System.getProperty(""line.separator""); String line;
/* 190 */       while ((line = in.readLine()) != null) {
/* 191 */         if (line.indexOf('=') == -1) {
/*     */ 
/*     */           
/* 194 */           if (var == null) {
/* 195 */             var = lineSep + line; continue;
/*     */           } 
/* 197 */           var = var + lineSep + line;
/*     */           
/*     */           continue;
/*     */         } 
/* 201 */         if (var != null) {
/* 202 */           procEnvironment.addElement(var);
/*     */         }
/* 204 */         var = line;
/*     */       } 
/*     */ 
/*     */       
/* 208 */       if (var != null) {
/* 209 */         procEnvironment.addElement(var);
/*     */       }
/*     */     } catch (IOException exc) {
/* 212 */       exc.printStackTrace();
/*     */     } 
/*     */     
/* 215 */     return procEnvironment;
/*     */   }
/*     */   
/*     */   private static String[] getProcEnvCommand() {
/* 219 */     if (Os.isFamily(""os/2"")) {
/*     */ 
/*     */       
/* 222 */       String[] cmd = { ""cmd"", ""/c"", ""set"" };
/* 223 */       return cmd;
/* 224 */     }  if (Os.isFamily(""windows"")) {
/*     */       
/* 226 */       if (!Os.isFamily(""win9x"")) {
/*     */         
/* 228 */         String[] cmd = { ""cmd"", ""/c"", ""set"" };
/* 229 */         return cmd;
/*     */       } 
/*     */       
/* 232 */       String[] cmd = { ""command.com"", ""/c"", ""set"" };
/* 233 */       return cmd;
/*     */     } 
/* 235 */     if (Os.isFamily(""z/os"")) {
/* 236 */       String[] cmd = { ""/bin/env"" };
/* 237 */       return cmd;
/* 238 */     }  if (Os.isFamily(""unix"")) {
/*     */ 
/*     */       
/* 241 */       String[] cmd = { ""/usr/bin/env"" };
/* 242 */       return cmd;
/* 243 */     }  if (Os.isFamily(""netware"")) {
/* 244 */       String[] cmd = { ""env"" };
/* 245 */       return cmd;
/*     */     } 
/*     */ 
/*     */     
/* 249 */     String[] cmd = null;
/* 250 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String toString(ByteArrayOutputStream bos) {
/* 262 */     if (Os.isFamily(""z/os"")) {
/*     */       try {
/* 264 */         bos.toString(""Cp1047"");
/* 265 */       } catch (UnsupportedEncodingException e) {}
/*     */     }
/*     */     
/* 268 */     return bos.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public Execute() { this(new PumpStreamHandler(), null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public Execute(ExecuteStreamHandler streamHandler) { this(streamHandler, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Execute(ExecuteStreamHandler streamHandler, ExecuteWatchdog watchdog) {
/* 300 */     this.streamHandler = streamHandler;
/* 301 */     this.watchdog = watchdog;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public String[] getCommandline() { return this.cmdl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 321 */   public void setCommandline(String[] commandline) { this.cmdl = commandline; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 330 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getEnvironment() {
/* 339 */     if (this.env == null || this.newEnvironment) {
/* 340 */       return this.env;
/*     */     }
/* 342 */     return patchEnvironment();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 353 */   public void setEnvironment(String[] env) { this.env = env; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setWorkingDirectory(File wd) {
/* 367 */     if (wd == null || wd.getAbsolutePath().equals(antWorkingDirectory)) {
/* 368 */       this.workingDirectory = null;
/*     */     } else {
/* 370 */       this.workingDirectory = wd;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 380 */   public void setAntRun(Project project) throws BuildException { this.project = project; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 394 */   public void setVMLauncher(boolean useVMLauncher) { this.useVMLauncher = useVMLauncher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Process launch(Project project, String[] command, String[] env, File dir, boolean useVM) throws IOException {
/* 411 */     CommandLauncher launcher = (vmLauncher != null) ? vmLauncher : shellLauncher;
/*     */     
/* 413 */     if (!useVM) {
/* 414 */       launcher = shellLauncher;
/*     */     }
/*     */     
/* 417 */     return launcher.exec(project, command, env, dir);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int execute() throws IOException {
/* 428 */     Process process = launch(this.project, getCommandline(), getEnvironment(), this.workingDirectory, this.useVMLauncher);
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 433 */       this.streamHandler.setProcessInputStream(process.getOutputStream());
/* 434 */       this.streamHandler.setProcessOutputStream(process.getInputStream());
/* 435 */       this.streamHandler.setProcessErrorStream(process.getErrorStream());
/*     */     } catch (IOException e) {
/* 437 */       process.destroy();
/* 438 */       throw e;
/*     */     } 
/* 440 */     this.streamHandler.start();
/*     */ 
/*     */ 
/*     */     
/* 444 */     processDestroyer.add(process);
/*     */     
/* 446 */     if (this.watchdog != null) {
/* 447 */       this.watchdog.start(process);
/*     */     }
/* 449 */     waitFor(process);
/*     */ 
/*     */ 
/*     */     
/* 453 */     processDestroyer.remove(process);
/*     */     
/* 455 */     if (this.watchdog != null) {
/* 456 */       this.watchdog.stop();
/*     */     }
/* 458 */     this.streamHandler.stop();
/* 459 */     if (this.watchdog != null) {
/* 460 */       this.watchdog.checkException();
/*     */     }
/* 462 */     return getExitValue();
/*     */   }
/*     */   
/*     */   protected void waitFor(Process process) {
/*     */     try {
/* 467 */       process.waitFor();
/* 468 */       setExitValue(process.exitValue());
/* 469 */     } catch (InterruptedException e) {}
/*     */   }
/*     */ 
/*     */   
/* 473 */   protected void setExitValue(int value) { this.exitValue = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 482 */   public int getExitValue() { return this.exitValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 491 */   public boolean killedProcess() { return (this.watchdog != null && this.watchdog.killedProcess()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String[] patchEnvironment() {
/* 499 */     Vector osEnv = (Vector)getProcEnvironment().clone();
/* 500 */     for (int i = 0; i < this.env.length; i++) {
/* 501 */       int pos = this.env[i].indexOf('=');
/*     */       
/* 503 */       String key = this.env[i].substring(0, pos + 1);
/* 504 */       int size = osEnv.size();
/* 505 */       for (int j = 0; j < size; j++) {
/* 506 */         if (((String)osEnv.elementAt(j)).startsWith(key)) {
/* 507 */           osEnv.removeElementAt(j);
/*     */           break;
/*     */         } 
/*     */       } 
/* 511 */       osEnv.addElement(this.env[i]);
/*     */     } 
/* 513 */     String[] result = new String[osEnv.size()];
/* 514 */     osEnv.copyInto((Object[])result);
/* 515 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void runCommand(Task task, String[] cmdline) throws BuildException {
/*     */     try {
/* 530 */       task.log(Commandline.describeCommand(cmdline), 3);
/*     */       
/* 532 */       Execute exe = new Execute(new LogStreamHandler(task, 2, 0));
/*     */ 
/*     */       
/* 535 */       exe.setAntRun(task.getProject());
/* 536 */       exe.setCommandline(cmdline);
/* 537 */       int retval = exe.execute();
/* 538 */       if (retval != 0) {
/* 539 */         throw new BuildException(cmdline[0] + "" failed with return code "" + retval, task.getLocation());
/*     */       }
/*     */     } catch (IOException exc) {
/*     */       
/* 543 */       throw new BuildException(""Could not launch "" + cmdline[0] + "": "" + exc, task.getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class CommandLauncher
/*     */   {
/*     */     private CommandLauncher() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env) throws IOException {
/* 564 */       if (project != null) {
/* 565 */         project.log(""Execute:CommandLauncher: "" + Commandline.describeCommand(cmd), 4);
/*     */       }
/*     */ 
/*     */       
/* 569 */       return Runtime.getRuntime().exec(cmd, env);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 585 */       if (workingDir == null) {
/* 586 */         return exec(project, cmd, env);
/*     */       }
/* 588 */       throw new IOException(""Cannot execute a process in different directory under this JVM"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class Java11CommandLauncher
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Java11CommandLauncher() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env) throws IOException {
/* 607 */       String[] newcmd = new String[cmd.length];
/* 608 */       for (int i = 0; i < cmd.length; i++) {
/* 609 */         newcmd[i] = Commandline.quoteArgument(cmd[i]);
/*     */       }
/* 611 */       if (project != null) {
/* 612 */         project.log(""Execute:Java11CommandLauncher: "" + Commandline.describeCommand(newcmd), 4);
/*     */       }
/*     */ 
/*     */       
/* 616 */       return Runtime.getRuntime().exec(newcmd, env);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   private static class Java13CommandLauncher
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Method _execWithCWD;
/*     */     
/*     */     static Class array$Ljava$lang$String;
/*     */     
/* 628 */     public Java13CommandLauncher() throws NoSuchMethodException { this._execWithCWD = Runtime.class.getMethod(""exec"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String, (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String, File.class }); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/*     */       try {
/* 639 */         if (project != null) {
/* 640 */           project.log(""Execute:Java13CommandLauncher: "" + Commandline.describeCommand(cmd), 4);
/*     */         }
/*     */ 
/*     */         
/* 644 */         Object[] arguments = { cmd, env, workingDir };
/* 645 */         return (Process)this._execWithCWD.invoke(Runtime.getRuntime(), arguments);
/*     */       } catch (InvocationTargetException exc) {
/*     */         
/* 648 */         Throwable realexc = exc.getTargetException();
/* 649 */         if (realexc instanceof ThreadDeath)
/* 650 */           throw (ThreadDeath)realexc; 
/* 651 */         if (realexc instanceof IOException) {
/* 652 */           throw (IOException)realexc;
/*     */         }
/* 654 */         throw new BuildException(""Unable to execute command"", realexc);
/*     */       
/*     */       }
/*     */       catch (Exception exc) {
/*     */         
/* 659 */         throw new BuildException(""Unable to execute command"", exc);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static class CommandLauncherProxy
/*     */     extends CommandLauncher
/*     */   {
/*     */     private Execute.CommandLauncher _launcher;
/*     */ 
/*     */ 
/*     */     
/* 673 */     CommandLauncherProxy(Execute.CommandLauncher launcher) { this._launcher = launcher; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 682 */     public Process exec(Project project, String[] cmd, String[] env) throws IOException { return this._launcher.exec(project, cmd, env); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class WinNTCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/* 695 */     WinNTCommandLauncher(Execute.CommandLauncher launcher) { super(launcher); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 704 */       File commandDir = workingDir;
/* 705 */       if (workingDir == null) {
/* 706 */         if (project != null) {
/* 707 */           commandDir = project.getBaseDir();
/*     */         } else {
/* 709 */           return exec(project, cmd, env);
/*     */         } 
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 716 */       String[] newcmd = new String[cmd.length + 6];
/* 717 */       newcmd[0] = ""cmd"";
/* 718 */       newcmd[1] = ""/c"";
/* 719 */       newcmd[2] = ""cd"";
/* 720 */       newcmd[3] = ""/d"";
/* 721 */       newcmd[4] = commandDir.getAbsolutePath();
/* 722 */       newcmd[5] = ""&&"";
/* 723 */       System.arraycopy(cmd, 0, newcmd, 6, cmd.length);
/*     */       
/* 725 */       return exec(project, newcmd, env);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static class MacCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/* 735 */     MacCommandLauncher(Execute.CommandLauncher launcher) { super(launcher); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 744 */       if (workingDir == null) {
/* 745 */         return exec(project, cmd, env);
/*     */       }
/*     */       
/* 748 */       System.getProperties().put(""user.dir"", workingDir.getAbsolutePath());
/*     */       try {
/* 750 */         return exec(project, cmd, env);
/*     */       } finally {
/* 752 */         System.getProperties().put(""user.dir"", antWorkingDirectory);
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   private static class ScriptCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/*     */     private String _script;
/*     */     
/*     */     ScriptCommandLauncher(String script, Execute.CommandLauncher launcher) {
/* 763 */       super(launcher);
/* 764 */       this._script = script;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 773 */       if (project == null) {
/* 774 */         if (workingDir == null) {
/* 775 */           return exec(project, cmd, env);
/*     */         }
/* 777 */         throw new IOException(""Cannot locate antRun script: No project provided"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 782 */       String antHome = project.getProperty(""ant.home"");
/* 783 */       if (antHome == null) {
/* 784 */         throw new IOException(""Cannot locate antRun script: Property 'ant.home' not found"");
/*     */       }
/*     */       
/* 787 */       String antRun = project.resolveFile(antHome + File.separator + this._script).toString();
/*     */ 
/*     */       
/* 790 */       File commandDir = workingDir;
/* 791 */       if (workingDir == null && project != null) {
/* 792 */         commandDir = project.getBaseDir();
/*     */       }
/*     */       
/* 795 */       String[] newcmd = new String[cmd.length + 2];
/* 796 */       newcmd[0] = antRun;
/* 797 */       newcmd[1] = commandDir.getAbsolutePath();
/* 798 */       System.arraycopy(cmd, 0, newcmd, 2, cmd.length);
/*     */       
/* 800 */       return exec(project, newcmd, env);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private static class PerlScriptCommandLauncher
/*     */     extends CommandLauncherProxy
/*     */   {
/*     */     private String _script;
/*     */ 
/*     */     
/*     */     PerlScriptCommandLauncher(String script, Execute.CommandLauncher launcher) {
/* 813 */       super(launcher);
/* 814 */       this._script = script;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Process exec(Project project, String[] cmd, String[] env, File workingDir) throws IOException {
/* 823 */       if (project == null) {
/* 824 */         if (workingDir == null) {
/* 825 */           return exec(project, cmd, env);
/*     */         }
/* 827 */         throw new IOException(""Cannot locate antRun script: No project provided"");
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 832 */       String antHome = project.getProperty(""ant.home"");
/* 833 */       if (antHome == null) {
/* 834 */         throw new IOException(""Cannot locate antRun script: Property 'ant.home' not found"");
/*     */       }
/*     */       
/* 837 */       String antRun = project.resolveFile(antHome + File.separator + this._script).toString();
/*     */ 
/*     */       
/* 840 */       File commandDir = workingDir;
/* 841 */       if (workingDir == null && project != null) {
/* 842 */         commandDir = project.getBaseDir();
/*     */       }
/*     */       
/* 845 */       String[] newcmd = new String[cmd.length + 3];
/* 846 */       newcmd[0] = ""perl"";
/* 847 */       newcmd[1] = antRun;
/* 848 */       newcmd[2] = commandDir.getAbsolutePath();
/* 849 */       System.arraycopy(cmd, 0, newcmd, 3, cmd.length);
/*     */       
/* 851 */       return exec(project, newcmd, env);
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Execute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteJava,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.TimeoutObserver;
/*     */ import org.apache.tools.ant.util.Watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteJava
/*     */   implements Runnable, TimeoutObserver
/*     */ {
/*  80 */   private Commandline javaCommand = null;
/*  81 */   private Path classpath = null;
/*  82 */   private CommandlineJava.SysProperties sysProperties = null;
/*  83 */   private Method main = null;
/*  84 */   private Long timeout = null;
/*  85 */   private Throwable caught = null;
/*     */   private boolean timedOut = false;
/*  87 */   private Thread thread = null;
/*     */ 
/*     */   
/*  90 */   public void setJavaCommand(Commandline javaCommand) { this.javaCommand = javaCommand; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setClasspath(Path p) { this.classpath = p; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setSystemProperties(CommandlineJava.SysProperties s) { this.sysProperties = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setOutput(PrintStream out) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setTimeout(Long timeout) { this.timeout = timeout; }
/*     */ 
/*     */   
/*     */   public void execute(Project project) throws BuildException {
/* 123 */     String classname = this.javaCommand.getExecutable();
/*     */     
/* 125 */     AntClassLoader loader = null;
/*     */     try {
/* 127 */       if (this.sysProperties != null) {
/* 128 */         this.sysProperties.setSystem();
/*     */       }
/*     */       
/* 131 */       Class[] param = { Class.forName(""[Ljava.lang.String;"") };
/* 132 */       Class target = null;
/* 133 */       if (this.classpath == null) {
/* 134 */         target = Class.forName(classname);
/*     */       } else {
/* 136 */         loader = new AntClassLoader(project.getCoreLoader(), project, this.classpath, false);
/*     */         
/* 138 */         loader.setIsolated(true);
/* 139 */         loader.setThreadContextLoader();
/* 140 */         target = loader.forceLoadClass(classname);
/* 141 */         AntClassLoader.initializeClass(target);
/*     */       } 
/* 143 */       this.main = target.getMethod(""main"", param);
/* 144 */       if (this.main == null) {
/* 145 */         throw new BuildException(""Could not find main() method in "" + classname);
/*     */       }
/*     */ 
/*     */       
/* 149 */       if (this.timeout == null) {
/* 150 */         run();
/*     */       } else {
/* 152 */         this.thread = new Thread(this, ""ExecuteJava"");
/* 153 */         Task currentThreadTask = project.getThreadTask(Thread.currentThread());
/*     */         
/* 155 */         project.registerThreadTask(this.thread, currentThreadTask);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 160 */         this.thread.setDaemon(true);
/* 161 */         Watchdog w = new Watchdog(this.timeout.longValue());
/* 162 */         w.addTimeoutObserver(this);
/* 163 */         synchronized (this) {
/* 164 */           this.thread.start();
/* 165 */           w.start();
/*     */           try {
/* 167 */             wait();
/* 168 */           } catch (InterruptedException e) {}
/* 169 */           if (this.timedOut) {
/* 170 */             project.log(""Timeout: sub-process interrupted"", 1);
/*     */           } else {
/*     */             
/* 173 */             this.thread = null;
/* 174 */             w.stop();
/*     */           } 
/*     */         } 
/*     */       } 
/*     */       
/* 179 */       if (this.caught != null) {
/* 180 */         throw this.caught;
/*     */       }
/*     */     } catch (ClassNotFoundException e) {
/*     */       
/* 184 */       throw new BuildException(""Could not find "" + classname + ""."" + "" Make sure you have it in your"" + "" classpath"");
/*     */     }
/*     */     catch (SecurityException e) {
/*     */       
/* 188 */       throw e;
/*     */     } catch (Throwable e) {
/* 190 */       throw new BuildException(e);
/*     */     } finally {
/* 192 */       if (loader != null) {
/* 193 */         loader.resetThreadContextLoader();
/* 194 */         loader.cleanup();
/*     */       } 
/* 196 */       if (this.sysProperties != null) {
/* 197 */         this.sysProperties.restoreSystem();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/* 206 */     Object[] argument = { this.javaCommand.getArguments() };
/*     */     try {
/* 208 */       this.main.invoke(null, argument);
/*     */     } catch (InvocationTargetException e) {
/* 210 */       Throwable t = e.getTargetException();
/* 211 */       if (!(t instanceof InterruptedException)) {
/* 212 */         this.caught = t;
/*     */       }
/*     */     } catch (Throwable t) {
/* 215 */       this.caught = t = null;
/*     */     } finally {
/* 217 */       synchronized (this) {
/* 218 */         notifyAll();
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void timeoutOccured(Watchdog w) {
/* 227 */     if (this.thread != null) {
/* 228 */       this.timedOut = true;
/* 229 */       this.thread.interrupt();
/*     */     } 
/* 231 */     notifyAll();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 238 */   public boolean killedProcess() { return this.timedOut; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ExecuteJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteOn,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteOn
/*     */   extends ExecTask
/*     */ {
/*  84 */   protected Vector filesets = new Vector();
/*     */   private boolean relative = false;
/*     */   private boolean parallel = false;
/*  87 */   protected String type = ""file"";
/*  88 */   protected Commandline.Marker srcFilePos = null;
/*     */   private boolean skipEmpty = false;
/*  90 */   protected Commandline.Marker targetFilePos = null;
/*  91 */   protected Mapper mapperElement = null;
/*  92 */   protected FileNameMapper mapper = null;
/*  93 */   protected File destDir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean srcIsFirst = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setRelative(boolean relative) { this.relative = relative; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setParallel(boolean parallel) { this.parallel = parallel; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setType(FileDirBoth type) { this.type = type.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void setSkipEmptyFilesets(boolean skip) { this.skipEmpty = skip; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setDest(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createSrcfile() {
/* 153 */     if (this.srcFilePos != null) {
/* 154 */       throw new BuildException(this.taskType + "" doesn't support multiple "" + ""srcfile elements."", this.location);
/*     */     }
/*     */     
/* 157 */     this.srcFilePos = this.cmdl.createMarker();
/* 158 */     return this.srcFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline.Marker createTargetfile() {
/* 166 */     if (this.targetFilePos != null) {
/* 167 */       throw new BuildException(this.taskType + "" doesn't support multiple "" + ""targetfile elements."", this.location);
/*     */     }
/*     */     
/* 170 */     this.targetFilePos = this.cmdl.createMarker();
/* 171 */     this.srcIsFirst = (this.srcFilePos != null);
/* 172 */     return this.targetFilePos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 179 */     if (this.mapperElement != null) {
/* 180 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 183 */     this.mapperElement = new Mapper(this.project);
/* 184 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkConfiguration() {
/* 192 */     if (""execon"".equals(this.taskName)) {
/* 193 */       log(""!! execon is deprecated. Use apply instead. !!"");
/*     */     }
/*     */     
/* 196 */     super.checkConfiguration();
/* 197 */     if (this.filesets.size() == 0) {
/* 198 */       throw new BuildException(""no filesets specified"", this.location);
/*     */     }
/*     */     
/* 201 */     if (this.targetFilePos != null || this.mapperElement != null || this.destDir != null) {
/*     */ 
/*     */       
/* 204 */       if (this.mapperElement == null) {
/* 205 */         throw new BuildException(""no mapper specified"", this.location);
/*     */       }
/* 207 */       if (this.destDir == null) {
/* 208 */         throw new BuildException(""no dest attribute specified"", this.location);
/*     */       }
/*     */       
/* 211 */       this.mapper = this.mapperElement.getImplementation();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected void runExec(Execute exe) throws BuildException {
/*     */     try {
/* 218 */       Vector fileNames = new Vector();
/* 219 */       Vector baseDirs = new Vector();
/* 220 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 221 */         FileSet fs = this.filesets.elementAt(i);
/* 222 */         File base = fs.getDir(this.project);
/* 223 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/*     */         
/* 225 */         if (!""dir"".equals(this.type)) {
/* 226 */           String[] s = getFiles(base, ds);
/* 227 */           for (int j = 0; j < s.length; j++) {
/* 228 */             fileNames.addElement(s[j]);
/* 229 */             baseDirs.addElement(base);
/*     */           } 
/*     */         } 
/*     */         
/* 233 */         if (!""file"".equals(this.type)) {
/* 234 */           String[] s = getDirs(base, ds);
/* 235 */           for (int j = 0; j < s.length; j++) {
/* 236 */             fileNames.addElement(s[j]);
/* 237 */             baseDirs.addElement(base);
/*     */           } 
/*     */         } 
/*     */         
/* 241 */         if (fileNames.size() == 0 && this.skipEmpty) {
/* 242 */           log(""Skipping fileset for directory "" + base + "". It is empty."", 2);
/*     */ 
/*     */ 
/*     */         
/*     */         }
/* 247 */         else if (!this.parallel) {
/* 248 */           String[] s = new String[fileNames.size()];
/* 249 */           fileNames.copyInto((Object[])s);
/* 250 */           for (int j = 0; j < s.length; j++) {
/* 251 */             String[] command = getCommandline(s[j], base);
/* 252 */             log(Commandline.describeCommand(command), 3);
/*     */             
/* 254 */             exe.setCommandline(command);
/* 255 */             runExecute(exe);
/*     */           } 
/* 257 */           fileNames.removeAllElements();
/* 258 */           baseDirs.removeAllElements();
/*     */         } 
/*     */       } 
/*     */       
/* 262 */       if (this.parallel && (fileNames.size() > 0 || !this.skipEmpty)) {
/* 263 */         String[] s = new String[fileNames.size()];
/* 264 */         fileNames.copyInto((Object[])s);
/* 265 */         File[] b = new File[baseDirs.size()];
/* 266 */         baseDirs.copyInto((Object[])b);
/* 267 */         String[] command = getCommandline(s, b);
/* 268 */         log(Commandline.describeCommand(command), 3);
/* 269 */         exe.setCommandline(command);
/* 270 */         runExecute(exe);
/*     */       } 
/*     */     } catch (IOException e) {
/*     */       
/* 274 */       throw new BuildException(""Execute failed: "" + e, e, this.location);
/*     */     } finally {
/*     */       
/* 277 */       logFlush();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getCommandline(String[] srcFiles, File[] baseDirs) {
/* 288 */     Vector targets = new Vector();
/* 289 */     if (this.targetFilePos != null) {
/* 290 */       Hashtable addedFiles = new Hashtable();
/* 291 */       for (int i = 0; i < srcFiles.length; i++) {
/* 292 */         String[] subTargets = this.mapper.mapFileName(srcFiles[i]);
/* 293 */         if (subTargets != null) {
/* 294 */           for (int j = 0; j < subTargets.length; j++) {
/* 295 */             String name = null;
/* 296 */             if (!this.relative) {
/* 297 */               name = (new File(this.destDir, subTargets[j])).getAbsolutePath();
/*     */             } else {
/* 299 */               name = subTargets[j];
/*     */             } 
/* 301 */             if (!addedFiles.contains(name)) {
/* 302 */               targets.addElement(name);
/* 303 */               addedFiles.put(name, name);
/*     */             } 
/*     */           } 
/*     */         }
/*     */       } 
/*     */     } 
/* 309 */     String[] targetFiles = new String[targets.size()];
/* 310 */     targets.copyInto((Object[])targetFiles);
/*     */     
/* 312 */     String[] orig = this.cmdl.getCommandline();
/* 313 */     String[] result = new String[orig.length + srcFiles.length + targetFiles.length];
/*     */ 
/*     */     
/* 316 */     int srcIndex = orig.length;
/* 317 */     if (this.srcFilePos != null) {
/* 318 */       srcIndex = this.srcFilePos.getPosition();
/*     */     }
/*     */     
/* 321 */     if (this.targetFilePos != null) {
/* 322 */       int targetIndex = this.targetFilePos.getPosition();
/*     */       
/* 324 */       if (srcIndex < targetIndex || (srcIndex == targetIndex && this.srcIsFirst))
/*     */       {
/*     */ 
/*     */         
/* 328 */         System.arraycopy(orig, 0, result, 0, srcIndex);
/*     */ 
/*     */         
/* 331 */         System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length, targetIndex - srcIndex);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 336 */         System.arraycopy(targetFiles, 0, result, targetIndex + srcFiles.length, targetFiles.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 341 */         System.arraycopy(orig, targetIndex, result, targetIndex + srcFiles.length + targetFiles.length, orig.length - targetIndex);
/*     */       
/*     */       }
/*     */       else
/*     */       {
/* 346 */         System.arraycopy(orig, 0, result, 0, targetIndex);
/*     */ 
/*     */         
/* 349 */         System.arraycopy(targetFiles, 0, result, targetIndex, targetFiles.length);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 354 */         System.arraycopy(orig, targetIndex, result, targetIndex + targetFiles.length, srcIndex - targetIndex);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 359 */         System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length + targetFiles.length, orig.length - srcIndex);
/*     */ 
/*     */         
/* 362 */         srcIndex += targetFiles.length;
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 368 */       System.arraycopy(orig, 0, result, 0, srcIndex);
/*     */       
/* 370 */       System.arraycopy(orig, srcIndex, result, srcIndex + srcFiles.length, orig.length - srcIndex);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 377 */     for (int i = 0; i < srcFiles.length; i++) {
/* 378 */       if (!this.relative) {
/* 379 */         result[srcIndex + i] = (new File(baseDirs[i], srcFiles[i])).getAbsolutePath();
/*     */       } else {
/*     */         
/* 382 */         result[srcIndex + i] = srcFiles[i];
/*     */       } 
/*     */     } 
/* 385 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 395 */   protected String[] getCommandline(String srcFile, File baseDir) { return getCommandline(new String[] { srcFile }, new File[] { baseDir }); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getFiles(File baseDir, DirectoryScanner ds) {
/* 403 */     if (this.mapper != null) {
/* 404 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 405 */       return sfs.restrict(ds.getIncludedFiles(), baseDir, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 408 */     return ds.getIncludedFiles();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String[] getDirs(File baseDir, DirectoryScanner ds) {
/* 417 */     if (this.mapper != null) {
/* 418 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 419 */       return sfs.restrict(ds.getIncludedDirectories(), baseDir, this.destDir, this.mapper);
/*     */     } 
/*     */     
/* 422 */     return ds.getIncludedDirectories();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FileDirBoth
/*     */     extends EnumeratedAttribute
/*     */   {
/* 435 */     public String[] getValues() { return new String[] { ""file"", ""dir"", ""both"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ExecuteOn.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteStreamHandler,"package org.apache.tools.ant.taskdefs;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
public interface ExecuteStreamHandler {
  void setProcessInputStream(OutputStream paramOutputStream) throws IOException;
  void setProcessErrorStream(InputStream paramInputStream) throws IOException;
  void setProcessOutputStream(InputStream paramInputStream) throws IOException;
  void start() throws IOException;
  void stop();
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ExecuteStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ExecuteWatchdog,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.TimeoutObserver;
/*     */ import org.apache.tools.ant.util.Watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExecuteWatchdog
/*     */   implements TimeoutObserver
/*     */ {
/*     */   private Process process;
/*     */   private boolean watch = false;
/*  89 */   private Exception caught = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean killedProcess = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private Watchdog watchdog;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ExecuteWatchdog(long timeout) {
/* 104 */     this.watchdog = new Watchdog(timeout);
/* 105 */     this.watchdog.addTimeoutObserver(this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void start(Process process) {
/* 115 */     if (process == null) {
/* 116 */       throw new NullPointerException(""process is null."");
/*     */     }
/* 118 */     if (this.process != null) {
/* 119 */       throw new IllegalStateException(""Already running."");
/*     */     }
/* 121 */     this.caught = null;
/* 122 */     this.killedProcess = false;
/* 123 */     this.watch = true;
/* 124 */     this.process = process;
/* 125 */     this.watchdog.start();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void stop() {
/* 133 */     this.watchdog.stop();
/* 134 */     this.watch = false;
/* 135 */     this.process = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void timeoutOccured(Watchdog w) {
/*     */     try {
/*     */       try {
/* 146 */         this.process.exitValue();
/*     */       }
/*     */       catch (IllegalThreadStateException itse) {
/*     */         
/* 150 */         if (this.watch) {
/* 151 */           this.killedProcess = true;
/* 152 */           this.process.destroy();
/*     */         } 
/*     */       } 
/*     */     } catch (Exception e) {
/* 156 */       this.caught = e = null;
/*     */     } finally {
/* 158 */       cleanUp();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 166 */     this.watch = false;
/* 167 */     this.process = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void checkException() throws BuildException {
/* 179 */     if (this.caught != null) {
/* 180 */       throw new BuildException(""Exception in ExecuteWatchdog.run: "" + this.caught.getMessage(), this.caught);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 191 */   public boolean isWatching() { return this.watch; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public boolean killedProcess() { return this.killedProcess; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ExecuteWatchdog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Exit,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Exit
/*     */   extends Task
/*     */ {
/*     */   private String message;
/*     */   private String ifCondition;
/*     */   private String unlessCondition;
/*     */   
/*  81 */   public void setMessage(String value) { this.message = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void setIf(String c) { this.ifCondition = c; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setUnless(String c) { this.unlessCondition = c; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 102 */     if (testIfCondition() && testUnlessCondition()) {
/* 103 */       if (this.message != null && this.message.length() > 0) {
/* 104 */         throw new BuildException(this.message);
/*     */       }
/* 106 */       throw new BuildException(""No message"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addText(String msg) {
/* 115 */     if (this.message == null) {
/* 116 */       this.message = """";
/*     */     }
/* 118 */     this.message += this.project.replaceProperties(msg);
/*     */   }
/*     */   
/*     */   private boolean testIfCondition() {
/* 122 */     if (this.ifCondition == null || """".equals(this.ifCondition)) {
/* 123 */       return true;
/*     */     }
/*     */     
/* 126 */     return (this.project.getProperty(this.ifCondition) != null);
/*     */   }
/*     */   
/*     */   private boolean testUnlessCondition() {
/* 130 */     if (this.unlessCondition == null || """".equals(this.unlessCondition)) {
/* 131 */       return true;
/*     */     }
/* 133 */     return (this.project.getProperty(this.unlessCondition) == null);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Exit.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Expand,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Expand
/*     */   extends Task
/*     */ {
/*     */   private File dest;
/*     */   private File source;
/*     */   private boolean overwrite = true;
/*  93 */   private Vector patternsets = new Vector();
/*  94 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 102 */     if (""expand"".equals(this.taskType)) {
/* 103 */       log(""!! expand is deprecated. Use unzip instead. !!"");
/*     */     }
/*     */     
/* 106 */     if (this.source == null && this.filesets.size() == 0) {
/* 107 */       throw new BuildException(""src attribute and/or filesets must be specified"");
/*     */     }
/*     */ 
/*     */     
/* 111 */     if (this.dest == null) {
/* 112 */       throw new BuildException(""Dest attribute must be specified"");
/*     */     }
/*     */ 
/*     */     
/* 116 */     if (this.dest.exists() && !this.dest.isDirectory()) {
/* 117 */       throw new BuildException(""Dest must be a directory."", this.location);
/*     */     }
/*     */     
/* 120 */     FileUtils fileUtils = FileUtils.newFileUtils();
/*     */     
/* 122 */     if (this.source != null) {
/* 123 */       if (this.source.isDirectory()) {
/* 124 */         throw new BuildException(""Src must not be a directory. Use nested filesets instead."", this.location);
/*     */       }
/*     */       
/* 127 */       expandFile(fileUtils, this.source, this.dest);
/*     */     } 
/*     */     
/* 130 */     if (this.filesets.size() > 0) {
/* 131 */       for (int j = 0; j < this.filesets.size(); j++) {
/* 132 */         FileSet fs = this.filesets.elementAt(j);
/* 133 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 134 */         File fromDir = fs.getDir(this.project);
/*     */         
/* 136 */         String[] files = ds.getIncludedFiles();
/* 137 */         for (int i = 0; i < files.length; i++) {
/* 138 */           File file = new File(fromDir, files[i]);
/* 139 */           expandFile(fileUtils, file, this.dest);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void expandFile(FileUtils fileUtils, File srcF, File dir) {
/* 149 */     log(""Expanding: "" + srcF + "" into "" + dir, 2);
/* 150 */     ZipInputStream zis = null;
/*     */     
/*     */     try {
/* 153 */       zis = new ZipInputStream(new FileInputStream(srcF));
/* 154 */       ZipEntry ze = null;
/*     */       
/* 156 */       while ((ze = zis.getNextEntry()) != null) {
/* 157 */         extractFile(fileUtils, srcF, dir, zis, ze.getName(), new Date(ze.getTime()), ze.isDirectory());
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 162 */       log(""expand complete"", 3);
/*     */     } catch (IOException ioe) {
/* 164 */       throw new BuildException(""Error while expanding "" + srcF.getPath(), ioe);
/*     */     } finally {
/*     */       
/* 167 */       if (zis != null) {
/*     */         try {
/* 169 */           zis.close();
/* 170 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void extractFile(FileUtils fileUtils, File srcF, File dir, InputStream compressedInputStream, String entryName, Date entryDate, boolean isDirectory) throws IOException {
/* 181 */     if (this.patternsets != null && this.patternsets.size() > 0) {
/* 182 */       String name = entryName;
/* 183 */       boolean included = false;
/* 184 */       for (int v = 0; v < this.patternsets.size(); v++) {
/* 185 */         PatternSet p = this.patternsets.elementAt(v);
/* 186 */         String[] incls = p.getIncludePatterns(this.project);
/* 187 */         if (incls != null) {
/* 188 */           for (int w = 0; w < incls.length; w++) {
/* 189 */             boolean isIncl = DirectoryScanner.match(incls[w], name);
/*     */             
/* 191 */             if (isIncl) {
/* 192 */               included = true;
/*     */               break;
/*     */             } 
/*     */           } 
/*     */         }
/* 197 */         String[] excls = p.getExcludePatterns(this.project);
/* 198 */         if (excls != null) {
/* 199 */           for (int w = 0; w < excls.length; w++) {
/* 200 */             boolean isExcl = DirectoryScanner.match(excls[w], name);
/*     */             
/* 202 */             if (isExcl) {
/* 203 */               included = false;
/*     */               break;
/*     */             } 
/*     */           } 
/*     */         }
/*     */       } 
/* 209 */       if (!included) {
/*     */         return;
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 215 */     File f = fileUtils.resolveFile(dir, entryName);
/*     */     try {
/* 217 */       if (!this.overwrite && f.exists() && f.lastModified() >= entryDate.getTime()) {
/*     */         
/* 219 */         log(""Skipping "" + f + "" as it is up-to-date"", 4);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 224 */       log(""expanding "" + entryName + "" to "" + f, 3);
/*     */ 
/*     */       
/* 227 */       File dirF = fileUtils.getParentFile(f);
/* 228 */       dirF.mkdirs();
/*     */       
/* 230 */       if (isDirectory) {
/* 231 */         f.mkdirs();
/*     */       } else {
/* 233 */         byte[] buffer = new byte[1024];
/* 234 */         int length = 0;
/* 235 */         FileOutputStream fos = null;
/*     */         try {
/* 237 */           fos = new FileOutputStream(f);
/*     */ 
/*     */           
/* 240 */           while ((length = compressedInputStream.read(buffer)) >= 0) {
/* 241 */             fos.write(buffer, 0, length);
/*     */           }
/*     */           
/* 244 */           fos.close();
/* 245 */           fos = null;
/*     */         } finally {
/* 247 */           if (fos != null) {
/*     */             try {
/* 249 */               fos.close();
/* 250 */             } catch (IOException e) {}
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 255 */       fileUtils.setFileLastModified(f, entryDate.getTime());
/*     */     } catch (FileNotFoundException ex) {
/* 257 */       log(""Unable to expand to file "" + f.getPath(), 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public void setDest(File d) { this.dest = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void setSrc(File s) { this.source = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setOverwrite(boolean b) { this.overwrite = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void addPatternset(PatternSet set) { this.patternsets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Expand.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Filter,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Filter
/*     */   extends Task
/*     */ {
/*     */   private String token;
/*     */   private String value;
/*     */   private File filtersFile;
/*     */   
/*  88 */   public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setFiltersfile(File filtersFile) { this.filtersFile = filtersFile; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 110 */     boolean isFiltersFromFile = (this.filtersFile != null && this.token == null && this.value == null);
/*     */     
/* 112 */     boolean isSingleFilter = (this.filtersFile == null && this.token != null && this.value != null);
/*     */ 
/*     */     
/* 115 */     if (!isFiltersFromFile && !isSingleFilter) {
/* 116 */       throw new BuildException(""both token and value parameters, or only a filtersFile parameter is required"", this.location);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 121 */     if (isSingleFilter) {
/* 122 */       this.project.getGlobalFilterSet().addFilter(this.token, this.value);
/*     */     }
/*     */     
/* 125 */     if (isFiltersFromFile) {
/* 126 */       readFilters();
/*     */     }
/*     */   }
/*     */   
/*     */   protected void readFilters() throws BuildException {
/* 131 */     log(""Reading filters from "" + this.filtersFile, 3);
/* 132 */     this.project.getGlobalFilterSet().readFiltersFromFile(this.filtersFile);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Filter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.FixCRLF,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.BufferedWriter;
/*      */ import java.io.File;
/*      */ import java.io.FileInputStream;
/*      */ import java.io.FileOutputStream;
/*      */ import java.io.FileReader;
/*      */ import java.io.FileWriter;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.OutputStreamWriter;
/*      */ import java.io.Reader;
/*      */ import java.io.Writer;
/*      */ import java.util.Enumeration;
/*      */ import java.util.NoSuchElementException;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.taskdefs.condition.Os;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FixCRLF
/*      */   extends MatchingTask
/*      */ {
/*      */   private static final int UNDEF = -1;
/*      */   private static final int NOTJAVA = 0;
/*      */   private static final int LOOKING = 1;
/*      */   private static final int IN_CHAR_CONST = 2;
/*      */   private static final int IN_STR_CONST = 3;
/*      */   private static final int IN_SINGLE_COMMENT = 4;
/*      */   private static final int IN_MULTI_COMMENT = 5;
/*      */   private static final int ASIS = 0;
/*      */   private static final int CR = 1;
/*      */   private static final int LF = 2;
/*      */   private static final int CRLF = 3;
/*      */   private static final int ADD = 1;
/*      */   private static final int REMOVE = -1;
/*      */   private static final int SPACES = -1;
/*      */   private static final int TABS = 1;
/*      */   private static final int INBUFLEN = 8192;
/*      */   private static final int LINEBUFLEN = 200;
/*      */   private static final char CTRLZ = '\032';
/*  149 */   private int tablength = 8;
/*  150 */   private String spaces = ""        "";
/*  151 */   private StringBuffer linebuf = new StringBuffer(1024);
/*  152 */   private StringBuffer linebuf2 = new StringBuffer(1024);
/*      */   
/*      */   private int eol;
/*      */   private String eolstr;
/*      */   private int ctrlz;
/*      */   private int tabs;
/*      */   private boolean javafiles = false;
/*      */   private File srcDir;
/*  160 */   private File destDir = null;
/*      */   
/*  162 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  167 */   private String encoding = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FixCRLF() {
/*  176 */     this.tabs = 0;
/*  177 */     if (Os.isFamily(""mac"")) {
/*  178 */       this.ctrlz = -1;
/*  179 */       this.eol = 1;
/*  180 */       this.eolstr = ""\r"";
/*  181 */     } else if (Os.isFamily(""dos"")) {
/*  182 */       this.ctrlz = 0;
/*  183 */       this.eol = 3;
/*  184 */       this.eolstr = ""\r\n"";
/*      */     } else {
/*  186 */       this.ctrlz = -1;
/*  187 */       this.eol = 2;
/*  188 */       this.eolstr = ""\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  196 */   public void setSrcdir(File srcDir) { this.srcDir = srcDir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  204 */   public void setDestdir(File destDir) { this.destDir = destDir; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  211 */   public void setJavafiles(boolean javafiles) { this.javafiles = javafiles; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEol(CrLf attr) {
/*  227 */     String option = attr.getValue();
/*  228 */     if (option.equals(""asis"")) {
/*  229 */       this.eol = 0;
/*  230 */     } else if (option.equals(""cr"")) {
/*  231 */       this.eol = 1;
/*  232 */       this.eolstr = ""\r"";
/*  233 */     } else if (option.equals(""lf"")) {
/*  234 */       this.eol = 2;
/*  235 */       this.eolstr = ""\n"";
/*      */     } else {
/*      */       
/*  238 */       this.eol = 3;
/*  239 */       this.eolstr = ""\r\n"";
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setCr(AddAsisRemove attr) {
/*  256 */     log(""DEPRECATED: The cr attribute has been deprecated,"", 1);
/*      */     
/*  258 */     log(""Please use the eol attribute instead"", 1);
/*  259 */     String option = attr.getValue();
/*  260 */     CrLf c = new CrLf();
/*  261 */     if (option.equals(""remove"")) {
/*  262 */       c.setValue(""lf"");
/*  263 */     } else if (option.equals(""asis"")) {
/*  264 */       c.setValue(""asis"");
/*      */     } else {
/*      */       
/*  267 */       c.setValue(""crlf"");
/*      */     } 
/*  269 */     setEol(c);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTab(AddAsisRemove attr) {
/*  283 */     String option = attr.getValue();
/*  284 */     if (option.equals(""remove"")) {
/*  285 */       this.tabs = -1;
/*  286 */     } else if (option.equals(""asis"")) {
/*  287 */       this.tabs = 0;
/*      */     } else {
/*      */       
/*  290 */       this.tabs = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setTablength(int tlength) throws BuildException {
/*  300 */     if (tlength < 2 || tlength > 80) {
/*  301 */       throw new BuildException(""tablength must be between 2 and 80"", this.location);
/*      */     }
/*      */     
/*  304 */     this.tablength = tlength;
/*  305 */     StringBuffer sp = new StringBuffer();
/*  306 */     for (int i = 0; i < this.tablength; i++) {
/*  307 */       sp.append(' ');
/*      */     }
/*  309 */     this.spaces = sp.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEof(AddAsisRemove attr) {
/*  323 */     String option = attr.getValue();
/*  324 */     if (option.equals(""remove"")) {
/*  325 */       this.ctrlz = -1;
/*  326 */     } else if (option.equals(""asis"")) {
/*  327 */       this.ctrlz = 0;
/*      */     } else {
/*      */       
/*  330 */       this.ctrlz = 1;
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  339 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/*  348 */     if (this.srcDir == null) {
/*  349 */       throw new BuildException(""srcdir attribute must be set!"");
/*      */     }
/*  351 */     if (!this.srcDir.exists()) {
/*  352 */       throw new BuildException(""srcdir does not exist!"");
/*      */     }
/*  354 */     if (!this.srcDir.isDirectory()) {
/*  355 */       throw new BuildException(""srcdir is not a directory!"");
/*      */     }
/*  357 */     if (this.destDir != null) {
/*  358 */       if (!this.destDir.exists()) {
/*  359 */         throw new BuildException(""destdir does not exist!"");
/*      */       }
/*  361 */       if (!this.destDir.isDirectory()) {
/*  362 */         throw new BuildException(""destdir is not a directory!"");
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/*  367 */     log(""options: eol="" + ((this.eol == 0) ? ""asis"" : ((this.eol == 1) ? ""cr"" : ((this.eol == 2) ? ""lf"" : ""crlf""))) + "" tab="" + ((this.tabs == 1) ? ""add"" : ((this.tabs == 0) ? ""asis"" : ""remove"")) + "" eof="" + ((this.ctrlz == 1) ? ""add"" : ((this.ctrlz == 0) ? ""asis"" : ""remove"")) + "" tablength="" + this.tablength + "" encoding="" + ((this.encoding == null) ? ""default"" : this.encoding), 3);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  376 */     DirectoryScanner ds = getDirectoryScanner(this.srcDir);
/*  377 */     String[] files = ds.getIncludedFiles();
/*      */     
/*  379 */     for (int i = 0; i < files.length; i++) {
/*  380 */       processFile(files[i]);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  389 */   private Reader getReader(File f) throws IOException { return (this.encoding == null) ? new FileReader(f) : new InputStreamReader(new FileInputStream(f), this.encoding); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void processFile(String file) throws BuildException {
/*  395 */     File srcFile = new File(this.srcDir, file);
/*  396 */     File destD = (this.destDir == null) ? this.srcDir : this.destDir;
/*  397 */     File tmpFile = null;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  402 */     OneLiner lines = new OneLiner(this, srcFile);
/*      */     
/*      */     try {
/*      */       BufferedWriter outWriter;
/*      */       try {
/*  407 */         tmpFile = this.fileUtils.createTempFile(""fixcrlf"", """", destD);
/*  408 */         Writer writer = (this.encoding == null) ? new FileWriter(tmpFile) : new OutputStreamWriter(new FileOutputStream(tmpFile), this.encoding);
/*      */ 
/*      */         
/*  411 */         outWriter = new BufferedWriter(writer);
/*      */       } catch (IOException e) {
/*  413 */         throw new BuildException(e);
/*      */       } 
/*      */       
/*  416 */       while (lines.hasMoreElements()) {
/*      */         OneLiner.BufferLine line;
/*      */ 
/*      */         
/*      */         try {
/*  421 */           line = (OneLiner.BufferLine)lines.nextElement();
/*      */         } catch (NoSuchElementException e) {
/*  423 */           throw new BuildException(e);
/*      */         } 
/*      */         
/*  426 */         String lineString = line.getLineString();
/*  427 */         int linelen = line.length();
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  432 */         if (this.tabs == 0) {
/*      */           
/*      */           try {
/*  435 */             outWriter.write(lineString);
/*      */           } catch (IOException e) {
/*  437 */             throw new BuildException(e);
/*      */           } 
/*      */         } else {
/*      */           int ptr;
/*      */ 
/*      */           
/*  443 */           while ((ptr = line.getNext()) < linelen) {
/*      */             char terminator; int begin; int endComment;
/*  445 */             switch (lines.getState()) {
/*      */               
/*      */               case 0:
/*  448 */                 notInConstant(line, line.length(), outWriter);
/*      */ 
/*      */               
/*      */               case 5:
/*  452 */                 endComment = lineString.indexOf(""*/"", line.getNext());
/*      */                 
/*  454 */                 if (endComment >= 0) {
/*      */                   
/*  456 */                   endComment += 2;
/*  457 */                   lines.setState(1);
/*      */                 } else {
/*  459 */                   endComment = linelen;
/*      */                 } 
/*      */                 
/*  462 */                 notInConstant(line, endComment, outWriter);
/*      */ 
/*      */               
/*      */               case 4:
/*  466 */                 notInConstant(line, line.length(), outWriter);
/*  467 */                 lines.setState(1);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*      */               case 2:
/*      */               case 3:
/*  480 */                 begin = line.getNext();
/*  481 */                 terminator = (lines.getState() == 3) ? '""' : '\'';
/*      */ 
/*      */                 
/*  484 */                 endOfCharConst(line, terminator);
/*  485 */                 while (line.getNext() < line.getLookahead()) {
/*  486 */                   if (line.getNextCharInc() == '\t') {
/*  487 */                     line.setColumn(line.getColumn() + this.tablength - line.getColumn() % this.tablength);
/*      */                     
/*      */                     continue;
/*      */                   } 
/*      */                   
/*  492 */                   line.incColumn();
/*      */                 } 
/*      */ 
/*      */ 
/*      */                 
/*      */                 try {
/*  498 */                   outWriter.write(line.substring(begin, line.getNext()));
/*      */                 } catch (IOException e) {
/*      */                   
/*  501 */                   throw new BuildException(e);
/*      */                 } 
/*      */                 
/*  504 */                 lines.setState(1);
/*      */ 
/*      */ 
/*      */ 
/*      */               
/*      */               case 1:
/*  510 */                 nextStateChange(line);
/*  511 */                 notInConstant(line, line.getLookahead(), outWriter);
/*      */             } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/*      */           } 
/*      */         } 
/*      */         try {
/*  521 */           outWriter.write(this.eolstr);
/*      */         } catch (IOException e) {
/*  523 */           throw new BuildException(e);
/*      */         } 
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*      */       try {
/*  530 */         if (this.ctrlz == 0) {
/*  531 */           outWriter.write(lines.getEofStr());
/*  532 */         } else if (this.ctrlz == 1) {
/*  533 */           outWriter.write(26);
/*      */         } 
/*      */       } catch (IOException e) {
/*  536 */         throw new BuildException(e);
/*      */       } finally {
/*      */         try {
/*  539 */           outWriter.close();
/*      */         } catch (IOException e) {
/*  541 */           throw new BuildException(e);
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*      */       try {
/*  547 */         lines.close();
/*  548 */         lines = null;
/*      */       } catch (IOException e) {
/*  550 */         throw new BuildException(""Unable to close source file "" + srcFile);
/*      */       } 
/*      */ 
/*      */       
/*  554 */       File destFile = new File(destD, file);
/*      */       
/*  556 */       if (destFile.exists()) {
/*      */         
/*  558 */         log(""destFile exists"", 4);
/*  559 */         if (!this.fileUtils.contentEquals(destFile, tmpFile)) {
/*  560 */           log(destFile + "" is being written"", 4);
/*  561 */           if (!destFile.delete()) {
/*  562 */             throw new BuildException(""Unable to delete "" + destFile);
/*      */           }
/*      */           
/*  565 */           if (!tmpFile.renameTo(destFile)) {
/*  566 */             throw new BuildException(""Failed to transform "" + srcFile + "" to "" + destFile + "". Couldn't rename temporary file: "" + tmpFile);
/*      */           
/*      */           }
/*      */         
/*      */         }
/*      */         else {
/*      */ 
/*      */           
/*  574 */           log(destFile + "" is not written, as the contents are identical"", 4);
/*      */ 
/*      */           
/*  577 */           if (!tmpFile.delete()) {
/*  578 */             throw new BuildException(""Unable to delete "" + tmpFile);
/*      */           }
/*      */         } 
/*      */       } else {
/*      */         
/*  583 */         log(""destFile does not exist"", 4);
/*  584 */         if (!tmpFile.renameTo(destFile)) {
/*  585 */           throw new BuildException(""Failed to transform "" + srcFile + "" to "" + destFile + "". Couldn't rename temporary file: "" + tmpFile);
/*      */         }
/*      */       } 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  593 */       tmpFile = null;
/*      */     } catch (IOException e) {
/*      */       
/*  596 */       throw new BuildException(e);
/*      */     } finally {
/*      */       try {
/*  599 */         if (lines != null) {
/*  600 */           lines.close();
/*      */         }
/*      */       } catch (IOException io) {
/*  603 */         log(""Error closing "" + srcFile, 0);
/*      */       } 
/*      */       
/*  606 */       if (tmpFile != null) {
/*  607 */         tmpFile.delete();
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void nextStateChange(OneLiner.BufferLine bufline) throws BuildException {
/*  628 */     int eol = bufline.length();
/*  629 */     int ptr = bufline.getNext();
/*      */ 
/*      */ 
/*      */     
/*  633 */     while (ptr < eol) {
/*  634 */       switch (bufline.getChar(ptr++)) {
/*      */         case '\'':
/*  636 */           bufline.setState(2);
/*  637 */           bufline.setLookahead(--ptr);
/*      */           return;
/*      */         case '""':
/*  640 */           bufline.setState(3);
/*  641 */           bufline.setLookahead(--ptr);
/*      */           return;
/*      */         case '/':
/*  644 */           if (ptr < eol) {
/*  645 */             if (bufline.getChar(ptr) == '*') {
/*  646 */               bufline.setState(5);
/*  647 */               bufline.setLookahead(--ptr); return;
/*      */             } 
/*  649 */             if (bufline.getChar(ptr) == '/') {
/*  650 */               bufline.setState(4);
/*  651 */               bufline.setLookahead(--ptr);
/*      */               return;
/*      */             } 
/*      */           } 
/*      */       } 
/*      */ 
/*      */ 
/*      */     
/*      */     } 
/*  660 */     bufline.setLookahead(ptr);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void endOfCharConst(OneLiner.BufferLine bufline, char terminator) throws BuildException {
/*  679 */     int ptr = bufline.getNext();
/*  680 */     int eol = bufline.length();
/*      */     
/*  682 */     ptr++;
/*  683 */     while (ptr < eol) {
/*  684 */       char c; if ((c = bufline.getChar(ptr++)) == '\\') {
/*  685 */         ptr++; continue;
/*      */       } 
/*  687 */       if (c == terminator) {
/*  688 */         bufline.setLookahead(ptr);
/*      */         
/*      */         return;
/*      */       } 
/*      */     } 
/*      */     
/*  694 */     throw new BuildException(""endOfCharConst: unterminated char constant"");
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void notInConstant(OneLiner.BufferLine bufline, int end, BufferedWriter outWriter) {
/*  718 */     String line = bufline.substring(bufline.getNext(), end);
/*  719 */     int place = 0;
/*  720 */     int col = bufline.getColumn();
/*      */ 
/*      */ 
/*      */     
/*  724 */     this.linebuf.setLength(0); int nextTab;
/*  725 */     while ((nextTab = line.indexOf('\t', place)) >= 0) {
/*  726 */       this.linebuf.append(line.substring(place, nextTab));
/*  727 */       col += nextTab - place;
/*  728 */       int tabspaces = this.tablength - col % this.tablength;
/*  729 */       this.linebuf.append(this.spaces.substring(0, tabspaces));
/*  730 */       col += tabspaces;
/*  731 */       place = nextTab + 1;
/*      */     } 
/*  733 */     this.linebuf.append(line.substring(place, line.length()));
/*      */     
/*  735 */     String linestring = new String(this.linebuf.toString());
/*  736 */     if (this.tabs == -1) {
/*      */       try {
/*  738 */         outWriter.write(linestring);
/*      */       } catch (IOException e) {
/*  740 */         throw new BuildException(e);
/*      */       } 
/*      */     } else {
/*      */       
/*  744 */       this.linebuf2.setLength(0);
/*  745 */       place = 0;
/*  746 */       col = bufline.getColumn();
/*  747 */       int placediff = col - 0;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*  752 */       int nextStop = col + this.tablength - col % this.tablength;
/*  753 */       if (nextStop - col < 2) {
/*  754 */         this.linebuf2.append(linestring.substring(place, nextStop - placediff));
/*      */         
/*  756 */         place = nextStop - placediff;
/*  757 */         nextStop += this.tablength;
/*      */       } 
/*      */       
/*  760 */       for (; nextStop - placediff <= linestring.length(); 
/*  761 */         nextStop += this.tablength) {
/*  762 */         int tabCol = nextStop; do {
/*      */         
/*  764 */         } while (--tabCol - placediff >= place && linestring.charAt(tabCol - placediff) == ' ');
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  770 */         if (nextStop - tabCol > 2) {
/*  771 */           this.linebuf2.append(linestring.substring(place, ++tabCol - placediff));
/*      */           
/*  773 */           this.linebuf2.append('\t');
/*      */         } else {
/*  775 */           this.linebuf2.append(linestring.substring(place, nextStop - placediff));
/*      */         } 
/*      */ 
/*      */         
/*  779 */         place = nextStop - placediff;
/*      */       } 
/*      */ 
/*      */       
/*  783 */       this.linebuf2.append(linestring.substring(place, linestring.length()));
/*      */       
/*      */       try {
/*  786 */         outWriter.write(this.linebuf2.toString());
/*      */       } catch (IOException e) {
/*  788 */         throw new BuildException(e);
/*      */       } 
/*      */     } 
/*      */ 
/*      */ 
/*      */     
/*  794 */     bufline.setColumn(bufline.getColumn() + linestring.length());
/*  795 */     bufline.setNext(end);
/*      */   }
/*      */ 
/*      */   
/*      */   class OneLiner
/*      */     implements Enumeration
/*      */   {
/*      */     private int state;
/*      */     
/*      */     private StringBuffer eolStr;
/*      */     private StringBuffer eofStr;
/*      */     private BufferedReader reader;
/*      */     private StringBuffer line;
/*      */     private boolean reachedEof;
/*      */     private final FixCRLF this$0;
/*      */     
/*      */     public OneLiner(FixCRLF this$0, File srcFile) throws BuildException {
/*  812 */       this.this$0 = this$0; this.state = this.this$0.javafiles ? 1 : 0; this.eolStr = new StringBuffer(200); this.eofStr = new StringBuffer(); this.line = new StringBuffer(); this.reachedEof = false;
/*      */       try {
/*  814 */         this.reader = new BufferedReader(this$0.getReader(srcFile), 8192);
/*      */         
/*  816 */         nextLine();
/*      */       } catch (IOException e) {
/*  818 */         throw new BuildException(e);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*      */     protected void nextLine() throws BuildException {
/*  824 */       int ch = -1;
/*  825 */       int eolcount = 0;
/*      */       
/*  827 */       this.eolStr.setLength(0);
/*  828 */       this.line.setLength(0);
/*      */       
/*      */       try {
/*  831 */         ch = this.reader.read();
/*  832 */         while (ch != -1 && ch != 13 && ch != 10) {
/*  833 */           this.line.append((char)ch);
/*  834 */           ch = this.reader.read();
/*      */         } 
/*      */         
/*  837 */         if (ch == -1 && this.line.length() == 0) {
/*      */           
/*  839 */           this.reachedEof = true;
/*      */           
/*      */           return;
/*      */         } 
/*  843 */         switch ((char)ch) {
/*      */ 
/*      */           
/*      */           case '\r':
/*  847 */             eolcount++;
/*  848 */             this.eolStr.append('\r');
/*  849 */             this.reader.mark(2);
/*  850 */             switch (ch = this.reader.read()) {
/*      */               case 13:
/*  852 */                 if ((char)(ch = this.reader.read()) == '\n') {
/*  853 */                   eolcount += 2;
/*  854 */                   this.eolStr.append(""\r\n""); break;
/*      */                 } 
/*  856 */                 this.reader.reset();
/*      */                 break;
/*      */               
/*      */               case 10:
/*  860 */                 eolcount++;
/*  861 */                 this.eolStr.append('\n');
/*      */                 break;
/*      */               
/*      */               case -1:
/*      */                 break;
/*      */             } 
/*      */             
/*  868 */             this.reader.reset();
/*      */             break;
/*      */ 
/*      */ 
/*      */           
/*      */           case '\n':
/*  874 */             eolcount++;
/*  875 */             this.eolStr.append('\n');
/*      */             break;
/*      */         } 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  882 */         if (eolcount == 0) {
/*  883 */           int i = this.line.length(); do {  }
/*  884 */           while (--i >= 0 && this.line.charAt(i) == '\032');
/*      */ 
/*      */           
/*  887 */           if (i < this.line.length() - 1) {
/*      */ 
/*      */             
/*  890 */             this.eofStr.append(this.line.toString().substring(i + 1));
/*  891 */             if (i < 0) {
/*  892 */               this.line.setLength(0);
/*  893 */               this.reachedEof = true;
/*      */             } else {
/*  895 */               this.line.setLength(i + 1);
/*      */             }
/*      */           
/*      */           } 
/*      */         } 
/*      */       } catch (IOException e) {
/*      */         
/*  902 */         throw new BuildException(e);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*  907 */     public String getEofStr() { return this.eofStr.toString(); }
/*      */ 
/*      */ 
/*      */     
/*  911 */     public int getState() { return this.state; }
/*      */ 
/*      */ 
/*      */     
/*  915 */     public void setState(int state) { this.state = state; }
/*      */ 
/*      */ 
/*      */     
/*  919 */     public boolean hasMoreElements() { return !this.reachedEof; }
/*      */ 
/*      */ 
/*      */     
/*      */     public Object nextElement() throws NoSuchElementException {
/*  924 */       if (!hasMoreElements()) {
/*  925 */         throw new NoSuchElementException(""OneLiner"");
/*      */       }
/*  927 */       BufferLine tmpLine = new BufferLine(this, this.line.toString(), this.eolStr.toString());
/*      */       
/*  929 */       nextLine();
/*  930 */       return tmpLine;
/*      */     }
/*      */     
/*      */     public void close() throws IOException {
/*  934 */       if (this.reader != null)
/*  935 */         this.reader.close(); 
/*      */     }
/*      */     
/*      */     class BufferLine {
/*      */       private int next;
/*      */       private int column;
/*      */       private int lookahead;
/*      */       private String line;
/*      */       private String eolStr;
/*      */       private final FixCRLF.OneLiner this$1;
/*      */       
/*      */       public BufferLine(FixCRLF.OneLiner this$1, String line, String eolStr) throws BuildException {
/*  947 */         this.this$1 = this$1; this.next = 0; this.column = 0; this.lookahead = -1;
/*  948 */         this.next = 0;
/*  949 */         this.column = 0;
/*  950 */         this.line = line;
/*  951 */         this.eolStr = eolStr;
/*      */       }
/*      */ 
/*      */       
/*  955 */       public int getNext() { return this.next; }
/*      */ 
/*      */ 
/*      */       
/*  959 */       public void setNext(int next) { this.next = next; }
/*      */ 
/*      */ 
/*      */       
/*  963 */       public int getLookahead() { return this.lookahead; }
/*      */ 
/*      */ 
/*      */       
/*  967 */       public void setLookahead(int lookahead) { this.lookahead = lookahead; }
/*      */ 
/*      */ 
/*      */       
/*  971 */       public char getChar(int i) { return this.line.charAt(i); }
/*      */ 
/*      */ 
/*      */       
/*  975 */       public char getNextChar() { return getChar(this.next); }
/*      */ 
/*      */ 
/*      */       
/*  979 */       public char getNextCharInc() { return getChar(this.next++); }
/*      */ 
/*      */ 
/*      */       
/*  983 */       public int getColumn() { return this.column; }
/*      */ 
/*      */ 
/*      */       
/*  987 */       public void setColumn(int col) { this.column = col; }
/*      */ 
/*      */ 
/*      */       
/*  991 */       public int incColumn() { return this.column++; }
/*      */ 
/*      */ 
/*      */       
/*  995 */       public int length() { return this.line.length(); }
/*      */ 
/*      */ 
/*      */       
/*  999 */       public int getEolLength() { return this.eolStr.length(); }
/*      */ 
/*      */ 
/*      */       
/* 1003 */       public String getLineString() { return this.line; }
/*      */ 
/*      */ 
/*      */       
/* 1007 */       public String getEol() { return this.eolStr; }
/*      */ 
/*      */ 
/*      */       
/* 1011 */       public String substring(int begin) { return this.line.substring(begin); }
/*      */ 
/*      */ 
/*      */       
/* 1015 */       public String substring(int begin, int end) { return this.line.substring(begin, end); }
/*      */ 
/*      */ 
/*      */       
/* 1019 */       public void setState(int state) { this.this$1.setState(state); }
/*      */ 
/*      */ 
/*      */       
/* 1023 */       public int getState() { return this.this$1.getState(); } } } class BufferLine { private int next; private int column; private int lookahead; private String line; private String eolStr; private final FixCRLF.OneLiner this$1; public int getState() { return this.this$1.getState(); } public BufferLine(FixCRLF.OneLiner this$1, String line, String eolStr) throws BuildException {
/*      */       this.this$1 = this$1;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.lookahead = -1;
/*      */       this.next = 0;
/*      */       this.column = 0;
/*      */       this.line = line;
/*      */       this.eolStr = eolStr;
/*      */     } public int getNext() { return this.next; } public void setNext(int next) { this.next = next; } public int getLookahead() { return this.lookahead; } public void setLookahead(int lookahead) { this.lookahead = lookahead; } public char getChar(int i) { return this.line.charAt(i); } public char getNextChar() { return getChar(this.next); } public char getNextCharInc() { return getChar(this.next++); } public int getColumn() { return this.column; } public void setColumn(int col) { this.column = col; } public int incColumn() { return this.column++; } public int length() { return this.line.length(); } public int getEolLength() { return this.eolStr.length(); } public String getLineString() { return this.line; } public String getEol() { return this.eolStr; } public String substring(int begin) { return this.line.substring(begin); } public String substring(int begin, int end) { return this.line.substring(begin, end); } public void setState(int state) { this.this$1.setState(state); } }
/* 1033 */   public static class AddAsisRemove extends EnumeratedAttribute { public String[] getValues() { return new String[] { ""add"", ""asis"", ""remove"" }; } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class CrLf
/*      */     extends EnumeratedAttribute
/*      */   {
/* 1045 */     public String[] getValues() { return new String[] { ""asis"", ""cr"", ""lf"", ""crlf"" }; }
/*      */   }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\FixCRLF.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GenerateKey,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GenerateKey
/*     */   extends Task
/*     */ {
/*     */   protected String alias;
/*     */   protected String keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected String sigalg;
/*     */   protected String keyalg;
/*     */   protected String dname;
/*     */   protected DistinguishedName expandedDname;
/*     */   protected int keysize;
/*     */   protected int validity;
/*     */   protected boolean verbose;
/*     */   
/*     */   public static class DnameParam
/*     */   {
/*     */     private String name;
/*     */     private String value;
/*     */     
/*  80 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/*  84 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/*  88 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */     
/*  92 */     public String getValue() { return this.value; }
/*     */   }
/*     */   
/*     */   public static class DistinguishedName
/*     */   {
/*  97 */     private Vector params = new Vector();
/*     */     
/*     */     public Object createParam() {
/* 100 */       GenerateKey.DnameParam param = new GenerateKey.DnameParam();
/* 101 */       this.params.addElement(param);
/*     */       
/* 103 */       return param;
/*     */     }
/*     */ 
/*     */     
/* 107 */     public Enumeration getParams() { return this.params.elements(); }
/*     */ 
/*     */     
/*     */     public String toString() {
/* 111 */       int size = this.params.size();
/* 112 */       StringBuffer sb = new StringBuffer();
/* 113 */       boolean firstPass = true;
/*     */       
/* 115 */       for (int i = 0; i < size; i++) {
/* 116 */         if (!firstPass) {
/* 117 */           sb.append("" ,"");
/*     */         }
/* 119 */         firstPass = false;
/*     */         
/* 121 */         GenerateKey.DnameParam param = this.params.elementAt(i);
/* 122 */         sb.append(encode(param.getName()));
/* 123 */         sb.append('=');
/* 124 */         sb.append(encode(param.getValue()));
/*     */       } 
/*     */       
/* 127 */       return sb.toString();
/*     */     }
/*     */     
/*     */     public String encode(String string) {
/* 131 */       int end = string.indexOf(',');
/*     */       
/* 133 */       if (-1 == end) {
/* 134 */         return string;
/*     */       }
/*     */       
/* 137 */       StringBuffer sb = new StringBuffer();
/*     */       
/* 139 */       int start = 0;
/*     */       
/* 141 */       while (-1 != end) {
/* 142 */         sb.append(string.substring(start, end));
/* 143 */         sb.append(""\\,"");
/* 144 */         start = end + 1;
/* 145 */         end = string.indexOf(',', start);
/*     */       } 
/*     */       
/* 148 */       sb.append(string.substring(start));
/*     */       
/* 150 */       return sb.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DistinguishedName createDname() throws BuildException {
/* 183 */     if (null != this.expandedDname) {
/* 184 */       throw new BuildException(""DName sub-element can only be specified once."");
/*     */     }
/*     */     
/* 187 */     if (null != this.dname) {
/* 188 */       throw new BuildException(""It is not possible to specify dname  both as attribute and element."");
/*     */     }
/*     */ 
/*     */     
/* 192 */     this.expandedDname = new DistinguishedName();
/* 193 */     return this.expandedDname;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDname(String dname) {
/* 202 */     if (null != this.expandedDname) {
/* 203 */       throw new BuildException(""It is not possible to specify dname  both as attribute and element."");
/*     */     }
/*     */ 
/*     */     
/* 207 */     this.dname = dname;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setAlias(String alias) { this.alias = alias; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setKeystore(String keystore) { this.keystore = keystore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 234 */   public void setStorepass(String storepass) { this.storepass = storepass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 243 */   public void setStoretype(String storetype) { this.storetype = storetype; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 252 */   public void setKeypass(String keypass) { this.keypass = keypass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public void setSigalg(String sigalg) { this.sigalg = sigalg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public void setKeyalg(String keyalg) { this.keyalg = keyalg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeysize(String keysize) throws BuildException {
/*     */     try {
/* 281 */       this.keysize = Integer.parseInt(keysize);
/*     */     } catch (NumberFormatException nfe) {
/* 283 */       throw new BuildException(""KeySize attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setValidity(String validity) throws BuildException {
/*     */     try {
/* 295 */       this.validity = Integer.parseInt(validity);
/*     */     } catch (NumberFormatException nfe) {
/* 297 */       throw new BuildException(""Validity attribute should be a integer"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 310 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 311 */       throw new BuildException(""The genkey task is only available on JDK versions 1.2 or greater"");
/*     */     }
/*     */ 
/*     */     
/* 315 */     if (null == this.alias) {
/* 316 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 319 */     if (null == this.storepass) {
/* 320 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 323 */     if (null == this.dname && null == this.expandedDname) {
/* 324 */       throw new BuildException(""dname must be set"");
/*     */     }
/*     */     
/* 327 */     StringBuffer sb = new StringBuffer();
/*     */     
/* 329 */     sb.append(""-genkey "");
/*     */     
/* 331 */     if (this.verbose) {
/* 332 */       sb.append(""-v "");
/*     */     }
/*     */     
/* 335 */     sb.append(""-alias \"""");
/* 336 */     sb.append(this.alias);
/* 337 */     sb.append(""\"" "");
/*     */     
/* 339 */     if (null != this.dname) {
/* 340 */       sb.append(""-dname \"""");
/* 341 */       sb.append(this.dname);
/* 342 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 345 */     if (null != this.expandedDname) {
/* 346 */       sb.append(""-dname \"""");
/* 347 */       sb.append(this.expandedDname);
/* 348 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 351 */     if (null != this.keystore) {
/* 352 */       sb.append(""-keystore \"""");
/* 353 */       sb.append(this.keystore);
/* 354 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 357 */     if (null != this.storepass) {
/* 358 */       sb.append(""-storepass \"""");
/* 359 */       sb.append(this.storepass);
/* 360 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 363 */     if (null != this.storetype) {
/* 364 */       sb.append(""-storetype \"""");
/* 365 */       sb.append(this.storetype);
/* 366 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 369 */     sb.append(""-keypass \"""");
/* 370 */     if (null != this.keypass) {
/* 371 */       sb.append(this.keypass);
/*     */     } else {
/* 373 */       sb.append(this.storepass);
/*     */     } 
/* 375 */     sb.append(""\"" "");
/*     */     
/* 377 */     if (null != this.sigalg) {
/* 378 */       sb.append(""-sigalg \"""");
/* 379 */       sb.append(this.sigalg);
/* 380 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 383 */     if (null != this.keyalg) {
/* 384 */       sb.append(""-keyalg \"""");
/* 385 */       sb.append(this.keyalg);
/* 386 */       sb.append(""\"" "");
/*     */     } 
/*     */ 
/*     */     
/* 390 */     if (0 < this.keysize) {
/* 391 */       sb.append(""-keysize \"""");
/* 392 */       sb.append(this.keysize);
/* 393 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 396 */     if (0 < this.validity) {
/* 397 */       sb.append(""-validity \"""");
/* 398 */       sb.append(this.validity);
/* 399 */       sb.append(""\"" "");
/*     */     } 
/*     */     
/* 402 */     log(""Generating Key for "" + this.alias);
/* 403 */     ExecTask cmd = (ExecTask)this.project.createTask(""exec"");
/* 404 */     cmd.setExecutable(""keytool"");
/* 405 */     Commandline.Argument arg = cmd.createArg();
/* 406 */     arg.setLine(sb.toString());
/* 407 */     cmd.setFailonerror(true);
/* 408 */     cmd.setTaskName(getTaskName());
/* 409 */     cmd.execute();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\GenerateKey.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GUnzip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.zip.GZIPInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GUnzip
/*     */   extends Unpack
/*     */ {
/*     */   private static final String DEFAULT_EXTENSION = "".gz"";
/*     */   
/*  82 */   protected String getDefaultExtension() { return "".gz""; }
/*     */ 
/*     */   
/*     */   protected void extract() {
/*  86 */     if (this.source.lastModified() > this.dest.lastModified()) {
/*  87 */       log(""Expanding "" + this.source.getAbsolutePath() + "" to "" + this.dest.getAbsolutePath());
/*     */ 
/*     */       
/*  90 */       FileOutputStream out = null;
/*  91 */       GZIPInputStream zIn = null;
/*  92 */       FileInputStream fis = null;
/*     */       try {
/*  94 */         out = new FileOutputStream(this.dest);
/*  95 */         fis = new FileInputStream(this.source);
/*  96 */         zIn = new GZIPInputStream(fis);
/*  97 */         byte[] buffer = new byte[8192];
/*  98 */         int count = 0;
/*     */         do {
/* 100 */           out.write(buffer, 0, count);
/* 101 */           count = zIn.read(buffer, 0, buffer.length);
/* 102 */         } while (count != -1);
/*     */       } catch (IOException ioe) {
/* 104 */         String msg = ""Problem expanding gzip "" + ioe.getMessage();
/* 105 */         throw new BuildException(msg, ioe, this.location);
/*     */       } finally {
/* 107 */         if (fis != null) {
/*     */           try {
/* 109 */             fis.close();
/* 110 */           } catch (IOException ioex) {}
/*     */         }
/* 112 */         if (out != null) {
/*     */           try {
/* 114 */             out.close();
/* 115 */           } catch (IOException ioex) {}
/*     */         }
/* 117 */         if (zIn != null)
/*     */           try {
/* 119 */             zIn.close();
/* 120 */           } catch (IOException ioex) {} 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\GUnzip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.GZip,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.FileOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.util.zip.GZIPOutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class GZip
/*    */   extends Pack
/*    */ {
/*    */   protected void pack() {
/* 78 */     GZIPOutputStream zOut = null;
/*    */     try {
/* 80 */       zOut = new GZIPOutputStream(new FileOutputStream(this.zipFile));
/* 81 */       zipFile(this.source, zOut);
/*    */     } catch (IOException ioe) {
/* 83 */       String msg = ""Problem creating gzip "" + ioe.getMessage();
/* 84 */       throw new BuildException(msg, ioe, this.location);
/*    */     } finally {
/* 86 */       if (zOut != null)
/*    */         
/*    */         try {
/* 89 */           zOut.close();
/* 90 */         } catch (IOException e) {} 
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\GZip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Input,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.input.InputRequest;
/*     */ import org.apache.tools.ant.input.MultipleChoiceInputRequest;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Input
/*     */   extends Task
/*     */ {
/*  77 */   private String validargs = null;
/*  78 */   private String message = """";
/*  79 */   private String addproperty = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   public void setValidargs(String validargs) { this.validargs = validargs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void setAddproperty(String addproperty) { this.addproperty = addproperty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setMessage(String message) { this.message = message; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void addText(String msg) { this.message += getProject().replaceProperties(msg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 130 */     InputRequest request = null;
/* 131 */     if (this.validargs != null) {
/* 132 */       Vector accept = StringUtils.split(this.validargs, 44);
/* 133 */       MultipleChoiceInputRequest multipleChoiceInputRequest = new MultipleChoiceInputRequest(this.message, accept);
/*     */     } else {
/* 135 */       request = new InputRequest(this.message);
/*     */     } 
/*     */     
/* 138 */     getProject().getInputHandler().handleInput(request);
/*     */     
/* 140 */     if (this.addproperty != null)
/* 141 */       this.project.setNewProperty(this.addproperty, request.getInput()); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Input.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.Reader;
/*     */ import java.util.Enumeration;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jar
/*     */   extends Zip
/*     */ {
/*     */   private static final String INDEX_NAME = ""META-INF/INDEX.LIST"";
/*     */   private Manifest configuredManifest;
/*     */   private Manifest savedConfiguredManifest;
/*     */   private Manifest filesetManifest;
/*     */   private FilesetManifestConfig filesetManifestConfig;
/*     */   private boolean manifestOnFinalize = true;
/*     */   private boolean mergeManifestsMain = true;
/*     */   private Manifest manifest;
/*     */   private File manifestFile;
/*     */   private boolean index = false;
/*     */   
/*     */   public Jar() {
/* 134 */     this.archiveType = ""jar"";
/* 135 */     this.emptyBehavior = ""create"";
/* 136 */     setEncoding(""UTF8"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setWhenempty(Zip.WhenEmpty we) { log(""JARs are never empty, they contain at least a manifest file"", 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setJarfile(File jarFile) { setDestFile(jarFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setIndex(boolean flag) { this.index = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredManifest(Manifest newManifest) throws ManifestException {
/* 171 */     if (this.configuredManifest == null) {
/* 172 */       this.configuredManifest = newManifest;
/*     */     } else {
/* 174 */       this.configuredManifest.merge(newManifest);
/*     */     } 
/* 176 */     this.savedConfiguredManifest = this.configuredManifest;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setManifest(File manifestFile) {
/* 187 */     if (!manifestFile.exists()) {
/* 188 */       throw new BuildException(""Manifest file: "" + manifestFile + "" does not exist."", getLocation());
/*     */     }
/*     */ 
/*     */     
/* 192 */     this.manifestFile = manifestFile;
/*     */   }
/*     */ 
/*     */   
/*     */   private Manifest getManifest(File manifestFile) {
/* 197 */     Manifest newManifest = null;
/* 198 */     Reader r = null;
/*     */     try {
/* 200 */       r = new FileReader(manifestFile);
/* 201 */       newManifest = getManifest(r);
/*     */     } catch (IOException e) {
/* 203 */       throw new BuildException(""Unable to read manifest file: "" + manifestFile + "" ("" + e.getMessage() + "")"", e);
/*     */     }
/*     */     finally {
/*     */       
/* 207 */       if (r != null) {
/*     */         try {
/* 209 */           r.close();
/* 210 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 215 */     return newManifest;
/*     */   }
/*     */ 
/*     */   
/*     */   private Manifest getManifest(Reader r) {
/* 220 */     Manifest newManifest = null;
/*     */     try {
/* 222 */       newManifest = new Manifest(r);
/*     */     } catch (ManifestException e) {
/* 224 */       log(""Manifest is invalid: "" + e.getMessage(), 0);
/* 225 */       throw new BuildException(""Invalid Manifest: "" + this.manifestFile, e, getLocation());
/*     */     } catch (IOException e) {
/*     */       
/* 228 */       throw new BuildException(""Unable to read manifest file ("" + e.getMessage() + "")"", e);
/*     */     } 
/*     */     
/* 231 */     return newManifest;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMetainf(ZipFileSet fs) {
/* 261 */     fs.setPrefix(""META-INF/"");
/* 262 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 267 */     if (this.filesetManifestConfig == null || this.filesetManifestConfig.getValue().equals(""skip"")) {
/*     */       
/* 269 */       this.manifestOnFinalize = false;
/* 270 */       Manifest jarManifest = createManifest();
/* 271 */       writeManifest(zOut, jarManifest);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private Manifest createManifest() throws IOException, BuildException {
/*     */     try {
/* 278 */       Manifest finalManifest = Manifest.getDefaultManifest();
/*     */       
/* 280 */       if (this.manifest == null) {
/* 281 */         if (this.manifestFile != null) {
/*     */ 
/*     */           
/* 284 */           this.manifest = getManifest(this.manifestFile);
/* 285 */           finalManifest.merge(this.filesetManifest);
/* 286 */           finalManifest.merge(this.configuredManifest);
/* 287 */           finalManifest.merge(this.manifest, !this.mergeManifestsMain);
/* 288 */         } else if (this.configuredManifest != null) {
/*     */           
/* 290 */           finalManifest.merge(this.filesetManifest);
/* 291 */           finalManifest.merge(this.configuredManifest, !this.mergeManifestsMain);
/*     */         }
/* 293 */         else if (this.filesetManifest != null) {
/*     */           
/* 295 */           finalManifest.merge(this.filesetManifest, !this.mergeManifestsMain);
/*     */         } 
/*     */       } else {
/*     */         
/* 299 */         finalManifest.merge(this.filesetManifest);
/* 300 */         finalManifest.merge(this.configuredManifest);
/* 301 */         finalManifest.merge(this.manifest, !this.mergeManifestsMain);
/*     */       } 
/*     */       
/* 304 */       return finalManifest;
/*     */     } catch (ManifestException e) {
/*     */       
/* 307 */       log(""Manifest is invalid: "" + e.getMessage(), 0);
/* 308 */       throw new BuildException(""Invalid Manifest"", e, getLocation());
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private void writeManifest(ZipOutputStream zOut, Manifest manifest) throws IOException {
/* 314 */     Enumeration e = manifest.getWarnings();
/* 315 */     while (e.hasMoreElements()) {
/* 316 */       log(""Manifest warning: "" + (String)e.nextElement(), 1);
/*     */     }
/*     */ 
/*     */     
/* 320 */     zipDir(null, zOut, ""META-INF/"");
/*     */     
/* 322 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/* 323 */     PrintWriter writer = new PrintWriter(baos);
/* 324 */     manifest.write(writer);
/* 325 */     writer.flush();
/*     */     
/* 327 */     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
/*     */     
/* 329 */     super.zipFile(bais, zOut, ""META-INF/MANIFEST.MF"", System.currentTimeMillis(), null);
/*     */     
/* 331 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void finalizeZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 336 */     if (this.manifestOnFinalize) {
/* 337 */       Manifest jarManifest = createManifest();
/* 338 */       writeManifest(zOut, jarManifest);
/*     */     } 
/*     */     
/* 341 */     if (this.index) {
/* 342 */       createIndexList(zOut);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void createIndexList(ZipOutputStream zOut) throws IOException {
/* 357 */     ByteArrayOutputStream baos = new ByteArrayOutputStream();
/*     */     
/* 359 */     PrintWriter writer = new PrintWriter(new OutputStreamWriter(baos, ""UTF8""));
/*     */ 
/*     */ 
/*     */     
/* 363 */     writer.println(""JarIndex-Version: 1.0"");
/* 364 */     writer.println();
/*     */ 
/*     */     
/* 367 */     writer.println(this.zipFile.getName());
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 372 */     Enumeration enum = this.addedDirs.keys();
/* 373 */     while (enum.hasMoreElements()) {
/* 374 */       String dir = enum.nextElement();
/*     */ 
/*     */ 
/*     */       
/* 378 */       dir = dir.replace('\\', '/');
/* 379 */       int pos = dir.lastIndexOf('/');
/* 380 */       if (pos != -1) {
/* 381 */         dir = dir.substring(0, pos);
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 387 */       if (dir.startsWith(""META-INF"")) {
/*     */         continue;
/*     */       }
/*     */       
/* 391 */       writer.println(dir);
/*     */     } 
/*     */     
/* 394 */     writer.flush();
/* 395 */     ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
/*     */     
/* 397 */     super.zipFile(bais, zOut, ""META-INF/INDEX.LIST"", System.currentTimeMillis(), null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath) throws IOException {
/* 405 */     if (""META-INF/MANIFEST.MF"".equalsIgnoreCase(vPath)) {
/* 406 */       filesetManifest(file, null);
/*     */     } else {
/* 408 */       super.zipFile(file, zOut, vPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(InputStream is, ZipOutputStream zOut, String vPath, long lastModified, File file) throws IOException {
/* 418 */     if (""META-INF/MANIFEST.MF"".equalsIgnoreCase(vPath)) {
/* 419 */       filesetManifest(file, is);
/*     */     } else {
/* 421 */       super.zipFile(is, zOut, vPath, lastModified, null);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void filesetManifest(File file, InputStream is) {
/* 426 */     if (this.manifestFile != null && this.manifestFile.equals(file)) {
/*     */ 
/*     */       
/* 429 */       log(""Found manifest "" + file, 3);
/* 430 */       if (is != null) {
/* 431 */         this.manifest = getManifest(new InputStreamReader(is));
/*     */       } else {
/* 433 */         this.manifest = getManifest(file);
/*     */       } 
/* 435 */     } else if (this.filesetManifestConfig != null && !this.filesetManifestConfig.getValue().equals(""skip"")) {
/*     */ 
/*     */       
/* 438 */       log(""Found manifest to merge in file "" + file, 3);
/*     */ 
/*     */       
/*     */       try {
/* 442 */         Manifest newManifest = null;
/* 443 */         if (is != null) {
/* 444 */           newManifest = getManifest(new InputStreamReader(is));
/*     */         } else {
/* 446 */           newManifest = getManifest(file);
/*     */         } 
/*     */         
/* 449 */         if (this.filesetManifest == null) {
/* 450 */           this.filesetManifest = newManifest;
/*     */         } else {
/* 452 */           this.filesetManifest.merge(newManifest);
/*     */         } 
/*     */       } catch (ManifestException e) {
/* 455 */         log(""Manifest in file "" + file + "" is invalid: "" + e.getMessage(), 0);
/*     */         
/* 457 */         throw new BuildException(""Invalid Manifest"", e, getLocation());
/*     */       }
/*     */     
/*     */     }
/*     */     else {
/*     */       
/* 463 */       int logLevel = (this.filesetManifestConfig == null) ? 1 : 3;
/*     */       
/* 465 */       log(""File "" + file + "" includes a META-INF/MANIFEST.MF which will be ignored. "" + ""To include this file, set filesetManifest to a value other "" + ""than 'skip'."", logLevel);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException {
/* 483 */     if (this.configuredManifest != null || this.manifestFile == null) {
/* 484 */       ZipFile theZipFile = null;
/*     */       try {
/* 486 */         theZipFile = new ZipFile(zipFile);
/* 487 */         ZipEntry entry = theZipFile.getEntry(""META-INF/MANIFEST.MF"");
/*     */         
/* 489 */         if (entry == null) {
/* 490 */           log(""Updating jar since the current jar has no manifest"", 3);
/*     */           
/* 492 */           return false;
/*     */         } 
/* 494 */         Manifest currentManifest = new Manifest(new InputStreamReader(theZipFile.getInputStream(entry)));
/*     */ 
/*     */         
/* 497 */         Manifest newManifest = createManifest();
/* 498 */         if (!currentManifest.equals(newManifest)) {
/* 499 */           log(""Updating jar since jar manifest has changed"", 3);
/*     */           
/* 501 */           return false;
/*     */         } 
/*     */       } catch (Exception e) {
/*     */         
/* 505 */         log(""Updating jar since cannot read current jar manifest: "" + e.getClass().getName() + "" - "" + e.getMessage(), 3);
/*     */ 
/*     */         
/* 508 */         return false;
/*     */       } finally {
/* 510 */         if (theZipFile != null) {
/*     */           try {
/* 512 */             theZipFile.close();
/* 513 */           } catch (IOException e) {}
/*     */         }
/*     */       }
/*     */     
/*     */     }
/* 518 */     else if (this.manifestFile.lastModified() > zipFile.lastModified()) {
/* 519 */       return false;
/*     */     } 
/* 521 */     return super.isUpToDate(scanners, zipFile);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 526 */   protected boolean createEmptyZip(File zipFile) { return true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 536 */     super.cleanUp();
/*     */     
/* 538 */     this.manifest = null;
/* 539 */     this.configuredManifest = this.savedConfiguredManifest;
/* 540 */     this.filesetManifest = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {
/* 551 */     super.reset();
/* 552 */     this.configuredManifest = null;
/* 553 */     this.filesetManifestConfig = null;
/* 554 */     this.mergeManifestsMain = false;
/* 555 */     this.manifestFile = null;
/* 556 */     this.index = false;
/*     */   }
/*     */   
/*     */   public static class FilesetManifestConfig
/*     */     extends EnumeratedAttribute {
/* 561 */     public String[] getValues() { return new String[] { ""skip"", ""merge"", ""mergewithoutmain"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Jar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Java,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ExitException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.CommandlineJava;
/*     */ import org.apache.tools.ant.types.Environment;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Java
/*     */   extends Task
/*     */ {
/*  89 */   private CommandlineJava cmdl = new CommandlineJava();
/*  90 */   private Environment env = new Environment();
/*     */   private boolean fork = false;
/*     */   private boolean newEnvironment = false;
/*  93 */   private File dir = null;
/*     */   private File out;
/*  95 */   private PrintStream outStream = null;
/*     */   private boolean failOnError = false;
/*     */   private boolean append = false;
/*  98 */   private Long timeout = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 104 */     File savedDir = this.dir;
/*     */     
/* 106 */     int err = -1;
/*     */     try {
/* 108 */       if ((err = executeJava()) != 0) {
/* 109 */         if (this.failOnError) {
/* 110 */           throw new BuildException(""Java returned: "" + err, this.location);
/*     */         }
/* 112 */         log(""Java Result: "" + err, 0);
/*     */       } 
/*     */     } finally {
/*     */       
/* 116 */       this.dir = savedDir;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int executeJava() throws BuildException {
/* 127 */     String classname = this.cmdl.getClassname();
/* 128 */     if (classname == null && this.cmdl.getJar() == null) {
/* 129 */       throw new BuildException(""Classname must not be null."");
/*     */     }
/*     */     
/* 132 */     if (!this.fork && this.cmdl.getJar() != null) {
/* 133 */       throw new BuildException(""Cannot execute a jar in non-forked mode. Please set fork='true'. "");
/*     */     }
/*     */ 
/*     */     
/* 137 */     if (this.fork) {
/* 138 */       log(this.cmdl.describeCommand(), 3);
/*     */     } else {
/* 140 */       if (this.cmdl.getVmCommand().size() > 1) {
/* 141 */         log(""JVM args ignored when same JVM is used."", 1);
/*     */       }
/*     */       
/* 144 */       if (this.dir != null) {
/* 145 */         log(""Working directory ignored when same JVM is used."", 1);
/*     */       }
/*     */ 
/*     */       
/* 149 */       if (this.newEnvironment || null != this.env.getVariables()) {
/* 150 */         log(""Changes to environment variables are ignored when same JVM is used."", 1);
/*     */       }
/*     */ 
/*     */       
/* 154 */       log(""Running in same VM "" + this.cmdl.describeJavaCommand(), 3);
/*     */     } 
/*     */ 
/*     */     
/*     */     try {
/* 159 */       if (this.fork) {
/* 160 */         return run(this.cmdl.getCommandline());
/*     */       }
/*     */       try {
/* 163 */         run(this.cmdl);
/* 164 */         return 0;
/*     */       } catch (ExitException ex) {
/* 166 */         return ex.getStatus();
/*     */       } 
/*     */     } catch (BuildException e) {
/*     */       
/* 170 */       if (this.failOnError) {
/* 171 */         throw e;
/*     */       }
/* 173 */       log(e.getMessage(), 0);
/* 174 */       return 0;
/*     */     } catch (Throwable t) {
/*     */       
/* 177 */       if (this.failOnError) {
/* 178 */         throw new BuildException(t);
/*     */       }
/* 180 */       log(t.getMessage(), 0);
/* 181 */       return 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setClasspath(Path s) { createClasspath().append(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public Path createClasspath() { return this.cmdl.createClasspath(this.project).createPath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 206 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(File jarfile) throws BuildException {
/* 213 */     if (this.cmdl.getClassname() != null) {
/* 214 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command."");
/*     */     }
/*     */     
/* 217 */     this.cmdl.setJar(jarfile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String s) throws BuildException {
/* 224 */     if (this.cmdl.getJar() != null) {
/* 225 */       throw new BuildException(""Cannot use 'jar' and 'classname' attributes in same command"");
/*     */     }
/*     */     
/* 228 */     this.cmdl.setClassname(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setArgs(String s) {
/* 237 */     log(""The args attribute is deprecated. Please use nested arg elements."", 1);
/*     */ 
/*     */     
/* 240 */     this.cmdl.createArgument().setLine(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public Commandline.Argument createArg() { return this.cmdl.createArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 254 */   public void setFork(boolean s) { this.fork = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJvmargs(String s) {
/* 261 */     log(""The jvmargs attribute is deprecated. Please use nested jvmarg elements."", 1);
/*     */ 
/*     */     
/* 264 */     this.cmdl.createVmArgument().setLine(s);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public Commandline.Argument createJvmarg() { return this.cmdl.createVmArgument(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void setJvm(String s) { this.cmdl.setVm(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 285 */   public void addSysproperty(Environment.Variable sysp) { this.cmdl.addSysproperty(sysp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public void setDir(File d) { this.dir = d; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 307 */   public void setOutput(File out) { this.out = out; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 314 */   public void setMaxmemory(String max) { this.cmdl.setMaxmemory(max); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 322 */   public void setJVMVersion(String value) { this.cmdl.setVmversion(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 333 */   public void addEnv(Environment.Variable var) { this.env.addVariable(var); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   public void setNewenvironment(boolean newenv) { this.newEnvironment = newenv; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 353 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 362 */   public void setTimeout(Long value) { this.timeout = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleOutput(String line) {
/* 371 */     if (this.outStream != null) {
/* 372 */       this.outStream.println(line);
/*     */     } else {
/* 374 */       super.handleOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void handleErrorOutput(String line) {
/* 384 */     if (this.outStream != null) {
/* 385 */       this.outStream.println(line);
/*     */     } else {
/* 387 */       super.handleErrorOutput(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void run(CommandlineJava command) throws BuildException {
/* 396 */     ExecuteJava exe = new ExecuteJava();
/* 397 */     exe.setJavaCommand(command.getJavaCommand());
/* 398 */     exe.setClasspath(command.getClasspath());
/* 399 */     exe.setSystemProperties(command.getSystemProperties());
/* 400 */     exe.setTimeout(this.timeout);
/* 401 */     if (this.out != null) {
/*     */       try {
/* 403 */         this.outStream = new PrintStream(new FileOutputStream(this.out.getAbsolutePath(), this.append));
/*     */ 
/*     */         
/* 406 */         exe.execute(this.project);
/*     */       } catch (IOException io) {
/* 408 */         throw new BuildException(io, this.location);
/*     */       } finally {
/* 410 */         if (this.outStream != null) {
/* 411 */           this.outStream.close();
/*     */         }
/*     */       } 
/*     */     } else {
/* 415 */       exe.execute(this.project);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int run(String[] command) throws BuildException {
/* 423 */     FileOutputStream fos = null;
/*     */     try {
/* 425 */       Execute exe = null;
/* 426 */       if (this.out == null) {
/* 427 */         exe = new Execute(new LogStreamHandler(this, 2, 1), createWatchdog());
/*     */       }
/*     */       else {
/*     */         
/* 431 */         fos = new FileOutputStream(this.out.getAbsolutePath(), this.append);
/* 432 */         exe = new Execute(new PumpStreamHandler(fos), createWatchdog());
/*     */       } 
/*     */ 
/*     */       
/* 436 */       exe.setAntRun(this.project);
/*     */       
/* 438 */       if (this.dir == null) {
/* 439 */         this.dir = this.project.getBaseDir();
/* 440 */       } else if (!this.dir.exists() || !this.dir.isDirectory()) {
/* 441 */         throw new BuildException(this.dir.getAbsolutePath() + "" is not a valid directory"", this.location);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 446 */       exe.setWorkingDirectory(this.dir);
/*     */       
/* 448 */       String[] environment = this.env.getVariables();
/* 449 */       if (environment != null) {
/* 450 */         for (int i = 0; i < environment.length; i++) {
/* 451 */           log(""Setting environment variable: "" + environment[i], 3);
/*     */         }
/*     */       }
/*     */       
/* 455 */       exe.setNewenvironment(this.newEnvironment);
/* 456 */       exe.setEnvironment(environment);
/*     */       
/* 458 */       exe.setCommandline(command);
/*     */       try {
/* 460 */         int rc = exe.execute();
/* 461 */         if (exe.killedProcess()) {
/* 462 */           log(""Timeout: killed the sub-process"", 1);
/*     */         }
/* 464 */         return rc;
/*     */       } catch (IOException e) {
/* 466 */         throw new BuildException(e, this.location);
/*     */       } 
/*     */     } catch (IOException io) {
/* 469 */       throw new BuildException(io, this.location);
/*     */     } finally {
/* 471 */       if (fos != null) {
/* 472 */         try { fos.close(); } catch (IOException io) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void run(String classname, Vector args) throws BuildException {
/* 482 */     CommandlineJava cmdj = new CommandlineJava();
/* 483 */     cmdj.setClassname(classname);
/* 484 */     for (int i = 0; i < args.size(); i++) {
/* 485 */       cmdj.createArgument().setValue(args.elementAt(i));
/*     */     }
/* 487 */     run(cmdj);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 494 */   public void clearArgs() { this.cmdl.clearJavaArgs(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected ExecuteWatchdog createWatchdog() throws BuildException {
/* 503 */     if (this.timeout == null) {
/* 504 */       return null;
/*     */     }
/* 506 */     return new ExecuteWatchdog(this.timeout.longValue());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Java.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javac,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapter;
/*     */ import org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.GlobPatternMapper;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.ant.util.facade.FacadeTaskHelper;
/*     */ import org.apache.tools.ant.util.facade.ImplementationSpecificArgument;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Compile failed; see the compiler error output for details."";
/*     */   private Path src;
/*     */   private File destDir;
/*     */   private Path compileClasspath;
/*     */   private Path compileSourcepath;
/*     */   private String encoding;
/*     */   private boolean debug = false;
/*     */   private boolean optimize = false;
/*     */   private boolean deprecation = false;
/*     */   private boolean depend = false;
/*     */   private boolean verbose = false;
/*     */   private String target;
/*     */   private Path bootclasspath;
/*     */   private Path extdirs;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/*     */   private boolean fork = false;
/* 133 */   private String forkedExecutable = null;
/*     */   private boolean nowarn = false;
/*     */   private String memoryInitialSize;
/*     */   private String memoryMaximumSize;
/* 137 */   private FacadeTaskHelper facade = null;
/*     */   
/*     */   protected boolean failOnError = true;
/*     */   protected boolean listFiles = false;
/* 141 */   protected File[] compileList = new File[0];
/*     */ 
/*     */   
/*     */   private String source;
/*     */   
/*     */   private String debugLevel;
/*     */ 
/*     */   
/*     */   public Javac() {
/* 150 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 151 */       this.facade = new FacadeTaskHelper(""javac1.1"");
/* 152 */     } else if (JavaEnvUtils.isJavaVersion(""1.2"")) {
/* 153 */       this.facade = new FacadeTaskHelper(""javac1.2"");
/* 154 */     } else if (JavaEnvUtils.isJavaVersion(""1.3"")) {
/* 155 */       this.facade = new FacadeTaskHelper(""javac1.3"");
/* 156 */     } else if (JavaEnvUtils.isJavaVersion(""1.4"")) {
/* 157 */       this.facade = new FacadeTaskHelper(""javac1.4"");
/*     */     } else {
/* 159 */       this.facade = new FacadeTaskHelper(""classic"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public String getDebugLevel() { return this.debugLevel; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setDebugLevel(String v) { this.debugLevel = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public String getSource() { return this.source; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setSource(String v) { this.source = v; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createSrc() {
/* 216 */     if (this.src == null) {
/* 217 */       this.src = new Path(this.project);
/*     */     }
/* 219 */     return this.src.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path recreateSrc() {
/* 228 */     this.src = null;
/* 229 */     return createSrc();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrcdir(Path srcDir) {
/* 236 */     if (this.src == null) {
/* 237 */       this.src = srcDir;
/*     */     } else {
/* 239 */       this.src.append(srcDir);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 245 */   public Path getSrcdir() { return this.src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 253 */   public void setDestdir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 261 */   public File getDestdir() { return this.destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSourcepath(Path sourcepath) {
/* 268 */     if (this.compileSourcepath == null) {
/* 269 */       this.compileSourcepath = sourcepath;
/*     */     } else {
/* 271 */       this.compileSourcepath.append(sourcepath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 277 */   public Path getSourcepath() { return this.compileSourcepath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createSourcepath() {
/* 284 */     if (this.compileSourcepath == null) {
/* 285 */       this.compileSourcepath = new Path(this.project);
/*     */     }
/* 287 */     return this.compileSourcepath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public void setSourcepathRef(Reference r) { createSourcepath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 303 */     if (this.compileClasspath == null) {
/* 304 */       this.compileClasspath = classpath;
/*     */     } else {
/* 306 */       this.compileClasspath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 312 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 319 */     if (this.compileClasspath == null) {
/* 320 */       this.compileClasspath = new Path(this.project);
/*     */     }
/* 322 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 329 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBootclasspath(Path bootclasspath) {
/* 337 */     if (this.bootclasspath == null) {
/* 338 */       this.bootclasspath = bootclasspath;
/*     */     } else {
/* 340 */       this.bootclasspath.append(bootclasspath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 349 */   public Path getBootclasspath() { return this.bootclasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createBootclasspath() {
/* 356 */     if (this.bootclasspath == null) {
/* 357 */       this.bootclasspath = new Path(this.project);
/*     */     }
/* 359 */     return this.bootclasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 366 */   public void setBootClasspathRef(Reference r) { createBootclasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path extdirs) {
/* 374 */     if (this.extdirs == null) {
/* 375 */       this.extdirs = extdirs;
/*     */     } else {
/* 377 */       this.extdirs.append(extdirs);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 386 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 393 */     if (this.extdirs == null) {
/* 394 */       this.extdirs = new Path(this.project);
/*     */     }
/* 396 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 403 */   public void setListfiles(boolean list) { this.listFiles = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 408 */   public boolean getListfiles() { return this.listFiles; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 416 */   public void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 423 */   public void setProceed(boolean proceed) { this.failOnError = !proceed; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 430 */   public boolean getFailonerror() { return this.failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 438 */   public void setDeprecation(boolean deprecation) { this.deprecation = deprecation; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 443 */   public boolean getDeprecation() { return this.deprecation; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 453 */   public void setMemoryInitialSize(String memoryInitialSize) { this.memoryInitialSize = memoryInitialSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 458 */   public String getMemoryInitialSize() { return this.memoryInitialSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 468 */   public void setMemoryMaximumSize(String memoryMaximumSize) { this.memoryMaximumSize = memoryMaximumSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 473 */   public String getMemoryMaximumSize() { return this.memoryMaximumSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 480 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 485 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 493 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 498 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 505 */   public void setOptimize(boolean optimize) { this.optimize = optimize; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 510 */   public boolean getOptimize() { return this.optimize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 518 */   public void setDepend(boolean depend) { this.depend = depend; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 523 */   public boolean getDepend() { return this.depend; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 530 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 535 */   public boolean getVerbose() { return this.verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 543 */   public void setTarget(String target) { this.target = target; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 548 */   public String getTarget() { return this.target; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 555 */   public void setIncludeantruntime(boolean include) { this.includeAntRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 562 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 569 */   public void setIncludejavaruntime(boolean include) { this.includeJavaRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 586 */   public void setFork(boolean f) { this.fork = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 596 */   public void setExecutable(String forkExec) { this.forkedExecutable = forkExec; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 603 */   public boolean isForkedJavac() { return (this.fork || ""extJavac"".equals(getCompiler())); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getJavacExecutable() {
/* 610 */     if (this.forkedExecutable == null && isForkedJavac()) {
/* 611 */       this.forkedExecutable = getSystemJavac();
/* 612 */     } else if (this.forkedExecutable != null && !isForkedJavac()) {
/* 613 */       this.forkedExecutable = null;
/*     */     } 
/* 615 */     return this.forkedExecutable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 622 */   public void setNowarn(boolean flag) { this.nowarn = flag; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 629 */   public boolean getNowarn() { return this.nowarn; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ImplementationSpecificArgument createCompilerArg() {
/* 636 */     ImplementationSpecificArgument arg = new ImplementationSpecificArgument(this);
/*     */     
/* 638 */     this.facade.addImplementationArgument(arg);
/* 639 */     return arg;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCurrentCompilerArgs() {
/* 647 */     String chosen = this.facade.getExplicitChoice();
/*     */     
/* 649 */     this.facade.setImplementation(getCompiler());
/*     */     try {
/* 651 */       return this.facade.getArgs();
/*     */     } finally {
/* 653 */       this.facade.setImplementation(chosen);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 662 */     checkParameters();
/* 663 */     resetFileLists();
/*     */ 
/*     */ 
/*     */     
/* 667 */     String[] list = this.src.list();
/* 668 */     for (int i = 0; i < list.length; i++) {
/* 669 */       File srcDir = this.project.resolveFile(list[i]);
/* 670 */       if (!srcDir.exists()) {
/* 671 */         throw new BuildException(""srcdir \"""" + srcDir.getPath() + ""\"" does not exist!"", this.location);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 676 */       DirectoryScanner ds = getDirectoryScanner(srcDir);
/* 677 */       String[] files = ds.getIncludedFiles();
/*     */       
/* 679 */       scanDir(srcDir, (this.destDir != null) ? this.destDir : srcDir, files);
/*     */     } 
/*     */     
/* 682 */     compile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 689 */   protected void resetFileLists() { this.compileList = new File[0]; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File srcDir, File destDir, String[] files) {
/* 697 */     GlobPatternMapper m = new GlobPatternMapper();
/* 698 */     m.setFrom(""*.java"");
/* 699 */     m.setTo(""*.class"");
/* 700 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 701 */     File[] newFiles = sfs.restrictAsFiles(files, srcDir, destDir, (FileNameMapper)m);
/*     */     
/* 703 */     if (newFiles.length > 0) {
/* 704 */       File[] newCompileList = new File[this.compileList.length + newFiles.length];
/*     */       
/* 706 */       System.arraycopy(this.compileList, 0, newCompileList, 0, this.compileList.length);
/*     */       
/* 708 */       System.arraycopy(newFiles, 0, newCompileList, this.compileList.length, newFiles.length);
/*     */       
/* 710 */       this.compileList = newCompileList;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 716 */   public File[] getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */   
/* 720 */   protected boolean isJdkCompiler(String compilerImpl) { return (""modern"".equals(compilerImpl) || ""classic"".equals(compilerImpl) || ""javac1.1"".equals(compilerImpl) || ""javac1.2"".equals(compilerImpl) || ""javac1.3"".equals(compilerImpl) || ""javac1.4"".equals(compilerImpl)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 729 */   protected String getSystemJavac() { return JavaEnvUtils.getJdkExecutable(""javac""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 738 */   public void setCompiler(String compiler) { this.facade.setImplementation(compiler); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompiler() {
/* 756 */     String compilerImpl = getCompilerVersion();
/* 757 */     if (this.fork) {
/* 758 */       if (isJdkCompiler(compilerImpl)) {
/* 759 */         log(""Since fork is true, ignoring compiler setting."", 1);
/*     */         
/* 761 */         compilerImpl = ""extJavac"";
/*     */       } else {
/* 763 */         log(""Since compiler setting isn't classic or modern,ignoring fork setting."", 1);
/*     */       } 
/*     */     }
/*     */     
/* 767 */     return compilerImpl;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompilerVersion() {
/* 784 */     this.facade.setMagicValue(getProject().getProperty(""build.compiler""));
/* 785 */     return this.facade.getImplementation();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void checkParameters() throws BuildException {
/* 795 */     if (this.src == null) {
/* 796 */       throw new BuildException(""srcdir attribute must be set!"", this.location);
/*     */     }
/*     */     
/* 799 */     if (this.src.size() == 0) {
/* 800 */       throw new BuildException(""srcdir attribute must be set!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 804 */     if (this.destDir != null && !this.destDir.isDirectory()) {
/* 805 */       throw new BuildException(""destination directory \"""" + this.destDir + ""\"" does not exist "" + ""or is not a directory"", this.location);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void compile() {
/* 818 */     String compilerImpl = getCompiler();
/*     */     
/* 820 */     if (this.compileList.length > 0) {
/* 821 */       log(""Compiling "" + this.compileList.length + "" source file"" + ((this.compileList.length == 1) ? """" : ""s"") + ((this.destDir != null) ? ("" to "" + this.destDir) : """"));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 826 */       if (this.listFiles) {
/* 827 */         for (int i = 0; i < this.compileList.length; i++) {
/* 828 */           String filename = this.compileList[i].getAbsolutePath();
/* 829 */           log(filename);
/*     */         } 
/*     */       }
/*     */       
/* 833 */       CompilerAdapter adapter = CompilerAdapterFactory.getCompiler(compilerImpl, this);
/*     */ 
/*     */ 
/*     */       
/* 837 */       adapter.setJavac(this);
/*     */ 
/*     */       
/* 840 */       if (!adapter.execute()) {
/* 841 */         if (this.failOnError) {
/* 842 */           throw new BuildException(""Compile failed; see the compiler error output for details."", this.location);
/*     */         }
/* 844 */         log(""Compile failed; see the compiler error output for details."", 0);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public class ImplementationSpecificArgument
/*     */     extends ImplementationSpecificArgument
/*     */   {
/*     */     private final Javac this$0;
/*     */     
/* 855 */     public ImplementationSpecificArgument(Javac this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/* 859 */     public void setCompiler(String impl) { setImplementation(impl); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Javac.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Javadoc,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.File;
/*      */ import java.io.FileWriter;
/*      */ import java.io.FilenameFilter;
/*      */ import java.io.IOException;
/*      */ import java.io.PrintWriter;
/*      */ import java.net.MalformedURLException;
/*      */ import java.net.URL;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Locale;
/*      */ import java.util.StringTokenizer;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.DirectoryScanner;
/*      */ import org.apache.tools.ant.ProjectComponent;
/*      */ import org.apache.tools.ant.Task;
/*      */ import org.apache.tools.ant.types.Commandline;
/*      */ import org.apache.tools.ant.types.DirSet;
/*      */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*      */ import org.apache.tools.ant.types.FileSet;
/*      */ import org.apache.tools.ant.types.Path;
/*      */ import org.apache.tools.ant.types.PatternSet;
/*      */ import org.apache.tools.ant.types.Reference;
/*      */ import org.apache.tools.ant.util.FileUtils;
/*      */ import org.apache.tools.ant.util.JavaEnvUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Javadoc
/*      */   extends Task
/*      */ {
/*      */   public class DocletParam
/*      */   {
/*      */     private String name;
/*      */     private String value;
/*      */     private final Javadoc this$0;
/*      */     
/*  118 */     public DocletParam(Javadoc this$0) { this.this$0 = this$0; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  131 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  140 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  152 */     public void setValue(String value) { this.value = value; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  161 */     public String getValue() { return this.value; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class ExtensionInfo
/*      */     extends ProjectComponent
/*      */   {
/*      */     private String name;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private Path path;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  184 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  193 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setPath(Path path) {
/*  202 */       if (this.path == null) {
/*  203 */         this.path = path;
/*      */       } else {
/*  205 */         this.path.append(path);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  216 */     public Path getPath() { return this.path; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Path createPath() {
/*  226 */       if (this.path == null) {
/*  227 */         this.path = new Path(getProject());
/*      */       }
/*  229 */       return this.path.createPath();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  238 */     public void setPathRef(Reference r) { createPath().setRefid(r); }
/*      */   }
/*      */   
/*      */   public class DocletInfo
/*      */     extends ExtensionInfo {
/*      */     private Vector params;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public DocletInfo(Javadoc this$0) {
/*  247 */       this.this$0 = this$0;
/*      */ 
/*      */       
/*  250 */       this.params = new Vector();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Javadoc.DocletParam createParam() {
/*  258 */       Javadoc.DocletParam param = new Javadoc.DocletParam(this.this$0);
/*  259 */       this.params.addElement(param);
/*      */       
/*  261 */       return param;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  270 */     public Enumeration getParams() { return this.params.elements(); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class PackageName
/*      */   {
/*      */     private String name;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  287 */     public void setName(String name) { this.name = name.trim(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  296 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  303 */     public String toString() { return getName(); }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public static class SourceFile
/*      */   {
/*      */     private File file;
/*      */ 
/*      */     
/*      */     public SourceFile() {}
/*      */ 
/*      */     
/*  316 */     public SourceFile(File file) { this.file = file; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  325 */     public void setFile(File file) { this.file = file; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  334 */     public File getFile() { return this.file; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class Html
/*      */   {
/*  346 */     private StringBuffer text = new StringBuffer();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  354 */     public void addText(String t) { this.text.append(t); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  363 */     public String getText() { return this.text.toString(); }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class AccessType
/*      */     extends EnumeratedAttribute
/*      */   {
/*  378 */     public String[] getValues() { return new String[] { ""protected"", ""public"", ""package"", ""private"" }; }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  383 */   private Commandline cmd = new Commandline();
/*      */ 
/*      */   
/*  386 */   private static boolean javadoc1 = JavaEnvUtils.isJavaVersion(""1.1"");
/*      */ 
/*      */ 
/*      */   
/*  390 */   private static boolean javadoc4 = (!JavaEnvUtils.isJavaVersion(""1.1"") && !JavaEnvUtils.isJavaVersion(""1.2"") && !JavaEnvUtils.isJavaVersion(""1.3""));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addArgIf(boolean b, String arg) {
/*  403 */     if (b) {
/*  404 */       this.cmd.createArgument().setValue(arg);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void add12ArgIfNotEmpty(String key, String value) {
/*  415 */     if (!javadoc1) {
/*  416 */       if (value != null && value.length() != 0) {
/*  417 */         this.cmd.createArgument().setValue(key);
/*  418 */         this.cmd.createArgument().setValue(value);
/*      */       } else {
/*  420 */         log(""Warning: Leaving out empty argument '"" + key + ""'"", 1);
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void add12ArgIf(boolean b, String arg) {
/*  434 */     if (!javadoc1 && b) {
/*  435 */       this.cmd.createArgument().setValue(arg);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean failOnError = false;
/*      */ 
/*      */   
/*  444 */   private Path sourcePath = null;
/*  445 */   private File destDir = null;
/*  446 */   private Vector sourceFiles = new Vector();
/*  447 */   private Vector packageNames = new Vector(5);
/*  448 */   private Vector excludePackageNames = new Vector(1);
/*      */   private boolean author = true;
/*      */   private boolean version = true;
/*  451 */   private DocletInfo doclet = null;
/*  452 */   private Path classpath = null;
/*  453 */   private Path bootclasspath = null;
/*  454 */   private String group = null;
/*  455 */   private String packageList = null;
/*  456 */   private Vector links = new Vector(2);
/*  457 */   private Vector groups = new Vector(2);
/*  458 */   private Vector tags = new Vector(5);
/*      */   private boolean useDefaultExcludes = true;
/*  460 */   private Html doctitle = null;
/*  461 */   private Html header = null;
/*  462 */   private Html footer = null;
/*  463 */   private Html bottom = null;
/*      */   private boolean useExternalFile = false;
/*  465 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*  466 */   private String source = null;
/*      */   
/*  468 */   private Vector fileSets = new Vector();
/*  469 */   private Vector packageSets = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setUseExternalFile(boolean b) {
/*  478 */     if (!javadoc1) {
/*  479 */       this.useExternalFile = b;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  491 */   public void setDefaultexcludes(boolean useDefaultExcludes) { this.useDefaultExcludes = useDefaultExcludes; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setMaxmemory(String max) {
/*  501 */     if (javadoc1) {
/*  502 */       this.cmd.createArgument().setValue(""-J-mx"" + max);
/*      */     } else {
/*  504 */       this.cmd.createArgument().setValue(""-J-Xmx"" + max);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  514 */   public void setAdditionalparam(String add) { this.cmd.createArgument().setLine(add); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSourcepath(Path src) {
/*  523 */     if (this.sourcePath == null) {
/*  524 */       this.sourcePath = src;
/*      */     } else {
/*  526 */       this.sourcePath.append(src);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createSourcepath() {
/*  537 */     if (this.sourcePath == null) {
/*  538 */       this.sourcePath = new Path(this.project);
/*      */     }
/*  540 */     return this.sourcePath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  549 */   public void setSourcepathRef(Reference r) { createSourcepath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDestdir(File dir) {
/*  558 */     this.destDir = dir;
/*  559 */     this.cmd.createArgument().setValue(""-d"");
/*  560 */     this.cmd.createArgument().setFile(this.destDir);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setSourcefiles(String src) {
/*  569 */     StringTokenizer tok = new StringTokenizer(src, "","");
/*  570 */     while (tok.hasMoreTokens()) {
/*  571 */       String f = tok.nextToken();
/*  572 */       SourceFile sf = new SourceFile();
/*  573 */       sf.setFile(this.project.resolveFile(f));
/*  574 */       addSource(sf);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  584 */   public void addSource(SourceFile sf) { this.sourceFiles.addElement(sf); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setPackagenames(String packages) {
/*  596 */     StringTokenizer tok = new StringTokenizer(packages, "","");
/*  597 */     while (tok.hasMoreTokens()) {
/*  598 */       String p = tok.nextToken();
/*  599 */       PackageName pn = new PackageName();
/*  600 */       pn.setName(p);
/*  601 */       addPackage(pn);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  614 */   public void addPackage(PackageName pn) { this.packageNames.addElement(pn); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExcludePackageNames(String packages) {
/*  624 */     StringTokenizer tok = new StringTokenizer(packages, "","");
/*  625 */     while (tok.hasMoreTokens()) {
/*  626 */       String p = tok.nextToken();
/*  627 */       PackageName pn = new PackageName();
/*  628 */       pn.setName(p);
/*  629 */       addExcludePackage(pn);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  639 */   public void addExcludePackage(PackageName pn) { this.excludePackageNames.addElement(pn); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setOverview(File f) {
/*  649 */     if (!javadoc1) {
/*  650 */       this.cmd.createArgument().setValue(""-overview"");
/*  651 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  662 */   public void setPublic(boolean b) { addArgIf(b, ""-public""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  672 */   public void setProtected(boolean b) { addArgIf(b, ""-protected""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  682 */   public void setPackage(boolean b) { addArgIf(b, ""-package""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  692 */   public void setPrivate(boolean b) { addArgIf(b, ""-private""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  703 */   public void setAccess(AccessType at) { this.cmd.createArgument().setValue(""-"" + at.getValue()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDoclet(String docletName) {
/*  713 */     if (this.doclet == null) {
/*  714 */       this.doclet = new DocletInfo(this);
/*  715 */       this.doclet.setProject(getProject());
/*      */     } 
/*  717 */     this.doclet.setName(docletName);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocletPath(Path docletPath) {
/*  726 */     if (this.doclet == null) {
/*  727 */       this.doclet = new DocletInfo(this);
/*  728 */       this.doclet.setProject(getProject());
/*      */     } 
/*  730 */     this.doclet.setPath(docletPath);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocletPathRef(Reference r) {
/*  740 */     if (this.doclet == null) {
/*  741 */       this.doclet = new DocletInfo(this);
/*  742 */       this.doclet.setProject(getProject());
/*      */     } 
/*  744 */     this.doclet.createPath().setRefid(r);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public DocletInfo createDoclet() {
/*  753 */     this.doclet = new DocletInfo(this);
/*  754 */     return this.doclet;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  763 */   public void addTaglet(ExtensionInfo tagletInfo) { this.tags.addElement(tagletInfo); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setOld(boolean b) {
/*  775 */     if (b) {
/*  776 */       if (javadoc1) {
/*  777 */         log(""Javadoc 1.1 doesn't support the -1.1 switch"", 1);
/*      */       }
/*  779 */       else if (javadoc4) {
/*  780 */         log(""Javadoc 1.4 doesn't support the -1.1 switch anymore"", 1);
/*      */       } else {
/*      */         
/*  783 */         this.cmd.createArgument().setValue(""-1.1"");
/*      */       } 
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setClasspath(Path path) {
/*  795 */     if (this.classpath == null) {
/*  796 */       this.classpath = path;
/*      */     } else {
/*  798 */       this.classpath.append(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createClasspath() {
/*  808 */     if (this.classpath == null) {
/*  809 */       this.classpath = new Path(this.project);
/*      */     }
/*  811 */     return this.classpath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  820 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBootclasspath(Path path) {
/*  829 */     if (this.bootclasspath == null) {
/*  830 */       this.bootclasspath = path;
/*      */     } else {
/*  832 */       this.bootclasspath.append(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Path createBootclasspath() {
/*  842 */     if (this.bootclasspath == null) {
/*  843 */       this.bootclasspath = new Path(this.project);
/*      */     }
/*  845 */     return this.bootclasspath.createPath();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  854 */   public void setBootClasspathRef(Reference r) { createBootclasspath().setRefid(r); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExtdirs(String path) {
/*  864 */     if (!javadoc1) {
/*  865 */       this.cmd.createArgument().setValue(""-extdirs"");
/*  866 */       this.cmd.createArgument().setValue(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setExtdirs(Path path) {
/*  876 */     if (!javadoc1) {
/*  877 */       this.cmd.createArgument().setValue(""-extdirs"");
/*  878 */       this.cmd.createArgument().setPath(path);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  888 */   public void setVerbose(boolean b) { add12ArgIf(b, ""-verbose""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLocale(String locale) {
/*  897 */     if (!javadoc1) {
/*      */ 
/*      */       
/*  900 */       this.cmd.createArgument(true).setValue(locale);
/*  901 */       this.cmd.createArgument(true).setValue(""-locale"");
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setEncoding(String enc) {
/*  911 */     this.cmd.createArgument().setValue(""-encoding"");
/*  912 */     this.cmd.createArgument().setValue(enc);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  921 */   public void setVersion(boolean b) { this.version = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  930 */   public void setUse(boolean b) { add12ArgIf(b, ""-use""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  940 */   public void setAuthor(boolean b) { this.author = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  949 */   public void setSplitindex(boolean b) { add12ArgIf(b, ""-splitindex""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  959 */   public void setWindowtitle(String title) { add12ArgIfNotEmpty(""-windowtitle"", title); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDoctitle(String doctitle) {
/*  968 */     Html h = new Html();
/*  969 */     h.addText(doctitle);
/*  970 */     addDoctitle(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addDoctitle(Html text) {
/*  979 */     if (!javadoc1) {
/*  980 */       this.doctitle = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setHeader(String header) {
/*  990 */     Html h = new Html();
/*  991 */     h.addText(header);
/*  992 */     addHeader(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addHeader(Html text) {
/* 1001 */     if (!javadoc1) {
/* 1002 */       this.header = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setFooter(String footer) {
/* 1012 */     Html h = new Html();
/* 1013 */     h.addText(footer);
/* 1014 */     addFooter(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addFooter(Html text) {
/* 1023 */     if (!javadoc1) {
/* 1024 */       this.footer = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setBottom(String bottom) {
/* 1034 */     Html h = new Html();
/* 1035 */     h.addText(bottom);
/* 1036 */     addBottom(h);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addBottom(Html text) {
/* 1045 */     if (!javadoc1) {
/* 1046 */       this.bottom = text;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLinkoffline(String src) {
/* 1055 */     if (!javadoc1) {
/* 1056 */       LinkArgument le = createLink();
/* 1057 */       le.setOffline(true);
/* 1058 */       String linkOfflineError = ""The linkoffline attribute must include a URL and a package-list file location separated by a space"";
/*      */ 
/*      */       
/* 1061 */       if (src.trim().length() == 0) {
/* 1062 */         throw new BuildException(linkOfflineError);
/*      */       }
/* 1064 */       StringTokenizer tok = new StringTokenizer(src, "" "", false);
/* 1065 */       le.setHref(tok.nextToken());
/*      */       
/* 1067 */       if (!tok.hasMoreTokens()) {
/* 1068 */         throw new BuildException(linkOfflineError);
/*      */       }
/* 1070 */       le.setPackagelistLoc(this.project.resolveFile(tok.nextToken()));
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1078 */   public void setGroup(String src) { this.group = src; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setLink(String src) {
/* 1085 */     if (!javadoc1) {
/* 1086 */       createLink().setHref(src);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1094 */   public void setNodeprecated(boolean b) { addArgIf(b, ""-nodeprecated""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1101 */   public void setNodeprecatedlist(boolean b) { add12ArgIf(b, ""-nodeprecatedlist""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1108 */   public void setNotree(boolean b) { addArgIf(b, ""-notree""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1115 */   public void setNoindex(boolean b) { addArgIf(b, ""-noindex""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1122 */   public void setNohelp(boolean b) { add12ArgIf(b, ""-nohelp""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1129 */   public void setNonavbar(boolean b) { add12ArgIf(b, ""-nonavbar""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1136 */   public void setSerialwarn(boolean b) { add12ArgIf(b, ""-serialwarn""); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setStylesheetfile(File f) {
/* 1143 */     if (!javadoc1) {
/* 1144 */       this.cmd.createArgument().setValue(""-stylesheetfile"");
/* 1145 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setHelpfile(File f) {
/* 1153 */     if (!javadoc1) {
/* 1154 */       this.cmd.createArgument().setValue(""-helpfile"");
/* 1155 */       this.cmd.createArgument().setFile(f);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setDocencoding(String enc) {
/* 1163 */     this.cmd.createArgument().setValue(""-docencoding"");
/* 1164 */     this.cmd.createArgument().setValue(enc);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setPackageList(String src) {
/* 1171 */     if (!javadoc1) {
/* 1172 */       this.packageList = src;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public LinkArgument createLink() {
/* 1180 */     LinkArgument la = new LinkArgument(this);
/* 1181 */     this.links.addElement(la);
/* 1182 */     return la;
/*      */   }
/*      */   
/*      */   public class LinkArgument {
/*      */     private String href;
/*      */     private boolean offline;
/*      */     
/*      */     public LinkArgument(Javadoc this$0) {
/* 1190 */       this.this$0 = this$0;
/*      */       this.offline = false;
/*      */     }
/*      */     private File packagelistLoc; private final Javadoc this$0;
/* 1194 */     public void setHref(String hr) { this.href = hr; }
/*      */ 
/*      */ 
/*      */     
/* 1198 */     public String getHref() { return this.href; }
/*      */ 
/*      */ 
/*      */     
/* 1202 */     public void setPackagelistLoc(File src) { this.packagelistLoc = src; }
/*      */ 
/*      */ 
/*      */     
/* 1206 */     public File getPackagelistLoc() { return this.packagelistLoc; }
/*      */ 
/*      */ 
/*      */     
/* 1210 */     public void setOffline(boolean offline) { this.offline = offline; }
/*      */ 
/*      */ 
/*      */     
/* 1214 */     public boolean isLinkOffline() { return this.offline; }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public TagArgument createTag() {
/* 1225 */     if (!javadoc4) {
/* 1226 */       log(""-tag option not supported on JavaDoc < 1.4"", 3);
/*      */     }
/*      */     
/* 1229 */     TagArgument ta = new TagArgument(this);
/* 1230 */     this.tags.addElement(ta);
/* 1231 */     return ta;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1239 */   static final String[] SCOPE_ELEMENTS = new String[] { ""overview"", ""packages"", ""types"", ""constructors"", ""methods"", ""fields"" };
/*      */ 
/*      */ 
/*      */   
/*      */   public class TagArgument
/*      */   {
/*      */     private String name;
/*      */ 
/*      */     
/*      */     private String description;
/*      */ 
/*      */     
/*      */     private boolean enabled;
/*      */ 
/*      */     
/*      */     private String scope;
/*      */ 
/*      */     
/*      */     private final Javadoc this$0;
/*      */ 
/*      */ 
/*      */     
/*      */     public TagArgument(Javadoc this$0) {
/* 1262 */       this.this$0 = this$0;
/*      */       this.name = null;
/*      */       this.description = null;
/*      */       this.enabled = true;
/*      */       this.scope = ""a"";
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1272 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1283 */     public void setDescription(String description) { this.description = description; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setScope(String verboseScope) throws BuildException {
/* 1303 */       verboseScope = verboseScope.toLowerCase(Locale.US);
/*      */       
/* 1305 */       boolean[] elements = new boolean[Javadoc.SCOPE_ELEMENTS.length];
/*      */       
/* 1307 */       boolean gotAll = false;
/* 1308 */       boolean gotNotAll = false;
/*      */ 
/*      */ 
/*      */       
/* 1312 */       StringTokenizer tok = new StringTokenizer(verboseScope, "","");
/* 1313 */       while (tok.hasMoreTokens()) {
/* 1314 */         String next = tok.nextToken().trim();
/* 1315 */         if (next.equals(""all"")) {
/* 1316 */           if (gotAll) {
/* 1317 */             this.this$0.getProject().log(""Repeated tag scope element: all"", 3);
/*      */           }
/*      */           
/* 1320 */           gotAll = true; continue;
/*      */         } 
/*      */         int i;
/* 1323 */         for (i = 0; i < Javadoc.SCOPE_ELEMENTS.length && 
/* 1324 */           !next.equals(Javadoc.SCOPE_ELEMENTS[i]); i++);
/*      */ 
/*      */         
/* 1327 */         if (i == Javadoc.SCOPE_ELEMENTS.length) {
/* 1328 */           throw new BuildException(""Unrecognised scope element: "" + next);
/*      */         }
/*      */         
/* 1331 */         if (elements[i]) {
/* 1332 */           this.this$0.getProject().log(""Repeated tag scope element: "" + next, 3);
/*      */         }
/*      */         
/* 1335 */         elements[i] = true;
/* 1336 */         gotNotAll = true;
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1341 */       if (gotNotAll && gotAll) {
/* 1342 */         throw new BuildException(""Mixture of \""all\"" and other scope elements in tag parameter."");
/*      */       }
/*      */       
/* 1345 */       if (!gotNotAll && !gotAll) {
/* 1346 */         throw new BuildException(""No scope elements specified in tag parameter."");
/*      */       }
/*      */       
/* 1349 */       if (gotAll) {
/* 1350 */         this.scope = ""a"";
/*      */       } else {
/* 1352 */         StringBuffer buff = new StringBuffer(elements.length);
/* 1353 */         for (int i = 0; i < elements.length; i++) {
/* 1354 */           if (elements[i]) {
/* 1355 */             buff.append(Javadoc.SCOPE_ELEMENTS[i].charAt(0));
/*      */           }
/*      */         } 
/* 1358 */         this.scope = buff.toString();
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1368 */     public void setEnabled(boolean enabled) { this.enabled = enabled; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getParameter() throws BuildException {
/* 1378 */       if (this.name == null || this.name.equals("""")) {
/* 1379 */         throw new BuildException(""No name specified for custom tag."");
/*      */       }
/* 1381 */       if (this.description == null || this.description.equals("""")) {
/* 1382 */         throw new BuildException(""No description specified for custom tag "" + this.name);
/*      */       }
/*      */ 
/*      */       
/* 1386 */       return this.name + "":"" + (this.enabled ? """" : ""X"") + this.scope + "":"" + this.description;
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public GroupArgument createGroup() {
/* 1396 */     GroupArgument ga = new GroupArgument(this);
/* 1397 */     this.groups.addElement(ga);
/* 1398 */     return ga;
/*      */   }
/*      */   public class GroupArgument { private Javadoc.Html title;
/*      */     private Vector packages;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     public GroupArgument(Javadoc this$0) {
/* 1405 */       this.this$0 = this$0;
/*      */       this.packages = new Vector(3);
/*      */     }
/*      */     public void setTitle(String src) {
/* 1409 */       Javadoc.Html h = new Javadoc.Html();
/* 1410 */       h.addText(src);
/* 1411 */       addTitle(h);
/*      */     }
/*      */     
/* 1414 */     public void addTitle(Javadoc.Html text) { this.title = text; }
/*      */ 
/*      */ 
/*      */     
/* 1418 */     public String getTitle() { return (this.title != null) ? this.title.getText() : null; }
/*      */ 
/*      */     
/*      */     public void setPackages(String src) {
/* 1422 */       StringTokenizer tok = new StringTokenizer(src, "","");
/* 1423 */       while (tok.hasMoreTokens()) {
/* 1424 */         String p = tok.nextToken();
/* 1425 */         Javadoc.PackageName pn = new Javadoc.PackageName();
/* 1426 */         pn.setName(p);
/* 1427 */         addPackage(pn);
/*      */       } 
/*      */     }
/*      */     
/* 1431 */     public void addPackage(Javadoc.PackageName pn) { this.packages.addElement(pn); }
/*      */ 
/*      */     
/*      */     public String getPackages() {
/* 1435 */       StringBuffer p = new StringBuffer();
/* 1436 */       for (int i = 0; i < this.packages.size(); i++) {
/* 1437 */         if (i > 0) {
/* 1438 */           p.append("":"");
/*      */         }
/* 1440 */         p.append(this.packages.elementAt(i).toString());
/*      */       } 
/* 1442 */       return p.toString();
/*      */     } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1450 */   public void setCharset(String src) { add12ArgIfNotEmpty(""-charset"", src); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1460 */   public void setFailonerror(boolean b) { this.failOnError = b; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1471 */   public void setSource(String source) { this.source = source; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1483 */   public void addPackageset(DirSet packageSet) { this.packageSets.addElement(packageSet); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1497 */   public void addFileset(FileSet fs) { this.fileSets.addElement(fs); }
/*      */ 
/*      */   
/*      */   public void execute() throws BuildException {
/* 1501 */     if (""javadoc2"".equals(this.taskType)) {
/* 1502 */       log(""!! javadoc2 is deprecated. Use javadoc instead. !!"");
/*      */     }
/*      */     
/* 1505 */     Vector packagesToDoc = new Vector();
/* 1506 */     Path sourceDirs = new Path(getProject());
/*      */     
/* 1508 */     if (this.packageList != null && this.sourcePath == null) {
/* 1509 */       String msg = ""sourcePath attribute must be set when specifying packagelist."";
/*      */       
/* 1511 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/* 1514 */     if (this.sourcePath != null) {
/* 1515 */       sourceDirs.addExisting(this.sourcePath);
/*      */     }
/*      */     
/* 1518 */     parsePackages(packagesToDoc, sourceDirs);
/*      */     
/* 1520 */     if (packagesToDoc.size() != 0 && sourceDirs.size() == 0) {
/* 1521 */       String msg = ""sourcePath attribute must be set when specifying package names."";
/*      */       
/* 1523 */       throw new BuildException(msg);
/*      */     } 
/*      */     
/* 1526 */     Vector sourceFilesToDoc = (Vector)this.sourceFiles.clone();
/* 1527 */     addFileSets(sourceFilesToDoc);
/*      */     
/* 1529 */     if (this.packageList == null && packagesToDoc.size() == 0 && sourceFilesToDoc.size() == 0)
/*      */     {
/* 1531 */       throw new BuildException(""No source files and no packages have been specified."");
/*      */     }
/*      */ 
/*      */     
/* 1535 */     log(""Generating Javadoc"", 2);
/*      */     
/* 1537 */     Commandline toExecute = (Commandline)this.cmd.clone();
/* 1538 */     toExecute.setExecutable(JavaEnvUtils.getJdkExecutable(""javadoc""));
/*      */ 
/*      */     
/* 1541 */     if (this.doctitle != null) {
/* 1542 */       toExecute.createArgument().setValue(""-doctitle"");
/* 1543 */       toExecute.createArgument().setValue(expand(this.doctitle.getText()));
/*      */     } 
/* 1545 */     if (this.header != null) {
/* 1546 */       toExecute.createArgument().setValue(""-header"");
/* 1547 */       toExecute.createArgument().setValue(expand(this.header.getText()));
/*      */     } 
/* 1549 */     if (this.footer != null) {
/* 1550 */       toExecute.createArgument().setValue(""-footer"");
/* 1551 */       toExecute.createArgument().setValue(expand(this.footer.getText()));
/*      */     } 
/* 1553 */     if (this.bottom != null) {
/* 1554 */       toExecute.createArgument().setValue(""-bottom"");
/* 1555 */       toExecute.createArgument().setValue(expand(this.bottom.getText()));
/*      */     } 
/*      */     
/* 1558 */     if (this.classpath == null) {
/* 1559 */       this.classpath = Path.systemClasspath;
/*      */     } else {
/* 1561 */       this.classpath = this.classpath.concatSystemClasspath(""ignore"");
/*      */     } 
/*      */     
/* 1564 */     if (!javadoc1) {
/* 1565 */       if (this.classpath.size() > 0) {
/* 1566 */         toExecute.createArgument().setValue(""-classpath"");
/* 1567 */         toExecute.createArgument().setPath(this.classpath);
/*      */       } 
/* 1569 */       if (sourceDirs.size() > 0) {
/* 1570 */         toExecute.createArgument().setValue(""-sourcepath"");
/* 1571 */         toExecute.createArgument().setPath(sourceDirs);
/*      */       } 
/*      */     } else {
/* 1574 */       sourceDirs.append(this.classpath);
/* 1575 */       if (sourceDirs.size() > 0) {
/* 1576 */         toExecute.createArgument().setValue(""-classpath"");
/* 1577 */         toExecute.createArgument().setPath(sourceDirs);
/*      */       } 
/*      */     } 
/*      */     
/* 1581 */     if (this.version && this.doclet == null) {
/* 1582 */       toExecute.createArgument().setValue(""-version"");
/*      */     }
/* 1584 */     if (this.author && this.doclet == null) {
/* 1585 */       toExecute.createArgument().setValue(""-author"");
/*      */     }
/*      */     
/* 1588 */     if ((javadoc1 || this.doclet == null) && 
/* 1589 */       this.destDir == null) {
/* 1590 */       String msg = ""destDir attribute must be set!"";
/* 1591 */       throw new BuildException(msg);
/*      */     } 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1597 */     if (!javadoc1) {
/* 1598 */       if (this.doclet != null) {
/* 1599 */         if (this.doclet.getName() == null) {
/* 1600 */           throw new BuildException(""The doclet name must be specified."", this.location);
/*      */         }
/*      */         
/* 1603 */         toExecute.createArgument().setValue(""-doclet"");
/* 1604 */         toExecute.createArgument().setValue(this.doclet.getName());
/* 1605 */         if (this.doclet.getPath() != null) {
/* 1606 */           Path docletPath = this.doclet.getPath().concatSystemClasspath(""ignore"");
/*      */           
/* 1608 */           if (docletPath.size() != 0) {
/* 1609 */             toExecute.createArgument().setValue(""-docletpath"");
/* 1610 */             toExecute.createArgument().setPath(docletPath);
/*      */           } 
/*      */         } 
/* 1613 */         Enumeration e = this.doclet.getParams();
/* 1614 */         while (e.hasMoreElements()) {
/* 1615 */           DocletParam param = e.nextElement();
/* 1616 */           if (param.getName() == null) {
/* 1617 */             throw new BuildException(""Doclet parameters must have a name"");
/*      */           }
/*      */ 
/*      */           
/* 1621 */           toExecute.createArgument().setValue(param.getName());
/* 1622 */           if (param.getValue() != null) {
/* 1623 */             toExecute.createArgument().setValue(param.getValue());
/*      */           }
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 1629 */       if (this.bootclasspath != null && this.bootclasspath.size() > 0) {
/* 1630 */         toExecute.createArgument().setValue(""-bootclasspath"");
/* 1631 */         toExecute.createArgument().setPath(this.bootclasspath);
/*      */       } 
/*      */ 
/*      */       
/* 1635 */       if (this.links.size() != 0) {
/* 1636 */         for (Enumeration e = this.links.elements(); e.hasMoreElements(); ) {
/* 1637 */           LinkArgument la = e.nextElement();
/*      */           
/* 1639 */           if (la.getHref() == null || la.getHref().length() == 0) {
/* 1640 */             log(""No href was given for the link - skipping"", 3);
/*      */             
/*      */             continue;
/*      */           } 
/*      */           
/*      */           try {
/* 1646 */             URL base = new URL(""file://."");
/* 1647 */             URL testHref = new URL(base, la.getHref());
/*      */           } catch (MalformedURLException mue) {
/*      */             
/* 1650 */             log(""Link href \"""" + la.getHref() + ""\"" is not a valid url - skipping link"", 1);
/*      */ 
/*      */ 
/*      */             
/*      */             continue;
/*      */           } 
/*      */ 
/*      */           
/* 1658 */           if (la.isLinkOffline()) {
/* 1659 */             File packageListLocation = la.getPackagelistLoc();
/* 1660 */             if (packageListLocation == null) {
/* 1661 */               throw new BuildException(""The package list  location for link "" + la.getHref() + "" must be provided because the link is "" + ""offline"");
/*      */             }
/*      */ 
/*      */ 
/*      */             
/* 1666 */             File packageListFile = new File(packageListLocation, ""package-list"");
/*      */             
/* 1668 */             if (packageListFile.exists()) {
/* 1669 */               toExecute.createArgument().setValue(""-linkoffline"");
/* 1670 */               toExecute.createArgument().setValue(la.getHref());
/* 1671 */               toExecute.createArgument().setValue(packageListLocation.getAbsolutePath());
/*      */               
/*      */               continue;
/*      */             } 
/* 1675 */             log(""Warning: No package list was found at "" + packageListLocation, 3);
/*      */             
/*      */             continue;
/*      */           } 
/* 1679 */           toExecute.createArgument().setValue(""-link"");
/* 1680 */           toExecute.createArgument().setValue(la.getHref());
/*      */         } 
/*      */       }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 1697 */       if (this.group != null) {
/* 1698 */         StringTokenizer tok = new StringTokenizer(this.group, "","", false);
/* 1699 */         while (tok.hasMoreTokens()) {
/* 1700 */           String grp = tok.nextToken().trim();
/* 1701 */           int space = grp.indexOf("" "");
/* 1702 */           if (space > 0) {
/* 1703 */             String name = grp.substring(0, space);
/* 1704 */             String pkgList = grp.substring(space + 1);
/* 1705 */             toExecute.createArgument().setValue(""-group"");
/* 1706 */             toExecute.createArgument().setValue(name);
/* 1707 */             toExecute.createArgument().setValue(pkgList);
/*      */           } 
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/* 1713 */       if (this.groups.size() != 0) {
/* 1714 */         for (Enumeration e = this.groups.elements(); e.hasMoreElements(); ) {
/* 1715 */           GroupArgument ga = e.nextElement();
/* 1716 */           String title = ga.getTitle();
/* 1717 */           String packages = ga.getPackages();
/* 1718 */           if (title == null || packages == null) {
/* 1719 */             throw new BuildException(""The title and packages must be specified for group elements."");
/*      */           }
/*      */ 
/*      */           
/* 1723 */           toExecute.createArgument().setValue(""-group"");
/* 1724 */           toExecute.createArgument().setValue(expand(title));
/* 1725 */           toExecute.createArgument().setValue(packages);
/*      */         } 
/*      */       }
/*      */ 
/*      */       
/* 1730 */       if (javadoc4) {
/* 1731 */         for (Enumeration e = this.tags.elements(); e.hasMoreElements(); ) {
/* 1732 */           Object element = e.nextElement();
/* 1733 */           if (element instanceof TagArgument) {
/* 1734 */             TagArgument ta = (TagArgument)element;
/* 1735 */             toExecute.createArgument().setValue(""-tag"");
/* 1736 */             toExecute.createArgument().setValue(ta.getParameter()); continue;
/*      */           } 
/* 1738 */           ExtensionInfo tagletInfo = (ExtensionInfo)element;
/* 1739 */           toExecute.createArgument().setValue(""-taglet"");
/* 1740 */           toExecute.createArgument().setValue(tagletInfo.getName());
/*      */           
/* 1742 */           if (tagletInfo.getPath() != null) {
/* 1743 */             Path tagletPath = tagletInfo.getPath().concatSystemClasspath(""ignore"");
/*      */             
/* 1745 */             if (tagletPath.size() != 0) {
/* 1746 */               toExecute.createArgument().setValue(""-tagletpath"");
/*      */               
/* 1748 */               toExecute.createArgument().setPath(tagletPath);
/*      */             } 
/*      */           } 
/*      */         } 
/*      */ 
/*      */         
/* 1754 */         if (this.source != null) {
/* 1755 */           if (this.doclet != null) {
/* 1756 */             log(""ignoring source option for custom doclet"", 1);
/*      */           } else {
/*      */             
/* 1759 */             toExecute.createArgument().setValue(""-source"");
/* 1760 */             toExecute.createArgument().setValue(this.source);
/*      */           } 
/*      */         }
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1767 */     File tmpList = null;
/* 1768 */     PrintWriter srcListWriter = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     try {
/* 1775 */       if (this.useExternalFile) {
/* 1776 */         if (tmpList == null) {
/* 1777 */           tmpList = this.fileUtils.createTempFile(""javadoc"", """", null);
/* 1778 */           toExecute.createArgument().setValue(""@"" + tmpList.getAbsolutePath());
/*      */         } 
/*      */         
/* 1781 */         srcListWriter = new PrintWriter(new FileWriter(tmpList.getAbsolutePath(), true));
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/* 1786 */       Enumeration enum = packagesToDoc.elements();
/* 1787 */       while (enum.hasMoreElements()) {
/* 1788 */         String packageName = enum.nextElement();
/* 1789 */         if (this.useExternalFile) {
/* 1790 */           srcListWriter.println(packageName); continue;
/*      */         } 
/* 1792 */         toExecute.createArgument().setValue(packageName);
/*      */       } 
/*      */ 
/*      */       
/* 1796 */       enum = sourceFilesToDoc.elements();
/* 1797 */       while (enum.hasMoreElements()) {
/* 1798 */         SourceFile sf = (SourceFile)enum.nextElement();
/* 1799 */         String sourceFileName = sf.getFile().getAbsolutePath();
/* 1800 */         if (this.useExternalFile) {
/* 1801 */           srcListWriter.println(sourceFileName); continue;
/*      */         } 
/* 1803 */         toExecute.createArgument().setValue(sourceFileName);
/*      */       }
/*      */     
/*      */     } catch (IOException e) {
/*      */       
/* 1808 */       tmpList.delete();
/* 1809 */       throw new BuildException(""Error creating temporary file"", e, this.location);
/*      */     } finally {
/*      */       
/* 1812 */       if (srcListWriter != null) {
/* 1813 */         srcListWriter.close();
/*      */       }
/*      */     } 
/*      */     
/* 1817 */     if (this.packageList != null) {
/* 1818 */       toExecute.createArgument().setValue(""@"" + this.packageList);
/*      */     }
/* 1820 */     log(toExecute.describeCommand(), 3);
/*      */     
/* 1822 */     log(""Javadoc execution"", 2);
/*      */     
/* 1824 */     JavadocOutputStream out = new JavadocOutputStream(this, 2);
/* 1825 */     JavadocOutputStream err = new JavadocOutputStream(this, 1);
/* 1826 */     Execute exe = new Execute(new PumpStreamHandler(out, err));
/* 1827 */     exe.setAntRun(this.project);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1835 */     exe.setWorkingDirectory(null);
/*      */     try {
/* 1837 */       exe.setCommandline(toExecute.getCommandline());
/* 1838 */       int ret = exe.execute();
/* 1839 */       if (ret != 0 && this.failOnError) {
/* 1840 */         throw new BuildException(""Javadoc returned "" + ret, this.location);
/*      */       }
/*      */     } catch (IOException e) {
/* 1843 */       throw new BuildException(""Javadoc failed: "" + e, e, this.location);
/*      */     } finally {
/* 1845 */       if (tmpList != null) {
/* 1846 */         tmpList.delete();
/* 1847 */         tmpList = null;
/*      */       } 
/*      */       
/* 1850 */       out.logFlush();
/* 1851 */       err.logFlush();
/*      */       try {
/* 1853 */         out.close();
/* 1854 */         err.close();
/* 1855 */       } catch (IOException e) {}
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addFileSets(Vector sf) {
/* 1866 */     Enumeration enum = this.fileSets.elements();
/* 1867 */     while (enum.hasMoreElements()) {
/* 1868 */       FileSet fs = enum.nextElement();
/* 1869 */       if (!fs.hasPatterns() && !fs.hasSelectors()) {
/* 1870 */         fs = (FileSet)fs.clone();
/* 1871 */         fs.createInclude().setName(""**/*.java"");
/*      */       } 
/* 1873 */       File baseDir = fs.getDir(getProject());
/* 1874 */       DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 1875 */       String[] files = ds.getIncludedFiles();
/* 1876 */       for (int i = 0; i < files.length; i++) {
/* 1877 */         sf.addElement(new SourceFile(new File(baseDir, files[i])));
/*      */       }
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void parsePackages(Vector pn, Path sp) {
/* 1891 */     Vector addedPackages = new Vector();
/* 1892 */     Vector dirSets = (Vector)this.packageSets.clone();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1898 */     if (this.sourcePath != null && this.packageNames.size() > 0) {
/* 1899 */       PatternSet ps = new PatternSet();
/* 1900 */       Enumeration enum = this.packageNames.elements();
/* 1901 */       while (enum.hasMoreElements()) {
/* 1902 */         PackageName p = enum.nextElement();
/* 1903 */         String pkg = p.getName().replace('.', '/');
/* 1904 */         if (pkg.endsWith(""*"")) {
/* 1905 */           pkg = pkg + ""*"";
/*      */         }
/* 1907 */         ps.createInclude().setName(pkg);
/*      */       } 
/*      */       
/* 1910 */       enum = this.excludePackageNames.elements();
/* 1911 */       while (enum.hasMoreElements()) {
/* 1912 */         PackageName p = enum.nextElement();
/* 1913 */         String pkg = p.getName().replace('.', '/');
/* 1914 */         if (pkg.endsWith(""*"")) {
/* 1915 */           pkg = pkg + ""*"";
/*      */         }
/* 1917 */         ps.createExclude().setName(pkg);
/*      */       } 
/*      */ 
/*      */       
/* 1921 */       String[] pathElements = this.sourcePath.list();
/* 1922 */       for (int i = 0; i < pathElements.length; i++) {
/* 1923 */         DirSet ds = new DirSet();
/* 1924 */         ds.setDefaultexcludes(this.useDefaultExcludes);
/* 1925 */         ds.setDir(new File(pathElements[i]));
/* 1926 */         ds.createPatternSet().addConfiguredPatternset(ps);
/* 1927 */         dirSets.addElement(ds);
/*      */       } 
/*      */     } 
/*      */     
/* 1931 */     Enumeration enum = dirSets.elements();
/* 1932 */     while (enum.hasMoreElements()) {
/* 1933 */       DirSet ds = enum.nextElement();
/* 1934 */       File baseDir = ds.getDir(getProject());
/* 1935 */       log(""scanning "" + baseDir + "" for packages."", 4);
/* 1936 */       DirectoryScanner dsc = ds.getDirectoryScanner(getProject());
/* 1937 */       String[] dirs = dsc.getIncludedDirectories();
/* 1938 */       boolean containsPackages = false;
/* 1939 */       for (int i = 0; i < dirs.length; i++) {
/*      */         
/* 1941 */         File pd = new File(baseDir, dirs[i]);
/* 1942 */         String[] files = pd.list(new FilenameFilter(this) { private final Javadoc this$0;
/*      */               public boolean accept(File dir1, String name) {
/* 1944 */                 if (name.endsWith("".java"")) {
/* 1945 */                   return true;
/*      */                 }
/* 1947 */                 return false;
/*      */               } }
/*      */           );
/*      */         
/* 1951 */         if (files.length > 0) {
/* 1952 */           containsPackages = true;
/* 1953 */           String packageName = dirs[i].replace(File.separatorChar, '.');
/*      */           
/* 1955 */           if (!addedPackages.contains(packageName)) {
/* 1956 */             addedPackages.addElement(packageName);
/* 1957 */             pn.addElement(packageName);
/*      */           } 
/*      */         } 
/*      */       } 
/* 1961 */       if (containsPackages) {
/*      */ 
/*      */         
/* 1964 */         sp.createPathElement().setLocation(baseDir); continue;
/*      */       } 
/* 1966 */       log(baseDir + "" doesn't contain any packages, dropping it."", 3);
/*      */     } 
/*      */   }
/*      */   
/*      */   private class JavadocOutputStream extends LogOutputStream { private String queuedLine;
/*      */     private final Javadoc this$0;
/*      */     
/*      */     JavadocOutputStream(Javadoc this$0, int level) {
/* 1974 */       super(this$0, level);
/*      */ 
/*      */ 
/*      */       
/*      */       this.this$0 = this$0;
/*      */ 
/*      */ 
/*      */       
/* 1982 */       this.queuedLine = null;
/*      */     } protected void processLine(String line, int messageLevel) {
/* 1984 */       if (messageLevel == 2 && line.startsWith(""Generating "")) {
/*      */         
/* 1986 */         if (this.queuedLine != null) {
/* 1987 */           super.processLine(this.queuedLine, 3);
/*      */         }
/* 1989 */         this.queuedLine = line;
/*      */       } else {
/* 1991 */         if (this.queuedLine != null) {
/* 1992 */           if (line.startsWith(""Building "")) {
/* 1993 */             super.processLine(this.queuedLine, 3);
/*      */           } else {
/* 1995 */             super.processLine(this.queuedLine, 2);
/*      */           } 
/* 1997 */           this.queuedLine = null;
/*      */         } 
/* 1999 */         super.processLine(line, messageLevel);
/*      */       } 
/*      */     }
/*      */ 
/*      */     
/*      */     protected void logFlush() {
/* 2005 */       if (this.queuedLine != null) {
/* 2006 */         super.processLine(this.queuedLine, 3);
/* 2007 */         this.queuedLine = null;
/*      */       } 
/*      */     } }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 2016 */   protected String expand(String content) { return this.project.replaceProperties(content); }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Javadoc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JDBCTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.sql.Connection;
/*     */ import java.sql.DatabaseMetaData;
/*     */ import java.sql.Driver;
/*     */ import java.sql.SQLException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class JDBCTask
/*     */   extends Task
/*     */ {
/* 141 */   private static Hashtable loaderMap = new Hashtable(3);
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean caching = true;
/*     */ 
/*     */   
/*     */   private Path classpath;
/*     */ 
/*     */   
/*     */   private AntClassLoader loader;
/*     */ 
/*     */   
/*     */   private boolean autocommit = false;
/*     */ 
/*     */   
/* 157 */   private String driver = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   private String url = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   private String userId = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   private String password = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   private String rdbms = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   private String version = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public void setClasspath(Path classpath) { this.classpath = classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void setCaching(boolean enable) { this.caching = enable; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 206 */     if (this.classpath == null) {
/* 207 */       this.classpath = new Path(this.project);
/*     */     }
/* 209 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void setDriver(String driver) { this.driver = driver; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 233 */   public void setUrl(String url) { this.url = url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public void setPassword(String password) { this.password = password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void setAutocommit(boolean autocommit) { this.autocommit = autocommit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void setRdbms(String rdbms) { this.rdbms = rdbms; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 268 */   public void setVersion(String version) { this.version = version; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isValidRdbms(Connection conn) {
/* 275 */     if (this.rdbms == null && this.version == null) {
/* 276 */       return true;
/*     */     }
/*     */     
/*     */     try {
/* 280 */       DatabaseMetaData dmd = conn.getMetaData();
/*     */       
/* 282 */       if (this.rdbms != null) {
/* 283 */         String theVendor = dmd.getDatabaseProductName().toLowerCase();
/*     */         
/* 285 */         log(""RDBMS = "" + theVendor, 3);
/* 286 */         if (theVendor == null || theVendor.indexOf(this.rdbms) < 0) {
/* 287 */           log(""Not the required RDBMS: "" + this.rdbms, 3);
/* 288 */           return false;
/*     */         } 
/*     */       } 
/*     */       
/* 292 */       if (this.version != null) {
/*     */         
/* 294 */         String theVersion = dmd.getDatabaseProductVersion().toLowerCase();
/*     */         
/* 296 */         log(""Version = "" + theVersion, 3);
/* 297 */         if (theVersion == null || (!theVersion.startsWith(this.version) && theVersion.indexOf("" "" + this.version) < 0)) {
/*     */           
/* 299 */           log(""Not the required version: \"""" + this.version + ""\"""", 3);
/* 300 */           return false;
/*     */         } 
/*     */       } 
/*     */     } catch (SQLException e) {
/*     */       
/* 305 */       log(""Failed to obtain required RDBMS information"", 0);
/* 306 */       return false;
/*     */     } 
/*     */     
/* 309 */     return true;
/*     */   }
/*     */ 
/*     */   
/* 313 */   protected static Hashtable getLoaderMap() { return loaderMap; }
/*     */ 
/*     */ 
/*     */   
/* 317 */   protected AntClassLoader getLoader() { return this.loader; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Connection getConnection() throws BuildException {
/* 327 */     if (this.userId == null) {
/* 328 */       throw new BuildException(""User Id attribute must be set!"", this.location);
/*     */     }
/* 330 */     if (this.password == null) {
/* 331 */       throw new BuildException(""Password attribute must be set!"", this.location);
/*     */     }
/* 333 */     if (this.url == null) {
/* 334 */       throw new BuildException(""Url attribute must be set!"", this.location);
/*     */     }
/*     */     
/*     */     try {
/* 338 */       log(""connecting to "" + getUrl(), 3);
/* 339 */       Properties info = new Properties();
/* 340 */       info.put(""user"", getUserId());
/* 341 */       info.put(""password"", getPassword());
/* 342 */       Connection conn = getDriver().connect(getUrl(), info);
/*     */       
/* 344 */       if (conn == null)
/*     */       {
/* 346 */         throw new SQLException(""No suitable Driver for "" + this.url);
/*     */       }
/*     */       
/* 349 */       conn.setAutoCommit(this.autocommit);
/* 350 */       return conn;
/*     */     } catch (SQLException e) {
/* 352 */       throw new BuildException(e, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Driver getDriver() throws BuildException {
/* 364 */     if (this.driver == null) {
/* 365 */       throw new BuildException(""Driver attribute must be set!"", this.location);
/*     */     }
/*     */     
/* 368 */     Driver driverInstance = null;
/*     */     try {
/*     */       Class clazz;
/* 371 */       if (this.classpath != null) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 378 */         synchronized (loaderMap) {
/* 379 */           if (this.caching) {
/* 380 */             this.loader = (AntClassLoader)loaderMap.get(this.driver);
/*     */           }
/* 382 */           if (this.loader == null) {
/* 383 */             log(""Loading "" + this.driver + "" using AntClassLoader with classpath "" + this.classpath, 3);
/*     */ 
/*     */             
/* 386 */             this.loader = new AntClassLoader(this.project, this.classpath);
/* 387 */             if (this.caching) {
/* 388 */               loaderMap.put(this.driver, this.loader);
/*     */             }
/*     */           } else {
/* 391 */             log(""Loading "" + this.driver + "" using a cached AntClassLoader."", 3);
/*     */           } 
/*     */         } 
/*     */ 
/*     */         
/* 396 */         clazz = this.loader.loadClass(this.driver);
/*     */       } else {
/* 398 */         log(""Loading "" + this.driver + "" using system loader."", 3);
/* 399 */         clazz = Class.forName(this.driver);
/*     */       } 
/* 401 */       driverInstance = (Driver)clazz.newInstance();
/*     */     } catch (ClassNotFoundException e) {
/* 403 */       throw new BuildException(""Class Not Found: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     }
/*     */     catch (IllegalAccessException e) {
/*     */       
/* 407 */       throw new BuildException(""Illegal Access: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     }
/*     */     catch (InstantiationException e) {
/*     */       
/* 411 */       throw new BuildException(""Instantiation Exception: JDBC driver "" + this.driver + "" could not be loaded"", this.location);
/*     */     } 
/*     */ 
/*     */     
/* 415 */     return driverInstance;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 420 */   public void isCaching(boolean value) { this.caching = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 428 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 436 */   public boolean isAutocommit() { return this.autocommit; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 444 */   public String getUrl() { return this.url; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 452 */   public String getUserId() { return this.userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 460 */   public void setUserid(String userId) { this.userId = userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 468 */   public String getPassword() { return this.password; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 476 */   public String getRdbms() { return this.rdbms; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 484 */   public String getVersion() { return this.version; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\JDBCTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Jikes,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.Random;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */ {
/*     */   protected JikesOutputParser jop;
/*     */   protected String command;
/*     */   protected Project project;
/*     */   
/*     */   protected Jikes(JikesOutputParser jop, String command, Project project) {
/*  90 */     System.err.println(""As of Ant 1.2 released in October 2000, the Jikes class"");
/*     */     
/*  92 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/*  94 */     System.err.println(""Don't use it!"");
/*     */     
/*  96 */     this.jop = jop;
/*  97 */     this.command = command;
/*  98 */     this.project = project;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void compile(String[] args) {
/* 106 */     String[] commandArray = null;
/* 107 */     File tmpFile = null;
/*     */     
/*     */     try {
/* 110 */       String myos = System.getProperty(""os.name"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 117 */       if (myos.toLowerCase().indexOf(""windows"") >= 0 && args.length > 250) {
/*     */         
/* 119 */         PrintWriter out = null;
/*     */         try {
/* 121 */           tmpFile = new File(""jikes"" + (new Random(System.currentTimeMillis())).nextLong());
/* 122 */           out = new PrintWriter(new FileWriter(tmpFile));
/* 123 */           for (int i = 0; i < args.length; i++) {
/* 124 */             out.println(args[i]);
/*     */           }
/* 126 */           out.flush();
/* 127 */           commandArray = new String[] { this.command, ""@"" + tmpFile.getAbsolutePath() };
/*     */         } catch (IOException e) {
/*     */           
/* 130 */           throw new BuildException(""Error creating temporary file"", e);
/*     */         } finally {
/*     */           
/* 133 */           if (out != null) {
/* 134 */             try { out.close(); } catch (Throwable t) {}
/*     */           }
/*     */         } 
/*     */       } else {
/* 138 */         commandArray = new String[args.length + 1];
/* 139 */         commandArray[0] = this.command;
/* 140 */         System.arraycopy(args, 0, commandArray, 1, args.length);
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 148 */         Execute exe = new Execute(this.jop);
/* 149 */         exe.setAntRun(this.project);
/* 150 */         exe.setWorkingDirectory(this.project.getBaseDir());
/* 151 */         exe.setCommandline(commandArray);
/* 152 */         exe.execute();
/*     */       } catch (IOException e) {
/* 154 */         throw new BuildException(""Error running Jikes compiler"", e);
/*     */       } 
/*     */     } finally {
/* 157 */       if (tmpFile != null)
/* 158 */         tmpFile.delete(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.JikesOutputParser,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JikesOutputParser
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   protected Task task;
/*     */   protected boolean errorFlag = false;
/*     */   protected int errors;
/*     */   protected int warnings;
/*     */   protected boolean error = false;
/*     */   protected boolean emacsMode;
/*     */   protected BufferedReader br;
/*     */   
/*     */   public void setProcessInputStream(OutputStream os) {}
/*     */   
/*     */   public void setProcessErrorStream(InputStream is) {}
/*     */   
/* 101 */   public void setProcessOutputStream(InputStream is) throws IOException { this.br = new BufferedReader(new InputStreamReader(is)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void start() throws IOException { parseOutput(this.br); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stop() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected JikesOutputParser(Task task, boolean emacsMode) {
/* 123 */     System.err.println(""As of Ant 1.2 released in October 2000, the JikesOutputParser class"");
/*     */     
/* 125 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*     */     
/* 127 */     System.err.println(""Don't use it!"");
/*     */     
/* 129 */     this.task = task;
/* 130 */     this.emacsMode = emacsMode;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void parseOutput(BufferedReader reader) throws IOException {
/* 138 */     if (this.emacsMode) {
/* 139 */       parseEmacsOutput(reader);
/*     */     } else {
/* 141 */       parseStandardOutput(reader);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void parseStandardOutput(BufferedReader reader) throws IOException {
/*     */     String line;
/* 157 */     while ((line = reader.readLine()) != null) {
/* 158 */       String lower = line.toLowerCase();
/* 159 */       if (line.trim().equals("""")) {
/*     */         continue;
/*     */       }
/* 162 */       if (lower.indexOf(""error"") != -1) {
/* 163 */         setError(true);
/* 164 */       } else if (lower.indexOf(""warning"") != -1) {
/* 165 */         setError(false);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       }
/* 173 */       else if (this.emacsMode) {
/* 174 */         setError(true);
/*     */       } 
/*     */       
/* 177 */       log(line);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 183 */   private void parseEmacsOutput(BufferedReader reader) throws IOException { parseStandardOutput(reader); }
/*     */ 
/*     */   
/*     */   private void setError(boolean err) {
/* 187 */     this.error = err;
/* 188 */     if (this.error) {
/* 189 */       this.errorFlag = true;
/*     */     }
/*     */   }
/*     */   
/*     */   private void log(String line) {
/* 194 */     if (!this.emacsMode) {
/* 195 */       this.task.log("""", this.error ? 0 : 1);
/*     */     }
/* 197 */     this.task.log(line, this.error ? 0 : 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   protected boolean getErrorFlag() { return this.errorFlag; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\JikesOutputParser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.KeySubst,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.util.Hashtable;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class KeySubst
/*     */   extends Task
/*     */ {
/*  80 */   private File source = null;
/*  81 */   private File dest = null;
/*  82 */   private String sep = ""*"";
/*  83 */   private Hashtable replacements = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  89 */     log(""!! KeySubst is deprecated. Use Filter + Copy instead. !!"");
/*  90 */     log(""Performing Substitions"");
/*  91 */     if (this.source == null || this.dest == null) {
/*  92 */       log(""Source and destinations must not be null"");
/*     */       return;
/*     */     } 
/*  95 */     BufferedReader br = null;
/*  96 */     BufferedWriter bw = null;
/*     */     try {
/*  98 */       br = new BufferedReader(new FileReader(this.source));
/*  99 */       this.dest.delete();
/* 100 */       bw = new BufferedWriter(new FileWriter(this.dest));
/*     */       
/* 102 */       String line = null;
/* 103 */       String newline = null;
/* 104 */       line = br.readLine();
/* 105 */       while (line != null) {
/* 106 */         if (line.length() == 0) {
/* 107 */           bw.newLine();
/*     */         } else {
/* 109 */           newline = replace(line, this.replacements);
/* 110 */           bw.write(newline);
/* 111 */           bw.newLine();
/*     */         } 
/* 113 */         line = br.readLine();
/*     */       } 
/* 115 */       bw.flush();
/*     */     } catch (IOException ioe) {
/* 117 */       ioe.printStackTrace();
/*     */     } finally {
/* 119 */       if (bw != null) {
/*     */         try {
/* 121 */           bw.close();
/* 122 */         } catch (IOException e) {}
/*     */       }
/* 124 */       if (bw != null) {
/*     */         try {
/* 126 */           br.close();
/* 127 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void setSrc(File s) { this.source = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setSep(String sep) { this.sep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setKeys(String keys) {
/* 166 */     if (keys != null && keys.length() > 0) {
/* 167 */       StringTokenizer tok = new StringTokenizer(keys, this.sep, false);
/*     */       
/* 169 */       while (tok.hasMoreTokens()) {
/* 170 */         String token = tok.nextToken().trim();
/* 171 */         StringTokenizer itok = new StringTokenizer(token, ""="", false);
/*     */ 
/*     */         
/* 174 */         String name = itok.nextToken();
/* 175 */         String value = itok.nextToken();
/* 176 */         this.replacements.put(name, value);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static void main(String[] args) {
/*     */     try {
/* 184 */       Hashtable hash = new Hashtable();
/* 185 */       hash.put(""VERSION"", ""1.0.3"");
/* 186 */       hash.put(""b"", ""ffff"");
/* 187 */       System.out.println(replace(""$f ${VERSION} f ${b} jj $"", hash));
/*     */     } catch (Exception e) {
/*     */       
/* 190 */       e.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replace(String origString, Hashtable keys) throws BuildException {
/* 201 */     StringBuffer finalString = new StringBuffer();
/* 202 */     int index = 0;
/* 203 */     int i = 0;
/* 204 */     String key = null;
/* 205 */     while ((index = origString.indexOf(""${"", i)) > -1) {
/* 206 */       key = origString.substring(index + 2, origString.indexOf(""}"", index + 3));
/*     */       
/* 208 */       finalString.append(origString.substring(i, index));
/* 209 */       if (keys.containsKey(key)) {
/* 210 */         finalString.append(keys.get(key));
/*     */       } else {
/* 212 */         finalString.append(""${"");
/* 213 */         finalString.append(key);
/* 214 */         finalString.append(""}"");
/*     */       } 
/* 216 */       i = index + 3 + key.length();
/*     */     } 
/* 218 */     finalString.append(origString.substring(i));
/* 219 */     return finalString.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\KeySubst.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LoadFile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LoadFile
/*     */   extends Task
/*     */ {
/*  83 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean failOnError = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   private String property = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   private final Vector filterChains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public final void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public final void setSrcFile(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public final void setFailonerror(boolean fail) { this.failOnError = fail; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 160 */     if (this.srcFile == null) {
/* 161 */       throw new BuildException(""source file not defined"");
/*     */     }
/* 163 */     if (this.property == null) {
/* 164 */       throw new BuildException(""output property not defined"");
/*     */     }
/* 166 */     FileInputStream fis = null;
/* 167 */     BufferedInputStream bis = null;
/* 168 */     Reader instream = null;
/* 169 */     log(""loading "" + this.srcFile + "" into property "" + this.property, 3);
/*     */     
/*     */     try {
/* 172 */       long len = this.srcFile.length();
/* 173 */       log(""file size = "" + len, 4);
/*     */       
/* 175 */       int size = (int)len;
/*     */       
/* 177 */       fis = new FileInputStream(this.srcFile);
/* 178 */       bis = new BufferedInputStream(fis);
/* 179 */       if (this.encoding == null) {
/* 180 */         instream = new InputStreamReader(bis);
/*     */       } else {
/* 182 */         instream = new InputStreamReader(bis, this.encoding);
/*     */       } 
/*     */       
/* 185 */       String text = """";
/* 186 */       if (size != 0) {
/* 187 */         ChainReaderHelper crh = new ChainReaderHelper();
/* 188 */         crh.setBufferSize(size);
/* 189 */         crh.setPrimaryReader(instream);
/* 190 */         crh.setFilterChains(this.filterChains);
/* 191 */         crh.setProject(this.project);
/* 192 */         instream = crh.getAssembledReader();
/*     */         
/* 194 */         text = crh.readFully(instream);
/*     */       } 
/*     */       
/* 197 */       if (text != null && 
/* 198 */         text.length() > 0) {
/* 199 */         this.project.setNewProperty(this.property, text);
/* 200 */         log(""loaded "" + text.length() + "" characters"", 3);
/*     */         
/* 202 */         log(this.property + "" := "" + text, 4);
/*     */       }
/*     */     
/*     */     } catch (IOException ioe) {
/*     */       
/* 207 */       String message = ""Unable to load file: "" + ioe.toString();
/* 208 */       if (this.failOnError) {
/* 209 */         throw new BuildException(message, ioe, this.location);
/*     */       }
/* 211 */       log(message, 0);
/*     */     } catch (BuildException be) {
/*     */       
/* 214 */       if (this.failOnError) {
/* 215 */         throw be;
/*     */       }
/* 217 */       log(be.getMessage(), 0);
/*     */     } finally {
/*     */       
/*     */       try {
/* 221 */         if (fis != null) {
/* 222 */           fis.close();
/*     */         }
/* 224 */       } catch (IOException ioex) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 234 */   public final void addFilterChain(FilterChain filter) { this.filterChains.addElement(filter); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\LoadFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LoadProperties,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.filters.StringInputStream;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.types.FilterChain;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class LoadProperties
/*     */   extends Task
/*     */ {
/*  84 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   private final Vector filterChains = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public final void setSrcFile(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void execute() throws BuildException {
/* 107 */     if (this.srcFile == null) {
/* 108 */       throw new BuildException(""Source file not defined."");
/*     */     }
/*     */     
/* 111 */     if (!this.srcFile.exists()) {
/* 112 */       throw new BuildException(""Source file does not exist."");
/*     */     }
/*     */     
/* 115 */     if (!this.srcFile.isFile()) {
/* 116 */       throw new BuildException(""Source file is not a file."");
/*     */     }
/*     */     
/* 119 */     FileInputStream fis = null;
/* 120 */     BufferedInputStream bis = null;
/* 121 */     Reader instream = null;
/*     */     
/*     */     try {
/* 124 */       long len = this.srcFile.length();
/* 125 */       int size = (int)len;
/*     */ 
/*     */       
/* 128 */       fis = new FileInputStream(this.srcFile);
/* 129 */       bis = new BufferedInputStream(fis);
/* 130 */       instream = new InputStreamReader(bis);
/*     */       
/* 132 */       ChainReaderHelper crh = new ChainReaderHelper();
/* 133 */       crh.setBufferSize(size);
/* 134 */       crh.setPrimaryReader(instream);
/* 135 */       crh.setFilterChains(this.filterChains);
/* 136 */       crh.setProject(this.project);
/* 137 */       instream = crh.getAssembledReader();
/*     */       
/* 139 */       String text = crh.readFully(instream);
/*     */       
/* 141 */       if (text != null) {
/* 142 */         if (!text.endsWith(""\n"")) {
/* 143 */           text = text + ""\n"";
/*     */         }
/*     */         
/* 146 */         StringInputStream sis = new StringInputStream(text);
/* 147 */         Properties props = new Properties();
/* 148 */         props.load((InputStream)sis);
/* 149 */         Enumeration e = props.keys();
/* 150 */         while (e.hasMoreElements()) {
/* 151 */           String key = e.nextElement();
/* 152 */           String value = props.getProperty(key);
/* 153 */           if (key != null && value != null && value.trim().length() > 0)
/*     */           {
/* 155 */             this.project.setNewProperty(key, value);
/*     */           }
/*     */         } 
/* 158 */         sis.close();
/*     */       } 
/*     */     } catch (IOException ioe) {
/*     */       
/* 162 */       String message = ""Unable to load file: "" + ioe.toString();
/* 163 */       throw new BuildException(message, ioe, this.location);
/*     */     } catch (BuildException be) {
/* 165 */       throw be;
/*     */     } finally {
/*     */       try {
/* 168 */         if (fis != null) {
/* 169 */           fis.close();
/*     */         }
/* 171 */       } catch (IOException ioex) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public final void addFilterChain(FilterChain filter) { this.filterChains.addElement(filter); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\LoadProperties.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LogOutputStream
/*     */   extends OutputStream
/*     */ {
/*  77 */   private ByteArrayOutputStream buffer = new ByteArrayOutputStream();
/*     */   
/*     */   private boolean skip = false;
/*     */   private Task task;
/*  81 */   private int level = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public LogOutputStream(Task task, int level) {
/*  90 */     this.task = task;
/*  91 */     this.level = level;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int cc) throws IOException {
/* 102 */     byte c = (byte)cc;
/* 103 */     if (c == 10 || c == 13) {
/* 104 */       if (!this.skip) {
/* 105 */         processBuffer();
/*     */       }
/*     */     } else {
/* 108 */       this.buffer.write(cc);
/*     */     } 
/* 110 */     this.skip = (c == 13);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void processBuffer() {
/* 118 */     processLine(this.buffer.toString());
/* 119 */     this.buffer.reset();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   protected void processLine(String line) { processLine(line, this.level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 137 */   protected void processLine(String line, int level) { this.task.log(line, level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 145 */     if (this.buffer.size() > 0) {
/* 146 */       processBuffer();
/*     */     }
/* 148 */     super.close();
/*     */   }
/*     */ 
/*     */   
/* 152 */   public int getMessageLevel() { return this.level; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\LogOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.LogStreamHandler,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class LogStreamHandler
/*    */   extends PumpStreamHandler
/*    */ {
/* 78 */   public LogStreamHandler(Task task, int outlevel, int errlevel) { super(new LogOutputStream(task, outlevel), new LogOutputStream(task, errlevel)); }
/*    */ 
/*    */ 
/*    */   
/*    */   public void stop() {
/* 83 */     super.stop();
/*    */     try {
/* 85 */       getErr().close();
/* 86 */       getOut().close();
/*    */     } catch (IOException e) {
/*    */       
/* 89 */       throw new BuildException(e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\LogStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Manifest,"/*      */ package org.apache.tools.ant.taskdefs;
/*      */ 
/*      */ import java.io.BufferedReader;
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.PrintWriter;
/*      */ import java.io.Reader;
/*      */ import java.io.StringWriter;
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.util.Enumeration;
/*      */ import java.util.Hashtable;
/*      */ import java.util.Vector;
/*      */ import org.apache.tools.ant.BuildException;
/*      */ import org.apache.tools.ant.util.CollectionUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class Manifest
/*      */ {
/*      */   public static final String ATTRIBUTE_MANIFEST_VERSION = ""Manifest-Version"";
/*      */   public static final String ATTRIBUTE_SIGNATURE_VERSION = ""Signature-Version"";
/*      */   public static final String ATTRIBUTE_NAME = ""Name"";
/*      */   public static final String ATTRIBUTE_FROM = ""From"";
/*      */   public static final String ATTRIBUTE_CLASSPATH = ""class-path"";
/*      */   public static final String DEFAULT_MANIFEST_VERSION = ""1.0"";
/*      */   public static final int MAX_LINE_LENGTH = 72;
/*      */   public static final int MAX_SECTION_LENGTH = 70;
/*      */   public static final String EOL = ""\r\n"";
/*      */   
/*      */   public static class Attribute
/*      */   {
/*  130 */     private String name = null;
/*      */ 
/*      */     
/*  133 */     private Vector values = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  139 */     private int currentIndex = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Attribute() {}
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  154 */     public Attribute(String line) throws ManifestException { parse(line); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public Attribute(String name, String value) {
/*  164 */       this.name = name;
/*  165 */       setValue(value);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public int hashCode() {
/*  172 */       int hashCode = 0;
/*      */       
/*  174 */       if (this.name != null) {
/*  175 */         hashCode += this.name.hashCode();
/*      */       }
/*      */       
/*  178 */       hashCode += this.values.hashCode();
/*  179 */       return hashCode;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean equals(Object rhs) {
/*  186 */       if (rhs == null || rhs.getClass() != getClass()) {
/*  187 */         return false;
/*      */       }
/*      */       
/*  190 */       if (rhs == this) {
/*  191 */         return true;
/*      */       }
/*      */       
/*  194 */       Attribute rhsAttribute = (Attribute)rhs;
/*  195 */       String lhsKey = getKey();
/*  196 */       String rhsKey = rhsAttribute.getKey();
/*  197 */       if ((lhsKey == null && rhsKey != null) || (lhsKey != null && rhsKey == null) || !lhsKey.equals(rhsKey))
/*      */       {
/*      */         
/*  200 */         return false;
/*      */       }
/*      */       
/*  203 */       return CollectionUtils.equals(this.values, rhsAttribute.values);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void parse(String line) throws ManifestException {
/*  215 */       int index = line.indexOf("": "");
/*  216 */       if (index == -1) {
/*  217 */         throw new ManifestException(""Manifest line \"""" + line + ""\"" is not valid as it does not "" + ""contain a name and a value separated by ': ' "");
/*      */       }
/*      */ 
/*      */       
/*  221 */       this.name = line.substring(0, index);
/*  222 */       setValue(line.substring(index + 2));
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  231 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  240 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getKey() {
/*  249 */       if (this.name == null) {
/*  250 */         return null;
/*      */       }
/*  252 */       return this.name.toLowerCase();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void setValue(String value) {
/*  261 */       if (this.currentIndex >= this.values.size()) {
/*  262 */         this.values.addElement(value);
/*  263 */         this.currentIndex = this.values.size() - 1;
/*      */       } else {
/*  265 */         this.values.setElementAt(value, this.currentIndex);
/*      */       } 
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getValue() {
/*  275 */       if (this.values.size() == 0) {
/*  276 */         return null;
/*      */       }
/*      */       
/*  279 */       String fullValue = """";
/*  280 */       for (Enumeration e = getValues(); e.hasMoreElements(); ) {
/*  281 */         String value = e.nextElement();
/*  282 */         fullValue = fullValue + value + "" "";
/*      */       } 
/*  284 */       return fullValue.trim();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addValue(String value) {
/*  293 */       this.currentIndex++;
/*  294 */       setValue(value);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  303 */     public Enumeration getValues() { return this.values.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addContinuation(String line) {
/*  316 */       String currentValue = this.values.elementAt(this.currentIndex);
/*  317 */       setValue(currentValue + line.substring(1));
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void write(PrintWriter writer) throws IOException {
/*  328 */       for (Enumeration e = getValues(); e.hasMoreElements();) {
/*  329 */         writeValue(writer, e.nextElement());
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void writeValue(PrintWriter writer, String value) throws IOException {
/*  343 */       String line = this.name + "": "" + value;
/*  344 */       while ((line.getBytes()).length > 72) {
/*      */         
/*  346 */         int breakIndex = 70;
/*  347 */         String section = line.substring(0, breakIndex);
/*      */         
/*  349 */         while ((section.getBytes()).length > 70 && breakIndex > 0) {
/*  350 */           breakIndex--;
/*  351 */           section = line.substring(0, breakIndex);
/*      */         } 
/*  353 */         if (breakIndex == 0) {
/*  354 */           throw new IOException(""Unable to write manifest line "" + this.name + "": "" + value);
/*      */         }
/*      */         
/*  357 */         writer.print(section + ""\r\n"");
/*  358 */         line = "" "" + line.substring(breakIndex);
/*      */       } 
/*  360 */       writer.print(line + ""\r\n"");
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static class Section
/*      */   {
/*  371 */     private Vector warnings = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  377 */     private String name = null;
/*      */ 
/*      */     
/*  380 */     private Hashtable attributes = new Hashtable();
/*      */ 
/*      */     
/*  383 */     private Vector attributeIndex = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  390 */     public void setName(String name) { this.name = name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  399 */     public String getName() { return this.name; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String read(BufferedReader reader) throws ManifestException, IOException {
/*      */       String nameReadAhead;
/*  417 */       Manifest.Attribute attribute = null;
/*      */       while (true)
/*  419 */       { String line = reader.readLine();
/*  420 */         if (line == null || line.length() == 0) {
/*  421 */           return null;
/*      */         }
/*  423 */         if (line.charAt(0) == ' ') {
/*      */           
/*  425 */           if (attribute == null) {
/*  426 */             if (this.name != null) {
/*      */ 
/*      */ 
/*      */               
/*  430 */               this.name += line.substring(1); continue;
/*      */             } 
/*  432 */             throw new ManifestException(""Can't start an attribute with a continuation line "" + line);
/*      */           } 
/*      */ 
/*      */           
/*  436 */           attribute.addContinuation(line);
/*      */           continue;
/*      */         } 
/*  439 */         attribute = new Manifest.Attribute(line);
/*  440 */         nameReadAhead = addAttributeAndCheck(attribute);
/*  441 */         if (nameReadAhead != null)
/*  442 */           break;  }  return nameReadAhead;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void merge(Section section) throws ManifestException {
/*  456 */       if ((this.name == null && section.getName() != null) || (this.name != null && !this.name.equalsIgnoreCase(section.getName())))
/*      */       {
/*      */         
/*  459 */         throw new ManifestException(""Unable to merge sections with different names"");
/*      */       }
/*      */ 
/*      */       
/*  463 */       Enumeration e = section.getAttributeKeys();
/*  464 */       while (e.hasMoreElements()) {
/*  465 */         String attributeName = e.nextElement();
/*  466 */         Manifest.Attribute attribute = section.getAttribute(attributeName);
/*  467 */         if (attributeName.equals(""class-path"") && this.attributes.containsKey(attributeName)) {
/*      */           
/*  469 */           Manifest.Attribute ourClassPath = getAttribute(attributeName);
/*  470 */           Enumeration cpe = attribute.getValues();
/*  471 */           while (cpe.hasMoreElements()) {
/*  472 */             String value = cpe.nextElement();
/*  473 */             ourClassPath.addValue(value);
/*      */           } 
/*      */           continue;
/*      */         } 
/*  477 */         storeAttribute(attribute);
/*      */       } 
/*      */ 
/*      */ 
/*      */       
/*  482 */       Enumeration warnEnum = section.warnings.elements();
/*  483 */       while (warnEnum.hasMoreElements()) {
/*  484 */         this.warnings.addElement(warnEnum.nextElement());
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void write(PrintWriter writer) throws IOException {
/*  496 */       if (this.name != null) {
/*  497 */         Manifest.Attribute nameAttr = new Manifest.Attribute(""Name"", this.name);
/*  498 */         nameAttr.write(writer);
/*      */       } 
/*  500 */       Enumeration e = getAttributeKeys();
/*  501 */       while (e.hasMoreElements()) {
/*  502 */         String key = e.nextElement();
/*  503 */         Manifest.Attribute attribute = getAttribute(key);
/*  504 */         attribute.write(writer);
/*      */       } 
/*  506 */       writer.print(""\r\n"");
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  518 */     public Manifest.Attribute getAttribute(String attributeName) { return (Manifest.Attribute)this.attributes.get(attributeName.toLowerCase()); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  528 */     public Enumeration getAttributeKeys() { return this.attributeIndex.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String getAttributeValue(String attributeName) {
/*  540 */       Manifest.Attribute attribute = getAttribute(attributeName.toLowerCase());
/*  541 */       if (attribute == null) {
/*  542 */         return null;
/*      */       }
/*  544 */       return attribute.getValue();
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void removeAttribute(String attributeName) {
/*  553 */       String key = attributeName.toLowerCase();
/*  554 */       this.attributes.remove(key);
/*  555 */       this.attributeIndex.removeElement(key);
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public void addConfiguredAttribute(Manifest.Attribute attribute) throws ManifestException {
/*  567 */       String check = addAttributeAndCheck(attribute);
/*  568 */       if (check != null) {
/*  569 */         throw new BuildException(""Specify the section name using the \""name\"" attribute of the <section> element rather than using a \""Name\"" manifest attribute"");
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public String addAttributeAndCheck(Manifest.Attribute attribute) throws ManifestException {
/*  588 */       if (attribute.getName() == null || attribute.getValue() == null) {
/*  589 */         throw new BuildException(""Attributes must have name and value"");
/*      */       }
/*  591 */       if (attribute.getKey().equalsIgnoreCase(""Name"")) {
/*  592 */         this.warnings.addElement(""\""Name\"" attributes should not occur in the main section and must be the first element in all other sections: \"""" + attribute.getName() + "": "" + attribute.getValue() + ""\"""");
/*      */ 
/*      */ 
/*      */         
/*  596 */         return attribute.getValue();
/*      */       } 
/*      */       
/*  599 */       if (attribute.getKey().startsWith(""From"".toLowerCase())) {
/*  600 */         this.warnings.addElement(""Manifest attributes should not start with \""From\"" in \"""" + attribute.getName() + "": "" + attribute.getValue() + ""\"""");
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  605 */         String attributeKey = attribute.getKey();
/*  606 */         if (attributeKey.equals(""class-path""))
/*  607 */         { Manifest.Attribute classpathAttribute = (Manifest.Attribute)this.attributes.get(attributeKey);
/*      */ 
/*      */           
/*  610 */           if (classpathAttribute == null) {
/*  611 */             storeAttribute(attribute);
/*      */           } else {
/*  613 */             Enumeration e = attribute.getValues();
/*  614 */             while (e.hasMoreElements()) {
/*  615 */               String value = e.nextElement();
/*  616 */               classpathAttribute.addValue(value);
/*      */             } 
/*      */           }  }
/*  619 */         else { if (this.attributes.containsKey(attributeKey)) {
/*  620 */             throw new ManifestException(""The attribute \"""" + attribute.getName() + ""\"" may not occur more "" + ""than once in the same section"");
/*      */           }
/*      */ 
/*      */           
/*  624 */           storeAttribute(attribute); }
/*      */       
/*      */       } 
/*  627 */       return null;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     private void storeAttribute(Manifest.Attribute attribute) {
/*  636 */       if (attribute == null) {
/*      */         return;
/*      */       }
/*  639 */       String attributeKey = attribute.getKey();
/*  640 */       this.attributes.put(attributeKey, attribute);
/*  641 */       if (!this.attributeIndex.contains(attributeKey)) {
/*  642 */         this.attributeIndex.addElement(attributeKey);
/*      */       }
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  652 */     public Enumeration getWarnings() { return this.warnings.elements(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public int hashCode() {
/*  659 */       int hashCode = 0;
/*      */       
/*  661 */       if (this.name != null) {
/*  662 */         hashCode += this.name.hashCode();
/*      */       }
/*      */       
/*  665 */       hashCode += this.attributes.hashCode();
/*  666 */       return hashCode;
/*      */     }
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     public boolean equals(Object rhs) {
/*  673 */       if (rhs == null || rhs.getClass() != getClass()) {
/*  674 */         return false;
/*      */       }
/*      */       
/*  677 */       if (rhs == this) {
/*  678 */         return true;
/*      */       }
/*      */       
/*  681 */       Section rhsSection = (Section)rhs;
/*      */       
/*  683 */       return CollectionUtils.equals(this.attributes, rhsSection.attributes);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  689 */   private String manifestVersion = ""1.0"";
/*      */ 
/*      */   
/*  692 */   private Section mainSection = new Section();
/*      */ 
/*      */   
/*  695 */   private Hashtable sections = new Hashtable();
/*      */ 
/*      */   
/*  698 */   private Vector sectionIndex = new Vector();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public static Manifest getDefaultManifest() throws BuildException {
/*      */     try {
/*  709 */       String defManifest = ""/org/apache/tools/ant/defaultManifest.mf"";
/*  710 */       InputStream in = Manifest.class.getResourceAsStream(defManifest);
/*  711 */       if (in == null) {
/*  712 */         throw new BuildException(""Could not find default manifest: "" + defManifest);
/*      */       }
/*      */       
/*      */       try {
/*  716 */         return new Manifest(new InputStreamReader(in, ""ASCII""));
/*      */       } catch (UnsupportedEncodingException e) {
/*  718 */         return new Manifest(new InputStreamReader(in));
/*      */       } 
/*      */     } catch (ManifestException e) {
/*  721 */       throw new BuildException(""Default manifest is invalid !!"", e);
/*      */     } catch (IOException e) {
/*  723 */       throw new BuildException(""Unable to read default manifest"", e);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*  729 */   public Manifest() { this.manifestVersion = null; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Manifest(Reader r) throws ManifestException, IOException {
/*  742 */     BufferedReader reader = new BufferedReader(r);
/*      */     
/*  744 */     String nextSectionName = this.mainSection.read(reader);
/*  745 */     String readManifestVersion = this.mainSection.getAttributeValue(""Manifest-Version"");
/*      */     
/*  747 */     if (readManifestVersion != null) {
/*  748 */       this.manifestVersion = readManifestVersion;
/*  749 */       this.mainSection.removeAttribute(""Manifest-Version"");
/*      */     } 
/*      */     
/*  752 */     String line = null;
/*  753 */     while ((line = reader.readLine()) != null) {
/*  754 */       if (line.length() == 0) {
/*      */         continue;
/*      */       }
/*      */       
/*  758 */       Section section = new Section();
/*  759 */       if (nextSectionName == null) {
/*  760 */         Attribute sectionName = new Attribute(line);
/*  761 */         if (!sectionName.getName().equalsIgnoreCase(""Name"")) {
/*  762 */           throw new ManifestException(""Manifest sections should start with a \""Name\"" attribute and not \"""" + sectionName.getName() + ""\"""");
/*      */         }
/*      */ 
/*      */ 
/*      */         
/*  767 */         nextSectionName = sectionName.getValue();
/*      */       
/*      */       }
/*      */       else {
/*      */         
/*  772 */         Attribute firstAttribute = new Attribute(line);
/*  773 */         section.addAttributeAndCheck(firstAttribute);
/*      */       } 
/*      */       
/*  776 */       section.setName(nextSectionName);
/*  777 */       nextSectionName = section.read(reader);
/*  778 */       addConfiguredSection(section);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addConfiguredSection(Section section) throws ManifestException {
/*  791 */     String sectionName = section.getName();
/*  792 */     if (sectionName == null) {
/*  793 */       throw new BuildException(""Sections must have a name"");
/*      */     }
/*  795 */     this.sections.put(sectionName, section);
/*  796 */     if (!this.sectionIndex.contains(sectionName)) {
/*  797 */       this.sectionIndex.addElement(sectionName);
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addConfiguredAttribute(Attribute attribute) throws ManifestException {
/*  810 */     if (attribute.getKey() == null || attribute.getValue() == null) {
/*  811 */       throw new BuildException(""Attributes must have name and value"");
/*      */     }
/*  813 */     if (attribute.getKey().equalsIgnoreCase(""Manifest-Version"")) {
/*  814 */       this.manifestVersion = attribute.getValue();
/*      */     } else {
/*  816 */       this.mainSection.addConfiguredAttribute(attribute);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  829 */   public void merge(Manifest other) throws ManifestException { merge(other, false); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void merge(Manifest other, boolean overwriteMain) throws ManifestException {
/*  844 */     if (other != null) {
/*  845 */       if (overwriteMain) {
/*  846 */         this.mainSection = other.mainSection;
/*      */       } else {
/*  848 */         this.mainSection.merge(other.mainSection);
/*      */       } 
/*      */       
/*  851 */       if (other.manifestVersion != null) {
/*  852 */         this.manifestVersion = other.manifestVersion;
/*      */       }
/*      */       
/*  855 */       Enumeration e = other.getSectionNames();
/*  856 */       while (e.hasMoreElements()) {
/*  857 */         String sectionName = e.nextElement();
/*  858 */         Section ourSection = (Section)this.sections.get(sectionName);
/*  859 */         Section otherSection = (Section)other.sections.get(sectionName);
/*      */         
/*  861 */         if (ourSection == null) {
/*  862 */           if (otherSection != null)
/*  863 */             addConfiguredSection(otherSection); 
/*      */           continue;
/*      */         } 
/*  866 */         ourSection.merge(otherSection);
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void write(PrintWriter writer) throws IOException {
/*  880 */     writer.print(""Manifest-Version: "" + this.manifestVersion + ""\r\n"");
/*  881 */     String signatureVersion = this.mainSection.getAttributeValue(""Signature-Version"");
/*      */     
/*  883 */     if (signatureVersion != null) {
/*  884 */       writer.print(""Signature-Version: "" + signatureVersion + ""\r\n"");
/*      */       
/*  886 */       this.mainSection.removeAttribute(""Signature-Version"");
/*      */     } 
/*  888 */     this.mainSection.write(writer);
/*      */ 
/*      */     
/*  891 */     if (signatureVersion != null) {
/*      */       try {
/*  893 */         Attribute svAttr = new Attribute(""Signature-Version"", signatureVersion);
/*      */         
/*  895 */         this.mainSection.addConfiguredAttribute(svAttr);
/*  896 */       } catch (ManifestException e) {}
/*      */     }
/*      */ 
/*      */ 
/*      */     
/*  901 */     Enumeration e = this.sectionIndex.elements();
/*  902 */     while (e.hasMoreElements()) {
/*  903 */       String sectionName = e.nextElement();
/*  904 */       Section section = getSection(sectionName);
/*  905 */       section.write(writer);
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String toString() {
/*  916 */     StringWriter sw = new StringWriter();
/*      */     try {
/*  918 */       write(new PrintWriter(sw));
/*      */     } catch (IOException e) {
/*  920 */       return null;
/*      */     } 
/*  922 */     return sw.toString();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Enumeration getWarnings() {
/*  931 */     Vector warnings = new Vector();
/*      */     
/*  933 */     Enumeration warnEnum = this.mainSection.getWarnings();
/*  934 */     while (warnEnum.hasMoreElements()) {
/*  935 */       warnings.addElement(warnEnum.nextElement());
/*      */     }
/*      */ 
/*      */     
/*  939 */     Enumeration e = this.sections.elements();
/*  940 */     while (e.hasMoreElements()) {
/*  941 */       Section section = e.nextElement();
/*  942 */       Enumeration e2 = section.getWarnings();
/*  943 */       while (e2.hasMoreElements()) {
/*  944 */         warnings.addElement(e2.nextElement());
/*      */       }
/*      */     } 
/*      */     
/*  948 */     return warnings.elements();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int hashCode() {
/*  955 */     int hashCode = 0;
/*      */     
/*  957 */     if (this.manifestVersion != null) {
/*  958 */       hashCode += this.manifestVersion.hashCode();
/*      */     }
/*  960 */     hashCode += this.mainSection.hashCode();
/*  961 */     hashCode += this.sections.hashCode();
/*      */     
/*  963 */     return hashCode;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean equals(Object rhs) {
/*  970 */     if (rhs == null || rhs.getClass() != getClass()) {
/*  971 */       return false;
/*      */     }
/*      */     
/*  974 */     if (rhs == this) {
/*  975 */       return true;
/*      */     }
/*      */     
/*  978 */     Manifest rhsManifest = (Manifest)rhs;
/*  979 */     if (this.manifestVersion == null) {
/*  980 */       if (rhsManifest.manifestVersion != null) {
/*  981 */         return false;
/*      */       }
/*  983 */     } else if (!this.manifestVersion.equals(rhsManifest.manifestVersion)) {
/*  984 */       return false;
/*      */     } 
/*      */     
/*  987 */     if (!this.mainSection.equals(rhsManifest.mainSection)) {
/*  988 */       return false;
/*      */     }
/*      */     
/*  991 */     return CollectionUtils.equals(this.sections, rhsManifest.sections);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1000 */   public String getManifestVersion() { return this.manifestVersion; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1009 */   public Section getMainSection() { return this.mainSection; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1020 */   public Section getSection(String name) { return (Section)this.sections.get(name); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/* 1029 */   public Enumeration getSectionNames() { return this.sectionIndex.elements(); }
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Manifest.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ManifestException,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ManifestException
/*    */   extends Exception
/*    */ {
/* 69 */   public ManifestException(String msg) { super(msg); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ManifestException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ManifestTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ManifestTask
/*     */   extends Task
/*     */ {
/*  86 */   private Manifest nestedManifest = new Manifest();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private File manifestFile;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Mode mode;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Mode
/*     */     extends EnumeratedAttribute
/*     */   {
/* 108 */     public String[] getValues() { return new String[] { ""update"", ""replace"" }; }
/*     */   }
/*     */ 
/*     */   
/*     */   public ManifestTask() {
/* 113 */     this.mode = new Mode();
/* 114 */     this.mode.setValue(""replace"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   public void addConfiguredSection(Manifest.Section section) throws ManifestException { this.nestedManifest.addConfiguredSection(section); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void addConfiguredAttribute(Manifest.Attribute attribute) throws ManifestException { this.nestedManifest.addConfiguredAttribute(attribute); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 147 */   public void setFile(File f) { this.manifestFile = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setMode(Mode m) { this.mode = m; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 164 */     if (this.manifestFile == null) {
/* 165 */       throw new BuildException(""the file attribute is required"");
/*     */     }
/*     */     
/* 168 */     Manifest toWrite = Manifest.getDefaultManifest();
/* 169 */     Manifest current = null;
/* 170 */     BuildException error = null;
/*     */     
/* 172 */     if (this.manifestFile.exists()) {
/* 173 */       FileReader f = null;
/*     */       try {
/* 175 */         f = new FileReader(this.manifestFile);
/* 176 */         current = new Manifest(f);
/*     */       } catch (ManifestException m) {
/* 178 */         error = new BuildException(""Existing manifest "" + this.manifestFile + "" is invalid"", m, this.location);
/*     */       } catch (IOException e) {
/*     */         
/* 181 */         error = new BuildException(""Failed to read "" + this.manifestFile, e, this.location);
/*     */       } finally {
/*     */         
/* 184 */         if (f != null) {
/*     */           try {
/* 186 */             f.close();
/* 187 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/*     */     try {
/* 193 */       if (this.mode.getValue().equals(""update"") && this.manifestFile.exists()) {
/* 194 */         if (current != null) {
/* 195 */           toWrite.merge(current);
/* 196 */         } else if (error != null) {
/* 197 */           throw error;
/*     */         } 
/*     */       }
/*     */       
/* 201 */       toWrite.merge(this.nestedManifest);
/*     */     } catch (ManifestException m) {
/* 203 */       throw new BuildException(""Manifest is invalid"", m, this.location);
/*     */     } 
/*     */     
/* 206 */     if (toWrite.equals(current)) {
/* 207 */       log(""Manifest has not changed, do not recreate"", 3);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 212 */     PrintWriter w = null;
/*     */     try {
/* 214 */       w = new PrintWriter(new FileWriter(this.manifestFile));
/* 215 */       toWrite.write(w);
/*     */     } catch (IOException e) {
/* 217 */       throw new BuildException(""Failed to write "" + this.manifestFile, e, this.location);
/*     */     } finally {
/*     */       
/* 220 */       if (w != null)
/* 221 */         w.close(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ManifestTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.MatchingTask,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.types.selectors.AndSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsSelector;
/*     */ import org.apache.tools.ant.types.selectors.DateSelector;
/*     */ import org.apache.tools.ant.types.selectors.DependSelector;
/*     */ import org.apache.tools.ant.types.selectors.DepthSelector;
/*     */ import org.apache.tools.ant.types.selectors.ExtendSelector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.FilenameSelector;
/*     */ import org.apache.tools.ant.types.selectors.MajoritySelector;
/*     */ import org.apache.tools.ant.types.selectors.NoneSelector;
/*     */ import org.apache.tools.ant.types.selectors.NotSelector;
/*     */ import org.apache.tools.ant.types.selectors.OrSelector;
/*     */ import org.apache.tools.ant.types.selectors.PresentSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectorContainer;
/*     */ import org.apache.tools.ant.types.selectors.SizeSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class MatchingTask
/*     */   extends Task
/*     */   implements SelectorContainer
/*     */ {
/*     */   protected boolean useDefaultExcludes = true;
/*  86 */   protected FileSet fileset = new FileSet();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProject(Project project) {
/*  92 */     super.setProject(project);
/*  93 */     this.fileset.setProject(project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public PatternSet.NameEntry createInclude() { return this.fileset.createInclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public PatternSet.NameEntry createIncludesFile() { return this.fileset.createIncludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public PatternSet.NameEntry createExclude() { return this.fileset.createExclude(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public PatternSet.NameEntry createExcludesFile() { return this.fileset.createExcludesFile(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public PatternSet createPatternSet() { return this.fileset.createPatternSet(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public void setIncludes(String includes) { this.fileset.setIncludes(includes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetItems(String itemString) {
/* 149 */     log(""The items attribute is deprecated. Please use the includes attribute."", 1);
/*     */ 
/*     */     
/* 152 */     if (itemString == null || itemString.equals(""*"") || itemString.equals(""."")) {
/*     */       
/* 154 */       createInclude().setName(""**"");
/*     */     } else {
/* 156 */       StringTokenizer tok = new StringTokenizer(itemString, "", "");
/* 157 */       while (tok.hasMoreTokens()) {
/* 158 */         String pattern = tok.nextToken().trim();
/* 159 */         if (pattern.length() > 0) {
/* 160 */           createInclude().setName(pattern + ""/**"");
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setExcludes(String excludes) { this.fileset.setExcludes(excludes); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void XsetIgnore(String ignoreString) {
/* 183 */     log(""The ignore attribute is deprecated.Please use the excludes attribute."", 1);
/*     */ 
/*     */     
/* 186 */     if (ignoreString != null && ignoreString.length() > 0) {
/* 187 */       StringTokenizer tok = new StringTokenizer(ignoreString, "", "", false);
/*     */       
/* 189 */       while (tok.hasMoreTokens()) {
/* 190 */         createExclude().setName(""**/"" + tok.nextToken().trim() + ""/**"");
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 203 */   public void setDefaultexcludes(boolean useDefaultExcludes) { this.useDefaultExcludes = useDefaultExcludes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected DirectoryScanner getDirectoryScanner(File baseDir) {
/* 210 */     this.fileset.setDir(baseDir);
/* 211 */     this.fileset.setDefaultexcludes(this.useDefaultExcludes);
/* 212 */     return this.fileset.getDirectoryScanner(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void setIncludesfile(File includesfile) { this.fileset.setIncludesfile(includesfile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setExcludesfile(File excludesfile) { this.fileset.setExcludesfile(excludesfile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 242 */   public void setCaseSensitive(boolean isCaseSensitive) { this.fileset.setCaseSensitive(isCaseSensitive); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 251 */   public void setFollowSymlinks(boolean followSymlinks) { this.fileset.setFollowSymlinks(followSymlinks); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   public boolean hasSelectors() { return this.fileset.hasSelectors(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public int selectorCount() { return this.fileset.selectorCount(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public FileSelector[] getSelectors(Project p) { return this.fileset.getSelectors(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public Enumeration selectorElements() { return this.fileset.selectorElements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 297 */   public void appendSelector(FileSelector selector) { this.fileset.appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void addSelector(SelectSelector selector) { this.fileset.addSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void addAnd(AndSelector selector) { this.fileset.addAnd(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 320 */   public void addOr(OrSelector selector) { this.fileset.addOr(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 327 */   public void addNot(NotSelector selector) { this.fileset.addNot(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public void addNone(NoneSelector selector) { this.fileset.addNone(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public void addMajority(MajoritySelector selector) { this.fileset.addMajority(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 348 */   public void addDate(DateSelector selector) { this.fileset.addDate(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public void addSize(SizeSelector selector) { this.fileset.addSize(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 362 */   public void addFilename(FilenameSelector selector) { this.fileset.addFilename(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 369 */   public void addCustom(ExtendSelector selector) { this.fileset.addCustom(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 376 */   public void addContains(ContainsSelector selector) { this.fileset.addContains(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 383 */   public void addPresent(PresentSelector selector) { this.fileset.addPresent(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 390 */   public void addDepth(DepthSelector selector) { this.fileset.addDepth(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 397 */   public void addDepend(DependSelector selector) { this.fileset.addDepend(selector); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\MatchingTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Mkdir,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Mkdir
/*     */   extends Task
/*     */ {
/*     */   private File dir;
/*     */   
/*     */   public void execute() throws BuildException {
/*  84 */     if (this.dir == null) {
/*  85 */       throw new BuildException(""dir attribute is required"", this.location);
/*     */     }
/*     */     
/*  88 */     if (this.dir.isFile()) {
/*  89 */       throw new BuildException(""Unable to create directory as a file already exists with that name: "" + this.dir.getAbsolutePath());
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  94 */     if (!this.dir.exists()) {
/*  95 */       boolean result = this.dir.mkdirs();
/*  96 */       if (!result) {
/*  97 */         String msg = ""Directory "" + this.dir.getAbsolutePath() + "" creation was not successful for an unknown reason"";
/*     */         
/*  99 */         throw new BuildException(msg, this.location);
/*     */       } 
/* 101 */       log(""Created dir: "" + this.dir.getAbsolutePath());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public void setDir(File dir) { this.dir = dir; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Mkdir.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Move,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.FilterSet;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Move
/*     */   extends Copy
/*     */ {
/*  97 */   public Move() { this.forceOverwrite = true; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void doFileOperations() {
/* 106 */     if (this.completeDirMap.size() > 0) {
/* 107 */       Enumeration e = this.completeDirMap.keys();
/* 108 */       while (e.hasMoreElements()) {
/* 109 */         File fromDir = e.nextElement();
/* 110 */         File toDir = (File)this.completeDirMap.get(fromDir);
/*     */         try {
/* 112 */           log(""Attempting to rename dir: "" + fromDir + "" to "" + toDir, this.verbosity);
/*     */           
/* 114 */           renameFile(fromDir, toDir, this.filtering, this.forceOverwrite);
/*     */         } catch (IOException ioe) {
/* 116 */           String msg = ""Failed to rename dir "" + fromDir + "" to "" + toDir + "" due to "" + ioe.getMessage();
/*     */ 
/*     */           
/* 119 */           throw new BuildException(msg, ioe, this.location);
/*     */         } 
/*     */       } 
/*     */     } 
/* 123 */     if (this.fileCopyMap.size() > 0) {
/* 124 */       log(""Moving "" + this.fileCopyMap.size() + "" files to "" + this.destDir.getAbsolutePath());
/*     */ 
/*     */       
/* 127 */       Enumeration e = this.fileCopyMap.keys();
/* 128 */       while (e.hasMoreElements()) {
/* 129 */         String fromFile = e.nextElement();
/* 130 */         String toFile = (String)this.fileCopyMap.get(fromFile);
/*     */         
/* 132 */         if (fromFile.equals(toFile)) {
/* 133 */           log(""Skipping self-move of "" + fromFile, this.verbosity);
/*     */           
/*     */           continue;
/*     */         } 
/* 137 */         boolean moved = false;
/* 138 */         File f = new File(fromFile);
/*     */         
/* 140 */         if (f.exists()) {
/* 141 */           File d = new File(toFile);
/*     */           
/*     */           try {
/* 144 */             log(""Attempting to rename: "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */             
/* 146 */             moved = renameFile(f, d, this.filtering, this.forceOverwrite);
/*     */           } catch (IOException ioe) {
/* 148 */             String msg = ""Failed to rename "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */ 
/*     */             
/* 151 */             throw new BuildException(msg, ioe, this.location);
/*     */           } 
/*     */           
/* 154 */           if (!moved) {
/*     */             try {
/* 156 */               log(""Moving "" + fromFile + "" to "" + toFile, this.verbosity);
/*     */ 
/*     */               
/* 159 */               FilterSetCollection executionFilters = new FilterSetCollection();
/*     */               
/* 161 */               if (this.filtering) {
/* 162 */                 executionFilters.addFilterSet(this.project.getGlobalFilterSet());
/*     */               }
/*     */               
/* 165 */               Enumeration filterEnum = getFilterSets().elements();
/*     */               
/* 167 */               while (filterEnum.hasMoreElements()) {
/* 168 */                 executionFilters.addFilterSet(filterEnum.nextElement());
/*     */               }
/*     */ 
/*     */               
/* 172 */               getFileUtils().copyFile(f, d, executionFilters, getFilterChains(), this.forceOverwrite, getPreserveLastModified(), getEncoding(), this.project);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 178 */               f = new File(fromFile);
/* 179 */               if (!f.delete()) {
/* 180 */                 throw new BuildException(""Unable to delete file "" + f.getAbsolutePath());
/*     */               }
/*     */             }
/*     */             catch (IOException ioe) {
/*     */               
/* 185 */               String msg = ""Failed to copy "" + fromFile + "" to "" + toFile + "" due to "" + ioe.getMessage();
/*     */ 
/*     */               
/* 188 */               throw new BuildException(msg, ioe, this.location);
/*     */             } 
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 195 */     if (this.includeEmpty) {
/* 196 */       Enumeration e = this.dirCopyMap.elements();
/* 197 */       int count = 0;
/* 198 */       while (e.hasMoreElements()) {
/* 199 */         File d = new File(e.nextElement());
/* 200 */         if (!d.exists()) {
/* 201 */           if (!d.mkdirs()) {
/* 202 */             log(""Unable to create directory "" + d.getAbsolutePath(), 0);
/*     */             continue;
/*     */           } 
/* 205 */           count++;
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 210 */       if (count > 0) {
/* 211 */         log(""Moved "" + count + "" empty directories to "" + this.destDir.getAbsolutePath());
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 216 */     if (this.filesets.size() > 0) {
/* 217 */       Enumeration e = this.filesets.elements();
/* 218 */       while (e.hasMoreElements()) {
/* 219 */         FileSet fs = e.nextElement();
/* 220 */         File dir = fs.getDir(this.project);
/*     */         
/* 222 */         if (okToDelete(dir)) {
/* 223 */           deleteDir(dir);
/*     */         }
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean okToDelete(File d) {
/* 235 */     String[] list = d.list();
/* 236 */     if (list == null) {
/* 237 */       return false;
/*     */     }
/*     */     
/* 240 */     for (int i = 0; i < list.length; i++) {
/* 241 */       String s = list[i];
/* 242 */       File f = new File(d, s);
/* 243 */       if (f.isDirectory()) {
/* 244 */         if (!okToDelete(f)) {
/* 245 */           return false;
/*     */         }
/*     */       } else {
/* 248 */         return false;
/*     */       } 
/*     */     } 
/*     */     
/* 252 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void deleteDir(File d) {
/* 259 */     String[] list = d.list();
/* 260 */     if (list == null) {
/*     */       return;
/*     */     }
/*     */     
/* 264 */     for (int i = 0; i < list.length; i++) {
/* 265 */       String s = list[i];
/* 266 */       File f = new File(d, s);
/* 267 */       if (f.isDirectory()) {
/* 268 */         deleteDir(f);
/*     */       } else {
/* 270 */         throw new BuildException(""UNEXPECTED ERROR - The file "" + f.getAbsolutePath() + "" should not exist!"");
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 275 */     log(""Deleting directory "" + d.getAbsolutePath(), this.verbosity);
/* 276 */     if (!d.delete()) {
/* 277 */       throw new BuildException(""Unable to delete directory "" + d.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean renameFile(File sourceFile, File destFile, boolean filtering, boolean overwrite) throws IOException, BuildException {
/* 296 */     boolean renamed = true;
/* 297 */     if ((getFilterSets() != null && getFilterSets().size() > 0) || (getFilterChains() != null && getFilterChains().size() > 0)) {
/*     */       
/* 299 */       renamed = false;
/*     */     }
/* 301 */     else if (!filtering) {
/*     */ 
/*     */       
/* 304 */       String parentPath = destFile.getParent();
/* 305 */       if (parentPath != null) {
/* 306 */         File parent = new File(parentPath);
/* 307 */         if (!parent.exists()) {
/* 308 */           parent.mkdirs();
/*     */         }
/*     */       } 
/*     */       
/* 312 */       if (destFile.exists() && destFile.isFile() && 
/* 313 */         !destFile.delete()) {
/* 314 */         throw new BuildException(""Unable to remove existing file "" + destFile);
/*     */       }
/*     */ 
/*     */       
/* 318 */       renamed = sourceFile.renameTo(destFile);
/*     */     } else {
/* 320 */       renamed = false;
/*     */     } 
/*     */     
/* 323 */     return renamed;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Move.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Pack,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Pack
/*     */   extends Task
/*     */ {
/*     */   protected File zipFile;
/*     */   protected File source;
/*     */   
/*  84 */   public void setZipfile(File zipFile) { this.zipFile = zipFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setSrc(File src) { this.source = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 101 */     if (this.zipFile == null) {
/* 102 */       throw new BuildException(""zipfile attribute is required"", this.location);
/*     */     }
/*     */     
/* 105 */     if (this.zipFile.isDirectory()) {
/* 106 */       throw new BuildException(""zipfile attribute must not represent a directory!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 110 */     if (this.source == null) {
/* 111 */       throw new BuildException(""src attribute is required"", this.location);
/*     */     }
/*     */     
/* 114 */     if (this.source.isDirectory()) {
/* 115 */       throw new BuildException(""Src attribute must not represent a directory!"", this.location);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 125 */     validate();
/*     */     
/* 127 */     if (this.zipFile.lastModified() < this.source.lastModified()) {
/* 128 */       log(""Building: "" + this.zipFile.getAbsolutePath());
/* 129 */       pack();
/*     */     } else {
/* 131 */       log(""Nothing to do: "" + this.zipFile.getAbsolutePath() + "" is up to date."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void zipFile(InputStream in, OutputStream zOut) throws IOException {
/* 144 */     byte[] buffer = new byte[8192];
/* 145 */     int count = 0;
/*     */     do {
/* 147 */       zOut.write(buffer, 0, count);
/* 148 */       count = in.read(buffer, 0, buffer.length);
/* 149 */     } while (count != -1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, OutputStream zOut) throws IOException {
/* 160 */     FileInputStream fIn = new FileInputStream(file);
/*     */     try {
/* 162 */       zipFile(fIn, zOut);
/*     */     } finally {
/* 164 */       fIn.close();
/*     */     } 
/*     */   }
/*     */   
/*     */   protected abstract void pack();
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Pack.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Parallel,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Parallel
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*  81 */   private Vector nestedTasks = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void addTask(Task nestedTask) throws BuildException { this.nestedTasks.addElement(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*  98 */     TaskThread[] threads = new TaskThread[this.nestedTasks.size()];
/*  99 */     int threadNumber = 0;
/* 100 */     for (Enumeration e = this.nestedTasks.elements(); e.hasMoreElements(); 
/* 101 */       threadNumber++) {
/* 102 */       Task nestedTask = e.nextElement();
/* 103 */       threads[threadNumber] = new TaskThread(this, threadNumber, nestedTask);
/*     */     } 
/*     */ 
/*     */     
/* 107 */     for (int i = 0; i < threads.length; i++) {
/* 108 */       threads[i].start();
/*     */     }
/*     */ 
/*     */     
/* 112 */     for (int i = 0; i < threads.length; i++) {
/*     */       try {
/* 114 */         threads[i].join();
/* 115 */       } catch (InterruptedException ie) {}
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 121 */     StringBuffer exceptionMessage = new StringBuffer();
/* 122 */     int numExceptions = 0;
/* 123 */     Throwable firstException = null;
/* 124 */     Location firstLocation = Location.UNKNOWN_LOCATION;
/* 125 */     for (int i = 0; i < threads.length; i++) {
/* 126 */       Throwable t = threads[i].getException();
/* 127 */       if (t != null) {
/* 128 */         numExceptions++;
/* 129 */         if (firstException == null) {
/* 130 */           firstException = t;
/*     */         }
/* 132 */         if (t instanceof BuildException && firstLocation == Location.UNKNOWN_LOCATION)
/*     */         {
/* 134 */           firstLocation = ((BuildException)t).getLocation();
/*     */         }
/* 136 */         exceptionMessage.append(StringUtils.LINE_SEP);
/* 137 */         exceptionMessage.append(t.getMessage());
/*     */       } 
/*     */     } 
/*     */     
/* 141 */     if (numExceptions == 1) {
/* 142 */       if (firstException instanceof BuildException) {
/* 143 */         throw (BuildException)firstException;
/*     */       }
/* 145 */       throw new BuildException(firstException);
/*     */     } 
/* 147 */     if (numExceptions > 1) {
/* 148 */       throw new BuildException(exceptionMessage.toString(), firstLocation);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   class TaskThread
/*     */     extends Thread
/*     */   {
/*     */     private Throwable exception;
/*     */     
/*     */     private Task task;
/*     */     
/*     */     private int taskNumber;
/*     */     
/*     */     private final Parallel this$0;
/*     */ 
/*     */     
/*     */     TaskThread(Parallel this$0, int taskNumber, Task task) {
/* 166 */       this.this$0 = this$0;
/* 167 */       this.task = task;
/* 168 */       this.taskNumber = taskNumber;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void run() {
/*     */       try {
/* 177 */         this.task.perform();
/*     */       } catch (Throwable t) {
/* 179 */         this.exception = t = null;
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 188 */     public Throwable getException() { return this.exception; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Parallel.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Patch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Patch
/*     */   extends Task
/*     */ {
/*     */   private File originalFile;
/*     */   private File directory;
/*     */   private boolean havePatchfile = false;
/*  78 */   private Commandline cmd = new Commandline();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  85 */   public void setOriginalfile(File file) { this.originalFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPatchfile(File file) {
/*  92 */     if (!file.exists()) {
/*  93 */       throw new BuildException(""patchfile "" + file + "" doesn't exist"", this.location);
/*     */     }
/*     */     
/*  96 */     this.cmd.createArgument().setValue(""-i"");
/*  97 */     this.cmd.createArgument().setFile(file);
/*  98 */     this.havePatchfile = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBackups(boolean backups) {
/* 105 */     if (backups) {
/* 106 */       this.cmd.createArgument().setValue(""-b"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIgnorewhitespace(boolean ignore) {
/* 114 */     if (ignore) {
/* 115 */       this.cmd.createArgument().setValue(""-l"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setStrip(int num) throws BuildException {
/* 127 */     if (num < 0) {
/* 128 */       throw new BuildException(""strip has to be >= 0"", this.location);
/*     */     }
/* 130 */     this.cmd.createArgument().setValue(""-p"" + num);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setQuiet(boolean q) {
/* 137 */     if (q) {
/* 138 */       this.cmd.createArgument().setValue(""-s"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setReverse(boolean r) {
/* 147 */     if (r) {
/* 148 */       this.cmd.createArgument().setValue(""-R"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public void setDir(File directory) throws BuildException { this.directory = directory; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 167 */     if (!this.havePatchfile) {
/* 168 */       throw new BuildException(""patchfile argument is required"", this.location);
/*     */     }
/*     */     
/* 171 */     Commandline toExecute = (Commandline)this.cmd.clone();
/* 172 */     toExecute.setExecutable(""patch"");
/*     */     
/* 174 */     if (this.originalFile != null) {
/* 175 */       toExecute.createArgument().setFile(this.originalFile);
/*     */     }
/*     */     
/* 178 */     Execute exe = new Execute(new LogStreamHandler(this, 2, 1), null);
/*     */ 
/*     */     
/* 181 */     exe.setCommandline(toExecute.getCommandline());
/*     */     
/* 183 */     if (this.directory != null) {
/* 184 */       if (this.directory.exists() && this.directory.isDirectory())
/* 185 */       { exe.setWorkingDirectory(this.directory); }
/* 186 */       else { if (!this.directory.isDirectory()) {
/* 187 */           throw new BuildException(this.directory + "" is not a directory."", this.location);
/*     */         }
/*     */         
/* 190 */         throw new BuildException(""directory "" + this.directory + "" doesn't exist"", this.location); }
/*     */     
/*     */     } else {
/*     */       
/* 194 */       exe.setWorkingDirectory(getProject().getBaseDir());
/*     */     } 
/*     */     
/* 197 */     log(toExecute.describeCommand(), 3);
/*     */     try {
/* 199 */       exe.execute();
/*     */     } catch (IOException e) {
/* 201 */       throw new BuildException(e, this.location);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Patch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PathConvert,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.DirSet;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileList;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PathConvert
/*     */   extends Task
/*     */ {
/*  86 */   private Path path = null;
/*     */ 
/*     */ 
/*     */   
/*  90 */   private Reference refid = null;
/*     */ 
/*     */ 
/*     */   
/*  94 */   private String targetOS = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean targetWindows = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean onWindows = false;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean setonempty = true;
/*     */ 
/*     */ 
/*     */   
/* 110 */   private String property = null;
/*     */ 
/*     */ 
/*     */   
/* 114 */   private Vector prefixMap = new Vector();
/*     */ 
/*     */ 
/*     */   
/* 118 */   private String pathSep = null;
/*     */ 
/*     */ 
/*     */   
/* 122 */   private String dirSep = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public PathConvert() { this.onWindows = Os.isFamily(""dos""); } public class MapEntry {
/*     */     private String from; private String to; private final PathConvert this$0; public void setFrom(String from) { this.from = from; } public void setTo(String to) { this.to = to; } public String apply(String elem) { if (this.from == null || this.to == null)
/*     */         throw new BuildException(""Both 'from' and 'to' must be set in a map entry"");  String cmpElem = this.this$0.onWindows ? elem.toLowerCase() : elem; String cmpFrom = this.this$0.onWindows ? this.from.toLowerCase() : this.from;
/*     */       if (cmpElem.startsWith(cmpFrom)) {
/*     */         int len = this.from.length();
/*     */         if (len >= elem.length()) {
/*     */           elem = this.to;
/*     */         } else {
/*     */           elem = this.to + elem.substring(len);
/*     */         } 
/*     */       } 
/* 139 */       return elem; } public MapEntry(PathConvert this$0) { this.this$0 = this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 195 */       this.from = null;
/* 196 */       this.to = null; }
/*     */   
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TargetOs
/*     */     extends EnumeratedAttribute
/*     */   {
/* 206 */     public String[] getValues() { return new String[] { ""windows"", ""unix"", ""netware"", ""os/2"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() {
/* 214 */     if (isReference()) {
/* 215 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 218 */     if (this.path == null) {
/* 219 */       this.path = new Path(getProject());
/*     */     }
/* 221 */     return this.path.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MapEntry createMap() {
/* 231 */     MapEntry entry = new MapEntry(this);
/*     */     
/* 233 */     this.prefixMap.addElement(entry);
/* 234 */     return entry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTargetos(String target) {
/* 247 */     TargetOs to = new TargetOs();
/*     */     
/* 249 */     to.setValue(target);
/* 250 */     setTargetos(to);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTargetos(TargetOs target) {
/* 263 */     this.targetOS = target.getValue();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 272 */     this.targetWindows = !this.targetOS.equals(""unix"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setSetonempty(boolean setonempty) { this.setonempty = setonempty; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setProperty(String p) { this.property = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) {
/* 300 */     if (this.path != null) {
/* 301 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 304 */     this.refid = r;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void setPathSep(String sep) { this.pathSep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 325 */   public void setDirSep(String sep) { this.dirSep = sep; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public boolean isReference() { return (this.refid != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 342 */     Path savedPath = this.path;
/* 343 */     String savedPathSep = this.pathSep;
/* 344 */     String savedDirSep = this.dirSep;
/*     */ 
/*     */     
/*     */     try {
/* 348 */       if (isReference()) {
/* 349 */         this.path = (new Path(getProject())).createPath();
/*     */         
/* 351 */         Object obj = this.refid.getReferencedObject(getProject());
/*     */         
/* 353 */         if (obj instanceof Path) {
/* 354 */           this.path.setRefid(this.refid);
/* 355 */         } else if (obj instanceof FileSet) {
/* 356 */           FileSet fs = (FileSet)obj;
/*     */           
/* 358 */           this.path.addFileset(fs);
/* 359 */         } else if (obj instanceof DirSet) {
/* 360 */           DirSet ds = (DirSet)obj;
/*     */           
/* 362 */           this.path.addDirset(ds);
/* 363 */         } else if (obj instanceof FileList) {
/* 364 */           FileList fl = (FileList)obj;
/*     */           
/* 366 */           this.path.addFilelist(fl);
/*     */         } else {
/*     */           
/* 369 */           throw new BuildException(""'refid' does not refer to a path, fileset, dirset, or filelist."");
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 375 */       validateSetup();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 385 */       String fromDirSep = this.onWindows ? ""\\"" : ""/"";
/*     */       
/* 387 */       StringBuffer rslt = new StringBuffer(100);
/*     */ 
/*     */       
/* 390 */       String[] elems = this.path.list();
/*     */       
/* 392 */       for (int i = 0; i < elems.length; i++) {
/* 393 */         String elem = elems[i];
/*     */         
/* 395 */         elem = mapElement(elem);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 400 */         if (i != 0) {
/* 401 */           rslt.append(this.pathSep);
/*     */         }
/*     */         
/* 404 */         StringTokenizer stDirectory = new StringTokenizer(elem, fromDirSep, true);
/*     */         
/* 406 */         String token = null;
/*     */         
/* 408 */         while (stDirectory.hasMoreTokens()) {
/* 409 */           token = stDirectory.nextToken();
/*     */           
/* 411 */           if (fromDirSep.equals(token)) {
/* 412 */             rslt.append(this.dirSep); continue;
/*     */           } 
/* 414 */           rslt.append(token);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 421 */       String value = rslt.toString();
/* 422 */       if (this.setonempty) {
/* 423 */         log(""Set property "" + this.property + "" = "" + value, 3);
/*     */         
/* 425 */         getProject().setNewProperty(this.property, value);
/*     */       }
/* 427 */       else if (rslt.length() > 0) {
/* 428 */         log(""Set property "" + this.property + "" = "" + value, 3);
/*     */         
/* 430 */         getProject().setNewProperty(this.property, value);
/*     */       } 
/*     */     } finally {
/*     */       
/* 434 */       this.path = savedPath;
/* 435 */       this.dirSep = savedDirSep;
/* 436 */       this.pathSep = savedPathSep;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String mapElement(String elem) {
/* 451 */     int size = this.prefixMap.size();
/*     */     
/* 453 */     if (size != 0)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 458 */       for (int i = 0; i < size; i++) {
/* 459 */         MapEntry entry = this.prefixMap.elementAt(i);
/* 460 */         String newElem = entry.apply(elem);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 465 */         if (newElem != elem) {
/* 466 */           elem = newElem;
/*     */           
/*     */           break;
/*     */         } 
/*     */       } 
/*     */     }
/* 472 */     return elem;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validateSetup() throws BuildException {
/* 483 */     if (this.path == null) {
/* 484 */       throw new BuildException(""You must specify a path to convert"");
/*     */     }
/*     */     
/* 487 */     if (this.property == null) {
/* 488 */       throw new BuildException(""You must specify a property"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 493 */     if (this.targetOS == null && this.pathSep == null && this.dirSep == null) {
/* 494 */       throw new BuildException(""You must specify at least one of targetOS, dirSep, or pathSep"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 500 */     String dsep = File.separator;
/* 501 */     String psep = File.pathSeparator;
/*     */     
/* 503 */     if (this.targetOS != null) {
/* 504 */       psep = this.targetWindows ? "";"" : "":"";
/* 505 */       dsep = this.targetWindows ? ""\\"" : ""/"";
/*     */     } 
/*     */     
/* 508 */     if (this.pathSep != null) {
/* 509 */       psep = this.pathSep;
/*     */     }
/*     */     
/* 512 */     if (this.dirSep != null) {
/* 513 */       dsep = this.dirSep;
/*     */     }
/*     */     
/* 516 */     this.pathSep = psep;
/* 517 */     this.dirSep = dsep;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 526 */   private BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested <path> elements when using the refid attribute.""); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\PathConvert.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.ProcessDestroyer,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ProcessDestroyer
/*     */   extends Thread
/*     */ {
/*  70 */   private Vector processes = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ProcessDestroyer() {
/*     */     try {
/*  80 */       Class[] paramTypes = { Thread.class };
/*  81 */       Method addShutdownHook = Runtime.class.getMethod(""addShutdownHook"", paramTypes);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*  86 */       Object[] args = { this };
/*  87 */       addShutdownHook.invoke(Runtime.getRuntime(), args);
/*  88 */     } catch (Exception e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean add(Process process) {
/* 102 */     this.processes.addElement(process);
/* 103 */     return this.processes.contains(process);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public boolean remove(Process process) { return this.processes.removeElement(process); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/* 122 */     synchronized (this.processes) {
/* 123 */       Enumeration e = this.processes.elements();
/* 124 */       while (e.hasMoreElements())
/* 125 */         ((Process)e.nextElement()).destroy(); 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\ProcessDestroyer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Property,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectHelper;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Property
/*     */   extends Task
/*     */ {
/*     */   protected String name;
/*     */   protected String value;
/*     */   protected File file;
/*     */   protected String resource;
/*     */   protected Path classpath;
/*     */   protected String env;
/*     */   protected Reference ref;
/*     */   protected String prefix;
/*     */   private Project fallback;
/*     */   protected boolean userProperty;
/*     */   
/* 119 */   public Property() { this(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 126 */   protected Property(boolean userProperty) { this(userProperty, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Property(boolean userProperty, Project fallback) {
/* 133 */     this.userProperty = userProperty;
/* 134 */     this.fallback = fallback;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */   
/* 146 */   public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   public void setLocation(File location) { setValue(location.getAbsolutePath()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/* 195 */     this.prefix = prefix;
/* 196 */     if (!prefix.endsWith(""."")) {
/* 197 */       this.prefix += ""."";
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setRefid(Reference ref) { this.ref = ref; }
/*     */ 
/*     */ 
/*     */   
/* 220 */   public Reference getRefid() { return this.ref; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 228 */   public void setResource(String resource) { this.resource = resource; }
/*     */ 
/*     */ 
/*     */   
/* 232 */   public String getResource() { return this.resource; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setEnvironment(String env) { this.env = env; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 262 */   public String getEnvironment() { return this.env; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 272 */     if (this.classpath == null) {
/* 273 */       this.classpath = classpath;
/*     */     } else {
/* 275 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 283 */     if (this.classpath == null) {
/* 284 */       this.classpath = new Path(this.project);
/*     */     }
/* 286 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 309 */   public void setUserProperty(boolean userProperty) { log(""DEPRECATED: Ignoring request to set user property in Property task."", 1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 318 */   public String toString() { return (this.value == null) ? """" : this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 327 */     if (this.name != null) {
/* 328 */       if (this.value == null && this.ref == null) {
/* 329 */         throw new BuildException(""You must specify value, location or refid with the name attribute"", this.location);
/*     */       
/*     */       }
/*     */     
/*     */     }
/* 334 */     else if (this.file == null && this.resource == null && this.env == null) {
/* 335 */       throw new BuildException(""You must specify file, resource or environment when not using the name attribute"", this.location);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 341 */     if (this.file == null && this.resource == null && this.prefix != null) {
/* 342 */       throw new BuildException(""Prefix is only valid when loading from a file or resource"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 346 */     if (this.name != null && this.value != null) {
/* 347 */       addProperty(this.name, this.value);
/*     */     }
/*     */     
/* 350 */     if (this.file != null) {
/* 351 */       loadFile(this.file);
/*     */     }
/*     */     
/* 354 */     if (this.resource != null) {
/* 355 */       loadResource(this.resource);
/*     */     }
/*     */     
/* 358 */     if (this.env != null) {
/* 359 */       loadEnvironment(this.env);
/*     */     }
/*     */     
/* 362 */     if (this.name != null && this.ref != null) {
/*     */       try {
/* 364 */         addProperty(this.name, this.ref.getReferencedObject(getProject()).toString());
/*     */       } catch (BuildException be) {
/*     */         
/* 367 */         if (this.fallback != null) {
/* 368 */           addProperty(this.name, this.ref.getReferencedObject(this.fallback).toString());
/*     */         } else {
/*     */           
/* 371 */           throw be;
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadFile(File file) throws BuildException {
/* 382 */     Properties props = new Properties();
/* 383 */     log(""Loading "" + file.getAbsolutePath(), 3);
/*     */     try {
/* 385 */       if (file.exists()) {
/* 386 */         FileInputStream fis = new FileInputStream(file);
/*     */         try {
/* 388 */           props.load(fis);
/*     */         } finally {
/* 390 */           if (fis != null) {
/* 391 */             fis.close();
/*     */           }
/*     */         } 
/* 394 */         addProperties(props);
/*     */       } else {
/* 396 */         log(""Unable to find property file: "" + file.getAbsolutePath(), 3);
/*     */       } 
/*     */     } catch (IOException ex) {
/*     */       
/* 400 */       throw new BuildException(ex, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadResource(String name) {
/* 409 */     Properties props = new Properties();
/* 410 */     log(""Resource Loading "" + name, 3);
/* 411 */     InputStream is = null;
/*     */     try {
/* 413 */       ClassLoader cL = null;
/*     */       
/* 415 */       if (this.classpath != null) {
/* 416 */         AntClassLoader antClassLoader = new AntClassLoader(this.project, this.classpath);
/*     */       } else {
/* 418 */         cL = getClass().getClassLoader();
/*     */       } 
/*     */       
/* 421 */       if (cL == null) {
/* 422 */         is = ClassLoader.getSystemResourceAsStream(name);
/*     */       } else {
/* 424 */         is = cL.getResourceAsStream(name);
/*     */       } 
/*     */       
/* 427 */       if (is != null) {
/* 428 */         props.load(is);
/* 429 */         addProperties(props);
/*     */       } else {
/* 431 */         log(""Unable to find resource "" + name, 1);
/*     */       } 
/*     */     } catch (IOException ex) {
/* 434 */       throw new BuildException(ex, this.location);
/*     */     } finally {
/* 436 */       if (is != null) {
/*     */         try {
/* 438 */           is.close();
/* 439 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void loadEnvironment(String prefix) {
/* 450 */     Properties props = new Properties();
/* 451 */     if (!prefix.endsWith(""."")) {
/* 452 */       prefix = prefix + ""."";
/*     */     }
/* 454 */     log(""Loading Environment "" + prefix, 3);
/* 455 */     Vector osEnv = Execute.getProcEnvironment();
/* 456 */     for (Enumeration e = osEnv.elements(); e.hasMoreElements(); ) {
/* 457 */       String entry = e.nextElement();
/* 458 */       int pos = entry.indexOf('=');
/* 459 */       if (pos == -1) {
/* 460 */         log(""Ignoring: "" + entry, 1); continue;
/*     */       } 
/* 462 */       props.put(prefix + entry.substring(0, pos), entry.substring(pos + 1));
/*     */     } 
/*     */ 
/*     */     
/* 466 */     addProperties(props);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addProperties(Properties props) {
/* 474 */     resolveAllProperties(props);
/* 475 */     Enumeration e = props.keys();
/* 476 */     while (e.hasMoreElements()) {
/* 477 */       String name = e.nextElement();
/* 478 */       String value = props.getProperty(name);
/*     */       
/* 480 */       String v = this.project.replaceProperties(value);
/*     */       
/* 482 */       if (this.prefix != null) {
/* 483 */         name = this.prefix + name;
/*     */       }
/*     */       
/* 486 */       addProperty(name, v);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addProperty(String n, String v) {
/* 496 */     if (this.userProperty) {
/* 497 */       if (this.project.getUserProperty(n) == null) {
/* 498 */         this.project.setInheritedProperty(n, v);
/*     */       } else {
/* 500 */         log(""Override ignored for "" + n, 3);
/*     */       } 
/*     */     } else {
/* 503 */       this.project.setNewProperty(n, v);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveAllProperties(Properties props) throws BuildException {
/* 512 */     for (Enumeration e = props.keys(); e.hasMoreElements(); ) {
/* 513 */       String name = e.nextElement();
/* 514 */       String value = props.getProperty(name);
/*     */       
/* 516 */       boolean resolved = false;
/* 517 */       while (!resolved) {
/* 518 */         Vector fragments = new Vector();
/* 519 */         Vector propertyRefs = new Vector();
/* 520 */         ProjectHelper.parsePropertyString(value, fragments, propertyRefs);
/*     */ 
/*     */         
/* 523 */         resolved = true;
/* 524 */         if (propertyRefs.size() != 0) {
/* 525 */           StringBuffer sb = new StringBuffer();
/* 526 */           Enumeration i = fragments.elements();
/* 527 */           Enumeration j = propertyRefs.elements();
/* 528 */           while (i.hasMoreElements()) {
/* 529 */             String fragment = i.nextElement();
/* 530 */             if (fragment == null) {
/* 531 */               String propertyName = j.nextElement();
/* 532 */               if (propertyName.equals(name)) {
/* 533 */                 throw new BuildException(""Property "" + name + "" was circularly "" + ""defined."");
/*     */               }
/*     */ 
/*     */               
/* 537 */               fragment = getProject().getProperty(propertyName);
/* 538 */               if (fragment == null) {
/* 539 */                 if (props.containsKey(propertyName)) {
/* 540 */                   fragment = props.getProperty(propertyName);
/* 541 */                   resolved = false;
/*     */                 } else {
/* 543 */                   fragment = ""${"" + propertyName + ""}"";
/*     */                 } 
/*     */               }
/*     */             } 
/* 547 */             sb.append(fragment);
/*     */           } 
/* 549 */           value = sb.toString();
/* 550 */           props.put(name, value);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Property.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.PumpStreamHandler,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PumpStreamHandler
/*     */   implements ExecuteStreamHandler
/*     */ {
/*     */   private Thread inputThread;
/*     */   private Thread errorThread;
/*     */   private OutputStream out;
/*     */   private OutputStream err;
/*     */   
/*     */   public PumpStreamHandler(OutputStream out, OutputStream err) {
/*  78 */     this.out = out;
/*  79 */     this.err = err;
/*     */   }
/*     */ 
/*     */   
/*  83 */   public PumpStreamHandler(OutputStream outAndErr) { this(outAndErr, outAndErr); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   public PumpStreamHandler() { this(System.out, System.err); }
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setProcessOutputStream(InputStream is) { createProcessOutputPump(is, this.out); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setProcessErrorStream(InputStream is) { createProcessErrorPump(is, this.err); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void setProcessInputStream(OutputStream os) {}
/*     */ 
/*     */ 
/*     */   
/*     */   public void start() {
/* 105 */     this.inputThread.start();
/* 106 */     this.errorThread.start();
/*     */   }
/*     */ 
/*     */   
/*     */   public void stop() {
/*     */     try {
/* 112 */       this.inputThread.join();
/* 113 */     } catch (InterruptedException e) {}
/*     */     try {
/* 115 */       this.errorThread.join();
/* 116 */     } catch (InterruptedException e) {}
/*     */     try {
/* 118 */       this.err.flush();
/* 119 */     } catch (IOException e) {}
/*     */     try {
/* 121 */       this.out.flush();
/* 122 */     } catch (IOException e) {}
/*     */   }
/*     */ 
/*     */   
/* 126 */   protected OutputStream getErr() { return this.err; }
/*     */ 
/*     */ 
/*     */   
/* 130 */   protected OutputStream getOut() { return this.out; }
/*     */ 
/*     */ 
/*     */   
/* 134 */   protected void createProcessOutputPump(InputStream is, OutputStream os) { this.inputThread = createPump(is, os); }
/*     */ 
/*     */ 
/*     */   
/* 138 */   protected void createProcessErrorPump(InputStream is, OutputStream os) { this.errorThread = createPump(is, os); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Thread createPump(InputStream is, OutputStream os) {
/* 147 */     Thread result = new Thread(new StreamPumper(is, os));
/* 148 */     result.setDaemon(true);
/* 149 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\PumpStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Recorder,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.BuildListener;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Recorder
/*     */   extends Task
/*     */ {
/*  95 */   private String filename = null;
/*     */ 
/*     */ 
/*     */   
/*  99 */   private Boolean append = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   private Boolean start = null;
/*     */   
/* 106 */   private int loglevel = -1;
/*     */   
/*     */   private boolean emacsMode = false;
/*     */   
/* 110 */   private static Hashtable recorderEntries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void setName(String fname) { this.filename = fname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setAction(ActionChoices action) {
/* 135 */     if (action.getValue().equalsIgnoreCase(""start"")) {
/* 136 */       this.start = Boolean.TRUE;
/*     */     } else {
/* 138 */       this.start = Boolean.FALSE;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public void setAppend(boolean append) { this.append = new Boolean(append); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLoglevel(VerbosityLevelChoices level) {
/* 161 */     String lev = level.getValue();
/*     */     
/* 163 */     if (lev.equalsIgnoreCase(""error"")) {
/* 164 */       this.loglevel = 0;
/* 165 */     } else if (lev.equalsIgnoreCase(""warn"")) {
/* 166 */       this.loglevel = 1;
/* 167 */     } else if (lev.equalsIgnoreCase(""info"")) {
/* 168 */       this.loglevel = 2;
/* 169 */     } else if (lev.equalsIgnoreCase(""verbose"")) {
/* 170 */       this.loglevel = 3;
/* 171 */     } else if (lev.equalsIgnoreCase(""debug"")) {
/* 172 */       this.loglevel = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 181 */     if (this.filename == null) {
/* 182 */       throw new BuildException(""No filename specified"");
/*     */     }
/*     */     
/* 185 */     getProject().log(""setting a recorder for name "" + this.filename, 4);
/*     */ 
/*     */ 
/*     */     
/* 189 */     RecorderEntry recorder = getRecorder(this.filename, getProject());
/*     */     
/* 191 */     recorder.setMessageOutputLevel(this.loglevel);
/* 192 */     recorder.setRecordState(this.start);
/* 193 */     recorder.setEmacsMode(this.emacsMode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ActionChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 204 */     private static final String[] values = new String[] { ""start"", ""stop"" };
/*     */ 
/*     */ 
/*     */     
/* 208 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class VerbosityLevelChoices
/*     */     extends EnumeratedAttribute
/*     */   {
/* 218 */     private static final String[] values = new String[] { ""error"", ""warn"", ""info"", ""verbose"", ""debug"" };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 223 */     public String[] getValues() { return values; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected RecorderEntry getRecorder(String name, Project proj) throws BuildException {
/*     */     RecorderEntry recorderEntry;
/* 234 */     Object o = recorderEntries.get(name);
/*     */ 
/*     */     
/* 237 */     if (o == null) {
/*     */       
/*     */       try {
/* 240 */         recorderEntry = new RecorderEntry(name);
/*     */         
/* 242 */         PrintStream out = null;
/*     */         
/* 244 */         if (this.append == null) {
/* 245 */           out = new PrintStream(new FileOutputStream(name));
/*     */         } else {
/*     */           
/* 248 */           out = new PrintStream(new FileOutputStream(name, this.append.booleanValue()));
/*     */         } 
/*     */         
/* 251 */         recorderEntry.setErrorPrintStream(out);
/* 252 */         recorderEntry.setOutputPrintStream(out);
/*     */       } catch (IOException ioe) {
/* 254 */         throw new BuildException(""Problems creating a recorder entry"", ioe);
/*     */       } 
/*     */       
/* 257 */       proj.addBuildListener((BuildListener)recorderEntry);
/* 258 */       recorderEntries.put(name, recorderEntry);
/*     */     } else {
/* 260 */       recorderEntry = (RecorderEntry)o;
/*     */     } 
/* 262 */     return recorderEntry;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Recorder.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.RecorderEntry,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import org.apache.tools.ant.BuildEvent;
/*     */ import org.apache.tools.ant.BuildLogger;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RecorderEntry
/*     */   implements BuildLogger
/*     */ {
/*  78 */   private String filename = null;
/*     */   
/*     */   private boolean record = true;
/*     */   
/*  82 */   private int loglevel = 2;
/*     */   
/*  84 */   private PrintStream out = null;
/*     */   
/*  86 */   private long targetStartTime = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean emacsMode = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   protected RecorderEntry(String name) { this.filename = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String getFilename() { return this.filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRecordState(Boolean state) {
/* 117 */     if (state != null) {
/* 118 */       this.record = state.booleanValue();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void buildStarted(BuildEvent event) { log(""> BUILD STARTED"", 4); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void buildFinished(BuildEvent event) {
/* 129 */     log(""< BUILD FINISHED"", 4);
/*     */     
/* 131 */     Throwable error = event.getException();
/*     */     
/* 133 */     if (error == null) {
/* 134 */       this.out.println(StringUtils.LINE_SEP + ""BUILD SUCCESSFUL"");
/*     */     } else {
/* 136 */       this.out.println(StringUtils.LINE_SEP + ""BUILD FAILED"" + StringUtils.LINE_SEP);
/*     */       
/* 138 */       error.printStackTrace(this.out);
/*     */     } 
/* 140 */     this.out.flush();
/* 141 */     this.out.close();
/*     */   }
/*     */ 
/*     */   
/*     */   public void targetStarted(BuildEvent event) {
/* 146 */     log("">> TARGET STARTED -- "" + event.getTarget(), 4);
/* 147 */     log(StringUtils.LINE_SEP + event.getTarget().getName() + "":"", 2);
/*     */     
/* 149 */     this.targetStartTime = System.currentTimeMillis();
/*     */   }
/*     */ 
/*     */   
/*     */   public void targetFinished(BuildEvent event) {
/* 154 */     log(""<< TARGET FINISHED -- "" + event.getTarget(), 4);
/*     */     
/* 156 */     String time = formatTime(System.currentTimeMillis() - this.targetStartTime);
/*     */     
/* 158 */     log(event.getTarget() + "":  duration "" + time, 3);
/* 159 */     this.out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void taskStarted(BuildEvent event) { log("">>> TASK STARTED -- "" + event.getTask(), 4); }
/*     */ 
/*     */ 
/*     */   
/*     */   public void taskFinished(BuildEvent event) {
/* 169 */     log(""<<< TASK FINISHED -- "" + event.getTask(), 4);
/* 170 */     this.out.flush();
/*     */   }
/*     */ 
/*     */   
/*     */   public void messageLogged(BuildEvent event) {
/* 175 */     log(""--- MESSAGE LOGGED"", 4);
/*     */     
/* 177 */     StringBuffer buf = new StringBuffer();
/*     */     
/* 179 */     if (event.getTask() != null) {
/* 180 */       String name = event.getTask().getTaskName();
/*     */       
/* 182 */       if (!this.emacsMode) {
/* 183 */         String label = ""["" + name + ""] "";
/* 184 */         int size = 12 - label.length();
/*     */         
/* 186 */         for (int i = 0; i < size; i++) {
/* 187 */           buf.append("" "");
/*     */         }
/* 189 */         buf.append(label);
/*     */       } 
/*     */     } 
/* 192 */     buf.append(event.getMessage());
/*     */     
/* 194 */     log(buf.toString(), event.getPriority());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void log(String mesg, int level) {
/* 205 */     if (this.record && level <= this.loglevel) {
/* 206 */       this.out.println(mesg);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public void setMessageOutputLevel(int level) {
/* 212 */     if (level >= 0 && level <= 4) {
/* 213 */       this.loglevel = level;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 219 */   public void setOutputPrintStream(PrintStream output) { this.out = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setEmacsMode(boolean emacsMode) { this.emacsMode = emacsMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 229 */   public void setErrorPrintStream(PrintStream err) { this.out = err; }
/*     */ 
/*     */ 
/*     */   
/*     */   private static String formatTime(long millis) {
/* 234 */     long seconds = millis / 1000L;
/* 235 */     long minutes = seconds / 60L;
/*     */ 
/*     */     
/* 238 */     if (minutes > 0L) {
/* 239 */       return Long.toString(minutes) + "" minute"" + ((minutes == 1L) ? "" "" : ""s "") + Long.toString(seconds % 60L) + "" second"" + ((seconds % 60L == 1L) ? """" : ""s"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 244 */     return Long.toString(seconds) + "" second"" + ((seconds % 60L == 1L) ? """" : ""s"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\RecorderEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rename,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rename
/*     */   extends Task
/*     */ {
/*     */   private File src;
/*     */   private File dest;
/*     */   private boolean replace = true;
/*     */   
/*  83 */   public void setSrc(File src) { this.src = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setReplace(String replace) { this.replace = Project.toBoolean(replace); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 109 */     log(""DEPRECATED - The rename task is deprecated.  Use move instead."");
/*     */     
/* 111 */     if (this.dest == null) {
/* 112 */       throw new BuildException(""dest attribute is required"", this.location);
/*     */     }
/*     */     
/* 115 */     if (this.src == null) {
/* 116 */       throw new BuildException(""src attribute is required"", this.location);
/*     */     }
/*     */     
/* 119 */     if (this.replace && this.dest.exists() && 
/* 120 */       !this.dest.delete()) {
/* 121 */       throw new BuildException(""Unable to remove existing file "" + this.dest);
/*     */     }
/*     */ 
/*     */     
/* 125 */     if (!this.src.renameTo(this.dest))
/* 126 */       throw new BuildException(""Unable to rename "" + this.src + "" to "" + this.dest); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Rename.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Replace,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Reader;
/*     */ import java.io.Writer;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Replace
/*     */   extends MatchingTask
/*     */ {
/*  96 */   private File src = null;
/*  97 */   private NestedString token = null;
/*  98 */   private NestedString value = new NestedString(this);
/*     */   
/* 100 */   private File propertyFile = null;
/* 101 */   private File replaceFilterFile = null;
/* 102 */   private Properties properties = null;
/* 103 */   private Vector replacefilters = new Vector();
/*     */   
/* 105 */   private File dir = null;
/*     */   
/*     */   private int fileCount;
/*     */   
/*     */   private int replaceCount;
/*     */   
/*     */   private boolean summary = false;
/* 112 */   private String encoding = null;
/*     */   
/* 114 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */   
/*     */   public class NestedString { private StringBuffer buf;
/*     */     
/*     */     public NestedString(Replace this$0) {
/* 119 */       this.this$0 = this$0;
/*     */       
/* 121 */       this.buf = new StringBuffer();
/*     */     }
/*     */     private final Replace this$0;
/* 124 */     public void addText(String val) { this.buf.append(val); }
/*     */ 
/*     */ 
/*     */     
/* 128 */     public String getText() { return this.buf.toString(); } }
/*     */   
/*     */   public class Replacefilter { private String token;
/*     */     private String value;
/*     */     private String property;
/*     */     private final Replace this$0;
/*     */     
/* 135 */     public Replacefilter(Replace this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void validate() throws BuildException {
/* 146 */       if (this.token == null) {
/* 147 */         String message = ""token is a mandatory attribute of replacefilter."";
/*     */         
/* 149 */         throw new BuildException(message);
/*     */       } 
/*     */       
/* 152 */       if ("""".equals(this.token)) {
/* 153 */         String message = ""The token attribute must not be an empty string."";
/*     */         
/* 155 */         throw new BuildException(message);
/*     */       } 
/*     */ 
/*     */       
/* 159 */       if (this.value != null && this.property != null) {
/* 160 */         String message = ""Either value or property can be specified, but a replacefilter element cannot have both."";
/*     */ 
/*     */         
/* 163 */         throw new BuildException(message);
/*     */       } 
/*     */       
/* 166 */       if (this.property != null) {
/*     */         
/* 168 */         if (this.this$0.propertyFile == null) {
/* 169 */           String message = ""The replacefilter's property attribute can only be used with the replacetask's propertyFile attribute."";
/*     */ 
/*     */           
/* 172 */           throw new BuildException(message);
/*     */         } 
/*     */ 
/*     */         
/* 176 */         if (this.this$0.properties == null || this.this$0.properties.getProperty(this.property) == null) {
/*     */           
/* 178 */           String message = ""property \"""" + this.property + ""\"" was not found in "" + this.this$0.propertyFile.getPath();
/*     */           
/* 180 */           throw new BuildException(message);
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getReplaceValue() {
/* 190 */       if (this.property != null)
/* 191 */         return this.this$0.properties.getProperty(this.property); 
/* 192 */       if (this.value != null)
/* 193 */         return this.value; 
/* 194 */       if (this.this$0.value != null) {
/* 195 */         return this.this$0.value.getText();
/*     */       }
/*     */       
/* 198 */       return new String("""");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 207 */     public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 215 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 224 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 232 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 241 */     public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 250 */     public String getProperty() { return this.property; } }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 260 */     Vector savedFilters = (Vector)this.replacefilters.clone();
/* 261 */     Properties savedProperties = (this.properties == null) ? null : (Properties)this.properties.clone();
/*     */ 
/*     */     
/*     */     try {
/* 265 */       if (this.replaceFilterFile != null) {
/* 266 */         Properties props = getProperties(this.replaceFilterFile);
/* 267 */         Enumeration enum = props.keys();
/* 268 */         while (enum.hasMoreElements()) {
/* 269 */           String token = enum.nextElement().toString();
/* 270 */           Replacefilter replaceFilter = createReplacefilter();
/* 271 */           replaceFilter.setToken(token);
/* 272 */           replaceFilter.setValue(props.getProperty(token));
/*     */         } 
/*     */       } 
/*     */       
/* 276 */       validateAttributes();
/*     */       
/* 278 */       if (this.propertyFile != null) {
/* 279 */         this.properties = getProperties(this.propertyFile);
/*     */       }
/*     */       
/* 282 */       validateReplacefilters();
/* 283 */       this.fileCount = 0;
/* 284 */       this.replaceCount = 0;
/*     */       
/* 286 */       if (this.src != null) {
/* 287 */         processFile(this.src);
/*     */       }
/*     */       
/* 290 */       if (this.dir != null) {
/* 291 */         DirectoryScanner ds = getDirectoryScanner(this.dir);
/* 292 */         String[] srcs = ds.getIncludedFiles();
/*     */         
/* 294 */         for (int i = 0; i < srcs.length; i++) {
/* 295 */           File file = new File(this.dir, srcs[i]);
/* 296 */           processFile(file);
/*     */         } 
/*     */       } 
/*     */       
/* 300 */       if (this.summary) {
/* 301 */         log(""Replaced "" + this.replaceCount + "" occurrences in "" + this.fileCount + "" files."", 2);
/*     */       }
/*     */     } finally {
/*     */       
/* 305 */       this.replacefilters = savedFilters;
/* 306 */       this.properties = savedProperties;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateAttributes() throws BuildException {
/* 318 */     if (this.src == null && this.dir == null) {
/* 319 */       String message = ""Either the file or the dir attribute must be specified"";
/*     */       
/* 321 */       throw new BuildException(message, this.location);
/*     */     } 
/* 323 */     if (this.propertyFile != null && !this.propertyFile.exists()) {
/* 324 */       String message = ""Property file "" + this.propertyFile.getPath() + "" does not exist."";
/*     */       
/* 326 */       throw new BuildException(message, this.location);
/*     */     } 
/* 328 */     if (this.token == null && this.replacefilters.size() == 0) {
/* 329 */       String message = ""Either token or a nested replacefilter must be specified"";
/*     */       
/* 331 */       throw new BuildException(message, this.location);
/*     */     } 
/* 333 */     if (this.token != null && """".equals(this.token.getText())) {
/* 334 */       String message = ""The token attribute must not be an empty string."";
/* 335 */       throw new BuildException(message, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validateReplacefilters() throws BuildException {
/* 347 */     for (int i = 0; i < this.replacefilters.size(); i++) {
/* 348 */       Replacefilter element = this.replacefilters.elementAt(i);
/*     */       
/* 350 */       element.validate();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Properties getProperties(File propertyFile) throws BuildException {
/* 362 */     Properties properties = new Properties();
/*     */     
/*     */     try {
/* 365 */       properties.load(new FileInputStream(propertyFile));
/*     */     } catch (FileNotFoundException e) {
/* 367 */       String message = ""Property file ("" + propertyFile.getPath() + "") not found."";
/*     */       
/* 369 */       throw new BuildException(message);
/*     */     } catch (IOException e) {
/* 371 */       String message = ""Property file ("" + propertyFile.getPath() + "") cannot be loaded."";
/*     */       
/* 373 */       throw new BuildException(message);
/*     */     } 
/*     */     
/* 376 */     return properties;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFile(File src) throws BuildException {
/* 388 */     if (!src.exists()) {
/* 389 */       throw new BuildException(""Replace: source file "" + src.getPath() + "" doesn't exist"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 393 */     File temp = this.fileUtils.createTempFile(""rep"", "".tmp"", this.fileUtils.getParentFile(src));
/*     */ 
/*     */     
/* 396 */     Reader reader = null;
/* 397 */     Writer writer = null;
/*     */     try {
/* 399 */       reader = (this.encoding == null) ? new FileReader(src) : new InputStreamReader(new FileInputStream(src), this.encoding);
/*     */       
/* 401 */       writer = (this.encoding == null) ? new FileWriter(temp) : new OutputStreamWriter(new FileOutputStream(temp), this.encoding);
/*     */ 
/*     */       
/* 404 */       BufferedReader br = new BufferedReader(reader);
/* 405 */       BufferedWriter bw = new BufferedWriter(writer);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 412 */       int fileLengthInBytes = (int)src.length();
/* 413 */       StringBuffer tmpBuf = new StringBuffer(fileLengthInBytes);
/* 414 */       int readChar = 0;
/* 415 */       int totread = 0;
/*     */       while (true) {
/* 417 */         readChar = br.read();
/* 418 */         if (readChar < 0)
/* 419 */           break;  tmpBuf.append((char)readChar);
/* 420 */         totread++;
/*     */       } 
/*     */ 
/*     */       
/* 424 */       String buf = tmpBuf.toString();
/*     */ 
/*     */       
/* 427 */       String newString = new String(buf);
/*     */       
/* 429 */       if (this.token != null) {
/*     */ 
/*     */ 
/*     */         
/* 433 */         String val = stringReplace(this.value.getText(), ""\n"", StringUtils.LINE_SEP);
/*     */         
/* 435 */         String tok = stringReplace(this.token.getText(), ""\n"", StringUtils.LINE_SEP);
/*     */ 
/*     */ 
/*     */         
/* 439 */         log(""Replacing in "" + src.getPath() + "": "" + this.token.getText() + "" --> "" + this.value.getText(), 3);
/*     */         
/* 441 */         newString = stringReplace(newString, tok, val);
/*     */       } 
/*     */       
/* 444 */       if (this.replacefilters.size() > 0) {
/* 445 */         newString = processReplacefilters(newString, src.getPath());
/*     */       }
/*     */       
/* 448 */       boolean changes = !newString.equals(buf);
/* 449 */       if (changes) {
/* 450 */         bw.write(newString, 0, newString.length());
/* 451 */         bw.flush();
/*     */       } 
/*     */ 
/*     */       
/* 455 */       bw.close();
/* 456 */       writer = null;
/* 457 */       br.close();
/* 458 */       reader = null;
/*     */ 
/*     */ 
/*     */       
/* 462 */       if (changes) {
/* 463 */         this.fileCount++;
/* 464 */         if (!src.delete()) {
/* 465 */           throw new BuildException(""Couldn't delete "" + src, getLocation());
/*     */         }
/*     */         
/* 468 */         if (!temp.renameTo(src)) {
/* 469 */           throw new BuildException(""Couldn't rename temporary file "" + temp, getLocation());
/*     */         }
/*     */         
/* 472 */         temp = null;
/*     */       } 
/*     */     } catch (IOException ioe) {
/* 475 */       throw new BuildException(""IOException in "" + src + "" - "" + ioe.getClass().getName() + "":"" + ioe.getMessage(), ioe, this.location);
/*     */     }
/*     */     finally {
/*     */       
/* 479 */       if (reader != null) {
/*     */         try {
/* 481 */           reader.close();
/* 482 */         } catch (IOException e) {}
/*     */       }
/* 484 */       if (writer != null) {
/*     */         try {
/* 486 */           writer.close();
/* 487 */         } catch (IOException e) {}
/*     */       }
/* 489 */       if (temp != null) {
/* 490 */         temp.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String processReplacefilters(String buffer, String filename) {
/* 503 */     String newString = new String(buffer);
/*     */     
/* 505 */     for (int i = 0; i < this.replacefilters.size(); i++) {
/* 506 */       Replacefilter filter = this.replacefilters.elementAt(i);
/*     */ 
/*     */       
/* 509 */       log(""Replacing in "" + filename + "": "" + filter.getToken() + "" --> "" + filter.getReplaceValue(), 3);
/*     */       
/* 511 */       newString = stringReplace(newString, filter.getToken(), filter.getReplaceValue());
/*     */     } 
/*     */ 
/*     */     
/* 515 */     return newString;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 524 */   public void setFile(File file) { this.src = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 536 */   public void setSummary(boolean summary) { this.summary = summary; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 548 */   public void setReplaceFilterFile(File filename) { this.replaceFilterFile = filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 557 */   public void setDir(File dir) { this.dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 568 */   public void setToken(String token) { createReplaceToken().addText(token); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 577 */   public void setValue(String value) { createReplaceValue().addText(value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 587 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NestedString createReplaceToken() {
/* 595 */     if (this.token == null) {
/* 596 */       this.token = new NestedString(this);
/*     */     }
/* 598 */     return this.token;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 606 */   public NestedString createReplaceValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 617 */   public void setPropertyFile(File filename) { this.propertyFile = filename; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Replacefilter createReplacefilter() {
/* 624 */     Replacefilter filter = new Replacefilter(this);
/* 625 */     this.replacefilters.addElement(filter);
/* 626 */     return filter;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String stringReplace(String str, String str1, String str2) {
/* 633 */     StringBuffer ret = new StringBuffer();
/* 634 */     int start = 0;
/* 635 */     int found = str.indexOf(str1);
/* 636 */     while (found >= 0) {
/*     */       
/* 638 */       if (found > start) {
/* 639 */         ret.append(str.substring(start, found));
/*     */       }
/*     */ 
/*     */       
/* 643 */       if (str2 != null) {
/* 644 */         ret.append(str2);
/*     */       }
/*     */ 
/*     */       
/* 648 */       start = found + str1.length();
/* 649 */       found = str.indexOf(str1, start);
/* 650 */       this.replaceCount++;
/*     */     } 
/*     */ 
/*     */     
/* 654 */     if (str.length() > start) {
/* 655 */       ret.append(str.substring(start, str.length()));
/*     */     }
/*     */     
/* 658 */     return ret.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Replace.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Rmic,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.rmi.Remote;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapter;
/*     */ import org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.ant.util.facade.FacadeTaskHelper;
/*     */ import org.apache.tools.ant.util.facade.ImplementationSpecificArgument;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Rmic
/*     */   extends MatchingTask
/*     */ {
/*     */   private static final String FAIL_MSG = ""Rmic failed; see the compiler error output for details."";
/*     */   private File baseDir;
/*     */   private String classname;
/*     */   private File sourceBase;
/*     */   private String stubVersion;
/*     */   private Path compileClasspath;
/*     */   private Path extdirs;
/*     */   private boolean verify = false;
/*     */   private boolean filtering = false;
/*     */   private boolean iiop = false;
/*     */   private String iiopopts;
/*     */   private boolean idl = false;
/*     */   private String idlopts;
/*     */   private boolean debug = false;
/*     */   private boolean includeAntRuntime = true;
/*     */   private boolean includeJavaRuntime = false;
/* 146 */   private Vector compileList = new Vector();
/*     */   
/* 148 */   private ClassLoader loader = null;
/*     */   
/* 150 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */   
/*     */   private FacadeTaskHelper facade;
/*     */   
/*     */   public Rmic() {
/*     */     try {
/* 156 */       Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 157 */       this.facade = new FacadeTaskHelper(""kaffe"");
/*     */     } catch (ClassNotFoundException cnfe) {
/* 159 */       this.facade = new FacadeTaskHelper(""sun"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setBase(File base) { this.baseDir = base; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 175 */   public File getBase() { return this.baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setClassname(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public String getClassname() { return this.classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void setSourceBase(File sourceBase) { this.sourceBase = sourceBase; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   public File getSourceBase() { return this.sourceBase; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 212 */   public void setStubVersion(String stubVersion) { this.stubVersion = stubVersion; }
/*     */ 
/*     */ 
/*     */   
/* 216 */   public String getStubVersion() { return this.stubVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 224 */   public void setFiltering(boolean filter) { this.filtering = filter; }
/*     */ 
/*     */ 
/*     */   
/* 228 */   public boolean getFiltering() { return this.filtering; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 236 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 243 */   public boolean getDebug() { return this.debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 250 */     if (this.compileClasspath == null) {
/* 251 */       this.compileClasspath = classpath;
/*     */     } else {
/* 253 */       this.compileClasspath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 261 */     if (this.compileClasspath == null) {
/* 262 */       this.compileClasspath = new Path(this.project);
/*     */     }
/* 264 */     return this.compileClasspath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 272 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 279 */   public Path getClasspath() { return this.compileClasspath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 290 */   public void setVerify(boolean verify) { this.verify = verify; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public boolean getVerify() { return this.verify; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 304 */   public void setIiop(boolean iiop) { this.iiop = iiop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public boolean getIiop() { return this.iiop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 318 */   public void setIiopopts(String iiopopts) { this.iiopopts = iiopopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 325 */   public String getIiopopts() { return this.iiopopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 334 */   public void setIdl(boolean idl) { this.idl = idl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 341 */   public boolean getIdl() { return this.idl; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 348 */   public void setIdlopts(String idlopts) { this.idlopts = idlopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public String getIdlopts() { return this.idlopts; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 362 */   public Vector getFileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 371 */   public void setIncludeantruntime(boolean include) { this.includeAntRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 379 */   public boolean getIncludeantruntime() { return this.includeAntRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 389 */   public void setIncludejavaruntime(boolean include) { this.includeJavaRuntime = include; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 397 */   public boolean getIncludejavaruntime() { return this.includeJavaRuntime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExtdirs(Path extdirs) {
/* 405 */     if (this.extdirs == null) {
/* 406 */       this.extdirs = extdirs;
/*     */     } else {
/* 408 */       this.extdirs.append(extdirs);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createExtdirs() {
/* 416 */     if (this.extdirs == null) {
/* 417 */       this.extdirs = new Path(this.project);
/*     */     }
/* 419 */     return this.extdirs.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 427 */   public Path getExtdirs() { return this.extdirs; }
/*     */ 
/*     */ 
/*     */   
/* 431 */   public Vector getCompileList() { return this.compileList; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 441 */   public void setCompiler(String compiler) { this.facade.setImplementation(compiler); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getCompiler() {
/* 449 */     this.facade.setMagicValue(getProject().getProperty(""build.rmic""));
/* 450 */     return this.facade.getImplementation();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ImplementationSpecificArgument createCompilerArg() {
/* 458 */     ImplementationSpecificArgument arg = new ImplementationSpecificArgument(this);
/*     */     
/* 460 */     this.facade.addImplementationArgument(arg);
/* 461 */     return arg;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCurrentCompilerArgs() {
/* 470 */     getCompiler();
/* 471 */     return this.facade.getArgs();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 479 */     if (this.baseDir == null) {
/* 480 */       throw new BuildException(""base attribute must be set!"", this.location);
/*     */     }
/* 482 */     if (!this.baseDir.exists()) {
/* 483 */       throw new BuildException(""base does not exist!"", this.location);
/*     */     }
/*     */     
/* 486 */     if (this.verify) {
/* 487 */       log(""Verify has been turned on."", 3);
/*     */     }
/*     */     
/* 490 */     RmicAdapter adapter = RmicAdapterFactory.getRmic(getCompiler(), this);
/*     */ 
/*     */     
/* 493 */     adapter.setRmic(this);
/*     */     
/* 495 */     Path classpath = adapter.getClasspath();
/* 496 */     this.loader = (ClassLoader)new AntClassLoader(this.project, classpath);
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 501 */       if (this.classname == null) {
/* 502 */         DirectoryScanner ds = getDirectoryScanner(this.baseDir);
/* 503 */         String[] files = ds.getIncludedFiles();
/* 504 */         scanDir(this.baseDir, files, adapter.getMapper());
/*     */       } else {
/*     */         
/* 507 */         scanDir(this.baseDir, new String[] { this.classname.replace('.', File.separatorChar) + "".class"" }adapter.getMapper());
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 514 */       int fileCount = this.compileList.size();
/* 515 */       if (fileCount > 0) {
/* 516 */         log(""RMI Compiling "" + fileCount + "" class"" + ((fileCount > 1) ? ""es"" : """") + "" to "" + this.baseDir, 2);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 521 */         if (!adapter.execute()) {
/* 522 */           throw new BuildException(""Rmic failed; see the compiler error output for details."", this.location);
/*     */         }
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 531 */       if (null != this.sourceBase && !this.baseDir.equals(this.sourceBase) && fileCount > 0)
/*     */       {
/* 533 */         if (this.idl) {
/* 534 */           log(""Cannot determine sourcefiles in idl mode, "", 1);
/*     */           
/* 536 */           log(""sourcebase attribute will be ignored."", 1);
/*     */         } else {
/*     */           
/* 539 */           for (int j = 0; j < fileCount; j++) {
/* 540 */             moveGeneratedFile(this.baseDir, this.sourceBase, this.compileList.elementAt(j), adapter);
/*     */           }
/*     */         }
/*     */       
/*     */       }
/*     */     } finally {
/*     */       
/* 547 */       this.compileList.removeAllElements();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void moveGeneratedFile(File baseDir, File sourceBaseFile, String classname, RmicAdapter adapter) throws BuildException {
/* 562 */     String classFileName = classname.replace('.', File.separatorChar) + "".class"";
/*     */     
/* 564 */     String[] generatedFiles = adapter.getMapper().mapFileName(classFileName);
/*     */ 
/*     */     
/* 567 */     for (int i = 0; i < generatedFiles.length; i++) {
/* 568 */       if (generatedFiles[i].endsWith("".class"")) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 574 */         String sourceFileName = generatedFiles[i].substring(0, classFileName.length() - 6) + "".java"";
/*     */ 
/*     */ 
/*     */         
/* 578 */         File oldFile = new File(baseDir, sourceFileName);
/* 579 */         if (oldFile.exists()) {
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 584 */           File newFile = new File(sourceBaseFile, sourceFileName);
/*     */           try {
/* 586 */             if (this.filtering) {
/* 587 */               this.fileUtils.copyFile(oldFile, newFile, new FilterSetCollection(getProject().getGlobalFilterSet()));
/*     */             }
/*     */             else {
/*     */               
/* 591 */               this.fileUtils.copyFile(oldFile, newFile);
/*     */             } 
/* 593 */             oldFile.delete();
/*     */           } catch (IOException ioe) {
/* 595 */             String msg = ""Failed to copy "" + oldFile + "" to "" + newFile + "" due to "" + ioe.getMessage();
/*     */             
/* 597 */             throw new BuildException(msg, ioe, this.location);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void scanDir(File baseDir, String[] files, FileNameMapper mapper) {
/* 609 */     String[] newFiles = files;
/* 610 */     if (this.idl) {
/* 611 */       log(""will leave uptodate test to rmic implementation in idl mode."", 3);
/*     */     }
/* 613 */     else if (this.iiop && this.iiopopts != null && this.iiopopts.indexOf(""-always"") > -1) {
/*     */       
/* 615 */       log(""no uptodate test as -always option has been specified"", 3);
/*     */     } else {
/*     */       
/* 618 */       SourceFileScanner sfs = new SourceFileScanner(this);
/* 619 */       newFiles = sfs.restrict(files, baseDir, baseDir, mapper);
/*     */     } 
/*     */     
/* 622 */     for (int i = 0; i < newFiles.length; i++) {
/* 623 */       String classname = newFiles[i].replace(File.separatorChar, '.');
/* 624 */       classname = classname.substring(0, classname.lastIndexOf("".class""));
/* 625 */       this.compileList.addElement(classname);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isValidRmiRemote(String classname) {
/*     */     try {
/* 634 */       Class testClass = this.loader.loadClass(classname);
/*     */       
/* 636 */       if (testClass.isInterface() && !this.iiop && !this.idl) {
/* 637 */         return false;
/*     */       }
/* 639 */       return isValidRmiRemote(testClass);
/*     */     } catch (ClassNotFoundException e) {
/* 641 */       log(""Unable to verify class "" + classname + "". It could not be found."", 1);
/*     */     } catch (NoClassDefFoundError e) {
/*     */       
/* 644 */       log(""Unable to verify class "" + classname + "". It is not defined."", 1);
/*     */     } catch (Throwable t) {
/*     */       
/* 647 */       log(""Unable to verify class "" + classname + "". Loading caused Exception: "" + t.getMessage(), 1);
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 652 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Class getRemoteInterface(Class testClass) {
/* 660 */     if (Remote.class.isAssignableFrom(testClass)) {
/* 661 */       Class[] interfaces = testClass.getInterfaces();
/* 662 */       if (interfaces != null) {
/* 663 */         for (int i = 0; i < interfaces.length; i++) {
/* 664 */           if (Remote.class.isAssignableFrom(interfaces[i])) {
/* 665 */             return interfaces[i];
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/* 670 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 678 */   private boolean isValidRmiRemote(Class testClass) { return (getRemoteInterface(testClass) != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 685 */   public ClassLoader getLoader() { return this.loader; }
/*     */ 
/*     */   
/*     */   public class ImplementationSpecificArgument
/*     */     extends ImplementationSpecificArgument
/*     */   {
/*     */     private final Rmic this$0;
/*     */     
/* 693 */     public ImplementationSpecificArgument(Rmic this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 704 */     public void setCompiler(String impl) { setImplementation(impl); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Rmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SendEmail,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.taskdefs.email.EmailTask;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class SendEmail
/*    */   extends EmailTask
/*    */ {
/* 81 */   public void setMailport(Integer value) { setMailport(value.intValue()); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\SendEmail.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sequential,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.TaskContainer;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sequential
/*     */   extends Task
/*     */   implements TaskContainer
/*     */ {
/*  84 */   private Vector nestedTasks = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void maybeConfigure() throws BuildException {
/*  94 */     if (isInvalid()) {
/*  95 */       super.maybeConfigure();
/*     */     } else {
/*  97 */       getRuntimeConfigurableWrapper().maybeConfigure(getProject(), false);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void addTask(Task nestedTask) { this.nestedTasks.addElement(nestedTask); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 115 */     for (Enumeration e = this.nestedTasks.elements(); e.hasMoreElements(); ) {
/* 116 */       Task nestedTask = e.nextElement();
/* 117 */       nestedTask.perform();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Sequential.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SignJar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipFile;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SignJar
/*     */   extends Task
/*     */ {
/*     */   protected File jar;
/*     */   protected String alias;
/*     */   protected File keystore;
/*     */   protected String storepass;
/*     */   protected String storetype;
/*     */   protected String keypass;
/*     */   protected File sigfile;
/*     */   protected File signedjar;
/*     */   protected boolean verbose;
/*     */   protected boolean internalsf;
/*     */   protected boolean sectionsonly;
/* 116 */   protected Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean lazy;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 127 */   public void setJar(File jar) { this.jar = jar; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setAlias(String alias) { this.alias = alias; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setKeystore(File keystore) { this.keystore = keystore; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void setStorepass(String storepass) { this.storepass = storepass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setStoretype(String storetype) { this.storetype = storetype; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public void setKeypass(String keypass) { this.keypass = keypass; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setSigfile(File sigfile) { this.sigfile = sigfile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setSignedjar(File signedjar) { this.signedjar = signedjar; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setVerbose(boolean verbose) { this.verbose = verbose; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void setInternalsf(boolean internalsf) { this.internalsf = internalsf; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public void setSectionsonly(boolean sectionsonly) { this.sectionsonly = sectionsonly; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setLazy(boolean lazy) { this.lazy = lazy; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 225 */     if (null == this.jar && null == this.filesets) {
/* 226 */       throw new BuildException(""jar must be set through jar attribute or nested filesets"");
/*     */     }
/*     */     
/* 229 */     if (null != this.jar) {
/* 230 */       doOneJar(this.jar, this.signedjar);
/*     */ 
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 236 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 237 */       FileSet fs = this.filesets.elementAt(i);
/* 238 */       DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 239 */       String[] jarFiles = ds.getIncludedFiles();
/* 240 */       for (int j = 0; j < jarFiles.length; j++) {
/* 241 */         doOneJar(new File(fs.getDir(this.project), jarFiles[j]), null);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void doOneJar(File jarSource, File jarTarget) throws BuildException {
/* 252 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 253 */       throw new BuildException(""The signjar task is only available on JDK versions 1.2 or greater"");
/*     */     }
/*     */ 
/*     */     
/* 257 */     if (null == this.alias) {
/* 258 */       throw new BuildException(""alias attribute must be set"");
/*     */     }
/*     */     
/* 261 */     if (null == this.storepass) {
/* 262 */       throw new BuildException(""storepass attribute must be set"");
/*     */     }
/*     */     
/* 265 */     if (isUpToDate(jarSource, jarTarget)) {
/*     */       return;
/*     */     }
/*     */     
/* 269 */     ExecTask cmd = (ExecTask)this.project.createTask(""exec"");
/* 270 */     cmd.setExecutable(""jarsigner"");
/*     */     
/* 272 */     if (null != this.keystore) {
/* 273 */       cmd.createArg().setValue(""-keystore"");
/* 274 */       cmd.createArg().setValue(this.keystore.toString());
/*     */     } 
/*     */     
/* 277 */     if (null != this.storepass) {
/* 278 */       cmd.createArg().setValue(""-storepass"");
/* 279 */       cmd.createArg().setValue(this.storepass);
/*     */     } 
/*     */     
/* 282 */     if (null != this.storetype) {
/* 283 */       cmd.createArg().setValue(""-storetype"");
/* 284 */       cmd.createArg().setValue(this.storetype);
/*     */     } 
/*     */     
/* 287 */     if (null != this.keypass) {
/* 288 */       cmd.createArg().setValue(""-keypass"");
/* 289 */       cmd.createArg().setValue(this.keypass);
/*     */     } 
/*     */     
/* 292 */     if (null != this.sigfile) {
/* 293 */       cmd.createArg().setValue(""-sigfile"");
/* 294 */       cmd.createArg().setValue(this.sigfile.toString());
/*     */     } 
/*     */     
/* 297 */     if (null != jarTarget) {
/* 298 */       cmd.createArg().setValue(""-signedjar"");
/* 299 */       cmd.createArg().setValue(jarTarget.toString());
/*     */     } 
/*     */     
/* 302 */     if (this.verbose) {
/* 303 */       cmd.createArg().setValue(""-verbose"");
/*     */     }
/*     */     
/* 306 */     if (this.internalsf) {
/* 307 */       cmd.createArg().setValue(""-internalsf"");
/*     */     }
/*     */     
/* 310 */     if (this.sectionsonly) {
/* 311 */       cmd.createArg().setValue(""-sectionsonly"");
/*     */     }
/*     */     
/* 314 */     cmd.createArg().setValue(jarSource.toString());
/*     */     
/* 316 */     cmd.createArg().setValue(this.alias);
/*     */     
/* 318 */     log(""Signing Jar : "" + jarSource.getAbsolutePath());
/* 319 */     cmd.setFailonerror(true);
/* 320 */     cmd.setTaskName(getTaskName());
/* 321 */     cmd.execute();
/*     */   }
/*     */   
/*     */   protected boolean isUpToDate(File jarFile, File signedjarFile) {
/* 325 */     if (null == jarFile) {
/* 326 */       return false;
/*     */     }
/*     */     
/* 329 */     if (null != signedjarFile) {
/*     */       
/* 331 */       if (!jarFile.exists()) {
/* 332 */         return false;
/*     */       }
/* 334 */       if (!signedjarFile.exists()) {
/* 335 */         return false;
/*     */       }
/* 337 */       if (jarFile.equals(signedjarFile)) {
/* 338 */         return false;
/*     */       }
/* 340 */       if (signedjarFile.lastModified() > jarFile.lastModified()) {
/* 341 */         return true;
/*     */       }
/*     */     }
/* 344 */     else if (this.lazy) {
/* 345 */       return isSigned(jarFile);
/*     */     } 
/*     */ 
/*     */     
/* 349 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isSigned(File file) {
/* 356 */     if (!file.exists()) {
/* 357 */       return false;
/*     */     }
/* 359 */     ZipFile jarFile = null;
/*     */     try {
/* 361 */       jarFile = new ZipFile(file);
/* 362 */       if (null == this.alias) {
/* 363 */         Enumeration entries = jarFile.entries();
/* 364 */         while (entries.hasMoreElements()) {
/* 365 */           String name = ((ZipEntry)entries.nextElement()).getName();
/* 366 */           if (name.startsWith(""META-INF/"") && name.endsWith("".SF"")) {
/* 367 */             return true;
/*     */           }
/*     */         } 
/* 370 */         return false;
/*     */       } 
/* 372 */       return (jarFile.getEntry(""META-INF/"" + this.alias.toUpperCase() + "".SF"") != null);
/*     */     }
/*     */     catch (IOException e) {
/*     */       
/* 376 */       return false;
/*     */     } finally {
/* 378 */       if (jarFile != null)
/*     */         try {
/* 380 */           jarFile.close();
/* 381 */         } catch (IOException e) {} 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\SignJar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Sleep,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Sleep
/*     */   extends Task
/*     */ {
/*     */   private boolean failOnError = true;
/*  88 */   private int seconds = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   private int hours = 0;
/*     */ 
/*     */ 
/*     */   
/*  97 */   private int minutes = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int milliseconds = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void setSeconds(int seconds) { this.seconds = seconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void setHours(int hours) { this.hours = hours; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setMinutes(int minutes) { this.minutes = minutes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   public void setMilliseconds(int milliseconds) { this.milliseconds = milliseconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void doSleep(long millis) {
/*     */     try {
/* 160 */       Thread.sleep(millis);
/* 161 */     } catch (InterruptedException ie) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 172 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   private long getSleepTime() { return ((this.hours * 60L + this.minutes) * 60L + this.seconds) * 1000L + this.milliseconds; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() throws BuildException {
/* 195 */     if (getSleepTime() < 0L) {
/* 196 */       throw new BuildException(""Negative sleep periods are not supported"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 211 */       validate();
/* 212 */       long sleepTime = getSleepTime();
/* 213 */       log(""sleeping for "" + sleepTime + "" milliseconds"", 3);
/*     */       
/* 215 */       doSleep(sleepTime);
/*     */     } catch (Exception e) {
/* 217 */       if (this.failOnError) {
/* 218 */         throw new BuildException(e);
/*     */       }
/* 220 */       String text = e.toString();
/* 221 */       log(text, 0);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Sleep.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.SQLExec,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.PrintStream;
/*     */ import java.io.Reader;
/*     */ import java.io.StringReader;
/*     */ import java.sql.Connection;
/*     */ import java.sql.ResultSet;
/*     */ import java.sql.ResultSetMetaData;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.Statement;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SQLExec
/*     */   extends JDBCTask
/*     */ {
/*     */   public static class DelimiterType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String NORMAL = ""normal"";
/*     */     public static final String ROW = ""row"";
/*     */     
/* 125 */     public String[] getValues() { return new String[] { ""normal"", ""row"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   private int goodSql = 0;
/*     */   
/* 133 */   private int totalSql = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   private Connection conn = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   private Statement statement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   private File srcFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 158 */   private String sqlCommand = """";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   private Vector transactions = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   private String delimiter = "";"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 174 */   private String delimiterType = ""normal"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean print = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean showheaders = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   private File output = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   private String onError = ""abort"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean append = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void setSrc(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public void addText(String sql) { this.sqlCommand += sql; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 228 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Transaction createTransaction() {
/* 236 */     Transaction t = new Transaction(this);
/* 237 */     this.transactions.addElement(t);
/* 238 */     return t;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 247 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setDelimiter(String delimiter) { this.delimiter = delimiter; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 270 */   public void setDelimiterType(DelimiterType delimiterType) { this.delimiterType = delimiterType.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 278 */   public void setPrint(boolean print) { this.print = print; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 286 */   public void setShowheaders(boolean showheaders) { this.showheaders = showheaders; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 294 */   public void setOutput(File output) { this.output = output; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 304 */   public void setAppend(boolean append) { this.append = append; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 313 */   public void setOnerror(OnError action) { this.onError = action.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 320 */     Vector savedTransaction = (Vector)this.transactions.clone();
/* 321 */     String savedSqlCommand = this.sqlCommand;
/*     */     
/* 323 */     this.sqlCommand = this.sqlCommand.trim();
/*     */     
/*     */     try {
/* 326 */       if (this.srcFile == null && this.sqlCommand.length() == 0 && this.filesets.isEmpty())
/*     */       {
/* 328 */         if (this.transactions.size() == 0) {
/* 329 */           throw new BuildException(""Source file or fileset, transactions or sql statement must be set!"", this.location);
/*     */         }
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 335 */       if (this.srcFile != null && !this.srcFile.exists()) {
/* 336 */         throw new BuildException(""Source file does not exist!"", this.location);
/*     */       }
/*     */ 
/*     */       
/* 340 */       for (int i = 0; i < this.filesets.size(); i++) {
/* 341 */         FileSet fs = this.filesets.elementAt(i);
/* 342 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 343 */         File srcDir = fs.getDir(this.project);
/*     */         
/* 345 */         String[] srcFiles = ds.getIncludedFiles();
/*     */ 
/*     */         
/* 348 */         for (int j = 0; j < srcFiles.length; j++) {
/* 349 */           Transaction t = createTransaction();
/* 350 */           t.setSrc(new File(srcDir, srcFiles[j]));
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 355 */       Transaction t = createTransaction();
/* 356 */       t.setSrc(this.srcFile);
/* 357 */       t.addText(this.sqlCommand);
/* 358 */       this.conn = getConnection();
/* 359 */       if (!isValidRdbms(this.conn)) {
/*     */         return;
/*     */       }
/*     */       try {
/* 363 */         this.statement = this.conn.createStatement();
/*     */ 
/*     */         
/* 366 */         PrintStream out = System.out;
/*     */         try {
/* 368 */           if (this.output != null) {
/* 369 */             log(""Opening PrintStream to output file "" + this.output, 3);
/*     */             
/* 371 */             out = new PrintStream(new BufferedOutputStream(new FileOutputStream(this.output.getAbsolutePath(), this.append)));
/*     */           } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 379 */           Enumeration e = this.transactions.elements();
/* 380 */           while (e.hasMoreElements()) {
/*     */             
/* 382 */             ((Transaction)e.nextElement()).runTransaction(out);
/* 383 */             if (!isAutocommit()) {
/* 384 */               log(""Commiting transaction"", 3);
/* 385 */               this.conn.commit();
/*     */             } 
/*     */           } 
/*     */         } finally {
/* 389 */           if (out != null && out != System.out) {
/* 390 */             out.close();
/*     */           }
/*     */         } 
/*     */       } catch (IOException e) {
/* 394 */         if (!isAutocommit() && this.conn != null && this.onError.equals(""abort"")) {
/*     */           try {
/* 396 */             this.conn.rollback();
/* 397 */           } catch (SQLException ex) {}
/*     */         }
/* 399 */         throw new BuildException(e, this.location);
/*     */       } catch (SQLException e) {
/* 401 */         if (!isAutocommit() && this.conn != null && this.onError.equals(""abort"")) {
/*     */           try {
/* 403 */             this.conn.rollback();
/* 404 */           } catch (SQLException ex) {}
/*     */         }
/* 406 */         throw new BuildException(e, this.location);
/*     */       } finally {
/*     */         try {
/* 409 */           if (this.statement != null) {
/* 410 */             this.statement.close();
/*     */           }
/* 412 */           if (this.conn != null) {
/* 413 */             this.conn.close();
/*     */           }
/* 415 */         } catch (SQLException e) {}
/*     */       } 
/*     */       
/* 418 */       log(this.goodSql + "" of "" + this.totalSql + "" SQL statements executed successfully"");
/*     */     } finally {
/*     */       
/* 421 */       this.transactions = savedTransaction;
/* 422 */       this.sqlCommand = savedSqlCommand;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void runStatements(Reader reader, PrintStream out) throws SQLException, IOException {
/* 432 */     String sql = """";
/* 433 */     String line = """";
/*     */     
/* 435 */     BufferedReader in = new BufferedReader(reader);
/*     */     
/* 437 */     while ((line = in.readLine()) != null) {
/* 438 */       line = line.trim();
/* 439 */       line = this.project.replaceProperties(line);
/* 440 */       if (line.startsWith(""//"")) {
/*     */         continue;
/*     */       }
/* 443 */       if (line.startsWith(""--"")) {
/*     */         continue;
/*     */       }
/* 446 */       StringTokenizer st = new StringTokenizer(line);
/* 447 */       if (st.hasMoreTokens()) {
/* 448 */         String token = st.nextToken();
/* 449 */         if (""REM"".equalsIgnoreCase(token)) {
/*     */           continue;
/*     */         }
/*     */       } 
/*     */       
/* 454 */       sql = sql + "" "" + line;
/* 455 */       sql = sql.trim();
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 460 */       if (line.indexOf(""--"") >= 0) {
/* 461 */         sql = sql + ""\n"";
/*     */       }
/*     */       
/* 464 */       if ((this.delimiterType.equals(""normal"") && sql.endsWith(this.delimiter)) || (this.delimiterType.equals(""row"") && line.equals(this.delimiter))) {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 469 */         log(""SQL: "" + sql, 3);
/* 470 */         execSQL(sql.substring(0, sql.length() - this.delimiter.length()), out);
/*     */         
/* 472 */         sql = """";
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 477 */     if (!sql.equals("""")) {
/* 478 */       execSQL(sql, out);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void execSQL(String sql, PrintStream out) throws SQLException {
/* 488 */     if ("""".equals(sql.trim())) {
/*     */       return;
/*     */     }
/*     */     
/*     */     try {
/* 493 */       this.totalSql++;
/* 494 */       if (!this.statement.execute(sql)) {
/* 495 */         log(this.statement.getUpdateCount() + "" rows affected"", 3);
/*     */       
/*     */       }
/* 498 */       else if (this.print) {
/* 499 */         printResults(out);
/*     */       } 
/*     */ 
/*     */       
/* 503 */       SQLWarning warning = this.conn.getWarnings();
/* 504 */       while (warning != null) {
/* 505 */         log(warning + "" sql warning"", 3);
/* 506 */         warning = warning.getNextWarning();
/*     */       } 
/* 508 */       this.conn.clearWarnings();
/* 509 */       this.goodSql++;
/*     */     } catch (SQLException e) {
/* 511 */       log(""Failed to execute: "" + sql, 0);
/* 512 */       if (!this.onError.equals(""continue"")) {
/* 513 */         throw e;
/*     */       }
/* 515 */       log(e.toString(), 0);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void printResults(PrintStream out) throws SQLException {
/* 523 */     ResultSet rs = null;
/*     */     do {
/* 525 */       rs = this.statement.getResultSet();
/* 526 */       if (rs == null)
/* 527 */         continue;  log(""Processing new result set."", 3);
/* 528 */       ResultSetMetaData md = rs.getMetaData();
/* 529 */       int columnCount = md.getColumnCount();
/* 530 */       StringBuffer line = new StringBuffer();
/* 531 */       if (this.showheaders) {
/* 532 */         for (int col = 1; col < columnCount; col++) {
/* 533 */           line.append(md.getColumnName(col));
/* 534 */           line.append("","");
/*     */         } 
/* 536 */         line.append(md.getColumnName(columnCount));
/* 537 */         out.println(line);
/* 538 */         line.setLength(0);
/*     */       } 
/* 540 */       while (rs.next()) {
/* 541 */         boolean first = true;
/* 542 */         for (int col = 1; col <= columnCount; col++) {
/* 543 */           String columnValue = rs.getString(col);
/* 544 */           if (columnValue != null) {
/* 545 */             columnValue = columnValue.trim();
/*     */           }
/*     */           
/* 548 */           if (first) {
/* 549 */             first = false;
/*     */           } else {
/* 551 */             line.append("","");
/*     */           } 
/* 553 */           line.append(columnValue);
/*     */         } 
/* 555 */         out.println(line);
/* 556 */         line.setLength(0);
/*     */       }
/*     */     
/*     */     }
/* 560 */     while (this.statement.getMoreResults());
/* 561 */     out.println();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class OnError
/*     */     extends EnumeratedAttribute
/*     */   {
/* 570 */     public String[] getValues() { return new String[] { ""continue"", ""stop"", ""abort"" }; }
/*     */   }
/*     */   
/*     */   public class Transaction
/*     */   {
/*     */     private File tSrcFile;
/*     */     private String tSqlCommand;
/*     */     private final SQLExec this$0;
/*     */     
/*     */     public Transaction(SQLExec this$0) {
/* 580 */       this.this$0 = this$0;
/* 581 */       this.tSrcFile = null;
/* 582 */       this.tSqlCommand = """";
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 588 */     public void setSrc(File src) { this.tSrcFile = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 595 */     public void addText(String sql) { this.tSqlCommand += sql; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private void runTransaction(PrintStream out) throws IOException, SQLException {
/* 603 */       if (this.tSqlCommand.length() != 0) {
/* 604 */         this.this$0.log(""Executing commands"", 2);
/* 605 */         this.this$0.runStatements(new StringReader(this.tSqlCommand), out);
/*     */       } 
/*     */       
/* 608 */       if (this.tSrcFile != null) {
/* 609 */         this.this$0.log(""Executing file: "" + this.tSrcFile.getAbsolutePath(), 2);
/*     */         
/* 611 */         Reader reader = (this.this$0.encoding == null) ? new FileReader(this.tSrcFile) : new InputStreamReader(new FileInputStream(this.tSrcFile), this.this$0.encoding);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         try {
/* 617 */           this.this$0.runStatements(reader, out);
/*     */         } finally {
/* 619 */           reader.close();
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\SQLExec.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.StreamPumper,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StreamPumper
/*     */   implements Runnable
/*     */ {
/*     */   private static final int SLEEP = 5;
/*     */   private static final int SIZE = 128;
/*     */   private InputStream is;
/*     */   private OutputStream os;
/*     */   private boolean finished;
/*     */   
/*     */   public StreamPumper(InputStream is, OutputStream os) {
/*  85 */     this.is = is;
/*  86 */     this.os = os;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void run() {
/*  96 */     synchronized (this) {
/*     */       
/*  98 */       this.finished = false;
/*     */     } 
/*     */     
/* 101 */     byte[] buf = new byte[128];
/*     */ 
/*     */     
/*     */     try { int length;
/* 105 */       while ((length = this.is.read(buf)) > 0) {
/* 106 */         this.os.write(buf, 0, length);
/*     */         try {
/* 108 */           Thread.sleep(5L);
/* 109 */         } catch (InterruptedException e) {}
/*     */       }  }
/* 111 */     catch (IOException e) {  }
/*     */     finally
/* 113 */     { synchronized (this) {
/* 114 */         this.finished = true;
/* 115 */         notify();
/*     */       }  }
/*     */   
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public synchronized boolean isFinished() { return this.finished; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public synchronized void waitFor() throws InterruptedException {
/* 134 */     while (!isFinished())
/* 135 */       wait(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\StreamPumper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.GZIPOutputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.bzip2.CBZip2OutputStream;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tar
/*     */   extends MatchingTask
/*     */ {
/*     */   public static final String WARN = ""warn"";
/*     */   public static final String FAIL = ""fail"";
/*     */   public static final String TRUNCATE = ""truncate"";
/*     */   public static final String GNU = ""gnu"";
/*     */   public static final String OMIT = ""omit"";
/*     */   File tarFile;
/*     */   File baseDir;
/* 124 */   private TarLongFileMode longFileMode = new TarLongFileMode();
/*     */   
/* 126 */   Vector filesets = new Vector();
/* 127 */   Vector fileSetFiles = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean longWarningGiven = false;
/*     */ 
/*     */   
/* 134 */   private TarCompressionMethod compression = new TarCompressionMethod();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarFileSet createTarFileSet() {
/* 140 */     TarFileSet fileset = new TarFileSet();
/* 141 */     this.filesets.addElement(fileset);
/* 142 */     return fileset;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public void setTarfile(File tarFile) { this.tarFile = tarFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setDestFile(File destFile) { this.tarFile = destFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 167 */   public void setBasedir(File baseDir) { this.baseDir = baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLongfile(String mode) {
/* 188 */     log(""DEPRECATED - The setLongfile(String) method has been deprecated. Use setLongfile(Tar.TarLongFileMode) instead."");
/*     */     
/* 190 */     this.longFileMode = new TarLongFileMode();
/* 191 */     this.longFileMode.setValue(mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 208 */   public void setLongfile(TarLongFileMode mode) { this.longFileMode = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 221 */   public void setCompression(TarCompressionMethod mode) { this.compression = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 228 */     if (this.tarFile == null) {
/* 229 */       throw new BuildException(""tarfile attribute must be set!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 233 */     if (this.tarFile.exists() && this.tarFile.isDirectory()) {
/* 234 */       throw new BuildException(""tarfile is a directory!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 238 */     if (this.tarFile.exists() && !this.tarFile.canWrite()) {
/* 239 */       throw new BuildException(""Can not write to the specified tarfile!"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 243 */     Vector savedFileSets = (Vector)this.filesets.clone();
/*     */     try {
/* 245 */       if (this.baseDir != null) {
/* 246 */         if (!this.baseDir.exists()) {
/* 247 */           throw new BuildException(""basedir does not exist!"", this.location);
/*     */         }
/*     */ 
/*     */ 
/*     */         
/* 252 */         TarFileSet mainFileSet = new TarFileSet(this.fileset);
/* 253 */         mainFileSet.setDir(this.baseDir);
/* 254 */         this.filesets.addElement(mainFileSet);
/*     */       } 
/*     */       
/* 257 */       if (this.filesets.size() == 0) {
/* 258 */         throw new BuildException(""You must supply either a basedir attribute or some nested filesets."", this.location);
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 265 */       boolean upToDate = true;
/* 266 */       for (Enumeration e = this.filesets.elements(); e.hasMoreElements(); ) {
/* 267 */         TarFileSet fs = e.nextElement();
/* 268 */         String[] files = fs.getFiles(this.project);
/*     */         
/* 270 */         if (!archiveIsUpToDate(files)) {
/* 271 */           upToDate = false;
/*     */         }
/*     */         
/* 274 */         for (int i = 0; i < files.length; i++) {
/* 275 */           if (this.tarFile.equals(new File(fs.getDir(this.project), files[i])))
/*     */           {
/* 277 */             throw new BuildException(""A tar file cannot include itself"", this.location);
/*     */           }
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 283 */       if (upToDate) {
/* 284 */         log(""Nothing to do: "" + this.tarFile.getAbsolutePath() + "" is up to date."", 2);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 289 */       log(""Building tar: "" + this.tarFile.getAbsolutePath(), 2);
/*     */       
/* 291 */       TarOutputStream tOut = null;
/*     */       try {
/* 293 */         tOut = new TarOutputStream(this.compression.compress(new BufferedOutputStream(new FileOutputStream(this.tarFile))));
/*     */ 
/*     */ 
/*     */         
/* 297 */         tOut.setDebug(true);
/* 298 */         if (this.longFileMode.isTruncateMode()) {
/* 299 */           tOut.setLongFileMode(1);
/* 300 */         } else if (this.longFileMode.isFailMode() || this.longFileMode.isOmitMode()) {
/*     */           
/* 302 */           tOut.setLongFileMode(0);
/*     */         } else {
/*     */           
/* 305 */           tOut.setLongFileMode(2);
/*     */         } 
/*     */         
/* 308 */         this.longWarningGiven = false;
/* 309 */         Enumeration e = this.filesets.elements();
/* 310 */         while (e.hasMoreElements()) {
/* 311 */           TarFileSet fs = e.nextElement();
/* 312 */           String[] files = fs.getFiles(this.project);
/* 313 */           if (files.length > 1 && fs.getFullpath().length() > 0) {
/* 314 */             throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file."");
/*     */           }
/*     */ 
/*     */ 
/*     */           
/* 319 */           for (int i = 0; i < files.length; i++) {
/* 320 */             File f = new File(fs.getDir(this.project), files[i]);
/* 321 */             String name = files[i].replace(File.separatorChar, '/');
/* 322 */             tarFile(f, tOut, name, fs);
/*     */           } 
/*     */         } 
/*     */       } catch (IOException ioe) {
/* 326 */         String msg = ""Problem creating TAR: "" + ioe.getMessage();
/* 327 */         throw new BuildException(msg, ioe, this.location);
/*     */       } finally {
/* 329 */         if (tOut != null) {
/*     */           
/*     */           try {
/* 332 */             tOut.close();
/* 333 */           } catch (IOException e) {}
/*     */         }
/*     */       } 
/*     */     } finally {
/* 337 */       this.filesets = savedFileSets;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void tarFile(File file, TarOutputStream tOut, String vPath, TarFileSet tarFileSet) throws IOException {
/* 347 */     FileInputStream fIn = null;
/*     */     
/* 349 */     String fullpath = tarFileSet.getFullpath();
/* 350 */     if (fullpath.length() > 0) {
/* 351 */       vPath = fullpath;
/*     */     } else {
/*     */       
/* 354 */       if (vPath.length() <= 0) {
/*     */         return;
/*     */       }
/*     */       
/* 358 */       if (file.isDirectory() && !vPath.endsWith(""/"")) {
/* 359 */         vPath = vPath + ""/"";
/*     */       }
/*     */       
/* 362 */       String prefix = tarFileSet.getPrefix();
/*     */       
/* 364 */       if (prefix.length() > 0 && !prefix.endsWith(""/"")) {
/* 365 */         prefix = prefix + ""/"";
/*     */       }
/* 367 */       vPath = prefix + vPath;
/*     */     } 
/*     */     
/* 370 */     if (vPath.startsWith(""/"") && !tarFileSet.getPreserveLeadingSlashes()) {
/* 371 */       int l = vPath.length();
/* 372 */       if (l <= 1) {
/*     */         return;
/*     */       }
/*     */       
/* 376 */       vPath = vPath.substring(1, l);
/*     */     } 
/*     */     
/*     */     try {
/* 380 */       if (vPath.length() >= 100) {
/* 381 */         if (this.longFileMode.isOmitMode()) {
/* 382 */           log(""Omitting: "" + vPath, 2); return;
/*     */         } 
/* 384 */         if (this.longFileMode.isWarnMode()) {
/* 385 */           log(""Entry: "" + vPath + "" longer than "" + 'd' + "" characters."", 1);
/*     */ 
/*     */           
/* 388 */           if (!this.longWarningGiven) {
/* 389 */             log(""Resulting tar file can only be processed successfully by GNU compatible tar commands"", 1);
/*     */ 
/*     */             
/* 392 */             this.longWarningGiven = true;
/*     */           } 
/* 394 */         } else if (this.longFileMode.isFailMode()) {
/* 395 */           throw new BuildException(""Entry: "" + vPath + "" longer than "" + 'd' + ""characters."", this.location);
/*     */         } 
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 401 */       TarEntry te = new TarEntry(vPath);
/* 402 */       te.setModTime(file.lastModified());
/* 403 */       if (!file.isDirectory()) {
/* 404 */         te.setSize(file.length());
/* 405 */         te.setMode(tarFileSet.getMode());
/*     */       } 
/* 407 */       te.setUserName(tarFileSet.getUserName());
/* 408 */       te.setGroupName(tarFileSet.getGroup());
/*     */       
/* 410 */       tOut.putNextEntry(te);
/*     */       
/* 412 */       if (!file.isDirectory()) {
/* 413 */         fIn = new FileInputStream(file);
/*     */         
/* 415 */         byte[] buffer = new byte[8192];
/* 416 */         int count = 0;
/*     */         do {
/* 418 */           tOut.write(buffer, 0, count);
/* 419 */           count = fIn.read(buffer, 0, buffer.length);
/* 420 */         } while (count != -1);
/*     */       } 
/*     */       
/* 423 */       tOut.closeEntry();
/*     */     } finally {
/* 425 */       if (fIn != null) {
/* 426 */         fIn.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */   
/*     */   protected boolean archiveIsUpToDate(String[] files) {
/* 432 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 433 */     MergingMapper mm = new MergingMapper();
/* 434 */     mm.setTo(this.tarFile.getAbsolutePath());
/* 435 */     return ((sfs.restrict(files, this.baseDir, null, (FileNameMapper)mm)).length == 0);
/*     */   }
/*     */ 
/*     */   
/*     */   public static class TarFileSet
/*     */     extends FileSet
/*     */   {
/* 442 */     private String[] files = null;
/*     */     
/* 444 */     private int mode = 33188;
/*     */     
/* 446 */     private String userName = """";
/* 447 */     private String groupName = """";
/* 448 */     private String prefix = """";
/* 449 */     private String fullpath = """";
/*     */     
/*     */     private boolean preserveLeadingSlashes = false;
/*     */     
/* 453 */     public TarFileSet(FileSet fileset) { super(fileset); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public TarFileSet() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String[] getFiles(Project p) {
/* 466 */       if (this.files == null) {
/* 467 */         DirectoryScanner ds = getDirectoryScanner(p);
/* 468 */         String[] directories = ds.getIncludedDirectories();
/* 469 */         String[] filesPerSe = ds.getIncludedFiles();
/* 470 */         this.files = new String[directories.length + filesPerSe.length];
/* 471 */         System.arraycopy(directories, 0, this.files, 0, directories.length);
/* 472 */         System.arraycopy(filesPerSe, 0, this.files, directories.length, filesPerSe.length);
/*     */       } 
/*     */ 
/*     */       
/* 476 */       return this.files;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 485 */     public void setMode(String octalString) { this.mode = 0x8000 | Integer.parseInt(octalString, 8); }
/*     */ 
/*     */ 
/*     */     
/* 489 */     public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 498 */     public void setUserName(String userName) { this.userName = userName; }
/*     */ 
/*     */ 
/*     */     
/* 502 */     public String getUserName() { return this.userName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 511 */     public void setGroup(String groupName) { this.groupName = groupName; }
/*     */ 
/*     */ 
/*     */     
/* 515 */     public String getGroup() { return this.groupName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 524 */     public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */     
/* 528 */     public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 538 */     public void setFullpath(String fullpath) { this.fullpath = fullpath; }
/*     */ 
/*     */ 
/*     */     
/* 542 */     public String getFullpath() { return this.fullpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 551 */     public void setPreserveLeadingSlashes(boolean b) { this.preserveLeadingSlashes = b; }
/*     */ 
/*     */ 
/*     */     
/* 555 */     public boolean getPreserveLeadingSlashes() { return this.preserveLeadingSlashes; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TarLongFileMode
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     public static final String WARN = ""warn"";
/*     */     
/*     */     public static final String FAIL = ""fail"";
/*     */     
/*     */     public static final String TRUNCATE = ""truncate"";
/*     */     
/*     */     public static final String GNU = ""gnu"";
/*     */     
/*     */     public static final String OMIT = ""omit"";
/*     */     
/* 573 */     private final String[] validModes = new String[] { ""warn"", ""fail"", ""truncate"", ""gnu"", ""omit"" };
/*     */ 
/*     */ 
/*     */     
/* 577 */     public TarLongFileMode() { setValue(""warn""); }
/*     */ 
/*     */ 
/*     */     
/* 581 */     public String[] getValues() { return this.validModes; }
/*     */ 
/*     */ 
/*     */     
/* 585 */     public boolean isTruncateMode() { return ""truncate"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 589 */     public boolean isWarnMode() { return ""warn"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 593 */     public boolean isGnuMode() { return ""gnu"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 597 */     public boolean isFailMode() { return ""fail"".equalsIgnoreCase(getValue()); }
/*     */ 
/*     */ 
/*     */     
/* 601 */     public boolean isOmitMode() { return ""omit"".equalsIgnoreCase(getValue()); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final class TarCompressionMethod
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String NONE = ""none"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String GZIP = ""gzip"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String BZIP2 = ""bzip2"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 631 */     public TarCompressionMethod() { setValue(""none""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 639 */     public String[] getValues() { return new String[] { ""none"", ""gzip"", ""bzip2"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private OutputStream compress(OutputStream ostream) throws IOException {
/* 652 */       String value = getValue();
/* 653 */       if (""gzip"".equals(value)) {
/* 654 */         return new GZIPOutputStream(ostream);
/*     */       }
/* 656 */       if (""bzip2"".equals(value)) {
/* 657 */         ostream.write(66);
/* 658 */         ostream.write(90);
/* 659 */         return (OutputStream)new CBZip2OutputStream(ostream);
/*     */       } 
/*     */       
/* 662 */       return ostream;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Tar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Taskdef,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Taskdef
/*    */   extends Definer
/*    */ {
/* 82 */   protected void addDefinition(String name, Class c) throws BuildException { this.project.addTaskDefinition(name, c); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Taskdef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.TaskOutputStream,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TaskOutputStream
/*     */   extends OutputStream
/*     */ {
/*     */   private Task task;
/*     */   private StringBuffer line;
/*     */   private int msgOutputLevel;
/*     */   
/*     */   TaskOutputStream(Task task, int msgOutputLevel) {
/*  89 */     System.err.println(""As of Ant 1.2 released in October 2000, the TaskOutputStream class"");
/*  90 */     System.err.println(""is considered to be dead code by the Ant developers and is unmaintained."");
/*  91 */     System.err.println(""Don't use it!"");
/*     */     
/*  93 */     this.task = task;
/*  94 */     this.msgOutputLevel = msgOutputLevel;
/*     */     
/*  96 */     this.line = new StringBuffer();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int c) throws IOException {
/* 106 */     char cc = (char)c;
/* 107 */     if (cc == '\r' || cc == '\n') {
/*     */       
/* 109 */       if (this.line.length() > 0) {
/* 110 */         processLine();
/*     */       }
/*     */     } else {
/* 113 */       this.line.append(cc);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processLine() {
/* 122 */     String s = this.line.toString();
/* 123 */     this.task.log(s, this.msgOutputLevel);
/* 124 */     this.line = new StringBuffer();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\TaskOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.TempFile,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TempFile
/*     */   extends Task
/*     */ {
/*     */   private String property;
/*  94 */   private File destDir = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String prefix;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   private String suffix = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setProperty(String property) { this.property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setDestDir(File destDir) { this.destDir = destDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 134 */   public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public void setSuffix(String suffix) { this.suffix = suffix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 154 */     if (this.property == null || this.property.length() == 0) {
/* 155 */       throw new BuildException(""no property specified"");
/*     */     }
/* 157 */     if (this.destDir == null) {
/* 158 */       this.destDir = this.project.resolveFile(""."");
/*     */     }
/* 160 */     FileUtils utils = FileUtils.newFileUtils();
/* 161 */     File tfile = utils.createTempFile(this.prefix, this.suffix, this.destDir);
/* 162 */     this.project.setNewProperty(this.property, tfile.toString());
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\TempFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Touch,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import java.text.DateFormat;
/*     */ import java.text.ParseException;
/*     */ import java.util.Locale;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Touch
/*     */   extends Task
/*     */ {
/*     */   private File file;
/*  92 */   private long millis = -1L;
/*     */   private String dateTime;
/*  94 */   private Vector filesets = new Vector();
/*     */   
/*     */   private FileUtils fileUtils;
/*     */   
/*  98 */   public Touch() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setFile(File file) { this.file = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void setMillis(long millis) { this.millis = millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public void setDatetime(String dateTime) { this.dateTime = dateTime; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 138 */     long savedMillis = this.millis;
/*     */     
/* 140 */     if (this.file == null && this.filesets.size() == 0) {
/* 141 */       throw new BuildException(""Specify at least one source - a file or a fileset."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 146 */     if (this.file != null && this.file.exists() && this.file.isDirectory()) {
/* 147 */       throw new BuildException(""Use a fileset to touch directories."");
/*     */     }
/*     */     
/*     */     try {
/* 151 */       if (this.dateTime != null) {
/* 152 */         DateFormat df = DateFormat.getDateTimeInstance(3, 3, Locale.US);
/*     */ 
/*     */ 
/*     */         
/*     */         try {
/* 157 */           setMillis(df.parse(this.dateTime).getTime());
/* 158 */           if (this.millis < 0L) {
/* 159 */             throw new BuildException(""Date of "" + this.dateTime + "" results in negative "" + ""milliseconds value "" + ""relative to epoch "" + ""(January 1, 1970, "" + ""00:00:00 GMT)."");
/*     */           
/*     */           }
/*     */         
/*     */         }
/*     */         catch (ParseException pe) {
/*     */ 
/*     */           
/* 167 */           throw new BuildException(pe.getMessage(), pe, this.location);
/*     */         } 
/*     */       } 
/*     */       
/* 171 */       touch();
/*     */     } finally {
/* 173 */       this.millis = savedMillis;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void touch() throws BuildException {
/* 181 */     if (this.file != null && 
/* 182 */       !this.file.exists()) {
/* 183 */       log(""Creating "" + this.file, 2);
/*     */       try {
/* 185 */         this.fileUtils.createNewFile(this.file);
/*     */       } catch (IOException ioe) {
/* 187 */         throw new BuildException(""Could not create "" + this.file, ioe, this.location);
/*     */       } 
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 193 */     if (this.millis >= 0L && JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */       
/* 195 */       log(""modification time of files cannot be set in JDK 1.1"", 1);
/*     */       
/*     */       return;
/*     */     } 
/*     */     
/* 200 */     boolean resetMillis = false;
/* 201 */     if (this.millis < 0L) {
/* 202 */       resetMillis = true;
/* 203 */       this.millis = System.currentTimeMillis();
/*     */     } 
/*     */     
/* 206 */     if (this.file != null) {
/* 207 */       touch(this.file);
/*     */     }
/*     */ 
/*     */     
/* 211 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 212 */       FileSet fs = this.filesets.elementAt(i);
/* 213 */       DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 214 */       File fromDir = fs.getDir(this.project);
/*     */       
/* 216 */       String[] srcFiles = ds.getIncludedFiles();
/* 217 */       String[] srcDirs = ds.getIncludedDirectories();
/*     */       
/* 219 */       for (int j = 0; j < srcFiles.length; j++) {
/* 220 */         touch(new File(fromDir, srcFiles[j]));
/*     */       }
/*     */       
/* 223 */       for (int j = 0; j < srcDirs.length; j++) {
/* 224 */         touch(new File(fromDir, srcDirs[j]));
/*     */       }
/*     */     } 
/*     */     
/* 228 */     if (resetMillis) {
/* 229 */       this.millis = -1L;
/*     */     }
/*     */   }
/*     */   
/*     */   protected void touch(File file) throws BuildException {
/* 234 */     if (!file.canWrite()) {
/* 235 */       throw new BuildException(""Can not change modification date of read-only file "" + file);
/*     */     }
/*     */ 
/*     */     
/* 239 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */       return;
/*     */     }
/*     */     
/* 243 */     this.fileUtils.setFileLastModified(file, this.millis);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Touch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Transform,"package org.apache.tools.ant.taskdefs;
public class Transform extends ExecuteOn {}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Transform.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Tstamp,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Locale;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.TimeZone;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Tstamp
/*     */   extends Task
/*     */ {
/*  88 */   private Vector customFormats = new Vector();
/*  89 */   private String prefix = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPrefix(String prefix) {
/*  97 */     this.prefix = prefix;
/*  98 */     if (!this.prefix.endsWith(""."")) {
/*  99 */       this.prefix += ""."";
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/*     */     try {
/* 110 */       Date d = new Date();
/*     */       
/* 112 */       Enumeration i = this.customFormats.elements();
/* 113 */       while (i.hasMoreElements()) {
/* 114 */         CustomFormat cts = i.nextElement();
/* 115 */         cts.execute(this.project, d, this.location);
/*     */       } 
/*     */       
/* 118 */       SimpleDateFormat dstamp = new SimpleDateFormat(""yyyyMMdd"");
/* 119 */       this.project.setNewProperty(this.prefix + ""DSTAMP"", dstamp.format(d));
/*     */       
/* 121 */       SimpleDateFormat tstamp = new SimpleDateFormat(""HHmm"");
/* 122 */       this.project.setNewProperty(this.prefix + ""TSTAMP"", tstamp.format(d));
/*     */       
/* 124 */       SimpleDateFormat today = new SimpleDateFormat(""MMMM d yyyy"", Locale.US);
/*     */       
/* 126 */       this.project.setNewProperty(this.prefix + ""TODAY"", today.format(d));
/*     */     } catch (Exception e) {
/*     */       
/* 129 */       throw new BuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public CustomFormat createFormat() {
/* 138 */     CustomFormat cts = new CustomFormat(this, this.prefix);
/* 139 */     this.customFormats.addElement(cts);
/* 140 */     return cts;
/*     */   }
/*     */ 
/*     */   
/*     */   public class CustomFormat
/*     */   {
/*     */     private TimeZone timeZone;
/*     */     
/*     */     private String propertyName;
/*     */     
/*     */     private String pattern;
/*     */     
/*     */     private String language;
/*     */     
/*     */     private String country;
/*     */     
/*     */     private String variant;
/*     */     
/*     */     private int offset;
/*     */     
/*     */     private int field;
/*     */     
/*     */     private String prefix;
/*     */     
/*     */     private final Tstamp this$0;
/*     */     
/*     */     public CustomFormat(Tstamp this$0, String prefix) {
/* 167 */       this.this$0 = this$0; this.offset = 0; this.field = 5; this.prefix = """";
/* 168 */       this.prefix = prefix;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 176 */     public void setProperty(String propertyName) { this.propertyName = this.prefix + propertyName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 186 */     public void setPattern(String pattern) { this.pattern = pattern; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setLocale(String locale) {
/* 199 */       StringTokenizer st = new StringTokenizer(locale, "" \t\n\r\f,"");
/*     */       try {
/* 201 */         this.language = st.nextToken();
/* 202 */         if (st.hasMoreElements()) {
/* 203 */           this.country = st.nextToken();
/* 204 */           if (st.hasMoreElements()) {
/* 205 */             this.variant = st.nextToken();
/* 206 */             if (st.hasMoreElements()) {
/* 207 */               throw new BuildException(""bad locale format"", this.this$0.getLocation());
/*     */             }
/*     */           } 
/*     */         } else {
/*     */           
/* 212 */           this.country = """";
/*     */         } 
/*     */       } catch (NoSuchElementException e) {
/* 215 */         throw new BuildException(""bad locale format"", e, this.this$0.getLocation());
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 227 */     public void setTimezone(String id) { this.timeZone = TimeZone.getTimeZone(id); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 235 */     public void setOffset(int offset) { this.offset = offset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setUnit(String unit) {
/* 246 */       this.this$0.log(""DEPRECATED - The setUnit(String) method has been deprecated. Use setUnit(Tstamp.Unit) instead."");
/*     */       
/* 248 */       Tstamp.Unit u = new Tstamp.Unit();
/* 249 */       u.setValue(unit);
/* 250 */       this.field = u.getCalendarField();
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 270 */     public void setUnit(Tstamp.Unit unit) { this.field = unit.getCalendarField(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void execute(Project project, Date date, Location location) {
/*     */       SimpleDateFormat simpleDateFormat;
/* 280 */       if (this.propertyName == null) {
/* 281 */         throw new BuildException(""property attribute must be provided"", location);
/*     */       }
/*     */ 
/*     */       
/* 285 */       if (this.pattern == null) {
/* 286 */         throw new BuildException(""pattern attribute must be provided"", location);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 291 */       if (this.language == null) {
/* 292 */         simpleDateFormat = new SimpleDateFormat(this.pattern);
/* 293 */       } else if (this.variant == null) {
/* 294 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country));
/*     */       } else {
/*     */         
/* 297 */         simpleDateFormat = new SimpleDateFormat(this.pattern, new Locale(this.language, this.country, this.variant));
/*     */       } 
/*     */ 
/*     */       
/* 301 */       if (this.offset != 0) {
/* 302 */         Calendar calendar = Calendar.getInstance();
/* 303 */         calendar.setTime(date);
/* 304 */         calendar.add(this.field, this.offset);
/* 305 */         date = calendar.getTime();
/*     */       } 
/* 307 */       if (this.timeZone != null) {
/* 308 */         simpleDateFormat.setTimeZone(this.timeZone);
/*     */       }
/* 310 */       project.setNewProperty(this.propertyName, simpleDateFormat.format(date));
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Unit
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String MILLISECOND = ""millisecond"";
/*     */     
/*     */     private static final String SECOND = ""second"";
/*     */     
/*     */     private static final String MINUTE = ""minute"";
/*     */     private static final String HOUR = ""hour"";
/*     */     private static final String DAY = ""day"";
/*     */     private static final String WEEK = ""week"";
/*     */     private static final String MONTH = ""month"";
/*     */     private static final String YEAR = ""year"";
/* 328 */     private static final String[] units = new String[] { ""millisecond"", ""second"", ""minute"", ""hour"", ""day"", ""week"", ""month"", ""year"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 339 */     private Hashtable calendarFields = new Hashtable();
/*     */     
/*     */     public Unit() {
/* 342 */       this.calendarFields.put(""millisecond"", new Integer(14));
/*     */       
/* 344 */       this.calendarFields.put(""second"", new Integer(13));
/* 345 */       this.calendarFields.put(""minute"", new Integer(12));
/* 346 */       this.calendarFields.put(""hour"", new Integer(11));
/* 347 */       this.calendarFields.put(""day"", new Integer(5));
/* 348 */       this.calendarFields.put(""week"", new Integer(3));
/* 349 */       this.calendarFields.put(""month"", new Integer(2));
/* 350 */       this.calendarFields.put(""year"", new Integer(1));
/*     */     }
/*     */     
/*     */     public int getCalendarField() {
/* 354 */       String key = getValue().toLowerCase();
/* 355 */       Integer i = (Integer)this.calendarFields.get(key);
/* 356 */       return i.intValue();
/*     */     }
/*     */ 
/*     */     
/* 360 */     public String[] getValues() { return units; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Tstamp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Typedef,"/*    */ package org.apache.tools.ant.taskdefs;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Typedef
/*    */   extends Definer
/*    */ {
/* 87 */   protected void addDefinition(String name, Class c) throws BuildException { this.project.addDataTypeDefinition(name, c); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Typedef.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Unpack,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class Unpack
/*     */   extends Task
/*     */ {
/*     */   protected File source;
/*     */   protected File dest;
/*     */   
/*     */   public void setSrc(String src) {
/*  83 */     log(""DEPRECATED - The setSrc(String) method has been deprecated. Use setSrc(File) instead."");
/*     */     
/*  85 */     setSrc(this.project.resolveFile(src));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDest(String dest) {
/*  96 */     log(""DEPRECATED - The setDest(String) method has been deprecated. Use setDest(File) instead."");
/*     */     
/*  98 */     setDest(this.project.resolveFile(dest));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public void setSrc(File src) { this.source = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setDest(File dest) { this.dest = dest; }
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 118 */     if (this.source == null) {
/* 119 */       throw new BuildException(""No Src specified"", this.location);
/*     */     }
/*     */     
/* 122 */     if (!this.source.exists()) {
/* 123 */       throw new BuildException(""Src doesn't exist"", this.location);
/*     */     }
/*     */     
/* 126 */     if (this.source.isDirectory()) {
/* 127 */       throw new BuildException(""Cannot expand a directory"", this.location);
/*     */     }
/*     */     
/* 130 */     if (this.dest == null) {
/* 131 */       this.dest = new File(this.source.getParent());
/*     */     }
/*     */     
/* 134 */     if (this.dest.isDirectory()) {
/* 135 */       String defaultExtension = getDefaultExtension();
/* 136 */       createDestFile(defaultExtension);
/*     */     } 
/*     */   }
/*     */   
/*     */   private void createDestFile(String defaultExtension) {
/* 141 */     String sourceName = this.source.getName();
/* 142 */     int len = sourceName.length();
/* 143 */     if (defaultExtension != null && len > defaultExtension.length() && defaultExtension.equalsIgnoreCase(sourceName.substring(len - defaultExtension.length()))) {
/*     */ 
/*     */       
/* 146 */       this.dest = new File(this.dest, sourceName.substring(0, len - defaultExtension.length()));
/*     */     } else {
/*     */       
/* 149 */       this.dest = new File(this.dest, sourceName);
/*     */     } 
/*     */   }
/*     */   
/*     */   public void execute() throws BuildException {
/* 154 */     File savedDest = this.dest;
/*     */     try {
/* 156 */       validate();
/* 157 */       extract();
/*     */     } finally {
/* 159 */       this.dest = savedDest;
/*     */     } 
/*     */   }
/*     */   
/*     */   protected abstract String getDefaultExtension();
/*     */   
/*     */   protected abstract void extract();
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Unpack.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Untar,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.util.zip.GZIPInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.bzip2.CBZip2InputStream;
/*     */ import org.apache.tools.tar.TarEntry;
/*     */ import org.apache.tools.tar.TarInputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Untar
/*     */   extends Expand
/*     */ {
/*  97 */   private UntarCompressionMethod compression = new UntarCompressionMethod();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void setCompression(UntarCompressionMethod method) { this.compression = method; }
/*     */ 
/*     */   
/*     */   protected void expandFile(FileUtils fileUtils, File srcF, File dir) {
/* 116 */     TarInputStream tis = null;
/*     */     try {
/* 118 */       log(""Expanding: "" + srcF + "" into "" + dir, 2);
/* 119 */       tis = new TarInputStream(this.compression.decompress(srcF, new BufferedInputStream(new FileInputStream(srcF))));
/*     */ 
/*     */ 
/*     */       
/* 123 */       TarEntry te = null;
/*     */       
/* 125 */       while ((te = tis.getNextEntry()) != null) {
/* 126 */         extractFile(fileUtils, srcF, dir, (InputStream)tis, te.getName(), te.getModTime(), te.isDirectory());
/*     */       }
/*     */       
/* 129 */       log(""expand complete"", 3);
/*     */     } catch (IOException ioe) {
/*     */       
/* 132 */       throw new BuildException(""Error while expanding "" + srcF.getPath(), ioe, this.location);
/*     */     } finally {
/*     */       
/* 135 */       if (tis != null) {
/*     */         try {
/* 137 */           tis.close();
/* 138 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final class UntarCompressionMethod
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String NONE = ""none"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String GZIP = ""gzip"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private static final String BZIP2 = ""bzip2"";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 170 */     public UntarCompressionMethod() { setValue(""none""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 179 */     public String[] getValues() { return new String[] { ""none"", ""gzip"", ""bzip2"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private InputStream decompress(File file, InputStream istream) throws IOException, BuildException {
/* 196 */       String value = getValue();
/* 197 */       if (""gzip"".equals(value)) {
/* 198 */         return new GZIPInputStream(istream);
/*     */       }
/* 200 */       if (""bzip2"".equals(value)) {
/* 201 */         char[] magic = { 'B', 'Z' };
/* 202 */         for (int i = 0; i < magic.length; i++) {
/* 203 */           if (istream.read() != magic[i]) {
/* 204 */             throw new BuildException(""Invalid bz2 file."" + file.toString());
/*     */           }
/*     */         } 
/*     */         
/* 208 */         return (InputStream)new CBZip2InputStream(istream);
/*     */       } 
/*     */       
/* 211 */       return istream;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Untar.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.UpToDate,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UpToDate
/*     */   extends Task
/*     */   implements Condition
/*     */ {
/*     */   private String _property;
/*     */   private String _value;
/*     */   private File _sourceFile;
/*     */   private File _targetFile;
/*  93 */   private Vector sourceFileSets = new Vector();
/*     */   
/*  95 */   protected Mapper mapperElement = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setProperty(String property) { this._property = property; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public void setValue(String value) { this._value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   private String getValue() { return (this._value != null) ? this._value : ""true""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setTargetFile(File file) { this._targetFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 141 */   public void setSrcfile(File file) { this._sourceFile = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public void addSrcfiles(FileSet fs) { this.sourceFileSets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 155 */     if (this.mapperElement != null) {
/* 156 */       throw new BuildException(""Cannot define more than one mapper"", this.location);
/*     */     }
/*     */     
/* 159 */     this.mapperElement = new Mapper(this.project);
/* 160 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() {
/* 168 */     if (this.sourceFileSets.size() == 0 && this._sourceFile == null) {
/* 169 */       throw new BuildException(""At least one srcfile or a nested <srcfiles> element must be set."");
/*     */     }
/*     */ 
/*     */     
/* 173 */     if (this.sourceFileSets.size() > 0 && this._sourceFile != null) {
/* 174 */       throw new BuildException(""Cannot specify both the srcfile attribute and a nested <srcfiles> element."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 179 */     if (this._targetFile == null && this.mapperElement == null) {
/* 180 */       throw new BuildException(""The targetfile attribute or a nested mapper element must be set."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 185 */     if (this._targetFile != null && !this._targetFile.exists()) {
/* 186 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 190 */     if (this._sourceFile != null && !this._sourceFile.exists()) {
/* 191 */       throw new BuildException(this._sourceFile.getAbsolutePath() + "" not found."");
/*     */     }
/*     */ 
/*     */     
/* 195 */     Enumeration enum = this.sourceFileSets.elements();
/* 196 */     boolean upToDate = true;
/* 197 */     while (upToDate && enum.hasMoreElements()) {
/* 198 */       FileSet fs = enum.nextElement();
/* 199 */       DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 200 */       upToDate = (upToDate && scanDir(fs.getDir(this.project), ds.getIncludedFiles()));
/*     */     } 
/*     */ 
/*     */     
/* 204 */     if (this._sourceFile != null) {
/* 205 */       if (this.mapperElement == null) {
/* 206 */         upToDate = (upToDate && this._targetFile.lastModified() > this._sourceFile.lastModified());
/*     */       } else {
/*     */         
/* 209 */         SourceFileScanner sfs = new SourceFileScanner(this);
/* 210 */         upToDate = (upToDate && (sfs.restrict(new String[] { this._sourceFile.getAbsolutePath() }, null, null, this.mapperElement.getImplementation())).length == 0);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 217 */     return upToDate;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 226 */     if (this._property == null) {
/* 227 */       throw new BuildException(""property attribute is required."", this.location);
/*     */     }
/*     */     
/* 230 */     boolean upToDate = eval();
/* 231 */     if (upToDate) {
/* 232 */       this.project.setNewProperty(this._property, getValue());
/* 233 */       if (this.mapperElement == null) {
/* 234 */         log(""File \"""" + this._targetFile.getAbsolutePath() + ""\"" is up-to-date."", 3);
/*     */       } else {
/*     */         
/* 237 */         log(""All target files are up-to-date."", 3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   protected boolean scanDir(File srcDir, String[] files) {
/* 244 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 245 */     FileNameMapper mapper = null;
/* 246 */     File dir = srcDir;
/* 247 */     if (this.mapperElement == null) {
/* 248 */       MergingMapper mm = new MergingMapper();
/* 249 */       mm.setTo(this._targetFile.getAbsolutePath());
/* 250 */       MergingMapper mergingMapper = mm;
/* 251 */       dir = null;
/*     */     } else {
/* 253 */       mapper = this.mapperElement.getImplementation();
/*     */     } 
/* 255 */     return ((sfs.restrict(files, srcDir, dir, mapper)).length == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\UpToDate.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.WaitFor,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Condition;
/*     */ import org.apache.tools.ant.taskdefs.condition.ConditionBase;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WaitFor
/*     */   extends ConditionBase
/*     */ {
/*  92 */   private long maxWaitMillis = 180000L;
/*  93 */   private long maxWaitMultiplier = 1L;
/*  94 */   private long checkEveryMillis = 500L;
/*  95 */   private long checkEveryMultiplier = 1L;
/*     */ 
/*     */   
/*     */   private String timeoutProperty;
/*     */ 
/*     */ 
/*     */   
/* 102 */   public void setMaxWait(long time) { this.maxWaitMillis = time; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public void setMaxWaitUnit(Unit unit) { this.maxWaitMultiplier = unit.getMultiplier(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setCheckEvery(long time) { this.checkEveryMillis = time; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setCheckEveryUnit(Unit unit) { this.checkEveryMultiplier = unit.getMultiplier(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public void setTimeoutProperty(String p) { this.timeoutProperty = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 138 */     if (countConditions() > 1) {
/* 139 */       throw new BuildException(""You must not nest more than one condition into <waitfor>"");
/*     */     }
/*     */     
/* 142 */     if (countConditions() < 1) {
/* 143 */       throw new BuildException(""You must nest a condition into <waitfor>"");
/*     */     }
/*     */     
/* 146 */     Condition c = getConditions().nextElement();
/*     */     
/* 148 */     long savedMaxWaitMillis = this.maxWaitMillis;
/* 149 */     long savedCheckEveryMillis = this.checkEveryMillis;
/*     */     try {
/* 151 */       this.maxWaitMillis *= this.maxWaitMultiplier;
/* 152 */       this.checkEveryMillis *= this.checkEveryMultiplier;
/* 153 */       long start = System.currentTimeMillis();
/* 154 */       long end = start + this.maxWaitMillis;
/*     */       
/* 156 */       while (System.currentTimeMillis() < end) {
/* 157 */         if (c.eval()) {
/*     */           return;
/*     */         }
/*     */         try {
/* 161 */           Thread.sleep(this.checkEveryMillis);
/* 162 */         } catch (InterruptedException e) {}
/*     */       } 
/*     */ 
/*     */       
/* 166 */       if (this.timeoutProperty != null) {
/* 167 */         this.project.setNewProperty(this.timeoutProperty, ""true"");
/*     */       }
/*     */     } finally {
/* 170 */       this.maxWaitMillis = savedMaxWaitMillis;
/* 171 */       this.checkEveryMillis = savedCheckEveryMillis;
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static class Unit
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private static final String MILLISECOND = ""millisecond"";
/*     */     
/*     */     private static final String SECOND = ""second"";
/*     */     
/*     */     private static final String MINUTE = ""minute"";
/*     */     
/*     */     private static final String HOUR = ""hour"";
/*     */     
/*     */     private static final String DAY = ""day"";
/*     */     private static final String WEEK = ""week"";
/* 189 */     private static final String[] units = new String[] { ""millisecond"", ""second"", ""minute"", ""hour"", ""day"", ""week"" };
/*     */ 
/*     */ 
/*     */     
/* 193 */     private Hashtable timeTable = new Hashtable();
/*     */     
/*     */     public Unit() {
/* 196 */       this.timeTable.put(""millisecond"", new Long(1L));
/* 197 */       this.timeTable.put(""second"", new Long(1000L));
/* 198 */       this.timeTable.put(""minute"", new Long(60000L));
/* 199 */       this.timeTable.put(""hour"", new Long(3600000L));
/* 200 */       this.timeTable.put(""day"", new Long(86400000L));
/* 201 */       this.timeTable.put(""week"", new Long(604800000L));
/*     */     }
/*     */     
/*     */     public long getMultiplier() {
/* 205 */       String key = getValue().toLowerCase();
/* 206 */       Long l = (Long)this.timeTable.get(key);
/* 207 */       return l.longValue();
/*     */     }
/*     */ 
/*     */     
/* 211 */     public String[] getValues() { return units; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\WaitFor.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.War,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class War
/*     */   extends Jar
/*     */ {
/*     */   private File deploymentDescriptor;
/*     */   private boolean descriptorAdded;
/*     */   
/*     */   public War() {
/*  97 */     this.archiveType = ""war"";
/*  98 */     this.emptyBehavior = ""create"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void setWarfile(File warFile) { setDestFile(warFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setWebxml(File descr) {
/* 116 */     this.deploymentDescriptor = descr;
/* 117 */     if (!this.deploymentDescriptor.exists()) {
/* 118 */       throw new BuildException(""Deployment descriptor: "" + this.deploymentDescriptor + "" does not exist."");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 124 */     ZipFileSet fs = new ZipFileSet();
/* 125 */     fs.setDir(new File(this.deploymentDescriptor.getParent()));
/* 126 */     fs.setIncludes(this.deploymentDescriptor.getName());
/* 127 */     fs.setFullpath(""WEB-INF/web.xml"");
/* 128 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addLib(ZipFileSet fs) {
/* 137 */     fs.setPrefix(""WEB-INF/lib/"");
/* 138 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addClasses(ZipFileSet fs) {
/* 146 */     fs.setPrefix(""WEB-INF/classes/"");
/* 147 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addWebinf(ZipFileSet fs) {
/* 155 */     fs.setPrefix(""WEB-INF/"");
/* 156 */     addFileset((FileSet)fs);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {
/* 166 */     if (this.deploymentDescriptor == null && !isInUpdateMode()) {
/* 167 */       throw new BuildException(""webxml attribute is required"", this.location);
/*     */     }
/*     */     
/* 170 */     super.initZipOutputStream(zOut);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath) throws IOException {
/* 182 */     if (vPath.equalsIgnoreCase(""WEB-INF/web.xml"")) {
/* 183 */       if (this.deploymentDescriptor == null || !this.deploymentDescriptor.equals(file) || this.descriptorAdded) {
/*     */ 
/*     */         
/* 186 */         log(""Warning: selected "" + this.archiveType + "" files include a WEB-INF/web.xml which will be ignored "" + ""(please use webxml attribute to "" + this.archiveType + "" task)"", 1);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 191 */         super.zipFile(file, zOut, vPath);
/* 192 */         this.descriptorAdded = true;
/*     */       } 
/*     */     } else {
/* 195 */       super.zipFile(file, zOut, vPath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 204 */     this.descriptorAdded = false;
/* 205 */     super.cleanUp();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\War.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XmlProperty,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import javax.xml.parsers.DocumentBuilder;
/*     */ import javax.xml.parsers.DocumentBuilderFactory;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.w3c.dom.Document;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.NamedNodeMap;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.xml.sax.SAXException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XmlProperty
/*     */   extends Task
/*     */ {
/*     */   private File src;
/* 101 */   private String prefix = """";
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean keepRoot = true;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean validate = false;
/*     */ 
/*     */   
/*     */   private boolean collapseAttributes = false;
/*     */ 
/*     */   
/*     */   private Document document;
/*     */ 
/*     */ 
/*     */   
/* 119 */   public void init() { super.init(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 131 */     BufferedInputStream configurationStream = null;
/*     */     
/*     */     try {
/* 134 */       configurationStream = new BufferedInputStream(new FileInputStream(this.src));
/*     */ 
/*     */       
/* 137 */       DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
/*     */       
/* 139 */       factory.setValidating(this.validate);
/* 140 */       factory.setNamespaceAware(false);
/*     */       
/* 142 */       DocumentBuilder builder = factory.newDocumentBuilder();
/* 143 */       this.document = builder.parse(configurationStream);
/*     */       
/* 145 */       Element topElement = this.document.getDocumentElement();
/* 146 */       NodeList topChildren = topElement.getChildNodes();
/* 147 */       int numChildren = topChildren.getLength();
/*     */       
/* 149 */       log(""Using prefix: \"""" + this.prefix + ""\"""", 4);
/*     */       
/* 151 */       if (this.keepRoot) {
/* 152 */         addNodeRecursively(topElement, this.prefix);
/*     */       } else {
/*     */         
/* 155 */         for (int i = 0; i < numChildren; i++) {
/* 156 */           addNodeRecursively(topChildren.item(i), this.prefix);
/*     */         }
/*     */       }
/*     */     
/*     */     } catch (SAXException sxe) {
/*     */       
/* 162 */       Exception x = sxe = null;
/* 163 */       if (sxe.getException() != null)
/* 164 */         x = sxe.getException(); 
/* 165 */       throw new BuildException(x);
/*     */     }
/*     */     catch (ParserConfigurationException pce) {
/*     */       
/* 169 */       throw new BuildException(pce);
/*     */     } catch (IOException ioe) {
/*     */       
/* 172 */       throw new BuildException(ioe);
/*     */     } finally {
/* 174 */       if (configurationStream != null) {
/*     */         try {
/* 176 */           configurationStream.close();
/* 177 */         } catch (Exception e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void addNodeRecursively(Node node, String prefix) {
/* 189 */     if (node.hasAttributes()) {
/* 190 */       NamedNodeMap nodeAttributes = node.getAttributes();
/* 191 */       for (int i = 0; i < nodeAttributes.getLength(); i++) {
/* 192 */         String str; Node attributeNode = nodeAttributes.item(i);
/*     */ 
/*     */         
/* 195 */         if (this.collapseAttributes) {
/* 196 */           str = prefix + (prefix.trim().equals("""") ? """" : ""."") + node.getNodeName() + ""."" + attributeNode.getNodeName();
/*     */         } else {
/*     */           
/* 199 */           str = prefix + (prefix.trim().equals("""") ? """" : ""."") + node.getNodeName() + ""("" + attributeNode.getNodeName() + "")"";
/*     */         } 
/*     */         
/* 202 */         String attributeValue = attributeNode.getNodeValue();
/* 203 */         log(str + "":"" + attributeValue, 4);
/* 204 */         this.project.setNewProperty(str, attributeValue);
/*     */       } 
/*     */     } 
/*     */     
/* 208 */     if (node.getNodeType() == 3) {
/* 209 */       String nodeText = node.getNodeValue();
/* 210 */       if (nodeText.trim().length() != 0) {
/* 211 */         log(prefix + "":"" + nodeText, 4);
/* 212 */         this.project.setNewProperty(prefix, nodeText);
/*     */       } 
/*     */     } 
/*     */     
/* 216 */     if (node.hasChildNodes()) {
/* 217 */       prefix = prefix + (prefix.trim().equals("""") ? """" : ""."") + node.getNodeName();
/*     */       
/* 219 */       NodeList nodeChildren = node.getChildNodes();
/* 220 */       int numChildren = nodeChildren.getLength();
/*     */       
/* 222 */       for (int i = 0; i < numChildren; i++) {
/* 223 */         addNodeRecursively(nodeChildren.item(i), prefix);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setFile(File src) { this.src = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setPrefix(String prefix) { this.prefix = prefix.trim(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 248 */   public void setKeeproot(boolean keepRoot) { this.keepRoot = keepRoot; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 255 */   public void setValidate(boolean validate) { this.validate = validate; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 263 */   public void setCollapseAttributes(boolean collapseAttributes) { this.collapseAttributes = collapseAttributes; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\XmlProperty.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLiaison,"package org.apache.tools.ant.taskdefs;
import java.io.File;
public interface XSLTLiaison {
  public static final String FILE_PROTOCOL_PREFIX = ""file://"";
  void setStylesheet(File paramFile) throws Exception;
  void addParam(String paramString1, String paramString2) throws Exception;
  void transform(File paramFile1, File paramFile2) throws Exception;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\XSLTLiaison.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLogger,"package org.apache.tools.ant.taskdefs;
public interface XSLTLogger {
  void log(String paramString);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\XSLTLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTLoggerAware,"package org.apache.tools.ant.taskdefs;
public interface XSLTLoggerAware {
  void setLogger(XSLTLogger paramXSLTLogger);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\XSLTLoggerAware.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.XSLTProcess,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import javax.xml.transform.URIResolver;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.taskdefs.optional.TraXLiaison;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ import org.apache.tools.ant.types.XMLCatalog;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.xml.sax.EntityResolver;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XSLTProcess
/*     */   extends MatchingTask
/*     */   implements XSLTLogger
/*     */ {
/*  90 */   private File destDir = null;
/*     */ 
/*     */   
/*  93 */   private File baseDir = null;
/*     */ 
/*     */   
/*  96 */   private String xslFile = null;
/*     */ 
/*     */   
/*  99 */   private String targetExtension = "".html"";
/*     */ 
/*     */   
/* 102 */   private Vector params = new Vector();
/*     */ 
/*     */   
/* 105 */   private File inFile = null;
/*     */ 
/*     */   
/* 108 */   private File outFile = null;
/*     */ 
/*     */   
/*     */   private String processor;
/*     */ 
/*     */   
/* 114 */   private Path classpath = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private XSLTLiaison liaison;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean stylesheetLoaded = false;
/*     */ 
/*     */   
/*     */   private boolean force = false;
/*     */ 
/*     */   
/*     */   private FileUtils fileUtils;
/*     */ 
/*     */   
/* 131 */   private Vector outputProperties = new Vector();
/*     */ 
/*     */   
/* 134 */   private XMLCatalog xmlCatalog = new XMLCatalog();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String TRAX_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.TraXLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String XSLP_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.XslpLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String XALAN_LIAISON_CLASS = ""org.apache.tools.ant.taskdefs.optional.XalanLiaison"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean performDirectoryScan = true;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public XSLTProcess() { this.fileUtils = FileUtils.newFileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void setScanIncludedDirectories(boolean b) { this.performDirectoryScan = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 180 */     File savedBaseDir = this.baseDir;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 186 */     if (this.xslFile == null) {
/* 187 */       throw new BuildException(""no stylesheet specified"", this.location);
/*     */     }
/*     */     
/*     */     try {
/* 191 */       if (this.baseDir == null) {
/* 192 */         this.baseDir = this.project.resolveFile(""."");
/*     */       }
/*     */       
/* 195 */       this.liaison = getLiaison();
/*     */ 
/*     */       
/* 198 */       if (this.liaison instanceof XSLTLoggerAware) {
/* 199 */         ((XSLTLoggerAware)this.liaison).setLogger(this);
/*     */       }
/*     */       
/* 202 */       log(""Using "" + this.liaison.getClass().toString(), 3);
/*     */       
/* 204 */       File stylesheet = this.project.resolveFile(this.xslFile);
/* 205 */       if (!stylesheet.exists()) {
/* 206 */         stylesheet = this.fileUtils.resolveFile(this.baseDir, this.xslFile);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 211 */         if (stylesheet.exists()) {
/* 212 */           log(""DEPRECATED - the style attribute should be relative to the project's"");
/*     */           
/* 214 */           log(""             basedir, not the tasks's basedir."");
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 219 */       if (this.inFile != null && this.outFile != null) {
/* 220 */         process(this.inFile, this.outFile, stylesheet);
/*     */ 
/*     */ 
/*     */ 
/*     */         
/*     */         return;
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 230 */       if (this.destDir == null) {
/* 231 */         String msg = ""destdir attributes must be set!"";
/* 232 */         throw new BuildException(msg);
/*     */       } 
/* 234 */       DirectoryScanner scanner = getDirectoryScanner(this.baseDir);
/* 235 */       log(""Transforming into "" + this.destDir, 2);
/*     */ 
/*     */       
/* 238 */       String[] list = scanner.getIncludedFiles();
/* 239 */       for (int i = 0; i < list.length; i++) {
/* 240 */         process(this.baseDir, list[i], this.destDir, stylesheet);
/*     */       }
/* 242 */       if (this.performDirectoryScan) {
/*     */         
/* 244 */         String[] dirs = scanner.getIncludedDirectories();
/* 245 */         for (int j = 0; j < dirs.length; j++) {
/* 246 */           list = (new File(this.baseDir, dirs[j])).list();
/* 247 */           for (int i = 0; i < list.length; i++) {
/* 248 */             process(this.baseDir, list[i], this.destDir, stylesheet);
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } finally {
/* 253 */       this.liaison = null;
/* 254 */       this.stylesheetLoaded = false;
/* 255 */       this.baseDir = savedBaseDir;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public void setForce(boolean force) { this.force = force; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 276 */   public void setBasedir(File dir) { this.baseDir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 287 */   public void setDestdir(File dir) { this.destDir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 296 */   public void setExtension(String name) { this.targetExtension = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 306 */   public void setStyle(String xslFile) { this.xslFile = xslFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 315 */   public void setClasspath(Path classpath) { createClasspath().append(classpath); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 324 */     if (this.classpath == null) {
/* 325 */       this.classpath = new Path(this.project);
/*     */     }
/* 327 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 337 */   public void setClasspathRef(Reference r) { createClasspath().setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 348 */   public void setProcessor(String processor) { this.processor = processor; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 357 */   public void addConfiguredXMLCatalog(XMLCatalog xmlCatalog) { this.xmlCatalog.addConfiguredXMLCatalog(xmlCatalog); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void resolveProcessor(String proc) throws Exception {
/* 369 */     if (proc.equals(""trax"")) {
/* 370 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.TraXLiaison"");
/* 371 */       this.liaison = clazz.newInstance();
/* 372 */     } else if (proc.equals(""xslp"")) {
/* 373 */       log(""DEPRECATED - xslp processor is deprecated. Use trax or xalan instead."");
/*     */       
/* 375 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XslpLiaison"");
/* 376 */       this.liaison = clazz.newInstance();
/* 377 */     } else if (proc.equals(""xalan"")) {
/* 378 */       Class clazz = loadClass(""org.apache.tools.ant.taskdefs.optional.XalanLiaison"");
/* 379 */       this.liaison = clazz.newInstance();
/*     */     } else {
/* 381 */       this.liaison = loadClass(proc).newInstance();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Class loadClass(String classname) throws Exception {
/* 394 */     if (this.classpath == null) {
/* 395 */       return Class.forName(classname);
/*     */     }
/* 397 */     AntClassLoader al = new AntClassLoader(this.project, this.classpath);
/* 398 */     Class c = al.loadClass(classname);
/* 399 */     AntClassLoader.initializeClass(c);
/* 400 */     return c;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 411 */   public void setOut(File outFile) { this.outFile = outFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 421 */   public void setIn(File inFile) { this.inFile = inFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void process(File baseDir, String xmlFile, File destDir, File stylesheet) throws BuildException {
/* 438 */     String fileExt = this.targetExtension;
/* 439 */     File outFile = null;
/* 440 */     File inFile = null;
/*     */     
/*     */     try {
/* 443 */       long styleSheetLastModified = stylesheet.lastModified();
/* 444 */       inFile = new File(baseDir, xmlFile);
/*     */       
/* 446 */       if (inFile.isDirectory()) {
/* 447 */         log(""Skipping "" + inFile + "" it is a directory."", 3);
/*     */         
/*     */         return;
/*     */       } 
/*     */       
/* 452 */       int dotPos = xmlFile.lastIndexOf('.');
/* 453 */       if (dotPos > 0) {
/* 454 */         outFile = new File(destDir, xmlFile.substring(0, xmlFile.lastIndexOf('.')) + fileExt);
/*     */       } else {
/*     */         
/* 457 */         outFile = new File(destDir, xmlFile + fileExt);
/*     */       } 
/* 459 */       if (this.force || inFile.lastModified() > outFile.lastModified() || styleSheetLastModified > outFile.lastModified())
/*     */       {
/*     */         
/* 462 */         ensureDirectoryFor(outFile);
/* 463 */         log(""Processing "" + inFile + "" to "" + outFile);
/*     */         
/* 465 */         configureLiaison(stylesheet);
/* 466 */         this.liaison.transform(inFile, outFile);
/*     */       }
/*     */     
/*     */     } catch (Exception ex) {
/*     */       
/* 471 */       log(""Failed to process "" + inFile, 2);
/* 472 */       if (outFile != null) {
/* 473 */         outFile.delete();
/*     */       }
/*     */       
/* 476 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void process(File inFile, File outFile, File stylesheet) throws BuildException {
/*     */     try {
/* 492 */       long styleSheetLastModified = stylesheet.lastModified();
/* 493 */       log(""In file "" + inFile + "" time: "" + inFile.lastModified(), 4);
/*     */       
/* 495 */       log(""Out file "" + outFile + "" time: "" + outFile.lastModified(), 4);
/*     */       
/* 497 */       log(""Style file "" + this.xslFile + "" time: "" + styleSheetLastModified, 4);
/*     */       
/* 499 */       if (this.force || inFile.lastModified() > outFile.lastModified() || styleSheetLastModified > outFile.lastModified()) {
/*     */ 
/*     */         
/* 502 */         ensureDirectoryFor(outFile);
/* 503 */         log(""Processing "" + inFile + "" to "" + outFile, 2);
/*     */         
/* 505 */         configureLiaison(stylesheet);
/* 506 */         this.liaison.transform(inFile, outFile);
/*     */       } 
/*     */     } catch (Exception ex) {
/* 509 */       log(""Failed to process "" + inFile, 2);
/* 510 */       if (outFile != null) {
/* 511 */         outFile.delete();
/*     */       }
/* 513 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void ensureDirectoryFor(File targetFile) throws BuildException {
/* 525 */     File directory = this.fileUtils.getParentFile(targetFile);
/* 526 */     if (!directory.exists() && 
/* 527 */       !directory.mkdirs()) {
/* 528 */       throw new BuildException(""Unable to create directory: "" + directory.getAbsolutePath());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected XSLTLiaison getLiaison() {
/* 542 */     if (this.liaison == null) {
/* 543 */       if (this.processor != null) {
/*     */         try {
/* 545 */           resolveProcessor(this.processor);
/*     */         } catch (Exception e) {
/* 547 */           throw new BuildException(e);
/*     */         } 
/*     */       } else {
/*     */         
/* 551 */         try { resolveProcessor(""trax""); }
/*     */         
/* 553 */         catch (Throwable e1) { 
/* 554 */           try { resolveProcessor(""xalan""); }
/*     */           
/* 556 */           catch (Throwable e2) { try {
/* 557 */               resolveProcessor(""xslp"");
/*     */             } catch (Throwable e3) {
/* 559 */               e3.printStackTrace();
/* 560 */               e2.printStackTrace();
/* 561 */               throw new BuildException(e1);
/*     */             }  }
/*     */            }
/*     */       
/*     */       } 
/*     */     }
/* 567 */     return this.liaison;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Param createParam() {
/* 576 */     Param p = new Param(this);
/* 577 */     this.params.addElement(p);
/* 578 */     return p;
/*     */   }
/*     */   
/*     */   public class Param { private String name;
/*     */     
/*     */     public Param(XSLTProcess this$0) {
/* 584 */       this.this$0 = this$0;
/*     */       
/* 586 */       this.name = null;
/*     */ 
/*     */       
/* 589 */       this.expression = null;
/*     */     }
/*     */ 
/*     */     
/*     */     private String expression;
/*     */     
/*     */     private final XSLTProcess this$0;
/*     */     
/* 597 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 607 */     public void setExpression(String expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getName() throws BuildException {
/* 617 */       if (this.name == null) {
/* 618 */         throw new BuildException(""Name attribute is missing."");
/*     */       }
/* 620 */       return this.name;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public String getExpression() throws BuildException {
/* 630 */       if (this.expression == null) {
/* 631 */         throw new BuildException(""Expression attribute is missing."");
/*     */       }
/* 633 */       return this.expression;
/*     */     } }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public OutputProperty createOutputProperty() {
/* 644 */     OutputProperty p = new OutputProperty();
/* 645 */     this.outputProperties.addElement(p);
/* 646 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class OutputProperty
/*     */   {
/*     */     private String name;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     private String value;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 667 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 676 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 683 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 691 */     public void setValue(String value) { this.value = value; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() throws BuildException {
/* 699 */     super.init();
/* 700 */     this.xmlCatalog.setProject(this.project);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureLiaison(File stylesheet) throws BuildException {
/* 710 */     if (this.stylesheetLoaded) {
/*     */       return;
/*     */     }
/* 713 */     this.stylesheetLoaded = true;
/*     */     
/*     */     try {
/* 716 */       log(""Loading stylesheet "" + stylesheet, 2);
/* 717 */       this.liaison.setStylesheet(stylesheet);
/* 718 */       for (Enumeration e = this.params.elements(); e.hasMoreElements(); ) {
/* 719 */         Param p = e.nextElement();
/* 720 */         this.liaison.addParam(p.getName(), p.getExpression());
/*     */       } 
/* 722 */       if (this.liaison instanceof TraXLiaison) {
/* 723 */         configureTraXLiaison((TraXLiaison)this.liaison);
/*     */       }
/*     */     } catch (Exception ex) {
/* 726 */       log(""Failed to transform using stylesheet "" + stylesheet, 2);
/* 727 */       throw new BuildException(ex);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void configureTraXLiaison(TraXLiaison liaison) {
/* 739 */     if (this.xmlCatalog != null) {
/* 740 */       liaison.setEntityResolver((EntityResolver)this.xmlCatalog);
/* 741 */       liaison.setURIResolver((URIResolver)this.xmlCatalog);
/*     */     } 
/*     */ 
/*     */     
/* 745 */     Enumeration props = this.outputProperties.elements();
/* 746 */     while (props.hasMoreElements()) {
/* 747 */       OutputProperty prop = props.nextElement();
/* 748 */       liaison.setOutputProperty(prop.getName(), prop.getValue());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\XSLTProcess.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.Zip,"/*     */ package org.apache.tools.ant.taskdefs;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipInputStream;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ import org.apache.tools.ant.types.PatternSet;
/*     */ import org.apache.tools.ant.types.ZipFileSet;
/*     */ import org.apache.tools.ant.types.ZipScanner;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.MergingMapper;
/*     */ import org.apache.tools.ant.util.SourceFileScanner;
/*     */ import org.apache.tools.zip.ZipEntry;
/*     */ import org.apache.tools.zip.ZipOutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Zip
/*     */   extends MatchingTask
/*     */ {
/*     */   protected File zipFile;
/*     */   private File baseDir;
/* 101 */   protected Hashtable entries = new Hashtable();
/* 102 */   private Vector groupfilesets = new Vector();
/* 103 */   private Vector filesetsFromGroupfilesets = new Vector();
/* 104 */   protected String duplicate = ""add"";
/*     */   
/*     */   private boolean doCompress = true;
/*     */   private boolean doUpdate = false;
/*     */   private boolean savedDoUpdate = false;
/*     */   private boolean doFilesonly = false;
/* 110 */   protected String archiveType = ""zip"";
/*     */ 
/*     */   
/* 113 */   private static final long EMPTY_CRC = (new CRC32()).getValue();
/* 114 */   protected String emptyBehavior = ""skip"";
/* 115 */   private Vector filesets = new Vector();
/* 116 */   protected Hashtable addedDirs = new Hashtable();
/* 117 */   private Vector addedFiles = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean addingNewFiles = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String encoding;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setZipfile(File zipFile) { setDestFile(zipFile); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void setFile(File file) { setDestFile(file); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setDestFile(File destFile) { this.zipFile = destFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 168 */   public void setBasedir(File baseDir) { this.baseDir = baseDir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   public void setCompress(boolean c) { this.doCompress = c; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setFilesonly(boolean f) { this.doFilesonly = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setUpdate(boolean c) {
/* 192 */     this.doUpdate = c;
/* 193 */     this.savedDoUpdate = c;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 200 */   public boolean isInUpdateMode() { return this.doUpdate; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void addFileset(FileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 215 */   public void addZipfileset(ZipFileSet set) { this.filesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 222 */   public void addZipGroupFileset(FileSet set) { this.groupfilesets.addElement(set); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 235 */   public void setDuplicate(Duplicate df) { this.duplicate = df.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class WhenEmpty
/*     */     extends EnumeratedAttribute
/*     */   {
/* 244 */     public String[] getValues() { return new String[] { ""fail"", ""skip"", ""create"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 258 */   public void setWhenempty(WhenEmpty we) { this.emptyBehavior = we.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 269 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 276 */     if (this.baseDir == null && this.filesets.size() == 0 && this.groupfilesets.size() == 0 && ""zip"".equals(this.archiveType))
/*     */     {
/* 278 */       throw new BuildException(""basedir attribute must be set, or at least one fileset must be given!"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 283 */     if (this.zipFile == null) {
/* 284 */       throw new BuildException(""You must specify the "" + this.archiveType + "" file to create!"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 289 */     File renamedFile = null;
/*     */ 
/*     */ 
/*     */     
/* 293 */     this.addingNewFiles = true;
/* 294 */     this.doUpdate = (this.doUpdate && this.zipFile.exists());
/*     */ 
/*     */     
/* 297 */     for (int i = 0; i < this.groupfilesets.size(); i++) {
/*     */       
/* 299 */       log(""Processing groupfileset "", 3);
/* 300 */       FileSet fs = this.groupfilesets.elementAt(i);
/* 301 */       DirectoryScanner directoryScanner = fs.getDirectoryScanner(this.project);
/* 302 */       String[] files = directoryScanner.getIncludedFiles();
/* 303 */       File basedir = directoryScanner.getBasedir();
/* 304 */       for (int j = 0; j < files.length; j++) {
/*     */         
/* 306 */         log(""Adding file "" + files[j] + "" to fileset"", 3);
/*     */         
/* 308 */         ZipFileSet zf = new ZipFileSet();
/* 309 */         zf.setSrc(new File(basedir, files[j]));
/* 310 */         this.filesets.addElement(zf);
/* 311 */         this.filesetsFromGroupfilesets.addElement(zf);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 316 */     Vector dss = new Vector();
/* 317 */     if (this.baseDir != null) {
/* 318 */       dss.addElement(getDirectoryScanner(this.baseDir));
/*     */     }
/* 320 */     for (int i = 0; i < this.filesets.size(); i++) {
/* 321 */       FileSet fs = this.filesets.elementAt(i);
/* 322 */       dss.addElement(fs.getDirectoryScanner(this.project));
/*     */     } 
/* 324 */     int dssSize = dss.size();
/* 325 */     FileScanner[] scanners = new FileScanner[dssSize];
/* 326 */     dss.copyInto((Object[])scanners);
/*     */     
/* 328 */     boolean success = false;
/*     */ 
/*     */     
/*     */     try {
/* 332 */       if (isUpToDate(scanners, this.zipFile)) {
/*     */         return;
/*     */       }
/*     */       
/* 336 */       if (this.doUpdate) {
/* 337 */         FileUtils fileUtils = FileUtils.newFileUtils();
/* 338 */         renamedFile = fileUtils.createTempFile(""zip"", "".tmp"", fileUtils.getParentFile(this.zipFile));
/*     */ 
/*     */ 
/*     */         
/*     */         try {
/* 343 */           if (!this.zipFile.renameTo(renamedFile)) {
/* 344 */             throw new BuildException(""Unable to rename old file to temporary file"");
/*     */           }
/*     */         } catch (SecurityException e) {
/*     */           
/* 348 */           throw new BuildException(""Not allowed to rename old file to temporary file"");
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 353 */       String action = this.doUpdate ? ""Updating "" : ""Building "";
/*     */       
/* 355 */       log(action + this.archiveType + "": "" + this.zipFile.getAbsolutePath());
/*     */       
/* 357 */       ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(this.zipFile));
/*     */       
/* 359 */       zOut.setEncoding(this.encoding);
/*     */       try {
/* 361 */         if (this.doCompress) {
/* 362 */           zOut.setMethod(8);
/*     */         } else {
/* 364 */           zOut.setMethod(0);
/*     */         } 
/* 366 */         initZipOutputStream(zOut);
/*     */ 
/*     */         
/* 369 */         if (this.baseDir != null) {
/* 370 */           addFiles((FileScanner)getDirectoryScanner(this.baseDir), zOut, """", """");
/*     */         }
/*     */         
/* 373 */         addFiles(this.filesets, zOut);
/* 374 */         if (this.doUpdate) {
/* 375 */           this.addingNewFiles = false;
/* 376 */           ZipFileSet oldFiles = new ZipFileSet();
/* 377 */           oldFiles.setSrc(renamedFile);
/*     */           
/* 379 */           for (int i = 0; i < this.addedFiles.size(); i++) {
/* 380 */             PatternSet.NameEntry ne = oldFiles.createExclude();
/* 381 */             ne.setName(this.addedFiles.elementAt(i));
/*     */           } 
/* 383 */           Vector tmp = new Vector(1);
/* 384 */           tmp.addElement(oldFiles);
/* 385 */           addFiles(tmp, zOut);
/*     */         } 
/* 387 */         finalizeZipOutputStream(zOut);
/*     */ 
/*     */ 
/*     */         
/* 391 */         if (this.doUpdate && 
/* 392 */           !renamedFile.delete()) {
/* 393 */           log(""Warning: unable to delete temporary file "" + renamedFile.getName(), 1);
/*     */         }
/*     */ 
/*     */         
/* 397 */         success = true;
/*     */       } finally {
/*     */         
/*     */         try {
/* 401 */           if (zOut != null) {
/* 402 */             zOut.close();
/*     */ 
/*     */ 
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/*     */         catch (IOException ex) {
/*     */ 
/*     */ 
/*     */           
/* 414 */           if (success) {
/* 415 */             throw ex;
/*     */           }
/*     */         } 
/*     */       } 
/*     */     } catch (IOException ioe) {
/* 420 */       String msg = ""Problem creating "" + this.archiveType + "": "" + ioe.getMessage();
/*     */ 
/*     */ 
/*     */       
/* 424 */       if ((!this.doUpdate || renamedFile != null) && !this.zipFile.delete()) {
/* 425 */         msg = msg + "" (and the archive is probably corrupt but I could not delete it)"";
/*     */       }
/*     */ 
/*     */       
/* 429 */       if (this.doUpdate && renamedFile != null && 
/* 430 */         !renamedFile.renameTo(this.zipFile)) {
/* 431 */         msg = msg + "" (and I couldn't rename the temporary file "" + renamedFile.getName() + "" back)"";
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 436 */       throw new BuildException(msg, ioe, this.location);
/*     */     } finally {
/* 438 */       cleanUp();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 447 */   protected boolean isAddingNewFiles() { return this.addingNewFiles; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addFiles(FileScanner scanner, ZipOutputStream zOut, String prefix, String fullpath) throws IOException {
/* 460 */     if (prefix.length() > 0 && fullpath.length() > 0) {
/* 461 */       throw new BuildException(""Both prefix and fullpath attributes must not be set on the same fileset."");
/*     */     }
/*     */ 
/*     */     
/* 465 */     File thisBaseDir = scanner.getBasedir();
/*     */ 
/*     */     
/* 468 */     String[] dirs = scanner.getIncludedDirectories();
/* 469 */     if (dirs.length > 0 && fullpath.length() > 0) {
/* 470 */       throw new BuildException(""fullpath attribute may only be specified for filesets that specify a single file."");
/*     */     }
/*     */ 
/*     */     
/* 474 */     for (int i = 0; i < dirs.length; i++) {
/* 475 */       if (!"""".equals(dirs[i])) {
/*     */ 
/*     */         
/* 478 */         String name = dirs[i].replace(File.separatorChar, '/');
/* 479 */         if (!name.endsWith(""/"")) {
/* 480 */           name = name + ""/"";
/*     */         }
/* 482 */         addParentDirs(thisBaseDir, name, zOut, prefix);
/*     */       } 
/*     */     } 
/*     */     
/* 486 */     String[] files = scanner.getIncludedFiles();
/* 487 */     if (files.length > 1 && fullpath.length() > 0) {
/* 488 */       throw new BuildException(""fullpath attribute may only be specified for filesets that specify a singlefile."");
/*     */     }
/*     */ 
/*     */     
/* 492 */     for (int i = 0; i < files.length; i++) {
/* 493 */       File f = new File(thisBaseDir, files[i]);
/* 494 */       if (fullpath.length() > 0) {
/*     */         
/* 496 */         addParentDirs(null, fullpath, zOut, """");
/* 497 */         zipFile(f, zOut, fullpath);
/*     */       } else {
/*     */         
/* 500 */         String name = files[i].replace(File.separatorChar, '/');
/* 501 */         addParentDirs(thisBaseDir, name, zOut, prefix);
/* 502 */         zipFile(f, zOut, prefix + name);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addZipEntries(ZipFileSet fs, DirectoryScanner ds, ZipOutputStream zOut, String prefix, String fullpath) throws IOException {
/* 511 */     log(""adding zip entries: "" + fullpath, 3);
/*     */     
/* 513 */     if (prefix.length() > 0 && fullpath.length() > 0) {
/* 514 */       throw new BuildException(""Both prefix and fullpath attributes must not be set on the same fileset."");
/*     */     }
/*     */ 
/*     */     
/* 518 */     ZipScanner zipScanner = (ZipScanner)ds;
/* 519 */     File zipSrc = fs.getSrc();
/*     */ 
/*     */ 
/*     */     
/* 523 */     ZipInputStream in = null;
/*     */     try {
/* 525 */       in = new ZipInputStream(new FileInputStream(zipSrc));
/*     */       ZipEntry origEntry;
/* 527 */       while ((origEntry = in.getNextEntry()) != null) {
/* 528 */         ZipEntry entry = new ZipEntry(origEntry);
/* 529 */         String vPath = entry.getName();
/* 530 */         if (zipScanner.match(vPath)) {
/* 531 */           if (fullpath.length() > 0) {
/* 532 */             addParentDirs(null, fullpath, zOut, """");
/* 533 */             zipFile(in, zOut, fullpath, entry.getTime(), zipSrc); continue;
/*     */           } 
/* 535 */           addParentDirs(null, vPath, zOut, prefix);
/* 536 */           if (!entry.isDirectory()) {
/* 537 */             zipFile(in, zOut, prefix + vPath, entry.getTime(), zipSrc);
/*     */           }
/*     */         }
/*     */       
/*     */       } 
/*     */     } finally {
/*     */       
/* 544 */       if (in != null) {
/* 545 */         in.close();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void initZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void finalizeZipOutputStream(ZipOutputStream zOut) throws IOException, BuildException {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean createEmptyZip(File zipFile) {
/* 573 */     log(""Note: creating empty "" + this.archiveType + "" archive "" + zipFile, 2);
/*     */     
/* 575 */     OutputStream os = null;
/*     */     try {
/* 577 */       os = new FileOutputStream(zipFile);
/*     */       
/* 579 */       byte[] empty = new byte[22];
/* 580 */       empty[0] = 80;
/* 581 */       empty[1] = 75;
/* 582 */       empty[2] = 5;
/* 583 */       empty[3] = 6;
/*     */       
/* 585 */       os.write(empty);
/*     */     } catch (IOException ioe) {
/* 587 */       throw new BuildException(""Could not create empty ZIP archive ("" + ioe.getMessage() + "")"", ioe, this.location);
/*     */     }
/*     */     finally {
/*     */       
/* 591 */       if (os != null) {
/*     */         try {
/* 593 */           os.close();
/* 594 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */     
/* 598 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean isUpToDate(FileScanner[] scanners, File zipFile) throws BuildException {
/* 613 */     String[][] fileNames = grabFileNames(scanners);
/* 614 */     File[] files = grabFiles(scanners, fileNames);
/* 615 */     if (files.length == 0) {
/* 616 */       if (this.emptyBehavior.equals(""skip"")) {
/* 617 */         log(""Warning: skipping "" + this.archiveType + "" archive "" + zipFile + "" because no files were included."", 1);
/*     */         
/* 619 */         return true;
/* 620 */       }  if (this.emptyBehavior.equals(""fail"")) {
/* 621 */         throw new BuildException(""Cannot create "" + this.archiveType + "" archive "" + zipFile + "": no files were included."", this.location);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 626 */       return createEmptyZip(zipFile);
/*     */     } 
/*     */     
/* 629 */     for (int i = 0; i < files.length; i++) {
/* 630 */       if (files[i].equals(zipFile)) {
/* 631 */         throw new BuildException(""A zip file cannot include itself"", this.location);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 636 */     if (!zipFile.exists()) {
/* 637 */       return false;
/*     */     }
/*     */     
/* 640 */     SourceFileScanner sfs = new SourceFileScanner(this);
/* 641 */     MergingMapper mm = new MergingMapper();
/* 642 */     mm.setTo(zipFile.getAbsolutePath());
/* 643 */     for (int i = 0; i < scanners.length; i++) {
/* 644 */       if ((sfs.restrict(fileNames[i], scanners[i].getBasedir(), null, (FileNameMapper)mm)).length > 0)
/*     */       {
/* 646 */         return false;
/*     */       }
/*     */     } 
/* 649 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 654 */   protected static File[] grabFiles(FileScanner[] scanners) { return grabFiles(scanners, grabFileNames(scanners)); }
/*     */ 
/*     */ 
/*     */   
/*     */   protected static File[] grabFiles(FileScanner[] scanners, String[][] fileNames) {
/* 659 */     Vector files = new Vector();
/* 660 */     for (int i = 0; i < fileNames.length; i++) {
/* 661 */       File thisBaseDir = scanners[i].getBasedir();
/* 662 */       for (int j = 0; j < (fileNames[i]).length; j++) {
/* 663 */         files.addElement(new File(thisBaseDir, fileNames[i][j]));
/*     */       }
/*     */     } 
/* 666 */     File[] toret = new File[files.size()];
/* 667 */     files.copyInto((Object[])toret);
/* 668 */     return toret;
/*     */   }
/*     */   
/*     */   protected static String[][] grabFileNames(FileScanner[] scanners) {
/* 672 */     String[][] result = new String[scanners.length][];
/* 673 */     for (int i = 0; i < scanners.length; i++) {
/* 674 */       String[] files = scanners[i].getIncludedFiles();
/* 675 */       String[] dirs = scanners[i].getIncludedDirectories();
/* 676 */       result[i] = new String[files.length + dirs.length];
/* 677 */       System.arraycopy(files, 0, result[i], 0, files.length);
/* 678 */       System.arraycopy(dirs, 0, result[i], files.length, dirs.length);
/*     */     } 
/* 680 */     return result;
/*     */   }
/*     */ 
/*     */   
/*     */   protected void zipDir(File dir, ZipOutputStream zOut, String vPath) throws IOException {
/* 685 */     if (this.addedDirs.get(vPath) != null) {
/*     */       return;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 691 */     log(""adding directory "" + vPath, 3);
/* 692 */     this.addedDirs.put(vPath, vPath);
/*     */     
/* 694 */     ZipEntry ze = new ZipEntry(vPath);
/* 695 */     if (dir != null && dir.exists()) {
/* 696 */       ze.setTime(dir.lastModified());
/*     */     } else {
/* 698 */       ze.setTime(System.currentTimeMillis());
/*     */     } 
/* 700 */     ze.setSize(0L);
/* 701 */     ze.setMethod(0);
/*     */     
/* 703 */     ze.setCrc(EMPTY_CRC);
/*     */ 
/*     */     
/* 706 */     ze.setExternalAttributes(1107099664L);
/*     */     
/* 708 */     zOut.putNextEntry(ze);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   protected void zipFile(InputStream in, ZipOutputStream zOut, String vPath, long lastModified, File file) throws IOException {
/* 714 */     if (this.entries.contains(vPath)) {
/*     */       
/* 716 */       if (this.duplicate.equals(""preserve"")) {
/* 717 */         log(vPath + "" already added, skipping"", 2); return;
/*     */       } 
/* 719 */       if (this.duplicate.equals(""fail"")) {
/* 720 */         throw new BuildException(""Duplicate file "" + vPath + "" was found and the duplicate "" + ""attribute is 'fail'."");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 725 */       log(""duplicate file "" + vPath + "" found, adding."", 3);
/*     */     }
/*     */     else {
/*     */       
/* 729 */       log(""adding entry "" + vPath, 3);
/*     */     } 
/*     */     
/* 732 */     this.entries.put(vPath, vPath);
/*     */     
/* 734 */     ZipEntry ze = new ZipEntry(vPath);
/* 735 */     ze.setTime(lastModified);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 747 */     if (!this.doCompress) {
/* 748 */       long size = 0L;
/* 749 */       CRC32 cal = new CRC32();
/* 750 */       if (!in.markSupported()) {
/*     */         
/* 752 */         ByteArrayOutputStream bos = new ByteArrayOutputStream();
/*     */         
/* 754 */         byte[] buffer = new byte[8192];
/* 755 */         int count = 0;
/*     */         do {
/* 757 */           size += count;
/* 758 */           cal.update(buffer, 0, count);
/* 759 */           bos.write(buffer, 0, count);
/* 760 */           count = in.read(buffer, 0, buffer.length);
/* 761 */         } while (count != -1);
/* 762 */         in = new ByteArrayInputStream(bos.toByteArray());
/*     */       } else {
/*     */         
/* 765 */         in.mark(2147483647);
/* 766 */         byte[] buffer = new byte[8192];
/* 767 */         int count = 0;
/*     */         do {
/* 769 */           size += count;
/* 770 */           cal.update(buffer, 0, count);
/* 771 */           count = in.read(buffer, 0, buffer.length);
/* 772 */         } while (count != -1);
/* 773 */         in.reset();
/*     */       } 
/* 775 */       ze.setSize(size);
/* 776 */       ze.setCrc(cal.getValue());
/*     */     } 
/*     */     
/* 779 */     zOut.putNextEntry(ze);
/*     */     
/* 781 */     byte[] buffer = new byte[8192];
/* 782 */     int count = 0;
/*     */     do {
/* 784 */       if (count != 0) {
/* 785 */         zOut.write(buffer, 0, count);
/*     */       }
/* 787 */       count = in.read(buffer, 0, buffer.length);
/* 788 */     } while (count != -1);
/* 789 */     this.addedFiles.addElement(vPath);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void zipFile(File file, ZipOutputStream zOut, String vPath) throws IOException {
/* 794 */     if (file.equals(this.zipFile)) {
/* 795 */       throw new BuildException(""A zip file cannot include itself"", this.location);
/*     */     }
/*     */ 
/*     */     
/* 799 */     FileInputStream fIn = new FileInputStream(file);
/*     */     try {
/* 801 */       zipFile(fIn, zOut, vPath, file.lastModified(), null);
/*     */     } finally {
/* 803 */       fIn.close();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addParentDirs(File baseDir, String entry, ZipOutputStream zOut, String prefix) throws IOException {
/* 813 */     if (!this.doFilesonly) {
/* 814 */       Stack directories = new Stack();
/* 815 */       int slashPos = entry.length();
/*     */ 
/*     */       
/* 818 */       String dir = entry.substring(0, slashPos + 1);
/* 819 */       while ((slashPos = entry.lastIndexOf('/', slashPos - 1)) != -1 && this.addedDirs.get(prefix + dir) == null)
/*     */       {
/*     */         
/* 822 */         directories.push(dir);
/*     */       }
/*     */       
/* 825 */       while (!directories.isEmpty()) {
/* 826 */         String dir = directories.pop();
/* 827 */         File f = null;
/* 828 */         if (baseDir != null) {
/* 829 */           f = new File(baseDir, dir);
/*     */         } else {
/* 831 */           f = new File(dir);
/*     */         } 
/* 833 */         zipDir(f, zOut, prefix + dir);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void addFiles(Vector filesets, ZipOutputStream zOut) throws IOException {
/* 846 */     for (int i = 0; i < filesets.size(); i++) {
/* 847 */       FileSet fs = filesets.elementAt(i);
/* 848 */       DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/*     */       
/* 850 */       String prefix = """";
/* 851 */       String fullpath = """";
/* 852 */       if (fs instanceof ZipFileSet) {
/* 853 */         ZipFileSet zfs = (ZipFileSet)fs;
/* 854 */         prefix = zfs.getPrefix();
/* 855 */         fullpath = zfs.getFullpath();
/*     */       } 
/*     */       
/* 858 */       if (prefix.length() > 0 && !prefix.endsWith(""/"") && !prefix.endsWith(""\\""))
/*     */       {
/*     */         
/* 861 */         prefix = prefix + ""/"";
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 866 */       if (prefix.length() > 0) {
/* 867 */         addParentDirs(null, prefix, zOut, """");
/* 868 */         zipDir(null, zOut, prefix);
/* 869 */       } else if (fullpath.length() > 0) {
/* 870 */         addParentDirs(null, fullpath, zOut, """");
/*     */       } 
/*     */       
/* 873 */       if (fs instanceof ZipFileSet && ((ZipFileSet)fs).getSrc() != null) {
/*     */         
/* 875 */         addZipEntries((ZipFileSet)fs, ds, zOut, prefix, fullpath);
/*     */       } else {
/*     */         
/* 878 */         addFiles((FileScanner)ds, zOut, prefix, fullpath);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void cleanUp() {
/* 898 */     this.addedDirs.clear();
/* 899 */     this.addedFiles.removeAllElements();
/* 900 */     this.entries.clear();
/* 901 */     this.addingNewFiles = false;
/* 902 */     this.doUpdate = this.savedDoUpdate;
/* 903 */     Enumeration enum = this.filesetsFromGroupfilesets.elements();
/* 904 */     while (enum.hasMoreElements()) {
/* 905 */       ZipFileSet zf = enum.nextElement();
/* 906 */       this.filesets.removeElement(zf);
/*     */     } 
/* 908 */     this.filesetsFromGroupfilesets.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {
/* 920 */     this.filesets.removeAllElements();
/* 921 */     this.zipFile = null;
/* 922 */     this.baseDir = null;
/* 923 */     this.groupfilesets.removeAllElements();
/* 924 */     this.duplicate = ""add"";
/* 925 */     this.archiveType = ""zip"";
/* 926 */     this.doCompress = true;
/* 927 */     this.emptyBehavior = ""skip"";
/* 928 */     this.doUpdate = false;
/* 929 */     this.doFilesonly = false;
/* 930 */     this.encoding = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Duplicate
/*     */     extends EnumeratedAttribute
/*     */   {
/* 939 */     public String[] getValues() { return new String[] { ""add"", ""preserve"", ""fail"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\Zip.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapter,"package org.apache.tools.ant.taskdefs.compilers;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Javac;
public interface CompilerAdapter {
  void setJavac(Javac paramJavac);
  boolean execute() throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CompilerAdapterFactory
/*     */ {
/*     */   public static CompilerAdapter getCompiler(String compilerType, Task task) throws BuildException {
/* 100 */     boolean isClassicCompilerSupported = true;
/*     */     
/* 102 */     if (JavaEnvUtils.isJavaVersion(""1.4"")) {
/* 103 */       isClassicCompilerSupported = false;
/*     */     }
/*     */     
/* 106 */     if (compilerType.equalsIgnoreCase(""jikes"")) {
/* 107 */       return new Jikes();
/*     */     }
/* 109 */     if (compilerType.equalsIgnoreCase(""extJavac"")) {
/* 110 */       return new JavacExternal();
/*     */     }
/* 112 */     if (compilerType.equalsIgnoreCase(""classic"") || compilerType.equalsIgnoreCase(""javac1.1"") || compilerType.equalsIgnoreCase(""javac1.2"")) {
/*     */ 
/*     */       
/* 115 */       if (isClassicCompilerSupported) {
/* 116 */         return new Javac12();
/*     */       }
/* 118 */       task.log(""This version of java does not support the classic compiler; upgrading to modern"", 1);
/*     */ 
/*     */ 
/*     */       
/* 122 */       compilerType = ""modern"";
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 127 */     if (compilerType.equalsIgnoreCase(""modern"") || compilerType.equalsIgnoreCase(""javac1.3"") || compilerType.equalsIgnoreCase(""javac1.4"")) {
/*     */ 
/*     */ 
/*     */       
/* 131 */       if (doesModernCompilerExist()) {
/* 132 */         return new Javac13();
/*     */       }
/* 134 */       if (isClassicCompilerSupported) {
/* 135 */         task.log(""Modern compiler not found - looking for classic compiler"", 1);
/*     */         
/* 137 */         return new Javac12();
/*     */       } 
/* 139 */       throw new BuildException(""Unable to find a javac compiler;\ncom.sun.tools.javac.Main is not on the classpath.\nPerhaps JAVA_HOME does not point to the JDK"");
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 150 */     if (compilerType.equalsIgnoreCase(""jvc"") || compilerType.equalsIgnoreCase(""microsoft""))
/*     */     {
/* 152 */       return new Jvc();
/*     */     }
/* 154 */     if (compilerType.equalsIgnoreCase(""kjc"")) {
/* 155 */       return new Kjc();
/*     */     }
/* 157 */     if (compilerType.equalsIgnoreCase(""gcj"")) {
/* 158 */       return new Gcj();
/*     */     }
/* 160 */     if (compilerType.equalsIgnoreCase(""sj"") || compilerType.equalsIgnoreCase(""symantec""))
/*     */     {
/* 162 */       return new Sj();
/*     */     }
/* 164 */     return resolveClassName(compilerType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean doesModernCompilerExist() {
/*     */     try {
/* 173 */       Class.forName(""com.sun.tools.javac.Main"");
/* 174 */       return true;
/*     */     } catch (ClassNotFoundException cnfe) {
/* 176 */       return false;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static CompilerAdapter resolveClassName(String className) throws BuildException {
/*     */     try {
/* 191 */       Class c = Class.forName(className);
/* 192 */       Object o = c.newInstance();
/* 193 */       return (CompilerAdapter)o;
/*     */     } catch (ClassNotFoundException cnfe) {
/* 195 */       throw new BuildException(""Compiler Adapter '"" + className + ""' can't be found."", cnfe);
/*     */     } catch (ClassCastException cce) {
/*     */       
/* 198 */       throw new BuildException(className + "" isn't the classname of "" + ""a compiler adapter."", cce);
/*     */     }
/*     */     catch (Throwable t) {
/*     */       
/* 202 */       throw new BuildException(""Compiler Adapter "" + className + "" caused an interesting exception."", t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\CompilerAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintWriter;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Location;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Execute;
/*     */ import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
/*     */ import org.apache.tools.ant.taskdefs.Javac;
/*     */ import org.apache.tools.ant.taskdefs.LogStreamHandler;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultCompilerAdapter
/*     */   implements CompilerAdapter
/*     */ {
/*     */   protected Path src;
/*     */   protected File destDir;
/*     */   protected String encoding;
/*     */   protected boolean debug = false;
/*     */   protected boolean optimize = false;
/*     */   protected boolean deprecation = false;
/*     */   protected boolean depend = false;
/*     */   protected boolean verbose = false;
/*     */   protected String target;
/*     */   protected Path bootclasspath;
/*     */   protected Path extdirs;
/*     */   protected Path compileClasspath;
/*     */   protected Path compileSourcepath;
/*     */   protected Project project;
/*     */   protected Location location;
/*     */   protected boolean includeAntRuntime;
/*     */   protected boolean includeJavaRuntime;
/*     */   protected String memoryInitialSize;
/*     */   protected String memoryMaximumSize;
/*     */   protected File[] compileList;
/* 112 */   protected static String lSep = System.getProperty(""line.separator"");
/*     */   
/*     */   protected Javac attributes;
/* 115 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJavac(Javac attributes) {
/* 124 */     this.attributes = attributes;
/* 125 */     this.src = attributes.getSrcdir();
/* 126 */     this.destDir = attributes.getDestdir();
/* 127 */     this.encoding = attributes.getEncoding();
/* 128 */     this.debug = attributes.getDebug();
/* 129 */     this.optimize = attributes.getOptimize();
/* 130 */     this.deprecation = attributes.getDeprecation();
/* 131 */     this.depend = attributes.getDepend();
/* 132 */     this.verbose = attributes.getVerbose();
/* 133 */     this.target = attributes.getTarget();
/* 134 */     this.bootclasspath = attributes.getBootclasspath();
/* 135 */     this.extdirs = attributes.getExtdirs();
/* 136 */     this.compileList = attributes.getFileList();
/* 137 */     this.compileClasspath = attributes.getClasspath();
/* 138 */     this.compileSourcepath = attributes.getSourcepath();
/* 139 */     this.project = attributes.getProject();
/* 140 */     this.location = attributes.getLocation();
/* 141 */     this.includeAntRuntime = attributes.getIncludeantruntime();
/* 142 */     this.includeJavaRuntime = attributes.getIncludejavaruntime();
/* 143 */     this.memoryInitialSize = attributes.getMemoryInitialSize();
/* 144 */     this.memoryMaximumSize = attributes.getMemoryMaximumSize();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public Javac getJavac() { return this.attributes; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 161 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 166 */     if (this.destDir != null) {
/* 167 */       classpath.setLocation(this.destDir);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 173 */     if (this.compileClasspath == null) {
/* 174 */       if (this.includeAntRuntime) {
/* 175 */         classpath.addExisting(Path.systemClasspath);
/*     */       }
/*     */     }
/* 178 */     else if (this.includeAntRuntime) {
/* 179 */       classpath.addExisting(this.compileClasspath.concatSystemClasspath(""last""));
/*     */     } else {
/*     */       
/* 182 */       classpath.addExisting(this.compileClasspath.concatSystemClasspath(""ignore""));
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 187 */     if (this.includeJavaRuntime) {
/* 188 */       classpath.addJavaRuntime();
/*     */     }
/*     */     
/* 191 */     return classpath;
/*     */   }
/*     */ 
/*     */   
/* 195 */   protected Commandline setupJavacCommandlineSwitches(Commandline cmd) { return setupJavacCommandlineSwitches(cmd, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommandlineSwitches(Commandline cmd, boolean useDebugLevel) {
/* 204 */     Path classpath = getCompileClasspath();
/*     */ 
/*     */     
/* 207 */     Path sourcepath = null;
/* 208 */     if (this.compileSourcepath != null) {
/* 209 */       sourcepath = this.compileSourcepath;
/*     */     } else {
/* 211 */       sourcepath = this.src;
/*     */     } 
/*     */     
/* 214 */     String memoryParameterPrefix = assumeJava11() ? ""-J-"" : ""-J-X"";
/* 215 */     if (this.memoryInitialSize != null) {
/* 216 */       if (!this.attributes.isForkedJavac()) {
/* 217 */         this.attributes.log(""Since fork is false, ignoring memoryInitialSize setting."", 1);
/*     */       }
/*     */       else {
/*     */         
/* 221 */         cmd.createArgument().setValue(memoryParameterPrefix + ""ms"" + this.memoryInitialSize);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 226 */     if (this.memoryMaximumSize != null) {
/* 227 */       if (!this.attributes.isForkedJavac()) {
/* 228 */         this.attributes.log(""Since fork is false, ignoring memoryMaximumSize setting."", 1);
/*     */       }
/*     */       else {
/*     */         
/* 232 */         cmd.createArgument().setValue(memoryParameterPrefix + ""mx"" + this.memoryMaximumSize);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 237 */     if (this.attributes.getNowarn()) {
/* 238 */       cmd.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */     
/* 241 */     if (this.deprecation == true) {
/* 242 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 245 */     if (this.destDir != null) {
/* 246 */       cmd.createArgument().setValue(""-d"");
/* 247 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 250 */     cmd.createArgument().setValue(""-classpath"");
/*     */ 
/*     */ 
/*     */     
/* 254 */     if (assumeJava11()) {
/* 255 */       Path cp = new Path(this.project);
/*     */ 
/*     */ 
/*     */       
/* 259 */       if (this.bootclasspath != null) {
/* 260 */         cp.append(this.bootclasspath);
/*     */       }
/* 262 */       if (this.extdirs != null) {
/* 263 */         cp.addExtdirs(this.extdirs);
/*     */       }
/* 265 */       cp.append(classpath);
/* 266 */       cp.append(sourcepath);
/* 267 */       cmd.createArgument().setPath(cp);
/*     */     } else {
/* 269 */       cmd.createArgument().setPath(classpath);
/*     */ 
/*     */       
/* 272 */       if (sourcepath.size() > 0) {
/* 273 */         cmd.createArgument().setValue(""-sourcepath"");
/* 274 */         cmd.createArgument().setPath(sourcepath);
/*     */       } 
/* 276 */       if (this.target != null) {
/* 277 */         cmd.createArgument().setValue(""-target"");
/* 278 */         cmd.createArgument().setValue(this.target);
/*     */       } 
/* 280 */       if (this.bootclasspath != null && this.bootclasspath.size() > 0) {
/* 281 */         cmd.createArgument().setValue(""-bootclasspath"");
/* 282 */         cmd.createArgument().setPath(this.bootclasspath);
/*     */       } 
/* 284 */       if (this.extdirs != null && this.extdirs.size() > 0) {
/* 285 */         cmd.createArgument().setValue(""-extdirs"");
/* 286 */         cmd.createArgument().setPath(this.extdirs);
/*     */       } 
/*     */     } 
/*     */     
/* 290 */     if (this.encoding != null) {
/* 291 */       cmd.createArgument().setValue(""-encoding"");
/* 292 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/* 294 */     if (this.debug) {
/* 295 */       if (useDebugLevel && !assumeJava11()) {
/* 296 */         String debugLevel = this.attributes.getDebugLevel();
/* 297 */         if (debugLevel != null) {
/* 298 */           cmd.createArgument().setValue(""-g:"" + debugLevel);
/*     */         } else {
/* 300 */           cmd.createArgument().setValue(""-g"");
/*     */         } 
/*     */       } else {
/* 303 */         cmd.createArgument().setValue(""-g"");
/*     */       } 
/* 305 */     } else if (!assumeJava11()) {
/* 306 */       cmd.createArgument().setValue(""-g:none"");
/*     */     } 
/* 308 */     if (this.optimize) {
/* 309 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/*     */     
/* 312 */     if (this.depend) {
/* 313 */       if (assumeJava11()) {
/* 314 */         cmd.createArgument().setValue(""-depend"");
/* 315 */       } else if (assumeJava12()) {
/* 316 */         cmd.createArgument().setValue(""-Xdepend"");
/*     */       } else {
/* 318 */         this.attributes.log(""depend attribute is not supported by the modern compiler"", 1);
/*     */       } 
/*     */     }
/*     */ 
/*     */     
/* 323 */     if (this.verbose) {
/* 324 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/*     */     
/* 327 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 329 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupModernJavacCommandlineSwitches(Commandline cmd) {
/* 337 */     setupJavacCommandlineSwitches(cmd, true);
/* 338 */     if (this.attributes.getSource() != null && !assumeJava13()) {
/* 339 */       cmd.createArgument().setValue(""-source"");
/* 340 */       cmd.createArgument().setValue(this.attributes.getSource());
/*     */     } 
/* 342 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupModernJavacCommand() {
/* 350 */     Commandline cmd = new Commandline();
/* 351 */     setupModernJavacCommandlineSwitches(cmd);
/*     */     
/* 353 */     logAndAddFilesToCompile(cmd);
/* 354 */     return cmd;
/*     */   }
/*     */ 
/*     */   
/* 358 */   protected Commandline setupJavacCommand() { return setupJavacCommand(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupJavacCommand(boolean debugLevelCheck) {
/* 366 */     Commandline cmd = new Commandline();
/* 367 */     setupJavacCommandlineSwitches(cmd, debugLevelCheck);
/* 368 */     logAndAddFilesToCompile(cmd);
/* 369 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline cmd) {
/* 377 */     this.attributes.log(""Compilation "" + cmd.describeArguments(), 3);
/*     */ 
/*     */     
/* 380 */     StringBuffer niceSourceList = new StringBuffer(""File"");
/* 381 */     if (this.compileList.length != 1) {
/* 382 */       niceSourceList.append(""s"");
/*     */     }
/* 384 */     niceSourceList.append("" to be compiled:"");
/*     */     
/* 386 */     niceSourceList.append(lSep);
/*     */     
/* 388 */     for (int i = 0; i < this.compileList.length; i++) {
/* 389 */       String arg = this.compileList[i].getAbsolutePath();
/* 390 */       cmd.createArgument().setValue(arg);
/* 391 */       niceSourceList.append(""    "" + arg + lSep);
/*     */     } 
/*     */     
/* 394 */     this.attributes.log(niceSourceList.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int executeExternalCompile(String[] args, int firstFileName) {
/* 406 */     String[] commandArray = null;
/* 407 */     File tmpFile = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 417 */       if (Commandline.toString(args).length() > 4096 && firstFileName >= 0) {
/*     */         
/* 419 */         PrintWriter out = null;
/*     */         try {
/* 421 */           String userDirName = System.getProperty(""user.dir"");
/* 422 */           File userDir = new File(userDirName);
/* 423 */           tmpFile = this.fileUtils.createTempFile(""files"", """", userDir);
/* 424 */           out = new PrintWriter(new FileWriter(tmpFile));
/* 425 */           for (int i = firstFileName; i < args.length; i++) {
/* 426 */             out.println(args[i]);
/*     */           }
/* 428 */           out.flush();
/* 429 */           commandArray = new String[firstFileName + 1];
/* 430 */           System.arraycopy(args, 0, commandArray, 0, firstFileName);
/* 431 */           commandArray[firstFileName] = ""@"" + tmpFile;
/*     */         } catch (IOException e) {
/* 433 */           throw new BuildException(""Error creating temporary file"", e, this.location);
/*     */         } finally {
/*     */           
/* 436 */           if (out != null) {
/* 437 */             try { out.close(); } catch (Throwable t) {}
/*     */           }
/*     */         } 
/*     */       } else {
/* 441 */         commandArray = args;
/*     */       } 
/*     */       
/*     */       try {
/* 445 */         Execute exe = new Execute((ExecuteStreamHandler)new LogStreamHandler((Task)this.attributes, 2, 1));
/*     */ 
/*     */ 
/*     */         
/* 449 */         exe.setAntRun(this.project);
/* 450 */         exe.setWorkingDirectory(this.project.getBaseDir());
/* 451 */         exe.setCommandline(commandArray);
/* 452 */         exe.execute();
/* 453 */         return exe.getExitValue();
/*     */       } catch (IOException e) {
/* 455 */         throw new BuildException(""Error running "" + args[0] + "" compiler"", e, this.location);
/*     */       } 
/*     */     } finally {
/*     */       
/* 459 */       if (tmpFile != null) {
/* 460 */         tmpFile.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 469 */   protected void addExtdirsToClasspath(Path classpath) { classpath.addExtdirs(this.extdirs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 476 */   protected void addCurrentCompilerArgs(Commandline cmd) { cmd.addArguments(getJavac().getCurrentCompilerArgs()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 484 */   protected boolean assumeJava11() { return (""javac1.1"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.1"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.1""))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 496 */   protected boolean assumeJava12() { return (""javac1.2"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.2"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.2""))); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 508 */   protected boolean assumeJava13() { return (""javac1.3"".equals(this.attributes.getCompilerVersion()) || (""classic"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3"")) || (""modern"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3"")) || (""extJavac"".equals(this.attributes.getCompilerVersion()) && JavaEnvUtils.isJavaVersion(""1.3""))); }
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\DefaultCompilerAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Gcj,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Gcj
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  77 */     this.attributes.log(""Using gcj compiler"", 3);
/*  78 */     Commandline cmd = setupGCJCommand();
/*     */     
/*  80 */     int firstFileName = cmd.size();
/*  81 */     logAndAddFilesToCompile(cmd);
/*     */     
/*  83 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ 
/*     */   
/*     */   protected Commandline setupGCJCommand() {
/*  88 */     Commandline cmd = new Commandline();
/*  89 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (this.bootclasspath != null) {
/*  94 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  99 */     classpath.addExtdirs(this.extdirs);
/*     */     
/* 101 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 103 */       this.includeJavaRuntime = true;
/*     */     }
/* 105 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 109 */     if (this.compileSourcepath != null) {
/* 110 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 112 */       classpath.append(this.src);
/*     */     } 
/*     */     
/* 115 */     cmd.setExecutable(""gcj"");
/*     */     
/* 117 */     if (this.destDir != null) {
/* 118 */       cmd.createArgument().setValue(""-d"");
/* 119 */       cmd.createArgument().setFile(this.destDir);
/*     */       
/* 121 */       if (this.destDir.mkdirs()) {
/* 122 */         throw new BuildException(""Can't make output directories. Maybe permission is wrong. "");
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 127 */     cmd.createArgument().setValue(""-classpath"");
/* 128 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 130 */     if (this.encoding != null) {
/* 131 */       cmd.createArgument().setValue(""--encoding="" + this.encoding);
/*     */     }
/* 133 */     if (this.debug) {
/* 134 */       cmd.createArgument().setValue(""-g1"");
/*     */     }
/* 136 */     if (this.optimize) {
/* 137 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 143 */     cmd.createArgument().setValue(""-C"");
/*     */     
/* 145 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 147 */     return cmd;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Gcj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac12,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac12
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  88 */     this.attributes.log(""Using classic compiler"", 3);
/*  89 */     Commandline cmd = setupJavacCommand(true);
/*     */     
/*  91 */     LogOutputStream logOutputStream = new LogOutputStream((Task)this.attributes, 1);
/*     */ 
/*     */     
/*     */     try {
/*  95 */       Class c = Class.forName(""sun.tools.javac.Main"");
/*  96 */       Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });
/*     */ 
/*     */       
/*  99 */       Object compiler = cons.newInstance(new Object[] { logOutputStream, ""javac"" });
/*     */ 
/*     */ 
/*     */       
/* 103 */       Method compile = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/* 105 */       Boolean ok = (Boolean)compile.invoke(compiler, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/* 108 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/* 110 */       throw new BuildException(""Cannot use classic compiler, as it is not available.  A common solution is to set the environment variable JAVA_HOME to your jdk directory."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/* 116 */       if (ex instanceof BuildException) {
/* 117 */         throw (BuildException)ex;
/*     */       }
/* 119 */       throw new BuildException(""Error starting classic compiler: "", ex, this.location);
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/* 124 */         logOutputStream.close();
/*     */       } catch (IOException e) {
/*     */         
/* 127 */         throw new BuildException(e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Javac12.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Javac13,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Javac13
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   private static final int MODERN_COMPILER_SUCCESS = 0;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  91 */     this.attributes.log(""Using modern compiler"", 3);
/*  92 */     Commandline cmd = setupModernJavacCommand();
/*     */ 
/*     */     
/*     */     try {
/*  96 */       Class c = Class.forName(""com.sun.tools.javac.Main"");
/*  97 */       Object compiler = c.newInstance();
/*  98 */       Method compile = c.getMethod(""compile"", new Class[] { (new String[0]).getClass() });
/*     */       
/* 100 */       int result = ((Integer)compile.invoke(compiler, new Object[] { cmd.getArguments() })).intValue();
/*     */ 
/*     */       
/* 103 */       return (result == 0);
/*     */     } catch (Exception ex) {
/* 105 */       if (ex instanceof BuildException) {
/* 106 */         throw (BuildException)ex;
/*     */       }
/* 108 */       throw new BuildException(""Error starting modern compiler"", ex, this.location);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Javac13.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.JavacExternal,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class JavacExternal
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 73 */     this.attributes.log(""Using external javac compiler"", 3);
/*    */     
/* 75 */     Commandline cmd = new Commandline();
/* 76 */     cmd.setExecutable(getJavac().getJavacExecutable());
/* 77 */     setupModernJavacCommandlineSwitches(cmd);
/* 78 */     int firstFileName = assumeJava11() ? -1 : cmd.size();
/* 79 */     logAndAddFilesToCompile(cmd);
/*    */     
/* 81 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\JavacExternal.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jikes,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jikes
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  87 */     this.attributes.log(""Using jikes compiler"", 3);
/*     */     
/*  89 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  93 */     if (this.bootclasspath != null) {
/*  94 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  99 */     classpath.addExtdirs(this.extdirs);
/*     */     
/* 101 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/* 103 */       this.includeJavaRuntime = true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 110 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 114 */     if (this.compileSourcepath != null) {
/* 115 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 117 */       classpath.append(this.src);
/*     */     } 
/*     */ 
/*     */     
/* 121 */     String jikesPath = System.getProperty(""jikes.class.path"");
/* 122 */     if (jikesPath != null) {
/* 123 */       classpath.append(new Path(this.project, jikesPath));
/*     */     }
/*     */     
/* 126 */     Commandline cmd = new Commandline();
/* 127 */     cmd.setExecutable(""jikes"");
/*     */     
/* 129 */     if (this.deprecation == true) {
/* 130 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 133 */     if (this.destDir != null) {
/* 134 */       cmd.createArgument().setValue(""-d"");
/* 135 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */     
/* 138 */     cmd.createArgument().setValue(""-classpath"");
/* 139 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 141 */     if (this.encoding != null) {
/* 142 */       cmd.createArgument().setValue(""-encoding"");
/* 143 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/* 145 */     if (this.debug) {
/* 146 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/* 148 */     if (this.optimize) {
/* 149 */       cmd.createArgument().setValue(""-O"");
/*     */     }
/* 151 */     if (this.verbose) {
/* 152 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/* 154 */     if (this.depend) {
/* 155 */       cmd.createArgument().setValue(""-depend"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 170 */     String emacsProperty = this.project.getProperty(""build.compiler.emacs"");
/* 171 */     if (emacsProperty != null && Project.toBoolean(emacsProperty)) {
/* 172 */       cmd.createArgument().setValue(""+E"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 181 */     String warningsProperty = this.project.getProperty(""build.compiler.warnings"");
/*     */     
/* 183 */     if (warningsProperty != null) {
/* 184 */       this.attributes.log(""!! the build.compiler.warnings property is deprecated. !!"", 1);
/*     */       
/* 186 */       this.attributes.log(""!! Use the nowarn attribute instead. !!"", 1);
/*     */       
/* 188 */       if (!Project.toBoolean(warningsProperty))
/* 189 */         cmd.createArgument().setValue(""-nowarn""); 
/*     */     } 
/* 191 */     if (this.attributes.getNowarn())
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 198 */       cmd.createArgument().setValue(""-nowarn"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 204 */     String pedanticProperty = this.project.getProperty(""build.compiler.pedantic"");
/*     */     
/* 206 */     if (pedanticProperty != null && Project.toBoolean(pedanticProperty)) {
/* 207 */       cmd.createArgument().setValue(""+P"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 215 */     String fullDependProperty = this.project.getProperty(""build.compiler.fulldepend"");
/*     */     
/* 217 */     if (fullDependProperty != null && Project.toBoolean(fullDependProperty))
/*     */     {
/* 219 */       cmd.createArgument().setValue(""+F"");
/*     */     }
/*     */     
/* 222 */     if (this.attributes.getSource() != null) {
/* 223 */       cmd.createArgument().setValue(""-source"");
/* 224 */       cmd.createArgument().setValue(this.attributes.getSource());
/*     */     } 
/*     */     
/* 227 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 229 */     int firstFileName = cmd.size();
/* 230 */     logAndAddFilesToCompile(cmd);
/*     */     
/* 232 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Jikes.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Jvc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Jvc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   public boolean execute() throws BuildException {
/*  82 */     this.attributes.log(""Using jvc compiler"", 3);
/*     */     
/*  84 */     Path classpath = new Path(this.project);
/*     */ 
/*     */ 
/*     */     
/*  88 */     if (this.bootclasspath != null) {
/*  89 */       classpath.append(this.bootclasspath);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*  94 */     classpath.addExtdirs(this.extdirs);
/*     */     
/*  96 */     if (this.bootclasspath == null || this.bootclasspath.size() == 0)
/*     */     {
/*  98 */       this.includeJavaRuntime = true;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 105 */     classpath.append(getCompileClasspath());
/*     */ 
/*     */ 
/*     */     
/* 109 */     if (this.compileSourcepath != null) {
/* 110 */       classpath.append(this.compileSourcepath);
/*     */     } else {
/* 112 */       classpath.append(this.src);
/*     */     } 
/*     */     
/* 115 */     Commandline cmd = new Commandline();
/* 116 */     cmd.setExecutable(""jvc"");
/*     */     
/* 118 */     if (this.destDir != null) {
/* 119 */       cmd.createArgument().setValue(""/d"");
/* 120 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 124 */     cmd.createArgument().setValue(""/cp:p"");
/* 125 */     cmd.createArgument().setPath(classpath);
/*     */ 
/*     */     
/* 128 */     cmd.createArgument().setValue(""/x-"");
/*     */     
/* 130 */     cmd.createArgument().setValue(""/nomessage"");
/*     */     
/* 132 */     cmd.createArgument().setValue(""/nologo"");
/*     */     
/* 134 */     if (this.debug) {
/* 135 */       cmd.createArgument().setValue(""/g"");
/*     */     }
/* 137 */     if (this.optimize) {
/* 138 */       cmd.createArgument().setValue(""/O"");
/*     */     }
/* 140 */     if (this.verbose) {
/* 141 */       cmd.createArgument().setValue(""/verbose"");
/*     */     }
/*     */     
/* 144 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 146 */     int firstFileName = cmd.size();
/* 147 */     logAndAddFilesToCompile(cmd);
/*     */     
/* 149 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Jvc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Kjc,"/*     */ package org.apache.tools.ant.taskdefs.compilers;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Kjc
/*     */   extends DefaultCompilerAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   static Class class$(String x0) { 
/*  75 */     try { return Class.forName(x0); } catch (ClassNotFoundException x1) { throw new NoClassDefFoundError(x1.getMessage()); }
/*     */      }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  83 */     this.attributes.log(""Using kjc compiler"", 3);
/*  84 */     Commandline cmd = setupKjcCommand();
/*     */     
/*     */     try {
/*  87 */       Class c = Class.forName(""at.dms.kjc.Main"");
/*     */ 
/*     */       
/*  90 */       Method compile = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  92 */       Boolean ok = (Boolean)compile.invoke(null, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/*  95 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/*  97 */       throw new BuildException(""Cannot use kjc compiler, as it is not available. A common solution is to set the environment variable CLASSPATH to your kjc archive (kjc.jar)."", this.location);
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/* 103 */       if (ex instanceof BuildException) {
/* 104 */         throw (BuildException)ex;
/*     */       }
/* 106 */       throw new BuildException(""Error starting kjc compiler: "", ex, this.location);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupKjcCommand() {
/* 116 */     Commandline cmd = new Commandline();
/*     */ 
/*     */     
/* 119 */     Path classpath = getCompileClasspath();
/*     */     
/* 121 */     if (this.deprecation == true) {
/* 122 */       cmd.createArgument().setValue(""-deprecation"");
/*     */     }
/*     */     
/* 125 */     if (this.destDir != null) {
/* 126 */       cmd.createArgument().setValue(""-d"");
/* 127 */       cmd.createArgument().setFile(this.destDir);
/*     */     } 
/*     */ 
/*     */     
/* 131 */     cmd.createArgument().setValue(""-classpath"");
/*     */     
/* 133 */     Path cp = new Path(this.project);
/*     */ 
/*     */     
/* 136 */     if (this.bootclasspath != null) {
/* 137 */       cp.append(this.bootclasspath);
/*     */     }
/*     */     
/* 140 */     if (this.extdirs != null) {
/* 141 */       cp.addExtdirs(this.extdirs);
/*     */     }
/*     */     
/* 144 */     cp.append(classpath);
/* 145 */     if (this.compileSourcepath != null) {
/* 146 */       cp.append(this.compileSourcepath);
/*     */     } else {
/* 148 */       cp.append(this.src);
/*     */     } 
/*     */     
/* 151 */     cmd.createArgument().setPath(cp);
/*     */ 
/*     */ 
/*     */     
/* 155 */     if (this.encoding != null) {
/* 156 */       cmd.createArgument().setValue(""-encoding"");
/* 157 */       cmd.createArgument().setValue(this.encoding);
/*     */     } 
/*     */     
/* 160 */     if (this.debug) {
/* 161 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 164 */     if (this.optimize) {
/* 165 */       cmd.createArgument().setValue(""-O2"");
/*     */     }
/*     */     
/* 168 */     if (this.verbose) {
/* 169 */       cmd.createArgument().setValue(""-verbose"");
/*     */     }
/*     */     
/* 172 */     addCurrentCompilerArgs(cmd);
/*     */     
/* 174 */     logAndAddFilesToCompile(cmd);
/* 175 */     return cmd;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Kjc.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.compilers.Sj,"/*    */ package org.apache.tools.ant.taskdefs.compilers;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Sj
/*    */   extends DefaultCompilerAdapter
/*    */ {
/*    */   public boolean execute() throws BuildException {
/* 74 */     this.attributes.log(""Using symantec java compiler"", 3);
/*    */     
/* 76 */     Commandline cmd = setupJavacCommand();
/* 77 */     cmd.setExecutable(""sj"");
/*    */     
/* 79 */     int firstFileName = cmd.size() - this.compileList.length;
/*    */     
/* 81 */     return (executeExternalCompile(cmd.getCommandline(), firstFileName) == 0);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\compilers\Sj.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.And,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class And
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 74 */     Enumeration enum = getConditions();
/* 75 */     while (enum.hasMoreElements()) {
/* 76 */       Condition c = enum.nextElement();
/* 77 */       if (!c.eval()) {
/* 78 */         return false;
/*    */       }
/*    */     } 
/* 81 */     return true;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\And.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Condition,"package org.apache.tools.ant.taskdefs.condition;
import org.apache.tools.ant.BuildException;
public interface Condition {
  boolean eval() throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Condition.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.ConditionBase,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ import org.apache.tools.ant.taskdefs.Available;
/*     */ import org.apache.tools.ant.taskdefs.Checksum;
/*     */ import org.apache.tools.ant.taskdefs.UpToDate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class ConditionBase
/*     */   extends ProjectComponent
/*     */ {
/*  76 */   private Vector conditions = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  84 */   protected int countConditions() { return this.conditions.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   protected final Enumeration getConditions() { return this.conditions.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 101 */   public void addAvailable(Available a) { this.conditions.addElement(a); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void addChecksum(Checksum c) { this.conditions.addElement(c); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void addUptodate(UpToDate u) { this.conditions.addElement(u); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void addNot(Not n) { this.conditions.addElement(n); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   public void addAnd(And a) { this.conditions.addElement(a); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public void addOr(Or o) { this.conditions.addElement(o); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void addEquals(Equals e) { this.conditions.addElement(e); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void addOs(Os o) { this.conditions.addElement(o); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void addIsSet(IsSet i) { this.conditions.addElement(i); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void addHttp(Http h) { this.conditions.addElement(h); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void addSocket(Socket s) { this.conditions.addElement(s); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void addFilesMatch(FilesMatch test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void addContains(Contains test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 192 */   public void addIsTrue(IsTrue test) { this.conditions.addElement(test); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   public void addIsFalse(IsFalse test) { this.conditions.addElement(test); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\ConditionBase.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Contains,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Contains
/*     */   implements Condition
/*     */ {
/*     */   private String string;
/*     */   private String subString;
/*     */   private boolean caseSensitive = true;
/*     */   
/*  78 */   public void setString(String a1) { this.string = a1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public void setSubstring(String a2) { this.subString = a2; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setCasesensitive(boolean b) { this.caseSensitive = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 103 */     if (this.string == null || this.subString == null) {
/* 104 */       throw new BuildException(""both string and substring are required in contains"");
/*     */     }
/*     */ 
/*     */     
/* 108 */     return this.caseSensitive ? ((this.string.indexOf(this.subString) > -1)) : ((this.string.toLowerCase().indexOf(this.subString.toLowerCase()) > -1));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Contains.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Equals,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Equals
/*     */   implements Condition
/*     */ {
/*     */   private String arg1;
/*     */   private String arg2;
/*     */   private boolean trim = false;
/*     */   private boolean caseSensitive = true;
/*     */   
/*  73 */   public void setArg1(String a1) { this.arg1 = a1; }
/*     */ 
/*     */ 
/*     */   
/*  77 */   public void setArg2(String a2) { this.arg2 = a2; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  86 */   public void setTrim(boolean b) { this.trim = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   public void setCasesensitive(boolean b) { this.caseSensitive = b; }
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/*  99 */     if (this.arg1 == null || this.arg2 == null) {
/* 100 */       throw new BuildException(""both arg1 and arg2 are required in equals"");
/*     */     }
/*     */ 
/*     */     
/* 104 */     if (this.trim) {
/* 105 */       this.arg1 = this.arg1.trim();
/* 106 */       this.arg2 = this.arg2.trim();
/*     */     } 
/*     */     
/* 109 */     return this.caseSensitive ? this.arg1.equals(this.arg2) : this.arg1.equalsIgnoreCase(this.arg2);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Equals.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.FilesMatch,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.IOException;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilesMatch
/*     */   implements Condition
/*     */ {
/*     */   private File file1;
/*     */   private File file2;
/*  80 */   private FileUtils fu = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setFile1(File file1) { this.file1 = file1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setFile2(File file2) { this.file2 = file2; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/* 111 */     if (this.file1 == null || this.file2 == null) {
/* 112 */       throw new BuildException(""both file1 and file2 are required in filesmatch"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 117 */     boolean matches = false;
/*     */     try {
/* 119 */       matches = this.fu.contentEquals(this.file1, this.file2);
/*     */     } catch (IOException ioe) {
/* 121 */       throw new BuildException(""when comparing files: "" + ioe.getMessage(), ioe);
/*     */     } 
/*     */     
/* 124 */     return matches;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\FilesMatch.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Http,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.net.HttpURLConnection;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Http
/*     */   extends ProjectComponent
/*     */   implements Condition
/*     */ {
/*  75 */   private String spec = null;
/*     */ 
/*     */   
/*  78 */   public void setUrl(String url) { this.spec = url; }
/*     */ 
/*     */   
/*  81 */   private int errorsBeginAt = 400;
/*     */ 
/*     */   
/*  84 */   public void SetErrorsBeginAt(int errorsBeginAt) { this.errorsBeginAt = errorsBeginAt; }
/*     */ 
/*     */   
/*     */   public boolean eval() throws BuildException {
/*  88 */     if (this.spec == null) {
/*  89 */       throw new BuildException(""No url specified in http condition"");
/*     */     }
/*  91 */     log(""Checking for "" + this.spec, 3);
/*     */     try {
/*  93 */       URL url = new URL(this.spec);
/*     */       try {
/*  95 */         URLConnection conn = url.openConnection();
/*  96 */         if (conn instanceof HttpURLConnection) {
/*  97 */           HttpURLConnection http = (HttpURLConnection)conn;
/*  98 */           int code = http.getResponseCode();
/*  99 */           log(""Result code for "" + this.spec + "" was "" + code, 3);
/*     */           
/* 101 */           if (code > 0 && code < this.errorsBeginAt) {
/* 102 */             return true;
/*     */           }
/* 104 */           return false;
/*     */         } 
/*     */       } catch (IOException e) {
/*     */         
/* 108 */         return false;
/*     */       } 
/*     */     } catch (MalformedURLException e) {
/* 111 */       throw new BuildException(""Badly formed URL: "" + this.spec, e);
/*     */     } 
/* 113 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Http.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsFalse,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsFalse
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/* 70 */   private Boolean value = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 76 */   public void setValue(boolean value) { this.value = new Boolean(value); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 84 */     if (this.value == null) {
/* 85 */       throw new BuildException(""Nothing to test for falsehood"");
/*    */     }
/* 87 */     return !this.value.booleanValue();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\IsFalse.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsSet,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsSet
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/*    */   private String property;
/*    */   
/* 70 */   public void setProperty(String p) { this.property = p; }
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 73 */     if (this.property == null) {
/* 74 */       throw new BuildException(""No property specified for isset condition"");
/*    */     }
/*    */ 
/*    */     
/* 78 */     return (getProject().getProperty(this.property) != null);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\IsSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.IsTrue,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IsTrue
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/* 70 */   private Boolean value = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 76 */   public void setValue(boolean value) { this.value = new Boolean(value); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 84 */     if (this.value == null) {
/* 85 */       throw new BuildException(""Nothing to test for truth"");
/*    */     }
/* 87 */     return this.value.booleanValue();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\IsTrue.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Not,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Not
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 72 */     if (countConditions() > 1) {
/* 73 */       throw new BuildException(""You must not nest more than one condition into <not>"");
/*    */     }
/* 75 */     if (countConditions() < 1) {
/* 76 */       throw new BuildException(""You must nest a condition into <not>"");
/*    */     }
/* 78 */     return !((Condition)getConditions().nextElement()).eval();
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Not.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Or,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.util.Enumeration;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Or
/*    */   extends ConditionBase
/*    */   implements Condition
/*    */ {
/*    */   public boolean eval() throws BuildException {
/* 74 */     Enumeration enum = getConditions();
/* 75 */     while (enum.hasMoreElements()) {
/* 76 */       Condition c = enum.nextElement();
/* 77 */       if (c.eval()) {
/* 78 */         return true;
/*    */       }
/*    */     } 
/* 81 */     return false;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Or.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Os,"/*     */ package org.apache.tools.ant.taskdefs.condition;
/*     */ 
/*     */ import java.util.Locale;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Os
/*     */   implements Condition
/*     */ {
/*  70 */   private static final String osName = System.getProperty(""os.name"").toLowerCase(Locale.US);
/*     */   
/*  72 */   private static final String osArch = System.getProperty(""os.arch"").toLowerCase(Locale.US);
/*     */   
/*  74 */   private static final String osVersion = System.getProperty(""os.version"").toLowerCase(Locale.US);
/*     */   
/*  76 */   private static final String pathSep = System.getProperty(""path.separator"");
/*     */   
/*     */   private String family;
/*     */   
/*     */   private String name;
/*     */   private String version;
/*     */   private String arch;
/*     */   
/*     */   public Os() {}
/*     */   
/*  86 */   public Os(String family) { setFamily(family); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setFamily(String f) { this.family = f.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setName(String name) { this.name = name.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public void setArch(String arch) { this.arch = arch.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 131 */   public void setVersion(String version) { this.version = version.toLowerCase(Locale.US); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public boolean eval() throws BuildException { return isOs(this.family, this.name, this.arch, this.version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public static boolean isFamily(String family) { return isOs(family, null, null, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public static boolean isName(String name) { return isOs(null, name, null, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public static boolean isArch(String arch) { return isOs(null, null, arch, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public static boolean isVersion(String version) { return isOs(null, null, null, version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean isOs(String family, String name, String arch, String version) {
/* 196 */     boolean retValue = false;
/*     */     
/* 198 */     if (family != null || name != null || arch != null || version != null) {
/*     */ 
/*     */       
/* 201 */       boolean isFamily = true;
/* 202 */       boolean isName = true;
/* 203 */       boolean isArch = true;
/* 204 */       boolean isVersion = true;
/*     */       
/* 206 */       if (family != null) {
/* 207 */         if (family.equals(""windows"")) {
/* 208 */           isFamily = (osName.indexOf(""windows"") > -1);
/* 209 */         } else if (family.equals(""os/2"")) {
/* 210 */           isFamily = (osName.indexOf(""os/2"") > -1);
/* 211 */         } else if (family.equals(""netware"")) {
/* 212 */           isFamily = (osName.indexOf(""netware"") > -1);
/* 213 */         } else if (family.equals(""dos"")) {
/* 214 */           isFamily = (pathSep.equals("";"") && !isFamily(""netware""));
/* 215 */         } else if (family.equals(""mac"")) {
/* 216 */           isFamily = (osName.indexOf(""mac"") > -1);
/* 217 */         } else if (family.equals(""unix"")) {
/* 218 */           isFamily = (pathSep.equals("":"") && (!isFamily(""mac"") || osName.endsWith(""x"")));
/*     */         }
/* 220 */         else if (family.equals(""win9x"")) {
/* 221 */           isFamily = (isFamily(""windows"") && osName.indexOf(""nt"") < 0 && osName.indexOf(""2000"") < 0 && osName.indexOf(""xp"") < 0);
/*     */ 
/*     */         
/*     */         }
/* 225 */         else if (family.equals(""z/os"")) {
/* 226 */           isFamily = (osName.indexOf(""z/os"") > -1 || osName.indexOf(""os/390"") > -1);
/*     */         } else {
/*     */           
/* 229 */           throw new BuildException(""Don't know how to detect os family \"""" + family + ""\"""");
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 234 */       if (name != null) {
/* 235 */         isName = name.equals(osName);
/*     */       }
/* 237 */       if (arch != null) {
/* 238 */         isArch = arch.equals(osArch);
/*     */       }
/* 240 */       if (version != null) {
/* 241 */         isVersion = version.equals(osVersion);
/*     */       }
/* 243 */       retValue = (isFamily && isName && isArch && isVersion);
/*     */     } 
/* 245 */     return retValue;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Os.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.condition.Socket,"/*    */ package org.apache.tools.ant.taskdefs.condition;
/*    */ 
/*    */ import java.io.IOException;
/*    */ import java.net.Socket;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.ProjectComponent;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Socket
/*    */   extends ProjectComponent
/*    */   implements Condition
/*    */ {
/* 72 */   private String server = null;
/* 73 */   private int port = 0;
/*    */ 
/*    */   
/* 76 */   public void setServer(String server) { this.server = server; }
/*    */ 
/*    */ 
/*    */   
/* 80 */   public void setPort(int port) { this.port = port; }
/*    */ 
/*    */   
/*    */   public boolean eval() throws BuildException {
/* 84 */     if (this.server == null) {
/* 85 */       throw new BuildException(""No server specified in socket condition"");
/*    */     }
/*    */     
/* 88 */     if (this.port == 0) {
/* 89 */       throw new BuildException(""No port specified in socket condition"");
/*    */     }
/* 91 */     log(""Checking for listener at "" + this.server + "":"" + this.port, 3);
/*    */     
/*    */     try {
/* 94 */       Socket socket = new Socket(this.server, this.port);
/*    */     } catch (IOException e) {
/* 96 */       return false;
/*    */     } 
/* 98 */     return true;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\condition\Socket.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.text.ParseException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ChangeLogParser
/*     */ {
/*     */   private static final int GET_FILE = 1;
/*     */   private static final int GET_DATE = 2;
/*     */   private static final int GET_COMMENT = 3;
/*     */   private static final int GET_REVISION = 4;
/*     */   private static final int GET_PREVIOUS_REV = 5;
/*  77 */   private static final SimpleDateFormat c_inputDate = new SimpleDateFormat(""yyyy/MM/dd hh:mm:ss"");
/*     */   
/*     */   private String m_file;
/*     */   
/*     */   private String m_date;
/*     */   
/*     */   private String m_author;
/*     */   
/*     */   private String m_comment;
/*     */   private String m_revision;
/*     */   private String m_previousRevision;
/*  88 */   private int m_status = 1;
/*     */ 
/*     */   
/*  91 */   private final Hashtable m_entries = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   CVSEntry[] getEntrySetAsArray() {
/*  99 */     CVSEntry[] array = new CVSEntry[this.m_entries.size()];
/* 100 */     Enumeration enum = this.m_entries.elements();
/* 101 */     int i = 0;
/* 102 */     while (enum.hasMoreElements()) {
/* 103 */       array[i++] = enum.nextElement();
/*     */     }
/* 105 */     return array;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void stdout(String line) {
/* 113 */     switch (this.m_status) {
/*     */       case 1:
/* 115 */         processFile(line);
/*     */         break;
/*     */       case 4:
/* 118 */         processRevision(line);
/*     */         break;
/*     */       
/*     */       case 2:
/* 122 */         processDate(line);
/*     */         break;
/*     */       
/*     */       case 3:
/* 126 */         processComment(line);
/*     */         break;
/*     */       
/*     */       case 5:
/* 130 */         processGetPreviousRevision(line);
/*     */         break;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processComment(String line) {
/* 141 */     String lineSeparator = System.getProperty(""line.separator"");
/* 142 */     if (line.startsWith(""======"")) {
/*     */ 
/*     */       
/* 145 */       int end = this.m_comment.length() - lineSeparator.length();
/*     */       
/* 147 */       this.m_comment = this.m_comment.substring(0, end);
/* 148 */       saveEntry();
/* 149 */       this.m_status = 1;
/* 150 */     } else if (line.startsWith(""----------------------------"")) {
/* 151 */       int end = this.m_comment.length() - lineSeparator.length();
/*     */       
/* 153 */       this.m_comment = this.m_comment.substring(0, end);
/* 154 */       this.m_status = 5;
/*     */     } else {
/* 156 */       this.m_comment += line + lineSeparator;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processFile(String line) {
/* 166 */     if (line.startsWith(""Working file:"")) {
/* 167 */       this.m_file = line.substring(14, line.length());
/* 168 */       this.m_status = 4;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processRevision(String line) {
/* 178 */     if (line.startsWith(""revision"")) {
/* 179 */       this.m_revision = line.substring(9);
/* 180 */       this.m_status = 2;
/* 181 */     } else if (line.startsWith(""======"")) {
/*     */ 
/*     */       
/* 184 */       this.m_status = 1;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processDate(String line) {
/* 194 */     if (line.startsWith(""date:"")) {
/* 195 */       this.m_date = line.substring(6, 25);
/* 196 */       String lineData = line.substring(line.indexOf("";"") + 1);
/* 197 */       this.m_author = lineData.substring(10, lineData.indexOf("";""));
/*     */       
/* 199 */       this.m_status = 3;
/*     */ 
/*     */ 
/*     */       
/* 203 */       this.m_comment = """";
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void processGetPreviousRevision(String line) {
/* 213 */     if (!line.startsWith(""revision"")) {
/* 214 */       throw new IllegalStateException(""Unexpected line from CVS: "" + line);
/*     */     }
/*     */     
/* 217 */     this.m_previousRevision = line.substring(9);
/*     */     
/* 219 */     saveEntry();
/*     */     
/* 221 */     this.m_revision = this.m_previousRevision;
/* 222 */     this.m_status = 2;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void saveEntry() {
/*     */     CVSEntry cVSEntry;
/* 229 */     String entryKey = this.m_date + this.m_author + this.m_comment;
/*     */     
/* 231 */     if (!this.m_entries.containsKey(entryKey)) {
/* 232 */       cVSEntry = new CVSEntry(parseDate(this.m_date), this.m_author, this.m_comment);
/* 233 */       this.m_entries.put(entryKey, cVSEntry);
/*     */     } else {
/* 235 */       cVSEntry = (CVSEntry)this.m_entries.get(entryKey);
/*     */     } 
/*     */     
/* 238 */     cVSEntry.addFile(this.m_file, this.m_revision, this.m_previousRevision);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Date parseDate(String date) {
/*     */     try {
/* 249 */       return c_inputDate.parse(date);
/*     */     }
/*     */     catch (ParseException e) {
/*     */       
/* 253 */       return null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogParser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Date;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Execute;
/*     */ import org.apache.tools.ant.taskdefs.ExecuteStreamHandler;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ChangeLogTask
/*     */   extends Task
/*     */ {
/*     */   private File m_usersFile;
/* 112 */   private Vector m_cvsUsers = new Vector();
/*     */ 
/*     */ 
/*     */   
/*     */   private File m_dir;
/*     */ 
/*     */ 
/*     */   
/*     */   private File m_destfile;
/*     */ 
/*     */ 
/*     */   
/*     */   private Date m_start;
/*     */ 
/*     */ 
/*     */   
/*     */   private Date m_stop;
/*     */ 
/*     */   
/* 131 */   private final Vector m_filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void setDir(File dir) { this.m_dir = dir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public void setDestfile(File destfile) { this.m_destfile = destfile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public void setUsersfile(File usersFile) { this.m_usersFile = usersFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public void addUser(CvsUser user) { this.m_cvsUsers.addElement(user); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void setStart(Date start) { this.m_start = start; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   public void setEnd(Date stop) { this.m_stop = stop; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDaysinpast(int days) {
/* 200 */     long time = System.currentTimeMillis() - days * 24L * 60L * 60L * 1000L;
/*     */ 
/*     */     
/* 203 */     setStart(new Date(time));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 213 */   public void addFileset(FileSet fileSet) { this.m_filesets.addElement(fileSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 224 */     File savedDir = this.m_dir;
/*     */ 
/*     */     
/*     */     try {
/* 228 */       validate();
/*     */       
/* 230 */       Properties userList = new Properties();
/*     */       
/* 232 */       loadUserlist(userList);
/*     */       
/* 234 */       Enumeration e = this.m_cvsUsers.elements();
/* 235 */       while (e.hasMoreElements()) {
/* 236 */         CvsUser user = e.nextElement();
/*     */         
/* 238 */         user.validate();
/* 239 */         userList.put(user.getUserID(), user.getDisplayname());
/*     */       } 
/*     */       
/* 242 */       Commandline command = new Commandline();
/*     */       
/* 244 */       command.setExecutable(""cvs"");
/* 245 */       command.createArgument().setValue(""log"");
/*     */       
/* 247 */       if (null != this.m_start) {
/* 248 */         SimpleDateFormat outputDate = new SimpleDateFormat(""yyyy-MM-dd"");
/*     */ 
/*     */ 
/*     */         
/* 252 */         String dateRange = ""-d >="" + outputDate.format(this.m_start);
/*     */ 
/*     */         
/* 255 */         command.createArgument().setValue(dateRange);
/*     */       } 
/*     */ 
/*     */       
/* 259 */       if (!this.m_filesets.isEmpty()) {
/* 260 */         Enumeration e = this.m_filesets.elements();
/*     */         
/* 262 */         while (e.hasMoreElements()) {
/* 263 */           FileSet fileSet = e.nextElement();
/* 264 */           DirectoryScanner scanner = fileSet.getDirectoryScanner(this.project);
/*     */           
/* 266 */           String[] files = scanner.getIncludedFiles();
/*     */           
/* 268 */           for (int i = 0; i < files.length; i++) {
/* 269 */             command.createArgument().setValue(files[i]);
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 274 */       ChangeLogParser parser = new ChangeLogParser();
/* 275 */       RedirectingStreamHandler handler = new RedirectingStreamHandler(parser);
/*     */ 
/*     */       
/* 278 */       log(""ChangeLog command: ["" + command.toString() + ""]"", 3);
/*     */ 
/*     */       
/* 281 */       Execute exe = new Execute((ExecuteStreamHandler)handler);
/*     */       
/* 283 */       exe.setWorkingDirectory(this.m_dir);
/* 284 */       exe.setCommandline(command.getCommandline());
/* 285 */       exe.setAntRun(getProject());
/*     */       try {
/* 287 */         int resultCode = exe.execute();
/*     */         
/* 289 */         if (0 != resultCode) {
/* 290 */           throw new BuildException(""Error running cvs log"");
/*     */         }
/*     */       } catch (IOException ioe) {
/* 293 */         throw new BuildException(ioe.toString());
/*     */       } 
/*     */       
/* 296 */       String errors = handler.getErrors();
/*     */       
/* 298 */       if (null != errors) {
/* 299 */         log(errors, 0);
/*     */       }
/*     */       
/* 302 */       CVSEntry[] entrySet = parser.getEntrySetAsArray();
/* 303 */       CVSEntry[] filteredEntrySet = filterEntrySet(entrySet);
/*     */       
/* 305 */       replaceAuthorIdWithName(userList, filteredEntrySet);
/*     */       
/* 307 */       writeChangeLog(filteredEntrySet);
/*     */     } finally {
/*     */       
/* 310 */       this.m_dir = savedDir;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 321 */     if (null == this.m_dir) {
/* 322 */       this.m_dir = getProject().getBaseDir();
/*     */     }
/* 324 */     if (null == this.m_destfile)
/*     */     {
/*     */       
/* 327 */       throw new BuildException(""Destfile must be set."");
/*     */     }
/* 329 */     if (!this.m_dir.exists()) {
/* 330 */       String message = ""Cannot find base dir "" + this.m_dir.getAbsolutePath();
/*     */ 
/*     */       
/* 333 */       throw new BuildException(message);
/*     */     } 
/* 335 */     if (null != this.m_usersFile && !this.m_usersFile.exists()) {
/* 336 */       String message = ""Cannot find user lookup list "" + this.m_usersFile.getAbsolutePath();
/*     */ 
/*     */       
/* 339 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void loadUserlist(Properties userList) throws BuildException {
/* 352 */     if (null != this.m_usersFile) {
/*     */       try {
/* 354 */         userList.load(new FileInputStream(this.m_usersFile));
/*     */       } catch (IOException ioe) {
/* 356 */         throw new BuildException(ioe.toString(), ioe);
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private CVSEntry[] filterEntrySet(CVSEntry[] entrySet) {
/* 368 */     Vector results = new Vector();
/*     */     
/* 370 */     for (int i = 0; i < entrySet.length; i++) {
/* 371 */       CVSEntry cvsEntry = entrySet[i];
/* 372 */       Date date = cvsEntry.getDate();
/*     */       
/* 374 */       if (null == this.m_start || !this.m_start.after(date))
/*     */       {
/*     */ 
/*     */         
/* 378 */         if (null == this.m_stop || !this.m_stop.before(date))
/*     */         {
/*     */ 
/*     */           
/* 382 */           results.addElement(cvsEntry); } 
/*     */       }
/*     */     } 
/* 385 */     CVSEntry[] resultArray = new CVSEntry[results.size()];
/*     */     
/* 387 */     results.copyInto((Object[])resultArray);
/* 388 */     return resultArray;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void replaceAuthorIdWithName(Properties userList, CVSEntry[] entrySet) {
/* 396 */     for (int i = 0; i < entrySet.length; i++) {
/*     */       
/* 398 */       CVSEntry entry = entrySet[i];
/* 399 */       if (userList.containsKey(entry.getAuthor())) {
/* 400 */         entry.setAuthor(userList.getProperty(entry.getAuthor()));
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeChangeLog(CVSEntry[] entrySet) throws BuildException {
/* 413 */     FileOutputStream output = null;
/*     */     
/*     */     try {
/* 416 */       output = new FileOutputStream(this.m_destfile);
/*     */       
/* 418 */       PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, ""UTF-8""));
/*     */ 
/*     */       
/* 421 */       ChangeLogWriter serializer = new ChangeLogWriter();
/*     */       
/* 423 */       serializer.printChangeLog(writer, entrySet);
/*     */     } catch (UnsupportedEncodingException uee) {
/* 425 */       getProject().log(uee.toString(), 0);
/*     */     } catch (IOException ioe) {
/* 427 */       throw new BuildException(ioe.toString(), ioe);
/*     */     } finally {
/* 429 */       if (null != output)
/*     */         try {
/* 431 */           output.close();
/* 432 */         } catch (IOException ioe) {} 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class ChangeLogWriter
/*     */ {
/*  68 */   private static final SimpleDateFormat c_outputDate = new SimpleDateFormat(""yyyy-MM-dd"");
/*     */ 
/*     */   
/*  71 */   private static final SimpleDateFormat c_outputTime = new SimpleDateFormat(""hh:mm"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void printChangeLog(PrintWriter output, CVSEntry[] entries) {
/*  83 */     output.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/*  84 */     output.println(""<changelog>"");
/*  85 */     for (int i = 0; i < entries.length; i++) {
/*  86 */       CVSEntry entry = entries[i];
/*     */       
/*  88 */       printEntry(output, entry);
/*     */     } 
/*  90 */     output.println(""</changelog>"");
/*  91 */     output.flush();
/*  92 */     output.close();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void printEntry(PrintWriter output, CVSEntry entry) {
/* 103 */     output.println(""\t<entry>"");
/* 104 */     output.println(""\t\t<date>"" + c_outputDate.format(entry.getDate()) + ""</date>"");
/*     */     
/* 106 */     output.println(""\t\t<time>"" + c_outputTime.format(entry.getDate()) + ""</time>"");
/*     */     
/* 108 */     output.println(""\t\t<author><![CDATA["" + entry.getAuthor() + ""]]></author>"");
/*     */ 
/*     */     
/* 111 */     Enumeration enumeration = entry.getFiles().elements();
/*     */     
/* 113 */     while (enumeration.hasMoreElements()) {
/* 114 */       RCSFile file = enumeration.nextElement();
/*     */       
/* 116 */       output.println(""\t\t<file>"");
/* 117 */       output.println(""\t\t\t<name>"" + file.getName() + ""</name>"");
/* 118 */       output.println(""\t\t\t<revision>"" + file.getRevision() + ""</revision>"");
/*     */ 
/*     */       
/* 121 */       String previousRevision = file.getPreviousRevision();
/*     */       
/* 123 */       if (previousRevision != null) {
/* 124 */         output.println(""\t\t\t<prevrevision>"" + previousRevision + ""</prevrevision>"");
/*     */       }
/*     */ 
/*     */       
/* 128 */       output.println(""\t\t</file>"");
/*     */     } 
/* 130 */     output.println(""\t\t<msg><![CDATA["" + entry.getComment() + ""]]></msg>"");
/* 131 */     output.println(""\t</entry>"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\ChangeLogWriter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CVSEntry,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CVSEntry
/*     */ {
/*     */   private Date m_date;
/*     */   private String m_author;
/*     */   private final String m_comment;
/*  70 */   private final Vector m_files = new Vector();
/*     */   
/*     */   public CVSEntry(Date date, String author, String comment) {
/*  73 */     this.m_date = date;
/*  74 */     this.m_author = author;
/*  75 */     this.m_comment = comment;
/*     */   }
/*     */ 
/*     */   
/*  79 */   public void addFile(String file, String revision) { this.m_files.addElement(new RCSFile(file, revision)); }
/*     */ 
/*     */ 
/*     */   
/*  83 */   public void addFile(String file, String revision, String previousRevision) { this.m_files.addElement(new RCSFile(file, revision, previousRevision)); }
/*     */ 
/*     */ 
/*     */   
/*  87 */   Date getDate() { return this.m_date; }
/*     */ 
/*     */ 
/*     */   
/*  91 */   void setAuthor(String author) { this.m_author = author; }
/*     */ 
/*     */ 
/*     */   
/*  95 */   String getAuthor() { return this.m_author; }
/*     */ 
/*     */ 
/*     */   
/*  99 */   String getComment() { return this.m_comment; }
/*     */ 
/*     */ 
/*     */   
/* 103 */   Vector getFiles() { return this.m_files; }
/*     */ 
/*     */ 
/*     */   
/* 107 */   public String toString() { return getAuthor() + ""\n"" + getDate() + ""\n"" + getFiles() + ""\n"" + getComment(); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\CVSEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.PrintWriter;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.Cvs;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CvsTagDiff
/*     */   extends Task
/*     */ {
/*     */   static final String FILE_IS_NEW = "" is new; current revision "";
/*     */   static final String FILE_HAS_CHANGED = "" changed from revision "";
/*     */   static final String FILE_WAS_REMOVED = "" is removed"";
/*     */   private Cvs m_cvs;
/*     */   private String m_package;
/*     */   private String m_startTag;
/*     */   private String m_endTag;
/*     */   private String m_startDate;
/*     */   private String m_endDate;
/*     */   private File m_destfile;
/* 161 */   private FileUtils m_fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 171 */   public void init() throws BuildException { this.m_cvs = (Cvs)getProject().createTask(""cvs""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 181 */   public void setCompressionLevel(int level) { this.m_cvs.setCompressionLevel(level); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setCompression(boolean usecomp) { this.m_cvs.setCompression(usecomp); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   public void setCvsRoot(String cvsRoot) { this.m_cvs.setCvsRoot(cvsRoot); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 202 */   public void setCvsRsh(String rsh) { this.m_cvs.setCvsRsh(rsh); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 209 */   public void setPackage(String p) { this.m_package = p; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setQuiet(boolean quiet) { this.m_cvs.setQuiet(quiet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public void setPort(int port) { this.m_cvs.setPort(port); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setPassfile(File f) { this.m_cvs.setPassfile(f); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void setFailOnError(boolean b) { this.m_cvs.setFailOnError(b); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 248 */   public void setStartTag(String s) { this.m_startTag = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 257 */   public void setStartDate(String s) { this.m_startDate = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public void setEndTag(String s) { this.m_endTag = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public void setEndDate(String s) { this.m_endDate = s; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setDestFile(File f) { this.m_destfile = f; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() throws BuildException {
/* 294 */     validate();
/*     */ 
/*     */     
/* 297 */     String rdiff = ""rdiff -s "" + ((this.m_startTag != null) ? (""-r "" + this.m_startTag) : (""-D "" + this.m_startDate)) + "" "" + ((this.m_endTag != null) ? (""-r "" + this.m_endTag) : (""-D "" + this.m_endDate)) + "" "" + this.m_package;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 302 */     log(""Cvs command is "" + rdiff, 3);
/* 303 */     this.m_cvs.setCommand(rdiff);
/*     */     
/* 305 */     File tmpFile = null;
/*     */     try {
/* 307 */       tmpFile = this.m_fileUtils.createTempFile(""cvstagdiff"", "".log"", null);
/* 308 */       this.m_cvs.setOutput(tmpFile);
/*     */ 
/*     */       
/* 311 */       this.m_cvs.execute();
/*     */ 
/*     */       
/* 314 */       CvsTagEntry[] entries = parseRDiff(tmpFile);
/*     */ 
/*     */       
/* 317 */       writeTagDiff(entries);
/*     */     } finally {
/*     */       
/* 320 */       if (tmpFile != null) {
/* 321 */         tmpFile.delete();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private CvsTagEntry[] parseRDiff(File tmpFile) throws BuildException {
/* 336 */     BufferedReader reader = null;
/*     */     
/*     */     try {
/* 339 */       reader = new BufferedReader(new FileReader(tmpFile));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 350 */       int headerLength = 5 + this.m_package.length() + 1;
/* 351 */       Vector entries = new Vector();
/*     */       
/* 353 */       String line = reader.readLine();
/*     */       
/* 355 */       CvsTagEntry entry = null;
/*     */       
/* 357 */       while (null != line) {
/* 358 */         line = line.substring(headerLength);
/*     */         int index;
/* 360 */         if ((index = line.indexOf("" is new; current revision "")) != -1) {
/*     */ 
/*     */           
/* 363 */           String filename = line.substring(0, index);
/* 364 */           String rev = line.substring(index + "" is new; current revision "".length());
/*     */           
/* 366 */           entries.addElement(entry = new CvsTagEntry(filename, rev));
/* 367 */           log(entry.toString(), 3);
/* 368 */         } else if ((index = line.indexOf("" changed from revision "")) != -1) {
/*     */ 
/*     */           
/* 371 */           String filename = line.substring(0, index);
/* 372 */           int revSeparator = line.indexOf("" to "", index);
/* 373 */           String prevRevision = line.substring(index + "" changed from revision "".length(), revSeparator);
/*     */ 
/*     */ 
/*     */           
/* 377 */           String revision = line.substring(revSeparator + 4);
/*     */           
/* 379 */           entries.addElement(entry = new CvsTagEntry(filename, revision, prevRevision));
/*     */ 
/*     */           
/* 382 */           log(entry.toString(), 3);
/* 383 */         } else if ((index = line.indexOf("" is removed"")) != -1) {
/*     */           
/* 385 */           String filename = line.substring(0, index);
/*     */           
/* 387 */           entries.addElement(entry = new CvsTagEntry(filename));
/* 388 */           log(entry.toString(), 3);
/*     */         } 
/* 390 */         line = reader.readLine();
/*     */       } 
/*     */       
/* 393 */       CvsTagEntry[] array = new CvsTagEntry[entries.size()];
/* 394 */       entries.copyInto((Object[])array);
/*     */       
/* 396 */       return array;
/*     */     } catch (IOException e) {
/* 398 */       throw new BuildException(""Error in parsing"", e);
/*     */     } finally {
/* 400 */       if (reader != null) {
/*     */         try {
/* 402 */           reader.close();
/* 403 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeTagDiff(CvsTagEntry[] entries) throws BuildException {
/* 416 */     FileOutputStream output = null;
/*     */     try {
/* 418 */       output = new FileOutputStream(this.m_destfile);
/* 419 */       PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, ""UTF-8""));
/*     */       
/* 421 */       writer.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
/* 422 */       writer.print(""<tagdiff "");
/* 423 */       if (this.m_startTag != null) {
/* 424 */         writer.print(""startTag=\"""" + this.m_startTag + ""\"" "");
/*     */       } else {
/* 426 */         writer.print(""startDate=\"""" + this.m_startDate + ""\"" "");
/*     */       } 
/* 428 */       if (this.m_endTag != null) {
/* 429 */         writer.print(""endTag=\"""" + this.m_endTag + ""\"" "");
/*     */       } else {
/* 431 */         writer.print(""endDate=\"""" + this.m_endDate + ""\"" "");
/*     */       } 
/* 433 */       writer.println("">"");
/* 434 */       for (int i = 0, c = entries.length; i < c; i++) {
/* 435 */         writeTagEntry(writer, entries[i]);
/*     */       }
/* 437 */       writer.println(""</tagdiff>"");
/* 438 */       writer.flush();
/* 439 */       writer.close();
/*     */     } catch (UnsupportedEncodingException uee) {
/* 441 */       log(uee.toString(), 0);
/*     */     } catch (IOException ioe) {
/* 443 */       throw new BuildException(ioe.toString(), ioe);
/*     */     } finally {
/* 445 */       if (null != output) {
/*     */         try {
/* 447 */           output.close();
/* 448 */         } catch (IOException ioe) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeTagEntry(PrintWriter writer, CvsTagEntry entry) {
/* 460 */     writer.println(""\t<entry>"");
/* 461 */     writer.println(""\t\t<file>"");
/* 462 */     writer.println(""\t\t\t<name>"" + entry.getFile() + ""</name>"");
/* 463 */     if (entry.getRevision() != null) {
/* 464 */       writer.println(""\t\t\t<revision>"" + entry.getRevision() + ""</revision>"");
/*     */     }
/*     */     
/* 467 */     if (entry.getPreviousRevision() != null) {
/* 468 */       writer.println(""\t\t\t<prevrevision>"" + entry.getPreviousRevision() + ""</prevrevision>"");
/*     */     }
/*     */     
/* 471 */     writer.println(""\t\t</file>"");
/* 472 */     writer.println(""\t</entry>"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void validate() throws BuildException {
/* 481 */     if (null == this.m_package) {
/* 482 */       throw new BuildException(""Package/module must be set."");
/*     */     }
/*     */     
/* 485 */     if (null == this.m_destfile) {
/* 486 */       throw new BuildException(""Destfile must be set."");
/*     */     }
/*     */     
/* 489 */     if (null == this.m_startTag && null == this.m_startDate) {
/* 490 */       throw new BuildException(""Start tag or start date must be set."");
/*     */     }
/*     */     
/* 493 */     if (null != this.m_startTag && null != this.m_startDate) {
/* 494 */       throw new BuildException(""Only one of start tag and start date must be set."");
/*     */     }
/*     */ 
/*     */     
/* 498 */     if (null == this.m_endTag && null == this.m_endDate) {
/* 499 */       throw new BuildException(""End tag or end date must be set."");
/*     */     }
/*     */     
/* 502 */     if (null != this.m_endTag && null != this.m_endDate)
/* 503 */       throw new BuildException(""Only one of end tag and end date must be set.""); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsTagDiff.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CvsTagEntry
/*     */ {
/*     */   String m_filename;
/*     */   String m_prevRevision;
/*     */   String m_revision;
/*     */   
/*  65 */   public CvsTagEntry(String filename) { this(filename, null, null); }
/*     */ 
/*     */ 
/*     */   
/*  69 */   public CvsTagEntry(String filename, String revision) { this(filename, revision, null); }
/*     */ 
/*     */ 
/*     */   
/*     */   public CvsTagEntry(String filename, String revision, String prevRevision) {
/*  74 */     this.m_filename = filename;
/*  75 */     this.m_revision = revision;
/*  76 */     this.m_prevRevision = prevRevision;
/*     */   }
/*     */ 
/*     */   
/*  80 */   public String getFile() { return this.m_filename; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public String getRevision() { return this.m_revision; }
/*     */ 
/*     */ 
/*     */   
/*  88 */   public String getPreviousRevision() { return this.m_prevRevision; }
/*     */ 
/*     */   
/*     */   public String toString() {
/*  92 */     StringBuffer buffer = new StringBuffer();
/*  93 */     buffer.append(this.m_filename);
/*  94 */     if (this.m_revision == null && this.m_prevRevision == null) {
/*  95 */       buffer.append("" was removed"");
/*  96 */     } else if (this.m_revision != null && this.m_prevRevision == null) {
/*  97 */       buffer.append("" is new; current revision is "").append(this.m_revision);
/*     */     }
/*  99 */     else if (this.m_revision != null && this.m_prevRevision != null) {
/* 100 */       buffer.append("" has changed from "").append(this.m_prevRevision).append("" to "").append(this.m_revision);
/*     */     } 
/*     */     
/* 103 */     return buffer.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsTagEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.CvsUser,"/*     */ package org.apache.tools.ant.taskdefs.cvslib;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CvsUser
/*     */ {
/*     */   private String m_userID;
/*     */   private String m_displayName;
/*     */   
/*  78 */   public void setDisplayname(String displayName) { this.m_displayName = displayName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setUserid(String userID) { this.m_userID = userID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   String getUserID() { return this.m_userID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   String getDisplayname() { return this.m_displayName; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void validate() throws BuildException {
/* 119 */     if (null == this.m_userID)
/*     */     {
/*     */       
/* 122 */       throw new BuildException(""Username attribute must be set."");
/*     */     }
/* 124 */     if (null == this.m_displayName) {
/* 125 */       String message = ""Displayname attribute must be set for userID "" + this.m_userID;
/*     */ 
/*     */       
/* 128 */       throw new BuildException(message);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\CvsUser.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RCSFile,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RCSFile
/*    */ {
/*    */   private String m_name;
/*    */   private String m_revision;
/*    */   private String m_previousRevision;
/*    */   
/* 70 */   RCSFile(String name, String rev) { this(name, rev, null); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   RCSFile(String name, String revision, String previousRevision) {
/* 77 */     this.m_name = name;
/* 78 */     this.m_revision = revision;
/* 79 */     if (!revision.equals(previousRevision)) {
/* 80 */       this.m_previousRevision = previousRevision;
/*    */     }
/*    */   }
/*    */ 
/*    */ 
/*    */   
/* 86 */   String getName() { return this.m_name; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 91 */   String getRevision() { return this.m_revision; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 96 */   String getPreviousRevision() { return this.m_previousRevision; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\RCSFile.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RedirectingOutputStream,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RedirectingOutputStream
/*    */   extends LogOutputStream
/*    */ {
/*    */   private final ChangeLogParser m_parser;
/*    */   
/*    */   public RedirectingOutputStream(ChangeLogParser parser) {
/* 75 */     super(null, 0);
/* 76 */     this.m_parser = parser;
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   protected void processLine(String line) { this.m_parser.stdout(line); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\RedirectingOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler,"/*    */ package org.apache.tools.ant.taskdefs.cvslib;
/*    */ 
/*    */ import java.io.ByteArrayOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.taskdefs.PumpStreamHandler;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ class RedirectingStreamHandler
/*    */   extends PumpStreamHandler
/*    */ {
/* 70 */   RedirectingStreamHandler(ChangeLogParser parser) { super((OutputStream)new RedirectingOutputStream(parser), new ByteArrayOutputStream()); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   String getErrors() {
/*    */     try {
/* 77 */       ByteArrayOutputStream error = (ByteArrayOutputStream)getErr();
/*    */ 
/*    */       
/* 80 */       return error.toString(""ASCII"");
/*    */     } catch (Exception e) {
/* 82 */       return null;
/*    */     } 
/*    */   }
/*    */ 
/*    */   
/*    */   public void stop() {
/* 88 */     super.stop();
/*    */     try {
/* 90 */       getErr().close();
/* 91 */       getOut().close();
/*    */     } catch (IOException e) {
/*    */       
/* 94 */       throw new BuildException(e);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\cvslib\RedirectingStreamHandler.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.EmailAddress,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EmailAddress
/*     */ {
/*     */   private String name;
/*     */   private String address;
/*     */   
/*     */   public EmailAddress() {}
/*     */   
/*  78 */   public EmailAddress(String address) { this.address = address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public void setAddress(String address) { this.address = address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 108 */     if (this.name == null) {
/* 109 */       return this.address;
/*     */     }
/* 111 */     return this.name + "" <"" + this.address + "">"";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 122 */   public String getAddress() { return this.address; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public String getName() { return this.name; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\email\EmailAddress.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.EmailTask,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.FileSet;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EmailTask
/*     */   extends Task
/*     */ {
/*     */   public static final String AUTO = ""auto"";
/*     */   public static final String MIME = ""mime"";
/*     */   public static final String UU = ""uu"";
/*     */   public static final String PLAIN = ""plain"";
/*     */   
/*     */   public static class Encoding
/*     */     extends EnumeratedAttribute
/*     */   {
/* 104 */     public String[] getValues() { return new String[] { ""auto"", ""mime"", ""uu"", ""plain"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   private String encoding = ""auto"";
/*     */   
/* 112 */   private String host = ""localhost"";
/* 113 */   private int port = 25;
/*     */   
/* 115 */   private String subject = null;
/*     */   
/* 117 */   private Message message = null;
/*     */   
/*     */   private boolean failOnError = true;
/*     */   private boolean includeFileNames = false;
/* 121 */   private String messageMimeType = null;
/*     */ 
/*     */   
/* 124 */   private EmailAddress from = null;
/*     */   
/* 126 */   private Vector toList = new Vector();
/*     */   
/* 128 */   private Vector ccList = new Vector();
/*     */   
/* 130 */   private Vector bccList = new Vector();
/*     */ 
/*     */   
/* 133 */   private Vector files = new Vector();
/* 134 */   private Vector filesets = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setEncoding(Encoding encoding) { this.encoding = encoding.getValue(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setMailport(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setMailhost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setSubject(String subject) { this.subject = subject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessage(String message) {
/* 183 */     if (this.message != null) {
/* 184 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 188 */     this.message = new Message(message);
/* 189 */     this.message.setProject(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMessageFile(File file) {
/* 199 */     if (this.message != null) {
/* 200 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 204 */     this.message = new Message(file);
/* 205 */     this.message.setProject(getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 216 */   public void setMessageMimeType(String type) { this.messageMimeType = type; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addMessage(Message message) throws BuildException {
/* 228 */     if (this.message != null) {
/* 229 */       throw new BuildException(""Only one message can be sent in an email"");
/*     */     }
/*     */ 
/*     */     
/* 233 */     this.message = message;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFrom(EmailAddress address) {
/* 243 */     if (this.from != null) {
/* 244 */       throw new BuildException(""Emails can only be from one address"");
/*     */     }
/*     */     
/* 247 */     this.from = address;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String address) {
/* 257 */     if (this.from != null) {
/* 258 */       throw new BuildException(""Emails can only be from one address"");
/*     */     }
/*     */     
/* 261 */     this.from = new EmailAddress(address);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 271 */   public void addTo(EmailAddress address) { this.toList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setToList(String list) {
/* 281 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 283 */     while (tokens.hasMoreTokens()) {
/* 284 */       this.toList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void addCc(EmailAddress address) { this.ccList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setCcList(String list) {
/* 305 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 307 */     while (tokens.hasMoreTokens()) {
/* 308 */       this.ccList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 319 */   public void addBcc(EmailAddress address) { this.bccList.addElement(address); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBccList(String list) {
/* 329 */     StringTokenizer tokens = new StringTokenizer(list, "","");
/*     */     
/* 331 */     while (tokens.hasMoreTokens()) {
/* 332 */       this.bccList.addElement(new EmailAddress(tokens.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 343 */   public void setFailOnError(boolean failOnError) { this.failOnError = failOnError; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiles(String filenames) {
/* 353 */     StringTokenizer t = new StringTokenizer(filenames, "", "");
/*     */     
/* 355 */     while (t.hasMoreTokens()) {
/* 356 */       this.files.addElement(this.project.resolveFile(t.nextToken()));
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 367 */   public void addFileset(FileSet fs) { this.filesets.addElement(fs); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 378 */   public void setIncludefilenames(boolean includeFileNames) { this.includeFileNames = includeFileNames; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 388 */   public boolean getIncludeFileNames() { return this.includeFileNames; }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void execute() {
/* 394 */     Message savedMessage = this.message;
/* 395 */     Vector savedFiles = (Vector)this.files.clone();
/*     */     
/*     */     try {
/* 398 */       Mailer mailer = null;
/*     */ 
/*     */       
/* 401 */       boolean autoFound = false;
/*     */ 
/*     */       
/* 404 */       if (this.encoding.equals(""mime"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/*     */         try {
/* 407 */           mailer = (Mailer)Class.forName(""org.apache.tools.ant.taskdefs.email.MimeMailer"").newInstance();
/*     */ 
/*     */           
/* 410 */           autoFound = true;
/* 411 */           log(""Using MIME mail"", 3);
/*     */         } catch (Throwable e) {
/* 413 */           log(""Failed to initialise MIME mail"", 1);
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 418 */       if (this.encoding.equals(""uu"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/*     */         try {
/* 421 */           mailer = (Mailer)Class.forName(""org.apache.tools.ant.taskdefs.email.UUMailer"").newInstance();
/*     */ 
/*     */           
/* 424 */           autoFound = true;
/* 425 */           log(""Using UU mail"", 3);
/*     */         } catch (Throwable e) {
/* 427 */           log(""Failed to initialise UU mail"", 1);
/*     */         } 
/*     */       }
/*     */ 
/*     */       
/* 432 */       if (this.encoding.equals(""plain"") || (this.encoding.equals(""auto"") && !autoFound)) {
/*     */         
/* 434 */         mailer = new PlainMailer();
/* 435 */         autoFound = true;
/* 436 */         log(""Using plain mail"", 3);
/*     */       } 
/*     */ 
/*     */       
/* 440 */       if (mailer == null) {
/* 441 */         throw new BuildException(""Failed to initialise encoding: "" + this.encoding);
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 446 */       if (this.message == null) {
/* 447 */         this.message = new Message();
/* 448 */         this.message.setProject(getProject());
/*     */       } 
/*     */ 
/*     */       
/* 452 */       if (this.from == null || this.from.getAddress() == null) {
/* 453 */         throw new BuildException(""A from element is required"");
/*     */       }
/*     */ 
/*     */       
/* 457 */       if (this.toList.isEmpty() && this.ccList.isEmpty() && this.bccList.isEmpty()) {
/* 458 */         throw new BuildException(""At least one of to,cc or bcc must be supplied"");
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 463 */       if (this.messageMimeType != null) {
/* 464 */         if (this.message.isMimeTypeSpecified()) {
/* 465 */           throw new BuildException(""The mime type can only be specified in one location"");
/*     */         }
/*     */         
/* 468 */         this.message.setMimeType(this.messageMimeType);
/*     */       } 
/*     */ 
/*     */ 
/*     */       
/* 473 */       Enumeration e = this.filesets.elements();
/*     */       
/* 475 */       while (e.hasMoreElements()) {
/* 476 */         FileSet fs = e.nextElement();
/*     */         
/* 478 */         DirectoryScanner ds = fs.getDirectoryScanner(this.project);
/* 479 */         String[] includedFiles = ds.getIncludedFiles();
/* 480 */         File baseDir = ds.getBasedir();
/*     */         
/* 482 */         for (int j = 0; j < includedFiles.length; j++) {
/* 483 */           File file = new File(baseDir, includedFiles[j]);
/*     */           
/* 485 */           this.files.addElement(file);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 490 */       log(""Sending email: "" + this.subject, 2);
/* 491 */       log(""From "" + this.from, 3);
/* 492 */       log(""To "" + this.toList, 3);
/* 493 */       log(""Cc "" + this.ccList, 3);
/* 494 */       log(""Bcc "" + this.bccList, 3);
/*     */ 
/*     */       
/* 497 */       mailer.setHost(this.host);
/* 498 */       mailer.setPort(this.port);
/* 499 */       mailer.setMessage(this.message);
/* 500 */       mailer.setFrom(this.from);
/* 501 */       mailer.setToList(this.toList);
/* 502 */       mailer.setCcList(this.ccList);
/* 503 */       mailer.setBccList(this.bccList);
/* 504 */       mailer.setFiles(this.files);
/* 505 */       mailer.setSubject(this.subject);
/* 506 */       mailer.setTask(this);
/* 507 */       mailer.setIncludeFileNames(this.includeFileNames);
/*     */ 
/*     */       
/* 510 */       mailer.send();
/*     */ 
/*     */       
/* 513 */       int count = this.files.size();
/*     */       
/* 515 */       log(""Sent email with "" + count + "" attachment"" + ((count == 1) ? """" : ""s""), 2);
/*     */     } catch (BuildException e) {
/*     */       
/* 518 */       log(""Failed to send email"", 1);
/* 519 */       if (this.failOnError) {
/* 520 */         throw e;
/*     */       }
/*     */     } finally {
/* 523 */       this.message = savedMessage;
/* 524 */       this.files = savedFiles;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\email\EmailTask.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.Mailer,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.text.DateFormat;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Locale;
/*     */ import java.util.TimeZone;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ abstract class Mailer
/*     */ {
/*  72 */   protected String host = null;
/*  73 */   protected int port = -1;
/*     */   protected Message message;
/*     */   protected EmailAddress from;
/*  76 */   protected Vector toList = null;
/*  77 */   protected Vector ccList = null;
/*  78 */   protected Vector bccList = null;
/*  79 */   protected Vector files = null;
/*  80 */   protected String subject = null;
/*     */   
/*     */   protected Task task;
/*     */   protected boolean includeFileNames = false;
/*  84 */   private static DateFormat df = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss "", Locale.US);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setHost(String host) { this.host = host; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 103 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setMessage(Message m) { this.message = m; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setFrom(EmailAddress from) { this.from = from; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setToList(Vector list) { this.toList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 143 */   public void setCcList(Vector list) { this.ccList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   public void setBccList(Vector list) { this.bccList = list; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   public void setFiles(Vector files) { this.files = files; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   public void setSubject(String subject) { this.subject = subject; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 183 */   public void setTask(Task task) { this.task = task; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 193 */   public void setIncludeFileNames(boolean b) { this.includeFileNames = b; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract void send() throws BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final String getDate() {
/* 212 */     Calendar cal = Calendar.getInstance();
/* 213 */     TimeZone tz = cal.getTimeZone();
/* 214 */     int offset = tz.getOffset(cal.get(0), cal.get(1), cal.get(2), cal.get(5), cal.get(7), cal.get(14));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 220 */     StringBuffer tzMarker = new StringBuffer((offset < 0) ? ""-"" : ""+"");
/* 221 */     offset = Math.abs(offset);
/* 222 */     int hours = offset / 3600000;
/* 223 */     int minutes = offset / 60000 - 60 * hours;
/* 224 */     if (hours < 10) {
/* 225 */       tzMarker.append(""0"");
/*     */     }
/* 227 */     tzMarker.append(hours);
/* 228 */     if (minutes < 10) {
/* 229 */       tzMarker.append(""0"");
/*     */     }
/* 231 */     tzMarker.append(minutes);
/* 232 */     return df.format(cal.getTime()) + tzMarker.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\email\Mailer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.Message,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Message
/*     */   extends ProjectComponent
/*     */ {
/*  71 */   private File messageSource = null;
/*  72 */   private StringBuffer buffer = new StringBuffer();
/*  73 */   private String mimeType = ""text/plain"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean specified = false;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Message() {}
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  88 */   public Message(String text) { addText(text); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public Message(File file) { this.messageSource = file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   public void addText(String text) { this.buffer.append(text); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public void setSrc(File src) { this.messageSource = src; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setMimeType(String mimeType) {
/* 128 */     this.mimeType = mimeType;
/* 129 */     this.specified = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getMimeType() { return this.mimeType; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void print(PrintStream out) throws IOException {
/* 151 */     if (this.messageSource != null) {
/*     */       
/* 153 */       FileReader freader = new FileReader(this.messageSource);
/*     */       
/*     */       try {
/* 156 */         BufferedReader in = new BufferedReader(freader);
/* 157 */         String line = null;
/*     */         
/* 159 */         while ((line = in.readLine()) != null) {
/* 160 */           out.println(getProject().replaceProperties(line));
/*     */         }
/*     */       } finally {
/* 163 */         freader.close();
/*     */       } 
/*     */     } else {
/* 166 */       out.println(getProject().replaceProperties(this.buffer.toString()));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   public boolean isMimeTypeSpecified() { return this.specified; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\email\Message.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.email.PlainMailer,"/*     */ package org.apache.tools.ant.taskdefs.email;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.mail.MailMessage;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class PlainMailer
/*     */   extends Mailer
/*     */ {
/*     */   public void send() {
/*     */     try {
/*  80 */       MailMessage mailMessage = new MailMessage(this.host, this.port);
/*     */       
/*  82 */       mailMessage.from(this.from.toString());
/*     */ 
/*     */ 
/*     */       
/*  86 */       Enumeration e = this.toList.elements();
/*  87 */       while (e.hasMoreElements()) {
/*  88 */         mailMessage.to(e.nextElement().toString());
/*     */       }
/*     */       
/*  91 */       e = this.ccList.elements();
/*  92 */       while (e.hasMoreElements()) {
/*  93 */         mailMessage.cc(e.nextElement().toString());
/*     */       }
/*     */       
/*  96 */       e = this.bccList.elements();
/*  97 */       while (e.hasMoreElements()) {
/*  98 */         mailMessage.bcc(e.nextElement().toString());
/*     */       }
/*     */       
/* 101 */       if (this.subject != null) {
/* 102 */         mailMessage.setSubject(this.subject);
/*     */       }
/*     */       
/* 105 */       mailMessage.setHeader(""Date"", getDate());
/* 106 */       mailMessage.setHeader(""Content-Type"", this.message.getMimeType());
/*     */       
/* 108 */       PrintStream out = mailMessage.getPrintStream();
/*     */       
/* 110 */       this.message.print(out);
/*     */       
/* 112 */       e = this.files.elements();
/* 113 */       while (e.hasMoreElements()) {
/* 114 */         File file = (File)e.nextElement();
/*     */         
/* 116 */         attach(file, out);
/*     */       } 
/*     */       
/* 119 */       mailMessage.sendAndClose();
/*     */     } catch (IOException ioe) {
/* 121 */       throw new BuildException(""IO error sending mail"", ioe);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void attach(File file, PrintStream out) throws IOException {
/* 136 */     if (!file.exists() || !file.canRead()) {
/* 137 */       throw new BuildException(""File \"""" + file.getName() + ""\"" does not exist or is not "" + ""readable."");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 142 */     if (this.includeFileNames) {
/* 143 */       out.println();
/*     */       
/* 145 */       String filename = file.getName();
/* 146 */       int filenamelength = filename.length();
/*     */       
/* 148 */       out.println(filename);
/* 149 */       for (int star = 0; star < filenamelength; star++) {
/* 150 */         out.print('=');
/*     */       }
/* 152 */       out.println();
/*     */     } 
/*     */ 
/*     */     
/* 156 */     byte[] buf = new byte[1024];
/* 157 */     FileInputStream finstr = new FileInputStream(file);
/*     */     
/*     */     try {
/* 160 */       BufferedInputStream in = new BufferedInputStream(finstr, buf.length);
/*     */       int length;
/* 162 */       while ((length = in.read(buf)) != -1) {
/* 163 */         out.write(buf, 0, length);
/*     */       }
/*     */     } finally {
/* 166 */       finstr.close();
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\email\PlainMailer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Random;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.Rmic;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DefaultRmicAdapter
/*     */   implements RmicAdapter
/*     */ {
/*     */   private Rmic attributes;
/*     */   private FileNameMapper mapper;
/*  85 */   private static final Random rand = new Random();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRmic(Rmic attributes) {
/*  91 */     this.attributes = attributes;
/*  92 */     this.mapper = new RmicFileNameMapper(this);
/*     */   }
/*     */ 
/*     */   
/*  96 */   public Rmic getRmic() { return this.attributes; }
/*     */ 
/*     */ 
/*     */   
/* 100 */   protected String getStubClassSuffix() { return ""_Stub""; }
/*     */ 
/*     */ 
/*     */   
/* 104 */   protected String getSkelClassSuffix() { return ""_Skel""; }
/*     */ 
/*     */ 
/*     */   
/* 108 */   protected String getTieClassSuffix() { return ""_Tie""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public FileNameMapper getMapper() { return this.mapper; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public Path getClasspath() { return getCompileClasspath(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Path getCompileClasspath() {
/* 142 */     Path classpath = new Path(this.attributes.getProject());
/*     */ 
/*     */     
/* 145 */     classpath.setLocation(this.attributes.getBase());
/*     */ 
/*     */ 
/*     */     
/* 149 */     if (this.attributes.getClasspath() == null) {
/* 150 */       if (this.attributes.getIncludeantruntime()) {
/* 151 */         classpath.addExisting(Path.systemClasspath);
/*     */       }
/*     */     }
/* 154 */     else if (this.attributes.getIncludeantruntime()) {
/* 155 */       classpath.addExisting(this.attributes.getClasspath().concatSystemClasspath(""last""));
/*     */     } else {
/*     */       
/* 158 */       classpath.addExisting(this.attributes.getClasspath().concatSystemClasspath(""ignore""));
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 163 */     if (this.attributes.getIncludejavaruntime()) {
/* 164 */       classpath.addJavaRuntime();
/*     */     }
/* 166 */     return classpath;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 173 */   protected Commandline setupRmicCommand() { return setupRmicCommand(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Commandline setupRmicCommand(String[] options) {
/* 183 */     Commandline cmd = new Commandline();
/*     */     
/* 185 */     if (options != null) {
/* 186 */       for (int i = 0; i < options.length; i++) {
/* 187 */         cmd.createArgument().setValue(options[i]);
/*     */       }
/*     */     }
/*     */     
/* 191 */     Path classpath = getCompileClasspath();
/*     */     
/* 193 */     cmd.createArgument().setValue(""-d"");
/* 194 */     cmd.createArgument().setFile(this.attributes.getBase());
/*     */     
/* 196 */     if (this.attributes.getExtdirs() != null) {
/* 197 */       if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */ 
/*     */ 
/*     */         
/* 201 */         classpath.addExtdirs(this.attributes.getExtdirs());
/*     */       } else {
/* 203 */         cmd.createArgument().setValue(""-extdirs"");
/* 204 */         cmd.createArgument().setPath(this.attributes.getExtdirs());
/*     */       } 
/*     */     }
/*     */     
/* 208 */     cmd.createArgument().setValue(""-classpath"");
/* 209 */     cmd.createArgument().setPath(classpath);
/*     */     
/* 211 */     String stubVersion = this.attributes.getStubVersion();
/* 212 */     if (null != stubVersion) {
/* 213 */       if (""1.1"".equals(stubVersion)) {
/* 214 */         cmd.createArgument().setValue(""-v1.1"");
/* 215 */       } else if (""1.2"".equals(stubVersion)) {
/* 216 */         cmd.createArgument().setValue(""-v1.2"");
/*     */       } else {
/* 218 */         cmd.createArgument().setValue(""-vcompat"");
/*     */       } 
/*     */     }
/*     */     
/* 222 */     if (null != this.attributes.getSourceBase()) {
/* 223 */       cmd.createArgument().setValue(""-keepgenerated"");
/*     */     }
/*     */     
/* 226 */     if (this.attributes.getIiop()) {
/* 227 */       this.attributes.log(""IIOP has been turned on."", 2);
/* 228 */       cmd.createArgument().setValue(""-iiop"");
/* 229 */       if (this.attributes.getIiopopts() != null) {
/* 230 */         this.attributes.log(""IIOP Options: "" + this.attributes.getIiopopts(), 2);
/*     */         
/* 232 */         cmd.createArgument().setValue(this.attributes.getIiopopts());
/*     */       } 
/*     */     } 
/*     */     
/* 236 */     if (this.attributes.getIdl()) {
/* 237 */       cmd.createArgument().setValue(""-idl"");
/* 238 */       this.attributes.log(""IDL has been turned on."", 2);
/* 239 */       if (this.attributes.getIdlopts() != null) {
/* 240 */         cmd.createArgument().setValue(this.attributes.getIdlopts());
/* 241 */         this.attributes.log(""IDL Options: "" + this.attributes.getIdlopts(), 2);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 246 */     if (this.attributes.getDebug()) {
/* 247 */       cmd.createArgument().setValue(""-g"");
/*     */     }
/*     */     
/* 250 */     cmd.addArguments(this.attributes.getCurrentCompilerArgs());
/*     */     
/* 252 */     logAndAddFilesToCompile(cmd);
/* 253 */     return cmd;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void logAndAddFilesToCompile(Commandline cmd) {
/* 261 */     Vector compileList = this.attributes.getCompileList();
/*     */     
/* 263 */     this.attributes.log(""Compilation "" + cmd.describeArguments(), 3);
/*     */ 
/*     */     
/* 266 */     StringBuffer niceSourceList = new StringBuffer(""File"");
/* 267 */     if (compileList.size() != 1) {
/* 268 */       niceSourceList.append(""s"");
/*     */     }
/* 270 */     niceSourceList.append("" to be compiled:"");
/*     */     
/* 272 */     for (int i = 0; i < compileList.size(); i++) {
/* 273 */       String arg = compileList.elementAt(i);
/* 274 */       cmd.createArgument().setValue(arg);
/* 275 */       niceSourceList.append(""    "" + arg);
/*     */     } 
/*     */     
/* 278 */     this.attributes.log(niceSourceList.toString(), 3);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract boolean execute() throws BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private class RmicFileNameMapper
/*     */     implements FileNameMapper
/*     */   {
/*     */     private final DefaultRmicAdapter this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 298 */     RmicFileNameMapper(DefaultRmicAdapter this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/*     */     public void setFrom(String s) {}
/*     */ 
/*     */ 
/*     */     
/*     */     public void setTo(String s) {}
/*     */ 
/*     */     
/*     */     public String[] mapFileName(String name) {
/* 310 */       if (name == null || !name.endsWith("".class"") || name.endsWith(this.this$0.getStubClassSuffix() + "".class"") || name.endsWith(this.this$0.getSkelClassSuffix() + "".class"") || name.endsWith(this.this$0.getTieClassSuffix() + "".class""))
/*     */       {
/*     */ 
/*     */ 
/*     */ 
/*     */         
/* 316 */         return null;
/*     */       }
/*     */ 
/*     */       
/* 320 */       String base = name.substring(0, name.length() - 6);
/*     */       
/* 322 */       String classname = base.replace(File.separatorChar, '.');
/* 323 */       if (this.this$0.attributes.getVerify() && !this.this$0.attributes.isValidRmiRemote(classname))
/*     */       {
/* 325 */         return null;
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 336 */       String[] target = { name + "".tmp."" + rand.nextLong() };
/*     */       
/* 338 */       if (!this.this$0.attributes.getIiop() && !this.this$0.attributes.getIdl()) {
/*     */         
/* 340 */         if (""1.2"".equals(this.this$0.attributes.getStubVersion())) {
/* 341 */           target = new String[] { base + this.this$0.getStubClassSuffix() + "".class"" };
/*     */         }
/*     */         else {
/*     */           
/* 345 */           target = new String[] { base + this.this$0.getStubClassSuffix() + "".class"", base + this.this$0.getSkelClassSuffix() + "".class"" };
/*     */         
/*     */         }
/*     */       
/*     */       }
/* 350 */       else if (!this.this$0.attributes.getIdl()) {
/* 351 */         int lastSlash = base.lastIndexOf(File.separatorChar);
/*     */         
/* 353 */         String dirname = """";
/*     */ 
/*     */ 
/*     */         
/* 357 */         int index = -1;
/* 358 */         if (lastSlash == -1) {
/*     */           
/* 360 */           index = 0;
/*     */         } else {
/* 362 */           index = lastSlash + 1;
/* 363 */           dirname = base.substring(0, index);
/*     */         } 
/*     */         
/* 366 */         String filename = base.substring(index);
/*     */         
/*     */         try {
/* 369 */           Class c = this.this$0.attributes.getLoader().loadClass(classname);
/*     */           
/* 371 */           if (c.isInterface())
/*     */           {
/* 373 */             target = new String[] { dirname + ""_"" + filename + this.this$0.getStubClassSuffix() + "".class"" };
/*     */ 
/*     */ 
/*     */           
/*     */           }
/*     */           else
/*     */           {
/*     */ 
/*     */             
/* 382 */             Class interf = this.this$0.attributes.getRemoteInterface(c);
/* 383 */             String iName = interf.getName();
/* 384 */             String iDir = """";
/* 385 */             int iIndex = -1;
/* 386 */             int lastDot = iName.lastIndexOf(""."");
/* 387 */             if (lastDot == -1) {
/*     */               
/* 389 */               iIndex = 0;
/*     */             } else {
/* 391 */               iIndex = lastDot + 1;
/* 392 */               iDir = iName.substring(0, iIndex);
/* 393 */               iDir = iDir.replace('.', File.separatorChar);
/*     */             } 
/*     */             
/* 396 */             target = new String[] { dirname + ""_"" + filename + this.this$0.getTieClassSuffix() + "".class"", iDir + ""_"" + iName.substring(iIndex) + this.this$0.getStubClassSuffix() + "".class"" };
/*     */           
/*     */           }
/*     */ 
/*     */         
/*     */         }
/*     */         catch (ClassNotFoundException e) {
/*     */           
/* 404 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". It could not be found."", 1);
/*     */         }
/*     */         catch (NoClassDefFoundError e) {
/*     */           
/* 408 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". It is not defined."", 1);
/*     */         } catch (Throwable t) {
/*     */           
/* 411 */           this.this$0.attributes.log(""Unable to verify class "" + classname + "". Loading caused Exception: "" + t.getMessage(), 1);
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 416 */       return target;
/*     */     }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\DefaultRmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.KaffeRmic,"/*    */ package org.apache.tools.ant.taskdefs.rmic;
/*    */ 
/*    */ import java.lang.reflect.Constructor;
/*    */ import java.lang.reflect.Method;
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KaffeRmic
/*    */   extends DefaultRmicAdapter
/*    */ {
/*    */   static Class array$Ljava$lang$String;
/*    */   
/*    */   static Class class$(String x0) { 
/* 71 */     try { return Class.forName(x0); } catch (ClassNotFoundException x1) { throw new NoClassDefFoundError(x1.getMessage()); }
/*    */      }
/*    */   public boolean execute() throws BuildException {
/* 74 */     getRmic().log(""Using Kaffe rmic"", 3);
/* 75 */     Commandline cmd = setupRmicCommand();
/*    */ 
/*    */     
/*    */     try {
/* 79 */       Class c = Class.forName(""kaffe.rmi.rmic.RMIC"");
/* 80 */       Constructor cons = c.getConstructor(new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/* 81 */       Object rmic = cons.newInstance(new Object[] { cmd.getArguments() });
/* 82 */       Method doRmic = c.getMethod(""run"", null);
/* 83 */       Boolean ok = (Boolean)doRmic.invoke(rmic, null);
/*    */       
/* 85 */       return ok.booleanValue();
/*    */     } catch (ClassNotFoundException ex) {
/* 87 */       throw new BuildException(""Cannot use Kaffe rmic, as it is not available.  A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*    */     
/*    */     }
/*    */     catch (Exception ex) {
/*    */ 
/*    */       
/* 93 */       if (ex instanceof BuildException) {
/* 94 */         throw (BuildException)ex;
/*    */       }
/* 96 */       throw new BuildException(""Error starting Kaffe rmic: "", ex, getRmic().getLocation());
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\KaffeRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapter,"package org.apache.tools.ant.taskdefs.rmic;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Rmic;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.util.FileNameMapper;
public interface RmicAdapter {
  void setRmic(Rmic paramRmic);
  boolean execute() throws BuildException;
  FileNameMapper getMapper();
  Path getClasspath();
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.RmicAdapterFactory,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RmicAdapterFactory
/*     */ {
/*     */   public static RmicAdapter getRmic(String rmicType, Task task) throws BuildException {
/*  93 */     if (rmicType.equalsIgnoreCase(""sun""))
/*  94 */       return new SunRmic(); 
/*  95 */     if (rmicType.equalsIgnoreCase(""kaffe""))
/*  96 */       return new KaffeRmic(); 
/*  97 */     if (rmicType.equalsIgnoreCase(""weblogic"")) {
/*  98 */       return new WLRmic();
/*     */     }
/* 100 */     return resolveClassName(rmicType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static RmicAdapter resolveClassName(String className) throws BuildException {
/*     */     try {
/* 114 */       Class c = Class.forName(className);
/* 115 */       Object o = c.newInstance();
/* 116 */       return (RmicAdapter)o;
/*     */     } catch (ClassNotFoundException cnfe) {
/* 118 */       throw new BuildException(className + "" can't be found."", cnfe);
/*     */     } catch (ClassCastException cce) {
/* 120 */       throw new BuildException(className + "" isn't the classname of "" + ""a rmic adapter."", cce);
/*     */     }
/*     */     catch (Throwable t) {
/*     */       
/* 124 */       throw new BuildException(className + "" caused an interesting "" + ""exception."", t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\RmicAdapterFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.SunRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.lang.reflect.Constructor;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.LogOutputStream;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SunRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   public boolean execute() throws BuildException {
/*  76 */     getRmic().log(""Using SUN rmic compiler"", 3);
/*  77 */     Commandline cmd = setupRmicCommand();
/*     */ 
/*     */ 
/*     */     
/*  81 */     LogOutputStream logstr = new LogOutputStream((Task)getRmic(), 1);
/*     */ 
/*     */     
/*     */     try {
/*  85 */       Class c = Class.forName(""sun.rmi.rmic.Main"");
/*  86 */       Constructor cons = c.getConstructor(new Class[] { OutputStream.class, String.class });
/*     */       
/*  88 */       Object rmic = cons.newInstance(new Object[] { logstr, ""rmic"" });
/*     */       
/*  90 */       Method doRmic = c.getMethod(""compile"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  92 */       Boolean ok = (Boolean)doRmic.invoke(rmic, new Object[] { cmd.getArguments() });
/*     */ 
/*     */       
/*  95 */       return ok.booleanValue();
/*     */     } catch (ClassNotFoundException ex) {
/*  97 */       throw new BuildException(""Cannot use SUN rmic, as it is not available.  A common solution is to set the environment variable JAVA_HOME or CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */ 
/*     */       
/* 103 */       if (ex instanceof BuildException) {
/* 104 */         throw (BuildException)ex;
/*     */       }
/* 106 */       throw new BuildException(""Error starting SUN rmic: "", ex, getRmic().getLocation());
/*     */     } finally {
/*     */ 
/*     */       
/*     */       try {
/* 111 */         logstr.close();
/*     */       } catch (IOException e) {
/* 113 */         throw new BuildException(e);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\SunRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.taskdefs.rmic.WLRmic,"/*     */ package org.apache.tools.ant.taskdefs.rmic;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Commandline;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class WLRmic
/*     */   extends DefaultRmicAdapter
/*     */ {
/*     */   static Class array$Ljava$lang$String;
/*     */   
/*     */   static Class class$(String x0) { 
/*  71 */     try { return Class.forName(x0); } catch (ClassNotFoundException x1) { throw new NoClassDefFoundError(x1.getMessage()); }
/*     */      }
/*     */   public boolean execute() throws BuildException {
/*  74 */     getRmic().log(""Using WebLogic rmic"", 3);
/*  75 */     Commandline cmd = setupRmicCommand(new String[] { ""-noexit"" });
/*     */     
/*  77 */     AntClassLoader loader = null;
/*     */     
/*     */     try {
/*  80 */       Class c = null;
/*  81 */       if (getRmic().getClasspath() == null) {
/*  82 */         c = Class.forName(""weblogic.rmic"");
/*     */       } else {
/*  84 */         loader = new AntClassLoader(getRmic().getProject(), getRmic().getClasspath());
/*     */         
/*  86 */         c = loader.loadClass(""weblogic.rmic"");
/*  87 */         AntClassLoader.initializeClass(c);
/*     */       } 
/*  89 */       Method doRmic = c.getMethod(""main"", new Class[] { (array$Ljava$lang$String == null) ? (array$Ljava$lang$String = class$(""[Ljava.lang.String;"")) : array$Ljava$lang$String });
/*     */       
/*  91 */       doRmic.invoke(null, new Object[] { cmd.getArguments() });
/*  92 */       return true;
/*     */     } catch (ClassNotFoundException ex) {
/*  94 */       throw new BuildException(""Cannot use WebLogic rmic, as it is not available.  A common solution is to set the environment variable CLASSPATH."", getRmic().getLocation());
/*     */     
/*     */     }
/*     */     catch (Exception ex) {
/*     */       
/*  99 */       if (ex instanceof BuildException) {
/* 100 */         throw (BuildException)ex;
/*     */       }
/* 102 */       throw new BuildException(""Error starting WebLogic rmic: "", ex, getRmic().getLocation());
/*     */     }
/*     */     finally {
/*     */       
/* 106 */       if (loader != null) {
/* 107 */         loader.cleanup();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public String getStubClassSuffix() { return ""_WLStub""; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public String getSkelClassSuffix() { return ""_WLSkel""; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\taskdefs\rmic\WLRmic.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.AbstractFileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.selectors.AndSelector;
/*     */ import org.apache.tools.ant.types.selectors.ContainsSelector;
/*     */ import org.apache.tools.ant.types.selectors.DateSelector;
/*     */ import org.apache.tools.ant.types.selectors.DependSelector;
/*     */ import org.apache.tools.ant.types.selectors.DepthSelector;
/*     */ import org.apache.tools.ant.types.selectors.ExtendSelector;
/*     */ import org.apache.tools.ant.types.selectors.FileSelector;
/*     */ import org.apache.tools.ant.types.selectors.FilenameSelector;
/*     */ import org.apache.tools.ant.types.selectors.MajoritySelector;
/*     */ import org.apache.tools.ant.types.selectors.NoneSelector;
/*     */ import org.apache.tools.ant.types.selectors.NotSelector;
/*     */ import org.apache.tools.ant.types.selectors.OrSelector;
/*     */ import org.apache.tools.ant.types.selectors.PresentSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectSelector;
/*     */ import org.apache.tools.ant.types.selectors.SelectorContainer;
/*     */ import org.apache.tools.ant.types.selectors.SelectorScanner;
/*     */ import org.apache.tools.ant.types.selectors.SizeSelector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class AbstractFileSet
/*     */   extends DataType
/*     */   implements Cloneable, SelectorContainer
/*     */ {
/*  85 */   private PatternSet defaultPatterns = new PatternSet();
/*  86 */   private Vector additionalPatterns = new Vector();
/*  87 */   private Vector selectors = new Vector();
/*     */   
/*     */   private File dir;
/*     */   
/*     */   private boolean useDefaultExcludes = true;
/*     */   
/*     */   private boolean isCaseSensitive = true;
/*     */   private boolean followSymlinks = true;
/*     */   
/*     */   public AbstractFileSet() {}
/*     */   
/*     */   protected AbstractFileSet(AbstractFileSet fileset) {
/*  99 */     this.dir = fileset.dir;
/* 100 */     this.defaultPatterns = fileset.defaultPatterns;
/* 101 */     this.additionalPatterns = fileset.additionalPatterns;
/* 102 */     this.selectors = fileset.selectors;
/* 103 */     this.useDefaultExcludes = fileset.useDefaultExcludes;
/* 104 */     this.isCaseSensitive = fileset.isCaseSensitive;
/* 105 */     this.followSymlinks = fileset.followSymlinks;
/* 106 */     setProject(fileset.getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 116 */     if (this.dir != null || this.defaultPatterns.hasPatterns(getProject())) {
/* 117 */       throw tooManyAttributes();
/*     */     }
/* 119 */     if (!this.additionalPatterns.isEmpty()) {
/* 120 */       throw noChildrenAllowed();
/*     */     }
/* 122 */     if (!this.selectors.isEmpty()) {
/* 123 */       throw noChildrenAllowed();
/*     */     }
/* 125 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 132 */     if (isReference()) {
/* 133 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 136 */     this.dir = dir;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File getDir(Project p) {
/* 143 */     if (isReference()) {
/* 144 */       return getRef(p).getDir(p);
/*     */     }
/* 146 */     return this.dir;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet createPatternSet() {
/* 153 */     if (isReference()) {
/* 154 */       throw noChildrenAllowed();
/*     */     }
/* 156 */     PatternSet patterns = new PatternSet();
/* 157 */     this.additionalPatterns.addElement(patterns);
/* 158 */     return patterns;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createInclude() {
/* 165 */     if (isReference()) {
/* 166 */       throw noChildrenAllowed();
/*     */     }
/* 168 */     return this.defaultPatterns.createInclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createIncludesFile() {
/* 175 */     if (isReference()) {
/* 176 */       throw noChildrenAllowed();
/*     */     }
/* 178 */     return this.defaultPatterns.createIncludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExclude() {
/* 185 */     if (isReference()) {
/* 186 */       throw noChildrenAllowed();
/*     */     }
/* 188 */     return this.defaultPatterns.createExclude();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PatternSet.NameEntry createExcludesFile() {
/* 195 */     if (isReference()) {
/* 196 */       throw noChildrenAllowed();
/*     */     }
/* 198 */     return this.defaultPatterns.createExcludesFile();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 210 */     if (isReference()) {
/* 211 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 214 */     this.defaultPatterns.setIncludes(includes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 226 */     if (isReference()) {
/* 227 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 230 */     this.defaultPatterns.setExcludes(excludes);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File incl) throws BuildException {
/* 239 */     if (isReference()) {
/* 240 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 243 */     this.defaultPatterns.setIncludesfile(incl);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excl) throws BuildException {
/* 252 */     if (isReference()) {
/* 253 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 256 */     this.defaultPatterns.setExcludesfile(excl);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDefaultexcludes(boolean useDefaultExcludes) {
/* 267 */     if (isReference()) {
/* 268 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 271 */     this.useDefaultExcludes = useDefaultExcludes;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void setCaseSensitive(boolean isCaseSensitive) { this.isCaseSensitive = isCaseSensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 290 */   public void setFollowSymlinks(boolean followSymlinks) { this.followSymlinks = followSymlinks; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String getDataTypeName() {
/* 298 */     Project project = getProject();
/* 299 */     if (project != null) {
/* 300 */       Hashtable typedefs = project.getDataTypeDefinitions();
/* 301 */       for (Enumeration e = typedefs.keys(); e.hasMoreElements(); ) {
/* 302 */         String typeName = e.nextElement();
/* 303 */         Class typeClass = (Class)typedefs.get(typeName);
/* 304 */         if (typeClass == getClass()) {
/* 305 */           return typeName;
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 310 */     String classname = getClass().getName();
/*     */     
/* 312 */     int dotIndex = classname.lastIndexOf(""."");
/* 313 */     if (dotIndex == -1) {
/* 314 */       return classname;
/*     */     }
/* 316 */     return classname.substring(dotIndex + 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project p) {
/* 323 */     if (isReference()) {
/* 324 */       return getRef(p).getDirectoryScanner(p);
/*     */     }
/*     */     
/* 327 */     if (this.dir == null) {
/* 328 */       throw new BuildException(""No directory specified for "" + getDataTypeName() + ""."");
/*     */     }
/*     */ 
/*     */     
/* 332 */     if (!this.dir.exists()) {
/* 333 */       throw new BuildException(this.dir.getAbsolutePath() + "" not found."");
/*     */     }
/* 335 */     if (!this.dir.isDirectory()) {
/* 336 */       throw new BuildException(this.dir.getAbsolutePath() + "" is not a directory."");
/*     */     }
/*     */ 
/*     */     
/* 340 */     DirectoryScanner ds = new DirectoryScanner();
/* 341 */     setupDirectoryScanner((FileScanner)ds, p);
/* 342 */     ds.setFollowSymlinks(this.followSymlinks);
/* 343 */     ds.scan();
/* 344 */     return ds;
/*     */   }
/*     */   
/*     */   public void setupDirectoryScanner(FileScanner ds, Project p) {
/* 348 */     if (ds == null) {
/* 349 */       throw new IllegalArgumentException(""ds cannot be null"");
/*     */     }
/*     */     
/* 352 */     ds.setBasedir(this.dir);
/*     */     
/* 354 */     int count = this.additionalPatterns.size();
/* 355 */     for (int i = 0; i < count; i++) {
/* 356 */       Object o = this.additionalPatterns.elementAt(i);
/* 357 */       this.defaultPatterns.append((PatternSet)o, p);
/*     */     } 
/*     */     
/* 360 */     p.log(getDataTypeName() + "": Setup scanner in dir "" + this.dir + "" with "" + this.defaultPatterns, 4);
/*     */ 
/*     */     
/* 363 */     ds.setIncludes(this.defaultPatterns.getIncludePatterns(p));
/* 364 */     ds.setExcludes(this.defaultPatterns.getExcludePatterns(p));
/* 365 */     if (ds instanceof SelectorScanner) {
/* 366 */       SelectorScanner ss = (SelectorScanner)ds;
/* 367 */       ss.setSelectors(getSelectors(p));
/*     */     } 
/*     */     
/* 370 */     if (this.useDefaultExcludes) {
/* 371 */       ds.addDefaultExcludes();
/*     */     }
/* 373 */     ds.setCaseSensitive(this.isCaseSensitive);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected AbstractFileSet getRef(Project p) {
/* 381 */     if (!this.checked) {
/* 382 */       Stack stk = new Stack();
/* 383 */       stk.push(this);
/* 384 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 387 */     Object o = this.ref.getReferencedObject(p);
/* 388 */     if (!getClass().isAssignableFrom(o.getClass())) {
/* 389 */       String msg = this.ref.getRefId() + "" doesn't denote a "" + getDataTypeName();
/*     */       
/* 391 */       throw new BuildException(msg);
/*     */     } 
/* 393 */     return (AbstractFileSet)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 405 */   public boolean hasSelectors() { return !this.selectors.isEmpty(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasPatterns() {
/* 414 */     if (this.defaultPatterns.hasPatterns(getProject())) {
/* 415 */       return true;
/*     */     }
/*     */     
/* 418 */     Enumeration enum = this.additionalPatterns.elements();
/* 419 */     while (enum.hasMoreElements()) {
/* 420 */       PatternSet ps = enum.nextElement();
/* 421 */       if (ps.hasPatterns(getProject())) {
/* 422 */         return true;
/*     */       }
/*     */     } 
/*     */     
/* 426 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 435 */   public int selectorCount() { return this.selectors.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 444 */     if (isReference()) {
/* 445 */       return getRef(p).getSelectors(p);
/*     */     }
/* 447 */     FileSelector[] result = new FileSelector[this.selectors.size()];
/* 448 */     this.selectors.copyInto((Object[])result);
/* 449 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 459 */   public Enumeration selectorElements() { return this.selectors.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void appendSelector(FileSelector selector) {
/* 468 */     if (isReference()) {
/* 469 */       throw noChildrenAllowed();
/*     */     }
/* 471 */     this.selectors.addElement(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 480 */   public void addSelector(SelectSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 487 */   public void addAnd(AndSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 494 */   public void addOr(OrSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 501 */   public void addNot(NotSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 508 */   public void addNone(NoneSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 515 */   public void addMajority(MajoritySelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 522 */   public void addDate(DateSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 529 */   public void addSize(SizeSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 536 */   public void addFilename(FilenameSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 543 */   public void addCustom(ExtendSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 550 */   public void addContains(ContainsSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 557 */   public void addPresent(PresentSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 564 */   public void addDepth(DepthSelector selector) { appendSelector((FileSelector)selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 571 */   public void addDepend(DependSelector selector) { appendSelector((FileSelector)selector); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\AbstractFileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.AntFilterReader,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class AntFilterReader
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   private String className;
/*  71 */   private final Vector parameters = new Vector();
/*     */   
/*     */   private Path classpath;
/*     */ 
/*     */   
/*  76 */   public final void setClassName(String className) { this.className = className; }
/*     */ 
/*     */ 
/*     */   
/*  80 */   public final String getClassName() { return this.className; }
/*     */ 
/*     */ 
/*     */   
/*  84 */   public final void addParam(Parameter param) { this.parameters.addElement(param); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setClasspath(Path classpath) {
/*  91 */     if (isReference()) {
/*  92 */       throw tooManyAttributes();
/*     */     }
/*  94 */     if (this.classpath == null) {
/*  95 */       this.classpath = classpath;
/*     */     } else {
/*  97 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Path createClasspath() {
/* 105 */     if (isReference()) {
/* 106 */       throw noChildrenAllowed();
/*     */     }
/* 108 */     if (this.classpath == null) {
/* 109 */       this.classpath = new Path(getProject());
/*     */     }
/* 111 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public final Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathRef(Reference r) {
/* 126 */     if (isReference()) {
/* 127 */       throw tooManyAttributes();
/*     */     }
/* 129 */     createClasspath().setRefid(r);
/*     */   }
/*     */   
/*     */   public final Parameter[] getParams() {
/* 133 */     Parameter[] params = new Parameter[this.parameters.size()];
/* 134 */     this.parameters.copyInto((Object[])params);
/* 135 */     return params;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 149 */     if (!this.parameters.isEmpty() || this.className != null || this.classpath != null)
/*     */     {
/* 151 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 154 */     Object o = r.getReferencedObject(getProject());
/* 155 */     if (o instanceof AntFilterReader) {
/* 156 */       AntFilterReader afr = (AntFilterReader)o;
/* 157 */       setClassName(afr.getClassName());
/* 158 */       setClasspath(afr.getClasspath());
/* 159 */       Parameter[] p = afr.getParams();
/* 160 */       if (p != null) {
/* 161 */         for (int i = 0; i < p.length; i++) {
/* 162 */           addParam(p[i]);
/*     */         }
/*     */       }
/*     */     } else {
/* 166 */       String msg = r.getRefId() + "" doesn't refer to a FilterReader"";
/* 167 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/* 170 */     super.setRefid(r);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\AntFilterReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Commandline,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.StringUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Commandline
/*     */   implements Cloneable
/*     */ {
/*  88 */   private Vector arguments = new Vector();
/*  89 */   private String executable = null;
/*     */   
/*  91 */   protected static final String DISCLAIMER = StringUtils.LINE_SEP + ""The ' characters around the executable and arguments are"" + StringUtils.LINE_SEP + ""not part of the command."" + StringUtils.LINE_SEP;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Commandline(String to_process) {
/* 100 */     String[] tmp = translateCommandline(to_process);
/* 101 */     if (tmp != null && tmp.length > 0) {
/* 102 */       setExecutable(tmp[0]);
/* 103 */       for (int i = 1; i < tmp.length; i++) {
/* 104 */         createArgument().setValue(tmp[i]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class Argument
/*     */   {
/*     */     private String[] parts;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 126 */     public void setValue(String value) { this.parts = new String[] { value }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void setLine(String line) {
/* 135 */       if (line == null) {
/*     */         return;
/*     */       }
/* 138 */       this.parts = Commandline.translateCommandline(line);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 149 */     public void setPath(Path value) { this.parts = new String[] { value.toString() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 159 */     public void setFile(File value) { this.parts = new String[] { value.getAbsolutePath() }; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 166 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public class Marker
/*     */   {
/*     */     private int position;
/*     */     
/*     */     private int realPos;
/*     */     
/*     */     private final Commandline this$0;
/*     */ 
/*     */     
/*     */     Marker(Commandline this$0, int position) {
/* 181 */       this.this$0 = this$0; this.realPos = -1;
/* 182 */       this.position = position;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public int getPosition() {
/* 192 */       if (this.realPos == -1) {
/* 193 */         this.realPos = (this.this$0.executable == null) ? 0 : 1;
/* 194 */         for (int i = 0; i < this.position; i++) {
/* 195 */           Commandline.Argument arg = this.this$0.arguments.elementAt(i);
/* 196 */           this.realPos += (arg.getParts()).length;
/*     */         } 
/*     */       } 
/* 199 */       return this.realPos;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public Argument createArgument() { return createArgument(false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Argument createArgument(boolean insertAtStart) {
/* 227 */     Argument argument = new Argument();
/* 228 */     if (insertAtStart) {
/* 229 */       this.arguments.insertElementAt(argument, 0);
/*     */     } else {
/* 231 */       this.arguments.addElement(argument);
/*     */     } 
/* 233 */     return argument;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExecutable(String executable) {
/* 240 */     if (executable == null || executable.length() == 0) {
/*     */       return;
/*     */     }
/* 243 */     this.executable = executable.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 249 */   public String getExecutable() { return this.executable; }
/*     */ 
/*     */ 
/*     */   
/*     */   public void addArguments(String[] line) {
/* 254 */     for (int i = 0; i < line.length; i++) {
/* 255 */       createArgument().setValue(line[i]);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 263 */     String[] args = getArguments();
/* 264 */     if (this.executable == null) {
/* 265 */       return args;
/*     */     }
/* 267 */     String[] result = new String[args.length + 1];
/* 268 */     result[0] = this.executable;
/* 269 */     System.arraycopy(args, 0, result, 1, args.length);
/* 270 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getArguments() {
/* 279 */     Vector result = new Vector(this.arguments.size() * 2);
/* 280 */     for (int i = 0; i < this.arguments.size(); i++) {
/* 281 */       Argument arg = this.arguments.elementAt(i);
/* 282 */       String[] s = arg.getParts();
/* 283 */       if (s != null) {
/* 284 */         for (int j = 0; j < s.length; j++) {
/* 285 */           result.addElement(s[j]);
/*     */         }
/*     */       }
/*     */     } 
/*     */     
/* 290 */     String[] res = new String[result.size()];
/* 291 */     result.copyInto((Object[])res);
/* 292 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/* 297 */   public String toString() { return toString(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String quoteArgument(String argument) {
/* 311 */     if (argument.indexOf(""\"""") > -1) {
/* 312 */       if (argument.indexOf(""'"") > -1) {
/* 313 */         throw new BuildException(""Can't handle single and double quotes in same argument"");
/*     */       }
/* 315 */       return '\'' + argument + '\'';
/*     */     } 
/* 317 */     if (argument.indexOf(""'"") > -1 || argument.indexOf("" "") > -1) {
/* 318 */       return '""' + argument + '""';
/*     */     }
/* 320 */     return argument;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String toString(String[] line) {
/* 330 */     if (line == null || line.length == 0) {
/* 331 */       return """";
/*     */     }
/*     */ 
/*     */     
/* 335 */     StringBuffer result = new StringBuffer();
/* 336 */     for (int i = 0; i < line.length; i++) {
/* 337 */       if (i > 0) {
/* 338 */         result.append(' ');
/*     */       }
/* 340 */       result.append(quoteArgument(line[i]));
/*     */     } 
/* 342 */     return result.toString();
/*     */   }
/*     */   
/*     */   public static String[] translateCommandline(String to_process) {
/* 346 */     if (to_process == null || to_process.length() == 0) {
/* 347 */       return new String[0];
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 355 */     int state = 0;
/* 356 */     StringTokenizer tok = new StringTokenizer(to_process, ""\""' "", true);
/* 357 */     Vector v = new Vector();
/* 358 */     StringBuffer current = new StringBuffer();
/*     */     
/* 360 */     while (tok.hasMoreTokens()) {
/* 361 */       String nextTok = tok.nextToken();
/* 362 */       switch (state) {
/*     */         case 1:
/* 364 */           if (""'"".equals(nextTok)) {
/* 365 */             state = 0; continue;
/*     */           } 
/* 367 */           current.append(nextTok);
/*     */           continue;
/*     */         
/*     */         case 2:
/* 371 */           if (""\"""".equals(nextTok)) {
/* 372 */             state = 0; continue;
/*     */           } 
/* 374 */           current.append(nextTok);
/*     */           continue;
/*     */       } 
/*     */       
/* 378 */       if (""'"".equals(nextTok)) {
/* 379 */         state = 1; continue;
/* 380 */       }  if (""\"""".equals(nextTok)) {
/* 381 */         state = 2; continue;
/* 382 */       }  if ("" "".equals(nextTok)) {
/* 383 */         if (current.length() != 0) {
/* 384 */           v.addElement(current.toString());
/* 385 */           current.setLength(0);
/*     */         }  continue;
/*     */       } 
/* 388 */       current.append(nextTok);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 394 */     if (current.length() != 0) {
/* 395 */       v.addElement(current.toString());
/*     */     }
/*     */     
/* 398 */     if (state == 1 || state == 2) {
/* 399 */       throw new BuildException(""unbalanced quotes in "" + to_process);
/*     */     }
/*     */     
/* 402 */     String[] args = new String[v.size()];
/* 403 */     v.copyInto((Object[])args);
/* 404 */     return args;
/*     */   }
/*     */ 
/*     */   
/* 408 */   public int size() { return (getCommandline()).length; }
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 412 */     Commandline c = new Commandline();
/* 413 */     c.setExecutable(this.executable);
/* 414 */     c.addArguments(getArguments());
/* 415 */     return c;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public void clear() {
/* 421 */     this.executable = null;
/* 422 */     this.arguments.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 430 */   public void clearArgs() { this.arguments.removeAllElements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 441 */   public Marker createMarker() { return new Marker(this, this.arguments.size()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 452 */   public String describeCommand() { return describeCommand(this); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 463 */   public String describeArguments() { return describeArguments(this); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 474 */   public static String describeCommand(Commandline line) { return describeCommand(line.getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 485 */   public static String describeArguments(Commandline line) { return describeArguments(line.getArguments()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String describeCommand(String[] args) {
/* 499 */     if (args == null || args.length == 0) {
/* 500 */       return """";
/*     */     }
/*     */     
/* 503 */     StringBuffer buf = new StringBuffer(""Executing '"");
/* 504 */     buf.append(args[0]);
/* 505 */     buf.append(""'"");
/* 506 */     if (args.length > 0) {
/* 507 */       buf.append("" with "");
/* 508 */       buf.append(describeArguments(args, 1));
/*     */     } else {
/* 510 */       buf.append(DISCLAIMER);
/*     */     } 
/* 512 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 523 */   public static String describeArguments(String[] args) { return describeArguments(args, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static String describeArguments(String[] args, int offset) {
/* 536 */     if (args == null || args.length <= offset) {
/* 537 */       return """";
/*     */     }
/*     */     
/* 540 */     StringBuffer buf = new StringBuffer(""argument"");
/* 541 */     if (args.length > offset) {
/* 542 */       buf.append(""s"");
/*     */     }
/* 544 */     buf.append("":"").append(StringUtils.LINE_SEP);
/* 545 */     for (int i = offset; i < args.length; i++) {
/* 546 */       buf.append(""'"").append(args[i]).append(""'"").append(StringUtils.LINE_SEP);
/*     */     }
/*     */     
/* 549 */     buf.append(DISCLAIMER);
/* 550 */     return buf.toString();
/*     */   }
/*     */   
/*     */   public Commandline() {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Commandline.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.CommandlineJava,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CommandlineJava
/*     */   implements Cloneable
/*     */ {
/*  78 */   private Commandline vmCommand = new Commandline();
/*     */ 
/*     */ 
/*     */   
/*  82 */   private Commandline javaCommand = new Commandline();
/*     */ 
/*     */ 
/*     */   
/*  86 */   private SysProperties sysProperties = new SysProperties();
/*  87 */   private Path classpath = null;
/*     */   private String vmVersion;
/*  89 */   private String maxMemory = null;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean executeJar = false;
/*     */ 
/*     */ 
/*     */   
/*     */   public static class SysProperties
/*     */     extends Environment
/*     */     implements Cloneable
/*     */   {
/* 101 */     Properties sys = null;
/*     */     
/*     */     public String[] getVariables() throws BuildException {
/* 104 */       String[] props = super.getVariables();
/*     */       
/* 106 */       if (props == null) {
/* 107 */         return null;
/*     */       }
/*     */       
/* 110 */       for (int i = 0; i < props.length; i++) {
/* 111 */         props[i] = ""-D"" + props[i];
/*     */       }
/* 113 */       return props;
/*     */     }
/*     */ 
/*     */     
/* 117 */     public int size() { return this.variables.size(); }
/*     */ 
/*     */     
/*     */     public void setSystem() throws BuildException {
/*     */       try {
/* 122 */         this.sys = System.getProperties();
/* 123 */         Properties p = new Properties();
/* 124 */         for (Enumeration e = this.sys.keys(); e.hasMoreElements(); ) {
/* 125 */           Object o = e.nextElement();
/* 126 */           p.put(o, this.sys.get(o));
/*     */         } 
/* 128 */         for (Enumeration e = this.variables.elements(); e.hasMoreElements(); ) {
/* 129 */           Environment.Variable v = e.nextElement();
/* 130 */           p.put(v.getKey(), v.getValue());
/*     */         } 
/* 132 */         System.setProperties(p);
/*     */       } catch (SecurityException e) {
/* 134 */         throw new BuildException(""Cannot modify system properties"", e);
/*     */       } 
/*     */     }
/*     */     
/*     */     public void restoreSystem() throws BuildException {
/* 139 */       if (this.sys == null) {
/* 140 */         throw new BuildException(""Unbalanced nesting of SysProperties"");
/*     */       }
/*     */       
/*     */       try {
/* 144 */         System.setProperties(this.sys);
/* 145 */         this.sys = null;
/*     */       } catch (SecurityException e) {
/* 147 */         throw new BuildException(""Cannot modify system properties"", e);
/*     */       } 
/*     */     }
/*     */     
/*     */     public Object clone() {
/*     */       try {
/* 153 */         SysProperties c = (SysProperties)super.clone();
/* 154 */         c.variables = (Vector)this.variables.clone();
/* 155 */         return c;
/*     */       } catch (CloneNotSupportedException e) {
/* 157 */         return null;
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public CommandlineJava() {
/* 167 */     setVm(JavaEnvUtils.getJreExecutable(""java""));
/* 168 */     setVmversion(JavaEnvUtils.getJavaVersion());
/*     */   }
/*     */ 
/*     */   
/* 172 */   public Commandline.Argument createArgument() { return this.javaCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */   
/* 176 */   public Commandline.Argument createVmArgument() { return this.vmCommand.createArgument(); }
/*     */ 
/*     */ 
/*     */   
/* 180 */   public void addSysproperty(Environment.Variable sysp) { this.sysProperties.addVariable(sysp); }
/*     */ 
/*     */ 
/*     */   
/* 184 */   public void setVm(String vm) { this.vmCommand.setExecutable(vm); }
/*     */ 
/*     */ 
/*     */   
/* 188 */   public void setVmversion(String value) { this.vmVersion = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setJar(String jarpathname) {
/* 196 */     this.javaCommand.setExecutable(jarpathname);
/* 197 */     this.executeJar = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getJar() {
/* 206 */     if (this.executeJar) {
/* 207 */       return this.javaCommand.getExecutable();
/*     */     }
/* 209 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClassname(String classname) {
/* 217 */     this.javaCommand.setExecutable(classname);
/* 218 */     this.executeJar = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getClassname() {
/* 226 */     if (!this.executeJar) {
/* 227 */       return this.javaCommand.getExecutable();
/*     */     }
/* 229 */     return null;
/*     */   }
/*     */   
/*     */   public Path createClasspath(Project p) {
/* 233 */     if (this.classpath == null) {
/* 234 */       this.classpath = new Path(p);
/*     */     }
/* 236 */     return this.classpath;
/*     */   }
/*     */ 
/*     */   
/* 240 */   public String getVmversion() { return this.vmVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getCommandline() {
/* 248 */     String[] result = new String[size()];
/* 249 */     int pos = 0;
/* 250 */     String[] vmArgs = getActualVMCommand().getCommandline();
/*     */     
/* 252 */     result[pos++] = vmArgs[0];
/*     */ 
/*     */     
/* 255 */     System.arraycopy(vmArgs, 1, result, pos, vmArgs.length - 1);
/* 256 */     pos += vmArgs.length - 1;
/*     */     
/* 258 */     if (this.sysProperties.size() > 0) {
/* 259 */       System.arraycopy(this.sysProperties.getVariables(), 0, result, pos, this.sysProperties.size());
/*     */       
/* 261 */       pos += this.sysProperties.size();
/*     */     } 
/*     */     
/* 264 */     Path fullClasspath = (this.classpath != null) ? this.classpath.concatSystemClasspath(""ignore"") : null;
/* 265 */     if (fullClasspath != null && fullClasspath.toString().trim().length() > 0) {
/* 266 */       result[pos++] = ""-classpath"";
/* 267 */       result[pos++] = fullClasspath.toString();
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 274 */     if (this.executeJar) {
/* 275 */       result[pos++] = ""-jar"";
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 280 */     System.arraycopy(this.javaCommand.getCommandline(), 0, result, pos, this.javaCommand.size());
/*     */ 
/*     */     
/* 283 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 291 */   public void setMaxmemory(String max) { this.maxMemory = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 300 */   public String toString() { return Commandline.toString(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public String describeCommand() { return Commandline.describeCommand(getCommandline()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 323 */   public String describeJavaCommand() { return Commandline.describeCommand(getJavaCommand()); }
/*     */ 
/*     */   
/*     */   private Commandline getActualVMCommand() {
/* 327 */     Commandline actualVMCommand = (Commandline)this.vmCommand.clone();
/* 328 */     if (this.maxMemory != null) {
/* 329 */       if (this.vmVersion.startsWith(""1.1"")) {
/* 330 */         actualVMCommand.createArgument().setValue(""-mx"" + this.maxMemory);
/*     */       } else {
/* 332 */         actualVMCommand.createArgument().setValue(""-Xmx"" + this.maxMemory);
/*     */       } 
/*     */     }
/* 335 */     return actualVMCommand;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int size() {
/* 344 */     int size = getActualVMCommand().size() + this.javaCommand.size() + this.sysProperties.size();
/*     */     
/* 346 */     Path fullClasspath = (this.classpath != null) ? this.classpath.concatSystemClasspath(""ignore"") : null;
/* 347 */     if (fullClasspath != null && fullClasspath.toString().trim().length() > 0) {
/* 348 */       size += 2;
/*     */     }
/*     */     
/* 351 */     if (this.executeJar) {
/* 352 */       size++;
/*     */     }
/* 354 */     return size;
/*     */   }
/*     */ 
/*     */   
/* 358 */   public Commandline getJavaCommand() { return this.javaCommand; }
/*     */ 
/*     */ 
/*     */   
/* 362 */   public Commandline getVmCommand() { return getActualVMCommand(); }
/*     */ 
/*     */ 
/*     */   
/* 366 */   public Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */   
/* 370 */   public void setSystemProperties() throws BuildException { this.sysProperties.setSystem(); }
/*     */ 
/*     */ 
/*     */   
/* 374 */   public void restoreSystemProperties() throws BuildException { this.sysProperties.restoreSystem(); }
/*     */ 
/*     */ 
/*     */   
/* 378 */   public SysProperties getSystemProperties() { return this.sysProperties; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 386 */     CommandlineJava c = new CommandlineJava();
/* 387 */     c.vmCommand = (Commandline)this.vmCommand.clone();
/* 388 */     c.javaCommand = (Commandline)this.javaCommand.clone();
/* 389 */     c.sysProperties = (SysProperties)this.sysProperties.clone();
/* 390 */     c.maxMemory = this.maxMemory;
/* 391 */     if (this.classpath != null) {
/* 392 */       c.classpath = (Path)this.classpath.clone();
/*     */     }
/* 394 */     c.vmVersion = this.vmVersion;
/* 395 */     c.executeJar = this.executeJar;
/* 396 */     return c;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 403 */   public void clearJavaArgs() { this.javaCommand.clearArgs(); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\CommandlineJava.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DataType,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.ProjectComponent;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class DataType
/*     */   extends ProjectComponent
/*     */ {
/*  79 */   protected String description = null;
/*     */ 
/*     */ 
/*     */   
/*  83 */   protected Reference ref = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected boolean checked = true;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  99 */   public void setDescription(String desc) { this.description = desc; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public String getDescription() { return this.description; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public boolean isReference() { return (this.ref != null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference ref) {
/* 125 */     this.ref = ref;
/* 126 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack stk, Project p) throws BuildException {
/* 148 */     if (this.checked || !isReference()) {
/*     */       return;
/*     */     }
/* 151 */     Object o = this.ref.getReferencedObject(p);
/*     */     
/* 153 */     if (o instanceof DataType) {
/* 154 */       if (stk.contains(o)) {
/* 155 */         throw circularReference();
/*     */       }
/* 157 */       stk.push(o);
/* 158 */       ((DataType)o).dieOnCircularReference(stk, p);
/* 159 */       stk.pop();
/*     */     } 
/*     */     
/* 162 */     this.checked = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Object getCheckedRef(Class requiredClass, String dataTypeName) {
/* 170 */     if (!this.checked) {
/* 171 */       Stack stk = new Stack();
/* 172 */       stk.push(this);
/* 173 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 176 */     Object o = this.ref.getReferencedObject(getProject());
/* 177 */     if (!requiredClass.isAssignableFrom(o.getClass())) {
/* 178 */       String msg = this.ref.getRefId() + "" doesn't denote a "" + dataTypeName;
/* 179 */       throw new BuildException(msg);
/*     */     } 
/* 181 */     return o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   protected BuildException tooManyAttributes() { return new BuildException(""You must not specify more than one attribute when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 199 */   protected BuildException noChildrenAllowed() { return new BuildException(""You must not specify nested elements when using refid""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 208 */   protected BuildException circularReference() { return new BuildException(""This data type contains a circular reference.""); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\DataType.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Description,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Description
/*    */   extends DataType
/*    */ {
/*    */   public void addText(String text) {
/* 80 */     String currentDescription = this.project.getDescription();
/* 81 */     if (currentDescription == null) {
/* 82 */       this.project.setDescription(text);
/*    */     } else {
/* 84 */       this.project.setDescription(currentDescription + text);
/*    */     } 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Description.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DirSet,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DirSet
/*    */   extends AbstractFileSet
/*    */ {
/*    */   public DirSet() {}
/*    */   
/* 70 */   protected DirSet(DirSet dirset) { super(dirset); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object clone() {
/* 78 */     if (isReference()) {
/* 79 */       return new DirSet((DirSet)getRef(getProject()));
/*    */     }
/* 81 */     return new DirSet(this);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\DirSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.DTDLocation,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class DTDLocation
/*    */ {
/* 64 */   private String publicId = null;
/*    */   
/* 66 */   private String location = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 72 */   public void setPublicId(String publicId) { this.publicId = publicId; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 80 */   public void setLocation(String location) { this.location = location; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 87 */   public String getPublicId() { return this.publicId; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 94 */   public String getLocation() { return this.location; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\DTDLocation.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.EnumeratedAttribute,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class EnumeratedAttribute
/*     */ {
/*     */   protected String value;
/*  78 */   private int index = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract String[] getValues();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setValue(String value) throws BuildException {
/*  97 */     int index = indexOfValue(value);
/*  98 */     if (index == -1) {
/*  99 */       throw new BuildException(value + "" is not a legal value for this attribute"");
/*     */     }
/* 101 */     this.index = index;
/* 102 */     this.value = value;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   public final boolean containsValue(String value) { return (indexOfValue(value) != -1); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int indexOfValue(String value) {
/* 120 */     String[] values = getValues();
/* 121 */     if (values == null || value == null) {
/* 122 */       return -1;
/*     */     }
/* 124 */     for (int i = 0; i < values.length; i++) {
/* 125 */       if (value.equals(values[i])) {
/* 126 */         return i;
/*     */       }
/*     */     } 
/* 129 */     return -1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 136 */   public final String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public final int getIndex() { return this.index; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 154 */   public String toString() { return getValue(); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\EnumeratedAttribute.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Environment,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Environment
/*     */ {
/*     */   protected Vector variables;
/*     */   
/*     */   public static class Variable
/*     */   {
/*     */     private String key;
/*     */     private String value;
/*     */     
/*  77 */     public void setKey(String key) { this.key = key; }
/*     */ 
/*     */ 
/*     */     
/*  81 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */     
/*  85 */     public String getKey() { return this.key; }
/*     */ 
/*     */ 
/*     */     
/*  89 */     public String getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */     
/*  93 */     public void setPath(Path path) { this.value = path.toString(); }
/*     */ 
/*     */ 
/*     */     
/*  97 */     public void setFile(File file) { this.value = file.getAbsolutePath(); }
/*     */ 
/*     */     
/*     */     public String getContent() throws BuildException {
/* 101 */       if (this.key == null || this.value == null) {
/* 102 */         throw new BuildException(""key and value must be specified for environment variables."");
/*     */       }
/* 104 */       StringBuffer sb = new StringBuffer(this.key.trim());
/* 105 */       sb.append(""="").append(this.value.trim());
/* 106 */       return sb.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 111 */   public Environment() { this.variables = new Vector(); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public void addVariable(Variable var) { this.variables.addElement(var); }
/*     */ 
/*     */   
/*     */   public String[] getVariables() throws BuildException {
/* 119 */     if (this.variables.size() == 0) {
/* 120 */       return null;
/*     */     }
/* 122 */     String[] result = new String[this.variables.size()];
/* 123 */     for (int i = 0; i < result.length; i++) {
/* 124 */       result[i] = ((Variable)this.variables.elementAt(i)).getContent();
/*     */     }
/* 126 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Environment.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileList,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileList
/*     */   extends DataType
/*     */ {
/*  79 */   private Vector filenames = new Vector();
/*     */   
/*     */   private File dir;
/*     */ 
/*     */   
/*     */   public FileList() {}
/*     */   
/*     */   protected FileList(FileList filelist) {
/*  87 */     this.dir = filelist.dir;
/*  88 */     this.filenames = filelist.filenames;
/*  89 */     setProject(filelist.getProject());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 100 */     if (this.dir != null || this.filenames.size() != 0) {
/* 101 */       throw tooManyAttributes();
/*     */     }
/* 103 */     super.setRefid(r);
/*     */   }
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 107 */     if (isReference()) {
/* 108 */       throw tooManyAttributes();
/*     */     }
/* 110 */     this.dir = dir;
/*     */   }
/*     */   
/*     */   public File getDir(Project p) {
/* 114 */     if (isReference()) {
/* 115 */       return getRef(p).getDir(p);
/*     */     }
/* 117 */     return this.dir;
/*     */   }
/*     */   
/*     */   public void setFiles(String filenames) {
/* 121 */     if (isReference()) {
/* 122 */       throw tooManyAttributes();
/*     */     }
/* 124 */     if (filenames != null && filenames.length() > 0) {
/* 125 */       StringTokenizer tok = new StringTokenizer(filenames, "", \t\n\r\f"", false);
/* 126 */       while (tok.hasMoreTokens()) {
/* 127 */         this.filenames.addElement(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getFiles(Project p) {
/* 136 */     if (isReference()) {
/* 137 */       return getRef(p).getFiles(p);
/*     */     }
/*     */     
/* 140 */     if (this.dir == null) {
/* 141 */       throw new BuildException(""No directory specified for filelist."");
/*     */     }
/*     */     
/* 144 */     if (this.filenames.size() == 0) {
/* 145 */       throw new BuildException(""No files specified for filelist."");
/*     */     }
/*     */     
/* 148 */     String[] result = new String[this.filenames.size()];
/* 149 */     this.filenames.copyInto((Object[])result);
/* 150 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected FileList getRef(Project p) {
/* 158 */     if (!this.checked) {
/* 159 */       Stack stk = new Stack();
/* 160 */       stk.push(this);
/* 161 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 164 */     Object o = this.ref.getReferencedObject(p);
/* 165 */     if (!(o instanceof FileList)) {
/* 166 */       String msg = this.ref.getRefId() + "" doesn't denote a filelist"";
/* 167 */       throw new BuildException(msg);
/*     */     } 
/* 169 */     return (FileList)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FileList.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FileSet,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FileSet
/*    */   extends AbstractFileSet
/*    */ {
/*    */   public FileSet() {}
/*    */   
/* 75 */   protected FileSet(FileSet fileset) { super(fileset); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public Object clone() {
/* 83 */     if (isReference()) {
/* 84 */       return new FileSet((FileSet)getRef(getProject()));
/*    */     }
/* 86 */     return new FileSet(this);
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterChain,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.filters.ClassConstants;
/*     */ import org.apache.tools.ant.filters.ExpandProperties;
/*     */ import org.apache.tools.ant.filters.HeadFilter;
/*     */ import org.apache.tools.ant.filters.LineContains;
/*     */ import org.apache.tools.ant.filters.LineContainsRegExp;
/*     */ import org.apache.tools.ant.filters.PrefixLines;
/*     */ import org.apache.tools.ant.filters.ReplaceTokens;
/*     */ import org.apache.tools.ant.filters.StripJavaComments;
/*     */ import org.apache.tools.ant.filters.StripLineBreaks;
/*     */ import org.apache.tools.ant.filters.StripLineComments;
/*     */ import org.apache.tools.ant.filters.TabsToSpaces;
/*     */ import org.apache.tools.ant.filters.TailFilter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class FilterChain
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*  79 */   private Vector filterReaders = new Vector();
/*     */ 
/*     */   
/*  82 */   public final void addFilterReader(AntFilterReader filterReader) { this.filterReaders.addElement(filterReader); }
/*     */ 
/*     */ 
/*     */   
/*  86 */   public final Vector getFilterReaders() { return this.filterReaders; }
/*     */ 
/*     */ 
/*     */   
/*  90 */   public final void addClassConstants(ClassConstants classConstants) { this.filterReaders.addElement(classConstants); }
/*     */ 
/*     */ 
/*     */   
/*  94 */   public final void addExpandProperties(ExpandProperties expandProperties) { this.filterReaders.addElement(expandProperties); }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public final void addHeadFilter(HeadFilter headFilter) { this.filterReaders.addElement(headFilter); }
/*     */ 
/*     */ 
/*     */   
/* 102 */   public final void addLineContains(LineContains lineContains) { this.filterReaders.addElement(lineContains); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 107 */   public final void addLineContainsRegExp(LineContainsRegExp lineContainsRegExp) { this.filterReaders.addElement(lineContainsRegExp); }
/*     */ 
/*     */ 
/*     */   
/* 111 */   public final void addPrefixLines(PrefixLines prefixLines) { this.filterReaders.addElement(prefixLines); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public final void addReplaceTokens(ReplaceTokens replaceTokens) { this.filterReaders.addElement(replaceTokens); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 120 */   public final void addStripJavaComments(StripJavaComments stripJavaComments) { this.filterReaders.addElement(stripJavaComments); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public final void addStripLineBreaks(StripLineBreaks stripLineBreaks) { this.filterReaders.addElement(stripLineBreaks); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public final void addStripLineComments(StripLineComments stripLineComments) { this.filterReaders.addElement(stripLineComments); }
/*     */ 
/*     */ 
/*     */   
/* 134 */   public final void addTabsToSpaces(TabsToSpaces tabsToSpaces) { this.filterReaders.addElement(tabsToSpaces); }
/*     */ 
/*     */ 
/*     */   
/* 138 */   public final void addTailFilter(TailFilter tailFilter) { this.filterReaders.addElement(tailFilter); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 152 */     if (!this.filterReaders.isEmpty()) {
/* 153 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 156 */     Object o = r.getReferencedObject(getProject());
/* 157 */     if (o instanceof FilterChain) {
/* 158 */       FilterChain fc = (FilterChain)o;
/* 159 */       this.filterReaders = fc.getFilterReaders();
/*     */     } else {
/* 161 */       String msg = r.getRefId() + "" doesn't refer to a FilterChain"";
/* 162 */       throw new BuildException(msg);
/*     */     } 
/*     */     
/* 165 */     super.setRefid(r);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FilterChain.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Properties;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSet
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   public static final String DEFAULT_TOKEN_START = ""@"";
/*     */   public static final String DEFAULT_TOKEN_END = ""@"";
/*     */   
/*     */   public static class Filter
/*     */   {
/*     */     String token;
/*     */     String value;
/*     */     
/*     */     public Filter(String token, String value) {
/* 100 */       this.token = token;
/* 101 */       this.value = value;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public Filter() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 116 */     public void setToken(String token) { this.token = token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 125 */     public void setValue(String value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 134 */     public String getToken() { return this.token; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 143 */     public String getValue() { return this.value; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public class FiltersFile
/*     */   {
/*     */     private final FilterSet this$0;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 157 */     public FiltersFile(FilterSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 166 */     public void setFile(File file) { this.this$0.readFiltersFromFile(file); }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 176 */   private String startOfToken = ""@"";
/* 177 */   private String endOfToken = ""@"";
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 182 */   private Vector filters = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 194 */   protected FilterSet(FilterSet filterset) { this.filters = (Vector)filterset.getFilters().clone(); }
/*     */ 
/*     */   
/*     */   protected Vector getFilters() {
/* 198 */     if (isReference()) {
/* 199 */       return getRef().getFilters();
/*     */     }
/* 201 */     return this.filters;
/*     */   }
/*     */ 
/*     */   
/* 205 */   protected FilterSet getRef() { return (FilterSet)getCheckedRef(FilterSet.class, ""filterset""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Hashtable getFilterHash() {
/* 214 */     int filterSize = getFilters().size();
/* 215 */     Hashtable filterHash = new Hashtable(filterSize);
/* 216 */     for (Enumeration e = getFilters().elements(); e.hasMoreElements(); ) {
/* 217 */       Filter filter = e.nextElement();
/* 218 */       filterHash.put(filter.getToken(), filter.getValue());
/*     */     } 
/* 220 */     return filterHash;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFiltersfile(File filtersFile) throws BuildException {
/* 230 */     if (isReference()) {
/* 231 */       throw tooManyAttributes();
/*     */     }
/* 233 */     readFiltersFromFile(filtersFile);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setBeginToken(String startOfToken) {
/* 242 */     if (isReference()) {
/* 243 */       throw tooManyAttributes();
/*     */     }
/* 245 */     if (startOfToken == null || """".equals(startOfToken)) {
/* 246 */       throw new BuildException(""beginToken must not be empty"");
/*     */     }
/* 248 */     this.startOfToken = startOfToken;
/*     */   }
/*     */   
/*     */   public String getBeginToken() {
/* 252 */     if (isReference()) {
/* 253 */       return getRef().getBeginToken();
/*     */     }
/* 255 */     return this.startOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setEndToken(String endOfToken) {
/* 265 */     if (isReference()) {
/* 266 */       throw tooManyAttributes();
/*     */     }
/* 268 */     if (endOfToken == null || """".equals(endOfToken)) {
/* 269 */       throw new BuildException(""endToken must not be empty"");
/*     */     }
/* 271 */     this.endOfToken = endOfToken;
/*     */   }
/*     */   
/*     */   public String getEndToken() {
/* 275 */     if (isReference()) {
/* 276 */       return getRef().getEndToken();
/*     */     }
/* 278 */     return this.endOfToken;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void readFiltersFromFile(File filtersFile) throws BuildException {
/* 290 */     if (isReference()) {
/* 291 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 294 */     if (filtersFile.isFile()) {
/* 295 */       log(""Reading filters from "" + filtersFile, 3);
/* 296 */       FileInputStream in = null;
/*     */       try {
/* 298 */         Properties props = new Properties();
/* 299 */         in = new FileInputStream(filtersFile);
/* 300 */         props.load(in);
/*     */         
/* 302 */         Enumeration enum = props.propertyNames();
/* 303 */         Vector filters = getFilters();
/* 304 */         while (enum.hasMoreElements()) {
/* 305 */           String strPropName = (String)enum.nextElement();
/* 306 */           String strValue = props.getProperty(strPropName);
/* 307 */           filters.addElement(new Filter(strPropName, strValue));
/*     */         } 
/*     */       } catch (Exception e) {
/* 310 */         throw new BuildException(""Could not read filters from file: "" + filtersFile);
/*     */       } finally {
/*     */         
/* 313 */         if (in != null) {
/*     */           try {
/* 315 */             in.close();
/* 316 */           } catch (IOException ioex) {}
/*     */         }
/*     */       } 
/*     */     } else {
/*     */       
/* 321 */       throw new BuildException(""Must specify a file not a directory in the filtersfile attribute:"" + filtersFile);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String line) {
/* 334 */     String beginToken = getBeginToken();
/* 335 */     String endToken = getEndToken();
/* 336 */     int index = line.indexOf(beginToken);
/*     */     
/* 338 */     if (index > -1) {
/* 339 */       Hashtable tokens = getFilterHash();
/*     */       try {
/* 341 */         StringBuffer b = new StringBuffer();
/* 342 */         int i = 0;
/* 343 */         String token = null;
/* 344 */         String value = null;
/*     */         
/*     */         do {
/* 347 */           int endIndex = line.indexOf(endToken, index + beginToken.length() + 1);
/*     */           
/* 349 */           if (endIndex == -1) {
/*     */             break;
/*     */           }
/* 352 */           token = line.substring(index + beginToken.length(), endIndex);
/*     */           
/* 354 */           b.append(line.substring(i, index));
/* 355 */           if (tokens.containsKey(token)) {
/* 356 */             value = (String)tokens.get(token);
/* 357 */             log(""Replacing: "" + beginToken + token + endToken + "" -> "" + value, 3);
/*     */             
/* 359 */             b.append(value);
/* 360 */             i = index + beginToken.length() + token.length() + endToken.length();
/*     */           }
/*     */           else {
/*     */             
/* 364 */             b.append(beginToken);
/* 365 */             i = index + beginToken.length();
/*     */           } 
/* 367 */         } while ((index = line.indexOf(beginToken, i)) > -1);
/*     */         
/* 369 */         b.append(line.substring(i));
/* 370 */         return b.toString();
/*     */       } catch (StringIndexOutOfBoundsException e) {
/* 372 */         return line;
/*     */       } 
/*     */     } 
/* 375 */     return line;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(Filter filter) {
/* 385 */     if (isReference()) {
/* 386 */       throw noChildrenAllowed();
/*     */     }
/* 388 */     this.filters.addElement(filter);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FiltersFile createFiltersfile() {
/* 397 */     if (isReference()) {
/* 398 */       throw noChildrenAllowed();
/*     */     }
/* 400 */     return new FiltersFile(this);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilter(String token, String value) {
/* 410 */     if (isReference()) {
/* 411 */       throw noChildrenAllowed();
/*     */     }
/* 413 */     this.filters.addElement(new Filter(token, value));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilterSet(FilterSet filterSet) {
/* 422 */     if (isReference()) {
/* 423 */       throw noChildrenAllowed();
/*     */     }
/* 425 */     for (Enumeration e = filterSet.getFilters().elements(); e.hasMoreElements();) {
/* 426 */       this.filters.addElement(e.nextElement());
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 436 */   public boolean hasFilters() { return (getFilters().size() > 0); }
/*     */ 
/*     */   
/*     */   public Object clone() throws BuildException {
/* 440 */     if (isReference()) {
/* 441 */       return new FilterSet(getRef());
/*     */     }
/* 443 */     return new FilterSet(this);
/*     */   }
/*     */   
/*     */   public FilterSet() {}
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FilterSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FilterSetCollection,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilterSetCollection
/*     */ {
/*  80 */   private Vector filterSets = new Vector();
/*     */ 
/*     */   
/*     */   public FilterSetCollection() {}
/*     */ 
/*     */   
/*  86 */   public FilterSetCollection(FilterSet filterSet) { addFilterSet(filterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public void addFilterSet(FilterSet filterSet) { this.filterSets.addElement(filterSet); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String replaceTokens(String line) {
/* 102 */     String replacedLine = line;
/* 103 */     for (Enumeration e = this.filterSets.elements(); e.hasMoreElements(); ) {
/* 104 */       FilterSet filterSet = e.nextElement();
/* 105 */       replacedLine = filterSet.replaceTokens(replacedLine);
/*     */     } 
/* 107 */     return replacedLine;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasFilters() {
/* 116 */     for (Enumeration e = this.filterSets.elements(); e.hasMoreElements(); ) {
/* 117 */       FilterSet filterSet = e.nextElement();
/* 118 */       if (filterSet.hasFilters()) {
/* 119 */         return true;
/*     */       }
/*     */     } 
/* 122 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FilterSetCollection.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.FlexInteger,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FlexInteger
/*    */ {
/*    */   private Integer value;
/*    */   
/* 72 */   public FlexInteger(String value) { this.value = Integer.decode(value); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 79 */   public int intValue() { return this.value.intValue(); }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 86 */   public String toString() { return this.value.toString(); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\FlexInteger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Mapper,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Properties;
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Mapper
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*  72 */   protected MapperType type = null;
/*     */   
/*     */   protected String classname;
/*     */   
/*     */   protected Path classpath;
/*     */   
/*     */   protected String from;
/*     */   protected String to;
/*     */   
/*     */   public void setType(MapperType type) {
/*  82 */     if (isReference()) {
/*  83 */       throw tooManyAttributes();
/*     */     }
/*  85 */     this.type = type;
/*     */   } public void setClassname(String classname) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*  88 */     this.classname = classname; } public Mapper(Project p) { this.classname = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 100 */     this.classpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 140 */     this.from = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 152 */     this.to = null; setProject(p); }
/*     */   public void setClasspath(Path classpath) { if (isReference())
/*     */       throw tooManyAttributes();  if (this.classpath == null) {
/*     */       this.classpath = classpath;
/*     */     } else {
/*     */       this.classpath.append(classpath);
/* 158 */     }  } public void setTo(String to) { if (isReference()) {
/* 159 */       throw tooManyAttributes();
/*     */     }
/* 161 */     this.to = to; } public Path createClasspath() { if (isReference())
/*     */       throw noChildrenAllowed();  if (this.classpath == null)
/*     */       this.classpath = new Path(getProject()); 
/*     */     return this.classpath.createPath(); }
/*     */   public void setClasspathRef(Reference r) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     createClasspath().setRefid(r); }
/*     */   public void setFrom(String from) { if (isReference())
/*     */       throw tooManyAttributes(); 
/*     */     this.from = from; }
/* 171 */   public void setRefid(Reference r) throws BuildException { if (this.type != null || this.from != null || this.to != null) {
/* 172 */       throw tooManyAttributes();
/*     */     }
/* 174 */     super.setRefid(r); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileNameMapper getImplementation() throws BuildException {
/* 181 */     if (isReference()) {
/* 182 */       return getRef().getImplementation();
/*     */     }
/*     */     
/* 185 */     if (this.type == null && this.classname == null) {
/* 186 */       throw new BuildException(""one of the attributes type or classname is required"");
/*     */     }
/*     */     
/* 189 */     if (this.type != null && this.classname != null) {
/* 190 */       throw new BuildException(""must not specify both type and classname attribute"");
/*     */     }
/*     */     
/*     */     try {
/* 194 */       if (this.type != null) {
/* 195 */         this.classname = this.type.getImplementation();
/*     */       }
/*     */       
/* 198 */       Class c = null;
/* 199 */       if (this.classpath == null) {
/* 200 */         c = Class.forName(this.classname);
/*     */       } else {
/* 202 */         AntClassLoader al = new AntClassLoader(getProject(), this.classpath);
/*     */         
/* 204 */         c = al.loadClass(this.classname);
/* 205 */         AntClassLoader.initializeClass(c);
/*     */       } 
/*     */       
/* 208 */       FileNameMapper m = (FileNameMapper)c.newInstance();
/* 209 */       m.setFrom(this.from);
/* 210 */       m.setTo(this.to);
/* 211 */       return m;
/*     */     } catch (BuildException be) {
/* 213 */       throw be;
/*     */     } catch (Throwable t) {
/* 215 */       throw new BuildException(t);
/*     */     } finally {
/* 217 */       if (this.type != null) {
/* 218 */         this.classname = null;
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Mapper getRef() {
/* 228 */     if (!this.checked) {
/* 229 */       Stack stk = new Stack();
/* 230 */       stk.push(this);
/* 231 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 234 */     Object o = this.ref.getReferencedObject(getProject());
/* 235 */     if (!(o instanceof Mapper)) {
/* 236 */       String msg = this.ref.getRefId() + "" doesn't denote a mapper"";
/* 237 */       throw new BuildException(msg);
/*     */     } 
/* 239 */     return (Mapper)o;
/*     */   }
/*     */ 
/*     */   
/*     */   public static class MapperType
/*     */     extends EnumeratedAttribute
/*     */   {
/*     */     private Properties implementations;
/*     */ 
/*     */     
/*     */     public MapperType() {
/* 250 */       this.implementations = new Properties();
/* 251 */       this.implementations.put(""identity"", ""org.apache.tools.ant.util.IdentityMapper"");
/*     */       
/* 253 */       this.implementations.put(""flatten"", ""org.apache.tools.ant.util.FlatFileNameMapper"");
/*     */       
/* 255 */       this.implementations.put(""glob"", ""org.apache.tools.ant.util.GlobPatternMapper"");
/*     */       
/* 257 */       this.implementations.put(""merge"", ""org.apache.tools.ant.util.MergingMapper"");
/*     */       
/* 259 */       this.implementations.put(""regexp"", ""org.apache.tools.ant.util.RegexpPatternMapper"");
/*     */       
/* 261 */       this.implementations.put(""package"", ""org.apache.tools.ant.util.PackageNameMapper"");
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 266 */     public String[] getValues() { return new String[] { ""identity"", ""flatten"", ""glob"", ""merge"", ""regexp"", ""package"" }; }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 271 */     public String getImplementation() { return this.implementations.getProperty(getValue()); }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Mapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Parameter,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class Parameter
/*    */ {
/* 62 */   private String name = null;
/* 63 */   private String type = null;
/* 64 */   private String value = null;
/*    */ 
/*    */   
/* 67 */   public final void setName(String name) { this.name = name; }
/*    */ 
/*    */ 
/*    */   
/* 71 */   public final void setType(String type) { this.type = type; }
/*    */ 
/*    */ 
/*    */   
/* 75 */   public final void setValue(String value) { this.value = value; }
/*    */ 
/*    */ 
/*    */   
/* 79 */   public final String getName() { return this.name; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public final String getType() { return this.type; }
/*    */ 
/*    */ 
/*    */   
/* 87 */   public final String getValue() { return this.value; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Parameter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Parameterizable,"package org.apache.tools.ant.types;
public interface Parameterizable {
  void setParameters(Parameter[] paramArrayOfParameter);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Parameterizable.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Path,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Locale;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.PathTokenizer;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.JavaEnvUtils;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Path
/*     */   extends DataType
/*     */   implements Cloneable
/*     */ {
/*     */   private Vector elements;
/* 105 */   public static Path systemClasspath = new Path(null, System.getProperty(""java.class.path""));
/*     */   
/*     */   public class PathElement
/*     */   {
/*     */     private String[] parts;
/*     */     private final Path this$0;
/*     */     
/* 112 */     public PathElement(Path this$0) { this.this$0 = this$0; }
/*     */ 
/*     */ 
/*     */     
/* 116 */     public void setLocation(File loc) { this.parts = new String[] { Path.translateFile(loc.getAbsolutePath()) }; }
/*     */ 
/*     */ 
/*     */     
/* 120 */     public void setPath(String path) { this.parts = Path.translatePath(this.this$0.getProject(), path); }
/*     */ 
/*     */ 
/*     */     
/* 124 */     public String[] getParts() { return this.parts; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path(Project p, String path) {
/* 133 */     this(p);
/* 134 */     createPathElement().setPath(path);
/*     */   }
/*     */   
/*     */   public Path(Project project) {
/* 138 */     setProject(project);
/* 139 */     this.elements = new Vector();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLocation(File location) throws BuildException {
/* 148 */     if (isReference()) {
/* 149 */       throw tooManyAttributes();
/*     */     }
/* 151 */     createPathElement().setLocation(location);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPath(String path) throws BuildException {
/* 160 */     if (isReference()) {
/* 161 */       throw tooManyAttributes();
/*     */     }
/* 163 */     createPathElement().setPath(path);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 173 */     if (!this.elements.isEmpty()) {
/* 174 */       throw tooManyAttributes();
/*     */     }
/* 176 */     this.elements.addElement(r);
/* 177 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PathElement createPathElement() throws BuildException {
/* 184 */     if (isReference()) {
/* 185 */       throw noChildrenAllowed();
/*     */     }
/* 187 */     PathElement pe = new PathElement(this);
/* 188 */     this.elements.addElement(pe);
/* 189 */     return pe;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFileset(FileSet fs) throws BuildException {
/* 196 */     if (isReference()) {
/* 197 */       throw noChildrenAllowed();
/*     */     }
/* 199 */     this.elements.addElement(fs);
/* 200 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addFilelist(FileList fl) throws BuildException {
/* 207 */     if (isReference()) {
/* 208 */       throw noChildrenAllowed();
/*     */     }
/* 210 */     this.elements.addElement(fl);
/* 211 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDirset(DirSet dset) throws BuildException {
/* 218 */     if (isReference()) {
/* 219 */       throw noChildrenAllowed();
/*     */     }
/* 221 */     this.elements.addElement(dset);
/* 222 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createPath() throws BuildException {
/* 229 */     if (isReference()) {
/* 230 */       throw noChildrenAllowed();
/*     */     }
/* 232 */     Path p = new Path(getProject());
/* 233 */     this.elements.addElement(p);
/* 234 */     this.checked = false;
/* 235 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(Path other) {
/* 242 */     if (other == null) {
/*     */       return;
/*     */     }
/* 245 */     String[] l = other.list();
/* 246 */     for (int i = 0; i < l.length; i++) {
/* 247 */       if (this.elements.indexOf(l[i]) == -1) {
/* 248 */         this.elements.addElement(l[i]);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addExisting(Path source) {
/* 260 */     String[] list = source.list();
/* 261 */     for (int i = 0; i < list.length; i++) {
/* 262 */       File f = null;
/* 263 */       if (getProject() != null) {
/* 264 */         f = getProject().resolveFile(list[i]);
/*     */       } else {
/* 266 */         f = new File(list[i]);
/*     */       } 
/*     */       
/* 269 */       if (f.exists()) {
/* 270 */         setLocation(f);
/*     */       } else {
/* 272 */         log(""dropping "" + f + "" from path as it doesn't exist"", 3);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] list() {
/* 283 */     if (!this.checked) {
/*     */       
/* 285 */       Stack stk = new Stack();
/* 286 */       stk.push(this);
/* 287 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 290 */     Vector result = new Vector(2 * this.elements.size());
/* 291 */     for (int i = 0; i < this.elements.size(); i++) {
/* 292 */       Object o = this.elements.elementAt(i);
/* 293 */       if (o instanceof Reference) {
/* 294 */         Reference r = (Reference)o;
/* 295 */         o = r.getReferencedObject(getProject());
/*     */         
/* 297 */         if (!(o instanceof Path)) {
/* 298 */           String msg = r.getRefId() + "" doesn't denote a path"";
/* 299 */           throw new BuildException(msg);
/*     */         } 
/*     */       } 
/*     */       
/* 303 */       if (o instanceof String) {
/*     */         
/* 305 */         addUnlessPresent(result, (String)o);
/* 306 */       } else if (o instanceof PathElement) {
/* 307 */         String[] parts = ((PathElement)o).getParts();
/* 308 */         if (parts == null) {
/* 309 */           throw new BuildException(""You must either set location or path on <pathelement>"");
/*     */         }
/*     */         
/* 312 */         for (int j = 0; j < parts.length; j++) {
/* 313 */           addUnlessPresent(result, parts[j]);
/*     */         }
/* 315 */       } else if (o instanceof Path) {
/* 316 */         Path p = (Path)o;
/* 317 */         if (p.getProject() == null) {
/* 318 */           p.setProject(getProject());
/*     */         }
/* 320 */         String[] parts = p.list();
/* 321 */         for (int j = 0; j < parts.length; j++) {
/* 322 */           addUnlessPresent(result, parts[j]);
/*     */         }
/* 324 */       } else if (o instanceof DirSet) {
/* 325 */         DirSet dset = (DirSet)o;
/* 326 */         DirectoryScanner ds = dset.getDirectoryScanner(getProject());
/* 327 */         String[] s = ds.getIncludedDirectories();
/* 328 */         File dir = dset.getDir(getProject());
/* 329 */         addUnlessPresent(result, dir, s);
/* 330 */       } else if (o instanceof FileSet) {
/* 331 */         FileSet fs = (FileSet)o;
/* 332 */         DirectoryScanner ds = fs.getDirectoryScanner(getProject());
/* 333 */         String[] s = ds.getIncludedFiles();
/* 334 */         File dir = fs.getDir(getProject());
/* 335 */         addUnlessPresent(result, dir, s);
/* 336 */       } else if (o instanceof FileList) {
/* 337 */         FileList fl = (FileList)o;
/* 338 */         String[] s = fl.getFiles(getProject());
/* 339 */         File dir = fl.getDir(getProject());
/* 340 */         addUnlessPresent(result, dir, s);
/*     */       } 
/*     */     } 
/* 343 */     String[] res = new String[result.size()];
/* 344 */     result.copyInto((Object[])res);
/* 345 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 355 */     String[] list = list();
/*     */ 
/*     */     
/* 358 */     if (list.length == 0) {
/* 359 */       return """";
/*     */     }
/*     */ 
/*     */     
/* 363 */     StringBuffer result = new StringBuffer(list[0].toString());
/* 364 */     for (int i = 1; i < list.length; i++) {
/* 365 */       result.append(File.pathSeparatorChar);
/* 366 */       result.append(list[i]);
/*     */     } 
/*     */     
/* 369 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String[] translatePath(Project project, String source) {
/* 376 */     Vector result = new Vector();
/* 377 */     if (source == null) {
/* 378 */       return new String[0];
/*     */     }
/*     */     
/* 381 */     PathTokenizer tok = new PathTokenizer(source);
/* 382 */     StringBuffer element = new StringBuffer();
/* 383 */     while (tok.hasMoreTokens()) {
/* 384 */       element.setLength(0);
/* 385 */       String pathElement = tok.nextToken();
/*     */       try {
/* 387 */         element.append(resolveFile(project, pathElement));
/*     */       } catch (BuildException e) {
/* 389 */         project.log(""Dropping path element "" + pathElement + "" as it is not valid relative to the project"", 3);
/*     */       } 
/*     */ 
/*     */       
/* 393 */       for (int i = 0; i < element.length(); i++) {
/* 394 */         translateFileSep(element, i);
/*     */       }
/* 396 */       result.addElement(element.toString());
/*     */     } 
/* 398 */     String[] res = new String[result.size()];
/* 399 */     result.copyInto((Object[])res);
/* 400 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String translateFile(String source) {
/* 408 */     if (source == null) {
/* 409 */       return """";
/*     */     }
/*     */     
/* 412 */     StringBuffer result = new StringBuffer(source);
/* 413 */     for (int i = 0; i < result.length(); i++) {
/* 414 */       translateFileSep(result, i);
/*     */     }
/*     */     
/* 417 */     return result.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static boolean translateFileSep(StringBuffer buffer, int pos) {
/* 426 */     if (buffer.charAt(pos) == '/' || buffer.charAt(pos) == '\\') {
/* 427 */       buffer.setCharAt(pos, File.separatorChar);
/* 428 */       return true;
/*     */     } 
/* 430 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 437 */   public int size() { return (list()).length; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object clone() {
/* 444 */     Path p = new Path(getProject());
/* 445 */     p.append(this);
/* 446 */     return p;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void dieOnCircularReference(Stack stk, Project p) throws BuildException {
/* 456 */     if (this.checked) {
/*     */       return;
/*     */     }
/*     */     
/* 460 */     Enumeration enum = this.elements.elements();
/* 461 */     while (enum.hasMoreElements()) {
/* 462 */       Object o = enum.nextElement();
/* 463 */       if (o instanceof Reference) {
/* 464 */         o = ((Reference)o).getReferencedObject(p);
/*     */       }
/*     */       
/* 467 */       if (o instanceof DataType) {
/* 468 */         if (stk.contains(o)) {
/* 469 */           throw circularReference();
/*     */         }
/* 471 */         stk.push(o);
/* 472 */         ((DataType)o).dieOnCircularReference(stk, p);
/* 473 */         stk.pop();
/*     */       } 
/*     */     } 
/*     */     
/* 477 */     this.checked = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static String resolveFile(Project project, String relativeName) {
/* 486 */     if (project != null) {
/* 487 */       File f = project.resolveFile(relativeName);
/* 488 */       return f.getAbsolutePath();
/*     */     } 
/* 490 */     return relativeName;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addUnlessPresent(Vector v, String s) {
/* 497 */     if (v.indexOf(s) == -1) {
/* 498 */       v.addElement(s);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void addUnlessPresent(Vector v, File dir, String[] s) {
/* 507 */     for (int j = 0; j < s.length; j++) {
/* 508 */       File d = new File(dir, s[j]);
/* 509 */       String absolutePath = d.getAbsolutePath();
/* 510 */       addUnlessPresent(v, translateFile(absolutePath));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 520 */   public Path concatSystemClasspath() { return concatSystemClasspath(""last""); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path concatSystemClasspath(String defValue) {
/* 530 */     Path result = new Path(getProject());
/*     */     
/* 532 */     String order = defValue;
/* 533 */     if (getProject() != null) {
/* 534 */       String o = getProject().getProperty(""build.sysclasspath"");
/* 535 */       if (o != null) {
/* 536 */         order = o;
/*     */       }
/*     */     } 
/*     */     
/* 540 */     if (order.equals(""only"")) {
/*     */       
/* 542 */       result.addExisting(systemClasspath);
/*     */     }
/* 544 */     else if (order.equals(""first"")) {
/*     */       
/* 546 */       result.addExisting(systemClasspath);
/* 547 */       result.addExisting(this);
/*     */     }
/* 549 */     else if (order.equals(""ignore"")) {
/*     */       
/* 551 */       result.addExisting(this);
/*     */     }
/*     */     else {
/*     */       
/* 555 */       if (!order.equals(""last"")) {
/* 556 */         log(""invalid value for build.sysclasspath: "" + order, 1);
/*     */       }
/*     */ 
/*     */       
/* 560 */       result.addExisting(this);
/* 561 */       result.addExisting(systemClasspath);
/*     */     } 
/*     */ 
/*     */     
/* 565 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addJavaRuntime() {
/* 573 */     if (System.getProperty(""java.vendor"").toLowerCase(Locale.US).indexOf(""microsoft"") >= 0) {
/*     */       
/* 575 */       FileSet msZipFiles = new FileSet();
/* 576 */       msZipFiles.setDir(new File(System.getProperty(""java.home"") + File.separator + ""Packages""));
/*     */       
/* 578 */       msZipFiles.setIncludes(""*.ZIP"");
/* 579 */       addFileset(msZipFiles);
/* 580 */     } else if (""Kaffe"".equals(System.getProperty(""java.vm.name""))) {
/* 581 */       FileSet kaffeJarFiles = new FileSet();
/* 582 */       kaffeJarFiles.setDir(new File(System.getProperty(""java.home"") + File.separator + ""share"" + File.separator + ""kaffe""));
/*     */ 
/*     */ 
/*     */       
/* 586 */       kaffeJarFiles.setIncludes(""*.jar"");
/* 587 */       addFileset(kaffeJarFiles);
/* 588 */     } else if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 589 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""classes.zip""));
/*     */ 
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */       
/* 596 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 602 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + ""jre"" + File.separator + ""lib"" + File.separator + ""rt.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 609 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""classes.jar""));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 614 */       addExisting(new Path(null, System.getProperty(""java.home"") + File.separator + "".."" + File.separator + ""Classes"" + File.separator + ""ui.jar""));
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addExtdirs(Path extdirs) {
/* 630 */     if (extdirs == null) {
/* 631 */       String extProp = System.getProperty(""java.ext.dirs"");
/* 632 */       if (extProp != null) {
/* 633 */         extdirs = new Path(getProject(), extProp);
/*     */       } else {
/*     */         return;
/*     */       } 
/*     */     } 
/*     */     
/* 639 */     String[] dirs = extdirs.list();
/* 640 */     for (int i = 0; i < dirs.length; i++) {
/* 641 */       File dir = getProject().resolveFile(dirs[i]);
/* 642 */       if (dir.exists() && dir.isDirectory()) {
/* 643 */         FileSet fs = new FileSet();
/* 644 */         fs.setDir(dir);
/* 645 */         fs.setIncludes(""*"");
/* 646 */         addFileset(fs);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Path.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.PatternSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PatternSet
/*     */   extends DataType
/*     */ {
/*  83 */   private Vector includeList = new Vector();
/*  84 */   private Vector excludeList = new Vector();
/*  85 */   private Vector includesFileList = new Vector();
/*  86 */   private Vector excludesFileList = new Vector();
/*     */   
/*     */   public class NameEntry
/*     */   {
/*     */     private String name;
/*     */     private String ifCond;
/*     */     
/*  93 */     public NameEntry(PatternSet this$0) { this.this$0 = this$0; }
/*     */ 
/*     */     
/*     */     private String unlessCond;
/*     */     private final PatternSet this$0;
/*     */     
/*  99 */     public void setName(String name) { this.name = name; }
/*     */ 
/*     */ 
/*     */     
/* 103 */     public void setIf(String cond) { this.ifCond = cond; }
/*     */ 
/*     */ 
/*     */     
/* 107 */     public void setUnless(String cond) { this.unlessCond = cond; }
/*     */ 
/*     */ 
/*     */     
/* 111 */     public String getName() { return this.name; }
/*     */ 
/*     */ 
/*     */     
/* 115 */     public String evalName(Project p) { return valid(p) ? this.name : null; }
/*     */ 
/*     */     
/*     */     private boolean valid(Project p) {
/* 119 */       if (this.ifCond != null && p.getProperty(this.ifCond) == null)
/* 120 */         return false; 
/* 121 */       if (this.unlessCond != null && p.getProperty(this.unlessCond) != null) {
/* 122 */         return false;
/*     */       }
/* 124 */       return true;
/*     */     }
/*     */     
/*     */     public String toString() {
/* 128 */       StringBuffer buf = new StringBuffer(this.name);
/* 129 */       if (this.ifCond != null || this.unlessCond != null) {
/* 130 */         buf.append("":"");
/* 131 */         String connector = """";
/*     */         
/* 133 */         if (this.ifCond != null) {
/* 134 */           buf.append(""if->"");
/* 135 */           buf.append(this.ifCond);
/* 136 */           connector = "";"";
/*     */         } 
/* 138 */         if (this.unlessCond != null) {
/* 139 */           buf.append(connector);
/* 140 */           buf.append(""unless->"");
/* 141 */           buf.append(this.unlessCond);
/*     */         } 
/*     */       } 
/*     */       
/* 145 */       return buf.toString();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 161 */     if (!this.includeList.isEmpty() || !this.excludeList.isEmpty()) {
/* 162 */       throw tooManyAttributes();
/*     */     }
/* 164 */     super.setRefid(r);
/*     */   }
/*     */   
/*     */   public void addConfiguredPatternset(PatternSet p) {
/* 168 */     if (isReference()) {
/* 169 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 172 */     String[] nestedIncludes = p.getIncludePatterns(getProject());
/* 173 */     String[] nestedExcludes = p.getExcludePatterns(getProject());
/*     */     
/* 175 */     if (nestedIncludes != null) {
/* 176 */       for (int i = 0; i < nestedIncludes.length; i++) {
/* 177 */         createInclude().setName(nestedIncludes[i]);
/*     */       }
/*     */     }
/*     */     
/* 181 */     if (nestedExcludes != null) {
/* 182 */       for (int i = 0; i < nestedExcludes.length; i++) {
/* 183 */         createExclude().setName(nestedExcludes[i]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createInclude() {
/* 192 */     if (isReference()) {
/* 193 */       throw noChildrenAllowed();
/*     */     }
/* 195 */     return addPatternToList(this.includeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createIncludesFile() {
/* 202 */     if (isReference()) {
/* 203 */       throw noChildrenAllowed();
/*     */     }
/* 205 */     return addPatternToList(this.includesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExclude() {
/* 212 */     if (isReference()) {
/* 213 */       throw noChildrenAllowed();
/*     */     }
/* 215 */     return addPatternToList(this.excludeList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public NameEntry createExcludesFile() {
/* 222 */     if (isReference()) {
/* 223 */       throw noChildrenAllowed();
/*     */     }
/* 225 */     return addPatternToList(this.excludesFileList);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludes(String includes) {
/* 235 */     if (isReference()) {
/* 236 */       throw tooManyAttributes();
/*     */     }
/* 238 */     if (includes != null && includes.length() > 0) {
/* 239 */       StringTokenizer tok = new StringTokenizer(includes, "", "", false);
/* 240 */       while (tok.hasMoreTokens()) {
/* 241 */         createInclude().setName(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludes(String excludes) {
/* 253 */     if (isReference()) {
/* 254 */       throw tooManyAttributes();
/*     */     }
/* 256 */     if (excludes != null && excludes.length() > 0) {
/* 257 */       StringTokenizer tok = new StringTokenizer(excludes, "", "", false);
/* 258 */       while (tok.hasMoreTokens()) {
/* 259 */         createExclude().setName(tok.nextToken());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private NameEntry addPatternToList(Vector list) {
/* 268 */     NameEntry result = new NameEntry(this);
/* 269 */     list.addElement(result);
/* 270 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIncludesfile(File includesFile) throws BuildException {
/* 279 */     if (isReference()) {
/* 280 */       throw tooManyAttributes();
/*     */     }
/* 282 */     createIncludesFile().setName(includesFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setExcludesfile(File excludesFile) throws BuildException {
/* 291 */     if (isReference()) {
/* 292 */       throw tooManyAttributes();
/*     */     }
/* 294 */     createExcludesFile().setName(excludesFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readPatterns(File patternfile, Vector patternlist, Project p) throws BuildException {
/* 304 */     BufferedReader patternReader = null;
/*     */     
/*     */     try {
/* 307 */       patternReader = new BufferedReader(new FileReader(patternfile));
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 312 */       String line = patternReader.readLine();
/* 313 */       while (line != null) {
/* 314 */         if (line.length() > 0) {
/* 315 */           line = p.replaceProperties(line);
/* 316 */           addPatternToList(patternlist).setName(line);
/*     */         } 
/* 318 */         line = patternReader.readLine();
/*     */       } 
/*     */     } catch (IOException ioe) {
/* 321 */       String msg = ""An error occured while reading from pattern file: "" + patternfile;
/*     */       
/* 323 */       throw new BuildException(msg, ioe);
/*     */     } finally {
/* 325 */       if (null != patternReader) {
/*     */         try {
/* 327 */           patternReader.close();
/* 328 */         } catch (IOException ioe) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void append(PatternSet other, Project p) {
/* 339 */     if (isReference()) {
/* 340 */       throw new BuildException(""Cannot append to a reference"");
/*     */     }
/*     */     
/* 343 */     String[] incl = other.getIncludePatterns(p);
/* 344 */     if (incl != null) {
/* 345 */       for (int i = 0; i < incl.length; i++) {
/* 346 */         createInclude().setName(incl[i]);
/*     */       }
/*     */     }
/*     */     
/* 350 */     String[] excl = other.getExcludePatterns(p);
/* 351 */     if (excl != null) {
/* 352 */       for (int i = 0; i < excl.length; i++) {
/* 353 */         createExclude().setName(excl[i]);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludePatterns(Project p) {
/* 362 */     if (isReference()) {
/* 363 */       return getRef(p).getIncludePatterns(p);
/*     */     }
/* 365 */     readFiles(p);
/* 366 */     return makeArray(this.includeList, p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getExcludePatterns(Project p) {
/* 374 */     if (isReference()) {
/* 375 */       return getRef(p).getExcludePatterns(p);
/*     */     }
/* 377 */     readFiles(p);
/* 378 */     return makeArray(this.excludeList, p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   boolean hasPatterns(Project p) {
/* 386 */     if (isReference()) {
/* 387 */       return getRef(p).hasPatterns(p);
/*     */     }
/* 389 */     return (this.includesFileList.size() > 0 || this.excludesFileList.size() > 0 || this.includeList.size() > 0 || this.excludeList.size() > 0);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private PatternSet getRef(Project p) {
/* 399 */     if (!this.checked) {
/* 400 */       Stack stk = new Stack();
/* 401 */       stk.push(this);
/* 402 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 405 */     Object o = this.ref.getReferencedObject(p);
/* 406 */     if (!(o instanceof PatternSet)) {
/* 407 */       String msg = this.ref.getRefId() + "" doesn't denote a patternset"";
/* 408 */       throw new BuildException(msg);
/*     */     } 
/* 410 */     return (PatternSet)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String[] makeArray(Vector list, Project p) {
/* 418 */     if (list.size() == 0) {
/* 419 */       return null;
/*     */     }
/*     */     
/* 422 */     Vector tmpNames = new Vector();
/* 423 */     for (Enumeration e = list.elements(); e.hasMoreElements(); ) {
/* 424 */       NameEntry ne = e.nextElement();
/* 425 */       String pattern = ne.evalName(p);
/* 426 */       if (pattern != null && pattern.length() > 0) {
/* 427 */         tmpNames.addElement(pattern);
/*     */       }
/*     */     } 
/*     */     
/* 431 */     String[] result = new String[tmpNames.size()];
/* 432 */     tmpNames.copyInto((Object[])result);
/* 433 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void readFiles(Project p) {
/* 440 */     if (this.includesFileList.size() > 0) {
/* 441 */       Enumeration e = this.includesFileList.elements();
/* 442 */       while (e.hasMoreElements()) {
/* 443 */         NameEntry ne = e.nextElement();
/* 444 */         String fileName = ne.evalName(p);
/* 445 */         if (fileName != null) {
/* 446 */           File inclFile = p.resolveFile(fileName);
/* 447 */           if (!inclFile.exists()) {
/* 448 */             throw new BuildException(""Includesfile "" + inclFile.getAbsolutePath() + "" not found."");
/*     */           }
/*     */ 
/*     */           
/* 452 */           readPatterns(inclFile, this.includeList, p);
/*     */         } 
/*     */       } 
/* 455 */       this.includesFileList.removeAllElements();
/*     */     } 
/*     */     
/* 458 */     if (this.excludesFileList.size() > 0) {
/* 459 */       Enumeration e = this.excludesFileList.elements();
/* 460 */       while (e.hasMoreElements()) {
/* 461 */         NameEntry ne = e.nextElement();
/* 462 */         String fileName = ne.evalName(p);
/* 463 */         if (fileName != null) {
/* 464 */           File exclFile = p.resolveFile(fileName);
/* 465 */           if (!exclFile.exists()) {
/* 466 */             throw new BuildException(""Excludesfile "" + exclFile.getAbsolutePath() + "" not found."");
/*     */           }
/*     */ 
/*     */           
/* 470 */           readPatterns(exclFile, this.excludeList, p);
/*     */         } 
/*     */       } 
/* 473 */       this.excludesFileList.removeAllElements();
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/* 478 */   public String toString() { return ""patternSet{ includes: "" + this.includeList + "" excludes: "" + this.excludeList + "" }""; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\PatternSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Reference,"/*    */ package org.apache.tools.ant.types;
/*    */ 
/*    */ import org.apache.tools.ant.BuildException;
/*    */ import org.apache.tools.ant.Project;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class Reference
/*    */ {
/*    */   private String refid;
/*    */   
/*    */   public Reference() {}
/*    */   
/*    */   public Reference(String id) {
/* 74 */     this();
/* 75 */     setRefId(id);
/*    */   }
/*    */ 
/*    */   
/* 79 */   public void setRefId(String id) { this.refid = id; }
/*    */ 
/*    */ 
/*    */   
/* 83 */   public String getRefId() { return this.refid; }
/*    */ 
/*    */   
/*    */   public Object getReferencedObject(Project project) throws BuildException {
/* 87 */     if (this.refid == null) {
/* 88 */       throw new BuildException(""No reference specified"");
/*    */     }
/*    */     
/* 91 */     Object o = project.getReference(this.refid);
/* 92 */     if (o == null) {
/* 93 */       throw new BuildException(""Reference "" + this.refid + "" not found."");
/*    */     }
/* 95 */     return o;
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Reference.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.RegularExpression,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.util.regexp.Regexp;
/*     */ import org.apache.tools.ant.util.regexp.RegexpFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegularExpression
/*     */   extends DataType
/*     */ {
/*     */   public static final String DATA_TYPE_NAME = ""regexp"";
/* 104 */   private static final RegexpFactory factory = new RegexpFactory();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 109 */   private Regexp regexp = factory.newRegexp();
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setPattern(String pattern) { this.regexp.setPattern(pattern); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getPattern(Project p) {
/* 121 */     if (isReference()) {
/* 122 */       return getRef(p).getPattern(p);
/*     */     }
/*     */     
/* 125 */     return this.regexp.getPattern();
/*     */   }
/*     */   
/*     */   public Regexp getRegexp(Project p) {
/* 129 */     if (isReference()) {
/* 130 */       return getRef(p).getRegexp(p);
/*     */     }
/* 132 */     return this.regexp;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RegularExpression getRef(Project p) {
/* 140 */     if (!this.checked) {
/* 141 */       Stack stk = new Stack();
/* 142 */       stk.push(this);
/* 143 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */ 
/*     */     
/* 147 */     Object o = this.ref.getReferencedObject(p);
/* 148 */     if (!(o instanceof RegularExpression)) {
/* 149 */       String msg = this.ref.getRefId() + "" doesn't denote a "" + ""regexp"";
/*     */       
/* 151 */       throw new BuildException(msg);
/*     */     } 
/* 153 */     return (RegularExpression)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\RegularExpression.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.Substitution,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Substitution
/*     */   extends DataType
/*     */ {
/*     */   public static final String DATA_TYPE_NAME = ""substitition"";
/*  80 */   private String expression = null;
/*     */ 
/*     */ 
/*     */   
/*  84 */   public void setExpression(String expression) { this.expression = expression; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getExpression(Project p) {
/*  92 */     if (isReference()) {
/*  93 */       return getRef(p).getExpression(p);
/*     */     }
/*     */     
/*  96 */     return this.expression;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Substitution getRef(Project p) {
/* 104 */     if (!this.checked) {
/* 105 */       Stack stk = new Stack();
/* 106 */       stk.push(this);
/* 107 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */ 
/*     */     
/* 111 */     Object o = this.ref.getReferencedObject(p);
/* 112 */     if (!(o instanceof Substitution)) {
/* 113 */       String msg = this.ref.getRefId() + "" doesn't denote a substitution"";
/* 114 */       throw new BuildException(msg);
/*     */     } 
/* 116 */     return (Substitution)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\Substitution.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.XMLCatalog,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Stack;
/*     */ import java.util.Vector;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import javax.xml.transform.Source;
/*     */ import javax.xml.transform.TransformerException;
/*     */ import javax.xml.transform.URIResolver;
/*     */ import javax.xml.transform.sax.SAXSource;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.FileUtils;
/*     */ import org.xml.sax.EntityResolver;
/*     */ import org.xml.sax.InputSource;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.XMLReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class XMLCatalog
/*     */   extends DataType
/*     */   implements Cloneable, EntityResolver, URIResolver
/*     */ {
/* 145 */   private FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   private Vector elements = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private Path classpath;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 160 */   public XMLCatalog() { this.checked = false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   private Vector getElements() { return this.elements; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   private Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 190 */   private void setElements(Vector aVector) { this.elements = aVector; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Path createClasspath() {
/* 200 */     if (isReference()) {
/* 201 */       throw noChildrenAllowed();
/*     */     }
/* 203 */     if (this.classpath == null) {
/* 204 */       this.classpath = new Path(getProject());
/*     */     }
/* 206 */     this.checked = false;
/* 207 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspath(Path classpath) {
/* 217 */     if (isReference()) {
/* 218 */       throw tooManyAttributes();
/*     */     }
/* 220 */     if (this.classpath == null) {
/* 221 */       this.classpath = classpath;
/*     */     } else {
/* 223 */       this.classpath.append(classpath);
/*     */     } 
/* 225 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathRef(Reference r) {
/* 235 */     if (isReference()) {
/* 236 */       throw tooManyAttributes();
/*     */     }
/* 238 */     createClasspath().setRefid(r);
/* 239 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addDTD(DTDLocation dtd) throws BuildException {
/* 254 */     if (isReference()) {
/* 255 */       throw noChildrenAllowed();
/*     */     }
/*     */     
/* 258 */     getElements().addElement(dtd);
/* 259 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 274 */   public void addEntity(DTDLocation dtd) throws BuildException { addDTD(dtd); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addConfiguredXMLCatalog(XMLCatalog catalog) {
/* 286 */     if (isReference()) {
/* 287 */       throw noChildrenAllowed();
/*     */     }
/*     */ 
/*     */     
/* 291 */     Vector newElements = catalog.getElements();
/* 292 */     Vector ourElements = getElements();
/* 293 */     Enumeration enum = newElements.elements();
/* 294 */     while (enum.hasMoreElements()) {
/* 295 */       ourElements.addElement(enum.nextElement());
/*     */     }
/*     */ 
/*     */     
/* 299 */     Path nestedClasspath = catalog.getClasspath();
/* 300 */     createClasspath().append(nestedClasspath);
/* 301 */     this.checked = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setRefid(Reference r) throws BuildException {
/* 317 */     if (!this.elements.isEmpty()) {
/* 318 */       throw tooManyAttributes();
/*     */     }
/*     */     
/* 321 */     Object o = r.getReferencedObject(getProject());
/*     */     
/* 323 */     if (o instanceof XMLCatalog) {
/*     */       
/* 325 */       XMLCatalog catalog = (XMLCatalog)o;
/* 326 */       setElements(catalog.getElements());
/*     */     } else {
/* 328 */       String msg = r.getRefId() + "" does not refer to an XMLCatalog"";
/* 329 */       throw new BuildException(msg);
/*     */     } 
/* 331 */     super.setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
/* 342 */     if (!this.checked) {
/*     */       
/* 344 */       Stack stk = new Stack();
/* 345 */       stk.push(this);
/* 346 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 349 */     log(""resolveEntity: '"" + publicId + ""': '"" + systemId + ""'"", 4);
/*     */ 
/*     */     
/* 352 */     InputSource inputSource = resolveEntityImpl(publicId, systemId);
/*     */     
/* 354 */     if (inputSource == null) {
/* 355 */       log(""No matching catalog entry found, parser will use: '"" + systemId + ""'"", 4);
/*     */     }
/*     */ 
/*     */     
/* 359 */     return inputSource;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Source resolve(String href, String base) throws TransformerException {
/* 370 */     if (!this.checked) {
/*     */       
/* 372 */       Stack stk = new Stack();
/* 373 */       stk.push(this);
/* 374 */       dieOnCircularReference(stk, getProject());
/*     */     } 
/*     */     
/* 377 */     SAXSource source = null;
/*     */     
/* 379 */     String uri = removeFragment(href);
/*     */     
/* 381 */     log(""resolve: '"" + uri + ""' with base: '"" + base + ""'"", 4);
/*     */     
/* 383 */     source = resolveImpl(uri, base);
/*     */     
/* 385 */     if (source == null) {
/* 386 */       log(""No matching catalog entry found, parser will use: '"" + href + ""'"", 4);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 392 */       source = new SAXSource();
/*     */       
/*     */       try {
/* 395 */         URL baseURL = new URL(base);
/* 396 */         URL url = (uri.length() == 0) ? baseURL : new URL(baseURL, uri);
/* 397 */         source.setInputSource(new InputSource(url.toString()));
/*     */       
/*     */       }
/*     */       catch (MalformedURLException ex) {
/*     */         
/* 402 */         source.setInputSource(new InputSource(uri));
/*     */       } 
/*     */     } 
/*     */     
/* 406 */     setEntityResolver(source);
/* 407 */     return source;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private DTDLocation findMatchingEntry(String publicId) {
/* 419 */     Enumeration elements = getElements().elements();
/* 420 */     DTDLocation element = null;
/* 421 */     while (elements.hasMoreElements()) {
/* 422 */       element = elements.nextElement();
/* 423 */       if (element.getPublicId().equals(publicId)) {
/* 424 */         return element;
/*     */       }
/*     */     } 
/* 427 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setEntityResolver(SAXSource source) throws TransformerException {
/* 451 */     XMLReader reader = source.getXMLReader();
/* 452 */     if (reader == null) {
/* 453 */       SAXParserFactory spFactory = SAXParserFactory.newInstance();
/* 454 */       spFactory.setNamespaceAware(true);
/*     */       try {
/* 456 */         reader = spFactory.newSAXParser().getXMLReader();
/*     */       } catch (ParserConfigurationException ex) {
/*     */         
/* 459 */         throw new TransformerException(ex);
/*     */       } catch (SAXException ex) {
/*     */         
/* 462 */         throw new TransformerException(ex);
/*     */       } 
/*     */     } 
/* 465 */     reader.setEntityResolver(this);
/* 466 */     source.setXMLReader(reader);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String removeFragment(String uri) {
/* 480 */     String result = uri;
/* 481 */     String fragment = null;
/* 482 */     int hashPos = uri.indexOf(""#"");
/* 483 */     if (hashPos >= 0) {
/* 484 */       result = uri.substring(0, hashPos);
/* 485 */       fragment = uri.substring(hashPos + 1);
/*     */     } 
/* 487 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputSource filesystemLookup(DTDLocation matchingEntry) {
/* 498 */     String uri = matchingEntry.getLocation();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 505 */     File resFile = this.project.resolveFile(uri);
/* 506 */     InputSource source = null;
/*     */     
/* 508 */     if (resFile.exists() && resFile.canRead()) {
/*     */       try {
/* 510 */         source = new InputSource(new FileInputStream(resFile));
/* 511 */         URL resFileURL = this.fileUtils.getFileURL(resFile);
/* 512 */         String sysid = resFileURL.toExternalForm();
/* 513 */         source.setSystemId(sysid);
/* 514 */         log(""catalog entry matched a readable file: '"" + sysid + ""'"", 4);
/*     */       }
/* 516 */       catch (FileNotFoundException ex) {
/*     */       
/* 518 */       } catch (MalformedURLException ex) {
/*     */       
/* 520 */       } catch (IOException ex) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 525 */     return source;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputSource classpathLookup(DTDLocation matchingEntry) {
/* 536 */     InputSource source = null;
/*     */     
/* 538 */     AntClassLoader loader = null;
/* 539 */     if (this.classpath != null) {
/* 540 */       loader = new AntClassLoader(this.project, this.classpath);
/*     */     } else {
/* 542 */       loader = new AntClassLoader(this.project, Path.systemClasspath);
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 548 */     InputStream is = loader.getResourceAsStream(matchingEntry.getLocation());
/*     */ 
/*     */     
/* 551 */     if (is != null) {
/* 552 */       source = new InputSource(is);
/* 553 */       URL entryURL = loader.getResource(matchingEntry.getLocation());
/* 554 */       String sysid = entryURL.toExternalForm();
/* 555 */       source.setSystemId(sysid);
/* 556 */       log(""catalog entry matched a resource in the classpath: '"" + sysid + ""'"", 4);
/*     */     } 
/*     */ 
/*     */     
/* 560 */     return source;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputSource urlLookup(String uri, String base) {
/* 571 */     InputSource source = null;
/* 572 */     URL url = null;
/*     */     
/*     */     try {
/* 575 */       if (base == null) {
/* 576 */         url = new URL(uri);
/*     */       } else {
/*     */         
/* 579 */         URL baseURL = new URL(base);
/* 580 */         url = (uri.length() == 0) ? baseURL : new URL(baseURL, uri);
/*     */       }
/*     */     
/* 583 */     } catch (MalformedURLException ex) {}
/*     */ 
/*     */ 
/*     */     
/* 587 */     if (url != null) {
/*     */       try {
/* 589 */         InputStream is = url.openStream();
/* 590 */         if (is != null) {
/* 591 */           source = new InputSource(is);
/* 592 */           String sysid = url.toExternalForm();
/* 593 */           source.setSystemId(sysid);
/* 594 */           log(""catalog entry matched as a URL: '"" + sysid + ""'"", 4);
/*     */         }
/*     */       
/* 597 */       } catch (IOException ex) {}
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 602 */     return source;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private InputSource resolveEntityImpl(String publicId, String systemId) {
/* 612 */     InputSource result = null;
/*     */     
/* 614 */     DTDLocation matchingEntry = findMatchingEntry(publicId);
/*     */     
/* 616 */     if (matchingEntry != null) {
/*     */       
/* 618 */       log(""Matching catalog entry found for publicId: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 623 */       result = filesystemLookup(matchingEntry);
/*     */       
/* 625 */       if (result == null) {
/* 626 */         result = classpathLookup(matchingEntry);
/*     */       }
/*     */       
/* 629 */       if (result == null) {
/* 630 */         result = urlLookup(matchingEntry.getLocation(), null);
/*     */       }
/*     */     } 
/* 633 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private SAXSource resolveImpl(String href, String base) throws TransformerException {
/* 642 */     SAXSource result = null;
/* 643 */     InputSource source = null;
/*     */     
/* 645 */     DTDLocation matchingEntry = findMatchingEntry(href);
/*     */     
/* 647 */     if (matchingEntry != null) {
/*     */       
/* 649 */       log(""Matching catalog entry found for uri: '"" + matchingEntry.getPublicId() + ""' location: '"" + matchingEntry.getLocation() + ""'"", 4);
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 654 */       source = filesystemLookup(matchingEntry);
/*     */       
/* 656 */       if (source == null) {
/* 657 */         source = classpathLookup(matchingEntry);
/*     */       }
/*     */       
/* 660 */       if (source == null) {
/* 661 */         source = urlLookup(matchingEntry.getLocation(), base);
/*     */       }
/*     */       
/* 664 */       if (source != null) {
/* 665 */         result = new SAXSource(source);
/*     */       }
/*     */     } 
/* 668 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\XMLCatalog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipFileSet,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Stack;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ import org.apache.tools.ant.FileScanner;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipFileSet
/*     */   extends FileSet
/*     */ {
/*  83 */   private File srcFile = null;
/*  84 */   private String prefix = """";
/*  85 */   private String fullpath = """";
/*     */   
/*     */   private boolean hasDir = false;
/*     */ 
/*     */   
/*     */   public ZipFileSet() {}
/*     */ 
/*     */   
/*  93 */   protected ZipFileSet(FileSet fileset) { super(fileset); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDir(File dir) throws BuildException {
/* 101 */     if (this.srcFile != null) {
/* 102 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/* 104 */     super.setDir(dir);
/* 105 */     this.hasDir = true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setSrc(File srcFile) {
/* 116 */     if (this.hasDir) {
/* 117 */       throw new BuildException(""Cannot set both dir and src attributes"");
/*     */     }
/* 119 */     this.srcFile = srcFile;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   public File getSrc() { return this.srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public void setPrefix(String prefix) { this.prefix = prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public String getPrefix() { return this.prefix; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public void setFullpath(String fullpath) { this.fullpath = fullpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 162 */   public String getFullpath() { return this.fullpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public DirectoryScanner getDirectoryScanner(Project p) {
/* 171 */     if (isReference()) {
/* 172 */       return getRef(p).getDirectoryScanner(p);
/*     */     }
/* 174 */     if (this.srcFile != null) {
/* 175 */       ZipScanner zs = new ZipScanner();
/* 176 */       zs.setSrc(this.srcFile);
/* 177 */       super.setDir(p.getBaseDir());
/* 178 */       setupDirectoryScanner((FileScanner)zs, p);
/* 179 */       zs.init();
/* 180 */       return zs;
/*     */     } 
/* 182 */     return super.getDirectoryScanner(p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected AbstractFileSet getRef(Project p) {
/* 191 */     if (!this.checked) {
/* 192 */       Stack stk = new Stack();
/* 193 */       stk.push(this);
/* 194 */       dieOnCircularReference(stk, p);
/*     */     } 
/*     */     
/* 197 */     Object o = this.ref.getReferencedObject(p);
/* 198 */     if (!(o instanceof FileSet)) {
/* 199 */       String msg = this.ref.getRefId() + "" doesn't denote a fileset"";
/* 200 */       throw new BuildException(msg);
/*     */     } 
/* 202 */     return (AbstractFileSet)o;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\ZipFileSet.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.ZipScanner,"/*     */ package org.apache.tools.ant.types;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.DirectoryScanner;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipScanner
/*     */   extends DirectoryScanner
/*     */ {
/*     */   protected File srcFile;
/*     */   
/*  86 */   public void setSrc(File srcFile) { this.srcFile = srcFile; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getIncludedFiles() {
/*  97 */     String[] result = new String[1];
/*  98 */     result[0] = this.srcFile.getAbsolutePath();
/*  99 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   public String[] getIncludedDirectories() { return new String[0]; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void init() {
/* 113 */     if (this.includes == null) {
/*     */       
/* 115 */       this.includes = new String[1];
/* 116 */       this.includes[0] = ""**"";
/*     */     } 
/* 118 */     if (this.excludes == null) {
/* 119 */       this.excludes = new String[0];
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean match(String path) {
/* 133 */     String vpath = path.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     
/* 135 */     return (isIncluded(vpath) && !isExcluded(vpath));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\ZipScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.AndSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AndSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  76 */     StringBuffer buf = new StringBuffer();
/*  77 */     if (hasSelectors()) {
/*  78 */       buf.append(""{andselect: "");
/*  79 */       buf.append(super.toString());
/*  80 */       buf.append(""}"");
/*     */     } 
/*  82 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/*  96 */     validate();
/*  97 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 100 */     while (e.hasMoreElements()) {
/* 101 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 103 */       if (!result) {
/* 104 */         return false;
/*     */       }
/*     */     } 
/* 107 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\AndSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseExtendSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseExtendSelector
/*     */   extends BaseSelector
/*     */   implements ExtendFileSelector
/*     */ {
/*  77 */   protected Parameter[] parameters = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setParameters(Parameter[] parameters) { this.parameters = parameters; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   protected Parameter[] getParameters() { return this.parameters; }
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2) throws BuildException;
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\BaseExtendSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.DataType;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseSelector
/*     */   extends DataType
/*     */   implements FileSelector
/*     */ {
/*  73 */   private String errmsg = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setError(String msg) {
/*  89 */     if (this.errmsg == null) {
/*  90 */       this.errmsg = msg;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   public String getError() { return this.errmsg; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() {
/* 121 */     if (getError() == null) {
/* 122 */       verifySettings();
/*     */     }
/* 124 */     if (getError() != null)
/* 125 */       throw new BuildException(this.errmsg); 
/*     */   }
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2);
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\BaseSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.BaseSelectorContainer,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class BaseSelectorContainer
/*     */   extends BaseSelector
/*     */   implements SelectorContainer
/*     */ {
/*  75 */   private Vector selectorsList = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  87 */   public boolean hasSelectors() { return !this.selectorsList.isEmpty(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   public int selectorCount() { return this.selectorsList.size(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 101 */     FileSelector[] result = new FileSelector[this.selectorsList.size()];
/* 102 */     this.selectorsList.copyInto((Object[])result);
/* 103 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 110 */   public Enumeration selectorElements() { return this.selectorsList.elements(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String toString() {
/* 121 */     StringBuffer buf = new StringBuffer();
/* 122 */     Enumeration e = selectorElements();
/* 123 */     if (e.hasMoreElements()) {
/* 124 */       while (e.hasMoreElements()) {
/* 125 */         buf.append(e.nextElement().toString());
/* 126 */         if (e.hasMoreElements()) {
/* 127 */           buf.append("", "");
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 132 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   public void appendSelector(FileSelector selector) { this.selectorsList.addElement(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void validate() {
/* 162 */     verifySettings();
/* 163 */     String errmsg = getError();
/* 164 */     if (errmsg != null) {
/* 165 */       throw new BuildException(errmsg);
/*     */     }
/* 167 */     Enumeration e = selectorElements();
/* 168 */     while (e.hasMoreElements()) {
/* 169 */       Object o = e.nextElement();
/* 170 */       if (o instanceof BaseSelector) {
/* 171 */         ((BaseSelector)o).validate();
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public abstract boolean isSelected(File paramFile1, String paramString, File paramFile2);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 197 */   public void addSelector(SelectSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void addAnd(AndSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 211 */   public void addOr(OrSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 218 */   public void addNot(NotSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void addNone(NoneSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void addMajority(MajoritySelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 239 */   public void addDate(DateSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 246 */   public void addSize(SizeSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 253 */   public void addFilename(FilenameSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   public void addCustom(ExtendSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 267 */   public void addContains(ContainsSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 274 */   public void addPresent(PresentSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public void addDepth(DepthSelector selector) { appendSelector(selector); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 288 */   public void addDepend(DependSelector selector) { appendSelector(selector); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\BaseSelectorContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ContainsSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStreamReader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ContainsSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  76 */   private String contains = null;
/*     */   
/*     */   private boolean casesensitive = true;
/*     */   
/*     */   public static final String CONTAINS_KEY = ""text"";
/*     */   
/*     */   public static final String CASE_KEY = ""casesensitive"";
/*     */ 
/*     */   
/*     */   public String toString() {
/*  86 */     StringBuffer buf = new StringBuffer(""{containsselector text: "");
/*  87 */     buf.append(this.contains);
/*  88 */     buf.append("" casesensitive: "");
/*  89 */     if (this.casesensitive) {
/*  90 */       buf.append(""true"");
/*     */     } else {
/*  92 */       buf.append(""false"");
/*     */     } 
/*  94 */     buf.append(""}"");
/*  95 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 104 */   public void setText(String contains) { this.contains = contains; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setCasesensitive(boolean casesensitive) { this.casesensitive = casesensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 123 */     super.setParameters(parameters);
/* 124 */     if (parameters != null) {
/* 125 */       for (int i = 0; i < parameters.length; i++) {
/* 126 */         String paramname = parameters[i].getName();
/* 127 */         if (""text"".equalsIgnoreCase(paramname)) {
/* 128 */           setText(parameters[i].getValue());
/*     */         }
/* 130 */         else if (""casesensitive"".equalsIgnoreCase(paramname)) {
/* 131 */           setCasesensitive(Project.toBoolean(parameters[i].getValue()));
/*     */         }
/*     */         else {
/*     */           
/* 135 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 147 */     if (this.contains == null) {
/* 148 */       setError(""The text attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 164 */     validate();
/*     */     
/* 166 */     if (file.isDirectory()) {
/* 167 */       return true;
/*     */     }
/*     */     
/* 170 */     String userstr = this.contains;
/* 171 */     if (!this.casesensitive) {
/* 172 */       userstr = this.contains.toLowerCase();
/*     */     }
/* 174 */     BufferedReader in = null;
/*     */     try {
/* 176 */       in = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
/*     */       
/* 178 */       String teststr = in.readLine();
/* 179 */       while (teststr != null) {
/* 180 */         if (!this.casesensitive) {
/* 181 */           teststr = teststr.toLowerCase();
/*     */         }
/* 183 */         if (teststr.indexOf(userstr) > -1) {
/* 184 */           return true;
/*     */         }
/* 186 */         teststr = in.readLine();
/*     */       } 
/* 188 */       return false;
/*     */     } catch (IOException ioe) {
/*     */       
/* 191 */       throw new BuildException(""Could not read file "" + filename);
/*     */     } finally {
/*     */       
/*     */       try {
/* 195 */         in.close();
/*     */       } catch (Exception e) {
/*     */         
/* 198 */         throw new BuildException(""Could not close file "" + filename);
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\ContainsSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DateSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.text.DateFormat;
/*     */ import java.text.ParseException;
/*     */ import java.util.Locale;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DateSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  75 */   private long millis = -1L;
/*  76 */   private String dateTime = null;
/*     */   private boolean includeDirs = false;
/*  78 */   private int granularity = 0;
/*  79 */   private int cmp = 2;
/*     */   public static final String MILLIS_KEY = ""millis"";
/*     */   public static final String DATETIME_KEY = ""datetime"";
/*     */   public static final String CHECKDIRS_KEY = ""checkdirs"";
/*     */   public static final String GRANULARITY_KEY = ""granularity"";
/*     */   public static final String WHEN_KEY = ""when"";
/*     */   
/*     */   public DateSelector() {
/*  87 */     if (Os.isFamily(""dos"")) {
/*  88 */       this.granularity = 2000;
/*     */     }
/*     */   }
/*     */   
/*     */   public String toString() {
/*  93 */     StringBuffer buf = new StringBuffer(""{dateselector date: "");
/*  94 */     buf.append(this.dateTime);
/*  95 */     buf.append("" compare: "");
/*  96 */     if (this.cmp == 0) {
/*  97 */       buf.append(""before"");
/*     */     }
/*  99 */     else if (this.cmp == 1) {
/* 100 */       buf.append(""after"");
/*     */     } else {
/* 102 */       buf.append(""equal"");
/*     */     } 
/* 104 */     buf.append("" granularity: "");
/* 105 */     buf.append(this.granularity);
/* 106 */     buf.append(""}"");
/* 107 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void setMillis(long millis) { this.millis = millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   public long getMillis() { return this.millis; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDatetime(String dateTime) {
/* 134 */     this.dateTime = dateTime;
/* 135 */     if (dateTime != null) {
/* 136 */       DateFormat df = DateFormat.getDateTimeInstance(3, 3, Locale.US);
/*     */ 
/*     */ 
/*     */       
/*     */       try {
/* 141 */         setMillis(df.parse(dateTime).getTime());
/* 142 */         if (this.millis < 0L) {
/* 143 */           setError(""Date of "" + dateTime + "" results in negative milliseconds value relative"" + "" to epoch (January 1, 1970, 00:00:00 GMT)."");
/*     */         }
/*     */       }
/*     */       catch (ParseException pe) {
/*     */         
/* 148 */         setError(""Date of "" + dateTime + "" Cannot be parsed correctly. It should be in"" + "" MM/DD/YYYY HH:MM AM_PM format."");
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 161 */   public void setCheckdirs(boolean includeDirs) { this.includeDirs = includeDirs; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void setGranularity(int granularity) { this.granularity = granularity; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public void setWhen(TimeComparisons cmp) { this.cmp = cmp.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 189 */     super.setParameters(parameters);
/* 190 */     if (parameters != null) {
/* 191 */       for (int i = 0; i < parameters.length; i++) {
/* 192 */         String paramname = parameters[i].getName();
/* 193 */         if (""millis"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 195 */             setMillis((new Long(parameters[i].getValue())).longValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 198 */             setError(""Invalid millisecond setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/*     */         }
/* 202 */         else if (""datetime"".equalsIgnoreCase(paramname)) {
/* 203 */           setDatetime(parameters[i].getValue());
/*     */         }
/* 205 */         else if (""checkdirs"".equalsIgnoreCase(paramname)) {
/* 206 */           setCheckdirs(Project.toBoolean(parameters[i].getValue()));
/*     */         }
/* 208 */         else if (""granularity"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 210 */             setGranularity((new Integer(parameters[i].getValue())).intValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 213 */             setError(""Invalid granularity setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/*     */         }
/* 217 */         else if (""when"".equalsIgnoreCase(paramname)) {
/* 218 */           TimeComparisons cmp = new TimeComparisons();
/* 219 */           cmp.setValue(parameters[i].getValue());
/* 220 */           setWhen(cmp);
/*     */         } else {
/*     */           
/* 223 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 234 */     if (this.dateTime == null && this.millis < 0L) {
/* 235 */       setError(""You must provide a datetime or the number of milliseconds."");
/*     */     
/*     */     }
/* 238 */     else if (this.millis < 0L) {
/* 239 */       setError(""Date of "" + this.dateTime + "" results in negative milliseconds"" + "" value relative to epoch (January 1, 1970, 00:00:00 GMT)."");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 255 */     validate();
/* 256 */     if (file.isDirectory() && !this.includeDirs) {
/* 257 */       return true;
/*     */     }
/* 259 */     if (this.cmp == 0) {
/* 260 */       return (file.lastModified() - this.granularity < this.millis);
/*     */     }
/* 262 */     if (this.cmp == 1) {
/* 263 */       return (file.lastModified() + this.granularity > this.millis);
/*     */     }
/*     */     
/* 266 */     return (Math.abs(file.lastModified() - this.millis) <= this.granularity);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class TimeComparisons
/*     */     extends EnumeratedAttribute
/*     */   {
/* 276 */     public String[] getValues() { return new String[] { ""before"", ""after"", ""equal"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\DateSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DependSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DependSelector
/*     */   extends BaseSelector
/*     */ {
/*  77 */   private File targetdir = null;
/*  78 */   private Mapper mapperElement = null;
/*  79 */   private FileNameMapper map = null;
/*  80 */   private int granularity = 0;
/*     */   
/*     */   public DependSelector() {
/*  83 */     if (Os.isFamily(""dos"")) {
/*  84 */       this.granularity = 2000;
/*     */     }
/*     */   }
/*     */   
/*     */   public String toString() {
/*  89 */     StringBuffer buf = new StringBuffer(""{dependselector targetdir: "");
/*  90 */     if (this.targetdir == null) {
/*  91 */       buf.append(""NOT YET SET"");
/*     */     } else {
/*     */       
/*  94 */       buf.append(this.targetdir.getName());
/*     */     } 
/*  96 */     buf.append("" granularity: "");
/*  97 */     buf.append(this.granularity);
/*  98 */     if (this.map != null) {
/*  99 */       buf.append("" mapper: "");
/* 100 */       buf.append(this.map.toString());
/*     */     }
/* 102 */     else if (this.mapperElement != null) {
/* 103 */       buf.append("" mapper: "");
/* 104 */       buf.append(this.mapperElement.toString());
/*     */     } 
/* 106 */     buf.append(""}"");
/* 107 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 117 */   public void setTargetdir(File targetdir) { this.targetdir = targetdir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 125 */   public void setGranularity(int granularity) { this.granularity = granularity; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 132 */     if (this.mapperElement != null) {
/* 133 */       throw new BuildException(""Cannot define more than one mapper"");
/*     */     }
/* 135 */     this.mapperElement = new Mapper(this.project);
/* 136 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 145 */     if (this.targetdir == null) {
/* 146 */       setError(""The targetdir attribute is required."");
/*     */     }
/* 148 */     if (this.mapperElement == null) {
/* 149 */       this.map = (FileNameMapper)new IdentityMapper();
/*     */     } else {
/*     */       
/* 152 */       this.map = this.mapperElement.getImplementation();
/*     */     } 
/* 154 */     if (this.map == null) {
/* 155 */       setError(""Could not set <mapper> element."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 171 */     validate();
/*     */ 
/*     */     
/* 174 */     String[] destfiles = this.map.mapFileName(filename);
/*     */ 
/*     */     
/* 177 */     if (destfiles == null) {
/* 178 */       return false;
/*     */     }
/*     */     
/* 181 */     if (destfiles.length != 1 || destfiles[0] == null) {
/* 182 */       throw new BuildException(""Invalid destination file results for "" + this.targetdir.getName() + "" with filename "" + filename);
/*     */     }
/*     */     
/* 185 */     String destname = destfiles[0];
/* 186 */     File destfile = new File(this.targetdir, destname);
/*     */     
/* 188 */     return SelectorUtils.isOutOfDate(file, destfile, this.granularity);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\DependSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.DepthSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DepthSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  73 */   public int min = -1;
/*  74 */   public int max = -1;
/*     */   
/*     */   public static final String MIN_KEY = ""min"";
/*     */   
/*     */   public static final String MAX_KEY = ""max"";
/*     */ 
/*     */   
/*     */   public String toString() {
/*  82 */     StringBuffer buf = new StringBuffer(""{depthselector min: "");
/*  83 */     buf.append(this.min);
/*  84 */     buf.append("" max: "");
/*  85 */     buf.append(this.max);
/*  86 */     buf.append(""}"");
/*  87 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   public void setMin(int min) { this.min = min; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 105 */   public void setMax(int max) { this.max = max; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 115 */     super.setParameters(parameters);
/* 116 */     if (parameters != null) {
/* 117 */       for (int i = 0; i < parameters.length; i++) {
/* 118 */         String paramname = parameters[i].getName();
/* 119 */         if (""min"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 121 */             setMin(Integer.parseInt(parameters[i].getValue()));
/*     */           } catch (NumberFormatException nfe1) {
/*     */             
/* 124 */             setError(""Invalid minimum value "" + parameters[i].getValue());
/*     */           }
/*     */         
/*     */         }
/* 128 */         else if (""max"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 130 */             setMax(Integer.parseInt(parameters[i].getValue()));
/*     */           } catch (NumberFormatException nfe1) {
/*     */             
/* 133 */             setError(""Invalid maximum value "" + parameters[i].getValue());
/*     */           }
/*     */         
/*     */         } else {
/*     */           
/* 138 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 149 */     if (this.min < 0 && this.max < 0) {
/* 150 */       setError(""You must set at least one of the min or the max levels."");
/*     */     }
/*     */     
/* 153 */     if (this.max < this.min && this.max > -1) {
/* 154 */       setError(""The maximum depth is lower than the minimum."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 173 */     validate();
/*     */     
/* 175 */     int depth = -1;
/*     */     
/* 177 */     String abs_base = basedir.getAbsolutePath();
/* 178 */     String abs_file = file.getAbsolutePath();
/* 179 */     StringTokenizer tok_base = new StringTokenizer(abs_base, File.separator);
/* 180 */     StringTokenizer tok_file = new StringTokenizer(abs_file, File.separator);
/* 181 */     while (tok_file.hasMoreTokens()) {
/* 182 */       String filetoken = tok_file.nextToken();
/* 183 */       if (tok_base.hasMoreTokens()) {
/* 184 */         String basetoken = tok_base.nextToken();
/*     */         
/* 186 */         if (!basetoken.equals(filetoken)) {
/* 187 */           throw new BuildException(""File "" + filename + "" does not appear within "" + abs_base + ""directory"");
/*     */         }
/*     */         
/*     */         continue;
/*     */       } 
/* 192 */       depth++;
/* 193 */       if (this.max > -1 && depth > this.max) {
/* 194 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 198 */     if (tok_base.hasMoreTokens()) {
/* 199 */       throw new BuildException(""File "" + filename + "" is outside of "" + abs_base + ""directory tree"");
/*     */     }
/*     */     
/* 202 */     if (this.min > -1 && depth < this.min) {
/* 203 */       return false;
/*     */     }
/* 205 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\DepthSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ExtendFileSelector,"package org.apache.tools.ant.types.selectors;
import org.apache.tools.ant.types.Parameterizable;
public interface ExtendFileSelector extends FileSelector, Parameterizable {}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\ExtendFileSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.ExtendSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.AntClassLoader;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ import org.apache.tools.ant.types.Path;
/*     */ import org.apache.tools.ant.types.Reference;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExtendSelector
/*     */   extends BaseSelector
/*     */ {
/*  75 */   private String classname = null;
/*  76 */   private FileSelector dynselector = null;
/*  77 */   private Vector paramVec = new Vector();
/*  78 */   private Path classpath = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  92 */   public void setClassname(String classname) { this.classname = classname; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void selectorCreate() {
/*  99 */     if (this.classname != null && this.classname.length() > 0) {
/*     */       try {
/* 101 */         Class c = null;
/* 102 */         if (this.classpath == null) {
/* 103 */           c = Class.forName(this.classname);
/*     */         } else {
/* 105 */           AntClassLoader al = new AntClassLoader(getProject(), this.classpath);
/*     */           
/* 107 */           c = al.loadClass(this.classname);
/* 108 */           AntClassLoader.initializeClass(c);
/*     */         } 
/* 110 */         this.dynselector = (FileSelector)c.newInstance();
/*     */       } catch (ClassNotFoundException cnfexcept) {
/*     */         
/* 113 */         setError(""Selector "" + this.classname + "" not initialized, no such class"");
/*     */       }
/*     */       catch (InstantiationException iexcept) {
/*     */         
/* 117 */         setError(""Selector "" + this.classname + "" not initialized, could not create class"");
/*     */       }
/*     */       catch (IllegalAccessException iaexcept) {
/*     */         
/* 121 */         setError(""Selector "" + this.classname + "" not initialized, class not accessible"");
/*     */       } 
/*     */     } else {
/*     */       
/* 125 */       setError(""There is no classname specified"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public void addParam(Parameter p) { this.paramVec.addElement(p); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void setClasspath(Path classpath) {
/* 143 */     if (isReference()) {
/* 144 */       throw tooManyAttributes();
/*     */     }
/* 146 */     if (this.classpath == null) {
/* 147 */       this.classpath = classpath;
/*     */     } else {
/* 149 */       this.classpath.append(classpath);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final Path createClasspath() {
/* 157 */     if (isReference()) {
/* 158 */       throw noChildrenAllowed();
/*     */     }
/* 160 */     if (this.classpath == null) {
/* 161 */       this.classpath = new Path(getProject());
/*     */     }
/* 163 */     return this.classpath.createPath();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   public final Path getClasspath() { return this.classpath; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setClasspathref(Reference r) {
/* 178 */     if (isReference()) {
/* 179 */       throw tooManyAttributes();
/*     */     }
/* 181 */     createClasspath().setRefid(r);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 193 */     if (this.dynselector == null) {
/* 194 */       selectorCreate();
/*     */     }
/* 196 */     if (this.classname == null || this.classname.length() < 1) {
/* 197 */       setError(""The classname attribute is required"");
/*     */     }
/* 199 */     else if (this.dynselector == null) {
/* 200 */       setError(""Internal Error: The custom selector was not created"");
/*     */     }
/* 202 */     else if (!(this.dynselector instanceof ExtendFileSelector) && this.paramVec.size() > 0) {
/*     */       
/* 204 */       setError(""Cannot set parameters on custom selector that does not implement ExtendFileSelector"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) throws BuildException {
/* 219 */     validate();
/* 220 */     if (this.paramVec.size() > 0 && this.dynselector instanceof ExtendFileSelector) {
/* 221 */       Parameter[] paramArray = new Parameter[this.paramVec.size()];
/* 222 */       this.paramVec.copyInto((Object[])paramArray);
/*     */       
/* 224 */       ((ExtendFileSelector)this.dynselector).setParameters(paramArray);
/*     */     } 
/* 226 */     return this.dynselector.isSelected(basedir, filename, file);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\ExtendSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.FilenameSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FilenameSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  70 */   private String pattern = null;
/*     */   
/*     */   private boolean casesensitive = true;
/*     */   
/*     */   private boolean negated = false;
/*     */   
/*     */   public static final String NAME_KEY = ""name"";
/*     */   public static final String CASE_KEY = ""casesensitive"";
/*     */   public static final String NEGATE_KEY = ""negate"";
/*     */   
/*     */   public String toString() {
/*  81 */     StringBuffer buf = new StringBuffer(""{filenameselector name: "");
/*  82 */     buf.append(this.pattern);
/*  83 */     buf.append("" negate: "");
/*  84 */     if (this.negated) {
/*  85 */       buf.append(""true"");
/*     */     } else {
/*  87 */       buf.append(""false"");
/*     */     } 
/*  89 */     buf.append("" casesensitive: "");
/*  90 */     if (this.casesensitive) {
/*  91 */       buf.append(""true"");
/*     */     } else {
/*  93 */       buf.append(""false"");
/*     */     } 
/*  95 */     buf.append(""}"");
/*  96 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setName(String pattern) {
/* 107 */     pattern = pattern.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */     
/* 109 */     if (pattern.endsWith(File.separator)) {
/* 110 */       pattern = pattern + ""**"";
/*     */     }
/* 112 */     this.pattern = pattern;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void setCasesensitive(boolean casesensitive) { this.casesensitive = casesensitive; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public void setNegate(boolean negated) { this.negated = negated; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 143 */     super.setParameters(parameters);
/* 144 */     if (parameters != null) {
/* 145 */       for (int i = 0; i < parameters.length; i++) {
/* 146 */         String paramname = parameters[i].getName();
/* 147 */         if (""name"".equalsIgnoreCase(paramname)) {
/* 148 */           setName(parameters[i].getValue());
/*     */         }
/* 150 */         else if (""casesensitive"".equalsIgnoreCase(paramname)) {
/* 151 */           setCasesensitive(Project.toBoolean(parameters[i].getValue()));
/*     */         
/*     */         }
/* 154 */         else if (""negate"".equalsIgnoreCase(paramname)) {
/* 155 */           setNegate(Project.toBoolean(parameters[i].getValue()));
/*     */         } else {
/*     */           
/* 158 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 170 */     if (this.pattern == null) {
/* 171 */       setError(""The name attribute is required"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 188 */     validate();
/*     */     
/* 190 */     return (SelectorUtils.matchPath(this.pattern, filename, this.casesensitive) == (!this.negated));
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\FilenameSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.FileSelector,"package org.apache.tools.ant.types.selectors;
import java.io.File;
import org.apache.tools.ant.BuildException;
public interface FileSelector {
  boolean isSelected(File paramFile1, String paramString, File paramFile2) throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\FileSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.MajoritySelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MajoritySelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   private boolean allowtie = true;
/*     */   
/*     */   public String toString() {
/*  83 */     StringBuffer buf = new StringBuffer();
/*  84 */     if (hasSelectors()) {
/*  85 */       buf.append(""{majorityselect: "");
/*  86 */       buf.append(super.toString());
/*  87 */       buf.append(""}"");
/*     */     } 
/*  89 */     return buf.toString();
/*     */   }
/*     */ 
/*     */   
/*  93 */   public void setAllowtie(boolean tiebreaker) { this.allowtie = tiebreaker; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 108 */     validate();
/* 109 */     int yesvotes = 0;
/* 110 */     int novotes = 0;
/* 111 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 114 */     while (e.hasMoreElements()) {
/* 115 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 117 */       if (result) {
/* 118 */         yesvotes++;
/*     */         continue;
/*     */       } 
/* 121 */       novotes++;
/*     */     } 
/*     */     
/* 124 */     if (yesvotes > novotes)
/*     */     {
/* 126 */       return true;
/*     */     }
/* 128 */     if (novotes > yesvotes) {
/* 129 */       return false;
/*     */     }
/*     */     
/* 132 */     return this.allowtie;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\MajoritySelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.NoneSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class NoneSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  77 */     StringBuffer buf = new StringBuffer();
/*  78 */     if (hasSelectors()) {
/*  79 */       buf.append(""{noneselect: "");
/*  80 */       buf.append(super.toString());
/*  81 */       buf.append(""}"");
/*     */     } 
/*  83 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/*  97 */     validate();
/*  98 */     Enumeration e = selectorElements();
/*     */ 
/*     */     
/* 101 */     while (e.hasMoreElements()) {
/* 102 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 104 */       if (result) {
/* 105 */         return false;
/*     */       }
/*     */     } 
/* 108 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\NoneSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.NotSelector,"/*    */ package org.apache.tools.ant.types.selectors;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class NotSelector
/*    */   extends NoneSelector
/*    */ {
/*    */   public String toString() {
/* 78 */     StringBuffer buf = new StringBuffer();
/* 79 */     if (hasSelectors()) {
/* 80 */       buf.append(""{notselect: "");
/* 81 */       buf.append(super.toString());
/* 82 */       buf.append(""}"");
/*    */     } 
/* 84 */     return buf.toString();
/*    */   }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void verifySettings() {
/* 92 */     if (selectorCount() != 1)
/* 93 */       setError(""One and only one selector is allowed within the <not> tag""); 
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\NotSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.OrSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Enumeration;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class OrSelector
/*     */   extends BaseSelectorContainer
/*     */ {
/*     */   public String toString() {
/*  76 */     StringBuffer buf = new StringBuffer();
/*  77 */     if (hasSelectors()) {
/*  78 */       buf.append(""{orselect: "");
/*  79 */       buf.append(super.toString());
/*  80 */       buf.append(""}"");
/*     */     } 
/*  82 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/*  96 */     validate();
/*  97 */     Enumeration e = selectorElements();
/*     */ 
/*     */ 
/*     */     
/* 101 */     while (e.hasMoreElements()) {
/* 102 */       boolean result = ((FileSelector)e.nextElement()).isSelected(basedir, filename, file);
/*     */       
/* 104 */       if (result) {
/* 105 */         return true;
/*     */       }
/*     */     } 
/* 108 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\OrSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.PresentSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Mapper;
/*     */ import org.apache.tools.ant.util.FileNameMapper;
/*     */ import org.apache.tools.ant.util.IdentityMapper;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PresentSelector
/*     */   extends BaseSelector
/*     */ {
/*  77 */   private File targetdir = null;
/*  78 */   private Mapper mapperElement = null;
/*  79 */   private FileNameMapper map = null;
/*     */ 
/*     */   
/*     */   private boolean destmustexist = true;
/*     */ 
/*     */   
/*     */   public String toString() {
/*  86 */     StringBuffer buf = new StringBuffer(""{presentselector targetdir: "");
/*  87 */     if (this.targetdir == null) {
/*  88 */       buf.append(""NOT YET SET"");
/*     */     } else {
/*     */       
/*  91 */       buf.append(this.targetdir.getName());
/*     */     } 
/*  93 */     buf.append("" present: "");
/*  94 */     if (this.destmustexist) {
/*  95 */       buf.append(""both"");
/*     */     } else {
/*  97 */       buf.append(""srconly"");
/*     */     } 
/*  99 */     if (this.map != null) {
/* 100 */       buf.append(this.map.toString());
/*     */     }
/* 102 */     else if (this.mapperElement != null) {
/* 103 */       buf.append(this.mapperElement.toString());
/*     */     } 
/* 105 */     buf.append(""}"");
/* 106 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setTargetdir(File targetdir) { this.targetdir = targetdir; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Mapper createMapper() throws BuildException {
/* 123 */     if (this.mapperElement != null) {
/* 124 */       throw new BuildException(""Cannot define more than one mapper"");
/*     */     }
/* 126 */     this.mapperElement = new Mapper(this.project);
/* 127 */     return this.mapperElement;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setPresent(FilePresence fp) {
/* 144 */     if (fp.getIndex() == 0) {
/* 145 */       this.destmustexist = false;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 154 */     if (this.targetdir == null) {
/* 155 */       setError(""The targetdir attribute is required."");
/*     */     }
/* 157 */     if (this.mapperElement == null) {
/* 158 */       this.map = (FileNameMapper)new IdentityMapper();
/*     */     } else {
/*     */       
/* 161 */       this.map = this.mapperElement.getImplementation();
/*     */     } 
/* 163 */     if (this.map == null) {
/* 164 */       setError(""Could not set <mapper> element."");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 180 */     validate();
/*     */ 
/*     */     
/* 183 */     String[] destfiles = this.map.mapFileName(filename);
/*     */ 
/*     */     
/* 186 */     if (destfiles == null) {
/* 187 */       return false;
/*     */     }
/*     */     
/* 190 */     if (destfiles.length != 1 || destfiles[0] == null) {
/* 191 */       throw new BuildException(""Invalid destination file results for "" + this.targetdir + "" with filename "" + filename);
/*     */     }
/*     */     
/* 194 */     String destname = destfiles[0];
/* 195 */     File destfile = new File(this.targetdir, destname);
/* 196 */     return (destfile.exists() == this.destmustexist);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class FilePresence
/*     */     extends EnumeratedAttribute
/*     */   {
/* 205 */     public String[] getValues() { return new String[] { ""srconly"", ""both"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\PresentSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorContainer,"package org.apache.tools.ant.types.selectors;
import java.util.Enumeration;
import org.apache.tools.ant.Project;
public interface SelectorContainer {
  boolean hasSelectors();
  int selectorCount();
  FileSelector[] getSelectors(Project paramProject);
  Enumeration selectorElements();
  void appendSelector(FileSelector paramFileSelector);
  void addSelector(SelectSelector paramSelectSelector);
  void addAnd(AndSelector paramAndSelector);
  void addOr(OrSelector paramOrSelector);
  void addNot(NotSelector paramNotSelector);
  void addNone(NoneSelector paramNoneSelector);
  void addMajority(MajoritySelector paramMajoritySelector);
  void addDate(DateSelector paramDateSelector);
  void addSize(SizeSelector paramSizeSelector);
  void addFilename(FilenameSelector paramFilenameSelector);
  void addCustom(ExtendSelector paramExtendSelector);
  void addContains(ContainsSelector paramContainsSelector);
  void addPresent(PresentSelector paramPresentSelector);
  void addDepth(DepthSelector paramDepthSelector);
  void addDepend(DependSelector paramDependSelector);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\SelectorContainer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorScanner,"package org.apache.tools.ant.types.selectors;
public interface SelectorScanner {
  void setSelectors(FileSelector[] paramArrayOfFileSelector);
  String[] getDeselectedDirectories();
  String[] getDeselectedFiles();
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\SelectorScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectorUtils,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class SelectorUtils
/*     */ {
/*  79 */   private static SelectorUtils instance = new SelectorUtils();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  91 */   public static SelectorUtils getInstance() { return instance; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 111 */   public static boolean matchPatternStart(String pattern, String str) { return matchPatternStart(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean matchPatternStart(String pattern, String str, boolean isCaseSensitive) {
/* 137 */     if (str.startsWith(File.separator) != pattern.startsWith(File.separator))
/*     */     {
/* 139 */       return false;
/*     */     }
/*     */     
/* 142 */     Vector patDirs = tokenizePath(pattern);
/* 143 */     Vector strDirs = tokenizePath(str);
/*     */     
/* 145 */     int patIdxStart = 0;
/* 146 */     int patIdxEnd = patDirs.size() - 1;
/* 147 */     int strIdxStart = 0;
/* 148 */     int strIdxEnd = strDirs.size() - 1;
/*     */ 
/*     */     
/* 151 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 152 */       String patDir = patDirs.elementAt(patIdxStart);
/* 153 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 156 */       if (!match(patDir, strDirs.elementAt(strIdxStart), isCaseSensitive))
/*     */       {
/* 158 */         return false;
/*     */       }
/* 160 */       patIdxStart++;
/* 161 */       strIdxStart++;
/*     */     } 
/*     */     
/* 164 */     if (strIdxStart > strIdxEnd)
/*     */     {
/* 166 */       return true; } 
/* 167 */     if (patIdxStart > patIdxEnd)
/*     */     {
/* 169 */       return false;
/*     */     }
/*     */ 
/*     */     
/* 173 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 189 */   public static boolean matchPath(String pattern, String str) { return matchPath(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean matchPath(String pattern, String str, boolean isCaseSensitive) {
/* 211 */     if (str.startsWith(File.separator) != pattern.startsWith(File.separator))
/*     */     {
/* 213 */       return false;
/*     */     }
/*     */     
/* 216 */     Vector patDirs = tokenizePath(pattern);
/* 217 */     Vector strDirs = tokenizePath(str);
/*     */     
/* 219 */     int patIdxStart = 0;
/* 220 */     int patIdxEnd = patDirs.size() - 1;
/* 221 */     int strIdxStart = 0;
/* 222 */     int strIdxEnd = strDirs.size() - 1;
/*     */ 
/*     */     
/* 225 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 226 */       String patDir = patDirs.elementAt(patIdxStart);
/* 227 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 230 */       if (!match(patDir, strDirs.elementAt(strIdxStart), isCaseSensitive))
/*     */       {
/* 232 */         return false;
/*     */       }
/* 234 */       patIdxStart++;
/* 235 */       strIdxStart++;
/*     */     } 
/* 237 */     if (strIdxStart > strIdxEnd) {
/*     */       
/* 239 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 240 */         if (!patDirs.elementAt(i).equals(""**"")) {
/* 241 */           return false;
/*     */         }
/*     */       } 
/* 244 */       return true;
/*     */     } 
/* 246 */     if (patIdxStart > patIdxEnd)
/*     */     {
/* 248 */       return false;
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 253 */     while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {
/* 254 */       String patDir = patDirs.elementAt(patIdxEnd);
/* 255 */       if (patDir.equals(""**"")) {
/*     */         break;
/*     */       }
/* 258 */       if (!match(patDir, strDirs.elementAt(strIdxEnd), isCaseSensitive))
/*     */       {
/* 260 */         return false;
/*     */       }
/* 262 */       patIdxEnd--;
/* 263 */       strIdxEnd--;
/*     */     } 
/* 265 */     if (strIdxStart > strIdxEnd) {
/*     */       
/* 267 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 268 */         if (!patDirs.elementAt(i).equals(""**"")) {
/* 269 */           return false;
/*     */         }
/*     */       } 
/* 272 */       return true;
/*     */     } 
/*     */     
/* 275 */     while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
/* 276 */       int patIdxTmp = -1;
/* 277 */       for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
/* 278 */         if (patDirs.elementAt(i).equals(""**"")) {
/* 279 */           patIdxTmp = i;
/*     */           break;
/*     */         } 
/*     */       } 
/* 283 */       if (patIdxTmp == patIdxStart + 1) {
/*     */         
/* 285 */         patIdxStart++;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 290 */       int patLength = patIdxTmp - patIdxStart - 1;
/* 291 */       int strLength = strIdxEnd - strIdxStart + 1;
/* 292 */       int foundIdx = -1;
/*     */       
/* 294 */       for (int i = 0; i <= strLength - patLength; ) {
/* 295 */         for (int j = 0; j < patLength; j++) {
/* 296 */           String subPat = patDirs.elementAt(patIdxStart + j + 1);
/* 297 */           String subStr = strDirs.elementAt(strIdxStart + i + j);
/* 298 */           if (!match(subPat, subStr, isCaseSensitive)) {
/*     */             i++;
/*     */             continue;
/*     */           } 
/*     */         } 
/* 303 */         foundIdx = strIdxStart + i;
/*     */         
/*     */         break;
/*     */       } 
/* 307 */       if (foundIdx == -1) {
/* 308 */         return false;
/*     */       }
/*     */       
/* 311 */       patIdxStart = patIdxTmp;
/* 312 */       strIdxStart = foundIdx + patLength;
/*     */     } 
/*     */     
/* 315 */     for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 316 */       if (!patDirs.elementAt(i).equals(""**"")) {
/* 317 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 321 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 339 */   public static boolean match(String pattern, String str) { return match(pattern, str, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean match(String pattern, String str, boolean isCaseSensitive) {
/* 361 */     char[] patArr = pattern.toCharArray();
/* 362 */     char[] strArr = str.toCharArray();
/* 363 */     int patIdxStart = 0;
/* 364 */     int patIdxEnd = patArr.length - 1;
/* 365 */     int strIdxStart = 0;
/* 366 */     int strIdxEnd = strArr.length - 1;
/*     */ 
/*     */     
/* 369 */     boolean containsStar = false;
/* 370 */     for (int i = 0; i < patArr.length; i++) {
/* 371 */       if (patArr[i] == '*') {
/* 372 */         containsStar = true;
/*     */         
/*     */         break;
/*     */       } 
/*     */     } 
/* 377 */     if (!containsStar) {
/*     */       
/* 379 */       if (patIdxEnd != strIdxEnd) {
/* 380 */         return false;
/*     */       }
/* 382 */       for (int i = 0; i <= patIdxEnd; i++) {
/* 383 */         char ch = patArr[i];
/* 384 */         if (ch != '?') {
/* 385 */           if (isCaseSensitive && ch != strArr[i]) {
/* 386 */             return false;
/*     */           }
/* 388 */           if (!isCaseSensitive && Character.toUpperCase(ch) != Character.toUpperCase(strArr[i]))
/*     */           {
/* 390 */             return false;
/*     */           }
/*     */         } 
/*     */       } 
/* 394 */       return true;
/*     */     } 
/*     */     
/* 397 */     if (patIdxEnd == 0) {
/* 398 */       return true;
/*     */     }
/*     */     
/*     */     char c;
/* 402 */     while ((c = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {
/* 403 */       if (c != '?') {
/* 404 */         if (isCaseSensitive && c != strArr[strIdxStart]) {
/* 405 */           return false;
/*     */         }
/* 407 */         if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxStart]))
/*     */         {
/* 409 */           return false;
/*     */         }
/*     */       } 
/* 412 */       patIdxStart++;
/* 413 */       strIdxStart++;
/*     */     } 
/* 415 */     if (strIdxStart > strIdxEnd) {
/*     */ 
/*     */       
/* 418 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 419 */         if (patArr[i] != '*') {
/* 420 */           return false;
/*     */         }
/*     */       } 
/* 423 */       return true;
/*     */     } 
/*     */ 
/*     */     
/* 427 */     while ((c = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {
/* 428 */       if (c != '?') {
/* 429 */         if (isCaseSensitive && c != strArr[strIdxEnd]) {
/* 430 */           return false;
/*     */         }
/* 432 */         if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxEnd]))
/*     */         {
/* 434 */           return false;
/*     */         }
/*     */       } 
/* 437 */       patIdxEnd--;
/* 438 */       strIdxEnd--;
/*     */     } 
/* 440 */     if (strIdxStart > strIdxEnd) {
/*     */ 
/*     */       
/* 443 */       for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 444 */         if (patArr[i] != '*') {
/* 445 */           return false;
/*     */         }
/*     */       } 
/* 448 */       return true;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 453 */     while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
/* 454 */       int patIdxTmp = -1;
/* 455 */       for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {
/* 456 */         if (patArr[i] == '*') {
/* 457 */           patIdxTmp = i;
/*     */           break;
/*     */         } 
/*     */       } 
/* 461 */       if (patIdxTmp == patIdxStart + 1) {
/*     */         
/* 463 */         patIdxStart++;
/*     */         
/*     */         continue;
/*     */       } 
/*     */       
/* 468 */       int patLength = patIdxTmp - patIdxStart - 1;
/* 469 */       int strLength = strIdxEnd - strIdxStart + 1;
/* 470 */       int foundIdx = -1;
/*     */       
/* 472 */       for (int i = 0; i <= strLength - patLength; ) {
/* 473 */         for (int j = 0; j < patLength; j++) {
/* 474 */           c = patArr[patIdxStart + j + 1];
/* 475 */           if (c != '?') {
/* 476 */             if (isCaseSensitive && c != strArr[strIdxStart + i + j]) {
/*     */               // Byte code: goto -> 544
/*     */             }
/* 479 */             if (!isCaseSensitive && Character.toUpperCase(c) != Character.toUpperCase(strArr[strIdxStart + i + j])) {
/*     */               i++;
/*     */               
/*     */               continue;
/*     */             } 
/*     */           } 
/*     */         } 
/* 486 */         foundIdx = strIdxStart + i;
/*     */         
/*     */         break;
/*     */       } 
/* 490 */       if (foundIdx == -1) {
/* 491 */         return false;
/*     */       }
/*     */       
/* 494 */       patIdxStart = patIdxTmp;
/* 495 */       strIdxStart = foundIdx + patLength;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 500 */     for (int i = patIdxStart; i <= patIdxEnd; i++) {
/* 501 */       if (patArr[i] != '*') {
/* 502 */         return false;
/*     */       }
/*     */     } 
/* 505 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector tokenizePath(String path) {
/* 517 */     Vector ret = new Vector();
/* 518 */     StringTokenizer st = new StringTokenizer(path, File.separator);
/* 519 */     while (st.hasMoreTokens()) {
/* 520 */       ret.addElement(st.nextToken());
/*     */     }
/* 522 */     return ret;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean isOutOfDate(File src, File target, int granularity) {
/* 541 */     if (!src.exists()) {
/* 542 */       return false;
/*     */     }
/* 544 */     if (!target.exists()) {
/* 545 */       return true;
/*     */     }
/* 547 */     if (src.lastModified() - granularity > target.lastModified()) {
/* 548 */       return true;
/*     */     }
/* 550 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\SelectorUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SelectSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SelectSelector
/*     */   extends AndSelector
/*     */ {
/*     */   public String toString() {
/*  84 */     StringBuffer buf = new StringBuffer();
/*  85 */     if (hasSelectors()) {
/*  86 */       buf.append(""{select: "");
/*  87 */       buf.append(super.toString());
/*  88 */       buf.append(""}"");
/*     */     } 
/*  90 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private SelectSelector getRef() {
/*  98 */     Object o = getCheckedRef(getClass(), ""SelectSelector"");
/*  99 */     return (SelectSelector)o;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean hasSelectors() {
/* 106 */     if (isReference()) {
/* 107 */       return getRef().hasSelectors();
/*     */     }
/* 109 */     return super.hasSelectors();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int selectorCount() {
/* 116 */     if (isReference()) {
/* 117 */       return getRef().selectorCount();
/*     */     }
/* 119 */     return super.selectorCount();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FileSelector[] getSelectors(Project p) {
/* 126 */     if (isReference()) {
/* 127 */       return getRef().getSelectors(p);
/*     */     }
/* 129 */     return super.getSelectors(p);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Enumeration selectorElements() {
/* 136 */     if (isReference()) {
/* 137 */       return getRef().selectorElements();
/*     */     }
/* 139 */     return super.selectorElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void appendSelector(FileSelector selector) {
/* 149 */     if (isReference()) {
/* 150 */       throw noChildrenAllowed();
/*     */     }
/* 152 */     super.appendSelector(selector);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 162 */     if (selectorCount() != 1)
/* 163 */       setError(""One and only one selector is allowed within the <select> tag""); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\SelectSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.types.selectors.SizeSelector,"/*     */ package org.apache.tools.ant.types.selectors;
/*     */ 
/*     */ import java.io.File;
/*     */ import org.apache.tools.ant.types.EnumeratedAttribute;
/*     */ import org.apache.tools.ant.types.Parameter;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SizeSelector
/*     */   extends BaseExtendSelector
/*     */ {
/*  71 */   private long size = -1L;
/*  72 */   private long multiplier = 1L;
/*  73 */   private long sizelimit = -1L;
/*  74 */   private int cmp = 2;
/*     */   
/*     */   public static final String SIZE_KEY = ""value"";
/*     */   
/*     */   public static final String UNITS_KEY = ""units"";
/*     */   
/*     */   public static final String WHEN_KEY = ""when"";
/*     */   
/*     */   public String toString() {
/*  83 */     StringBuffer buf = new StringBuffer(""{sizeselector value: "");
/*  84 */     buf.append(this.sizelimit);
/*  85 */     buf.append(""compare: "");
/*  86 */     if (this.cmp == 0) {
/*  87 */       buf.append(""less"");
/*     */     }
/*  89 */     else if (this.cmp == 1) {
/*  90 */       buf.append(""more"");
/*     */     } else {
/*  92 */       buf.append(""equal"");
/*     */     } 
/*  94 */     buf.append(""}"");
/*  95 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setValue(long size) {
/* 106 */     this.size = size;
/* 107 */     if (this.multiplier != 0L && size > -1L) {
/* 108 */       this.sizelimit = size * this.multiplier;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setUnits(ByteUnits units) {
/* 139 */     int i = units.getIndex();
/* 140 */     this.multiplier = 0L;
/* 141 */     if (i > -1 && i < 4) {
/* 142 */       this.multiplier = 1000L;
/*     */     }
/* 144 */     else if (i > 3 && i < 9) {
/* 145 */       this.multiplier = 1024L;
/*     */     }
/* 147 */     else if (i > 8 && i < 13) {
/* 148 */       this.multiplier = 1000000L;
/*     */     }
/* 150 */     else if (i > 12 && i < 18) {
/* 151 */       this.multiplier = 1048576L;
/*     */     }
/* 153 */     else if (i > 17 && i < 22) {
/* 154 */       this.multiplier = 1000000000L;
/*     */     }
/* 156 */     else if (i > 21 && i < 27) {
/* 157 */       this.multiplier = 1073741824L;
/*     */     }
/* 159 */     else if (i > 26 && i < 31) {
/* 160 */       this.multiplier = 1000000000000L;
/*     */     }
/* 162 */     else if (i > 30 && i < 36) {
/* 163 */       this.multiplier = 1099511627776L;
/*     */     } 
/* 165 */     if (this.multiplier > 0L && this.size > -1L) {
/* 166 */       this.sizelimit = this.size * this.multiplier;
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   public void setWhen(SizeComparisons cmp) { this.cmp = cmp.getIndex(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setParameters(Parameter[] parameters) {
/* 188 */     super.setParameters(parameters);
/* 189 */     if (parameters != null) {
/* 190 */       for (int i = 0; i < parameters.length; i++) {
/* 191 */         String paramname = parameters[i].getName();
/* 192 */         if (""value"".equalsIgnoreCase(paramname)) {
/*     */           try {
/* 194 */             setValue((new Long(parameters[i].getValue())).longValue());
/*     */           } catch (NumberFormatException nfe) {
/*     */             
/* 197 */             setError(""Invalid size setting "" + parameters[i].getValue());
/*     */           }
/*     */         
/*     */         }
/* 201 */         else if (""units"".equalsIgnoreCase(paramname)) {
/* 202 */           ByteUnits units = new ByteUnits();
/* 203 */           units.setValue(parameters[i].getValue());
/* 204 */           setUnits(units);
/*     */         }
/* 206 */         else if (""when"".equalsIgnoreCase(paramname)) {
/* 207 */           SizeComparisons cmp = new SizeComparisons();
/* 208 */           cmp.setValue(parameters[i].getValue());
/* 209 */           setWhen(cmp);
/*     */         } else {
/*     */           
/* 212 */           setError(""Invalid parameter "" + paramname);
/*     */         } 
/*     */       } 
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void verifySettings() {
/* 229 */     if (this.size < 0L) {
/* 230 */       setError(""The value attribute is required, and must be positive"");
/*     */     }
/* 232 */     else if (this.multiplier < 1L) {
/* 233 */       setError(""Invalid Units supplied, must be K,Ki,M,Mi,G,Gi,T,or Ti"");
/*     */     }
/* 235 */     else if (this.sizelimit < 0L) {
/* 236 */       setError(""Internal error: Code is not setting sizelimit correctly"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSelected(File basedir, String filename, File file) {
/* 252 */     validate();
/*     */ 
/*     */     
/* 255 */     if (file.isDirectory()) {
/* 256 */       return true;
/*     */     }
/* 258 */     if (this.cmp == 0) {
/* 259 */       return (file.length() < this.sizelimit);
/*     */     }
/* 261 */     if (this.cmp == 1) {
/* 262 */       return (file.length() > this.sizelimit);
/*     */     }
/*     */     
/* 265 */     return (file.length() == this.sizelimit);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class ByteUnits
/*     */     extends EnumeratedAttribute
/*     */   {
/* 291 */     public String[] getValues() { return new String[] { ""K"", ""k"", ""kilo"", ""KILO"", ""Ki"", ""KI"", ""ki"", ""kibi"", ""KIBI"", ""M"", ""m"", ""mega"", ""MEGA"", ""Mi"", ""MI"", ""mi"", ""mebi"", ""MEBI"", ""G"", ""g"", ""giga"", ""GIGA"", ""Gi"", ""GI"", ""gi"", ""gibi"", ""GIBI"", ""T"", ""t"", ""tera"", ""TERA"", ""Ti"", ""TI"", ""ti"", ""tebi"", ""TEBI"" }; }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static class SizeComparisons
/*     */     extends EnumeratedAttribute
/*     */   {
/* 308 */     public String[] getValues() { return new String[] { ""less"", ""more"", ""equal"" }; }
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\ant\types\selectors\SizeSelector.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.CollectionUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Dictionary;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CollectionUtils
/*     */ {
/*     */   public static boolean equals(Vector v1, Vector v2) {
/*  75 */     if (v1 == v2) {
/*  76 */       return true;
/*     */     }
/*     */     
/*  79 */     if (v1 == null || v2 == null) {
/*  80 */       return false;
/*     */     }
/*     */     
/*  83 */     if (v1.size() != v2.size()) {
/*  84 */       return false;
/*     */     }
/*     */     
/*  87 */     Enumeration e1 = v1.elements();
/*  88 */     Enumeration e2 = v2.elements();
/*  89 */     while (e1.hasMoreElements()) {
/*  90 */       if (!e1.nextElement().equals(e2.nextElement())) {
/*  91 */         return false;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  98 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static boolean equals(Dictionary d1, Dictionary d2) {
/* 109 */     if (d1 == d2) {
/* 110 */       return true;
/*     */     }
/*     */     
/* 113 */     if (d1 == null || d2 == null) {
/* 114 */       return false;
/*     */     }
/*     */     
/* 117 */     if (d1.size() != d2.size()) {
/* 118 */       return false;
/*     */     }
/*     */     
/* 121 */     Enumeration e1 = d1.keys();
/* 122 */     while (e1.hasMoreElements()) {
/* 123 */       Object key = e1.nextElement();
/* 124 */       Object value1 = d1.get(key);
/* 125 */       Object value2 = d2.get(key);
/* 126 */       if (value2 == null || !value1.equals(value2)) {
/* 127 */         return false;
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 134 */     return true;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\CollectionUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.DateUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.text.ChoiceFormat;
/*     */ import java.text.DateFormat;
/*     */ import java.text.MessageFormat;
/*     */ import java.text.SimpleDateFormat;
/*     */ import java.util.Calendar;
/*     */ import java.util.Date;
/*     */ import java.util.TimeZone;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class DateUtils
/*     */ {
/*     */   public static final String ISO8601_DATETIME_PATTERN = ""yyyy-MM-dd'T'HH:mm:ss"";
/*     */   public static final String ISO8601_DATE_PATTERN = ""yyyy-MM-dd"";
/*     */   public static final String ISO8601_TIME_PATTERN = ""HH:mm:ss"";
/*  99 */   private static final MessageFormat MINUTE_SECONDS = new MessageFormat(""{0}{1}"");
/*     */ 
/*     */   
/* 102 */   private static final double[] LIMITS = new double[] { 0.0D, 1.0D, 2.0D };
/*     */   
/* 104 */   private static final String[] MINUTES_PART = new String[] { """", ""1 minute "", ""{0,number} minutes "" };
/*     */ 
/*     */   
/* 107 */   private static final String[] SECONDS_PART = new String[] { ""0 seconds"", ""1 second"", ""{1,number} seconds"" };
/*     */ 
/*     */   
/* 110 */   private static final ChoiceFormat MINUTES_FORMAT = new ChoiceFormat(LIMITS, MINUTES_PART);
/*     */ 
/*     */   
/* 113 */   private static final ChoiceFormat SECONDS_FORMAT = new ChoiceFormat(LIMITS, SECONDS_PART);
/*     */ 
/*     */   
/*     */   static  {
/* 117 */     MINUTE_SECONDS.setFormat(0, MINUTES_FORMAT);
/* 118 */     MINUTE_SECONDS.setFormat(1, SECONDS_FORMAT);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 133 */   public static String format(long date, String pattern) { return format(new Date(date), pattern); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String format(Date date, String pattern) {
/* 144 */     DateFormat df = createDateFormat(pattern);
/* 145 */     return df.format(date);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String formatElapsedTime(long millis) {
/* 162 */     long seconds = millis / 1000L;
/* 163 */     long minutes = seconds / 60L;
/* 164 */     Object[] args = { new Long(minutes), new Long(seconds % 60L) };
/* 165 */     return MINUTE_SECONDS.format(args);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static DateFormat createDateFormat(String pattern) {
/* 174 */     SimpleDateFormat sdf = new SimpleDateFormat(pattern);
/* 175 */     TimeZone gmt = TimeZone.getTimeZone(""GMT"");
/* 176 */     sdf.setTimeZone(gmt);
/* 177 */     sdf.setLenient(true);
/* 178 */     return sdf;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getPhaseOfMoon(Calendar cal) {
/* 214 */     int dayOfTheYear = cal.get(6);
/* 215 */     int yearInMetonicCycle = (cal.get(1) - 1900) % 19 + 1;
/* 216 */     int epact = (11 * yearInMetonicCycle + 18) % 30;
/* 217 */     if ((epact == 25 && yearInMetonicCycle > 11) || epact == 24) {
/* 218 */       epact++;
/*     */     }
/* 220 */     return ((dayOfTheYear + epact) * 6 + 11) % 177 / 22 & 0x7;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\DateUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.DOMElementWriter,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Writer;
/*     */ import org.w3c.dom.Attr;
/*     */ import org.w3c.dom.Element;
/*     */ import org.w3c.dom.NamedNodeMap;
/*     */ import org.w3c.dom.Node;
/*     */ import org.w3c.dom.NodeList;
/*     */ import org.w3c.dom.Text;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class DOMElementWriter
/*     */ {
/*  83 */   private static String lSep = System.getProperty(""line.separator"");
/*  84 */   private StringBuffer sb = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  90 */   protected String[] knownEntities = new String[] { ""gt"", ""amp"", ""lt"", ""apos"", ""quot"" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(Element root, OutputStream out) throws IOException {
/* 102 */     Writer wri = new OutputStreamWriter(out, ""UTF8"");
/* 103 */     wri.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"");
/* 104 */     write(root, wri, 0, ""  "");
/* 105 */     wri.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(Element element, Writer out, int indent, String indentWith) throws IOException {
/* 121 */     for (int i = 0; i < indent; i++) {
/* 122 */       out.write(indentWith);
/*     */     }
/*     */ 
/*     */     
/* 126 */     out.write(""<"");
/* 127 */     out.write(element.getTagName());
/*     */ 
/*     */     
/* 130 */     NamedNodeMap attrs = element.getAttributes();
/* 131 */     for (int i = 0; i < attrs.getLength(); i++) {
/* 132 */       Attr attr = (Attr)attrs.item(i);
/* 133 */       out.write("" "");
/* 134 */       out.write(attr.getName());
/* 135 */       out.write(""=\"""");
/* 136 */       out.write(encode(attr.getValue()));
/* 137 */       out.write(""\"""");
/*     */     } 
/* 139 */     out.write("">"");
/*     */ 
/*     */     
/* 142 */     boolean hasChildren = false;
/* 143 */     NodeList children = element.getChildNodes();
/* 144 */     for (int i = 0; i < children.getLength(); i++) {
/* 145 */       String data; Node child = children.item(i);
/*     */       
/* 147 */       switch (child.getNodeType()) {
/*     */         
/*     */         case 1:
/* 150 */           if (!hasChildren) {
/* 151 */             out.write(lSep);
/* 152 */             hasChildren = true;
/*     */           } 
/* 154 */           write((Element)child, out, indent + 1, indentWith);
/*     */           break;
/*     */         
/*     */         case 3:
/* 158 */           out.write(encode(child.getNodeValue()));
/*     */           break;
/*     */         
/*     */         case 4:
/* 162 */           out.write(""<![CDATA["");
/* 163 */           out.write(encodedata(((Text)child).getData()));
/* 164 */           out.write(""]]>"");
/*     */           break;
/*     */         
/*     */         case 5:
/* 168 */           out.write(38);
/* 169 */           out.write(child.getNodeName());
/* 170 */           out.write(59);
/*     */           break;
/*     */         
/*     */         case 7:
/* 174 */           out.write(""<?"");
/* 175 */           out.write(child.getNodeName());
/* 176 */           data = child.getNodeValue();
/* 177 */           if (data != null && data.length() > 0) {
/* 178 */             out.write(32);
/* 179 */             out.write(data);
/*     */           } 
/* 181 */           out.write(""?>"");
/*     */           break;
/*     */       } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     } 
/* 189 */     if (hasChildren) {
/* 190 */       for (int i = 0; i < indent; i++) {
/* 191 */         out.write(indentWith);
/*     */       }
/*     */     }
/*     */ 
/*     */     
/* 196 */     out.write(""</"");
/* 197 */     out.write(element.getTagName());
/* 198 */     out.write("">"");
/* 199 */     out.write(lSep);
/* 200 */     out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encode(String value) {
/* 208 */     this.sb.setLength(0);
/* 209 */     for (int i = 0; i < value.length(); i++) {
/* 210 */       int nextSemi; char c = value.charAt(i);
/* 211 */       switch (c) {
/*     */         case '<':
/* 213 */           this.sb.append(""&lt;"");
/*     */           break;
/*     */         case '>':
/* 216 */           this.sb.append(""&gt;"");
/*     */           break;
/*     */         case '\'':
/* 219 */           this.sb.append(""&apos;"");
/*     */           break;
/*     */         case '""':
/* 222 */           this.sb.append(""&quot;"");
/*     */           break;
/*     */         case '&':
/* 225 */           nextSemi = value.indexOf("";"", i);
/* 226 */           if (nextSemi < 0 || !isReference(value.substring(i, nextSemi + 1))) {
/*     */             
/* 228 */             this.sb.append(""&amp;""); break;
/*     */           } 
/* 230 */           this.sb.append('&');
/*     */           break;
/*     */         
/*     */         default:
/* 234 */           if (isLegalCharacter(c)) {
/* 235 */             this.sb.append(c);
/*     */           }
/*     */           break;
/*     */       } 
/*     */     } 
/* 240 */     return this.sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String encodedata(String value) {
/* 250 */     this.sb.setLength(0);
/* 251 */     for (int i = 0; i < value.length(); i++) {
/* 252 */       char c = value.charAt(i);
/* 253 */       if (isLegalCharacter(c)) {
/* 254 */         this.sb.append(c);
/*     */       }
/*     */     } 
/* 257 */     return this.sb.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isReference(String ent) {
/* 264 */     if (ent.charAt(0) != '&' || !ent.endsWith("";"")) {
/* 265 */       return false;
/*     */     }
/*     */     
/* 268 */     if (ent.charAt(1) == '#') {
/* 269 */       if (ent.charAt(2) == 'x') {
/*     */         try {
/* 271 */           Integer.parseInt(ent.substring(3, ent.length() - 1), 16);
/* 272 */           return true;
/*     */         } catch (NumberFormatException nfe) {
/* 274 */           return false;
/*     */         } 
/*     */       }
/*     */       try {
/* 278 */         Integer.parseInt(ent.substring(2, ent.length() - 1));
/* 279 */         return true;
/*     */       } catch (NumberFormatException nfe) {
/* 281 */         return false;
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 286 */     String name = ent.substring(1, ent.length() - 1);
/* 287 */     for (int i = 0; i < this.knownEntities.length; i++) {
/* 288 */       if (name.equals(this.knownEntities[i])) {
/* 289 */         return true;
/*     */       }
/*     */     } 
/* 292 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isLegalCharacter(char c) {
/* 305 */     if (c == '\t' || c == '\n' || c == '\r')
/* 306 */       return true; 
/* 307 */     if (c < ' ')
/* 308 */       return false; 
/* 309 */     if (c <= '퟿')
/* 310 */       return true; 
/* 311 */     if (c < '')
/* 312 */       return false; 
/* 313 */     if (c <= '�') {
/* 314 */       return true;
/*     */     }
/* 316 */     return false;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\DOMElementWriter.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileNameMapper,"package org.apache.tools.ant.util;
public interface FileNameMapper {
  void setFrom(String paramString);
  void setTo(String paramString);
  String[] mapFileName(String paramString);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\FileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FileUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.BufferedReader;
/*     */ import java.io.BufferedWriter;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.io.Reader;
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.net.MalformedURLException;
/*     */ import java.net.URL;
/*     */ import java.text.DecimalFormat;
/*     */ import java.util.Random;
/*     */ import java.util.Stack;
/*     */ import java.util.StringTokenizer;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ import org.apache.tools.ant.filters.util.ChainReaderHelper;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ import org.apache.tools.ant.types.FilterSetCollection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FileUtils
/*     */ {
/* 102 */   private static Random rand = new Random(System.currentTimeMillis());
/* 103 */   private static Object lockReflection = new Object();
/* 104 */   private static Method setLastModified = null;
/*     */   
/* 106 */   private boolean onNetWare = Os.isFamily(""netware"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public static FileUtils newFileUtils() { return new FileUtils(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public URL getFileURL(File file) throws MalformedURLException {
/* 129 */     String uri = ""file:"" + file.getAbsolutePath().replace('\\', '/');
/* 130 */     for (int i = uri.indexOf('#'); i != -1; i = uri.indexOf('#')) {
/* 131 */       uri = uri.substring(0, i) + ""%23"" + uri.substring(i + 1);
/*     */     }
/* 133 */     if (file.isDirectory()) {
/* 134 */       uri = uri + ""/"";
/*     */     }
/* 136 */     return new URL(uri);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void copyFile(String sourceFile, String destFile) throws IOException { copyFile(new File(sourceFile), new File(destFile), null, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 157 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 169 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 185 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, preserveLastModified); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 204 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified, String encoding) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, overwrite, preserveLastModified, encoding); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 225 */   public void copyFile(String sourceFile, String destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String encoding, Project project) throws IOException { copyFile(new File(sourceFile), new File(destFile), filters, filterChains, overwrite, preserveLastModified, encoding, project); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 237 */   public void copyFile(File sourceFile, File destFile) throws IOException { copyFile(sourceFile, destFile, null, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 248 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters) throws IOException { copyFile(sourceFile, destFile, filters, false, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 260 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite) throws IOException { copyFile(sourceFile, destFile, filters, overwrite, false); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified) throws IOException { copyFile(sourceFile, destFile, filters, overwrite, preserveLastModified, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 295 */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, boolean overwrite, boolean preserveLastModified, String encoding) throws IOException { copyFile(sourceFile, destFile, filters, null, overwrite, preserveLastModified, encoding, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, String encoding, Project project) throws IOException {
/* 317 */     if (overwrite || !destFile.exists() || destFile.lastModified() < sourceFile.lastModified()) {
/*     */ 
/*     */       
/* 320 */       if (destFile.exists() && destFile.isFile()) {
/* 321 */         destFile.delete();
/*     */       }
/*     */ 
/*     */ 
/*     */       
/* 326 */       File parent = getParentFile(destFile);
/* 327 */       if (!parent.exists()) {
/* 328 */         parent.mkdirs();
/*     */       }
/*     */       
/* 331 */       boolean filterSetsAvailable = (filters != null && filters.hasFilters());
/*     */       
/* 333 */       boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0);
/*     */ 
/*     */       
/* 336 */       if (filterSetsAvailable || filterChainsAvailable) {
/* 337 */         BufferedReader in = null;
/* 338 */         BufferedWriter out = null;
/*     */         
/*     */         try {
/* 341 */           if (encoding == null) {
/* 342 */             in = new BufferedReader(new FileReader(sourceFile));
/* 343 */             out = new BufferedWriter(new FileWriter(destFile));
/*     */           } else {
/* 345 */             in = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), encoding));
/*     */ 
/*     */ 
/*     */             
/* 349 */             out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(destFile), encoding));
/*     */           } 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 355 */           if (filterChainsAvailable) {
/* 356 */             ChainReaderHelper crh = new ChainReaderHelper();
/* 357 */             crh.setBufferSize(8192);
/* 358 */             crh.setPrimaryReader(in);
/* 359 */             crh.setFilterChains(filterChains);
/* 360 */             crh.setProject(project);
/* 361 */             Reader rdr = crh.getAssembledReader();
/* 362 */             in = new BufferedReader(rdr);
/*     */           } 
/*     */ 
/*     */           
/* 366 */           String newline = null;
/* 367 */           String line = in.readLine();
/* 368 */           while (line != null) {
/* 369 */             if (line.length() == 0) {
/* 370 */               out.newLine();
/*     */             } else {
/* 372 */               if (filterSetsAvailable) {
/* 373 */                 newline = filters.replaceTokens(line);
/*     */               } else {
/* 375 */                 newline = line;
/*     */               } 
/* 377 */               out.write(newline);
/* 378 */               out.newLine();
/*     */             } 
/* 380 */             line = in.readLine();
/*     */           } 
/*     */         } finally {
/* 383 */           if (out != null) {
/* 384 */             out.close();
/*     */           }
/* 386 */           if (in != null) {
/* 387 */             in.close();
/*     */           }
/*     */         } 
/*     */       } else {
/* 391 */         FileInputStream in = null;
/* 392 */         FileOutputStream out = null;
/*     */         try {
/* 394 */           in = new FileInputStream(sourceFile);
/* 395 */           out = new FileOutputStream(destFile);
/*     */           
/* 397 */           byte[] buffer = new byte[8192];
/* 398 */           int count = 0;
/*     */           do {
/* 400 */             out.write(buffer, 0, count);
/* 401 */             count = in.read(buffer, 0, buffer.length);
/* 402 */           } while (count != -1);
/*     */         } finally {
/* 404 */           if (out != null) {
/* 405 */             out.close();
/*     */           }
/* 407 */           if (in != null) {
/* 408 */             in.close();
/*     */           }
/*     */         } 
/*     */       } 
/*     */       
/* 413 */       if (preserveLastModified) {
/* 414 */         setFileLastModified(destFile, sourceFile.lastModified());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected final Method getSetLastModified() {
/* 423 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/* 424 */       return null;
/*     */     }
/* 426 */     if (setLastModified == null) {
/* 427 */       synchronized (lockReflection) {
/* 428 */         if (setLastModified == null) {
/*     */           try {
/* 430 */             setLastModified = File.class.getMethod(""setLastModified"", new Class[] { long.class });
/*     */           }
/*     */           catch (NoSuchMethodException nse) {
/*     */             
/* 434 */             throw new BuildException(""File.setlastModified not in JDK > 1.1?"", nse);
/*     */           } 
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 440 */     return setLastModified;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFileLastModified(File file, long time) throws BuildException {
/* 447 */     if (JavaEnvUtils.isJavaVersion(""1.1"")) {
/*     */       return;
/*     */     }
/* 450 */     Long[] times = new Long[1];
/* 451 */     if (time < 0L) {
/* 452 */       times[0] = new Long(System.currentTimeMillis());
/*     */     } else {
/* 454 */       times[0] = new Long(time);
/*     */     } 
/*     */     
/*     */     try {
/* 458 */       getSetLastModified().invoke(file, (Object[])times);
/*     */     } catch (InvocationTargetException ite) {
/* 460 */       Throwable nested = ite.getTargetException();
/* 461 */       throw new BuildException(""Exception setting the modification time of "" + file, nested);
/*     */     } catch (Throwable other) {
/*     */       
/* 464 */       throw new BuildException(""Exception setting the modification time of "" + file, other);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File resolveFile(File file, String filename) {
/* 486 */     filename = filename.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */ 
/*     */ 
/*     */     
/* 490 */     if (!this.onNetWare) {
/* 491 */       if (filename.startsWith(File.separator) || (filename.length() >= 2 && Character.isLetter(filename.charAt(0)) && filename.charAt(1) == ':'))
/*     */       {
/*     */ 
/*     */         
/* 495 */         return normalize(filename);
/*     */       
/*     */       }
/*     */     }
/*     */     else {
/*     */       
/* 501 */       int colon = filename.indexOf("":"");
/* 502 */       if (filename.startsWith(File.separator) || colon > -1)
/*     */       {
/* 504 */         return normalize(filename);
/*     */       }
/*     */     } 
/*     */     
/* 508 */     if (file == null) {
/* 509 */       return new File(filename);
/*     */     }
/*     */     
/* 512 */     File helpFile = new File(file.getAbsolutePath());
/* 513 */     StringTokenizer tok = new StringTokenizer(filename, File.separator);
/* 514 */     while (tok.hasMoreTokens()) {
/* 515 */       String part = tok.nextToken();
/* 516 */       if (part.equals("".."")) {
/* 517 */         helpFile = getParentFile(helpFile);
/* 518 */         if (helpFile == null) {
/* 519 */           String msg = ""The file or path you specified ("" + filename + "") is invalid relative to "" + file.getPath();
/*     */ 
/*     */           
/* 522 */           throw new BuildException(msg);
/*     */         }  continue;
/* 524 */       }  if (part.equals(""."")) {
/*     */         continue;
/*     */       }
/* 527 */       helpFile = new File(helpFile, part);
/*     */     } 
/*     */ 
/*     */     
/* 531 */     return new File(helpFile.getAbsolutePath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File normalize(String path) {
/* 550 */     String orig = path;
/*     */     
/* 552 */     path = path.replace('/', File.separatorChar).replace('\\', File.separatorChar);
/*     */ 
/*     */ 
/*     */     
/* 556 */     int colon = path.indexOf("":"");
/*     */     
/* 558 */     if (!this.onNetWare) {
/* 559 */       if (!path.startsWith(File.separator) && (path.length() < 2 || !Character.isLetter(path.charAt(0)) || colon != 1))
/*     */       {
/*     */ 
/*     */         
/* 563 */         String msg = path + "" is not an absolute path"";
/* 564 */         throw new BuildException(msg);
/*     */       }
/*     */     
/* 567 */     } else if (!path.startsWith(File.separator) && colon == -1) {
/*     */       
/* 569 */       String msg = path + "" is not an absolute path"";
/* 570 */       throw new BuildException(msg);
/*     */     } 
/*     */ 
/*     */     
/* 574 */     boolean dosWithDrive = false;
/* 575 */     String root = null;
/*     */     
/* 577 */     if ((!this.onNetWare && path.length() >= 2 && Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (this.onNetWare && colon > -1)) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 583 */       dosWithDrive = true;
/*     */       
/* 585 */       char[] ca = path.replace('/', '\\').toCharArray();
/* 586 */       StringBuffer sbRoot = new StringBuffer();
/* 587 */       for (int i = 0; i < colon; i++) {
/* 588 */         sbRoot.append(Character.toUpperCase(ca[i]));
/*     */       }
/* 590 */       sbRoot.append(':');
/* 591 */       if (colon + 1 < path.length()) {
/* 592 */         sbRoot.append(File.separatorChar);
/*     */       }
/* 594 */       root = sbRoot.toString();
/*     */ 
/*     */       
/* 597 */       StringBuffer sbPath = new StringBuffer();
/* 598 */       for (int i = colon + 1; i < ca.length; i++) {
/* 599 */         if (ca[i] != '\\' || (ca[i] == '\\' && ca[i - 1] != '\\'))
/*     */         {
/* 601 */           sbPath.append(ca[i]);
/*     */         }
/*     */       } 
/* 604 */       path = sbPath.toString().replace('\\', File.separatorChar);
/*     */     
/*     */     }
/* 607 */     else if (path.length() == 1) {
/* 608 */       root = File.separator;
/* 609 */       path = """";
/* 610 */     } else if (path.charAt(1) == File.separatorChar) {
/*     */       
/* 612 */       root = File.separator + File.separator;
/* 613 */       path = path.substring(2);
/*     */     } else {
/* 615 */       root = File.separator;
/* 616 */       path = path.substring(1);
/*     */     } 
/*     */ 
/*     */     
/* 620 */     Stack s = new Stack();
/* 621 */     s.push(root);
/* 622 */     StringTokenizer tok = new StringTokenizer(path, File.separator);
/* 623 */     while (tok.hasMoreTokens()) {
/* 624 */       String thisToken = tok.nextToken();
/* 625 */       if (""."".equals(thisToken))
/*     */         continue; 
/* 627 */       if ("".."".equals(thisToken)) {
/* 628 */         if (s.size() < 2) {
/* 629 */           throw new BuildException(""Cannot resolve path "" + orig);
/*     */         }
/* 631 */         s.pop();
/*     */         continue;
/*     */       } 
/* 634 */       s.push(thisToken);
/*     */     } 
/*     */ 
/*     */     
/* 638 */     StringBuffer sb = new StringBuffer();
/* 639 */     for (int i = 0; i < s.size(); i++) {
/* 640 */       if (i > 1)
/*     */       {
/*     */         
/* 643 */         sb.append(File.separatorChar);
/*     */       }
/* 645 */       sb.append(s.elementAt(i));
/*     */     } 
/*     */ 
/*     */     
/* 649 */     path = sb.toString();
/* 650 */     if (dosWithDrive) {
/* 651 */       path = path.replace('/', '\\');
/*     */     }
/* 653 */     return new File(path);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File createTempFile(String prefix, String suffix, File parentDir) {
/* 676 */     File result = null;
/* 677 */     String parent = null;
/* 678 */     if (parentDir != null) {
/* 679 */       parent = parentDir.getPath();
/*     */     }
/* 681 */     DecimalFormat fmt = new DecimalFormat(""#####"");
/* 682 */     synchronized (rand) {
/*     */       do {
/* 684 */         result = new File(parent, prefix + fmt.format(rand.nextInt()) + suffix);
/*     */       
/*     */       }
/* 687 */       while (result.exists());
/*     */     } 
/* 689 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean contentEquals(File f1, File f2) throws IOException {
/* 703 */     if (f1.exists() != f2.exists()) {
/* 704 */       return false;
/*     */     }
/*     */     
/* 707 */     if (!f1.exists())
/*     */     {
/* 709 */       return true;
/*     */     }
/*     */     
/* 712 */     if (f1.isDirectory() || f2.isDirectory())
/*     */     {
/* 714 */       return false;
/*     */     }
/*     */     
/* 717 */     if (f1.equals(f2))
/*     */     {
/* 719 */       return true;
/*     */     }
/*     */     
/* 722 */     if (f1.length() != f2.length())
/*     */     {
/* 724 */       return false;
/*     */     }
/*     */     
/* 727 */     InputStream in1 = null;
/* 728 */     InputStream in2 = null;
/*     */     try {
/* 730 */       in1 = new BufferedInputStream(new FileInputStream(f1));
/* 731 */       in2 = new BufferedInputStream(new FileInputStream(f2));
/*     */       
/* 733 */       int expectedByte = in1.read();
/* 734 */       while (expectedByte != -1) {
/* 735 */         if (expectedByte != in2.read()) {
/* 736 */           return false;
/*     */         }
/* 738 */         expectedByte = in1.read();
/*     */       } 
/* 740 */       if (in2.read() != -1) {
/* 741 */         return false;
/*     */       }
/* 743 */       return true;
/*     */     } finally {
/* 745 */       if (in1 != null) {
/*     */         try {
/* 747 */           in1.close();
/* 748 */         } catch (IOException e) {}
/*     */       }
/* 750 */       if (in2 != null) {
/*     */         try {
/* 752 */           in2.close();
/* 753 */         } catch (IOException e) {}
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File getParentFile(File f) {
/* 764 */     if (f != null) {
/* 765 */       String p = f.getParent();
/* 766 */       if (p != null) {
/* 767 */         return new File(p);
/*     */       }
/*     */     } 
/* 770 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 777 */   public static final String readFully(Reader rdr) throws IOException { return readFully(rdr, 8192); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String readFully(Reader rdr, int bufferSize) throws IOException {
/* 784 */     if (bufferSize <= 0) {
/* 785 */       throw new IllegalArgumentException(""Buffer size must be greater than 0"");
/*     */     }
/*     */     
/* 788 */     char[] buffer = new char[bufferSize];
/* 789 */     int bufferLength = 0;
/* 790 */     String text = null;
/* 791 */     StringBuffer textBuffer = null;
/* 792 */     while (bufferLength != -1) {
/* 793 */       bufferLength = rdr.read(buffer);
/* 794 */       if (bufferLength != -1) {
/* 795 */         if (textBuffer == null) {
/* 796 */           textBuffer = new StringBuffer(new String(buffer, 0, bufferLength));
/*     */           continue;
/*     */         } 
/* 799 */         textBuffer.append(new String(buffer, 0, bufferLength));
/*     */       } 
/*     */     } 
/*     */     
/* 803 */     if (textBuffer != null) {
/* 804 */       text = textBuffer.toString();
/*     */     }
/* 806 */     return text;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean createNewFile(File f) throws IOException {
/* 818 */     if (f != null) {
/* 819 */       if (f.exists()) {
/* 820 */         return false;
/*     */       }
/*     */       
/* 823 */       FileOutputStream fos = null;
/*     */       try {
/* 825 */         fos = new FileOutputStream(f);
/* 826 */         fos.write(new byte[0]);
/*     */       } finally {
/* 828 */         if (fos != null) {
/* 829 */           fos.close();
/*     */         }
/*     */       } 
/*     */       
/* 833 */       return true;
/*     */     } 
/* 835 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isSymbolicLink(File parent, String name) throws IOException {
/* 852 */     File resolvedParent = new File(parent.getCanonicalPath());
/* 853 */     File toTest = new File(resolvedParent, name);
/* 854 */     return !toTest.getAbsolutePath().equals(toTest.getCanonicalPath());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String removeLeadingPath(File leading, File path) {
/* 872 */     String l = normalize(leading.getAbsolutePath()).getAbsolutePath() + File.separator;
/*     */     
/* 874 */     String p = normalize(path.getAbsolutePath()).getAbsolutePath();
/* 875 */     if (p.startsWith(l)) {
/* 876 */       return p.substring(l.length());
/*     */     }
/* 878 */     return p;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\FileUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.FlatFileNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class FlatFileNameMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String from) {}
/*    */   
/*    */   public void setTo(String to) {}
/*    */   
/* 83 */   public String[] mapFileName(String sourceFileName) { return new String[] { (new File(sourceFileName)).getName() }; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\FlatFileNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.GlobPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GlobPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  75 */   protected String fromPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   protected String fromPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int prefixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int postfixLength;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  95 */   protected String toPrefix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 100 */   protected String toPostfix = null;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String from) {
/* 106 */     int index = from.lastIndexOf(""*"");
/* 107 */     if (index == -1) {
/* 108 */       this.fromPrefix = from;
/* 109 */       this.fromPostfix = """";
/*     */     } else {
/* 111 */       this.fromPrefix = from.substring(0, index);
/* 112 */       this.fromPostfix = from.substring(index + 1);
/*     */     } 
/* 114 */     this.prefixLength = this.fromPrefix.length();
/* 115 */     this.postfixLength = this.fromPostfix.length();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setTo(String to) {
/* 122 */     int index = to.lastIndexOf(""*"");
/* 123 */     if (index == -1) {
/* 124 */       this.toPrefix = to;
/* 125 */       this.toPostfix = """";
/*     */     } else {
/* 127 */       this.toPrefix = to.substring(0, index);
/* 128 */       this.toPostfix = to.substring(index + 1);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String sourceFileName) {
/* 138 */     if (this.fromPrefix == null || !sourceFileName.startsWith(this.fromPrefix) || !sourceFileName.endsWith(this.fromPostfix))
/*     */     {
/*     */       
/* 141 */       return null;
/*     */     }
/* 143 */     return new String[] { this.toPrefix + extractVariablePart(sourceFileName) + this.toPostfix };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 153 */   protected String extractVariablePart(String name) { return name.substring(this.prefixLength, name.length() - this.postfixLength); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\GlobPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.IdentityMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class IdentityMapper
/*    */   implements FileNameMapper
/*    */ {
/*    */   public void setFrom(String from) {}
/*    */   
/*    */   public void setTo(String to) {}
/*    */   
/* 81 */   public String[] mapFileName(String sourceFileName) { return new String[] { sourceFileName }; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\IdentityMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.JavaEnvUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JavaEnvUtils
/*     */ {
/*  71 */   private static final boolean isDos = Os.isFamily(""dos"");
/*     */   
/*  73 */   private static final boolean isNetware = Os.isName(""netware"");
/*     */   
/*  75 */   private static final boolean isAix = Os.isName(""aix"");
/*     */ 
/*     */   
/*  78 */   private static final String javaHome = System.getProperty(""java.home"");
/*     */ 
/*     */   
/*  81 */   private static final FileUtils fileUtils = FileUtils.newFileUtils();
/*     */ 
/*     */ 
/*     */   
/*     */   private static String javaVersion;
/*     */ 
/*     */ 
/*     */   
/*     */   private static int javaVersionNumber;
/*     */ 
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_0 = ""1.0"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_1 = ""1.1"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_2 = ""1.2"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_3 = ""1.3"";
/*     */ 
/*     */   
/*     */   public static final String JAVA_1_4 = ""1.4"";
/*     */ 
/*     */   
/*     */   private static Vector jrePackages;
/*     */ 
/*     */ 
/*     */   
/*     */   static  {
/*     */     try {
/* 114 */       javaVersion = ""1.0"";
/* 115 */       javaVersionNumber = 10;
/* 116 */       Class.forName(""java.lang.Void"");
/* 117 */       javaVersion = ""1.1"";
/* 118 */       javaVersionNumber++;
/* 119 */       Class.forName(""java.lang.ThreadLocal"");
/* 120 */       javaVersion = ""1.2"";
/* 121 */       javaVersionNumber++;
/* 122 */       Class.forName(""java.lang.StrictMath"");
/* 123 */       javaVersion = ""1.3"";
/* 124 */       javaVersionNumber++;
/* 125 */       Class.forName(""java.lang.CharSequence"");
/* 126 */       javaVersion = ""1.4"";
/* 127 */       javaVersionNumber++;
/* 128 */     } catch (ClassNotFoundException cnfe) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public static String getJavaVersion() { return javaVersion; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 151 */   public static boolean isJavaVersion(String version) { return (javaVersion == version); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getJreExecutable(String command) {
/* 172 */     if (isNetware)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 177 */       return command;
/*     */     }
/*     */     
/* 180 */     File jExecutable = null;
/*     */     
/* 182 */     if (isAix)
/*     */     {
/*     */       
/* 185 */       jExecutable = findInDir(javaHome + ""/sh"", command);
/*     */     }
/*     */     
/* 188 */     if (jExecutable == null) {
/* 189 */       jExecutable = findInDir(javaHome + ""/bin"", command);
/*     */     }
/*     */     
/* 192 */     if (jExecutable != null) {
/* 193 */       return jExecutable.getAbsolutePath();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 198 */     return addExtension(command);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getJdkExecutable(String command) {
/* 212 */     if (isNetware)
/*     */     {
/*     */ 
/*     */ 
/*     */       
/* 217 */       return command;
/*     */     }
/*     */     
/* 220 */     File jExecutable = null;
/*     */     
/* 222 */     if (isAix)
/*     */     {
/*     */       
/* 225 */       jExecutable = findInDir(javaHome + ""/../sh"", command);
/*     */     }
/*     */     
/* 228 */     if (jExecutable == null) {
/* 229 */       jExecutable = findInDir(javaHome + ""/../bin"", command);
/*     */     }
/*     */     
/* 232 */     if (jExecutable != null) {
/* 233 */       return jExecutable.getAbsolutePath();
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 238 */     return getJreExecutable(command);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   private static String addExtension(String command) { return command + (isDos ? "".exe"" : """"); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static File findInDir(String dirName, String commandName) {
/* 259 */     File dir = fileUtils.normalize(dirName);
/* 260 */     File executable = null;
/* 261 */     if (dir.exists()) {
/* 262 */       executable = new File(dir, addExtension(commandName));
/* 263 */       if (!executable.exists()) {
/* 264 */         executable = null;
/*     */       }
/*     */     } 
/* 267 */     return executable;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void buildJrePackages() {
/* 276 */     jrePackages = new Vector();
/* 277 */     switch (javaVersionNumber) {
/*     */       case 14:
/* 279 */         jrePackages.addElement(""org.apache.crimson"");
/* 280 */         jrePackages.addElement(""org.apache.xalan"");
/* 281 */         jrePackages.addElement(""org.apache.xml"");
/* 282 */         jrePackages.addElement(""org.apache.xpath"");
/* 283 */         jrePackages.addElement(""org.ietf.jgss"");
/* 284 */         jrePackages.addElement(""org.w3c.dom"");
/* 285 */         jrePackages.addElement(""org.xml.sax"");
/*     */       
/*     */       case 13:
/* 288 */         jrePackages.addElement(""org.omg"");
/* 289 */         jrePackages.addElement(""com.sun.corba"");
/* 290 */         jrePackages.addElement(""com.sun.jndi"");
/* 291 */         jrePackages.addElement(""com.sun.media"");
/* 292 */         jrePackages.addElement(""com.sun.naming"");
/* 293 */         jrePackages.addElement(""com.sun.org.omg"");
/* 294 */         jrePackages.addElement(""com.sun.rmi"");
/* 295 */         jrePackages.addElement(""sunw.io"");
/* 296 */         jrePackages.addElement(""sunw.util"");
/*     */       
/*     */       case 12:
/* 299 */         jrePackages.addElement(""com.sun.java"");
/* 300 */         jrePackages.addElement(""com.sun.image"");
/*     */         break;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 306 */     jrePackages.addElement(""sun."");
/* 307 */     jrePackages.addElement(""java"");
/* 308 */     jrePackages.addElement(""javax"");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector getJrePackageTestCases() {
/* 318 */     Vector tests = new Vector();
/* 319 */     tests.addElement(""java.lang.Object"");
/* 320 */     switch (javaVersionNumber) {
/*     */       case 14:
/* 322 */         tests.addElement(""sun.audio.AudioPlayer"");
/* 323 */         tests.addElement(""org.apache.crimson.parser.ContentModel"");
/* 324 */         tests.addElement(""org.apache.xalan.processor.ProcessorImport"");
/* 325 */         tests.addElement(""org.apache.xml.utils.URI"");
/* 326 */         tests.addElement(""org.apache.xpath.XPathFactory"");
/* 327 */         tests.addElement(""org.ietf.jgss.Oid"");
/* 328 */         tests.addElement(""org.w3c.dom.Attr"");
/* 329 */         tests.addElement(""org.xml.sax.XMLReader"");
/*     */       
/*     */       case 13:
/* 332 */         tests.addElement(""org.omg.CORBA.Any"");
/* 333 */         tests.addElement(""com.sun.corba.se.internal.corba.AnyImpl"");
/* 334 */         tests.addElement(""com.sun.jndi.ldap.LdapURL"");
/* 335 */         tests.addElement(""com.sun.media.sound.Printer"");
/* 336 */         tests.addElement(""com.sun.naming.internal.VersionHelper"");
/* 337 */         tests.addElement(""com.sun.org.omg.CORBA.Initializer"");
/* 338 */         tests.addElement(""sunw.io.Serializable"");
/* 339 */         tests.addElement(""sunw.util.EventListener"");
/*     */       
/*     */       case 12:
/* 342 */         tests.addElement(""javax.accessibility.Accessible"");
/* 343 */         tests.addElement(""sun.misc.BASE64Encoder"");
/* 344 */         tests.addElement(""com.sun.image.codec.jpeg.JPEGCodec"");
/*     */         break;
/*     */     } 
/*     */ 
/*     */     
/* 349 */     tests.addElement(""sun.reflect.SerializationConstructorAccessorImpl"");
/* 350 */     tests.addElement(""sun.net.www.http.HttpClient"");
/* 351 */     tests.addElement(""sun.audio.AudioPlayer"");
/*     */ 
/*     */     
/* 354 */     return tests;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector getJrePackages() {
/* 362 */     if (jrePackages == null) {
/* 363 */       buildJrePackages();
/*     */     }
/* 365 */     return jrePackages;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\JavaEnvUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.JAXPUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import javax.xml.parsers.FactoryConfigurationError;
/*     */ import javax.xml.parsers.ParserConfigurationException;
/*     */ import javax.xml.parsers.SAXParser;
/*     */ import javax.xml.parsers.SAXParserFactory;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.xml.sax.Parser;
/*     */ import org.xml.sax.SAXException;
/*     */ import org.xml.sax.XMLReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class JAXPUtils
/*     */ {
/*  85 */   private static SAXParserFactory parserFactory = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static synchronized SAXParserFactory getParserFactory() throws BuildException {
/*  98 */     if (parserFactory == null) {
/*  99 */       parserFactory = newParserFactory();
/*     */     }
/* 101 */     return parserFactory;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static SAXParserFactory newParserFactory() throws BuildException {
/*     */     try {
/* 112 */       return SAXParserFactory.newInstance();
/*     */     } catch (FactoryConfigurationError e) {
/* 114 */       throw new BuildException(""XML parser factory has not been configured correctly: "" + e.getMessage(), e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Parser getParser() throws BuildException {
/*     */     try {
/* 130 */       return newSAXParser().getParser();
/*     */     } catch (SAXException e) {
/* 132 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static XMLReader getXMLReader() throws BuildException {
/*     */     try {
/* 146 */       return newSAXParser().getXMLReader();
/*     */     } catch (SAXException e) {
/* 148 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static SAXParser newSAXParser() throws BuildException {
/*     */     try {
/* 160 */       return getParserFactory().newSAXParser();
/*     */     } catch (ParserConfigurationException e) {
/* 162 */       throw new BuildException(""Cannot create parser for the given configuration: "" + e.getMessage(), e);
/*     */     } catch (SAXException e) {
/*     */       
/* 165 */       throw convertToBuildException(e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static BuildException convertToBuildException(SAXException e) {
/* 175 */     Exception nested = e.getException();
/* 176 */     if (nested != null) {
/* 177 */       return new BuildException(nested);
/*     */     }
/* 179 */     return new BuildException(e);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\JAXPUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.KeepAliveOutputStream,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.FilterOutputStream;
/*    */ import java.io.IOException;
/*    */ import java.io.OutputStream;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class KeepAliveOutputStream
/*    */   extends FilterOutputStream
/*    */ {
/* 78 */   public KeepAliveOutputStream(OutputStream out) { super(out); }
/*    */   
/*    */   public void close() throws IOException {}
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\KeepAliveOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.LoaderUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LoaderUtils
/*     */ {
/*     */   private static Method getContextClassLoader;
/*     */   private static Method setContextClassLoader;
/*     */   
/*     */   static  {
/*     */     try {
/*  75 */       getContextClassLoader = Thread.class.getMethod(""getContextClassLoader"", new Class[0]);
/*     */ 
/*     */       
/*  78 */       Class[] setContextArgs = { ClassLoader.class };
/*  79 */       setContextClassLoader = Thread.class.getMethod(""setContextClassLoader"", setContextArgs);
/*     */     
/*     */     }
/*  82 */     catch (Exception e) {}
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void setContextClassLoader(ClassLoader loader) {
/*  95 */     if (setContextClassLoader == null) {
/*     */       return;
/*     */     }
/*     */     
/*     */     try {
/* 100 */       Thread currentThread = Thread.currentThread();
/* 101 */       setContextClassLoader.invoke(currentThread, new Object[] { loader });
/*     */     } catch (IllegalAccessException e) {
/*     */       
/* 104 */       throw new BuildException(""Unexpected IllegalAccessException"", e);
/*     */     } catch (InvocationTargetException e) {
/*     */       
/* 107 */       throw new BuildException(""Unexpected InvocationTargetException"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ClassLoader getContextClassLoader() {
/* 121 */     if (getContextClassLoader == null) {
/* 122 */       return null;
/*     */     }
/*     */     
/*     */     try {
/* 126 */       Thread currentThread = Thread.currentThread();
/* 127 */       return (ClassLoader)getContextClassLoader.invoke(currentThread, new Object[0]);
/*     */     } catch (IllegalAccessException e) {
/*     */       
/* 130 */       throw new BuildException(""Unexpected IllegalAccessException"", e);
/*     */     } catch (InvocationTargetException e) {
/*     */       
/* 133 */       throw new BuildException(""Unexpected InvocationTargetException"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 145 */   public static boolean isContextLoaderAvailable() { return (getContextClassLoader != null && setContextClassLoader != null); }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\LoaderUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.MergingMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class MergingMapper
/*    */   implements FileNameMapper
/*    */ {
/* 67 */   protected String[] mergedFile = null;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/*    */   public void setFrom(String from) {}
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 78 */   public void setTo(String to) { this.mergedFile = new String[] { to }; }
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 85 */   public String[] mapFileName(String sourceFileName) { return this.mergedFile; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\MergingMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.PackageNameMapper,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import java.io.File;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PackageNameMapper
/*    */   extends GlobPatternMapper
/*    */ {
/*    */   protected String extractVariablePart(String name) {
/* 78 */     String var = name.substring(this.prefixLength, name.length() - this.postfixLength);
/*    */     
/* 80 */     return var.replace(File.separatorChar, '.');
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\PackageNameMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.RegexpPatternMapper,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcher;
/*     */ import org.apache.tools.ant.util.regexp.RegexpMatcherFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpPatternMapper
/*     */   implements FileNameMapper
/*     */ {
/*  71 */   protected RegexpMatcher reg = null;
/*  72 */   protected char[] to = null;
/*  73 */   protected StringBuffer result = new StringBuffer();
/*     */ 
/*     */   
/*  76 */   public RegexpPatternMapper() throws BuildException { this.reg = (new RegexpMatcherFactory()).newRegexpMatcher(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setFrom(String from) throws BuildException {
/*     */     try {
/*  84 */       this.reg.setPattern(from);
/*     */     }
/*     */     catch (NoClassDefFoundError e) {
/*     */       
/*  88 */       throw new BuildException(""Cannot load regular expression matcher"", e);
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  97 */   public void setTo(String to) { this.to = to.toCharArray(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] mapFileName(String sourceFileName) {
/* 106 */     if (this.reg == null || this.to == null || !this.reg.matches(sourceFileName))
/*     */     {
/* 108 */       return null;
/*     */     }
/* 110 */     return new String[] { replaceReferences(sourceFileName) };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected String replaceReferences(String source) {
/* 118 */     Vector v = this.reg.getGroups(source);
/*     */     
/* 120 */     this.result.setLength(0);
/* 121 */     for (int i = 0; i < this.to.length; i++) {
/* 122 */       if (this.to[i] == '\\') {
/* 123 */         if (++i < this.to.length) {
/* 124 */           int value = Character.digit(this.to[i], 10);
/* 125 */           if (value > -1) {
/* 126 */             this.result.append(v.elementAt(value));
/*     */           } else {
/* 128 */             this.result.append(this.to[i]);
/*     */           } 
/*     */         } else {
/*     */           
/* 132 */           this.result.append('\\');
/*     */         } 
/*     */       } else {
/* 135 */         this.result.append(this.to[i]);
/*     */       } 
/*     */     } 
/* 138 */     return this.result.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\RegexpPatternMapper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.SourceFileScanner,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ import java.util.Vector;
/*     */ import org.apache.tools.ant.Task;
/*     */ import org.apache.tools.ant.taskdefs.condition.Os;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SourceFileScanner
/*     */ {
/*     */   protected Task task;
/*     */   private FileUtils fileUtils;
/*     */   
/*     */   public SourceFileScanner(Task task) {
/*  84 */     this.task = task;
/*  85 */     this.fileUtils = FileUtils.newFileUtils();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] restrict(String[] files, File srcDir, File destDir, FileNameMapper mapper) {
/* 102 */     long now = (new Date()).getTime();
/* 103 */     StringBuffer targetList = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 113 */     if (Os.isFamily(""windows"")) {
/* 114 */       now += 2000L;
/*     */     }
/*     */     
/* 117 */     Vector v = new Vector();
/* 118 */     for (int i = 0; i < files.length; i++) {
/*     */       
/* 120 */       String[] targets = mapper.mapFileName(files[i]);
/* 121 */       if (targets == null || targets.length == 0) {
/* 122 */         this.task.log(files[i] + "" skipped - don't know how to handle it"", 3);
/*     */       
/*     */       }
/*     */       else {
/*     */         
/* 127 */         File src = this.fileUtils.resolveFile(srcDir, files[i]);
/*     */         
/* 129 */         if (src.lastModified() > now) {
/* 130 */           this.task.log(""Warning: "" + files[i] + "" modified in the future."", 1);
/*     */         }
/*     */ 
/*     */         
/* 134 */         boolean added = false;
/* 135 */         targetList.setLength(0);
/* 136 */         for (int j = 0; !added && j < targets.length; j++) {
/* 137 */           File dest = this.fileUtils.resolveFile(destDir, targets[j]);
/*     */           
/* 139 */           if (!dest.exists()) {
/* 140 */             this.task.log(files[i] + "" added as "" + dest.getAbsolutePath() + "" doesn't exist."", 3);
/*     */             
/* 142 */             v.addElement(files[i]);
/* 143 */             added = true;
/* 144 */           } else if (src.lastModified() > dest.lastModified()) {
/* 145 */             this.task.log(files[i] + "" added as "" + dest.getAbsolutePath() + "" is outdated."", 3);
/*     */             
/* 147 */             v.addElement(files[i]);
/* 148 */             added = true;
/*     */           } else {
/* 150 */             if (targetList.length() > 0) {
/* 151 */               targetList.append("", "");
/*     */             }
/* 153 */             targetList.append(dest.getAbsolutePath());
/*     */           } 
/*     */         } 
/*     */         
/* 157 */         if (!added) {
/* 158 */           this.task.log(files[i] + "" omitted as "" + targetList.toString() + ((targets.length == 1) ? "" is"" : "" are "") + "" up to date."", 3);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 164 */     String[] result = new String[v.size()];
/* 165 */     v.copyInto((Object[])result);
/* 166 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public File[] restrictAsFiles(String[] files, File srcDir, File destDir, FileNameMapper mapper) {
/* 176 */     String[] res = restrict(files, srcDir, destDir, mapper);
/* 177 */     File[] result = new File[res.length];
/* 178 */     for (int i = 0; i < res.length; i++) {
/* 179 */       result[i] = new File(srcDir, res[i]);
/*     */     }
/* 181 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\SourceFileScanner.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.StringUtils,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.io.PrintWriter;
/*     */ import java.io.StringWriter;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class StringUtils
/*     */ {
/*  68 */   public static final String LINE_SEP = System.getProperty(""line.separator"");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  77 */   public static Vector lineSplit(String data) { return split(data, 10); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Vector split(String data, int ch) {
/*  88 */     Vector elems = new Vector();
/*  89 */     int pos = -1;
/*  90 */     int i = 0;
/*  91 */     while ((pos = data.indexOf(ch, i)) != -1) {
/*  92 */       String elem = data.substring(i, pos);
/*  93 */       elems.addElement(elem);
/*  94 */       i = pos + 1;
/*     */     } 
/*  96 */     elems.addElement(data.substring(i));
/*  97 */     return elems;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String replace(String data, String from, String to) {
/* 108 */     StringBuffer buf = new StringBuffer(data.length());
/* 109 */     int pos = -1;
/* 110 */     int i = 0;
/* 111 */     while ((pos = data.indexOf(from, i)) != -1) {
/* 112 */       buf.append(data.substring(i, pos)).append(to);
/* 113 */       i = pos + from.length();
/*     */     } 
/* 115 */     buf.append(data.substring(i));
/* 116 */     return buf.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String getStackTrace(Throwable t) {
/* 125 */     StringWriter sw = new StringWriter();
/* 126 */     PrintWriter pw = new PrintWriter(sw, true);
/* 127 */     t.printStackTrace(pw);
/* 128 */     pw.flush();
/* 129 */     pw.close();
/* 130 */     return sw.toString();
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\StringUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.TaskLogger,"/*    */ package org.apache.tools.ant.util;
/*    */ 
/*    */ import org.apache.tools.ant.Task;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public final class TaskLogger
/*    */ {
/*    */   private Task m_task;
/*    */   
/* 74 */   public TaskLogger(Task task) { this.m_task = task; }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 79 */   public void info(String message) { this.m_task.log(message, 2); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 84 */   public void error(String message) { this.m_task.log(message, 0); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 89 */   public void warning(String message) { this.m_task.log(message, 1); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 94 */   public void verbose(String message) { this.m_task.log(message, 3); }
/*    */ 
/*    */ 
/*    */ 
/*    */   
/* 99 */   public void debug(String message) { this.m_task.log(message, 4); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\TaskLogger.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.TimeoutObserver,"package org.apache.tools.ant.util;
public interface TimeoutObserver {
  void timeoutOccured(Watchdog paramWatchdog);
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\TimeoutObserver.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.Watchdog,"/*     */ package org.apache.tools.ant.util;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Watchdog
/*     */   implements Runnable
/*     */ {
/*  73 */   private Vector observers = new Vector(1);
/*  74 */   private long timeout = -1L;
/*     */   private boolean stopped = false;
/*     */   
/*     */   public Watchdog(long timeout) {
/*  78 */     if (timeout < 1L) {
/*  79 */       throw new IllegalArgumentException(""timeout lesser than 1."");
/*     */     }
/*  81 */     this.timeout = timeout;
/*     */   }
/*     */ 
/*     */   
/*  85 */   public void addTimeoutObserver(TimeoutObserver to) { this.observers.addElement(to); }
/*     */ 
/*     */ 
/*     */   
/*  89 */   public void removeTimeoutObserver(TimeoutObserver to) { this.observers.removeElement(to); }
/*     */ 
/*     */   
/*     */   protected final void fireTimeoutOccured() {
/*  93 */     Enumeration enum = this.observers.elements();
/*  94 */     while (enum.hasMoreElements()) {
/*  95 */       ((TimeoutObserver)enum.nextElement()).timeoutOccured(this);
/*     */     }
/*     */   }
/*     */   
/*     */   public synchronized void start() {
/* 100 */     this.stopped = false;
/* 101 */     Thread t = new Thread(this, ""WATCHDOG"");
/* 102 */     t.setDaemon(true);
/* 103 */     t.start();
/*     */   }
/*     */   
/*     */   public synchronized void stop() {
/* 107 */     this.stopped = true;
/* 108 */     notifyAll();
/*     */   }
/*     */   
/*     */   public synchronized void run() {
/* 112 */     long until = System.currentTimeMillis() + this.timeout;
/*     */     long now;
/* 114 */     while (!this.stopped && until > (now = System.currentTimeMillis())) {
/*     */       try {
/* 116 */         wait(until - now);
/* 117 */       } catch (InterruptedException e) {}
/*     */     } 
/* 119 */     if (!this.stopped)
/* 120 */       fireTimeoutOccured(); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\Watchdog.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.facade.FacadeTaskHelper,"/*     */ package org.apache.tools.ant.util.facade;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FacadeTaskHelper
/*     */ {
/*  76 */   private Vector args = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String userChoice;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String magicValue;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String defaultValue;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  98 */   public FacadeTaskHelper(String defaultValue) { this(defaultValue, null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public FacadeTaskHelper(String defaultValue, String magicValue) {
/* 108 */     this.defaultValue = defaultValue;
/* 109 */     this.magicValue = magicValue;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   public void setMagicValue(String magicValue) { this.magicValue = magicValue; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setImplementation(String userChoice) { this.userChoice = userChoice; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public String getImplementation() { return (this.userChoice != null) ? this.userChoice : ((this.magicValue != null) ? this.magicValue : this.defaultValue); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public String getExplicitChoice() { return this.userChoice; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 146 */   public void addImplementationArgument(ImplementationSpecificArgument arg) { this.args.addElement(arg); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getArgs() {
/* 154 */     Vector tmp = new Vector(this.args.size());
/* 155 */     for (Enumeration enum = this.args.elements(); enum.hasMoreElements(); ) {
/* 156 */       ImplementationSpecificArgument arg = enum.nextElement();
/*     */       
/* 158 */       String[] curr = arg.getParts(getImplementation());
/* 159 */       for (int i = 0; i < curr.length; i++) {
/* 160 */         tmp.addElement(curr[i]);
/*     */       }
/*     */     } 
/* 163 */     String[] res = new String[tmp.size()];
/* 164 */     tmp.copyInto((Object[])res);
/* 165 */     return res;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\facade\FacadeTaskHelper.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.facade.ImplementationSpecificArgument,"/*    */ package org.apache.tools.ant.util.facade;
/*    */ 
/*    */ import org.apache.tools.ant.types.Commandline;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ImplementationSpecificArgument
/*    */   extends Commandline.Argument
/*    */ {
/*    */   private String impl;
/*    */   
/* 77 */   public void setImplementation(String impl) { this.impl = impl; }
/*    */ 
/*    */   
/*    */   public final String[] getParts(String chosenImpl) {
/* 81 */     if (this.impl == null || this.impl.equals(chosenImpl)) {
/* 82 */       return getParts();
/*    */     }
/* 84 */     return new String[0];
/*    */   }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\facade\ImplementationSpecificArgument.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.Regexp,"package org.apache.tools.ant.util.regexp;
import org.apache.tools.ant.BuildException;
public interface Regexp extends RegexpMatcher {
  public static final int REPLACE_FIRST = 1;
  public static final int REPLACE_ALL = 16;
  String substitute(String paramString1, String paramString2, int paramInt) throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\regexp\Regexp.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpFactory,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpFactory
/*     */   extends RegexpMatcherFactory
/*     */ {
/*  75 */   public Regexp newRegexp() throws BuildException { return newRegexp(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Regexp newRegexp(Project p) throws BuildException {
/*  84 */     String systemDefault = null;
/*  85 */     if (p == null) {
/*  86 */       systemDefault = System.getProperty(""ant.regexp.regexpimpl"");
/*     */     } else {
/*  88 */       systemDefault = p.getProperty(""ant.regexp.regexpimpl"");
/*     */     } 
/*     */     
/*  91 */     if (systemDefault != null) {
/*  92 */       return createRegexpInstance(systemDefault);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/*  98 */       return createRegexpInstance(""org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp"");
/*  99 */     } catch (BuildException be) {
/*     */       
/*     */       try {
/* 102 */         return createRegexpInstance(""org.apache.tools.ant.util.regexp.JakartaOroRegexp"");
/* 103 */       } catch (BuildException be) {
/*     */         
/*     */         try {
/* 106 */           return createRegexpInstance(""org.apache.tools.ant.util.regexp.JakartaRegexpRegexp"");
/* 107 */         } catch (BuildException be) {
/*     */           
/* 109 */           throw new BuildException(""No supported regular expression matcher found"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected Regexp createRegexpInstance(String classname) throws BuildException {
/* 123 */     RegexpMatcher m = createInstance(classname);
/* 124 */     if (m instanceof Regexp) {
/* 125 */       return (Regexp)m;
/*     */     }
/* 127 */     throw new BuildException(classname + "" doesn't implement the Regexp interface"");
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\regexp\RegexpFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcher,"package org.apache.tools.ant.util.regexp;
import java.util.Vector;
import org.apache.tools.ant.BuildException;
public interface RegexpMatcher {
  public static final int MATCH_DEFAULT = 0;
  public static final int MATCH_CASE_INSENSITIVE = 256;
  public static final int MATCH_MULTILINE = 4096;
  public static final int MATCH_SINGLELINE = 65536;
  void setPattern(String paramString) throws BuildException;
  String getPattern() throws BuildException;
  boolean matches(String paramString) throws BuildException;
  Vector getGroups(String paramString) throws BuildException;
  boolean matches(String paramString, int paramInt) throws BuildException;
  Vector getGroups(String paramString, int paramInt) throws BuildException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\regexp\RegexpMatcher.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpMatcherFactory,"/*     */ package org.apache.tools.ant.util.regexp;
/*     */ 
/*     */ import org.apache.tools.ant.BuildException;
/*     */ import org.apache.tools.ant.Project;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class RegexpMatcherFactory
/*     */ {
/*  79 */   public RegexpMatcher newRegexpMatcher() throws BuildException { return newRegexpMatcher(null); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public RegexpMatcher newRegexpMatcher(Project p) throws BuildException {
/*  89 */     String systemDefault = null;
/*  90 */     if (p == null) {
/*  91 */       systemDefault = System.getProperty(""ant.regexp.regexpimpl"");
/*     */     } else {
/*  93 */       systemDefault = p.getProperty(""ant.regexp.regexpimpl"");
/*     */     } 
/*     */     
/*  96 */     if (systemDefault != null) {
/*  97 */       return createInstance(systemDefault);
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     try {
/* 103 */       return createInstance(""org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher"");
/* 104 */     } catch (BuildException be) {
/*     */       
/*     */       try {
/* 107 */         return createInstance(""org.apache.tools.ant.util.regexp.JakartaOroMatcher"");
/* 108 */       } catch (BuildException be) {
/*     */         
/*     */         try {
/* 111 */           return createInstance(""org.apache.tools.ant.util.regexp.JakartaRegexpMatcher"");
/* 112 */         } catch (BuildException be) {
/*     */           
/* 114 */           throw new BuildException(""No supported regular expression matcher found"");
/*     */         } 
/*     */       } 
/*     */     } 
/*     */   } protected RegexpMatcher createInstance(String className) throws BuildException {
/*     */     try {
/* 120 */       Class implClass = Class.forName(className);
/* 121 */       return (RegexpMatcher)implClass.newInstance();
/*     */     } catch (Throwable t) {
/* 123 */       throw new BuildException(t);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\regexp\RegexpMatcherFactory.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.ant.util.regexp.RegexpUtil,"/*    */ package org.apache.tools.ant.util.regexp;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class RegexpUtil
/*    */ {
/* 63 */   public static final boolean hasFlag(int options, int flag) { return ((options & flag) > 0); }
/*    */ 
/*    */ 
/*    */   
/* 67 */   public static final int removeFlag(int options, int flag) { return options & -1 - flag; }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\an\\util\regexp\RegexpUtil.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.BZip2Constants,"/*    */ package org.apache.tools.bzip2;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public interface BZip2Constants
/*    */ {
/*    */   public static final int baseBlockSize = 100000;
/*    */   public static final int MAX_ALPHA_SIZE = 258;
/*    */   public static final int MAX_CODE_LEN = 23;
/*    */   public static final int RUNA = 0;
/*    */   public static final int RUNB = 1;
/*    */   public static final int N_GROUPS = 6;
/*    */   public static final int G_SIZE = 50;
/*    */   public static final int N_ITERS = 4;
/*    */   public static final int MAX_SELECTORS = 18002;
/*    */   public static final int NUM_OVERSHOOT_BYTES = 20;
/* 82 */   public static final int[] rNums = new int[] { 619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 936, 638 };
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\bzip2\BZip2Constants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CBZip2InputStream,"/*     */ package org.apache.tools.bzip2;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class CBZip2InputStream
/*     */   extends InputStream
/*     */   implements BZip2Constants
/*     */ {
/*     */   private int last;
/*     */   private int origPtr;
/*     */   private int blockSize100k;
/*     */   private boolean blockRandomised;
/*     */   private int bytesIn;
/*     */   private int bytesOut;
/*     */   private int bsBuff;
/*     */   private int bsLive;
/*     */   
/*  73 */   private static void cadvise() { System.out.println(""CRC Error""); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  78 */   private static void badBGLengths() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*  82 */   private static void bitStreamEOF() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*  86 */   private static void compressedStreamEOF() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/*     */   private void makeMaps() {
/*  91 */     this.nInUse = 0;
/*  92 */     for (int i = 0; i < 256; i++) {
/*  93 */       if (this.inUse[i]) {
/*  94 */         this.seqToUnseq[this.nInUse] = (char)i;
/*  95 */         this.unseqToSeq[i] = (char)this.nInUse;
/*  96 */         this.nInUse++;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 124 */   private CRC mCrc = new CRC();
/*     */   
/* 126 */   private boolean[] inUse = new boolean[256];
/*     */   
/*     */   private int nInUse;
/* 129 */   private char[] seqToUnseq = new char[256];
/* 130 */   private char[] unseqToSeq = new char[256];
/*     */   
/* 132 */   private char[] selector = new char[18002];
/* 133 */   private char[] selectorMtf = new char[18002];
/*     */ 
/*     */   
/*     */   private int[] tt;
/*     */ 
/*     */   
/*     */   private char[] ll8;
/*     */ 
/*     */   
/* 142 */   private int[] unzftab = new int[256];
/*     */   
/* 144 */   private int[][] limit = new int[6][258];
/* 145 */   private int[][] base = new int[6][258];
/* 146 */   private int[][] perm = new int[6][258];
/* 147 */   private int[] minLens = new int[6];
/*     */   
/*     */   private InputStream bsStream;
/*     */   
/*     */   private boolean streamEnd = false;
/*     */   
/* 153 */   private int currentChar = -1;
/*     */   
/*     */   private static final int START_BLOCK_STATE = 1;
/*     */   
/*     */   private static final int RAND_PART_A_STATE = 2;
/*     */   private static final int RAND_PART_B_STATE = 3;
/*     */   private static final int RAND_PART_C_STATE = 4;
/*     */   private static final int NO_RAND_PART_A_STATE = 5;
/*     */   private static final int NO_RAND_PART_B_STATE = 6;
/*     */   private static final int NO_RAND_PART_C_STATE = 7;
/* 163 */   private int currentState = 1;
/*     */   
/*     */   private int storedBlockCRC;
/*     */   private int storedCombinedCRC;
/*     */   private int computedBlockCRC;
/*     */   private int computedCombinedCRC;
/*     */   int i2;
/* 170 */   int rNToGo = 0; int count; int chPrev; int ch2; int i; int tPos;
/* 171 */   int rTPos = 0;
/*     */   int j2;
/*     */   char z;
/*     */   
/*     */   public CBZip2InputStream(InputStream zStream) {
/* 176 */     this.ll8 = null;
/* 177 */     this.tt = null;
/* 178 */     bsSetStream(zStream);
/* 179 */     initialize();
/* 180 */     initBlock();
/* 181 */     setupBlock();
/*     */   }
/*     */   
/*     */   public int read() {
/* 185 */     if (this.streamEnd) {
/* 186 */       return -1;
/*     */     }
/* 188 */     int retChar = this.currentChar;
/* 189 */     switch (this.currentState) {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       case 3:
/* 195 */         setupRandPartB();
/*     */         break;
/*     */       case 4:
/* 198 */         setupRandPartC();
/*     */         break;
/*     */ 
/*     */       
/*     */       case 6:
/* 203 */         setupNoRandPartB();
/*     */         break;
/*     */       case 7:
/* 206 */         setupNoRandPartC();
/*     */         break;
/*     */     } 
/*     */ 
/*     */     
/* 211 */     return retChar;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize() {
/* 217 */     char magic3 = bsGetUChar();
/* 218 */     char magic4 = bsGetUChar();
/* 219 */     if (magic3 != 'h' || magic4 < '1' || magic4 > '9') {
/* 220 */       bsFinishedWithStream();
/* 221 */       this.streamEnd = true;
/*     */       
/*     */       return;
/*     */     } 
/* 225 */     setDecompressStructureSizes(magic4 - 48);
/* 226 */     this.computedCombinedCRC = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void initBlock() {
/* 232 */     char magic1 = bsGetUChar();
/* 233 */     char magic2 = bsGetUChar();
/* 234 */     char magic3 = bsGetUChar();
/* 235 */     char magic4 = bsGetUChar();
/* 236 */     char magic5 = bsGetUChar();
/* 237 */     char magic6 = bsGetUChar();
/* 238 */     if (magic1 == '\027' && magic2 == 'r' && magic3 == 'E' && magic4 == '8' && magic5 == 'P' && magic6 == '') {
/*     */       
/* 240 */       complete();
/*     */       
/*     */       return;
/*     */     } 
/* 244 */     if (magic1 != '1' || magic2 != 'A' || magic3 != 'Y' || magic4 != '&' || magic5 != 'S' || magic6 != 'Y') {
/*     */       
/* 246 */       badBlockHeader();
/* 247 */       this.streamEnd = true;
/*     */       
/*     */       return;
/*     */     } 
/* 251 */     this.storedBlockCRC = bsGetInt32();
/*     */     
/* 253 */     if (bsR(1) == 1) {
/* 254 */       this.blockRandomised = true;
/*     */     } else {
/* 256 */       this.blockRandomised = false;
/*     */     } 
/*     */ 
/*     */     
/* 260 */     getAndMoveToFrontDecode();
/*     */     
/* 262 */     this.mCrc.initialiseCRC();
/* 263 */     this.currentState = 1;
/*     */   }
/*     */   
/*     */   private void endBlock() {
/* 267 */     this.computedBlockCRC = this.mCrc.getFinalCRC();
/*     */     
/* 269 */     if (this.storedBlockCRC != this.computedBlockCRC) {
/* 270 */       crcError();
/*     */     }
/*     */     
/* 273 */     this.computedCombinedCRC = this.computedCombinedCRC << 1 | this.computedCombinedCRC >>> 31;
/*     */     
/* 275 */     this.computedCombinedCRC ^= this.computedBlockCRC;
/*     */   }
/*     */   
/*     */   private void complete() {
/* 279 */     this.storedCombinedCRC = bsGetInt32();
/* 280 */     if (this.storedCombinedCRC != this.computedCombinedCRC) {
/* 281 */       crcError();
/*     */     }
/*     */     
/* 284 */     bsFinishedWithStream();
/* 285 */     this.streamEnd = true;
/*     */   }
/*     */ 
/*     */   
/* 289 */   private static void blockOverrun() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/* 293 */   private static void badBlockHeader() { cadvise(); }
/*     */ 
/*     */ 
/*     */   
/* 297 */   private static void crcError() { cadvise(); }
/*     */ 
/*     */   
/*     */   private void bsFinishedWithStream() {
/*     */     try {
/* 302 */       if (this.bsStream != null && 
/* 303 */         this.bsStream != System.in) {
/* 304 */         this.bsStream.close();
/* 305 */         this.bsStream = null;
/*     */       }
/*     */     
/* 308 */     } catch (IOException ioe) {}
/*     */   }
/*     */ 
/*     */   
/*     */   private void bsSetStream(InputStream f) {
/* 313 */     this.bsStream = f;
/* 314 */     this.bsLive = 0;
/* 315 */     this.bsBuff = 0;
/* 316 */     this.bytesOut = 0;
/* 317 */     this.bytesIn = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private int bsR(int n) {
/* 323 */     while (this.bsLive < n) {
/*     */       
/* 325 */       char thech = Character.MIN_VALUE;
/*     */       try {
/* 327 */         thech = (char)this.bsStream.read();
/*     */       } catch (IOException e) {
/* 329 */         compressedStreamEOF();
/*     */       } 
/* 331 */       if (thech == -1) {
/* 332 */         compressedStreamEOF();
/*     */       }
/* 334 */       int zzi = thech;
/* 335 */       this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 336 */       this.bsLive += 8;
/*     */     } 
/*     */ 
/*     */     
/* 340 */     int v = this.bsBuff >> this.bsLive - n & (1 << n) - 1;
/* 341 */     this.bsLive -= n;
/* 342 */     return v;
/*     */   }
/*     */ 
/*     */   
/* 346 */   private char bsGetUChar() { return (char)bsR(8); }
/*     */ 
/*     */   
/*     */   private int bsGetint() {
/* 350 */     int u = 0;
/* 351 */     u = u << 8 | bsR(8);
/* 352 */     u = u << 8 | bsR(8);
/* 353 */     u = u << 8 | bsR(8);
/* 354 */     u = u << 8 | bsR(8);
/* 355 */     return u;
/*     */   }
/*     */ 
/*     */   
/* 359 */   private int bsGetIntVS(int numBits) { return bsR(numBits); }
/*     */ 
/*     */ 
/*     */   
/* 363 */   private int bsGetInt32() { return bsGetint(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void hbCreateDecodeTables(int[] limit, int[] base, int[] perm, char[] length, int minLen, int maxLen, int alphaSize) {
/* 371 */     int pp = 0; int i;
/* 372 */     for (i = minLen; i <= maxLen; i++) {
/* 373 */       for (int j = 0; j < alphaSize; j++) {
/* 374 */         if (length[j] == i) {
/* 375 */           perm[pp] = j;
/* 376 */           pp++;
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 381 */     for (i = 0; i < 23; i++) {
/* 382 */       base[i] = 0;
/*     */     }
/* 384 */     for (i = 0; i < alphaSize; i++) {
/* 385 */       base[length[i] + 1] = base[length[i] + 1] + 1;
/*     */     }
/*     */     
/* 388 */     for (i = 1; i < 23; i++) {
/* 389 */       base[i] = base[i] + base[i - 1];
/*     */     }
/*     */     
/* 392 */     for (i = 0; i < 23; i++) {
/* 393 */       limit[i] = 0;
/*     */     }
/* 395 */     int vec = 0;
/*     */     
/* 397 */     for (i = minLen; i <= maxLen; i++) {
/* 398 */       vec += base[i + 1] - base[i];
/* 399 */       limit[i] = vec - 1;
/* 400 */       vec <<= 1;
/*     */     } 
/* 402 */     for (i = minLen + 1; i <= maxLen; i++) {
/* 403 */       base[i] = (limit[i - 1] + 1 << 1) - base[i];
/*     */     }
/*     */   }
/*     */   
/*     */   private void recvDecodingTables() {
/* 408 */     char[][] len = new char[6][258];
/*     */ 
/*     */     
/* 411 */     boolean[] inUse16 = new boolean[16];
/*     */     
/*     */     int i;
/* 414 */     for (i = 0; i < 16; i++) {
/* 415 */       if (bsR(1) == 1) {
/* 416 */         inUse16[i] = true;
/*     */       } else {
/* 418 */         inUse16[i] = false;
/*     */       } 
/*     */     } 
/*     */     
/* 422 */     for (i = 0; i < 256; i++) {
/* 423 */       this.inUse[i] = false;
/*     */     }
/*     */     
/* 426 */     for (i = 0; i < 16; i++) {
/* 427 */       if (inUse16[i]) {
/* 428 */         for (int j = 0; j < 16; j++) {
/* 429 */           if (bsR(1) == 1) {
/* 430 */             this.inUse[i * 16 + j] = true;
/*     */           }
/*     */         } 
/*     */       }
/*     */     } 
/*     */     
/* 436 */     makeMaps();
/* 437 */     int alphaSize = this.nInUse + 2;
/*     */ 
/*     */     
/* 440 */     int nGroups = bsR(3);
/* 441 */     int nSelectors = bsR(15);
/* 442 */     for (i = 0; i < nSelectors; i++) {
/* 443 */       byte b = 0;
/* 444 */       while (bsR(1) == 1) {
/* 445 */         b++;
/*     */       }
/* 447 */       this.selectorMtf[i] = (char)b;
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 452 */     char[] pos = new char[6];
/*     */     char v;
/* 454 */     for (v = Character.MIN_VALUE; v < nGroups; v = (char)(v + 1)) {
/* 455 */       pos[v] = v;
/*     */     }
/*     */     
/* 458 */     for (i = 0; i < nSelectors; i++) {
/* 459 */       v = this.selectorMtf[i];
/* 460 */       char tmp = pos[v];
/* 461 */       while (v > '\000') {
/* 462 */         pos[v] = pos[v - 1];
/* 463 */         v = (char)(v - 1);
/*     */       } 
/* 465 */       pos[0] = tmp;
/* 466 */       this.selector[i] = tmp;
/*     */     } 
/*     */     
/*     */     int t;
/*     */     
/* 471 */     for (t = 0; t < nGroups; t++) {
/* 472 */       int curr = bsR(5);
/* 473 */       for (i = 0; i < alphaSize; i++) {
/* 474 */         while (bsR(1) == 1) {
/* 475 */           if (bsR(1) == 0) {
/* 476 */             curr++; continue;
/*     */           } 
/* 478 */           curr--;
/*     */         } 
/*     */         
/* 481 */         len[t][i] = (char)curr;
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 486 */     for (t = 0; t < nGroups; t++) {
/* 487 */       int minLen = 32;
/* 488 */       int maxLen = 0;
/* 489 */       for (i = 0; i < alphaSize; i++) {
/* 490 */         if (len[t][i] > maxLen) {
/* 491 */           maxLen = len[t][i];
/*     */         }
/* 493 */         if (len[t][i] < minLen) {
/* 494 */           minLen = len[t][i];
/*     */         }
/*     */       } 
/* 497 */       hbCreateDecodeTables(this.limit[t], this.base[t], this.perm[t], len[t], minLen, maxLen, alphaSize);
/*     */       
/* 499 */       this.minLens[t] = minLen;
/*     */     } 
/*     */   }
/*     */   
/*     */   private void getAndMoveToFrontDecode() {
/* 504 */     char[] yy = new char[256];
/*     */ 
/*     */ 
/*     */     
/* 508 */     int limitLast = 100000 * this.blockSize100k;
/* 509 */     this.origPtr = bsGetIntVS(24);
/*     */     
/* 511 */     recvDecodingTables();
/* 512 */     int EOB = this.nInUse + 1;
/* 513 */     int groupNo = -1;
/* 514 */     int groupPos = 0;
/*     */ 
/*     */ 
/*     */     
/*     */     int i;
/*     */ 
/*     */ 
/*     */     
/* 522 */     for (i = 0; i <= 255; i++) {
/* 523 */       this.unzftab[i] = 0;
/*     */     }
/*     */     
/* 526 */     for (i = 0; i <= 255; i++) {
/* 527 */       yy[i] = (char)i;
/*     */     }
/*     */     
/* 530 */     this.last = -1;
/*     */ 
/*     */ 
/*     */     
/* 534 */     if (groupPos == 0) {
/* 535 */       groupNo++;
/* 536 */       groupPos = 50;
/*     */     } 
/* 538 */     groupPos--;
/* 539 */     int zt = this.selector[groupNo];
/* 540 */     int zn = this.minLens[zt];
/* 541 */     int zvec = bsR(zn);
/* 542 */     while (zvec > this.limit[zt][zn]) {
/* 543 */       zn++;
/*     */ 
/*     */       
/* 546 */       while (this.bsLive < 1) {
/*     */         
/* 548 */         char thech = Character.MIN_VALUE;
/*     */         try {
/* 550 */           thech = (char)this.bsStream.read();
/*     */         } catch (IOException e) {
/* 552 */           compressedStreamEOF();
/*     */         } 
/* 554 */         if (thech == -1) {
/* 555 */           compressedStreamEOF();
/*     */         }
/* 557 */         int zzi = thech;
/* 558 */         this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 559 */         this.bsLive += 8;
/*     */       } 
/*     */       
/* 562 */       int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 563 */       this.bsLive--;
/*     */       
/* 565 */       zvec = zvec << 1 | zj;
/*     */     } 
/* 567 */     int nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 572 */     while (nextSym != EOB) {
/*     */ 
/*     */ 
/*     */       
/* 576 */       if (nextSym == 0 || nextSym == 1) {
/*     */         
/* 578 */         int s = -1;
/* 579 */         int N = 1;
/*     */         do {
/* 581 */           if (nextSym == 0) {
/* 582 */             s += 1 * N;
/* 583 */           } else if (nextSym == 1) {
/* 584 */             s += 2 * N;
/*     */           } 
/* 586 */           N *= 2;
/*     */ 
/*     */           
/* 589 */           if (groupPos == 0) {
/* 590 */             groupNo++;
/* 591 */             groupPos = 50;
/*     */           } 
/* 593 */           groupPos--;
/* 594 */           int zt = this.selector[groupNo];
/* 595 */           int zn = this.minLens[zt];
/* 596 */           int zvec = bsR(zn);
/* 597 */           while (zvec > this.limit[zt][zn]) {
/* 598 */             zn++;
/*     */ 
/*     */             
/* 601 */             while (this.bsLive < 1) {
/*     */               
/* 603 */               char thech = Character.MIN_VALUE;
/*     */               try {
/* 605 */                 thech = (char)this.bsStream.read();
/*     */               } catch (IOException e) {
/* 607 */                 compressedStreamEOF();
/*     */               } 
/* 609 */               if (thech == -1) {
/* 610 */                 compressedStreamEOF();
/*     */               }
/* 612 */               int zzi = thech;
/* 613 */               this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 614 */               this.bsLive += 8;
/*     */             } 
/*     */             
/* 617 */             int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 618 */             this.bsLive--;
/*     */             
/* 620 */             zvec = zvec << 1 | zj;
/*     */           } 
/* 622 */           nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */         }
/* 624 */         while (nextSym == 0 || nextSym == 1);
/*     */         
/* 626 */         s++;
/* 627 */         char ch = this.seqToUnseq[yy[0]];
/* 628 */         this.unzftab[ch] = this.unzftab[ch] + s;
/*     */         
/* 630 */         while (s > 0) {
/* 631 */           this.last++;
/* 632 */           this.ll8[this.last] = ch;
/* 633 */           s--;
/*     */         } 
/*     */         
/* 636 */         if (this.last >= limitLast) {
/* 637 */           blockOverrun();
/*     */         }
/*     */         
/*     */         continue;
/*     */       } 
/* 642 */       this.last++;
/* 643 */       if (this.last >= limitLast) {
/* 644 */         blockOverrun();
/*     */       }
/*     */       
/* 647 */       char tmp = yy[nextSym - 1];
/* 648 */       this.unzftab[this.seqToUnseq[tmp]] = this.unzftab[this.seqToUnseq[tmp]] + 1;
/* 649 */       this.ll8[this.last] = this.seqToUnseq[tmp];
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 658 */       int j = nextSym - 1;
/* 659 */       for (; j > 3; j -= 4) {
/* 660 */         yy[j] = yy[j - 1];
/* 661 */         yy[j - 1] = yy[j - 2];
/* 662 */         yy[j - 2] = yy[j - 3];
/* 663 */         yy[j - 3] = yy[j - 4];
/*     */       } 
/* 665 */       for (; j > 0; j--) {
/* 666 */         yy[j] = yy[j - 1];
/*     */       }
/*     */       
/* 669 */       yy[0] = tmp;
/*     */ 
/*     */       
/* 672 */       if (groupPos == 0) {
/* 673 */         groupNo++;
/* 674 */         groupPos = 50;
/*     */       } 
/* 676 */       groupPos--;
/* 677 */       int zt = this.selector[groupNo];
/* 678 */       int zn = this.minLens[zt];
/* 679 */       int zvec = bsR(zn);
/* 680 */       while (zvec > this.limit[zt][zn]) {
/* 681 */         zn++;
/*     */ 
/*     */         
/* 684 */         while (this.bsLive < 1) {
/*     */           
/* 686 */           char thech = Character.MIN_VALUE;
/*     */           try {
/* 688 */             thech = (char)this.bsStream.read();
/*     */           } catch (IOException e) {
/* 690 */             compressedStreamEOF();
/*     */           } 
/* 692 */           int zzi = thech;
/* 693 */           this.bsBuff = this.bsBuff << 8 | zzi & 0xFF;
/* 694 */           this.bsLive += 8;
/*     */         } 
/*     */         
/* 697 */         int zj = this.bsBuff >> this.bsLive - 1 & 0x1;
/* 698 */         this.bsLive--;
/*     */         
/* 700 */         zvec = zvec << 1 | zj;
/*     */       } 
/* 702 */       nextSym = this.perm[zt][zvec - this.base[zt][zn]];
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void setupBlock() {
/* 710 */     int[] cftab = new int[257];
/*     */ 
/*     */     
/* 713 */     cftab[0] = 0;
/* 714 */     for (this.i = 1; this.i <= 256; this.i++) {
/* 715 */       cftab[this.i] = this.unzftab[this.i - 1];
/*     */     }
/* 717 */     for (this.i = 1; this.i <= 256; this.i++) {
/* 718 */       cftab[this.i] = cftab[this.i] + cftab[this.i - 1];
/*     */     }
/*     */     
/* 721 */     for (this.i = 0; this.i <= this.last; this.i++) {
/* 722 */       char ch = this.ll8[this.i];
/* 723 */       this.tt[cftab[ch]] = this.i;
/* 724 */       cftab[ch] = cftab[ch] + 1;
/*     */     } 
/* 726 */     cftab = null;
/*     */     
/* 728 */     this.tPos = this.tt[this.origPtr];
/*     */     
/* 730 */     this.count = 0;
/* 731 */     this.i2 = 0;
/* 732 */     this.ch2 = 256;
/*     */     
/* 734 */     if (this.blockRandomised) {
/* 735 */       this.rNToGo = 0;
/* 736 */       this.rTPos = 0;
/* 737 */       setupRandPartA();
/*     */     } else {
/* 739 */       setupNoRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartA() {
/* 744 */     if (this.i2 <= this.last) {
/* 745 */       this.chPrev = this.ch2;
/* 746 */       this.ch2 = this.ll8[this.tPos];
/* 747 */       this.tPos = this.tt[this.tPos];
/* 748 */       if (this.rNToGo == 0) {
/* 749 */         this.rNToGo = BZip2Constants.rNums[this.rTPos];
/* 750 */         this.rTPos++;
/* 751 */         if (this.rTPos == 512) {
/* 752 */           this.rTPos = 0;
/*     */         }
/*     */       } 
/* 755 */       this.rNToGo--;
/* 756 */       this.ch2 ^= (this.rNToGo == 1) ? 1 : 0;
/* 757 */       this.i2++;
/*     */       
/* 759 */       this.currentChar = this.ch2;
/* 760 */       this.currentState = 3;
/* 761 */       this.mCrc.updateCRC(this.ch2);
/*     */     } else {
/* 763 */       endBlock();
/* 764 */       initBlock();
/* 765 */       setupBlock();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartA() {
/* 770 */     if (this.i2 <= this.last) {
/* 771 */       this.chPrev = this.ch2;
/* 772 */       this.ch2 = this.ll8[this.tPos];
/* 773 */       this.tPos = this.tt[this.tPos];
/* 774 */       this.i2++;
/*     */       
/* 776 */       this.currentChar = this.ch2;
/* 777 */       this.currentState = 6;
/* 778 */       this.mCrc.updateCRC(this.ch2);
/*     */     } else {
/* 780 */       endBlock();
/* 781 */       initBlock();
/* 782 */       setupBlock();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartB() {
/* 787 */     if (this.ch2 != this.chPrev) {
/* 788 */       this.currentState = 2;
/* 789 */       this.count = 1;
/* 790 */       setupRandPartA();
/*     */     } else {
/* 792 */       this.count++;
/* 793 */       if (this.count >= 4) {
/* 794 */         this.z = this.ll8[this.tPos];
/* 795 */         this.tPos = this.tt[this.tPos];
/* 796 */         if (this.rNToGo == 0) {
/* 797 */           this.rNToGo = BZip2Constants.rNums[this.rTPos];
/* 798 */           this.rTPos++;
/* 799 */           if (this.rTPos == 512) {
/* 800 */             this.rTPos = 0;
/*     */           }
/*     */         } 
/* 803 */         this.rNToGo--;
/* 804 */         this.z = (char)(this.z ^ ((this.rNToGo == 1) ? '\001' : Character.MIN_VALUE));
/* 805 */         this.j2 = 0;
/* 806 */         this.currentState = 4;
/* 807 */         setupRandPartC();
/*     */       } else {
/* 809 */         this.currentState = 2;
/* 810 */         setupRandPartA();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupRandPartC() {
/* 816 */     if (this.j2 < this.z) {
/* 817 */       this.currentChar = this.ch2;
/* 818 */       this.mCrc.updateCRC(this.ch2);
/* 819 */       this.j2++;
/*     */     } else {
/* 821 */       this.currentState = 2;
/* 822 */       this.i2++;
/* 823 */       this.count = 0;
/* 824 */       setupRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartB() {
/* 829 */     if (this.ch2 != this.chPrev) {
/* 830 */       this.currentState = 5;
/* 831 */       this.count = 1;
/* 832 */       setupNoRandPartA();
/*     */     } else {
/* 834 */       this.count++;
/* 835 */       if (this.count >= 4) {
/* 836 */         this.z = this.ll8[this.tPos];
/* 837 */         this.tPos = this.tt[this.tPos];
/* 838 */         this.currentState = 7;
/* 839 */         this.j2 = 0;
/* 840 */         setupNoRandPartC();
/*     */       } else {
/* 842 */         this.currentState = 5;
/* 843 */         setupNoRandPartA();
/*     */       } 
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setupNoRandPartC() {
/* 849 */     if (this.j2 < this.z) {
/* 850 */       this.currentChar = this.ch2;
/* 851 */       this.mCrc.updateCRC(this.ch2);
/* 852 */       this.j2++;
/*     */     } else {
/* 854 */       this.currentState = 5;
/* 855 */       this.i2++;
/* 856 */       this.count = 0;
/* 857 */       setupNoRandPartA();
/*     */     } 
/*     */   }
/*     */   
/*     */   private void setDecompressStructureSizes(int newSize100k) {
/* 862 */     if (0 > newSize100k || newSize100k > 9 || 0 > this.blockSize100k || this.blockSize100k > 9);
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 867 */     this.blockSize100k = newSize100k;
/*     */     
/* 869 */     if (newSize100k == 0) {
/*     */       return;
/*     */     }
/*     */     
/* 873 */     int n = 100000 * newSize100k;
/* 874 */     this.ll8 = new char[n];
/* 875 */     this.tt = new int[n];
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\bzip2\CBZip2InputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CBZip2OutputStream,"/*      */ package org.apache.tools.bzip2;
/*      */ 
/*      */ import java.io.IOException;
/*      */ import java.io.OutputStream;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class CBZip2OutputStream
/*      */   extends OutputStream
/*      */   implements BZip2Constants
/*      */ {
/*      */   protected static final int SETMASK = 2097152;
/*      */   protected static final int CLEARMASK = -2097153;
/*      */   protected static final int GREATER_ICOST = 15;
/*      */   protected static final int LESSER_ICOST = 0;
/*      */   protected static final int SMALL_THRESH = 20;
/*      */   protected static final int DEPTH_THRESH = 10;
/*      */   protected static final int QSORT_STACK_SIZE = 1000;
/*      */   int last;
/*      */   int origPtr;
/*      */   int blockSize100k;
/*      */   boolean blockRandomised;
/*      */   int bytesIn;
/*      */   int bytesOut;
/*      */   int bsBuff;
/*      */   int bsLive;
/*      */   
/*   93 */   private static void panic() { System.out.println(""panic""); }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void makeMaps() {
/*   99 */     this.nInUse = 0;
/*  100 */     for (int i = 0; i < 256; i++) {
/*  101 */       if (this.inUse[i]) {
/*  102 */         this.seqToUnseq[this.nInUse] = (char)i;
/*  103 */         this.unseqToSeq[i] = (char)this.nInUse;
/*  104 */         this.nInUse++;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   protected static void hbMakeCodeLengths(char[] len, int[] freq, int alphaSize, int maxLen) {
/*  118 */     int[] heap = new int[260];
/*  119 */     int[] weight = new int[516];
/*  120 */     int[] parent = new int[516];
/*      */     int i;
/*  122 */     for (i = 0; i < alphaSize; i++) {
/*  123 */       weight[i + 1] = ((freq[i] == 0) ? 1 : freq[i]) << 8;
/*      */     }
/*      */     
/*      */     while (true) {
/*  127 */       int nNodes = alphaSize;
/*  128 */       int nHeap = 0;
/*      */       
/*  130 */       heap[0] = 0;
/*  131 */       weight[0] = 0;
/*  132 */       parent[0] = -2;
/*      */       
/*  134 */       for (i = 1; i <= alphaSize; i++) {
/*  135 */         parent[i] = -1;
/*  136 */         nHeap++;
/*  137 */         heap[nHeap] = i;
/*      */ 
/*      */         
/*  140 */         int zz = nHeap;
/*  141 */         int tmp = heap[zz];
/*  142 */         while (weight[tmp] < weight[heap[zz >> 1]]) {
/*  143 */           heap[zz] = heap[zz >> 1];
/*  144 */           zz >>= 1;
/*      */         } 
/*  146 */         heap[zz] = tmp;
/*      */       } 
/*      */       
/*  149 */       if (nHeap >= 260) {
/*  150 */         panic();
/*      */       }
/*      */       
/*  153 */       while (nHeap > 1) {
/*  154 */         int n1 = heap[1];
/*  155 */         heap[1] = heap[nHeap];
/*  156 */         nHeap--;
/*      */         
/*  158 */         int zz = 0, yy = 0, tmp = 0;
/*  159 */         zz = 1;
/*  160 */         tmp = heap[zz];
/*      */         while (true) {
/*  162 */           yy = zz << 1;
/*  163 */           if (yy > nHeap) {
/*      */             break;
/*      */           }
/*  166 */           if (yy < nHeap && weight[heap[yy + 1]] < weight[heap[yy]])
/*      */           {
/*  168 */             yy++;
/*      */           }
/*  170 */           if (weight[tmp] < weight[heap[yy]]) {
/*      */             break;
/*      */           }
/*  173 */           heap[zz] = heap[yy];
/*  174 */           zz = yy;
/*      */         } 
/*  176 */         heap[zz] = tmp;
/*      */         
/*  178 */         int n2 = heap[1];
/*  179 */         heap[1] = heap[nHeap];
/*  180 */         nHeap--;
/*      */         
/*  182 */         int zz = 0, yy = 0, tmp = 0;
/*  183 */         zz = 1;
/*  184 */         tmp = heap[zz];
/*      */         while (true) {
/*  186 */           yy = zz << 1;
/*  187 */           if (yy > nHeap) {
/*      */             break;
/*      */           }
/*  190 */           if (yy < nHeap && weight[heap[yy + 1]] < weight[heap[yy]])
/*      */           {
/*  192 */             yy++;
/*      */           }
/*  194 */           if (weight[tmp] < weight[heap[yy]]) {
/*      */             break;
/*      */           }
/*  197 */           heap[zz] = heap[yy];
/*  198 */           zz = yy;
/*      */         } 
/*  200 */         heap[zz] = tmp;
/*      */         
/*  202 */         nNodes++;
/*  203 */         parent[n2] = nNodes; parent[n1] = nNodes;
/*      */         
/*  205 */         weight[nNodes] = (weight[n1] & 0xFFFFFF00) + (weight[n2] & 0xFFFFFF00) | 1 + (((weight[n1] & 0xFF) > (weight[n2] & 0xFF)) ? (weight[n1] & 0xFF) : (weight[n2] & 0xFF));
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/*  212 */         parent[nNodes] = -1;
/*  213 */         nHeap++;
/*  214 */         heap[nHeap] = nNodes;
/*      */         
/*  216 */         int zz = 0, tmp = 0;
/*  217 */         zz = nHeap;
/*  218 */         tmp = heap[zz];
/*  219 */         while (weight[tmp] < weight[heap[zz >> 1]]) {
/*  220 */           heap[zz] = heap[zz >> 1];
/*  221 */           zz >>= 1;
/*      */         } 
/*  223 */         heap[zz] = tmp;
/*      */       } 
/*      */       
/*  226 */       if (nNodes >= 516) {
/*  227 */         panic();
/*      */       }
/*      */       
/*  230 */       boolean tooLong = false;
/*  231 */       for (i = 1; i <= alphaSize; i++) {
/*  232 */         int j = 0;
/*  233 */         int k = i;
/*  234 */         while (parent[k] >= 0) {
/*  235 */           k = parent[k];
/*  236 */           j++;
/*      */         } 
/*  238 */         len[i - 1] = (char)j;
/*  239 */         if (j > maxLen) {
/*  240 */           tooLong = true;
/*      */         }
/*      */       } 
/*      */       
/*  244 */       if (!tooLong) {
/*      */         break;
/*      */       }
/*      */       
/*  248 */       for (i = 1; i < alphaSize; i++) {
/*  249 */         int m = weight[i] >> 8;
/*  250 */         m = 1 + m / 2;
/*  251 */         weight[i] = m << 8;
/*      */       } 
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  279 */   CRC mCrc = new CRC();
/*      */   
/*  281 */   private boolean[] inUse = new boolean[256];
/*      */   
/*      */   private int nInUse;
/*  284 */   private char[] seqToUnseq = new char[256];
/*  285 */   private char[] unseqToSeq = new char[256];
/*      */   
/*  287 */   private char[] selector = new char[18002];
/*  288 */   private char[] selectorMtf = new char[18002];
/*      */   
/*      */   private char[] block;
/*      */   
/*      */   private int[] quadrant;
/*      */   
/*      */   private int[] zptr;
/*      */   private short[] szptr;
/*      */   private int[] ftab;
/*      */   private int nMTF;
/*  298 */   private int[] mtfFreq = new int[258];
/*      */ 
/*      */   
/*      */   private int workFactor;
/*      */   
/*      */   private int workDone;
/*      */   
/*      */   private int workLimit;
/*      */   
/*      */   private boolean firstAttempt;
/*      */   
/*      */   private int nBlocksRandomised;
/*      */   
/*  311 */   private int currentChar = -1;
/*  312 */   private int runLength = 0; boolean closed; private int blockCRC; private int combinedCRC; private int allowableBlockSize; private OutputStream bsStream;
/*      */   private int[] incs;
/*      */   
/*  315 */   public CBZip2OutputStream(OutputStream inStream) throws IOException { this(inStream, 9); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void write(int bv) throws IOException {
/*  346 */     int b = (256 + bv) % 256;
/*  347 */     if (this.currentChar != -1) {
/*  348 */       if (this.currentChar == b) {
/*  349 */         this.runLength++;
/*  350 */         if (this.runLength > 254) {
/*  351 */           writeRun();
/*  352 */           this.currentChar = -1;
/*  353 */           this.runLength = 0;
/*      */         } 
/*      */       } else {
/*  356 */         writeRun();
/*  357 */         this.runLength = 1;
/*  358 */         this.currentChar = b;
/*      */       } 
/*      */     } else {
/*  361 */       this.currentChar = b;
/*  362 */       this.runLength++;
/*      */     } 
/*      */   }
/*      */   
/*      */   private void writeRun() throws IOException {
/*  367 */     if (this.last < this.allowableBlockSize) {
/*  368 */       this.inUse[this.currentChar] = true;
/*  369 */       for (int i = 0; i < this.runLength; i++) {
/*  370 */         this.mCrc.updateCRC((char)this.currentChar);
/*      */       }
/*  372 */       switch (this.runLength) {
/*      */         case 1:
/*  374 */           this.last++;
/*  375 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */         case 2:
/*  378 */           this.last++;
/*  379 */           this.block[this.last + 1] = (char)this.currentChar;
/*  380 */           this.last++;
/*  381 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */         case 3:
/*  384 */           this.last++;
/*  385 */           this.block[this.last + 1] = (char)this.currentChar;
/*  386 */           this.last++;
/*  387 */           this.block[this.last + 1] = (char)this.currentChar;
/*  388 */           this.last++;
/*  389 */           this.block[this.last + 1] = (char)this.currentChar;
/*      */           return;
/*      */       } 
/*  392 */       this.inUse[this.runLength - 4] = true;
/*  393 */       this.last++;
/*  394 */       this.block[this.last + 1] = (char)this.currentChar;
/*  395 */       this.last++;
/*  396 */       this.block[this.last + 1] = (char)this.currentChar;
/*  397 */       this.last++;
/*  398 */       this.block[this.last + 1] = (char)this.currentChar;
/*  399 */       this.last++;
/*  400 */       this.block[this.last + 1] = (char)this.currentChar;
/*  401 */       this.last++;
/*  402 */       this.block[this.last + 1] = (char)(this.runLength - 4);
/*      */     }
/*      */     else {
/*      */       
/*  406 */       endBlock();
/*  407 */       initBlock();
/*  408 */       writeRun();
/*      */     } 
/*      */   }
/*      */   
/*  412 */   public CBZip2OutputStream(OutputStream inStream, int inBlockSize) throws IOException { this.closed = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1540 */     this.incs = new int[] { 1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484 }; this.block = null; this.quadrant = null; this.zptr = null; this.ftab = null; bsSetStream(inStream); this.workFactor = 50; if (inBlockSize > 9) inBlockSize = 9;  if (inBlockSize < 1) inBlockSize = 1;  this.blockSize100k = inBlockSize; allocateCompressStructures(); initialize(); initBlock(); }
/*      */   public void finalize() throws Throwable { close(); }
/*      */   public void close() throws IOException { if (this.closed) return;  if (this.runLength > 0) writeRun();  this.currentChar = -1; endBlock(); endCompression(); this.closed = true; super.close(); this.bsStream.close(); }
/*      */   public void flush() throws IOException { super.flush(); this.bsStream.flush(); }
/*      */   private void initialize() throws IOException { this.bytesIn = 0; this.bytesOut = 0; this.nBlocksRandomised = 0; bsPutUChar(104); bsPutUChar(48 + this.blockSize100k); this.combinedCRC = 0; }
/* 1545 */   private void initBlock() { this.mCrc.initialiseCRC(); this.last = -1; for (int i = 0; i < 256; i++) this.inUse[i] = false;  this.allowableBlockSize = 100000 * this.blockSize100k - 20; } private void endBlock() throws IOException { this.blockCRC = this.mCrc.getFinalCRC(); this.combinedCRC = this.combinedCRC << 1 | this.combinedCRC >>> 31; this.combinedCRC ^= this.blockCRC; doReversibleTransformation(); bsPutUChar(49); bsPutUChar(65); bsPutUChar(89); bsPutUChar(38); bsPutUChar(83); bsPutUChar(89); bsPutint(this.blockCRC); if (this.blockRandomised) { bsW(1, 1); this.nBlocksRandomised++; } else { bsW(1, 0); }  moveToFrontCodeAndSend(); } private void endCompression() throws IOException { bsPutUChar(23); bsPutUChar(114); bsPutUChar(69); bsPutUChar(56); bsPutUChar(80); bsPutUChar(144); bsPutint(this.combinedCRC); bsFinishedWithStream(); } private void hbAssignCodes(int[] code, char[] length, int minLen, int maxLen, int alphaSize) { int vec = 0; for (int n = minLen; n <= maxLen; n++) { for (int i = 0; i < alphaSize; i++) { if (length[i] == n) { code[i] = vec; vec++; }  }  vec <<= 1; }  } private void bsSetStream(OutputStream f) { this.bsStream = f; this.bsLive = 0; this.bsBuff = 0; this.bytesOut = 0; this.bytesIn = 0; } private void bsFinishedWithStream() throws IOException { while (this.bsLive > 0) { int ch = this.bsBuff >> 24; try { this.bsStream.write(ch); } catch (IOException e) { throw e; }  this.bsBuff <<= 8; this.bsLive -= 8; this.bytesOut++; }  } private void bsW(int n, int v) throws IOException { while (this.bsLive >= 8) { int ch = this.bsBuff >> 24; try { this.bsStream.write(ch); } catch (IOException e) { throw e; }  this.bsBuff <<= 8; this.bsLive -= 8; this.bytesOut++; }  this.bsBuff |= v << 32 - this.bsLive - n; this.bsLive += n; } private void bsPutUChar(int c) throws IOException { bsW(8, c); } private void allocateCompressStructures() { int n = 100000 * this.blockSize100k;
/* 1546 */     this.block = new char[n + 1 + 20];
/* 1547 */     this.quadrant = new int[n + 20];
/* 1548 */     this.zptr = new int[n];
/* 1549 */     this.ftab = new int[65537];
/*      */     
/* 1551 */     if (this.block == null || this.quadrant == null || this.zptr == null || this.ftab == null);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1570 */     this.szptr = new short[2 * n]; }
/*      */   private void bsPutint(int u) throws IOException { bsW(8, u >> 24 & 0xFF); bsW(8, u >> 16 & 0xFF); bsW(8, u >> 8 & 0xFF); bsW(8, u & 0xFF); }
/*      */   private void bsPutIntVS(int numBits, int c) throws IOException { bsW(numBits, c); }
/*      */   private void sendMTFValues() throws IOException { byte b; char[][] len = new char[6][258]; int nSelectors = 0; int alphaSize = this.nInUse + 2; int t; for (t = 0; t < 6; t++) { for (int v = 0; v < alphaSize; v++) len[t][v] = '\017';  }  if (this.nMTF <= 0) panic();  if (this.nMTF < 200) { b = 2; } else if (this.nMTF < 600) { b = 3; } else if (this.nMTF < 1200) { b = 4; } else if (this.nMTF < 2400) { b = 5; } else { b = 6; }  int nPart = b; int remF = this.nMTF; int gs = 0; while (nPart > 0) { int tFreq = remF / nPart; int ge = gs - 1; int aFreq = 0; while (aFreq < tFreq && ge < alphaSize - 1) { ge++; aFreq += this.mtfFreq[ge]; }  if (ge > gs && nPart != b && nPart != 1 && (b - nPart) % 2 == 1) { aFreq -= this.mtfFreq[ge]; ge--; }  for (byte b1 = 0; b1 < alphaSize; b1++) { if (b1 >= gs && b1 <= ge) { len[nPart - 1][b1] = Character.MIN_VALUE; } else { len[nPart - 1][b1] = '\017'; }  }  nPart--; gs = ge + 1; remF -= aFreq; }  int[][] rfreq = new int[6][258]; int[] fave = new int[6]; short[] cost = new short[6]; for (int iter = 0; iter < 4; iter++) { for (t = 0; t < b; t++) fave[t] = 0;  for (t = 0; t < b; t++) { for (byte b1 = 0; b1 < alphaSize; b1++) rfreq[t][b1] = 0;  }  nSelectors = 0; int totc = 0; gs = 0; while (gs < this.nMTF) { int n = gs + 50 - 1; if (n >= this.nMTF) n = this.nMTF - 1;  for (t = 0; t < b; t++) cost[t] = 0;  if (b == 6) { short cost5 = 0, cost4 = cost5, cost3 = cost4, cost2 = cost3, cost1 = cost2, cost0 = cost1; for (int i = gs; i <= n; i++) { short icv = this.szptr[i]; cost0 = (short)(cost0 + len[0][icv]); cost1 = (short)(cost1 + len[1][icv]); cost2 = (short)(cost2 + len[2][icv]); cost3 = (short)(cost3 + len[3][icv]); cost4 = (short)(cost4 + len[4][icv]); cost5 = (short)(cost5 + len[5][icv]); }  cost[0] = cost0; cost[1] = cost1; cost[2] = cost2; cost[3] = cost3; cost[4] = cost4; cost[5] = cost5; } else { for (int i1 = gs; i1 <= n; i1++) { short icv = this.szptr[i1]; for (t = 0; t < b; t++) cost[t] = (short)(cost[t] + len[t][icv]);  }  }  int bc = 999999999; int bt = -1; for (t = 0; t < b; t++) { if (cost[t] < bc) { bc = cost[t]; bt = t; }  }  totc += bc; fave[bt] = fave[bt] + 1; this.selector[nSelectors] = (char)bt; nSelectors++; for (int m = gs; m <= n; m++) rfreq[bt][this.szptr[m]] = rfreq[bt][this.szptr[m]] + 1;  gs = n + 1; }  for (t = 0; t < b; t++) hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);  }  rfreq = null; fave = null; cost = null; if (b >= 8) panic();  if (nSelectors >= 32768 || nSelectors > 18002) panic();  char[] pos = new char[6]; int k; for (k = 0; k < b; k++) pos[k] = (char)k;  for (k = 0; k < nSelectors; k++) { char ll_i = this.selector[k]; int j = 0; char tmp = pos[j]; while (ll_i != tmp) { j++; char tmp2 = tmp; tmp = pos[j]; pos[j] = tmp2; }  pos[0] = tmp; this.selectorMtf[k] = (char)j; }  int[][] code = new int[6][258]; for (t = 0; t < b; t++) { int minLen = 32; int maxLen = 0; for (k = 0; k < alphaSize; k++) { if (len[t][k] > maxLen) maxLen = len[t][k];  if (len[t][k] < minLen) minLen = len[t][k];  }  if (maxLen > 20) panic();  if (minLen < 1) panic();  hbAssignCodes(code[t], len[t], minLen, maxLen, alphaSize); }  boolean[] inUse16 = new boolean[16]; for (k = 0; k < 16; k++) { inUse16[k] = false; for (byte b1 = 0; b1 < 16; b1++) { if (this.inUse[k * 16 + b1]) inUse16[k] = true;  }  }  int nBytes = this.bytesOut; for (k = 0; k < 16; k++) { if (inUse16[k]) { bsW(1, 1); } else { bsW(1, 0); }  }  for (k = 0; k < 16; k++) { if (inUse16[k]) for (byte b1 = 0; b1 < 16; b1++) { if (this.inUse[k * 16 + b1]) { bsW(1, 1); } else { bsW(1, 0); }  }   }  nBytes = this.bytesOut; bsW(3, b); bsW(15, nSelectors); for (k = 0; k < nSelectors; k++) { for (byte b1 = 0; b1 < this.selectorMtf[k]; b1++) bsW(1, 1);  bsW(1, 0); }  nBytes = this.bytesOut; for (t = 0; t < b; t++) { int curr = len[t][0]; bsW(5, curr); for (k = 0; k < alphaSize; k++) { while (curr < len[t][k]) { bsW(2, 2); curr++; }  while (curr > len[t][k]) { bsW(2, 3); curr--; }  bsW(1, 0); }  }  nBytes = this.bytesOut; int selCtr = 0; gs = 0; while (gs < this.nMTF) { int m = gs + 50 - 1; if (m >= this.nMTF) m = this.nMTF - 1;  for (k = gs; k <= m; k++) bsW(len[this.selector[selCtr]][this.szptr[k]], code[this.selector[selCtr]][this.szptr[k]]);  gs = m + 1; selCtr++; }  if (selCtr != nSelectors) panic();  } private void moveToFrontCodeAndSend() throws IOException { bsPutIntVS(24, this.origPtr); generateMTFValues(); sendMTFValues(); } private void simpleSort(int lo, int hi, int d) { int bigN = hi - lo + 1; if (bigN < 2) return;  int hp = 0; while (this.incs[hp] < bigN) hp++;  hp--; for (; hp >= 0; hp--) { int h = this.incs[hp]; int i = lo + h; while (i <= hi) { int v = this.zptr[i]; int j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (i > hi) break;  v = this.zptr[i]; j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (i > hi) break;  v = this.zptr[i]; j = i; while (fullGtU(this.zptr[j - h] + d, v + d)) { this.zptr[j] = this.zptr[j - h]; j -= h; if (j <= lo + h - 1) break;  }  this.zptr[j] = v; i++; if (this.workDone > this.workLimit && this.firstAttempt) return;  }  }  } private void vswap(int p1, int p2, int n) { int temp = 0; while (n > 0) { temp = this.zptr[p1]; this.zptr[p1] = this.zptr[p2]; this.zptr[p2] = temp; p1++; p2++; n--; }  } private char med3(char a, char b, char c) { if (a > b) { char t = a; a = b; b = t; }  if (b > c) { char c1 = b; b = c; c = c1; }  if (a > b) b = a;  return b; } private class StackElem {
/* 1574 */     int ll; int hh; int dd; private final CBZip2OutputStream this$0; private StackElem(CBZip2OutputStream this$0) { CBZip2OutputStream.this = CBZip2OutputStream.this; } } private void qSort3(int loSt, int hiSt, int dSt) { StackElem[] stack = new StackElem[1000]; for (int count = 0; count < 1000; count++) stack[count] = new StackElem();  int sp = 0; (stack[sp]).ll = loSt; (stack[sp]).hh = hiSt; (stack[sp]).dd = dSt; sp++; while (sp > 0) { if (sp >= 1000) panic();  sp--; int lo = (stack[sp]).ll; int hi = (stack[sp]).hh; int d = (stack[sp]).dd; if (hi - lo < 20 || d > 10) { simpleSort(lo, hi, d); if (this.workDone > this.workLimit && this.firstAttempt) return;  continue; }  int med = med3(this.block[this.zptr[lo] + d + 1], this.block[this.zptr[hi] + d + 1], this.block[this.zptr[lo + hi >> 1] + d + 1]); int ltLo = lo, unLo = ltLo; int gtHi = hi, unHi = gtHi; while (true) { if (unLo <= unHi) { int n = this.block[this.zptr[unLo] + d + 1] - med; if (n == 0) { int temp = 0; temp = this.zptr[unLo]; this.zptr[unLo] = this.zptr[ltLo]; this.zptr[ltLo] = temp; ltLo++; unLo++; continue; }  if (n <= 0) { unLo++; continue; }  }  while (unLo <= unHi) { int j = this.block[this.zptr[unHi] + d + 1] - med; if (j == 0) { int temp = 0; temp = this.zptr[unHi]; this.zptr[unHi] = this.zptr[gtHi]; this.zptr[gtHi] = temp; gtHi--; unHi--; continue; }  if (j < 0) break;  unHi--; }  if (unLo > unHi) break;  int temp = 0; temp = this.zptr[unLo]; this.zptr[unLo] = this.zptr[unHi]; this.zptr[unHi] = temp; unLo++; unHi--; }  if (gtHi < ltLo) { (stack[sp]).ll = lo; (stack[sp]).hh = hi; (stack[sp]).dd = d + 1; sp++; continue; }  int i = (ltLo - lo < unLo - ltLo) ? (ltLo - lo) : (unLo - ltLo); vswap(lo, unLo - i, i); int m = (hi - gtHi < gtHi - unHi) ? (hi - gtHi) : (gtHi - unHi); vswap(unLo, hi - m + 1, m); i = lo + unLo - ltLo - 1; m = hi - gtHi - unHi + 1; (stack[sp]).ll = lo; (stack[sp]).hh = i; (stack[sp]).dd = d; sp++; (stack[sp]).ll = i + 1; (stack[sp]).hh = m - 1; (stack[sp]).dd = d + 1; sp++; (stack[sp]).ll = m; (stack[sp]).hh = hi; (stack[sp]).dd = d; sp++; }  } private void mainSort() { int[] runningOrder = new int[256]; int[] copy = new int[256]; boolean[] bigDone = new boolean[256]; int i; for (i = 0; i < 20; i++) this.block[this.last + i + 2] = this.block[i % (this.last + 1) + 1];  for (i = 0; i <= this.last + 20; i++) this.quadrant[i] = 0;  this.block[0] = this.block[this.last + 1]; if (this.last < 4000) { for (i = 0; i <= this.last; i++) this.zptr[i] = i;  this.firstAttempt = false; this.workDone = this.workLimit = 0; simpleSort(0, this.last, 0); } else { int numQSorted = 0; for (i = 0; i <= 255; i++) bigDone[i] = false;  for (i = 0; i <= 65536; i++) this.ftab[i] = 0;  int c1 = this.block[0]; for (i = 0; i <= this.last; i++) { int c2 = this.block[i + 1]; this.ftab[(c1 << 8) + c2] = this.ftab[(c1 << 8) + c2] + 1; c1 = c2; }  for (i = 1; i <= 65536; i++) this.ftab[i] = this.ftab[i] + this.ftab[i - 1];  c1 = this.block[1]; for (i = 0; i < this.last; i++) { char c = this.block[i + 2]; int j = (c1 << 8) + c; c1 = c; this.ftab[j] = this.ftab[j] - 1; this.zptr[this.ftab[j]] = i; }  int k = (this.block[this.last + 1] << 8) + this.block[1]; this.ftab[k] = this.ftab[k] - 1; this.zptr[this.ftab[k]] = this.last; for (i = 0; i <= 255; i++) runningOrder[i] = i;  int h = 1; do { h = 3 * h + 1; } while (h <= 256); do { h /= 3; for (i = h; i <= 255; i++) { int vv = runningOrder[i]; k = i; while (this.ftab[runningOrder[k - h] + 1 << 8] - this.ftab[runningOrder[k - h] << 8] > this.ftab[vv + 1 << 8] - this.ftab[vv << 8]) { runningOrder[k] = runningOrder[k - h]; k -= h; if (k <= h - 1) break;  }  runningOrder[k] = vv; }  } while (h != 1); for (i = 0; i <= 255; i++) { int ss = runningOrder[i]; for (k = 0; k <= 255; k++) { int sb = (ss << 8) + k; if ((this.ftab[sb] & 0x200000) != 2097152) { int lo = this.ftab[sb] & 0xFFDFFFFF; int hi = (this.ftab[sb + 1] & 0xFFDFFFFF) - 1; if (hi > lo) { qSort3(lo, hi, 2); numQSorted += hi - lo + 1; if (this.workDone > this.workLimit && this.firstAttempt) return;  }  this.ftab[sb] = this.ftab[sb] | 0x200000; }  }  bigDone[ss] = true; if (i < 255) { int bbStart = this.ftab[ss << 8] & 0xFFDFFFFF; int bbSize = (this.ftab[ss + 1 << 8] & 0xFFDFFFFF) - bbStart; int shifts = 0; while (bbSize >> shifts > 65534) shifts++;  for (k = 0; k < bbSize; k++) { int a2update = this.zptr[bbStart + k]; int qVal = k >> shifts; this.quadrant[a2update] = qVal; if (a2update < 20) this.quadrant[a2update + this.last + 1] = qVal;  }  if (bbSize - 1 >> shifts > 65535) panic();  }  for (k = 0; k <= 255; k++) copy[k] = this.ftab[(k << 8) + ss] & 0xFFDFFFFF;  k = this.ftab[ss << 8] & 0xFFDFFFFF; for (; k < (this.ftab[ss + 1 << 8] & 0xFFDFFFFF); k++) { c1 = this.block[this.zptr[k]]; if (!bigDone[c1]) { this.zptr[copy[c1]] = (this.zptr[k] == 0) ? this.last : (this.zptr[k] - 1); copy[c1] = copy[c1] + 1; }  }  for (k = 0; k <= 255; k++) this.ftab[(k << 8) + ss] = this.ftab[(k << 8) + ss] | 0x200000;  }  }  } private void randomiseBlock() { int rNToGo = 0; int rTPos = 0; int i; for (i = 0; i < 256; i++) this.inUse[i] = false;  for (i = 0; i <= this.last; i++) { if (rNToGo == 0) { rNToGo = (char)BZip2Constants.rNums[rTPos]; rTPos++; if (rTPos == 512) rTPos = 0;  }  rNToGo--; this.block[i + 1] = (char)(this.block[i + 1] ^ ((rNToGo == 1) ? '\001' : Character.MIN_VALUE)); this.block[i + 1] = (char)(this.block[i + 1] & 0xFF); this.inUse[this.block[i + 1]] = true; }  } private void doReversibleTransformation() { this.workLimit = this.workFactor * this.last; this.workDone = 0; this.blockRandomised = false; this.firstAttempt = true; mainSort(); if (this.workDone > this.workLimit && this.firstAttempt) { randomiseBlock(); this.workLimit = this.workDone = 0; this.blockRandomised = true; this.firstAttempt = false; mainSort(); }  this.origPtr = -1; for (int i = 0; i <= this.last; i++) { if (this.zptr[i] == 0) { this.origPtr = i; break; }  }  if (this.origPtr == -1) panic();  } private boolean fullGtU(int i1, int i2) { char c1 = this.block[i1 + 1]; char c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  i1++; i2++; int k = this.last + 1; do { c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  int s1 = this.quadrant[i1]; int s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; c1 = this.block[i1 + 1]; c2 = this.block[i2 + 1]; if (c1 != c2) return (c1 > c2);  s1 = this.quadrant[i1]; s2 = this.quadrant[i2]; if (s1 != s2) return (s1 > s2);  i1++; i2++; if (i1 > this.last) { i1 -= this.last; i1--; }  if (i2 > this.last) { i2 -= this.last; i2--; }  k -= 4; this.workDone++; } while (k >= 0); return false; } private void generateMTFValues() { char[] yy = new char[256];
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1582 */     makeMaps();
/* 1583 */     int EOB = this.nInUse + 1;
/*      */     int i;
/* 1585 */     for (i = 0; i <= EOB; i++) {
/* 1586 */       this.mtfFreq[i] = 0;
/*      */     }
/*      */     
/* 1589 */     int wr = 0;
/* 1590 */     int zPend = 0;
/* 1591 */     for (i = 0; i < this.nInUse; i++) {
/* 1592 */       yy[i] = (char)i;
/*      */     }
/*      */ 
/*      */     
/* 1596 */     for (i = 0; i <= this.last; i++) {
/*      */ 
/*      */       
/* 1599 */       char ll_i = this.unseqToSeq[this.block[this.zptr[i]]];
/*      */       
/* 1601 */       int j = 0;
/* 1602 */       char tmp = yy[j];
/* 1603 */       while (ll_i != tmp) {
/* 1604 */         j++;
/* 1605 */         char tmp2 = tmp;
/* 1606 */         tmp = yy[j];
/* 1607 */         yy[j] = tmp2;
/*      */       } 
/* 1609 */       yy[0] = tmp;
/*      */       
/* 1611 */       if (j == 0) {
/* 1612 */         zPend++;
/*      */       } else {
/* 1614 */         if (zPend > 0) {
/* 1615 */           zPend--;
/*      */           while (true) {
/* 1617 */             switch (zPend % 2) {
/*      */               case 0:
/* 1619 */                 this.szptr[wr] = 0;
/* 1620 */                 wr++;
/* 1621 */                 this.mtfFreq[0] = this.mtfFreq[0] + 1;
/*      */                 break;
/*      */               case 1:
/* 1624 */                 this.szptr[wr] = 1;
/* 1625 */                 wr++;
/* 1626 */                 this.mtfFreq[1] = this.mtfFreq[1] + 1;
/*      */                 break;
/*      */             } 
/* 1629 */             if (zPend < 2) {
/*      */               break;
/*      */             }
/* 1632 */             zPend = (zPend - 2) / 2;
/*      */           } 
/* 1634 */           zPend = 0;
/*      */         } 
/* 1636 */         this.szptr[wr] = (short)(j + 1);
/* 1637 */         wr++;
/* 1638 */         this.mtfFreq[j + 1] = this.mtfFreq[j + 1] + 1;
/*      */       } 
/*      */     } 
/*      */     
/* 1642 */     if (zPend > 0) {
/* 1643 */       zPend--;
/*      */       while (true) {
/* 1645 */         switch (zPend % 2) {
/*      */           case 0:
/* 1647 */             this.szptr[wr] = 0;
/* 1648 */             wr++;
/* 1649 */             this.mtfFreq[0] = this.mtfFreq[0] + 1;
/*      */             break;
/*      */           case 1:
/* 1652 */             this.szptr[wr] = 1;
/* 1653 */             wr++;
/* 1654 */             this.mtfFreq[1] = this.mtfFreq[1] + 1;
/*      */             break;
/*      */         } 
/* 1657 */         if (zPend < 2) {
/*      */           break;
/*      */         }
/* 1660 */         zPend = (zPend - 2) / 2;
/*      */       } 
/*      */     } 
/*      */     
/* 1664 */     this.szptr[wr] = (short)EOB;
/* 1665 */     wr++;
/* 1666 */     this.mtfFreq[EOB] = this.mtfFreq[EOB] + 1;
/*      */     
/* 1668 */     this.nMTF = wr; }
/*      */ 
/*      */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\bzip2\CBZip2OutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.bzip2.CRC,"/*     */ package org.apache.tools.bzip2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class CRC
/*     */ {
/*  70 */   public static int[] crc32Table = new int[] { 0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371, 1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, -1742489888, -1662866601, -1851683442, -1788833735, -1960329156, -1880695413, -2103051438, -2040207643, -1104454824, -1159051537, -1213636554, -1284997759, -1389417084, -1444007885, -1532160278, -1603531939, -734892656, -789352409, -575645954, -646886583, -952755380, -1007220997, -827056094, -898286187, -231047128, -151282273, -71779514, -8804623, -515967244, -436212925, -390279782, -327299027, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633, 1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, -1398421865, -1469785312, -1524105735, -1578704818, -1079922613, -1151291908, -1239184603, -1293773166, -1968362705, -1905510760, -2094067647, -2014441994, -1716953613, -1654112188, -1876203875, -1796572374, -525066777, -462094256, -382327159, -302564546, -206542021, -143559028, -97365931, -17609246, -960696225, -1031934488, -817968335, -872425850, -709327229, -780559564, -600130067, -654598054, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652, 1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, -248556018, -168932423, -122852000, -60002089, -500490030, -420856475, -341238852, -278395381, -685261898, -739858943, -559578920, -630940305, -1004286614, -1058877219, -845023740, -916395085, -1119974018, -1174433591, -1262701040, -1333941337, -1371866206, -1426332139, -1481064244, -1552294533, -1690935098, -1611170447, -1833673816, -1770699233, -2009983462, -1930228819, -2119160460, -2056179517, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480, 1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, -978770311, -1050133554, -869589737, -924188512, -693284699, -764654318, -550540341, -605129092, -475935807, -413084042, -366743377, -287118056, -257573603, -194731862, -114850189, -35218492, -1984365303, -1921392450, -2143631769, -2063868976, -1698919467, -1635936670, -1824608069, -1744851700, -1347415887, -1418654458, -1506661409, -1561119128, -1129027987, -1200260134, -1254728445, -1309196108 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   int globalCrc;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 138 */   public CRC() { initialiseCRC(); }
/*     */ 
/*     */ 
/*     */   
/* 142 */   void initialiseCRC() { this.globalCrc = -1; }
/*     */ 
/*     */ 
/*     */   
/* 146 */   int getFinalCRC() { return this.globalCrc ^ 0xFFFFFFFF; }
/*     */ 
/*     */ 
/*     */   
/* 150 */   int getGlobalCRC() { return this.globalCrc; }
/*     */ 
/*     */ 
/*     */   
/* 154 */   void setGlobalCRC(int newCrc) { this.globalCrc = newCrc; }
/*     */ 
/*     */   
/*     */   void updateCRC(int inCh) {
/* 158 */     int temp = this.globalCrc >> 24 ^ inCh;
/* 159 */     if (temp < 0) {
/* 160 */       temp = 256 + temp;
/*     */     }
/* 162 */     this.globalCrc = this.globalCrc << 8 ^ crc32Table[temp];
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\bzip2\CRC.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.ErrorInQuitException,"/*    */ package org.apache.tools.mail;
/*    */ 
/*    */ import java.io.IOException;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class ErrorInQuitException
/*    */   extends IOException
/*    */ {
/* 73 */   public ErrorInQuitException(IOException e) { super(e.getMessage()); }
/*    */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\mail\ErrorInQuitException.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailMessage,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.net.InetAddress;
/*     */ import java.net.Socket;
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class MailMessage
/*     */ {
/*     */   public static final int DEFAULT_PORT = 25;
/*     */   private String host;
/* 141 */   private int port = 25;
/*     */ 
/*     */ 
/*     */   
/*     */   private String from;
/*     */ 
/*     */ 
/*     */   
/*     */   private Vector to;
/*     */ 
/*     */   
/*     */   private Vector cc;
/*     */ 
/*     */   
/*     */   private Hashtable headers;
/*     */ 
/*     */   
/*     */   private MailPrintStream out;
/*     */ 
/*     */   
/*     */   private SmtpResponseReader in;
/*     */ 
/*     */   
/*     */   private Socket socket;
/*     */ 
/*     */ 
/*     */   
/* 168 */   public MailMessage() throws IOException { this(""localhost"", 25); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public MailMessage(String host) throws IOException { this(host, 25); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public MailMessage(String host, int port) throws IOException {
/* 191 */     this.port = port;
/* 192 */     this.host = host;
/* 193 */     this.to = new Vector();
/* 194 */     this.cc = new Vector();
/* 195 */     this.headers = new Hashtable();
/* 196 */     setHeader(""X-Mailer"", ""org.apache.tools.mail.MailMessage (jakarta.apache.org)"");
/* 197 */     connect();
/* 198 */     sendHelo();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 207 */   public void setPort(int port) { this.port = port; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void from(String from) throws IOException {
/* 217 */     sendFrom(from);
/* 218 */     this.from = from;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void to(String to) throws IOException {
/* 228 */     sendRcpt(to);
/* 229 */     this.to.addElement(to);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void cc(String cc) throws IOException {
/* 239 */     sendRcpt(cc);
/* 240 */     this.cc.addElement(cc);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 250 */   public void bcc(String bcc) throws IOException { sendRcpt(bcc); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 259 */   public void setSubject(String subj) { this.headers.put(""Subject"", subj); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 268 */   public void setHeader(String name, String value) { this.headers.put(name, value); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public PrintStream getPrintStream() throws IOException {
/* 279 */     setFromHeader();
/* 280 */     setToHeader();
/* 281 */     setCcHeader();
/* 282 */     sendData();
/* 283 */     flushHeaders();
/* 284 */     return this.out;
/*     */   }
/*     */ 
/*     */   
/* 288 */   void setFromHeader() { setHeader(""From"", this.from); }
/*     */ 
/*     */ 
/*     */   
/* 292 */   void setToHeader() { setHeader(""To"", vectorToList(this.to)); }
/*     */ 
/*     */ 
/*     */   
/* 296 */   void setCcHeader() { setHeader(""Cc"", vectorToList(this.cc)); }
/*     */ 
/*     */   
/*     */   String vectorToList(Vector v) {
/* 300 */     StringBuffer buf = new StringBuffer();
/* 301 */     Enumeration e = v.elements();
/* 302 */     while (e.hasMoreElements()) {
/* 303 */       buf.append(e.nextElement());
/* 304 */       if (e.hasMoreElements()) {
/* 305 */         buf.append("", "");
/*     */       }
/*     */     } 
/* 308 */     return buf.toString();
/*     */   }
/*     */ 
/*     */   
/*     */   void flushHeaders() throws IOException {
/* 313 */     Enumeration e = this.headers.keys();
/* 314 */     while (e.hasMoreElements()) {
/* 315 */       String name = e.nextElement();
/* 316 */       String value = (String)this.headers.get(name);
/* 317 */       this.out.println(name + "": "" + value);
/*     */     } 
/* 319 */     this.out.println();
/* 320 */     this.out.flush();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void sendAndClose() throws IOException {
/*     */     try {
/* 331 */       sendDot();
/* 332 */       sendQuit();
/*     */     } finally {
/* 334 */       disconnect();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   static String sanitizeAddress(String s) {
/* 341 */     int paramDepth = 0;
/* 342 */     int start = 0;
/* 343 */     int end = 0;
/* 344 */     int len = s.length();
/*     */     
/* 346 */     for (int i = 0; i < len; i++) {
/* 347 */       char c = s.charAt(i);
/* 348 */       if (c == '(') {
/* 349 */         paramDepth++;
/* 350 */         if (start == 0) {
/* 351 */           end = i;
/*     */         }
/* 353 */       } else if (c == ')') {
/* 354 */         paramDepth--;
/* 355 */         if (end == 0) {
/* 356 */           start = i + 1;
/*     */         }
/* 358 */       } else if (paramDepth == 0 && c == '<') {
/* 359 */         start = i + 1;
/* 360 */       } else if (paramDepth == 0 && c == '>') {
/* 361 */         end = i;
/*     */       } 
/*     */     } 
/*     */     
/* 365 */     if (end == 0) {
/* 366 */       end = len;
/*     */     }
/*     */     
/* 369 */     return s.substring(start, end);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   void connect() throws IOException {
/* 375 */     this.socket = new Socket(this.host, this.port);
/* 376 */     this.out = new MailPrintStream(new BufferedOutputStream(this.socket.getOutputStream()));
/*     */ 
/*     */     
/* 379 */     this.in = new SmtpResponseReader(this.socket.getInputStream());
/* 380 */     getReady();
/*     */   }
/*     */   
/*     */   void getReady() throws IOException {
/* 384 */     String response = this.in.getResponse();
/* 385 */     int[] ok = { 220 };
/* 386 */     if (!isResponseOK(response, ok)) {
/* 387 */       throw new IOException(""Didn't get introduction from server: "" + response);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   void sendHelo() throws IOException {
/* 393 */     String local = InetAddress.getLocalHost().getHostName();
/* 394 */     int[] ok = { 250 };
/* 395 */     send(""HELO "" + local, ok);
/*     */   }
/*     */   
/*     */   void sendFrom(String from) throws IOException {
/* 399 */     int[] ok = { 250 };
/* 400 */     send(""MAIL FROM: <"" + sanitizeAddress(from) + "">"", ok);
/*     */   }
/*     */   
/*     */   void sendRcpt(String rcpt) throws IOException {
/* 404 */     int[] ok = { 250, 251 };
/* 405 */     send(""RCPT TO: <"" + sanitizeAddress(rcpt) + "">"", ok);
/*     */   }
/*     */   
/*     */   void sendData() throws IOException {
/* 409 */     int[] ok = { 354 };
/* 410 */     send(""DATA"", ok);
/*     */   }
/*     */   
/*     */   void sendDot() throws IOException {
/* 414 */     int[] ok = { 250 };
/* 415 */     send(""\r\n."", ok);
/*     */   }
/*     */   
/*     */   void sendQuit() throws IOException {
/* 419 */     int[] ok = { 221 };
/*     */     try {
/* 421 */       send(""QUIT"", ok);
/*     */     } catch (IOException e) {
/* 423 */       throw new ErrorInQuitException(e);
/*     */     } 
/*     */   }
/*     */   
/*     */   void send(String msg, int[] ok) throws IOException {
/* 428 */     this.out.rawPrint(msg + ""\r\n"");
/* 429 */     String response = this.in.getResponse();
/* 430 */     if (!isResponseOK(response, ok)) {
/* 431 */       throw new IOException(""Unexpected reply to command: "" + msg + "": "" + response);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   boolean isResponseOK(String response, int[] ok) {
/* 438 */     for (int i = 0; i < ok.length; i++) {
/* 439 */       if (response.startsWith("""" + ok[i])) {
/* 440 */         return true;
/*     */       }
/*     */     } 
/* 443 */     return false;
/*     */   }
/*     */   
/*     */   void disconnect() throws IOException {
/* 447 */     if (this.out != null) {
/* 448 */       this.out.close();
/*     */     }
/* 450 */     if (this.in != null) {
/*     */       try {
/* 452 */         this.in.close();
/* 453 */       } catch (IOException e) {}
/*     */     }
/*     */     
/* 456 */     if (this.socket != null)
/*     */       try {
/* 458 */         this.socket.close();
/* 459 */       } catch (IOException e) {} 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\mail\MailMessage.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.MailPrintStream,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.OutputStream;
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class MailPrintStream
/*     */   extends PrintStream
/*     */ {
/*     */   int lastChar;
/*     */   
/* 473 */   public MailPrintStream(OutputStream out) { super(out, true); }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int b) {
/* 479 */     if (b == 10 && this.lastChar != 13) {
/* 480 */       rawWrite(13);
/* 481 */       rawWrite(b);
/* 482 */     } else if (b == 46 && this.lastChar == 10) {
/* 483 */       rawWrite(46);
/* 484 */       rawWrite(b);
/*     */     } else {
/* 486 */       rawWrite(b);
/*     */     } 
/* 488 */     this.lastChar = b;
/*     */   }
/*     */   
/*     */   public void write(byte[] buf, int off, int len) {
/* 492 */     for (int i = 0; i < len; i++) {
/* 493 */       write(buf[off + i]);
/*     */     }
/*     */   }
/*     */ 
/*     */   
/* 498 */   void rawWrite(int b) { super.write(b); }
/*     */ 
/*     */   
/*     */   void rawPrint(String s) {
/* 502 */     int len = s.length();
/* 503 */     for (int i = 0; i < len; i++)
/* 504 */       rawWrite(s.charAt(i)); 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\mail\MailPrintStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.mail.SmtpResponseReader,"/*     */ package org.apache.tools.mail;
/*     */ 
/*     */ import java.io.BufferedReader;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SmtpResponseReader
/*     */ {
/*  73 */   protected BufferedReader reader = null;
/*  74 */   private StringBuffer result = new StringBuffer();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  80 */   public SmtpResponseReader(InputStream in) { this.reader = new BufferedReader(new InputStreamReader(in)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String getResponse() throws IOException {
/*  91 */     this.result.setLength(0);
/*  92 */     String line = this.reader.readLine();
/*  93 */     if (line != null && line.length() >= 3) {
/*  94 */       this.result.append(line.substring(0, 3));
/*  95 */       this.result.append("" "");
/*     */     } 
/*     */     
/*  98 */     while (line != null) {
/*  99 */       append(line);
/* 100 */       if (!hasMoreLines(line)) {
/*     */         break;
/*     */       }
/* 103 */       line = this.reader.readLine();
/*     */     } 
/* 105 */     return this.result.toString().trim();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 112 */   public void close() throws IOException { this.reader.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 119 */   protected boolean hasMoreLines(String line) { return (line.length() > 3 && line.charAt(3) == '-'); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void append(String line) {
/* 126 */     if (line.length() > 4) {
/* 127 */       this.result.append(line.substring(4));
/* 128 */       this.result.append("" "");
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\mail\SmtpResponseReader.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarBuffer,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarBuffer
/*     */ {
/*     */   public static final int DEFAULT_RCDSIZE = 512;
/*     */   public static final int DEFAULT_BLKSIZE = 10240;
/*     */   private InputStream inStream;
/*     */   private OutputStream outStream;
/*     */   private byte[] blockBuffer;
/*     */   private int currBlkIdx;
/*     */   private int currRecIdx;
/*     */   private int blockSize;
/*     */   private int recordSize;
/*     */   private int recsPerBlock;
/*     */   private boolean debug;
/*     */   
/*  96 */   public TarBuffer(InputStream inStream) { this(inStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/* 100 */   public TarBuffer(InputStream inStream, int blockSize) { this(inStream, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(InputStream inStream, int blockSize, int recordSize) {
/* 104 */     this.inStream = inStream;
/* 105 */     this.outStream = null;
/*     */     
/* 107 */     initialize(blockSize, recordSize);
/*     */   }
/*     */ 
/*     */   
/* 111 */   public TarBuffer(OutputStream outStream) { this(outStream, 10240); }
/*     */ 
/*     */ 
/*     */   
/* 115 */   public TarBuffer(OutputStream outStream, int blockSize) { this(outStream, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarBuffer(OutputStream outStream, int blockSize, int recordSize) {
/* 119 */     this.inStream = null;
/* 120 */     this.outStream = outStream;
/*     */     
/* 122 */     initialize(blockSize, recordSize);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void initialize(int blockSize, int recordSize) {
/* 129 */     this.debug = false;
/* 130 */     this.blockSize = blockSize;
/* 131 */     this.recordSize = recordSize;
/* 132 */     this.recsPerBlock = this.blockSize / this.recordSize;
/* 133 */     this.blockBuffer = new byte[this.blockSize];
/*     */     
/* 135 */     if (this.inStream != null) {
/* 136 */       this.currBlkIdx = -1;
/* 137 */       this.currRecIdx = this.recsPerBlock;
/*     */     } else {
/* 139 */       this.currBlkIdx = 0;
/* 140 */       this.currRecIdx = 0;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 148 */   public int getBlockSize() { return this.blockSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 155 */   public int getRecordSize() { return this.recordSize; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public void setDebug(boolean debug) { this.debug = debug; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isEOFRecord(byte[] record) {
/* 174 */     for (int i = 0, sz = getRecordSize(); i < sz; i++) {
/* 175 */       if (record[i] != 0) {
/* 176 */         return false;
/*     */       }
/*     */     } 
/*     */     
/* 180 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void skipRecord() throws IOException {
/* 187 */     if (this.debug) {
/* 188 */       System.err.println(""SkipRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 192 */     if (this.inStream == null) {
/* 193 */       throw new IOException(""reading (via skip) from an output buffer"");
/*     */     }
/*     */     
/* 196 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 197 */       !readBlock()) {
/*     */       return;
/*     */     }
/*     */ 
/*     */     
/* 202 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] readRecord() throws IOException {
/* 211 */     if (this.debug) {
/* 212 */       System.err.println(""ReadRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 216 */     if (this.inStream == null) {
/* 217 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 220 */     if (this.currRecIdx >= this.recsPerBlock && 
/* 221 */       !readBlock()) {
/* 222 */       return null;
/*     */     }
/*     */ 
/*     */     
/* 226 */     byte[] result = new byte[this.recordSize];
/*     */     
/* 228 */     System.arraycopy(this.blockBuffer, this.currRecIdx * this.recordSize, result, 0, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 232 */     this.currRecIdx++;
/*     */     
/* 234 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean readBlock() throws IOException {
/* 241 */     if (this.debug) {
/* 242 */       System.err.println(""ReadBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 245 */     if (this.inStream == null) {
/* 246 */       throw new IOException(""reading from an output buffer"");
/*     */     }
/*     */     
/* 249 */     this.currRecIdx = 0;
/*     */     
/* 251 */     int offset = 0;
/* 252 */     int bytesNeeded = this.blockSize;
/*     */     
/* 254 */     while (bytesNeeded > 0) {
/* 255 */       long numBytes = this.inStream.read(this.blockBuffer, offset, bytesNeeded);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 271 */       if (numBytes == -1L) {
/*     */         break;
/*     */       }
/*     */       
/* 275 */       offset = (int)(offset + numBytes);
/* 276 */       bytesNeeded = (int)(bytesNeeded - numBytes);
/*     */       
/* 278 */       if (numBytes != this.blockSize && 
/* 279 */         this.debug) {
/* 280 */         System.err.println(""ReadBlock: INCOMPLETE READ "" + numBytes + "" of "" + this.blockSize + "" bytes read."");
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 287 */     this.currBlkIdx++;
/*     */     
/* 289 */     return true;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 298 */   public int getCurrentBlockNum() { return this.currBlkIdx; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 308 */   public int getCurrentRecordNum() { return this.currRecIdx - 1; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] record) throws IOException {
/* 317 */     if (this.debug) {
/* 318 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 322 */     if (this.outStream == null) {
/* 323 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 326 */     if (record.length != this.recordSize) {
/* 327 */       throw new IOException(""record to write has length '"" + record.length + ""' which is not the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 333 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 334 */       writeBlock();
/*     */     }
/*     */     
/* 337 */     System.arraycopy(record, 0, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 341 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeRecord(byte[] buf, int offset) throws IOException {
/* 353 */     if (this.debug) {
/* 354 */       System.err.println(""WriteRecord: recIdx = "" + this.currRecIdx + "" blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */ 
/*     */     
/* 358 */     if (this.outStream == null) {
/* 359 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 362 */     if (offset + this.recordSize > buf.length) {
/* 363 */       throw new IOException(""record has length '"" + buf.length + ""' with offset '"" + offset + ""' which is less than the record size of '"" + this.recordSize + ""'"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 369 */     if (this.currRecIdx >= this.recsPerBlock) {
/* 370 */       writeBlock();
/*     */     }
/*     */     
/* 373 */     System.arraycopy(buf, offset, this.blockBuffer, this.currRecIdx * this.recordSize, this.recordSize);
/*     */ 
/*     */ 
/*     */     
/* 377 */     this.currRecIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeBlock() throws IOException {
/* 384 */     if (this.debug) {
/* 385 */       System.err.println(""WriteBlock: blkIdx = "" + this.currBlkIdx);
/*     */     }
/*     */     
/* 388 */     if (this.outStream == null) {
/* 389 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 392 */     this.outStream.write(this.blockBuffer, 0, this.blockSize);
/* 393 */     this.outStream.flush();
/*     */     
/* 395 */     this.currRecIdx = 0;
/* 396 */     this.currBlkIdx++;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void flushBlock() throws IOException {
/* 403 */     if (this.debug) {
/* 404 */       System.err.println(""TarBuffer.flushBlock() called."");
/*     */     }
/*     */     
/* 407 */     if (this.outStream == null) {
/* 408 */       throw new IOException(""writing to an input buffer"");
/*     */     }
/*     */     
/* 411 */     if (this.currRecIdx > 0) {
/* 412 */       writeBlock();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 421 */     if (this.debug) {
/* 422 */       System.err.println(""TarBuffer.closeBuffer()."");
/*     */     }
/*     */     
/* 425 */     if (this.outStream != null) {
/* 426 */       flushBlock();
/*     */       
/* 428 */       if (this.outStream != System.out && this.outStream != System.err) {
/*     */         
/* 430 */         this.outStream.close();
/*     */         
/* 432 */         this.outStream = null;
/*     */       } 
/* 434 */     } else if (this.inStream != null && 
/* 435 */       this.inStream != System.in) {
/* 436 */       this.inStream.close();
/*     */       
/* 438 */       this.inStream = null;
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarBuffer.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarConstants,"package org.apache.tools.tar;
public interface TarConstants {
  public static final int NAMELEN = 100;
  public static final int MODELEN = 8;
  public static final int UIDLEN = 8;
  public static final int GIDLEN = 8;
  public static final int CHKSUMLEN = 8;
  public static final int SIZELEN = 12;
  public static final int MAGICLEN = 8;
  public static final int MODTIMELEN = 12;
  public static final int UNAMELEN = 32;
  public static final int GNAMELEN = 32;
  public static final int DEVLEN = 8;
  public static final byte LF_OLDNORM = 0;
  public static final byte LF_NORMAL = 48;
  public static final byte LF_LINK = 49;
  public static final byte LF_SYMLINK = 50;
  public static final byte LF_CHR = 51;
  public static final byte LF_BLK = 52;
  public static final byte LF_DIR = 53;
  public static final byte LF_FIFO = 54;
  public static final byte LF_CONTIG = 55;
  public static final String TMAGIC = ""ustar"";
  public static final String GNU_TMAGIC = ""ustar  "";
  public static final String GNU_LONGLINK = ""././@LongLink"";
  public static final byte LF_GNUTYPE_LONGNAME = 76;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarConstants.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarEntry,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.File;
/*     */ import java.util.Date;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarEntry
/*     */   implements TarConstants
/*     */ {
/* 138 */   private StringBuffer magic = new StringBuffer(""ustar"");
/* 139 */   private StringBuffer name = new StringBuffer(); private int mode; private int userId; private int groupId;
/* 140 */   private StringBuffer linkName = new StringBuffer(); private long size; private long modTime; private int checkSum;
/*     */   private TarEntry() {
/* 142 */     String user = System.getProperty(""user.name"", """");
/*     */     
/* 144 */     if (user.length() > 31) {
/* 145 */       user = user.substring(0, 31);
/*     */     }
/*     */     
/* 148 */     this.userId = 0;
/* 149 */     this.groupId = 0;
/* 150 */     this.userName = new StringBuffer(user);
/* 151 */     this.groupName = new StringBuffer("""");
/* 152 */     this.file = null;
/*     */   }
/*     */   private byte linkFlag; private StringBuffer userName; private StringBuffer groupName;
/*     */   private int devMajor;
/*     */   private int devMinor;
/*     */   private File file;
/*     */   
/*     */   public TarEntry(String name) {
/* 160 */     this();
/*     */     
/* 162 */     boolean isDir = name.endsWith(""/"");
/*     */     
/* 164 */     this.checkSum = 0;
/* 165 */     this.devMajor = 0;
/* 166 */     this.devMinor = 0;
/* 167 */     this.name = new StringBuffer(name);
/* 168 */     this.mode = isDir ? 16877 : 33188;
/* 169 */     this.linkFlag = isDir ? 53 : 48;
/* 170 */     this.userId = 0;
/* 171 */     this.groupId = 0;
/* 172 */     this.size = 0L;
/* 173 */     this.checkSum = 0;
/* 174 */     this.modTime = (new Date()).getTime() / 1000L;
/* 175 */     this.linkName = new StringBuffer("""");
/* 176 */     this.userName = new StringBuffer("""");
/* 177 */     this.groupName = new StringBuffer("""");
/* 178 */     this.devMajor = 0;
/* 179 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(String name, byte linkFlag) {
/* 187 */     this(name);
/* 188 */     this.linkFlag = linkFlag;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(File file) {
/* 198 */     this();
/*     */     
/* 200 */     this.file = file;
/*     */     
/* 202 */     String name = file.getPath();
/* 203 */     String osname = System.getProperty(""os.name"");
/*     */     
/* 205 */     if (osname != null) {
/*     */ 
/*     */ 
/*     */       
/* 209 */       String win32Prefix = ""Windows"";
/* 210 */       String prefix = osname.substring(0, win32Prefix.length());
/*     */       
/* 212 */       if (prefix.equalsIgnoreCase(win32Prefix)) {
/* 213 */         if (name.length() > 2) {
/* 214 */           char ch1 = name.charAt(0);
/* 215 */           char ch2 = name.charAt(1);
/*     */           
/* 217 */           if (ch2 == ':' && ((ch1 >= 'a' && ch1 <= 'z') || (ch1 >= 'A' && ch1 <= 'Z')))
/*     */           {
/*     */             
/* 220 */             name = name.substring(2);
/*     */           }
/*     */         } 
/* 223 */       } else if (osname.toLowerCase().indexOf(""netware"") > -1) {
/* 224 */         int colon = name.indexOf(':');
/* 225 */         if (colon != -1) {
/* 226 */           name = name.substring(colon + 1);
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 231 */     name = name.replace(File.separatorChar, '/');
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 236 */     while (name.startsWith(""/"")) {
/* 237 */       name = name.substring(1);
/*     */     }
/*     */     
/* 240 */     this.linkName = new StringBuffer("""");
/* 241 */     this.name = new StringBuffer(name);
/*     */     
/* 243 */     if (file.isDirectory()) {
/* 244 */       this.mode = 16877;
/* 245 */       this.linkFlag = 53;
/*     */       
/* 247 */       if (this.name.charAt(this.name.length() - 1) != '/') {
/* 248 */         this.name.append(""/"");
/*     */       }
/*     */     } else {
/* 251 */       this.mode = 33188;
/* 252 */       this.linkFlag = 48;
/*     */     } 
/*     */     
/* 255 */     this.size = file.length();
/* 256 */     this.modTime = file.lastModified() / 1000L;
/* 257 */     this.checkSum = 0;
/* 258 */     this.devMajor = 0;
/* 259 */     this.devMinor = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry(byte[] headerBuf) {
/* 269 */     this();
/* 270 */     parseTarHeader(headerBuf);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 281 */   public boolean equals(TarEntry it) { return getName().equals(it.getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public boolean isDescendent(TarEntry desc) { return desc.getName().startsWith(getName()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 302 */   public String getName() { return this.name.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 311 */   public void setName(String name) { this.name = new StringBuffer(name); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 318 */   public void setMode(int mode) { this.mode = mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 328 */   public int getUserId() { return this.userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 337 */   public void setUserId(int userId) { this.userId = userId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 346 */   public int getGroupId() { return this.groupId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 355 */   public void setGroupId(int groupId) { this.groupId = groupId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 364 */   public String getUserName() { return this.userName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 373 */   public void setUserName(String userName) { this.userName = new StringBuffer(userName); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 382 */   public String getGroupName() { return this.groupName.toString(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 391 */   public void setGroupName(String groupName) { this.groupName = new StringBuffer(groupName); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setIds(int userId, int groupId) {
/* 401 */     setUserId(userId);
/* 402 */     setGroupId(groupId);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setNames(String userName, String groupName) {
/* 412 */     setUserName(userName);
/* 413 */     setGroupName(groupName);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 423 */   public void setModTime(long time) { this.modTime = time / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 432 */   public void setModTime(Date time) { this.modTime = time.getTime() / 1000L; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 441 */   public Date getModTime() { return new Date(this.modTime * 1000L); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 450 */   public File getFile() { return this.file; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 459 */   public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 468 */   public long getSize() { return this.size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 477 */   public void setSize(long size) { this.size = size; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 487 */   public boolean isGNULongNameEntry() { return (this.linkFlag == 76 && this.name.toString().equals(""././@LongLink"")); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean isDirectory() {
/* 497 */     if (this.file != null) {
/* 498 */       return this.file.isDirectory();
/*     */     }
/*     */     
/* 501 */     if (this.linkFlag == 53) {
/* 502 */       return true;
/*     */     }
/*     */     
/* 505 */     if (getName().endsWith(""/"")) {
/* 506 */       return true;
/*     */     }
/*     */     
/* 509 */     return false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry[] getDirectoryEntries() {
/* 519 */     if (this.file == null || !this.file.isDirectory()) {
/* 520 */       return new TarEntry[0];
/*     */     }
/*     */     
/* 523 */     String[] list = this.file.list();
/* 524 */     TarEntry[] result = new TarEntry[list.length];
/*     */     
/* 526 */     for (int i = 0; i < list.length; i++) {
/* 527 */       result[i] = new TarEntry(new File(this.file, list[i]));
/*     */     }
/*     */     
/* 530 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void writeEntryHeader(byte[] outbuf) {
/* 539 */     int offset = 0;
/*     */     
/* 541 */     offset = TarUtils.getNameBytes(this.name, outbuf, offset, 100);
/* 542 */     offset = TarUtils.getOctalBytes(this.mode, outbuf, offset, 8);
/* 543 */     offset = TarUtils.getOctalBytes(this.userId, outbuf, offset, 8);
/* 544 */     offset = TarUtils.getOctalBytes(this.groupId, outbuf, offset, 8);
/* 545 */     offset = TarUtils.getLongOctalBytes(this.size, outbuf, offset, 12);
/* 546 */     offset = TarUtils.getLongOctalBytes(this.modTime, outbuf, offset, 12);
/*     */     
/* 548 */     int csOffset = offset;
/*     */     
/* 550 */     for (int c = 0; c < 8; c++) {
/* 551 */       outbuf[offset++] = 32;
/*     */     }
/*     */     
/* 554 */     outbuf[offset++] = this.linkFlag;
/* 555 */     offset = TarUtils.getNameBytes(this.linkName, outbuf, offset, 100);
/* 556 */     offset = TarUtils.getNameBytes(this.magic, outbuf, offset, 8);
/* 557 */     offset = TarUtils.getNameBytes(this.userName, outbuf, offset, 32);
/* 558 */     offset = TarUtils.getNameBytes(this.groupName, outbuf, offset, 32);
/* 559 */     offset = TarUtils.getOctalBytes(this.devMajor, outbuf, offset, 8);
/* 560 */     offset = TarUtils.getOctalBytes(this.devMinor, outbuf, offset, 8);
/*     */     
/* 562 */     while (offset < outbuf.length) {
/* 563 */       outbuf[offset++] = 0;
/*     */     }
/*     */     
/* 566 */     long checkSum = TarUtils.computeCheckSum(outbuf);
/*     */     
/* 568 */     TarUtils.getCheckSumOctalBytes(checkSum, outbuf, csOffset, 8);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseTarHeader(byte[] header) {
/* 577 */     int offset = 0;
/*     */     
/* 579 */     this.name = TarUtils.parseName(header, offset, 100);
/* 580 */     offset += 100;
/* 581 */     this.mode = (int)TarUtils.parseOctal(header, offset, 8);
/* 582 */     offset += 8;
/* 583 */     this.userId = (int)TarUtils.parseOctal(header, offset, 8);
/* 584 */     offset += 8;
/* 585 */     this.groupId = (int)TarUtils.parseOctal(header, offset, 8);
/* 586 */     offset += 8;
/* 587 */     this.size = TarUtils.parseOctal(header, offset, 12);
/* 588 */     offset += 12;
/* 589 */     this.modTime = TarUtils.parseOctal(header, offset, 12);
/* 590 */     offset += 12;
/* 591 */     this.checkSum = (int)TarUtils.parseOctal(header, offset, 8);
/* 592 */     offset += 8;
/* 593 */     this.linkFlag = header[offset++];
/* 594 */     this.linkName = TarUtils.parseName(header, offset, 100);
/* 595 */     offset += 100;
/* 596 */     this.magic = TarUtils.parseName(header, offset, 8);
/* 597 */     offset += 8;
/* 598 */     this.userName = TarUtils.parseName(header, offset, 32);
/* 599 */     offset += 32;
/* 600 */     this.groupName = TarUtils.parseName(header, offset, 32);
/* 601 */     offset += 32;
/* 602 */     this.devMajor = (int)TarUtils.parseOctal(header, offset, 8);
/* 603 */     offset += 8;
/* 604 */     this.devMinor = (int)TarUtils.parseOctal(header, offset, 8);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarInputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarInputStream
/*     */   extends FilterInputStream
/*     */ {
/*     */   protected boolean debug;
/*     */   protected boolean hasHitEOF;
/*     */   protected int entrySize;
/*     */   protected int entryOffset;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] readBuf;
/*     */   protected TarBuffer buffer;
/*     */   protected TarEntry currEntry;
/*     */   private boolean v7Format;
/*     */   
/*  89 */   public TarInputStream(InputStream is) { this(is, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  93 */   public TarInputStream(InputStream is, int blockSize) { this(is, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarInputStream(InputStream is, int blockSize, int recordSize) {
/*  97 */     super(is);
/*     */     
/*  99 */     this.buffer = new TarBuffer(is, blockSize, recordSize);
/* 100 */     this.readBuf = null;
/* 101 */     this.oneBuf = new byte[1];
/* 102 */     this.debug = false;
/* 103 */     this.hasHitEOF = false;
/* 104 */     this.v7Format = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDebug(boolean debug) {
/* 113 */     this.debug = debug;
/* 114 */     this.buffer.setDebug(debug);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   public void close() throws IOException { this.buffer.close(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 144 */   public int available() throws IOException { return this.entrySize - this.entryOffset; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public long skip(long numToSkip) throws IOException {
/* 160 */     byte[] skipBuf = new byte[8192];
/* 161 */     long skip = numToSkip;
/* 162 */     while (skip > 0L) {
/* 163 */       int realSkip = (skip > skipBuf.length) ? skipBuf.length : (int)skip;
/* 164 */       int numRead = read(skipBuf, 0, realSkip);
/* 165 */       if (numRead == -1) {
/*     */         break;
/*     */       }
/* 168 */       skip -= numRead;
/*     */     } 
/* 170 */     return numToSkip - skip;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 179 */   public boolean markSupported() { return false; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void mark(int markLimit) {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void reset() {}
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public TarEntry getNextEntry() throws IOException {
/* 209 */     if (this.hasHitEOF) {
/* 210 */       return null;
/*     */     }
/*     */     
/* 213 */     if (this.currEntry != null) {
/* 214 */       int numToSkip = this.entrySize - this.entryOffset;
/*     */       
/* 216 */       if (this.debug) {
/* 217 */         System.err.println(""TarInputStream: SKIP currENTRY '"" + this.currEntry.getName() + ""' SZ "" + this.entrySize + "" OFF "" + this.entryOffset + ""  skipping "" + numToSkip + "" bytes"");
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 224 */       if (numToSkip > 0) {
/* 225 */         skip(numToSkip);
/*     */       }
/*     */       
/* 228 */       this.readBuf = null;
/*     */     } 
/*     */     
/* 231 */     byte[] headerBuf = this.buffer.readRecord();
/*     */     
/* 233 */     if (headerBuf == null) {
/* 234 */       if (this.debug) {
/* 235 */         System.err.println(""READ NULL RECORD"");
/*     */       }
/* 237 */       this.hasHitEOF = true;
/* 238 */     } else if (this.buffer.isEOFRecord(headerBuf)) {
/* 239 */       if (this.debug) {
/* 240 */         System.err.println(""READ EOF RECORD"");
/*     */       }
/* 242 */       this.hasHitEOF = true;
/*     */     } 
/*     */     
/* 245 */     if (this.hasHitEOF) {
/* 246 */       this.currEntry = null;
/*     */     } else {
/* 248 */       this.currEntry = new TarEntry(headerBuf);
/*     */       
/* 250 */       if (headerBuf[257] != 117 || headerBuf[258] != 115 || headerBuf[259] != 116 || headerBuf[260] != 97 || headerBuf[261] != 114)
/*     */       {
/*     */         
/* 253 */         this.v7Format = true;
/*     */       }
/*     */       
/* 256 */       if (this.debug) {
/* 257 */         System.err.println(""TarInputStream: SET CURRENTRY '"" + this.currEntry.getName() + ""' size = "" + this.currEntry.getSize());
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 263 */       this.entryOffset = 0;
/*     */ 
/*     */       
/* 266 */       this.entrySize = (int)this.currEntry.getSize();
/*     */     } 
/*     */     
/* 269 */     if (this.currEntry != null && this.currEntry.isGNULongNameEntry()) {
/*     */       
/* 271 */       StringBuffer longName = new StringBuffer();
/* 272 */       byte[] buffer = new byte[256];
/* 273 */       int length = 0;
/* 274 */       while ((length = read(buffer)) >= 0) {
/* 275 */         longName.append(new String(buffer, 0, length));
/*     */       }
/* 277 */       getNextEntry();
/* 278 */       this.currEntry.setName(longName.toString());
/*     */     } 
/*     */     
/* 281 */     return this.currEntry;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read() throws IOException {
/* 292 */     int num = read(this.oneBuf, 0, 1);
/*     */     
/* 294 */     if (num == -1) {
/* 295 */       return num;
/*     */     }
/* 297 */     return this.oneBuf[0];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 310 */   public int read(byte[] buf) throws IOException { return read(buf, 0, buf.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int read(byte[] buf, int offset, int numToRead) throws IOException {
/* 326 */     int totalRead = 0;
/*     */     
/* 328 */     if (this.entryOffset >= this.entrySize) {
/* 329 */       return -1;
/*     */     }
/*     */     
/* 332 */     if (numToRead + this.entryOffset > this.entrySize) {
/* 333 */       numToRead = this.entrySize - this.entryOffset;
/*     */     }
/*     */     
/* 336 */     if (this.readBuf != null) {
/* 337 */       int sz = (numToRead > this.readBuf.length) ? this.readBuf.length : numToRead;
/*     */ 
/*     */       
/* 340 */       System.arraycopy(this.readBuf, 0, buf, offset, sz);
/*     */       
/* 342 */       if (sz >= this.readBuf.length) {
/* 343 */         this.readBuf = null;
/*     */       } else {
/* 345 */         int newLen = this.readBuf.length - sz;
/* 346 */         byte[] newBuf = new byte[newLen];
/*     */         
/* 348 */         System.arraycopy(this.readBuf, sz, newBuf, 0, newLen);
/*     */         
/* 350 */         this.readBuf = newBuf;
/*     */       } 
/*     */       
/* 353 */       totalRead += sz;
/* 354 */       numToRead -= sz;
/* 355 */       offset += sz;
/*     */     } 
/*     */     
/* 358 */     while (numToRead > 0) {
/* 359 */       byte[] rec = this.buffer.readRecord();
/*     */       
/* 361 */       if (rec == null)
/*     */       {
/* 363 */         throw new IOException(""unexpected EOF with "" + numToRead + "" bytes unread"");
/*     */       }
/*     */ 
/*     */       
/* 367 */       int sz = numToRead;
/* 368 */       int recLen = rec.length;
/*     */       
/* 370 */       if (recLen > sz) {
/* 371 */         System.arraycopy(rec, 0, buf, offset, sz);
/*     */         
/* 373 */         this.readBuf = new byte[recLen - sz];
/*     */         
/* 375 */         System.arraycopy(rec, sz, this.readBuf, 0, recLen - sz);
/*     */       } else {
/* 377 */         sz = recLen;
/*     */         
/* 379 */         System.arraycopy(rec, 0, buf, offset, recLen);
/*     */       } 
/*     */       
/* 382 */       totalRead += sz;
/* 383 */       numToRead -= sz;
/* 384 */       offset += sz;
/*     */     } 
/*     */     
/* 387 */     this.entryOffset += totalRead;
/*     */     
/* 389 */     return totalRead;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void copyEntryContents(OutputStream out) throws IOException {
/* 399 */     byte[] buf = new byte[32768];
/*     */     
/*     */     while (true) {
/* 402 */       int numRead = read(buf, 0, buf.length);
/*     */       
/* 404 */       if (numRead == -1) {
/*     */         break;
/*     */       }
/*     */       
/* 408 */       out.write(buf, 0, numRead);
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarInputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarOutputStream,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ import java.io.FilterOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarOutputStream
/*     */   extends FilterOutputStream
/*     */ {
/*     */   public static final int LONGFILE_ERROR = 0;
/*     */   public static final int LONGFILE_TRUNCATE = 1;
/*     */   public static final int LONGFILE_GNU = 2;
/*     */   protected boolean debug;
/*     */   protected int currSize;
/*     */   protected int currBytes;
/*     */   protected byte[] oneBuf;
/*     */   protected byte[] recordBuf;
/*     */   protected int assemLen;
/*     */   protected byte[] assemBuf;
/*     */   protected TarBuffer buffer;
/*  91 */   protected int longFileMode = 0;
/*     */ 
/*     */   
/*  94 */   public TarOutputStream(OutputStream os) { this(os, 10240, 512); }
/*     */ 
/*     */ 
/*     */   
/*  98 */   public TarOutputStream(OutputStream os, int blockSize) { this(os, blockSize, 512); }
/*     */ 
/*     */   
/*     */   public TarOutputStream(OutputStream os, int blockSize, int recordSize) {
/* 102 */     super(os);
/*     */     
/* 104 */     this.buffer = new TarBuffer(os, blockSize, recordSize);
/* 105 */     this.debug = false;
/* 106 */     this.assemLen = 0;
/* 107 */     this.assemBuf = new byte[recordSize];
/* 108 */     this.recordBuf = new byte[recordSize];
/* 109 */     this.oneBuf = new byte[1];
/*     */   }
/*     */ 
/*     */   
/* 113 */   public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 123 */   public void setDebug(boolean debugF) { this.debug = debugF; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 132 */   public void setBufferDebug(boolean debug) { this.buffer.setDebug(debug); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public void finish() throws IOException { writeEOFRecord(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void close() throws IOException {
/* 149 */     finish();
/* 150 */     this.buffer.close();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 159 */   public int getRecordSize() { return this.buffer.getRecordSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(TarEntry entry) throws IOException {
/* 174 */     if (entry.getName().length() >= 100)
/*     */     {
/* 176 */       if (this.longFileMode == 2) {
/*     */ 
/*     */         
/* 179 */         TarEntry longLinkEntry = new TarEntry(""././@LongLink"", (byte)76);
/*     */ 
/*     */         
/* 182 */         longLinkEntry.setSize((entry.getName().length() + 1));
/* 183 */         putNextEntry(longLinkEntry);
/* 184 */         write(entry.getName().getBytes());
/* 185 */         write(0);
/* 186 */         closeEntry();
/* 187 */       } else if (this.longFileMode != 1) {
/* 188 */         throw new RuntimeException(""file name '"" + entry.getName() + ""' is too long ( > "" + 'd' + "" bytes)"");
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/* 194 */     entry.writeEntryHeader(this.recordBuf);
/* 195 */     this.buffer.writeRecord(this.recordBuf);
/*     */     
/* 197 */     this.currBytes = 0;
/*     */     
/* 199 */     if (entry.isDirectory()) {
/* 200 */       this.currSize = 0;
/*     */     } else {
/* 202 */       this.currSize = (int)entry.getSize();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 216 */     if (this.assemLen > 0) {
/* 217 */       for (int i = this.assemLen; i < this.assemBuf.length; i++) {
/* 218 */         this.assemBuf[i] = 0;
/*     */       }
/*     */       
/* 221 */       this.buffer.writeRecord(this.assemBuf);
/*     */       
/* 223 */       this.currBytes += this.assemLen;
/* 224 */       this.assemLen = 0;
/*     */     } 
/*     */     
/* 227 */     if (this.currBytes < this.currSize) {
/* 228 */       throw new IOException(""entry closed at '"" + this.currBytes + ""' before the '"" + this.currSize + ""' bytes specified in the header were written"");
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(int b) throws IOException {
/* 242 */     this.oneBuf[0] = (byte)b;
/*     */     
/* 244 */     write(this.oneBuf, 0, 1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 256 */   public void write(byte[] wBuf) throws IOException { write(wBuf, 0, wBuf.length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {
/* 273 */     if (this.currBytes + numToWrite > this.currSize) {
/* 274 */       throw new IOException(""request to write '"" + numToWrite + ""' bytes exceeds size in header of '"" + this.currSize + ""' bytes"");
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 287 */     if (this.assemLen > 0) {
/* 288 */       if (this.assemLen + numToWrite >= this.recordBuf.length) {
/* 289 */         int aLen = this.recordBuf.length - this.assemLen;
/*     */         
/* 291 */         System.arraycopy(this.assemBuf, 0, this.recordBuf, 0, this.assemLen);
/*     */         
/* 293 */         System.arraycopy(wBuf, wOffset, this.recordBuf, this.assemLen, aLen);
/*     */         
/* 295 */         this.buffer.writeRecord(this.recordBuf);
/*     */         
/* 297 */         this.currBytes += this.recordBuf.length;
/* 298 */         wOffset += aLen;
/* 299 */         numToWrite -= aLen;
/* 300 */         this.assemLen = 0;
/*     */       } else {
/* 302 */         System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen, numToWrite);
/*     */ 
/*     */         
/* 305 */         wOffset += numToWrite;
/* 306 */         this.assemLen += numToWrite;
/* 307 */         numToWrite -= numToWrite;
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 316 */     while (numToWrite > 0) {
/* 317 */       if (numToWrite < this.recordBuf.length) {
/* 318 */         System.arraycopy(wBuf, wOffset, this.assemBuf, this.assemLen, numToWrite);
/*     */ 
/*     */         
/* 321 */         this.assemLen += numToWrite;
/*     */         
/*     */         break;
/*     */       } 
/*     */       
/* 326 */       this.buffer.writeRecord(wBuf, wOffset);
/*     */       
/* 328 */       int num = this.recordBuf.length;
/*     */       
/* 330 */       this.currBytes += num;
/* 331 */       numToWrite -= num;
/* 332 */       wOffset += num;
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void writeEOFRecord() throws IOException {
/* 341 */     for (int i = 0; i < this.recordBuf.length; i++) {
/* 342 */       this.recordBuf[i] = 0;
/*     */     }
/*     */     
/* 345 */     this.buffer.writeRecord(this.recordBuf);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.tar.TarUtils,"/*     */ package org.apache.tools.tar;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class TarUtils
/*     */ {
/*     */   public static long parseOctal(byte[] header, int offset, int length) {
/*  80 */     long result = 0L;
/*  81 */     boolean stillPadding = true;
/*  82 */     int end = offset + length;
/*     */     
/*  84 */     for (int i = offset; i < end && 
/*  85 */       header[i] != 0; i++) {
/*     */ 
/*     */ 
/*     */       
/*  89 */       if (header[i] == 32 || header[i] == 48) {
/*  90 */         if (stillPadding) {
/*     */           continue;
/*     */         }
/*     */         
/*  94 */         if (header[i] == 32) {
/*     */           break;
/*     */         }
/*     */       } 
/*     */       
/*  99 */       stillPadding = false;
/* 100 */       result = (result << 3L) + (header[i] - 48);
/*     */       continue;
/*     */     } 
/* 103 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static StringBuffer parseName(byte[] header, int offset, int length) {
/* 115 */     StringBuffer result = new StringBuffer(length);
/* 116 */     int end = offset + length;
/*     */     
/* 118 */     for (int i = offset; i < end && 
/* 119 */       header[i] != 0; i++)
/*     */     {
/*     */ 
/*     */       
/* 123 */       result.append((char)header[i]);
/*     */     }
/*     */     
/* 126 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {
/*     */     int i;
/* 140 */     for (i = 0; i < length && i < name.length(); i++) {
/* 141 */       buf[offset + i] = (byte)name.charAt(i);
/*     */     }
/*     */     
/* 144 */     for (; i < length; i++) {
/* 145 */       buf[offset + i] = 0;
/*     */     }
/*     */     
/* 148 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getOctalBytes(long value, byte[] buf, int offset, int length) {
/* 160 */     byte[] result = new byte[length];
/* 161 */     int idx = length - 1;
/*     */     
/* 163 */     buf[offset + idx] = 0;
/* 164 */     idx--;
/* 165 */     buf[offset + idx] = 32;
/* 166 */     idx--;
/*     */     
/* 168 */     if (value == 0L) {
/* 169 */       buf[offset + idx] = 48;
/* 170 */       idx--;
/*     */     } else {
/* 172 */       for (long val = value; idx >= 0 && val > 0L; idx--) {
/* 173 */         buf[offset + idx] = (byte)(48 + (byte)(int)(val & 0x7L));
/* 174 */         val >>= 3L;
/*     */       } 
/*     */     } 
/*     */     
/* 178 */     for (; idx >= 0; idx--) {
/* 179 */       buf[offset + idx] = 32;
/*     */     }
/*     */     
/* 182 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {
/* 194 */     byte[] temp = new byte[length + 1];
/*     */     
/* 196 */     getOctalBytes(value, temp, 0, length + 1);
/* 197 */     System.arraycopy(temp, 0, buf, offset, length);
/*     */     
/* 199 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {
/* 211 */     getOctalBytes(value, buf, offset, length);
/*     */     
/* 213 */     buf[offset + length - 1] = 32;
/* 214 */     buf[offset + length - 2] = 0;
/*     */     
/* 216 */     return offset + length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static long computeCheckSum(byte[] buf) {
/* 226 */     long sum = 0L;
/*     */     
/* 228 */     for (int i = 0; i < buf.length; i++) {
/* 229 */       sum += (0xFF & buf[i]);
/*     */     }
/*     */     
/* 232 */     return sum;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\tar\TarUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.AsiExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AsiExtraField
/*     */   implements ZipExtraField, UnixStat, Cloneable
/*     */ {
/*  89 */   private static final ZipShort HEADER_ID = new ZipShort(30062);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  96 */   private int mode = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 102 */   private int uid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 108 */   private int gid = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 116 */   private String link = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean dirFlag = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 129 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 140 */   public ZipShort getHeaderId() { return HEADER_ID; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 150 */   public ZipShort getLocalFileDataLength() { return new ZipShort(14 + (getLinkedFile().getBytes()).length); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 164 */   public ZipShort getCentralDirectoryLength() { return getLocalFileDataLength(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getLocalFileDataData() {
/* 175 */     byte[] data = new byte[getLocalFileDataLength().getValue() - 4];
/* 176 */     System.arraycopy((new ZipShort(getMode())).getBytes(), 0, data, 0, 2);
/*     */     
/* 178 */     byte[] linkArray = getLinkedFile().getBytes();
/* 179 */     System.arraycopy((new ZipLong(linkArray.length)).getBytes(), 0, data, 2, 4);
/*     */ 
/*     */     
/* 182 */     System.arraycopy((new ZipShort(getUserId())).getBytes(), 0, data, 6, 2);
/*     */     
/* 184 */     System.arraycopy((new ZipShort(getGroupId())).getBytes(), 0, data, 8, 2);
/*     */ 
/*     */     
/* 187 */     System.arraycopy(linkArray, 0, data, 10, linkArray.length);
/*     */     
/* 189 */     this.crc.reset();
/* 190 */     this.crc.update(data);
/* 191 */     long checksum = this.crc.getValue();
/*     */     
/* 193 */     byte[] result = new byte[data.length + 4];
/* 194 */     System.arraycopy((new ZipLong(checksum)).getBytes(), 0, result, 0, 4);
/* 195 */     System.arraycopy(data, 0, result, 4, data.length);
/* 196 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 205 */   public byte[] getCentralDirectoryData() { return getLocalFileDataData(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 214 */   public void setUserId(int uid) { this.uid = uid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 223 */   public int getUserId() { return this.uid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 232 */   public void setGroupId(int gid) { this.gid = gid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public int getGroupId() { return this.gid; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLinkedFile(String name) {
/* 253 */     this.link = name;
/* 254 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 266 */   public String getLinkedFile() { return this.link; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 275 */   public boolean isLink() { return (getLinkedFile().length() != 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 284 */   public void setMode(int mode) { this.mode = getMode(mode); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 293 */   public int getMode() { return this.mode; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setDirectory(boolean dirFlag) {
/* 302 */     this.dirFlag = dirFlag;
/* 303 */     this.mode = getMode(this.mode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 312 */   public boolean isDirectory() { return (this.dirFlag && !isLink()); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void parseFromLocalFileData(byte[] data, int offset, int length) throws ZipException {
/* 323 */     long givenChecksum = (new ZipLong(data, offset)).getValue();
/* 324 */     byte[] tmp = new byte[length - 4];
/* 325 */     System.arraycopy(data, offset + 4, tmp, 0, length - 4);
/* 326 */     this.crc.reset();
/* 327 */     this.crc.update(tmp);
/* 328 */     long realChecksum = this.crc.getValue();
/* 329 */     if (givenChecksum != realChecksum) {
/* 330 */       throw new ZipException(""bad CRC checksum "" + Long.toHexString(givenChecksum) + "" instead of "" + Long.toHexString(realChecksum));
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 336 */     int newMode = (new ZipShort(tmp, 0)).getValue();
/* 337 */     byte[] linkArray = new byte[(int)(new ZipLong(tmp, 2)).getValue()];
/* 338 */     this.uid = (new ZipShort(tmp, 6)).getValue();
/* 339 */     this.gid = (new ZipShort(tmp, 8)).getValue();
/*     */     
/* 341 */     if (linkArray.length == 0) {
/* 342 */       this.link = """";
/*     */     } else {
/* 344 */       System.arraycopy(tmp, 10, linkArray, 0, linkArray.length);
/* 345 */       this.link = new String(linkArray);
/*     */     } 
/* 347 */     setDirectory(((newMode & 0x4000) != 0));
/* 348 */     setMode(newMode);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected int getMode(int mode) {
/* 357 */     int type = 32768;
/* 358 */     if (isLink()) {
/* 359 */       type = 40960;
/* 360 */     } else if (isDirectory()) {
/* 361 */       type = 16384;
/*     */     } 
/* 363 */     return type | mode & 0xFFF;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\AsiExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ExtraFieldUtils,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExtraFieldUtils
/*     */ {
/*  77 */   private static Hashtable implementations = new Hashtable(); static  {
/*  78 */     register(AsiExtraField.class);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void register(Class c) {
/*     */     try {
/*  91 */       ZipExtraField ze = c.newInstance();
/*  92 */       implementations.put(ze.getHeaderId(), c);
/*     */     } catch (ClassCastException cc) {
/*  94 */       throw new RuntimeException(c + "" doesn't implement ZipExtraField"");
/*     */     } catch (InstantiationException ie) {
/*     */       
/*  97 */       throw new RuntimeException(c + "" is not a concrete class"");
/*     */     } catch (IllegalAccessException ie) {
/*  99 */       throw new RuntimeException(c + ""'s no-arg constructor is not public"");
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField createExtraField(ZipShort headerId) throws InstantiationException, IllegalAccessException {
/* 112 */     Class c = (Class)implementations.get(headerId);
/* 113 */     if (c != null) {
/* 114 */       return c.newInstance();
/*     */     }
/* 116 */     UnrecognizedExtraField u = new UnrecognizedExtraField();
/* 117 */     u.setHeaderId(headerId);
/* 118 */     return u;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ZipExtraField[] parse(byte[] data) throws ZipException {
/* 128 */     Vector v = new Vector();
/* 129 */     int start = 0;
/* 130 */     while (start <= data.length - 4) {
/* 131 */       ZipShort headerId = new ZipShort(data, start);
/* 132 */       int length = (new ZipShort(data, start + 2)).getValue();
/* 133 */       if (start + 4 + length > data.length) {
/* 134 */         throw new ZipException(""data starting at "" + start + "" is in unknown format"");
/*     */       }
/*     */       
/*     */       try {
/* 138 */         ZipExtraField ze = createExtraField(headerId);
/* 139 */         ze.parseFromLocalFileData(data, start + 4, length);
/* 140 */         v.addElement(ze);
/*     */       } catch (InstantiationException ie) {
/* 142 */         throw new ZipException(ie.getMessage());
/*     */       } catch (IllegalAccessException iae) {
/* 144 */         throw new ZipException(iae.getMessage());
/*     */       } 
/* 146 */       start += length + 4;
/*     */     } 
/* 148 */     if (start != data.length) {
/* 149 */       throw new ZipException(""data starting at "" + start + "" is in unknown format"");
/*     */     }
/*     */ 
/*     */     
/* 153 */     ZipExtraField[] result = new ZipExtraField[v.size()];
/* 154 */     v.copyInto((Object[])result);
/* 155 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeLocalFileDataData(ZipExtraField[] data) {
/* 164 */     int sum = 4 * data.length;
/* 165 */     for (int i = 0; i < data.length; i++) {
/* 166 */       sum += data[i].getLocalFileDataLength().getValue();
/*     */     }
/* 168 */     byte[] result = new byte[sum];
/* 169 */     int start = 0;
/* 170 */     for (int i = 0; i < data.length; i++) {
/* 171 */       System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2);
/*     */       
/* 173 */       System.arraycopy(data[i].getLocalFileDataLength().getBytes(), 0, result, start + 2, 2);
/*     */       
/* 175 */       byte[] local = data[i].getLocalFileDataData();
/* 176 */       System.arraycopy(local, 0, result, start + 4, local.length);
/* 177 */       start += local.length + 4;
/*     */     } 
/* 179 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) {
/* 188 */     int sum = 4 * data.length;
/* 189 */     for (int i = 0; i < data.length; i++) {
/* 190 */       sum += data[i].getCentralDirectoryLength().getValue();
/*     */     }
/* 192 */     byte[] result = new byte[sum];
/* 193 */     int start = 0;
/* 194 */     for (int i = 0; i < data.length; i++) {
/* 195 */       System.arraycopy(data[i].getHeaderId().getBytes(), 0, result, start, 2);
/*     */       
/* 197 */       System.arraycopy(data[i].getCentralDirectoryLength().getBytes(), 0, result, start + 2, 2);
/*     */       
/* 199 */       byte[] local = data[i].getCentralDirectoryData();
/* 200 */       System.arraycopy(local, 0, result, start + 4, local.length);
/* 201 */       start += local.length + 4;
/*     */     } 
/* 203 */     return result;
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ExtraFieldUtils.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnixStat,"package org.apache.tools.zip;
public interface UnixStat {
  public static final int PERM_MASK = 4095;
  public static final int LINK_FLAG = 40960;
  public static final int FILE_FLAG = 32768;
  public static final int DIR_FLAG = 16384;
  public static final int DEFAULT_LINK_PERM = 511;
  public static final int DEFAULT_DIR_PERM = 493;
  public static final int DEFAULT_FILE_PERM = 420;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\UnixStat.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.UnrecognizedExtraField,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class UnrecognizedExtraField
/*     */   implements ZipExtraField
/*     */ {
/*     */   private ZipShort headerId;
/*     */   private byte[] localData;
/*     */   private byte[] centralData;
/*     */   
/*  77 */   public void setHeaderId(ZipShort headerId) { this.headerId = headerId; }
/*     */ 
/*     */ 
/*     */   
/*  81 */   public ZipShort getHeaderId() { return this.headerId; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  93 */   public void setLocalFileDataData(byte[] data) { this.localData = data; }
/*     */ 
/*     */ 
/*     */   
/*  97 */   public ZipShort getLocalFileDataLength() { return new ZipShort(this.localData.length); }
/*     */ 
/*     */ 
/*     */   
/* 101 */   public byte[] getLocalFileDataData() { return this.localData; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 113 */   public void setCentralDirectoryData(byte[] data) { this.centralData = data; }
/*     */ 
/*     */   
/*     */   public ZipShort getCentralDirectoryLength() {
/* 117 */     if (this.centralData != null) {
/* 118 */       return new ZipShort(this.centralData.length);
/*     */     }
/* 120 */     return getLocalFileDataLength();
/*     */   }
/*     */   
/*     */   public byte[] getCentralDirectoryData() {
/* 124 */     if (this.centralData != null) {
/* 125 */       return this.centralData;
/*     */     }
/* 127 */     return getLocalFileDataData();
/*     */   }
/*     */   
/*     */   public void parseFromLocalFileData(byte[] data, int offset, int length) {
/* 131 */     byte[] tmp = new byte[length];
/* 132 */     System.arraycopy(data, offset, tmp, 0, length);
/* 133 */     setLocalFileDataData(tmp);
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\UnrecognizedExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipEntry,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.lang.reflect.InvocationTargetException;
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.NoSuchElementException;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.ZipEntry;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipEntry
/*     */   extends ZipEntry
/*     */ {
/*  71 */   private int internalAttributes = 0;
/*  72 */   private long externalAttributes = 0L;
/*  73 */   private Vector extraFields = new Vector();
/*     */ 
/*     */   
/*     */   private Long compressedSize;
/*     */ 
/*     */   
/*     */   public ZipEntry(String name)
/*     */   {
/*  81 */     super(name);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 302 */     this.compressedSize = null; } public ZipEntry(ZipEntry entry) throws ZipException { this(entry); setInternalAttributes(entry.getInternalAttributes()); setExternalAttributes(entry.getExternalAttributes()); setExtraFields(entry.getExtraFields()); } public Object clone() { ZipEntry e = null; try { e = new ZipEntry((ZipEntry)super.clone()); } catch (Exception ex) { ex.printStackTrace(); }  e.setInternalAttributes(getInternalAttributes()); e.setExternalAttributes(getExternalAttributes()); e.setExtraFields(getExtraFields()); return e; } public int getInternalAttributes() { return this.internalAttributes; } public void setInternalAttributes(int value) { this.internalAttributes = value; } public ZipEntry(ZipEntry entry) throws ZipException { super(entry.getName()); this.compressedSize = null; setComment(entry.getComment()); setMethod(entry.getMethod()); setTime(entry.getTime()); long size = entry.getSize(); if (size > 0L)
/*     */       setSize(size);  long cSize = entry.getCompressedSize(); if (cSize > 0L)
/*     */       setComprSize(cSize);  long crc = entry.getCrc(); if (crc > 0L)
/*     */       setCrc(crc);  byte[] extra = entry.getExtra(); if (extra != null) {
/*     */       setExtraFields(ExtraFieldUtils.parse(extra));
/*     */     } else {
/*     */       setExtra();
/*     */     }  }
/*     */   public long getExternalAttributes() { return this.externalAttributes; } public void setExternalAttributes(long value) { this.externalAttributes = value; } public void setExtraFields(ZipExtraField[] fields) { this.extraFields.removeAllElements();
/*     */     for (int i = 0; i < fields.length; i++)
/*     */       this.extraFields.addElement(fields[i]); 
/* 313 */     setExtra(); } public void setComprSize(long size) { if (haveSetCompressedSize())
/* 314 */     { performSetCompressedSize(this, size); }
/*     */     else
/* 316 */     { this.compressedSize = new Long(size); }  } public ZipExtraField[] getExtraFields() { ZipExtraField[] result = new ZipExtraField[this.extraFields.size()]; this.extraFields.copyInto((Object[])result); return result; } public void addExtraField(ZipExtraField ze) { ZipShort type = ze.getHeaderId(); boolean done = false; for (int i = 0; !done && i < this.extraFields.size(); i++) { if (((ZipExtraField)this.extraFields.elementAt(i)).getHeaderId().equals(type)) { this.extraFields.setElementAt(ze, i); done = true; }  }  if (!done)
/*     */       this.extraFields.addElement(ze);  setExtra(); } public void removeExtraField(ZipShort type) { boolean done = false; for (int i = 0; !done && i < this.extraFields.size(); i++) { if (((ZipExtraField)this.extraFields.elementAt(i)).getHeaderId().equals(type)) { this.extraFields.removeElementAt(i); done = true; }  }
/*     */      if (!done)
/*     */       throw new NoSuchElementException();  setExtra(); }
/*     */   public void setExtra(byte[] extra) throws RuntimeException { try { setExtraFields(ExtraFieldUtils.parse(extra)); }
/*     */     catch (Exception e) { throw new RuntimeException(e.getMessage()); }
/*     */      }
/*     */   protected void setExtra() { super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields())); }
/*     */   public byte[] getLocalFileDataExtra() { byte[] extra = getExtra(); return (extra != null) ? extra : new byte[0]; }
/*     */   public byte[] getCentralDirectoryExtra() { return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields()); }
/* 326 */   public long getCompressedSize() { if (this.compressedSize != null)
/*     */     {
/* 328 */       return this.compressedSize.longValue();
/*     */     }
/* 330 */     return super.getCompressedSize(); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 338 */   private static Method setCompressedSizeMethod = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 344 */   private static Object lockReflection = new Object();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean triedToGetMethod = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static boolean haveSetCompressedSize() {
/* 358 */     checkSCS();
/* 359 */     return (setCompressedSizeMethod != null);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void performSetCompressedSize(ZipEntry ze, long size) {
/* 368 */     Long[] s = { new Long(size) };
/*     */     try {
/* 370 */       setCompressedSizeMethod.invoke(ze, (Object[])s);
/*     */     } catch (InvocationTargetException ite) {
/* 372 */       Throwable nested = ite.getTargetException();
/* 373 */       throw new RuntimeException(""Exception setting the compressed size of "" + ze + "": "" + nested.getMessage());
/*     */     }
/*     */     catch (Throwable other) {
/*     */       
/* 377 */       throw new RuntimeException(""Exception setting the compressed size of "" + ze + "": "" + other.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static void checkSCS() {
/* 389 */     if (!triedToGetMethod)
/* 390 */       synchronized (lockReflection) {
/* 391 */         triedToGetMethod = true;
/*     */         try {
/* 393 */           setCompressedSizeMethod = ZipEntry.class.getMethod(""setCompressedSize"", new Class[] { long.class });
/*     */         
/*     */         }
/* 396 */         catch (NoSuchMethodException nse) {}
/*     */       }  
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ZipEntry.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipExtraField,"package org.apache.tools.zip;
import java.util.zip.ZipException;
public interface ZipExtraField {
  ZipShort getHeaderId();
  ZipShort getLocalFileDataLength();
  ZipShort getCentralDirectoryLength();
  byte[] getLocalFileDataData();
  byte[] getCentralDirectoryData();
  void parseFromLocalFileData(byte[] paramArrayOfbyte, int paramInt1, int paramInt2) throws ZipException;
}
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ZipExtraField.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipLong,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ZipLong
/*     */   implements Cloneable
/*     */ {
/*     */   private long value;
/*     */   
/*  74 */   public ZipLong(long value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipLong(byte[] bytes) { this(bytes, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipLong(byte[] bytes, int offset) {
/*  92 */     this.value = (bytes[offset + 3] << 24) & 0xFF000000L;
/*  93 */     this.value += (bytes[offset + 2] << 16 & 0xFF0000);
/*  94 */     this.value += (bytes[offset + 1] << 8 & 0xFF00);
/*  95 */     this.value += (bytes[offset] & 0xFF);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 104 */     byte[] result = new byte[4];
/* 105 */     result[0] = (byte)(int)(this.value & 0xFFL);
/* 106 */     result[1] = (byte)(int)((this.value & 0xFF00L) >> 8L);
/* 107 */     result[2] = (byte)(int)((this.value & 0xFF0000L) >> 16L);
/* 108 */     result[3] = (byte)(int)((this.value & 0xFF000000L) >> 24L);
/* 109 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 118 */   public long getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object o) {
/* 127 */     if (o == null || !(o instanceof ZipLong)) {
/* 128 */       return false;
/*     */     }
/* 130 */     return (this.value == ((ZipLong)o).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 139 */   public int hashCode() { return (int)this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ZipLong.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipOutputStream,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.io.UnsupportedEncodingException;
/*     */ import java.util.Date;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Vector;
/*     */ import java.util.zip.CRC32;
/*     */ import java.util.zip.Deflater;
/*     */ import java.util.zip.DeflaterOutputStream;
/*     */ import java.util.zip.ZipException;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ZipOutputStream
/*     */   extends DeflaterOutputStream
/*     */ {
/*     */   private ZipEntry entry;
/*  99 */   private String comment = """";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 106 */   private int level = -1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean hasCompressionLevelChanged = false;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 121 */   private int method = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 128 */   private Vector entries = new Vector();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   private CRC32 crc = new CRC32();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 142 */   private long written = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 149 */   private long dataStart = 0L;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 156 */   private ZipLong cdOffset = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 163 */   private ZipLong cdLength = new ZipLong(0L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 170 */   private static final byte[] ZERO = new byte[] { 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 177 */   private static final byte[] LZERO = new byte[] { 0, 0, 0, 0 };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 184 */   private Hashtable offsets = new Hashtable();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 195 */   private String encoding = null;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int DEFLATED = 8;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static final int STORED = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 217 */   public ZipOutputStream(OutputStream out) { super(out, new Deflater(-1, true)); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 230 */   public void setEncoding(String encoding) { this.encoding = encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 241 */   public String getEncoding() { return this.encoding; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void finish() throws IOException {
/* 257 */     closeEntry();
/* 258 */     this.cdOffset = new ZipLong(this.written);
/* 259 */     for (int i = 0; i < this.entries.size(); i++) {
/* 260 */       writeCentralFileHeader(this.entries.elementAt(i));
/*     */     }
/* 262 */     this.cdLength = new ZipLong(this.written - this.cdOffset.getValue());
/* 263 */     writeCentralDirectoryEnd();
/* 264 */     this.offsets.clear();
/* 265 */     this.entries.removeAllElements();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void closeEntry() throws IOException {
/* 274 */     if (this.entry == null) {
/*     */       return;
/*     */     }
/*     */     
/* 278 */     long realCrc = this.crc.getValue();
/* 279 */     this.crc.reset();
/*     */     
/* 281 */     if (this.entry.getMethod() == 8) {
/* 282 */       this.def.finish();
/* 283 */       while (!this.def.finished()) {
/* 284 */         deflate();
/*     */       }
/*     */       
/* 287 */       this.entry.setSize(this.def.getTotalIn());
/* 288 */       this.entry.setComprSize(this.def.getTotalOut());
/* 289 */       this.entry.setCrc(realCrc);
/*     */       
/* 291 */       this.def.reset();
/*     */       
/* 293 */       this.written += this.entry.getCompressedSize();
/*     */     } else {
/* 295 */       if (this.entry.getCrc() != realCrc) {
/* 296 */         throw new ZipException(""bad CRC checksum for entry "" + this.entry.getName() + "": "" + Long.toHexString(this.entry.getCrc()) + "" instead of "" + Long.toHexString(realCrc));
/*     */       }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 303 */       if (this.entry.getSize() != this.written - this.dataStart) {
/* 304 */         throw new ZipException(""bad size for entry "" + this.entry.getName() + "": "" + this.entry.getSize() + "" instead of "" + (this.written - this.dataStart));
/*     */       }
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 313 */     writeDataDescriptor(this.entry);
/* 314 */     this.entry = null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void putNextEntry(ZipEntry ze) throws IOException {
/* 323 */     closeEntry();
/*     */     
/* 325 */     this.entry = ze;
/* 326 */     this.entries.addElement(this.entry);
/*     */     
/* 328 */     if (this.entry.getMethod() == -1) {
/* 329 */       this.entry.setMethod(this.method);
/*     */     }
/*     */     
/* 332 */     if (this.entry.getTime() == -1L) {
/* 333 */       this.entry.setTime(System.currentTimeMillis());
/*     */     }
/*     */     
/* 336 */     if (this.entry.getMethod() == 0) {
/* 337 */       if (this.entry.getSize() == -1L) {
/* 338 */         throw new ZipException(""uncompressed size is required for STORED method"");
/*     */       }
/* 340 */       if (this.entry.getCrc() == -1L) {
/* 341 */         throw new ZipException(""crc checksum is required for STORED method"");
/*     */       }
/* 343 */       this.entry.setComprSize(this.entry.getSize());
/* 344 */     } else if (this.hasCompressionLevelChanged) {
/* 345 */       this.def.setLevel(this.level);
/* 346 */       this.hasCompressionLevelChanged = false;
/*     */     } 
/* 348 */     writeLocalFileHeader(this.entry);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 357 */   public void setComment(String comment) { this.comment = comment; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void setLevel(int level) {
/* 368 */     this.hasCompressionLevelChanged = (this.level != level);
/* 369 */     this.level = level;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 380 */   public void setMethod(int method) { this.method = method; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void write(byte[] b, int offset, int length) throws IOException {
/* 390 */     if (this.entry.getMethod() == 8) {
/* 391 */       super.write(b, offset, length);
/*     */     } else {
/* 393 */       this.out.write(b, offset, length);
/* 394 */       this.written += length;
/*     */     } 
/* 396 */     this.crc.update(b, offset, length);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 407 */   protected static final ZipLong LFH_SIG = new ZipLong(67324752L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 413 */   protected static final ZipLong DD_SIG = new ZipLong(134695760L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 419 */   protected static final ZipLong CFH_SIG = new ZipLong(33639248L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 425 */   protected static final ZipLong EOCD_SIG = new ZipLong(101010256L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeLocalFileHeader(ZipEntry ze) throws IOException {
/* 433 */     this.offsets.put(ze, new ZipLong(this.written));
/*     */     
/* 435 */     this.out.write(LFH_SIG.getBytes());
/* 436 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */     
/* 440 */     if (ze.getMethod() == 8) {
/*     */ 
/*     */       
/* 443 */       this.out.write((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 446 */       this.out.write((new ZipShort(8)).getBytes());
/*     */     } else {
/* 448 */       this.out.write((new ZipShort(10)).getBytes());
/* 449 */       this.out.write(ZERO);
/*     */     } 
/* 451 */     this.written += 4L;
/*     */ 
/*     */     
/* 454 */     this.out.write((new ZipShort(ze.getMethod())).getBytes());
/* 455 */     this.written += 2L;
/*     */ 
/*     */     
/* 458 */     this.out.write(toDosTime(new Date(ze.getTime())).getBytes());
/* 459 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 464 */     if (ze.getMethod() == 8) {
/* 465 */       this.out.write(LZERO);
/* 466 */       this.out.write(LZERO);
/* 467 */       this.out.write(LZERO);
/*     */     } else {
/* 469 */       this.out.write((new ZipLong(ze.getCrc())).getBytes());
/* 470 */       this.out.write((new ZipLong(ze.getSize())).getBytes());
/* 471 */       this.out.write((new ZipLong(ze.getSize())).getBytes());
/*     */     } 
/* 473 */     this.written += 12L;
/*     */ 
/*     */     
/* 476 */     byte[] name = getBytes(ze.getName());
/* 477 */     this.out.write((new ZipShort(name.length)).getBytes());
/* 478 */     this.written += 2L;
/*     */ 
/*     */     
/* 481 */     byte[] extra = ze.getLocalFileDataExtra();
/* 482 */     this.out.write((new ZipShort(extra.length)).getBytes());
/* 483 */     this.written += 2L;
/*     */ 
/*     */     
/* 486 */     this.out.write(name);
/* 487 */     this.written += name.length;
/*     */ 
/*     */     
/* 490 */     this.out.write(extra);
/* 491 */     this.written += extra.length;
/*     */     
/* 493 */     this.dataStart = this.written;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeDataDescriptor(ZipEntry ze) throws IOException {
/* 502 */     if (ze.getMethod() != 8) {
/*     */       return;
/*     */     }
/* 505 */     this.out.write(DD_SIG.getBytes());
/* 506 */     this.out.write((new ZipLong(this.entry.getCrc())).getBytes());
/* 507 */     this.out.write((new ZipLong(this.entry.getCompressedSize())).getBytes());
/* 508 */     this.out.write((new ZipLong(this.entry.getSize())).getBytes());
/* 509 */     this.written += 16L;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralFileHeader(ZipEntry ze) throws IOException {
/* 518 */     this.out.write(CFH_SIG.getBytes());
/* 519 */     this.written += 4L;
/*     */ 
/*     */     
/* 522 */     this.out.write((new ZipShort(20)).getBytes());
/* 523 */     this.written += 2L;
/*     */ 
/*     */ 
/*     */     
/* 527 */     if (ze.getMethod() == 8) {
/*     */ 
/*     */       
/* 530 */       this.out.write((new ZipShort(20)).getBytes());
/*     */ 
/*     */       
/* 533 */       this.out.write((new ZipShort(8)).getBytes());
/*     */     } else {
/* 535 */       this.out.write((new ZipShort(10)).getBytes());
/* 536 */       this.out.write(ZERO);
/*     */     } 
/* 538 */     this.written += 4L;
/*     */ 
/*     */     
/* 541 */     this.out.write((new ZipShort(ze.getMethod())).getBytes());
/* 542 */     this.written += 2L;
/*     */ 
/*     */     
/* 545 */     this.out.write(toDosTime(new Date(ze.getTime())).getBytes());
/* 546 */     this.written += 4L;
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 551 */     this.out.write((new ZipLong(ze.getCrc())).getBytes());
/* 552 */     this.out.write((new ZipLong(ze.getCompressedSize())).getBytes());
/* 553 */     this.out.write((new ZipLong(ze.getSize())).getBytes());
/* 554 */     this.written += 12L;
/*     */ 
/*     */     
/* 557 */     byte[] name = getBytes(ze.getName());
/* 558 */     this.out.write((new ZipShort(name.length)).getBytes());
/* 559 */     this.written += 2L;
/*     */ 
/*     */     
/* 562 */     byte[] extra = ze.getCentralDirectoryExtra();
/* 563 */     this.out.write((new ZipShort(extra.length)).getBytes());
/* 564 */     this.written += 2L;
/*     */ 
/*     */     
/* 567 */     String comm = ze.getComment();
/* 568 */     if (comm == null) {
/* 569 */       comm = """";
/*     */     }
/* 571 */     byte[] comment = getBytes(comm);
/* 572 */     this.out.write((new ZipShort(comment.length)).getBytes());
/* 573 */     this.written += 2L;
/*     */ 
/*     */     
/* 576 */     this.out.write(ZERO);
/* 577 */     this.written += 2L;
/*     */ 
/*     */     
/* 580 */     this.out.write((new ZipShort(ze.getInternalAttributes())).getBytes());
/* 581 */     this.written += 2L;
/*     */ 
/*     */     
/* 584 */     this.out.write((new ZipLong(ze.getExternalAttributes())).getBytes());
/* 585 */     this.written += 4L;
/*     */ 
/*     */     
/* 588 */     this.out.write(((ZipLong)this.offsets.get(ze)).getBytes());
/* 589 */     this.written += 4L;
/*     */ 
/*     */     
/* 592 */     this.out.write(name);
/* 593 */     this.written += name.length;
/*     */ 
/*     */     
/* 596 */     this.out.write(extra);
/* 597 */     this.written += extra.length;
/*     */ 
/*     */     
/* 600 */     this.out.write(comment);
/* 601 */     this.written += comment.length;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected void writeCentralDirectoryEnd() throws IOException {
/* 610 */     this.out.write(EOCD_SIG.getBytes());
/*     */ 
/*     */     
/* 613 */     this.out.write(ZERO);
/* 614 */     this.out.write(ZERO);
/*     */ 
/*     */     
/* 617 */     byte[] num = (new ZipShort(this.entries.size())).getBytes();
/* 618 */     this.out.write(num);
/* 619 */     this.out.write(num);
/*     */ 
/*     */     
/* 622 */     this.out.write(this.cdLength.getBytes());
/* 623 */     this.out.write(this.cdOffset.getBytes());
/*     */ 
/*     */     
/* 626 */     byte[] data = getBytes(this.comment);
/* 627 */     this.out.write((new ZipShort(data.length)).getBytes());
/* 628 */     this.out.write(data);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 636 */   private static final ZipLong DOS_TIME_MIN = new ZipLong(8448L);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static ZipLong toDosTime(Date time) {
/* 646 */     int year = time.getYear() + 1900;
/* 647 */     int month = time.getMonth() + 1;
/* 648 */     if (year < 1980) {
/* 649 */       return DOS_TIME_MIN;
/*     */     }
/* 651 */     long value = (year - 1980 << 25 | month << 21 | time.getDate() << 16 | time.getHours() << 11 | time.getMinutes() << 5 | time.getSeconds() >> 1);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 658 */     byte[] result = new byte[4];
/* 659 */     result[0] = (byte)(int)(value & 0xFFL);
/* 660 */     result[1] = (byte)(int)((value & 0xFF00L) >> 8L);
/* 661 */     result[2] = (byte)(int)((value & 0xFF0000L) >> 16L);
/* 662 */     result[3] = (byte)(int)((value & 0xFF000000L) >> 24L);
/* 663 */     return new ZipLong(result);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected byte[] getBytes(String name) throws ZipException {
/* 673 */     if (this.encoding == null) {
/* 674 */       return name.getBytes();
/*     */     }
/*     */     try {
/* 677 */       return name.getBytes(this.encoding);
/*     */     } catch (UnsupportedEncodingException uee) {
/* 679 */       throw new ZipException(uee.getMessage());
/*     */     } 
/*     */   }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ZipOutputStream.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
org.apache.tools.zip.ZipShort,"/*     */ package org.apache.tools.zip;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ZipShort
/*     */   implements Cloneable
/*     */ {
/*     */   private int value;
/*     */   
/*  74 */   public ZipShort(int value) { this.value = value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  83 */   public ZipShort(byte[] bytes) { this(bytes, 0); }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ZipShort(byte[] bytes, int offset) {
/*  92 */     this.value = bytes[offset + 1] << 8 & 0xFF00;
/*  93 */     this.value += bytes[offset] & 0xFF;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public byte[] getBytes() {
/* 102 */     byte[] result = new byte[2];
/* 103 */     result[0] = (byte)(this.value & 0xFF);
/* 104 */     result[1] = (byte)((this.value & 0xFF00) >> 8);
/* 105 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 114 */   public int getValue() { return this.value; }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean equals(Object o) {
/* 123 */     if (o == null || !(o instanceof ZipShort)) {
/* 124 */       return false;
/*     */     }
/* 126 */     return (this.value == ((ZipShort)o).getValue());
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 135 */   public int hashCode() { return this.value; }
/*     */ }
/* Location:              D:\资源包\ant-1.5.jar!\org\apache\tools\zip\ZipShort.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.2
 */"
